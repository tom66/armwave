   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 79 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 80 9 is_stmt 1 view .LVU46
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 84 9 view .LVU47
 299              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 84 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 87 13 is_stmt 1 view .LVU50
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 101 17 view .LVU51
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 106 17 view .LVU52
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 101 17 view .LVU53
 317              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 101 17 view .LVU55
 319              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 101 17 view .LVU57
 321              		.loc 1 106 17 view .LVU58
 322              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 323              		.loc 1 87 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 102 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 330              		.loc 1 87 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 102 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 337              		.loc 1 94 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 340              		.loc 1 87 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 89 13 is_stmt 1 view .LVU65
  91:armwave.c     ****                 
 344              		.loc 1 91 17 view .LVU66
  94:armwave.c     ****                     continue;
 345              		.loc 1 94 17 view .LVU67
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 351              		.loc 1 94 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 359              		.loc 1 107 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 363              		.loc 1 94 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 366              		.loc 1 102 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 369              		.loc 1 106 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 372              		.loc 1 94 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 375              		.loc 1 102 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 378              		.loc 1 106 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 381              		.loc 1 102 74 view .LVU78
 382 0160 2228A0E1 		lsr	r2, r2, #16	@ tmp240, tmp238,
 383              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 384              		.loc 1 106 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 387              		.loc 1 94 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 391              		.loc 1 94 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 396              		.loc 1 106 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 399              		.loc 1 94 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 402              		.loc 1 106 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 107 17 is_stmt 1 view .LVU85
  91:armwave.c     ****                 
 407              		.loc 1 91 17 view .LVU86
  94:armwave.c     ****                     continue;
 408              		.loc 1 94 17 view .LVU87
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 413              		.loc 1 102 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 422              		.loc 1 102 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 425              		.loc 1 94 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 429              		.loc 1 102 74 view .LVU94
 430 01a8 2998A0E1 		lsr	r9, r9, #16	@ tmp262, tmp260,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 442              		.loc 1 106 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 107 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  91:armwave.c     ****                 
 448              		.loc 1 91 17 view .LVU99
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 17 view .LVU100
 450              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 451              		.loc 1 94 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 454              		.loc 1 102 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 461              		.loc 1 106 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 464              		.loc 1 102 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 74 view .LVU107
 471 01e8 2888A0E1 		lsr	r8, r8, #16	@ tmp284, tmp282,
 472              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 473              		.loc 1 106 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 476              		.loc 1 94 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 480              		.loc 1 94 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 484              		.loc 1 106 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 490              		.loc 1 106 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 107 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  91:armwave.c     ****                 
 495              		.loc 1 91 17 view .LVU115
  94:armwave.c     ****                     continue;
 496              		.loc 1 94 17 view .LVU116
 497              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 498              		.loc 1 94 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 501              		.loc 1 102 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 74 view .LVU121
 511 0220 2778A0E1 		lsr	r7, r7, #16	@ tmp305, tmp303,
 512              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 513              		.loc 1 106 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 107 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 522              		.loc 1 84 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 529              		.loc 1 84 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 554              		.loc 1 111 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 111 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 577              		.loc 1 173 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 583              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 584              		.loc 1 179 5 view .LVU139
 585              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 586              		.loc 1 173 1 is_stmt 0 view .LVU140
 587 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 588              		.cfi_def_cfa_offset 36
 589              		.cfi_offset 4, -36
 590              		.cfi_offset 5, -32
 591              		.cfi_offset 6, -28
 592              		.cfi_offset 7, -24
 593              		.cfi_offset 8, -20
 594              		.cfi_offset 9, -16
 595              		.cfi_offset 10, -12
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 599              		.loc 1 183 5 view .LVU141
 600 026c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 601              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 179 15 view .LVU142
 603 0270 5C519FE5 		ldr	r5, .L51	@ tmp218,
 604              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 605              		.loc 1 173 1 view .LVU143
 606 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 607              		.cfi_def_cfa_offset 48
 608              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 609              		.loc 1 179 15 view .LVU144
 610 0278 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 611              	.LVL22:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 612              		.loc 1 180 5 is_stmt 1 view .LVU145
 181:armwave.c     **** 
 613              		.loc 1 181 5 view .LVU146
 614              		.loc 1 183 5 view .LVU147
 615 027c 4F00000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 616              		.loc 1 186 5 view .LVU148
 617              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 59 is_stmt 0 view .LVU149
 619 0280 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 620 0284 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 621              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 622              		.loc 1 186 5 view .LVU150
 623 0288 0010A0E3 		mov	r1, #0	@,
 624              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 625              		.loc 1 186 59 view .LVU151
 626 028c 920302E0 		mul	r2, r2, r3	@ tmp179, g_armwave_state.target_height, g_armwave_state.target_width
 627              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 628              		.loc 1 186 5 view .LVU152
 629 0290 0221A0E1 		lsl	r2, r2, #2	@, tmp179,
 630 0294 FEFFFFEB 		bl	memset		@
 631              	.LVL23:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 632              		.loc 1 188 5 is_stmt 1 view .LVU153
 633              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 634              		.loc 1 188 10 is_stmt 0 view .LVU154
 635 0298 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 636 029c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 637              	.LVL24:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 638              		.loc 1 191 5 is_stmt 1 view .LVU155
 639              		.loc 1 191 5 is_stmt 0 view .LVU156
 640 02a0 000058E3 		cmp	r8, #0	@ npix,
 641 02a4 0C0000DA 		ble	.L29		@,
 642              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 643              		.loc 1 204 52 view .LVU157
 644 02a8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 645              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 203 52 view .LVU158
 647 02ac FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 648              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 649              		.loc 1 226 57 view .LVU159
 650 02b0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 651              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 652              		.loc 1 204 52 view .LVU160
 653 02b4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 654              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 655              		.loc 1 205 52 view .LVU161
 656 02b8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 657              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 658              		.loc 1 191 11 view .LVU162
 659 02bc 0010A0E3 		mov	r1, #0	@ n,
 660              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 661              		.loc 1 205 52 view .LVU163
 662 02c0 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 663              	.LVL25:
 664              	.L36:
 195:armwave.c     **** 
 665              		.loc 1 195 9 is_stmt 1 view .LVU164
 666              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 667              		.loc 1 195 19 is_stmt 0 view .LVU165
 668 02c4 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 669              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 670              		.loc 1 197 9 is_stmt 1 view .LVU166
 671              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 672              		.loc 1 197 11 is_stmt 0 view .LVU167
 673 02c8 000053E3 		cmp	r3, #0	@ wave_word,
 674 02cc 0400001A 		bne	.L49		@,
 675              	.L32:
 676              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 677              		.loc 1 191 28 view .LVU168
 678 02d0 041081E2 		add	r1, r1, #4	@ n, n,
 679              	.LVL27:
 680              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 681              		.loc 1 191 5 view .LVU169
 682 02d4 010058E1 		cmp	r8, r1	@ npix, n
 683 02d8 F9FFFFCA 		bgt	.L36		@,
 684              	.LVL28:
 685              	.L29:
 686              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 687              		.loc 1 238 1 view .LVU170
 688 02dc 0CD08DE2 		add	sp, sp, #12	@,,
 689              		.cfi_remember_state
 690              		.cfi_def_cfa_offset 36
 691              		@ sp needed	@
 692 02e0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 693              	.LVL29:
 694              	.L49:
 695              		.cfi_restore_state
 696              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 202 19 view .LVU171
 698 02e4 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 699              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 700              		.loc 1 198 19 view .LVU172
 701 02e8 0070A0E3 		mov	r7, #0	@ w,
 702              	.LVL30:
 199:armwave.c     ****                 wave_word >>= 8;
 703              		.loc 1 199 17 is_stmt 1 view .LVU173
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU174
 705              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 706              		.loc 1 200 27 is_stmt 0 view .LVU175
 707 02ec 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 708              	.LVL31:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 709              		.loc 1 202 17 is_stmt 1 view .LVU176
 710              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 202 19 is_stmt 0 view .LVU177
 712 02f0 0500001A 		bne	.L50		@,
 713              	.L33:
 714              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 715              		.loc 1 198 32 view .LVU178
 716 02f4 017087E2 		add	r7, r7, #1	@ w, w,
 717              	.LVL32:
 718              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 719              		.loc 1 198 13 view .LVU179
 720 02f8 040057E3 		cmp	r7, #4	@ w,
 721 02fc F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 722              		.loc 1 199 17 is_stmt 1 view .LVU180
 723              	.LVL33:
 200:armwave.c     **** 
 724              		.loc 1 200 17 view .LVU181
 725              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 726              		.loc 1 202 19 is_stmt 0 view .LVU182
 727 0300 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 728              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 729              		.loc 1 200 27 view .LVU183
 730 0304 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 731              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 732              		.loc 1 202 17 is_stmt 1 view .LVU184
 733              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 202 19 is_stmt 0 view .LVU185
 735 0308 F9FFFF0A 		beq	.L33		@,
 736              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 737              		.loc 1 203 21 is_stmt 1 view .LVU186
 738              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 739              		.loc 1 204 21 view .LVU187
 205:armwave.c     **** 
 740              		.loc 1 205 21 view .LVU188
 207:armwave.c     ****                     g = MIN(gg, 255);
 741              		.loc 1 207 21 view .LVU189
 208:armwave.c     ****                     b = MIN(bb, 255);
 742              		.loc 1 208 21 view .LVU190
 209:armwave.c     **** 
 743              		.loc 1 209 21 view .LVU191
 212:armwave.c     **** 
 744              		.loc 1 212 21 view .LVU192
 745              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 746              		.loc 1 205 55 is_stmt 0 view .LVU193
 747 030c 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 748 0310 07E081E0 		add	lr, r1, r7	@ _126, n, w
 749 0314 90020AE0 		mul	r10, r0, r2	@ tmp196, _18, _12
 750              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 751              		.loc 1 226 32 view .LVU194
 752 0318 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 753              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 754              		.loc 1 227 41 view .LVU195
 755 031c 01C080E2 		add	ip, r0, #1	@ tmp211, _30,
 756              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 757              		.loc 1 226 40 view .LVU196
 758 0320 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 759              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 760              		.loc 1 227 41 view .LVU197
 761 0324 10CA07EE 		vmov	s14, ip	@ int	@ tmp211, tmp211
 762              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 763              		.loc 1 204 55 view .LVU198
 764 0328 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 765              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 766              		.loc 1 205 24 view .LVU199
 767 032c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp196,
 768              	.LVL36:
 769              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 770              		.loc 1 226 40 view .LVU200
 771 0330 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp209, _30
 772              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 773              		.loc 1 227 46 view .LVU201
 774 0334 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp212, tmp211
 775              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 776              		.loc 1 204 55 view .LVU202
 777 0338 90020CE0 		mul	ip, r0, r2	@ tmp200, _15, _12
 778              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 779              		.loc 1 203 55 view .LVU203
 780 033c 920B02E0 		mul	r2, r2, fp	@ tmp206, _12, _11
 781              	.LVL37:
 782              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 783              		.loc 1 209 25 view .LVU204
 784 0340 FF005AE3 		cmp	r10, #255	@ bb,
 785              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 786              		.loc 1 204 24 view .LVU205
 787 0344 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp200,
 788              	.LVL38:
 789              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 790              		.loc 1 226 40 view .LVU206
 791 0348 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp210, tmp209, _32
 792              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 793              		.loc 1 227 46 view .LVU207
 794 034c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp213, tmp212, _32
 795              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 796              		.loc 1 203 24 view .LVU208
 797 0350 4204A0E1 		asr	r0, r2, #8	@ rr, tmp206,
 798              	.LVL39:
 799              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 800              		.loc 1 209 25 view .LVU209
 801 0354 FFA0A0A3 		movge	r10, #255	@ bb,
 802              	.LVL40:
 803              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 804              		.loc 1 208 25 view .LVU210
 805 0358 FF005CE3 		cmp	ip, #255	@ gg,
 806 035c FFC0A0A3 		movge	ip, #255	@ gg,
 807              	.LVL41:
 808              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 809              		.loc 1 207 25 view .LVU211
 810 0360 FF0050E3 		cmp	r0, #255	@ rr,
 811              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 812              		.loc 1 212 56 view .LVU212
 813 0364 0CC4A0E1 		lsl	ip, ip, #8	@ tmp201, gg,
 814              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 815              		.loc 1 226 24 view .LVU213
 816 0368 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp210
 817              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 207 25 view .LVU214
 819 036c FF00A0A3 		movge	r0, #255	@ rr,
 820              	.LVL42:
 821              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 822              		.loc 1 212 44 view .LVU215
 823 0370 0AA8A0E1 		lsl	r10, r10, #16	@ tmp197, bb,
 824 0374 FFA80AE2 		and	r10, r10, #16711680	@ tmp198, tmp197,
 825              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 826              		.loc 1 212 56 view .LVU216
 827 0378 7CC0FFE6 		uxth	ip, ip	@ tmp202, tmp201
 828              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 829              		.loc 1 212 51 view .LVU217
 830 037c 0CC08AE1 		orr	ip, r10, ip	@ tmp204, tmp198, tmp202
 831              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 832              		.loc 1 212 62 view .LVU218
 833 0380 7000EFE6 		uxtb	r0, r0	@ rr, rr
 834 0384 00008CE1 		orr	r0, ip, r0	@ tmp208, tmp204, rr
 835              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 836              		.loc 1 226 24 view .LVU219
 837 0388 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 838              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 839              		.loc 1 227 24 view .LVU220
 840 038c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp213
 841              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 842              		.loc 1 212 26 view .LVU221
 843 0390 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp208,
 844              	.LVL43:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 845              		.loc 1 225 21 is_stmt 1 view .LVU222
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 846              		.loc 1 226 21 view .LVU223
 227:armwave.c     ****                     xx = (nsub >> 8);
 847              		.loc 1 227 21 view .LVU224
 848              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 849              		.loc 1 228 32 is_stmt 0 view .LVU225
 850 0394 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 851              	.LVL44:
 852              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 853              		.loc 1 227 24 view .LVU226
 854 0398 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 855              	.LVL45:
 228:armwave.c     **** 
 856              		.loc 1 228 21 is_stmt 1 view .LVU227
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 857              		.loc 1 230 21 view .LVU228
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 858              		.loc 1 230 21 is_stmt 0 view .LVU229
 859 039c 090052E1 		cmp	r2, r9	@ yy, ye
 860 03a0 D3FFFF2A 		bcs	.L33		@,
 861              	.LVL46:
 862              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 863              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU230
 232:armwave.c     ****                     }
 864              		.loc 1 232 25 discriminator 3 view .LVU231
 865              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 866              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU232
 867 03a4 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 868              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 869              		.loc 1 232 43 discriminator 3 view .LVU233
 870 03a8 90E220E0 		mla	r0, r0, r2, lr	@ tmp217, g_armwave_state.target_width, yy, xx
 871              	.LVL47:
 872              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 230 42 discriminator 3 view .LVU234
 874 03ac 012082E2 		add	r2, r2, #1	@ yy, yy,
 875              	.LVL48:
 876              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 877              		.loc 1 230 21 discriminator 3 view .LVU235
 878 03b0 020059E1 		cmp	r9, r2	@ ye, yy
 879              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 880              		.loc 1 232 53 discriminator 3 view .LVU236
 881 03b4 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 882              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 883              		.loc 1 230 21 discriminator 3 view .LVU237
 884 03b8 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 885              		.loc 1 230 21 discriminator 3 view .LVU238
 886 03bc CCFFFFEA 		b	.L33		@
 887              	.LVL49:
 888              	.L48:
 183:armwave.c     **** 
 889              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU239
 890 03c0 10309FE5 		ldr	r3, .L51+4	@,
 891 03c4 B720A0E3 		mov	r2, #183	@,
 892 03c8 0C109FE5 		ldr	r1, .L51+8	@,
 893 03cc 0C009FE5 		ldr	r0, .L51+12	@,
 894              	.LVL50:
 183:armwave.c     **** 
 895              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU240
 896 03d0 FEFFFFEB 		bl	__assert_fail		@
 897              	.LVL51:
 898              	.L52:
 899              		.align	2
 900              	.L51:
 901 03d4 00000000 		.word	g_armwave_state
 902 03d8 00000000 		.word	.LANCHOR0
 903 03dc 20000000 		.word	.LC2
 904 03e0 2C000000 		.word	.LC3
 905              		.cfi_endproc
 906              	.LFE60:
 908              		.global	__aeabi_idiv
 909              		.align	2
 910              		.global	armwave_generate
 911              		.syntax unified
 912              		.arm
 913              		.fpu vfp
 915              	armwave_generate:
 916              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 917              		.loc 1 244 1 is_stmt 1 view -0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 16
 920              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 921              		.loc 1 245 5 view .LVU242
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 922              		.loc 1 246 5 view .LVU243
 923              	.LVL52:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 924              		.loc 1 248 5 view .LVU244
 925              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 926              		.loc 1 244 1 is_stmt 0 view .LVU245
 927 03e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 928              		.cfi_def_cfa_offset 36
 929              		.cfi_offset 4, -36
 930              		.cfi_offset 5, -32
 931              		.cfi_offset 6, -28
 932              		.cfi_offset 7, -24
 933              		.cfi_offset 8, -20
 934              		.cfi_offset 9, -16
 935              		.cfi_offset 10, -12
 936              		.cfi_offset 11, -8
 937              		.cfi_offset 14, -4
 938              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 939              		.loc 1 248 5 view .LVU246
 940 03e8 0010A0E3 		mov	r1, #0	@,
 941              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 942              		.loc 1 248 58 view .LVU247
 943 03ec 10829FE5 		ldr	r8, .L72	@ tmp340,
 944              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 945              		.loc 1 244 1 view .LVU248
 946 03f0 14D04DE2 		sub	sp, sp, #20	@,,
 947              		.cfi_def_cfa_offset 56
 948              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 949              		.loc 1 248 5 view .LVU249
 950 03f4 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 951 03f8 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 952 03fc FEFFFFEB 		bl	memset		@
 953              	.LVL53:
 249:armwave.c     **** 
 250:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 954              		.loc 1 250 5 is_stmt 1 view .LVU250
 955              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 956              		.loc 1 250 68 is_stmt 0 view .LVU251
 957 0400 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 958              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 959              		.loc 1 250 38 view .LVU252
 960 0404 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 961              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 962              		.loc 1 250 51 view .LVU253
 963 0408 0310A0E1 		mov	r1, r3	@, _34
 964 040c 0500A0E1 		mov	r0, r5	@, prephitmp_217
 965              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 966              		.loc 1 250 68 view .LVU254
 967 0410 00308DE5 		str	r3, [sp]	@ _34, %sfp
 968              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 250 51 view .LVU255
 970 0414 FEFFFFEB 		bl	__aeabi_idiv		@
 971              	.LVL54:
 972              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 973              		.loc 1 250 5 view .LVU256
 974 0418 000050E3 		cmp	r0, #0	@,
 975 041c 7600000A 		beq	.L53		@,
 976 0420 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 977              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 978              		.loc 1 250 12 view .LVU257
 979 0424 0030A0E3 		mov	r3, #0	@ yy,
 980 0428 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 981              	.LVL55:
 982              	.L62:
 251:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 983              		.loc 1 254 9 is_stmt 1 discriminator 3 view .LVU258
 984 042c D020CDE1 		ldrd	r2, [sp]	@, %sfp
 985              	.LBB10:
 986              	.LBB11:
 987              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 988              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU259
 989 0430 40C098E5 		ldr	ip, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 990              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 991              		.loc 1 79 5 discriminator 3 view .LVU260
 992 0434 000054E3 		cmp	r4, #0	@ prephitmp_227,
 993              	.LBE11:
 994              	.LBE10:
 995              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 996              		.loc 1 254 9 discriminator 3 view .LVU261
 997 0438 930202E0 		mul	r2, r3, r2	@ _5, yy, _34
 998              	.LVL56:
 999              	.LBB13:
 1000              	.LBI10:
  62:armwave.c     **** {
 1001              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU262
 1002              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1003              		.loc 1 64 5 discriminator 3 view .LVU263
  65:armwave.c     ****     uint8_t *wave_base;
 1004              		.loc 1 65 5 discriminator 3 view .LVU264
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1005              		.loc 1 66 5 discriminator 3 view .LVU265
  67:armwave.c     ****     uint8_t *write_buffer;
 1006              		.loc 1 67 5 discriminator 3 view .LVU266
  68:armwave.c     **** 
 1007              		.loc 1 68 5 discriminator 3 view .LVU267
  71:armwave.c     **** 
 1008              		.loc 1 71 5 discriminator 3 view .LVU268
 1009              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1010              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU269
 1011 043c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1012              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1013              		.loc 1 71 40 discriminator 3 view .LVU270
 1014 0440 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1015              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1016              		.loc 1 71 65 discriminator 3 view .LVU271
 1017 0444 930203E0 		mul	r3, r3, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, _5
 1018              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1019              		.loc 1 71 105 discriminator 3 view .LVU272
 1020 0448 2338A0E1 		lsr	r3, r3, #16	@ tmp240, tmp238,
 1021              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1022              		.loc 1 71 130 discriminator 3 view .LVU273
 1023 044c 9C030CE0 		mul	ip, ip, r3	@ _22, g_armwave_state.bitdepth_height, tmp240
 1024              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1025              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU274
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1026              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU275
 1027 0450 610000DA 		ble	.L55		@,
 1028              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1029              		.loc 1 79 11 view .LVU276
 1030 0454 0070A0E3 		mov	r7, #0	@ w,
 1031 0458 043042E2 		sub	r3, r2, #4	@ _31, _5,
 1032 045c 08308DE5 		str	r3, [sp, #8]	@ _31, %sfp
 1033              	.LVL58:
 1034              	.L61:
  80:armwave.c     **** 
 1035              		.loc 1 80 9 is_stmt 1 view .LVU277
 1036              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1037              		.loc 1 84 9 is_stmt 0 view .LVU278
 1038 0460 00209DE5 		ldr	r2, [sp]	@ _34, %sfp
 1039              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1040              		.loc 1 80 64 view .LVU279
 1041 0464 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1042              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU280
 1044 0468 000052E3 		cmp	r2, #0	@ _34,
 1045              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1046              		.loc 1 80 36 view .LVU281
 1047 046c 142098E5 		ldr	r2, [r8, #20]	@ _23, g_armwave_state.wave_buffer
 1048              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1049              		.loc 1 80 64 view .LVU282
 1050 0470 930703E0 		mul	r3, r3, r7	@ _27, g_armwave_state.wave_stride, w
 1051              	.LVL59:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1052              		.loc 1 84 9 is_stmt 1 view .LVU283
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1053              		.loc 1 84 9 is_stmt 0 view .LVU284
 1054 0474 5200000A 		beq	.L56		@,
 1055 0478 08009DE5 		ldr	r0, [sp, #8]	@ _31, %sfp
 1056 047c 003083E0 		add	r3, r3, r0	@ tmp246, _27, _31
 1057              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 view .LVU285
 1059 0480 036082E0 		add	r6, r2, r3	@ ivtmp.66, _23, tmp246
 1060              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1061              		.loc 1 84 16 view .LVU286
 1062 0484 0000A0E3 		mov	r0, #0	@ yy,
 1063              	.LVL61:
 1064              	.L60:
  87:armwave.c     **** 
 1065              		.loc 1 87 13 is_stmt 1 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1066              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1067              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1068              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 106 17 view .LVU291
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1070              		.loc 1 101 17 view .LVU292
 106:armwave.c     ****                 word >>= 8;
 1071              		.loc 1 106 17 view .LVU293
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1072              		.loc 1 101 17 view .LVU294
 106:armwave.c     ****                 word >>= 8;
 1073              		.loc 1 106 17 view .LVU295
 1074              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1075              		.loc 1 87 18 is_stmt 0 view .LVU296
 1076 0488 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _260, offset: 0B]
 1077              	.LVL62:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1078              		.loc 1 89 13 is_stmt 1 view .LVU297
  91:armwave.c     ****                 
 1079              		.loc 1 91 17 view .LVU298
  94:armwave.c     ****                     continue;
 1080              		.loc 1 94 17 view .LVU299
 1081              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1082              		.loc 1 102 34 is_stmt 0 view .LVU300
 1083 048c 01A080E2 		add	r10, r0, #1	@ tmp276, yy,
 1084              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1085              		.loc 1 94 20 view .LVU301
 1086 0490 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1087 0494 0120A003 		moveq	r2, #1	@ tmp248,
 1088 0498 0020A013 		movne	r2, #0	@ tmp248,
 1089              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1090              		.loc 1 94 19 view .LVU302
 1091 049c FF0059E3 		cmp	r9, #255	@ scale_value,
 1092 04a0 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1093              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1094              		.loc 1 107 22 view .LVU303
 1095 04a4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1096              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1097              		.loc 1 94 19 view .LVU304
 1098 04a8 000052E3 		cmp	r2, #0	@ tmp253,
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 34 view .LVU305
 1101 04ac 025080E2 		add	r5, r0, #2	@ tmp298, yy,
 1102              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 106 47 view .LVU306
 1104 04b0 0CB089E0 		add	fp, r9, ip	@ tmp261, scale_value, _22
 1105              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1106              		.loc 1 107 22 view .LVU307
 1107 04b4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1108 04b8 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 view .LVU308
 1111 04bc 3B00001A 		bne	.L64		@,
 1112              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1113              		.loc 1 102 34 view .LVU309
 1114 04c0 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU310
 1117 04c4 40E098E5 		ldr	lr, [r8, #64]	@ tmp360, g_armwave_state.bitdepth_height
 1118              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1119              		.loc 1 94 20 view .LVU311
 1120 04c8 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1121              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1122              		.loc 1 102 34 view .LVU312
 1123 04cc 920002E0 		mul	r2, r2, r0	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1124              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1125              		.loc 1 106 47 view .LVU313
 1126 04d0 0C9084E0 		add	r9, r4, ip	@ tmp283, scale_value, _22
 1127              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1128              		.loc 1 102 74 view .LVU314
 1129 04d4 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1130              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1131              		.loc 1 106 47 view .LVU315
 1132 04d8 9EB222E0 		mla	r2, lr, r2, fp	@ tmp262, tmp360, tmp257, tmp261
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 20 view .LVU316
 1135 04dc 01B0A003 		moveq	fp, #1	@ tmp269,
 1136 04e0 00B0A013 		movne	fp, #0	@ tmp269,
 1137              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1138              		.loc 1 94 19 view .LVU317
 1139 04e4 FF0054E3 		cmp	r4, #255	@ scale_value,
 1140 04e8 0B40A011 		movne	r4, fp	@, tmp274, tmp269
 1141 04ec 01408B03 		orreq	r4, fp, #1	@,, tmp274, tmp269
 1142              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1143              		.loc 1 106 47 view .LVU318
 1144 04f0 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_90, *_90
 1145              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1146              		.loc 1 94 19 view .LVU319
 1147 04f4 000054E3 		cmp	r4, #0	@ tmp274,
 1148              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1149              		.loc 1 106 47 view .LVU320
 1150 04f8 01B08BE2 		add	fp, fp, #1	@ tmp265, *_90,
 1151 04fc 02B0C1E7 		strb	fp, [r1, r2]	@ tmp265, *_90
 1152              	.LVL63:
 107:armwave.c     ****             }
 1153              		.loc 1 107 17 is_stmt 1 view .LVU321
  91:armwave.c     ****                 
 1154              		.loc 1 91 17 view .LVU322
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 17 view .LVU323
 1156              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1157              		.loc 1 94 19 is_stmt 0 view .LVU324
 1158 0500 2A00001A 		bne	.L64		@,
 1159              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1160              		.loc 1 102 34 view .LVU325
 1161 0504 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1162              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1163              		.loc 1 102 99 view .LVU326
 1164 0508 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1165              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1166              		.loc 1 94 20 view .LVU327
 1167 050c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1168              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1169              		.loc 1 102 34 view .LVU328
 1170 0510 920A0AE0 		mul	r10, r2, r10	@ tmp277, g_armwave_state.cmp_x_bitdepth_scale, tmp276
 1171              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1172              		.loc 1 94 20 view .LVU329
 1173 0514 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1174 0518 0120A003 		moveq	r2, #1	@ tmp291,
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 74 view .LVU330
 1177 051c 2AA8A0E1 		lsr	r10, r10, #16	@ tmp279, tmp277,
 1178              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1179              		.loc 1 94 20 view .LVU331
 1180 0520 0020A013 		movne	r2, #0	@ tmp291,
 1181              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1182              		.loc 1 106 47 view .LVU332
 1183 0524 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp284, g_armwave_state.bitdepth_height, tmp279, tmp283
 1184 0528 0C408EE0 		add	r4, lr, ip	@ tmp305, scale_value, _22
 1185              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1186              		.loc 1 94 19 view .LVU333
 1187 052c FF005EE3 		cmp	lr, #255	@ scale_value,
 1188 0530 02E0A011 		movne	lr, r2	@, tmp296, tmp291
 1189 0534 01E08203 		orreq	lr, r2, #1	@,, tmp296, tmp291
 1190              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1191              		.loc 1 106 47 view .LVU334
 1192 0538 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_121, *_121
 1193              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1194              		.loc 1 94 19 view .LVU335
 1195 053c 00005EE3 		cmp	lr, #0	@ tmp296,
 1196              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1197              		.loc 1 106 47 view .LVU336
 1198 0540 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1199 0544 0920C1E7 		strb	r2, [r1, r9]	@ tmp287, *_121
 107:armwave.c     ****             }
 1200              		.loc 1 107 17 is_stmt 1 view .LVU337
 1201              	.LVL64:
  91:armwave.c     ****                 
 1202              		.loc 1 91 17 view .LVU338
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 17 view .LVU339
 1204              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1205              		.loc 1 94 19 is_stmt 0 view .LVU340
 1206 0548 1800001A 		bne	.L64		@,
 1207              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1208              		.loc 1 102 34 view .LVU341
 1209 054c 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1210              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1211              		.loc 1 94 20 view .LVU342
 1212 0550 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1213              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1214              		.loc 1 106 47 view .LVU343
 1215 0554 03208CE0 		add	r2, ip, r3	@ tmp326, _22, word
 1216              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1217              		.loc 1 102 34 view .LVU344
 1218 0558 9E0505E0 		mul	r5, lr, r5	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1219              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1220              		.loc 1 102 99 view .LVU345
 1221 055c 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1222              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1223              		.loc 1 102 74 view .LVU346
 1224 0560 2558A0E1 		lsr	r5, r5, #16	@ tmp301, tmp299,
 1225              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1226              		.loc 1 106 47 view .LVU347
 1227 0564 9E4525E0 		mla	r5, lr, r5, r4	@ tmp306, g_armwave_state.bitdepth_height, tmp301, tmp305
 1228              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1229              		.loc 1 94 20 view .LVU348
 1230 0568 01E0A003 		moveq	lr, #1	@ tmp312,
 1231 056c 00E0A013 		movne	lr, #0	@ tmp312,
 1232              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1233              		.loc 1 94 19 view .LVU349
 1234 0570 FF0053E3 		cmp	r3, #255	@ word,
 1235 0574 01E08E03 		orreq	lr, lr, #1	@,, tmp317, tmp312
 1236              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1237              		.loc 1 106 47 view .LVU350
 1238 0578 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_152, *_152
 1239              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1240              		.loc 1 94 19 view .LVU351
 1241 057c 00005EE3 		cmp	lr, #0	@ tmp317,
 1242              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1243              		.loc 1 106 47 view .LVU352
 1244 0580 013083E2 		add	r3, r3, #1	@ tmp309, *_152,
 1245 0584 0530C1E7 		strb	r3, [r1, r5]	@ tmp309, *_152
 107:armwave.c     ****             }
 1246              		.loc 1 107 17 is_stmt 1 view .LVU353
 1247              	.LVL65:
  91:armwave.c     ****                 
 1248              		.loc 1 91 17 view .LVU354
  94:armwave.c     ****                     continue;
 1249              		.loc 1 94 17 view .LVU355
 1250              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1251              		.loc 1 94 19 is_stmt 0 view .LVU356
 1252 0588 0800001A 		bne	.L64		@,
 1253              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1254              		.loc 1 102 34 view .LVU357
 1255 058c 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1256 0590 034080E2 		add	r4, r0, #3	@ tmp319, yy,
 1257              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1258              		.loc 1 102 99 view .LVU358
 1259 0594 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1260              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1261              		.loc 1 102 34 view .LVU359
 1262 0598 930403E0 		mul	r3, r3, r4	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1263              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1264              		.loc 1 102 74 view .LVU360
 1265 059c 2338A0E1 		lsr	r3, r3, #16	@ tmp322, tmp320,
 1266              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1267              		.loc 1 106 47 view .LVU361
 1268 05a0 9E2323E0 		mla	r3, lr, r3, r2	@ tmp327, g_armwave_state.bitdepth_height, tmp322, tmp326
 1269 05a4 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_183, *_183
 1270 05a8 012082E2 		add	r2, r2, #1	@ tmp330, *_183,
 1271 05ac 0320C1E7 		strb	r2, [r1, r3]	@ tmp330, *_183
 107:armwave.c     ****             }
 1272              		.loc 1 107 17 is_stmt 1 view .LVU362
 1273              	.LVL66:
 1274              	.L64:
 1275              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1276              		.loc 1 84 9 is_stmt 0 view .LVU363
 1277 05b0 00309DE5 		ldr	r3, [sp]	@ _34, %sfp
 1278              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1279              		.loc 1 84 37 view .LVU364
 1280 05b4 040080E2 		add	r0, r0, #4	@ yy, yy,
 1281              	.LVL67:
 1282              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1283              		.loc 1 84 9 view .LVU365
 1284 05b8 000053E1 		cmp	r3, r0	@ _34, yy
 1285 05bc B1FFFF8A 		bhi	.L60		@,
 1286 05c0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_227, g_armwave_state.waves
 1287              	.LVL68:
 1288              	.L56:
 1289              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1290              		.loc 1 79 44 view .LVU366
 1291 05c4 017087E2 		add	r7, r7, #1	@ w, w,
 1292              	.LVL69:
 1293              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1294              		.loc 1 79 5 view .LVU367
 1295 05c8 040057E1 		cmp	r7, r4	@ w, prephitmp_227
 1296 05cc A3FFFFBA 		blt	.L61		@,
 1297 05d0 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_217, g_armwave_state.wave_length
 1298 05d4 443098E5 		ldr	r3, [r8, #68]	@ _34, g_armwave_state.slice_height
 1299 05d8 00308DE5 		str	r3, [sp]	@ _34, %sfp
 1300              	.LVL70:
 1301              	.L55:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 5 view .LVU368
 1303              	.LBE12:
 1304              	.LBE13:
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1305              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU369
 256:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1306              		.loc 1 256 9 discriminator 3 view .LVU370
 1307              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1308              		.loc 1 250 51 is_stmt 0 discriminator 3 view .LVU371
 1309 05dc 00109DE5 		ldr	r1, [sp]	@, %sfp
 1310              	.LVL71:
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1311              		.loc 1 250 51 discriminator 3 view .LVU372
 1312 05e0 0500A0E1 		mov	r0, r5	@, prephitmp_217
 1313 05e4 FEFFFFEB 		bl	__aeabi_idiv		@
 1314              	.LVL72:
 1315              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1316              		.loc 1 250 86 discriminator 3 view .LVU373
 1317 05e8 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1318 05ec 013083E2 		add	r3, r3, #1	@ yy, yy,
 1319 05f0 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1320              	.LVL73:
 1321              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1322              		.loc 1 250 5 discriminator 3 view .LVU374
 1323 05f4 030050E1 		cmp	r0, r3	@, yy
 1324 05f8 8BFFFF8A 		bhi	.L62		@,
 1325              	.LVL74:
 1326              	.L53:
 1327              	@ armwave.c:260: }
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 1328              		.loc 1 260 1 view .LVU375
 1329 05fc 14D08DE2 		add	sp, sp, #20	@,,
 1330              		.cfi_def_cfa_offset 36
 1331              		@ sp needed	@
 1332 0600 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1333              	.L73:
 1334              		.align	2
 1335              	.L72:
 1336 0604 00000000 		.word	g_armwave_state
 1337              		.cfi_endproc
 1338              	.LFE61:
 1340              		.align	2
 1341              		.global	armwave_setup_render
 1342              		.syntax unified
 1343              		.arm
 1344              		.fpu vfp
 1346              	armwave_setup_render:
 1347              	.LVL75:
 1348              	.LFB62:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 1349              		.loc 1 266 1 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 12, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 1353              		.loc 1 267 5 view .LVU377
 268:armwave.c     ****     float points_per_pixel;
 1354              		.loc 1 268 5 view .LVU378
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1355              		.loc 1 270 5 view .LVU379
 1356              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 266 1 is_stmt 0 view .LVU380
 1358 0608 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1359              		.cfi_def_cfa_offset 28
 1360              		.cfi_offset 4, -28
 1361              		.cfi_offset 5, -24
 1362              		.cfi_offset 6, -20
 1363              		.cfi_offset 7, -16
 1364              		.cfi_offset 8, -12
 1365              		.cfi_offset 9, -8
 1366              		.cfi_offset 14, -4
 1367 060c 028B2DED 		vpush.64	{d8}	@
 1368              		.cfi_def_cfa_offset 36
 1369              		.cfi_offset 80, -36
 1370              		.cfi_offset 81, -32
 1371 0610 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1372 0614 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1373 0618 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1374 061c 14D04DE2 		sub	sp, sp, #20	@,,
 1375              		.cfi_def_cfa_offset 56
 1376              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1377              		.loc 1 266 1 view .LVU381
 1378 0620 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1379 0624 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1380 0628 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1381              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1382              		.loc 1 270 5 view .LVU382
 1383 062c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1384 0630 F460CDE1 		strd	r6, [sp, #4]	@,,
 1385 0634 0230A0E1 		mov	r3, r2	@, waves_max
 1386              	.LVL76:
 1387              		.loc 1 270 5 view .LVU383
 1388 0638 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1389 063c 0120A0E1 		mov	r2, r1	@, end_point
 1390              	.LVL77:
 1391              		.loc 1 270 5 view .LVU384
 1392 0640 0010A0E1 		mov	r1, r0	@, start_point
 1393              	.LVL78:
 1394              		.loc 1 270 5 view .LVU385
 1395 0644 E0019FE5 		ldr	r0, .L88+12	@,
 1396              	.LVL79:
 1397              		.loc 1 270 5 view .LVU386
 1398 0648 FEFFFFEB 		bl	printf		@
 1399              	.LVL80:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 1400              		.loc 1 273 5 is_stmt 1 view .LVU387
 1401 064c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1402 0650 6300002A 		bcs	.L85		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     **** 
 279:armwave.c     ****     if(target_height == 256) {
 280:armwave.c     ****         g_armwave_state.row_shift = 8;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 282:armwave.c     ****     } else if(target_height == 512) {
 283:armwave.c     ****         g_armwave_state.row_shift = 9;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 285:armwave.c     ****     } else if(target_height == 1024) {
 286:armwave.c     ****         g_armwave_state.row_shift = 10;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 288:armwave.c     ****     } else if(target_height == 2048) {
 289:armwave.c     ****         g_armwave_state.row_shift = 11;
 290:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 291:armwave.c     ****     }
 292:armwave.c     ****     */
 293:armwave.c     **** 
 294:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 295:armwave.c     ****     g_armwave_state.xstride = target_height;
 1403              		.loc 1 295 5 view .LVU388
 1404              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1405              		.loc 1 306 45 is_stmt 0 view .LVU389
 1406 0654 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1407              	.LVL81:
 1408              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1409              		.loc 1 296 49 view .LVU390
 1410 0658 706A9FED 		vldr.32	s12, .L88	@ tmp175,
 1411              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 308:armwave.c     ****     // Calculate compound scaler
 309:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1412              		.loc 1 310 48 view .LVU391
 1413 065c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1414              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1415              		.loc 1 310 79 view .LVU392
 1416 0660 6F6ADFED 		vldr.32	s13, .L88+4	@ tmp199,
 1417              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1418              		.loc 1 303 90 view .LVU393
 1419 0664 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1420              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1421              		.loc 1 295 29 view .LVU394
 1422 0668 C0419FE5 		ldr	r4, .L88+16	@ tmp243,
 1423              	.LVL82:
 1424              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1425              		.loc 1 310 48 view .LVU395
 1426 066c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1427              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1428              		.loc 1 296 49 view .LVU396
 1429 0670 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1430              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1431              		.loc 1 301 42 view .LVU397
 1432 0674 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1433              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1434              		.loc 1 303 95 view .LVU398
 1435 0678 033483E0 		add	r3, r3, r3, lsl #8	@ tmp189, tmp186, tmp186,
 1436              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1437              		.loc 1 296 49 view .LVU399
 1438 067c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1439              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1440              		.loc 1 310 48 view .LVU400
 1441 0680 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1442              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 311:armwave.c     **** 
 312:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1443              		.loc 1 312 5 view .LVU401
 1444 0684 0128A0E3 		mov	r2, #65536	@ tmp202,
 1445 0688 04508DE5 		str	r5, [sp, #4]	@ _13,
 1446 068c 00608DE5 		str	r6, [sp]	@ target_width,
 1447              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1448              		.loc 1 310 48 view .LVU402
 1449 0690 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1450              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1451              		.loc 1 303 95 view .LVU403
 1452 0694 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1453              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1454              		.loc 1 295 29 view .LVU404
 1455 0698 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1456              		.loc 1 296 5 is_stmt 1 view .LVU405
 1457              	@ armwave.c:298:     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1458              		.loc 1 298 33 is_stmt 0 view .LVU406
 1459 069c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1460              	@ armwave.c:299:     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1461              		.loc 1 299 31 view .LVU407
 1462 06a0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1463              	@ armwave.c:300:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1464              		.loc 1 300 27 view .LVU408
 1465 06a4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1466              	@ armwave.c:305:     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1467              		.loc 1 305 35 view .LVU409
 1468 06a8 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1469              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1470              		.loc 1 312 5 view .LVU410
 1471 06ac 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1472              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1473              		.loc 1 310 48 view .LVU411
 1474 06b0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1475              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1476              		.loc 1 302 37 view .LVU412
 1477 06b4 012BA0E3 		mov	r2, #1024	@ tmp185,
 1478              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1479              		.loc 1 301 26 view .LVU413
 1480 06b8 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1481              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, 
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1482              		.loc 1 302 37 view .LVU414
 1483 06bc 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1484              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1485              		.loc 1 312 5 view .LVU415
 1486 06c0 0310A0E1 		mov	r1, r3	@, tmp190
 1487              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1488              		.loc 1 303 34 view .LVU416
 1489 06c4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1490              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 306:armwave.c     **** 
 1491              		.loc 1 306 33 view .LVU417
 1492 06c8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1493              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1494              		.loc 1 312 5 view .LVU418
 1495 06cc 60019FE5 		ldr	r0, .L88+20	@,
 1496              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1497              		.loc 1 296 49 view .LVU419
 1498 06d0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1499              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1500              		.loc 1 310 79 view .LVU420
 1501 06d4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1502              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1503              		.loc 1 309 42 view .LVU421
 1504 06d8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1505              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1506              		.loc 1 296 33 view .LVU422
 1507 06dc 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1508              		.loc 1 297 5 is_stmt 1 view .LVU423
 1509              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1510              		.loc 1 309 42 is_stmt 0 view .LVU424
 1511 06e0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1512              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1513              		.loc 1 297 30 view .LVU425
 1514 06e4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1515              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1516              		.loc 1 312 5 view .LVU426
 1517 06e8 0C30A0E1 		mov	r3, ip	@, _19
 1518 06ec 0C20A0E1 		mov	r2, ip	@, tmp3
 1519              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1520              		.loc 1 309 42 view .LVU427
 1521 06f0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1522              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1523              		.loc 1 297 30 view .LVU428
 1524 06f4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1525              		.loc 1 298 5 is_stmt 1 view .LVU429
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1526              		.loc 1 299 5 view .LVU430
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1527              		.loc 1 300 5 view .LVU431
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(buffptr_t); // in 16-bit mode, double the number
 1528              		.loc 1 301 5 view .LVU432
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1529              		.loc 1 302 5 view .LVU433
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1530              		.loc 1 303 5 view .LVU434
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 1531              		.loc 1 304 5 view .LVU435
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1532              		.loc 1 305 5 view .LVU436
 306:armwave.c     **** 
 1533              		.loc 1 306 5 view .LVU437
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1534              		.loc 1 309 5 view .LVU438
 1535              		.loc 1 312 5 view .LVU439
 1536 06f8 FEFFFFEB 		bl	printf		@
 1537              	.LVL83:
 313:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 314:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 315:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 316:armwave.c     **** 
 317:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 318:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 319:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 320:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1538              		.loc 1 320 5 view .LVU440
 1539              	@ armwave.c:322:     if(g_armwave_state.ch1_buffer != NULL)
 321:armwave.c     **** 
 322:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1540              		.loc 1 322 23 is_stmt 0 view .LVU441
 1541 06fc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1542              	@ armwave.c:320:     g_armwave_state.slice_height = 256; // 64;  
 320:armwave.c     **** 
 1543              		.loc 1 320 34 view .LVU442
 1544 0700 013CA0E3 		mov	r3, #256	@ tmp204,
 1545              	@ armwave.c:322:     if(g_armwave_state.ch1_buffer != NULL)
 1546              		.loc 1 322 7 view .LVU443
 1547 0704 000050E3 		cmp	r0, #0	@ _20,
 1548              	@ armwave.c:320:     g_armwave_state.slice_height = 256; // 64;  
 320:armwave.c     **** 
 1549              		.loc 1 320 34 view .LVU444
 1550 0708 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1551              		.loc 1 322 5 is_stmt 1 view .LVU445
 1552              	@ armwave.c:322:     if(g_armwave_state.ch1_buffer != NULL)
 1553              		.loc 1 322 7 is_stmt 0 view .LVU446
 1554 070c 0000000A 		beq	.L76		@,
 323:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1555              		.loc 1 323 9 is_stmt 1 view .LVU447
 1556 0710 FEFFFFEB 		bl	free		@
 1557              	.LVL84:
 1558              	.L76:
 324:armwave.c     **** 
 325:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1559              		.loc 1 325 5 view .LVU448
 1560              	@ armwave.c:325:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1561              		.loc 1 325 34 is_stmt 0 view .LVU449
 1562 0714 0110A0E3 		mov	r1, #1	@,
 1563 0718 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1564 071c FEFFFFEB 		bl	calloc		@
 1565              	.LVL85:
 1566              	@ armwave.c:327:     assert(g_armwave_state.ch1_buffer != NULL);
 326:armwave.c     **** 
 327:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1567              		.loc 1 327 5 view .LVU450
 1568 0720 000050E3 		cmp	r0, #0	@ _23,
 1569              	@ armwave.c:325:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 325:armwave.c     **** 
 1570              		.loc 1 325 34 view .LVU451
 1571 0724 0070A0E1 		mov	r7, r0	@ _23,
 1572              	@ armwave.c:325:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 325:armwave.c     **** 
 1573              		.loc 1 325 32 view .LVU452
 1574 0728 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1575              		.loc 1 327 5 is_stmt 1 view .LVU453
 1576 072c 3600000A 		beq	.L86		@,
 328:armwave.c     **** 
 329:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 330:armwave.c     ****     length = end_point - start_point;
 1577              		.loc 1 330 5 view .LVU454
 1578              	.LVL86:
 331:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1579              		.loc 1 331 5 view .LVU455
 1580              	@ armwave.c:331:     points_per_pixel = length / ((float)(target_width));
 1581              		.loc 1 331 34 is_stmt 0 view .LVU456
 1582 0730 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1583              	@ armwave.c:331:     points_per_pixel = length / ((float)(target_width));
 1584              		.loc 1 331 22 view .LVU457
 1585 0734 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1586              	@ armwave.c:332:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 332:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1587              		.loc 1 332 60 view .LVU458
 1588 0738 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1589              	@ armwave.c:333:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 333:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1590              		.loc 1 333 40 view .LVU459
 1591 073c 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1592              	@ armwave.c:331:     points_per_pixel = length / ((float)(target_width));
 331:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1593              		.loc 1 331 34 view .LVU460
 1594 0740 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1595              	@ armwave.c:331:     points_per_pixel = length / ((float)(target_width));
 331:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1596              		.loc 1 331 22 view .LVU461
 1597 0744 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1598              	@ armwave.c:332:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 332:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1599              		.loc 1 332 60 view .LVU462
 1600 0748 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1601              	@ armwave.c:331:     points_per_pixel = length / ((float)(target_width));
 331:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1602              		.loc 1 331 22 view .LVU463
 1603 074c A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1604              	.LVL87:
 332:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1605              		.loc 1 332 5 is_stmt 1 view .LVU464
 1606              	@ armwave.c:332:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 332:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1607              		.loc 1 332 60 is_stmt 0 view .LVU465
 1608 0750 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1609              	@ armwave.c:332:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 332:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1610              		.loc 1 332 41 view .LVU466
 1611 0754 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1612 0758 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1613              		.loc 1 333 5 is_stmt 1 view .LVU467
 1614              	@ armwave.c:333:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1615              		.loc 1 333 40 is_stmt 0 view .LVU468
 1616 075c FEFFFFEB 		bl	malloc		@
 1617              	.LVL88:
 1618              	@ armwave.c:335:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 334:armwave.c     **** 
 335:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1619              		.loc 1 335 5 view .LVU469
 1620 0760 000050E3 		cmp	r0, #0	@ _31,
 1621              	@ armwave.c:333:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 333:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1622              		.loc 1 333 40 view .LVU470
 1623 0764 0060A0E1 		mov	r6, r0	@ _31,
 1624              	@ armwave.c:333:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 333:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1625              		.loc 1 333 38 view .LVU471
 1626 0768 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1627              		.loc 1 335 5 is_stmt 1 view .LVU472
 1628 076c 2100000A 		beq	.L87		@,
 1629              	@ armwave.c:338:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 336:armwave.c     **** 
 337:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 338:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1630              		.loc 1 338 54 is_stmt 0 view .LVU473
 1631 0770 2C7ADFED 		vldr.32	s15, .L88+8	@ tmp231,
 1632 0774 020040E2 		sub	r0, r0, #2	@ ivtmp.78, _31,
 1633              	@ armwave.c:337:     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1634              		.loc 1 337 12 view .LVU474
 1635 0778 0030A0E3 		mov	r3, #0	@ xx,
 1636              	@ armwave.c:338:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1637              		.loc 1 338 54 view .LVU475
 1638 077c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1639              	.L79:
 1640              	.LVL89:
 1641              		.loc 1 338 9 is_stmt 1 discriminator 3 view .LVU476
 1642              	@ armwave.c:338:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1643              		.loc 1 338 74 is_stmt 0 discriminator 3 view .LVU477
 1644 0780 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1645              	@ armwave.c:337:     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1646              		.loc 1 337 32 discriminator 3 view .LVU478
 1647 0784 013083E2 		add	r3, r3, #1	@ xx, xx,
 1648              	.LVL90:
 1649              	@ armwave.c:337:     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1650              		.loc 1 337 5 discriminator 3 view .LVU479
 1651 0788 030055E1 		cmp	r5, r3	@ _13, xx
 1652              	@ armwave.c:338:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1653              		.loc 1 338 74 discriminator 3 view .LVU480
 1654 078c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1655 0790 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1656              	@ armwave.c:338:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1657              		.loc 1 338 46 discriminator 3 view .LVU481
 1658 0794 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1659 0798 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1660 079c B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1661              	@ armwave.c:337:     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1662              		.loc 1 337 5 discriminator 3 view .LVU482
 1663 07a0 F6FFFF1A 		bne	.L79		@,
 339:armwave.c     **** 
 340:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1664              		.loc 1 343 5 is_stmt 1 view .LVU483
 1665              	@ armwave.c:343:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1666              		.loc 1 343 34 is_stmt 0 view .LVU484
 1667 07a4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1668 07a8 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1669 07ac FEFFFFEB 		bl	malloc		@
 1670              	.LVL91:
 1671              	@ armwave.c:345:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 344:armwave.c     **** 
 345:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1672              		.loc 1 345 5 view .LVU485
 1673 07b0 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1674 07b4 0620A0E1 		mov	r2, r6	@, _31
 1675 07b8 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1676 07bc 0710A0E1 		mov	r1, r7	@, _23
 1677              	@ armwave.c:343:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 343:armwave.c     **** 
 1678              		.loc 1 343 34 view .LVU486
 1679 07c0 00C0A0E1 		mov	ip, r0	@ tmp238,
 1680              	@ armwave.c:345:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1681              		.loc 1 345 5 view .LVU487
 1682 07c4 0030A0E1 		mov	r3, r0	@, tmp238
 1683              	@ armwave.c:343:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 343:armwave.c     **** 
 1684              		.loc 1 343 32 view .LVU488
 1685 07c8 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1686              		.loc 1 345 5 is_stmt 1 view .LVU489
 1687 07cc 64009FE5 		ldr	r0, .L88+24	@,
 1688 07d0 FEFFFFEB 		bl	printf		@
 1689              	.LVL92:
 346:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 349:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 350:armwave.c     **** 
 351:armwave.c     ****     malloc_stats();
 1690              		.loc 1 351 5 view .LVU490
 1691              	@ armwave.c:352: }
 352:armwave.c     **** }
 1692              		.loc 1 352 1 is_stmt 0 view .LVU491
 1693 07d4 14D08DE2 		add	sp, sp, #20	@,,
 1694              		.cfi_remember_state
 1695              		.cfi_def_cfa_offset 36
 1696              		@ sp needed	@
 1697 07d8 028BBDEC 		vldm	sp!, {d8}	@
 1698              		.cfi_restore 80
 1699              		.cfi_restore 81
 1700              		.cfi_def_cfa_offset 28
 1701              	.LVL93:
 1702              		.loc 1 352 1 view .LVU492
 1703 07dc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1704              		.cfi_restore 14
 1705              		.cfi_restore 9
 1706              		.cfi_restore 8
 1707              		.cfi_restore 7
 1708              		.cfi_restore 6
 1709              		.cfi_restore 5
 1710              		.cfi_restore 4
 1711              		.cfi_def_cfa_offset 0
 1712              	.LVL94:
 1713              	@ armwave.c:351:     malloc_stats();
 351:armwave.c     **** }
 1714              		.loc 1 351 5 view .LVU493
 1715 07e0 FEFFFFEA 		b	malloc_stats		@
 1716              	.LVL95:
 1717              	.L85:
 1718              		.cfi_restore_state
 273:armwave.c     **** 
 1719              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU494
 1720 07e4 50309FE5 		ldr	r3, .L88+28	@,
 1721 07e8 50209FE5 		ldr	r2, .L88+32	@,
 1722 07ec 50109FE5 		ldr	r1, .L88+36	@,
 1723 07f0 50009FE5 		ldr	r0, .L88+40	@,
 1724 07f4 FEFFFFEB 		bl	__assert_fail		@
 1725              	.LVL96:
 1726              	.L87:
 335:armwave.c     **** 
 1727              		.loc 1 335 5 discriminator 1 view .LVU495
 1728 07f8 3C309FE5 		ldr	r3, .L88+28	@,
 1729 07fc 48209FE5 		ldr	r2, .L88+44	@,
 1730 0800 3C109FE5 		ldr	r1, .L88+36	@,
 1731 0804 44009FE5 		ldr	r0, .L88+48	@,
 1732 0808 FEFFFFEB 		bl	__assert_fail		@
 1733              	.LVL97:
 1734              	.L86:
 327:armwave.c     **** 
 1735              		.loc 1 327 5 discriminator 1 view .LVU496
 1736 080c 28309FE5 		ldr	r3, .L88+28	@,
 1737 0810 3C209FE5 		ldr	r2, .L88+52	@,
 1738 0814 28109FE5 		ldr	r1, .L88+36	@,
 1739 0818 38009FE5 		ldr	r0, .L88+56	@,
 1740 081c FEFFFFEB 		bl	__assert_fail		@
 1741              	.LVL98:
 1742              	.L89:
 1743              		.align	2
 1744              	.L88:
 1745 0820 00007F43 		.word	1132396544
 1746 0824 00008047 		.word	1199570944
 1747 0828 0000803F 		.word	1065353216
 1748 082c 40000000 		.word	.LC4
 1749 0830 00000000 		.word	g_armwave_state
 1750 0834 84000000 		.word	.LC6
 1751 0838 34010000 		.word	.LC9
 1752 083c 1C000000 		.word	.LANCHOR0+28
 1753 0840 11010000 		.word	273
 1754 0844 20000000 		.word	.LC2
 1755 0848 6C000000 		.word	.LC5
 1756 084c 4F010000 		.word	335
 1757 0850 08010000 		.word	.LC8
 1758 0854 47010000 		.word	327
 1759 0858 E4000000 		.word	.LC7
 1760              		.cfi_endproc
 1761              	.LFE62:
 1763              		.align	2
 1764              		.global	armwave_set_wave_pointer
 1765              		.syntax unified
 1766              		.arm
 1767              		.fpu vfp
 1769              	armwave_set_wave_pointer:
 1770              	.LVL99:
 1771              	.LFB63:
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 356:armwave.c     ****  * in the future.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 359:armwave.c     **** {
 1772              		.loc 1 359 1 view -0
 1773              		.cfi_startproc
 1774              		@ args = 0, pretend = 0, frame = 0
 1775              		@ frame_needed = 0, uses_anonymous_args = 0
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1776              		.loc 1 360 5 view .LVU498
 1777 085c 000050E3 		cmp	r0, #0	@ wave_buffer
 1778              		.loc 1 360 5 is_stmt 0 view .LVU499
 1779 0860 0200000A 		beq	.L95		@,
 361:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1780              		.loc 1 361 5 is_stmt 1 view .LVU500
 1781              	@ armwave.c:361:     g_armwave_state.wave_buffer = wave_buffer;
 1782              		.loc 1 361 33 is_stmt 0 view .LVU501
 1783 0864 1C309FE5 		ldr	r3, .L96	@ tmp115,
 1784 0868 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1785 086c 1EFF2FE1 		bx	lr	@
 1786              	.L95:
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1787              		.loc 1 360 5 is_stmt 1 discriminator 1 view .LVU502
 1788              	@ armwave.c:359: {
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1789              		.loc 1 359 1 is_stmt 0 discriminator 1 view .LVU503
 1790 0870 10402DE9 		push	{r4, lr}	@
 1791              		.cfi_def_cfa_offset 8
 1792              		.cfi_offset 4, -8
 1793              		.cfi_offset 14, -4
 1794              	@ armwave.c:360:     assert(wave_buffer != NULL);
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1795              		.loc 1 360 5 discriminator 1 view .LVU504
 1796 0874 5A2FA0E3 		mov	r2, #360	@,
 1797 0878 0C309FE5 		ldr	r3, .L96+4	@,
 1798 087c 0C109FE5 		ldr	r1, .L96+8	@,
 1799 0880 0C009FE5 		ldr	r0, .L96+12	@,
 1800              	.LVL100:
 360:armwave.c     ****     assert(wave_buffer != NULL);
 1801              		.loc 1 360 5 discriminator 1 view .LVU505
 1802 0884 FEFFFFEB 		bl	__assert_fail		@
 1803              	.LVL101:
 1804              	.L97:
 1805              		.align	2
 1806              	.L96:
 1807 0888 00000000 		.word	g_armwave_state
 1808 088c 34000000 		.word	.LANCHOR0+52
 1809 0890 20000000 		.word	.LC2
 1810 0894 58010000 		.word	.LC10
 1811              		.cfi_endproc
 1812              	.LFE63:
 1814              		.align	2
 1815              		.global	armwave_set_wave_pointer_as_testbuf
 1816              		.syntax unified
 1817              		.arm
 1818              		.fpu vfp
 1820              	armwave_set_wave_pointer_as_testbuf:
 1821              	.LVL102:
 1822              	.LFB64:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 366:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 369:armwave.c     **** {
 1823              		.loc 1 369 1 is_stmt 1 view -0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827              		@ link register save eliminated.
 370:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1828              		.loc 1 370 5 view .LVU507
 1829              	@ armwave.c:370:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1830              		.loc 1 370 29 is_stmt 0 view .LVU508
 1831 0898 24309FE5 		ldr	r3, .L101	@ tmp117,
 1832              	@ armwave.c:370:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1833              		.loc 1 370 7 view .LVU509
 1834 089c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1835 08a0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1836 08a4 0400003A 		bcc	.L100		@,
 371:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 372:armwave.c     ****         return;
 373:armwave.c     ****     }
 374:armwave.c     **** 
 375:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1837              		.loc 1 375 5 is_stmt 1 view .LVU510
 1838              	@ armwave.c:375:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1839              		.loc 1 375 111 is_stmt 0 view .LVU511
 1840 08a8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1841              	@ armwave.c:375:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1842              		.loc 1 375 68 view .LVU512
 1843 08ac 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1844 08b0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1845              	.LVL103:
 1846              	@ armwave.c:375:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1847              		.loc 1 375 33 view .LVU513
 1848 08b4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1849              	@ armwave.c:376: }
 376:armwave.c     **** }
 1850              		.loc 1 376 1 view .LVU514
 1851 08b8 1EFF2FE1 		bx	lr	@
 1852              	.LVL104:
 1853              	.L100:
 371:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1854              		.loc 1 371 9 is_stmt 1 view .LVU515
 1855 08bc 04009FE5 		ldr	r0, .L101+4	@,
 1856              	.LVL105:
 371:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1857              		.loc 1 371 9 is_stmt 0 view .LVU516
 1858 08c0 FEFFFFEA 		b	puts		@
 1859              	.LVL106:
 1860              	.L102:
 1861              		.align	2
 1862              	.L101:
 1863 08c4 00000000 		.word	g_armwave_state
 1864 08c8 6C010000 		.word	.LC11
 1865              		.cfi_endproc
 1866              	.LFE64:
 1868              		.align	2
 1869              		.global	armwave_set_wave_pointer_u32
 1870              		.syntax unified
 1871              		.arm
 1872              		.fpu vfp
 1874              	armwave_set_wave_pointer_u32:
 1875              	.LVL107:
 1876              	.LFB65:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 380:armwave.c     ****  * disjointed buffers in the future.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 383:armwave.c     **** {
 1877              		.loc 1 383 1 is_stmt 1 view -0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1881              		.loc 1 384 5 view .LVU518
 1882 08cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1883              		.loc 1 384 5 is_stmt 0 view .LVU519
 1884 08d0 0200000A 		beq	.L108		@,
 385:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1885              		.loc 1 385 5 is_stmt 1 view .LVU520
 1886              	@ armwave.c:385:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1887              		.loc 1 385 33 is_stmt 0 view .LVU521
 1888 08d4 1C309FE5 		ldr	r3, .L109	@ tmp116,
 1889 08d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1890 08dc 1EFF2FE1 		bx	lr	@
 1891              	.L108:
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1892              		.loc 1 384 5 is_stmt 1 discriminator 1 view .LVU522
 1893              	@ armwave.c:383: {
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1894              		.loc 1 383 1 is_stmt 0 discriminator 1 view .LVU523
 1895 08e0 10402DE9 		push	{r4, lr}	@
 1896              		.cfi_def_cfa_offset 8
 1897              		.cfi_offset 4, -8
 1898              		.cfi_offset 14, -4
 1899              	@ armwave.c:384:     assert(wave_buffer_ptr != 0);
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1900              		.loc 1 384 5 discriminator 1 view .LVU524
 1901 08e4 062DA0E3 		mov	r2, #384	@,
 1902 08e8 0C309FE5 		ldr	r3, .L109+4	@,
 1903 08ec 0C109FE5 		ldr	r1, .L109+8	@,
 1904 08f0 0C009FE5 		ldr	r0, .L109+12	@,
 1905              	.LVL108:
 384:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1906              		.loc 1 384 5 discriminator 1 view .LVU525
 1907 08f4 FEFFFFEB 		bl	__assert_fail		@
 1908              	.LVL109:
 1909              	.L110:
 1910              		.align	2
 1911              	.L109:
 1912 08f8 00000000 		.word	g_armwave_state
 1913 08fc 50000000 		.word	.LANCHOR0+80
 1914 0900 20000000 		.word	.LC2
 1915 0904 A8010000 		.word	.LC12
 1916              		.cfi_endproc
 1917              	.LFE65:
 1919              		.align	2
 1920              		.global	armwave_clear_buffer
 1921              		.syntax unified
 1922              		.arm
 1923              		.fpu vfp
 1925              	armwave_clear_buffer:
 1926              	.LVL110:
 1927              	.LFB66:
 386:armwave.c     **** }
 387:armwave.c     **** 
 388:armwave.c     **** /*
 389:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 390:armwave.c     ****  */
 391:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 392:armwave.c     **** {
 1928              		.loc 1 392 1 is_stmt 1 view -0
 1929              		.cfi_startproc
 1930              		@ args = 0, pretend = 0, frame = 0
 1931              		@ frame_needed = 0, uses_anonymous_args = 0
 1932              		@ link register save eliminated.
 393:armwave.c     ****     // Flags ignored, only one buffer cleared
 394:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1933              		.loc 1 394 5 view .LVU527
 1934              	@ armwave.c:394:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1935              		.loc 1 394 58 is_stmt 0 view .LVU528
 1936 0908 0C309FE5 		ldr	r3, .L112	@ tmp114,
 1937              	@ armwave.c:394:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1938              		.loc 1 394 5 view .LVU529
 1939 090c 0010A0E3 		mov	r1, #0	@,
 1940 0910 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1941 0914 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1942              	.LVL111:
 1943              		.loc 1 394 5 view .LVU530
 1944 0918 FEFFFFEA 		b	memset		@
 1945              	.LVL112:
 1946              	.L113:
 1947              		.align	2
 1948              	.L112:
 1949 091c 00000000 		.word	g_armwave_state
 1950              		.cfi_endproc
 1951              	.LFE66:
 1953              		.align	2
 1954              		.global	armwave_set_channel_colour
 1955              		.syntax unified
 1956              		.arm
 1957              		.fpu vfp
 1959              	armwave_set_channel_colour:
 1960              	.LVL113:
 1961              	.LFB67:
 395:armwave.c     **** }
 396:armwave.c     **** 
 397:armwave.c     **** /*
 398:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 399:armwave.c     ****  */
 400:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 401:armwave.c     **** {
 1962              		.loc 1 401 1 is_stmt 1 view -0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 0
 1965              		@ frame_needed = 0, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 402:armwave.c     ****     // Only 1ch supported for now
 403:armwave.c     ****     switch(ch) {
 1967              		.loc 1 403 5 view .LVU532
 1968 0920 010050E3 		cmp	r0, #1	@ ch,
 404:armwave.c     ****         case 1:
 405:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1969              		.loc 1 405 13 view .LVU533
 1970              	@ armwave.c:405:             g_armwave_state.ch1_color.r = r;
 1971              		.loc 1 405 41 is_stmt 0 view .LVU534
 1972 0924 0C009F05 		ldreq	r0, .L116	@ tmp117,
 1973              	.LVL114:
 1974              		.loc 1 405 41 view .LVU535
 1975 0928 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 406:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1976              		.loc 1 406 13 is_stmt 1 view .LVU536
 1977              	@ armwave.c:406:             g_armwave_state.ch1_color.g = g;
 1978              		.loc 1 406 41 is_stmt 0 view .LVU537
 1979 092c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 407:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1980              		.loc 1 407 13 is_stmt 1 view .LVU538
 1981              	@ armwave.c:407:             g_armwave_state.ch1_color.b = b;
 1982              		.loc 1 407 41 is_stmt 0 view .LVU539
 1983 0930 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 408:armwave.c     ****             break;
 1984              		.loc 1 408 13 is_stmt 1 view .LVU540
 1985              	@ armwave.c:410: }
 409:armwave.c     ****     }
 410:armwave.c     **** }
 1986              		.loc 1 410 1 is_stmt 0 view .LVU541
 1987 0934 1EFF2FE1 		bx	lr	@
 1988              	.L117:
 1989              		.align	2
 1990              	.L116:
 1991 0938 00000000 		.word	g_armwave_state
 1992              		.cfi_endproc
 1993              	.LFE67:
 1995              		.align	2
 1996              		.global	armwave_dump_ppm_debug
 1997              		.syntax unified
 1998              		.arm
 1999              		.fpu vfp
 2001              	armwave_dump_ppm_debug:
 2002              	.LVL115:
 2003              	.LFB68:
 411:armwave.c     **** 
 412:armwave.c     **** /*
 413:armwave.c     ****  * Dump a ppm of a buffer to a file.
 414:armwave.c     ****  */
 415:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 416:armwave.c     **** {
 2004              		.loc 1 416 1 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 417:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2008              		.loc 1 417 5 view .LVU543
 2009              	@ armwave.c:416: {
 416:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2010              		.loc 1 416 1 is_stmt 0 view .LVU544
 2011 093c 0130A0E1 		mov	r3, r1	@ fn, fn
 2012 0940 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2013              		.cfi_def_cfa_offset 28
 2014              		.cfi_offset 4, -28
 2015              		.cfi_offset 5, -24
 2016              		.cfi_offset 6, -20
 2017              		.cfi_offset 7, -16
 2018              		.cfi_offset 8, -12
 2019              		.cfi_offset 9, -8
 2020              		.cfi_offset 14, -4
 2021 0944 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2022 0948 0CD04DE2 		sub	sp, sp, #12	@,,
 2023              		.cfi_def_cfa_offset 40
 2024              	@ armwave.c:417:     FILE *fp = fopen(fn, "wb");
 2025              		.loc 1 417 16 view .LVU545
 2026 094c C4109FE5 		ldr	r1, .L126	@,
 2027              	.LVL116:
 2028              		.loc 1 417 16 view .LVU546
 2029 0950 0300A0E1 		mov	r0, r3	@, fn
 2030              	.LVL117:
 2031              		.loc 1 417 16 view .LVU547
 2032 0954 FEFFFFEB 		bl	fopen64		@
 2033              	.LVL118:
 2034              	@ armwave.c:424:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 418:armwave.c     ****     uint32_t data;
 419:armwave.c     ****     int xx, yy;
 420:armwave.c     **** 
 421:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 422:armwave.c     **** 
 423:armwave.c     ****     fputs("P3\n", fp);
 424:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2035              		.loc 1 424 5 view .LVU548
 2036 0958 BC609FE5 		ldr	r6, .L126+4	@ tmp150,
 2037              	@ armwave.c:423:     fputs("P3\n", fp);
 423:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2038              		.loc 1 423 5 view .LVU549
 2039 095c 0320A0E3 		mov	r2, #3	@,
 2040 0960 0110A0E3 		mov	r1, #1	@,
 2041              	@ armwave.c:417:     FILE *fp = fopen(fn, "wb");
 417:armwave.c     ****     uint32_t data;
 2042              		.loc 1 417 16 view .LVU550
 2043 0964 0070A0E1 		mov	r7, r0	@ fp,
 2044              	.LVL119:
 418:armwave.c     ****     uint32_t data;
 2045              		.loc 1 418 5 is_stmt 1 view .LVU551
 419:armwave.c     **** 
 2046              		.loc 1 419 5 view .LVU552
 423:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2047              		.loc 1 423 5 view .LVU553
 2048 0968 0030A0E1 		mov	r3, r0	@, fp
 2049 096c AC009FE5 		ldr	r0, .L126+8	@,
 2050              	.LVL120:
 423:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2051              		.loc 1 423 5 is_stmt 0 view .LVU554
 2052 0970 FEFFFFEB 		bl	fwrite		@
 2053              	.LVL121:
 2054              		.loc 1 424 5 is_stmt 1 view .LVU555
 2055 0974 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2056 0978 A4109FE5 		ldr	r1, .L126+12	@,
 2057 097c 0700A0E1 		mov	r0, r7	@, fp
 2058 0980 FEFFFFEB 		bl	fprintf		@
 2059              	.LVL122:
 425:armwave.c     ****     fputs("255\n", fp);
 2060              		.loc 1 425 5 view .LVU556
 2061 0984 0420A0E3 		mov	r2, #4	@,
 2062 0988 0730A0E1 		mov	r3, r7	@, fp
 2063 098c 0110A0E3 		mov	r1, #1	@,
 2064 0990 90009FE5 		ldr	r0, .L126+16	@,
 2065 0994 FEFFFFEB 		bl	fwrite		@
 2066              	.LVL123:
 426:armwave.c     **** 
 427:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2067              		.loc 1 427 5 view .LVU557
 2068              	@ armwave.c:427:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2069              		.loc 1 427 37 is_stmt 0 view .LVU558
 2070 0998 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2071              	@ armwave.c:427:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2072              		.loc 1 427 5 view .LVU559
 2073 099c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2074 09a0 180000DA 		ble	.L119		@,
 2075 09a4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2076              	@ armwave.c:432:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 429:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 430:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 431:armwave.c     **** 
 432:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2077              		.loc 1 432 13 view .LVU560
 2078 09a8 7C909FE5 		ldr	r9, .L126+20	@ tmp152,
 2079              	@ armwave.c:427:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 427 12 view .LVU561
 2081 09ac 0050A0E3 		mov	r5, #0	@ yy,
 2082              	.LVL124:
 2083              	.L120:
 2084              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2085              		.loc 1 428 9 view .LVU562
 2086 09b0 000053E3 		cmp	r3, #0	@ _13,
 2087              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2088              		.loc 1 428 16 view .LVU563
 2089 09b4 0040A0C3 		movgt	r4, #0	@ xx,
 2090              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2091              		.loc 1 428 9 view .LVU564
 2092 09b8 0F0000DA 		ble	.L122		@,
 2093              	.LVL125:
 2094              	.L121:
 429:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2095              		.loc 1 429 13 is_stmt 1 discriminator 3 view .LVU565
 2096              	@ armwave.c:429:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 429:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2097              		.loc 1 429 29 is_stmt 0 discriminator 3 view .LVU566
 2098 09bc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2099              	@ armwave.c:432:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2100              		.loc 1 432 13 discriminator 3 view .LVU567
 2101 09c0 0910A0E1 		mov	r1, r9	@, tmp152
 2102 09c4 0700A0E1 		mov	r0, r7	@, fp
 2103              	@ armwave.c:429:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 429:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2104              		.loc 1 429 18 discriminator 3 view .LVU568
 2105 09c8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2106              	.LVL126:
 2107              		.loc 1 432 13 is_stmt 1 discriminator 3 view .LVU569
 2108              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2109              		.loc 1 428 58 is_stmt 0 discriminator 3 view .LVU570
 2110 09cc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2111              	.LVL127:
 2112              	@ armwave.c:432:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2113              		.loc 1 432 81 discriminator 3 view .LVU571
 2114 09d0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2115              	@ armwave.c:432:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2116              		.loc 1 432 61 discriminator 3 view .LVU572
 2117 09d4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2118              	@ armwave.c:432:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2119              		.loc 1 432 13 discriminator 3 view .LVU573
 2120 09d8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2121 09dc 7330EFE6 		uxtb	r3, r3	@, tmp142
 2122 09e0 00C08DE5 		str	ip, [sp]	@ tmp147,
 2123 09e4 7220EFE6 		uxtb	r2, r2	@, data
 2124              	.LVL128:
 2125              		.loc 1 432 13 discriminator 3 view .LVU574
 2126 09e8 FEFFFFEB 		bl	fprintf		@
 2127              	.LVL129:
 2128              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2129              		.loc 1 428 41 discriminator 3 view .LVU575
 2130 09ec 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2131              	@ armwave.c:428:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2132              		.loc 1 428 9 discriminator 3 view .LVU576
 2133 09f0 040053E1 		cmp	r3, r4	@ _13, xx
 2134 09f4 F0FFFFCA 		bgt	.L121		@,
 2135 09f8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2136              	.LVL130:
 2137              	.L122:
 2138              	@ armwave.c:427:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2139              		.loc 1 427 55 discriminator 2 view .LVU577
 2140 09fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2141              	.LVL131:
 2142              	@ armwave.c:427:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2143              		.loc 1 427 5 discriminator 2 view .LVU578
 2144 0a00 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2145 0a04 E9FFFFBA 		blt	.L120		@,
 2146              	.LVL132:
 2147              	.L119:
 433:armwave.c     ****         }
 434:armwave.c     ****     }
 435:armwave.c     **** 
 436:armwave.c     ****     fclose(fp);
 2148              		.loc 1 436 5 is_stmt 1 view .LVU579
 2149 0a08 0700A0E1 		mov	r0, r7	@, fp
 2150              	@ armwave.c:437: }
 437:armwave.c     **** }
 2151              		.loc 1 437 1 is_stmt 0 view .LVU580
 2152 0a0c 0CD08DE2 		add	sp, sp, #12	@,,
 2153              		.cfi_def_cfa_offset 28
 2154              		@ sp needed	@
 2155 0a10 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2156              		.cfi_restore 14
 2157              		.cfi_restore 9
 2158              		.cfi_restore 8
 2159              		.cfi_restore 7
 2160              		.cfi_restore 6
 2161              		.cfi_restore 5
 2162              		.cfi_restore 4
 2163              		.cfi_def_cfa_offset 0
 2164              	.LVL133:
 2165              	@ armwave.c:436:     fclose(fp);
 436:armwave.c     **** }
 2166              		.loc 1 436 5 view .LVU581
 2167 0a14 FEFFFFEA 		b	fclose		@
 2168              	.LVL134:
 2169              	.L127:
 436:armwave.c     **** }
 2170              		.loc 1 436 5 view .LVU582
 2171              		.align	2
 2172              	.L126:
 2173 0a18 C0010000 		.word	.LC13
 2174 0a1c 00000000 		.word	g_armwave_state
 2175 0a20 C4010000 		.word	.LC14
 2176 0a24 C8010000 		.word	.LC15
 2177 0a28 D0010000 		.word	.LC16
 2178 0a2c D8010000 		.word	.LC17
 2179              		.cfi_endproc
 2180              	.LFE68:
 2182              		.align	2
 2183              		.global	armwave_test_init
 2184              		.syntax unified
 2185              		.arm
 2186              		.fpu vfp
 2188              	armwave_test_init:
 2189              	.LVL135:
 2190              	.LFB69:
 438:armwave.c     **** 
 439:armwave.c     **** /*
 440:armwave.c     ****  * Initialise some test functionry.
 441:armwave.c     ****  */
 442:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 443:armwave.c     **** {
 2191              		.loc 1 443 1 is_stmt 1 view -0
 2192              		.cfi_startproc
 2193              		@ args = 0, pretend = 0, frame = 0
 2194              		@ frame_needed = 0, uses_anonymous_args = 0
 444:armwave.c     ****     test_create_gamma();
 2195              		.loc 1 444 5 view .LVU584
 2196              	.LBB18:
 2197              	.LBI18:
  34:armwave.c     **** {
 2198              		.loc 1 34 6 view .LVU585
  34:armwave.c     **** {
 2199              		.loc 1 34 6 is_stmt 0 view .LVU586
 2200              	.LBE18:
 2201              	@ armwave.c:443: {
 443:armwave.c     ****     test_create_gamma();
 2202              		.loc 1 443 1 view .LVU587
 2203 0a30 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2204              		.cfi_def_cfa_offset 32
 2205              		.cfi_offset 4, -32
 2206              		.cfi_offset 5, -28
 2207              		.cfi_offset 6, -24
 2208              		.cfi_offset 7, -20
 2209              		.cfi_offset 8, -16
 2210              		.cfi_offset 9, -12
 2211              		.cfi_offset 10, -8
 2212              		.cfi_offset 14, -4
 2213 0a34 068B2DED 		vpush.64	{d8, d9, d10}	@
 2214              		.cfi_def_cfa_offset 56
 2215              		.cfi_offset 80, -56
 2216              		.cfi_offset 81, -52
 2217              		.cfi_offset 82, -48
 2218              		.cfi_offset 83, -44
 2219              		.cfi_offset 84, -40
 2220              		.cfi_offset 85, -36
 2221 0a38 BC409FE5 		ldr	r4, .L132+20	@ ivtmp.92,
 2222              	.LBB21:
 2223              	.LBB19:
 2224              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2225              		.loc 1 40 32 view .LVU588
 2226 0a3c 2DAA9FED 		vldr.32	s20, .L132+16	@ tmp136,
 2227              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2228              		.loc 1 40 26 view .LVU589
 2229 0a40 289B9FED 		vldr.64	d9, .L132	@ tmp151,
 2230              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2231              		.loc 1 40 49 view .LVU590
 2232 0a44 298B9FED 		vldr.64	d8, .L132+8	@ tmp139,
 2233 0a48 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.92,
 2234              	.LBE19:
 2235              	.LBE21:
 2236              	@ armwave.c:443: {
 443:armwave.c     ****     test_create_gamma();
 2237              		.loc 1 443 1 view .LVU591
 2238 0a4c 10D04DE2 		sub	sp, sp, #16	@,,
 2239              		.cfi_def_cfa_offset 72
 2240              	@ armwave.c:443: {
 443:armwave.c     ****     test_create_gamma();
 2241              		.loc 1 443 1 view .LVU592
 2242 0a50 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2243 0a54 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2244 0a58 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2245 0a5c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2246 0a60 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.92,
 2247 0a64 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2248              	.LVL136:
 2249              	.L129:
 2250              	.LBB22:
 2251              	.LBB20:
  40:armwave.c     ****     }
 2252              		.loc 1 40 9 is_stmt 1 view .LVU593
 2253              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2254              		.loc 1 40 32 is_stmt 0 view .LVU594
 2255 0a68 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.92
 2256              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2257              		.loc 1 40 26 view .LVU595
 2258 0a6c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2259              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2260              		.loc 1 40 32 view .LVU596
 2261 0a70 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2262 0a74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2263 0a78 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2264              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2265              		.loc 1 40 26 view .LVU597
 2266 0a7c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2267 0a80 FEFFFFEB 		bl	pow		@
 2268              	.LVL137:
 2269              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2270              		.loc 1 40 49 view .LVU598
 2271 0a84 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2272              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2273              		.loc 1 40 24 view .LVU599
 2274 0a88 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2275 0a8c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2276 0a90 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2277              	.LVL138:
 2278              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2279              		.loc 1 39 5 view .LVU600
 2280 0a94 0A0054E1 		cmp	r4, r10	@ ivtmp.92, _39
 2281 0a98 F2FFFF1A 		bne	.L129		@,
 2282              	.LVL139:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2283              		.loc 1 39 5 view .LVU601
 2284              	.LBE20:
 2285              	.LBE22:
 445:armwave.c     **** 
 446:armwave.c     ****     // make ch1 yellowish by default
 447:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2286              		.loc 1 447 5 is_stmt 1 view .LVU602
 2287              	.LBB23:
 2288              	.LBI23:
 400:armwave.c     **** {
 2289              		.loc 1 400 6 view .LVU603
 2290              	.LBB24:
 403:armwave.c     ****         case 1:
 2291              		.loc 1 403 5 view .LVU604
 405:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2292              		.loc 1 405 13 view .LVU605
 406:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2293              		.loc 1 406 13 view .LVU606
 2294              	@ armwave.c:405:             g_armwave_state.ch1_color.r = r;
 405:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2295              		.loc 1 405 41 is_stmt 0 view .LVU607
 2296 0a9c 5CC09FE5 		ldr	ip, .L132+24	@ tmp142,
 2297 0aa0 5C409FE5 		ldr	r4, .L132+28	@ tmp143,
 2298              	.LBE24:
 2299              	.LBE23:
 2300              	@ armwave.c:449:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 448:armwave.c     **** 
 449:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2301              		.loc 1 449 5 view .LVU608
 2302 0aa4 0000A0E3 		mov	r0, #0	@ tmp147,
 2303              	.LBB28:
 2304              	.LBB25:
 2305              	@ armwave.c:407:             g_armwave_state.ch1_color.b = b;
 407:armwave.c     ****             break;
 2306              		.loc 1 407 41 view .LVU609
 2307 0aa8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2308              	.LBE25:
 2309              	.LBE28:
 2310              	@ armwave.c:449:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2311              		.loc 1 449 5 view .LVU610
 2312 0aac 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2313 0ab0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2314 0ab4 00808DE5 		str	r8, [sp]	@ render_width,
 2315 0ab8 0610A0E1 		mov	r1, r6	@, tmp3
 2316 0abc 0720A0E1 		mov	r2, r7	@, nwaves
 2317              	.LBB29:
 2318              	.LBB26:
 2319              	@ armwave.c:405:             g_armwave_state.ch1_color.r = r;
 405:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2320              		.loc 1 405 41 view .LVU611
 2321 0ac0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 407:armwave.c     ****             break;
 2322              		.loc 1 407 13 is_stmt 1 view .LVU612
 2323              	.LBE26:
 2324              	.LBE29:
 2325              	@ armwave.c:449:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2326              		.loc 1 449 5 is_stmt 0 view .LVU613
 2327 0ac4 0630A0E1 		mov	r3, r6	@, wave_size
 2328              	.LBB30:
 2329              	.LBB27:
 2330              	@ armwave.c:407:             g_armwave_state.ch1_color.b = b;
 407:armwave.c     ****             break;
 2331              		.loc 1 407 41 view .LVU614
 2332 0ac8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 408:armwave.c     ****     }
 2333              		.loc 1 408 13 is_stmt 1 view .LVU615
 2334              	.LVL140:
 408:armwave.c     ****     }
 2335              		.loc 1 408 13 is_stmt 0 view .LVU616
 2336              	.LBE27:
 2337              	.LBE30:
 2338              		.loc 1 449 5 is_stmt 1 view .LVU617
 2339 0acc FEFFFFEB 		bl	armwave_setup_render		@
 2340              	.LVL141:
 450:armwave.c     **** 
 451:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2341              		.loc 1 451 5 view .LVU618
 2342 0ad0 30109FE5 		ldr	r1, .L132+32	@,
 2343 0ad4 30009FE5 		ldr	r0, .L132+36	@,
 2344              	@ armwave.c:452: }
 452:armwave.c     **** }
 2345              		.loc 1 452 1 is_stmt 0 view .LVU619
 2346 0ad8 10D08DE2 		add	sp, sp, #16	@,,
 2347              		.cfi_def_cfa_offset 56
 2348              		@ sp needed	@
 2349 0adc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2350              		.cfi_restore 84
 2351              		.cfi_restore 85
 2352              		.cfi_restore 82
 2353              		.cfi_restore 83
 2354              		.cfi_restore 80
 2355              		.cfi_restore 81
 2356              		.cfi_def_cfa_offset 32
 2357 0ae0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2358              		.cfi_restore 14
 2359              		.cfi_restore 10
 2360              		.cfi_restore 9
 2361              		.cfi_restore 8
 2362              		.cfi_restore 7
 2363              		.cfi_restore 6
 2364              		.cfi_restore 5
 2365              		.cfi_restore 4
 2366              		.cfi_def_cfa_offset 0
 2367              	.LVL142:
 2368              	@ armwave.c:451:     printf("armwave version: %s\n", ARMWAVE_VER);
 451:armwave.c     **** }
 2369              		.loc 1 451 5 view .LVU620
 2370 0ae4 FEFFFFEA 		b	printf		@
 2371              	.LVL143:
 2372              	.L133:
 2373              		.align	3
 2374              	.L132:
 2375 0ae8 000000C0 		.word	-1073741824
 2376 0aec CCCCEC3F 		.word	1072483532
 2377 0af0 00000000 		.word	0
 2378 0af4 00E06F40 		.word	1081073664
 2379 0af8 00007F43 		.word	1132396544
 2380 0afc FFFFFFFF 		.word	gamma_table-1
 2381 0b00 00000000 		.word	g_armwave_state
 2382 0b04 F609F406 		.word	116656630
 2383 0b08 00000000 		.word	.LC0
 2384 0b0c 08000000 		.word	.LC1
 2385              		.cfi_endproc
 2386              	.LFE69:
 2388              		.align	2
 2389              		.global	armwave_test_fill_outbuf
 2390              		.syntax unified
 2391              		.arm
 2392              		.fpu vfp
 2394              	armwave_test_fill_outbuf:
 2395              	.LFB70:
 453:armwave.c     **** 
 454:armwave.c     **** /*
 455:armwave.c     ****  * Render image to the local allocated buffer.
 456:armwave.c     ****  */
 457:armwave.c     **** void armwave_test_fill_outbuf()
 458:armwave.c     **** {
 2396              		.loc 1 458 1 is_stmt 1 view -0
 2397              		.cfi_startproc
 2398              		@ args = 0, pretend = 0, frame = 0
 2399              		@ frame_needed = 0, uses_anonymous_args = 0
 2400              		@ link register save eliminated.
 459:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2401              		.loc 1 459 5 view .LVU622
 2402 0b10 04309FE5 		ldr	r3, .L135	@ tmp111,
 2403 0b14 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2404 0b18 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2405              	.LVL144:
 2406              	.L136:
 2407              		.align	2
 2408              	.L135:
 2409 0b1c 00000000 		.word	g_armwave_state
 2410              		.cfi_endproc
 2411              	.LFE70:
 2413              		.align	2
 2414              		.global	armwave_test_dump_buffer_to_ppm
 2415              		.syntax unified
 2416              		.arm
 2417              		.fpu vfp
 2419              	armwave_test_dump_buffer_to_ppm:
 2420              	.LVL145:
 2421              	.LFB71:
 460:armwave.c     **** }
 461:armwave.c     **** 
 462:armwave.c     **** /*
 463:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 464:armwave.c     ****  */
 465:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 466:armwave.c     **** {
 2422              		.loc 1 466 1 view -0
 2423              		.cfi_startproc
 2424              		@ args = 0, pretend = 0, frame = 0
 2425              		@ frame_needed = 0, uses_anonymous_args = 0
 2426              		@ link register save eliminated.
 467:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2427              		.loc 1 467 5 view .LVU624
 2428 0b20 08309FE5 		ldr	r3, .L138	@ tmp112,
 2429 0b24 0010A0E1 		mov	r1, r0	@, fn
 2430 0b28 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2431              	.LVL146:
 2432              		.loc 1 467 5 is_stmt 0 view .LVU625
 2433 0b2c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2434              	.LVL147:
 2435              	.L139:
 2436              		.loc 1 467 5 view .LVU626
 2437              		.align	2
 2438              	.L138:
 2439 0b30 00000000 		.word	g_armwave_state
 2440              		.cfi_endproc
 2441              	.LFE71:
 2443              		.align	2
 2444              		.global	armwave_test_fill_gdkbuf
 2445              		.syntax unified
 2446              		.arm
 2447              		.fpu vfp
 2449              	armwave_test_fill_gdkbuf:
 2450              	.LVL148:
 2451              	.LFB72:
 468:armwave.c     **** }
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Render GDK buffer with test funtionry.
 472:armwave.c     ****  */
 473:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 474:armwave.c     **** {
 2452              		.loc 1 474 1 is_stmt 1 view -0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456              		@ link register save eliminated.
 475:armwave.c     ****     //PyObject *mv;
 476:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 477:armwave.c     **** 
 478:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 479:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2457              		.loc 1 479 5 view .LVU628
 480:armwave.c     ****     
 481:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 482:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2458              		.loc 1 482 5 view .LVU629
 2459              	@ armwave.c:479:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 479:armwave.c     ****     
 2460              		.loc 1 479 11 is_stmt 0 view .LVU630
 2461 0b34 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2462              	@ armwave.c:482:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2463              		.loc 1 482 5 view .LVU631
 2464 0b38 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2465              	.LVL149:
 2466              		.loc 1 482 5 view .LVU632
 2467 0b3c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2468              	.LVL150:
 2469              		.loc 1 482 5 view .LVU633
 2470              		.cfi_endproc
 2471              	.LFE72:
 2473              		.align	2
 2474              		.global	armwave_test_buffer_alloc
 2475              		.syntax unified
 2476              		.arm
 2477              		.fpu vfp
 2479              	armwave_test_buffer_alloc:
 2480              	.LVL151:
 2481              	.LFB73:
 483:armwave.c     **** }
 484:armwave.c     **** 
 485:armwave.c     **** /*
 486:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 487:armwave.c     ****  */
 488:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 489:armwave.c     **** {
 2482              		.loc 1 489 1 is_stmt 1 view -0
 2483              		.cfi_startproc
 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2486              		.loc 1 490 5 view .LVU635
 2487              	@ armwave.c:489: {
 489:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2488              		.loc 1 489 1 is_stmt 0 view .LVU636
 2489 0b40 70402DE9 		push	{r4, r5, r6, lr}	@
 2490              		.cfi_def_cfa_offset 16
 2491              		.cfi_offset 4, -16
 2492              		.cfi_offset 5, -12
 2493              		.cfi_offset 6, -8
 2494              		.cfi_offset 14, -4
 2495              	@ armwave.c:489: {
 489:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2496              		.loc 1 489 1 view .LVU637
 2497 0b44 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2498              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer != NULL) {
 2499              		.loc 1 490 23 view .LVU638
 2500 0b48 44409FE5 		ldr	r4, .L148	@ tmp128,
 2501 0b4c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2502              	.LVL152:
 2503              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer != NULL) {
 2504              		.loc 1 490 7 view .LVU639
 2505 0b50 000050E3 		cmp	r0, #0	@ _1,
 2506 0b54 0000000A 		beq	.L142		@,
 491:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2507              		.loc 1 491 9 is_stmt 1 view .LVU640
 2508 0b58 FEFFFFEB 		bl	free		@
 2509              	.LVL153:
 2510              	.L142:
 492:armwave.c     ****     }
 493:armwave.c     **** 
 494:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 495:armwave.c     **** 
 496:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2511              		.loc 1 496 5 view .LVU641
 2512              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2513              		.loc 1 496 75 is_stmt 0 view .LVU642
 2514 0b5c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2515 0b60 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2516              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2517              		.loc 1 496 40 view .LVU643
 2518 0b64 0610A0E1 		mov	r1, r6	@, nsets
 2519              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2520              		.loc 1 496 75 view .LVU644
 2521 0b68 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2522              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2523              		.loc 1 496 40 view .LVU645
 2524 0b6c 0500A0E1 		mov	r0, r5	@, _4
 2525 0b70 FEFFFFEB 		bl	calloc		@
 2526              	.LVL154:
 2527              	@ armwave.c:498:     if(g_armwave_state.test_wave_buffer == NULL) {
 497:armwave.c     **** 
 498:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2528              		.loc 1 498 7 view .LVU646
 2529 0b74 000050E3 		cmp	r0, #0	@ tmp124,
 2530              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2531              		.loc 1 496 38 view .LVU647
 2532 0b78 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2533              		.loc 1 498 5 is_stmt 1 view .LVU648
 2534              	@ armwave.c:498:     if(g_armwave_state.test_wave_buffer == NULL) {
 2535              		.loc 1 498 7 is_stmt 0 view .LVU649
 2536 0b7c 7080BD18 		popne	{r4, r5, r6, pc}	@
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2537              		.loc 1 499 9 is_stmt 1 view .LVU650
 2538 0b80 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2539 0b84 0620A0E1 		mov	r2, r6	@, nsets
 2540 0b88 08009FE5 		ldr	r0, .L148+4	@,
 2541              	@ armwave.c:503: }
 500:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 501:armwave.c     ****         return;
 502:armwave.c     ****     }
 503:armwave.c     **** }
 2542              		.loc 1 503 1 is_stmt 0 view .LVU651
 2543 0b8c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2544              		.cfi_restore 14
 2545              		.cfi_restore 6
 2546              		.cfi_restore 5
 2547              		.cfi_restore 4
 2548              		.cfi_def_cfa_offset 0
 2549              	.LVL155:
 2550              	@ armwave.c:499:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2551              		.loc 1 499 9 view .LVU652
 2552 0b90 FEFFFFEA 		b	printf		@
 2553              	.LVL156:
 2554              	.L149:
 499:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2555              		.loc 1 499 9 view .LVU653
 2556              		.align	2
 2557              	.L148:
 2558 0b94 00000000 		.word	g_armwave_state
 2559 0b98 E8010000 		.word	.LC18
 2560              		.cfi_endproc
 2561              	.LFE73:
 2563              		.align	2
 2564              		.global	armwave_fill_pixbuf_into_pybuffer
 2565              		.syntax unified
 2566              		.arm
 2567              		.fpu vfp
 2569              	armwave_fill_pixbuf_into_pybuffer:
 2570              	.LVL157:
 2571              	.LFB74:
 504:armwave.c     **** 
 505:armwave.c     **** /*
 506:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 507:armwave.c     ****  */
 508:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 509:armwave.c     **** {
 2572              		.loc 1 509 1 is_stmt 1 view -0
 2573              		.cfi_startproc
 2574              		@ args = 0, pretend = 0, frame = 48
 2575              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     Py_buffer buffer;
 2576              		.loc 1 510 5 view .LVU655
 511:armwave.c     ****     int ret;
 2577              		.loc 1 511 5 view .LVU656
 512:armwave.c     **** 
 513:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 514:armwave.c     **** 
 515:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2578              		.loc 1 515 5 view .LVU657
 2579              	@ armwave.c:509: {
 509:armwave.c     ****     Py_buffer buffer;
 2580              		.loc 1 509 1 is_stmt 0 view .LVU658
 2581 0b9c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2582              		.cfi_def_cfa_offset 4
 2583              		.cfi_offset 14, -4
 2584 0ba0 34D04DE2 		sub	sp, sp, #52	@,,
 2585              		.cfi_def_cfa_offset 56
 2586              	@ armwave.c:515:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2587              		.loc 1 515 11 view .LVU659
 2588 0ba4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2589 0ba8 0120A0E3 		mov	r2, #1	@,
 2590 0bac FEFFFFEB 		bl	PyObject_GetBuffer		@
 2591              	.LVL158:
 516:armwave.c     **** 
 517:armwave.c     ****     if(ret != 0) {
 2592              		.loc 1 517 5 is_stmt 1 view .LVU660
 2593              	@ armwave.c:517:     if(ret != 0) {
 2594              		.loc 1 517 7 is_stmt 0 view .LVU661
 2595 0bb0 000050E3 		cmp	r0, #0	@,
 2596 0bb4 0A00001A 		bne	.L154		@,
 518:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 519:armwave.c     ****         Py_RETURN_FALSE;
 520:armwave.c     ****     }
 521:armwave.c     **** 
 522:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 523:armwave.c     **** 
 524:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2597              		.loc 1 524 5 is_stmt 1 view .LVU662
 2598 0bb8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2599              	.LVL159:
 2600              		.loc 1 524 5 is_stmt 0 view .LVU663
 2601 0bbc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2602              	.LVL160:
 525:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 526:armwave.c     **** 
 527:armwave.c     ****     PyBuffer_Release(&buffer);
 2603              		.loc 1 527 5 is_stmt 1 view .LVU664
 2604 0bc0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2605 0bc4 FEFFFFEB 		bl	PyBuffer_Release		@
 2606              	.LVL161:
 528:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 529:armwave.c     **** 
 530:armwave.c     ****     Py_RETURN_TRUE;
 2607              		.loc 1 530 5 view .LVU665
 2608              	.LBB31:
 2609              	.LBI31:
 2610              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2611              		.loc 2 456 20 view .LVU666
 2612              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2613              		.loc 2 458 21 view .LVU667
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2614              		.loc 2 459 5 view .LVU668
 2615              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2616              		.loc 2 459 18 is_stmt 0 view .LVU669
 2617 0bc8 38309FE5 		ldr	r3, .L155	@ tmp126,
 2618              	.LBE32:
 2619              	.LBE31:
 2620              	@ armwave.c:530:     Py_RETURN_TRUE;
 2621              		.loc 1 530 5 view .LVU670
 2622 0bcc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2623              	.LBB34:
 2624              	.LBB33:
 2625              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2626              		.loc 2 459 18 view .LVU671
 2627 0bd0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2628 0bd4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2629 0bd8 002083E5 		str	r2, [r3]	@ tmp128,
 2630              	.LBE33:
 2631              	.LBE34:
 2632              	@ armwave.c:531: }
 531:armwave.c     **** }
 2633              		.loc 1 531 1 view .LVU672
 2634 0bdc 34D08DE2 		add	sp, sp, #52	@,,
 2635              		.cfi_remember_state
 2636              		.cfi_def_cfa_offset 4
 2637              		@ sp needed	@
 2638 0be0 04F09DE4 		ldr	pc, [sp], #4	@
 2639              	.LVL162:
 2640              	.L154:
 2641              		.cfi_restore_state
 518:armwave.c     ****         Py_RETURN_FALSE;
 2642              		.loc 1 518 9 is_stmt 1 view .LVU673
 2643 0be4 20009FE5 		ldr	r0, .L155+4	@,
 2644              	.LVL163:
 518:armwave.c     ****         Py_RETURN_FALSE;
 2645              		.loc 1 518 9 is_stmt 0 view .LVU674
 2646 0be8 FEFFFFEB 		bl	puts		@
 2647              	.LVL164:
 519:armwave.c     ****     }
 2648              		.loc 1 519 9 is_stmt 1 view .LVU675
 2649              	.LBB35:
 2650              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2651              		.loc 2 456 20 view .LVU676
 2652              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2653              		.loc 2 458 21 view .LVU677
 2654              		.loc 2 459 5 view .LVU678
 2655              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2656              		.loc 2 459 18 is_stmt 0 view .LVU679
 2657 0bec 1C309FE5 		ldr	r3, .L155+8	@ tmp120,
 2658              	.LBE36:
 2659              	.LBE35:
 2660              	@ armwave.c:519:         Py_RETURN_FALSE;
 519:armwave.c     ****     }
 2661              		.loc 1 519 9 view .LVU680
 2662 0bf0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2663              	.LBB38:
 2664              	.LBB37:
 2665              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2666              		.loc 2 459 18 view .LVU681
 2667 0bf4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2668 0bf8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2669 0bfc 002083E5 		str	r2, [r3]	@ tmp122,
 2670              	.LBE37:
 2671              	.LBE38:
 2672              	@ armwave.c:531: }
 2673              		.loc 1 531 1 view .LVU682
 2674 0c00 34D08DE2 		add	sp, sp, #52	@,,
 2675              		.cfi_def_cfa_offset 4
 2676              		@ sp needed	@
 2677 0c04 04F09DE4 		ldr	pc, [sp], #4	@
 2678              	.L156:
 2679              		.align	2
 2680              	.L155:
 2681 0c08 00000000 		.word	_Py_TrueStruct
 2682 0c0c 3C020000 		.word	.LC19
 2683 0c10 00000000 		.word	_Py_FalseStruct
 2684              		.cfi_endproc
 2685              	.LFE74:
 2687              		.align	2
 2688              		.global	armwave_test_create_am_sine
 2689              		.syntax unified
 2690              		.arm
 2691              		.fpu vfp
 2693              	armwave_test_create_am_sine:
 2694              	.LVL165:
 2695              	.LFB75:
 532:armwave.c     **** 
 533:armwave.c     **** /*
 534:armwave.c     ****  * Make a test AM waveform for render tests.
 535:armwave.c     ****  *
 536:armwave.c     ****  * @param   mod                     modulation depth
 537:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 538:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 539:armwave.c     ****  */
 540:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 541:armwave.c     **** {
 2696              		.loc 1 541 1 is_stmt 1 view -0
 2697              		.cfi_startproc
 2698              		@ args = 0, pretend = 0, frame = 8
 2699              		@ frame_needed = 0, uses_anonymous_args = 0
 542:armwave.c     ****     float v, noise, xnoise, mod_val;
 2700              		.loc 1 542 5 view .LVU684
 543:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2701              		.loc 1 543 5 view .LVU685
 2702              	@ armwave.c:541: {
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2703              		.loc 1 541 1 is_stmt 0 view .LVU686
 2704 0c14 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2705              		.cfi_def_cfa_offset 32
 2706              		.cfi_offset 4, -32
 2707              		.cfi_offset 5, -28
 2708              		.cfi_offset 6, -24
 2709              		.cfi_offset 7, -20
 2710              		.cfi_offset 8, -16
 2711              		.cfi_offset 9, -12
 2712              		.cfi_offset 10, -8
 2713              		.cfi_offset 14, -4
 2714              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2715              		.loc 1 543 38 view .LVU687
 2716 0c18 7A7A9FED 		vldr.32	s14, .L188	@ tmp180,
 2717              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2718              		.loc 1 543 55 view .LVU688
 2719 0c1c 00529FE5 		ldr	r5, .L188+28	@ tmp250,
 2720              	@ armwave.c:541: {
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2721              		.loc 1 541 1 view .LVU689
 2722 0c20 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2723              		.cfi_def_cfa_offset 80
 2724              		.cfi_offset 80, -80
 2725              		.cfi_offset 81, -76
 2726              		.cfi_offset 82, -72
 2727              		.cfi_offset 83, -68
 2728              		.cfi_offset 84, -64
 2729              		.cfi_offset 85, -60
 2730              		.cfi_offset 86, -56
 2731              		.cfi_offset 87, -52
 2732              		.cfi_offset 88, -48
 2733              		.cfi_offset 89, -44
 2734              		.cfi_offset 90, -40
 2735              		.cfi_offset 91, -36
 2736 0c24 0090A0E1 		mov	r9, r0	@ sets, sets
 2737              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2738              		.loc 1 543 38 view .LVU690
 2739 0c28 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2740              	@ armwave.c:547:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 544:armwave.c     ****     int s, set_offset = 0;
 545:armwave.c     ****     int w, x;
 546:armwave.c     **** 
 547:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2741              		.loc 1 547 70 view .LVU691
 2742 0c2c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2743 0c30 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2744              	.LBB41:
 2745              	.LBB42:
 2746              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer != NULL) {
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2747              		.loc 1 490 23 view .LVU692
 2748 0c34 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2749              	.LVL166:
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2750              		.loc 1 490 23 view .LVU693
 2751              	.LBE42:
 2752              	.LBE41:
 2753              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 543:armwave.c     ****     int s, set_offset = 0;
 2754              		.loc 1 543 38 view .LVU694
 2755 0c38 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2756              	@ armwave.c:547:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2757              		.loc 1 547 70 view .LVU695
 2758 0c3c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2759              	@ armwave.c:541: {
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2760              		.loc 1 541 1 view .LVU696
 2761 0c40 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2762              	.LBB46:
 2763              	.LBB43:
 2764              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer != NULL) {
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2765              		.loc 1 490 7 view .LVU697
 2766 0c44 000050E3 		cmp	r0, #0	@ _82,
 2767              	.LBE43:
 2768              	.LBE46:
 2769              	@ armwave.c:541: {
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2770              		.loc 1 541 1 view .LVU698
 2771 0c48 08D04DE2 		sub	sp, sp, #8	@,,
 2772              		.cfi_def_cfa_offset 88
 2773              	@ armwave.c:548:     g_armwave_state.test_wave_buffer_nsets = sets;
 548:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2774              		.loc 1 548 44 view .LVU699
 2775 0c4c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2776              	@ armwave.c:547:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 547:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2777              		.loc 1 547 45 view .LVU700
 2778 0c50 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2779              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 543:armwave.c     ****     int s, set_offset = 0;
 2780              		.loc 1 543 38 view .LVU701
 2781 0c54 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2782              	@ armwave.c:543:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 543:armwave.c     ****     int s, set_offset = 0;
 2783              		.loc 1 543 11 view .LVU702
 2784 0c58 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2785              	.LVL167:
 544:armwave.c     ****     int w, x;
 2786              		.loc 1 544 5 is_stmt 1 view .LVU703
 545:armwave.c     **** 
 2787              		.loc 1 545 5 view .LVU704
 547:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2788              		.loc 1 547 5 view .LVU705
 2789              		.loc 1 548 5 view .LVU706
 549:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2790              		.loc 1 549 5 view .LVU707
 2791              	.LBB47:
 2792              	.LBI41:
 488:armwave.c     **** {
 2793              		.loc 1 488 6 view .LVU708
 2794              	.LBB44:
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2795              		.loc 1 490 5 view .LVU709
 2796              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer != NULL) {
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2797              		.loc 1 490 7 is_stmt 0 view .LVU710
 2798 0c5c 0000000A 		beq	.L158		@,
 491:armwave.c     ****     }
 2799              		.loc 1 491 9 is_stmt 1 view .LVU711
 2800 0c60 FEFFFFEB 		bl	free		@
 2801              	.LVL168:
 2802              	.L158:
 496:armwave.c     **** 
 2803              		.loc 1 496 5 view .LVU712
 2804              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2805              		.loc 1 496 75 is_stmt 0 view .LVU713
 2806 0c64 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2807 0c68 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2808              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2809              		.loc 1 496 40 view .LVU714
 2810 0c6c 0910A0E1 		mov	r1, r9	@, sets
 2811              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2812              		.loc 1 496 75 view .LVU715
 2813 0c70 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2814              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2815              		.loc 1 496 40 view .LVU716
 2816 0c74 0400A0E1 		mov	r0, r4	@, _85
 2817 0c78 FEFFFFEB 		bl	calloc		@
 2818              	.LVL169:
 2819              	@ armwave.c:498:     if(g_armwave_state.test_wave_buffer == NULL) {
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2820              		.loc 1 498 7 view .LVU717
 2821 0c7c 000050E3 		cmp	r0, #0	@ tmp191,
 2822              	@ armwave.c:496:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 496:armwave.c     **** 
 2823              		.loc 1 496 38 view .LVU718
 2824 0c80 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2825              		.loc 1 498 5 is_stmt 1 view .LVU719
 2826              	@ armwave.c:498:     if(g_armwave_state.test_wave_buffer == NULL) {
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2827              		.loc 1 498 7 is_stmt 0 view .LVU720
 2828 0c84 5A00000A 		beq	.L187		@,
 2829              	.L159:
 2830              	.LVL170:
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2831              		.loc 1 498 7 view .LVU721
 2832              	.LBE44:
 2833              	.LBE47:
 2834              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 550:armwave.c     **** 
 551:armwave.c     ****     for(s = 0; s < sets; s++) {
 2835              		.loc 1 551 5 discriminator 1 view .LVU722
 2836 0c88 000059E3 		cmp	r9, #0	@ sets,
 2837 0c8c 550000DA 		ble	.L157		@,
 2838              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 553:armwave.c     ****     
 554:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 555:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 556:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 557:armwave.c     **** 
 558:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 559:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     ****                 noise *= noise;
 563:armwave.c     **** 
 564:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 565:armwave.c     ****                     noise = -noise;
 566:armwave.c     **** 
 567:armwave.c     ****                 noise += 1.0f;
 568:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 569:armwave.c     **** 
 570:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2839              		.loc 1 570 45 view .LVU723
 2840 0c90 5C8A9FED 		vldr.32	s16, .L188	@ tmp258,
 2841              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 571:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 572:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 573:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2842              		.loc 1 573 104 view .LVU724
 2843 0c94 5CCA9FED 		vldr.32	s24, .L188+4	@ tmp259,
 2844              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2845              		.loc 1 551 5 view .LVU725
 2846 0c98 0070A0E3 		mov	r7, #0	@ set_offset,
 2847              	@ armwave.c:552:         printf("Calculating test set %d\n", s);
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2848              		.loc 1 552 9 view .LVU726
 2849 0c9c 84A19FE5 		ldr	r10, .L188+32	@ tmp257,
 2850              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2851              		.loc 1 551 5 view .LVU727
 2852 0ca0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2853              	.LVL171:
 2854              	.L160:
 552:armwave.c     ****         printf("Calculating test set %d\n", s);
 2855              		.loc 1 552 9 is_stmt 1 view .LVU728
 2856 0ca4 0810A0E1 		mov	r1, r8	@, s
 2857 0ca8 0A00A0E1 		mov	r0, r10	@, tmp257
 2858 0cac FEFFFFEB 		bl	printf		@
 2859              	.LVL172:
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2860              		.loc 1 554 9 view .LVU729
 2861              	@ armwave.c:554:         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2862              		.loc 1 554 39 is_stmt 0 view .LVU730
 2863 0cb0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2864              	@ armwave.c:554:         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2865              		.loc 1 554 9 view .LVU731
 2866 0cb4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2867 0cb8 450000DA 		ble	.L161		@,
 2868              	@ armwave.c:556:             mod_val = 0.5f + (_1_waves_mod * w);
 556:armwave.c     **** 
 2869              		.loc 1 556 21 view .LVU732
 2870 0cbc 53CADFED 		vldr.32	s25, .L188+8	@ tmp200,
 2871              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2872              		.loc 1 570 33 view .LVU733
 2873 0cc0 53BA9FED 		vldr.32	s22, .L188+12	@ tmp253,
 2874              	@ armwave.c:568:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 2875              		.loc 1 568 24 view .LVU734
 2876 0cc4 53AADFED 		vldr.32	s21, .L188+16	@ tmp254,
 2877 0cc8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2878              	@ armwave.c:554:         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2879              		.loc 1 554 15 view .LVU735
 2880 0ccc 0060A0E3 		mov	r6, #0	@ w,
 2881              	.LVL173:
 2882              	.L168:
 556:armwave.c     **** 
 2883              		.loc 1 556 13 is_stmt 1 view .LVU736
 2884              	@ armwave.c:556:             mod_val = 0.5f + (_1_waves_mod * w);
 556:armwave.c     **** 
 2885              		.loc 1 556 21 is_stmt 0 view .LVU737
 2886 0cd0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2887 0cd4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2888              	@ armwave.c:558:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2889              		.loc 1 558 13 view .LVU738
 2890 0cd8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2891              	@ armwave.c:556:             mod_val = 0.5f + (_1_waves_mod * w);
 556:armwave.c     **** 
 2892              		.loc 1 556 21 view .LVU739
 2893 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2894 0ce0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2895              	.LVL174:
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2896              		.loc 1 558 13 is_stmt 1 view .LVU740
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2897              		.loc 1 558 13 is_stmt 0 view .LVU741
 2898 0ce4 370000DA 		ble	.L162		@,
 2899 0ce8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2900              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2901              		.loc 1 573 113 view .LVU742
 2902 0cec 4AAA9FED 		vldr.32	s20, .L188+20	@ tmp229,
 2903 0cf0 4A8ADFED 		vldr.32	s17, .L188+24	@ tmp230,
 2904              	@ armwave.c:558:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2905              		.loc 1 558 19 view .LVU743
 2906 0cf4 0040A0E3 		mov	r4, #0	@ x,
 2907              	.LVL175:
 2908              	.L167:
 559:armwave.c     ****                 noise *= noise;
 2909              		.loc 1 559 17 is_stmt 1 view .LVU744
 2910              	@ armwave.c:559:                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 2911              		.loc 1 559 28 is_stmt 0 view .LVU745
 2912 0cf8 FEFFFFEB 		bl	rand		@
 2913              	.LVL176:
 2914              	@ armwave.c:559:                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 2915              		.loc 1 559 35 view .LVU746
 2916 0cfc 7000FFE6 		uxth	r0, r0	@ tmp201,
 2917              	@ armwave.c:559:                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 2918              		.loc 1 559 45 view .LVU747
 2919 0d00 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2920 0d04 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2921              	@ armwave.c:559:                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 2922              		.loc 1 559 24 view .LVU748
 2923 0d08 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2924              	.LVL177:
 560:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 560 17 is_stmt 1 view .LVU749
 2926              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 2927              		.loc 1 560 23 is_stmt 0 view .LVU750
 2928 0d0c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2929              	.LVL178:
 561:armwave.c     ****                 noise *= noise;
 2930              		.loc 1 561 17 is_stmt 1 view .LVU751
 2931              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 2932              		.loc 1 561 23 is_stmt 0 view .LVU752
 2933 0d10 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2934              	.LVL179:
 562:armwave.c     **** 
 2935              		.loc 1 562 17 is_stmt 1 view .LVU753
 2936              	@ armwave.c:562:                 noise *= noise;
 562:armwave.c     **** 
 2937              		.loc 1 562 23 is_stmt 0 view .LVU754
 2938 0d14 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2939              	.LVL180:
 564:armwave.c     ****                     noise = -noise;
 2940              		.loc 1 564 17 is_stmt 1 view .LVU755
 2941              	@ armwave.c:564:                 if((rand() & 0xffff) > 0x7fff)
 564:armwave.c     ****                     noise = -noise;
 2942              		.loc 1 564 21 is_stmt 0 view .LVU756
 2943 0d18 FEFFFFEB 		bl	rand		@
 2944              	.LVL181:
 565:armwave.c     **** 
 2945              		.loc 1 565 21 is_stmt 1 view .LVU757
 2946              	@ armwave.c:564:                 if((rand() & 0xffff) > 0x7fff)
 564:armwave.c     ****                     noise = -noise;
 2947              		.loc 1 564 19 is_stmt 0 view .LVU758
 2948 0d1c 020910E3 		tst	r0, #32768	@,
 2949              	@ armwave.c:565:                     noise = -noise;
 565:armwave.c     **** 
 2950              		.loc 1 565 27 view .LVU759
 2951 0d20 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2952              	.LVL182:
 567:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2953              		.loc 1 567 17 is_stmt 1 view .LVU760
 568:armwave.c     **** 
 2954              		.loc 1 568 17 view .LVU761
 2955              	@ armwave.c:568:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 2956              		.loc 1 568 27 is_stmt 0 view .LVU762
 2957 0d24 FEFFFFEB 		bl	rand		@
 2958              	.LVL183:
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2959              		.loc 1 570 17 is_stmt 1 view .LVU763
 2960              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2961              		.loc 1 570 45 is_stmt 0 view .LVU764
 2962 0d28 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2963              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2964              		.loc 1 570 33 view .LVU765
 2965 0d2c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2966              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2967              		.loc 1 570 45 view .LVU766
 2968 0d30 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2969              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2970              		.loc 1 570 33 view .LVU767
 2971 0d34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2972              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2973              		.loc 1 570 45 view .LVU768
 2974 0d38 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2975              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2976              		.loc 1 570 33 view .LVU769
 2977 0d3c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2978              	@ armwave.c:568:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 2979              		.loc 1 568 34 view .LVU770
 2980 0d40 7000FFE6 		uxth	r0, r0	@ tmp214,
 2981              	.LVL184:
 2982              	@ armwave.c:568:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 2983              		.loc 1 568 44 view .LVU771
 2984 0d44 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2985 0d48 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2986              	@ armwave.c:568:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 2987              		.loc 1 568 24 view .LVU772
 2988 0d4c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2989              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2990              		.loc 1 570 77 view .LVU773
 2991 0d50 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2992              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2993              		.loc 1 570 22 view .LVU774
 2994 0d54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2995 0d58 FEFFFFEB 		bl	sin		@
 2996              	.LVL185:
 2997              		.loc 1 573 17 is_stmt 1 view .LVU775
 2998              	@ armwave.c:567:                 noise += 1.0f;
 567:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2999              		.loc 1 567 23 is_stmt 0 view .LVU776
 3000 0d5c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3001              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3002              		.loc 1 573 104 view .LVU777
 3003 0d60 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3004              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3005              		.loc 1 570 98 view .LVU778
 3006 0d64 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3007              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3008              		.loc 1 570 87 view .LVU779
 3009 0d68 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3010              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3011              		.loc 1 570 98 view .LVU780
 3012 0d6c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3013              	@ armwave.c:570:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3014              		.loc 1 570 19 view .LVU781
 3015 0d70 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3016              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3017              		.loc 1 573 113 view .LVU782
 3018 0d74 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3019 0d78 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3020 0d7c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3021 0d80 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3022 0d84 050000DA 		ble	.L164		@,
 3023              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3024              		.loc 1 573 104 discriminator 1 view .LVU783
 3025 0d88 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3026 0d8c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3027 0d90 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3028 0d94 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3029 0d98 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3030 0d9c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3031              	.L164:
 3032              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3033              		.loc 1 573 57 discriminator 12 view .LVU784
 3034 0da0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3035              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3036              		.loc 1 573 102 discriminator 12 view .LVU785
 3037 0da4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3038 0da8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3039 0dac 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3040              	@ armwave.c:558:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3041              		.loc 1 558 58 discriminator 12 view .LVU786
 3042 0db0 014084E2 		add	r4, r4, #1	@ x, x,
 3043              	.LVL186:
 3044              	@ armwave.c:573:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3045              		.loc 1 573 102 discriminator 12 view .LVU787
 3046 0db4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3047              	@ armwave.c:558:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3048              		.loc 1 558 43 discriminator 12 view .LVU788
 3049 0db8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3050              	@ armwave.c:558:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3051              		.loc 1 558 13 discriminator 12 view .LVU789
 3052 0dbc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3053 0dc0 CCFFFFCA 		bgt	.L167		@,
 3054 0dc4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3055              	.LVL187:
 3056              	.L162:
 3057              	@ armwave.c:554:         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3058              		.loc 1 554 48 discriminator 2 view .LVU790
 3059 0dc8 016086E2 		add	r6, r6, #1	@ w, w,
 3060              	.LVL188:
 3061              	@ armwave.c:554:         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3062              		.loc 1 554 9 discriminator 2 view .LVU791
 3063 0dcc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3064 0dd0 BEFFFFBA 		blt	.L168		@,
 3065              	.LVL189:
 3066              	.L161:
 574:armwave.c     ****             }
 575:armwave.c     ****         }
 576:armwave.c     **** 
 577:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3067              		.loc 1 577 9 is_stmt 1 discriminator 2 view .LVU792
 3068              	@ armwave.c:577:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3069              		.loc 1 577 46 is_stmt 0 discriminator 2 view .LVU793
 3070 0dd4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3071              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 3072              		.loc 1 551 27 discriminator 2 view .LVU794
 3073 0dd8 018088E2 		add	r8, r8, #1	@ s, s,
 3074              	.LVL190:
 3075              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 3076              		.loc 1 551 5 discriminator 2 view .LVU795
 3077 0ddc 080059E1 		cmp	r9, r8	@ sets, s
 3078              	@ armwave.c:577:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3079              		.loc 1 577 20 discriminator 2 view .LVU796
 3080 0de0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3081              	.LVL191:
 3082              	@ armwave.c:551:     for(s = 0; s < sets; s++) {
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 3083              		.loc 1 551 5 discriminator 2 view .LVU797
 3084 0de4 AEFFFF1A 		bne	.L160		@,
 3085              	.LVL192:
 3086              	.L157:
 3087              	@ armwave.c:579: }
 578:armwave.c     ****     }
 579:armwave.c     **** }
 3088              		.loc 1 579 1 view .LVU798
 3089 0de8 08D08DE2 		add	sp, sp, #8	@,,
 3090              		.cfi_remember_state
 3091              		.cfi_def_cfa_offset 80
 3092              		@ sp needed	@
 3093 0dec 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3094              		.cfi_restore 90
 3095              		.cfi_restore 91
 3096              		.cfi_restore 88
 3097              		.cfi_restore 89
 3098              		.cfi_restore 86
 3099              		.cfi_restore 87
 3100              		.cfi_restore 84
 3101              		.cfi_restore 85
 3102              		.cfi_restore 82
 3103              		.cfi_restore 83
 3104              		.cfi_restore 80
 3105              		.cfi_restore 81
 3106              		.cfi_def_cfa_offset 32
 3107              	.LVL193:
 3108              		.loc 1 579 1 view .LVU799
 3109 0df0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3110              	.LVL194:
 3111              	.L187:
 3112              		.cfi_restore_state
 3113              	.LBB48:
 3114              	.LBB45:
 499:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3115              		.loc 1 499 9 is_stmt 1 view .LVU800
 3116 0df4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3117 0df8 0920A0E1 		mov	r2, r9	@, sets
 3118 0dfc 28009FE5 		ldr	r0, .L188+36	@,
 3119 0e00 FEFFFFEB 		bl	printf		@
 3120              	.LVL195:
 501:armwave.c     ****     }
 3121              		.loc 1 501 9 view .LVU801
 3122 0e04 9FFFFFEA 		b	.L159		@
 3123              	.L189:
 3124              		.align	2
 3125              	.L188:
 3126 0e08 0000803F 		.word	1065353216
 3127 0e0c 00007F43 		.word	1132396544
 3128 0e10 0000003F 		.word	1056964608
 3129 0e14 C3F5C840 		.word	1086911939
 3130 0e18 38FFC74A 		.word	1254620984
 3131 0e1c 0000FE42 		.word	1123942400
 3132 0e20 00000043 		.word	1124073472
 3133 0e24 00000000 		.word	g_armwave_state
 3134 0e28 90020000 		.word	.LC20
 3135 0e2c E8010000 		.word	.LC18
 3136              	.LBE45:
 3137              	.LBE48:
 3138              		.cfi_endproc
 3139              	.LFE75:
 3141              		.align	2
 3142              		.global	armwave_cleanup
 3143              		.syntax unified
 3144              		.arm
 3145              		.fpu vfp
 3147              	armwave_cleanup:
 3148              	.LFB76:
 580:armwave.c     **** 
 581:armwave.c     **** /*
 582:armwave.c     ****  * Make a test square waveform.
 583:armwave.c     ****  *
 584:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 585:armwave.c     ****  */
 586:armwave.c     **** #if 0
 587:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 588:armwave.c     **** {
 589:armwave.c     ****     uint8_t v;
 590:armwave.c     ****     float noise, xnoise;
 591:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 592:armwave.c     ****     int w, x;
 593:armwave.c     **** 
 594:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 595:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 596:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     ****             noise *= noise;
 600:armwave.c     **** 
 601:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 602:armwave.c     ****                 noise = -noise;
 603:armwave.c     **** 
 604:armwave.c     ****             //noise += 1.0f;
 605:armwave.c     **** 
 606:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 607:armwave.c     ****                 new_level = 0.2f;
 608:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 609:armwave.c     ****                 new_level = 0.8f;
 610:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 611:armwave.c     ****                 new_level = 0.2f;
 612:armwave.c     ****             } else {
 613:armwave.c     ****                 new_level = 0.8f;
 614:armwave.c     ****             }
 615:armwave.c     **** 
 616:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 617:armwave.c     **** 
 618:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 619:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 620:armwave.c     ****         }
 621:armwave.c     ****     }
 622:armwave.c     **** }
 623:armwave.c     **** #endif
 624:armwave.c     **** 
 625:armwave.c     **** /*
 626:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 627:armwave.c     ****  */
 628:armwave.c     **** void armwave_cleanup()
 629:armwave.c     **** {
 3149              		.loc 1 629 1 view -0
 3150              		.cfi_startproc
 3151              		@ args = 0, pretend = 0, frame = 0
 3152              		@ frame_needed = 0, uses_anonymous_args = 0
 630:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3153              		.loc 1 630 5 view .LVU803
 3154              	@ armwave.c:629: {
 629:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3155              		.loc 1 629 1 is_stmt 0 view .LVU804
 3156 0e30 10402DE9 		push	{r4, lr}	@
 3157              		.cfi_def_cfa_offset 8
 3158              		.cfi_offset 4, -8
 3159              		.cfi_offset 14, -4
 3160              	@ armwave.c:630:     free(g_armwave_state.out_pixbuf);
 3161              		.loc 1 630 25 view .LVU805
 3162 0e34 34409FE5 		ldr	r4, .L192	@ tmp114,
 3163              	@ armwave.c:630:     free(g_armwave_state.out_pixbuf);
 3164              		.loc 1 630 5 view .LVU806
 3165 0e38 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3166 0e3c FEFFFFEB 		bl	free		@
 3167              	.LVL196:
 631:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3168              		.loc 1 631 5 is_stmt 1 view .LVU807
 3169 0e40 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3170 0e44 FEFFFFEB 		bl	free		@
 3171              	.LVL197:
 632:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3172              		.loc 1 632 5 view .LVU808
 3173 0e48 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3174 0e4c FEFFFFEB 		bl	free		@
 3175              	.LVL198:
 633:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3176              		.loc 1 633 5 view .LVU809
 3177 0e50 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3178 0e54 FEFFFFEB 		bl	free		@
 3179              	.LVL199:
 634:armwave.c     **** 
 635:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3180              		.loc 1 635 5 view .LVU810
 3181              	@ armwave.c:635:     g_armwave_state.out_pixbuf = NULL;
 3182              		.loc 1 635 32 is_stmt 0 view .LVU811
 3183 0e58 0030A0E3 		mov	r3, #0	@ tmp123,
 3184 0e5c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 636:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3185              		.loc 1 636 5 is_stmt 1 view .LVU812
 3186              	@ armwave.c:636:     g_armwave_state.ch1_buffer = NULL;
 3187              		.loc 1 636 32 is_stmt 0 view .LVU813
 3188 0e60 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 637:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3189              		.loc 1 637 5 is_stmt 1 view .LVU814
 3190              	@ armwave.c:637:     g_armwave_state.xcoord_to_xpixel = NULL;
 3191              		.loc 1 637 38 is_stmt 0 view .LVU815
 3192 0e64 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 638:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3193              		.loc 1 638 5 is_stmt 1 view .LVU816
 3194              	@ armwave.c:638:     g_armwave_state.test_wave_buffer = NULL;
 3195              		.loc 1 638 38 is_stmt 0 view .LVU817
 3196 0e68 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3197              	@ armwave.c:639: }
 639:armwave.c     **** }
 3198              		.loc 1 639 1 view .LVU818
 3199 0e6c 1080BDE8 		pop	{r4, pc}	@
 3200              	.L193:
 3201              		.align	2
 3202              	.L192:
 3203 0e70 00000000 		.word	g_armwave_state
 3204              		.cfi_endproc
 3205              	.LFE76:
 3207              		.comm	gamma_table,256,4
 3208              		.comm	g_armwave_state,136,4
 3209              		.section	.rodata
 3210              		.align	2
 3211              		.set	.LANCHOR0,. + 0
 3214              	__PRETTY_FUNCTION__.17096:
 3215 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3215      6176655F 
 3215      66696C6C 
 3215      5F706978 
 3215      6275665F 
 3216 001b 00       		.space	1
 3219              	__PRETTY_FUNCTION__.17126:
 3220 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3220      6176655F 
 3220      73657475 
 3220      705F7265 
 3220      6E646572 
 3221 0031 000000   		.space	3
 3224              	__PRETTY_FUNCTION__.17133:
 3225 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3225      6176655F 
 3225      7365745F 
 3225      77617665 
 3225      5F706F69 
 3226 004d 000000   		.space	3
 3229              	__PRETTY_FUNCTION__.17140:
 3230 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3230      6176655F 
 3230      7365745F 
 3230      77617665 
 3230      5F706F69 
 3231              		.section	.rodata.str1.4,"aMS",%progbits,1
 3232              		.align	2
 3233              	.LC0:
 3234 0000 76302E30 		.ascii	"v0.0.1\000"
 3234      2E3100
 3235 0007 00       		.space	1
 3236              	.LC1:
 3237 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3237      61766520 
 3237      76657273 
 3237      696F6E3A 
 3237      2025730A 
 3238 001d 000000   		.space	3
 3239              	.LC2:
 3240 0020 61726D77 		.ascii	"armwave.c\000"
 3240      6176652E 
 3240      6300
 3241 002a 0000     		.space	2
 3242              	.LC3:
 3243 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3243      62756666 
 3243      65722021 
 3243      3D204E55 
 3243      4C4C00
 3244 003f 00       		.space	1
 3245              	.LC4:
 3246 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3246      20653D25 
 3246      6420773D 
 3246      25642077 
 3246      733D2564 
 3247              	.LC5:
 3248 006c 73746172 		.ascii	"start_point < end_point\000"
 3248      745F706F 
 3248      696E7420 
 3248      3C20656E 
 3248      645F706F 
 3249              	.LC6:
 3250 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3250      7566665F 
 3250      73697A65 
 3250      3D25642C 
 3250      20636D70 
 3251 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3251      5F776964 
 3251      74683D25 
 3251      642C2077 
 3251      6176655F 
 3252 00e1 000000   		.space	3
 3253              	.LC7:
 3254 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3254      6D776176 
 3254      655F7374 
 3254      6174652E 
 3254      6368315F 
 3255 0107 00       		.space	1
 3256              	.LC8:
 3257 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3257      6D776176 
 3257      655F7374 
 3257      6174652E 
 3257      78636F6F 
 3258 0131 000000   		.space	3
 3259              	.LC9:
 3260 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3260      3A203078 
 3260      25303878 
 3260      20307825 
 3260      30387820 
 3261              	.LC10:
 3262 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3262      5F627566 
 3262      66657220 
 3262      213D204E 
 3262      554C4C00 
 3263              	.LC11:
 3264 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3264      6176655F 
 3264      7365745F 
 3264      77617665 
 3264      5F706F69 
 3265 019f 78636565 		.ascii	"xceeded\000"
 3265      64656400 
 3266 01a7 00       		.space	1
 3267              	.LC12:
 3268 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3268      5F627566 
 3268      6665725F 
 3268      70747220 
 3268      213D2030 
 3269 01bd 000000   		.space	3
 3270              	.LC13:
 3271 01c0 776200   		.ascii	"wb\000"
 3272 01c3 00       		.space	1
 3273              	.LC14:
 3274 01c4 50330A00 		.ascii	"P3\012\000"
 3275              	.LC15:
 3276 01c8 25642025 		.ascii	"%d %d\012\000"
 3276      640A00
 3277 01cf 00       		.space	1
 3278              	.LC16:
 3279 01d0 3235350A 		.ascii	"255\012\000"
 3279      00
 3280 01d5 000000   		.space	3
 3281              	.LC17:
 3282 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3282      25336420 
 3282      2533640A 
 3282      00
 3283 01e5 000000   		.space	3
 3284              	.LC18:
 3285 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3285      6176655F 
 3285      74657374 
 3285      5F627566 
 3285      6665725F 
 3286 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3286      20627566 
 3286      66657220 
 3286      28256420 
 3286      62797465 
 3287              	.LC19:
 3288 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3288      6176655F 
 3288      66696C6C 
 3288      5F706978 
 3288      6275665F 
 3289 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3289      20666169 
 3289      6C65642C 
 3289      20726574 
 3289      75726E69 
 3290 028e 0000     		.space	2
 3291              	.LC20:
 3292 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3292      756C6174 
 3292      696E6720 
 3292      74657374 
 3292      20736574 
 3293              		.text
 3294              	.Letext0:
 3295              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3296              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3297              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3298              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3299              		.file 7 "/usr/include/stdio.h"
 3300              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3301              		.file 9 "/usr/include/errno.h"
 3302              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3303              		.file 11 "/usr/include/unistd.h"
 3304              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3305              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3306              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3307              		.file 15 "/usr/include/math.h"
 3308              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3309              		.file 17 "/usr/include/time.h"
 3310              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3311              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3312              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3313              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3314              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3315              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3316              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3317              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3318              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3319              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3320              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3321              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3322              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3323              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3324              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3325              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3326              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3327              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3328              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3329              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3330              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3331              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3332              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3333              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3334              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3335              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3336              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3337              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3338              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3339              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3340              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3341              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3342              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3343              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3344              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3345              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3346              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3347              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3348              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3349              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3350              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3351              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3352              		.file 60 "/usr/local/include/python3.8/context.h"
 3353              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3354              		.file 62 "/usr/local/include/python3.8/code.h"
 3355              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3356              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3357              		.file 65 "/usr/local/include/python3.8/import.h"
 3358              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3359              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3360              		.file 68 "/usr/include/malloc.h"
 3361              		.file 69 "armwave.h"
 3362              		.file 70 "/usr/include/stdlib.h"
 3363              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3364              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3365              		.file 73 "<built-in>"
 3366              		.file 74 "/usr/include/assert.h"
