   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 C0419FE5 		ldr	r4, .L25	@ tmp314,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 65 view .LVU34
 258 00ac 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 130 view .LVU35
 261 00b0 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 40 view .LVU36
 265 00b4 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 65 view .LVU37
 268 00b8 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 269              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 270              		.loc 1 73 5 view .LVU38
 271 00bc 0530A0E1 		mov	r3, r5	@, _1
 272              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 273              		.loc 1 63 1 view .LVU39
 274 00c0 14008DE5 		str	r0, [sp, #20]	@ slice_y, %sfp
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU40
 277 00c4 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 279              		.loc 1 73 5 view .LVU41
 280 00c8 41008DE9 		stmib	sp, {r0, r6}	@,,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU42
 283 00cc 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 285              		.loc 1 73 5 view .LVU43
 286 00d0 98019FE5 		ldr	r0, .L25+4	@,
 287              	.LVL8:
 288              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 289              		.loc 1 71 23 view .LVU44
 290 00d4 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 291              	.LVL9:
 292              		.loc 1 73 5 is_stmt 1 view .LVU45
 293 00d8 00208DE5 		str	r2, [sp]	@ _7,
 294 00dc 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 5B0000DA 		ble	.L11		@,
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU48
 305 00f4 0030A0E3 		mov	r3, #0	@ w,
 306 00f8 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 307              	.LVL11:
 308              	.L12:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU49
 310              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 311              		.loc 1 79 59 is_stmt 0 view .LVU50
 312 00fc 10009DE5 		ldr	r0, [sp, #16]	@ w, %sfp
 313              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 314              		.loc 1 79 81 view .LVU51
 315 0100 341094E5 		ldr	r1, [r4, #52]	@ _12, g_armwave_state.wave_stride
 316              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 317              		.loc 1 79 59 view .LVU52
 318 0104 14309DE5 		ldr	r3, [sp, #20]	@ slice_y, %sfp
 319              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  80:armwave.c     **** 
  81:armwave.c     ****         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_stride, slice_y,
 320              		.loc 1 81 9 view .LVU53
 321 0108 0120A0E1 		mov	r2, r1	@, _12
 322              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 323              		.loc 1 79 59 view .LVU54
 324 010c 903121E0 		mla	r1, r0, r1, r3	@ tmp228, w, _12, slice_y
 325              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 326              		.loc 1 79 19 view .LVU55
 327 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 328 0114 018088E0 		add	r8, r8, r1	@ wave_base, g_armwave_state.wave_buffer, tmp228
 329              	.LVL12:
 330              		.loc 1 81 9 is_stmt 1 view .LVU56
 331 0118 00808DE5 		str	r8, [sp]	@ wave_base,
 332 011c 0010A0E1 		mov	r1, r0	@, w
 333 0120 4C019FE5 		ldr	r0, .L25+8	@,
 334 0124 FEFFFFEB 		bl	printf		@
 335              	.LVL13:
  82:armwave.c     **** 
  83:armwave.c     ****         // roll through y and render the slice into the out buffer
  84:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  85:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 336              		.loc 1 85 9 view .LVU57
 337              		.loc 1 85 9 is_stmt 0 view .LVU58
 338 0128 000056E3 		cmp	r6, #0	@ height,
 339 012c 04804812 		subne	r8, r8, #4	@ ivtmp.39, wave_base,
 340              	.LVL14:
 341              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 342              		.loc 1 85 16 view .LVU59
 343 0130 0020A013 		movne	r2, #0	@ yy,
 344              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 345              		.loc 1 85 9 view .LVU60
 346 0134 4400000A 		beq	.L19		@,
 347              	.LVL15:
 348              	.L18:
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 349              		.loc 1 86 13 is_stmt 1 view .LVU61
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 350              		.loc 1 100 17 view .LVU62
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 102 17 view .LVU63
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 100 17 view .LVU64
 353              		.loc 1 102 17 view .LVU65
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 354              		.loc 1 100 17 view .LVU66
 355              		.loc 1 102 17 view .LVU67
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 356              		.loc 1 100 17 view .LVU68
 357              		.loc 1 102 17 view .LVU69
 358              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 359              		.loc 1 86 18 is_stmt 0 view .LVU70
 360 0138 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _161, offset: 0B]
 361              	.LVL16:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 362              		.loc 1 88 13 is_stmt 1 view .LVU71
  90:armwave.c     ****                 
 363              		.loc 1 90 17 view .LVU72
  93:armwave.c     ****                     continue;
 364              		.loc 1 93 17 view .LVU73
 365              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 101 34 is_stmt 0 view .LVU74
 367 013c 01B082E2 		add	fp, r2, #1	@ tmp261, yy,
 368              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 369              		.loc 1 93 20 view .LVU75
 370 0140 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 371 0144 0110A003 		moveq	r1, #1	@ tmp234,
 372 0148 0010A013 		movne	r1, #0	@ tmp234,
 373              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 374              		.loc 1 93 19 view .LVU76
 375 014c FF0057E3 		cmp	r7, #255	@ scale_value,
 376 0150 01108103 		orreq	r1, r1, #1	@,, tmp239, tmp234
 377 0154 000051E3 		cmp	r1, #0	@ tmp239,
 378              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 379              		.loc 1 101 34 view .LVU77
 380 0158 02A082E2 		add	r10, r2, #2	@ tmp282, yy,
 381 015c 039082E2 		add	r9, r2, #3	@ tmp302, yy,
 382              	.LVL17:
 383              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****                 word >>= 8;
 384              		.loc 1 103 22 view .LVU78
 385 0160 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 386 0164 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 387              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 388              		.loc 1 93 19 view .LVU79
 389 0168 3400001A 		bne	.L20		@,
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 101 34 view .LVU80
 392 016c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 393              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 394              		.loc 1 93 20 view .LVU81
 395 0170 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 396 0174 01E0A003 		moveq	lr, #1	@ tmp254,
 397              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 398              		.loc 1 101 34 view .LVU82
 399 0178 910201E0 		mul	r1, r1, r2	@ tmp241, g_armwave_state.cmp_x_bitdepth_scale, yy
 400              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 401              		.loc 1 93 20 view .LVU83
 402 017c 00E0A013 		movne	lr, #0	@ tmp254,
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 view .LVU84
 405 0180 FF005CE3 		cmp	ip, #255	@ scale_value,
 406 0184 01E08E03 		orreq	lr, lr, #1	@,, tmp259, tmp254
 407 0188 00005EE3 		cmp	lr, #0	@ tmp259,
 408              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 409              		.loc 1 102 47 view .LVU85
 410 018c 40E094E5 		ldr	lr, [r4, #64]	@ tmp330, g_armwave_state.bitdepth_height
 411              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 101 74 view .LVU86
 413 0190 2114A0E1 		lsr	r1, r1, #8	@ tmp243, tmp241,
 414              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 415              		.loc 1 102 47 view .LVU87
 416 0194 9E7121E0 		mla	r1, lr, r1, r7	@ tmp247, tmp330, tmp243, scale_value
 417 0198 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_82, *_82
 418 019c 01E08EE2 		add	lr, lr, #1	@ tmp250, *_82,
 419 01a0 01E0C5E7 		strb	lr, [r5, r1]	@ tmp250, *_82
 420              	.LVL18:
 421              		.loc 1 103 17 is_stmt 1 view .LVU88
  90:armwave.c     ****                 
 422              		.loc 1 90 17 view .LVU89
  93:armwave.c     ****                     continue;
 423              		.loc 1 93 17 view .LVU90
 424              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 425              		.loc 1 93 19 is_stmt 0 view .LVU91
 426 01a4 2500001A 		bne	.L20		@,
 427              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 428              		.loc 1 101 34 view .LVU92
 429 01a8 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 430              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 431              		.loc 1 101 99 view .LVU93
 432 01ac 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 433              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 434              		.loc 1 93 20 view .LVU94
 435 01b0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 436              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 437              		.loc 1 101 34 view .LVU95
 438 01b4 9E0B0BE0 		mul	fp, lr, fp	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 439              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 440              		.loc 1 93 20 view .LVU96
 441 01b8 01E0A003 		moveq	lr, #1	@ tmp275,
 442 01bc 00E0A013 		movne	lr, #0	@ tmp275,
 443              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 101 74 view .LVU97
 445 01c0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp264, tmp262,
 446              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 447              		.loc 1 93 19 view .LVU98
 448 01c4 FF0050E3 		cmp	r0, #255	@ scale_value,
 449 01c8 01E08E03 		orreq	lr, lr, #1	@,, tmp280, tmp275
 450              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 451              		.loc 1 102 47 view .LVU99
 452 01cc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp268, g_armwave_state.bitdepth_height, tmp264, scale_value
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 19 view .LVU100
 455 01d0 00005EE3 		cmp	lr, #0	@ tmp280,
 456              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 457              		.loc 1 102 47 view .LVU101
 458 01d4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_112, *_112
 459 01d8 011081E2 		add	r1, r1, #1	@ tmp271, *_112,
 460 01dc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp271, *_112
 461              		.loc 1 103 17 is_stmt 1 view .LVU102
 462              	.LVL19:
  90:armwave.c     ****                 
 463              		.loc 1 90 17 view .LVU103
  93:armwave.c     ****                     continue;
 464              		.loc 1 93 17 view .LVU104
 465              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 466              		.loc 1 93 19 is_stmt 0 view .LVU105
 467 01e0 1600001A 		bne	.L20		@,
 468              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 469              		.loc 1 101 34 view .LVU106
 470 01e4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 471              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 472              		.loc 1 101 99 view .LVU107
 473 01e8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 20 view .LVU108
 476 01ec 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 477              	.LVL20:
 478              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 479              		.loc 1 101 34 view .LVU109
 480 01f0 910A0AE0 		mul	r10, r1, r10	@ tmp283, g_armwave_state.cmp_x_bitdepth_scale, tmp282
 481              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 482              		.loc 1 93 20 view .LVU110
 483 01f4 0110A003 		moveq	r1, #1	@ tmp295,
 484 01f8 0010A013 		movne	r1, #0	@ tmp295,
 485              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 101 74 view .LVU111
 487 01fc 2AA4A0E1 		lsr	r10, r10, #8	@ tmp285, tmp283,
 488              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 489              		.loc 1 93 19 view .LVU112
 490 0200 FF0053E3 		cmp	r3, #255	@ word,
 491 0204 01108103 		orreq	r1, r1, #1	@,, tmp300, tmp295
 492              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 493              		.loc 1 102 47 view .LVU113
 494 0208 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp289, g_armwave_state.bitdepth_height, tmp285, scale_value
 495              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 496              		.loc 1 93 19 view .LVU114
 497 020c 000051E3 		cmp	r1, #0	@ tmp300,
 498              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 499              		.loc 1 102 47 view .LVU115
 500 0210 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_142, *_142
 501 0214 011081E2 		add	r1, r1, #1	@ tmp292, *_142,
 502 0218 0010C5E7 		strb	r1, [r5, r0]	@ tmp292, *_142
 503              		.loc 1 103 17 is_stmt 1 view .LVU116
 504              	.LVL21:
  90:armwave.c     ****                 
 505              		.loc 1 90 17 view .LVU117
  93:armwave.c     ****                     continue;
 506              		.loc 1 93 17 view .LVU118
 507              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 508              		.loc 1 93 19 is_stmt 0 view .LVU119
 509 021c 0700001A 		bne	.L20		@,
 510              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 511              		.loc 1 101 34 view .LVU120
 512 0220 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 513              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 514              		.loc 1 101 99 view .LVU121
 515 0224 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 516              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 517              		.loc 1 101 34 view .LVU122
 518 0228 910909E0 		mul	r9, r1, r9	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp302
 519              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 520              		.loc 1 101 74 view .LVU123
 521 022c 2994A0E1 		lsr	r9, r9, #8	@ tmp305, tmp303,
 522              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 523              		.loc 1 102 47 view .LVU124
 524 0230 903923E0 		mla	r3, r0, r9, r3	@ tmp309, g_armwave_state.bitdepth_height, tmp305, word
 525 0234 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_172, *_172
 526 0238 011081E2 		add	r1, r1, #1	@ tmp312, *_172,
 527 023c 0310C5E7 		strb	r1, [r5, r3]	@ tmp312, *_172
 528              		.loc 1 103 17 is_stmt 1 view .LVU125
 529              	.LVL22:
 530              	.L20:
 531              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 532              		.loc 1 85 37 is_stmt 0 view .LVU126
 533 0240 042082E2 		add	r2, r2, #4	@ yy, yy,
 534              	.LVL23:
 535              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 536              		.loc 1 85 9 view .LVU127
 537 0244 020056E1 		cmp	r6, r2	@ height, yy
 538 0248 BAFFFF8A 		bhi	.L18		@,
 539              	.LVL24:
 540              	.L19:
 541              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 78 44 view .LVU128
 543 024c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 544              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 78 5 view .LVU129
 546 0250 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 547              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 78 44 view .LVU130
 549 0254 012082E2 		add	r2, r2, #1	@ w, w,
 550              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 551              		.loc 1 78 5 view .LVU131
 552 0258 020053E1 		cmp	r3, r2	@ g_armwave_state.waves, w
 553              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 554              		.loc 1 78 44 view .LVU132
 555 025c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 556              	.LVL25:
 557              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 558              		.loc 1 78 5 view .LVU133
 559 0260 A5FFFFCA 		bgt	.L12		@,
 560              	.LVL26:
 561              	.L11:
 562              	@ armwave.c:107: }
 104:armwave.c     ****             }
 105:armwave.c     ****         }
 106:armwave.c     ****     }
 107:armwave.c     **** }
 563              		.loc 1 107 1 view .LVU134
 564 0264 1CD08DE2 		add	sp, sp, #28	@,,
 565              		.cfi_def_cfa_offset 36
 566              		@ sp needed	@
 567 0268 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 568              	.LVL27:
 569              	.L26:
 570              		.loc 1 107 1 view .LVU135
 571              		.align	2
 572              	.L25:
 573 026c 00000000 		.word	g_armwave_state
 574 0270 20000000 		.word	.LC2
 575 0274 5C000000 		.word	.LC3
 576              		.cfi_endproc
 577              	.LFE59:
 579              		.align	2
 580              		.global	armwave_fill_pixbuf_scaled
 581              		.syntax unified
 582              		.arm
 583              		.fpu vfp
 585              	armwave_fill_pixbuf_scaled:
 586              	.LVL28:
 587              	.LFB60:
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 117:armwave.c     ****     uint8_t r, g, b, value;
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 162:armwave.c     **** #endif
 163:armwave.c     **** 
 164:armwave.c     **** /*
 165:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 166:armwave.c     ****  * Rows are repeated as necessary.
 167:armwave.c     ****  */
 168:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 169:armwave.c     **** {
 588              		.loc 1 169 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 592              		.loc 1 170 5 view .LVU137
 171:armwave.c     ****     // uint32_t ysub;
 172:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 593              		.loc 1 172 5 view .LVU138
 173:armwave.c     ****     uint8_t r, g, b, value; 
 594              		.loc 1 173 5 view .LVU139
 174:armwave.c     ****     // uint8_t row;
 175:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 595              		.loc 1 175 5 view .LVU140
 596              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 597              		.loc 1 169 1 is_stmt 0 view .LVU141
 598 0278 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 599              		.cfi_def_cfa_offset 36
 600              		.cfi_offset 4, -36
 601              		.cfi_offset 5, -32
 602              		.cfi_offset 6, -28
 603              		.cfi_offset 7, -24
 604              		.cfi_offset 8, -20
 605              		.cfi_offset 9, -16
 606              		.cfi_offset 10, -12
 607              		.cfi_offset 11, -8
 608              		.cfi_offset 14, -4
 609              	@ armwave.c:179:     assert(out_buffer != NULL);
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 177:armwave.c     ****     uint32_t offset;
 178:armwave.c     **** 
 179:armwave.c     ****     assert(out_buffer != NULL);
 610              		.loc 1 179 5 view .LVU142
 611 027c 000050E3 		cmp	r0, #0	@ out_buffer
 612              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 175 15 view .LVU143
 614 0280 44619FE5 		ldr	r6, .L49	@ tmp203,
 615              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 616              		.loc 1 169 1 view .LVU144
 617 0284 0CD04DE2 		sub	sp, sp, #12	@,,
 618              		.cfi_def_cfa_offset 48
 619              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 620              		.loc 1 175 15 view .LVU145
 621 0288 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 622              	.LVL29:
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 623              		.loc 1 176 5 is_stmt 1 view .LVU146
 177:armwave.c     **** 
 624              		.loc 1 177 5 view .LVU147
 625              		.loc 1 179 5 view .LVU148
 626 028c 4900000A 		beq	.L46		@,
 180:armwave.c     **** 
 181:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 627              		.loc 1 181 5 view .LVU149
 628              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 629              		.loc 1 181 10 is_stmt 0 view .LVU150
 630 0290 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 631 0294 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 632              	.LVL30:
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 183:armwave.c     **** 
 184:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 633              		.loc 1 184 5 is_stmt 1 view .LVU151
 634              		.loc 1 184 5 is_stmt 0 view .LVU152
 635 0298 000058E3 		cmp	r8, #0	@ npix,
 636 029c 0C0000DA 		ble	.L27		@,
 637              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 186:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 187:armwave.c     ****         // most normal waveforms.
 188:armwave.c     ****         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 190:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 193:armwave.c     ****                 wave_word >>= 8;
 194:armwave.c     **** 
 195:armwave.c     ****                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 638              		.loc 1 197 52 view .LVU153
 639 02a0 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 640              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 641              		.loc 1 196 52 view .LVU154
 642 02a4 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 643              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 200:armwave.c     ****                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 203:armwave.c     **** 
 204:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 205:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 207:armwave.c     ****                     // Do line scaling as necessary.
 208:armwave.c     ****                     /*
 209:armwave.c     ****                     nsub = n + w;
 210:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 211:armwave.c     ****                     xx = (nsub >> 8);
 212:armwave.c     **** 
 213:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 214:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 215:armwave.c     ****                         *(out_buffer_base + offset) = word;
 216:armwave.c     ****                     }
 217:armwave.c     ****                     */
 218:armwave.c     **** 
 219:armwave.c     ****                     nsub = n + w;
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 644              		.loc 1 220 57 view .LVU155
 645 02a8 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 646              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 197 52 view .LVU156
 648 02ac 00308DE5 		str	r3, [sp]	@ _10, %sfp
 649              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 650              		.loc 1 198 52 view .LVU157
 651 02b0 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 652              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 653              		.loc 1 184 11 view .LVU158
 654 02b4 0010A0E3 		mov	r1, #0	@ n,
 655              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 656              		.loc 1 198 52 view .LVU159
 657 02b8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 658              	.LVL31:
 659              	.L34:
 188:armwave.c     **** 
 660              		.loc 1 188 9 is_stmt 1 view .LVU160
 661              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 662              		.loc 1 188 19 is_stmt 0 view .LVU161
 663 02bc 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 664              	.LVL32:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 665              		.loc 1 190 9 is_stmt 1 view .LVU162
 666              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 667              		.loc 1 190 11 is_stmt 0 view .LVU163
 668 02c0 000053E3 		cmp	r3, #0	@ wave_word,
 669 02c4 0400001A 		bne	.L47		@,
 670              	.L30:
 671              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 672              		.loc 1 184 28 view .LVU164
 673 02c8 041081E2 		add	r1, r1, #4	@ n, n,
 674              	.LVL33:
 675              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 676              		.loc 1 184 5 view .LVU165
 677 02cc 010058E1 		cmp	r8, r1	@ npix, n
 678 02d0 F9FFFFCA 		bgt	.L34		@,
 679              	.LVL34:
 680              	.L27:
 681              	@ armwave.c:232: }
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 223:armwave.c     **** 
 224:armwave.c     ****                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 228:armwave.c     ****                 }
 229:armwave.c     ****             }
 230:armwave.c     ****         }
 231:armwave.c     ****     }
 232:armwave.c     **** }
 682              		.loc 1 232 1 view .LVU166
 683 02d4 0CD08DE2 		add	sp, sp, #12	@,,
 684              		.cfi_remember_state
 685              		.cfi_def_cfa_offset 36
 686              		@ sp needed	@
 687 02d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 688              	.LVL35:
 689              	.L47:
 690              		.cfi_restore_state
 691              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 692              		.loc 1 195 19 view .LVU167
 693 02dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 694              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 695              		.loc 1 191 19 view .LVU168
 696 02e0 0070A0E3 		mov	r7, #0	@ w,
 697              	.LVL36:
 192:armwave.c     ****                 wave_word >>= 8;
 698              		.loc 1 192 17 is_stmt 1 view .LVU169
 193:armwave.c     **** 
 699              		.loc 1 193 17 view .LVU170
 700              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 701              		.loc 1 193 27 is_stmt 0 view .LVU171
 702 02e4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 703              	.LVL37:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 704              		.loc 1 195 17 is_stmt 1 view .LVU172
 705              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 195 19 is_stmt 0 view .LVU173
 707 02e8 0500001A 		bne	.L48		@,
 708              	.L31:
 709              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 710              		.loc 1 191 32 view .LVU174
 711 02ec 017087E2 		add	r7, r7, #1	@ w, w,
 712              	.LVL38:
 713              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 714              		.loc 1 191 13 view .LVU175
 715 02f0 040057E3 		cmp	r7, #4	@ w,
 716 02f4 F3FFFF0A 		beq	.L30		@,
 192:armwave.c     ****                 wave_word >>= 8;
 717              		.loc 1 192 17 is_stmt 1 view .LVU176
 718              	.LVL39:
 193:armwave.c     **** 
 719              		.loc 1 193 17 view .LVU177
 720              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 721              		.loc 1 195 19 is_stmt 0 view .LVU178
 722 02f8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 723              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 724              		.loc 1 193 27 view .LVU179
 725 02fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 726              	.LVL40:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 727              		.loc 1 195 17 is_stmt 1 view .LVU180
 728              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 729              		.loc 1 195 19 is_stmt 0 view .LVU181
 730 0300 F9FFFF0A 		beq	.L31		@,
 731              	.L48:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 732              		.loc 1 196 21 is_stmt 1 view .LVU182
 733              	.LVL41:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 734              		.loc 1 197 21 view .LVU183
 198:armwave.c     **** 
 735              		.loc 1 198 21 view .LVU184
 200:armwave.c     ****                     g = MIN(gg, 255);
 736              		.loc 1 200 21 view .LVU185
 201:armwave.c     ****                     b = MIN(bb, 255);
 737              		.loc 1 201 21 view .LVU186
 202:armwave.c     **** 
 738              		.loc 1 202 21 view .LVU187
 205:armwave.c     **** 
 739              		.loc 1 205 21 view .LVU188
 740              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 741              		.loc 1 198 55 is_stmt 0 view .LVU189
 742 0304 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 743 0308 075081E0 		add	r5, r1, r7	@ _120, n, w
 744 030c 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 745              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 746              		.loc 1 220 32 view .LVU190
 747 0310 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 748              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 749              		.loc 1 221 41 view .LVU191
 750 0314 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 751              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 752              		.loc 1 220 40 view .LVU192
 753 0318 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 754              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 755              		.loc 1 221 41 view .LVU193
 756 031c 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 757              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 758              		.loc 1 197 55 view .LVU194
 759 0320 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 760              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 761              		.loc 1 198 24 view .LVU195
 762 0324 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 763              	.LVL42:
 764              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 765              		.loc 1 220 40 view .LVU196
 766 0328 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 767              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 768              		.loc 1 221 46 view .LVU197
 769 032c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 770              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 771              		.loc 1 197 55 view .LVU198
 772 0330 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 773              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 774              		.loc 1 196 55 view .LVU199
 775 0334 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 776              	.LVL43:
 777              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 778              		.loc 1 202 25 view .LVU200
 779 0338 FF005AE3 		cmp	r10, #255	@ bb,
 780              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 781              		.loc 1 197 24 view .LVU201
 782 033c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 783              	.LVL44:
 784              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 785              		.loc 1 220 40 view .LVU202
 786 0340 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 787              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 788              		.loc 1 221 46 view .LVU203
 789 0344 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 790              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 791              		.loc 1 196 24 view .LVU204
 792 0348 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 793              	.LVL45:
 794              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 795              		.loc 1 202 25 view .LVU205
 796 034c FFA0A0A3 		movge	r10, #255	@ bb,
 797              	.LVL46:
 798              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 799              		.loc 1 201 25 view .LVU206
 800 0350 FF0054E3 		cmp	r4, #255	@ gg,
 801 0354 FF40A0A3 		movge	r4, #255	@ gg,
 802              	.LVL47:
 803              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 804              		.loc 1 200 25 view .LVU207
 805 0358 FF005CE3 		cmp	ip, #255	@ rr,
 806              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 807              		.loc 1 205 56 view .LVU208
 808 035c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 809              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 810              		.loc 1 220 24 view .LVU209
 811 0360 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 812              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 813              		.loc 1 200 25 view .LVU210
 814 0364 FFC0A0A3 		movge	ip, #255	@ rr,
 815              	.LVL48:
 816              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 817              		.loc 1 205 44 view .LVU211
 818 0368 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 819 036c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 820              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 821              		.loc 1 205 56 view .LVU212
 822 0370 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 823              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 824              		.loc 1 205 51 view .LVU213
 825 0374 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 826              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 827              		.loc 1 205 62 view .LVU214
 828 0378 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 829 037c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 830              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 831              		.loc 1 220 24 view .LVU215
 832 0380 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 833              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 834              		.loc 1 221 24 view .LVU216
 835 0384 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 836              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 837              		.loc 1 205 26 view .LVU217
 838 0388 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 839              	.LVL49:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 840              		.loc 1 219 21 is_stmt 1 view .LVU218
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 841              		.loc 1 220 21 view .LVU219
 221:armwave.c     ****                     xx = (nsub >> 8);
 842              		.loc 1 221 21 view .LVU220
 843              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 844              		.loc 1 222 32 is_stmt 0 view .LVU221
 845 038c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 846              	.LVL50:
 847              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 848              		.loc 1 221 24 view .LVU222
 849 0390 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 850              	.LVL51:
 222:armwave.c     **** 
 851              		.loc 1 222 21 is_stmt 1 view .LVU223
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 852              		.loc 1 224 21 view .LVU224
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 853              		.loc 1 224 21 is_stmt 0 view .LVU225
 854 0394 090052E1 		cmp	r2, r9	@ yy, ye
 855 0398 D3FFFF2A 		bcs	.L31		@,
 856              	.LVL52:
 857              	.L32:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 858              		.loc 1 225 25 is_stmt 1 discriminator 3 view .LVU226
 226:armwave.c     ****                     }
 859              		.loc 1 226 25 discriminator 3 view .LVU227
 860              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 861              		.loc 1 225 43 is_stmt 0 discriminator 3 view .LVU228
 862 039c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 863              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 864              		.loc 1 226 43 discriminator 3 view .LVU229
 865 03a0 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 866              	.LVL53:
 867              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 868              		.loc 1 224 42 discriminator 3 view .LVU230
 869 03a4 012082E2 		add	r2, r2, #1	@ yy, yy,
 870              	.LVL54:
 871              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 872              		.loc 1 224 21 discriminator 3 view .LVU231
 873 03a8 020059E1 		cmp	r9, r2	@ ye, yy
 874              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 875              		.loc 1 226 53 discriminator 3 view .LVU232
 876 03ac 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 877              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 878              		.loc 1 224 21 discriminator 3 view .LVU233
 879 03b0 F9FFFF1A 		bne	.L32		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 880              		.loc 1 224 21 discriminator 3 view .LVU234
 881 03b4 CCFFFFEA 		b	.L31		@
 882              	.LVL55:
 883              	.L46:
 179:armwave.c     **** 
 884              		.loc 1 179 5 is_stmt 1 discriminator 1 view .LVU235
 885 03b8 10309FE5 		ldr	r3, .L49+4	@,
 886 03bc B320A0E3 		mov	r2, #179	@,
 887 03c0 0C109FE5 		ldr	r1, .L49+8	@,
 888 03c4 0C009FE5 		ldr	r0, .L49+12	@,
 889              	.LVL56:
 179:armwave.c     **** 
 890              		.loc 1 179 5 is_stmt 0 discriminator 1 view .LVU236
 891 03c8 FEFFFFEB 		bl	__assert_fail		@
 892              	.LVL57:
 893              	.L50:
 179:armwave.c     **** 
 894              		.loc 1 179 5 discriminator 1 view .LVU237
 895              		.align	2
 896              	.L49:
 897 03cc 00000000 		.word	g_armwave_state
 898 03d0 00000000 		.word	.LANCHOR0
 899 03d4 84000000 		.word	.LC4
 900 03d8 90000000 		.word	.LC5
 901              		.cfi_endproc
 902              	.LFE60:
 904              		.align	2
 905              		.global	armwave_generate
 906              		.syntax unified
 907              		.arm
 908              		.fpu vfp
 910              	armwave_generate:
 911              	.LFB61:
 233:armwave.c     **** 
 234:armwave.c     **** /*
 235:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 236:armwave.c     ****  */
 237:armwave.c     **** void armwave_generate()
 238:armwave.c     **** {
 912              		.loc 1 238 1 is_stmt 1 view -0
 913              		.cfi_startproc
 914              		@ args = 0, pretend = 0, frame = 0
 915              		@ frame_needed = 0, uses_anonymous_args = 0
 239:armwave.c     ****     uint32_t yy;
 916              		.loc 1 239 5 view .LVU239
 240:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 917              		.loc 1 240 5 view .LVU240
 918              	.LVL58:
 241:armwave.c     **** 
 242:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 919              		.loc 1 242 5 view .LVU241
 920              	@ armwave.c:238: {
 238:armwave.c     ****     uint32_t yy;
 921              		.loc 1 238 1 is_stmt 0 view .LVU242
 922 03dc 70402DE9 		push	{r4, r5, r6, lr}	@
 923              		.cfi_def_cfa_offset 16
 924              		.cfi_offset 4, -16
 925              		.cfi_offset 5, -12
 926              		.cfi_offset 6, -8
 927              		.cfi_offset 14, -4
 928              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 929              		.loc 1 242 5 view .LVU243
 930 03e0 0010A0E3 		mov	r1, #0	@,
 931              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 932              		.loc 1 242 58 view .LVU244
 933 03e4 28509FE5 		ldr	r5, .L56	@ tmp131,
 934              	@ armwave.c:245:     for(yy = 0; yy < 20; yy++) {
 243:armwave.c     **** 
 244:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 245:armwave.c     ****     for(yy = 0; yy < 20; yy++) {
 935              		.loc 1 245 12 view .LVU245
 936 03e8 0140A0E1 		mov	r4, r1	@ yy,
 937              	@ armwave.c:242:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 242:armwave.c     **** 
 938              		.loc 1 242 5 view .LVU246
 939 03ec 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 940 03f0 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 941 03f4 FEFFFFEB 		bl	memset		@
 942              	.LVL59:
 943              		.loc 1 245 5 is_stmt 1 view .LVU247
 944              	.L52:
 246:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 247:armwave.c     **** 
 248:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 945              		.loc 1 248 9 discriminator 3 view .LVU248
 946 03f8 D404C5E1 		ldrd	r0, [r5, #68]	@, tmp131,
 947 03fc 900400E0 		mul	r0, r0, r4	@, g_armwave_state.slice_height, yy
 948 0400 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 949              	.LVL60:
 249:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 950              		.loc 1 249 9 discriminator 3 view .LVU249
 250:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 951              		.loc 1 250 9 discriminator 3 view .LVU250
 952              	@ armwave.c:245:     for(yy = 0; yy < 20; yy++) {
 245:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 953              		.loc 1 245 28 is_stmt 0 discriminator 3 view .LVU251
 954 0404 014084E2 		add	r4, r4, #1	@ yy, yy,
 955              	.LVL61:
 956              	@ armwave.c:245:     for(yy = 0; yy < 20; yy++) {
 245:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 957              		.loc 1 245 5 discriminator 3 view .LVU252
 958 0408 140054E3 		cmp	r4, #20	@ yy,
 959 040c F9FFFF1A 		bne	.L52		@,
 960 0410 7080BDE8 		pop	{r4, r5, r6, pc}	@
 961              	.L57:
 962              		.align	2
 963              	.L56:
 964 0414 00000000 		.word	g_armwave_state
 965              		.cfi_endproc
 966              	.LFE61:
 968              		.align	2
 969              		.global	armwave_setup_render
 970              		.syntax unified
 971              		.arm
 972              		.fpu vfp
 974              	armwave_setup_render:
 975              	.LVL62:
 976              	.LFB62:
 251:armwave.c     ****     }
 252:armwave.c     **** 
 253:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 254:armwave.c     **** }
 255:armwave.c     **** 
 256:armwave.c     **** /*
 257:armwave.c     ****  * Setup the renderer with passed parameters.
 258:armwave.c     ****  */
 259:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 260:armwave.c     **** {
 977              		.loc 1 260 1 is_stmt 1 view -0
 978              		.cfi_startproc
 979              		@ args = 12, pretend = 0, frame = 0
 980              		@ frame_needed = 0, uses_anonymous_args = 0
 261:armwave.c     ****     uint32_t length, xx;
 981              		.loc 1 261 5 view .LVU254
 262:armwave.c     ****     float points_per_pixel;
 982              		.loc 1 262 5 view .LVU255
 263:armwave.c     **** 
 264:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 983              		.loc 1 264 5 view .LVU256
 984              	@ armwave.c:260: {
 260:armwave.c     ****     uint32_t length, xx;
 985              		.loc 1 260 1 is_stmt 0 view .LVU257
 986 0418 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 987              		.cfi_def_cfa_offset 28
 988              		.cfi_offset 4, -28
 989              		.cfi_offset 5, -24
 990              		.cfi_offset 6, -20
 991              		.cfi_offset 7, -16
 992              		.cfi_offset 8, -12
 993              		.cfi_offset 9, -8
 994              		.cfi_offset 14, -4
 995 041c 028B2DED 		vpush.64	{d8}	@
 996              		.cfi_def_cfa_offset 36
 997              		.cfi_offset 80, -36
 998              		.cfi_offset 81, -32
 999 0420 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1000 0424 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1001 0428 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1002 042c 14D04DE2 		sub	sp, sp, #20	@,,
 1003              		.cfi_def_cfa_offset 56
 1004              	@ armwave.c:260: {
 260:armwave.c     ****     uint32_t length, xx;
 1005              		.loc 1 260 1 view .LVU258
 1006 0430 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1007 0434 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1008 0438 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1009              	@ armwave.c:264:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1010              		.loc 1 264 5 view .LVU259
 1011 043c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1012 0440 F460CDE1 		strd	r6, [sp, #4]	@,,
 1013 0444 0230A0E1 		mov	r3, r2	@, waves_max
 1014              	.LVL63:
 1015              		.loc 1 264 5 view .LVU260
 1016 0448 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1017 044c 0120A0E1 		mov	r2, r1	@, end_point
 1018              	.LVL64:
 1019              		.loc 1 264 5 view .LVU261
 1020 0450 0010A0E1 		mov	r1, r0	@, start_point
 1021              	.LVL65:
 1022              		.loc 1 264 5 view .LVU262
 1023 0454 D0019FE5 		ldr	r0, .L72+12	@,
 1024              	.LVL66:
 1025              		.loc 1 264 5 view .LVU263
 1026 0458 FEFFFFEB 		bl	printf		@
 1027              	.LVL67:
 265:armwave.c     **** 
 266:armwave.c     ****     // TODO these asserts should instead raise PyExc
 267:armwave.c     ****     assert(start_point < end_point);
 1028              		.loc 1 267 5 is_stmt 1 view .LVU264
 1029 045c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1030 0460 5F00002A 		bcs	.L69		@,
 268:armwave.c     **** 
 269:armwave.c     ****     /*
 270:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 271:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 272:armwave.c     **** 
 273:armwave.c     ****     if(target_height == 256) {
 274:armwave.c     ****         g_armwave_state.row_shift = 8;
 275:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 276:armwave.c     ****     } else if(target_height == 512) {
 277:armwave.c     ****         g_armwave_state.row_shift = 9;
 278:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 279:armwave.c     ****     } else if(target_height == 1024) {
 280:armwave.c     ****         g_armwave_state.row_shift = 10;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 282:armwave.c     ****     } else if(target_height == 2048) {
 283:armwave.c     ****         g_armwave_state.row_shift = 11;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 285:armwave.c     ****     }
 286:armwave.c     ****     */
 287:armwave.c     **** 
 288:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 289:armwave.c     ****     g_armwave_state.xstride = target_height;
 1031              		.loc 1 289 5 view .LVU265
 1032              	@ armwave.c:300:     g_armwave_state.wave_length = end_point - start_point;
 290:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 291:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 292:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 293:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 294:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 295:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 296:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 297:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 298:armwave.c     ****     g_armwave_state.target_width = target_width;
 299:armwave.c     ****     g_armwave_state.target_height = target_height;
 300:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1033              		.loc 1 300 45 is_stmt 0 view .LVU266
 1034 0464 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1035              	.LVL68:
 1036              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1037              		.loc 1 290 49 view .LVU267
 1038 0468 6C6A9FED 		vldr.32	s12, .L72	@ tmp175,
 1039              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 301:armwave.c     **** 
 302:armwave.c     ****     // Calculate compound scaler
 303:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 304:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1040              		.loc 1 304 48 view .LVU268
 1041 046c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1042              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1043              		.loc 1 304 79 view .LVU269
 1044 0470 6B6ADFED 		vldr.32	s13, .L72+4	@ tmp199,
 1045              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1046              		.loc 1 297 90 view .LVU270
 1047 0474 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1048              	@ armwave.c:289:     g_armwave_state.xstride = target_height;
 289:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1049              		.loc 1 289 29 view .LVU271
 1050 0478 B0419FE5 		ldr	r4, .L72+16	@ tmp242,
 1051              	.LVL69:
 1052              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1053              		.loc 1 304 48 view .LVU272
 1054 047c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1055              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1056              		.loc 1 290 49 view .LVU273
 1057 0480 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1058              	@ armwave.c:295:     g_armwave_state.size = target_height * target_width;
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1059              		.loc 1 295 42 view .LVU274
 1060 0484 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1061              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1062              		.loc 1 297 74 view .LVU275
 1063 0488 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1064              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1065              		.loc 1 290 49 view .LVU276
 1066 048c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1067              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1068              		.loc 1 304 48 view .LVU277
 1069 0490 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1070              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1071              		.loc 1 297 74 view .LVU278
 1072 0494 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1073              	@ armwave.c:296:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1074              		.loc 1 296 37 view .LVU279
 1075 0498 012CA0E3 		mov	r2, #256	@ tmp185,
 1076              	@ armwave.c:295:     g_armwave_state.size = target_height * target_width;
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1077              		.loc 1 295 26 view .LVU280
 1078 049c 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1079              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1080              		.loc 1 304 48 view .LVU281
 1081 04a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1082              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 305:armwave.c     **** 
 306:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1083              		.loc 1 306 5 view .LVU282
 1084 04a4 0310A0E1 		mov	r1, r3	@, tmp190
 1085              	@ armwave.c:296:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1086              		.loc 1 296 37 view .LVU283
 1087 04a8 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1088              	@ armwave.c:297:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1089              		.loc 1 297 34 view .LVU284
 1090 04ac 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1091              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1092              		.loc 1 306 5 view .LVU285
 1093 04b0 7C019FE5 		ldr	r0, .L72+20	@,
 1094              	@ armwave.c:289:     g_armwave_state.xstride = target_height;
 289:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1095              		.loc 1 289 29 view .LVU286
 1096 04b4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1097              		.loc 1 290 5 is_stmt 1 view .LVU287
 1098              	@ armwave.c:292:     g_armwave_state.wave_stride = wave_stride;
 292:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1099              		.loc 1 292 33 is_stmt 0 view .LVU288
 1100 04b8 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1101              	@ armwave.c:293:     g_armwave_state.waves_max = waves_max;
 293:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1102              		.loc 1 293 31 view .LVU289
 1103 04bc 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1104              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 1105              		.loc 1 304 48 view .LVU290
 1106 04c0 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1107              	@ armwave.c:294:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 294:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1108              		.loc 1 294 27 view .LVU291
 1109 04c4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1110              	@ armwave.c:299:     g_armwave_state.target_height = target_height;
 299:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1111              		.loc 1 299 35 view .LVU292
 1112 04c8 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1113              	@ armwave.c:300:     g_armwave_state.wave_length = end_point - start_point;
 300:armwave.c     **** 
 1114              		.loc 1 300 33 view .LVU293
 1115 04cc 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1116              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1117              		.loc 1 290 49 view .LVU294
 1118 04d0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1119              	@ armwave.c:304:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 1120              		.loc 1 304 79 view .LVU295
 1121 04d4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1122              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1123              		.loc 1 303 42 view .LVU296
 1124 04d8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1125              	@ armwave.c:290:     g_armwave_state.vscale_frac = target_height / 255.0f;
 290:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1126              		.loc 1 290 33 view .LVU297
 1127 04dc 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1128              		.loc 1 291 5 is_stmt 1 view .LVU298
 1129              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1130              		.loc 1 303 42 is_stmt 0 view .LVU299
 1131 04e0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1132              	@ armwave.c:291:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1133              		.loc 1 291 30 view .LVU300
 1134 04e4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1135              	@ armwave.c:306:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1136              		.loc 1 306 5 view .LVU301
 1137 04e8 0C30A0E1 		mov	r3, ip	@, _19
 1138 04ec 0C20A0E1 		mov	r2, ip	@, tmp3
 1139              	@ armwave.c:303:     g_armwave_state.cmp_x_bitdepth_scale = \
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1140              		.loc 1 303 42 view .LVU302
 1141 04f0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1142              	@ armwave.c:291:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 291:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1143              		.loc 1 291 30 view .LVU303
 1144 04f4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 292:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1145              		.loc 1 292 5 is_stmt 1 view .LVU304
 293:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1146              		.loc 1 293 5 view .LVU305
 294:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1147              		.loc 1 294 5 view .LVU306
 295:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1148              		.loc 1 295 5 view .LVU307
 296:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1149              		.loc 1 296 5 view .LVU308
 297:armwave.c     ****     g_armwave_state.target_width = target_width;
 1150              		.loc 1 297 5 view .LVU309
 298:armwave.c     ****     g_armwave_state.target_height = target_height;
 1151              		.loc 1 298 5 view .LVU310
 299:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1152              		.loc 1 299 5 view .LVU311
 300:armwave.c     **** 
 1153              		.loc 1 300 5 view .LVU312
 303:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1154              		.loc 1 303 5 view .LVU313
 1155              		.loc 1 306 5 view .LVU314
 1156 04f8 FEFFFFEB 		bl	printf		@
 1157              	.LVL70:
 307:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 308:armwave.c     **** 
 309:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 310:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 311:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 312:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1158              		.loc 1 312 5 view .LVU315
 1159              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 313:armwave.c     **** 
 314:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1160              		.loc 1 314 23 is_stmt 0 view .LVU316
 1161 04fc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1162              	@ armwave.c:312:     g_armwave_state.slice_height = 64;  
 312:armwave.c     **** 
 1163              		.loc 1 312 34 view .LVU317
 1164 0500 4030A0E3 		mov	r3, #64	@ tmp203,
 1165              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 1166              		.loc 1 314 7 view .LVU318
 1167 0504 000050E3 		cmp	r0, #0	@ _20,
 1168              	@ armwave.c:312:     g_armwave_state.slice_height = 64;  
 312:armwave.c     **** 
 1169              		.loc 1 312 34 view .LVU319
 1170 0508 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1171              		.loc 1 314 5 is_stmt 1 view .LVU320
 1172              	@ armwave.c:314:     if(g_armwave_state.ch1_buffer != NULL)
 1173              		.loc 1 314 7 is_stmt 0 view .LVU321
 1174 050c 0000000A 		beq	.L60		@,
 315:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1175              		.loc 1 315 9 is_stmt 1 view .LVU322
 1176 0510 FEFFFFEB 		bl	free		@
 1177              	.LVL71:
 1178              	.L60:
 316:armwave.c     **** 
 317:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1179              		.loc 1 317 5 view .LVU323
 1180              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1181              		.loc 1 317 34 is_stmt 0 view .LVU324
 1182 0514 0110A0E3 		mov	r1, #1	@,
 1183 0518 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1184 051c FEFFFFEB 		bl	calloc		@
 1185              	.LVL72:
 1186              	@ armwave.c:319:     assert(g_armwave_state.ch1_buffer != NULL);
 318:armwave.c     **** 
 319:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1187              		.loc 1 319 5 view .LVU325
 1188 0520 000050E3 		cmp	r0, #0	@ _23,
 1189              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 317:armwave.c     **** 
 1190              		.loc 1 317 34 view .LVU326
 1191 0524 0070A0E1 		mov	r7, r0	@ _23,
 1192              	@ armwave.c:317:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 317:armwave.c     **** 
 1193              		.loc 1 317 32 view .LVU327
 1194 0528 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1195              		.loc 1 319 5 is_stmt 1 view .LVU328
 1196 052c 3600000A 		beq	.L70		@,
 320:armwave.c     **** 
 321:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 322:armwave.c     ****     length = end_point - start_point;
 1197              		.loc 1 322 5 view .LVU329
 1198              	.LVL73:
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1199              		.loc 1 323 5 view .LVU330
 1200              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 1201              		.loc 1 323 34 is_stmt 0 view .LVU331
 1202 0530 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1203              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 1204              		.loc 1 323 22 view .LVU332
 1205 0534 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1206              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1207              		.loc 1 324 60 view .LVU333
 1208 0538 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1209              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1210              		.loc 1 325 40 view .LVU334
 1211 053c 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1212              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1213              		.loc 1 323 34 view .LVU335
 1214 0540 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1215              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1216              		.loc 1 323 22 view .LVU336
 1217 0544 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1218              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1219              		.loc 1 324 60 view .LVU337
 1220 0548 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1221              	@ armwave.c:323:     points_per_pixel = length / ((float)(target_width));
 323:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1222              		.loc 1 323 22 view .LVU338
 1223 054c A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1224              	.LVL74:
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1225              		.loc 1 324 5 is_stmt 1 view .LVU339
 1226              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1227              		.loc 1 324 60 is_stmt 0 view .LVU340
 1228 0550 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1229              	@ armwave.c:324:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 324:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1230              		.loc 1 324 41 view .LVU341
 1231 0554 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1232 0558 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1233              		.loc 1 325 5 is_stmt 1 view .LVU342
 1234              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1235              		.loc 1 325 40 is_stmt 0 view .LVU343
 1236 055c FEFFFFEB 		bl	malloc		@
 1237              	.LVL75:
 1238              	@ armwave.c:327:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 326:armwave.c     **** 
 327:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1239              		.loc 1 327 5 view .LVU344
 1240 0560 000050E3 		cmp	r0, #0	@ _31,
 1241              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1242              		.loc 1 325 40 view .LVU345
 1243 0564 0060A0E1 		mov	r6, r0	@ _31,
 1244              	@ armwave.c:325:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 325:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1245              		.loc 1 325 38 view .LVU346
 1246 0568 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1247              		.loc 1 327 5 is_stmt 1 view .LVU347
 1248 056c 2100000A 		beq	.L71		@,
 1249              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 328:armwave.c     **** 
 329:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 330:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1250              		.loc 1 330 54 is_stmt 0 view .LVU348
 1251 0570 2C7ADFED 		vldr.32	s15, .L72+8	@ tmp230,
 1252 0574 02C040E2 		sub	ip, r0, #2	@ ivtmp.70, _31,
 1253              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1254              		.loc 1 329 12 view .LVU349
 1255 0578 0030A0E3 		mov	r3, #0	@ xx,
 1256              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1257              		.loc 1 330 54 view .LVU350
 1258 057c 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1259              	.L63:
 1260              	.LVL76:
 1261              		.loc 1 330 9 is_stmt 1 discriminator 3 view .LVU351
 1262              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1263              		.loc 1 330 74 is_stmt 0 discriminator 3 view .LVU352
 1264 0580 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1265              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1266              		.loc 1 329 32 discriminator 3 view .LVU353
 1267 0584 013083E2 		add	r3, r3, #1	@ xx, xx,
 1268              	.LVL77:
 1269              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1270              		.loc 1 329 5 discriminator 3 view .LVU354
 1271 0588 030055E1 		cmp	r5, r3	@ _13, xx
 1272              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1273              		.loc 1 330 74 discriminator 3 view .LVU355
 1274 058c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1275 0590 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1276              	@ armwave.c:330:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1277              		.loc 1 330 46 discriminator 3 view .LVU356
 1278 0594 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1279 0598 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1280 059c B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1281              	@ armwave.c:329:     for(xx = 0; xx < length; xx++) {
 329:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1282              		.loc 1 329 5 discriminator 3 view .LVU357
 1283 05a0 F6FFFF1A 		bne	.L63		@,
 331:armwave.c     **** 
 332:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 333:armwave.c     ****     }
 334:armwave.c     **** 
 335:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1284              		.loc 1 335 5 is_stmt 1 view .LVU358
 1285              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1286              		.loc 1 335 34 is_stmt 0 view .LVU359
 1287 05a4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1288 05a8 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1289 05ac FEFFFFEB 		bl	malloc		@
 1290              	.LVL78:
 1291              	@ armwave.c:337:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 336:armwave.c     **** 
 337:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1292              		.loc 1 337 5 view .LVU360
 1293 05b0 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1294 05b4 0620A0E1 		mov	r2, r6	@, _31
 1295 05b8 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1296 05bc 0710A0E1 		mov	r1, r7	@, _23
 1297              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 335:armwave.c     **** 
 1298              		.loc 1 335 34 view .LVU361
 1299 05c0 00C0A0E1 		mov	ip, r0	@ tmp237,
 1300              	@ armwave.c:337:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1301              		.loc 1 337 5 view .LVU362
 1302 05c4 0030A0E1 		mov	r3, r0	@, tmp237
 1303              	@ armwave.c:335:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 335:armwave.c     **** 
 1304              		.loc 1 335 32 view .LVU363
 1305 05c8 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1306              		.loc 1 337 5 is_stmt 1 view .LVU364
 1307 05cc 64009FE5 		ldr	r0, .L72+24	@,
 1308 05d0 FEFFFFEB 		bl	printf		@
 1309              	.LVL79:
 338:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 340:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 341:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 342:armwave.c     **** 
 343:armwave.c     ****     malloc_stats();
 1310              		.loc 1 343 5 view .LVU365
 1311              	@ armwave.c:344: }
 344:armwave.c     **** }
 1312              		.loc 1 344 1 is_stmt 0 view .LVU366
 1313 05d4 14D08DE2 		add	sp, sp, #20	@,,
 1314              		.cfi_remember_state
 1315              		.cfi_def_cfa_offset 36
 1316              		@ sp needed	@
 1317 05d8 028BBDEC 		vldm	sp!, {d8}	@
 1318              		.cfi_restore 80
 1319              		.cfi_restore 81
 1320              		.cfi_def_cfa_offset 28
 1321              	.LVL80:
 1322              		.loc 1 344 1 view .LVU367
 1323 05dc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1324              		.cfi_restore 14
 1325              		.cfi_restore 9
 1326              		.cfi_restore 8
 1327              		.cfi_restore 7
 1328              		.cfi_restore 6
 1329              		.cfi_restore 5
 1330              		.cfi_restore 4
 1331              		.cfi_def_cfa_offset 0
 1332              	.LVL81:
 1333              	@ armwave.c:343:     malloc_stats();
 343:armwave.c     **** }
 1334              		.loc 1 343 5 view .LVU368
 1335 05e0 FEFFFFEA 		b	malloc_stats		@
 1336              	.LVL82:
 1337              	.L69:
 1338              		.cfi_restore_state
 267:armwave.c     **** 
 1339              		.loc 1 267 5 is_stmt 1 discriminator 1 view .LVU369
 1340 05e4 50309FE5 		ldr	r3, .L72+28	@,
 1341 05e8 50209FE5 		ldr	r2, .L72+32	@,
 1342 05ec 50109FE5 		ldr	r1, .L72+36	@,
 1343 05f0 50009FE5 		ldr	r0, .L72+40	@,
 1344 05f4 FEFFFFEB 		bl	__assert_fail		@
 1345              	.LVL83:
 1346              	.L71:
 327:armwave.c     **** 
 1347              		.loc 1 327 5 discriminator 1 view .LVU370
 1348 05f8 3C309FE5 		ldr	r3, .L72+28	@,
 1349 05fc 48209FE5 		ldr	r2, .L72+44	@,
 1350 0600 3C109FE5 		ldr	r1, .L72+36	@,
 1351 0604 44009FE5 		ldr	r0, .L72+48	@,
 1352 0608 FEFFFFEB 		bl	__assert_fail		@
 1353              	.LVL84:
 1354              	.L70:
 319:armwave.c     **** 
 1355              		.loc 1 319 5 discriminator 1 view .LVU371
 1356 060c 28309FE5 		ldr	r3, .L72+28	@,
 1357 0610 3C209FE5 		ldr	r2, .L72+52	@,
 1358 0614 28109FE5 		ldr	r1, .L72+36	@,
 1359 0618 38009FE5 		ldr	r0, .L72+56	@,
 1360 061c FEFFFFEB 		bl	__assert_fail		@
 1361              	.LVL85:
 1362              	.L73:
 1363              		.align	2
 1364              	.L72:
 1365 0620 00007F43 		.word	1132396544
 1366 0624 00008043 		.word	1132462080
 1367 0628 0000803F 		.word	1065353216
 1368 062c A4000000 		.word	.LC6
 1369 0630 00000000 		.word	g_armwave_state
 1370 0634 E8000000 		.word	.LC8
 1371 0638 6C010000 		.word	.LC11
 1372 063c 1C000000 		.word	.LANCHOR0+28
 1373 0640 0B010000 		.word	267
 1374 0644 84000000 		.word	.LC4
 1375 0648 D0000000 		.word	.LC7
 1376 064c 47010000 		.word	327
 1377 0650 40010000 		.word	.LC10
 1378 0654 3F010000 		.word	319
 1379 0658 1C010000 		.word	.LC9
 1380              		.cfi_endproc
 1381              	.LFE62:
 1383              		.align	2
 1384              		.global	armwave_set_wave_pointer
 1385              		.syntax unified
 1386              		.arm
 1387              		.fpu vfp
 1389              	armwave_set_wave_pointer:
 1390              	.LVL86:
 1391              	.LFB63:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 348:armwave.c     ****  * in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 351:armwave.c     **** {
 1392              		.loc 1 351 1 view -0
 1393              		.cfi_startproc
 1394              		@ args = 0, pretend = 0, frame = 0
 1395              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1396              		.loc 1 352 5 view .LVU373
 1397 065c 000050E3 		cmp	r0, #0	@ wave_buffer
 1398              		.loc 1 352 5 is_stmt 0 view .LVU374
 1399 0660 0200000A 		beq	.L79		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1400              		.loc 1 353 5 is_stmt 1 view .LVU375
 1401              	@ armwave.c:353:     g_armwave_state.wave_buffer = wave_buffer;
 1402              		.loc 1 353 33 is_stmt 0 view .LVU376
 1403 0664 1C309FE5 		ldr	r3, .L80	@ tmp115,
 1404 0668 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1405 066c 1EFF2FE1 		bx	lr	@
 1406              	.L79:
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1407              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU377
 1408              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer != NULL);
 1409              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU378
 1410 0670 10402DE9 		push	{r4, lr}	@
 1411              		.cfi_def_cfa_offset 8
 1412              		.cfi_offset 4, -8
 1413              		.cfi_offset 14, -4
 1414              	@ armwave.c:352:     assert(wave_buffer != NULL);
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1415              		.loc 1 352 5 discriminator 1 view .LVU379
 1416 0674 162EA0E3 		mov	r2, #352	@,
 1417 0678 0C309FE5 		ldr	r3, .L80+4	@,
 1418 067c 0C109FE5 		ldr	r1, .L80+8	@,
 1419 0680 0C009FE5 		ldr	r0, .L80+12	@,
 1420              	.LVL87:
 352:armwave.c     ****     assert(wave_buffer != NULL);
 1421              		.loc 1 352 5 discriminator 1 view .LVU380
 1422 0684 FEFFFFEB 		bl	__assert_fail		@
 1423              	.LVL88:
 1424              	.L81:
 1425              		.align	2
 1426              	.L80:
 1427 0688 00000000 		.word	g_armwave_state
 1428 068c 34000000 		.word	.LANCHOR0+52
 1429 0690 84000000 		.word	.LC4
 1430 0694 90010000 		.word	.LC12
 1431              		.cfi_endproc
 1432              	.LFE63:
 1434              		.align	2
 1435              		.global	armwave_set_wave_pointer_as_testbuf
 1436              		.syntax unified
 1437              		.arm
 1438              		.fpu vfp
 1440              	armwave_set_wave_pointer_as_testbuf:
 1441              	.LVL89:
 1442              	.LFB64:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 358:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 361:armwave.c     **** {
 1443              		.loc 1 361 1 is_stmt 1 view -0
 1444              		.cfi_startproc
 1445              		@ args = 0, pretend = 0, frame = 0
 1446              		@ frame_needed = 0, uses_anonymous_args = 0
 1447              		@ link register save eliminated.
 362:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1448              		.loc 1 362 5 view .LVU382
 1449              	@ armwave.c:362:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1450              		.loc 1 362 29 is_stmt 0 view .LVU383
 1451 0698 24309FE5 		ldr	r3, .L85	@ tmp117,
 1452              	@ armwave.c:362:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1453              		.loc 1 362 7 view .LVU384
 1454 069c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1455 06a0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1456 06a4 0400003A 		bcc	.L84		@,
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 364:armwave.c     ****         return;
 365:armwave.c     ****     }
 366:armwave.c     **** 
 367:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1457              		.loc 1 367 5 is_stmt 1 view .LVU385
 1458              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1459              		.loc 1 367 111 is_stmt 0 view .LVU386
 1460 06a8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1461              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1462              		.loc 1 367 68 view .LVU387
 1463 06ac 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1464 06b0 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1465              	.LVL90:
 1466              	@ armwave.c:367:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1467              		.loc 1 367 33 view .LVU388
 1468 06b4 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1469              	@ armwave.c:368: }
 368:armwave.c     **** }
 1470              		.loc 1 368 1 view .LVU389
 1471 06b8 1EFF2FE1 		bx	lr	@
 1472              	.LVL91:
 1473              	.L84:
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1474              		.loc 1 363 9 is_stmt 1 view .LVU390
 1475 06bc 04009FE5 		ldr	r0, .L85+4	@,
 1476              	.LVL92:
 363:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1477              		.loc 1 363 9 is_stmt 0 view .LVU391
 1478 06c0 FEFFFFEA 		b	puts		@
 1479              	.LVL93:
 1480              	.L86:
 1481              		.align	2
 1482              	.L85:
 1483 06c4 00000000 		.word	g_armwave_state
 1484 06c8 A4010000 		.word	.LC13
 1485              		.cfi_endproc
 1486              	.LFE64:
 1488              		.align	2
 1489              		.global	armwave_set_wave_pointer_u32
 1490              		.syntax unified
 1491              		.arm
 1492              		.fpu vfp
 1494              	armwave_set_wave_pointer_u32:
 1495              	.LVL94:
 1496              	.LFB65:
 369:armwave.c     **** 
 370:armwave.c     **** /*
 371:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 372:armwave.c     ****  * disjointed buffers in the future.
 373:armwave.c     ****  */
 374:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 375:armwave.c     **** {
 1497              		.loc 1 375 1 is_stmt 1 view -0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1501              		.loc 1 376 5 view .LVU393
 1502 06cc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1503              		.loc 1 376 5 is_stmt 0 view .LVU394
 1504 06d0 0200000A 		beq	.L92		@,
 377:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1505              		.loc 1 377 5 is_stmt 1 view .LVU395
 1506              	@ armwave.c:377:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1507              		.loc 1 377 33 is_stmt 0 view .LVU396
 1508 06d4 1C309FE5 		ldr	r3, .L93	@ tmp116,
 1509 06d8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1510 06dc 1EFF2FE1 		bx	lr	@
 1511              	.L92:
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1512              		.loc 1 376 5 is_stmt 1 discriminator 1 view .LVU397
 1513              	@ armwave.c:375: {
 375:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1514              		.loc 1 375 1 is_stmt 0 discriminator 1 view .LVU398
 1515 06e0 10402DE9 		push	{r4, lr}	@
 1516              		.cfi_def_cfa_offset 8
 1517              		.cfi_offset 4, -8
 1518              		.cfi_offset 14, -4
 1519              	@ armwave.c:376:     assert(wave_buffer_ptr != 0);
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1520              		.loc 1 376 5 discriminator 1 view .LVU399
 1521 06e4 5E2FA0E3 		mov	r2, #376	@,
 1522 06e8 0C309FE5 		ldr	r3, .L93+4	@,
 1523 06ec 0C109FE5 		ldr	r1, .L93+8	@,
 1524 06f0 0C009FE5 		ldr	r0, .L93+12	@,
 1525              	.LVL95:
 376:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1526              		.loc 1 376 5 discriminator 1 view .LVU400
 1527 06f4 FEFFFFEB 		bl	__assert_fail		@
 1528              	.LVL96:
 1529              	.L94:
 1530              		.align	2
 1531              	.L93:
 1532 06f8 00000000 		.word	g_armwave_state
 1533 06fc 50000000 		.word	.LANCHOR0+80
 1534 0700 84000000 		.word	.LC4
 1535 0704 E0010000 		.word	.LC14
 1536              		.cfi_endproc
 1537              	.LFE65:
 1539              		.align	2
 1540              		.global	armwave_clear_buffer
 1541              		.syntax unified
 1542              		.arm
 1543              		.fpu vfp
 1545              	armwave_clear_buffer:
 1546              	.LVL97:
 1547              	.LFB66:
 378:armwave.c     **** }
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 384:armwave.c     **** {
 1548              		.loc 1 384 1 is_stmt 1 view -0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
 385:armwave.c     ****     // Flags ignored, only one buffer cleared
 386:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1553              		.loc 1 386 5 view .LVU402
 1554              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1555              		.loc 1 386 58 is_stmt 0 view .LVU403
 1556 0708 0C309FE5 		ldr	r3, .L96	@ tmp114,
 1557              	@ armwave.c:386:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1558              		.loc 1 386 5 view .LVU404
 1559 070c 0010A0E3 		mov	r1, #0	@,
 1560 0710 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1561 0714 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1562              	.LVL98:
 1563              		.loc 1 386 5 view .LVU405
 1564 0718 FEFFFFEA 		b	memset		@
 1565              	.LVL99:
 1566              	.L97:
 1567              		.align	2
 1568              	.L96:
 1569 071c 00000000 		.word	g_armwave_state
 1570              		.cfi_endproc
 1571              	.LFE66:
 1573              		.align	2
 1574              		.global	armwave_set_channel_colour
 1575              		.syntax unified
 1576              		.arm
 1577              		.fpu vfp
 1579              	armwave_set_channel_colour:
 1580              	.LVL100:
 1581              	.LFB67:
 387:armwave.c     **** }
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 393:armwave.c     **** {
 1582              		.loc 1 393 1 is_stmt 1 view -0
 1583              		.cfi_startproc
 1584              		@ args = 0, pretend = 0, frame = 0
 1585              		@ frame_needed = 0, uses_anonymous_args = 0
 1586              		@ link register save eliminated.
 394:armwave.c     ****     // Only 1ch supported for now
 395:armwave.c     ****     switch(ch) {
 1587              		.loc 1 395 5 view .LVU407
 1588 0720 010050E3 		cmp	r0, #1	@ ch,
 396:armwave.c     ****         case 1:
 397:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1589              		.loc 1 397 13 view .LVU408
 1590              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 1591              		.loc 1 397 41 is_stmt 0 view .LVU409
 1592 0724 0C009F05 		ldreq	r0, .L100	@ tmp117,
 1593              	.LVL101:
 1594              		.loc 1 397 41 view .LVU410
 1595 0728 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 398:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1596              		.loc 1 398 13 is_stmt 1 view .LVU411
 1597              	@ armwave.c:398:             g_armwave_state.ch1_color.g = g;
 1598              		.loc 1 398 41 is_stmt 0 view .LVU412
 1599 072c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 399:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1600              		.loc 1 399 13 is_stmt 1 view .LVU413
 1601              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 1602              		.loc 1 399 41 is_stmt 0 view .LVU414
 1603 0730 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 400:armwave.c     ****             break;
 1604              		.loc 1 400 13 is_stmt 1 view .LVU415
 1605              	@ armwave.c:402: }
 401:armwave.c     ****     }
 402:armwave.c     **** }
 1606              		.loc 1 402 1 is_stmt 0 view .LVU416
 1607 0734 1EFF2FE1 		bx	lr	@
 1608              	.L101:
 1609              		.align	2
 1610              	.L100:
 1611 0738 00000000 		.word	g_armwave_state
 1612              		.cfi_endproc
 1613              	.LFE67:
 1615              		.align	2
 1616              		.global	armwave_dump_ppm_debug
 1617              		.syntax unified
 1618              		.arm
 1619              		.fpu vfp
 1621              	armwave_dump_ppm_debug:
 1622              	.LVL102:
 1623              	.LFB68:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Dump a ppm of a buffer to a file.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 408:armwave.c     **** {
 1624              		.loc 1 408 1 is_stmt 1 view -0
 1625              		.cfi_startproc
 1626              		@ args = 0, pretend = 0, frame = 0
 1627              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1628              		.loc 1 409 5 view .LVU418
 1629              	@ armwave.c:408: {
 408:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1630              		.loc 1 408 1 is_stmt 0 view .LVU419
 1631 073c 0130A0E1 		mov	r3, r1	@ fn, fn
 1632 0740 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1633              		.cfi_def_cfa_offset 28
 1634              		.cfi_offset 4, -28
 1635              		.cfi_offset 5, -24
 1636              		.cfi_offset 6, -20
 1637              		.cfi_offset 7, -16
 1638              		.cfi_offset 8, -12
 1639              		.cfi_offset 9, -8
 1640              		.cfi_offset 14, -4
 1641 0744 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1642 0748 0CD04DE2 		sub	sp, sp, #12	@,,
 1643              		.cfi_def_cfa_offset 40
 1644              	@ armwave.c:409:     FILE *fp = fopen(fn, "wb");
 1645              		.loc 1 409 16 view .LVU420
 1646 074c C4109FE5 		ldr	r1, .L110	@,
 1647              	.LVL103:
 1648              		.loc 1 409 16 view .LVU421
 1649 0750 0300A0E1 		mov	r0, r3	@, fn
 1650              	.LVL104:
 1651              		.loc 1 409 16 view .LVU422
 1652 0754 FEFFFFEB 		bl	fopen64		@
 1653              	.LVL105:
 1654              	@ armwave.c:416:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 410:armwave.c     ****     uint32_t data;
 411:armwave.c     ****     int xx, yy;
 412:armwave.c     **** 
 413:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 414:armwave.c     **** 
 415:armwave.c     ****     fputs("P3\n", fp);
 416:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1655              		.loc 1 416 5 view .LVU423
 1656 0758 BC609FE5 		ldr	r6, .L110+4	@ tmp150,
 1657              	@ armwave.c:415:     fputs("P3\n", fp);
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1658              		.loc 1 415 5 view .LVU424
 1659 075c 0320A0E3 		mov	r2, #3	@,
 1660 0760 0110A0E3 		mov	r1, #1	@,
 1661              	@ armwave.c:409:     FILE *fp = fopen(fn, "wb");
 409:armwave.c     ****     uint32_t data;
 1662              		.loc 1 409 16 view .LVU425
 1663 0764 0070A0E1 		mov	r7, r0	@ fp,
 1664              	.LVL106:
 410:armwave.c     ****     uint32_t data;
 1665              		.loc 1 410 5 is_stmt 1 view .LVU426
 411:armwave.c     **** 
 1666              		.loc 1 411 5 view .LVU427
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1667              		.loc 1 415 5 view .LVU428
 1668 0768 0030A0E1 		mov	r3, r0	@, fp
 1669 076c AC009FE5 		ldr	r0, .L110+8	@,
 1670              	.LVL107:
 415:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1671              		.loc 1 415 5 is_stmt 0 view .LVU429
 1672 0770 FEFFFFEB 		bl	fwrite		@
 1673              	.LVL108:
 1674              		.loc 1 416 5 is_stmt 1 view .LVU430
 1675 0774 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1676 0778 A4109FE5 		ldr	r1, .L110+12	@,
 1677 077c 0700A0E1 		mov	r0, r7	@, fp
 1678 0780 FEFFFFEB 		bl	fprintf		@
 1679              	.LVL109:
 417:armwave.c     ****     fputs("255\n", fp);
 1680              		.loc 1 417 5 view .LVU431
 1681 0784 0420A0E3 		mov	r2, #4	@,
 1682 0788 0730A0E1 		mov	r3, r7	@, fp
 1683 078c 0110A0E3 		mov	r1, #1	@,
 1684 0790 90009FE5 		ldr	r0, .L110+16	@,
 1685 0794 FEFFFFEB 		bl	fwrite		@
 1686              	.LVL110:
 418:armwave.c     **** 
 419:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1687              		.loc 1 419 5 view .LVU432
 1688              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1689              		.loc 1 419 37 is_stmt 0 view .LVU433
 1690 0798 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1691              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1692              		.loc 1 419 5 view .LVU434
 1693 079c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1694 07a0 180000DA 		ble	.L103		@,
 1695 07a4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1696              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 421:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 422:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 423:armwave.c     **** 
 424:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1697              		.loc 1 424 13 view .LVU435
 1698 07a8 7C909FE5 		ldr	r9, .L110+20	@ tmp152,
 1699              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1700              		.loc 1 419 12 view .LVU436
 1701 07ac 0050A0E3 		mov	r5, #0	@ yy,
 1702              	.LVL111:
 1703              	.L104:
 1704              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1705              		.loc 1 420 9 view .LVU437
 1706 07b0 000053E3 		cmp	r3, #0	@ _13,
 1707              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1708              		.loc 1 420 16 view .LVU438
 1709 07b4 0040A0C3 		movgt	r4, #0	@ xx,
 1710              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1711              		.loc 1 420 9 view .LVU439
 1712 07b8 0F0000DA 		ble	.L106		@,
 1713              	.LVL112:
 1714              	.L105:
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1715              		.loc 1 421 13 is_stmt 1 discriminator 3 view .LVU440
 1716              	@ armwave.c:421:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1717              		.loc 1 421 29 is_stmt 0 discriminator 3 view .LVU441
 1718 07bc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1719              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1720              		.loc 1 424 13 discriminator 3 view .LVU442
 1721 07c0 0910A0E1 		mov	r1, r9	@, tmp152
 1722 07c4 0700A0E1 		mov	r0, r7	@, fp
 1723              	@ armwave.c:421:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 421:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1724              		.loc 1 421 18 discriminator 3 view .LVU443
 1725 07c8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1726              	.LVL113:
 1727              		.loc 1 424 13 is_stmt 1 discriminator 3 view .LVU444
 1728              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1729              		.loc 1 420 58 is_stmt 0 discriminator 3 view .LVU445
 1730 07cc 014084E2 		add	r4, r4, #1	@ xx, xx,
 1731              	.LVL114:
 1732              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1733              		.loc 1 424 81 discriminator 3 view .LVU446
 1734 07d0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1735              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1736              		.loc 1 424 61 discriminator 3 view .LVU447
 1737 07d4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1738              	@ armwave.c:424:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1739              		.loc 1 424 13 discriminator 3 view .LVU448
 1740 07d8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1741 07dc 7330EFE6 		uxtb	r3, r3	@, tmp142
 1742 07e0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1743 07e4 7220EFE6 		uxtb	r2, r2	@, data
 1744              	.LVL115:
 1745              		.loc 1 424 13 discriminator 3 view .LVU449
 1746 07e8 FEFFFFEB 		bl	fprintf		@
 1747              	.LVL116:
 1748              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1749              		.loc 1 420 41 discriminator 3 view .LVU450
 1750 07ec 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1751              	@ armwave.c:420:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 420:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1752              		.loc 1 420 9 discriminator 3 view .LVU451
 1753 07f0 040053E1 		cmp	r3, r4	@ _13, xx
 1754 07f4 F0FFFFCA 		bgt	.L105		@,
 1755 07f8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1756              	.LVL117:
 1757              	.L106:
 1758              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1759              		.loc 1 419 55 discriminator 2 view .LVU452
 1760 07fc 015085E2 		add	r5, r5, #1	@ yy, yy,
 1761              	.LVL118:
 1762              	@ armwave.c:419:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 419:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1763              		.loc 1 419 5 discriminator 2 view .LVU453
 1764 0800 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1765 0804 E9FFFFBA 		blt	.L104		@,
 1766              	.LVL119:
 1767              	.L103:
 425:armwave.c     ****         }
 426:armwave.c     ****     }
 427:armwave.c     **** 
 428:armwave.c     ****     fclose(fp);
 1768              		.loc 1 428 5 is_stmt 1 view .LVU454
 1769 0808 0700A0E1 		mov	r0, r7	@, fp
 1770              	@ armwave.c:429: }
 429:armwave.c     **** }
 1771              		.loc 1 429 1 is_stmt 0 view .LVU455
 1772 080c 0CD08DE2 		add	sp, sp, #12	@,,
 1773              		.cfi_def_cfa_offset 28
 1774              		@ sp needed	@
 1775 0810 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1776              		.cfi_restore 14
 1777              		.cfi_restore 9
 1778              		.cfi_restore 8
 1779              		.cfi_restore 7
 1780              		.cfi_restore 6
 1781              		.cfi_restore 5
 1782              		.cfi_restore 4
 1783              		.cfi_def_cfa_offset 0
 1784              	.LVL120:
 1785              	@ armwave.c:428:     fclose(fp);
 428:armwave.c     **** }
 1786              		.loc 1 428 5 view .LVU456
 1787 0814 FEFFFFEA 		b	fclose		@
 1788              	.LVL121:
 1789              	.L111:
 428:armwave.c     **** }
 1790              		.loc 1 428 5 view .LVU457
 1791              		.align	2
 1792              	.L110:
 1793 0818 F8010000 		.word	.LC15
 1794 081c 00000000 		.word	g_armwave_state
 1795 0820 FC010000 		.word	.LC16
 1796 0824 00020000 		.word	.LC17
 1797 0828 08020000 		.word	.LC18
 1798 082c 10020000 		.word	.LC19
 1799              		.cfi_endproc
 1800              	.LFE68:
 1802              		.align	2
 1803              		.global	armwave_test_init
 1804              		.syntax unified
 1805              		.arm
 1806              		.fpu vfp
 1808              	armwave_test_init:
 1809              	.LVL122:
 1810              	.LFB69:
 430:armwave.c     **** 
 431:armwave.c     **** /*
 432:armwave.c     ****  * Initialise some test functionry.
 433:armwave.c     ****  */
 434:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 435:armwave.c     **** {
 1811              		.loc 1 435 1 is_stmt 1 view -0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 0
 1814              		@ frame_needed = 0, uses_anonymous_args = 0
 436:armwave.c     ****     test_create_gamma();
 1815              		.loc 1 436 5 view .LVU459
 1816              	.LBB12:
 1817              	.LBI12:
  34:armwave.c     **** {
 1818              		.loc 1 34 6 view .LVU460
  34:armwave.c     **** {
 1819              		.loc 1 34 6 is_stmt 0 view .LVU461
 1820              	.LBE12:
 1821              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1822              		.loc 1 435 1 view .LVU462
 1823 0830 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1824              		.cfi_def_cfa_offset 32
 1825              		.cfi_offset 4, -32
 1826              		.cfi_offset 5, -28
 1827              		.cfi_offset 6, -24
 1828              		.cfi_offset 7, -20
 1829              		.cfi_offset 8, -16
 1830              		.cfi_offset 9, -12
 1831              		.cfi_offset 10, -8
 1832              		.cfi_offset 14, -4
 1833 0834 068B2DED 		vpush.64	{d8, d9, d10}	@
 1834              		.cfi_def_cfa_offset 56
 1835              		.cfi_offset 80, -56
 1836              		.cfi_offset 81, -52
 1837              		.cfi_offset 82, -48
 1838              		.cfi_offset 83, -44
 1839              		.cfi_offset 84, -40
 1840              		.cfi_offset 85, -36
 1841 0838 BC409FE5 		ldr	r4, .L116+20	@ ivtmp.84,
 1842              	.LBB15:
 1843              	.LBB13:
 1844              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1845              		.loc 1 40 32 view .LVU463
 1846 083c 2DAA9FED 		vldr.32	s20, .L116+16	@ tmp136,
 1847              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1848              		.loc 1 40 26 view .LVU464
 1849 0840 289B9FED 		vldr.64	d9, .L116	@ tmp151,
 1850              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1851              		.loc 1 40 49 view .LVU465
 1852 0844 298B9FED 		vldr.64	d8, .L116+8	@ tmp139,
 1853 0848 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.84,
 1854              	.LBE13:
 1855              	.LBE15:
 1856              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1857              		.loc 1 435 1 view .LVU466
 1858 084c 10D04DE2 		sub	sp, sp, #16	@,,
 1859              		.cfi_def_cfa_offset 72
 1860              	@ armwave.c:435: {
 435:armwave.c     ****     test_create_gamma();
 1861              		.loc 1 435 1 view .LVU467
 1862 0850 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1863 0854 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1864 0858 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1865 085c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1866 0860 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.84,
 1867 0864 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1868              	.LVL123:
 1869              	.L113:
 1870              	.LBB16:
 1871              	.LBB14:
  40:armwave.c     ****     }
 1872              		.loc 1 40 9 is_stmt 1 view .LVU468
 1873              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1874              		.loc 1 40 32 is_stmt 0 view .LVU469
 1875 0868 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.84
 1876              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1877              		.loc 1 40 26 view .LVU470
 1878 086c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1879              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1880              		.loc 1 40 32 view .LVU471
 1881 0870 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1882 0874 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1883 0878 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1884              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1885              		.loc 1 40 26 view .LVU472
 1886 087c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1887 0880 FEFFFFEB 		bl	pow		@
 1888              	.LVL124:
 1889              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1890              		.loc 1 40 49 view .LVU473
 1891 0884 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1892              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1893              		.loc 1 40 24 view .LVU474
 1894 0888 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1895 088c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1896 0890 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1897              	.LVL125:
 1898              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1899              		.loc 1 39 5 view .LVU475
 1900 0894 0A0054E1 		cmp	r4, r10	@ ivtmp.84, _39
 1901 0898 F2FFFF1A 		bne	.L113		@,
 1902              	.LVL126:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1903              		.loc 1 39 5 view .LVU476
 1904              	.LBE14:
 1905              	.LBE16:
 437:armwave.c     **** 
 438:armwave.c     ****     // make ch1 yellowish by default
 439:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1906              		.loc 1 439 5 is_stmt 1 view .LVU477
 1907              	.LBB17:
 1908              	.LBI17:
 392:armwave.c     **** {
 1909              		.loc 1 392 6 view .LVU478
 1910              	.LBB18:
 395:armwave.c     ****         case 1:
 1911              		.loc 1 395 5 view .LVU479
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1912              		.loc 1 397 13 view .LVU480
 398:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1913              		.loc 1 398 13 view .LVU481
 1914              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1915              		.loc 1 397 41 is_stmt 0 view .LVU482
 1916 089c 5CC09FE5 		ldr	ip, .L116+24	@ tmp142,
 1917 08a0 5C409FE5 		ldr	r4, .L116+28	@ tmp143,
 1918              	.LBE18:
 1919              	.LBE17:
 1920              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 440:armwave.c     **** 
 441:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1921              		.loc 1 441 5 view .LVU483
 1922 08a4 0000A0E3 		mov	r0, #0	@ tmp147,
 1923              	.LBB22:
 1924              	.LBB19:
 1925              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 399:armwave.c     ****             break;
 1926              		.loc 1 399 41 view .LVU484
 1927 08a8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1928              	.LBE19:
 1929              	.LBE22:
 1930              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1931              		.loc 1 441 5 view .LVU485
 1932 08ac 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1933 08b0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1934 08b4 00808DE5 		str	r8, [sp]	@ render_width,
 1935 08b8 0610A0E1 		mov	r1, r6	@, tmp3
 1936 08bc 0720A0E1 		mov	r2, r7	@, nwaves
 1937              	.LBB23:
 1938              	.LBB20:
 1939              	@ armwave.c:397:             g_armwave_state.ch1_color.r = r;
 397:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1940              		.loc 1 397 41 view .LVU486
 1941 08c0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 399:armwave.c     ****             break;
 1942              		.loc 1 399 13 is_stmt 1 view .LVU487
 1943              	.LBE20:
 1944              	.LBE23:
 1945              	@ armwave.c:441:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1946              		.loc 1 441 5 is_stmt 0 view .LVU488
 1947 08c4 0630A0E1 		mov	r3, r6	@, wave_size
 1948              	.LBB24:
 1949              	.LBB21:
 1950              	@ armwave.c:399:             g_armwave_state.ch1_color.b = b;
 399:armwave.c     ****             break;
 1951              		.loc 1 399 41 view .LVU489
 1952 08c8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 400:armwave.c     ****     }
 1953              		.loc 1 400 13 is_stmt 1 view .LVU490
 1954              	.LVL127:
 400:armwave.c     ****     }
 1955              		.loc 1 400 13 is_stmt 0 view .LVU491
 1956              	.LBE21:
 1957              	.LBE24:
 1958              		.loc 1 441 5 is_stmt 1 view .LVU492
 1959 08cc FEFFFFEB 		bl	armwave_setup_render		@
 1960              	.LVL128:
 442:armwave.c     **** 
 443:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1961              		.loc 1 443 5 view .LVU493
 1962 08d0 30109FE5 		ldr	r1, .L116+32	@,
 1963 08d4 30009FE5 		ldr	r0, .L116+36	@,
 1964              	@ armwave.c:444: }
 444:armwave.c     **** }
 1965              		.loc 1 444 1 is_stmt 0 view .LVU494
 1966 08d8 10D08DE2 		add	sp, sp, #16	@,,
 1967              		.cfi_def_cfa_offset 56
 1968              		@ sp needed	@
 1969 08dc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1970              		.cfi_restore 84
 1971              		.cfi_restore 85
 1972              		.cfi_restore 82
 1973              		.cfi_restore 83
 1974              		.cfi_restore 80
 1975              		.cfi_restore 81
 1976              		.cfi_def_cfa_offset 32
 1977 08e0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1978              		.cfi_restore 14
 1979              		.cfi_restore 10
 1980              		.cfi_restore 9
 1981              		.cfi_restore 8
 1982              		.cfi_restore 7
 1983              		.cfi_restore 6
 1984              		.cfi_restore 5
 1985              		.cfi_restore 4
 1986              		.cfi_def_cfa_offset 0
 1987              	.LVL129:
 1988              	@ armwave.c:443:     printf("armwave version: %s\n", ARMWAVE_VER);
 443:armwave.c     **** }
 1989              		.loc 1 443 5 view .LVU495
 1990 08e4 FEFFFFEA 		b	printf		@
 1991              	.LVL130:
 1992              	.L117:
 1993              		.align	3
 1994              	.L116:
 1995 08e8 000000C0 		.word	-1073741824
 1996 08ec CCCCEC3F 		.word	1072483532
 1997 08f0 00000000 		.word	0
 1998 08f4 00E06F40 		.word	1081073664
 1999 08f8 00007F43 		.word	1132396544
 2000 08fc FFFFFFFF 		.word	gamma_table-1
 2001 0900 00000000 		.word	g_armwave_state
 2002 0904 F609F406 		.word	116656630
 2003 0908 00000000 		.word	.LC0
 2004 090c 08000000 		.word	.LC1
 2005              		.cfi_endproc
 2006              	.LFE69:
 2008              		.align	2
 2009              		.global	armwave_test_fill_outbuf
 2010              		.syntax unified
 2011              		.arm
 2012              		.fpu vfp
 2014              	armwave_test_fill_outbuf:
 2015              	.LFB70:
 445:armwave.c     **** 
 446:armwave.c     **** /*
 447:armwave.c     ****  * Render image to the local allocated buffer.
 448:armwave.c     ****  */
 449:armwave.c     **** void armwave_test_fill_outbuf()
 450:armwave.c     **** {
 2016              		.loc 1 450 1 is_stmt 1 view -0
 2017              		.cfi_startproc
 2018              		@ args = 0, pretend = 0, frame = 8
 2019              		@ frame_needed = 0, uses_anonymous_args = 0
 451:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2020              		.loc 1 451 5 view .LVU497
 2021 0910 50C19FE5 		ldr	ip, .L139	@ tmp204,
 2022              	@ armwave.c:450: {
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2023              		.loc 1 450 1 is_stmt 0 view .LVU498
 2024 0914 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2025              		.cfi_def_cfa_offset 36
 2026              		.cfi_offset 4, -36
 2027              		.cfi_offset 5, -32
 2028              		.cfi_offset 6, -28
 2029              		.cfi_offset 7, -24
 2030              		.cfi_offset 8, -20
 2031              		.cfi_offset 9, -16
 2032              		.cfi_offset 10, -12
 2033              		.cfi_offset 11, -8
 2034              		.cfi_offset 14, -4
 2035 0918 0CD04DE2 		sub	sp, sp, #12	@,,
 2036              		.cfi_def_cfa_offset 48
 2037              	@ armwave.c:451:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2038              		.loc 1 451 5 view .LVU499
 2039 091c 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2040              	.LVL131:
 2041              	.LBB27:
 2042              	.LBI27:
 168:armwave.c     **** {
 2043              		.loc 1 168 6 is_stmt 1 view .LVU500
 2044              	.LBB28:
 170:armwave.c     ****     // uint32_t ysub;
 2045              		.loc 1 170 5 view .LVU501
 172:armwave.c     ****     uint8_t r, g, b, value; 
 2046              		.loc 1 172 5 view .LVU502
 173:armwave.c     ****     // uint8_t row;
 2047              		.loc 1 173 5 view .LVU503
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2048              		.loc 1 175 5 view .LVU504
 2049              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2050              		.loc 1 175 15 is_stmt 0 view .LVU505
 2051 0920 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2052              	.LVL132:
 176:armwave.c     ****     uint32_t offset;
 2053              		.loc 1 176 5 is_stmt 1 view .LVU506
 177:armwave.c     **** 
 2054              		.loc 1 177 5 view .LVU507
 179:armwave.c     **** 
 2055              		.loc 1 179 5 view .LVU508
 2056 0924 000058E3 		cmp	r8, #0	@ _1,
 2057 0928 4900000A 		beq	.L137		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2058              		.loc 1 181 5 view .LVU509
 2059              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2060              		.loc 1 181 10 is_stmt 0 view .LVU510
 2061 092c 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2062 0930 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2063              	.LVL133:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2064              		.loc 1 184 5 is_stmt 1 view .LVU511
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2065              		.loc 1 184 5 is_stmt 0 view .LVU512
 2066 0934 000057E3 		cmp	r7, #0	@ npix,
 2067 0938 0A0000DA 		ble	.L118		@,
 2068              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2069              		.loc 1 196 52 view .LVU513
 2070 093c FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2071              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2072              		.loc 1 197 52 view .LVU514
 2073 0940 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2074              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2075              		.loc 1 198 52 view .LVU515
 2076 0944 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2077              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2078              		.loc 1 220 57 view .LVU516
 2079 0948 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2080              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2081              		.loc 1 184 11 view .LVU517
 2082 094c 00E0A0E3 		mov	lr, #0	@ n,
 2083              	.LVL134:
 2084              	.L125:
 188:armwave.c     **** 
 2085              		.loc 1 188 9 is_stmt 1 view .LVU518
 2086              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2087              		.loc 1 188 19 is_stmt 0 view .LVU519
 2088 0950 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2089              	.LVL135:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2090              		.loc 1 190 9 is_stmt 1 view .LVU520
 2091              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2092              		.loc 1 190 11 is_stmt 0 view .LVU521
 2093 0954 000050E3 		cmp	r0, #0	@ wave_word,
 2094 0958 0400001A 		bne	.L134		@,
 2095 095c 04E08EE2 		add	lr, lr, #4	@ n, n,
 2096              	.L121:
 2097              	.LVL136:
 2098              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2099              		.loc 1 184 5 view .LVU522
 2100 0960 0E0057E1 		cmp	r7, lr	@ npix, n
 2101 0964 F9FFFFCA 		bgt	.L125		@,
 2102              	.LVL137:
 2103              	.L118:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2104              		.loc 1 184 5 view .LVU523
 2105              	.LBE28:
 2106              	.LBE27:
 2107              	@ armwave.c:452: }
 452:armwave.c     **** }
 2108              		.loc 1 452 1 view .LVU524
 2109 0968 0CD08DE2 		add	sp, sp, #12	@,,
 2110              		.cfi_remember_state
 2111              		.cfi_def_cfa_offset 36
 2112              		@ sp needed	@
 2113 096c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2114              	.LVL138:
 2115              	.L134:
 2116              		.cfi_restore_state
 2117              	.LBB30:
 2118              	.LBB29:
 2119              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2120              		.loc 1 195 19 view .LVU525
 2121 0970 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2122              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2123              		.loc 1 190 11 view .LVU526
 2124 0974 0E60A0E1 		mov	r6, lr	@ ivtmp.94, n
 2125              	.LVL139:
 192:armwave.c     ****                 wave_word >>= 8;
 2126              		.loc 1 192 17 is_stmt 1 view .LVU527
 193:armwave.c     **** 
 2127              		.loc 1 193 17 view .LVU528
 2128              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2129              		.loc 1 193 27 is_stmt 0 view .LVU529
 2130 0978 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2131              	.LVL140:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2132              		.loc 1 195 17 is_stmt 1 view .LVU530
 2133 097c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.94,
 2134              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2135              		.loc 1 195 19 is_stmt 0 view .LVU531
 2136 0980 0500001A 		bne	.L138		@,
 2137              	.LVL141:
 2138              	.L122:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2139              		.loc 1 195 19 view .LVU532
 2140 0984 016086E2 		add	r6, r6, #1	@ ivtmp.94, ivtmp.94,
 2141              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2142              		.loc 1 191 13 view .LVU533
 2143 0988 06005EE1 		cmp	lr, r6	@ n, ivtmp.94
 2144 098c F3FFFF0A 		beq	.L121		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2145              		.loc 1 192 17 is_stmt 1 view .LVU534
 2146              	.LVL142:
 193:armwave.c     **** 
 2147              		.loc 1 193 17 view .LVU535
 2148              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2149              		.loc 1 195 19 is_stmt 0 view .LVU536
 2150 0990 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2151              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2152              		.loc 1 193 27 view .LVU537
 2153 0994 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2154              	.LVL143:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2155              		.loc 1 195 17 is_stmt 1 view .LVU538
 2156              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2157              		.loc 1 195 19 is_stmt 0 view .LVU539
 2158 0998 F9FFFF0A 		beq	.L122		@,
 2159              	.L138:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2160              		.loc 1 196 21 is_stmt 1 view .LVU540
 2161              	.LVL144:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2162              		.loc 1 197 21 view .LVU541
 198:armwave.c     **** 
 2163              		.loc 1 198 21 view .LVU542
 200:armwave.c     ****                     g = MIN(gg, 255);
 2164              		.loc 1 200 21 view .LVU543
 201:armwave.c     ****                     b = MIN(bb, 255);
 2165              		.loc 1 201 21 view .LVU544
 202:armwave.c     **** 
 2166              		.loc 1 202 21 view .LVU545
 205:armwave.c     **** 
 2167              		.loc 1 205 21 view .LVU546
 2168              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2169              		.loc 1 220 32 is_stmt 0 view .LVU547
 2170 099c 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.94
 2171              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2172              		.loc 1 221 41 view .LVU548
 2173 09a0 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2174              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2175              		.loc 1 220 40 view .LVU549
 2176 09a4 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2177              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2178              		.loc 1 221 41 view .LVU550
 2179 09a8 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2180              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2181              		.loc 1 198 55 view .LVU551
 2182 09ac 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2183              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2184              		.loc 1 220 40 view .LVU552
 2185 09b0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2186              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2187              		.loc 1 221 46 view .LVU553
 2188 09b4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2189              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2190              		.loc 1 197 55 view .LVU554
 2191 09b8 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2192              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2193              		.loc 1 198 24 view .LVU555
 2194 09bc 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2195              	.LVL145:
 2196              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2197              		.loc 1 202 25 view .LVU556
 2198 09c0 FF0053E3 		cmp	r3, #255	@ bb,
 2199              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2200              		.loc 1 197 24 view .LVU557
 2201 09c4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2202              	.LVL146:
 2203              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2204              		.loc 1 202 25 view .LVU558
 2205 09c8 FF30A0A3 		movge	r3, #255	@ bb,
 2206              	.LVL147:
 2207              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2208              		.loc 1 220 40 view .LVU559
 2209 09cc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2210              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2211              		.loc 1 221 46 view .LVU560
 2212 09d0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2213              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2214              		.loc 1 201 25 view .LVU561
 2215 09d4 FF0052E3 		cmp	r2, #255	@ gg,
 2216 09d8 FF20A0A3 		movge	r2, #255	@ gg,
 2217              	.LVL148:
 2218              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2219              		.loc 1 196 55 view .LVU562
 2220 09dc 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2221              	.LVL149:
 2222              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2223              		.loc 1 205 56 view .LVU563
 2224 09e0 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2225              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2226              		.loc 1 205 44 view .LVU564
 2227 09e4 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2228              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2229              		.loc 1 220 24 view .LVU565
 2230 09e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2231              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2232              		.loc 1 196 24 view .LVU566
 2233 09ec 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2234              	.LVL150:
 2235              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2236              		.loc 1 205 56 view .LVU567
 2237 09f0 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2238              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2239              		.loc 1 205 44 view .LVU568
 2240 09f4 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2241              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2242              		.loc 1 200 25 view .LVU569
 2243 09f8 FF0051E3 		cmp	r1, #255	@ rr,
 2244              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2245              		.loc 1 205 51 view .LVU570
 2246 09fc 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2247              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2248              		.loc 1 200 25 view .LVU571
 2249 0a00 FF10A0A3 		movge	r1, #255	@ rr,
 2250              	.LVL151:
 2251              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2252              		.loc 1 220 24 view .LVU572
 2253 0a04 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2254              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2255              		.loc 1 221 24 view .LVU573
 2256 0a08 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2257              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2258              		.loc 1 205 62 view .LVU574
 2259 0a0c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2260 0a10 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2261              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2262              		.loc 1 205 26 view .LVU575
 2263 0a14 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2264              	.LVL152:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2265              		.loc 1 219 21 is_stmt 1 view .LVU576
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2266              		.loc 1 220 21 view .LVU577
 221:armwave.c     ****                     xx = (nsub >> 8);
 2267              		.loc 1 221 21 view .LVU578
 222:armwave.c     **** 
 2268              		.loc 1 222 21 view .LVU579
 2269              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2270              		.loc 1 222 32 is_stmt 0 view .LVU580
 2271 0a18 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.94,
 2272              	.LVL153:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2273              		.loc 1 224 21 is_stmt 1 view .LVU581
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2274              		.loc 1 224 21 is_stmt 0 view .LVU582
 2275 0a1c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2276              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2277              		.loc 1 221 24 view .LVU583
 2278 0a20 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2279              	.LVL154:
 2280              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2281              		.loc 1 224 21 view .LVU584
 2282 0a24 020054E1 		cmp	r4, r2	@ yy, ye
 2283 0a28 D5FFFF2A 		bcs	.L122		@,
 2284 0a2c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2285              	.LVL155:
 2286              	.L123:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2287              		.loc 1 225 25 is_stmt 1 view .LVU585
 226:armwave.c     ****                     }
 2288              		.loc 1 226 25 view .LVU586
 2289              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2290              		.loc 1 225 43 is_stmt 0 view .LVU587
 2291 0a30 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2292              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2293              		.loc 1 224 21 view .LVU588
 2294 0a34 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2295              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2296              		.loc 1 226 43 view .LVU589
 2297 0a38 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2298              	.LVL156:
 2299              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2300              		.loc 1 224 42 view .LVU590
 2301 0a3c 014084E2 		add	r4, r4, #1	@ yy, yy,
 2302              	.LVL157:
 2303              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2304              		.loc 1 224 21 view .LVU591
 2305 0a40 040050E1 		cmp	r0, r4	@ ye, yy
 2306              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2307              		.loc 1 226 53 view .LVU592
 2308 0a44 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2309              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2310              		.loc 1 224 21 view .LVU593
 2311 0a48 F8FFFF1A 		bne	.L123		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2312              		.loc 1 224 21 view .LVU594
 2313 0a4c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2314 0a50 CBFFFFEA 		b	.L122		@
 2315              	.LVL158:
 2316              	.L137:
 179:armwave.c     **** 
 2317              		.loc 1 179 5 is_stmt 1 view .LVU595
 2318 0a54 10309FE5 		ldr	r3, .L139+4	@,
 2319 0a58 B320A0E3 		mov	r2, #179	@,
 2320 0a5c 0C109FE5 		ldr	r1, .L139+8	@,
 2321 0a60 0C009FE5 		ldr	r0, .L139+12	@,
 2322 0a64 FEFFFFEB 		bl	__assert_fail		@
 2323              	.LVL159:
 2324              	.L140:
 2325              		.align	2
 2326              	.L139:
 2327 0a68 00000000 		.word	g_armwave_state
 2328 0a6c 00000000 		.word	.LANCHOR0
 2329 0a70 84000000 		.word	.LC4
 2330 0a74 90000000 		.word	.LC5
 2331              	.LBE29:
 2332              	.LBE30:
 2333              		.cfi_endproc
 2334              	.LFE70:
 2336              		.align	2
 2337              		.global	armwave_test_dump_buffer_to_ppm
 2338              		.syntax unified
 2339              		.arm
 2340              		.fpu vfp
 2342              	armwave_test_dump_buffer_to_ppm:
 2343              	.LVL160:
 2344              	.LFB71:
 453:armwave.c     **** 
 454:armwave.c     **** /*
 455:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 456:armwave.c     ****  */
 457:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 458:armwave.c     **** {
 2345              		.loc 1 458 1 view -0
 2346              		.cfi_startproc
 2347              		@ args = 0, pretend = 0, frame = 0
 2348              		@ frame_needed = 0, uses_anonymous_args = 0
 2349              		@ link register save eliminated.
 459:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2350              		.loc 1 459 5 view .LVU597
 2351 0a78 08309FE5 		ldr	r3, .L142	@ tmp112,
 2352 0a7c 0010A0E1 		mov	r1, r0	@, fn
 2353 0a80 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2354              	.LVL161:
 2355              		.loc 1 459 5 is_stmt 0 view .LVU598
 2356 0a84 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2357              	.LVL162:
 2358              	.L143:
 2359              		.loc 1 459 5 view .LVU599
 2360              		.align	2
 2361              	.L142:
 2362 0a88 00000000 		.word	g_armwave_state
 2363              		.cfi_endproc
 2364              	.LFE71:
 2366              		.align	2
 2367              		.global	armwave_test_fill_gdkbuf
 2368              		.syntax unified
 2369              		.arm
 2370              		.fpu vfp
 2372              	armwave_test_fill_gdkbuf:
 2373              	.LVL163:
 2374              	.LFB72:
 460:armwave.c     **** }
 461:armwave.c     **** 
 462:armwave.c     **** /*
 463:armwave.c     ****  * Render GDK buffer with test funtionry.
 464:armwave.c     ****  */
 465:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 466:armwave.c     **** {
 2375              		.loc 1 466 1 is_stmt 1 view -0
 2376              		.cfi_startproc
 2377              		@ args = 0, pretend = 0, frame = 8
 2378              		@ frame_needed = 0, uses_anonymous_args = 0
 467:armwave.c     ****     //PyObject *mv;
 468:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 469:armwave.c     **** 
 470:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 471:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2379              		.loc 1 471 5 view .LVU601
 2380              	@ armwave.c:471:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2381              		.loc 1 471 11 is_stmt 0 view .LVU602
 2382 0a8c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2383              	@ armwave.c:466: {
 466:armwave.c     ****     //PyObject *mv;
 2384              		.loc 1 466 1 view .LVU603
 2385 0a90 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2386              		.cfi_def_cfa_offset 36
 2387              		.cfi_offset 4, -36
 2388              		.cfi_offset 5, -32
 2389              		.cfi_offset 6, -28
 2390              		.cfi_offset 7, -24
 2391              		.cfi_offset 8, -20
 2392              		.cfi_offset 9, -16
 2393              		.cfi_offset 10, -12
 2394              		.cfi_offset 11, -8
 2395              		.cfi_offset 14, -4
 2396 0a94 0CD04DE2 		sub	sp, sp, #12	@,,
 2397              		.cfi_def_cfa_offset 48
 2398              	.LBB33:
 2399              	.LBB34:
 2400              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2401              		.loc 1 175 15 view .LVU604
 2402 0a98 48519FE5 		ldr	r5, .L165	@ tmp206,
 2403              	.LBE34:
 2404              	.LBE33:
 2405              	@ armwave.c:471:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2406              		.loc 1 471 11 view .LVU605
 2407 0a9c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2408              	.LVL164:
 472:armwave.c     ****     
 473:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 474:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2409              		.loc 1 474 5 is_stmt 1 view .LVU606
 2410              	.LBB37:
 2411              	.LBI33:
 168:armwave.c     **** {
 2412              		.loc 1 168 6 view .LVU607
 2413              	.LBB35:
 170:armwave.c     ****     // uint32_t ysub;
 2414              		.loc 1 170 5 view .LVU608
 172:armwave.c     ****     uint8_t r, g, b, value; 
 2415              		.loc 1 172 5 view .LVU609
 173:armwave.c     ****     // uint8_t row;
 2416              		.loc 1 173 5 view .LVU610
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2417              		.loc 1 175 5 view .LVU611
 2418              	@ armwave.c:179:     assert(out_buffer != NULL);
 179:armwave.c     **** 
 2419              		.loc 1 179 5 is_stmt 0 view .LVU612
 2420 0aa0 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2421              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2422              		.loc 1 175 15 view .LVU613
 2423 0aa4 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2424              	.LVL165:
 176:armwave.c     ****     uint32_t offset;
 2425              		.loc 1 176 5 is_stmt 1 view .LVU614
 177:armwave.c     **** 
 2426              		.loc 1 177 5 view .LVU615
 179:armwave.c     **** 
 2427              		.loc 1 179 5 view .LVU616
 2428 0aa8 4900000A 		beq	.L163		@,
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2429              		.loc 1 181 5 view .LVU617
 2430              	@ armwave.c:181:     npix = g_armwave_state.target_width * 256; 
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2431              		.loc 1 181 10 is_stmt 0 view .LVU618
 2432 0aac 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2433 0ab0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2434              	.LVL166:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2435              		.loc 1 184 5 is_stmt 1 view .LVU619
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2436              		.loc 1 184 5 is_stmt 0 view .LVU620
 2437 0ab4 000057E3 		cmp	r7, #0	@ npix,
 2438 0ab8 0A0000DA 		ble	.L144		@,
 2439              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2440              		.loc 1 196 52 view .LVU621
 2441 0abc FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2442              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2443              		.loc 1 197 52 view .LVU622
 2444 0ac0 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2445              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2446              		.loc 1 198 52 view .LVU623
 2447 0ac4 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2448              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2449              		.loc 1 220 57 view .LVU624
 2450 0ac8 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2451              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2452              		.loc 1 184 11 view .LVU625
 2453 0acc 00C0A0E3 		mov	ip, #0	@ n,
 2454              	.LVL167:
 2455              	.L151:
 188:armwave.c     **** 
 2456              		.loc 1 188 9 is_stmt 1 view .LVU626
 2457              	@ armwave.c:188:         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 2458              		.loc 1 188 19 is_stmt 0 view .LVU627
 2459 0ad0 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2460              	.LVL168:
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2461              		.loc 1 190 9 is_stmt 1 view .LVU628
 2462              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2463              		.loc 1 190 11 is_stmt 0 view .LVU629
 2464 0ad4 000050E3 		cmp	r0, #0	@ wave_word,
 2465 0ad8 0400001A 		bne	.L160		@,
 2466 0adc 04C08CE2 		add	ip, ip, #4	@ n, n,
 2467              	.L147:
 2468              	.LVL169:
 2469              	@ armwave.c:184:     for(n = 0; n < npix; n += 4) {
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2470              		.loc 1 184 5 view .LVU630
 2471 0ae0 0C0057E1 		cmp	r7, ip	@ npix, n
 2472 0ae4 F9FFFFCA 		bgt	.L151		@,
 2473              	.LVL170:
 2474              	.L144:
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2475              		.loc 1 184 5 view .LVU631
 2476              	.LBE35:
 2477              	.LBE37:
 2478              	@ armwave.c:475: }
 475:armwave.c     **** }
 2479              		.loc 1 475 1 view .LVU632
 2480 0ae8 0CD08DE2 		add	sp, sp, #12	@,,
 2481              		.cfi_remember_state
 2482              		.cfi_def_cfa_offset 36
 2483              		@ sp needed	@
 2484 0aec F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2485              	.LVL171:
 2486              	.L160:
 2487              		.cfi_restore_state
 2488              	.LBB38:
 2489              	.LBB36:
 2490              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2491              		.loc 1 195 19 view .LVU633
 2492 0af0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2493              	@ armwave.c:190:         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 2494              		.loc 1 190 11 view .LVU634
 2495 0af4 0C60A0E1 		mov	r6, ip	@ ivtmp.110, n
 2496              	.LVL172:
 192:armwave.c     ****                 wave_word >>= 8;
 2497              		.loc 1 192 17 is_stmt 1 view .LVU635
 193:armwave.c     **** 
 2498              		.loc 1 193 17 view .LVU636
 2499              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2500              		.loc 1 193 27 is_stmt 0 view .LVU637
 2501 0af8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2502              	.LVL173:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2503              		.loc 1 195 17 is_stmt 1 view .LVU638
 2504 0afc 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.110,
 2505              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2506              		.loc 1 195 19 is_stmt 0 view .LVU639
 2507 0b00 0500001A 		bne	.L164		@,
 2508              	.LVL174:
 2509              	.L148:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2510              		.loc 1 195 19 view .LVU640
 2511 0b04 016086E2 		add	r6, r6, #1	@ ivtmp.110, ivtmp.110,
 2512              	@ armwave.c:191:             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 2513              		.loc 1 191 13 view .LVU641
 2514 0b08 06005CE1 		cmp	ip, r6	@ n, ivtmp.110
 2515 0b0c F3FFFF0A 		beq	.L147		@,
 192:armwave.c     ****                 wave_word >>= 8;
 2516              		.loc 1 192 17 is_stmt 1 view .LVU642
 2517              	.LVL175:
 193:armwave.c     **** 
 2518              		.loc 1 193 17 view .LVU643
 2519              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2520              		.loc 1 195 19 is_stmt 0 view .LVU644
 2521 0b10 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2522              	@ armwave.c:193:                 wave_word >>= 8;
 193:armwave.c     **** 
 2523              		.loc 1 193 27 view .LVU645
 2524 0b14 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2525              	.LVL176:
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2526              		.loc 1 195 17 is_stmt 1 view .LVU646
 2527              	@ armwave.c:195:                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2528              		.loc 1 195 19 is_stmt 0 view .LVU647
 2529 0b18 F9FFFF0A 		beq	.L148		@,
 2530              	.L164:
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2531              		.loc 1 196 21 is_stmt 1 view .LVU648
 2532              	.LVL177:
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2533              		.loc 1 197 21 view .LVU649
 198:armwave.c     **** 
 2534              		.loc 1 198 21 view .LVU650
 200:armwave.c     ****                     g = MIN(gg, 255);
 2535              		.loc 1 200 21 view .LVU651
 201:armwave.c     ****                     b = MIN(bb, 255);
 2536              		.loc 1 201 21 view .LVU652
 202:armwave.c     **** 
 2537              		.loc 1 202 21 view .LVU653
 205:armwave.c     **** 
 2538              		.loc 1 205 21 view .LVU654
 2539              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2540              		.loc 1 220 32 is_stmt 0 view .LVU655
 2541 0b1c 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.110
 2542              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2543              		.loc 1 221 41 view .LVU656
 2544 0b20 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2545              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2546              		.loc 1 220 40 view .LVU657
 2547 0b24 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2548              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2549              		.loc 1 221 41 view .LVU658
 2550 0b28 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2551              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2552              		.loc 1 198 55 view .LVU659
 2553 0b2c 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2554              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2555              		.loc 1 220 40 view .LVU660
 2556 0b30 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2557              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2558              		.loc 1 221 46 view .LVU661
 2559 0b34 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2560              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2561              		.loc 1 197 55 view .LVU662
 2562 0b38 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2563              	@ armwave.c:198:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 2564              		.loc 1 198 24 view .LVU663
 2565 0b3c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2566              	.LVL178:
 2567              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2568              		.loc 1 202 25 view .LVU664
 2569 0b40 FF0053E3 		cmp	r3, #255	@ bb,
 2570              	@ armwave.c:197:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2571              		.loc 1 197 24 view .LVU665
 2572 0b44 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2573              	.LVL179:
 2574              	@ armwave.c:202:                     b = MIN(bb, 255);
 202:armwave.c     **** 
 2575              		.loc 1 202 25 view .LVU666
 2576 0b48 FF30A0A3 		movge	r3, #255	@ bb,
 2577              	.LVL180:
 2578              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2579              		.loc 1 220 40 view .LVU667
 2580 0b4c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2581              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2582              		.loc 1 221 46 view .LVU668
 2583 0b50 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2584              	@ armwave.c:201:                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 2585              		.loc 1 201 25 view .LVU669
 2586 0b54 FF0052E3 		cmp	r2, #255	@ gg,
 2587 0b58 FF20A0A3 		movge	r2, #255	@ gg,
 2588              	.LVL181:
 2589              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2590              		.loc 1 196 55 view .LVU670
 2591 0b5c 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2592              	.LVL182:
 2593              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2594              		.loc 1 205 56 view .LVU671
 2595 0b60 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2596              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2597              		.loc 1 205 44 view .LVU672
 2598 0b64 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2599              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2600              		.loc 1 220 24 view .LVU673
 2601 0b68 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2602              	@ armwave.c:196:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2603              		.loc 1 196 24 view .LVU674
 2604 0b6c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2605              	.LVL183:
 2606              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2607              		.loc 1 205 56 view .LVU675
 2608 0b70 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2609              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2610              		.loc 1 205 44 view .LVU676
 2611 0b74 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2612              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2613              		.loc 1 200 25 view .LVU677
 2614 0b78 FF0051E3 		cmp	r1, #255	@ rr,
 2615              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2616              		.loc 1 205 51 view .LVU678
 2617 0b7c 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2618              	@ armwave.c:200:                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 2619              		.loc 1 200 25 view .LVU679
 2620 0b80 FF10A0A3 		movge	r1, #255	@ rr,
 2621              	.LVL184:
 2622              	@ armwave.c:220:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2623              		.loc 1 220 24 view .LVU680
 2624 0b84 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2625              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2626              		.loc 1 221 24 view .LVU681
 2627 0b88 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2628              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2629              		.loc 1 205 62 view .LVU682
 2630 0b8c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2631 0b90 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2632              	@ armwave.c:205:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 2633              		.loc 1 205 26 view .LVU683
 2634 0b94 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2635              	.LVL185:
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2636              		.loc 1 219 21 is_stmt 1 view .LVU684
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2637              		.loc 1 220 21 view .LVU685
 221:armwave.c     ****                     xx = (nsub >> 8);
 2638              		.loc 1 221 21 view .LVU686
 222:armwave.c     **** 
 2639              		.loc 1 222 21 view .LVU687
 2640              	@ armwave.c:222:                     xx = (nsub >> 8);
 222:armwave.c     **** 
 2641              		.loc 1 222 32 is_stmt 0 view .LVU688
 2642 0b98 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.110,
 2643              	.LVL186:
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2644              		.loc 1 224 21 is_stmt 1 view .LVU689
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2645              		.loc 1 224 21 is_stmt 0 view .LVU690
 2646 0b9c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2647              	@ armwave.c:221:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 2648              		.loc 1 221 24 view .LVU691
 2649 0ba0 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2650              	.LVL187:
 2651              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2652              		.loc 1 224 21 view .LVU692
 2653 0ba4 02005EE1 		cmp	lr, r2	@ yy, ye
 2654 0ba8 D5FFFF2A 		bcs	.L148		@,
 2655 0bac 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2656              	.LVL188:
 2657              	.L149:
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2658              		.loc 1 225 25 is_stmt 1 view .LVU693
 226:armwave.c     ****                     }
 2659              		.loc 1 226 25 view .LVU694
 2660              	@ armwave.c:225:                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2661              		.loc 1 225 43 is_stmt 0 view .LVU695
 2662 0bb0 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2663              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2664              		.loc 1 224 21 view .LVU696
 2665 0bb4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2666              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2667              		.loc 1 226 43 view .LVU697
 2668 0bb8 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2669              	.LVL189:
 2670              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2671              		.loc 1 224 42 view .LVU698
 2672 0bbc 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2673              	.LVL190:
 2674              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2675              		.loc 1 224 21 view .LVU699
 2676 0bc0 0E0050E1 		cmp	r0, lr	@ ye, yy
 2677              	@ armwave.c:226:                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 2678              		.loc 1 226 53 view .LVU700
 2679 0bc4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2680              	@ armwave.c:224:                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2681              		.loc 1 224 21 view .LVU701
 2682 0bc8 F8FFFF1A 		bne	.L149		@,
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2683              		.loc 1 224 21 view .LVU702
 2684 0bcc 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2685 0bd0 CBFFFFEA 		b	.L148		@
 2686              	.LVL191:
 2687              	.L163:
 179:armwave.c     **** 
 2688              		.loc 1 179 5 is_stmt 1 view .LVU703
 2689 0bd4 10309FE5 		ldr	r3, .L165+4	@,
 2690 0bd8 B320A0E3 		mov	r2, #179	@,
 2691 0bdc 0C109FE5 		ldr	r1, .L165+8	@,
 2692 0be0 0C009FE5 		ldr	r0, .L165+12	@,
 2693              	.LVL192:
 179:armwave.c     **** 
 2694              		.loc 1 179 5 is_stmt 0 view .LVU704
 2695 0be4 FEFFFFEB 		bl	__assert_fail		@
 2696              	.LVL193:
 2697              	.L166:
 2698              		.align	2
 2699              	.L165:
 2700 0be8 00000000 		.word	g_armwave_state
 2701 0bec 00000000 		.word	.LANCHOR0
 2702 0bf0 84000000 		.word	.LC4
 2703 0bf4 90000000 		.word	.LC5
 2704              	.LBE36:
 2705              	.LBE38:
 2706              		.cfi_endproc
 2707              	.LFE72:
 2709              		.align	2
 2710              		.global	armwave_test_buffer_alloc
 2711              		.syntax unified
 2712              		.arm
 2713              		.fpu vfp
 2715              	armwave_test_buffer_alloc:
 2716              	.LVL194:
 2717              	.LFB73:
 476:armwave.c     **** 
 477:armwave.c     **** /*
 478:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 479:armwave.c     ****  */
 480:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 481:armwave.c     **** {
 2718              		.loc 1 481 1 is_stmt 1 view -0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 0
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 482:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2722              		.loc 1 482 5 view .LVU706
 2723              	@ armwave.c:481: {
 481:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2724              		.loc 1 481 1 is_stmt 0 view .LVU707
 2725 0bf8 70402DE9 		push	{r4, r5, r6, lr}	@
 2726              		.cfi_def_cfa_offset 16
 2727              		.cfi_offset 4, -16
 2728              		.cfi_offset 5, -12
 2729              		.cfi_offset 6, -8
 2730              		.cfi_offset 14, -4
 2731              	@ armwave.c:481: {
 481:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2732              		.loc 1 481 1 view .LVU708
 2733 0bfc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2734              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 2735              		.loc 1 482 23 view .LVU709
 2736 0c00 44409FE5 		ldr	r4, .L174	@ tmp128,
 2737 0c04 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2738              	.LVL195:
 2739              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 2740              		.loc 1 482 7 view .LVU710
 2741 0c08 000050E3 		cmp	r0, #0	@ _1,
 2742 0c0c 0000000A 		beq	.L168		@,
 483:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2743              		.loc 1 483 9 is_stmt 1 view .LVU711
 2744 0c10 FEFFFFEB 		bl	free		@
 2745              	.LVL196:
 2746              	.L168:
 484:armwave.c     ****     }
 485:armwave.c     **** 
 486:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 487:armwave.c     **** 
 488:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2747              		.loc 1 488 5 view .LVU712
 2748              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2749              		.loc 1 488 75 is_stmt 0 view .LVU713
 2750 0c14 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2751 0c18 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2752              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2753              		.loc 1 488 40 view .LVU714
 2754 0c1c 0610A0E1 		mov	r1, r6	@, nsets
 2755              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2756              		.loc 1 488 75 view .LVU715
 2757 0c20 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2758              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2759              		.loc 1 488 40 view .LVU716
 2760 0c24 0500A0E1 		mov	r0, r5	@, _4
 2761 0c28 FEFFFFEB 		bl	calloc		@
 2762              	.LVL197:
 2763              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 489:armwave.c     **** 
 490:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2764              		.loc 1 490 7 view .LVU717
 2765 0c2c 000050E3 		cmp	r0, #0	@ tmp124,
 2766              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 2767              		.loc 1 488 38 view .LVU718
 2768 0c30 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2769              		.loc 1 490 5 is_stmt 1 view .LVU719
 2770              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 2771              		.loc 1 490 7 is_stmt 0 view .LVU720
 2772 0c34 7080BD18 		popne	{r4, r5, r6, pc}	@
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2773              		.loc 1 491 9 is_stmt 1 view .LVU721
 2774 0c38 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2775 0c3c 0620A0E1 		mov	r2, r6	@, nsets
 2776 0c40 08009FE5 		ldr	r0, .L174+4	@,
 2777              	@ armwave.c:495: }
 492:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 493:armwave.c     ****         return;
 494:armwave.c     ****     }
 495:armwave.c     **** }
 2778              		.loc 1 495 1 is_stmt 0 view .LVU722
 2779 0c44 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2780              		.cfi_restore 14
 2781              		.cfi_restore 6
 2782              		.cfi_restore 5
 2783              		.cfi_restore 4
 2784              		.cfi_def_cfa_offset 0
 2785              	.LVL198:
 2786              	@ armwave.c:491:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2787              		.loc 1 491 9 view .LVU723
 2788 0c48 FEFFFFEA 		b	printf		@
 2789              	.LVL199:
 2790              	.L175:
 491:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2791              		.loc 1 491 9 view .LVU724
 2792              		.align	2
 2793              	.L174:
 2794 0c4c 00000000 		.word	g_armwave_state
 2795 0c50 20020000 		.word	.LC20
 2796              		.cfi_endproc
 2797              	.LFE73:
 2799              		.align	2
 2800              		.global	armwave_fill_pixbuf_into_pybuffer
 2801              		.syntax unified
 2802              		.arm
 2803              		.fpu vfp
 2805              	armwave_fill_pixbuf_into_pybuffer:
 2806              	.LVL200:
 2807              	.LFB74:
 496:armwave.c     **** 
 497:armwave.c     **** /*
 498:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 499:armwave.c     ****  */
 500:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 501:armwave.c     **** {
 2808              		.loc 1 501 1 is_stmt 1 view -0
 2809              		.cfi_startproc
 2810              		@ args = 0, pretend = 0, frame = 48
 2811              		@ frame_needed = 0, uses_anonymous_args = 0
 502:armwave.c     ****     Py_buffer buffer;
 2812              		.loc 1 502 5 view .LVU726
 503:armwave.c     ****     int ret;
 2813              		.loc 1 503 5 view .LVU727
 504:armwave.c     **** 
 505:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 506:armwave.c     **** 
 507:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2814              		.loc 1 507 5 view .LVU728
 2815              	@ armwave.c:501: {
 501:armwave.c     ****     Py_buffer buffer;
 2816              		.loc 1 501 1 is_stmt 0 view .LVU729
 2817 0c54 04E02DE5 		str	lr, [sp, #-4]!	@,
 2818              		.cfi_def_cfa_offset 4
 2819              		.cfi_offset 14, -4
 2820 0c58 34D04DE2 		sub	sp, sp, #52	@,,
 2821              		.cfi_def_cfa_offset 56
 2822              	@ armwave.c:507:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2823              		.loc 1 507 11 view .LVU730
 2824 0c5c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2825 0c60 0120A0E3 		mov	r2, #1	@,
 2826 0c64 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2827              	.LVL201:
 508:armwave.c     **** 
 509:armwave.c     ****     if(ret != 0) {
 2828              		.loc 1 509 5 is_stmt 1 view .LVU731
 2829              	@ armwave.c:509:     if(ret != 0) {
 2830              		.loc 1 509 7 is_stmt 0 view .LVU732
 2831 0c68 000050E3 		cmp	r0, #0	@,
 2832 0c6c 0A00001A 		bne	.L180		@,
 510:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 511:armwave.c     ****         Py_RETURN_FALSE;
 512:armwave.c     ****     }
 513:armwave.c     **** 
 514:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 515:armwave.c     **** 
 516:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2833              		.loc 1 516 5 is_stmt 1 view .LVU733
 2834 0c70 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2835              	.LVL202:
 2836              		.loc 1 516 5 is_stmt 0 view .LVU734
 2837 0c74 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2838              	.LVL203:
 517:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 518:armwave.c     **** 
 519:armwave.c     ****     PyBuffer_Release(&buffer);
 2839              		.loc 1 519 5 is_stmt 1 view .LVU735
 2840 0c78 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2841 0c7c FEFFFFEB 		bl	PyBuffer_Release		@
 2842              	.LVL204:
 520:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 521:armwave.c     **** 
 522:armwave.c     ****     Py_RETURN_TRUE;
 2843              		.loc 1 522 5 view .LVU736
 2844              	.LBB39:
 2845              	.LBI39:
 2846              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2847              		.loc 2 456 20 view .LVU737
 2848              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2849              		.loc 2 458 21 view .LVU738
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2850              		.loc 2 459 5 view .LVU739
 2851              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2852              		.loc 2 459 18 is_stmt 0 view .LVU740
 2853 0c80 38309FE5 		ldr	r3, .L181	@ tmp126,
 2854              	.LBE40:
 2855              	.LBE39:
 2856              	@ armwave.c:522:     Py_RETURN_TRUE;
 2857              		.loc 1 522 5 view .LVU741
 2858 0c84 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2859              	.LBB42:
 2860              	.LBB41:
 2861              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2862              		.loc 2 459 18 view .LVU742
 2863 0c88 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2864 0c8c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2865 0c90 002083E5 		str	r2, [r3]	@ tmp128,
 2866              	.LBE41:
 2867              	.LBE42:
 2868              	@ armwave.c:523: }
 523:armwave.c     **** }
 2869              		.loc 1 523 1 view .LVU743
 2870 0c94 34D08DE2 		add	sp, sp, #52	@,,
 2871              		.cfi_remember_state
 2872              		.cfi_def_cfa_offset 4
 2873              		@ sp needed	@
 2874 0c98 04F09DE4 		ldr	pc, [sp], #4	@
 2875              	.LVL205:
 2876              	.L180:
 2877              		.cfi_restore_state
 510:armwave.c     ****         Py_RETURN_FALSE;
 2878              		.loc 1 510 9 is_stmt 1 view .LVU744
 2879 0c9c 20009FE5 		ldr	r0, .L181+4	@,
 2880              	.LVL206:
 510:armwave.c     ****         Py_RETURN_FALSE;
 2881              		.loc 1 510 9 is_stmt 0 view .LVU745
 2882 0ca0 FEFFFFEB 		bl	puts		@
 2883              	.LVL207:
 511:armwave.c     ****     }
 2884              		.loc 1 511 9 is_stmt 1 view .LVU746
 2885              	.LBB43:
 2886              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 2887              		.loc 2 456 20 view .LVU747
 2888              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2889              		.loc 2 458 21 view .LVU748
 2890              		.loc 2 459 5 view .LVU749
 2891              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2892              		.loc 2 459 18 is_stmt 0 view .LVU750
 2893 0ca4 1C309FE5 		ldr	r3, .L181+8	@ tmp120,
 2894              	.LBE44:
 2895              	.LBE43:
 2896              	@ armwave.c:511:         Py_RETURN_FALSE;
 511:armwave.c     ****     }
 2897              		.loc 1 511 9 view .LVU751
 2898 0ca8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2899              	.LBB46:
 2900              	.LBB45:
 2901              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2902              		.loc 2 459 18 view .LVU752
 2903 0cac 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2904 0cb0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2905 0cb4 002083E5 		str	r2, [r3]	@ tmp122,
 2906              	.LBE45:
 2907              	.LBE46:
 2908              	@ armwave.c:523: }
 2909              		.loc 1 523 1 view .LVU753
 2910 0cb8 34D08DE2 		add	sp, sp, #52	@,,
 2911              		.cfi_def_cfa_offset 4
 2912              		@ sp needed	@
 2913 0cbc 04F09DE4 		ldr	pc, [sp], #4	@
 2914              	.L182:
 2915              		.align	2
 2916              	.L181:
 2917 0cc0 00000000 		.word	_Py_TrueStruct
 2918 0cc4 74020000 		.word	.LC21
 2919 0cc8 00000000 		.word	_Py_FalseStruct
 2920              		.cfi_endproc
 2921              	.LFE74:
 2923              		.align	2
 2924              		.global	armwave_test_create_am_sine
 2925              		.syntax unified
 2926              		.arm
 2927              		.fpu vfp
 2929              	armwave_test_create_am_sine:
 2930              	.LVL208:
 2931              	.LFB75:
 524:armwave.c     **** 
 525:armwave.c     **** /*
 526:armwave.c     ****  * Make a test AM waveform for render tests.
 527:armwave.c     ****  *
 528:armwave.c     ****  * @param   mod                     modulation depth
 529:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 530:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 531:armwave.c     ****  */
 532:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 533:armwave.c     **** {
 2932              		.loc 1 533 1 is_stmt 1 view -0
 2933              		.cfi_startproc
 2934              		@ args = 0, pretend = 0, frame = 8
 2935              		@ frame_needed = 0, uses_anonymous_args = 0
 534:armwave.c     ****     float v, noise, xnoise, mod_val;
 2936              		.loc 1 534 5 view .LVU755
 535:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2937              		.loc 1 535 5 view .LVU756
 2938              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2939              		.loc 1 533 1 is_stmt 0 view .LVU757
 2940 0ccc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2941              		.cfi_def_cfa_offset 32
 2942              		.cfi_offset 4, -32
 2943              		.cfi_offset 5, -28
 2944              		.cfi_offset 6, -24
 2945              		.cfi_offset 7, -20
 2946              		.cfi_offset 8, -16
 2947              		.cfi_offset 9, -12
 2948              		.cfi_offset 10, -8
 2949              		.cfi_offset 14, -4
 2950              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2951              		.loc 1 535 38 view .LVU758
 2952 0cd0 7A7A9FED 		vldr.32	s14, .L214	@ tmp180,
 2953              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2954              		.loc 1 535 55 view .LVU759
 2955 0cd4 00529FE5 		ldr	r5, .L214+28	@ tmp250,
 2956              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2957              		.loc 1 533 1 view .LVU760
 2958 0cd8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2959              		.cfi_def_cfa_offset 80
 2960              		.cfi_offset 80, -80
 2961              		.cfi_offset 81, -76
 2962              		.cfi_offset 82, -72
 2963              		.cfi_offset 83, -68
 2964              		.cfi_offset 84, -64
 2965              		.cfi_offset 85, -60
 2966              		.cfi_offset 86, -56
 2967              		.cfi_offset 87, -52
 2968              		.cfi_offset 88, -48
 2969              		.cfi_offset 89, -44
 2970              		.cfi_offset 90, -40
 2971              		.cfi_offset 91, -36
 2972 0cdc 0090A0E1 		mov	r9, r0	@ sets, sets
 2973              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2974              		.loc 1 535 38 view .LVU761
 2975 0ce0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2976              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 536:armwave.c     ****     int s, set_offset = 0;
 537:armwave.c     ****     int w, x;
 538:armwave.c     **** 
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2977              		.loc 1 539 70 view .LVU762
 2978 0ce4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2979 0ce8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2980              	.LBB49:
 2981              	.LBB50:
 2982              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2983              		.loc 1 482 23 view .LVU763
 2984 0cec 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2985              	.LVL209:
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2986              		.loc 1 482 23 view .LVU764
 2987              	.LBE50:
 2988              	.LBE49:
 2989              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 2990              		.loc 1 535 38 view .LVU765
 2991 0cf0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2992              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2993              		.loc 1 539 70 view .LVU766
 2994 0cf4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2995              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 2996              		.loc 1 533 1 view .LVU767
 2997 0cf8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2998              	.LBB54:
 2999              	.LBB51:
 3000              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3001              		.loc 1 482 7 view .LVU768
 3002 0cfc 000050E3 		cmp	r0, #0	@ _82,
 3003              	.LBE51:
 3004              	.LBE54:
 3005              	@ armwave.c:533: {
 533:armwave.c     ****     float v, noise, xnoise, mod_val;
 3006              		.loc 1 533 1 view .LVU769
 3007 0d00 08D04DE2 		sub	sp, sp, #8	@,,
 3008              		.cfi_def_cfa_offset 88
 3009              	@ armwave.c:540:     g_armwave_state.test_wave_buffer_nsets = sets;
 540:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3010              		.loc 1 540 44 view .LVU770
 3011 0d04 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3012              	@ armwave.c:539:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3013              		.loc 1 539 45 view .LVU771
 3014 0d08 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3015              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 3016              		.loc 1 535 38 view .LVU772
 3017 0d0c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3018              	@ armwave.c:535:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 535:armwave.c     ****     int s, set_offset = 0;
 3019              		.loc 1 535 11 view .LVU773
 3020 0d10 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3021              	.LVL210:
 536:armwave.c     ****     int w, x;
 3022              		.loc 1 536 5 is_stmt 1 view .LVU774
 537:armwave.c     **** 
 3023              		.loc 1 537 5 view .LVU775
 539:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3024              		.loc 1 539 5 view .LVU776
 3025              		.loc 1 540 5 view .LVU777
 541:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3026              		.loc 1 541 5 view .LVU778
 3027              	.LBB55:
 3028              	.LBI49:
 480:armwave.c     **** {
 3029              		.loc 1 480 6 view .LVU779
 3030              	.LBB52:
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3031              		.loc 1 482 5 view .LVU780
 3032              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer != NULL) {
 482:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3033              		.loc 1 482 7 is_stmt 0 view .LVU781
 3034 0d14 0000000A 		beq	.L184		@,
 483:armwave.c     ****     }
 3035              		.loc 1 483 9 is_stmt 1 view .LVU782
 3036 0d18 FEFFFFEB 		bl	free		@
 3037              	.LVL211:
 3038              	.L184:
 488:armwave.c     **** 
 3039              		.loc 1 488 5 view .LVU783
 3040              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3041              		.loc 1 488 75 is_stmt 0 view .LVU784
 3042 0d1c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3043 0d20 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3044              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3045              		.loc 1 488 40 view .LVU785
 3046 0d24 0910A0E1 		mov	r1, r9	@, sets
 3047              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3048              		.loc 1 488 75 view .LVU786
 3049 0d28 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3050              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3051              		.loc 1 488 40 view .LVU787
 3052 0d2c 0400A0E1 		mov	r0, r4	@, _85
 3053 0d30 FEFFFFEB 		bl	calloc		@
 3054              	.LVL212:
 3055              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3056              		.loc 1 490 7 view .LVU788
 3057 0d34 000050E3 		cmp	r0, #0	@ tmp191,
 3058              	@ armwave.c:488:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 488:armwave.c     **** 
 3059              		.loc 1 488 38 view .LVU789
 3060 0d38 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3061              		.loc 1 490 5 is_stmt 1 view .LVU790
 3062              	@ armwave.c:490:     if(g_armwave_state.test_wave_buffer == NULL) {
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3063              		.loc 1 490 7 is_stmt 0 view .LVU791
 3064 0d3c 5A00000A 		beq	.L213		@,
 3065              	.L185:
 3066              	.LVL213:
 490:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3067              		.loc 1 490 7 view .LVU792
 3068              	.LBE52:
 3069              	.LBE55:
 3070              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 542:armwave.c     **** 
 543:armwave.c     ****     for(s = 0; s < sets; s++) {
 3071              		.loc 1 543 5 discriminator 1 view .LVU793
 3072 0d40 000059E3 		cmp	r9, #0	@ sets,
 3073 0d44 550000DA 		ble	.L183		@,
 3074              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 545:armwave.c     ****     
 546:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 547:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 548:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 549:armwave.c     **** 
 550:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 551:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     ****                 noise *= noise;
 554:armwave.c     ****                 noise *= noise;
 555:armwave.c     **** 
 556:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 557:armwave.c     ****                     noise = -noise;
 558:armwave.c     **** 
 559:armwave.c     ****                 noise += 1.0f;
 560:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 561:armwave.c     **** 
 562:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3075              		.loc 1 562 45 view .LVU794
 3076 0d48 5C8A9FED 		vldr.32	s16, .L214	@ tmp258,
 3077              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 563:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 564:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 565:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3078              		.loc 1 565 104 view .LVU795
 3079 0d4c 5CCA9FED 		vldr.32	s24, .L214+4	@ tmp259,
 3080              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3081              		.loc 1 543 5 view .LVU796
 3082 0d50 0070A0E3 		mov	r7, #0	@ set_offset,
 3083              	@ armwave.c:544:         printf("Calculating test set %d\n", s);
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 3084              		.loc 1 544 9 view .LVU797
 3085 0d54 84A19FE5 		ldr	r10, .L214+32	@ tmp257,
 3086              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3087              		.loc 1 543 5 view .LVU798
 3088 0d58 0780A0E1 		mov	r8, r7	@ s, set_offset
 3089              	.LVL214:
 3090              	.L186:
 544:armwave.c     ****         printf("Calculating test set %d\n", s);
 3091              		.loc 1 544 9 is_stmt 1 view .LVU799
 3092 0d5c 0810A0E1 		mov	r1, r8	@, s
 3093 0d60 0A00A0E1 		mov	r0, r10	@, tmp257
 3094 0d64 FEFFFFEB 		bl	printf		@
 3095              	.LVL215:
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3096              		.loc 1 546 9 view .LVU800
 3097              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3098              		.loc 1 546 39 is_stmt 0 view .LVU801
 3099 0d68 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3100              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3101              		.loc 1 546 9 view .LVU802
 3102 0d6c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3103 0d70 450000DA 		ble	.L187		@,
 3104              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3105              		.loc 1 548 21 view .LVU803
 3106 0d74 53CADFED 		vldr.32	s25, .L214+8	@ tmp200,
 3107              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3108              		.loc 1 562 33 view .LVU804
 3109 0d78 53BA9FED 		vldr.32	s22, .L214+12	@ tmp253,
 3110              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3111              		.loc 1 560 24 view .LVU805
 3112 0d7c 53AADFED 		vldr.32	s21, .L214+16	@ tmp254,
 3113 0d80 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3114              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3115              		.loc 1 546 15 view .LVU806
 3116 0d84 0060A0E3 		mov	r6, #0	@ w,
 3117              	.LVL216:
 3118              	.L194:
 548:armwave.c     **** 
 3119              		.loc 1 548 13 is_stmt 1 view .LVU807
 3120              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3121              		.loc 1 548 21 is_stmt 0 view .LVU808
 3122 0d88 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3123 0d8c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3124              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3125              		.loc 1 550 13 view .LVU809
 3126 0d90 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3127              	@ armwave.c:548:             mod_val = 0.5f + (_1_waves_mod * w);
 548:armwave.c     **** 
 3128              		.loc 1 548 21 view .LVU810
 3129 0d94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3130 0d98 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3131              	.LVL217:
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3132              		.loc 1 550 13 is_stmt 1 view .LVU811
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3133              		.loc 1 550 13 is_stmt 0 view .LVU812
 3134 0d9c 370000DA 		ble	.L188		@,
 3135 0da0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3136              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3137              		.loc 1 565 113 view .LVU813
 3138 0da4 4AAA9FED 		vldr.32	s20, .L214+20	@ tmp229,
 3139 0da8 4A8ADFED 		vldr.32	s17, .L214+24	@ tmp230,
 3140              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3141              		.loc 1 550 19 view .LVU814
 3142 0dac 0040A0E3 		mov	r4, #0	@ x,
 3143              	.LVL218:
 3144              	.L193:
 551:armwave.c     ****                 noise *= noise;
 3145              		.loc 1 551 17 is_stmt 1 view .LVU815
 3146              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3147              		.loc 1 551 28 is_stmt 0 view .LVU816
 3148 0db0 FEFFFFEB 		bl	rand		@
 3149              	.LVL219:
 3150              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3151              		.loc 1 551 35 view .LVU817
 3152 0db4 7000FFE6 		uxth	r0, r0	@ tmp201,
 3153              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3154              		.loc 1 551 45 view .LVU818
 3155 0db8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3156 0dbc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3157              	@ armwave.c:551:                 noise  = ((rand() & 0xffff) * noise_fraction);
 551:armwave.c     ****                 noise *= noise;
 3158              		.loc 1 551 24 view .LVU819
 3159 0dc0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3160              	.LVL220:
 552:armwave.c     ****                 noise *= noise;
 3161              		.loc 1 552 17 is_stmt 1 view .LVU820
 3162              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 3163              		.loc 1 552 23 is_stmt 0 view .LVU821
 3164 0dc4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3165              	.LVL221:
 553:armwave.c     ****                 noise *= noise;
 3166              		.loc 1 553 17 is_stmt 1 view .LVU822
 3167              	@ armwave.c:553:                 noise *= noise;
 553:armwave.c     ****                 noise *= noise;
 3168              		.loc 1 553 23 is_stmt 0 view .LVU823
 3169 0dc8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3170              	.LVL222:
 554:armwave.c     **** 
 3171              		.loc 1 554 17 is_stmt 1 view .LVU824
 3172              	@ armwave.c:554:                 noise *= noise;
 554:armwave.c     **** 
 3173              		.loc 1 554 23 is_stmt 0 view .LVU825
 3174 0dcc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3175              	.LVL223:
 556:armwave.c     ****                     noise = -noise;
 3176              		.loc 1 556 17 is_stmt 1 view .LVU826
 3177              	@ armwave.c:556:                 if((rand() & 0xffff) > 0x7fff)
 556:armwave.c     ****                     noise = -noise;
 3178              		.loc 1 556 21 is_stmt 0 view .LVU827
 3179 0dd0 FEFFFFEB 		bl	rand		@
 3180              	.LVL224:
 557:armwave.c     **** 
 3181              		.loc 1 557 21 is_stmt 1 view .LVU828
 3182              	@ armwave.c:556:                 if((rand() & 0xffff) > 0x7fff)
 556:armwave.c     ****                     noise = -noise;
 3183              		.loc 1 556 19 is_stmt 0 view .LVU829
 3184 0dd4 020910E3 		tst	r0, #32768	@,
 3185              	@ armwave.c:557:                     noise = -noise;
 557:armwave.c     **** 
 3186              		.loc 1 557 27 view .LVU830
 3187 0dd8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3188              	.LVL225:
 559:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3189              		.loc 1 559 17 is_stmt 1 view .LVU831
 560:armwave.c     **** 
 3190              		.loc 1 560 17 view .LVU832
 3191              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3192              		.loc 1 560 27 is_stmt 0 view .LVU833
 3193 0ddc FEFFFFEB 		bl	rand		@
 3194              	.LVL226:
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3195              		.loc 1 562 17 is_stmt 1 view .LVU834
 3196              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3197              		.loc 1 562 45 is_stmt 0 view .LVU835
 3198 0de0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3199              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3200              		.loc 1 562 33 view .LVU836
 3201 0de4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3202              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3203              		.loc 1 562 45 view .LVU837
 3204 0de8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3205              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3206              		.loc 1 562 33 view .LVU838
 3207 0dec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3208              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3209              		.loc 1 562 45 view .LVU839
 3210 0df0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3211              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3212              		.loc 1 562 33 view .LVU840
 3213 0df4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3214              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3215              		.loc 1 560 34 view .LVU841
 3216 0df8 7000FFE6 		uxth	r0, r0	@ tmp214,
 3217              	.LVL227:
 3218              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3219              		.loc 1 560 44 view .LVU842
 3220 0dfc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3221 0e00 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3222              	@ armwave.c:560:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 560:armwave.c     **** 
 3223              		.loc 1 560 24 view .LVU843
 3224 0e04 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3225              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3226              		.loc 1 562 77 view .LVU844
 3227 0e08 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3228              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3229              		.loc 1 562 22 view .LVU845
 3230 0e0c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3231 0e10 FEFFFFEB 		bl	sin		@
 3232              	.LVL228:
 3233              		.loc 1 565 17 is_stmt 1 view .LVU846
 3234              	@ armwave.c:559:                 noise += 1.0f;
 559:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3235              		.loc 1 559 23 is_stmt 0 view .LVU847
 3236 0e14 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3237              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3238              		.loc 1 565 104 view .LVU848
 3239 0e18 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3240              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3241              		.loc 1 562 98 view .LVU849
 3242 0e1c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3243              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3244              		.loc 1 562 87 view .LVU850
 3245 0e20 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3246              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3247              		.loc 1 562 98 view .LVU851
 3248 0e24 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3249              	@ armwave.c:562:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 562:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3250              		.loc 1 562 19 view .LVU852
 3251 0e28 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3252              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3253              		.loc 1 565 113 view .LVU853
 3254 0e2c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3255 0e30 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3256 0e34 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3257 0e38 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3258 0e3c 050000DA 		ble	.L190		@,
 3259              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3260              		.loc 1 565 104 discriminator 1 view .LVU854
 3261 0e40 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3262 0e44 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3263 0e48 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3264 0e4c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3265 0e50 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3266 0e54 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3267              	.L190:
 3268              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3269              		.loc 1 565 57 discriminator 12 view .LVU855
 3270 0e58 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3271              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3272              		.loc 1 565 102 discriminator 12 view .LVU856
 3273 0e5c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3274 0e60 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3275 0e64 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3276              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3277              		.loc 1 550 58 discriminator 12 view .LVU857
 3278 0e68 014084E2 		add	r4, r4, #1	@ x, x,
 3279              	.LVL229:
 3280              	@ armwave.c:565:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3281              		.loc 1 565 102 discriminator 12 view .LVU858
 3282 0e6c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3283              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3284              		.loc 1 550 43 discriminator 12 view .LVU859
 3285 0e70 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3286              	@ armwave.c:550:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 550:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3287              		.loc 1 550 13 discriminator 12 view .LVU860
 3288 0e74 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3289 0e78 CCFFFFCA 		bgt	.L193		@,
 3290 0e7c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3291              	.LVL230:
 3292              	.L188:
 3293              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3294              		.loc 1 546 48 discriminator 2 view .LVU861
 3295 0e80 016086E2 		add	r6, r6, #1	@ w, w,
 3296              	.LVL231:
 3297              	@ armwave.c:546:         for(w = 0; w < g_armwave_state.waves; w++) {
 546:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3298              		.loc 1 546 9 discriminator 2 view .LVU862
 3299 0e84 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3300 0e88 BEFFFFBA 		blt	.L194		@,
 3301              	.LVL232:
 3302              	.L187:
 566:armwave.c     ****             }
 567:armwave.c     ****         }
 568:armwave.c     **** 
 569:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3303              		.loc 1 569 9 is_stmt 1 discriminator 2 view .LVU863
 3304              	@ armwave.c:569:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3305              		.loc 1 569 46 is_stmt 0 discriminator 2 view .LVU864
 3306 0e8c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3307              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3308              		.loc 1 543 27 discriminator 2 view .LVU865
 3309 0e90 018088E2 		add	r8, r8, #1	@ s, s,
 3310              	.LVL233:
 3311              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3312              		.loc 1 543 5 discriminator 2 view .LVU866
 3313 0e94 080059E1 		cmp	r9, r8	@ sets, s
 3314              	@ armwave.c:569:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3315              		.loc 1 569 20 discriminator 2 view .LVU867
 3316 0e98 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3317              	.LVL234:
 3318              	@ armwave.c:543:     for(s = 0; s < sets; s++) {
 543:armwave.c     ****         printf("Calculating test set %d\n", s);
 3319              		.loc 1 543 5 discriminator 2 view .LVU868
 3320 0e9c AEFFFF1A 		bne	.L186		@,
 3321              	.LVL235:
 3322              	.L183:
 3323              	@ armwave.c:571: }
 570:armwave.c     ****     }
 571:armwave.c     **** }
 3324              		.loc 1 571 1 view .LVU869
 3325 0ea0 08D08DE2 		add	sp, sp, #8	@,,
 3326              		.cfi_remember_state
 3327              		.cfi_def_cfa_offset 80
 3328              		@ sp needed	@
 3329 0ea4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3330              		.cfi_restore 90
 3331              		.cfi_restore 91
 3332              		.cfi_restore 88
 3333              		.cfi_restore 89
 3334              		.cfi_restore 86
 3335              		.cfi_restore 87
 3336              		.cfi_restore 84
 3337              		.cfi_restore 85
 3338              		.cfi_restore 82
 3339              		.cfi_restore 83
 3340              		.cfi_restore 80
 3341              		.cfi_restore 81
 3342              		.cfi_def_cfa_offset 32
 3343              	.LVL236:
 3344              		.loc 1 571 1 view .LVU870
 3345 0ea8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3346              	.LVL237:
 3347              	.L213:
 3348              		.cfi_restore_state
 3349              	.LBB56:
 3350              	.LBB53:
 491:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3351              		.loc 1 491 9 is_stmt 1 view .LVU871
 3352 0eac 940901E0 		mul	r1, r4, r9	@, _85, sets
 3353 0eb0 0920A0E1 		mov	r2, r9	@, sets
 3354 0eb4 28009FE5 		ldr	r0, .L214+36	@,
 3355 0eb8 FEFFFFEB 		bl	printf		@
 3356              	.LVL238:
 493:armwave.c     ****     }
 3357              		.loc 1 493 9 view .LVU872
 3358 0ebc 9FFFFFEA 		b	.L185		@
 3359              	.L215:
 3360              		.align	2
 3361              	.L214:
 3362 0ec0 0000803F 		.word	1065353216
 3363 0ec4 00007F43 		.word	1132396544
 3364 0ec8 0000003F 		.word	1056964608
 3365 0ecc C3F5C840 		.word	1086911939
 3366 0ed0 38FFC74A 		.word	1254620984
 3367 0ed4 0000FE42 		.word	1123942400
 3368 0ed8 00000043 		.word	1124073472
 3369 0edc 00000000 		.word	g_armwave_state
 3370 0ee0 C8020000 		.word	.LC22
 3371 0ee4 20020000 		.word	.LC20
 3372              	.LBE53:
 3373              	.LBE56:
 3374              		.cfi_endproc
 3375              	.LFE75:
 3377              		.align	2
 3378              		.global	armwave_cleanup
 3379              		.syntax unified
 3380              		.arm
 3381              		.fpu vfp
 3383              	armwave_cleanup:
 3384              	.LFB76:
 572:armwave.c     **** 
 573:armwave.c     **** /*
 574:armwave.c     ****  * Make a test square waveform.
 575:armwave.c     ****  *
 576:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 577:armwave.c     ****  */
 578:armwave.c     **** #if 0
 579:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 580:armwave.c     **** {
 581:armwave.c     ****     uint8_t v;
 582:armwave.c     ****     float noise, xnoise;
 583:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 584:armwave.c     ****     int w, x;
 585:armwave.c     **** 
 586:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 587:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 588:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     ****             noise *= noise;
 591:armwave.c     ****             noise *= noise;
 592:armwave.c     **** 
 593:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 594:armwave.c     ****                 noise = -noise;
 595:armwave.c     **** 
 596:armwave.c     ****             //noise += 1.0f;
 597:armwave.c     **** 
 598:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 599:armwave.c     ****                 new_level = 0.2f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 601:armwave.c     ****                 new_level = 0.8f;
 602:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 603:armwave.c     ****                 new_level = 0.2f;
 604:armwave.c     ****             } else {
 605:armwave.c     ****                 new_level = 0.8f;
 606:armwave.c     ****             }
 607:armwave.c     **** 
 608:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 609:armwave.c     **** 
 610:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 611:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 612:armwave.c     ****         }
 613:armwave.c     ****     }
 614:armwave.c     **** }
 615:armwave.c     **** #endif
 616:armwave.c     **** 
 617:armwave.c     **** /*
 618:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 619:armwave.c     ****  */
 620:armwave.c     **** void armwave_cleanup()
 621:armwave.c     **** {
 3385              		.loc 1 621 1 view -0
 3386              		.cfi_startproc
 3387              		@ args = 0, pretend = 0, frame = 0
 3388              		@ frame_needed = 0, uses_anonymous_args = 0
 622:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3389              		.loc 1 622 5 view .LVU874
 3390              	@ armwave.c:621: {
 621:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3391              		.loc 1 621 1 is_stmt 0 view .LVU875
 3392 0ee8 10402DE9 		push	{r4, lr}	@
 3393              		.cfi_def_cfa_offset 8
 3394              		.cfi_offset 4, -8
 3395              		.cfi_offset 14, -4
 3396              	@ armwave.c:622:     free(g_armwave_state.out_pixbuf);
 3397              		.loc 1 622 25 view .LVU876
 3398 0eec 34409FE5 		ldr	r4, .L218	@ tmp114,
 3399              	@ armwave.c:622:     free(g_armwave_state.out_pixbuf);
 3400              		.loc 1 622 5 view .LVU877
 3401 0ef0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3402 0ef4 FEFFFFEB 		bl	free		@
 3403              	.LVL239:
 623:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3404              		.loc 1 623 5 is_stmt 1 view .LVU878
 3405 0ef8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3406 0efc FEFFFFEB 		bl	free		@
 3407              	.LVL240:
 624:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3408              		.loc 1 624 5 view .LVU879
 3409 0f00 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3410 0f04 FEFFFFEB 		bl	free		@
 3411              	.LVL241:
 625:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3412              		.loc 1 625 5 view .LVU880
 3413 0f08 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3414 0f0c FEFFFFEB 		bl	free		@
 3415              	.LVL242:
 626:armwave.c     **** 
 627:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3416              		.loc 1 627 5 view .LVU881
 3417              	@ armwave.c:627:     g_armwave_state.out_pixbuf = NULL;
 3418              		.loc 1 627 32 is_stmt 0 view .LVU882
 3419 0f10 0030A0E3 		mov	r3, #0	@ tmp123,
 3420 0f14 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 628:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3421              		.loc 1 628 5 is_stmt 1 view .LVU883
 3422              	@ armwave.c:628:     g_armwave_state.ch1_buffer = NULL;
 3423              		.loc 1 628 32 is_stmt 0 view .LVU884
 3424 0f18 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 629:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3425              		.loc 1 629 5 is_stmt 1 view .LVU885
 3426              	@ armwave.c:629:     g_armwave_state.xcoord_to_xpixel = NULL;
 3427              		.loc 1 629 38 is_stmt 0 view .LVU886
 3428 0f1c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 630:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3429              		.loc 1 630 5 is_stmt 1 view .LVU887
 3430              	@ armwave.c:630:     g_armwave_state.test_wave_buffer = NULL;
 3431              		.loc 1 630 38 is_stmt 0 view .LVU888
 3432 0f20 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3433              	@ armwave.c:631: }
 631:armwave.c     **** }
 3434              		.loc 1 631 1 view .LVU889
 3435 0f24 1080BDE8 		pop	{r4, pc}	@
 3436              	.L219:
 3437              		.align	2
 3438              	.L218:
 3439 0f28 00000000 		.word	g_armwave_state
 3440              		.cfi_endproc
 3441              	.LFE76:
 3443              		.comm	gamma_table,256,4
 3444              		.comm	g_armwave_state,136,4
 3445              		.section	.rodata
 3446              		.align	2
 3447              		.set	.LANCHOR0,. + 0
 3450              	__PRETTY_FUNCTION__.17095:
 3451 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3451      6176655F 
 3451      66696C6C 
 3451      5F706978 
 3451      6275665F 
 3452 001b 00       		.space	1
 3455              	__PRETTY_FUNCTION__.17125:
 3456 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3456      6176655F 
 3456      73657475 
 3456      705F7265 
 3456      6E646572 
 3457 0031 000000   		.space	3
 3460              	__PRETTY_FUNCTION__.17132:
 3461 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3461      6176655F 
 3461      7365745F 
 3461      77617665 
 3461      5F706F69 
 3462 004d 000000   		.space	3
 3465              	__PRETTY_FUNCTION__.17139:
 3466 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3466      6176655F 
 3466      7365745F 
 3466      77617665 
 3466      5F706F69 
 3467              		.section	.rodata.str1.4,"aMS",%progbits,1
 3468              		.align	2
 3469              	.LC0:
 3470 0000 76302E30 		.ascii	"v0.0.1\000"
 3470      2E3100
 3471 0007 00       		.space	1
 3472              	.LC1:
 3473 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3473      61766520 
 3473      76657273 
 3473      696F6E3A 
 3473      2025730A 
 3474 001d 000000   		.space	3
 3475              	.LC2:
 3476 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3476      78253038 
 3476      7820623D 
 3476      30782530 
 3476      38782063 
 3477 0053 6768743D 		.ascii	"ght=%d\012\000"
 3477      25640A00 
 3478 005b 00       		.space	1
 3479              	.LC3:
 3480 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x\012\000"
 3480      20737472 
 3480      6964653D 
 3480      25642073 
 3480      6C793D25 
 3481              	.LC4:
 3482 0084 61726D77 		.ascii	"armwave.c\000"
 3482      6176652E 
 3482      6300
 3483 008e 0000     		.space	2
 3484              	.LC5:
 3485 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 3485      62756666 
 3485      65722021 
 3485      3D204E55 
 3485      4C4C00
 3486 00a3 00       		.space	1
 3487              	.LC6:
 3488 00a4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3488      20653D25 
 3488      6420773D 
 3488      25642077 
 3488      733D2564 
 3489              	.LC7:
 3490 00d0 73746172 		.ascii	"start_point < end_point\000"
 3490      745F706F 
 3490      696E7420 
 3490      3C20656E 
 3490      645F706F 
 3491              	.LC8:
 3492 00e8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3492      7566665F 
 3492      73697A65 
 3492      3D25642C 
 3492      20636D70 
 3493 011a 00       		.ascii	"\000"
 3494 011b 00       		.space	1
 3495              	.LC9:
 3496 011c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3496      6D776176 
 3496      655F7374 
 3496      6174652E 
 3496      6368315F 
 3497 013f 00       		.space	1
 3498              	.LC10:
 3499 0140 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3499      6D776176 
 3499      655F7374 
 3499      6174652E 
 3499      78636F6F 
 3500 0169 000000   		.space	3
 3501              	.LC11:
 3502 016c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3502      3A203078 
 3502      25303878 
 3502      20307825 
 3502      30387820 
 3503              	.LC12:
 3504 0190 77617665 		.ascii	"wave_buffer != NULL\000"
 3504      5F627566 
 3504      66657220 
 3504      213D204E 
 3504      554C4C00 
 3505              	.LC13:
 3506 01a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3506      6176655F 
 3506      7365745F 
 3506      77617665 
 3506      5F706F69 
 3507 01d7 78636565 		.ascii	"xceeded\000"
 3507      64656400 
 3508 01df 00       		.space	1
 3509              	.LC14:
 3510 01e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3510      5F627566 
 3510      6665725F 
 3510      70747220 
 3510      213D2030 
 3511 01f5 000000   		.space	3
 3512              	.LC15:
 3513 01f8 776200   		.ascii	"wb\000"
 3514 01fb 00       		.space	1
 3515              	.LC16:
 3516 01fc 50330A00 		.ascii	"P3\012\000"
 3517              	.LC17:
 3518 0200 25642025 		.ascii	"%d %d\012\000"
 3518      640A00
 3519 0207 00       		.space	1
 3520              	.LC18:
 3521 0208 3235350A 		.ascii	"255\012\000"
 3521      00
 3522 020d 000000   		.space	3
 3523              	.LC19:
 3524 0210 25336420 		.ascii	"%3d %3d %3d\012\000"
 3524      25336420 
 3524      2533640A 
 3524      00
 3525 021d 000000   		.space	3
 3526              	.LC20:
 3527 0220 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3527      6176655F 
 3527      74657374 
 3527      5F627566 
 3527      6665725F 
 3528 0253 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3528      20627566 
 3528      66657220 
 3528      28256420 
 3528      62797465 
 3529              	.LC21:
 3530 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3530      6176655F 
 3530      66696C6C 
 3530      5F706978 
 3530      6275665F 
 3531 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3531      20666169 
 3531      6C65642C 
 3531      20726574 
 3531      75726E69 
 3532 02c6 0000     		.space	2
 3533              	.LC22:
 3534 02c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3534      756C6174 
 3534      696E6720 
 3534      74657374 
 3534      20736574 
 3535              		.text
 3536              	.Letext0:
 3537              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3538              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3539              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3540              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3541              		.file 7 "/usr/include/stdio.h"
 3542              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3543              		.file 9 "/usr/include/errno.h"
 3544              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3545              		.file 11 "/usr/include/unistd.h"
 3546              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3547              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3548              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3549              		.file 15 "/usr/include/math.h"
 3550              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3551              		.file 17 "/usr/include/time.h"
 3552              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3553              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3554              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3555              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3556              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3557              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3558              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3559              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3560              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3561              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3562              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3563              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3564              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3565              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3566              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3567              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3568              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3569              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3570              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3571              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3572              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3573              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3574              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3575              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3576              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3577              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3578              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3579              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3580              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3581              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3582              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3583              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3584              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3585              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3586              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3587              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3588              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3589              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3590              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3591              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3592              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3593              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3594              		.file 60 "/usr/local/include/python3.8/context.h"
 3595              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3596              		.file 62 "/usr/local/include/python3.8/code.h"
 3597              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3598              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3599              		.file 65 "/usr/local/include/python3.8/import.h"
 3600              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3601              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3602              		.file 68 "/usr/include/malloc.h"
 3603              		.file 69 "armwave.h"
 3604              		.file 70 "/usr/include/stdlib.h"
 3605              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3606              		.file 72 "/usr/include/assert.h"
 3607              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3608              		.file 74 "<built-in>"
