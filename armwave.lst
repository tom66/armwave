   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=94 --param ggc-min-heapsize=119998
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	rgb2yuv
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	rgb2yuv:
  83              	.LVL0:
  84              	.LFB57:
  85              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #ifndef NO_PYTHON
  12:armwave.c     **** #include <Python.h>
  13:armwave.c     **** #endif
  14:armwave.c     **** 
  15:armwave.c     **** #include <sys/ipc.h>
  16:armwave.c     **** #include <sys/shm.h>
  17:armwave.c     **** 
  18:armwave.c     **** #include <X11/Xlib.h>
  19:armwave.c     **** #include <X11/Xutil.h>
  20:armwave.c     **** #include <X11/extensions/XShm.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include <assert.h>
  23:armwave.c     **** #include <ctype.h>
  24:armwave.c     **** #include <stdio.h>
  25:armwave.c     **** #include <stdint.h>
  26:armwave.c     **** #include <stdlib.h>
  27:armwave.c     **** #include <stdbool.h>
  28:armwave.c     **** #include <malloc.h>
  29:armwave.c     **** #include <string.h>
  30:armwave.c     **** #include <math.h>
  31:armwave.c     **** #include <unistd.h>
  32:armwave.c     **** 
  33:armwave.c     **** #include <X11/Xlib.h>
  34:armwave.c     **** #include <X11/Xutil.h>
  35:armwave.c     **** #include <X11/Xatom.h>
  36:armwave.c     **** #include <X11/extensions/Xv.h>
  37:armwave.c     **** #include <X11/extensions/Xvlib.h>
  38:armwave.c     **** #include <X11/extensions/XShm.h>
  39:armwave.c     **** 
  40:armwave.c     **** #include <time.h>
  41:armwave.c     **** 
  42:armwave.c     **** #include "armwave.h"
  43:armwave.c     **** 
  44:armwave.c     **** #define ARMWAVE_VER  "v0.2.4"
  45:armwave.c     **** 
  46:armwave.c     **** struct armwave_state_t g_armwave_state;
  47:armwave.c     **** struct armwave_yuv_t g_yuv_lut[256];
  48:armwave.c     **** 
  49:armwave.c     **** const struct armwave_rgb_t g_fill_black = { 0, 0, 0 };
  50:armwave.c     **** 
  51:armwave.c     **** /*
  52:armwave.c     ****  * X11 properties.  Should these be commoned into one struct?
  53:armwave.c     ****  */ 
  54:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims;
  55:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims_last;
  56:armwave.c     **** 
  57:armwave.c     **** int g_frame_num = 0, g_n_test_waves = 8;
  58:armwave.c     **** Window g_window = 0;
  59:armwave.c     **** Display *g_dpy;
  60:armwave.c     **** int g_xv_port;
  61:armwave.c     **** XVisualInfo	g_vinfo;
  62:armwave.c     **** GC g_gc = NULL;
  63:armwave.c     **** XvImage *g_yuv_image = NULL;
  64:armwave.c     **** XShmSegmentInfo g_yuv_shminfo;
  65:armwave.c     **** XColor g_grat_colour, g_grat_subcolour; 
  66:armwave.c     **** XSetWindowAttributes g_xswa;
  67:armwave.c     ****     
  68:armwave.c     **** struct MwmHints {
  69:armwave.c     ****     unsigned long flags;
  70:armwave.c     ****     unsigned long functions;
  71:armwave.c     ****     unsigned long decorations;
  72:armwave.c     ****     long input_mode;
  73:armwave.c     ****     unsigned long status;
  74:armwave.c     **** };
  75:armwave.c     **** 
  76:armwave.c     **** enum {
  77:armwave.c     ****     MWM_HINTS_FUNCTIONS = (1L << 0),
  78:armwave.c     ****     MWM_HINTS_DECORATIONS =  (1L << 1),
  79:armwave.c     **** 
  80:armwave.c     ****     MWM_FUNC_ALL = (1L << 0),
  81:armwave.c     ****     MWM_FUNC_RESIZE = (1L << 1),
  82:armwave.c     ****     MWM_FUNC_MOVE = (1L << 2),
  83:armwave.c     ****     MWM_FUNC_MINIMIZE = (1L << 3),
  84:armwave.c     ****     MWM_FUNC_MAXIMIZE = (1L << 4),
  85:armwave.c     ****     MWM_FUNC_CLOSE = (1L << 5)
  86:armwave.c     **** };
  87:armwave.c     **** 
  88:armwave.c     **** static void plot_pixel_yuv(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  89:armwave.c     **** static void plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * Helper function to convert 8-bit RGB to 8-bit YUV values.
  93:armwave.c     ****  */
  94:armwave.c     **** void rgb2yuv(struct armwave_rgb_t *rgb_in, struct armwave_yuv_t *yuv_out)
  95:armwave.c     **** {
  86              		.loc 1 95 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
  91              		.loc 1 96 5 view .LVU1
  92              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93              		.loc 1 96 41 is_stmt 0 view .LVU2
  94 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2	@ rgb_in_32(D)->r, rgb_in_32(D)->r
  95              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96              		.loc 1 96 33 view .LVU3
  97 0004 254A9FED 		vldr.32	s8, .L3	@ tmp146,
  98              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
  99              		.loc 1 97 22 view .LVU4
 100 0008 257ADFED 		vldr.32	s15, .L3+4	@ tmp160,
 101              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 102              		.loc 1 96 22 view .LVU5
 103 000c 257A9FED 		vldr.32	s14, .L3+8	@ tmp148,
 104              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 105              		.loc 1 96 41 view .LVU6
 106 0010 103A05EE 		vmov	s10, r3	@ int	@ rgb_in_32(D)->r, rgb_in_32(D)->r
 107              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 108              		.loc 1 96 64 view .LVU7
 109 0014 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 110              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 111              		.loc 1 97 33 view .LVU8
 112 0018 236ADFED 		vldr.32	s13, .L3+12	@ tmp158,
 113              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 114              		.loc 1 97 79 view .LVU9
 115 001c 234ADFED 		vldr.32	s9, .L3+16	@ tmp165,
 116              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 117              		.loc 1 96 33 view .LVU10
 118 0020 C55AB8EE 		vcvt.f32.s32	s10, s10	@ _3, rgb_in_32(D)->r
 119              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 120              		.loc 1 96 64 view .LVU11
 121 0024 903A05EE 		vmov	s11, r3	@ int	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 122              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 123              		.loc 1 96 87 view .LVU12
 124 0028 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 125              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 126              		.loc 1 96 56 view .LVU13
 127 002c 202ADFED 		vldr.32	s5, .L3+20	@ tmp150,
 128              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 129              		.loc 1 97 56 view .LVU14
 130 0030 203A9FED 		vldr.32	s6, .L3+24	@ tmp162,
 131              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 132              		.loc 1 96 56 view .LVU15
 133 0034 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _8, rgb_in_32(D)->g
 134              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 135              		.loc 1 96 87 view .LVU16
 136 0038 103A06EE 		vmov	s12, r3	@ int	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 137              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 138              		.loc 1 98 56 view .LVU17
 139 003c 1E3ADFED 		vldr.32	s7, .L3+28	@ tmp174,
 140              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 141              		.loc 1 96 22 view .LVU18
 142 0040 047A05EE 		vmla.f32	s14, s10, s8	@ tmp147, _3, tmp146
 143              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 144              		.loc 1 97 22 view .LVU19
 145 0044 674AB0EE 		vmov.f32	s8, s15	@ tmp159, tmp160
 146              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 147              		.loc 1 96 79 view .LVU20
 148 0048 C66AB8EE 		vcvt.f32.s32	s12, s12	@ _13, rgb_in_32(D)->b
 149              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 150              		.loc 1 98 22 view .LVU21
 151 004c 247A45EE 		vmla.f32	s15, s10, s9	@ tmp171, _3, tmp165
 152              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 153              		.loc 1 97 22 view .LVU22
 154 0050 264A05EE 		vmla.f32	s8, s10, s13	@ tmp159, _3, tmp158
 155              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 156              		.loc 1 98 79 view .LVU23
 157 0054 195A9FED 		vldr.32	s10, .L3+32	@ tmp177,
 158              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 159              		.loc 1 96 46 view .LVU24
 160 0058 A27A05EE 		vmla.f32	s14, s11, s5	@ tmp151, _8, tmp150
 161              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 162              		.loc 1 98 46 view .LVU25
 163 005c E37A45EE 		vmls.f32	s15, s11, s7	@ tmp175, _8, tmp174
 164              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 165              		.loc 1 97 22 view .LVU26
 166 0060 446AF0EE 		vmov.f32	s13, s8	@ tmp159, tmp159
 167              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 168              		.loc 1 96 79 view .LVU27
 169 0064 164A9FED 		vldr.32	s8, .L3+36	@ tmp153,
 170              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 171              		.loc 1 97 46 view .LVU28
 172 0068 C36A45EE 		vmls.f32	s13, s11, s6	@ tmp163, _8, tmp162
 173              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 174              		.loc 1 96 69 view .LVU29
 175 006c 047A06EE 		vmla.f32	s14, s12, s8	@ tmp154, _13, tmp153
 176              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 177              		.loc 1 98 69 view .LVU30
 178 0070 457A46EE 		vmls.f32	s15, s12, s10	@ tmp178, _13, tmp177
 179              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 180              		.loc 1 97 69 view .LVU31
 181 0074 246A46EE 		vmla.f32	s13, s12, s9	@ tmp166, _13, tmp165
 182              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 183              		.loc 1 96 16 view .LVU32
 184 0078 C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp155, tmp154
 185              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 186              		.loc 1 98 16 view .LVU33
 187 007c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 188              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 189              		.loc 1 96 16 view .LVU34
 190 0080 102A17EE 		vmov	r2, s14	@ int	@ tmp155, tmp155
 191              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 192              		.loc 1 97 16 view .LVU35
 193 0084 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp167, tmp166
 194              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 195              		.loc 1 98 16 view .LVU36
 196 0088 903A17EE 		vmov	r3, s15	@ int	@ tmp179, tmp179
 197              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 198              		.loc 1 96 16 view .LVU37
 199 008c 0020C1E5 		strb	r2, [r1]	@ tmp155, yuv_out_33(D)->y
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 200              		.loc 1 97 5 is_stmt 1 view .LVU38
 201              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 202              		.loc 1 98 16 is_stmt 0 view .LVU39
 203 0090 0230C1E5 		strb	r3, [r1, #2]	@ tmp179, yuv_out_33(D)->v
 204              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 205              		.loc 1 97 16 view .LVU40
 206 0094 100A17EE 		vmov	r0, s14	@ int	@ tmp167, tmp167
 207              	.LVL1:
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 208              		.loc 1 97 16 view .LVU41
 209 0098 0100C1E5 		strb	r0, [r1, #1]	@ tmp167, yuv_out_33(D)->u
 210              		.loc 1 98 5 is_stmt 1 view .LVU42
 211              	@ armwave.c:99: }
  99:armwave.c     **** }
 212              		.loc 1 99 1 is_stmt 0 view .LVU43
 213 009c 1EFF2FE1 		bx	lr	@
 214              	.L4:
 215              		.align	2
 216              	.L3:
 217 00a0 6F12833E 		.word	1048777327
 218 00a4 00000043 		.word	1124073472
 219 00a8 00008041 		.word	1098907648
 220 00ac 508D17BE 		.word	-1105752752
 221 00b0 9CC4E03E 		.word	1054917788
 222 00b4 2506013F 		.word	1057031717
 223 00b8 F4FD943E 		.word	1049951732
 224 00bc 7F6ABC3E 		.word	1052535423
 225 00c0 7368913D 		.word	1032939635
 226 00c4 F0A7C63D 		.word	1036429296
 227              		.cfi_endproc
 228              	.LFE57:
 230              		.align	2
 231              		.global	hsv2rgb
 232              		.syntax unified
 233              		.arm
 234              		.fpu vfp
 236              	hsv2rgb:
 237              	.LVL2:
 238              	.LFB58:
 100:armwave.c     **** 
 101:armwave.c     **** /*
 102:armwave.c     ****  * Helper function to convert 8-bit HSV to 8-bit RGB.
 103:armwave.c     ****  *
 104:armwave.c     ****  * https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-ra
 105:armwave.c     ****  */
 106:armwave.c     **** void hsv2rgb(struct armwave_hsv_t *hsv_in, struct armwave_rgb_t *rgb_out)
 107:armwave.c     **** {
 239              		.loc 1 107 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     unsigned char region, remainder, p, q, t;
 243              		.loc 1 108 5 view .LVU45
 109:armwave.c     **** 
 110:armwave.c     ****     if (hsv_in->s == 0)
 244              		.loc 1 110 5 view .LVU46
 245              	@ armwave.c:107: {
 107:armwave.c     ****     unsigned char region, remainder, p, q, t;
 246              		.loc 1 107 1 is_stmt 0 view .LVU47
 247 00c8 30402DE9 		push	{r4, r5, lr}	@
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 252              	@ armwave.c:110:     if (hsv_in->s == 0)
 253              		.loc 1 110 15 view .LVU48
 254 00cc 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2	@ _1, hsv_in_29(D)->s
 255 00d0 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2	@ pretmp_65, hsv_in_29(D)->v
 256              	@ armwave.c:110:     if (hsv_in->s == 0)
 257              		.loc 1 110 8 view .LVU49
 258 00d4 00005EE3 		cmp	lr, #0	@ _1,
 259 00d8 2100000A 		beq	.L16		@,
 111:armwave.c     ****     {
 112:armwave.c     ****         rgb_out->r = hsv_in->v;
 113:armwave.c     ****         rgb_out->g = hsv_in->v;
 114:armwave.c     ****         rgb_out->b = hsv_in->v;
 115:armwave.c     ****         return;
 116:armwave.c     ****     }
 117:armwave.c     **** 
 118:armwave.c     ****     region = hsv_in->h / 43;
 260              		.loc 1 118 5 is_stmt 1 view .LVU50
 261              	@ armwave.c:118:     region = hsv_in->h / 43;
 262              		.loc 1 118 20 is_stmt 0 view .LVU51
 263 00dc 0040D0E5 		ldrb	r4, [r0]	@ zero_extendqisi2	@ _3, hsv_in_29(D)->h
 264              	@ armwave.c:118:     region = hsv_in->h / 43;
 265              		.loc 1 118 12 view .LVU52
 266 00e0 EC209FE5 		ldr	r2, .L17	@ tmp149,
 267              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 268              		.loc 1 119 38 view .LVU53
 269 00e4 2A30E0E3 		mvn	r3, #42	@ tmp151,
 270              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 120:armwave.c     **** 
 121:armwave.c     ****     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 271              		.loc 1 121 27 view .LVU54
 272 00e8 FF006EE2 		rsb	r0, lr, #255	@ tmp160, _1,
 273              	.LVL3:
 274              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 275              		.loc 1 118 12 view .LVU55
 276 00ec 925482E0 		umull	r5, r2, r2, r4	@ tmp192, tmp148, tmp149, _3
 277              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 278              		.loc 1 121 20 view .LVU56
 279 00f0 9C0000E0 		mul	r0, ip, r0	@ tmp161, pretmp_65, tmp160
 280              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 281              		.loc 1 118 12 view .LVU57
 282 00f4 A221A0E1 		lsr	r2, r2, #3	@ region, tmp148,
 283              	.LVL4:
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 284              		.loc 1 119 5 is_stmt 1 view .LVU58
 285              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 286              		.loc 1 119 28 is_stmt 0 view .LVU59
 287 00f8 934223E0 		mla	r3, r3, r2, r4	@ tmp152, tmp151, region, _3
 288              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 289              		.loc 1 121 41 view .LVU60
 290 00fc 4004A0E1 		asr	r0, r0, #8	@ tmp162, tmp161,
 291              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 292              		.loc 1 119 15 view .LVU61
 293 0100 833083E0 		add	r3, r3, r3, lsl #1	@ tmp157, tmp152, tmp152,
 294              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 295              		.loc 1 121 7 view .LVU62
 296 0104 7000EFE6 		uxtb	r0, r0	@ p, tmp162
 297              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 298              		.loc 1 119 15 view .LVU63
 299 0108 8330A0E1 		lsl	r3, r3, #1	@ tmp159, tmp157,
 300 010c 7330EFE6 		uxtb	r3, r3	@ remainder, tmp159
 301              	.LVL5:
 302              		.loc 1 121 5 is_stmt 1 view .LVU64
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 303              		.loc 1 122 5 view .LVU65
 304              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 305              		.loc 1 123 48 is_stmt 0 view .LVU66
 306 0110 FF4063E2 		rsb	r4, r3, #255	@ tmp168, remainder,
 307              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 308              		.loc 1 122 41 view .LVU67
 309 0114 8E0363E1 		smulbb	r3, lr, r3	@ tmp163, _1, remainder
 310              	.LVL6:
 311              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 312              		.loc 1 123 41 view .LVU68
 313 0118 9E040EE0 		mul	lr, lr, r4	@ tmp169, _1, tmp168
 314              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 315              		.loc 1 122 54 view .LVU69
 316 011c 4334A0E1 		asr	r3, r3, #8	@ tmp164, tmp163,
 317              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 318              		.loc 1 122 27 view .LVU70
 319 0120 FF3063E2 		rsb	r3, r3, #255	@ tmp165, tmp164,
 320              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 321              		.loc 1 123 62 view .LVU71
 322 0124 4EE4A0E1 		asr	lr, lr, #8	@ tmp170, tmp169,
 323              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 324              		.loc 1 123 27 view .LVU72
 325 0128 FFE06EE2 		rsb	lr, lr, #255	@ tmp171, tmp170,
 326              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 327              		.loc 1 122 20 view .LVU73
 328 012c 9C0303E0 		mul	r3, ip, r3	@ tmp166, pretmp_65, tmp165
 329              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 330              		.loc 1 123 20 view .LVU74
 331 0130 9C0E0EE0 		mul	lr, ip, lr	@ tmp172, pretmp_65, tmp171
 332              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 333              		.loc 1 122 62 view .LVU75
 334 0134 4334A0E1 		asr	r3, r3, #8	@ tmp167, tmp166,
 335              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 336              		.loc 1 123 70 view .LVU76
 337 0138 4EE4A0E1 		asr	lr, lr, #8	@ tmp173, tmp172,
 338              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 339              		.loc 1 122 7 view .LVU77
 340 013c 7330EFE6 		uxtb	r3, r3	@ q, tmp167
 341              	.LVL7:
 342              		.loc 1 123 5 is_stmt 1 view .LVU78
 343              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 344              		.loc 1 123 7 is_stmt 0 view .LVU79
 345 0140 7EE0EFE6 		uxtb	lr, lr	@ t, tmp173
 346              	.LVL8:
 124:armwave.c     **** 
 125:armwave.c     ****     switch (region)
 347              		.loc 1 125 5 is_stmt 1 view .LVU80
 348 0144 040052E3 		cmp	r2, #4	@ region,
 349 0148 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 350 014c 1C0000EA 		b	.L8	@
 351              	.L10:
 352 0150 84010000 		.word	.L14
 353 0154 94010000 		.word	.L13
 354 0158 A4010000 		.word	.L12
 355 015c B4010000 		.word	.L11
 356 0160 74010000 		.word	.L9
 357              	.LVL9:
 358              	.L16:
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 359              		.loc 1 112 9 view .LVU81
 360              	@ armwave.c:112:         rgb_out->r = hsv_in->v;
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 361              		.loc 1 112 20 is_stmt 0 view .LVU82
 362 0164 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 363              		.loc 1 113 9 is_stmt 1 view .LVU83
 364              	@ armwave.c:113:         rgb_out->g = hsv_in->v;
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 365              		.loc 1 113 20 is_stmt 0 view .LVU84
 366 0168 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 114:armwave.c     ****         return;
 367              		.loc 1 114 9 is_stmt 1 view .LVU85
 368              	@ armwave.c:114:         rgb_out->b = hsv_in->v;
 114:armwave.c     ****         return;
 369              		.loc 1 114 20 is_stmt 0 view .LVU86
 370 016c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 115:armwave.c     ****     }
 371              		.loc 1 115 9 is_stmt 1 view .LVU87
 372 0170 3080BDE8 		pop	{r4, r5, pc}	@
 373              	.LVL10:
 374              	.L9:
 126:armwave.c     ****     {
 127:armwave.c     ****         case 0:
 128:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 129:armwave.c     ****             break;
 130:armwave.c     ****         case 1:
 131:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 132:armwave.c     ****             break;
 133:armwave.c     ****         case 2:
 134:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 135:armwave.c     ****             break;
 136:armwave.c     ****         case 3:
 137:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 138:armwave.c     ****             break;
 139:armwave.c     ****         case 4:
 140:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 375              		.loc 1 140 13 view .LVU88
 376              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 377              		.loc 1 140 24 is_stmt 0 view .LVU89
 378 0174 00E0C1E5 		strb	lr, [r1]	@ t, rgb_out_30(D)->r
 379              	.LVL11:
 380              		.loc 1 140 29 is_stmt 1 view .LVU90
 381              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 382              		.loc 1 140 40 is_stmt 0 view .LVU91
 383 0178 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 384              		.loc 1 140 45 is_stmt 1 view .LVU92
 385              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 386              		.loc 1 140 56 is_stmt 0 view .LVU93
 387 017c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 141:armwave.c     ****             break;
 388              		.loc 1 141 13 is_stmt 1 view .LVU94
 389 0180 3080BDE8 		pop	{r4, r5, pc}	@
 390              	.LVL12:
 391              	.L14:
 128:armwave.c     ****             break;
 392              		.loc 1 128 13 view .LVU95
 393              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 394              		.loc 1 128 24 is_stmt 0 view .LVU96
 395 0184 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 396              	.LVL13:
 128:armwave.c     ****             break;
 397              		.loc 1 128 37 is_stmt 1 view .LVU97
 398              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 399              		.loc 1 128 48 is_stmt 0 view .LVU98
 400 0188 01E0C1E5 		strb	lr, [r1, #1]	@ t, rgb_out_30(D)->g
 128:armwave.c     ****             break;
 401              		.loc 1 128 53 is_stmt 1 view .LVU99
 402              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 403              		.loc 1 128 64 is_stmt 0 view .LVU100
 404 018c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 129:armwave.c     ****         case 1:
 405              		.loc 1 129 13 is_stmt 1 view .LVU101
 406 0190 3080BDE8 		pop	{r4, r5, pc}	@
 407              	.LVL14:
 408              	.L13:
 131:armwave.c     ****             break;
 409              		.loc 1 131 13 view .LVU102
 410              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 411              		.loc 1 131 24 is_stmt 0 view .LVU103
 412 0194 0030C1E5 		strb	r3, [r1]	@ q, rgb_out_30(D)->r
 413              	.LVL15:
 131:armwave.c     ****             break;
 414              		.loc 1 131 29 is_stmt 1 view .LVU104
 415              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 416              		.loc 1 131 40 is_stmt 0 view .LVU105
 417 0198 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 131:armwave.c     ****             break;
 418              		.loc 1 131 53 is_stmt 1 view .LVU106
 419              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 420              		.loc 1 131 64 is_stmt 0 view .LVU107
 421 019c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 132:armwave.c     ****         case 2:
 422              		.loc 1 132 13 is_stmt 1 view .LVU108
 423 01a0 3080BDE8 		pop	{r4, r5, pc}	@
 424              	.LVL16:
 425              	.L12:
 134:armwave.c     ****             break;
 426              		.loc 1 134 13 view .LVU109
 427              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 428              		.loc 1 134 24 is_stmt 0 view .LVU110
 429 01a4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 430              	.LVL17:
 134:armwave.c     ****             break;
 431              		.loc 1 134 29 is_stmt 1 view .LVU111
 432              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 433              		.loc 1 134 40 is_stmt 0 view .LVU112
 434 01a8 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 134:armwave.c     ****             break;
 435              		.loc 1 134 53 is_stmt 1 view .LVU113
 436              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 437              		.loc 1 134 64 is_stmt 0 view .LVU114
 438 01ac 02E0C1E5 		strb	lr, [r1, #2]	@ t, rgb_out_30(D)->b
 135:armwave.c     ****         case 3:
 439              		.loc 1 135 13 is_stmt 1 view .LVU115
 440 01b0 3080BDE8 		pop	{r4, r5, pc}	@
 441              	.LVL18:
 442              	.L11:
 137:armwave.c     ****             break;
 443              		.loc 1 137 13 view .LVU116
 444              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 445              		.loc 1 137 24 is_stmt 0 view .LVU117
 446 01b4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 447              	.LVL19:
 137:armwave.c     ****             break;
 448              		.loc 1 137 29 is_stmt 1 view .LVU118
 449              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 450              		.loc 1 137 40 is_stmt 0 view .LVU119
 451 01b8 0130C1E5 		strb	r3, [r1, #1]	@ q, rgb_out_30(D)->g
 137:armwave.c     ****             break;
 452              		.loc 1 137 45 is_stmt 1 view .LVU120
 453              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 454              		.loc 1 137 56 is_stmt 0 view .LVU121
 455 01bc 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 138:armwave.c     ****         case 4:
 456              		.loc 1 138 13 is_stmt 1 view .LVU122
 457 01c0 3080BDE8 		pop	{r4, r5, pc}	@
 458              	.LVL20:
 459              	.L8:
 142:armwave.c     ****         default:
 143:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 460              		.loc 1 143 13 view .LVU123
 461              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 462              		.loc 1 143 24 is_stmt 0 view .LVU124
 463 01c4 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 464              	.LVL21:
 465              		.loc 1 143 37 is_stmt 1 view .LVU125
 466              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 467              		.loc 1 143 48 is_stmt 0 view .LVU126
 468 01c8 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 469              		.loc 1 143 53 is_stmt 1 view .LVU127
 470              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 471              		.loc 1 143 64 is_stmt 0 view .LVU128
 472 01cc 0230C1E5 		strb	r3, [r1, #2]	@ q, rgb_out_30(D)->b
 144:armwave.c     ****             break;
 473              		.loc 1 144 13 is_stmt 1 view .LVU129
 474              	@ armwave.c:146: }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 475              		.loc 1 146 1 is_stmt 0 view .LVU130
 476 01d0 3080BDE8 		pop	{r4, r5, pc}	@
 477              	.L18:
 478              		.align	2
 479              	.L17:
 480 01d4 83BEA02F 		.word	799063683
 481              		.cfi_endproc
 482              	.LFE58:
 484              		.align	2
 485              		.global	fill_rgb_xvimage
 486              		.syntax unified
 487              		.arm
 488              		.fpu vfp
 490              	fill_rgb_xvimage:
 491              	.LVL22:
 492              	.LFB61:
 147:armwave.c     **** 
 148:armwave.c     **** /*
 149:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.
 150:armwave.c     ****  */
 151:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv(XvImage *img, int x, int y, struct armwav
 152:armwave.c     **** {
 153:armwave.c     ****     int uv_base = img->width * img->height;
 154:armwave.c     ****     
 155:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 156:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 157:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 158:armwave.c     **** }
 159:armwave.c     **** 
 160:armwave.c     **** /*
 161:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.  Does not write
 162:armwave.c     ****  * U/V values if x or y are odd.
 163:armwave.c     ****  */
 164:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct 
 165:armwave.c     **** {
 166:armwave.c     ****     int uv_base = img->width * img->height;
 167:armwave.c     ****     
 168:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 169:armwave.c     ****     
 170:armwave.c     ****     if(!(x & 1) && !(y & 1)) {
 171:armwave.c     ****         img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 172:armwave.c     ****         img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 173:armwave.c     ****     }
 174:armwave.c     **** }
 175:armwave.c     **** 
 176:armwave.c     **** /*
 177:armwave.c     ****  * Fill an XvImage canvas with an RGB value.
 178:armwave.c     ****  */
 179:armwave.c     **** void fill_rgb_xvimage(XvImage *img, struct armwave_rgb_t *rgb)
 180:armwave.c     **** {
 493              		.loc 1 180 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 181:armwave.c     ****     struct armwave_yuv_t yuv;
 497              		.loc 1 181 5 view .LVU132
 182:armwave.c     ****     
 183:armwave.c     ****     // Compute the Y, U and V values, then use memset to block write them
 184:armwave.c     ****     rgb2yuv(rgb, &yuv);
 498              		.loc 1 184 5 view .LVU133
 499              	.LBB6:
 500              	.LBI6:
  94:armwave.c     **** {
 501              		.loc 1 94 6 view .LVU134
 502              	.LBB7:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 503              		.loc 1 96 5 view .LVU135
 504              	.LBE7:
 505              	.LBE6:
 506              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 507              		.loc 1 180 1 is_stmt 0 view .LVU136
 508 01d8 10402DE9 		push	{r4, lr}	@
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 01dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 80, -32
 515              		.cfi_offset 81, -28
 516              		.cfi_offset 82, -24
 517              		.cfi_offset 83, -20
 518              		.cfi_offset 84, -16
 519              		.cfi_offset 85, -12
 520              	.LBB24:
 521              	.LBB8:
 522              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 523              		.loc 1 96 33 view .LVU137
 524 01e0 476A9FED 		vldr.32	s12, .L21	@ tmp204,
 525              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 526              		.loc 1 96 22 view .LVU138
 527 01e4 477ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 528              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 529              		.loc 1 96 56 view .LVU139
 530 01e8 476ADFED 		vldr.32	s13, .L21+8	@ tmp208,
 531              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 532              		.loc 1 96 41 view .LVU140
 533 01ec 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2	@ rgb_39(D)->r, rgb_39(D)->r
 534              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 535              		.loc 1 96 79 view .LVU141
 536 01f0 467A9FED 		vldr.32	s14, .L21+12	@ tmp211,
 537              	.LBE8:
 538              	.LBE24:
 539              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 540              		.loc 1 180 1 view .LVU142
 541 01f4 08D04DE2 		sub	sp, sp, #8	@,,
 542              		.cfi_def_cfa_offset 40
 543              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 185:armwave.c     ****     
 186:armwave.c     ****     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 544              		.loc 1 186 36 view .LVU143
 545 01f8 182090E5 		ldr	r2, [r0, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 546              	.LBB25:
 547              	.LBB9:
 548              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 549              		.loc 1 96 41 view .LVU144
 550 01fc 903A09EE 		vmov	s19, r3	@ int	@ rgb_39(D)->r, rgb_39(D)->r
 551              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 552              		.loc 1 96 64 view .LVU145
 553 0200 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ rgb_39(D)->g, rgb_39(D)->g
 554              	.LBE9:
 555              	.LBE25:
 556              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 557              		.loc 1 180 1 view .LVU146
 558 0204 0040A0E1 		mov	r4, r0	@ img, img
 559              	.LBB26:
 560              	.LBB10:
 561              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 562              		.loc 1 98 22 view .LVU147
 563 0208 418A9FED 		vldr.32	s16, .L21+16	@ tmp257,
 564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 565              		.loc 1 96 33 view .LVU148
 566 020c E99AF8EE 		vcvt.f32.s32	s19, s19	@ _48, rgb_39(D)->r
 567              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 568              		.loc 1 96 64 view .LVU149
 569 0210 103A09EE 		vmov	s18, r3	@ int	@ rgb_39(D)->g, rgb_39(D)->g
 570              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 571              		.loc 1 96 87 view .LVU150
 572 0214 0230D1E5 		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ rgb_39(D)->b, rgb_39(D)->b
 573              	.LBE10:
 574              	.LBE26:
 575              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 576              		.loc 1 186 22 view .LVU151
 577 0218 001092E5 		ldr	r1, [r2]	@ *_2, *_2
 578              	.LVL23:
 579              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 580              		.loc 1 186 59 view .LVU152
 581 021c 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 582              	.LBB27:
 583              	.LBB11:
 584              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 585              		.loc 1 96 56 view .LVU153
 586 0220 C99AB8EE 		vcvt.f32.s32	s18, s18	@ _53, rgb_39(D)->g
 587              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 588              		.loc 1 96 87 view .LVU154
 589 0224 903A08EE 		vmov	s17, r3	@ int	@ rgb_39(D)->b, rgb_39(D)->b
 590              	.LBE11:
 591              	.LBE27:
 592              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 593              		.loc 1 186 59 view .LVU155
 594 0228 043090E5 		ldr	r3, [r0, #4]	@ img_41(D)->width, img_41(D)->width
 595              	.LBB28:
 596              	.LBB12:
 597              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 598              		.loc 1 96 22 view .LVU156
 599 022c 867A49EE 		vmla.f32	s15, s19, s12	@ tmp205, _48, tmp204
 600              	.LBE12:
 601              	.LBE28:
 602              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 603              		.loc 1 186 22 view .LVU157
 604 0230 1C0090E5 		ldr	r0, [r0, #28]	@ img_41(D)->data, img_41(D)->data
 605              	.LVL24:
 606              	.LBB29:
 607              	.LBB13:
 608              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 609              		.loc 1 96 79 view .LVU158
 610 0234 E88AF8EE 		vcvt.f32.s32	s17, s17	@ _58, rgb_39(D)->b
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 611              		.loc 1 97 5 is_stmt 1 view .LVU159
  98:armwave.c     **** }
 612              		.loc 1 98 5 view .LVU160
 613              	.LVL25:
  98:armwave.c     **** }
 614              		.loc 1 98 5 is_stmt 0 view .LVU161
 615              	.LBE13:
 616              	.LBE29:
 617              		.loc 1 186 5 is_stmt 1 view .LVU162
 618 0238 920302E0 		mul	r2, r2, r3	@, img_41(D)->height, img_41(D)->width
 619              	.LBB30:
 620              	.LBB14:
 621              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 622              		.loc 1 98 33 is_stmt 0 view .LVU163
 623 023c 35AA9FED 		vldr.32	s20, .L21+20	@ tmp255,
 624              	.LBE14:
 625              	.LBE30:
 626              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 627              		.loc 1 186 5 view .LVU164
 628 0240 010080E0 		add	r0, r0, r1	@, img_41(D)->data, *_2
 629              	.LBB31:
 630              	.LBB15:
 631              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 632              		.loc 1 96 46 view .LVU165
 633 0244 267A49EE 		vmla.f32	s15, s18, s13	@ tmp209, _53, tmp208
 634              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 635              		.loc 1 96 69 view .LVU166
 636 0248 877A48EE 		vmla.f32	s15, s17, s14	@ tmp212, _58, tmp211
 637              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 638              		.loc 1 96 16 view .LVU167
 639 024c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp212
 640 0250 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp214, %sfp
 641              	.LBE15:
 642              	.LBE31:
 643              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 644              		.loc 1 186 5 view .LVU168
 645 0254 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 646 0258 FEFFFFEB 		bl	memset		@
 647              	.LVL26:
 187:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 648              		.loc 1 187 5 is_stmt 1 view .LVU169
 649              	.LBB32:
 650              	.LBB16:
 651              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 652              		.loc 1 98 22 is_stmt 0 view .LVU170
 653 025c 487AF0EE 		vmov.f32	s15, s16	@ tmp256, tmp257
 654              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 655              		.loc 1 98 56 view .LVU171
 656 0260 2D6ADFED 		vldr.32	s13, .L21+24	@ tmp259,
 657              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 658              		.loc 1 98 79 view .LVU172
 659 0264 2D7A9FED 		vldr.32	s14, .L21+28	@ tmp262,
 660              	.LBE16:
 661              	.LBE32:
 662              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 663              		.loc 1 187 61 view .LVU173
 664 0268 141094E5 		ldr	r1, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 665              	.LBB33:
 666              	.LBB17:
 667              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 668              		.loc 1 98 22 view .LVU174
 669 026c 8A7A49EE 		vmla.f32	s15, s19, s20	@ tmp256, _48, tmp255
 670              	.LBE17:
 671              	.LBE33:
 672              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 673              		.loc 1 187 65 view .LVU175
 674 0270 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 675 0274 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_19 + 4B], MEM[(int *)_19 + 4B]
 676              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 677              		.loc 1 187 36 view .LVU176
 678 0278 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 679              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 680              		.loc 1 187 22 view .LVU177
 681 027c 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 682              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 683              		.loc 1 187 65 view .LVU178
 684 0280 920102E0 		mul	r2, r2, r1	@ tmp247, img_41(D)->height, MEM[(int *)_19 + 4B]
 685              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 686              		.loc 1 187 22 view .LVU179
 687 0284 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_13 + 4B], MEM[(int *)_13 + 4B]
 688              	.LBB34:
 689              	.LBB18:
 690              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 691              		.loc 1 98 46 view .LVU180
 692 0288 667A49EE 		vmls.f32	s15, s18, s13	@ tmp260, _53, tmp259
 693              	.LBE18:
 694              	.LBE34:
 695              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 696              		.loc 1 187 80 view .LVU181
 697 028c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp252, tmp247, tmp247,
 698              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 699              		.loc 1 187 5 view .LVU182
 700 0290 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_13 + 4B]
 701 0294 C220A0E1 		asr	r2, r2, #1	@, tmp252,
 702              	.LBB35:
 703              	.LBB19:
 704              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 705              		.loc 1 98 69 view .LVU183
 706 0298 C77A48EE 		vmls.f32	s15, s17, s14	@ tmp263, _58, tmp262
 707              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 708              		.loc 1 98 16 view .LVU184
 709 029c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp265, tmp263
 710 02a0 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp265, %sfp
 711              	.LBE19:
 712              	.LBE35:
 713              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 714              		.loc 1 187 5 view .LVU185
 715 02a4 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 716 02a8 FEFFFFEB 		bl	memset		@
 717              	.LVL27:
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 718              		.loc 1 188 5 is_stmt 1 view .LVU186
 719              	.LBB36:
 720              	.LBB20:
 721              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 722              		.loc 1 97 33 is_stmt 0 view .LVU187
 723 02ac 1C7A9FED 		vldr.32	s14, .L21+32	@ tmp306,
 724              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 725              		.loc 1 97 56 view .LVU188
 726 02b0 1C7ADFED 		vldr.32	s15, .L21+36	@ tmp310,
 727              	.LBE20:
 728              	.LBE36:
 729              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 730              		.loc 1 188 61 view .LVU189
 731 02b4 143094E5 		ldr	r3, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 732              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 733              		.loc 1 188 65 view .LVU190
 734 02b8 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 735              	.LBB37:
 736              	.LBB21:
 737              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 738              		.loc 1 97 22 view .LVU191
 739 02bc 878A09EE 		vmla.f32	s16, s19, s14	@ tmp307, _48, tmp306
 740              	.LBE21:
 741              	.LBE37:
 742              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 743              		.loc 1 188 65 view .LVU192
 744 02c0 081093E5 		ldr	r1, [r3, #8]	@ MEM[(int *)_32 + 8B], MEM[(int *)_32 + 8B]
 745              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 746              		.loc 1 188 36 view .LVU193
 747 02c4 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 748              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 749              		.loc 1 188 22 view .LVU194
 750 02c8 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 751              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 752              		.loc 1 188 65 view .LVU195
 753 02cc 920102E0 		mul	r2, r2, r1	@ tmp298, img_41(D)->height, MEM[(int *)_32 + 8B]
 754              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 755              		.loc 1 188 22 view .LVU196
 756 02d0 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_26 + 8B], MEM[(int *)_26 + 8B]
 757              	.LBB38:
 758              	.LBB22:
 759              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 760              		.loc 1 97 46 view .LVU197
 761 02d4 678A09EE 		vmls.f32	s16, s18, s15	@ tmp311, _53, tmp310
 762              	.LBE22:
 763              	.LBE38:
 764              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 765              		.loc 1 188 80 view .LVU198
 766 02d8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp303, tmp298, tmp298,
 767              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 768              		.loc 1 188 5 view .LVU199
 769 02dc 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_26 + 8B]
 770 02e0 C220A0E1 		asr	r2, r2, #1	@, tmp303,
 771              	.LBB39:
 772              	.LBB23:
 773              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 774              		.loc 1 97 69 view .LVU200
 775 02e4 8A8A08EE 		vmla.f32	s16, s17, s20	@ tmp314, _58, tmp255
 776              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 777              		.loc 1 97 16 view .LVU201
 778 02e8 C87AFCEE 		vcvt.u32.f32	s15, s16	@ tmp316, tmp314
 779 02ec 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp316, %sfp
 780              	.LBE23:
 781              	.LBE39:
 782              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 783              		.loc 1 188 5 view .LVU202
 784 02f0 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 785              	@ armwave.c:189: }
 189:armwave.c     **** }
 786              		.loc 1 189 1 view .LVU203
 787 02f4 08D08DE2 		add	sp, sp, #8	@,,
 788              		.cfi_def_cfa_offset 32
 789              		@ sp needed	@
 790 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 791              		.cfi_restore 84
 792              		.cfi_restore 85
 793              		.cfi_restore 82
 794              		.cfi_restore 83
 795              		.cfi_restore 80
 796              		.cfi_restore 81
 797              		.cfi_def_cfa_offset 8
 798 02fc 1040BDE8 		pop	{r4, lr}	@
 799              		.cfi_restore 14
 800              		.cfi_restore 4
 801              		.cfi_def_cfa_offset 0
 802              	.LVL28:
 803              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 804              		.loc 1 188 5 view .LVU204
 805 0300 FEFFFFEA 		b	memset		@
 806              	.LVL29:
 807              	.L22:
 808              		.align	2
 809              	.L21:
 810 0304 6F12833E 		.word	1048777327
 811 0308 00008041 		.word	1098907648
 812 030c 2506013F 		.word	1057031717
 813 0310 F0A7C63D 		.word	1036429296
 814 0314 00000043 		.word	1124073472
 815 0318 9CC4E03E 		.word	1054917788
 816 031c 7F6ABC3E 		.word	1052535423
 817 0320 7368913D 		.word	1032939635
 818 0324 508D17BE 		.word	-1105752752
 819 0328 F4FD943E 		.word	1049951732
 820              		.cfi_endproc
 821              	.LFE61:
 823              		.align	2
 824              		.global	armwave_prep_yuv_palette
 825              		.syntax unified
 826              		.arm
 827              		.fpu vfp
 829              	armwave_prep_yuv_palette:
 830              	.LVL30:
 831              	.LFB62:
 190:armwave.c     **** 
 191:armwave.c     **** /*
 192:armwave.c     ****  * Prepare the YUV table for a given range of intensities.
 193:armwave.c     ****  *
 194:armwave.c     ****  * This can be used to generate different palettes. Right now only
 195:armwave.c     ****  * the default palette '0' is supported which is linear intensity with
 196:armwave.c     ****  * given trace colour.
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_prep_yuv_palette(int palette, struct armwave_color_mix_t *color0, struct armwave_color
 199:armwave.c     **** {
 832              		.loc 1 199 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     int v;
 836              		.loc 1 200 5 view .LVU206
 201:armwave.c     ****     float h;
 837              		.loc 1 201 5 view .LVU207
 202:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 838              		.loc 1 202 5 view .LVU208
 203:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 839              		.loc 1 203 5 view .LVU209
 204:armwave.c     ****     
 205:armwave.c     ****     switch(palette) {
 840              		.loc 1 205 5 view .LVU210
 841              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 842              		.loc 1 199 1 is_stmt 0 view .LVU211
 843 032c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 844              		.cfi_def_cfa_offset 32
 845              		.cfi_offset 4, -32
 846              		.cfi_offset 5, -28
 847              		.cfi_offset 6, -24
 848              		.cfi_offset 7, -20
 849              		.cfi_offset 8, -16
 850              		.cfi_offset 9, -12
 851              		.cfi_offset 10, -8
 852              		.cfi_offset 14, -4
 853 0330 068B2DED 		vpush.64	{d8, d9, d10}	@
 854              		.cfi_def_cfa_offset 56
 855              		.cfi_offset 80, -56
 856              		.cfi_offset 81, -52
 857              		.cfi_offset 82, -48
 858              		.cfi_offset 83, -44
 859              		.cfi_offset 84, -40
 860              		.cfi_offset 85, -36
 861              	@ armwave.c:205:     switch(palette) {
 862              		.loc 1 205 5 view .LVU212
 863 0334 010050E3 		cmp	r0, #1	@ palette,
 864              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 865              		.loc 1 199 1 view .LVU213
 866 0338 0160A0E1 		mov	r6, r1	@ color0, color0
 867 033c 18D04DE2 		sub	sp, sp, #24	@,,
 868              		.cfi_def_cfa_offset 80
 869              	@ armwave.c:205:     switch(palette) {
 870              		.loc 1 205 5 view .LVU214
 871 0340 1500000A 		beq	.L24		@,
 872 0344 020050E3 		cmp	r0, #2	@ palette,
 873 0348 0050A0E1 		mov	r5, r0	@ palette, palette
 874 034c 9F00000A 		beq	.L25		@,
 875 0350 000050E3 		cmp	r0, #0	@ palette,
 876 0354 5700000A 		beq	.L48		@,
 877              	.LVL31:
 878              	.L26:
 879              		.loc 1 205 5 view .LVU215
 880 0358 54449FE5 		ldr	r4, .L49+36	@ ivtmp.148,
 881              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 206:armwave.c     ****         case PLT_SINGLE_COLOUR:
 207:armwave.c     ****             for(v = 0; v < 256; v++) {
 208:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 210:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 211:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 212:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 213:armwave.c     ****             }
 214:armwave.c     ****             break;
 215:armwave.c     ****         
 216:armwave.c     ****         case PLT_INVERT_SINGLE_COLOUR:
 217:armwave.c     ****             for(v = 0; v < 256; v++) {
 218:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 220:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 221:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 222:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 223:armwave.c     ****             }
 224:armwave.c     ****             break;
 225:armwave.c     ****         
 226:armwave.c     ****         case PLT_RAINBOW_THERMAL:
 227:armwave.c     ****             for(v = 0; v < 256; v++) {
 228:armwave.c     ****                 hsv_temp.h = v;
 229:armwave.c     ****                 hsv_temp.s = 255;
 230:armwave.c     ****                 
 231:armwave.c     ****                 if(v < 20) {
 232:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 233:armwave.c     ****                 } else {
 234:armwave.c     ****                     hsv_temp.v = 255;
 235:armwave.c     ****                 }
 236:armwave.c     ****                 
 237:armwave.c     ****                 hsv2rgb(&hsv_temp, &rgb_temp);
 238:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 239:armwave.c     ****                 
 240:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h, hsv_temp.s, hsv
 241:armwave.c     ****             }
 242:armwave.c     ****             break;
 243:armwave.c     ****     }
 244:armwave.c     ****     
 245:armwave.c     ****     for(v = 0; v < 256; v++) {
 246:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 882              		.loc 1 246 9 discriminator 3 view .LVU216
 883 035c 54649FE5 		ldr	r6, .L49+40	@ tmp518,
 884              	.LBB48:
 885              	.LBB49:
 886              	@ armwave.c:125:     switch (region)
 125:armwave.c     ****     {
 887              		.loc 1 125 5 discriminator 3 view .LVU217
 888 0360 0050A0E3 		mov	r5, #0	@ v,
 889              	.L40:
 890              	.LVL32:
 125:armwave.c     ****     {
 891              		.loc 1 125 5 discriminator 3 view .LVU218
 892              	.LBE49:
 893              	.LBE48:
 894              		.loc 1 246 9 is_stmt 1 discriminator 3 view .LVU219
 895 0364 0210D4E5 		ldrb	r1, [r4, #2]	@ zero_extendqisi2	@ MEM[base: _415, offset: 2B], MEM[base: _415, offset: 2B]
 896 0368 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2	@, MEM[base: _415, offset: 1B]
 897 036c 0020D4E5 		ldrb	r2, [r4]	@ zero_extendqisi2	@, MEM[base: _415, offset: 0B]
 898 0370 0600A0E1 		mov	r0, r6	@, tmp518
 899 0374 00108DE5 		str	r1, [sp]	@ MEM[base: _415, offset: 2B],
 900 0378 0510A0E1 		mov	r1, r5	@, v
 901              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 902              		.loc 1 245 26 is_stmt 0 discriminator 3 view .LVU220
 903 037c 015085E2 		add	r5, r5, #1	@ v, v,
 904              	.LVL33:
 905              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 906              		.loc 1 246 9 discriminator 3 view .LVU221
 907 0380 FEFFFFEB 		bl	printf		@
 908              	.LVL34:
 909              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 910              		.loc 1 245 5 discriminator 3 view .LVU222
 911 0384 010C55E3 		cmp	r5, #256	@ v,
 912 0388 034084E2 		add	r4, r4, #3	@ ivtmp.148, ivtmp.148,
 913 038c F4FFFF1A 		bne	.L40		@,
 914              	@ armwave.c:248: }
 247:armwave.c     ****     }
 248:armwave.c     **** }
 915              		.loc 1 248 1 view .LVU223
 916 0390 18D08DE2 		add	sp, sp, #24	@,,
 917              		.cfi_remember_state
 918              		.cfi_def_cfa_offset 56
 919              		@ sp needed	@
 920 0394 068BBDEC 		vldm	sp!, {d8-d10}	@,
 921              		.cfi_restore 84
 922              		.cfi_restore 85
 923              		.cfi_restore 82
 924              		.cfi_restore 83
 925              		.cfi_restore 80
 926              		.cfi_restore 81
 927              		.cfi_def_cfa_offset 32
 928 0398 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 929              	.LVL35:
 930              	.L24:
 931              		.cfi_restore_state
 932              	.LBB59:
 933              	.LBB60:
 934              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 935              		.loc 1 96 33 view .LVU224
 936 039c FBAA9FED 		vldr.32	s20, .L49	@ tmp352,
 937              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 938              		.loc 1 96 22 view .LVU225
 939 03a0 FB9ADFED 		vldr.32	s19, .L49+4	@ tmp354,
 940              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 941              		.loc 1 96 56 view .LVU226
 942 03a4 FB9A9FED 		vldr.32	s18, .L49+8	@ tmp356,
 943              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 944              		.loc 1 96 79 view .LVU227
 945 03a8 FB8ADFED 		vldr.32	s17, .L49+12	@ tmp359,
 946              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 947              		.loc 1 97 33 view .LVU228
 948 03ac FB8A9FED 		vldr.32	s16, .L49+16	@ tmp364,
 949 03b0 FC739FE5 		ldr	r7, .L49+36	@ ivtmp.162,
 950              	.LBE60:
 951              	.LBE59:
 952              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 953              		.loc 1 221 17 view .LVU229
 954 03b4 00849FE5 		ldr	r8, .L49+44	@ tmp525,
 955              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 956              		.loc 1 217 19 view .LVU230
 957 03b8 0050A0E3 		mov	r5, #0	@ v,
 958              	.LVL36:
 959              	.L28:
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 960              		.loc 1 218 17 is_stmt 1 discriminator 3 view .LVU231
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 961              		.loc 1 219 17 discriminator 3 view .LVU232
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 962              		.loc 1 220 17 discriminator 3 view .LVU233
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 963              		.loc 1 221 17 discriminator 3 view .LVU234
 964              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 965              		.loc 1 218 30 is_stmt 0 discriminator 3 view .LVU235
 966 03bc F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 967              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 968              		.loc 1 219 30 discriminator 3 view .LVU236
 969 03c0 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 970              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 971              		.loc 1 220 30 discriminator 3 view .LVU237
 972 03c4 F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 973              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 974              		.loc 1 221 17 discriminator 3 view .LVU238
 975 03c8 FF1065E2 		rsb	r1, r5, #255	@, v,
 976              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 977              		.loc 1 218 30 discriminator 3 view .LVU239
 978 03cc 950202E0 		mul	r2, r5, r2	@ tmp342, v, color0_82(D)->r
 979              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 980              		.loc 1 219 30 discriminator 3 view .LVU240
 981 03d0 950303E0 		mul	r3, r5, r3	@ tmp345, v, color0_82(D)->g
 982              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 983              		.loc 1 220 30 discriminator 3 view .LVU241
 984 03d4 950000E0 		mul	r0, r5, r0	@ tmp348, v, color0_82(D)->b
 985              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 986              		.loc 1 218 30 discriminator 3 view .LVU242
 987 03d8 4224A0E1 		asr	r2, r2, #8	@ tmp340, tmp342,
 988              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 989              		.loc 1 219 30 discriminator 3 view .LVU243
 990 03dc 4334A0E1 		asr	r3, r3, #8	@ tmp343, tmp345,
 991              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 992              		.loc 1 218 30 discriminator 3 view .LVU244
 993 03e0 FF0052E3 		cmp	r2, #255	@ tmp340,
 994              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 995              		.loc 1 220 30 discriminator 3 view .LVU245
 996 03e4 4004A0E1 		asr	r0, r0, #8	@ tmp346, tmp348,
 997              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 998              		.loc 1 218 30 discriminator 3 view .LVU246
 999 03e8 FF20A0A3 		movge	r2, #255	@ tmp340,
 1000              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1001              		.loc 1 219 30 discriminator 3 view .LVU247
 1002 03ec FF0053E3 		cmp	r3, #255	@ tmp343,
 1003 03f0 FF30A0A3 		movge	r3, #255	@ tmp343,
 1004              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1005              		.loc 1 220 30 discriminator 3 view .LVU248
 1006 03f4 FF0050E3 		cmp	r0, #255	@ tmp346,
 1007 03f8 FF00A0A3 		movge	r0, #255	@ tmp346,
 1008 03fc 72A0EFE6 		uxtb	r10, r2	@ _78, tmp340
 1009 0400 7040EFE6 		uxtb	r4, r0	@ _100, tmp346
 1010 0404 7390EFE6 		uxtb	r9, r3	@ _99, tmp343
 1011              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 1012              		.loc 1 221 17 discriminator 3 view .LVU249
 1013 0408 0930A0E1 		mov	r3, r9	@, _99
 1014 040c 0A20A0E1 		mov	r2, r10	@, _78
 1015 0410 00408DE5 		str	r4, [sp]	@ _100,
 1016 0414 0800A0E1 		mov	r0, r8	@, tmp525
 1017 0418 FEFFFFEB 		bl	printf		@
 1018              	.LVL37:
 222:armwave.c     ****             }
 1019              		.loc 1 222 17 is_stmt 1 discriminator 3 view .LVU250
 1020              	.LBB63:
 1021              	.LBI59:
  94:armwave.c     **** {
 1022              		.loc 1 94 6 discriminator 3 view .LVU251
 1023              	.LBB61:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1024              		.loc 1 96 5 discriminator 3 view .LVU252
 1025              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1026              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU253
 1027 041c 90AA07EE 		vmov	s15, r10	@ int	@ _78, _78
 1028              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1029              		.loc 1 97 22 discriminator 3 view .LVU254
 1030 0420 E86A9FED 		vldr.32	s12, .L49+56	@ tmp366,
 1031              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1032              		.loc 1 96 22 discriminator 3 view .LVU255
 1033 0424 695AB0EE 		vmov.f32	s10, s19	@ tmp353, tmp354
 1034              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1035              		.loc 1 97 79 discriminator 3 view .LVU256
 1036 0428 E74ADFED 		vldr.32	s9, .L49+60	@ tmp371,
 1037              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1038              		.loc 1 96 33 discriminator 3 view .LVU257
 1039 042c E76AF8EE 		vcvt.f32.s32	s13, s15	@ _139, _78
 1040              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1041              		.loc 1 96 56 discriminator 3 view .LVU258
 1042 0430 909A07EE 		vmov	s15, r9	@ int	@ _99, _99
 1043              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1044              		.loc 1 97 22 discriminator 3 view .LVU259
 1045 0434 465AF0EE 		vmov.f32	s11, s12	@ tmp365, tmp366
 1046              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1047              		.loc 1 97 56 discriminator 3 view .LVU260
 1048 0438 D93A9FED 		vldr.32	s6, .L49+20	@ tmp368,
 1049              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1050              		.loc 1 98 56 discriminator 3 view .LVU261
 1051 043c D93ADFED 		vldr.32	s7, .L49+24	@ tmp380,
 1052              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1053              		.loc 1 96 56 discriminator 3 view .LVU262
 1054 0440 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _144, _99
 1055              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1056              		.loc 1 96 79 discriminator 3 view .LVU263
 1057 0444 904A07EE 		vmov	s15, r4	@ int	@ _100, _100
 1058              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1059              		.loc 1 98 79 discriminator 3 view .LVU264
 1060 0448 E44A9FED 		vldr.32	s8, .L49+80	@ tmp383,
 1061              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1062              		.loc 1 96 22 discriminator 3 view .LVU265
 1063 044c 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp353, _139, tmp352
 1064              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1065              		.loc 1 97 22 discriminator 3 view .LVU266
 1066 0450 885A46EE 		vmla.f32	s11, s13, s16	@ tmp365, _139, tmp364
 1067              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1068              		.loc 1 96 79 discriminator 3 view .LVU267
 1069 0454 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _149, _100
 1070              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1071              		.loc 1 98 22 discriminator 3 view .LVU268
 1072 0458 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp377, _139, tmp371
 1073              	.LBE61:
 1074              	.LBE63:
 1075              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1076              		.loc 1 217 34 discriminator 3 view .LVU269
 1077 045c 015085E2 		add	r5, r5, #1	@ v, v,
 1078              	.LVL38:
 1079              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1080              		.loc 1 217 13 discriminator 3 view .LVU270
 1081 0460 010C55E3 		cmp	r5, #256	@ v,
 1082 0464 037047E2 		sub	r7, r7, #3	@ ivtmp.162, ivtmp.162,
 1083              	.LBB64:
 1084              	.LBB62:
 1085              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1086              		.loc 1 96 46 discriminator 3 view .LVU271
 1087 0468 095A07EE 		vmla.f32	s10, s14, s18	@ tmp357, _144, tmp356
 1088              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1089              		.loc 1 97 46 discriminator 3 view .LVU272
 1090 046c 656AF0EE 		vmov.f32	s13, s11	@ tmp365, tmp365
 1091              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1092              		.loc 1 98 46 discriminator 3 view .LVU273
 1093 0470 636A07EE 		vmls.f32	s12, s14, s7	@ tmp381, _144, tmp380
 1094              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1095              		.loc 1 97 46 discriminator 3 view .LVU274
 1096 0474 436A47EE 		vmls.f32	s13, s14, s6	@ tmp365, _144, tmp368
 1097              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1098              		.loc 1 96 69 discriminator 3 view .LVU275
 1099 0478 455AF0EE 		vmov.f32	s11, s10	@ tmp357, tmp357
 1100              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1101              		.loc 1 98 69 discriminator 3 view .LVU276
 1102 047c C46A07EE 		vmls.f32	s12, s15, s8	@ tmp384, _149, tmp383
 1103              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1104              		.loc 1 96 69 discriminator 3 view .LVU277
 1105 0480 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp357, _149, tmp359
 1106              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1107              		.loc 1 97 69 discriminator 3 view .LVU278
 1108 0484 667AB0EE 		vmov.f32	s14, s13	@ tmp369, tmp369
 1109 0488 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp369, _149, tmp371
 1110              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1111              		.loc 1 96 16 discriminator 3 view .LVU279
 1112 048c E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp361, tmp360
 1113 0490 901A17EE 		vmov	r1, s15	@ int	@ tmp361, tmp361
 1114              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1115              		.loc 1 97 16 discriminator 3 view .LVU280
 1116 0494 C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp373, tmp372
 1117              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1118              		.loc 1 96 16 discriminator 3 view .LVU281
 1119 0498 0013C7E5 		strb	r1, [r7, #768]	@ tmp361, MEM[base: _399, offset: 765B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1120              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU282
 1121              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1122              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU283
 1123 049c 902A17EE 		vmov	r2, s15	@ int	@ tmp373, tmp373
 1124              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1125              		.loc 1 98 16 discriminator 3 view .LVU284
 1126 04a0 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp385, tmp384
 1127              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1128              		.loc 1 97 16 discriminator 3 view .LVU285
 1129 04a4 0123C7E5 		strb	r2, [r7, #769]	@ tmp373, MEM[base: _399, offset: 766B]
  98:armwave.c     **** }
 1130              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU286
 1131              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1132              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU287
 1133 04a8 903A17EE 		vmov	r3, s15	@ int	@ tmp385, tmp385
 1134 04ac 0233C7E5 		strb	r3, [r7, #770]	@ tmp385, MEM[base: _399, offset: 767B]
 1135              	.LVL39:
  98:armwave.c     **** }
 1136              		.loc 1 98 16 discriminator 3 view .LVU288
 1137              	.LBE62:
 1138              	.LBE64:
 1139              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1140              		.loc 1 217 13 discriminator 3 view .LVU289
 1141 04b0 C1FFFF1A 		bne	.L28		@,
 1142 04b4 A7FFFFEA 		b	.L26		@
 1143              	.LVL40:
 1144              	.L48:
 1145              	.LBB65:
 1146              	.LBB66:
 1147              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1148              		.loc 1 96 33 view .LVU290
 1149 04b8 B4AA9FED 		vldr.32	s20, .L49	@ tmp305,
 1150              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1151              		.loc 1 96 22 view .LVU291
 1152 04bc B49ADFED 		vldr.32	s19, .L49+4	@ tmp307,
 1153              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1154              		.loc 1 96 56 view .LVU292
 1155 04c0 B49A9FED 		vldr.32	s18, .L49+8	@ tmp309,
 1156              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1157              		.loc 1 96 79 view .LVU293
 1158 04c4 B48ADFED 		vldr.32	s17, .L49+12	@ tmp312,
 1159              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1160              		.loc 1 97 33 view .LVU294
 1161 04c8 B48A9FED 		vldr.32	s16, .L49+16	@ tmp317,
 1162 04cc E0729FE5 		ldr	r7, .L49+36	@ ivtmp.155,
 1163              	.LBE66:
 1164              	.LBE65:
 1165              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1166              		.loc 1 211 17 view .LVU295
 1167 04d0 E4829FE5 		ldr	r8, .L49+44	@ tmp519,
 1168              	.LVL41:
 1169              	.L27:
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1170              		.loc 1 208 17 is_stmt 1 discriminator 3 view .LVU296
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1171              		.loc 1 209 17 discriminator 3 view .LVU297
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1172              		.loc 1 210 17 discriminator 3 view .LVU298
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1173              		.loc 1 211 17 discriminator 3 view .LVU299
 1174              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1175              		.loc 1 208 30 is_stmt 0 discriminator 3 view .LVU300
 1176 04d4 F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 1177              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1178              		.loc 1 209 30 discriminator 3 view .LVU301
 1179 04d8 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 1180              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1181              		.loc 1 210 30 discriminator 3 view .LVU302
 1182 04dc F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 1183              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1184              		.loc 1 211 17 discriminator 3 view .LVU303
 1185 04e0 0510A0E1 		mov	r1, r5	@, palette
 1186              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1187              		.loc 1 208 30 discriminator 3 view .LVU304
 1188 04e4 950202E0 		mul	r2, r5, r2	@ tmp296, palette, color0_82(D)->r
 1189              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1190              		.loc 1 209 30 discriminator 3 view .LVU305
 1191 04e8 950303E0 		mul	r3, r5, r3	@ tmp299, palette, color0_82(D)->g
 1192              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1193              		.loc 1 210 30 discriminator 3 view .LVU306
 1194 04ec 950000E0 		mul	r0, r5, r0	@ tmp302, palette, color0_82(D)->b
 1195              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1196              		.loc 1 208 30 discriminator 3 view .LVU307
 1197 04f0 4224A0E1 		asr	r2, r2, #8	@ tmp294, tmp296,
 1198              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1199              		.loc 1 209 30 discriminator 3 view .LVU308
 1200 04f4 4334A0E1 		asr	r3, r3, #8	@ tmp297, tmp299,
 1201              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1202              		.loc 1 208 30 discriminator 3 view .LVU309
 1203 04f8 FF0052E3 		cmp	r2, #255	@ tmp294,
 1204              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1205              		.loc 1 210 30 discriminator 3 view .LVU310
 1206 04fc 4004A0E1 		asr	r0, r0, #8	@ tmp300, tmp302,
 1207              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1208              		.loc 1 208 30 discriminator 3 view .LVU311
 1209 0500 FF20A0A3 		movge	r2, #255	@ tmp294,
 1210              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1211              		.loc 1 209 30 discriminator 3 view .LVU312
 1212 0504 FF0053E3 		cmp	r3, #255	@ tmp297,
 1213 0508 FF30A0A3 		movge	r3, #255	@ tmp297,
 1214              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1215              		.loc 1 210 30 discriminator 3 view .LVU313
 1216 050c FF0050E3 		cmp	r0, #255	@ tmp300,
 1217 0510 FF00A0A3 		movge	r0, #255	@ tmp300,
 1218 0514 72A0EFE6 		uxtb	r10, r2	@ _93, tmp294
 1219 0518 7040EFE6 		uxtb	r4, r0	@ _259, tmp300
 1220 051c 7390EFE6 		uxtb	r9, r3	@ _87, tmp297
 1221              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1222              		.loc 1 211 17 discriminator 3 view .LVU314
 1223 0520 0930A0E1 		mov	r3, r9	@, _87
 1224 0524 0A20A0E1 		mov	r2, r10	@, _93
 1225 0528 00408DE5 		str	r4, [sp]	@ _259,
 1226 052c 0800A0E1 		mov	r0, r8	@, tmp519
 1227 0530 FEFFFFEB 		bl	printf		@
 1228              	.LVL42:
 212:armwave.c     ****             }
 1229              		.loc 1 212 17 is_stmt 1 discriminator 3 view .LVU315
 1230              	.LBB69:
 1231              	.LBI65:
  94:armwave.c     **** {
 1232              		.loc 1 94 6 discriminator 3 view .LVU316
 1233              	.LBB67:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1234              		.loc 1 96 5 discriminator 3 view .LVU317
 1235              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1236              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU318
 1237 0534 90AA07EE 		vmov	s15, r10	@ int	@ _93, _93
 1238              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1239              		.loc 1 97 22 discriminator 3 view .LVU319
 1240 0538 A26A9FED 		vldr.32	s12, .L49+56	@ tmp319,
 1241              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1242              		.loc 1 96 22 discriminator 3 view .LVU320
 1243 053c 695AB0EE 		vmov.f32	s10, s19	@ tmp306, tmp307
 1244              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1245              		.loc 1 97 79 discriminator 3 view .LVU321
 1246 0540 A14ADFED 		vldr.32	s9, .L49+60	@ tmp324,
 1247              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1248              		.loc 1 96 33 discriminator 3 view .LVU322
 1249 0544 E76AF8EE 		vcvt.f32.s32	s13, s15	@ _109, _93
 1250              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1251              		.loc 1 96 56 discriminator 3 view .LVU323
 1252 0548 909A07EE 		vmov	s15, r9	@ int	@ _87, _87
 1253              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1254              		.loc 1 97 22 discriminator 3 view .LVU324
 1255 054c 465AF0EE 		vmov.f32	s11, s12	@ tmp318, tmp319
 1256              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1257              		.loc 1 97 56 discriminator 3 view .LVU325
 1258 0550 933A9FED 		vldr.32	s6, .L49+20	@ tmp321,
 1259              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1260              		.loc 1 98 56 discriminator 3 view .LVU326
 1261 0554 933ADFED 		vldr.32	s7, .L49+24	@ tmp333,
 1262              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1263              		.loc 1 96 56 discriminator 3 view .LVU327
 1264 0558 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _114, _87
 1265              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1266              		.loc 1 96 79 discriminator 3 view .LVU328
 1267 055c 904A07EE 		vmov	s15, r4	@ int	@ _259, _259
 1268              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1269              		.loc 1 98 79 discriminator 3 view .LVU329
 1270 0560 9E4A9FED 		vldr.32	s8, .L49+80	@ tmp336,
 1271              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1272              		.loc 1 96 22 discriminator 3 view .LVU330
 1273 0564 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp306, _109, tmp305
 1274              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1275              		.loc 1 97 22 discriminator 3 view .LVU331
 1276 0568 885A46EE 		vmla.f32	s11, s13, s16	@ tmp318, _109, tmp317
 1277              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1278              		.loc 1 96 79 discriminator 3 view .LVU332
 1279 056c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _119, _259
 1280              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1281              		.loc 1 98 22 discriminator 3 view .LVU333
 1282 0570 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp330, _109, tmp324
 1283              	.LBE67:
 1284              	.LBE69:
 1285              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1286              		.loc 1 207 34 discriminator 3 view .LVU334
 1287 0574 015085E2 		add	r5, r5, #1	@ palette, palette,
 1288              	.LVL43:
 1289              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1290              		.loc 1 207 13 discriminator 3 view .LVU335
 1291 0578 010C55E3 		cmp	r5, #256	@ palette,
 1292 057c 037087E2 		add	r7, r7, #3	@ ivtmp.155, ivtmp.155,
 1293              	.LBB70:
 1294              	.LBB68:
 1295              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1296              		.loc 1 96 46 discriminator 3 view .LVU336
 1297 0580 095A07EE 		vmla.f32	s10, s14, s18	@ tmp310, _114, tmp309
 1298              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1299              		.loc 1 97 46 discriminator 3 view .LVU337
 1300 0584 656AF0EE 		vmov.f32	s13, s11	@ tmp318, tmp318
 1301              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1302              		.loc 1 98 46 discriminator 3 view .LVU338
 1303 0588 636A07EE 		vmls.f32	s12, s14, s7	@ tmp334, _114, tmp333
 1304              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1305              		.loc 1 97 46 discriminator 3 view .LVU339
 1306 058c 436A47EE 		vmls.f32	s13, s14, s6	@ tmp318, _114, tmp321
 1307              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1308              		.loc 1 96 69 discriminator 3 view .LVU340
 1309 0590 455AF0EE 		vmov.f32	s11, s10	@ tmp310, tmp310
 1310              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1311              		.loc 1 98 69 discriminator 3 view .LVU341
 1312 0594 C46A07EE 		vmls.f32	s12, s15, s8	@ tmp337, _119, tmp336
 1313              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1314              		.loc 1 96 69 discriminator 3 view .LVU342
 1315 0598 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp310, _119, tmp312
 1316              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1317              		.loc 1 97 69 discriminator 3 view .LVU343
 1318 059c 667AB0EE 		vmov.f32	s14, s13	@ tmp322, tmp322
 1319 05a0 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp322, _119, tmp324
 1320              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1321              		.loc 1 96 16 discriminator 3 view .LVU344
 1322 05a4 E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp314, tmp313
 1323 05a8 901A17EE 		vmov	r1, s15	@ int	@ tmp314, tmp314
 1324              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1325              		.loc 1 97 16 discriminator 3 view .LVU345
 1326 05ac C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp326, tmp325
 1327              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1328              		.loc 1 96 16 discriminator 3 view .LVU346
 1329 05b0 031047E5 		strb	r1, [r7, #-3]	@ tmp314, MEM[base: _409, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1330              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU347
 1331              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1332              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU348
 1333 05b4 902A17EE 		vmov	r2, s15	@ int	@ tmp326, tmp326
 1334              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1335              		.loc 1 98 16 discriminator 3 view .LVU349
 1336 05b8 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp338, tmp337
 1337              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1338              		.loc 1 97 16 discriminator 3 view .LVU350
 1339 05bc 022047E5 		strb	r2, [r7, #-2]	@ tmp326, MEM[base: _409, offset: 1B]
  98:armwave.c     **** }
 1340              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU351
 1341              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1342              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU352
 1343 05c0 903A17EE 		vmov	r3, s15	@ int	@ tmp338, tmp338
 1344 05c4 013047E5 		strb	r3, [r7, #-1]	@ tmp338, MEM[base: _409, offset: 2B]
 1345              	.LVL44:
  98:armwave.c     **** }
 1346              		.loc 1 98 16 discriminator 3 view .LVU353
 1347              	.LBE68:
 1348              	.LBE70:
 1349              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1350              		.loc 1 207 13 discriminator 3 view .LVU354
 1351 05c8 C1FFFF1A 		bne	.L27		@,
 1352 05cc 61FFFFEA 		b	.L26		@
 1353              	.LVL45:
 1354              	.L25:
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1355              		.loc 1 207 13 discriminator 3 view .LVU355
 1356 05d0 758A9FED 		vldr.32	s16, .L49+28	@ _354,
 1357              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1358              		.loc 1 232 48 view .LVU356
 1359 05d4 75AA9FED 		vldr.32	s20, .L49+32	@ tmp521,
 1360 05d8 6E9ADFED 		vldr.32	s19, .L49+8	@ tmp522,
 1361 05dc 709A9FED 		vldr.32	s18, .L49+20	@ tmp523,
 1362 05e0 708ADFED 		vldr.32	s17, .L49+24	@ tmp524,
 1363 05e4 C8519FE5 		ldr	r5, .L49+36	@ ivtmp.169,
 1364              	.LBB71:
 1365              	.LBB50:
 1366              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1367              		.loc 1 118 12 view .LVU357
 1368 05e8 D0619FE5 		ldr	r6, .L49+48	@ tmp394,
 1369              	.LBE50:
 1370              	.LBE71:
 1371              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1372              		.loc 1 227 19 view .LVU358
 1373 05ec 0040A0E3 		mov	r4, #0	@ v,
 1374              	.LVL46:
 1375              	.L39:
 228:armwave.c     ****                 hsv_temp.s = 255;
 1376              		.loc 1 228 17 is_stmt 1 view .LVU359
 1377              	@ armwave.c:231:                 if(v < 20) {
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1378              		.loc 1 231 19 is_stmt 0 view .LVU360
 1379 05f0 130054E3 		cmp	r4, #19	@ v,
 1380 05f4 7420EFE6 		uxtb	r2, r4	@ _390, v
 1381              	.LVL47:
 229:armwave.c     ****                 
 1382              		.loc 1 229 17 is_stmt 1 view .LVU361
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1383              		.loc 1 231 17 view .LVU362
 232:armwave.c     ****                 } else {
 1384              		.loc 1 232 21 view .LVU363
 237:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1385              		.loc 1 237 17 view .LVU364
 1386              	.LBB72:
 1387              	.LBI48:
 106:armwave.c     **** {
 1388              		.loc 1 106 6 view .LVU365
 1389              	.LBB51:
 108:armwave.c     **** 
 1390              		.loc 1 108 5 view .LVU366
 110:armwave.c     ****     {
 1391              		.loc 1 110 5 view .LVU367
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1392              		.loc 1 118 5 view .LVU368
 1393              	.LBE51:
 1394              	.LBE72:
 1395              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1396              		.loc 1 232 48 is_stmt 0 view .LVU369
 1397 05f8 904A07DE 		vmovle	s15, r4	@ int	@ v, v
 1398              	.LBB73:
 1399              	.LBB52:
 1400              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1401              		.loc 1 118 12 view .LVU370
 1402 05fc 963282E0 		umull	r3, r2, r6, r2	@ tmp527, tmp393, tmp394, _390
 1403              	.LVL48:
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1404              		.loc 1 118 12 view .LVU371
 1405              	.LBE52:
 1406              	.LBE73:
 1407 0600 484AB0CE 		vmovgt.f32	s8, s16	@ _354, _354
 1408              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1409              		.loc 1 232 48 view .LVU372
 1410 0604 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp387, v
 1411              	.LBB74:
 1412              	.LBB53:
 1413              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1414              		.loc 1 119 38 view .LVU373
 1415 0608 2A30E0E3 		mvn	r3, #42	@ tmp396,
 1416              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1417              		.loc 1 118 12 view .LVU374
 1418 060c A221A0E1 		lsr	r2, r2, #3	@ region, tmp393,
 1419              	.LVL49:
 119:armwave.c     **** 
 1420              		.loc 1 119 5 is_stmt 1 view .LVU375
 1421              	.LBE53:
 1422              	.LBE74:
 1423 0610 FF10A0C3 		movgt	r1, #255	@ _352,
 1424              	.LBB75:
 1425              	.LBB54:
 1426              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1427              		.loc 1 119 28 is_stmt 0 view .LVU376
 1428 0614 934223E0 		mla	r3, r3, r2, r4	@ tmp397, tmp396, region, v
 1429              	.LBE54:
 1430              	.LBE75:
 1431              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1432              		.loc 1 232 48 view .LVU377
 1433 0618 8A7A67DE 		vmulle.f32	s15, s15, s20	@ tmp388, tmp387, tmp521
 1434              	.LBB76:
 1435              	.LBB55:
 1436              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1437              		.loc 1 119 15 view .LVU378
 1438 061c 833083E0 		add	r3, r3, r3, lsl #1	@ tmp402, tmp397, tmp397,
 1439 0620 8330A0E1 		lsl	r3, r3, #1	@ tmp404, tmp402,
 1440 0624 7330EFE6 		uxtb	r3, r3	@ remainder, tmp404
 1441              	.LVL50:
 121:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 1442              		.loc 1 121 5 is_stmt 1 view .LVU379
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1443              		.loc 1 122 5 view .LVU380
 1444              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1445              		.loc 1 123 48 is_stmt 0 view .LVU381
 1446 0628 FF0063E2 		rsb	r0, r3, #255	@ tmp412, remainder,
 1447              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1448              		.loc 1 122 41 view .LVU382
 1449 062c 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp408, remainder, remainder,
 1450              	.LVL51:
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1451              		.loc 1 122 41 view .LVU383
 1452              	.LBE55:
 1453              	.LBE76:
 1454              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1455              		.loc 1 232 32 view .LVU384
 1456 0630 E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp391, tmp388
 1457              	.LBB77:
 1458              	.LBB56:
 1459              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1460              		.loc 1 123 41 view .LVU385
 1461 0634 000460E0 		rsb	r0, r0, r0, lsl #8	@ tmp415, tmp412, tmp412,
 1462              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1463              		.loc 1 122 54 view .LVU386
 1464 0638 4334A0E1 		asr	r3, r3, #8	@ tmp409, tmp408,
 1465              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1466              		.loc 1 123 62 view .LVU387
 1467 063c 4004A0E1 		asr	r0, r0, #8	@ tmp416, tmp415,
 1468              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1469              		.loc 1 123 27 view .LVU388
 1470 0640 FF0060E2 		rsb	r0, r0, #255	@ tmp417, tmp416,
 1471              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1472              		.loc 1 122 27 view .LVU389
 1473 0644 FF3063E2 		rsb	r3, r3, #255	@ tmp410, tmp409,
 1474              	.LBE56:
 1475              	.LBE77:
 1476              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1477              		.loc 1 232 32 view .LVU390
 1478 0648 057ACDDD 		vstrle.32	s15, [sp, #20]	@ int	@ tmp391, %sfp
 1479 064c 1410DDD5 		ldrble	r1, [sp, #20]	@ zero_extendqisi2	@ _352, %sfp
 1480 0650 901A07DE 		vmovle	s15, r1	@ int	@ _352, _352
 1481              	.LBB78:
 1482              	.LBB57:
 1483              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1484              		.loc 1 123 20 view .LVU391
 1485 0654 910000E0 		mul	r0, r1, r0	@ tmp418, _352, tmp417
 1486              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1487              		.loc 1 122 20 view .LVU392
 1488 0658 910303E0 		mul	r3, r1, r3	@ tmp411, _352, tmp410
 1489 065c E74AB8DE 		vcvtle.f32.s32	s8, s15	@ _354, _352
 1490              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1491              		.loc 1 123 70 view .LVU393
 1492 0660 4004A0E1 		asr	r0, r0, #8	@ _226, tmp418,
 1493              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1494              		.loc 1 122 62 view .LVU394
 1495 0664 4334A0E1 		asr	r3, r3, #8	@ _219, tmp411,
 1496              	.LVL52:
 123:armwave.c     **** 
 1497              		.loc 1 123 5 is_stmt 1 view .LVU395
 125:armwave.c     ****     {
 1498              		.loc 1 125 5 view .LVU396
 1499 0668 040052E3 		cmp	r2, #4	@ region,
 1500 066c 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 1501 0670 970000EA 		b	.L31	@
 1502              	.L33:
 1503 0674 88060000 		.word	.L37
 1504 0678 80080000 		.word	.L36
 1505 067c 34080000 		.word	.L35
 1506 0680 E8070000 		.word	.L34
 1507 0684 3C070000 		.word	.L32
 1508              	.L37:
 1509 0688 4E6ADFED 		vldr.32	s13, .L49+56	@ tmp426,
 1510 068c 437A9FED 		vldr.32	s14, .L49+16	@ tmp424,
 1511 0690 100A06EE 		vmov	s12, r0	@ int	@ _226, _226
 1512 0694 4C7ADFED 		vldr.32	s15, .L49+60	@ tmp430,
 1513 0698 665AB0EE 		vmov.f32	s10, s13	@ tmp425, tmp426
 1514 069c 503ADFED 		vldr.32	s7, .L49+84	@ _478,
 1515 06a0 C65AF8EE 		vcvt.f32.s32	s11, s12	@ _440, _226
 1516 06a4 276A44EE 		vmla.f32	s13, s8, s15	@ tmp431, _354, tmp430
 1517 06a8 075A04EE 		vmla.f32	s10, s8, s14	@ tmp425, _354, tmp424
 1518 06ac 376A9FED 		vldr.32	s12, .L49	@ tmp420,
 1519 06b0 377ADFED 		vldr.32	s15, .L49+4	@ tmp421,
 1520 06b4 0130A0E1 		mov	r3, r1	@ _219, _352
 1521              	.LVL53:
 125:armwave.c     ****     {
 1522              		.loc 1 125 5 is_stmt 0 view .LVU397
 1523 06b8 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1524              	.LVL54:
 125:armwave.c     ****     {
 1525              		.loc 1 125 5 view .LVU398
 1526 06bc 067A44EE 		vmla.f32	s15, s8, s12	@ _434, _354, tmp420
 1527 06c0 E86A45EE 		vmls.f32	s13, s11, s17	@ _501, _440, tmp524
 1528 06c4 457AB0EE 		vmov.f32	s14, s10	@ tmp425, tmp425
 1529 06c8 A95A25EE 		vmul.f32	s10, s11, s19	@ _445, _440, tmp522
 1530 06cc C97A05EE 		vmls.f32	s14, s11, s18	@ tmp425, _440, tmp523
 1531 06d0 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1532 06d4 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp425
 1533              	.LVL55:
 1534              	.L38:
 125:armwave.c     ****     {
 1535              		.loc 1 125 5 view .LVU399
 1536              	.LBE57:
 1537              	.LBE78:
 238:armwave.c     ****                 
 1538              		.loc 1 238 17 is_stmt 1 view .LVU400
 1539              	.LBB79:
 1540              	.LBI79:
  94:armwave.c     **** {
 1541              		.loc 1 94 6 view .LVU401
 1542              	.LBB80:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1543              		.loc 1 96 5 view .LVU402
 1544              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1545              		.loc 1 96 46 is_stmt 0 view .LVU403
 1546 06d8 857A77EE 		vadd.f32	s15, s15, s10	@ tmp503, _434, _445
 1547              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1548              		.loc 1 97 69 view .LVU404
 1549 06dc 237A36EE 		vadd.f32	s14, s12, s7	@ tmp507, _476, _478
 1550              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1551              		.loc 1 98 16 view .LVU405
 1552 06e0 E66AFCEE 		vcvt.u32.f32	s13, s13	@ tmp510, _501
 1553              	.LBE80:
 1554              	.LBE79:
 1555              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1556              		.loc 1 240 17 view .LVU406
 1557 06e4 0A008DE8 		stm	sp, {r1, r3}	@,,
 1558 06e8 0C208DE5 		str	r2, [sp, #12]	@ prephitmp_447,
 1559 06ec 08008DE5 		str	r0, [sp, #8]	@ _226,
 1560 06f0 0420A0E1 		mov	r2, r4	@, v
 1561 06f4 0410A0E1 		mov	r1, r4	@, v
 1562              	.LBB83:
 1563              	.LBB81:
 1564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1565              		.loc 1 96 69 view .LVU407
 1566 06f8 A57A77EE 		vadd.f32	s15, s15, s11	@ tmp504, tmp503, _453
 1567              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1568              		.loc 1 97 16 view .LVU408
 1569 06fc C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp508, tmp507
 1570              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1571              		.loc 1 98 16 view .LVU409
 1572 0700 90CA16EE 		vmov	ip, s13	@ int	@ tmp510, tmp510
 1573              	.LBE81:
 1574              	.LBE83:
 1575              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1576              		.loc 1 240 17 view .LVU410
 1577 0704 FF30A0E3 		mov	r3, #255	@,
 1578 0708 B4009FE5 		ldr	r0, .L49+52	@,
 1579              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1580              		.loc 1 227 34 view .LVU411
 1581 070c 014084E2 		add	r4, r4, #1	@ v, v,
 1582              	.LVL56:
 1583              	.LBB84:
 1584              	.LBB82:
 1585              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1586              		.loc 1 98 16 view .LVU412
 1587 0710 02C0C5E5 		strb	ip, [r5, #2]	@ tmp510, MEM[base: _393, offset: 2B]
 1588 0714 035085E2 		add	r5, r5, #3	@ ivtmp.169, ivtmp.169,
 1589              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1590              		.loc 1 96 16 view .LVU413
 1591 0718 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp505, tmp504
 1592              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1593              		.loc 1 97 16 view .LVU414
 1594 071c 10EA17EE 		vmov	lr, s14	@ int	@ tmp508, tmp508
 1595 0720 02E045E5 		strb	lr, [r5, #-2]	@ tmp508, MEM[base: _393, offset: 1B]
 1596              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1597              		.loc 1 96 16 view .LVU415
 1598 0724 90CA17EE 		vmov	ip, s15	@ int	@ tmp505, tmp505
 1599 0728 03C045E5 		strb	ip, [r5, #-3]	@ tmp505, MEM[base: _393, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1600              		.loc 1 97 5 is_stmt 1 view .LVU416
  98:armwave.c     **** }
 1601              		.loc 1 98 5 view .LVU417
 1602              	.LVL57:
  98:armwave.c     **** }
 1603              		.loc 1 98 5 is_stmt 0 view .LVU418
 1604              	.LBE82:
 1605              	.LBE84:
 240:armwave.c     ****             }
 1606              		.loc 1 240 17 is_stmt 1 view .LVU419
 1607 072c FEFFFFEB 		bl	printf		@
 1608              	.LVL58:
 1609              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1610              		.loc 1 227 13 is_stmt 0 view .LVU420
 1611 0730 010C54E3 		cmp	r4, #256	@ v,
 1612 0734 ADFFFF1A 		bne	.L39		@,
 1613 0738 06FFFFEA 		b	.L26		@
 1614              	.LVL59:
 1615              	.L32:
 1616              	.LBB85:
 1617              	.LBB58:
 140:armwave.c     ****             break;
 1618              		.loc 1 140 13 is_stmt 1 view .LVU421
 140:armwave.c     ****             break;
 1619              		.loc 1 140 29 view .LVU422
 140:armwave.c     ****             break;
 1620              		.loc 1 140 45 view .LVU423
 141:armwave.c     ****         default:
 1621              		.loc 1 141 13 view .LVU424
 1622 073c 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1623 0740 206A9FED 		vldr.32	s12, .L49+56	@ tmp481,
 1624 0744 207A9FED 		vldr.32	s14, .L49+60	@ tmp482,
 1625 0748 103ADFED 		vldr.32	s7, .L49	@ tmp476,
 1626 074c E75AB8EE 		vcvt.f32.s32	s10, s15	@ _423, _226
 1627 0750 466AF0EE 		vmov.f32	s13, s12	@ tmp485, tmp481
 1628 0754 0E7ADFED 		vldr.32	s15, .L49+4	@ tmp477,
 1629 0758 204ADFED 		vldr.32	s9, .L49+80	@ tmp488,
 1630 075c 0F3A9FED 		vldr.32	s6, .L49+16	@ tmp480,
 1631 0760 0D5ADFED 		vldr.32	s11, .L49+12	@ tmp478,
 1632              	@ armwave.c:139:         case 4:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1633              		.loc 1 139 9 is_stmt 0 view .LVU425
 1634 0764 0030A0E1 		mov	r3, r0	@ _219, _226
 1635              	.LVL60:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1636              		.loc 1 139 9 view .LVU426
 1637 0768 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1638              	.LVL61:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1639              		.loc 1 139 9 view .LVU427
 1640 076c 076A45EE 		vmla.f32	s13, s10, s14	@ tmp485, _423, tmp482
 1641 0770 237A45EE 		vmla.f32	s15, s10, s7	@ _434, _423, tmp476
 1642 0774 036A05EE 		vmla.f32	s12, s10, s6	@ _476, _423, tmp480
 1643 0778 073A64EE 		vmul.f32	s7, s8, s14	@ _478, _354, tmp482
 1644 077c 255A64EE 		vmul.f32	s11, s8, s11	@ _453, _354, tmp478
 1645 0780 175A9FED 		vldr.32	s10, .L49+84	@ _445,
 1646 0784 0000A0E3 		mov	r0, #0	@ _226,
 1647              	.LVL62:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1648              		.loc 1 139 9 view .LVU428
 1649 0788 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp488
 1650 078c D1FFFFEA 		b	.L38		@
 1651              	.L50:
 1652              		.align	2
 1653              	.L49:
 1654 0790 6F12833E 		.word	1048777327
 1655 0794 00008041 		.word	1098907648
 1656 0798 2506013F 		.word	1057031717
 1657 079c F0A7C63D 		.word	1036429296
 1658 07a0 508D17BE 		.word	-1105752752
 1659 07a4 F4FD943E 		.word	1049951732
 1660 07a8 7F6ABC3E 		.word	1052535423
 1661 07ac 00007F43 		.word	1132396544
 1662 07b0 00004C41 		.word	1095499776
 1663 07b4 00000000 		.word	g_yuv_lut
 1664 07b8 44000000 		.word	.LC2
 1665 07bc 00000000 		.word	.LC0
 1666 07c0 83BEA02F 		.word	799063683
 1667 07c4 18000000 		.word	.LC1
 1668 07c8 00000043 		.word	1124073472
 1669 07cc 9CC4E03E 		.word	1054917788
 1670 07d0 00008041 		.word	1098907648
 1671 07d4 F0A7C63D 		.word	1036429296
 1672 07d8 508D17BE 		.word	-1105752752
 1673 07dc 6F12833E 		.word	1048777327
 1674 07e0 7368913D 		.word	1032939635
 1675 07e4 00000000 		.word	0
 1676              	.LVL63:
 1677              	.L34:
 137:armwave.c     ****             break;
 1678              		.loc 1 137 13 is_stmt 1 view .LVU429
 137:armwave.c     ****             break;
 1679              		.loc 1 137 29 view .LVU430
 137:armwave.c     ****             break;
 1680              		.loc 1 137 45 view .LVU431
 138:armwave.c     ****         case 4:
 1681              		.loc 1 138 13 view .LVU432
 1682 07e8 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1683 07ec 0B7A1FED 		vldr.32	s14, .L49+56	@ tmp467,
 1684 07f0 064A5FED 		vldr.32	s9, .L49+80	@ tmp474,
 1685 07f4 0C3A5FED 		vldr.32	s7, .L49+60	@ tmp468,
 1686 07f8 E75AB8EE 		vcvt.f32.s32	s10, s15	@ _439, _219
 1687 07fc 476AF0EE 		vmov.f32	s13, s14	@ tmp471, tmp467
 1688 0800 0D7A5FED 		vldr.32	s15, .L49+68	@ tmp464,
 1689              	@ armwave.c:136:         case 3:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1690              		.loc 1 136 9 is_stmt 0 view .LVU433
 1691 0804 0300A0E1 		mov	r0, r3	@ _226, _219
 1692              	.LVL64:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1693              		.loc 1 136 9 view .LVU434
 1694 0808 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1695              	.LVL65:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1696              		.loc 1 136 9 view .LVU435
 1697 080c 233A64EE 		vmul.f32	s7, s8, s7	@ _478, _354, tmp468
 1698 0810 275A64EE 		vmul.f32	s11, s8, s15	@ _453, _354, tmp464
 1699 0814 0030A0E3 		mov	r3, #0	@ _219,
 1700              	.LVL66:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1701              		.loc 1 136 9 view .LVU436
 1702 0818 686A45EE 		vmls.f32	s13, s10, s17	@ tmp471, _439, tmp524
 1703 081c 497A05EE 		vmls.f32	s14, s10, s18	@ tmp467, _439, tmp523
 1704 0820 167A5FED 		vldr.32	s15, .L49+64	@ _434,
 1705 0824 295A25EE 		vmul.f32	s10, s10, s19	@ _445, _439, tmp522
 1706 0828 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp474
 1707 082c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp467
 1708 0830 A8FFFFEA 		b	.L38		@
 1709              	.LVL67:
 1710              	.L35:
 134:armwave.c     ****             break;
 1711              		.loc 1 134 13 is_stmt 1 view .LVU437
 134:armwave.c     ****             break;
 1712              		.loc 1 134 29 view .LVU438
 134:armwave.c     ****             break;
 1713              		.loc 1 134 53 view .LVU439
 135:armwave.c     ****         case 3:
 1714              		.loc 1 135 13 view .LVU440
 1715 0834 1D7A1FED 		vldr.32	s14, .L49+56	@ tmp455,
 1716 0838 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1717 083c 193A1FED 		vldr.32	s6, .L49+80	@ tmp462,
 1718 0840 1F3A5FED 		vldr.32	s7, .L49+60	@ tmp456,
 1719 0844 476AF0EE 		vmov.f32	s13, s14	@ tmp459, tmp455
 1720 0848 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _450, _226
 1721 084c 497A04EE 		vmls.f32	s14, s8, s18	@ tmp455, _354, tmp523
 1722 0850 217A5FED 		vldr.32	s15, .L49+68	@ tmp452,
 1723 0854 686A44EE 		vmls.f32	s13, s8, s17	@ tmp459, _354, tmp524
 1724              	@ armwave.c:133:         case 2:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1725              		.loc 1 133 9 is_stmt 0 view .LVU441
 1726 0858 0020A0E1 		mov	r2, r0	@ prephitmp_447, _226
 1727              	.LVL68:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1728              		.loc 1 133 9 view .LVU442
 1729 085c 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1730 0860 0100A0E1 		mov	r0, r1	@ _226, _352
 1731              	.LVL69:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1732              		.loc 1 133 9 view .LVU443
 1733 0864 0030A0E3 		mov	r3, #0	@ _219,
 1734              	.LVL70:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1735              		.loc 1 133 9 view .LVU444
 1736 0868 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _450, tmp452
 1737 086c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp455
 1738 0870 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _450, tmp456
 1739 0874 C36A44EE 		vmls.f32	s13, s9, s6	@ _501, _450, tmp462
 1740 0878 2C7A5FED 		vldr.32	s15, .L49+64	@ _434,
 1741 087c 95FFFFEA 		b	.L38		@
 1742              	.LVL71:
 1743              	.L36:
 131:armwave.c     ****             break;
 1744              		.loc 1 131 13 is_stmt 1 view .LVU445
 131:armwave.c     ****             break;
 1745              		.loc 1 131 29 view .LVU446
 131:armwave.c     ****             break;
 1746              		.loc 1 131 53 view .LVU447
 132:armwave.c     ****         case 2:
 1747              		.loc 1 132 13 view .LVU448
 1748 0880 903A05EE 		vmov	s11, r3	@ int	@ _219, _219
 1749 0884 316A5FED 		vldr.32	s13, .L49+56	@ tmp442,
 1750 0888 2E7A1FED 		vldr.32	s14, .L49+72	@ tmp440,
 1751 088c 324A5FED 		vldr.32	s9, .L49+60	@ tmp446,
 1752 0890 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _424, _219
 1753 0894 663AB0EE 		vmov.f32	s6, s13	@ tmp441, tmp442
 1754 0898 316A1FED 		vldr.32	s12, .L49+76	@ tmp436,
 1755 089c 357A5FED 		vldr.32	s15, .L49+64	@ tmp437,
 1756              	@ armwave.c:130:         case 1:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1757              		.loc 1 130 9 is_stmt 0 view .LVU449
 1758 08a0 313A5FED 		vldr.32	s7, .L49+84	@ _478,
 1759 08a4 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1760 08a8 0100A0E1 		mov	r0, r1	@ _226, _352
 1761              	.LVL72:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1762              		.loc 1 130 9 view .LVU450
 1763 08ac 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1764              	.LVL73:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1765              		.loc 1 130 9 view .LVU451
 1766 08b0 873A05EE 		vmla.f32	s6, s11, s14	@ tmp441, _424, tmp440
 1767 08b4 A46A45EE 		vmla.f32	s13, s11, s9	@ tmp447, _424, tmp446
 1768 08b8 867A45EE 		vmla.f32	s15, s11, s12	@ _434, _424, tmp436
 1769 08bc 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1770 08c0 437AB0EE 		vmov.f32	s14, s6	@ tmp441, tmp441
 1771 08c4 686A44EE 		vmls.f32	s13, s8, s17	@ _501, _354, tmp524
 1772 08c8 497A04EE 		vmls.f32	s14, s8, s18	@ tmp441, _354, tmp523
 1773 08cc 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp441
 1774 08d0 80FFFFEA 		b	.L38		@
 1775              	.LVL74:
 1776              	.L31:
 143:armwave.c     ****             break;
 1777              		.loc 1 143 13 is_stmt 1 view .LVU452
 143:armwave.c     ****             break;
 1778              		.loc 1 143 37 view .LVU453
 143:armwave.c     ****             break;
 1779              		.loc 1 143 53 view .LVU454
 144:armwave.c     ****     }
 1780              		.loc 1 144 13 view .LVU455
 1781 08d4 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1782 08d8 466A1FED 		vldr.32	s12, .L49+56	@ tmp495,
 1783 08dc 463A5FED 		vldr.32	s7, .L49+60	@ tmp496,
 1784 08e0 467A1FED 		vldr.32	s14, .L49+64	@ tmp491,
 1785 08e4 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _448, _219
 1786 08e8 466AF0EE 		vmov.f32	s13, s12	@ tmp499, tmp495
 1787 08ec 487A5FED 		vldr.32	s15, .L49+68	@ tmp492,
 1788 08f0 462A5FED 		vldr.32	s5, .L49+80	@ tmp502,
 1789 08f4 492A1FED 		vldr.32	s4, .L49+72	@ tmp494,
 1790 08f8 236A44EE 		vmla.f32	s13, s8, s7	@ tmp499, _354, tmp496
 1791 08fc 4A3A1FED 		vldr.32	s6, .L49+76	@ tmp490,
 1792              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1793              		.loc 1 142 9 is_stmt 0 view .LVU456
 1794 0900 0320A0E1 		mov	r2, r3	@ prephitmp_447, _219
 1795              	.LVL75:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1796              		.loc 1 142 9 view .LVU457
 1797 0904 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _448, tmp492
 1798 0908 477AF0EE 		vmov.f32	s15, s14	@ tmp491, tmp491
 1799 090c 4C5A1FED 		vldr.32	s10, .L49+84	@ _445,
 1800 0910 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _448, tmp496
 1801 0914 026A04EE 		vmla.f32	s12, s8, s4	@ _476, _354, tmp494
 1802 0918 E26A44EE 		vmls.f32	s13, s9, s5	@ _501, _448, tmp502
 1803 091c 037A44EE 		vmla.f32	s15, s8, s6	@ tmp491, _354, tmp490
 1804 0920 0000A0E3 		mov	r0, #0	@ _226,
 1805              	.LVL76:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1806              		.loc 1 142 9 view .LVU458
 1807 0924 0130A0E1 		mov	r3, r1	@ _219, _352
 1808              	.LVL77:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1809              		.loc 1 142 9 view .LVU459
 1810 0928 6AFFFFEA 		b	.L38		@
 1811              	.LBE58:
 1812              	.LBE85:
 1813              		.cfi_endproc
 1814              	.LFE62:
 1816              		.align	2
 1817              		.global	armwave_init
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_init:
 1823              	.LFB63:
 249:armwave.c     **** 
 250:armwave.c     **** /*
 251:armwave.c     ****  * Initialise things.  STUB, mostly.
 252:armwave.c     ****  */
 253:armwave.c     **** void armwave_init()
 254:armwave.c     **** {
 1824              		.loc 1 254 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 255:armwave.c     ****     g_armwave_state.flags = 0;
 1828              		.loc 1 255 5 view .LVU461
 1829              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1830              		.loc 1 255 27 is_stmt 0 view .LVU462
 1831 092c 24309FE5 		ldr	r3, .L53	@ tmp110,
 1832              	@ armwave.c:254: {
 254:armwave.c     ****     g_armwave_state.flags = 0;
 1833              		.loc 1 254 1 view .LVU463
 1834 0930 10402DE9 		push	{r4, lr}	@
 1835              		.cfi_def_cfa_offset 8
 1836              		.cfi_offset 4, -8
 1837              		.cfi_offset 14, -4
 1838              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1839              		.loc 1 255 27 view .LVU464
 1840 0934 0020A0E3 		mov	r2, #0	@ tmp111,
 1841              	@ armwave.c:258:     printf("armwave version: %s\n", ARMWAVE_VER);
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 257:armwave.c     **** 
 258:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1842              		.loc 1 258 5 view .LVU465
 1843 0938 1C109FE5 		ldr	r1, .L53+4	@,
 1844 093c 1C009FE5 		ldr	r0, .L53+8	@,
 1845              	@ armwave.c:255:     g_armwave_state.flags = 0;
 255:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1846              		.loc 1 255 27 view .LVU466
 1847 0940 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1848              		.loc 1 256 5 is_stmt 1 view .LVU467
 1849              	@ armwave.c:256:     g_armwave_state.frame_margin = 0;
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1850              		.loc 1 256 34 is_stmt 0 view .LVU468
 1851 0944 582083E5 		str	r2, [r3, #88]	@ tmp111, g_armwave_state.frame_margin
 1852              		.loc 1 258 5 is_stmt 1 view .LVU469
 1853 0948 FEFFFFEB 		bl	printf		@
 1854              	.LVL78:
 259:armwave.c     ****     
 260:armwave.c     **** #ifndef NO_PYTHON
 261:armwave.c     ****     printf("built without Python linkings\n");
 1855              		.loc 1 261 5 view .LVU470
 1856 094c 10009FE5 		ldr	r0, .L53+12	@,
 1857              	@ armwave.c:263: }
 262:armwave.c     **** #endif
 263:armwave.c     **** }
 1858              		.loc 1 263 1 is_stmt 0 view .LVU471
 1859 0950 1040BDE8 		pop	{r4, lr}	@
 1860              		.cfi_restore 14
 1861              		.cfi_restore 4
 1862              		.cfi_def_cfa_offset 0
 1863              	@ armwave.c:261:     printf("built without Python linkings\n");
 261:armwave.c     **** #endif
 1864              		.loc 1 261 5 view .LVU472
 1865 0954 FEFFFFEA 		b	puts		@
 1866              	.LVL79:
 1867              	.L54:
 1868              		.align	2
 1869              	.L53:
 1870 0958 00000000 		.word	g_armwave_state
 1871 095c 5C000000 		.word	.LC3
 1872 0960 64000000 		.word	.LC4
 1873 0964 7C000000 		.word	.LC5
 1874              		.cfi_endproc
 1875              	.LFE63:
 1877              		.align	2
 1878              		.global	render_nonaa_to_buffer_1ch_slice
 1879              		.syntax unified
 1880              		.arm
 1881              		.fpu vfp
 1883              	render_nonaa_to_buffer_1ch_slice:
 1884              	.LVL80:
 1885              	.LFB64:
 264:armwave.c     **** 
 265:armwave.c     **** /*
 266:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
 267:armwave.c     ****  * pre-computed.
 268:armwave.c     ****  *
 269:armwave.c     ****  * @param    slice_y        Slice to render at
 270:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
 271:armwave.c     ****  *                          accounting for cache behaviour, etc.)
 272:armwave.c     ****  */
 273:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 274:armwave.c     **** {
 1886              		.loc 1 274 1 is_stmt 1 view -0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 8
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 275:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1890              		.loc 1 275 5 view .LVU474
 276:armwave.c     ****     uint32_t value, word;
 1891              		.loc 1 276 5 view .LVU475
 277:armwave.c     ****     uint8_t *wave_base;
 1892              		.loc 1 277 5 view .LVU476
 278:armwave.c     ****     bufftyp_t *write_buffer_base;
 1893              		.loc 1 278 5 view .LVU477
 279:armwave.c     ****     bufftyp_t *write_buffer;
 1894              		.loc 1 279 5 view .LVU478
 280:armwave.c     **** 
 281:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 282:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 1895              		.loc 1 282 5 view .LVU479
 1896              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1897              		.loc 1 282 40 is_stmt 0 view .LVU480
 1898 0968 04319FE5 		ldr	r3, .L65	@ tmp187,
 1899              	@ armwave.c:274: {
 274:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1900              		.loc 1 274 1 view .LVU481
 1901 096c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1902              		.cfi_def_cfa_offset 36
 1903              		.cfi_offset 4, -36
 1904              		.cfi_offset 5, -32
 1905              		.cfi_offset 6, -28
 1906              		.cfi_offset 7, -24
 1907              		.cfi_offset 8, -20
 1908              		.cfi_offset 9, -16
 1909              		.cfi_offset 10, -12
 1910              		.cfi_offset 11, -8
 1911              		.cfi_offset 14, -4
 1912 0970 0CD04DE2 		sub	sp, sp, #12	@,,
 1913              		.cfi_def_cfa_offset 48
 1914              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1915              		.loc 1 282 82 view .LVU482
 1916 0974 246093E5 		ldr	r6, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 1917              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 283:armwave.c     **** 
 284:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
 285:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 286:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
 287:armwave.c     ****         g_armwave_state.bitdepth_height);
 288:armwave.c     **** 
 289:armwave.c     ****     // roll through each waveform
 290:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 1918              		.loc 1 290 35 view .LVU483
 1919 0978 38B093E5 		ldr	fp, [r3, #56]	@ _134, g_armwave_state.waves
 1920              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 282:armwave.c     **** 
 1921              		.loc 1 282 40 view .LVU484
 1922 097c 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 1923              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 1924              		.loc 1 290 5 view .LVU485
 1925 0980 00005BE3 		cmp	fp, #0	@ _134,
 1926              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 282:armwave.c     **** 
 1927              		.loc 1 282 65 view .LVU486
 1928 0984 900605E0 		mul	r5, r0, r6	@ tmp189, slice_y, _2
 1929              	.LVL81:
 1930              		.loc 1 290 5 is_stmt 1 view .LVU487
 1931              		.loc 1 290 5 is_stmt 0 view .LVU488
 1932 0988 370000DA 		ble	.L55		@,
 1933              	@ armwave.c:291:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 291:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1934              		.loc 1 291 36 view .LVU489
 1935 098c 149093E5 		ldr	r9, [r3, #20]	@ _5, g_armwave_state.wave_buffer
 1936              	@ armwave.c:291:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1937              		.loc 1 291 81 view .LVU490
 1938 0990 343093E5 		ldr	r3, [r3, #52]	@ _6, g_armwave_state.wave_stride
 1939 0994 000051E3 		cmp	r1, #0	@ height,
 1940 0998 04308DE5 		str	r3, [sp, #4]	@ _6, %sfp
 1941 099c 3200000A 		beq	.L55		@,
 1942 09a0 2558A0E1 		lsr	r5, r5, #16	@ _4, tmp189,
 1943              	.LVL82:
 1944              		.loc 1 291 81 view .LVU491
 1945 09a4 009089E0 		add	r9, r9, r0	@ ivtmp.185, _5, slice_y
 1946              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1947              		.loc 1 290 11 view .LVU492
 1948 09a8 00A0A0E3 		mov	r10, #0	@ w,
 1949              	.LVL83:
 1950              	.L58:
 1951              		.loc 1 291 9 is_stmt 1 view .LVU493
 292:armwave.c     **** 
 293:armwave.c     ****         // roll through y and render the slice into the out buffer
 294:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 295:armwave.c     ****         for(yy = 0, yi = 0; yy < height; yy += 4) {
 1952              		.loc 1 295 9 view .LVU494
 1953              		.loc 1 295 9 is_stmt 0 view .LVU495
 1954 09ac 044049E2 		sub	r4, r9, #4	@ ivtmp.175, ivtmp.185,
 1955              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1956              		.loc 1 290 11 view .LVU496
 1957 09b0 0030A0E3 		mov	r3, #0	@ ivtmp.178,
 1958              	.LVL84:
 1959              	.L57:
 296:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1960              		.loc 1 296 13 is_stmt 1 view .LVU497
 1961              	@ armwave.c:296:             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1962              		.loc 1 296 18 is_stmt 0 view .LVU498
 1963 09b4 042094E5 		ldr	r2, [r4, #4]	@ word, MEM[base: _266, offset: 0B]
 1964              	.LVL85:
 297:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 1965              		.loc 1 297 13 is_stmt 1 view .LVU499
 1966              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 298:armwave.c     ****             
 299:armwave.c     ****             for(ys = 0; ys < 4; ys++, yi++) {
 300:armwave.c     ****                 scale_value = word & 0xff;
 301:armwave.c     ****                 
 302:armwave.c     **** #if USE_ALU_XCOORD == 1
 303:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
 304:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 305:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 306:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 307:armwave.c     ****                 write_buffer = write_buffer_base + \
 308:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 309:armwave.c     **** #else
 310:armwave.c     ****                 write_buffer = write_buffer_base + \
 311:armwave.c     ****                     (g_armwave_state.xcoord_to_xpixel[yi] * 256 * sizeof(bufftyp_t));
 312:armwave.c     **** #endif
 313:armwave.c     **** 
 314:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1967              		.loc 1 314 47 is_stmt 0 view .LVU500
 1968 09b8 230885E0 		add	r0, r5, r3, lsr #16	@ tmp195, _4, ivtmp.178,
 1969              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 1970              		.loc 1 308 34 view .LVU501
 1971 09bc 033086E0 		add	r3, r6, r3	@ _77, _2, ivtmp.178
 1972              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 1973              		.loc 1 300 29 view .LVU502
 1974 09c0 7270EFE6 		uxtb	r7, r2	@ scale_value, word
 1975              	@ armwave.c:315:                 word >>= 8;
 315:armwave.c     ****                 word >>= 8;
 1976              		.loc 1 315 22 view .LVU503
 1977 09c4 22C4A0E1 		lsr	ip, r2, #8	@ word, word,
 1978              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1979              		.loc 1 314 47 view .LVU504
 1980 09c8 8770A0E1 		lsl	r7, r7, #1	@ tmp198, scale_value,
 1981 09cc 007587E0 		add	r7, r7, r0, lsl #10	@ tmp199, tmp198, tmp195,
 1982              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 1983              		.loc 1 300 29 view .LVU505
 1984 09d0 7CC0EFE6 		uxtb	ip, ip	@ scale_value, word
 1985              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1986              		.loc 1 314 47 view .LVU506
 1987 09d4 230885E0 		add	r0, r5, r3, lsr #16	@ tmp204, _4, _77,
 1988 09d8 B7809EE1 		ldrh	r8, [lr, r7]	@ *_62, *_62
 1989 09dc 8CC0A0E1 		lsl	ip, ip, #1	@ tmp208, scale_value,
 1990 09e0 00C58CE0 		add	ip, ip, r0, lsl #10	@ tmp209, tmp208, tmp204,
 1991              	@ armwave.c:315:                 word >>= 8;
 1992              		.loc 1 315 22 view .LVU507
 1993 09e4 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 1994              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 1995              		.loc 1 308 34 view .LVU508
 1996 09e8 033086E0 		add	r3, r6, r3	@ _99, _2, _77
 1997              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1998              		.loc 1 314 47 view .LVU509
 1999 09ec 018088E2 		add	r8, r8, #1	@ tmp202, *_62,
 2000              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 2001              		.loc 1 300 29 view .LVU510
 2002 09f0 7000EFE6 		uxtb	r0, r0	@ scale_value, word
 2003              	@ armwave.c:297:             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likel
 297:armwave.c     ****             
 2004              		.loc 1 297 13 view .LVU511
 2005 09f4 44F0D4F5 		pld	[r4, #68]		@
 299:armwave.c     ****                 scale_value = word & 0xff;
 2006              		.loc 1 299 13 is_stmt 1 view .LVU512
 2007              	.LVL86:
 300:armwave.c     ****                 
 2008              		.loc 1 300 17 view .LVU513
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2009              		.loc 1 307 17 view .LVU514
 314:armwave.c     ****                 word >>= 8;
 2010              		.loc 1 314 17 view .LVU515
 2011              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2012              		.loc 1 314 47 is_stmt 0 view .LVU516
 2013 09f8 B7808EE1 		strh	r8, [lr, r7]	@ movhi	@ tmp202, *_62
 2014              		.loc 1 315 17 is_stmt 1 view .LVU517
 2015              	.LVL87:
 300:armwave.c     ****                 
 2016              		.loc 1 300 17 view .LVU518
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2017              		.loc 1 307 17 view .LVU519
 314:armwave.c     ****                 word >>= 8;
 2018              		.loc 1 314 17 view .LVU520
 2019              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2020              		.loc 1 314 47 is_stmt 0 view .LVU521
 2021 09fc 238885E0 		add	r8, r5, r3, lsr #16	@ tmp214, _4, _99,
 2022 0a00 BC709EE1 		ldrh	r7, [lr, ip]	@ *_84, *_84
 2023 0a04 8000A0E1 		lsl	r0, r0, #1	@ tmp218, scale_value,
 2024 0a08 080580E0 		add	r0, r0, r8, lsl #10	@ tmp219, tmp218, tmp214,
 2025              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 2026              		.loc 1 308 34 view .LVU522
 2027 0a0c 033086E0 		add	r3, r6, r3	@ _121, _2, _99
 2028              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2029              		.loc 1 314 47 view .LVU523
 2030 0a10 017087E2 		add	r7, r7, #1	@ tmp212, *_84,
 2031              	@ armwave.c:315:                 word >>= 8;
 2032              		.loc 1 315 22 view .LVU524
 2033 0a14 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 2034              	.LVL88:
 2035              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2036              		.loc 1 314 47 view .LVU525
 2037 0a18 BC708EE1 		strh	r7, [lr, ip]	@ movhi	@ tmp212, *_84
 2038              		.loc 1 315 17 is_stmt 1 view .LVU526
 2039              	.LVL89:
 300:armwave.c     ****                 
 2040              		.loc 1 300 17 view .LVU527
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2041              		.loc 1 307 17 view .LVU528
 314:armwave.c     ****                 word >>= 8;
 2042              		.loc 1 314 17 view .LVU529
 2043              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2044              		.loc 1 314 47 is_stmt 0 view .LVU530
 2045 0a1c 237885E0 		add	r7, r5, r3, lsr #16	@ tmp224, _4, _121,
 2046 0a20 B0C09EE1 		ldrh	ip, [lr, r0]	@ *_106, *_106
 2047 0a24 8220A0E1 		lsl	r2, r2, #1	@ tmp227, word,
 2048 0a28 072582E0 		add	r2, r2, r7, lsl #10	@ tmp228, tmp227, tmp224,
 2049 0a2c 01C08CE2 		add	ip, ip, #1	@ tmp222, *_106,
 2050 0a30 B0C08EE1 		strh	ip, [lr, r0]	@ movhi	@ tmp222, *_106
 2051              		.loc 1 315 17 is_stmt 1 view .LVU531
 2052              	.LVL90:
 300:armwave.c     ****                 
 2053              		.loc 1 300 17 view .LVU532
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2054              		.loc 1 307 17 view .LVU533
 314:armwave.c     ****                 word >>= 8;
 2055              		.loc 1 314 17 view .LVU534
 2056              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2057              		.loc 1 314 47 is_stmt 0 view .LVU535
 2058 0a34 B2009EE1 		ldrh	r0, [lr, r2]	@ *_128, *_128
 2059 0a38 08C084E2 		add	ip, r4, #8	@ tmp232, ivtmp.175,
 2060 0a3c 09C04CE0 		sub	ip, ip, r9	@ _259, tmp232, ivtmp.185
 2061 0a40 010080E2 		add	r0, r0, #1	@ tmp231, *_128,
 2062              	@ armwave.c:295:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 295:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2063              		.loc 1 295 9 view .LVU536
 2064 0a44 0C0051E1 		cmp	r1, ip	@ height, _259
 2065 0a48 033086E0 		add	r3, r6, r3	@ ivtmp.178, _2, _121
 2066              	.LVL91:
 2067              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2068              		.loc 1 314 47 view .LVU537
 2069 0a4c B2008EE1 		strh	r0, [lr, r2]	@ movhi	@ tmp231, *_128
 2070              		.loc 1 315 17 is_stmt 1 view .LVU538
 2071              	.LVL92:
 2072              		.loc 1 315 17 is_stmt 0 view .LVU539
 2073 0a50 044084E2 		add	r4, r4, #4	@ ivtmp.175, ivtmp.175,
 2074              	.LVL93:
 2075              	@ armwave.c:295:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 295:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2076              		.loc 1 295 9 view .LVU540
 2077 0a54 D6FFFF8A 		bhi	.L57		@,
 2078              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2079              		.loc 1 290 44 view .LVU541
 2080 0a58 01A08AE2 		add	r10, r10, #1	@ w, w,
 2081              	.LVL94:
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2082              		.loc 1 290 44 view .LVU542
 2083 0a5c 04309DE5 		ldr	r3, [sp, #4]	@ _6, %sfp
 2084              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2085              		.loc 1 290 5 view .LVU543
 2086 0a60 0B005AE1 		cmp	r10, fp	@ w, _134
 2087 0a64 039089E0 		add	r9, r9, r3	@ ivtmp.185, ivtmp.185, _6
 2088              	.LVL95:
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2089              		.loc 1 290 5 view .LVU544
 2090 0a68 CFFFFF1A 		bne	.L58		@,
 2091              	.LVL96:
 2092              	.L55:
 2093              	@ armwave.c:321: }
 316:armwave.c     ****             }
 317:armwave.c     ****         }
 318:armwave.c     ****     }
 319:armwave.c     **** 
 320:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 321:armwave.c     **** }
 2094              		.loc 1 321 1 view .LVU545
 2095 0a6c 0CD08DE2 		add	sp, sp, #12	@,,
 2096              		.cfi_def_cfa_offset 36
 2097              		@ sp needed	@
 2098 0a70 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2099              	.LVL97:
 2100              	.L66:
 2101              		.loc 1 321 1 view .LVU546
 2102              		.align	2
 2103              	.L65:
 2104 0a74 00000000 		.word	g_armwave_state
 2105              		.cfi_endproc
 2106              	.LFE64:
 2108              		.align	2
 2109              		.global	fill_xvimage_scaled
 2110              		.syntax unified
 2111              		.arm
 2112              		.fpu vfp
 2114              	fill_xvimage_scaled:
 2115              	.LVL98:
 2116              	.LFB65:
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Render buffer to an XvImage canvas.
 325:armwave.c     ****  */
 326:armwave.c     **** void fill_xvimage_scaled(XvImage *img)
 327:armwave.c     **** {
 2117              		.loc 1 327 1 is_stmt 1 view -0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 8
 2120              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2121              		.loc 1 328 5 view .LVU548
 329:armwave.c     ****     // uint32_t ysub;
 330:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 2122              		.loc 1 330 5 view .LVU549
 331:armwave.c     ****     uint8_t r, g, b;
 2123              		.loc 1 331 5 view .LVU550
 332:armwave.c     ****     int value; 
 2124              		.loc 1 332 5 view .LVU551
 333:armwave.c     ****     // uint8_t row;
 334:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2125              		.loc 1 334 5 view .LVU552
 2126              	@ armwave.c:327: {
 327:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2127              		.loc 1 327 1 is_stmt 0 view .LVU553
 2128 0a78 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2129              		.cfi_def_cfa_offset 36
 2130              		.cfi_offset 4, -36
 2131              		.cfi_offset 5, -32
 2132              		.cfi_offset 6, -28
 2133              		.cfi_offset 7, -24
 2134              		.cfi_offset 8, -20
 2135              		.cfi_offset 9, -16
 2136              		.cfi_offset 10, -12
 2137              		.cfi_offset 11, -8
 2138              		.cfi_offset 14, -4
 2139 0a7c 0040A0E1 		mov	r4, r0	@ img, img
 2140              	@ armwave.c:334:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2141              		.loc 1 334 15 view .LVU554
 2142 0a80 20529FE5 		ldr	r5, .L83	@ tmp228,
 2143              	@ armwave.c:327: {
 327:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2144              		.loc 1 327 1 view .LVU555
 2145 0a84 0CD04DE2 		sub	sp, sp, #12	@,,
 2146              		.cfi_def_cfa_offset 48
 2147              	@ armwave.c:338:     printf("output buffer: 0x%08x\n", img);
 335:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 336:armwave.c     ****     uint32_t offset;
 337:armwave.c     **** 
 338:armwave.c     ****     printf("output buffer: 0x%08x\n", img);
 2148              		.loc 1 338 5 view .LVU556
 2149 0a88 0010A0E1 		mov	r1, r0	@, img
 2150 0a8c 18029FE5 		ldr	r0, .L83+4	@,
 2151              	.LVL99:
 2152              	@ armwave.c:334:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 334:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 2153              		.loc 1 334 15 view .LVU557
 2154 0a90 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2155              	.LVL100:
 336:armwave.c     **** 
 2156              		.loc 1 336 5 is_stmt 1 view .LVU558
 2157              		.loc 1 338 5 view .LVU559
 2158 0a94 FEFFFFEB 		bl	printf		@
 2159              	.LVL101:
 339:armwave.c     **** 
 340:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2160              		.loc 1 340 5 view .LVU560
 2161              	.LBB92:
 2162              	.LBB93:
 2163              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2164              		.loc 1 186 59 is_stmt 0 view .LVU561
 2165 0a98 043094E5 		ldr	r3, [r4, #4]	@ img_22(D)->width, img_22(D)->width
 2166              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2167              		.loc 1 186 36 view .LVU562
 2168 0a9c 181094E5 		ldr	r1, [r4, #24]	@ img_22(D)->offsets, img_22(D)->offsets
 2169              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2170              		.loc 1 186 59 view .LVU563
 2171 0aa0 082094E5 		ldr	r2, [r4, #8]	@ img_22(D)->height, img_22(D)->height
 2172              	.LBE93:
 2173              	.LBE92:
 2174              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2175              		.loc 1 340 10 view .LVU564
 2176 0aa4 40C095E5 		ldr	ip, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2177              	.LBB98:
 2178              	.LBB94:
 2179              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2180              		.loc 1 186 22 view .LVU565
 2181 0aa8 001091E5 		ldr	r1, [r1]	@ *_69, *_69
 2182              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2183              		.loc 1 186 5 view .LVU566
 2184 0aac 920302E0 		mul	r2, r2, r3	@, img_22(D)->height, img_22(D)->width
 2185              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2186              		.loc 1 186 22 view .LVU567
 2187 0ab0 1C0094E5 		ldr	r0, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2188              	.LBE94:
 2189              	.LBE98:
 2190              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2191              		.loc 1 340 10 view .LVU568
 2192 0ab4 703095E5 		ldr	r3, [r5, #112]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2193              	.LBB99:
 2194              	.LBB95:
 2195              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2196              		.loc 1 186 5 view .LVU569
 2197 0ab8 010080E0 		add	r0, r0, r1	@, img_22(D)->data, *_69
 2198 0abc 1010A0E3 		mov	r1, #16	@,
 2199              	.LBE95:
 2200              	.LBE99:
 2201              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2202              		.loc 1 340 10 view .LVU570
 2203 0ac0 9C0307E0 		mul	r7, ip, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2204              	.LVL102:
 341:armwave.c     ****     
 342:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 343:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 344:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 345:armwave.c     **** 
 346:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 347:armwave.c     ****     //memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 348:armwave.c     ****     fill_rgb_xvimage(img, &g_fill_black);
 2205              		.loc 1 348 5 is_stmt 1 view .LVU571
 2206              	.LBB100:
 2207              	.LBI92:
 179:armwave.c     **** {
 2208              		.loc 1 179 6 view .LVU572
 2209              	.LBB96:
 181:armwave.c     ****     
 2210              		.loc 1 181 5 view .LVU573
 184:armwave.c     ****     
 2211              		.loc 1 184 5 view .LVU574
 184:armwave.c     ****     
 2212              		.loc 1 184 5 is_stmt 0 view .LVU575
 2213              	.LBE96:
 2214              	.LBE100:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 2215              		.loc 1 96 5 is_stmt 1 view .LVU576
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 2216              		.loc 1 97 5 view .LVU577
  98:armwave.c     **** }
 2217              		.loc 1 98 5 view .LVU578
 2218              	.LBB101:
 2219              	.LBB97:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2220              		.loc 1 186 5 view .LVU579
 2221 0ac4 FEFFFFEB 		bl	memset		@
 2222              	.LVL103:
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2223              		.loc 1 187 5 view .LVU580
 2224              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2225              		.loc 1 187 61 is_stmt 0 view .LVU581
 2226 0ac8 141094E5 		ldr	r1, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2227              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2228              		.loc 1 187 65 view .LVU582
 2229 0acc 082094E5 		ldr	r2, [r4, #8]	@ img_22(D)->height, img_22(D)->height
 2230              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2231              		.loc 1 187 36 view .LVU583
 2232 0ad0 183094E5 		ldr	r3, [r4, #24]	@ img_22(D)->offsets, img_22(D)->offsets
 2233              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2234              		.loc 1 187 65 view .LVU584
 2235 0ad4 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_86 + 4B], MEM[(int *)_86 + 4B]
 2236              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2237              		.loc 1 187 22 view .LVU585
 2238 0ad8 1C0094E5 		ldr	r0, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2239 0adc 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_80 + 4B], MEM[(int *)_80 + 4B]
 2240              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2241              		.loc 1 187 65 view .LVU586
 2242 0ae0 920102E0 		mul	r2, r2, r1	@ tmp263, img_22(D)->height, MEM[(int *)_86 + 4B]
 2243              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2244              		.loc 1 187 5 view .LVU587
 2245 0ae4 030080E0 		add	r0, r0, r3	@, img_22(D)->data, MEM[(int *)_80 + 4B]
 2246 0ae8 8010A0E3 		mov	r1, #128	@,
 2247              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2248              		.loc 1 187 80 view .LVU588
 2249 0aec A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp268, tmp263, tmp263,
 2250              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2251              		.loc 1 187 5 view .LVU589
 2252 0af0 C220A0E1 		asr	r2, r2, #1	@, tmp268,
 2253 0af4 FEFFFFEB 		bl	memset		@
 2254              	.LVL104:
 188:armwave.c     **** }
 2255              		.loc 1 188 5 is_stmt 1 view .LVU590
 2256              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2257              		.loc 1 188 61 is_stmt 0 view .LVU591
 2258 0af8 141094E5 		ldr	r1, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2259              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2260              		.loc 1 188 65 view .LVU592
 2261 0afc 082094E5 		ldr	r2, [r4, #8]	@ img_22(D)->height, img_22(D)->height
 2262              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2263              		.loc 1 188 36 view .LVU593
 2264 0b00 183094E5 		ldr	r3, [r4, #24]	@ img_22(D)->offsets, img_22(D)->offsets
 2265              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2266              		.loc 1 188 65 view .LVU594
 2267 0b04 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_99 + 8B], MEM[(int *)_99 + 8B]
 2268              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2269              		.loc 1 188 22 view .LVU595
 2270 0b08 1C0094E5 		ldr	r0, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2271 0b0c 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_93 + 8B], MEM[(int *)_93 + 8B]
 2272              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2273              		.loc 1 188 65 view .LVU596
 2274 0b10 920102E0 		mul	r2, r2, r1	@ tmp288, img_22(D)->height, MEM[(int *)_99 + 8B]
 2275              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2276              		.loc 1 188 5 view .LVU597
 2277 0b14 030080E0 		add	r0, r0, r3	@, img_22(D)->data, MEM[(int *)_93 + 8B]
 2278 0b18 8010A0E3 		mov	r1, #128	@,
 2279              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2280              		.loc 1 188 80 view .LVU598
 2281 0b1c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp293, tmp288, tmp288,
 2282              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2283              		.loc 1 188 5 view .LVU599
 2284 0b20 C220A0E1 		asr	r2, r2, #1	@, tmp293,
 2285 0b24 FEFFFFEB 		bl	memset		@
 2286              	.LVL105:
 188:armwave.c     **** }
 2287              		.loc 1 188 5 view .LVU600
 2288              	.LBE97:
 2289              	.LBE101:
 2290              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 349:armwave.c     ****     
 350:armwave.c     ****     //printf("iter...\n");
 351:armwave.c     **** 
 352:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 2291              		.loc 1 352 5 view .LVU601
 2292 0b28 000057E3 		cmp	r7, #0	@ npix,
 2293 0b2c 060000DA 		ble	.L67		@,
 2294              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 2295              		.loc 1 352 11 view .LVU602
 2296 0b30 00B0A0E3 		mov	fp, #0	@ n,
 2297              	.LVL106:
 2298              	.L73:
 353:armwave.c     ****         wave_word = *base_32ptr++;
 2299              		.loc 1 353 9 is_stmt 1 view .LVU603
 2300              	@ armwave.c:353:         wave_word = *base_32ptr++;
 2301              		.loc 1 353 19 is_stmt 0 view .LVU604
 2302 0b34 043099E4 		ldr	r3, [r9], #4	@ wave_word, MEM[base: base_32ptr_26, offset: 4294967292B]
 2303              	.LVL107:
 354:armwave.c     **** 
 355:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 2304              		.loc 1 355 9 is_stmt 1 view .LVU605
 2305              	@ armwave.c:355:         if(COND_UNLIKELY(wave_word != 0)) {
 2306              		.loc 1 355 11 is_stmt 0 view .LVU606
 2307 0b38 000053E3 		cmp	r3, #0	@ wave_word,
 2308 0b3c 0400001A 		bne	.L82		@,
 2309              	.LVL108:
 2310              	.L70:
 2311              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 352:armwave.c     ****         wave_word = *base_32ptr++;
 2312              		.loc 1 352 28 discriminator 2 view .LVU607
 2313 0b40 02B08BE2 		add	fp, fp, #2	@ n, n,
 2314              	.LVL109:
 2315              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 352:armwave.c     ****         wave_word = *base_32ptr++;
 2316              		.loc 1 352 5 discriminator 2 view .LVU608
 2317 0b44 0B0057E1 		cmp	r7, fp	@ npix, n
 2318 0b48 F9FFFFCA 		bgt	.L73		@,
 2319              	.LVL110:
 2320              	.L67:
 2321              	@ armwave.c:376: }
 356:armwave.c     ****             for(w = 0; w < 2; w++) {
 357:armwave.c     ****                 value = wave_word & 0xffff;
 358:armwave.c     ****                 wave_word >>= 16;
 359:armwave.c     **** 
 360:armwave.c     ****                 if(value != 0) {
 361:armwave.c     ****                     // Plot the pixels
 362:armwave.c     ****                     nsub = n + w;
 363:armwave.c     ****                     yy = (nsub & 0xff); 
 364:armwave.c     ****                     xx = (nsub >> 8) / 2;
 365:armwave.c     **** 
 366:armwave.c     ****                     // FASTQ does not paint U/V for odd pixels; works OK for most purposes.
 367:armwave.c     ****                     //plot_pixel_yuv_fastq(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 369:armwave.c     ****                     painted++;
 370:armwave.c     ****                 }
 371:armwave.c     ****             }
 372:armwave.c     ****         }
 373:armwave.c     ****     }
 374:armwave.c     **** 
 375:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 376:armwave.c     **** }
 2322              		.loc 1 376 1 view .LVU609
 2323 0b4c 0CD08DE2 		add	sp, sp, #12	@,,
 2324              		.cfi_remember_state
 2325              		.cfi_def_cfa_offset 36
 2326              		@ sp needed	@
 2327 0b50 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2328              	.LVL111:
 2329              	.L82:
 2330              		.cfi_restore_state
 357:armwave.c     ****                 wave_word >>= 16;
 2331              		.loc 1 357 17 is_stmt 1 view .LVU610
 362:armwave.c     ****                     yy = (nsub & 0xff); 
 2332              		.loc 1 362 21 view .LVU611
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2333              		.loc 1 363 21 view .LVU612
 364:armwave.c     **** 
 2334              		.loc 1 364 21 view .LVU613
 362:armwave.c     ****                     yy = (nsub & 0xff); 
 2335              		.loc 1 362 21 view .LVU614
 2336 0b54 01208BE2 		add	r2, fp, #1	@ _133, n,
 2337              	.LVL112:
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2338              		.loc 1 363 21 view .LVU615
 364:armwave.c     **** 
 2339              		.loc 1 364 21 view .LVU616
 2340              	@ armwave.c:363:                     yy = (nsub & 0xff); 
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2341              		.loc 1 363 24 is_stmt 0 view .LVU617
 2342 0b58 7B50EFE6 		uxtb	r5, fp	@ yy.10_116, n
 2343 0b5c 72E0EFE6 		uxtb	lr, r2	@ yy.10_171, _133
 2344              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2345              		.loc 1 364 32 view .LVU618
 2346 0b60 4224A0E1 		asr	r2, r2, #8	@ _169, _133,
 2347 0b64 4BC4A0E1 		asr	ip, fp, #8	@ _114, n,
 2348              	.LVL113:
 368:armwave.c     ****                     painted++;
 2349              		.loc 1 368 21 is_stmt 1 view .LVU619
 368:armwave.c     ****                     painted++;
 2350              		.loc 1 368 21 view .LVU620
 2351              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2352              		.loc 1 364 38 is_stmt 0 view .LVU621
 2353 0b68 A21F82E0 		add	r1, r2, r2, lsr #31	@ tmp359, _169, _169,
 2354 0b6c 04108DE5 		str	r1, [sp, #4]	@ tmp359, %sfp
 2355              	.LBB102:
 2356              	.LBB103:
 2357              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2358              		.loc 1 156 55 view .LVU622
 2359 0b70 C510A0E1 		asr	r1, r5, #1	@ _131, yy.10_116,
 2360 0b74 00108DE5 		str	r1, [sp]	@ _131, %sfp
 2361              	.LBE103:
 2362              	.LBE102:
 2363              	@ armwave.c:357:                 value = wave_word & 0xffff;
 357:armwave.c     ****                 wave_word >>= 16;
 2364              		.loc 1 357 23 view .LVU623
 2365 0b78 7310FFE6 		uxth	r1, r3	@ value, wave_word
 2366              	.LVL114:
 358:armwave.c     **** 
 2367              		.loc 1 358 17 is_stmt 1 view .LVU624
 2368              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2369              		.loc 1 360 19 is_stmt 0 view .LVU625
 2370 0b7c 000051E3 		cmp	r1, #0	@ value,
 2371              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2372              		.loc 1 364 38 view .LVU626
 2373 0b80 AC6F8CE0 		add	r6, ip, ip, lsr #31	@ tmp309, _114, _114,
 2374              	.LBB109:
 2375              	.LBB104:
 2376              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2377              		.loc 1 156 55 view .LVU627
 2378 0b84 CEA0A0E1 		asr	r10, lr, #1	@ _186, yy.10_171,
 2379              	.LBE104:
 2380              	.LBE109:
 2381              	@ armwave.c:358:                 wave_word >>= 16;
 358:armwave.c     **** 
 2382              		.loc 1 358 27 view .LVU628
 2383 0b88 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 2384              	.LVL115:
 360:armwave.c     ****                     // Plot the pixels
 2385              		.loc 1 360 17 is_stmt 1 view .LVU629
 357:armwave.c     ****                 wave_word >>= 16;
 2386              		.loc 1 357 17 view .LVU630
 358:armwave.c     **** 
 2387              		.loc 1 358 17 view .LVU631
 360:armwave.c     ****                     // Plot the pixels
 2388              		.loc 1 360 17 view .LVU632
 2389              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2390              		.loc 1 360 19 is_stmt 0 view .LVU633
 2391 0b8c 2100000A 		beq	.L71		@,
 2392              	.LBB110:
 2393              	.LBB105:
 2394              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2395              		.loc 1 155 37 view .LVU634
 2396 0b90 048094E5 		ldr	r8, [r4, #4]	@ tmp409, img_22(D)->width
 2397 0b94 1C0094E5 		ldr	r0, [r4, #28]	@ tmp410, img_22(D)->data
 2398              	.LBE105:
 2399              	.LBE110:
 2400              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2401              		.loc 1 368 60 view .LVU635
 2402 0b98 FF0051E3 		cmp	r1, #255	@ value,
 2403 0b9c FF10A0A3 		movge	r1, #255	@ _117,
 2404              	.LVL116:
 2405              	.LBB111:
 2406              	.LBI102:
 151:armwave.c     **** {
 2407              		.loc 1 151 44 is_stmt 1 view .LVU636
 2408              	.LBB106:
 153:armwave.c     ****     
 2409              		.loc 1 153 5 view .LVU637
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2410              		.loc 1 155 5 view .LVU638
 2411              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2412              		.loc 1 155 37 is_stmt 0 view .LVU639
 2413 0ba0 980525E0 		mla	r5, r8, r5, r0	@ tmp312, tmp409, yy.10_116, tmp410
 2414              	.LVL117:
 2415              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2416              		.loc 1 155 45 view .LVU640
 2417 0ba4 04019FE5 		ldr	r0, .L83+8	@ tmp426,
 2418 0ba8 811081E0 		add	r1, r1, r1, lsl #1	@ tmp303, _117, _117,
 2419              	.LVL118:
 2420              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2421              		.loc 1 156 66 view .LVU641
 2422 0bac 03808CE2 		add	r8, ip, #3	@ tmp316, _114,
 2423              	.LVL119:
 2424              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2425              		.loc 1 155 45 view .LVU642
 2426 0bb0 0100D0E7 		ldrb	r0, [r0, r1]	@ zero_extendqisi2	@ _124, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_117].y
 2427              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2428              		.loc 1 156 66 view .LVU643
 2429 0bb4 00005CE3 		cmp	ip, #0	@ _114,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2430              		.loc 1 156 66 view .LVU644
 2431 0bb8 08C0A0B1 		movlt	ip, r8	@ _114, tmp316
 2432              	.LVL120:
 2433              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2434              		.loc 1 155 37 view .LVU645
 2435 0bbc C600C5E7 		strb	r0, [r5, r6, asr #1]	@ _124, *_123
 2436              	.LVL121:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2437              		.loc 1 156 5 is_stmt 1 view .LVU646
 2438              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2439              		.loc 1 156 46 is_stmt 0 view .LVU647
 2440 0bc0 140094E5 		ldr	r0, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2441              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2442              		.loc 1 155 45 view .LVU648
 2443 0bc4 E4809FE5 		ldr	r8, .L83+8	@ tmp427,
 2444              	.LVL122:
 2445              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2446              		.loc 1 156 72 view .LVU649
 2447 0bc8 1C6094E5 		ldr	r6, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2448              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2449              		.loc 1 156 50 view .LVU650
 2450 0bcc 045090E5 		ldr	r5, [r0, #4]	@ MEM[(int *)_129 + 4B], MEM[(int *)_129 + 4B]
 2451              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2452              		.loc 1 155 45 view .LVU651
 2453 0bd0 011088E0 		add	r1, r8, r1	@ tmp304, tmp427, tmp303
 2454              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2455              		.loc 1 156 72 view .LVU652
 2456 0bd4 00809DE5 		ldr	r8, [sp]	@ _131, %sfp
 2457              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2458              		.loc 1 156 66 view .LVU653
 2459 0bd8 4CC1A0E1 		asr	ip, ip, #2	@ tmp317, _114,
 2460              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2461              		.loc 1 156 72 view .LVU654
 2462 0bdc 0C0086E0 		add	r0, r6, ip	@ tmp330, img_22(D)->data, tmp317
 2463 0be0 950820E0 		mla	r0, r5, r8, r0	@ tmp331, MEM[(int *)_129 + 4B], _131, tmp330
 2464 0be4 185094E5 		ldr	r5, [r4, #24]	@ tmp414, img_22(D)->offsets
 2465              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2466              		.loc 1 156 80 view .LVU655
 2467 0be8 0260D1E5 		ldrb	r6, [r1, #2]	@ zero_extendqisi2	@ _144, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_117].v
 2468              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2469              		.loc 1 156 72 view .LVU656
 2470 0bec 045095E5 		ldr	r5, [r5, #4]	@ MEM[(int *)_127 + 4B], MEM[(int *)_127 + 4B]
 2471 0bf0 0560C0E7 		strb	r6, [r0, r5]	@ _144, *_143
 157:armwave.c     **** }
 2472              		.loc 1 157 5 is_stmt 1 view .LVU657
 2473              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2474              		.loc 1 157 46 is_stmt 0 view .LVU658
 2475 0bf4 140094E5 		ldr	r0, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2476              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2477              		.loc 1 157 72 view .LVU659
 2478 0bf8 1C6094E5 		ldr	r6, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2479              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2480              		.loc 1 157 80 view .LVU660
 2481 0bfc 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2	@ _156, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_117].u
 2482              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2483              		.loc 1 157 50 view .LVU661
 2484 0c00 085090E5 		ldr	r5, [r0, #8]	@ MEM[(int *)_149 + 8B], MEM[(int *)_149 + 8B]
 2485              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2486              		.loc 1 157 72 view .LVU662
 2487 0c04 180094E5 		ldr	r0, [r4, #24]	@ tmp416, img_22(D)->offsets
 2488 0c08 0CC086E0 		add	ip, r6, ip	@ tmp346, img_22(D)->data, tmp317
 2489 0c0c 95C82CE0 		mla	ip, r5, r8, ip	@ tmp347, MEM[(int *)_149 + 8B], _131, tmp346
 2490 0c10 080090E5 		ldr	r0, [r0, #8]	@ MEM[(int *)_147 + 8B], MEM[(int *)_147 + 8B]
 2491 0c14 0010CCE7 		strb	r1, [ip, r0]	@ _156, *_155
 2492              	.LVL123:
 157:armwave.c     **** }
 2493              		.loc 1 157 72 view .LVU663
 2494              	.LBE106:
 2495              	.LBE111:
 369:armwave.c     ****                 }
 2496              		.loc 1 369 21 is_stmt 1 view .LVU664
 2497              	.L71:
 2498              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2499              		.loc 1 360 19 is_stmt 0 view .LVU665
 2500 0c18 000053E3 		cmp	r3, #0	@ wave_word,
 2501 0c1c C7FFFF0A 		beq	.L70		@,
 2502              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2503              		.loc 1 368 60 view .LVU666
 2504 0c20 FF0053E3 		cmp	r3, #255	@ wave_word,
 2505              	.LBB112:
 2506              	.LBB107:
 2507              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2508              		.loc 1 155 27 view .LVU667
 2509 0c24 040094E5 		ldr	r0, [r4, #4]	@ img_22(D)->width, img_22(D)->width
 2510              	.LBE107:
 2511              	.LBE112:
 2512              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2513              		.loc 1 368 60 view .LVU668
 2514 0c28 FF30A0A3 		movge	r3, #255	@ _172,
 2515              	.LVL124:
 2516              	.LBB113:
 151:armwave.c     **** {
 2517              		.loc 1 151 44 is_stmt 1 view .LVU669
 2518              	.LBB108:
 153:armwave.c     ****     
 2519              		.loc 1 153 5 view .LVU670
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2520              		.loc 1 155 5 view .LVU671
 2521              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2522              		.loc 1 155 37 is_stmt 0 view .LVU672
 2523 0c2c 1C1094E5 		ldr	r1, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2524              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2525              		.loc 1 155 45 view .LVU673
 2526 0c30 78C09FE5 		ldr	ip, .L83+8	@ tmp422,
 2527 0c34 833083E0 		add	r3, r3, r3, lsl #1	@ tmp353, _172, _172,
 2528              	.LVL125:
 2529              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2530              		.loc 1 155 37 view .LVU674
 2531 0c38 901E2EE0 		mla	lr, r0, lr, r1	@ tmp362, img_22(D)->width, yy.10_171, img_22(D)->data
 2532              	.LVL126:
 2533              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2534              		.loc 1 156 66 view .LVU675
 2535 0c3c 000052E3 		cmp	r2, #0	@ _169,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2536              		.loc 1 156 66 view .LVU676
 2537 0c40 030082E2 		add	r0, r2, #3	@ tmp366, _169,
 2538              	.LVL127:
 2539              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2540              		.loc 1 155 45 view .LVU677
 2541 0c44 0310DCE7 		ldrb	r1, [ip, r3]	@ zero_extendqisi2	@ _179, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_172].y
 2542              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2543              		.loc 1 156 66 view .LVU678
 2544 0c48 0020A0B1 		movlt	r2, r0	@ _169, tmp366
 2545              	.LVL128:
 2546              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2547              		.loc 1 155 37 view .LVU679
 2548 0c4c 04009DE5 		ldr	r0, [sp, #4]	@ tmp359, %sfp
 2549              	.LVL129:
 2550              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2551              		.loc 1 155 45 view .LVU680
 2552 0c50 03308CE0 		add	r3, ip, r3	@ tmp354, tmp423, tmp353
 2553              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2554              		.loc 1 156 66 view .LVU681
 2555 0c54 4221A0E1 		asr	r2, r2, #2	@ tmp367, _169,
 2556              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2557              		.loc 1 155 37 view .LVU682
 2558 0c58 C010CEE7 		strb	r1, [lr, r0, asr #1]	@ _179, *_178
 2559              	.LVL130:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2560              		.loc 1 156 5 is_stmt 1 view .LVU683
 2561              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2562              		.loc 1 156 46 is_stmt 0 view .LVU684
 2563 0c5c 141094E5 		ldr	r1, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2564              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2565              		.loc 1 156 72 view .LVU685
 2566 0c60 1C0094E5 		ldr	r0, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2567              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2568              		.loc 1 156 27 view .LVU686
 2569 0c64 18C094E5 		ldr	ip, [r4, #24]	@ img_22(D)->offsets, img_22(D)->offsets
 2570              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2571              		.loc 1 156 50 view .LVU687
 2572 0c68 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_184 + 4B], MEM[(int *)_184 + 4B]
 2573              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2574              		.loc 1 156 72 view .LVU688
 2575 0c6c 020080E0 		add	r0, r0, r2	@ tmp380, img_22(D)->data, tmp367
 2576 0c70 910A21E0 		mla	r1, r1, r10, r0	@ tmp381, MEM[(int *)_184 + 4B], _186, tmp380
 2577 0c74 04009CE5 		ldr	r0, [ip, #4]	@ MEM[(int *)_182 + 4B], MEM[(int *)_182 + 4B]
 2578              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2579              		.loc 1 156 80 view .LVU689
 2580 0c78 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2	@ _193, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_172].v
 2581              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2582              		.loc 1 156 72 view .LVU690
 2583 0c7c 00C0C1E7 		strb	ip, [r1, r0]	@ _193, *_192
 157:armwave.c     **** }
 2584              		.loc 1 157 5 is_stmt 1 view .LVU691
 2585              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2586              		.loc 1 157 46 is_stmt 0 view .LVU692
 2587 0c80 14C094E5 		ldr	ip, [r4, #20]	@ img_22(D)->pitches, img_22(D)->pitches
 2588              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2589              		.loc 1 157 80 view .LVU693
 2590 0c84 0100D3E5 		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@ _205, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_172].u
 2591              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2592              		.loc 1 157 72 view .LVU694
 2593 0c88 1C3094E5 		ldr	r3, [r4, #28]	@ img_22(D)->data, img_22(D)->data
 2594              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2595              		.loc 1 157 50 view .LVU695
 2596 0c8c 08C09CE5 		ldr	ip, [ip, #8]	@ MEM[(int *)_198 + 8B], MEM[(int *)_198 + 8B]
 2597              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2598              		.loc 1 157 27 view .LVU696
 2599 0c90 181094E5 		ldr	r1, [r4, #24]	@ img_22(D)->offsets, img_22(D)->offsets
 2600              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2601              		.loc 1 157 72 view .LVU697
 2602 0c94 022083E0 		add	r2, r3, r2	@ tmp396, img_22(D)->data, tmp367
 2603 0c98 9C2A22E0 		mla	r2, ip, r10, r2	@ tmp397, MEM[(int *)_198 + 8B], _186, tmp396
 2604 0c9c 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_196 + 8B], MEM[(int *)_196 + 8B]
 2605 0ca0 0100C2E7 		strb	r0, [r2, r1]	@ _205, *_204
 2606              	.LVL131:
 157:armwave.c     **** }
 2607              		.loc 1 157 72 view .LVU698
 2608              	.LBE108:
 2609              	.LBE113:
 369:armwave.c     ****                 }
 2610              		.loc 1 369 21 is_stmt 1 view .LVU699
 2611 0ca4 A5FFFFEA 		b	.L70		@
 2612              	.L84:
 2613              		.align	2
 2614              	.L83:
 2615 0ca8 00000000 		.word	g_armwave_state
 2616 0cac 9C000000 		.word	.LC6
 2617 0cb0 00000000 		.word	g_yuv_lut
 2618              		.cfi_endproc
 2619              	.LFE65:
 2621              		.global	__aeabi_idiv
 2622              		.align	2
 2623              		.global	armwave_generate
 2624              		.syntax unified
 2625              		.arm
 2626              		.fpu vfp
 2628              	armwave_generate:
 2629              	.LFB66:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_generate()
 382:armwave.c     **** {
 2630              		.loc 1 382 1 view -0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     uint32_t yy;
 2634              		.loc 1 383 5 view .LVU701
 384:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 2635              		.loc 1 384 5 view .LVU702
 2636              	@ armwave.c:382: {
 382:armwave.c     ****     uint32_t yy;
 2637              		.loc 1 382 1 is_stmt 0 view .LVU703
 2638 0cb4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2639              		.cfi_def_cfa_offset 24
 2640              		.cfi_offset 4, -24
 2641              		.cfi_offset 5, -20
 2642              		.cfi_offset 6, -16
 2643              		.cfi_offset 7, -12
 2644              		.cfi_offset 8, -8
 2645              		.cfi_offset 14, -4
 2646              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 385:armwave.c     **** 
 386:armwave.c     ****     // Zero the buffer
 387:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2647              		.loc 1 387 5 view .LVU704
 2648 0cb8 0010A0E3 		mov	r1, #0	@,
 2649              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2650              		.loc 1 384 38 view .LVU705
 2651 0cbc 80609FE5 		ldr	r6, .L91	@ tmp147,
 2652              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2653              		.loc 1 387 5 view .LVU706
 2654 0cc0 502096E5 		ldr	r2, [r6, #80]	@, g_armwave_state.ch_buff_size
 2655 0cc4 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 2656              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2657              		.loc 1 384 14 view .LVU707
 2658 0cc8 4C8096E5 		ldr	r8, [r6, #76]	@ xx_rem, g_armwave_state.wave_length
 2659              	.LVL132:
 2660              		.loc 1 387 5 is_stmt 1 view .LVU708
 2661 0ccc FEFFFFEB 		bl	memset		@
 2662              	.LVL133:
 388:armwave.c     **** 
 389:armwave.c     ****     // Render the main slices
 390:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 2663              		.loc 1 390 5 view .LVU709
 2664              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2665              		.loc 1 390 68 is_stmt 0 view .LVU710
 2666 0cd0 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2667              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2668              		.loc 1 390 51 view .LVU711
 2669 0cd4 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2670 0cd8 0410A0E1 		mov	r1, r4	@, _9
 2671 0cdc FEFFFFEB 		bl	__aeabi_idiv		@
 2672              	.LVL134:
 2673              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2674              		.loc 1 390 5 view .LVU712
 2675 0ce0 000050E3 		cmp	r0, #0	@ tmp139
 2676 0ce4 1100000A 		beq	.L88		@,
 2677              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2678              		.loc 1 384 52 view .LVU713
 2679 0ce8 0070A0E3 		mov	r7, #0	@ ypos,
 2680              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2681              		.loc 1 390 12 view .LVU714
 2682 0cec 0750A0E1 		mov	r5, r7	@ yy, ypos
 2683              	.LVL135:
 2684              	.L87:
 391:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2685              		.loc 1 391 9 is_stmt 1 discriminator 3 view .LVU715
 2686 0cf0 950400E0 		mul	r0, r5, r4	@, yy, tmp1
 2687 0cf4 0410A0E1 		mov	r1, r4	@, _9
 2688 0cf8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2689              	.LVL136:
 392:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2690              		.loc 1 392 9 discriminator 3 view .LVU716
 2691              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 2692              		.loc 1 392 34 is_stmt 0 discriminator 3 view .LVU717
 2693 0cfc 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2694              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2695              		.loc 1 390 51 discriminator 3 view .LVU718
 2696 0d00 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2697 0d04 0410A0E1 		mov	r1, r4	@, _9
 2698 0d08 FEFFFFEB 		bl	__aeabi_idiv		@
 2699              	.LVL137:
 2700              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2701              		.loc 1 390 86 discriminator 3 view .LVU719
 2702 0d0c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2703              	.LVL138:
 2704              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 2705              		.loc 1 392 16 discriminator 3 view .LVU720
 2706 0d10 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _9
 2707              	.LVL139:
 393:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 2708              		.loc 1 393 9 is_stmt 1 discriminator 3 view .LVU721
 2709              	@ armwave.c:393:         ypos += g_armwave_state.slice_height;   
 2710              		.loc 1 393 14 is_stmt 0 discriminator 3 view .LVU722
 2711 0d14 047087E0 		add	r7, r7, r4	@ ypos, ypos, _9
 2712              	.LVL140:
 2713              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2714              		.loc 1 390 5 discriminator 3 view .LVU723
 2715 0d18 050050E1 		cmp	r0, r5	@, yy
 2716 0d1c F3FFFF8A 		bhi	.L87		@,
 394:armwave.c     ****     }
 395:armwave.c     **** 
 396:armwave.c     ****     // Render whatever is left over
 397:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2717              		.loc 1 397 5 is_stmt 1 view .LVU724
 2718 0d20 0810A0E1 		mov	r1, r8	@, xx_rem
 2719 0d24 0700A0E1 		mov	r0, r7	@, ypos
 2720              	@ armwave.c:398: }
 398:armwave.c     **** }
 2721              		.loc 1 398 1 is_stmt 0 view .LVU725
 2722 0d28 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2723              		.cfi_remember_state
 2724              		.cfi_restore 14
 2725              		.cfi_restore 8
 2726              		.cfi_restore 7
 2727              		.cfi_restore 6
 2728              		.cfi_restore 5
 2729              		.cfi_restore 4
 2730              		.cfi_def_cfa_offset 0
 2731              	.LVL141:
 2732              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 2733              		.loc 1 397 5 view .LVU726
 2734 0d2c FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2735              	.LVL142:
 2736              	.L88:
 2737              		.cfi_restore_state
 2738              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2739              		.loc 1 384 52 view .LVU727
 2740 0d30 0070A0E1 		mov	r7, r0	@ ypos, tmp139
 397:armwave.c     **** }
 2741              		.loc 1 397 5 is_stmt 1 view .LVU728
 2742 0d34 0810A0E1 		mov	r1, r8	@, xx_rem
 2743 0d38 0700A0E1 		mov	r0, r7	@, ypos
 2744              	@ armwave.c:398: }
 2745              		.loc 1 398 1 is_stmt 0 view .LVU729
 2746 0d3c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2747              		.cfi_restore 14
 2748              		.cfi_restore 8
 2749              		.cfi_restore 7
 2750              		.cfi_restore 6
 2751              		.cfi_restore 5
 2752              		.cfi_restore 4
 2753              		.cfi_def_cfa_offset 0
 2754              	.LVL143:
 2755              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 2756              		.loc 1 397 5 view .LVU730
 2757 0d40 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2758              	.LVL144:
 2759              	.L92:
 2760              		.align	2
 2761              	.L91:
 2762 0d44 00000000 		.word	g_armwave_state
 2763              		.cfi_endproc
 2764              	.LFE66:
 2766              		.align	2
 2767              		.global	armwave_setup_render
 2768              		.syntax unified
 2769              		.arm
 2770              		.fpu vfp
 2772              	armwave_setup_render:
 2773              	.LVL145:
 2774              	.LFB67:
 399:armwave.c     **** 
 400:armwave.c     **** /*
 401:armwave.c     ****  * Setup the renderer with passed parameters.
 402:armwave.c     ****  */
 403:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 404:armwave.c     **** {
 2775              		.loc 1 404 1 is_stmt 1 view -0
 2776              		.cfi_startproc
 2777              		@ args = 12, pretend = 0, frame = 0
 2778              		@ frame_needed = 0, uses_anonymous_args = 0
 405:armwave.c     ****     uint32_t length, xx;
 2779              		.loc 1 405 5 view .LVU732
 406:armwave.c     ****     float points_per_pixel;
 2780              		.loc 1 406 5 view .LVU733
 407:armwave.c     **** 
 408:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 2781              		.loc 1 408 5 view .LVU734
 2782              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2783              		.loc 1 404 1 is_stmt 0 view .LVU735
 2784 0d48 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2785              		.cfi_def_cfa_offset 32
 2786              		.cfi_offset 4, -32
 2787              		.cfi_offset 5, -28
 2788              		.cfi_offset 6, -24
 2789              		.cfi_offset 7, -20
 2790              		.cfi_offset 8, -16
 2791              		.cfi_offset 9, -12
 2792              		.cfi_offset 10, -8
 2793              		.cfi_offset 14, -4
 2794 0d4c 10D04DE2 		sub	sp, sp, #16	@,,
 2795              		.cfi_def_cfa_offset 48
 2796              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2797              		.loc 1 404 1 view .LVU736
 2798 0d50 0040A0E1 		mov	r4, r0	@ start_point, start_point
 2799 0d54 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 2800 0d58 38809DE5 		ldr	r8, [sp, #56]	@ render_flags, render_flags
 2801 0d5c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 2802              	@ armwave.c:408:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2803              		.loc 1 408 5 view .LVU737
 2804 0d60 00308DE5 		str	r3, [sp]	@ wave_stride,
 2805              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2806              		.loc 1 404 1 view .LVU738
 2807 0d64 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 2808 0d68 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 2809              	@ armwave.c:408:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2810              		.loc 1 408 5 view .LVU739
 2811 0d6c F460CDE1 		strd	r6, [sp, #4]	@,,
 2812 0d70 0230A0E1 		mov	r3, r2	@, waves_max
 2813              	.LVL146:
 2814              		.loc 1 408 5 view .LVU740
 2815 0d74 0C808DE5 		str	r8, [sp, #12]	@ render_flags,
 2816 0d78 0120A0E1 		mov	r2, r1	@, end_point
 2817              	.LVL147:
 2818              		.loc 1 408 5 view .LVU741
 2819 0d7c 0010A0E1 		mov	r1, r0	@, start_point
 2820              	.LVL148:
 2821              		.loc 1 408 5 view .LVU742
 2822 0d80 0C029FE5 		ldr	r0, .L108+12	@,
 2823              	.LVL149:
 2824              		.loc 1 408 5 view .LVU743
 2825 0d84 FEFFFFEB 		bl	printf		@
 2826              	.LVL150:
 409:armwave.c     **** 
 410:armwave.c     ****     if(start_point > end_point) {
 2827              		.loc 1 410 5 is_stmt 1 view .LVU744
 2828              	@ armwave.c:410:     if(start_point > end_point) {
 2829              		.loc 1 410 7 is_stmt 0 view .LVU745
 2830 0d88 050054E1 		cmp	r4, r5	@ start_point, end_point
 2831 0d8c 6D00008A 		bhi	.L106		@,
 411:armwave.c     ****         printf("Error: start point more than end point\n");
 412:armwave.c     ****         return;
 413:armwave.c     ****     }
 414:armwave.c     **** 
 415:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 416:armwave.c     ****     g_armwave_state.xstride = target_height;
 2832              		.loc 1 416 5 is_stmt 1 view .LVU746
 2833              	@ armwave.c:427:     g_armwave_state.wave_length = end_point - start_point;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 418:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 419:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 420:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 421:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 422:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 423:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 424:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 425:armwave.c     ****     g_armwave_state.target_width = target_width;
 426:armwave.c     ****     g_armwave_state.target_height = target_height;
 427:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2834              		.loc 1 427 45 is_stmt 0 view .LVU747
 2835 0d90 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 2836              	.LVL151:
 2837              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     ****     g_armwave_state.flags = render_flags;
 429:armwave.c     **** 
 430:armwave.c     ****     // Calculate compound scaler
 431:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 432:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2838              		.loc 1 432 48 view .LVU748
 2839 0d94 7B5A9FED 		vldr.32	s10, .L108	@ tmp197,
 2840 0d98 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 2841              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2842              		.loc 1 417 49 view .LVU749
 2843 0d9c 7A7A9FED 		vldr.32	s14, .L108+4	@ tmp174,
 2844              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2845              		.loc 1 432 81 view .LVU750
 2846 0da0 7A6A9FED 		vldr.32	s12, .L108+8	@ tmp201,
 2847              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2848              		.loc 1 424 90 view .LVU751
 2849 0da4 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 2850              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2851              		.loc 1 432 48 view .LVU752
 2852 0da8 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp195, _13
 2853              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2854              		.loc 1 417 49 view .LVU753
 2855 0dac 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 2856              	@ armwave.c:416:     g_armwave_state.xstride = target_height;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2857              		.loc 1 416 29 view .LVU754
 2858 0db0 E0419FE5 		ldr	r4, .L108+16	@ tmp247,
 2859              	.LVL152:
 2860              	@ armwave.c:422:     g_armwave_state.size = target_height * target_width;
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2861              		.loc 1 422 42 view .LVU755
 2862 0db4 970600E0 		mul	r0, r7, r6	@ tmp182, target_height, target_width
 2863              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2864              		.loc 1 417 49 view .LVU756
 2865 0db8 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 2866              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2867              		.loc 1 424 95 view .LVU757
 2868 0dbc 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 2869              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 433:armwave.c     **** 
 434:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 2870              		.loc 1 434 5 view .LVU758
 2871 0dc0 0128A0E3 		mov	r2, #65536	@ tmp204,
 2872              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2873              		.loc 1 432 48 view .LVU759
 2874 0dc4 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp196, tmp197, tmp195
 2875              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2876              		.loc 1 434 5 view .LVU760
 2877 0dc8 04508DE5 		str	r5, [sp, #4]	@ _13,
 2878 0dcc 00608DE5 		str	r6, [sp]	@ target_width,
 2879              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2880              		.loc 1 424 95 view .LVU761
 2881 0dd0 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 2882              	@ armwave.c:416:     g_armwave_state.xstride = target_height;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2883              		.loc 1 416 29 view .LVU762
 2884 0dd4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2885              		.loc 1 417 5 is_stmt 1 view .LVU763
 2886              	@ armwave.c:419:     g_armwave_state.wave_stride = wave_stride;
 419:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2887              		.loc 1 419 33 is_stmt 0 view .LVU764
 2888 0dd8 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 2889              	@ armwave.c:420:     g_armwave_state.waves_max = waves_max;
 420:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2890              		.loc 1 420 31 view .LVU765
 2891 0ddc 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 2892              	@ armwave.c:421:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 421:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2893              		.loc 1 421 27 view .LVU766
 2894 0de0 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 2895              	@ armwave.c:426:     g_armwave_state.target_height = target_height;
 426:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2896              		.loc 1 426 35 view .LVU767
 2897 0de4 F067C4E1 		strd	r6, [r4, #112]	@, tmp247,
 2898              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2899              		.loc 1 434 5 view .LVU768
 2900 0de8 08208DE5 		str	r2, [sp, #8]	@ tmp204,
 2901              	@ armwave.c:423:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2902              		.loc 1 423 37 view .LVU769
 2903 0dec 022CA0E3 		mov	r2, #512	@ tmp184,
 2904              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2905              		.loc 1 434 5 view .LVU770
 2906 0df0 0310A0E1 		mov	r1, r3	@, tmp189
 2907              	@ armwave.c:422:     g_armwave_state.size = target_height * target_width;
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2908              		.loc 1 422 26 view .LVU771
 2909 0df4 540084E5 		str	r0, [r4, #84]	@ tmp182, g_armwave_state.size
 2910              	@ armwave.c:423:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2911              		.loc 1 423 37 view .LVU772
 2912 0df8 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 2913              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2914              		.loc 1 424 34 view .LVU773
 2915 0dfc 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 2916              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2917              		.loc 1 417 49 view .LVU774
 2918 0e00 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp173, tmp174
 2919              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2920              		.loc 1 432 40 view .LVU775
 2921 0e04 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 2922              	@ armwave.c:427:     g_armwave_state.wave_length = end_point - start_point;
 427:armwave.c     ****     g_armwave_state.flags = render_flags;
 2923              		.loc 1 427 33 view .LVU776
 2924 0e08 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 2925              	@ armwave.c:428:     g_armwave_state.flags = render_flags;
 428:armwave.c     **** 
 2926              		.loc 1 428 27 view .LVU777
 2927 0e0c 008084E5 		str	r8, [r4]	@ render_flags, g_armwave_state.flags
 2928              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2929              		.loc 1 434 5 view .LVU778
 2930 0e10 84019FE5 		ldr	r0, .L108+20	@,
 2931              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2932              		.loc 1 432 40 view .LVU779
 2933 0e14 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, target_width
 2934 0e18 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp196, tmp198
 2935              	@ armwave.c:418:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2936              		.loc 1 418 30 view .LVU780
 2937 0e1c E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp177, _3
 2938              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2939              		.loc 1 417 33 view .LVU781
 2940 0e20 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2941              		.loc 1 418 5 is_stmt 1 view .LVU782
 2942              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2943              		.loc 1 432 81 is_stmt 0 view .LVU783
 2944 0e24 867A67EE 		vmul.f32	s15, s15, s12	@ tmp200, tmp199, tmp201
 2945              	@ armwave.c:418:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2946              		.loc 1 418 30 view .LVU784
 2947 0e28 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 419:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2948              		.loc 1 419 5 is_stmt 1 view .LVU785
 420:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2949              		.loc 1 420 5 view .LVU786
 421:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2950              		.loc 1 421 5 view .LVU787
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2951              		.loc 1 422 5 view .LVU788
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2952              		.loc 1 423 5 view .LVU789
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2953              		.loc 1 424 5 view .LVU790
 425:armwave.c     ****     g_armwave_state.target_height = target_height;
 2954              		.loc 1 425 5 view .LVU791
 426:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2955              		.loc 1 426 5 view .LVU792
 427:armwave.c     ****     g_armwave_state.flags = render_flags;
 2956              		.loc 1 427 5 view .LVU793
 428:armwave.c     **** 
 2957              		.loc 1 428 5 view .LVU794
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2958              		.loc 1 431 5 view .LVU795
 2959              	@ armwave.c:431:     g_armwave_state.cmp_x_bitdepth_scale = \
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2960              		.loc 1 431 42 is_stmt 0 view .LVU796
 2961 0e2c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp200
 2962 0e30 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 2963              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2964              		.loc 1 434 5 view .LVU797
 2965 0e34 903A17EE 		vmov	r3, s15	@ int	@, _20
 2966              	@ armwave.c:431:     g_armwave_state.cmp_x_bitdepth_scale = \
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2967              		.loc 1 431 42 view .LVU798
 2968 0e38 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 2969              		.loc 1 434 5 is_stmt 1 view .LVU799
 2970 0e3c 0C20A0E1 		mov	r2, ip	@, tmp3
 2971 0e40 FEFFFFEB 		bl	printf		@
 2972              	.LVL153:
 435:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 436:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 437:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 438:armwave.c     **** 
 439:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 440:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 441:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 442:armwave.c     ****     g_armwave_state.slice_height = 16; // 64;  
 2973              		.loc 1 442 5 view .LVU800
 2974              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 443:armwave.c     **** 
 444:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 2975              		.loc 1 444 23 is_stmt 0 view .LVU801
 2976 0e44 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2977              	@ armwave.c:442:     g_armwave_state.slice_height = 16; // 64;  
 442:armwave.c     **** 
 2978              		.loc 1 442 34 view .LVU802
 2979 0e48 1030A0E3 		mov	r3, #16	@ tmp206,
 2980              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 2981              		.loc 1 444 7 view .LVU803
 2982 0e4c 000050E3 		cmp	r0, #0	@ _21,
 2983              	@ armwave.c:442:     g_armwave_state.slice_height = 16; // 64;  
 442:armwave.c     **** 
 2984              		.loc 1 442 34 view .LVU804
 2985 0e50 443084E5 		str	r3, [r4, #68]	@ tmp206, g_armwave_state.slice_height
 2986              		.loc 1 444 5 is_stmt 1 view .LVU805
 2987              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 2988              		.loc 1 444 7 is_stmt 0 view .LVU806
 2989 0e54 0000000A 		beq	.L95		@,
 445:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2990              		.loc 1 445 9 is_stmt 1 view .LVU807
 2991 0e58 FEFFFFEB 		bl	free		@
 2992              	.LVL154:
 2993              	.L95:
 446:armwave.c     **** 
 447:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2994              		.loc 1 447 5 view .LVU808
 2995              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2996              		.loc 1 447 56 is_stmt 0 view .LVU809
 2997 0e5c 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 2998              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2999              		.loc 1 447 34 view .LVU810
 3000 0e60 0110A0E3 		mov	r1, #1	@,
 3001 0e64 0800A0E1 		mov	r0, r8	@, _22
 3002 0e68 FEFFFFEB 		bl	calloc		@
 3003              	.LVL155:
 3004              	@ armwave.c:449:     if(g_armwave_state.ch1_buffer == NULL) {
 448:armwave.c     **** 
 449:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 3005              		.loc 1 449 7 view .LVU811
 3006 0e6c 000050E3 		cmp	r0, #0	@ pretmp_124,
 3007              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 447:armwave.c     **** 
 3008              		.loc 1 447 34 view .LVU812
 3009 0e70 0070A0E1 		mov	r7, r0	@ pretmp_124,
 3010              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 447:armwave.c     **** 
 3011              		.loc 1 447 32 view .LVU813
 3012 0e74 040084E5 		str	r0, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3013              		.loc 1 449 5 is_stmt 1 view .LVU814
 3014              	@ armwave.c:449:     if(g_armwave_state.ch1_buffer == NULL) {
 3015              		.loc 1 449 7 is_stmt 0 view .LVU815
 3016 0e78 3B00000A 		beq	.L107		@,
 450:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 451:armwave.c     ****         exit(-1);
 452:armwave.c     ****     }
 453:armwave.c     **** 
 454:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 455:armwave.c     ****     length = end_point - start_point;
 3017              		.loc 1 455 5 is_stmt 1 view .LVU816
 3018              	.LVL156:
 456:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3019              		.loc 1 456 5 view .LVU817
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3020              		.loc 1 457 5 view .LVU818
 3021              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3022              		.loc 1 456 31 is_stmt 0 view .LVU819
 3023 0e7c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 3024              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3025              		.loc 1 457 77 view .LVU820
 3026 0e80 448094E5 		ldr	r8, [r4, #68]	@ _28, g_armwave_state.slice_height
 3027              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 458:armwave.c     **** 
 459:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3028              		.loc 1 459 40 view .LVU821
 3029 0e84 8500A0E1 		lsl	r0, r5, #1	@, _13,
 3030              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3031              		.loc 1 456 31 view .LVU822
 3032 0e88 676AB8EE 		vcvt.f32.u32	s12, s15	@ tmp215, _13
 3033              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3034              		.loc 1 456 34 view .LVU823
 3035 0e8c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 3036              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3037              		.loc 1 457 60 view .LVU824
 3038 0e90 108A07EE 		vmov	s14, r8	@ int	@ _28, _28
 3039              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3040              		.loc 1 456 34 view .LVU825
 3041 0e94 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 3042              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3043              		.loc 1 457 60 view .LVU826
 3044 0e98 C76AF8EE 		vcvt.f32.s32	s13, s14	@ tmp218, _28
 3045              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3046              		.loc 1 456 22 view .LVU827
 3047 0e9c 277A86EE 		vdiv.f32	s14, s12, s15	@ points_per_pixel, tmp215, tmp216
 3048              	.LVL157:
 3049              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3050              		.loc 1 457 60 view .LVU828
 3051 0ea0 267A67EE 		vmul.f32	s15, s14, s13	@ tmp219, points_per_pixel, tmp218
 3052              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3053              		.loc 1 457 41 view .LVU829
 3054 0ea4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 3055 0ea8 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 3056              		.loc 1 459 5 is_stmt 1 view .LVU830
 3057              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3058              		.loc 1 459 40 is_stmt 0 view .LVU831
 3059 0eac FEFFFFEB 		bl	malloc		@
 3060              	.LVL158:
 3061              	@ armwave.c:461:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 460:armwave.c     **** 
 461:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 3062              		.loc 1 461 5 view .LVU832
 3063 0eb0 000050E3 		cmp	r0, #0	@ pretmp_119,
 3064              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 459:armwave.c     **** 
 3065              		.loc 1 459 40 view .LVU833
 3066 0eb4 0060A0E1 		mov	r6, r0	@ pretmp_119,
 3067              	.LVL159:
 3068              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 459:armwave.c     **** 
 3069              		.loc 1 459 38 view .LVU834
 3070 0eb8 9C0084E5 		str	r0, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3071              		.loc 1 461 5 is_stmt 1 view .LVU835
 3072 0ebc 2500000A 		beq	.L97		@,
 3073              	.LVL160:
 3074              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 462:armwave.c     **** 
 463:armwave.c     ****     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3075              		.loc 1 463 5 is_stmt 0 view .LVU836
 3076 0ec0 000058E3 		cmp	r8, #0	@ _28,
 3077              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3078              		.loc 1 463 12 view .LVU837
 3079 0ec4 0050A013 		movne	r5, #0	@ xx,
 3080              	.LVL161:
 3081              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 465:armwave.c     ****         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpixel[xx]);
 3082              		.loc 1 465 9 view .LVU838
 3083 0ec8 D0709F15 		ldrne	r7, .L108+24	@ tmp248,
 3084              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3085              		.loc 1 463 5 view .LVU839
 3086 0ecc 0100001A 		bne	.L98		@,
 3087 0ed0 0E0000EA 		b	.L99		@
 3088              	.LVL162:
 3089              	.L100:
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3090              		.loc 1 463 5 view .LVU840
 3091 0ed4 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3092              	.LVL163:
 3093              	.L98:
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3094              		.loc 1 464 9 is_stmt 1 discriminator 3 view .LVU841
 3095              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3096              		.loc 1 464 53 is_stmt 0 discriminator 3 view .LVU842
 3097 0ed8 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3098              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3099              		.loc 1 464 46 discriminator 3 view .LVU843
 3100 0edc 85C0A0E1 		lsl	ip, r5, #1	@ tmp231, xx,
 3101              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3102              		.loc 1 465 9 discriminator 3 view .LVU844
 3103 0ee0 0510A0E1 		mov	r1, r5	@, xx
 3104              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3105              		.loc 1 464 53 discriminator 3 view .LVU845
 3106 0ee4 930503E0 		mul	r3, r3, r5	@ tmp229, g_armwave_state.cmp_x_bitdepth_scale, xx
 3107              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3108              		.loc 1 465 9 discriminator 3 view .LVU846
 3109 0ee8 0700A0E1 		mov	r0, r7	@, tmp248
 3110              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3111              		.loc 1 463 54 discriminator 3 view .LVU847
 3112 0eec 015085E2 		add	r5, r5, #1	@ xx, xx,
 3113              	.LVL164:
 3114              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3115              		.loc 1 464 93 discriminator 3 view .LVU848
 3116 0ef0 2328A0E1 		lsr	r2, r3, #16	@ _36, tmp229,
 3117              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3118              		.loc 1 464 46 discriminator 3 view .LVU849
 3119 0ef4 BC2086E1 		strh	r2, [r6, ip]	@ movhi	@ _36, *_39
 3120              		.loc 1 465 9 is_stmt 1 discriminator 3 view .LVU850
 3121 0ef8 FEFFFFEB 		bl	printf		@
 3122              	.LVL165:
 3123              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3124              		.loc 1 463 5 is_stmt 0 discriminator 3 view .LVU851
 3125 0efc 443094E5 		ldr	r3, [r4, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 3126 0f00 050053E1 		cmp	r3, r5	@ g_armwave_state.slice_height, xx
 3127 0f04 F2FFFF8A 		bhi	.L100		@,
 3128 0f08 047094E5 		ldr	r7, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3129 0f0c 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3130              	.LVL166:
 3131              	.L99:
 466:armwave.c     ****     }
 467:armwave.c     ****     
 468:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3132              		.loc 1 468 5 is_stmt 1 view .LVU852
 3133              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3134              		.loc 1 468 34 is_stmt 0 view .LVU853
 3135 0f10 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 3136 0f14 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 3137 0f18 FEFFFFEB 		bl	malloc		@
 3138              	.LVL167:
 3139              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 469:armwave.c     **** 
 470:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3140              		.loc 1 470 5 view .LVU854
 3141 0f1c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3142 0f20 0620A0E1 		mov	r2, r6	@, pretmp_119
 3143 0f24 30308DE5 		str	r3, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 3144 0f28 0710A0E1 		mov	r1, r7	@, pretmp_124
 3145              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 468:armwave.c     **** 
 3146              		.loc 1 468 34 view .LVU855
 3147 0f2c 00C0A0E1 		mov	ip, r0	@ tmp242,
 3148              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3149              		.loc 1 470 5 view .LVU856
 3150 0f30 0030A0E1 		mov	r3, r0	@, tmp242
 3151              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 468:armwave.c     **** 
 3152              		.loc 1 468 32 view .LVU857
 3153 0f34 80C084E5 		str	ip, [r4, #128]	@ tmp242, g_armwave_state.out_pixbuf
 3154              		.loc 1 470 5 is_stmt 1 view .LVU858
 3155 0f38 64009FE5 		ldr	r0, .L108+28	@,
 3156              	@ armwave.c:477: }
 471:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 472:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 473:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 474:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 475:armwave.c     **** 
 476:armwave.c     ****      //malloc_stats();
 477:armwave.c     **** }
 3157              		.loc 1 477 1 is_stmt 0 view .LVU859
 3158 0f3c 10D08DE2 		add	sp, sp, #16	@,,
 3159              		.cfi_remember_state
 3160              		.cfi_def_cfa_offset 32
 3161              		@ sp needed	@
 3162 0f40 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3163              		.cfi_restore 14
 3164              		.cfi_restore 10
 3165              		.cfi_restore 9
 3166              		.cfi_restore 8
 3167              		.cfi_restore 7
 3168              		.cfi_restore 6
 3169              		.cfi_restore 5
 3170              		.cfi_restore 4
 3171              		.cfi_def_cfa_offset 0
 3172              	.LVL168:
 3173              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 470:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 3174              		.loc 1 470 5 view .LVU860
 3175 0f44 FEFFFFEA 		b	printf		@
 3176              	.LVL169:
 3177              	.L106:
 3178              		.cfi_restore_state
 411:armwave.c     ****         return;
 3179              		.loc 1 411 9 is_stmt 1 view .LVU861
 3180 0f48 58009FE5 		ldr	r0, .L108+32	@,
 3181              	@ armwave.c:477: }
 3182              		.loc 1 477 1 is_stmt 0 view .LVU862
 3183 0f4c 10D08DE2 		add	sp, sp, #16	@,,
 3184              		.cfi_remember_state
 3185              		.cfi_def_cfa_offset 32
 3186              		@ sp needed	@
 3187 0f50 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3188              		.cfi_restore 14
 3189              		.cfi_restore 10
 3190              		.cfi_restore 9
 3191              		.cfi_restore 8
 3192              		.cfi_restore 7
 3193              		.cfi_restore 6
 3194              		.cfi_restore 5
 3195              		.cfi_restore 4
 3196              		.cfi_def_cfa_offset 0
 3197              	.LVL170:
 3198              	@ armwave.c:411:         printf("Error: start point more than end point\n");
 411:armwave.c     ****         return;
 3199              		.loc 1 411 9 view .LVU863
 3200 0f54 FEFFFFEA 		b	puts		@
 3201              	.LVL171:
 3202              	.L97:
 3203              		.cfi_restore_state
 461:armwave.c     **** 
 3204              		.loc 1 461 5 is_stmt 1 discriminator 1 view .LVU864
 3205 0f58 4C309FE5 		ldr	r3, .L108+36	@,
 3206 0f5c 4C209FE5 		ldr	r2, .L108+40	@,
 3207 0f60 4C109FE5 		ldr	r1, .L108+44	@,
 3208 0f64 4C009FE5 		ldr	r0, .L108+48	@,
 3209 0f68 FEFFFFEB 		bl	__assert_fail		@
 3210              	.LVL172:
 3211              	.L107:
 450:armwave.c     ****         exit(-1);
 3212              		.loc 1 450 9 view .LVU865
 3213 0f6c 48309FE5 		ldr	r3, .L108+52	@ tmp212,
 3214 0f70 0820A0E1 		mov	r2, r8	@, _22
 3215 0f74 44109FE5 		ldr	r1, .L108+56	@,
 3216 0f78 000093E5 		ldr	r0, [r3]	@, stderr
 3217 0f7c FEFFFFEB 		bl	fprintf		@
 3218              	.LVL173:
 451:armwave.c     ****     }
 3219              		.loc 1 451 9 view .LVU866
 3220 0f80 0000E0E3 		mvn	r0, #0	@,
 3221 0f84 FEFFFFEB 		bl	exit		@
 3222              	.LVL174:
 3223              	.L109:
 3224              		.align	2
 3225              	.L108:
 3226 0f88 0000803F 		.word	1065353216
 3227 0f8c 00007F43 		.word	1132396544
 3228 0f90 00008047 		.word	1199570944
 3229 0f94 B4000000 		.word	.LC7
 3230 0f98 00000000 		.word	g_armwave_state
 3231 0f9c 08010000 		.word	.LC9
 3232 0fa0 E4010000 		.word	.LC13
 3233 0fa4 04020000 		.word	.LC14
 3234 0fa8 E0000000 		.word	.LC8
 3235 0fac 00000000 		.word	.LANCHOR0
 3236 0fb0 CD010000 		.word	461
 3237 0fb4 AC010000 		.word	.LC11
 3238 0fb8 B8010000 		.word	.LC12
 3239 0fbc 00000000 		.word	stderr
 3240 0fc0 68010000 		.word	.LC10
 3241              		.cfi_endproc
 3242              	.LFE67:
 3244              		.align	2
 3245              		.global	armwave_set_wave_pointer
 3246              		.syntax unified
 3247              		.arm
 3248              		.fpu vfp
 3250              	armwave_set_wave_pointer:
 3251              	.LVL175:
 3252              	.LFB68:
 478:armwave.c     **** 
 479:armwave.c     **** /*
 480:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 481:armwave.c     ****  * in the future.
 482:armwave.c     ****  */
 483:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 484:armwave.c     **** {
 3253              		.loc 1 484 1 view -0
 3254              		.cfi_startproc
 3255              		@ args = 0, pretend = 0, frame = 0
 3256              		@ frame_needed = 0, uses_anonymous_args = 0
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3257              		.loc 1 485 5 view .LVU868
 3258 0fc4 000050E3 		cmp	r0, #0	@ wave_buffer
 3259              		.loc 1 485 5 is_stmt 0 view .LVU869
 3260 0fc8 0200000A 		beq	.L115		@,
 486:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 3261              		.loc 1 486 5 is_stmt 1 view .LVU870
 3262              	@ armwave.c:486:     g_armwave_state.wave_buffer = wave_buffer;
 3263              		.loc 1 486 33 is_stmt 0 view .LVU871
 3264 0fcc 1C309FE5 		ldr	r3, .L116	@ tmp116,
 3265 0fd0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 3266 0fd4 1EFF2FE1 		bx	lr	@
 3267              	.L115:
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3268              		.loc 1 485 5 is_stmt 1 discriminator 1 view .LVU872
 3269              	@ armwave.c:484: {
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3270              		.loc 1 484 1 is_stmt 0 discriminator 1 view .LVU873
 3271 0fd8 10402DE9 		push	{r4, lr}	@
 3272              		.cfi_def_cfa_offset 8
 3273              		.cfi_offset 4, -8
 3274              		.cfi_offset 14, -4
 3275              	@ armwave.c:485:     assert(wave_buffer != NULL);
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3276              		.loc 1 485 5 discriminator 1 view .LVU874
 3277 0fdc 10309FE5 		ldr	r3, .L116+4	@,
 3278 0fe0 10209FE5 		ldr	r2, .L116+8	@,
 3279 0fe4 10109FE5 		ldr	r1, .L116+12	@,
 3280 0fe8 10009FE5 		ldr	r0, .L116+16	@,
 3281              	.LVL176:
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3282              		.loc 1 485 5 discriminator 1 view .LVU875
 3283 0fec FEFFFFEB 		bl	__assert_fail		@
 3284              	.LVL177:
 3285              	.L117:
 3286              		.align	2
 3287              	.L116:
 3288 0ff0 00000000 		.word	g_armwave_state
 3289 0ff4 18000000 		.word	.LANCHOR0+24
 3290 0ff8 E5010000 		.word	485
 3291 0ffc AC010000 		.word	.LC11
 3292 1000 28020000 		.word	.LC15
 3293              		.cfi_endproc
 3294              	.LFE68:
 3296              		.align	2
 3297              		.global	armwave_set_wave_pointer_as_testbuf
 3298              		.syntax unified
 3299              		.arm
 3300              		.fpu vfp
 3302              	armwave_set_wave_pointer_as_testbuf:
 3303              	.LVL178:
 3304              	.LFB69:
 487:armwave.c     **** }
 488:armwave.c     **** 
 489:armwave.c     **** /*
 490:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 491:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 492:armwave.c     ****  */
 493:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 494:armwave.c     **** {
 3305              		.loc 1 494 1 is_stmt 1 view -0
 3306              		.cfi_startproc
 3307              		@ args = 0, pretend = 0, frame = 0
 3308              		@ frame_needed = 0, uses_anonymous_args = 0
 3309              		@ link register save eliminated.
 495:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3310              		.loc 1 495 5 view .LVU877
 3311              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3312              		.loc 1 495 29 is_stmt 0 view .LVU878
 3313 1004 24309FE5 		ldr	r3, .L121	@ tmp117,
 3314              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3315              		.loc 1 495 7 view .LVU879
 3316 1008 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 3317 100c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 3318 1010 0400003A 		bcc	.L120		@,
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 497:armwave.c     ****         return;
 498:armwave.c     ****     }
 499:armwave.c     **** 
 500:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 3319              		.loc 1 500 5 is_stmt 1 view .LVU880
 3320              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3321              		.loc 1 500 111 is_stmt 0 view .LVU881
 3322 1014 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 3323              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3324              		.loc 1 500 68 view .LVU882
 3325 1018 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3326 101c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 3327              	.LVL179:
 3328              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3329              		.loc 1 500 33 view .LVU883
 3330 1020 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 3331              	@ armwave.c:501: }
 501:armwave.c     **** }
 3332              		.loc 1 501 1 view .LVU884
 3333 1024 1EFF2FE1 		bx	lr	@
 3334              	.LVL180:
 3335              	.L120:
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3336              		.loc 1 496 9 is_stmt 1 view .LVU885
 3337 1028 04009FE5 		ldr	r0, .L121+4	@,
 3338              	.LVL181:
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3339              		.loc 1 496 9 is_stmt 0 view .LVU886
 3340 102c FEFFFFEA 		b	puts		@
 3341              	.LVL182:
 3342              	.L122:
 3343              		.align	2
 3344              	.L121:
 3345 1030 00000000 		.word	g_armwave_state
 3346 1034 3C020000 		.word	.LC16
 3347              		.cfi_endproc
 3348              	.LFE69:
 3350              		.align	2
 3351              		.global	armwave_set_wave_pointer_u32
 3352              		.syntax unified
 3353              		.arm
 3354              		.fpu vfp
 3356              	armwave_set_wave_pointer_u32:
 3357              	.LVL183:
 3358              	.LFB70:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 505:armwave.c     ****  * disjointed buffers in the future.
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 508:armwave.c     **** {
 3359              		.loc 1 508 1 is_stmt 1 view -0
 3360              		.cfi_startproc
 3361              		@ args = 0, pretend = 0, frame = 0
 3362              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3363              		.loc 1 509 5 view .LVU888
 3364 1038 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 3365              		.loc 1 509 5 is_stmt 0 view .LVU889
 3366 103c 0200000A 		beq	.L128		@,
 510:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3367              		.loc 1 510 5 is_stmt 1 view .LVU890
 3368              	@ armwave.c:510:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3369              		.loc 1 510 33 is_stmt 0 view .LVU891
 3370 1040 1C309FE5 		ldr	r3, .L129	@ tmp117,
 3371 1044 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 3372 1048 1EFF2FE1 		bx	lr	@
 3373              	.L128:
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3374              		.loc 1 509 5 is_stmt 1 discriminator 1 view .LVU892
 3375              	@ armwave.c:508: {
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3376              		.loc 1 508 1 is_stmt 0 discriminator 1 view .LVU893
 3377 104c 10402DE9 		push	{r4, lr}	@
 3378              		.cfi_def_cfa_offset 8
 3379              		.cfi_offset 4, -8
 3380              		.cfi_offset 14, -4
 3381              	@ armwave.c:509:     assert(wave_buffer_ptr != 0);
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3382              		.loc 1 509 5 discriminator 1 view .LVU894
 3383 1050 10309FE5 		ldr	r3, .L129+4	@,
 3384 1054 10209FE5 		ldr	r2, .L129+8	@,
 3385 1058 10109FE5 		ldr	r1, .L129+12	@,
 3386 105c 10009FE5 		ldr	r0, .L129+16	@,
 3387              	.LVL184:
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3388              		.loc 1 509 5 discriminator 1 view .LVU895
 3389 1060 FEFFFFEB 		bl	__assert_fail		@
 3390              	.LVL185:
 3391              	.L130:
 3392              		.align	2
 3393              	.L129:
 3394 1064 00000000 		.word	g_armwave_state
 3395 1068 34000000 		.word	.LANCHOR0+52
 3396 106c FD010000 		.word	509
 3397 1070 AC010000 		.word	.LC11
 3398 1074 78020000 		.word	.LC17
 3399              		.cfi_endproc
 3400              	.LFE70:
 3402              		.align	2
 3403              		.global	armwave_clear_buffer
 3404              		.syntax unified
 3405              		.arm
 3406              		.fpu vfp
 3408              	armwave_clear_buffer:
 3409              	.LVL186:
 3410              	.LFB71:
 511:armwave.c     **** }
 512:armwave.c     **** 
 513:armwave.c     **** /*
 514:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 515:armwave.c     ****  */
 516:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 517:armwave.c     **** {
 3411              		.loc 1 517 1 is_stmt 1 view -0
 3412              		.cfi_startproc
 3413              		@ args = 0, pretend = 0, frame = 0
 3414              		@ frame_needed = 0, uses_anonymous_args = 0
 3415              		@ link register save eliminated.
 518:armwave.c     ****     // Flags ignored, only one buffer cleared
 519:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3416              		.loc 1 519 5 view .LVU897
 3417              	@ armwave.c:519:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3418              		.loc 1 519 58 is_stmt 0 view .LVU898
 3419 1078 0C309FE5 		ldr	r3, .L132	@ tmp114,
 3420              	@ armwave.c:519:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3421              		.loc 1 519 5 view .LVU899
 3422 107c 0010A0E3 		mov	r1, #0	@,
 3423 1080 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 3424 1084 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 3425              	.LVL187:
 3426              		.loc 1 519 5 view .LVU900
 3427 1088 FEFFFFEA 		b	memset		@
 3428              	.LVL188:
 3429              	.L133:
 3430              		.align	2
 3431              	.L132:
 3432 108c 00000000 		.word	g_armwave_state
 3433              		.cfi_endproc
 3434              	.LFE71:
 3436              		.align	2
 3437              		.global	armwave_set_channel_colour
 3438              		.syntax unified
 3439              		.arm
 3440              		.fpu vfp
 3442              	armwave_set_channel_colour:
 3443              	.LVL189:
 3444              	.LFB72:
 520:armwave.c     **** }
 521:armwave.c     **** 
 522:armwave.c     **** /*
 523:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.  
 524:armwave.c     ****  * `I` sets intensity multiplier for all colours.
 525:armwave.c     ****  */
 526:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b, float i)
 527:armwave.c     **** {
 3445              		.loc 1 527 1 is_stmt 1 view -0
 3446              		.cfi_startproc
 3447              		@ args = 0, pretend = 0, frame = 16
 3448              		@ frame_needed = 0, uses_anonymous_args = 0
 3449              		@ link register save eliminated.
 528:armwave.c     ****     // Only 1ch supported for now
 529:armwave.c     ****     switch(ch) {
 3450              		.loc 1 529 5 view .LVU902
 3451              	@ armwave.c:527: {
 527:armwave.c     ****     // Only 1ch supported for now
 3452              		.loc 1 527 1 is_stmt 0 view .LVU903
 3453 1090 10D04DE2 		sub	sp, sp, #16	@,,
 3454              		.cfi_def_cfa_offset 16
 3455              	@ armwave.c:529:     switch(ch) {
 3456              		.loc 1 529 5 view .LVU904
 3457 1094 010050E3 		cmp	r0, #1	@ ch,
 3458              	@ armwave.c:527: {
 527:armwave.c     ****     // Only 1ch supported for now
 3459              		.loc 1 527 1 view .LVU905
 3460 1098 0E008DE9 		stmib	sp, {r1, r2, r3}	@,,,
 3461              	@ armwave.c:529:     switch(ch) {
 3462              		.loc 1 529 5 view .LVU906
 3463 109c 1200001A 		bne	.L134		@,
 530:armwave.c     ****         case 1:
 531:armwave.c     ****             g_armwave_state.ch1_color.r = r * i;
 3464              		.loc 1 531 13 is_stmt 1 view .LVU907
 3465              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 3466              		.loc 1 531 45 is_stmt 0 view .LVU908
 3467 10a0 901A07EE 		vmov	s15, r1	@ int	@ r,
 3468 10a4 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp125, r
 3469              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3470              		.loc 1 532 45 view .LVU909
 3471 10a8 902A07EE 		vmov	s15, r2	@ int	@ g,
 3472 10ac E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp129, g
 3473              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 533:armwave.c     ****             g_armwave_state.ch1_color.b = b * i;
 3474              		.loc 1 533 45 view .LVU910
 3475 10b0 903A07EE 		vmov	s15, r3	@ int	@ b,
 3476              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3477              		.loc 1 531 41 view .LVU911
 3478 10b4 38309FE5 		ldr	r3, .L137	@ tmp124,
 3479              	.LVL190:
 3480              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3481              		.loc 1 531 45 view .LVU912
 3482 10b8 806A66EE 		vmul.f32	s13, s13, s0	@ tmp126, tmp125, i
 3483              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3484              		.loc 1 533 45 view .LVU913
 3485 10bc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp133, b
 3486              	.LVL191:
 3487              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3488              		.loc 1 532 45 view .LVU914
 3489 10c0 007A27EE 		vmul.f32	s14, s14, s0	@ tmp130, tmp129, i
 3490              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3491              		.loc 1 531 41 view .LVU915
 3492 10c4 E66AFDEE 		vcvt.s32.f32	s13, s13	@ tmp127, tmp126
 3493              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3494              		.loc 1 533 45 view .LVU916
 3495 10c8 807A67EE 		vmul.f32	s15, s15, s0	@ tmp134, tmp133, i
 3496              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3497              		.loc 1 532 41 view .LVU917
 3498 10cc C77ABDEE 		vcvt.s32.f32	s14, s14	@ tmp131, tmp130
 3499              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3500              		.loc 1 531 41 view .LVU918
 3501 10d0 902A16EE 		vmov	r2, s13	@ int	@ tmp127, tmp127
 3502              	.LVL192:
 3503              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3504              		.loc 1 533 41 view .LVU919
 3505 10d4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp135, tmp134
 3506              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3507              		.loc 1 531 41 view .LVU920
 3508 10d8 B428C3E1 		strh	r2, [r3, #132]	@ movhi	@ tmp127, g_armwave_state.ch1_color.r
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3509              		.loc 1 532 13 is_stmt 1 view .LVU921
 3510              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3511              		.loc 1 532 41 is_stmt 0 view .LVU922
 3512 10dc 102A17EE 		vmov	r2, s14	@ int	@ tmp131, tmp131
 3513 10e0 B628C3E1 		strh	r2, [r3, #134]	@ movhi	@ tmp131, g_armwave_state.ch1_color.g
 3514              		.loc 1 533 13 is_stmt 1 view .LVU923
 3515              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3516              		.loc 1 533 41 is_stmt 0 view .LVU924
 3517 10e4 902A17EE 		vmov	r2, s15	@ int	@ tmp135, tmp135
 3518 10e8 B828C3E1 		strh	r2, [r3, #136]	@ movhi	@ tmp135, g_armwave_state.ch1_color.b
 534:armwave.c     ****             break;
 3519              		.loc 1 534 13 is_stmt 1 view .LVU925
 3520              	.L134:
 3521              	@ armwave.c:536: }
 535:armwave.c     ****     }
 536:armwave.c     **** }
 3522              		.loc 1 536 1 is_stmt 0 view .LVU926
 3523 10ec 10D08DE2 		add	sp, sp, #16	@,,
 3524              		.cfi_def_cfa_offset 0
 3525              		@ sp needed	@
 3526 10f0 1EFF2FE1 		bx	lr	@
 3527              	.L138:
 3528              		.align	2
 3529              	.L137:
 3530 10f4 00000000 		.word	g_armwave_state
 3531              		.cfi_endproc
 3532              	.LFE72:
 3534              		.align	2
 3535              		.global	armwave_set_graticule_colour
 3536              		.syntax unified
 3537              		.arm
 3538              		.fpu vfp
 3540              	armwave_set_graticule_colour:
 3541              	.LVL193:
 3542              	.LFB73:
 537:armwave.c     **** 
 538:armwave.c     **** /*
 539:armwave.c     ****  * Set the graticule colour.
 540:armwave.c     ****  */
 541:armwave.c     **** void armwave_set_graticule_colour(int r, int g, int b)
 542:armwave.c     **** {
 3543              		.loc 1 542 1 is_stmt 1 view -0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 0
 3546              		@ frame_needed = 0, uses_anonymous_args = 0
 543:armwave.c     ****     g_grat_colour.red = r * 255;
 3547              		.loc 1 543 5 view .LVU928
 3548              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 3549              		.loc 1 543 23 is_stmt 0 view .LVU929
 3550 10f8 3C309FE5 		ldr	r3, .L141	@ tmp121,
 3551              	@ armwave.c:542: {
 542:armwave.c     ****     g_grat_colour.red = r * 255;
 3552              		.loc 1 542 1 view .LVU930
 3553 10fc 70402DE9 		push	{r4, r5, r6, lr}	@
 3554              		.cfi_def_cfa_offset 16
 3555              		.cfi_offset 4, -16
 3556              		.cfi_offset 5, -12
 3557              		.cfi_offset 6, -8
 3558              		.cfi_offset 14, -4
 3559              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 3560              		.loc 1 543 23 view .LVU931
 3561 1100 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3562              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 545:armwave.c     ****     g_grat_colour.blue = b * 255;
 546:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 547:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3563              		.loc 1 547 5 view .LVU932
 3564 1104 34609FE5 		ldr	r6, .L141+4	@ tmp143,
 3565 1108 34509FE5 		ldr	r5, .L141+8	@ tmp145,
 3566              	@ armwave.c:544:     g_grat_colour.green = g * 255;
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 3567              		.loc 1 544 25 view .LVU933
 3568 110c 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3569              	@ armwave.c:545:     g_grat_colour.blue = b * 255;
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3570              		.loc 1 545 24 view .LVU934
 3571 1110 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3572              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 543:armwave.c     ****     g_grat_colour.green = g * 255;
 3573              		.loc 1 543 23 view .LVU935
 3574 1114 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_colour.red
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 3575              		.loc 1 544 5 is_stmt 1 view .LVU936
 3576              	@ armwave.c:546:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3577              		.loc 1 546 25 is_stmt 0 view .LVU937
 3578 1118 07C0A0E3 		mov	ip, #7	@ tmp140,
 3579              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3580              		.loc 1 547 5 view .LVU938
 3581 111c 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3582              	.LVL194:
 3583              		.loc 1 547 5 view .LVU939
 3584 1120 000095E5 		ldr	r0, [r5]	@, g_dpy
 3585              	.LVL195:
 3586              	@ armwave.c:544:     g_grat_colour.green = g * 255;
 544:armwave.c     ****     g_grat_colour.blue = b * 255;
 3587              		.loc 1 544 25 view .LVU940
 3588 1124 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_colour.green
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3589              		.loc 1 545 5 is_stmt 1 view .LVU941
 3590              	@ armwave.c:545:     g_grat_colour.blue = b * 255;
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3591              		.loc 1 545 24 is_stmt 0 view .LVU942
 3592 1128 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_colour.blue
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3593              		.loc 1 546 5 is_stmt 1 view .LVU943
 3594              	@ armwave.c:546:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3595              		.loc 1 546 25 is_stmt 0 view .LVU944
 3596 112c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_colour.flags
 3597              		.loc 1 547 5 is_stmt 1 view .LVU945
 3598 1130 0320A0E1 		mov	r2, r3	@, tmp121
 3599              	.LVL196:
 3600              	@ armwave.c:548: }
 548:armwave.c     **** }
 3601              		.loc 1 548 1 is_stmt 0 view .LVU946
 3602 1134 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3603              		.cfi_restore 14
 3604              		.cfi_restore 6
 3605              		.cfi_restore 5
 3606              		.cfi_restore 4
 3607              		.cfi_def_cfa_offset 0
 3608              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 547:armwave.c     **** }
 3609              		.loc 1 547 5 view .LVU947
 3610 1138 FEFFFFEA 		b	XAllocColor		@
 3611              	.LVL197:
 3612              	.L142:
 3613              		.align	2
 3614              	.L141:
 3615 113c 00000000 		.word	g_grat_colour
 3616 1140 00000000 		.word	g_xswa
 3617 1144 00000000 		.word	g_dpy
 3618              		.cfi_endproc
 3619              	.LFE73:
 3621              		.align	2
 3622              		.global	armwave_set_graticule_subcolour
 3623              		.syntax unified
 3624              		.arm
 3625              		.fpu vfp
 3627              	armwave_set_graticule_subcolour:
 3628              	.LVL198:
 3629              	.LFB74:
 549:armwave.c     **** 
 550:armwave.c     **** /*
 551:armwave.c     ****  * Set the graticule sub colour.
 552:armwave.c     ****  */
 553:armwave.c     **** void armwave_set_graticule_subcolour(int r, int g, int b)
 554:armwave.c     **** {
 3630              		.loc 1 554 1 is_stmt 1 view -0
 3631              		.cfi_startproc
 3632              		@ args = 0, pretend = 0, frame = 0
 3633              		@ frame_needed = 0, uses_anonymous_args = 0
 555:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3634              		.loc 1 555 5 view .LVU949
 3635              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 3636              		.loc 1 555 26 is_stmt 0 view .LVU950
 3637 1148 3C309FE5 		ldr	r3, .L145	@ tmp121,
 3638              	@ armwave.c:554: {
 554:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3639              		.loc 1 554 1 view .LVU951
 3640 114c 70402DE9 		push	{r4, r5, r6, lr}	@
 3641              		.cfi_def_cfa_offset 16
 3642              		.cfi_offset 4, -16
 3643              		.cfi_offset 5, -12
 3644              		.cfi_offset 6, -8
 3645              		.cfi_offset 14, -4
 3646              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 3647              		.loc 1 555 26 view .LVU952
 3648 1150 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3649              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 557:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 558:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 559:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3650              		.loc 1 559 5 view .LVU953
 3651 1154 34609FE5 		ldr	r6, .L145+4	@ tmp143,
 3652 1158 34509FE5 		ldr	r5, .L145+8	@ tmp145,
 3653              	@ armwave.c:556:     g_grat_subcolour.green = g * 255;
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3654              		.loc 1 556 28 view .LVU954
 3655 115c 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3656              	@ armwave.c:557:     g_grat_subcolour.blue = b * 255;
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3657              		.loc 1 557 27 view .LVU955
 3658 1160 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3659              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 555:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3660              		.loc 1 555 26 view .LVU956
 3661 1164 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_subcolour.red
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3662              		.loc 1 556 5 is_stmt 1 view .LVU957
 3663              	@ armwave.c:558:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3664              		.loc 1 558 28 is_stmt 0 view .LVU958
 3665 1168 07C0A0E3 		mov	ip, #7	@ tmp140,
 3666              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3667              		.loc 1 559 5 view .LVU959
 3668 116c 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3669              	.LVL199:
 3670              		.loc 1 559 5 view .LVU960
 3671 1170 000095E5 		ldr	r0, [r5]	@, g_dpy
 3672              	.LVL200:
 3673              	@ armwave.c:556:     g_grat_subcolour.green = g * 255;
 556:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 3674              		.loc 1 556 28 view .LVU961
 3675 1174 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_subcolour.green
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3676              		.loc 1 557 5 is_stmt 1 view .LVU962
 3677              	@ armwave.c:557:     g_grat_subcolour.blue = b * 255;
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3678              		.loc 1 557 27 is_stmt 0 view .LVU963
 3679 1178 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_subcolour.blue
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3680              		.loc 1 558 5 is_stmt 1 view .LVU964
 3681              	@ armwave.c:558:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3682              		.loc 1 558 28 is_stmt 0 view .LVU965
 3683 117c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_subcolour.flags
 3684              		.loc 1 559 5 is_stmt 1 view .LVU966
 3685 1180 0320A0E1 		mov	r2, r3	@, tmp121
 3686              	.LVL201:
 3687              	@ armwave.c:560: }
 560:armwave.c     **** }
 3688              		.loc 1 560 1 is_stmt 0 view .LVU967
 3689 1184 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3690              		.cfi_restore 14
 3691              		.cfi_restore 6
 3692              		.cfi_restore 5
 3693              		.cfi_restore 4
 3694              		.cfi_def_cfa_offset 0
 3695              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 559:armwave.c     **** }
 3696              		.loc 1 559 5 view .LVU968
 3697 1188 FEFFFFEA 		b	XAllocColor		@
 3698              	.LVL202:
 3699              	.L146:
 3700              		.align	2
 3701              	.L145:
 3702 118c 00000000 		.word	g_grat_subcolour
 3703 1190 00000000 		.word	g_xswa
 3704 1194 00000000 		.word	g_dpy
 3705              		.cfi_endproc
 3706              	.LFE74:
 3708              		.align	2
 3709              		.global	armwave_set_graticule_dims
 3710              		.syntax unified
 3711              		.arm
 3712              		.fpu vfp
 3714              	armwave_set_graticule_dims:
 3715              	.LVL203:
 3716              	.LFB75:
 561:armwave.c     **** 
 562:armwave.c     **** /*
 563:armwave.c     ****  * Set the graticule dimensions.
 564:armwave.c     ****  */
 565:armwave.c     **** void armwave_set_graticule_dims(int marg, int n_hdiv, int n_vdiv, int n_subhdiv, int n_subvdiv, flo
 566:armwave.c     **** {
 3717              		.loc 1 566 1 is_stmt 1 view -0
 3718              		.cfi_startproc
 3719              		@ args = 4, pretend = 0, frame = 0
 3720              		@ frame_needed = 0, uses_anonymous_args = 0
 567:armwave.c     ****     if(marg > 0) {
 3721              		.loc 1 567 5 view .LVU970
 3722              	@ armwave.c:567:     if(marg > 0) {
 3723              		.loc 1 567 7 is_stmt 0 view .LVU971
 3724 1198 000050E3 		cmp	r0, #0	@ marg
 3725              	@ armwave.c:566: {
 566:armwave.c     ****     if(marg > 0) {
 3726              		.loc 1 566 1 view .LVU972
 3727 119c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3728              		.cfi_def_cfa_offset 4
 3729              		.cfi_offset 14, -4
 3730              	@ armwave.c:568:         g_armwave_state.frame_margin = marg;
 568:armwave.c     ****         g_armwave_state.frame_margin = marg;
 3731              		.loc 1 568 38 view .LVU973
 3732 11a0 58E09FC5 		ldrgt	lr, .L157	@ tmp120,
 3733              	@ armwave.c:566: {
 566:armwave.c     ****     if(marg > 0) {
 3734              		.loc 1 566 1 view .LVU974
 3735 11a4 04C09DE5 		ldr	ip, [sp, #4]	@ n_subvdiv, n_subvdiv
 3736              		.loc 1 568 9 is_stmt 1 view .LVU975
 3737              	@ armwave.c:568:         g_armwave_state.frame_margin = marg;
 3738              		.loc 1 568 38 is_stmt 0 view .LVU976
 3739 11a8 58008EC5 		strgt	r0, [lr, #88]	@ marg, g_armwave_state.frame_margin
 569:armwave.c     ****     }
 570:armwave.c     ****     
 571:armwave.c     ****     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3740              		.loc 1 571 5 is_stmt 1 view .LVU977
 3741              	@ armwave.c:571:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3742              		.loc 1 571 7 is_stmt 0 view .LVU978
 3743 11ac 000051E3 		cmp	r1, #0	@ n_hdiv,
 3744 11b0 020000DA 		ble	.L149		@,
 3745              	@ armwave.c:571:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3746              		.loc 1 571 19 discriminator 1 view .LVU979
 3747 11b4 010011E3 		tst	r1, #1	@ n_hdiv,
 572:armwave.c     ****         g_armwave_state.n_hdiv = n_hdiv;
 3748              		.loc 1 572 9 is_stmt 1 discriminator 1 view .LVU980
 3749              	@ armwave.c:572:         g_armwave_state.n_hdiv = n_hdiv;
 3750              		.loc 1 572 32 is_stmt 0 discriminator 1 view .LVU981
 3751 11b8 40009F05 		ldreq	r0, .L157	@ tmp122,
 3752              	.LVL204:
 3753              		.loc 1 572 32 discriminator 1 view .LVU982
 3754 11bc 5C108005 		streq	r1, [r0, #92]	@ n_hdiv, g_armwave_state.n_hdiv
 3755              	.L149:
 573:armwave.c     ****     }
 574:armwave.c     ****     
 575:armwave.c     ****     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3756              		.loc 1 575 5 is_stmt 1 view .LVU983
 3757              	@ armwave.c:575:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3758              		.loc 1 575 7 is_stmt 0 view .LVU984
 3759 11c0 000052E3 		cmp	r2, #0	@ n_vdiv,
 3760 11c4 020000DA 		ble	.L150		@,
 3761              	@ armwave.c:575:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3762              		.loc 1 575 19 discriminator 1 view .LVU985
 3763 11c8 010012E3 		tst	r2, #1	@ n_vdiv,
 576:armwave.c     ****         g_armwave_state.n_vdiv = n_vdiv;
 3764              		.loc 1 576 9 is_stmt 1 discriminator 1 view .LVU986
 3765              	@ armwave.c:576:         g_armwave_state.n_vdiv = n_vdiv;
 3766              		.loc 1 576 32 is_stmt 0 discriminator 1 view .LVU987
 3767 11cc 2C109F05 		ldreq	r1, .L157	@ tmp124,
 3768              	.LVL205:
 3769              		.loc 1 576 32 discriminator 1 view .LVU988
 3770 11d0 60208105 		streq	r2, [r1, #96]	@ n_vdiv, g_armwave_state.n_vdiv
 3771              	.L150:
 577:armwave.c     ****     }
 578:armwave.c     ****     
 579:armwave.c     ****     if(n_subhdiv > 0) {
 3772              		.loc 1 579 5 is_stmt 1 view .LVU989
 3773              	@ armwave.c:579:     if(n_subhdiv > 0) {
 3774              		.loc 1 579 7 is_stmt 0 view .LVU990
 3775 11d4 000053E3 		cmp	r3, #0	@ n_subhdiv,
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3776              		.loc 1 580 9 is_stmt 1 view .LVU991
 3777              	@ armwave.c:587:     if(subdiv_frac > 0) {
 581:armwave.c     ****     }
 582:armwave.c     ****     
 583:armwave.c     ****     if(n_subvdiv > 0) {
 584:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 585:armwave.c     ****     }
 586:armwave.c     ****     
 587:armwave.c     ****     if(subdiv_frac > 0) {
 3778              		.loc 1 587 7 is_stmt 0 view .LVU992
 3779 11d8 C00AB5EE 		vcmpe.f32	s0, #0	@ subdiv_frac
 3780              	@ armwave.c:580:         g_armwave_state.n_subhdiv = n_subhdiv;
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3781              		.loc 1 580 35 view .LVU993
 3782 11dc 1C209FC5 		ldrgt	r2, .L157	@ tmp125,
 3783              	.LVL206:
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3784              		.loc 1 580 35 view .LVU994
 3785 11e0 643082C5 		strgt	r3, [r2, #100]	@ n_subhdiv, g_armwave_state.n_subhdiv
 583:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3786              		.loc 1 583 5 is_stmt 1 view .LVU995
 3787              	@ armwave.c:583:     if(n_subvdiv > 0) {
 583:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3788              		.loc 1 583 7 is_stmt 0 view .LVU996
 3789 11e4 00005CE3 		cmp	ip, #0	@ n_subvdiv,
 584:armwave.c     ****     }
 3790              		.loc 1 584 9 is_stmt 1 view .LVU997
 3791              	@ armwave.c:584:         g_armwave_state.n_subvdiv = n_subvdiv;
 584:armwave.c     ****     }
 3792              		.loc 1 584 35 is_stmt 0 view .LVU998
 3793 11e8 10309FC5 		ldrgt	r3, .L157	@ tmp126,
 3794              	.LVL207:
 584:armwave.c     ****     }
 3795              		.loc 1 584 35 view .LVU999
 3796 11ec 68C083C5 		strgt	ip, [r3, #104]	@ n_subvdiv, g_armwave_state.n_subvdiv
 3797              		.loc 1 587 5 is_stmt 1 view .LVU1000
 3798              	@ armwave.c:587:     if(subdiv_frac > 0) {
 3799              		.loc 1 587 7 is_stmt 0 view .LVU1001
 3800 11f0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 588:armwave.c     ****         g_armwave_state.subdiv_frac = subdiv_frac;
 3801              		.loc 1 588 9 is_stmt 1 view .LVU1002
 3802              	@ armwave.c:588:         g_armwave_state.subdiv_frac = subdiv_frac;
 3803              		.loc 1 588 37 is_stmt 0 view .LVU1003
 3804 11f4 04309FC5 		ldrgt	r3, .L157	@ tmp128,
 3805 11f8 1B0A83CD 		vstrgt.32	s0, [r3, #108]	@ subdiv_frac, g_armwave_state.subdiv_frac
 3806              	@ armwave.c:590: }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 3807              		.loc 1 590 1 view .LVU1004
 3808 11fc 04F09DE4 		ldr	pc, [sp], #4	@
 3809              	.L158:
 3810              		.align	2
 3811              	.L157:
 3812 1200 00000000 		.word	g_armwave_state
 3813              		.cfi_endproc
 3814              	.LFE75:
 3816              		.align	2
 3817              		.global	armwave_test_buffer_alloc
 3818              		.syntax unified
 3819              		.arm
 3820              		.fpu vfp
 3822              	armwave_test_buffer_alloc:
 3823              	.LVL208:
 3824              	.LFB76:
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 596:armwave.c     **** {
 3825              		.loc 1 596 1 is_stmt 1 view -0
 3826              		.cfi_startproc
 3827              		@ args = 0, pretend = 0, frame = 0
 3828              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3829              		.loc 1 597 5 view .LVU1006
 3830              	@ armwave.c:596: {
 596:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3831              		.loc 1 596 1 is_stmt 0 view .LVU1007
 3832 1204 70402DE9 		push	{r4, r5, r6, lr}	@
 3833              		.cfi_def_cfa_offset 16
 3834              		.cfi_offset 4, -16
 3835              		.cfi_offset 5, -12
 3836              		.cfi_offset 6, -8
 3837              		.cfi_offset 14, -4
 3838              	@ armwave.c:596: {
 596:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3839              		.loc 1 596 1 view .LVU1008
 3840 1208 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3841              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 3842              		.loc 1 597 23 view .LVU1009
 3843 120c 48409FE5 		ldr	r4, .L166	@ tmp133,
 3844 1210 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3845              	.LVL209:
 3846              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 3847              		.loc 1 597 7 view .LVU1010
 3848 1214 000050E3 		cmp	r0, #0	@ _1,
 3849 1218 0000000A 		beq	.L160		@,
 598:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3850              		.loc 1 598 9 is_stmt 1 view .LVU1011
 3851 121c FEFFFFEB 		bl	free		@
 3852              	.LVL210:
 3853              	.L160:
 599:armwave.c     ****     }
 600:armwave.c     **** 
 601:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armwave_state.waves_m
 3854              		.loc 1 603 5 view .LVU1012
 3855              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 3856              		.loc 1 603 92 is_stmt 0 view .LVU1013
 3857 1220 3C5094E5 		ldr	r5, [r4, #60]	@ _3, g_armwave_state.waves_max
 3858              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 3859              		.loc 1 603 75 view .LVU1014
 3860 1224 340094E5 		ldr	r0, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3861              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 3862              		.loc 1 603 40 view .LVU1015
 3863 1228 0610A0E1 		mov	r1, r6	@, nsets
 3864 122c 900500E0 		mul	r0, r0, r5	@, g_armwave_state.wave_stride, _3
 3865 1230 FEFFFFEB 		bl	calloc		@
 3866              	.LVL211:
 3867              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 604:armwave.c     **** 
 605:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3868              		.loc 1 605 7 view .LVU1016
 3869 1234 000050E3 		cmp	r0, #0	@ tmp126,
 3870              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 603:armwave.c     **** 
 3871              		.loc 1 603 38 view .LVU1017
 3872 1238 180084E5 		str	r0, [r4, #24]	@ tmp126, g_armwave_state.test_wave_buffer
 3873              		.loc 1 605 5 is_stmt 1 view .LVU1018
 3874              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 3875              		.loc 1 605 7 is_stmt 0 view .LVU1019
 3876 123c 7080BD18 		popne	{r4, r5, r6, pc}	@
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3877              		.loc 1 606 9 is_stmt 1 view .LVU1020
 3878              	@ armwave.c:607:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 607:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3879              		.loc 1 607 41 is_stmt 0 view .LVU1021
 3880 1240 4C1094E5 		ldr	r1, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3881              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3882              		.loc 1 606 9 view .LVU1022
 3883 1244 0620A0E1 		mov	r2, r6	@, nsets
 3884 1248 10009FE5 		ldr	r0, .L166+4	@,
 3885              	@ armwave.c:607:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 3886              		.loc 1 607 41 view .LVU1023
 3887 124c 910501E0 		mul	r1, r1, r5	@ tmp129, g_armwave_state.wave_length, _3
 3888              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3889              		.loc 1 606 9 view .LVU1024
 3890 1250 960101E0 		mul	r1, r6, r1	@, tmp2, tmp129
 3891              	@ armwave.c:610: }
 608:armwave.c     ****         return;
 609:armwave.c     ****     }
 610:armwave.c     **** }
 3892              		.loc 1 610 1 view .LVU1025
 3893 1254 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3894              		.cfi_restore 14
 3895              		.cfi_restore 6
 3896              		.cfi_restore 5
 3897              		.cfi_restore 4
 3898              		.cfi_def_cfa_offset 0
 3899              	.LVL212:
 3900              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3901              		.loc 1 606 9 view .LVU1026
 3902 1258 FEFFFFEA 		b	printf		@
 3903              	.LVL213:
 3904              	.L167:
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3905              		.loc 1 606 9 view .LVU1027
 3906              		.align	2
 3907              	.L166:
 3908 125c 00000000 		.word	g_armwave_state
 3909 1260 90020000 		.word	.LC18
 3910              		.cfi_endproc
 3911              	.LFE76:
 3913              		.align	2
 3914              		.global	armwave_test_create_am_sine
 3915              		.syntax unified
 3916              		.arm
 3917              		.fpu vfp
 3919              	armwave_test_create_am_sine:
 3920              	.LVL214:
 3921              	.LFB77:
 611:armwave.c     **** 
 612:armwave.c     **** /*
 613:armwave.c     ****  * Make a test AM waveform for render tests.
 614:armwave.c     ****  *
 615:armwave.c     ****  * @param   mod                     modulation depth
 616:armwave.c     ****  * @param   noise_fraction          typically 1e-6`
 617:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 618:armwave.c     ****  */
 619:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 620:armwave.c     **** {
 3922              		.loc 1 620 1 is_stmt 1 view -0
 3923              		.cfi_startproc
 3924              		@ args = 0, pretend = 0, frame = 8
 3925              		@ frame_needed = 0, uses_anonymous_args = 0
 621:armwave.c     ****     float v, noise, xnoise, mod_val;
 3926              		.loc 1 621 5 view .LVU1029
 622:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3927              		.loc 1 622 5 view .LVU1030
 3928              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3929              		.loc 1 620 1 is_stmt 0 view .LVU1031
 3930 1264 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3931              		.cfi_def_cfa_offset 36
 3932              		.cfi_offset 4, -36
 3933              		.cfi_offset 5, -32
 3934              		.cfi_offset 6, -28
 3935              		.cfi_offset 7, -24
 3936              		.cfi_offset 8, -20
 3937              		.cfi_offset 9, -16
 3938              		.cfi_offset 10, -12
 3939              		.cfi_offset 11, -8
 3940              		.cfi_offset 14, -4
 3941              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3942              		.loc 1 622 38 view .LVU1032
 3943 1268 867A9FED 		vldr.32	s14, .L199+16	@ tmp187,
 3944              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3945              		.loc 1 622 55 view .LVU1033
 3946 126c 2C529FE5 		ldr	r5, .L199+40	@ tmp265,
 3947              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3948              		.loc 1 620 1 view .LVU1034
 3949 1270 108B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14, d15}	@
 3950              		.cfi_def_cfa_offset 100
 3951              		.cfi_offset 80, -100
 3952              		.cfi_offset 81, -96
 3953              		.cfi_offset 82, -92
 3954              		.cfi_offset 83, -88
 3955              		.cfi_offset 84, -84
 3956              		.cfi_offset 85, -80
 3957              		.cfi_offset 86, -76
 3958              		.cfi_offset 87, -72
 3959              		.cfi_offset 88, -68
 3960              		.cfi_offset 89, -64
 3961              		.cfi_offset 90, -60
 3962              		.cfi_offset 91, -56
 3963              		.cfi_offset 92, -52
 3964              		.cfi_offset 93, -48
 3965              		.cfi_offset 94, -44
 3966              		.cfi_offset 95, -40
 3967 1274 0090A0E1 		mov	r9, r0	@ sets, sets
 3968              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3969              		.loc 1 622 38 view .LVU1035
 3970 1278 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp277, g_armwave_state.waves
 3971              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 623:armwave.c     ****     int s, set_offset = 0;
 624:armwave.c     ****     int w, x;
 625:armwave.c     **** 
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3972              		.loc 1 626 87 view .LVU1036
 3973 127c 342095E5 		ldr	r2, [r5, #52]	@ _5, g_armwave_state.wave_stride
 3974              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3975              		.loc 1 626 70 view .LVU1037
 3976 1280 383095E5 		ldr	r3, [r5, #56]	@ tmp278, g_armwave_state.waves
 3977              	.LBB116:
 3978              	.LBB117:
 3979              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3980              		.loc 1 597 23 view .LVU1038
 3981 1284 180095E5 		ldr	r0, [r5, #24]	@ _88, g_armwave_state.test_wave_buffer
 3982              	.LVL215:
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3983              		.loc 1 597 23 view .LVU1039
 3984              	.LBE117:
 3985              	.LBE116:
 3986              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 3987              		.loc 1 622 38 view .LVU1040
 3988 1288 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp185, tmp277
 3989              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3990              		.loc 1 626 70 view .LVU1041
 3991 128c 920303E0 		mul	r3, r2, r3	@ tmp190, _5, tmp278
 3992              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3993              		.loc 1 620 1 view .LVU1042
 3994 1290 60DAF0EE 		vmov.f32	s27, s1	@ noise_fraction, noise_fraction
 3995              	.LBB121:
 3996              	.LBB118:
 3997              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3998              		.loc 1 597 7 view .LVU1043
 3999 1294 000050E3 		cmp	r0, #0	@ _88,
 4000              	.LBE118:
 4001              	.LBE121:
 4002              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 4003              		.loc 1 620 1 view .LVU1044
 4004 1298 0CD04DE2 		sub	sp, sp, #12	@,,
 4005              		.cfi_def_cfa_offset 112
 4006              	@ armwave.c:627:     g_armwave_state.test_wave_buffer_nsets = sets;
 627:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 4007              		.loc 1 627 44 view .LVU1045
 4008 129c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 4009              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 4010              		.loc 1 626 45 view .LVU1046
 4011 12a0 1C3085E5 		str	r3, [r5, #28]	@ tmp190, g_armwave_state.test_wave_buffer_stride
 4012              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 4013              		.loc 1 622 38 view .LVU1047
 4014 12a4 27EAC7EE 		vdiv.f32	s29, s14, s15	@ tmp186, tmp187, tmp185
 4015              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 4016              		.loc 1 622 11 view .LVU1048
 4017 12a8 80EA6EEE 		vmul.f32	s29, s29, s0	@ _1_waves_mod, tmp186, mod
 4018              	.LVL216:
 623:armwave.c     ****     int w, x;
 4019              		.loc 1 623 5 is_stmt 1 view .LVU1049
 624:armwave.c     **** 
 4020              		.loc 1 624 5 view .LVU1050
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 4021              		.loc 1 626 5 view .LVU1051
 4022              		.loc 1 627 5 view .LVU1052
 628:armwave.c     ****     armwave_test_buffer_alloc(sets);
 4023              		.loc 1 628 5 view .LVU1053
 4024              	.LBB122:
 4025              	.LBI116:
 595:armwave.c     **** {
 4026              		.loc 1 595 6 view .LVU1054
 4027              	.LBB119:
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4028              		.loc 1 597 5 view .LVU1055
 4029              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4030              		.loc 1 597 7 is_stmt 0 view .LVU1056
 4031 12ac 0100000A 		beq	.L169		@,
 598:armwave.c     ****     }
 4032              		.loc 1 598 9 is_stmt 1 view .LVU1057
 4033 12b0 FEFFFFEB 		bl	free		@
 4034              	.LVL217:
 598:armwave.c     ****     }
 4035              		.loc 1 598 9 is_stmt 0 view .LVU1058
 4036 12b4 342095E5 		ldr	r2, [r5, #52]	@ _5, g_armwave_state.wave_stride
 4037              	.L169:
 603:armwave.c     **** 
 4038              		.loc 1 603 5 is_stmt 1 view .LVU1059
 4039              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 603:armwave.c     **** 
 4040              		.loc 1 603 92 is_stmt 0 view .LVU1060
 4041 12b8 3C4095E5 		ldr	r4, [r5, #60]	@ _90, g_armwave_state.waves_max
 4042              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 603:armwave.c     **** 
 4043              		.loc 1 603 40 view .LVU1061
 4044 12bc 0910A0E1 		mov	r1, r9	@, sets
 4045 12c0 920400E0 		mul	r0, r2, r4	@, _5, _90
 4046 12c4 FEFFFFEB 		bl	calloc		@
 4047              	.LVL218:
 4048              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4049              		.loc 1 605 7 view .LVU1062
 4050 12c8 000050E3 		cmp	r0, #0	@ tmp196,
 4051              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 603:armwave.c     **** 
 4052              		.loc 1 603 38 view .LVU1063
 4053 12cc 180085E5 		str	r0, [r5, #24]	@ tmp196, g_armwave_state.test_wave_buffer
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4054              		.loc 1 605 5 is_stmt 1 view .LVU1064
 4055              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4056              		.loc 1 605 7 is_stmt 0 view .LVU1065
 4057 12d0 6100000A 		beq	.L198		@,
 4058              	.L170:
 4059              	.LVL219:
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4060              		.loc 1 605 7 view .LVU1066
 4061              	.LBE119:
 4062              	.LBE122:
 4063              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 629:armwave.c     **** 
 630:armwave.c     ****     for(s = 0; s < sets; s++) {
 4064              		.loc 1 630 5 discriminator 1 view .LVU1067
 4065 12d4 000059E3 		cmp	r9, #0	@ sets,
 4066 12d8 5C0000DA 		ble	.L168		@,
 4067              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 632:armwave.c     ****     
 633:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 634:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 635:armwave.c     ****             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4068              		.loc 1 635 63 view .LVU1068
 4069 12dc 65BB9FED 		vldr.64	d11, .L199	@ tmp272,
 4070              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4071              		.loc 1 635 28 view .LVU1069
 4072 12e0 66AB9FED 		vldr.64	d10, .L199+8	@ tmp273,
 4073              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 636:armwave.c     **** 
 637:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 638:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 639:armwave.c     ****                 noise *= noise;
 640:armwave.c     ****                 noise *= noise;
 641:armwave.c     ****                 noise *= noise;
 642:armwave.c     **** 
 643:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 644:armwave.c     ****                     noise = -noise;
 645:armwave.c     **** 
 646:armwave.c     ****                 noise += 1.0f;
 647:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 648:armwave.c     **** 
 649:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 650:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 651:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 652:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 4074              		.loc 1 652 104 view .LVU1070
 4075 12e4 68EA9FED 		vldr.32	s28, .L199+20	@ tmp274,
 4076              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4077              		.loc 1 630 5 view .LVU1071
 4078 12e8 0070A0E3 		mov	r7, #0	@ set_offset,
 4079              	@ armwave.c:631:         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_le
 631:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4080              		.loc 1 631 9 view .LVU1072
 4081 12ec B0A19FE5 		ldr	r10, .L199+44	@ tmp271,
 4082              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4083              		.loc 1 630 5 view .LVU1073
 4084 12f0 0780A0E1 		mov	r8, r7	@ s, set_offset
 4085              	.LVL220:
 4086              	.L171:
 631:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4087              		.loc 1 631 9 is_stmt 1 view .LVU1074
 4088 12f4 4C2095E5 		ldr	r2, [r5, #76]	@, g_armwave_state.wave_length
 4089 12f8 0810A0E1 		mov	r1, r8	@, s
 4090 12fc 0A00A0E1 		mov	r0, r10	@, tmp271
 4091 1300 FEFFFFEB 		bl	printf		@
 4092              	.LVL221:
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4093              		.loc 1 633 9 view .LVU1075
 4094              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4095              		.loc 1 633 39 is_stmt 0 view .LVU1076
 4096 1304 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_141, g_armwave_state.waves
 4097              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4098              		.loc 1 633 9 view .LVU1077
 4099 1308 000054E3 		cmp	r4, #0	@ prephitmp_141,
 4100 130c 4A0000DA 		ble	.L172		@,
 4101              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4102              		.loc 1 635 54 view .LVU1078
 4103 1310 5E8ADFED 		vldr.32	s17, .L199+24	@ tmp211,
 4104              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4105              		.loc 1 649 45 view .LVU1079
 4106 1314 5B8A9FED 		vldr.32	s16, .L199+16	@ tmp268,
 4107 1318 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_145, g_armwave_state.wave_length
 4108              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4109              		.loc 1 633 15 view .LVU1080
 4110 131c 0060A0E3 		mov	r6, #0	@ w,
 4111              	.LVL222:
 4112              	.L179:
 635:armwave.c     **** 
 4113              		.loc 1 635 13 is_stmt 1 view .LVU1081
 4114              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4115              		.loc 1 635 49 is_stmt 0 view .LVU1082
 4116 1320 906A07EE 		vmov	s15, r6	@ int	@ w, w
 4117 1324 E70AB8EE 		vcvt.f32.s32	s0, s15	@ tmp208, w
 4118 1328 2E0A20EE 		vmul.f32	s0, s0, s29	@ tmp209, tmp208, _1_waves_mod
 4119              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4120              		.loc 1 635 54 view .LVU1083
 4121 132c 280A20EE 		vmul.f32	s0, s0, s17	@ tmp210, tmp209, tmp211
 4122              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4123              		.loc 1 635 31 view .LVU1084
 4124 1330 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp210
 4125 1334 FEFFFFEB 		bl	sin		@
 4126              	.LVL223:
 4127              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4128              		.loc 1 637 13 view .LVU1085
 4129 1338 00005BE3 		cmp	fp, #0	@ prephitmp_145,
 4130              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4131              		.loc 1 635 63 view .LVU1086
 4132 133c 0B0B30EE 		vadd.f64	d0, d0, d11	@ tmp213,, tmp272
 4133              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4134              		.loc 1 635 28 view .LVU1087
 4135 1340 0A0B20EE 		vmul.f64	d0, d0, d10	@ tmp215, tmp213, tmp273
 4136              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4137              		.loc 1 635 21 view .LVU1088
 4138 1344 C00BB7EE 		vcvt.f32.f64	s0, d0	@ mod_val, tmp215
 4139              	.LVL224:
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4140              		.loc 1 637 13 is_stmt 1 view .LVU1089
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4141              		.loc 1 637 13 is_stmt 0 view .LVU1090
 4142 1348 380000DA 		ble	.L173		@,
 4143 134c C09AB7EE 		vcvt.f64.f32	d9, s0	@ tmp266, mod_val
 4144              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4145              		.loc 1 647 24 view .LVU1091
 4146 1350 4FDA9FED 		vldr.32	s26, .L199+28	@ tmp234,
 4147              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4148              		.loc 1 652 113 view .LVU1092
 4149 1354 4FCADFED 		vldr.32	s25, .L199+32	@ tmp245,
 4150 1358 4FCA9FED 		vldr.32	s24, .L199+36	@ tmp246,
 4151              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4152              		.loc 1 637 19 view .LVU1093
 4153 135c 0040A0E3 		mov	r4, #0	@ x,
 4154              	.LVL225:
 4155              	.L178:
 638:armwave.c     ****                 noise *= noise;
 4156              		.loc 1 638 17 is_stmt 1 view .LVU1094
 4157              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4158              		.loc 1 638 28 is_stmt 0 view .LVU1095
 4159 1360 FEFFFFEB 		bl	rand		@
 4160              	.LVL226:
 4161              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4162              		.loc 1 638 35 view .LVU1096
 4163 1364 7000FFE6 		uxth	r0, r0	@ tmp217,
 4164              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4165              		.loc 1 638 45 view .LVU1097
 4166 1368 900A07EE 		vmov	s15, r0	@ int	@ tmp217, tmp217
 4167 136c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp219, tmp217
 4168              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4169              		.loc 1 638 24 view .LVU1098
 4170 1370 AD7A67EE 		vmul.f32	s15, s15, s27	@ noise, tmp219, noise_fraction
 4171              	.LVL227:
 639:armwave.c     ****                 noise *= noise;
 4172              		.loc 1 639 17 is_stmt 1 view .LVU1099
 4173              	@ armwave.c:639:                 noise *= noise;
 639:armwave.c     ****                 noise *= noise;
 4174              		.loc 1 639 23 is_stmt 0 view .LVU1100
 4175 1374 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4176              	.LVL228:
 640:armwave.c     ****                 noise *= noise;
 4177              		.loc 1 640 17 is_stmt 1 view .LVU1101
 4178              	@ armwave.c:640:                 noise *= noise;
 640:armwave.c     ****                 noise *= noise;
 4179              		.loc 1 640 23 is_stmt 0 view .LVU1102
 4180 1378 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4181              	.LVL229:
 641:armwave.c     **** 
 4182              		.loc 1 641 17 is_stmt 1 view .LVU1103
 4183              	@ armwave.c:641:                 noise *= noise;
 641:armwave.c     **** 
 4184              		.loc 1 641 23 is_stmt 0 view .LVU1104
 4185 137c A7FA27EE 		vmul.f32	s30, s15, s15	@ noise, noise, noise
 4186              	.LVL230:
 643:armwave.c     ****                     noise = -noise;
 4187              		.loc 1 643 17 is_stmt 1 view .LVU1105
 4188              	@ armwave.c:643:                 if((rand() & 0xffff) > 0x7fff)
 643:armwave.c     ****                     noise = -noise;
 4189              		.loc 1 643 21 is_stmt 0 view .LVU1106
 4190 1380 FEFFFFEB 		bl	rand		@
 4191              	.LVL231:
 644:armwave.c     **** 
 4192              		.loc 1 644 21 is_stmt 1 view .LVU1107
 4193              	@ armwave.c:643:                 if((rand() & 0xffff) > 0x7fff)
 643:armwave.c     ****                     noise = -noise;
 4194              		.loc 1 643 19 is_stmt 0 view .LVU1108
 4195 1384 020910E3 		tst	r0, #32768	@,
 4196              	@ armwave.c:644:                     noise = -noise;
 644:armwave.c     **** 
 4197              		.loc 1 644 27 view .LVU1109
 4198 1388 4FFAB11E 		vnegne.f32	s30, s30	@ noise, noise
 4199              	.LVL232:
 646:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4200              		.loc 1 646 17 is_stmt 1 view .LVU1110
 647:armwave.c     **** 
 4201              		.loc 1 647 17 view .LVU1111
 4202              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4203              		.loc 1 647 27 is_stmt 0 view .LVU1112
 4204 138c FEFFFFEB 		bl	rand		@
 4205              	.LVL233:
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4206              		.loc 1 649 17 is_stmt 1 view .LVU1113
 4207              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4208              		.loc 1 649 45 is_stmt 0 view .LVU1114
 4209 1390 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp282, g_armwave_state.wave_length
 4210              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4211              		.loc 1 649 33 view .LVU1115
 4212 1394 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4213              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4214              		.loc 1 649 45 view .LVU1116
 4215 1398 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp222, tmp282
 4216              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4217              		.loc 1 649 33 view .LVU1117
 4218 139c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp226, x
 4219              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4220              		.loc 1 649 45 view .LVU1118
 4221 13a0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp224, tmp268, tmp222
 4222              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4223              		.loc 1 649 33 view .LVU1119
 4224 13a4 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp227, tmp226, tmp211
 4225              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4226              		.loc 1 647 34 view .LVU1120
 4227 13a8 7000FFE6 		uxth	r0, r0	@ tmp230,
 4228              	.LVL234:
 4229              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4230              		.loc 1 647 44 view .LVU1121
 4231 13ac 100A07EE 		vmov	s14, r0	@ int	@ tmp230, tmp230
 4232 13b0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp232, tmp230
 4233              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4234              		.loc 1 647 24 view .LVU1122
 4235 13b4 0D0A87EE 		vdiv.f32	s0, s14, s26	@ xnoise, tmp232, tmp234
 4236              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4237              		.loc 1 649 77 view .LVU1123
 4238 13b8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp235, tmp224, tmp227
 4239              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4240              		.loc 1 649 22 view .LVU1124
 4241 13bc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp235
 4242 13c0 FEFFFFEB 		bl	sin		@
 4243              	.LVL235:
 4244              		.loc 1 652 17 is_stmt 1 view .LVU1125
 4245              	@ armwave.c:646:                 noise += 1.0f;
 646:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4246              		.loc 1 646 23 is_stmt 0 view .LVU1126
 4247 13c4 087A7FEE 		vadd.f32	s15, s30, s16	@ noise, noise, tmp268
 4248              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4249              		.loc 1 652 104 view .LVU1127
 4250 13c8 0010A0E3 		mov	r1, #0	@ iftmp.27_56,
 4251              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4252              		.loc 1 649 98 view .LVU1128
 4253 13cc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp241, noise
 4254              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4255              		.loc 1 649 87 view .LVU1129
 4256 13d0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp238, tmp266,
 4257              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4258              		.loc 1 649 98 view .LVU1130
 4259 13d4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp242, tmp238, tmp241
 4260              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4261              		.loc 1 649 19 view .LVU1131
 4262 13d8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp242
 4263              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4264              		.loc 1 652 113 view .LVU1132
 4265 13dc 4C7AF0EE 		vmov.f32	s15, s24	@ _39, tmp246
 4266 13e0 2C7A47EE 		vmla.f32	s15, s14, s25	@ _39, v, tmp245
 4267 13e4 C07AF5EE 		vcmpe.f32	s15, #0	@ _39
 4268 13e8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4269 13ec 050000DA 		ble	.L175		@,
 4270              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4271              		.loc 1 652 104 discriminator 1 view .LVU1133
 4272 13f0 CE7AF4EE 		vcmpe.f32	s15, s28	@ _39, tmp274
 4273 13f4 FF10A0E3 		mov	r1, #255	@ iftmp.27_56,
 4274 13f8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4275 13fc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp250, _39
 4276 1400 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp250, %sfp
 4277 1404 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_56, %sfp
 4278              	.L175:
 4279              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4280              		.loc 1 652 57 discriminator 12 view .LVU1134
 4281 1408 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4282              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4283              		.loc 1 652 102 discriminator 12 view .LVU1135
 4284 140c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4285 1410 927622E0 		mla	r2, r2, r6, r7	@ tmp257, g_armwave_state.wave_stride, w, set_offset
 4286 1414 043083E0 		add	r3, r3, r4	@ tmp256, g_armwave_state.test_wave_buffer, x
 4287              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4288              		.loc 1 637 58 discriminator 12 view .LVU1136
 4289 1418 014084E2 		add	r4, r4, #1	@ x, x,
 4290              	.LVL236:
 4291              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4292              		.loc 1 652 102 discriminator 12 view .LVU1137
 4293 141c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_56, *_46
 4294              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4295              		.loc 1 637 43 discriminator 12 view .LVU1138
 4296 1420 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_145, g_armwave_state.wave_length
 4297              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4298              		.loc 1 637 13 discriminator 12 view .LVU1139
 4299 1424 04005BE1 		cmp	fp, r4	@ prephitmp_145, x
 4300 1428 CCFFFFCA 		bgt	.L178		@,
 4301 142c 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_141, g_armwave_state.waves
 4302              	.LVL237:
 4303              	.L173:
 4304              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4305              		.loc 1 633 48 discriminator 2 view .LVU1140
 4306 1430 016086E2 		add	r6, r6, #1	@ w, w,
 4307              	.LVL238:
 4308              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4309              		.loc 1 633 9 discriminator 2 view .LVU1141
 4310 1434 040056E1 		cmp	r6, r4	@ w, prephitmp_141
 4311 1438 B8FFFFBA 		blt	.L179		@,
 4312              	.LVL239:
 4313              	.L172:
 653:armwave.c     ****             }
 654:armwave.c     ****         }
 655:armwave.c     **** 
 656:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4314              		.loc 1 656 9 is_stmt 1 discriminator 2 view .LVU1142
 4315              	@ armwave.c:656:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4316              		.loc 1 656 46 is_stmt 0 discriminator 2 view .LVU1143
 4317 143c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4318              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4319              		.loc 1 630 27 discriminator 2 view .LVU1144
 4320 1440 018088E2 		add	r8, r8, #1	@ s, s,
 4321              	.LVL240:
 4322              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4323              		.loc 1 630 5 discriminator 2 view .LVU1145
 4324 1444 080059E1 		cmp	r9, r8	@ sets, s
 4325              	@ armwave.c:656:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4326              		.loc 1 656 20 discriminator 2 view .LVU1146
 4327 1448 937427E0 		mla	r7, r3, r4, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_141, set_offset
 4328              	.LVL241:
 4329              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 4330              		.loc 1 630 5 discriminator 2 view .LVU1147
 4331 144c A8FFFF1A 		bne	.L171		@,
 4332              	.LVL242:
 4333              	.L168:
 4334              	@ armwave.c:658: }
 657:armwave.c     ****     }
 658:armwave.c     **** }
 4335              		.loc 1 658 1 view .LVU1148
 4336 1450 0CD08DE2 		add	sp, sp, #12	@,,
 4337              		.cfi_remember_state
 4338              		.cfi_def_cfa_offset 100
 4339              		@ sp needed	@
 4340 1454 108BBDEC 		vldm	sp!, {d8-d15}	@,
 4341              		.cfi_restore 94
 4342              		.cfi_restore 95
 4343              		.cfi_restore 92
 4344              		.cfi_restore 93
 4345              		.cfi_restore 90
 4346              		.cfi_restore 91
 4347              		.cfi_restore 88
 4348              		.cfi_restore 89
 4349              		.cfi_restore 86
 4350              		.cfi_restore 87
 4351              		.cfi_restore 84
 4352              		.cfi_restore 85
 4353              		.cfi_restore 82
 4354              		.cfi_restore 83
 4355              		.cfi_restore 80
 4356              		.cfi_restore 81
 4357              		.cfi_def_cfa_offset 36
 4358 1458 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4359              	.LVL243:
 4360              	.L198:
 4361              		.cfi_restore_state
 4362              	.LBB123:
 4363              	.LBB120:
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4364              		.loc 1 606 9 is_stmt 1 view .LVU1149
 4365              	@ armwave.c:607:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 607:armwave.c     ****         return;
 4366              		.loc 1 607 41 is_stmt 0 view .LVU1150
 4367 145c 4C1095E5 		ldr	r1, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 4368              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4369              		.loc 1 606 9 view .LVU1151
 4370 1460 0920A0E1 		mov	r2, r9	@, sets
 4371 1464 3C009FE5 		ldr	r0, .L199+48	@,
 4372              	@ armwave.c:607:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 607:armwave.c     ****         return;
 4373              		.loc 1 607 41 view .LVU1152
 4374 1468 910401E0 		mul	r1, r1, r4	@ tmp199, g_armwave_state.wave_length, _90
 4375              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4376              		.loc 1 606 9 view .LVU1153
 4377 146c 990101E0 		mul	r1, r9, r1	@, sets, tmp199
 4378 1470 FEFFFFEB 		bl	printf		@
 4379              	.LVL244:
 608:armwave.c     ****     }
 4380              		.loc 1 608 9 is_stmt 1 view .LVU1154
 4381 1474 96FFFFEA 		b	.L170		@
 4382              	.L200:
 4383              		.align	3
 4384              	.L199:
 4385 1478 00000000 		.word	0
 4386 147c 0000F03F 		.word	1072693248
 4387 1480 00000000 		.word	0
 4388 1484 0000E03F 		.word	1071644672
 4389 1488 0000803F 		.word	1065353216
 4390 148c 00007F43 		.word	1132396544
 4391 1490 C3F5C840 		.word	1086911939
 4392 1494 38FFC74A 		.word	1254620984
 4393 1498 0000FE42 		.word	1123942400
 4394 149c 00000043 		.word	1124073472
 4395 14a0 00000000 		.word	g_armwave_state
 4396 14a4 E4020000 		.word	.LC19
 4397 14a8 90020000 		.word	.LC18
 4398              	.LBE120:
 4399              	.LBE123:
 4400              		.cfi_endproc
 4401              	.LFE77:
 4403              		.align	2
 4404              		.global	armwave_cleanup
 4405              		.syntax unified
 4406              		.arm
 4407              		.fpu vfp
 4409              	armwave_cleanup:
 4410              	.LFB78:
 659:armwave.c     **** 
 660:armwave.c     **** /*
 661:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 662:armwave.c     ****  */
 663:armwave.c     **** void armwave_cleanup()
 664:armwave.c     **** {
 4411              		.loc 1 664 1 view -0
 4412              		.cfi_startproc
 4413              		@ args = 0, pretend = 0, frame = 0
 4414              		@ frame_needed = 0, uses_anonymous_args = 0
 665:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4415              		.loc 1 665 5 view .LVU1156
 4416              	@ armwave.c:664: {
 664:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4417              		.loc 1 664 1 is_stmt 0 view .LVU1157
 4418 14ac 10402DE9 		push	{r4, lr}	@
 4419              		.cfi_def_cfa_offset 8
 4420              		.cfi_offset 4, -8
 4421              		.cfi_offset 14, -4
 4422              	@ armwave.c:665:     free(g_armwave_state.out_pixbuf);
 4423              		.loc 1 665 25 view .LVU1158
 4424 14b0 34409FE5 		ldr	r4, .L203	@ tmp114,
 4425              	@ armwave.c:665:     free(g_armwave_state.out_pixbuf);
 4426              		.loc 1 665 5 view .LVU1159
 4427 14b4 800094E5 		ldr	r0, [r4, #128]	@, g_armwave_state.out_pixbuf
 4428 14b8 FEFFFFEB 		bl	free		@
 4429              	.LVL245:
 666:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4430              		.loc 1 666 5 is_stmt 1 view .LVU1160
 4431 14bc 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4432 14c0 FEFFFFEB 		bl	free		@
 4433              	.LVL246:
 667:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4434              		.loc 1 667 5 view .LVU1161
 4435 14c4 9C0094E5 		ldr	r0, [r4, #156]	@, g_armwave_state.xcoord_to_xpixel
 4436 14c8 FEFFFFEB 		bl	free		@
 4437              	.LVL247:
 668:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4438              		.loc 1 668 5 view .LVU1162
 4439 14cc 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4440 14d0 FEFFFFEB 		bl	free		@
 4441              	.LVL248:
 669:armwave.c     **** 
 670:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4442              		.loc 1 670 5 view .LVU1163
 4443              	@ armwave.c:670:     g_armwave_state.out_pixbuf = NULL;
 4444              		.loc 1 670 32 is_stmt 0 view .LVU1164
 4445 14d4 0030A0E3 		mov	r3, #0	@ tmp123,
 4446 14d8 803084E5 		str	r3, [r4, #128]	@ tmp123, g_armwave_state.out_pixbuf
 671:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4447              		.loc 1 671 5 is_stmt 1 view .LVU1165
 4448              	@ armwave.c:671:     g_armwave_state.ch1_buffer = NULL;
 4449              		.loc 1 671 32 is_stmt 0 view .LVU1166
 4450 14dc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 672:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4451              		.loc 1 672 5 is_stmt 1 view .LVU1167
 4452              	@ armwave.c:672:     g_armwave_state.xcoord_to_xpixel = NULL;
 4453              		.loc 1 672 38 is_stmt 0 view .LVU1168
 4454 14e0 9C3084E5 		str	r3, [r4, #156]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 673:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4455              		.loc 1 673 5 is_stmt 1 view .LVU1169
 4456              	@ armwave.c:673:     g_armwave_state.test_wave_buffer = NULL;
 4457              		.loc 1 673 38 is_stmt 0 view .LVU1170
 4458 14e4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4459              	@ armwave.c:674: }
 674:armwave.c     **** }
 4460              		.loc 1 674 1 view .LVU1171
 4461 14e8 1080BDE8 		pop	{r4, pc}	@
 4462              	.L204:
 4463              		.align	2
 4464              	.L203:
 4465 14ec 00000000 		.word	g_armwave_state
 4466              		.cfi_endproc
 4467              	.LFE78:
 4469              		.align	2
 4470              		.global	armwave_set_window_dims
 4471              		.syntax unified
 4472              		.arm
 4473              		.fpu vfp
 4475              	armwave_set_window_dims:
 4476              	.LVL249:
 4477              	.LFB80:
 675:armwave.c     **** 
 676:armwave.c     **** /*
 677:armwave.c     ****  * Create an XWindow for rendering onto a dedicated window plane.
 678:armwave.c     ****  * Seems to be necessary for GTK.
 679:armwave.c     ****  *
 680:armwave.c     ****  * Initial dimensions of 640x480 are assumed.  Window can be resized on demand 
 681:armwave.c     ****  * using armwave_resize_xwindow().
 682:armwave.c     ****  */
 683:armwave.c     **** void armwave_create_xwindow()
 684:armwave.c     **** {
 685:armwave.c     ****     Window window;
 686:armwave.c     ****     unsigned long mask;
 687:armwave.c     ****     
 688:armwave.c     ****     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.visual, AllocNone);
 689:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 690:armwave.c     ****     g_xswa.background_pixel = 0;
 691:armwave.c     ****     g_xswa.border_pixel = 0;
 692:armwave.c     ****     
 693:armwave.c     ****     mask = CWBackPixel | CWBorderPixel | CWColormap | CWEventMask;
 694:armwave.c     ****     
 695:armwave.c     ****     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 696:armwave.c     **** 			 0, 0,
 697:armwave.c     **** 			 640,
 698:armwave.c     **** 			 480,
 699:armwave.c     **** 			 0, g_vinfo.depth,
 700:armwave.c     **** 			 InputOutput,
 701:armwave.c     **** 			 g_vinfo.visual,
 702:armwave.c     **** 			 mask, &g_xswa);
 703:armwave.c     ****     
 704:armwave.c     ****     printf("armwave: Created X11 Window: %d (0x%08x)\n", window, window);
 705:armwave.c     ****     
 706:armwave.c     ****     armwave_grab_xid(window);
 707:armwave.c     **** }
 708:armwave.c     **** 
 709:armwave.c     **** /*
 710:armwave.c     ****  * Resize and position the active XWindow.  May not make sense if we do not own that window.
 711:armwave.c     ****  */
 712:armwave.c     **** void armwave_set_window_dims(int x, int y, int w, int h)
 713:armwave.c     **** {
 4478              		.loc 1 713 1 is_stmt 1 view -0
 4479              		.cfi_startproc
 4480              		@ args = 0, pretend = 0, frame = 0
 4481              		@ frame_needed = 0, uses_anonymous_args = 0
 714:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 4482              		.loc 1 714 5 view .LVU1173
 4483              	@ armwave.c:713: {
 713:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 4484              		.loc 1 713 1 is_stmt 0 view .LVU1174
 4485 14f0 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 4486              		.cfi_def_cfa_offset 20
 4487              		.cfi_offset 4, -20
 4488              		.cfi_offset 5, -16
 4489              		.cfi_offset 6, -12
 4490              		.cfi_offset 7, -8
 4491              		.cfi_offset 14, -4
 4492 14f4 0CD04DE2 		sub	sp, sp, #12	@,,
 4493              		.cfi_def_cfa_offset 32
 4494              	@ armwave.c:713: {
 713:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 4495              		.loc 1 713 1 view .LVU1175
 4496 14f8 0040A0E1 		mov	r4, r0	@ x, x
 4497 14fc 0150A0E1 		mov	r5, r1	@ y, y
 4498 1500 0260A0E1 		mov	r6, r2	@ w, w
 4499 1504 0370A0E1 		mov	r7, r3	@ h, h
 4500              	@ armwave.c:714:     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 4501              		.loc 1 714 5 view .LVU1176
 4502 1508 00308DE5 		str	r3, [sp]	@ h,
 4503 150c 0230A0E1 		mov	r3, r2	@, w
 4504              	.LVL250:
 4505              		.loc 1 714 5 view .LVU1177
 4506 1510 0120A0E1 		mov	r2, r1	@, y
 4507              	.LVL251:
 4508              		.loc 1 714 5 view .LVU1178
 4509 1514 0010A0E1 		mov	r1, r0	@, x
 4510              	.LVL252:
 4511              		.loc 1 714 5 view .LVU1179
 4512 1518 28009FE5 		ldr	r0, .L207	@,
 4513              	.LVL253:
 4514              		.loc 1 714 5 view .LVU1180
 4515 151c FEFFFFEB 		bl	printf		@
 4516              	.LVL254:
 715:armwave.c     ****     
 716:armwave.c     ****     XMoveResizeWindow(g_dpy, g_window, x, y, w, h);
 4517              		.loc 1 716 5 is_stmt 1 view .LVU1181
 4518 1520 24109FE5 		ldr	r1, .L207+4	@ tmp119,
 4519 1524 24009FE5 		ldr	r0, .L207+8	@ tmp121,
 4520 1528 F060CDE1 		strd	r6, [sp]	@,
 4521 152c 0530A0E1 		mov	r3, r5	@, y
 4522 1530 0420A0E1 		mov	r2, r4	@, x
 4523 1534 001091E5 		ldr	r1, [r1]	@, g_window
 4524 1538 000090E5 		ldr	r0, [r0]	@, g_dpy
 4525 153c FEFFFFEB 		bl	XMoveResizeWindow		@
 4526              	.LVL255:
 4527              	@ armwave.c:717: }
 717:armwave.c     **** }
 4528              		.loc 1 717 1 is_stmt 0 view .LVU1182
 4529 1540 0CD08DE2 		add	sp, sp, #12	@,,
 4530              		.cfi_def_cfa_offset 20
 4531              		@ sp needed	@
 4532 1544 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 4533              	.LVL256:
 4534              	.L208:
 4535              		.loc 1 717 1 view .LVU1183
 4536              		.align	2
 4537              	.L207:
 4538 1548 0C030000 		.word	.LC20
 4539 154c 00000000 		.word	.LANCHOR1
 4540 1550 00000000 		.word	g_dpy
 4541              		.cfi_endproc
 4542              	.LFE80:
 4544              		.align	2
 4545              		.global	armwave_grab_xid
 4546              		.syntax unified
 4547              		.arm
 4548              		.fpu vfp
 4550              	armwave_grab_xid:
 4551              	.LVL257:
 4552              	.LFB81:
 718:armwave.c     **** 
 719:armwave.c     **** /*
 720:armwave.c     ****  * Grab a given XWindow by ID.
 721:armwave.c     ****  */
 722:armwave.c     **** void armwave_grab_xid(int id)
 723:armwave.c     **** {
 4553              		.loc 1 723 1 is_stmt 1 view -0
 4554              		.cfi_startproc
 4555              		@ args = 0, pretend = 0, frame = 0
 4556              		@ frame_needed = 0, uses_anonymous_args = 0
 724:armwave.c     ****     XEvent event;
 4557              		.loc 1 724 5 view .LVU1185
 725:armwave.c     ****     
 726:armwave.c     ****     if(g_window != 0) {
 4558              		.loc 1 726 5 view .LVU1186
 4559              	@ armwave.c:723: {
 723:armwave.c     ****     XEvent event;
 4560              		.loc 1 723 1 is_stmt 0 view .LVU1187
 4561 1554 70402DE9 		push	{r4, r5, r6, lr}	@
 4562              		.cfi_def_cfa_offset 16
 4563              		.cfi_offset 4, -16
 4564              		.cfi_offset 5, -12
 4565              		.cfi_offset 6, -8
 4566              		.cfi_offset 14, -4
 4567              	@ armwave.c:723: {
 723:armwave.c     ****     XEvent event;
 4568              		.loc 1 723 1 view .LVU1188
 4569 1558 0060A0E1 		mov	r6, r0	@ id, id
 4570              	@ armwave.c:726:     if(g_window != 0) {
 4571              		.loc 1 726 17 view .LVU1189
 4572 155c 6C409FE5 		ldr	r4, .L216	@ tmp141,
 4573 1560 6C509FE5 		ldr	r5, .L216+4	@ tmp140,
 4574 1564 001094E5 		ldr	r1, [r4]	@ g_window.41_1, g_window
 4575 1568 000095E5 		ldr	r0, [r5]	@ pretmp_22, g_dpy
 4576              	.LVL258:
 4577              	@ armwave.c:726:     if(g_window != 0) {
 4578              		.loc 1 726 7 view .LVU1190
 4579 156c 000051E3 		cmp	r1, #0	@ g_window.41_1,
 4580 1570 1300001A 		bne	.L215		@,
 4581              	.L210:
 727:armwave.c     ****         XUnmapWindow(g_dpy, g_window);
 728:armwave.c     ****     }
 729:armwave.c     ****     
 730:armwave.c     ****     g_window = id;
 4582              		.loc 1 730 5 is_stmt 1 view .LVU1191
 4583              	@ armwave.c:732:     XStoreName(g_dpy, g_window, "ArmWave Render Buffer");
 731:armwave.c     ****     
 732:armwave.c     ****     XStoreName(g_dpy, g_window, "ArmWave Render Buffer");
 4584              		.loc 1 732 5 is_stmt 0 view .LVU1192
 4585 1574 0610A0E1 		mov	r1, r6	@, id
 4586 1578 58209FE5 		ldr	r2, .L216+8	@,
 4587              	@ armwave.c:730:     g_window = id;
 730:armwave.c     ****     
 4588              		.loc 1 730 14 view .LVU1193
 4589 157c 006084E5 		str	r6, [r4]	@ id, g_window
 4590              		.loc 1 732 5 is_stmt 1 view .LVU1194
 4591 1580 FEFFFFEB 		bl	XStoreName		@
 4592              	.LVL259:
 733:armwave.c     ****     XSetIconName(g_dpy, g_window, "ArmWave Render Buffer");
 4593              		.loc 1 733 5 view .LVU1195
 4594 1584 001094E5 		ldr	r1, [r4]	@, g_window
 4595 1588 48209FE5 		ldr	r2, .L216+8	@,
 4596 158c 000095E5 		ldr	r0, [r5]	@, g_dpy
 4597 1590 FEFFFFEB 		bl	XSetIconName		@
 4598              	.LVL260:
 734:armwave.c     ****     XSelectInput(g_dpy, g_window, StructureNotifyMask);
 4599              		.loc 1 734 5 view .LVU1196
 4600 1594 001094E5 		ldr	r1, [r4]	@, g_window
 4601 1598 0228A0E3 		mov	r2, #131072	@,
 4602 159c 000095E5 		ldr	r0, [r5]	@, g_dpy
 4603 15a0 FEFFFFEB 		bl	XSelectInput		@
 4604              	.LVL261:
 735:armwave.c     ****     
 736:armwave.c     ****     printf("Window done, mapping...\n");
 4605              		.loc 1 736 5 view .LVU1197
 4606 15a4 30009FE5 		ldr	r0, .L216+12	@,
 4607 15a8 FEFFFFEB 		bl	puts		@
 4608              	.LVL262:
 737:armwave.c     **** 
 738:armwave.c     **** #if 1	 
 739:armwave.c     ****     XMapWindow(g_dpy, g_window);
 4609              		.loc 1 739 5 view .LVU1198
 4610 15ac 001094E5 		ldr	r1, [r4]	@, g_window
 4611 15b0 000095E5 		ldr	r0, [r5]	@, g_dpy
 4612 15b4 FEFFFFEB 		bl	XMapWindow		@
 4613              	.LVL263:
 740:armwave.c     **** 
 741:armwave.c     **** #if 0    
 742:armwave.c     ****     do {
 743:armwave.c     ****         XNextEvent(g_dpy, &event);
 744:armwave.c     ****     }
 745:armwave.c     ****     while(event.type != MapNotify || event.xmap.event != g_window);
 746:armwave.c     **** #endif
 747:armwave.c     **** #endif
 748:armwave.c     **** 
 749:armwave.c     ****     printf("All done in window\n");
 4614              		.loc 1 749 5 view .LVU1199
 4615 15b8 20009FE5 		ldr	r0, .L216+16	@,
 4616              	@ armwave.c:750: }
 750:armwave.c     **** }
 4617              		.loc 1 750 1 is_stmt 0 view .LVU1200
 4618 15bc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 4619              		.cfi_remember_state
 4620              		.cfi_restore 14
 4621              		.cfi_restore 6
 4622              		.cfi_restore 5
 4623              		.cfi_restore 4
 4624              		.cfi_def_cfa_offset 0
 4625              	.LVL264:
 4626              	@ armwave.c:749:     printf("All done in window\n");
 749:armwave.c     **** }
 4627              		.loc 1 749 5 view .LVU1201
 4628 15c0 FEFFFFEA 		b	puts		@
 4629              	.LVL265:
 4630              	.L215:
 4631              		.cfi_restore_state
 727:armwave.c     ****     }
 4632              		.loc 1 727 9 is_stmt 1 view .LVU1202
 4633 15c4 FEFFFFEB 		bl	XUnmapWindow		@
 4634              	.LVL266:
 4635 15c8 000095E5 		ldr	r0, [r5]	@ pretmp_22, g_dpy
 4636 15cc E8FFFFEA 		b	.L210		@
 4637              	.L217:
 4638              		.align	2
 4639              	.L216:
 4640 15d0 00000000 		.word	.LANCHOR1
 4641 15d4 00000000 		.word	g_dpy
 4642 15d8 3C030000 		.word	.LC21
 4643 15dc 54030000 		.word	.LC22
 4644 15e0 6C030000 		.word	.LC23
 4645              		.cfi_endproc
 4646              	.LFE81:
 4648              		.align	2
 4649              		.global	armwave_create_xwindow
 4650              		.syntax unified
 4651              		.arm
 4652              		.fpu vfp
 4654              	armwave_create_xwindow:
 4655              	.LFB79:
 684:armwave.c     ****     Window window;
 4656              		.loc 1 684 1 view -0
 4657              		.cfi_startproc
 4658              		@ args = 0, pretend = 0, frame = 0
 4659              		@ frame_needed = 0, uses_anonymous_args = 0
 685:armwave.c     ****     unsigned long mask;
 4660              		.loc 1 685 5 view .LVU1204
 686:armwave.c     ****     
 4661              		.loc 1 686 5 view .LVU1205
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4662              		.loc 1 688 5 view .LVU1206
 4663              	@ armwave.c:684: {
 684:armwave.c     ****     Window window;
 4664              		.loc 1 684 1 is_stmt 0 view .LVU1207
 4665 15e4 30402DE9 		push	{r4, r5, lr}	@
 4666              		.cfi_def_cfa_offset 12
 4667              		.cfi_offset 4, -12
 4668              		.cfi_offset 5, -8
 4669              		.cfi_offset 14, -4
 4670              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4671              		.loc 1 688 23 view .LVU1208
 4672 15e8 0030A0E3 		mov	r3, #0	@,
 4673 15ec C4409FE5 		ldr	r4, .L220	@ tmp130,
 4674 15f0 C4509FE5 		ldr	r5, .L220+4	@ tmp131,
 4675              	@ armwave.c:684: {
 684:armwave.c     ****     Window window;
 4676              		.loc 1 684 1 view .LVU1209
 4677 15f4 24D04DE2 		sub	sp, sp, #36	@,,
 4678              		.cfi_def_cfa_offset 48
 4679              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4680              		.loc 1 688 23 view .LVU1210
 4681 15f8 000094E5 		ldr	r0, [r4]	@ g_dpy.30_1, g_dpy
 4682 15fc 002095E5 		ldr	r2, [r5]	@, g_vinfo.visual
 4683              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4684              		.loc 1 688 46 view .LVU1211
 4685 1600 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)g_dpy.30_1].default_screen, MEM[(struct  *)g_dpy.30_1].default
 4686              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4687              		.loc 1 688 23 view .LVU1212
 4688 1604 8CC090E5 		ldr	ip, [r0, #140]	@ MEM[(struct  *)g_dpy.30_1].screens, MEM[(struct  *)g_dpy.30_1].screens
 4689 1608 011181E0 		add	r1, r1, r1, lsl #2	@ tmp137, MEM[(struct  *)g_dpy.30_1].default_screen, MEM[(struct  *)g_dpy.3
 4690 160c 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp139, MEM[(struct  *)g_dpy.30_1].screens, tmp137,
 4691 1610 081091E5 		ldr	r1, [r1, #8]	@, _6->root
 4692 1614 FEFFFFEB 		bl	XCreateColormap		@
 4693              	.LVL267:
 4694              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4695              		.loc 1 695 14 view .LVU1213
 4696 1618 004094E5 		ldr	r4, [r4]	@ g_dpy.33_10, g_dpy
 4697 161c 00E095E5 		ldr	lr, [r5]	@ g_vinfo.visual, g_vinfo.visual
 4698              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4699              		.loc 1 688 21 view .LVU1214
 4700 1620 98C09FE5 		ldr	ip, .L220+8	@ tmp141,
 4701              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4702              		.loc 1 695 35 view .LVU1215
 4703 1624 843094E5 		ldr	r3, [r4, #132]	@ MEM[(struct  *)g_dpy.33_10].default_screen, MEM[(struct  *)g_dpy.33_10].defau
 4704              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4705              		.loc 1 695 14 view .LVU1216
 4706 1628 8C2094E5 		ldr	r2, [r4, #140]	@ MEM[(struct  *)g_dpy.33_10].screens, MEM[(struct  *)g_dpy.33_10].screens
 4707 162c 0C5095E5 		ldr	r5, [r5, #12]	@ g_vinfo.depth, g_vinfo.depth
 4708 1630 033183E0 		add	r3, r3, r3, lsl #2	@ tmp153, MEM[(struct  *)g_dpy.33_10].default_screen, MEM[(struct  *)g_dpy.
 4709 1634 033282E0 		add	r3, r2, r3, lsl #4	@ tmp155, MEM[(struct  *)g_dpy.33_10].screens, tmp153,
 4710 1638 84209FE5 		ldr	r2, .L220+12	@ tmp158,
 4711 163c 081093E5 		ldr	r1, [r3, #8]	@ _15->root, _15->root
 4712 1640 18208DE5 		str	r2, [sp, #24]	@ tmp158,
 4713 1644 0130A0E3 		mov	r3, #1	@ tmp161,
 4714 1648 1E2EA0E3 		mov	r2, #480	@ tmp165,
 4715 164c 14E08DE5 		str	lr, [sp, #20]	@ g_vinfo.visual,
 4716 1650 10308DE5 		str	r3, [sp, #16]	@ tmp161,
 4717              	@ armwave.c:690:     g_xswa.background_pixel = 0;
 690:armwave.c     ****     g_xswa.border_pixel = 0;
 4718              		.loc 1 690 29 view .LVU1217
 4719 1654 00E0A0E3 		mov	lr, #0	@ tmp145,
 4720              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4721              		.loc 1 695 14 view .LVU1218
 4722 1658 04208DE5 		str	r2, [sp, #4]	@ tmp165,
 4723 165c 0A3DA0E3 		mov	r3, #640	@ tmp166,
 4724              	@ armwave.c:689:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 689:armwave.c     ****     g_xswa.background_pixel = 0;
 4725              		.loc 1 689 23 view .LVU1219
 4726 1660 0A29A0E3 		mov	r2, #163840	@ tmp143,
 4727              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4728              		.loc 1 695 14 view .LVU1220
 4729 1664 1CC08DE5 		str	ip, [sp, #28]	@ tmp141,
 4730 1668 08E08DE5 		str	lr, [sp, #8]	@ tmp145,
 4731 166c 00308DE5 		str	r3, [sp]	@ tmp166,
 4732 1670 0C508DE5 		str	r5, [sp, #12]	@ g_vinfo.depth,
 4733 1674 0E30A0E1 		mov	r3, lr	@, tmp145
 4734              	@ armwave.c:689:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 689:armwave.c     ****     g_xswa.background_pixel = 0;
 4735              		.loc 1 689 23 view .LVU1221
 4736 1678 28208CE5 		str	r2, [ip, #40]	@ tmp143, g_xswa.event_mask
 4737              	@ armwave.c:690:     g_xswa.background_pixel = 0;
 690:armwave.c     ****     g_xswa.border_pixel = 0;
 4738              		.loc 1 690 29 view .LVU1222
 4739 167c 04E08CE5 		str	lr, [ip, #4]	@ tmp145, g_xswa.background_pixel
 4740              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4741              		.loc 1 695 14 view .LVU1223
 4742 1680 0E20A0E1 		mov	r2, lr	@, tmp3
 4743              	@ armwave.c:691:     g_xswa.border_pixel = 0;
 691:armwave.c     ****     
 4744              		.loc 1 691 25 view .LVU1224
 4745 1684 0CE08CE5 		str	lr, [ip, #12]	@ tmp145, g_xswa.border_pixel
 4746              	@ armwave.c:688:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 688:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 4747              		.loc 1 688 21 view .LVU1225
 4748 1688 34008CE5 		str	r0, [ip, #52]	@, g_xswa.colormap
 689:armwave.c     ****     g_xswa.background_pixel = 0;
 4749              		.loc 1 689 5 is_stmt 1 view .LVU1226
 690:armwave.c     ****     g_xswa.border_pixel = 0;
 4750              		.loc 1 690 5 view .LVU1227
 691:armwave.c     ****     
 4751              		.loc 1 691 5 view .LVU1228
 693:armwave.c     ****     
 4752              		.loc 1 693 5 view .LVU1229
 4753              	.LVL268:
 695:armwave.c     **** 			 0, 0,
 4754              		.loc 1 695 5 view .LVU1230
 4755              	@ armwave.c:695:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 695:armwave.c     **** 			 0, 0,
 4756              		.loc 1 695 14 is_stmt 0 view .LVU1231
 4757 168c 0400A0E1 		mov	r0, r4	@, g_dpy.33_10
 4758 1690 FEFFFFEB 		bl	XCreateWindow		@
 4759              	.LVL269:
 4760 1694 0040A0E1 		mov	r4, r0	@ window,
 4761              	.LVL270:
 704:armwave.c     ****     
 4762              		.loc 1 704 5 is_stmt 1 view .LVU1232
 4763 1698 0020A0E1 		mov	r2, r0	@, window
 4764 169c 0010A0E1 		mov	r1, r0	@, window
 4765 16a0 20009FE5 		ldr	r0, .L220+16	@,
 4766              	.LVL271:
 704:armwave.c     ****     
 4767              		.loc 1 704 5 is_stmt 0 view .LVU1233
 4768 16a4 FEFFFFEB 		bl	printf		@
 4769              	.LVL272:
 706:armwave.c     **** }
 4770              		.loc 1 706 5 is_stmt 1 view .LVU1234
 4771 16a8 0400A0E1 		mov	r0, r4	@, window
 4772              	@ armwave.c:707: }
 707:armwave.c     **** 
 4773              		.loc 1 707 1 is_stmt 0 view .LVU1235
 4774 16ac 24D08DE2 		add	sp, sp, #36	@,,
 4775              		.cfi_def_cfa_offset 12
 4776              		@ sp needed	@
 4777 16b0 3040BDE8 		pop	{r4, r5, lr}	@
 4778              		.cfi_restore 14
 4779              		.cfi_restore 5
 4780              		.cfi_restore 4
 4781              		.cfi_def_cfa_offset 0
 4782              	.LVL273:
 4783              	@ armwave.c:706:     armwave_grab_xid(window);
 706:armwave.c     **** }
 4784              		.loc 1 706 5 view .LVU1236
 4785 16b4 FEFFFFEA 		b	armwave_grab_xid		@
 4786              	.LVL274:
 4787              	.L221:
 706:armwave.c     **** }
 4788              		.loc 1 706 5 view .LVU1237
 4789              		.align	2
 4790              	.L220:
 4791 16b8 00000000 		.word	g_dpy
 4792 16bc 00000000 		.word	g_vinfo
 4793 16c0 00000000 		.word	g_xswa
 4794 16c4 0A280000 		.word	10250
 4795 16c8 80030000 		.word	.LC24
 4796              		.cfi_endproc
 4797              	.LFE79:
 4799              		.align	2
 4800              		.global	armwave_init_x11
 4801              		.syntax unified
 4802              		.arm
 4803              		.fpu vfp
 4805              	armwave_init_x11:
 4806              	.LFB82:
 751:armwave.c     **** 
 752:armwave.c     **** /*
 753:armwave.c     ****  * Initialise the Xvideo and MITSHM extension.
 754:armwave.c     ****  */
 755:armwave.c     **** void armwave_init_x11()
 756:armwave.c     **** {
 4807              		.loc 1 756 1 is_stmt 1 view -0
 4808              		.cfi_startproc
 4809              		@ args = 0, pretend = 0, frame = 0
 4810              		@ frame_needed = 0, uses_anonymous_args = 0
 757:armwave.c     ****     int screen;
 4811              		.loc 1 757 5 view .LVU1239
 758:armwave.c     ****     
 759:armwave.c     ****     printf("armwave: initialising for X11...\n");
 4812              		.loc 1 759 5 view .LVU1240
 4813              	@ armwave.c:756: {
 756:armwave.c     ****     int screen;
 4814              		.loc 1 756 1 is_stmt 0 view .LVU1241
 4815 16cc 04E02DE5 		str	lr, [sp, #-4]!	@,
 4816              		.cfi_def_cfa_offset 4
 4817              		.cfi_offset 14, -4
 4818 16d0 0CD04DE2 		sub	sp, sp, #12	@,,
 4819              		.cfi_def_cfa_offset 16
 4820              	@ armwave.c:759:     printf("armwave: initialising for X11...\n");
 4821              		.loc 1 759 5 view .LVU1242
 4822 16d4 68009FE5 		ldr	r0, .L227	@,
 4823 16d8 FEFFFFEB 		bl	puts		@
 4824              	.LVL275:
 760:armwave.c     ****         
 761:armwave.c     ****     /*
 762:armwave.c     ****      * Try to open the display.
 763:armwave.c     ****      */
 764:armwave.c     ****     g_dpy = XOpenDisplay(NULL);
 4825              		.loc 1 764 5 is_stmt 1 view .LVU1243
 4826              	@ armwave.c:764:     g_dpy = XOpenDisplay(NULL);
 4827              		.loc 1 764 13 is_stmt 0 view .LVU1244
 4828 16dc 0000A0E3 		mov	r0, #0	@,
 4829 16e0 FEFFFFEB 		bl	XOpenDisplay		@
 4830              	.LVL276:
 4831              	@ armwave.c:764:     g_dpy = XOpenDisplay(NULL);
 4832              		.loc 1 764 11 view .LVU1245
 4833 16e4 5C209FE5 		ldr	r2, .L227+4	@ tmp114,
 4834              	@ armwave.c:765:     if (g_dpy == NULL) {
 765:armwave.c     ****     if (g_dpy == NULL) {
 4835              		.loc 1 765 8 view .LVU1246
 4836 16e8 000050E3 		cmp	r0, #0	@ _1,
 4837              	@ armwave.c:764:     g_dpy = XOpenDisplay(NULL);
 764:armwave.c     ****     if (g_dpy == NULL) {
 4838              		.loc 1 764 11 view .LVU1247
 4839 16ec 000082E5 		str	r0, [r2]	@ _1, g_dpy
 4840              		.loc 1 765 5 is_stmt 1 view .LVU1248
 4841              	@ armwave.c:765:     if (g_dpy == NULL) {
 4842              		.loc 1 765 8 is_stmt 0 view .LVU1249
 4843 16f0 0B00000A 		beq	.L226		@,
 766:armwave.c     ****         printf("Error: Fatal X11: Cannot open display.\n");
 767:armwave.c     ****         exit (-1);
 768:armwave.c     ****     }
 769:armwave.c     ****     
 770:armwave.c     ****     screen = DefaultScreen(g_dpy);
 4844              		.loc 1 770 5 is_stmt 1 view .LVU1250
 4845              	.LVL277:
 771:armwave.c     ****     
 772:armwave.c     ****     /*
 773:armwave.c     ****      * Check the display supports 24-bit TrueColor, if not then abort early.
 774:armwave.c     ****      */
 775:armwave.c     ****     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4846              		.loc 1 775 5 view .LVU1251
 4847              	@ armwave.c:775:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4848              		.loc 1 775 9 is_stmt 0 view .LVU1252
 4849 16f4 50309FE5 		ldr	r3, .L227+8	@ tmp117,
 4850 16f8 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)_1].default_screen, MEM[(struct  *)_1].default_screen
 4851 16fc 1820A0E3 		mov	r2, #24	@,
 4852 1700 00308DE5 		str	r3, [sp]	@ tmp117,
 4853              	.LVL278:
 4854              		.loc 1 775 9 view .LVU1253
 4855 1704 0430A0E3 		mov	r3, #4	@,
 4856 1708 FEFFFFEB 		bl	XMatchVisualInfo		@
 4857              	.LVL279:
 4858              	@ armwave.c:775:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4859              		.loc 1 775 8 view .LVU1254
 4860 170c 000050E3 		cmp	r0, #0	@,
 4861 1710 0700000A 		beq	.L224		@,
 776:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4862              		.loc 1 776 9 is_stmt 1 view .LVU1255
 4863 1714 34009FE5 		ldr	r0, .L227+12	@,
 4864              	@ armwave.c:781: }
 777:armwave.c     ****     } else {
 778:armwave.c     ****         printf("Error: Fatal X11: not supported 24-bit TrueColor display.\n");
 779:armwave.c     ****         exit(-1);
 780:armwave.c     ****     }
 781:armwave.c     **** }
 4865              		.loc 1 781 1 is_stmt 0 view .LVU1256
 4866 1718 0CD08DE2 		add	sp, sp, #12	@,,
 4867              		.cfi_remember_state
 4868              		.cfi_def_cfa_offset 4
 4869              		@ sp needed	@
 4870 171c 04E09DE4 		ldr	lr, [sp], #4	@,
 4871              		.cfi_restore 14
 4872              		.cfi_def_cfa_offset 0
 4873              	@ armwave.c:776:         printf("Found 24bit TrueColor.\n");
 776:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4874              		.loc 1 776 9 view .LVU1257
 4875 1720 FEFFFFEA 		b	puts		@
 4876              	.LVL280:
 4877              	.L226:
 4878              		.cfi_restore_state
 766:armwave.c     ****         exit (-1);
 4879              		.loc 1 766 9 is_stmt 1 view .LVU1258
 4880 1724 28009FE5 		ldr	r0, .L227+16	@,
 4881 1728 FEFFFFEB 		bl	puts		@
 4882              	.LVL281:
 767:armwave.c     ****     }
 4883              		.loc 1 767 9 view .LVU1259
 4884 172c 0000E0E3 		mvn	r0, #0	@,
 4885 1730 FEFFFFEB 		bl	exit		@
 4886              	.LVL282:
 4887              	.L224:
 778:armwave.c     ****         exit(-1);
 4888              		.loc 1 778 9 view .LVU1260
 4889 1734 1C009FE5 		ldr	r0, .L227+20	@,
 4890 1738 FEFFFFEB 		bl	puts		@
 4891              	.LVL283:
 779:armwave.c     ****     }
 4892              		.loc 1 779 9 view .LVU1261
 4893 173c 0000E0E3 		mvn	r0, #0	@,
 4894 1740 FEFFFFEB 		bl	exit		@
 4895              	.LVL284:
 4896              	.L228:
 4897              		.align	2
 4898              	.L227:
 4899 1744 AC030000 		.word	.LC25
 4900 1748 00000000 		.word	g_dpy
 4901 174c 00000000 		.word	g_vinfo
 4902 1750 F8030000 		.word	.LC27
 4903 1754 D0030000 		.word	.LC26
 4904 1758 10040000 		.word	.LC28
 4905              		.cfi_endproc
 4906              	.LFE82:
 4908              		.align	2
 4909              		.global	armwave_init_xvimage_shared
 4910              		.syntax unified
 4911              		.arm
 4912              		.fpu vfp
 4914              	armwave_init_xvimage_shared:
 4915              	.LVL285:
 4916              	.LFB83:
 782:armwave.c     **** 
 783:armwave.c     **** /*
 784:armwave.c     ****  * Create the shared memory buffer for the XvImage.
 785:armwave.c     ****  */
 786:armwave.c     **** void armwave_init_xvimage_shared(int tex_width, int tex_height)
 787:armwave.c     **** {
 4917              		.loc 1 787 1 view -0
 4918              		.cfi_startproc
 4919              		@ args = 0, pretend = 0, frame = 120
 4920              		@ frame_needed = 0, uses_anonymous_args = 0
 788:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4921              		.loc 1 788 5 view .LVU1263
 789:armwave.c     ****     int	p_num_adaptors, ret, n;
 4922              		.loc 1 789 5 view .LVU1264
 790:armwave.c     ****     XGCValues gc_values;
 4923              		.loc 1 790 5 view .LVU1265
 791:armwave.c     ****     XvAdaptorInfo *ai;
 4924              		.loc 1 791 5 view .LVU1266
 792:armwave.c     ****     
 793:armwave.c     ****     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 4925              		.loc 1 793 5 view .LVU1267
 4926              	@ armwave.c:787: {
 787:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4927              		.loc 1 787 1 is_stmt 0 view .LVU1268
 4928 175c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 4929              		.cfi_def_cfa_offset 32
 4930              		.cfi_offset 4, -32
 4931              		.cfi_offset 5, -28
 4932              		.cfi_offset 6, -24
 4933              		.cfi_offset 7, -20
 4934              		.cfi_offset 8, -16
 4935              		.cfi_offset 9, -12
 4936              		.cfi_offset 10, -8
 4937              		.cfi_offset 14, -4
 4938              	@ armwave.c:793:     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 4939              		.loc 1 793 5 view .LVU1269
 4940 1760 0120A0E1 		mov	r2, r1	@, tex_height
 4941              	@ armwave.c:798:     if(!XShmQueryExtension(g_dpy)) {
 794:armwave.c     ****     
 795:armwave.c     ****     /*
 796:armwave.c     ****      * Query the MITSHM extension - check it is available.
 797:armwave.c     ****      */
 798:armwave.c     ****     if(!XShmQueryExtension(g_dpy)) {
 4942              		.loc 1 798 9 view .LVU1270
 4943 1764 2C729FE5 		ldr	r7, .L252	@ tmp252,
 4944              	@ armwave.c:787: {
 787:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4945              		.loc 1 787 1 view .LVU1271
 4946 1768 88D04DE2 		sub	sp, sp, #136	@,,
 4947              		.cfi_def_cfa_offset 168
 4948              	@ armwave.c:787: {
 787:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4949              		.loc 1 787 1 view .LVU1272
 4950 176c 0060A0E1 		mov	r6, r0	@ tex_width, tex_width
 4951 1770 01A0A0E1 		mov	r10, r1	@ tex_height, tex_height
 4952              	@ armwave.c:793:     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 793:armwave.c     ****     
 4953              		.loc 1 793 5 view .LVU1273
 4954 1774 0010A0E1 		mov	r1, r0	@, tex_width
 4955              	.LVL286:
 793:armwave.c     ****     
 4956              		.loc 1 793 5 view .LVU1274
 4957 1778 1C029FE5 		ldr	r0, .L252+4	@,
 4958              	.LVL287:
 793:armwave.c     ****     
 4959              		.loc 1 793 5 view .LVU1275
 4960 177c FEFFFFEB 		bl	printf		@
 4961              	.LVL288:
 4962              		.loc 1 798 5 is_stmt 1 view .LVU1276
 4963              	@ armwave.c:798:     if(!XShmQueryExtension(g_dpy)) {
 4964              		.loc 1 798 9 is_stmt 0 view .LVU1277
 4965 1780 000097E5 		ldr	r0, [r7]	@, g_dpy
 4966 1784 FEFFFFEB 		bl	XShmQueryExtension		@
 4967              	.LVL289:
 4968              	@ armwave.c:798:     if(!XShmQueryExtension(g_dpy)) {
 4969              		.loc 1 798 7 view .LVU1278
 4970 1788 000050E3 		cmp	r0, #0	@,
 4971 178c 6A00000A 		beq	.L247		@,
 799:armwave.c     ****         printf("Error: Fatal X11: Shared memory extension not available or failed to allocate share
 800:armwave.c     ****         exit(-1);
 801:armwave.c     ****     }
 802:armwave.c     ****     
 803:armwave.c     ****     XShmGetEventBase(g_dpy);  // What does this do? 
 4972              		.loc 1 803 5 is_stmt 1 view .LVU1279
 4973 1790 000097E5 		ldr	r0, [r7]	@, g_dpy
 4974 1794 FEFFFFEB 		bl	XShmGetEventBase		@
 4975              	.LVL290:
 804:armwave.c     ****     
 805:armwave.c     ****     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4976              		.loc 1 805 5 view .LVU1280
 4977              	@ armwave.c:805:     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4978              		.loc 1 805 11 is_stmt 0 view .LVU1281
 4979 1798 20208DE2 		add	r2, sp, #32	@ tmp177,,
 4980 179c 1C308DE2 		add	r3, sp, #28	@ tmp178,,
 4981 17a0 04208DE5 		str	r2, [sp, #4]	@ tmp177,
 4982 17a4 00308DE5 		str	r3, [sp]	@ tmp178,
 4983 17a8 14208DE2 		add	r2, sp, #20	@,,
 4984 17ac 18308DE2 		add	r3, sp, #24	@,,
 4985 17b0 10108DE2 		add	r1, sp, #16	@,,
 4986 17b4 000097E5 		ldr	r0, [r7]	@, g_dpy
 4987 17b8 FEFFFFEB 		bl	XvQueryExtension		@
 4988              	.LVL291:
 806:armwave.c     **** 			 &p_event_base, &p_error_base);
 807:armwave.c     ****     if(ret != Success) {
 4989              		.loc 1 807 5 is_stmt 1 view .LVU1282
 4990              	@ armwave.c:807:     if(ret != Success) {
 4991              		.loc 1 807 7 is_stmt 0 view .LVU1283
 4992 17bc 000050E3 		cmp	r0, #0	@ ret
 4993              		.loc 1 807 7 view .LVU1284
 4994 17c0 6F00001A 		bne	.L248		@,
 808:armwave.c     ****         printf("Error: Fatal X11: Unable to find XVideo extension (%d).  Is it configured correctly
 809:armwave.c     ****         exit(-1);
 810:armwave.c     ****     }
 811:armwave.c     ****     
 812:armwave.c     ****     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4995              		.loc 1 812 5 is_stmt 1 view .LVU1285
 4996              	@ armwave.c:812:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4997              		.loc 1 812 11 is_stmt 0 view .LVU1286
 4998 17c4 002097E5 		ldr	r2, [r7]	@ g_dpy.59_5, g_dpy
 4999 17c8 28308DE2 		add	r3, sp, #40	@,,
 5000 17cc 0200A0E1 		mov	r0, r2	@, g_dpy.59_5
 5001              	.LVL292:
 5002              	@ armwave.c:812:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 5003              		.loc 1 812 34 view .LVU1287
 5004 17d0 841092E5 		ldr	r1, [r2, #132]	@ MEM[(struct  *)g_dpy.59_5].default_screen, MEM[(struct  *)g_dpy.59_5].default
 5005              	@ armwave.c:812:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 5006              		.loc 1 812 11 view .LVU1288
 5007 17d4 8CC092E5 		ldr	ip, [r2, #140]	@ MEM[(struct  *)g_dpy.59_5].screens, MEM[(struct  *)g_dpy.59_5].screens
 5008 17d8 24208DE2 		add	r2, sp, #36	@,,
 5009 17dc 011181E0 		add	r1, r1, r1, lsl #2	@ tmp187, MEM[(struct  *)g_dpy.59_5].default_screen, MEM[(struct  *)g_dpy.5
 5010 17e0 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp189, MEM[(struct  *)g_dpy.59_5].screens, tmp187,
 5011 17e4 081091E5 		ldr	r1, [r1, #8]	@, _10->root
 5012 17e8 FEFFFFEB 		bl	XvQueryAdaptors		@
 5013              	.LVL293:
 813:armwave.c     **** 			&p_num_adaptors, &ai);
 814:armwave.c     ****     
 815:armwave.c     ****     if(ret != Success) {
 5014              		.loc 1 815 5 is_stmt 1 view .LVU1289
 5015              	@ armwave.c:815:     if(ret != Success) {
 5016              		.loc 1 815 7 is_stmt 0 view .LVU1290
 5017 17ec 004050E2 		subs	r4, r0, #0	@ n,
 5018 17f0 5E00001A 		bne	.L249		@,
 816:armwave.c     ****         printf("Error: Fatal X11: Unable to query XVideo extension (%d).  Is it configured correctl
 817:armwave.c     ****         exit(-1);
 818:armwave.c     ****     }
 819:armwave.c     ****     
 820:armwave.c     ****     // Use the last port available
 821:armwave.c     ****     g_xv_port = ai[p_num_adaptors - 1].base_id;
 5019              		.loc 1 821 5 is_stmt 1 view .LVU1291
 5020              	@ armwave.c:821:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 5021              		.loc 1 821 19 is_stmt 0 view .LVU1292
 5022 17f4 24109DE5 		ldr	r1, [sp, #36]	@ p_num_adaptors.63_13, p_num_adaptors
 5023              	@ armwave.c:821:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 5024              		.loc 1 821 39 view .LVU1293
 5025 17f8 28309DE5 		ldr	r3, [sp, #40]	@ ai, ai
 5026              	@ armwave.c:821:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 5027              		.loc 1 821 15 view .LVU1294
 5028 17fc 9C919FE5 		ldr	r9, .L252+8	@ tmp251,
 5029              	@ armwave.c:821:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 5030              		.loc 1 821 39 view .LVU1295
 5031 1800 812161E0 		rsb	r2, r1, r1, lsl #3	@ tmp195, p_num_adaptors.63_13, p_num_adaptors.63_13,
 5032 1804 023183E0 		add	r3, r3, r2, lsl #2	@ tmp197, ai, tmp195,
 5033 1808 1C5013E5 		ldr	r5, [r3, #-28]	@ _19, _17->base_id
 5034              	@ armwave.c:822:     if(g_xv_port == -1) {
 822:armwave.c     ****     if(g_xv_port == -1) {
 5035              		.loc 1 822 7 view .LVU1296
 5036 180c 010075E3 		cmn	r5, #1	@ _19,
 5037              	@ armwave.c:821:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 821:armwave.c     ****     if(g_xv_port == -1) {
 5038              		.loc 1 821 15 view .LVU1297
 5039 1810 005089E5 		str	r5, [r9]	@ _19, g_xv_port
 5040              		.loc 1 822 5 is_stmt 1 view .LVU1298
 5041              	@ armwave.c:822:     if(g_xv_port == -1) {
 5042              		.loc 1 822 7 is_stmt 0 view .LVU1299
 5043 1814 5000000A 		beq	.L250		@,
 823:armwave.c     ****         printf("Error: Fatal X11: Unable to use the port %d\n\n", p_num_adaptors - 1);
 824:armwave.c     ****         exit(-1);
 825:armwave.c     ****     }
 826:armwave.c     ****     
 827:armwave.c     ****     /*
 828:armwave.c     ****      * Create the shared image and attach to it.
 829:armwave.c     ****      */
 830:armwave.c     ****     printf("Attaching XvShm...\n");
 5044              		.loc 1 830 5 is_stmt 1 view .LVU1300
 5045              	@ armwave.c:832:     if(g_yuv_image != NULL) {
 831:armwave.c     ****     
 832:armwave.c     ****     if(g_yuv_image != NULL) {
 5046              		.loc 1 832 20 is_stmt 0 view .LVU1301
 5047 1818 84519FE5 		ldr	r5, .L252+12	@ tmp250,
 5048              	@ armwave.c:830:     printf("Attaching XvShm...\n");
 830:armwave.c     ****     
 5049              		.loc 1 830 5 view .LVU1302
 5050 181c 84019FE5 		ldr	r0, .L252+16	@,
 5051              	.LVL294:
 830:armwave.c     ****     
 5052              		.loc 1 830 5 view .LVU1303
 5053 1820 FEFFFFEB 		bl	puts		@
 5054              	.LVL295:
 5055              		.loc 1 832 5 is_stmt 1 view .LVU1304
 5056              	@ armwave.c:832:     if(g_yuv_image != NULL) {
 5057              		.loc 1 832 20 is_stmt 0 view .LVU1305
 5058 1824 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.67_21, g_yuv_image
 5059              	@ armwave.c:832:     if(g_yuv_image != NULL) {
 5060              		.loc 1 832 7 view .LVU1306
 5061 1828 000050E3 		cmp	r0, #0	@ g_yuv_image.67_21,
 5062 182c 0100000A 		beq	.L234		@,
 833:armwave.c     ****         // Unsure if this is reasonable
 834:armwave.c     ****         XFree(g_yuv_image);
 5063              		.loc 1 834 9 is_stmt 1 view .LVU1307
 5064 1830 FEFFFFEB 		bl	XFree		@
 5065              	.LVL296:
 835:armwave.c     ****         g_yuv_image = NULL;
 5066              		.loc 1 835 9 view .LVU1308
 5067              	@ armwave.c:835:         g_yuv_image = NULL;
 5068              		.loc 1 835 21 is_stmt 0 view .LVU1309
 5069 1834 044085E5 		str	r4, [r5, #4]	@ n, g_yuv_image
 5070              	.L234:
 836:armwave.c     ****     }
 837:armwave.c     ****     
 838:armwave.c     ****     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_width, tex_height, &
 5071              		.loc 1 838 5 is_stmt 1 view .LVU1310
 5072              	@ armwave.c:838:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 5073              		.loc 1 838 19 is_stmt 0 view .LVU1311
 5074 1838 6C819FE5 		ldr	r8, .L252+20	@ tmp249,
 5075 183c 40048DE8 		stm	sp, {r6, r10}	@,,
 5076 1840 0030A0E3 		mov	r3, #0	@,
 5077 1844 64219FE5 		ldr	r2, .L252+24	@,
 5078 1848 001099E5 		ldr	r1, [r9]	@, g_xv_port
 5079 184c 08808DE5 		str	r8, [sp, #8]	@ tmp249,
 5080 1850 000097E5 		ldr	r0, [r7]	@, g_dpy
 5081 1854 FEFFFFEB 		bl	XvShmCreateImage		@
 5082              	.LVL297:
 5083              	@ armwave.c:839:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 839:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 5084              		.loc 1 839 27 view .LVU1312
 5085 1858 54219FE5 		ldr	r2, .L252+28	@,
 5086              	@ armwave.c:838:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 838:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 5087              		.loc 1 838 19 view .LVU1313
 5088 185c 0030A0E1 		mov	r3, r0	@ _25,
 5089              	@ armwave.c:839:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 5090              		.loc 1 839 27 view .LVU1314
 5091 1860 0C1090E5 		ldr	r1, [r0, #12]	@, _25->data_size
 5092 1864 0000A0E3 		mov	r0, #0	@,
 5093              	@ armwave.c:838:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 838:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 5094              		.loc 1 838 17 view .LVU1315
 5095 1868 043085E5 		str	r3, [r5, #4]	@ _25, g_yuv_image
 5096              		.loc 1 839 5 is_stmt 1 view .LVU1316
 5097              	@ armwave.c:839:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 5098              		.loc 1 839 27 is_stmt 0 view .LVU1317
 5099 186c FEFFFFEB 		bl	shmget		@
 5100              	.LVL298:
 5101              	@ armwave.c:840:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 840:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 5102              		.loc 1 840 49 view .LVU1318
 5103 1870 0020A0E3 		mov	r2, #0	@,
 5104 1874 0210A0E1 		mov	r1, r2	@,
 5105              	@ armwave.c:840:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 5106              		.loc 1 840 40 view .LVU1319
 5107 1878 046095E5 		ldr	r6, [r5, #4]	@ g_yuv_image.73_29, g_yuv_image
 5108              	.LVL299:
 5109              	@ armwave.c:839:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 839:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 5110              		.loc 1 839 25 view .LVU1320
 5111 187c 040088E5 		str	r0, [r8, #4]	@, g_yuv_shminfo.shmid
 5112              		.loc 1 840 5 is_stmt 1 view .LVU1321
 5113              	@ armwave.c:840:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 5114              		.loc 1 840 49 is_stmt 0 view .LVU1322
 5115 1880 FEFFFFEB 		bl	shmat		@
 5116              	.LVL300:
 5117              	@ armwave.c:843:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 841:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 842:armwave.c     ****     
 843:armwave.c     ****     for(n = 0; n < g_yuv_image->num_planes; n++) {
 5118              		.loc 1 843 31 view .LVU1323
 5119 1884 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.78_39, g_yuv_image
 5120              	@ armwave.c:841:     g_yuv_shminfo.readOnly = False;
 841:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 5121              		.loc 1 841 28 view .LVU1324
 5122 1888 0020A0E3 		mov	r2, #0	@ tmp219,
 5123 188c 0C2088E5 		str	r2, [r8, #12]	@ tmp219, g_yuv_shminfo.readOnly
 5124              	@ armwave.c:843:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 5125              		.loc 1 843 5 view .LVU1325
 5126 1890 101093E5 		ldr	r1, [r3, #16]	@ g_yuv_image.78_105->num_planes, g_yuv_image.78_105->num_planes
 5127 1894 020051E1 		cmp	r1, r2	@ g_yuv_image.78_105->num_planes,
 5128              	@ armwave.c:840:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 840:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 5129              		.loc 1 840 47 view .LVU1326
 5130 1898 1C0086E5 		str	r0, [r6, #28]	@ _30, g_yuv_image.73_29->data
 5131              	@ armwave.c:840:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 840:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 5132              		.loc 1 840 27 view .LVU1327
 5133 189c 080088E5 		str	r0, [r8, #8]	@ _30, g_yuv_shminfo.shmaddr
 841:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 5134              		.loc 1 841 5 is_stmt 1 view .LVU1328
 5135              		.loc 1 843 5 view .LVU1329
 5136              	.LVL301:
 5137              		.loc 1 843 5 is_stmt 0 view .LVU1330
 5138 18a0 0C0000DA 		ble	.L235		@,
 5139              	@ armwave.c:844:         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[
 844:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 5140              		.loc 1 844 9 view .LVU1331
 5141 18a4 0C619FE5 		ldr	r6, .L252+32	@ tmp253,
 5142              	.LVL302:
 5143              	.L236:
 5144              		.loc 1 844 9 is_stmt 1 discriminator 3 view .LVU1332
 5145 18a8 140093E5 		ldr	r0, [r3, #20]	@ g_yuv_image.78_104->pitches, g_yuv_image.78_104->pitches
 5146 18ac 182093E5 		ldr	r2, [r3, #24]	@ g_yuv_image.78_104->offsets, g_yuv_image.78_104->offsets
 5147 18b0 0410A0E1 		mov	r1, r4	@, n
 5148 18b4 043190E7 		ldr	r3, [r0, r4, lsl #2]	@, *_37
 5149 18b8 042192E7 		ldr	r2, [r2, r4, lsl #2]	@, *_34
 5150 18bc 0600A0E1 		mov	r0, r6	@, tmp253
 5151 18c0 FEFFFFEB 		bl	printf		@
 5152              	.LVL303:
 5153              	@ armwave.c:843:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 843:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 5154              		.loc 1 843 31 is_stmt 0 discriminator 3 view .LVU1333
 5155 18c4 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.78_39, g_yuv_image
 5156              	@ armwave.c:843:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 843:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 5157              		.loc 1 843 46 discriminator 3 view .LVU1334
 5158 18c8 014084E2 		add	r4, r4, #1	@ n, n,
 5159              	.LVL304:
 5160              	@ armwave.c:843:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 843:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 5161              		.loc 1 843 5 discriminator 3 view .LVU1335
 5162 18cc 102093E5 		ldr	r2, [r3, #16]	@ g_yuv_image.78_39->num_planes, g_yuv_image.78_39->num_planes
 5163 18d0 040052E1 		cmp	r2, r4	@ g_yuv_image.78_39->num_planes, n
 5164 18d4 F3FFFFCA 		bgt	.L236		@,
 5165              	.LVL305:
 5166              	.L235:
 845:armwave.c     ****     }
 846:armwave.c     ****     
 847:armwave.c     ****     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 5167              		.loc 1 847 5 is_stmt 1 view .LVU1336
 5168              	@ armwave.c:847:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 5169              		.loc 1 847 9 is_stmt 0 view .LVU1337
 5170 18d8 CC109FE5 		ldr	r1, .L252+20	@,
 5171 18dc 000097E5 		ldr	r0, [r7]	@, g_dpy
 5172 18e0 FEFFFFEB 		bl	XShmAttach		@
 5173              	.LVL306:
 5174              	@ armwave.c:847:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 5175              		.loc 1 847 7 view .LVU1338
 5176 18e4 000050E3 		cmp	r0, #0	@,
 5177 18e8 1700000A 		beq	.L251		@,
 848:armwave.c     ****         printf("Error: Fatal X11: XShmAttached failed\n");
 849:armwave.c     ****         exit (-1);
 850:armwave.c     ****     }
 851:armwave.c     ****     
 852:armwave.c     ****     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_image->data_size, 
 5178              		.loc 1 852 5 is_stmt 1 view .LVU1339
 5179              	@ armwave.c:852:     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_i
 5180              		.loc 1 852 87 is_stmt 0 view .LVU1340
 5181 18ec 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.80_43, g_yuv_image
 5182              	@ armwave.c:852:     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_i
 5183              		.loc 1 852 5 view .LVU1341
 5184 18f0 003099E5 		ldr	r3, [r9]	@, g_xv_port
 5185 18f4 042098E5 		ldr	r2, [r8, #4]	@, g_yuv_shminfo.shmid
 5186 18f8 0C1090E5 		ldr	r1, [r0, #12]	@ g_yuv_image.80_43->data_size, g_yuv_image.80_43->data_size
 5187 18fc 00008DE5 		str	r0, [sp]	@ g_yuv_image.80_43,
 5188 1900 B4009FE5 		ldr	r0, .L252+36	@,
 5189 1904 FEFFFFEB 		bl	printf		@
 5190              	.LVL307:
 853:armwave.c     ****     
 854:armwave.c     ****     // Create the GC
 855:armwave.c     ****     if(g_gc != NULL) {
 5191              		.loc 1 855 5 is_stmt 1 view .LVU1342
 5192              	@ armwave.c:855:     if(g_gc != NULL) {
 5193              		.loc 1 855 13 is_stmt 0 view .LVU1343
 5194 1908 081095E5 		ldr	r1, [r5, #8]	@ g_gc.83_47, g_gc
 5195              	@ armwave.c:855:     if(g_gc != NULL) {
 5196              		.loc 1 855 7 view .LVU1344
 5197 190c 000051E3 		cmp	r1, #0	@ g_gc.83_47,
 5198 1910 0100000A 		beq	.L238		@,
 856:armwave.c     ****         XFreeGC(g_dpy, g_gc);
 5199              		.loc 1 856 9 is_stmt 1 view .LVU1345
 5200 1914 000097E5 		ldr	r0, [r7]	@, g_dpy
 5201 1918 FEFFFFEB 		bl	XFreeGC		@
 5202              	.LVL308:
 5203              	.L238:
 857:armwave.c     ****     }
 858:armwave.c     ****     
 859:armwave.c     ****     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 5204              		.loc 1 859 5 view .LVU1346
 5205              	@ armwave.c:859:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 5206              		.loc 1 859 12 is_stmt 0 view .LVU1347
 5207 191c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5208 1920 2C308DE2 		add	r3, sp, #44	@,,
 5209 1924 3020A0E3 		mov	r2, #48	@,
 5210 1928 001095E5 		ldr	r1, [r5]	@, g_window
 5211 192c FEFFFFEB 		bl	XCreateGC		@
 5212              	.LVL309:
 5213              	@ armwave.c:859:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 5214              		.loc 1 859 10 view .LVU1348
 5215 1930 080085E5 		str	r0, [r5, #8]	@, g_gc
 860:armwave.c     ****     gc_values.line_width = 1;
 5216              		.loc 1 860 5 is_stmt 1 view .LVU1349
 861:armwave.c     ****     gc_values.cap_style = CapNotLast;
 5217              		.loc 1 861 5 view .LVU1350
 5218              	@ armwave.c:862: }
 862:armwave.c     **** }
 5219              		.loc 1 862 1 is_stmt 0 view .LVU1351
 5220 1934 88D08DE2 		add	sp, sp, #136	@,,
 5221              		.cfi_remember_state
 5222              		.cfi_def_cfa_offset 32
 5223              		@ sp needed	@
 5224 1938 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 5225              	.LVL310:
 5226              	.L247:
 5227              		.cfi_restore_state
 799:armwave.c     ****         exit(-1);
 5228              		.loc 1 799 9 is_stmt 1 view .LVU1352
 5229 193c 7C009FE5 		ldr	r0, .L252+40	@,
 5230 1940 FEFFFFEB 		bl	puts		@
 5231              	.LVL311:
 800:armwave.c     ****     }
 5232              		.loc 1 800 9 view .LVU1353
 5233 1944 0000E0E3 		mvn	r0, #0	@,
 5234 1948 FEFFFFEB 		bl	exit		@
 5235              	.LVL312:
 5236              	.L251:
 848:armwave.c     ****         exit (-1);
 5237              		.loc 1 848 9 view .LVU1354
 5238 194c 70009FE5 		ldr	r0, .L252+44	@,
 5239 1950 FEFFFFEB 		bl	puts		@
 5240              	.LVL313:
 849:armwave.c     ****     }
 5241              		.loc 1 849 9 view .LVU1355
 5242 1954 0000E0E3 		mvn	r0, #0	@,
 5243 1958 FEFFFFEB 		bl	exit		@
 5244              	.LVL314:
 5245              	.L250:
 823:armwave.c     ****         exit(-1);
 5246              		.loc 1 823 9 view .LVU1356
 5247 195c 011041E2 		sub	r1, r1, #1	@, p_num_adaptors.63_13,
 5248 1960 60009FE5 		ldr	r0, .L252+48	@,
 5249              	.LVL315:
 823:armwave.c     ****         exit(-1);
 5250              		.loc 1 823 9 is_stmt 0 view .LVU1357
 5251 1964 FEFFFFEB 		bl	printf		@
 5252              	.LVL316:
 824:armwave.c     ****     }
 5253              		.loc 1 824 9 is_stmt 1 view .LVU1358
 5254 1968 0500A0E1 		mov	r0, r5	@, _19
 5255 196c FEFFFFEB 		bl	exit		@
 5256              	.LVL317:
 5257              	.L249:
 816:armwave.c     ****         exit(-1);
 5258              		.loc 1 816 9 view .LVU1359
 5259 1970 0410A0E1 		mov	r1, r4	@, n
 5260 1974 50009FE5 		ldr	r0, .L252+52	@,
 5261              	.LVL318:
 816:armwave.c     ****         exit(-1);
 5262              		.loc 1 816 9 is_stmt 0 view .LVU1360
 5263 1978 FEFFFFEB 		bl	printf		@
 5264              	.LVL319:
 817:armwave.c     ****     }
 5265              		.loc 1 817 9 is_stmt 1 view .LVU1361
 5266 197c 0000E0E3 		mvn	r0, #0	@,
 5267 1980 FEFFFFEB 		bl	exit		@
 5268              	.LVL320:
 5269              	.L248:
 808:armwave.c     ****         exit(-1);
 5270              		.loc 1 808 9 view .LVU1362
 5271 1984 0010A0E1 		mov	r1, r0	@, ret
 5272 1988 40009FE5 		ldr	r0, .L252+56	@,
 5273              	.LVL321:
 808:armwave.c     ****         exit(-1);
 5274              		.loc 1 808 9 is_stmt 0 view .LVU1363
 5275 198c FEFFFFEB 		bl	printf		@
 5276              	.LVL322:
 809:armwave.c     ****     }
 5277              		.loc 1 809 9 is_stmt 1 view .LVU1364
 5278 1990 0000E0E3 		mvn	r0, #0	@,
 5279 1994 FEFFFFEB 		bl	exit		@
 5280              	.LVL323:
 5281              	.L253:
 5282              		.align	2
 5283              	.L252:
 5284 1998 00000000 		.word	g_dpy
 5285 199c 4C040000 		.word	.LC29
 5286 19a0 00000000 		.word	g_xv_port
 5287 19a4 00000000 		.word	.LANCHOR1
 5288 19a8 B0050000 		.word	.LC34
 5289 19ac 00000000 		.word	g_yuv_shminfo
 5290 19b0 59563132 		.word	842094169
 5291 19b4 FF030000 		.word	1023
 5292 19b8 C4050000 		.word	.LC35
 5293 19bc 14060000 		.word	.LC37
 5294 19c0 70040000 		.word	.LC30
 5295 19c4 EC050000 		.word	.LC36
 5296 19c8 80050000 		.word	.LC33
 5297 19cc 28050000 		.word	.LC32
 5298 19d0 D0040000 		.word	.LC31
 5299              		.cfi_endproc
 5300              	.LFE83:
 5302              		.align	2
 5303              		.global	armwave_render_graticule
 5304              		.syntax unified
 5305              		.arm
 5306              		.fpu vfp
 5308              	armwave_render_graticule:
 5309              	.LFB84:
 863:armwave.c     **** 
 864:armwave.c     **** /*
 865:armwave.c     ****  * Render the graticule.
 866:armwave.c     ****  */
 867:armwave.c     **** void armwave_render_graticule()
 868:armwave.c     **** {
 5310              		.loc 1 868 1 view -0
 5311              		.cfi_startproc
 5312              		@ args = 0, pretend = 0, frame = 24
 5313              		@ frame_needed = 0, uses_anonymous_args = 0
 869:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5314              		.loc 1 869 5 view .LVU1366
 870:armwave.c     ****     float gr_size;
 5315              		.loc 1 870 5 view .LVU1367
 871:armwave.c     ****     m = g_armwave_state.frame_margin;
 5316              		.loc 1 871 5 view .LVU1368
 5317              	@ armwave.c:868: {
 868:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5318              		.loc 1 868 1 is_stmt 0 view .LVU1369
 5319 19d4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5320              		.cfi_def_cfa_offset 36
 5321              		.cfi_offset 4, -36
 5322              		.cfi_offset 5, -32
 5323              		.cfi_offset 6, -28
 5324              		.cfi_offset 7, -24
 5325              		.cfi_offset 8, -20
 5326              		.cfi_offset 9, -16
 5327              		.cfi_offset 10, -12
 5328              		.cfi_offset 11, -8
 5329              		.cfi_offset 14, -4
 5330 19d8 028B2DED 		vpush.64	{d8}	@
 5331              		.cfi_def_cfa_offset 44
 5332              		.cfi_offset 80, -44
 5333              		.cfi_offset 81, -40
 5334              	@ armwave.c:872:     w = g_canvas_dims.w - m;
 872:armwave.c     ****     w = g_canvas_dims.w - m;
 5335              		.loc 1 872 22 view .LVU1370
 5336 19dc 9C329FE5 		ldr	r3, .L276+4	@ tmp177,
 5337              	@ armwave.c:871:     m = g_armwave_state.frame_margin;
 871:armwave.c     ****     m = g_armwave_state.frame_margin;
 5338              		.loc 1 871 7 view .LVU1371
 5339 19e0 9C629FE5 		ldr	r6, .L276+8	@ tmp261,
 5340              	@ armwave.c:880:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 873:armwave.c     ****     h = g_canvas_dims.h - m;
 874:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 875:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 876:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 877:armwave.c     ****     ch = h - m;
 878:armwave.c     ****     cw = w - m;
 879:armwave.c     ****     
 880:armwave.c     ****     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5341              		.loc 1 880 5 view .LVU1372
 5342 19e4 9C229FE5 		ldr	r2, .L276+12	@ tmp181,
 5343 19e8 9C529FE5 		ldr	r5, .L276+16	@ tmp263,
 5344 19ec 9C729FE5 		ldr	r7, .L276+20	@ tmp262,
 5345              	@ armwave.c:871:     m = g_armwave_state.frame_margin;
 871:armwave.c     ****     w = g_canvas_dims.w - m;
 5346              		.loc 1 871 7 view .LVU1373
 5347 19f0 589096E5 		ldr	r9, [r6, #88]	@ m, g_armwave_state.frame_margin
 5348              	.LVL324:
 872:armwave.c     ****     w = g_canvas_dims.w - m;
 5349              		.loc 1 872 5 is_stmt 1 view .LVU1374
 5350              	@ armwave.c:872:     w = g_canvas_dims.w - m;
 872:armwave.c     ****     w = g_canvas_dims.w - m;
 5351              		.loc 1 872 7 is_stmt 0 view .LVU1375
 5352 19f4 00C093E5 		ldr	ip, [r3]	@ g_canvas_dims.w, g_canvas_dims.w
 5353              	@ armwave.c:868: {
 868:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5354              		.loc 1 868 1 view .LVU1376
 5355 19f8 2CD04DE2 		sub	sp, sp, #44	@,,
 5356              		.cfi_def_cfa_offset 88
 5357              	@ armwave.c:880:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5358              		.loc 1 880 5 view .LVU1377
 5359 19fc 002092E5 		ldr	r2, [r2]	@, g_grat_colour.pixel
 5360              	@ armwave.c:872:     w = g_canvas_dims.w - m;
 872:armwave.c     ****     h = g_canvas_dims.h - m;
 5361              		.loc 1 872 7 view .LVU1378
 5362 1a00 09C04CE0 		sub	ip, ip, r9	@ w, g_canvas_dims.w, m
 5363              	@ armwave.c:880:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5364              		.loc 1 880 5 view .LVU1379
 5365 1a04 081095E5 		ldr	r1, [r5, #8]	@, g_gc
 5366 1a08 000097E5 		ldr	r0, [r7]	@, g_dpy
 5367              	@ armwave.c:873:     h = g_canvas_dims.h - m;
 873:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5368              		.loc 1 873 22 view .LVU1380
 5369 1a0c 044093E5 		ldr	r4, [r3, #4]	@ _2, g_canvas_dims.h
 5370              	@ armwave.c:872:     w = g_canvas_dims.w - m;
 872:armwave.c     ****     h = g_canvas_dims.h - m;
 5371              		.loc 1 872 7 view .LVU1381
 5372 1a10 1CC08DE5 		str	ip, [sp, #28]	@ w, %sfp
 5373              	.LVL325:
 873:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5374              		.loc 1 873 5 is_stmt 1 view .LVU1382
 5375              	@ armwave.c:874:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 874:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5376              		.loc 1 874 35 is_stmt 0 view .LVU1383
 5377 1a14 1B8A96ED 		vldr.32	s16, [r6, #108]	@ _3, g_armwave_state.subdiv_frac
 5378              	@ armwave.c:880:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5379              		.loc 1 880 5 view .LVU1384
 5380 1a18 FEFFFFEB 		bl	XSetForeground		@
 5381              	.LVL326:
 5382              	@ armwave.c:882:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 881:armwave.c     ****     
 882:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5383              		.loc 1 882 23 view .LVU1385
 5384 1a1c 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5385              	@ armwave.c:873:     h = g_canvas_dims.h - m;
 873:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5386              		.loc 1 873 7 view .LVU1386
 5387 1a20 092044E0 		sub	r2, r4, r9	@ h, _2, m
 5388              	@ armwave.c:882:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5389              		.loc 1 882 7 view .LVU1387
 5390 1a24 010A13E3 		tst	r3, #4096	@ _8,
 5391              	@ armwave.c:873:     h = g_canvas_dims.h - m;
 873:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5392              		.loc 1 873 7 view .LVU1388
 5393 1a28 14208DE5 		str	r2, [sp, #20]	@ h, %sfp
 5394              	.LVL327:
 874:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5395              		.loc 1 874 5 is_stmt 1 view .LVU1389
 875:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 5396              		.loc 1 875 5 view .LVU1390
 876:armwave.c     ****     ch = h - m;
 5397              		.loc 1 876 5 view .LVU1391
 877:armwave.c     ****     cw = w - m;
 5398              		.loc 1 877 5 view .LVU1392
 878:armwave.c     ****     
 5399              		.loc 1 878 5 view .LVU1393
 880:armwave.c     ****     
 5400              		.loc 1 880 5 view .LVU1394
 5401              		.loc 1 882 5 view .LVU1395
 5402              	@ armwave.c:882:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5403              		.loc 1 882 7 is_stmt 0 view .LVU1396
 5404 1a2c 6E00001A 		bne	.L274		@,
 5405              	.LVL328:
 5406              	.L255:
 883:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 884:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 885:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 886:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 887:armwave.c     ****     }
 888:armwave.c     ****     
 889:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5407              		.loc 1 889 5 is_stmt 1 view .LVU1397
 5408              	@ armwave.c:889:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5409              		.loc 1 889 7 is_stmt 0 view .LVU1398
 5410 1a30 020A13E3 		tst	r3, #8192	@ _8,
 5411 1a34 6900000A 		beq	.L254		@,
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5412              		.loc 1 890 9 is_stmt 1 view .LVU1399
 5413              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5414              		.loc 1 891 9 is_stmt 0 view .LVU1400
 5415 1a38 5C2096E5 		ldr	r2, [r6, #92]	@ tmp290, g_armwave_state.n_hdiv
 5416              	@ armwave.c:890:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5417              		.loc 1 890 17 view .LVU1401
 5418 1a3c 077A9DED 		vldr.32	s14, [sp, #28]	@ int	@ w, %sfp
 5419              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5420              		.loc 1 891 9 view .LVU1402
 5421 1a40 000052E3 		cmp	r2, #0	@ tmp290,
 5422              	@ armwave.c:890:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5423              		.loc 1 890 24 view .LVU1403
 5424 1a44 902A07EE 		vmov	s15, r2	@ int	@ tmp291,
 5425              	@ armwave.c:890:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5426              		.loc 1 890 17 view .LVU1404
 5427 1a48 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, w
 5428              	@ armwave.c:890:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5429              		.loc 1 890 24 view .LVU1405
 5430 1a4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp217, tmp291
 5431              	@ armwave.c:890:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 890:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5432              		.loc 1 890 17 view .LVU1406
 5433 1a50 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp216, tmp217
 5434              	.LVL329:
 5435              		.loc 1 891 9 is_stmt 1 view .LVU1407
 5436              		.loc 1 891 9 is_stmt 0 view .LVU1408
 5437 1a54 440000DA 		ble	.L264		@,
 5438              	@ armwave.c:874:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 874:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5439              		.loc 1 874 18 view .LVU1409
 5440 1a58 877A9FED 		vldr.32	s14, .L276	@ tmp224,
 5441              	@ armwave.c:900:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 892:armwave.c     ****             if(i > 0) {
 893:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, p, m, p, h);
 894:armwave.c     ****             }
 895:armwave.c     ****             
 896:armwave.c     ****             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 897:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 898:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 899:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 900:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5442              		.loc 1 900 66 view .LVU1410
 5443 1a5c A44F84E0 		add	r4, r4, r4, lsr #31	@ tmp226, _2, _2,
 5444              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5445              		.loc 1 891 22 view .LVU1411
 5446 1a60 10908DE5 		str	r9, [sp, #16]	@ m, %sfp
 5447              	@ armwave.c:900:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5448              		.loc 1 900 66 view .LVU1412
 5449 1a64 C440A0E1 		asr	r4, r4, #1	@ tmp227, tmp226,
 5450              	@ armwave.c:900:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5451              		.loc 1 900 21 view .LVU1413
 5452 1a68 082044E2 		sub	r2, r4, #8	@ _42, tmp227,
 5453 1a6c 24208DE5 		str	r2, [sp, #36]	@ _42, %sfp
 5454 1a70 08B084E2 		add	fp, r4, #8	@ _43, tmp227,
 5455              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5456              		.loc 1 891 15 view .LVU1414
 5457 1a74 0080A0E3 		mov	r8, #0	@ i,
 5458 1a78 18908DE5 		str	r9, [sp, #24]	@ m, %sfp
 5459              	@ armwave.c:874:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 874:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5460              		.loc 1 874 18 view .LVU1415
 5461 1a7c 087AC7EE 		vdiv.f32	s15, s14, s16	@ tmp223, tmp224, _3
 5462              	@ armwave.c:874:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 874:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5463              		.loc 1 874 11 view .LVU1416
 5464 1a80 E77AFDEE 		vcvt.s32.f32	s15, s15	@ n_sub, tmp223
 5465 1a84 90AA17EE 		vmov	r10, s15	@ int	@ n_sub, n_sub
 5466 1a88 140000EA 		b	.L260		@
 5467              	.LVL330:
 5468              	.L265:
 5469              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5470              		.loc 1 891 62 view .LVU1417
 5471 1a8c 888A38EE 		vadd.f32	s16, s17, s16	@ tmp236, gr_size, _157
 5472              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5473              		.loc 1 891 9 view .LVU1418
 5474 1a90 5C3096E5 		ldr	r3, [r6, #92]	@ g_armwave_state.n_hdiv, g_armwave_state.n_hdiv
 5475              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5476              		.loc 1 891 56 view .LVU1419
 5477 1a94 018088E2 		add	r8, r8, #1	@ i, i,
 5478              	.LVL331:
 5479              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5480              		.loc 1 891 9 view .LVU1420
 5481 1a98 080053E1 		cmp	r3, r8	@ g_armwave_state.n_hdiv, i
 5482              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5483              		.loc 1 891 62 view .LVU1421
 5484 1a9c C87AFDEE 		vcvt.s32.f32	s15, s16	@ p, tmp236
 5485 1aa0 047ACDED 		vstr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5486              	.LVL332:
 5487              	@ armwave.c:891:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 891:armwave.c     ****             if(i > 0) {
 5488              		.loc 1 891 9 view .LVU1422
 5489 1aa4 2F0000DA 		ble	.L275		@,
 892:armwave.c     ****             if(i > 0) {
 5490              		.loc 1 892 13 is_stmt 1 view .LVU1423
 5491              	@ armwave.c:892:             if(i > 0) {
 892:armwave.c     ****             if(i > 0) {
 5492              		.loc 1 892 15 is_stmt 0 view .LVU1424
 5493 1aa8 000058E3 		cmp	r8, #0	@ i,
 5494 1aac 0A0000DA 		ble	.L261		@,
 893:armwave.c     ****             }
 5495              		.loc 1 893 17 is_stmt 1 view .LVU1425
 5496 1ab0 14309DE5 		ldr	r3, [sp, #20]	@ h, %sfp
 5497 1ab4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5498 1ab8 08308DE5 		str	r3, [sp, #8]	@ h,
 5499 1abc 10309DE5 		ldr	r3, [sp, #16]	@ p, %sfp
 5500 1ac0 001095E5 		ldr	r1, [r5]	@, g_window
 5501 1ac4 04308DE5 		str	r3, [sp, #4]	@ p,
 5502 1ac8 18309DE5 		ldr	r3, [sp, #24]	@ m, %sfp
 5503 1acc 000097E5 		ldr	r0, [r7]	@, g_dpy
 5504 1ad0 00308DE5 		str	r3, [sp]	@ m,
 5505 1ad4 10309DE5 		ldr	r3, [sp, #16]	@, %sfp
 5506 1ad8 FEFFFFEB 		bl	XDrawLine		@
 5507              	.LVL333:
 5508              	.L261:
 893:armwave.c     ****             }
 5509              		.loc 1 893 17 is_stmt 0 view .LVU1426
 5510 1adc 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5511              	.LVL334:
 5512              	.L260:
 896:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5513              		.loc 1 896 13 is_stmt 1 view .LVU1427
 5514 1ae0 047ADDED 		vldr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5515              	@ armwave.c:896:             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 896:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5516              		.loc 1 896 15 is_stmt 0 view .LVU1428
 5517 1ae4 020913E3 		tst	r3, #32768	@ _8,
 5518 1ae8 E78AB8EE 		vcvt.f32.s32	s16, s15	@ _157, p
 5519 1aec E6FFFF0A 		beq	.L265		@,
 5520              	.LVL335:
 5521              	@ armwave.c:897:                 for(j = 1; j < n_sub; j++) {
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5522              		.loc 1 897 17 view .LVU1429
 5523 1af0 01005AE3 		cmp	r10, #1	@ n_sub,
 5524 1af4 E4FFFFDA 		ble	.L265		@,
 5525              	@ armwave.c:897:                 for(j = 1; j < n_sub; j++) {
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5526              		.loc 1 897 23 view .LVU1430
 5527 1af8 24909DE5 		ldr	r9, [sp, #36]	@ _42, %sfp
 5528 1afc 0140A0E3 		mov	r4, #1	@ j,
 5529 1b00 20808DE5 		str	r8, [sp, #32]	@ i, %sfp
 5530              	.LVL336:
 5531              	.L266:
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5532              		.loc 1 898 21 is_stmt 1 discriminator 3 view .LVU1431
 5533              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5534              		.loc 1 898 38 is_stmt 0 discriminator 3 view .LVU1432
 5535 1b04 1B7AD6ED 		vldr.32	s15, [r6, #108]	@ g_armwave_state.subdiv_frac, g_armwave_state.subdiv_frac
 5536              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5537              		.loc 1 898 68 discriminator 3 view .LVU1433
 5538 1b08 104A07EE 		vmov	s14, r4	@ int	@ j, j
 5539              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5540              		.loc 1 898 27 discriminator 3 view .LVU1434
 5541 1b0c 486AF0EE 		vmov.f32	s13, s16	@ tmp244, _157
 5542              	@ armwave.c:899:                     printf("%3d, %3d\n", q, p);
 899:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5543              		.loc 1 899 21 discriminator 3 view .LVU1435
 5544 1b10 10209DE5 		ldr	r2, [sp, #16]	@, %sfp
 5545              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5546              		.loc 1 898 38 discriminator 3 view .LVU1436
 5547 1b14 A77A68EE 		vmul.f32	s15, s17, s15	@ tmp240, gr_size, g_armwave_state.subdiv_frac
 5548              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5549              		.loc 1 898 68 discriminator 3 view .LVU1437
 5550 1b18 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, j
 5551              	@ armwave.c:899:                     printf("%3d, %3d\n", q, p);
 899:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5552              		.loc 1 899 21 discriminator 3 view .LVU1438
 5553 1b1c 70019FE5 		ldr	r0, .L276+24	@,
 5554              	@ armwave.c:897:                 for(j = 1; j < n_sub; j++) {
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5555              		.loc 1 897 40 discriminator 3 view .LVU1439
 5556 1b20 014084E2 		add	r4, r4, #1	@ j, j,
 5557              	.LVL337:
 5558              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5559              		.loc 1 898 27 discriminator 3 view .LVU1440
 5560 1b24 876A47EE 		vmla.f32	s13, s15, s14	@ tmp244, tmp240, tmp242
 5561              	@ armwave.c:898:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 898:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5562              		.loc 1 898 23 discriminator 3 view .LVU1441
 5563 1b28 E67AFDEE 		vcvt.s32.f32	s15, s13	@ q, tmp244
 5564 1b2c 908A17EE 		vmov	r8, s15	@ int	@ q, q
 5565              	.LVL338:
 899:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5566              		.loc 1 899 21 is_stmt 1 discriminator 3 view .LVU1442
 5567 1b30 901A17EE 		vmov	r1, s15	@ int	@, q
 5568 1b34 FEFFFFEB 		bl	printf		@
 5569              	.LVL339:
 5570              		.loc 1 900 21 discriminator 3 view .LVU1443
 5571 1b38 08B08DE5 		str	fp, [sp, #8]	@ _43,
 5572 1b3c 04808DE5 		str	r8, [sp, #4]	@ q,
 5573 1b40 0830A0E1 		mov	r3, r8	@, q
 5574 1b44 00908DE5 		str	r9, [sp]	@ _42,
 5575 1b48 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5576 1b4c 001095E5 		ldr	r1, [r5]	@, g_window
 5577 1b50 000097E5 		ldr	r0, [r7]	@, g_dpy
 5578 1b54 FEFFFFEB 		bl	XDrawLine		@
 5579              	.LVL340:
 5580              	@ armwave.c:897:                 for(j = 1; j < n_sub; j++) {
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5581              		.loc 1 897 17 is_stmt 0 discriminator 3 view .LVU1444
 5582 1b58 04005AE1 		cmp	r10, r4	@ n_sub, j
 5583 1b5c E8FFFF1A 		bne	.L266		@,
 5584 1b60 20809DE5 		ldr	r8, [sp, #32]	@ i, %sfp
 5585              	.LVL341:
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5586              		.loc 1 897 17 discriminator 3 view .LVU1445
 5587 1b64 C8FFFFEA 		b	.L265		@
 5588              	.LVL342:
 5589              	.L275:
 897:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5590              		.loc 1 897 17 discriminator 3 view .LVU1446
 5591 1b68 18909DE5 		ldr	r9, [sp, #24]	@ m, %sfp
 5592              	.LVL343:
 5593              	.L264:
 901:armwave.c     ****                 }
 902:armwave.c     ****             }
 903:armwave.c     ****         }
 904:armwave.c     ****         
 905:armwave.c     ****         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5594              		.loc 1 905 9 is_stmt 1 view .LVU1447
 5595              	@ armwave.c:905:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5596              		.loc 1 905 22 is_stmt 0 view .LVU1448
 5597 1b6c 057ADDED 		vldr.32	s15, [sp, #20]	@ int	@ h, %sfp
 5598              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5599              		.loc 1 906 9 view .LVU1449
 5600 1b70 603096E5 		ldr	r3, [r6, #96]	@ tmp295, g_armwave_state.n_vdiv
 5601 1b74 010053E3 		cmp	r3, #1	@ tmp295,
 5602              	@ armwave.c:905:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 905:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5603              		.loc 1 905 22 view .LVU1450
 5604 1b78 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp219, h
 5605              	@ armwave.c:905:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 905:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5606              		.loc 1 905 24 view .LVU1451
 5607 1b7c 187AD6ED 		vldr.32	s15, [r6, #96]	@ int	@ tmp294, g_armwave_state.n_vdiv
 5608              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5609              		.loc 1 906 15 view .LVU1452
 5610 1b80 0140A0C3 		movgt	r4, #1	@ i,
 5611 1b84 1C809DC5 		ldrgt	r8, [sp, #28]	@ w, %sfp
 5612              	@ armwave.c:905:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 905:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5613              		.loc 1 905 24 view .LVU1453
 5614 1b88 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, tmp294
 5615              	@ armwave.c:905:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 905:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5616              		.loc 1 905 17 view .LVU1454
 5617 1b8c 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp219, tmp220
 5618              	.LVL344:
 5619              		.loc 1 906 9 is_stmt 1 view .LVU1455
 5620              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5621              		.loc 1 906 26 is_stmt 0 view .LVU1456
 5622 1b90 909A07EE 		vmov	s15, r9	@ int	@ m, m
 5623 1b94 E78AB8EE 		vcvt.f32.s32	s16, s15	@ tmp221, m
 5624 1b98 288A38EE 		vadd.f32	s16, s16, s17	@ tmp222, tmp221, gr_size
 5625              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5626              		.loc 1 906 22 view .LVU1457
 5627 1b9c C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, tmp222
 5628              	.LVL345:
 5629              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5630              		.loc 1 906 9 view .LVU1458
 5631 1ba0 0E0000DA 		ble	.L254		@,
 5632              	.LVL346:
 5633              	.L258:
 907:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, m, p, w, p);
 5634              		.loc 1 907 13 is_stmt 1 discriminator 3 view .LVU1459
 5635 1ba4 028A8DED 		vstr.32	s16, [sp, #8]	@ int	@ p,
 5636 1ba8 008A8DED 		vstr.32	s16, [sp]	@ int	@ p,
 5637 1bac 0930A0E1 		mov	r3, r9	@, m
 5638 1bb0 04808DE5 		str	r8, [sp, #4]	@ w,
 5639 1bb4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5640 1bb8 001095E5 		ldr	r1, [r5]	@, g_window
 5641 1bbc 000097E5 		ldr	r0, [r7]	@, g_dpy
 5642 1bc0 FEFFFFEB 		bl	XDrawLine		@
 5643              	.LVL347:
 5644              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5645              		.loc 1 906 72 is_stmt 0 discriminator 3 view .LVU1460
 5646 1bc4 C88AB8EE 		vcvt.f32.s32	s16, s16	@ tmp258, p
 5647              	.LVL348:
 5648              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5649              		.loc 1 906 9 discriminator 3 view .LVU1461
 5650 1bc8 603096E5 		ldr	r3, [r6, #96]	@ g_armwave_state.n_vdiv, g_armwave_state.n_vdiv
 5651              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5652              		.loc 1 906 66 discriminator 3 view .LVU1462
 5653 1bcc 014084E2 		add	r4, r4, #1	@ i, i,
 5654              	.LVL349:
 5655              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5656              		.loc 1 906 9 discriminator 3 view .LVU1463
 5657 1bd0 040053E1 		cmp	r3, r4	@ g_armwave_state.n_vdiv, i
 5658              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5659              		.loc 1 906 72 discriminator 3 view .LVU1464
 5660 1bd4 288A38EE 		vadd.f32	s16, s16, s17	@ _56, tmp258, gr_size
 5661 1bd8 C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, _56
 5662              	.LVL350:
 5663              	@ armwave.c:906:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 906:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5664              		.loc 1 906 9 discriminator 3 view .LVU1465
 5665 1bdc F0FFFFCA 		bgt	.L258		@,
 5666              	.LVL351:
 5667              	.L254:
 5668              	@ armwave.c:924: }
 908:armwave.c     ****         }
 909:armwave.c     ****     }
 910:armwave.c     ****     
 911:armwave.c     ****     /*
 912:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 913:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 914:armwave.c     ****         
 915:armwave.c     ****         for(i = 0, p = m + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 916:armwave.c     ****             for(j = 0; j < n_sub; j++) {
 917:armwave.c     ****                 q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 918:armwave.c     ****                 printf("%3d, %3d\n", q, p);
 919:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, q, m + (ch / 2) - 16, q, m + (ch / 2) + 16);
 920:armwave.c     ****             }
 921:armwave.c     ****         }
 922:armwave.c     ****     }
 923:armwave.c     ****     */
 924:armwave.c     **** }
 5669              		.loc 1 924 1 view .LVU1466
 5670 1be0 2CD08DE2 		add	sp, sp, #44	@,,
 5671              		.cfi_remember_state
 5672              		.cfi_def_cfa_offset 44
 5673              		@ sp needed	@
 5674 1be4 028BBDEC 		vldm	sp!, {d8}	@
 5675              		.cfi_restore 80
 5676              		.cfi_restore 81
 5677              		.cfi_def_cfa_offset 36
 5678 1be8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5679              	.LVL352:
 5680              	.L274:
 5681              		.cfi_restore_state
 883:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5682              		.loc 1 883 9 is_stmt 1 view .LVU1467
 5683 1bec 1C809DE5 		ldr	r8, [sp, #28]	@ w, %sfp
 5684              	@ armwave.c:884:         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 884:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5685              		.loc 1 884 9 is_stmt 0 view .LVU1468
 5686 1bf0 09A044E0 		sub	r10, r4, r9	@ h, _2, m
 5687              	@ armwave.c:883:         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 883:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5688              		.loc 1 883 9 view .LVU1469
 5689 1bf4 0930A0E1 		mov	r3, r9	@, m
 5690 1bf8 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5691              	.LVL353:
 883:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5692              		.loc 1 883 9 view .LVU1470
 5693 1bfc 001095E5 		ldr	r1, [r5]	@, g_window
 5694 1c00 08908DE5 		str	r9, [sp, #8]	@ m,
 5695 1c04 04808DE5 		str	r8, [sp, #4]	@ w,
 5696 1c08 00908DE5 		str	r9, [sp]	@ m,
 5697 1c0c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5698 1c10 FEFFFFEB 		bl	XDrawLine		@
 5699              	.LVL354:
 884:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5700              		.loc 1 884 9 is_stmt 1 view .LVU1471
 5701 1c14 0A30A0E1 		mov	r3, r10	@ h, h
 5702 1c18 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5703 1c1c 08018DE8 		stm	sp, {r3, r8}	@,,
 5704 1c20 001095E5 		ldr	r1, [r5]	@, g_window
 5705 1c24 0930A0E1 		mov	r3, r9	@, m
 5706 1c28 08A08DE5 		str	r10, [sp, #8]	@ h,
 5707 1c2c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5708 1c30 FEFFFFEB 		bl	XDrawLine		@
 5709              	.LVL355:
 885:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 5710              		.loc 1 885 9 view .LVU1472
 5711 1c34 0930A0E1 		mov	r3, r9	@, m
 5712 1c38 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5713 1c3c 001095E5 		ldr	r1, [r5]	@, g_window
 5714 1c40 08A08DE5 		str	r10, [sp, #8]	@ h,
 5715 1c44 04908DE5 		str	r9, [sp, #4]	@ m,
 5716 1c48 00908DE5 		str	r9, [sp]	@ m,
 5717 1c4c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5718 1c50 FEFFFFEB 		bl	XDrawLine		@
 5719              	.LVL356:
 886:armwave.c     ****     }
 5720              		.loc 1 886 9 view .LVU1473
 5721 1c54 0830A0E1 		mov	r3, r8	@, w
 5722 1c58 08A08DE5 		str	r10, [sp, #8]	@ h,
 5723 1c5c 04808DE5 		str	r8, [sp, #4]	@ w,
 5724 1c60 00908DE5 		str	r9, [sp]	@ m,
 5725 1c64 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5726 1c68 001095E5 		ldr	r1, [r5]	@, g_window
 5727 1c6c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5728 1c70 FEFFFFEB 		bl	XDrawLine		@
 5729              	.LVL357:
 5730 1c74 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5731 1c78 6CFFFFEA 		b	.L255		@
 5732              	.L277:
 5733              		.align	2
 5734              	.L276:
 5735 1c7c 0000803F 		.word	1065353216
 5736 1c80 00000000 		.word	g_canvas_dims
 5737 1c84 00000000 		.word	g_armwave_state
 5738 1c88 00000000 		.word	g_grat_colour
 5739 1c8c 00000000 		.word	.LANCHOR1
 5740 1c90 00000000 		.word	g_dpy
 5741 1c94 50060000 		.word	.LC38
 5742              		.cfi_endproc
 5743              	.LFE84:
 5745              		.global	__aeabi_idivmod
 5746              		.align	2
 5747              		.global	armwave_render_frame_x11
 5748              		.syntax unified
 5749              		.arm
 5750              		.fpu vfp
 5752              	armwave_render_frame_x11:
 5753              	.LFB85:
 925:armwave.c     **** 
 926:armwave.c     **** /*
 927:armwave.c     ****  * Run one rendering tick.
 928:armwave.c     ****  */
 929:armwave.c     **** void armwave_render_frame_x11()
 930:armwave.c     **** {
 5754              		.loc 1 930 1 view -0
 5755              		.cfi_startproc
 5756              		@ args = 0, pretend = 0, frame = 16
 5757              		@ frame_needed = 0, uses_anonymous_args = 0
 931:armwave.c     ****     Window _dw;
 5758              		.loc 1 931 5 view .LVU1475
 932:armwave.c     ****     int _d, _w, _h;
 5759              		.loc 1 932 5 view .LVU1476
 933:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5760              		.loc 1 933 5 view .LVU1477
 5761              	@ armwave.c:930: {
 930:armwave.c     ****     Window _dw;
 5762              		.loc 1 930 1 is_stmt 0 view .LVU1478
 5763 1c98 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5764              		.cfi_def_cfa_offset 36
 5765              		.cfi_offset 4, -36
 5766              		.cfi_offset 5, -32
 5767              		.cfi_offset 6, -28
 5768              		.cfi_offset 7, -24
 5769              		.cfi_offset 8, -20
 5770              		.cfi_offset 9, -16
 5771              		.cfi_offset 10, -12
 5772              		.cfi_offset 11, -8
 5773              		.cfi_offset 14, -4
 5774 1c9c 3CD04DE2 		sub	sp, sp, #60	@,,
 5775              		.cfi_def_cfa_offset 96
 5776              	@ armwave.c:935:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 934:armwave.c     ****     
 935:armwave.c     ****     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5777              		.loc 1 935 5 view .LVU1479
 5778 1ca0 EC519FE5 		ldr	r5, .L289	@ tmp283,
 5779 1ca4 EC919FE5 		ldr	r9, .L289+4	@ tmp284,
 5780              	@ armwave.c:933:     int m = g_armwave_state.frame_margin; 
 933:armwave.c     ****     
 5781              		.loc 1 933 9 view .LVU1480
 5782 1ca8 EC419FE5 		ldr	r4, .L289+8	@ tmp287,
 5783              	@ armwave.c:935:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5784              		.loc 1 935 5 view .LVU1481
 5785 1cac 0C0095E5 		ldr	r0, [r5, #12]	@, g_frame_num
 5786 1cb0 001099E5 		ldr	r1, [r9]	@, g_n_test_waves
 5787 1cb4 FEFFFFEB 		bl	__aeabi_idivmod		@
 5788              	.LVL358:
 5789              	.LBB128:
 5790              	.LBB129:
 5791              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5792              		.loc 1 495 7 view .LVU1482
 5793 1cb8 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 5794              	.LBE129:
 5795              	.LBE128:
 5796              	@ armwave.c:933:     int m = g_armwave_state.frame_margin; 
 933:armwave.c     ****     
 5797              		.loc 1 933 9 view .LVU1483
 5798 1cbc 587094E5 		ldr	r7, [r4, #88]	@ m, g_armwave_state.frame_margin
 5799              	.LVL359:
 5800              		.loc 1 935 5 is_stmt 1 view .LVU1484
 5801              	.LBB132:
 5802              	.LBI128:
 493:armwave.c     **** {
 5803              		.loc 1 493 6 view .LVU1485
 5804              	.LBB130:
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5805              		.loc 1 495 5 view .LVU1486
 5806              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5807              		.loc 1 495 7 is_stmt 0 view .LVU1487
 5808 1cc0 010053E1 		cmp	r3, r1	@ g_armwave_state.test_wave_buffer_nsets, tmp180
 5809 1cc4 6D00003A 		bcc	.L288		@,
 500:armwave.c     **** }
 5810              		.loc 1 500 5 is_stmt 1 view .LVU1488
 5811              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5812              		.loc 1 500 111 is_stmt 0 view .LVU1489
 5813 1cc8 1C2094E5 		ldr	r2, [r4, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 5814              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5815              		.loc 1 500 68 view .LVU1490
 5816 1ccc 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 5817 1cd0 923121E0 		mla	r1, r2, r1, r3	@ tmp189, g_armwave_state.test_wave_buffer_stride, tmp180, g_armwave_state.test
 5818              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5819              		.loc 1 500 33 view .LVU1491
 5820 1cd4 141084E5 		str	r1, [r4, #20]	@ tmp189, g_armwave_state.wave_buffer
 5821              	.L280:
 500:armwave.c     **** }
 5822              		.loc 1 500 33 view .LVU1492
 5823              	.LBE130:
 5824              	.LBE132:
 936:armwave.c     ****     armwave_generate();
 5825              		.loc 1 936 5 is_stmt 1 view .LVU1493
 5826              	.LBB133:
 5827              	.LBI133:
 381:armwave.c     **** {
 5828              		.loc 1 381 6 view .LVU1494
 5829              	.LBB134:
 383:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 5830              		.loc 1 383 5 view .LVU1495
 384:armwave.c     **** 
 5831              		.loc 1 384 5 view .LVU1496
 5832              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 387:armwave.c     **** 
 5833              		.loc 1 387 5 is_stmt 0 view .LVU1497
 5834 1cd8 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 5835 1cdc 0010A0E3 		mov	r1, #0	@,
 5836 1ce0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 5837              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 5838              		.loc 1 384 14 view .LVU1498
 5839 1ce4 4CB094E5 		ldr	fp, [r4, #76]	@ xx_rem, g_armwave_state.wave_length
 5840              	.LVL360:
 387:armwave.c     **** 
 5841              		.loc 1 387 5 is_stmt 1 view .LVU1499
 5842 1ce8 FEFFFFEB 		bl	memset		@
 5843              	.LVL361:
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5844              		.loc 1 390 5 view .LVU1500
 5845              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5846              		.loc 1 390 68 is_stmt 0 view .LVU1501
 5847 1cec 446094E5 		ldr	r6, [r4, #68]	@ _69, g_armwave_state.slice_height
 5848              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5849              		.loc 1 390 51 view .LVU1502
 5850 1cf0 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5851 1cf4 0610A0E1 		mov	r1, r6	@, _69
 5852 1cf8 FEFFFFEB 		bl	__aeabi_idiv		@
 5853              	.LVL362:
 5854              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5855              		.loc 1 390 5 view .LVU1503
 5856 1cfc 000050E3 		cmp	r0, #0	@ tmp204
 5857 1d00 6100000A 		beq	.L285		@,
 5858              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 5859              		.loc 1 384 52 view .LVU1504
 5860 1d04 0080A0E3 		mov	r8, #0	@ ypos,
 5861              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5862              		.loc 1 390 12 view .LVU1505
 5863 1d08 08A0A0E1 		mov	r10, r8	@ yy, ypos
 5864              	.LVL363:
 5865              	.L282:
 391:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 5866              		.loc 1 391 9 is_stmt 1 view .LVU1506
 5867 1d0c 9A0600E0 		mul	r0, r10, r6	@, yy, tmp1
 5868 1d10 0610A0E1 		mov	r1, r6	@, _69
 5869 1d14 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5870              	.LVL364:
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5871              		.loc 1 392 9 view .LVU1507
 5872              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5873              		.loc 1 392 34 is_stmt 0 view .LVU1508
 5874 1d18 446094E5 		ldr	r6, [r4, #68]	@ _69, g_armwave_state.slice_height
 5875              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5876              		.loc 1 390 51 view .LVU1509
 5877 1d1c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5878 1d20 0610A0E1 		mov	r1, r6	@, _69
 5879 1d24 FEFFFFEB 		bl	__aeabi_idiv		@
 5880              	.LVL365:
 5881              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5882              		.loc 1 390 86 view .LVU1510
 5883 1d28 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 5884              	.LVL366:
 5885              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5886              		.loc 1 392 16 view .LVU1511
 5887 1d2c 06B04BE0 		sub	fp, fp, r6	@ xx_rem, xx_rem, _69
 5888              	.LVL367:
 393:armwave.c     ****     }
 5889              		.loc 1 393 9 is_stmt 1 view .LVU1512
 5890              	@ armwave.c:393:         ypos += g_armwave_state.slice_height;   
 393:armwave.c     ****     }
 5891              		.loc 1 393 14 is_stmt 0 view .LVU1513
 5892 1d30 068088E0 		add	r8, r8, r6	@ ypos, ypos, _69
 5893              	.LVL368:
 5894              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5895              		.loc 1 390 5 view .LVU1514
 5896 1d34 00005AE1 		cmp	r10, r0	@ yy,
 5897 1d38 F3FFFF3A 		bcc	.L282		@,
 5898              	.LVL369:
 5899              	.L281:
 397:armwave.c     **** }
 5900              		.loc 1 397 5 is_stmt 1 view .LVU1515
 5901 1d3c 0B10A0E1 		mov	r1, fp	@, xx_rem
 5902 1d40 0800A0E1 		mov	r0, r8	@, ypos
 5903              	.LBE134:
 5904              	.LBE133:
 5905              	@ armwave.c:939:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 937:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 938:armwave.c     ****     
 939:armwave.c     ****     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 5906              		.loc 1 939 5 is_stmt 0 view .LVU1516
 5907 1d44 54819FE5 		ldr	r8, .L289+12	@ tmp285,
 5908              	.LBB137:
 5909              	.LBB135:
 5910              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 5911              		.loc 1 397 5 view .LVU1517
 5912 1d48 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5913              	.LVL370:
 397:armwave.c     **** }
 5914              		.loc 1 397 5 view .LVU1518
 5915              	.LBE135:
 5916              	.LBE137:
 937:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5917              		.loc 1 937 5 is_stmt 1 view .LVU1519
 5918              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 940:armwave.c     ****     g_canvas_dims.w = _w;
 941:armwave.c     ****     g_canvas_dims.h = _h;
 942:armwave.c     ****     
 943:armwave.c     ****     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas_dims.h) {
 5919              		.loc 1 943 26 is_stmt 0 view .LVU1520
 5920 1d4c 50619FE5 		ldr	r6, .L289+16	@ tmp286,
 5921              	@ armwave.c:937:     fill_xvimage_scaled(g_yuv_image);
 937:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5922              		.loc 1 937 5 view .LVU1521
 5923 1d50 040095E5 		ldr	r0, [r5, #4]	@, g_yuv_image
 5924 1d54 FEFFFFEB 		bl	fill_xvimage_scaled		@
 5925              	.LVL371:
 939:armwave.c     ****     g_canvas_dims.w = _w;
 5926              		.loc 1 939 5 is_stmt 1 view .LVU1522
 5927 1d58 2C308DE2 		add	r3, sp, #44	@ tmp214,,
 5928 1d5c 34108DE2 		add	r1, sp, #52	@ tmp222,,
 5929 1d60 30208DE2 		add	r2, sp, #48	@ tmp223,,
 5930 1d64 000098E5 		ldr	r0, [r8]	@, g_dpy
 5931 1d68 10308DE5 		str	r3, [sp, #16]	@ tmp214,
 5932 1d6c 0C308DE5 		str	r3, [sp, #12]	@ tmp214,
 5933 1d70 00308DE5 		str	r3, [sp]	@ tmp214,
 5934 1d74 08108DE5 		str	r1, [sp, #8]	@ tmp222,
 5935 1d78 04208DE5 		str	r2, [sp, #4]	@ tmp223,
 5936 1d7c 001095E5 		ldr	r1, [r5]	@, g_window
 5937 1d80 28208DE2 		add	r2, sp, #40	@,,
 5938 1d84 FEFFFFEB 		bl	XGetGeometry		@
 5939              	.LVL372:
 940:armwave.c     ****     g_canvas_dims.w = _w;
 5940              		.loc 1 940 5 view .LVU1523
 5941              	@ armwave.c:940:     g_canvas_dims.w = _w;
 940:armwave.c     ****     g_canvas_dims.w = _w;
 5942              		.loc 1 940 21 is_stmt 0 view .LVU1524
 5943 1d88 18419FE5 		ldr	r4, .L289+20	@ tmp282,
 5944 1d8c 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_107, _w
 5945              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5946              		.loc 1 943 7 view .LVU1525
 5947 1d90 002096E5 		ldr	r2, [r6]	@ g_canvas_dims_last.w, g_canvas_dims_last.w
 5948              	@ armwave.c:941:     g_canvas_dims.h = _h;
 941:armwave.c     ****     
 5949              		.loc 1 941 21 view .LVU1526
 5950 1d94 34309DE5 		ldr	r3, [sp, #52]	@ _h.117_8, _h
 5951              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5952              		.loc 1 943 7 view .LVU1527
 5953 1d98 020051E1 		cmp	r1, r2	@ pretmp_107, g_canvas_dims_last.w
 5954              	@ armwave.c:941:     g_canvas_dims.h = _h;
 941:armwave.c     ****     
 5955              		.loc 1 941 21 view .LVU1528
 5956 1d9c 0A0084E8 		stm	r4, {r1, r3}	@ tmp282,,
 5957              		.loc 1 943 5 is_stmt 1 view .LVU1529
 5958              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5959              		.loc 1 943 7 is_stmt 0 view .LVU1530
 5960 1da0 0200001A 		bne	.L283		@,
 5961              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5962              		.loc 1 943 69 discriminator 1 view .LVU1531
 5963 1da4 042096E5 		ldr	r2, [r6, #4]	@ pretmp_109, g_canvas_dims_last.h
 5964              	@ armwave.c:943:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5965              		.loc 1 943 48 discriminator 1 view .LVU1532
 5966 1da8 020053E1 		cmp	r3, r2	@ _h.117_8, pretmp_109
 5967 1dac 0400000A 		beq	.L284		@,
 5968              	.L283:
 944:armwave.c     ****         XClearWindow(g_dpy, g_window);
 5969              		.loc 1 944 9 is_stmt 1 view .LVU1533
 5970 1db0 001095E5 		ldr	r1, [r5]	@, g_window
 5971 1db4 000098E5 		ldr	r0, [r8]	@, g_dpy
 5972 1db8 FEFFFFEB 		bl	XClearWindow		@
 5973              	.LVL373:
 5974 1dbc 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_107, _w
 5975 1dc0 34209DE5 		ldr	r2, [sp, #52]	@ pretmp_109, _h
 5976              	.L284:
 945:armwave.c     ****     }
 946:armwave.c     ****     
 947:armwave.c     ****     printf("Canvas dims: %d x %d (margin: %d) (YUV image: %d x %d)\n", _w, _h, m, g_yuv_image->widt
 5977              		.loc 1 947 5 view .LVU1534
 5978              	@ armwave.c:947:     printf("Canvas dims: %d x %d (margin: %d) (YUV image: %d x %d)\n", _w, _h, m, 
 5979              		.loc 1 947 94 is_stmt 0 view .LVU1535
 5980 1dc4 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.122_15, g_yuv_image
 5981              	@ armwave.c:947:     printf("Canvas dims: %d x %d (margin: %d) (YUV image: %d x %d)\n", _w, _h, m, 
 5982              		.loc 1 947 5 view .LVU1536
 5983 1dc8 0730A0E1 		mov	r3, r7	@, m
 5984 1dcc 08C090E5 		ldr	ip, [r0, #8]	@ g_yuv_image.122_15->height, g_yuv_image.122_15->height
 5985 1dd0 04C08DE5 		str	ip, [sp, #4]	@ g_yuv_image.122_15->height,
 5986 1dd4 04C090E5 		ldr	ip, [r0, #4]	@ g_yuv_image.122_15->width, g_yuv_image.122_15->width
 5987 1dd8 CC009FE5 		ldr	r0, .L289+24	@,
 5988 1ddc 00C08DE5 		str	ip, [sp]	@ g_yuv_image.122_15->width,
 5989 1de0 FEFFFFEB 		bl	printf		@
 5990              	.LVL374:
 948:armwave.c     ****     printf("Test buf ptr: %d\n", g_frame_num % g_n_test_waves);
 5991              		.loc 1 948 5 is_stmt 1 view .LVU1537
 5992 1de4 001099E5 		ldr	r1, [r9]	@, g_n_test_waves
 5993 1de8 0C0095E5 		ldr	r0, [r5, #12]	@, g_frame_num
 5994 1dec FEFFFFEB 		bl	__aeabi_idivmod		@
 5995              	.LVL375:
 5996 1df0 B8009FE5 		ldr	r0, .L289+28	@,
 5997 1df4 FEFFFFEB 		bl	printf		@
 5998              	.LVL376:
 949:armwave.c     **** 
 950:armwave.c     ****     g_canvas_dims_last = g_canvas_dims;
 5999              		.loc 1 950 5 view .LVU1538
 6000              	@ armwave.c:954:         m, m, _w - (m * 2), _h - (m * 2), True);
 951:armwave.c     ****     
 952:armwave.c     ****     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 953:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 954:armwave.c     ****         m, m, _w - (m * 2), _h - (m * 2), True);
 6001              		.loc 1 954 18 is_stmt 0 view .LVU1539
 6002 1df8 D003CDE1 		ldrd	r0, [sp, #48]	@,,
 6003              	@ armwave.c:954:         m, m, _w - (m * 2), _h - (m * 2), True);
 6004              		.loc 1 954 23 view .LVU1540
 6005 1dfc 873F67E0 		rsb	r3, r7, r7, lsl #31	@ tmp259, m, m,
 6006              	@ armwave.c:952:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 952:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 6007              		.loc 1 952 5 view .LVU1541
 6008 1e00 042095E5 		ldr	r2, [r5, #4]	@ g_yuv_image.131_26, g_yuv_image
 6009              	@ armwave.c:954:         m, m, _w - (m * 2), _h - (m * 2), True);
 6010              		.loc 1 954 23 view .LVU1542
 6011 1e04 8330A0E1 		lsl	r3, r3, #1	@ tmp260, tmp259,
 6012              	@ armwave.c:954:         m, m, _w - (m * 2), _h - (m * 2), True);
 6013              		.loc 1 954 32 view .LVU1543
 6014 1e08 011083E0 		add	r1, r3, r1	@ tmp270, tmp260, _h
 6015              	@ armwave.c:954:         m, m, _w - (m * 2), _h - (m * 2), True);
 6016              		.loc 1 954 18 view .LVU1544
 6017 1e0c 003083E0 		add	r3, r3, r0	@ tmp272, tmp260, _w
 6018              	@ armwave.c:952:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 952:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 6019              		.loc 1 952 5 view .LVU1545
 6020 1e10 0100A0E3 		mov	r0, #1	@ tmp269,
 6021 1e14 18708DE5 		str	r7, [sp, #24]	@ m,
 6022 1e18 14708DE5 		str	r7, [sp, #20]	@ m,
 6023 1e1c 20108DE5 		str	r1, [sp, #32]	@ tmp270,
 6024 1e20 1C308DE5 		str	r3, [sp, #28]	@ tmp272,
 6025 1e24 24008DE5 		str	r0, [sp, #36]	@ tmp269,
 6026 1e28 083092E5 		ldr	r3, [r2, #8]	@ g_yuv_image.131_26->height, g_yuv_image.131_26->height
 6027              	@ armwave.c:950:     g_canvas_dims_last = g_canvas_dims;
 950:armwave.c     ****     
 6028              		.loc 1 950 24 view .LVU1546
 6029 1e2c 030094E8 		ldm	r4, {r0, r1}	@ tmp282,,
 6030              	@ armwave.c:952:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 952:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 6031              		.loc 1 952 5 view .LVU1547
 6032 1e30 7CC09FE5 		ldr	ip, .L289+32	@ tmp265,
 6033 1e34 10308DE5 		str	r3, [sp, #16]	@ g_yuv_image.131_26->height,
 6034 1e38 04E092E5 		ldr	lr, [r2, #4]	@ g_yuv_image.131_26->width, g_yuv_image.131_26->width
 6035 1e3c 0030A0E3 		mov	r3, #0	@ tmp276,
 6036 1e40 0CE08DE5 		str	lr, [sp, #12]	@ g_yuv_image.131_26->width,
 6037 1e44 00208DE5 		str	r2, [sp]	@ g_yuv_image.131_26,
 6038              	@ armwave.c:950:     g_canvas_dims_last = g_canvas_dims;
 950:armwave.c     ****     
 6039              		.loc 1 950 24 view .LVU1548
 6040 1e48 030086E8 		stm	r6, {r0, r1}	@ tmp286,,
 952:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 6041              		.loc 1 952 5 is_stmt 1 view .LVU1549
 6042 1e4c 002095E5 		ldr	r2, [r5]	@, g_window
 6043 1e50 08308DE5 		str	r3, [sp, #8]	@ tmp276,
 6044 1e54 00109CE5 		ldr	r1, [ip]	@, g_xv_port
 6045 1e58 000098E5 		ldr	r0, [r8]	@, g_dpy
 6046 1e5c 04308DE5 		str	r3, [sp, #4]	@ tmp276,
 6047 1e60 083095E5 		ldr	r3, [r5, #8]	@, g_gc
 6048 1e64 FEFFFFEB 		bl	XvShmPutImage		@
 6049              	.LVL377:
 955:armwave.c     ****     
 956:armwave.c     ****     armwave_render_graticule();
 6050              		.loc 1 956 5 view .LVU1550
 6051 1e68 FEFFFFEB 		bl	armwave_render_graticule		@
 6052              	.LVL378:
 957:armwave.c     **** 
 958:armwave.c     ****     //XFlush(g_dpy);
 959:armwave.c     **** 
 960:armwave.c     ****     g_frame_num++;
 6053              		.loc 1 960 5 view .LVU1551
 6054              	@ armwave.c:960:     g_frame_num++;
 6055              		.loc 1 960 16 is_stmt 0 view .LVU1552
 6056 1e6c 0C3095E5 		ldr	r3, [r5, #12]	@ g_frame_num, g_frame_num
 6057 1e70 013083E2 		add	r3, r3, #1	@ tmp280, g_frame_num,
 6058 1e74 0C3085E5 		str	r3, [r5, #12]	@ tmp280, g_frame_num
 6059              	@ armwave.c:961: }
 961:armwave.c     **** }
 6060              		.loc 1 961 1 view .LVU1553
 6061 1e78 3CD08DE2 		add	sp, sp, #60	@,,
 6062              		.cfi_remember_state
 6063              		.cfi_def_cfa_offset 36
 6064              		@ sp needed	@
 6065 1e7c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 6066              	.LVL379:
 6067              	.L288:
 6068              		.cfi_restore_state
 6069              	.LBB138:
 6070              	.LBB131:
 496:armwave.c     ****         return;
 6071              		.loc 1 496 9 is_stmt 1 view .LVU1554
 6072 1e80 30009FE5 		ldr	r0, .L289+36	@,
 6073 1e84 FEFFFFEB 		bl	puts		@
 6074              	.LVL380:
 497:armwave.c     ****     }
 6075              		.loc 1 497 9 view .LVU1555
 6076 1e88 92FFFFEA 		b	.L280		@
 6077              	.LVL381:
 6078              	.L285:
 497:armwave.c     ****     }
 6079              		.loc 1 497 9 is_stmt 0 view .LVU1556
 6080              	.LBE131:
 6081              	.LBE138:
 6082              	.LBB139:
 6083              	.LBB136:
 6084              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 6085              		.loc 1 384 52 view .LVU1557
 6086 1e8c 0080A0E1 		mov	r8, r0	@ ypos, tmp204
 6087 1e90 A9FFFFEA 		b	.L281		@
 6088              	.L290:
 6089              		.align	2
 6090              	.L289:
 6091 1e94 00000000 		.word	.LANCHOR1
 6092 1e98 00000000 		.word	.LANCHOR2
 6093 1e9c 00000000 		.word	g_armwave_state
 6094 1ea0 00000000 		.word	g_dpy
 6095 1ea4 00000000 		.word	g_canvas_dims_last
 6096 1ea8 00000000 		.word	g_canvas_dims
 6097 1eac 5C060000 		.word	.LC39
 6098 1eb0 94060000 		.word	.LC40
 6099 1eb4 00000000 		.word	g_xv_port
 6100 1eb8 3C020000 		.word	.LC16
 6101              	.LBE136:
 6102              	.LBE139:
 6103              		.cfi_endproc
 6104              	.LFE85:
 6106              		.comm	g_xswa,60,4
 6107              		.comm	g_grat_subcolour,12,4
 6108              		.comm	g_grat_colour,12,4
 6109              		.comm	g_yuv_shminfo,16,4
 6110              		.global	g_yuv_image
 6111              		.global	g_gc
 6112              		.comm	g_vinfo,40,4
 6113              		.comm	g_xv_port,4,4
 6114              		.comm	g_dpy,4,4
 6115              		.global	g_window
 6116              		.global	g_n_test_waves
 6117              		.global	g_frame_num
 6118              		.comm	g_canvas_dims_last,8,4
 6119              		.comm	g_canvas_dims,8,4
 6120              		.global	g_fill_black
 6121              		.comm	g_yuv_lut,768,4
 6122              		.comm	g_armwave_state,160,4
 6123              		.section	.rodata
 6124              		.align	2
 6125              		.set	.LANCHOR0,. + 0
 6128              	__PRETTY_FUNCTION__.20854:
 6129 0000 61726D77 		.ascii	"armwave_setup_render\000"
 6129      6176655F 
 6129      73657475 
 6129      705F7265 
 6129      6E646572 
 6130 0015 000000   		.space	3
 6133              	__PRETTY_FUNCTION__.20861:
 6134 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 6134      6176655F 
 6134      7365745F 
 6134      77617665 
 6134      5F706F69 
 6135 0031 000000   		.space	3
 6138              	__PRETTY_FUNCTION__.20868:
 6139 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 6139      6176655F 
 6139      7365745F 
 6139      77617665 
 6139      5F706F69 
 6140 0051 000000   		.space	3
 6143              	g_fill_black:
 6144 0054 000000   		.space	3
 6145              		.data
 6146              		.align	2
 6147              		.set	.LANCHOR2,. + 0
 6150              	g_n_test_waves:
 6151 0000 08000000 		.word	8
 6152              		.bss
 6153              		.align	2
 6154              		.set	.LANCHOR1,. + 0
 6157              	g_window:
 6158 0000 00000000 		.space	4
 6161              	g_yuv_image:
 6162 0004 00000000 		.space	4
 6165              	g_gc:
 6166 0008 00000000 		.space	4
 6169              	g_frame_num:
 6170 000c 00000000 		.space	4
 6171              		.section	.rodata.str1.4,"aMS",%progbits,1
 6172              		.align	2
 6173              	.LC0:
 6174 0000 25336420 		.ascii	"%3d = [%3d, %3d, %3d]\012\000"
 6174      3D205B25 
 6174      33642C20 
 6174      2533642C 
 6174      20253364 
 6175 0017 00       		.space	1
 6176              	.LC1:
 6177 0018 25336420 		.ascii	"%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\012\000"
 6177      3D205B25 
 6177      33642C20 
 6177      2533642C 
 6177      20253364 
 6178 0042 0000     		.space	2
 6179              	.LC2:
 6180 0044 25336420 		.ascii	"%3d = (%3d, %3d, %3d)\012\000"
 6180      3D202825 
 6180      33642C20 
 6180      2533642C 
 6180      20253364 
 6181 005b 00       		.space	1
 6182              	.LC3:
 6183 005c 76302E32 		.ascii	"v0.2.4\000"
 6183      2E3400
 6184 0063 00       		.space	1
 6185              	.LC4:
 6186 0064 61726D77 		.ascii	"armwave version: %s\012\000"
 6186      61766520 
 6186      76657273 
 6186      696F6E3A 
 6186      2025730A 
 6187 0079 000000   		.space	3
 6188              	.LC5:
 6189 007c 6275696C 		.ascii	"built without Python linkings\000"
 6189      74207769 
 6189      74686F75 
 6189      74205079 
 6189      74686F6E 
 6190 009a 0000     		.space	2
 6191              	.LC6:
 6192 009c 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 6192      75742062 
 6192      75666665 
 6192      723A2030 
 6192      78253038 
 6193 00b3 00       		.space	1
 6194              	.LC7:
 6195 00b4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 6195      20653D25 
 6195      6420773D 
 6195      25642077 
 6195      733D2564 
 6196              	.LC8:
 6197 00e0 4572726F 		.ascii	"Error: start point more than end point\000"
 6197      723A2073 
 6197      74617274 
 6197      20706F69 
 6197      6E74206D 
 6198 0107 00       		.space	1
 6199              	.LC9:
 6200 0108 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 6200      7566665F 
 6200      73697A65 
 6200      3D25642C 
 6200      20636D70 
 6201 013b 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 6201      5F776964 
 6201      74683D25 
 6201      642C2077 
 6201      6176655F 
 6202 0165 000000   		.space	3
 6203              	.LC10:
 6204 0168 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 6204      6F632066 
 6204      61696C75 
 6204      72652061 
 6204      6C6C6F63 
 6205 019b 2E636831 		.ascii	".ch1_buffer)\012\000"
 6205      5F627566 
 6205      66657229 
 6205      0A00
 6206 01a9 000000   		.space	3
 6207              	.LC11:
 6208 01ac 61726D77 		.ascii	"armwave.c\000"
 6208      6176652E 
 6208      6300
 6209 01b6 0000     		.space	2
 6210              	.LC12:
 6211 01b8 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 6211      6D776176 
 6211      655F7374 
 6211      6174652E 
 6211      78636F6F 
 6212 01e1 000000   		.space	3
 6213              	.LC13:
 6214 01e4 78636F6F 		.ascii	"xcoord_to_xpixel[%5d] = %5d\012\000"
 6214      72645F74 
 6214      6F5F7870 
 6214      6978656C 
 6214      5B253564 
 6215 0201 000000   		.space	3
 6216              	.LC14:
 6217 0204 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 6217      3A203078 
 6217      25303878 
 6217      20307825 
 6217      30387820 
 6218              	.LC15:
 6219 0228 77617665 		.ascii	"wave_buffer != NULL\000"
 6219      5F627566 
 6219      66657220 
 6219      213D204E 
 6219      554C4C00 
 6220              	.LC16:
 6221 023c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 6221      6176655F 
 6221      7365745F 
 6221      77617665 
 6221      5F706F69 
 6222 026f 78636565 		.ascii	"xceeded\000"
 6222      64656400 
 6223 0277 00       		.space	1
 6224              	.LC17:
 6225 0278 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 6225      5F627566 
 6225      6665725F 
 6225      70747220 
 6225      213D2030 
 6226 028d 000000   		.space	3
 6227              	.LC18:
 6228 0290 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 6228      6176655F 
 6228      74657374 
 6228      5F627566 
 6228      6665725F 
 6229 02c3 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 6229      20627566 
 6229      66657220 
 6229      28256420 
 6229      62797465 
 6230              	.LC19:
 6231 02e4 43616C63 		.ascii	"Calculating test set %d (length=%d)\012\000"
 6231      756C6174 
 6231      696E6720 
 6231      74657374 
 6231      20736574 
 6232 0309 000000   		.space	3
 6233              	.LC20:
 6234 030c 61726D77 		.ascii	"armwave: armwave_set_window_dims(%d,%d,%d,%d)\012\000"
 6234      6176653A 
 6234      2061726D 
 6234      77617665 
 6234      5F736574 
 6235 033b 00       		.space	1
 6236              	.LC21:
 6237 033c 41726D57 		.ascii	"ArmWave Render Buffer\000"
 6237      61766520 
 6237      52656E64 
 6237      65722042 
 6237      75666665 
 6238 0352 0000     		.space	2
 6239              	.LC22:
 6240 0354 57696E64 		.ascii	"Window done, mapping...\000"
 6240      6F772064 
 6240      6F6E652C 
 6240      206D6170 
 6240      70696E67 
 6241              	.LC23:
 6242 036c 416C6C20 		.ascii	"All done in window\000"
 6242      646F6E65 
 6242      20696E20 
 6242      77696E64 
 6242      6F7700
 6243 037f 00       		.space	1
 6244              	.LC24:
 6245 0380 61726D77 		.ascii	"armwave: Created X11 Window: %d (0x%08x)\012\000"
 6245      6176653A 
 6245      20437265 
 6245      61746564 
 6245      20583131 
 6246 03aa 0000     		.space	2
 6247              	.LC25:
 6248 03ac 61726D77 		.ascii	"armwave: initialising for X11...\000"
 6248      6176653A 
 6248      20696E69 
 6248      7469616C 
 6248      6973696E 
 6249 03cd 000000   		.space	3
 6250              	.LC26:
 6251 03d0 4572726F 		.ascii	"Error: Fatal X11: Cannot open display.\000"
 6251      723A2046 
 6251      6174616C 
 6251      20583131 
 6251      3A204361 
 6252 03f7 00       		.space	1
 6253              	.LC27:
 6254 03f8 466F756E 		.ascii	"Found 24bit TrueColor.\000"
 6254      64203234 
 6254      62697420 
 6254      54727565 
 6254      436F6C6F 
 6255 040f 00       		.space	1
 6256              	.LC28:
 6257 0410 4572726F 		.ascii	"Error: Fatal X11: not supported 24-bit TrueColor di"
 6257      723A2046 
 6257      6174616C 
 6257      20583131 
 6257      3A206E6F 
 6258 0443 73706C61 		.ascii	"splay.\000"
 6258      792E00
 6259 044a 0000     		.space	2
 6260              	.LC29:
 6261 044c 61726D77 		.ascii	"armwave_init_xvimage_shared(%d,%d)\012\000"
 6261      6176655F 
 6261      696E6974 
 6261      5F787669 
 6261      6D616765 
 6262              	.LC30:
 6263 0470 4572726F 		.ascii	"Error: Fatal X11: Shared memory extension not avail"
 6263      723A2046 
 6263      6174616C 
 6263      20583131 
 6263      3A205368 
 6264 04a3 61626C65 		.ascii	"able or failed to allocate shared memory.\000"
 6264      206F7220 
 6264      6661696C 
 6264      65642074 
 6264      6F20616C 
 6265 04cd 000000   		.space	3
 6266              	.LC31:
 6267 04d0 4572726F 		.ascii	"Error: Fatal X11: Unable to find XVideo extension ("
 6267      723A2046 
 6267      6174616C 
 6267      20583131 
 6267      3A20556E 
 6268 0503 2564292E 		.ascii	"%d).  Is it configured correctly?\012\000"
 6268      20204973 
 6268      20697420 
 6268      636F6E66 
 6268      69677572 
 6269 0526 0000     		.space	2
 6270              	.LC32:
 6271 0528 4572726F 		.ascii	"Error: Fatal X11: Unable to query XVideo extension "
 6271      723A2046 
 6271      6174616C 
 6271      20583131 
 6271      3A20556E 
 6272 055b 28256429 		.ascii	"(%d).  Is it configured correctly?\012\000"
 6272      2E202049 
 6272      73206974 
 6272      20636F6E 
 6272      66696775 
 6273 057f 00       		.space	1
 6274              	.LC33:
 6275 0580 4572726F 		.ascii	"Error: Fatal X11: Unable to use the port %d\012\012"
 6275      723A2046 
 6275      6174616C 
 6275      20583131 
 6275      3A20556E 
 6276 05ad 00       		.ascii	"\000"
 6277 05ae 0000     		.space	2
 6278              	.LC34:
 6279 05b0 41747461 		.ascii	"Attaching XvShm...\000"
 6279      6368696E 
 6279      67205876 
 6279      53686D2E 
 6279      2E2E00
 6280 05c3 00       		.space	1
 6281              	.LC35:
 6282 05c4 7975765F 		.ascii	"yuv_image plane %d offset %d pitch %d\012\000"
 6282      696D6167 
 6282      6520706C 
 6282      616E6520 
 6282      2564206F 
 6283 05eb 00       		.space	1
 6284              	.LC36:
 6285 05ec 4572726F 		.ascii	"Error: Fatal X11: XShmAttached failed\000"
 6285      723A2046 
 6285      6174616C 
 6285      20583131 
 6285      3A205853 
 6286 0612 0000     		.space	2
 6287              	.LC37:
 6288 0614 25642062 		.ascii	"%d bytes for XvImage, shmid %d, xv_port %d, buffer:"
 6288      79746573 
 6288      20666F72 
 6288      20587649 
 6288      6D616765 
 6289 0647 20307825 		.ascii	" 0x%08x\012\000"
 6289      3038780A 
 6289      00
 6290              	.LC38:
 6291 0650 2533642C 		.ascii	"%3d, %3d\012\000"
 6291      20253364 
 6291      0A00
 6292 065a 0000     		.space	2
 6293              	.LC39:
 6294 065c 43616E76 		.ascii	"Canvas dims: %d x %d (margin: %d) (YUV image: %d x "
 6294      61732064 
 6294      696D733A 
 6294      20256420 
 6294      78202564 
 6295 068f 2564290A 		.ascii	"%d)\012\000"
 6295      00
 6296              	.LC40:
 6297 0694 54657374 		.ascii	"Test buf ptr: %d\012\000"
 6297      20627566 
 6297      20707472 
 6297      3A202564 
 6297      0A00
 6298              		.text
 6299              	.Letext0:
 6300              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 6301              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 6302              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 6303              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 6304              		.file 6 "/usr/include/stdio.h"
 6305              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 6306              		.file 8 "/usr/include/errno.h"
 6307              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 6308              		.file 10 "/usr/include/unistd.h"
 6309              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 6310              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 6311              		.file 13 "/usr/local/include/python3.8/pyport.h"
 6312              		.file 14 "/usr/include/math.h"
 6313              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 6314              		.file 16 "/usr/include/time.h"
 6315              		.file 17 "/usr/local/include/python3.8/pymem.h"
 6316              		.file 18 "/usr/local/include/python3.8/object.h"
 6317              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 6318              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 6319              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 6320              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 6321              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 6322              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 6323              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 6324              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 6325              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 6326              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 6327              		.file 29 "/usr/local/include/python3.8/longobject.h"
 6328              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 6329              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 6330              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 6331              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 6332              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 6333              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 6334              		.file 36 "/usr/local/include/python3.8/listobject.h"
 6335              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 6336              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 6337              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 6338              		.file 40 "/usr/local/include/python3.8/setobject.h"
 6339              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 6340              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 6341              		.file 43 "/usr/local/include/python3.8/classobject.h"
 6342              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 6343              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 6344              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 6345              		.file 47 "/usr/local/include/python3.8/traceback.h"
 6346              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 6347              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 6348              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 6349              		.file 51 "/usr/local/include/python3.8/pystate.h"
 6350              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 6351              		.file 53 "/usr/local/include/python3.8/genobject.h"
 6352              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 6353              		.file 55 "/usr/local/include/python3.8/structseq.h"
 6354              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 6355              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 6356              		.file 58 "/usr/local/include/python3.8/codecs.h"
 6357              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 6358              		.file 60 "/usr/local/include/python3.8/context.h"
 6359              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 6360              		.file 62 "/usr/local/include/python3.8/code.h"
 6361              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 6362              		.file 64 "/usr/local/include/python3.8/ceval.h"
 6363              		.file 65 "/usr/local/include/python3.8/import.h"
 6364              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 6365              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 6366              		.file 68 "/usr/include/X11/X.h"
 6367              		.file 69 "/usr/include/X11/Xlib.h"
 6368              		.file 70 "/usr/include/X11/Xutil.h"
 6369              		.file 71 "/usr/include/X11/extensions/XShm.h"
 6370              		.file 72 "/usr/include/malloc.h"
 6371              		.file 73 "/usr/include/X11/extensions/Xv.h"
 6372              		.file 74 "/usr/include/X11/extensions/Xvlib.h"
 6373              		.file 75 "armwave.h"
 6374              		.file 76 "<built-in>"
 6375              		.file 77 "/usr/include/arm-linux-gnueabihf/sys/shm.h"
 6376              		.file 78 "/usr/include/stdlib.h"
 6377              		.file 79 "/usr/include/assert.h"
 6378              		.file 80 "/usr/include/string.h"
 6379              		.file 81 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
