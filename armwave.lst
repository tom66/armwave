   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_NWAVES                 64
  25:armwave.c     **** #define TEST_WAVE_SIZE              2048
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t gamma_table[256];
  40:armwave.c     **** 
  41:armwave.c     **** /*
  42:armwave.c     ****  * Create a gamma table.
  43:armwave.c     ****  */
  44:armwave.c     **** void test_create_gamma()
  45:armwave.c     **** {
  85              		.loc 1 45 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  46:armwave.c     ****     int i;
  89              		.loc 1 46 5 view .LVU1
  47:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 47 5 view .LVU2
  91              	.LVL0:
  48:armwave.c     **** 
  49:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 49 5 view .LVU3
  93              	@ armwave.c:45: {
  45:armwave.c     ****     int i;
  94              		.loc 1 45 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.43,
 110              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 50 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 50 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 50 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.43,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.43,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 50 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 50 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.43
 128              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 50 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 50 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 50 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 50 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 50 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 49 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.43, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:52: }
  51:armwave.c     ****     }
  52:armwave.c     **** }
 155              		.loc 1 52 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 52 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * Initialise things.  STUB, mostly.
  56:armwave.c     ****  */
  57:armwave.c     **** void armwave_init()
  58:armwave.c     **** {
 187              		.loc 1 58 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  59:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 59 5 view .LVU19
 193              	@ armwave.c:59:     g_armwave_state.flags = 0;
 194              		.loc 1 59 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:61:     printf("armwave version: %s\n", ARMWAVE_VER);
  60:armwave.c     **** 
  61:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 61 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:59:     g_armwave_state.flags = 0;
  59:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 59 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 61 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  62:armwave.c     **** }
  63:armwave.c     **** 
  64:armwave.c     **** /*
  65:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  66:armwave.c     ****  * pre-computed.
  67:armwave.c     ****  *
  68:armwave.c     ****  * @param    slice_y        Slice to render at
  69:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  70:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  71:armwave.c     ****  */
  72:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  73:armwave.c     **** {
 225              		.loc 1 73 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  74:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 74 5 view .LVU25
  75:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 75 5 view .LVU26
  76:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 76 5 view .LVU27
  77:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 77 5 view .LVU28
  78:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 78 5 view .LVU29
  79:armwave.c     **** 
  80:armwave.c     ****     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 234              		.loc 1 80 5 view .LVU30
 235              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 73 1 is_stmt 0 view .LVU31
 237 009c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 40
 239              		.cfi_offset 3, -40
 240              		.cfi_offset 4, -36
 241              		.cfi_offset 5, -32
 242              		.cfi_offset 6, -28
 243              		.cfi_offset 7, -24
 244              		.cfi_offset 8, -20
 245              		.cfi_offset 9, -16
 246              		.cfi_offset 10, -12
 247              		.cfi_offset 11, -8
 248              		.cfi_offset 14, -4
 249              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 250              		.loc 1 73 1 view .LVU32
 251 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 252              	@ armwave.c:80:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 253              		.loc 1 80 5 view .LVU33
 254 00a4 F4509FE5 		ldr	r5, .L25	@ tmp247,
 255              	@ armwave.c:73: {
  73:armwave.c     ****     int yy, ys, w, scale_value;
 256              		.loc 1 73 1 view .LVU34
 257 00a8 0190A0E1 		mov	r9, r1	@ height, height
 258              	@ armwave.c:80:     printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
 259              		.loc 1 80 5 view .LVU35
 260 00ac F0009FE5 		ldr	r0, .L25+4	@,
 261              	.LVL7:
 262              		.loc 1 80 5 view .LVU36
 263 00b0 041095E5 		ldr	r1, [r5, #4]	@, g_armwave_state.ch1_buffer
 264              	.LVL8:
 265              		.loc 1 80 5 view .LVU37
 266 00b4 FEFFFFEB 		bl	printf		@
 267              	.LVL9:
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 268              		.loc 1 81 5 is_stmt 1 view .LVU38
 269              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 270              		.loc 1 84 5 is_stmt 0 view .LVU39
 271 00b8 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 272              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 273              		.loc 1 81 63 view .LVU40
 274 00bc 306095E5 		ldr	r6, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 275              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 276              		.loc 1 84 5 view .LVU41
 277 00c0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 278              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 279              		.loc 1 81 40 view .LVU42
 280 00c4 044095E5 		ldr	r4, [r5, #4]	@ _2, g_armwave_state.ch1_buffer
 281              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 282              		.loc 1 81 63 view .LVU43
 283 00c8 960706E0 		mul	r6, r6, r7	@ _4, g_armwave_state.bitdepth_height, slice_y
 284              	.LVL10:
 285              		.loc 1 84 5 is_stmt 1 view .LVU44
 286              		.loc 1 84 5 is_stmt 0 view .LVU45
 287 00cc F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 288              	@ armwave.c:85:         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  85:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 289              		.loc 1 85 9 view .LVU46
 290 00d0 D0809FE5 		ldr	r8, .L25+8	@ tmp249,
 291 00d4 047047E2 		sub	r7, r7, #4	@ _36, slice_y,
 292              	.LVL11:
 293              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 294              		.loc 1 84 11 view .LVU47
 295 00d8 00A0A0E3 		mov	r10, #0	@ w,
 296              	.LVL12:
 297              	.L15:
 298              		.loc 1 85 9 is_stmt 1 view .LVU48
 299 00dc 141095E5 		ldr	r1, [r5, #20]	@, g_armwave_state.wave_buffer
 300 00e0 0800A0E1 		mov	r0, r8	@, tmp249
 301 00e4 FEFFFFEB 		bl	printf		@
 302              	.LVL13:
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 86 9 view .LVU49
 304              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 305              		.loc 1 86 64 is_stmt 0 view .LVU50
 306 00e8 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 307              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  87:armwave.c     **** 
  88:armwave.c     ****         // roll through y and render the slice into the out buffer
  89:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  90:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 308              		.loc 1 90 9 view .LVU51
 309 00ec 000059E3 		cmp	r9, #0	@ height,
 310              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 311              		.loc 1 86 36 view .LVU52
 312 00f0 14C095E5 		ldr	ip, [r5, #20]	@ _6, g_armwave_state.wave_buffer
 313              	@ armwave.c:86:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  86:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 314              		.loc 1 86 64 view .LVU53
 315 00f4 930A03E0 		mul	r3, r3, r10	@ _9, g_armwave_state.wave_stride, w
 316              	.LVL14:
 317              		.loc 1 90 9 is_stmt 1 view .LVU54
 318              		.loc 1 90 9 is_stmt 0 view .LVU55
 319 00f8 2300000A 		beq	.L13		@,
 320 00fc 073083E0 		add	r3, r3, r7	@ tmp199, _9, _36
 321              	.LVL15:
 322              		.loc 1 90 9 view .LVU56
 323 0100 03C08CE0 		add	ip, ip, r3	@ ivtmp.50, _6, tmp199
 324              	.LVL16:
 325              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
 326              		.loc 1 90 16 view .LVU57
 327 0104 0030A0E3 		mov	r3, #0	@ yy,
 328              	.LVL17:
 329              	.L14:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 330              		.loc 1 91 13 is_stmt 1 view .LVU58
 331              	@ armwave.c:91:             word = *(uint32_t*)(wave_base + yy);
 332              		.loc 1 91 18 is_stmt 0 view .LVU59
 333 0108 0420BCE5 		ldr	r2, [ip, #4]!	@ word, MEM[base: _149, offset: 0B]
 334              	.LVL18:
  92:armwave.c     **** 
  93:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 335              		.loc 1 93 13 is_stmt 1 view .LVU60
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  95:armwave.c     ****                 scale_value = (word & 0xff);
 336              		.loc 1 95 17 view .LVU61
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 337              		.loc 1 96 17 view .LVU62
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 338              		.loc 1 97 17 view .LVU63
 339              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 340              		.loc 1 96 63 is_stmt 0 view .LVU64
 341 010c 300095E5 		ldr	r0, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 342 0110 01B083E2 		add	fp, r3, #1	@ tmp211, yy,
 343              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
 344              		.loc 1 97 47 view .LVU65
 345 0114 7210E6E6 		uxtab	r1, r6, r2	@ tmp204, _4, word
 346 0118 901320E0 		mla	r0, r0, r3, r1	@ tmp205, g_armwave_state.bitdepth_height, yy, tmp204
 347              	@ armwave.c:98:                 word >>= 8;
  98:armwave.c     ****                 word >>= 8;
 348              		.loc 1 98 22 view .LVU66
 349 011c 22E4A0E1 		lsr	lr, r2, #8	@ word, word,
 350              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 97 47 view .LVU67
 352 0120 0010D4E7 		ldrb	r1, [r4, r0]	@ zero_extendqisi2	@ *_59, *_59
 353 0124 7EE0E6E6 		uxtab	lr, r6, lr	@ tmp216, _4, word
 354 0128 011081E2 		add	r1, r1, #1	@ tmp208, *_59,
 355 012c 0010C4E7 		strb	r1, [r4, r0]	@ tmp208, *_59
 356              	.LVL19:
 357              		.loc 1 98 17 is_stmt 1 view .LVU68
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 358              		.loc 1 95 17 view .LVU69
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 96 17 view .LVU70
  97:armwave.c     ****                 word >>= 8;
 360              		.loc 1 97 17 view .LVU71
 361              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 362              		.loc 1 96 63 is_stmt 0 view .LVU72
 363 0130 301095E5 		ldr	r1, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 364              	@ armwave.c:98:                 word >>= 8;
 365              		.loc 1 98 22 view .LVU73
 366 0134 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 367              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 368              		.loc 1 97 47 view .LVU74
 369 0138 222C86E0 		add	r2, r6, r2, lsr #24	@ tmp239, _4, word,
 370              	.LVL20:
  97:armwave.c     ****                 word >>= 8;
 371              		.loc 1 97 47 view .LVU75
 372 013c 91EB21E0 		mla	r1, r1, fp, lr	@ tmp217, g_armwave_state.bitdepth_height, tmp211, tmp216
 373 0140 70E0E6E6 		uxtab	lr, r6, r0	@ tmp228, _4, word
 374 0144 01B0D4E7 		ldrb	fp, [r4, r1]	@ zero_extendqisi2	@ *_79, *_79
 375              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 376              		.loc 1 96 63 view .LVU76
 377 0148 020083E2 		add	r0, r3, #2	@ tmp223, yy,
 378              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 379              		.loc 1 97 47 view .LVU77
 380 014c 01B08BE2 		add	fp, fp, #1	@ tmp220, *_79,
 381 0150 01B0C4E7 		strb	fp, [r4, r1]	@ tmp220, *_79
 382              	.LVL21:
 383              		.loc 1 98 17 is_stmt 1 view .LVU78
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 384              		.loc 1 95 17 view .LVU79
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 385              		.loc 1 96 17 view .LVU80
  97:armwave.c     ****                 word >>= 8;
 386              		.loc 1 97 17 view .LVU81
 387              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 388              		.loc 1 96 63 is_stmt 0 view .LVU82
 389 0154 30B095E5 		ldr	fp, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 390 0158 031083E2 		add	r1, r3, #3	@ tmp235, yy,
 391              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 392              		.loc 1 90 37 view .LVU83
 393 015c 043083E2 		add	r3, r3, #4	@ yy, yy,
 394              	.LVL22:
 395              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 396              		.loc 1 97 47 view .LVU84
 397 0160 9BE020E0 		mla	r0, fp, r0, lr	@ tmp229, g_armwave_state.bitdepth_height, tmp223, tmp228
 398              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 399              		.loc 1 90 9 view .LVU85
 400 0164 030059E1 		cmp	r9, r3	@ height, yy
 401              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 402              		.loc 1 97 47 view .LVU86
 403 0168 00E0D4E7 		ldrb	lr, [r4, r0]	@ zero_extendqisi2	@ *_99, *_99
 404 016c 01E08EE2 		add	lr, lr, #1	@ tmp232, *_99,
 405 0170 00E0C4E7 		strb	lr, [r4, r0]	@ tmp232, *_99
 406              	.LVL23:
 407              		.loc 1 98 17 is_stmt 1 view .LVU87
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 408              		.loc 1 95 17 view .LVU88
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 409              		.loc 1 96 17 view .LVU89
  97:armwave.c     ****                 word >>= 8;
 410              		.loc 1 97 17 view .LVU90
 411              	@ armwave.c:96:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 96 63 is_stmt 0 view .LVU91
 413 0174 300095E5 		ldr	r0, [r5, #48]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 414              	@ armwave.c:97:                 *(write_buffer + scale_value) += 1;
  97:armwave.c     ****                 word >>= 8;
 415              		.loc 1 97 47 view .LVU92
 416 0178 902122E0 		mla	r2, r0, r1, r2	@ tmp240, g_armwave_state.bitdepth_height, tmp235, tmp239
 417 017c 0210D4E7 		ldrb	r1, [r4, r2]	@ zero_extendqisi2	@ *_119, *_119
 418 0180 011081E2 		add	r1, r1, #1	@ tmp243, *_119,
 419 0184 0210C4E7 		strb	r1, [r4, r2]	@ tmp243, *_119
 420              		.loc 1 98 17 is_stmt 1 view .LVU93
 421              	.LVL24:
 422              	@ armwave.c:90:         for(yy = 0; yy < height; yy += 4) {
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 423              		.loc 1 90 9 is_stmt 0 view .LVU94
 424 0188 DEFFFF8A 		bhi	.L14		@,
 425              	.LVL25:
 426              	.L13:
 427              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 428              		.loc 1 84 5 view .LVU95
 429 018c 283095E5 		ldr	r3, [r5, #40]	@ g_armwave_state.waves, g_armwave_state.waves
 430              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 431              		.loc 1 84 44 view .LVU96
 432 0190 01A08AE2 		add	r10, r10, #1	@ w, w,
 433              	.LVL26:
 434              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 435              		.loc 1 84 5 view .LVU97
 436 0194 0A0053E1 		cmp	r3, r10	@ g_armwave_state.waves, w
 437 0198 CFFFFF8A 		bhi	.L15		@,
 438 019c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 439              	.L26:
 440              		.align	2
 441              	.L25:
 442 01a0 00000000 		.word	g_armwave_state
 443 01a4 20000000 		.word	.LC2
 444 01a8 34000000 		.word	.LC3
 445              		.cfi_endproc
 446              	.LFE59:
 448              		.align	2
 449              		.global	armwave_fill_pixbuf_256
 450              		.syntax unified
 451              		.arm
 452              		.fpu vfp
 454              	armwave_fill_pixbuf_256:
 455              	.LVL27:
 456              	.LFB60:
  99:armwave.c     ****             }
 100:armwave.c     ****         }
 101:armwave.c     ****     }
 102:armwave.c     **** }
 103:armwave.c     **** 
 104:armwave.c     **** /*
 105:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 106:armwave.c     ****  */
 107:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 108:armwave.c     **** {
 457              		.loc 1 108 1 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 8
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 109:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 461              		.loc 1 109 5 view .LVU99
 110:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 462              		.loc 1 110 5 view .LVU100
 111:armwave.c     ****     uint8_t r, g, b, value;
 463              		.loc 1 111 5 view .LVU101
 112:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 464              		.loc 1 112 5 view .LVU102
 465              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 466              		.loc 1 108 1 is_stmt 0 view .LVU103
 467 01ac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 468              		.cfi_def_cfa_offset 36
 469              		.cfi_offset 4, -36
 470              		.cfi_offset 5, -32
 471              		.cfi_offset 6, -28
 472              		.cfi_offset 7, -24
 473              		.cfi_offset 8, -20
 474              		.cfi_offset 9, -16
 475              		.cfi_offset 10, -12
 476              		.cfi_offset 11, -8
 477              		.cfi_offset 14, -4
 478              	@ armwave.c:116:     assert(out_buffer != NULL);
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 114:armwave.c     ****     uint32_t offset;
 115:armwave.c     **** 
 116:armwave.c     ****     assert(out_buffer != NULL);
 479              		.loc 1 116 5 view .LVU104
 480 01b0 000050E3 		cmp	r0, #0	@ out_buffer
 481              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 482              		.loc 1 112 15 view .LVU105
 483 01b4 44529FE5 		ldr	r5, .L54	@ tmp360,
 484              	@ armwave.c:108: {
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 485              		.loc 1 108 1 view .LVU106
 486 01b8 0CD04DE2 		sub	sp, sp, #12	@,,
 487              		.cfi_def_cfa_offset 48
 488              	@ armwave.c:112:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 489              		.loc 1 112 15 view .LVU107
 490 01bc 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 491              	.LVL28:
 113:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 492              		.loc 1 113 5 is_stmt 1 view .LVU108
 114:armwave.c     **** 
 493              		.loc 1 114 5 view .LVU109
 494              		.loc 1 116 5 view .LVU110
 495 01c0 8900000A 		beq	.L52		@,
 117:armwave.c     **** 
 118:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 119:armwave.c     **** 
 120:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 496              		.loc 1 120 5 view .LVU111
 497              	@ armwave.c:120:     npix = g_armwave_state.target_width * 256;
 498              		.loc 1 120 41 is_stmt 0 view .LVU112
 499 01c4 48C095E5 		ldr	ip, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 500 01c8 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 501              	.LVL29:
 121:armwave.c     **** 
 122:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 502              		.loc 1 122 5 is_stmt 1 view .LVU113
 503              		.loc 1 122 5 is_stmt 0 view .LVU114
 504 01cc 00005CE3 		cmp	ip, #0	@ npix,
 505 01d0 0A0000DA 		ble	.L27		@,
 506              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 123:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 124:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 125:armwave.c     ****         // most normal waveforms.
 126:armwave.c     ****         wave_word = *base_32ptr++;
 127:armwave.c     **** 
 128:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 129:armwave.c     ****             for(i = 0; i < 4; i++) {
 130:armwave.c     ****                 value = wave_word & 0xff;
 131:armwave.c     ****                 wave_word >>= 8;
 132:armwave.c     **** 
 133:armwave.c     ****                 if(value != 0) {
 134:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 507              		.loc 1 134 52 view .LVU115
 508 01d4 FCA5D5E1 		ldrsh	r10, [r5, #92]	@ _70, g_armwave_state.ch1_color.r
 509              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 510              		.loc 1 135 52 view .LVU116
 511 01d8 FE95D5E1 		ldrsh	r9, [r5, #94]	@ _76, g_armwave_state.ch1_color.g
 512              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 513              		.loc 1 136 52 view .LVU117
 514 01dc F0B6D5E1 		ldrsh	fp, [r5, #96]	@ _80, g_armwave_state.ch1_color.b
 515              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 516              		.loc 1 122 11 view .LVU118
 517 01e0 0030A0E3 		mov	r3, #0	@ n,
 518 01e4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 519              	.LVL30:
 520              	.L36:
 126:armwave.c     **** 
 521              		.loc 1 126 9 is_stmt 1 view .LVU119
 522              	@ armwave.c:126:         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 523              		.loc 1 126 19 is_stmt 0 view .LVU120
 524 01e8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 525              	.LVL31:
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 526              		.loc 1 128 9 is_stmt 1 view .LVU121
 527              	@ armwave.c:128:         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 528              		.loc 1 128 11 is_stmt 0 view .LVU122
 529 01ec 000052E3 		cmp	r2, #0	@ wave_word,
 530 01f0 0400001A 		bne	.L53		@,
 531              	.LVL32:
 532              	.L31:
 533              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 534              		.loc 1 122 28 discriminator 2 view .LVU123
 535 01f4 043083E2 		add	r3, r3, #4	@ n, n,
 536              	.LVL33:
 537              	@ armwave.c:122:     for(n = 0; n < npix; n += 4) {
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 538              		.loc 1 122 5 discriminator 2 view .LVU124
 539 01f8 03005CE1 		cmp	ip, r3	@ npix, n
 540 01fc F9FFFFCA 		bgt	.L36		@,
 541              	.LVL34:
 542              	.L27:
 543              	@ armwave.c:155: }
 137:armwave.c     **** 
 138:armwave.c     ****                     r = MIN(rr, 255);
 139:armwave.c     ****                     g = MIN(gg, 255);
 140:armwave.c     ****                     b = MIN(bb, 255);
 141:armwave.c     **** 
 142:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 143:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 144:armwave.c     **** 
 145:armwave.c     ****                     // Is there a better way?
 146:armwave.c     ****                     nsub = n + i;
 147:armwave.c     ****                     xx = nsub & 0xff;
 148:armwave.c     ****                     yy = nsub >> 8;
 149:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 150:armwave.c     ****                     *(out_buffer_base + offset) = word;
 151:armwave.c     ****                 }
 152:armwave.c     ****             }
 153:armwave.c     ****         } 
 154:armwave.c     ****     }
 155:armwave.c     **** }
 544              		.loc 1 155 1 view .LVU125
 545 0200 0CD08DE2 		add	sp, sp, #12	@,,
 546              		.cfi_remember_state
 547              		.cfi_def_cfa_offset 36
 548              		@ sp needed	@
 549 0204 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 550              	.LVL35:
 551              	.L53:
 552              		.cfi_restore_state
 130:armwave.c     ****                 wave_word >>= 8;
 553              		.loc 1 130 17 is_stmt 1 view .LVU126
 131:armwave.c     **** 
 554              		.loc 1 131 17 view .LVU127
 555              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 556              		.loc 1 133 19 is_stmt 0 view .LVU128
 557 0208 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 558              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 559              		.loc 1 131 27 view .LVU129
 560 020c 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 561              	.LVL36:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 562              		.loc 1 133 17 is_stmt 1 view .LVU130
 563              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 564              		.loc 1 133 19 is_stmt 0 view .LVU131
 565 0210 1900000A 		beq	.L32		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 134 21 is_stmt 1 view .LVU132
 567              	.LVL37:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 568              		.loc 1 135 21 view .LVU133
 136:armwave.c     **** 
 569              		.loc 1 136 21 view .LVU134
 138:armwave.c     ****                     g = MIN(gg, 255);
 570              		.loc 1 138 21 view .LVU135
 139:armwave.c     ****                     b = MIN(bb, 255);
 571              		.loc 1 139 21 view .LVU136
 140:armwave.c     **** 
 572              		.loc 1 140 21 view .LVU137
 143:armwave.c     **** 
 573              		.loc 1 143 21 view .LVU138
 146:armwave.c     ****                     xx = nsub & 0xff;
 574              		.loc 1 146 21 view .LVU139
 147:armwave.c     ****                     yy = nsub >> 8;
 575              		.loc 1 147 21 view .LVU140
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 576              		.loc 1 148 21 view .LVU141
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 577              		.loc 1 149 21 view .LVU142
 150:armwave.c     ****                 }
 578              		.loc 1 150 21 view .LVU143
 579              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 580              		.loc 1 136 55 is_stmt 0 view .LVU144
 581 0214 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 582              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 583              		.loc 1 135 55 view .LVU145
 584 0218 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 585              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 586              		.loc 1 136 24 view .LVU146
 587 021c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 588              	.LVL38:
 589              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 590              		.loc 1 140 25 view .LVU147
 591 0220 FF0054E3 		cmp	r4, #255	@ bb,
 592              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 593              		.loc 1 135 24 view .LVU148
 594 0224 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 595              	.LVL39:
 596              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 597              		.loc 1 140 25 view .LVU149
 598 0228 FF40A0A3 		movge	r4, #255	@ bb,
 599              	.LVL40:
 600              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 601              		.loc 1 134 55 view .LVU150
 602 022c 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 603              	.LVL41:
 604              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 605              		.loc 1 139 25 view .LVU151
 606 0230 FF0058E3 		cmp	r8, #255	@ gg,
 607 0234 FF80A0A3 		movge	r8, #255	@ gg,
 608              	.LVL42:
 609              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 610              		.loc 1 134 24 view .LVU152
 611 0238 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 612              	.LVL43:
 613              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 614              		.loc 1 143 56 view .LVU153
 615 023c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 616              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 617              		.loc 1 150 39 view .LVU154
 618 0240 480095E5 		ldr	r0, [r5, #72]	@ tmp372, g_armwave_state.target_width
 619              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 620              		.loc 1 143 44 view .LVU155
 621 0244 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 622              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 623              		.loc 1 138 25 view .LVU156
 624 0248 FF0056E3 		cmp	r6, #255	@ rr,
 625              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 626              		.loc 1 143 56 view .LVU157
 627 024c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 628              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 629              		.loc 1 147 24 view .LVU158
 630 0250 7370EFE6 		uxtb	r7, r3	@ xx, n
 631              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 632              		.loc 1 143 44 view .LVU159
 633 0254 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 634              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 635              		.loc 1 143 51 view .LVU160
 636 0258 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 637              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 138 25 view .LVU161
 639 025c FF60A0A3 		movge	r6, #255	@ rr,
 640              	.LVL44:
 641              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 642              		.loc 1 148 31 view .LVU162
 643 0260 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 644              	.LVL45:
 645              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 646              		.loc 1 150 39 view .LVU163
 647 0264 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 648              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 649              		.loc 1 143 62 view .LVU164
 650 0268 7660EFE6 		uxtb	r6, r6	@ rr, rr
 651              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 652              		.loc 1 150 49 view .LVU165
 653 026c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 654              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 655              		.loc 1 143 62 view .LVU166
 656 0270 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 657              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 658              		.loc 1 143 26 view .LVU167
 659 0274 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 660              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 661              		.loc 1 150 49 view .LVU168
 662 0278 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 663              	.LVL46:
 664              	.L32:
 130:armwave.c     ****                 wave_word >>= 8;
 665              		.loc 1 130 17 is_stmt 1 view .LVU169
 131:armwave.c     **** 
 666              		.loc 1 131 17 view .LVU170
 667              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 133 19 is_stmt 0 view .LVU171
 669 027c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 670              	.LVL47:
 671              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 672              		.loc 1 131 27 view .LVU172
 673 0280 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 674              	.LVL48:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 133 17 is_stmt 1 view .LVU173
 676              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 133 19 is_stmt 0 view .LVU174
 678 0284 1C00000A 		beq	.L33		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 679              		.loc 1 134 21 is_stmt 1 view .LVU175
 680              	.LVL49:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 135 21 view .LVU176
 136:armwave.c     **** 
 682              		.loc 1 136 21 view .LVU177
 138:armwave.c     ****                     g = MIN(gg, 255);
 683              		.loc 1 138 21 view .LVU178
 139:armwave.c     ****                     b = MIN(bb, 255);
 684              		.loc 1 139 21 view .LVU179
 140:armwave.c     **** 
 685              		.loc 1 140 21 view .LVU180
 143:armwave.c     **** 
 686              		.loc 1 143 21 view .LVU181
 146:armwave.c     ****                     xx = nsub & 0xff;
 687              		.loc 1 146 21 view .LVU182
 688              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 689              		.loc 1 136 55 is_stmt 0 view .LVU183
 690 0288 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 691              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 692              		.loc 1 135 55 view .LVU184
 693 028c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 694              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 695              		.loc 1 136 24 view .LVU185
 696 0290 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 697              	.LVL50:
 698              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 699              		.loc 1 140 25 view .LVU186
 700 0294 FF0054E3 		cmp	r4, #255	@ bb,
 701 0298 FF40A0A3 		movge	r4, #255	@ bb,
 702              	.LVL51:
 703              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 704              		.loc 1 134 55 view .LVU187
 705 029c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 706              	.LVL52:
 707              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 708              		.loc 1 135 24 view .LVU188
 709 02a0 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 710              	.LVL53:
 711              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 712              		.loc 1 143 44 view .LVU189
 713 02a4 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 714              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 715              		.loc 1 139 25 view .LVU190
 716 02a8 FF0057E3 		cmp	r7, #255	@ gg,
 717 02ac 016083E2 		add	r6, r3, #1	@ _158, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 718              		.loc 1 147 21 is_stmt 1 view .LVU191
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 719              		.loc 1 148 21 view .LVU192
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 720              		.loc 1 149 21 view .LVU193
 150:armwave.c     ****                 }
 721              		.loc 1 150 21 view .LVU194
 722              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 723              		.loc 1 143 44 is_stmt 0 view .LVU195
 724 02b0 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 725              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 726              		.loc 1 139 25 view .LVU196
 727 02b4 FF70A0A3 		movge	r7, #255	@ gg,
 728              	.LVL54:
 729              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 730              		.loc 1 143 44 view .LVU197
 731 02b8 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 732              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 733              		.loc 1 150 39 view .LVU198
 734 02bc 484095E5 		ldr	r4, [r5, #72]	@ tmp375, g_armwave_state.target_width
 735              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 736              		.loc 1 134 24 view .LVU199
 737 02c0 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 738              	.LVL55:
 739              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 740              		.loc 1 147 24 view .LVU200
 741 02c4 7600EFE6 		uxtb	r0, r6	@ xx, _158
 742              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 743              		.loc 1 138 25 view .LVU201
 744 02c8 FF005EE3 		cmp	lr, #255	@ rr,
 745              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 746              		.loc 1 143 56 view .LVU202
 747 02cc 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 748              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 749              		.loc 1 148 31 view .LVU203
 750 02d0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 751              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 752              		.loc 1 150 39 view .LVU204
 753 02d4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 754              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 755              		.loc 1 138 25 view .LVU205
 756 02d8 FFE0A0A3 		movge	lr, #255	@ rr,
 757              	.LVL56:
 758              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 759              		.loc 1 143 51 view .LVU206
 760 02dc 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 761              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 762              		.loc 1 143 56 view .LVU207
 763 02e0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 764              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 765              		.loc 1 143 51 view .LVU208
 766 02e4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 767              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 768              		.loc 1 143 62 view .LVU209
 769 02e8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 770              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 771              		.loc 1 150 49 view .LVU210
 772 02ec 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 773              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 774              		.loc 1 143 62 view .LVU211
 775 02f0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 776              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 777              		.loc 1 143 26 view .LVU212
 778 02f4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 779              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 780              		.loc 1 150 49 view .LVU213
 781 02f8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 782              	.LVL57:
 783              	.L33:
 130:armwave.c     ****                 wave_word >>= 8;
 784              		.loc 1 130 17 is_stmt 1 view .LVU214
 131:armwave.c     **** 
 785              		.loc 1 131 17 view .LVU215
 786              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 787              		.loc 1 133 19 is_stmt 0 view .LVU216
 788 02fc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 789              	@ armwave.c:131:                 wave_word >>= 8;
 131:armwave.c     **** 
 790              		.loc 1 131 27 view .LVU217
 791 0300 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 792              	.LVL58:
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 793              		.loc 1 133 17 is_stmt 1 view .LVU218
 794              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 795              		.loc 1 133 19 is_stmt 0 view .LVU219
 796 0304 1A00000A 		beq	.L34		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 797              		.loc 1 134 21 is_stmt 1 view .LVU220
 798              	.LVL59:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 799              		.loc 1 135 21 view .LVU221
 136:armwave.c     **** 
 800              		.loc 1 136 21 view .LVU222
 138:armwave.c     ****                     g = MIN(gg, 255);
 801              		.loc 1 138 21 view .LVU223
 139:armwave.c     ****                     b = MIN(bb, 255);
 802              		.loc 1 139 21 view .LVU224
 140:armwave.c     **** 
 803              		.loc 1 140 21 view .LVU225
 143:armwave.c     **** 
 804              		.loc 1 143 21 view .LVU226
 146:armwave.c     ****                     xx = nsub & 0xff;
 805              		.loc 1 146 21 view .LVU227
 806              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 807              		.loc 1 136 55 is_stmt 0 view .LVU228
 808 0308 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 809              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 810              		.loc 1 135 55 view .LVU229
 811 030c 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 812              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 813              		.loc 1 136 24 view .LVU230
 814 0310 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 815              	.LVL60:
 816              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 817              		.loc 1 134 55 view .LVU231
 818 0314 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 819              	.LVL61:
 820              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 821              		.loc 1 140 25 view .LVU232
 822 0318 FF0054E3 		cmp	r4, #255	@ bb,
 823              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 824              		.loc 1 135 24 view .LVU233
 825 031c 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 826              	.LVL62:
 827              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 828              		.loc 1 140 25 view .LVU234
 829 0320 FF40A0A3 		movge	r4, #255	@ bb,
 830              	.LVL63:
 831              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 832              		.loc 1 139 25 view .LVU235
 833 0324 FF0056E3 		cmp	r6, #255	@ gg,
 834 0328 FF60A0A3 		movge	r6, #255	@ gg,
 835              	.LVL64:
 139:armwave.c     ****                     b = MIN(bb, 255);
 836              		.loc 1 139 25 view .LVU236
 837 032c 027083E2 		add	r7, r3, #2	@ _66, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 838              		.loc 1 147 21 is_stmt 1 view .LVU237
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 839              		.loc 1 148 21 view .LVU238
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 840              		.loc 1 149 21 view .LVU239
 150:armwave.c     ****                 }
 841              		.loc 1 150 21 view .LVU240
 842              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 843              		.loc 1 134 24 is_stmt 0 view .LVU241
 844 0330 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 845              	.LVL65:
 846              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 847              		.loc 1 150 39 view .LVU242
 848 0334 480095E5 		ldr	r0, [r5, #72]	@ tmp376, g_armwave_state.target_width
 849              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 850              		.loc 1 138 25 view .LVU243
 851 0338 FF005EE3 		cmp	lr, #255	@ rr,
 852              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 853              		.loc 1 147 24 view .LVU244
 854 033c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 855              	.LVL66:
 856              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 857              		.loc 1 143 56 view .LVU245
 858 0340 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 859              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 860              		.loc 1 143 44 view .LVU246
 861 0344 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 862              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 863              		.loc 1 138 25 view .LVU247
 864 0348 FFE0A0A3 		movge	lr, #255	@ rr,
 865              	.LVL67:
 866              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 867              		.loc 1 148 31 view .LVU248
 868 034c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 869              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 870              		.loc 1 150 39 view .LVU249
 871 0350 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 872              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 873              		.loc 1 143 44 view .LVU250
 874 0354 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 875              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 876              		.loc 1 143 56 view .LVU251
 877 0358 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 878              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 879              		.loc 1 143 51 view .LVU252
 880 035c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 881              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 882              		.loc 1 143 62 view .LVU253
 883 0360 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 884              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 885              		.loc 1 150 49 view .LVU254
 886 0364 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 887              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 888              		.loc 1 143 62 view .LVU255
 889 0368 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 890              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 891              		.loc 1 143 26 view .LVU256
 892 036c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 893              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 894              		.loc 1 150 49 view .LVU257
 895 0370 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 896              	.L34:
 897              	.LVL68:
 130:armwave.c     ****                 wave_word >>= 8;
 898              		.loc 1 130 17 is_stmt 1 view .LVU258
 131:armwave.c     **** 
 899              		.loc 1 131 17 view .LVU259
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 900              		.loc 1 133 17 view .LVU260
 901              	@ armwave.c:133:                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 902              		.loc 1 133 19 is_stmt 0 view .LVU261
 903 0374 000052E3 		cmp	r2, #0	@ wave_word,
 904 0378 9DFFFF0A 		beq	.L31		@,
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 905              		.loc 1 134 21 is_stmt 1 view .LVU262
 906              	.LVL69:
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 907              		.loc 1 135 21 view .LVU263
 136:armwave.c     **** 
 908              		.loc 1 136 21 view .LVU264
 138:armwave.c     ****                     g = MIN(gg, 255);
 909              		.loc 1 138 21 view .LVU265
 139:armwave.c     ****                     b = MIN(bb, 255);
 910              		.loc 1 139 21 view .LVU266
 140:armwave.c     **** 
 911              		.loc 1 140 21 view .LVU267
 143:armwave.c     **** 
 912              		.loc 1 143 21 view .LVU268
 146:armwave.c     ****                     xx = nsub & 0xff;
 913              		.loc 1 146 21 view .LVU269
 914              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 915              		.loc 1 136 55 is_stmt 0 view .LVU270
 916 037c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 917              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 918              		.loc 1 135 55 view .LVU271
 919 0380 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 920              	@ armwave.c:136:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 136:armwave.c     **** 
 921              		.loc 1 136 24 view .LVU272
 922 0384 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 923              	.LVL70:
 924              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 925              		.loc 1 134 55 view .LVU273
 926 0388 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 927              	.LVL71:
 928              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 929              		.loc 1 140 25 view .LVU274
 930 038c FF005EE3 		cmp	lr, #255	@ bb,
 931              	@ armwave.c:135:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 932              		.loc 1 135 24 view .LVU275
 933 0390 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 934              	.LVL72:
 935              	@ armwave.c:140:                     b = MIN(bb, 255);
 140:armwave.c     **** 
 936              		.loc 1 140 25 view .LVU276
 937 0394 FFE0A0A3 		movge	lr, #255	@ bb,
 938              	.LVL73:
 939              	@ armwave.c:139:                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 940              		.loc 1 139 25 view .LVU277
 941 0398 FF0054E3 		cmp	r4, #255	@ gg,
 942 039c FF40A0A3 		movge	r4, #255	@ gg,
 943              	.LVL74:
 139:armwave.c     ****                     b = MIN(bb, 255);
 944              		.loc 1 139 25 view .LVU278
 945 03a0 036083E2 		add	r6, r3, #3	@ _59, n,
 147:armwave.c     ****                     yy = nsub >> 8;
 946              		.loc 1 147 21 is_stmt 1 view .LVU279
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 947              		.loc 1 148 21 view .LVU280
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 948              		.loc 1 149 21 view .LVU281
 150:armwave.c     ****                 }
 949              		.loc 1 150 21 view .LVU282
 950              	@ armwave.c:134:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 951              		.loc 1 134 24 is_stmt 0 view .LVU283
 952 03a4 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 953              	.LVL75:
 954              	@ armwave.c:149:                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 955              		.loc 1 149 39 view .LVU284
 956 03a8 487095E5 		ldr	r7, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 957              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 958              		.loc 1 138 25 view .LVU285
 959 03ac FF0052E3 		cmp	r2, #255	@ rr,
 960              	@ armwave.c:147:                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 961              		.loc 1 147 24 view .LVU286
 962 03b0 7680EFE6 		uxtb	r8, r6	@ xx, _59
 963              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 964              		.loc 1 143 56 view .LVU287
 965 03b4 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 966              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 967              		.loc 1 143 44 view .LVU288
 968 03b8 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 969              	@ armwave.c:138:                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 970              		.loc 1 138 25 view .LVU289
 971 03bc FF20A0A3 		movge	r2, #255	@ rr,
 972              	.LVL76:
 973              	@ armwave.c:148:                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 974              		.loc 1 148 31 view .LVU290
 975 03c0 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 976              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 977              		.loc 1 143 44 view .LVU291
 978 03c4 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 979              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 980              		.loc 1 143 56 view .LVU292
 981 03c8 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 982              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 983              		.loc 1 150 39 view .LVU293
 984 03cc 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 985              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 986              		.loc 1 143 51 view .LVU294
 987 03d0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 988              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 989              		.loc 1 143 62 view .LVU295
 990 03d4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 991              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 992              		.loc 1 150 49 view .LVU296
 993 03d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 994              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 995              		.loc 1 143 62 view .LVU297
 996 03dc 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 997              	@ armwave.c:143:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 998              		.loc 1 143 26 view .LVU298
 999 03e0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 1000              	@ armwave.c:150:                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 1001              		.loc 1 150 49 view .LVU299
 1002 03e4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 1003 03e8 81FFFFEA 		b	.L31		@
 1004              	.LVL77:
 1005              	.L52:
 116:armwave.c     **** 
 1006              		.loc 1 116 5 is_stmt 1 discriminator 1 view .LVU300
 1007 03ec 10309FE5 		ldr	r3, .L54+4	@,
 1008 03f0 7420A0E3 		mov	r2, #116	@,
 1009 03f4 0C109FE5 		ldr	r1, .L54+8	@,
 1010              	.LVL78:
 116:armwave.c     **** 
 1011              		.loc 1 116 5 is_stmt 0 discriminator 1 view .LVU301
 1012 03f8 0C009FE5 		ldr	r0, .L54+12	@,
 1013              	.LVL79:
 116:armwave.c     **** 
 1014              		.loc 1 116 5 discriminator 1 view .LVU302
 1015 03fc FEFFFFEB 		bl	__assert_fail		@
 1016              	.LVL80:
 1017              	.L55:
 116:armwave.c     **** 
 1018              		.loc 1 116 5 discriminator 1 view .LVU303
 1019              		.align	2
 1020              	.L54:
 1021 0400 00000000 		.word	g_armwave_state
 1022 0404 00000000 		.word	.LANCHOR0
 1023 0408 48000000 		.word	.LC4
 1024 040c 54000000 		.word	.LC5
 1025              		.cfi_endproc
 1026              	.LFE60:
 1028              		.align	2
 1029              		.global	armwave_fill_pixbuf_scaled
 1030              		.syntax unified
 1031              		.arm
 1032              		.fpu vfp
 1034              	armwave_fill_pixbuf_scaled:
 1035              	.LVL81:
 1036              	.LFB61:
 156:armwave.c     **** 
 157:armwave.c     **** /*
 158:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 159:armwave.c     ****  * Rows are repeated as necessary.
 160:armwave.c     ****  */
 161:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 162:armwave.c     **** {
 1037              		.loc 1 162 1 is_stmt 1 view -0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 8
 1040              		@ frame_needed = 0, uses_anonymous_args = 0
 163:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1041              		.loc 1 163 5 view .LVU305
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 1042              		.loc 1 164 5 view .LVU306
 165:armwave.c     ****     uint8_t r, g, b, value, row;
 1043              		.loc 1 165 5 view .LVU307
 166:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1044              		.loc 1 166 5 view .LVU308
 1045              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1046              		.loc 1 162 1 is_stmt 0 view .LVU309
 1047 0410 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1048              		.cfi_def_cfa_offset 36
 1049              		.cfi_offset 4, -36
 1050              		.cfi_offset 5, -32
 1051              		.cfi_offset 6, -28
 1052              		.cfi_offset 7, -24
 1053              		.cfi_offset 8, -20
 1054              		.cfi_offset 9, -16
 1055              		.cfi_offset 10, -12
 1056              		.cfi_offset 11, -8
 1057              		.cfi_offset 14, -4
 1058              	@ armwave.c:170:     assert(out_buffer != NULL);
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 168:armwave.c     ****     uint32_t offset;
 169:armwave.c     **** 
 170:armwave.c     ****     assert(out_buffer != NULL);
 1059              		.loc 1 170 5 view .LVU310
 1060 0414 000050E3 		cmp	r0, #0	@ out_buffer
 1061              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1062              		.loc 1 166 15 view .LVU311
 1063 0418 34519FE5 		ldr	r5, .L81	@ tmp202,
 1064              	@ armwave.c:162: {
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1065              		.loc 1 162 1 view .LVU312
 1066 041c 0CD04DE2 		sub	sp, sp, #12	@,,
 1067              		.cfi_def_cfa_offset 48
 1068              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1069              		.loc 1 166 15 view .LVU313
 1070 0420 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1071              	.LVL82:
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1072              		.loc 1 167 5 is_stmt 1 view .LVU314
 168:armwave.c     **** 
 1073              		.loc 1 168 5 view .LVU315
 1074              		.loc 1 170 5 view .LVU316
 1075 0424 4500000A 		beq	.L78		@,
 171:armwave.c     **** 
 172:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1076              		.loc 1 172 5 view .LVU317
 1077              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 1078              		.loc 1 172 41 is_stmt 0 view .LVU318
 1079 0428 488095E5 		ldr	r8, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1080 042c 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1081              	.LVL83:
 173:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1082              		.loc 1 173 5 is_stmt 1 view .LVU319
 174:armwave.c     **** 
 175:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1083              		.loc 1 175 5 view .LVU320
 1084              		.loc 1 175 5 is_stmt 0 view .LVU321
 1085 0430 000058E3 		cmp	r8, #0	@ npix,
 1086 0434 0B0000DA 		ble	.L56		@,
 1087              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 177:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 178:armwave.c     ****         // most normal waveforms.
 179:armwave.c     ****         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 181:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 184:armwave.c     ****                 wave_word >>= 8;
 185:armwave.c     **** 
 186:armwave.c     ****                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1088              		.loc 1 188 52 view .LVU322
 1089 0438 FE35D5E1 		ldrsh	r3, [r5, #94]	@ _11, g_armwave_state.ch1_color.g
 1090              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1091              		.loc 1 187 52 view .LVU323
 1092 043c FCB5D5E1 		ldrsh	fp, [r5, #92]	@ _7, g_armwave_state.ch1_color.r
 1093              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1094              		.loc 1 175 11 view .LVU324
 1095 0440 00E0A0E3 		mov	lr, #0	@ n,
 1096              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1097              		.loc 1 188 52 view .LVU325
 1098 0444 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1099              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1100              		.loc 1 189 52 view .LVU326
 1101 0448 F036D5E1 		ldrsh	r3, [r5, #96]	@ _14, g_armwave_state.ch1_color.b
 1102 044c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1103              	.LVL84:
 1104              	.L63:
 179:armwave.c     **** 
 1105              		.loc 1 179 9 is_stmt 1 view .LVU327
 1106              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 1107              		.loc 1 179 19 is_stmt 0 view .LVU328
 1108 0450 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1109              	.LVL85:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1110              		.loc 1 181 9 is_stmt 1 view .LVU329
 1111              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 1112              		.loc 1 181 11 is_stmt 0 view .LVU330
 1113 0454 00005CE3 		cmp	ip, #0	@ wave_word,
 1114 0458 0400001A 		bne	.L79		@,
 1115              	.L59:
 1116              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1117              		.loc 1 175 28 view .LVU331
 1118 045c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1119              	.LVL86:
 1120              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1121              		.loc 1 175 5 view .LVU332
 1122 0460 0E0058E1 		cmp	r8, lr	@ npix, n
 1123 0464 F9FFFFCA 		bgt	.L63		@,
 1124              	.LVL87:
 1125              	.L56:
 1126              	@ armwave.c:211: }
 190:armwave.c     **** 
 191:armwave.c     ****                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 194:armwave.c     **** 
 195:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 196:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 198:armwave.c     ****                     // Do line scaling as necessary.
 199:armwave.c     ****                     nsub = n + w;
 200:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 201:armwave.c     ****                     xx = (nsub >> 8);
 202:armwave.c     **** 
 203:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 204:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 205:armwave.c     ****                         *(out_buffer_base + offset) = word;
 206:armwave.c     ****                     }
 207:armwave.c     ****                 }
 208:armwave.c     ****             }
 209:armwave.c     ****         }
 210:armwave.c     ****     }
 211:armwave.c     **** }
 1127              		.loc 1 211 1 view .LVU333
 1128 0468 0CD08DE2 		add	sp, sp, #12	@,,
 1129              		.cfi_remember_state
 1130              		.cfi_def_cfa_offset 36
 1131              		@ sp needed	@
 1132 046c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1133              	.LVL88:
 1134              	.L79:
 1135              		.cfi_restore_state
 1136              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1137              		.loc 1 186 19 view .LVU334
 1138 0470 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1139              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1140              		.loc 1 182 19 view .LVU335
 1141 0474 0090A0E3 		mov	r9, #0	@ w,
 1142              	.LVL89:
 183:armwave.c     ****                 wave_word >>= 8;
 1143              		.loc 1 183 17 is_stmt 1 view .LVU336
 184:armwave.c     **** 
 1144              		.loc 1 184 17 view .LVU337
 1145              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1146              		.loc 1 184 27 is_stmt 0 view .LVU338
 1147 0478 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1148              	.LVL90:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1149              		.loc 1 186 17 is_stmt 1 view .LVU339
 1150              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1151              		.loc 1 186 19 is_stmt 0 view .LVU340
 1152 047c 0500001A 		bne	.L80		@,
 1153              	.L60:
 1154              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1155              		.loc 1 182 32 view .LVU341
 1156 0480 019089E2 		add	r9, r9, #1	@ w, w,
 1157              	.LVL91:
 1158              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 1159              		.loc 1 182 13 view .LVU342
 1160 0484 040059E3 		cmp	r9, #4	@ w,
 1161 0488 F3FFFF0A 		beq	.L59		@,
 183:armwave.c     ****                 wave_word >>= 8;
 1162              		.loc 1 183 17 is_stmt 1 view .LVU343
 1163              	.LVL92:
 184:armwave.c     **** 
 1164              		.loc 1 184 17 view .LVU344
 1165              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1166              		.loc 1 186 19 is_stmt 0 view .LVU345
 1167 048c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1168              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 1169              		.loc 1 184 27 view .LVU346
 1170 0490 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1171              	.LVL93:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1172              		.loc 1 186 17 is_stmt 1 view .LVU347
 1173              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1174              		.loc 1 186 19 is_stmt 0 view .LVU348
 1175 0494 F9FFFF0A 		beq	.L60		@,
 1176              	.L80:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1177              		.loc 1 187 21 is_stmt 1 view .LVU349
 1178              	.LVL94:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1179              		.loc 1 188 21 view .LVU350
 189:armwave.c     **** 
 1180              		.loc 1 189 21 view .LVU351
 191:armwave.c     ****                     g = MIN(gg, 255);
 1181              		.loc 1 191 21 view .LVU352
 192:armwave.c     ****                     b = MIN(bb, 255);
 1182              		.loc 1 192 21 view .LVU353
 193:armwave.c     **** 
 1183              		.loc 1 193 21 view .LVU354
 196:armwave.c     **** 
 1184              		.loc 1 196 21 view .LVU355
 1185              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1186              		.loc 1 189 55 is_stmt 0 view .LVU356
 1187 0498 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1188              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1189              		.loc 1 188 55 view .LVU357
 1190 049c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1191 04a0 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1192              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1193              		.loc 1 189 55 view .LVU358
 1194 04a4 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1195              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1196              		.loc 1 188 55 view .LVU359
 1197 04a8 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1198              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 1199              		.loc 1 189 24 view .LVU360
 1200 04ac 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1201              	.LVL95:
 1202              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1203              		.loc 1 187 55 view .LVU361
 1204 04b0 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1205              	.LVL96:
 1206              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1207              		.loc 1 188 24 view .LVU362
 1208 04b4 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1209              	.LVL97:
 1210              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 1211              		.loc 1 193 25 view .LVU363
 1212 04b8 FF0052E3 		cmp	r2, #255	@ bb,
 1213 04bc FF20A0A3 		movge	r2, #255	@ bb,
 1214              	.LVL98:
 1215              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 1216              		.loc 1 192 25 view .LVU364
 1217 04c0 FF0051E3 		cmp	r1, #255	@ gg,
 1218 04c4 FF10A0A3 		movge	r1, #255	@ gg,
 1219              	.LVL99:
 1220              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1221              		.loc 1 187 24 view .LVU365
 1222 04c8 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1223              	.LVL100:
 1224              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1225              		.loc 1 191 25 view .LVU366
 1226 04cc FF0053E3 		cmp	r3, #255	@ rr,
 1227              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1228              		.loc 1 196 56 view .LVU367
 1229 04d0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1230              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 1231              		.loc 1 191 25 view .LVU368
 1232 04d4 FF30A0A3 		movge	r3, #255	@ rr,
 1233              	.LVL101:
 1234              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1235              		.loc 1 196 44 view .LVU369
 1236 04d8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1237              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1238              		.loc 1 196 56 view .LVU370
 1239 04dc 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1240              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1241              		.loc 1 200 57 view .LVU371
 1242 04e0 20A095E5 		ldr	r10, [r5, #32]	@ _28, g_armwave_state.vscale
 1243              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1244              		.loc 1 196 44 view .LVU372
 1245 04e4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1246              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1247              		.loc 1 196 51 view .LVU373
 1248 04e8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1249              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1250              		.loc 1 196 62 view .LVU374
 1251 04ec 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1252              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1253              		.loc 1 200 32 view .LVU375
 1254 04f0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1255              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1256              		.loc 1 196 62 view .LVU376
 1257 04f4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1258              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1259              		.loc 1 203 21 view .LVU377
 1260 04f8 00005AE3 		cmp	r10, #0	@ _28,
 1261              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 1262              		.loc 1 196 26 view .LVU378
 1263 04fc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1264              	.LVL102:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1265              		.loc 1 199 21 is_stmt 1 view .LVU379
 200:armwave.c     ****                     xx = (nsub >> 8);
 1266              		.loc 1 200 21 view .LVU380
 1267              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 1268              		.loc 1 201 32 is_stmt 0 view .LVU381
 1269 0500 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1270              	.LVL103:
 1271              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 1272              		.loc 1 200 24 view .LVU382
 1273 0504 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1274              	.LVL104:
 201:armwave.c     **** 
 1275              		.loc 1 201 21 is_stmt 1 view .LVU383
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 203 21 view .LVU384
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1277              		.loc 1 203 21 is_stmt 0 view .LVU385
 1278 0508 DCFFFF0A 		beq	.L60		@,
 1279              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1280              		.loc 1 203 29 view .LVU386
 1281 050c 0030A0E3 		mov	r3, #0	@ row,
 1282              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1283              		.loc 1 203 38 view .LVU387
 1284 0510 0320A0E1 		mov	r2, r3	@ _35, row
 1285              	.LVL105:
 1286              	.L61:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1287              		.loc 1 204 25 is_stmt 1 discriminator 3 view .LVU388
 205:armwave.c     ****                     }
 1288              		.loc 1 205 25 discriminator 3 view .LVU389
 1289              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1290              		.loc 1 204 52 is_stmt 0 discriminator 3 view .LVU390
 1291 0514 481095E5 		ldr	r1, [r5, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1292              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1293              		.loc 1 204 45 discriminator 3 view .LVU391
 1294 0518 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1295              	.LVL106:
 1296              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1297              		.loc 1 203 67 discriminator 3 view .LVU392
 1298 051c 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1299              	.LVL107:
 1300              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1301              		.loc 1 205 43 discriminator 3 view .LVU393
 1302 0520 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1303              	.LVL108:
 1304              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1305              		.loc 1 203 67 discriminator 3 view .LVU394
 1306 0524 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1307              	.LVL109:
 1308              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1309              		.loc 1 203 38 discriminator 3 view .LVU395
 1310 0528 0320A0E1 		mov	r2, r3	@ _35, row
 1311              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 1312              		.loc 1 205 53 discriminator 3 view .LVU396
 1313 052c 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1314              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1315              		.loc 1 203 21 discriminator 3 view .LVU397
 1316 0530 201095E5 		ldr	r1, [r5, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1317              	.LVL110:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1318              		.loc 1 203 21 discriminator 3 view .LVU398
 1319 0534 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1320 0538 F5FFFF3A 		bcc	.L61		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1321              		.loc 1 203 21 discriminator 3 view .LVU399
 1322 053c CFFFFFEA 		b	.L60		@
 1323              	.LVL111:
 1324              	.L78:
 170:armwave.c     **** 
 1325              		.loc 1 170 5 is_stmt 1 discriminator 1 view .LVU400
 1326 0540 10309FE5 		ldr	r3, .L81+4	@,
 1327 0544 AA20A0E3 		mov	r2, #170	@,
 1328 0548 0C109FE5 		ldr	r1, .L81+8	@,
 1329 054c 0C009FE5 		ldr	r0, .L81+12	@,
 1330              	.LVL112:
 170:armwave.c     **** 
 1331              		.loc 1 170 5 is_stmt 0 discriminator 1 view .LVU401
 1332 0550 FEFFFFEB 		bl	__assert_fail		@
 1333              	.LVL113:
 1334              	.L82:
 1335              		.align	2
 1336              	.L81:
 1337 0554 00000000 		.word	g_armwave_state
 1338 0558 18000000 		.word	.LANCHOR0+24
 1339 055c 48000000 		.word	.LC4
 1340 0560 54000000 		.word	.LC5
 1341              		.cfi_endproc
 1342              	.LFE61:
 1344              		.align	2
 1345              		.global	armwave_setup_render
 1346              		.syntax unified
 1347              		.arm
 1348              		.fpu vfp
 1350              	armwave_setup_render:
 1351              	.LVL114:
 1352              	.LFB62:
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     ****  * Setup the renderer with passed parameters.
 215:armwave.c     ****  */
 216:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 217:armwave.c     **** {
 1353              		.loc 1 217 1 is_stmt 1 view -0
 1354              		.cfi_startproc
 1355              		@ args = 12, pretend = 0, frame = 0
 1356              		@ frame_needed = 0, uses_anonymous_args = 0
 218:armwave.c     ****     uint32_t length, xx;
 1357              		.loc 1 218 5 view .LVU403
 219:armwave.c     ****     float points_per_pixel;
 1358              		.loc 1 219 5 view .LVU404
 220:armwave.c     **** 
 221:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1359              		.loc 1 221 5 view .LVU405
 1360              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1361              		.loc 1 217 1 is_stmt 0 view .LVU406
 1362 0564 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1363              		.cfi_def_cfa_offset 32
 1364              		.cfi_offset 4, -32
 1365              		.cfi_offset 5, -28
 1366              		.cfi_offset 6, -24
 1367              		.cfi_offset 7, -20
 1368              		.cfi_offset 8, -16
 1369              		.cfi_offset 9, -12
 1370              		.cfi_offset 10, -8
 1371              		.cfi_offset 14, -4
 1372 0568 028B2DED 		vpush.64	{d8}	@
 1373              		.cfi_def_cfa_offset 40
 1374              		.cfi_offset 80, -40
 1375              		.cfi_offset 81, -36
 1376 056c 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1377 0570 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1378 0574 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1379 0578 10D04DE2 		sub	sp, sp, #16	@,,
 1380              		.cfi_def_cfa_offset 56
 1381              	@ armwave.c:217: {
 217:armwave.c     ****     uint32_t length, xx;
 1382              		.loc 1 217 1 view .LVU407
 1383 057c 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1384 0580 38709DE5 		ldr	r7, [sp, #56]	@ target_width, target_width
 1385 0584 3C609DE5 		ldr	r6, [sp, #60]	@ target_height, target_height
 1386 0588 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1387              	@ armwave.c:221:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1388              		.loc 1 221 5 view .LVU408
 1389 058c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1390 0590 04708DE5 		str	r7, [sp, #4]	@ target_width,
 1391 0594 0230A0E1 		mov	r3, r2	@, waves_max
 1392              	.LVL115:
 1393              		.loc 1 221 5 view .LVU409
 1394 0598 08608DE5 		str	r6, [sp, #8]	@ target_height,
 1395 059c 0120A0E1 		mov	r2, r1	@, end_point
 1396              	.LVL116:
 1397              		.loc 1 221 5 view .LVU410
 1398 05a0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1399 05a4 0010A0E1 		mov	r1, r0	@, start_point
 1400              	.LVL117:
 1401              		.loc 1 221 5 view .LVU411
 1402 05a8 C8019FE5 		ldr	r0, .L106+4	@,
 1403              	.LVL118:
 1404              		.loc 1 221 5 view .LVU412
 1405 05ac FEFFFFEB 		bl	printf		@
 1406              	.LVL119:
 222:armwave.c     **** 
 223:armwave.c     ****     // TODO these asserts should instead raise PyExc
 224:armwave.c     ****     assert(start_point < end_point);
 1407              		.loc 1 224 5 is_stmt 1 view .LVU413
 1408 05b0 090055E1 		cmp	r5, r9	@ start_point, end_point
 1409 05b4 6900002A 		bcs	.L101		@,
 225:armwave.c     **** 
 226:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 227:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1410              		.loc 1 227 5 view .LVU414
 1411 05b8 013C46E2 		sub	r3, r6, #256	@ tmp154, target_height,
 1412 05bc 013CD3E3 		bics	r3, r3, #256	@ tmp231, tmp154,
 1413 05c0 4B00000A 		beq	.L85		@,
 1414              	@ armwave.c:227:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1415              		.loc 1 227 5 is_stmt 0 discriminator 1 view .LVU415
 1416 05c4 013B46E2 		sub	r3, r6, #1024	@ tmp156, target_height,
 1417 05c8 013BD3E3 		bics	r3, r3, #1024	@ tmp232, tmp156,
 1418 05cc 5400001A 		bne	.L102		@,
 228:armwave.c     **** 
 229:armwave.c     ****     if(target_height == 256) {
 230:armwave.c     ****         g_armwave_state.row_shift = 8;
 231:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 232:armwave.c     ****     } else if(target_height == 512) {
 1419              		.loc 1 232 12 is_stmt 1 view .LVU416
 233:armwave.c     ****         g_armwave_state.row_shift = 9;
 234:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 235:armwave.c     ****     } else if(target_height == 1024) {
 1420              		.loc 1 235 12 view .LVU417
 1421              	@ armwave.c:235:     } else if(target_height == 1024) {
 1422              		.loc 1 235 14 is_stmt 0 view .LVU418
 1423 05d0 010B56E3 		cmp	r6, #1024	@ target_height,
 1424              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_shift = 10;
 1425              		.loc 1 236 35 view .LVU419
 1426 05d4 A0419FE5 		ldr	r4, .L106+8	@ tmp228,
 1427              	@ armwave.c:235:     } else if(target_height == 1024) {
 235:armwave.c     ****         g_armwave_state.row_shift = 10;
 1428              		.loc 1 235 14 view .LVU420
 1429 05d8 4D00000A 		beq	.L103		@,
 237:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 238:armwave.c     ****     } else if(target_height == 2048) {
 1430              		.loc 1 238 12 is_stmt 1 view .LVU421
 1431              	@ armwave.c:238:     } else if(target_height == 2048) {
 1432              		.loc 1 238 14 is_stmt 0 view .LVU422
 1433 05dc 020B56E3 		cmp	r6, #2048	@ target_height,
 239:armwave.c     ****         g_armwave_state.row_shift = 11;
 1434              		.loc 1 239 9 is_stmt 1 view .LVU423
 1435              	@ armwave.c:239:         g_armwave_state.row_shift = 11;
 1436              		.loc 1 239 35 is_stmt 0 view .LVU424
 1437 05e0 0B20A003 		moveq	r2, #11	@ tmp175,
 1438              	@ armwave.c:240:         g_armwave_state.row_mask = 0x7ff;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1439              		.loc 1 240 34 view .LVU425
 1440 05e4 94319F05 		ldreq	r3, .L106+12	@ tmp177,
 1441 05e8 F025C401 		strdeq	r2, [r4, #80]	@, tmp228,
 1442              	.L88:
 241:armwave.c     ****     } 
 242:armwave.c     **** 
 243:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 244:armwave.c     ****     g_armwave_state.xstride = target_height;
 1443              		.loc 1 244 5 is_stmt 1 view .LVU426
 1444              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 246:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 247:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 248:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 249:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1445              		.loc 1 249 42 is_stmt 0 view .LVU427
 1446 05ec 960700E0 		mul	r0, r6, r7	@ tmp185, target_height, target_width
 1447              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 251:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1448              		.loc 1 251 68 view .LVU428
 1449 05f0 0734A0E1 		lsl	r3, r7, #8	@ _9, target_width,
 1450              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1451              		.loc 1 245 44 view .LVU429
 1452 05f4 26C4A0E1 		lsr	ip, r6, #8	@ tmp180, target_height,
 1453              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 252:armwave.c     ****     g_armwave_state.target_width = target_width;
 253:armwave.c     ****     g_armwave_state.target_height = target_height;
 254:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     **** 
 256:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1454              		.loc 1 256 5 view .LVU430
 1455 05f8 0310A0E1 		mov	r1, r3	@, _9
 1456              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1457              		.loc 1 250 37 view .LVU431
 1458 05fc 012CA0E3 		mov	r2, #256	@ tmp187,
 1459              	@ armwave.c:249:     g_armwave_state.size = target_height * target_width;
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1460              		.loc 1 249 26 view .LVU432
 1461 0600 440084E5 		str	r0, [r4, #68]	@ tmp185, g_armwave_state.size
 1462              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1463              		.loc 1 254 45 view .LVU433
 1464 0604 055049E0 		sub	r5, r9, r5	@ _10, end_point, start_point
 1465              	.LVL120:
 1466              	@ armwave.c:256:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1467              		.loc 1 256 5 view .LVU434
 1468 0608 74019FE5 		ldr	r0, .L106+16	@,
 1469              	@ armwave.c:251:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1470              		.loc 1 251 34 view .LVU435
 1471 060c 403084E5 		str	r3, [r4, #64]	@ _9, g_armwave_state.ch_buff_size
 1472              	@ armwave.c:254:     g_armwave_state.wave_length = end_point - start_point;
 254:armwave.c     **** 
 1473              		.loc 1 254 33 view .LVU436
 1474 0610 3C5084E5 		str	r5, [r4, #60]	@ _10, g_armwave_state.wave_length
 1475              	@ armwave.c:244:     g_armwave_state.xstride = target_height;
 244:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1476              		.loc 1 244 29 view .LVU437
 1477 0614 1C6084E5 		str	r6, [r4, #28]	@ target_height, g_armwave_state.xstride
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1478              		.loc 1 245 5 is_stmt 1 view .LVU438
 1479              	@ armwave.c:246:     g_armwave_state.wave_stride = wave_stride;
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1480              		.loc 1 246 33 is_stmt 0 view .LVU439
 1481 0618 24A084E5 		str	r10, [r4, #36]	@ wave_stride, g_armwave_state.wave_stride
 1482              	@ armwave.c:247:     g_armwave_state.waves_max = waves_max;
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1483              		.loc 1 247 31 view .LVU440
 1484 061c 2C8084E5 		str	r8, [r4, #44]	@ waves_max, g_armwave_state.waves_max
 1485              	@ armwave.c:248:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1486              		.loc 1 248 27 view .LVU441
 1487 0620 288084E5 		str	r8, [r4, #40]	@ waves_max, g_armwave_state.waves
 1488              	@ armwave.c:252:     g_armwave_state.target_width = target_width;
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1489              		.loc 1 252 34 view .LVU442
 1490 0624 487084E5 		str	r7, [r4, #72]	@ target_width, g_armwave_state.target_width
 1491              	@ armwave.c:253:     g_armwave_state.target_height = target_height;
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1492              		.loc 1 253 35 view .LVU443
 1493 0628 4C6084E5 		str	r6, [r4, #76]	@ target_height, g_armwave_state.target_height
 1494              	@ armwave.c:245:     g_armwave_state.vscale = target_height / 256;
 245:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1495              		.loc 1 245 28 view .LVU444
 1496 062c 20C084E5 		str	ip, [r4, #32]	@ tmp180, g_armwave_state.vscale
 246:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1497              		.loc 1 246 5 is_stmt 1 view .LVU445
 247:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1498              		.loc 1 247 5 view .LVU446
 248:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1499              		.loc 1 248 5 view .LVU447
 249:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1500              		.loc 1 249 5 view .LVU448
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1501              		.loc 1 250 5 view .LVU449
 1502              	@ armwave.c:250:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 250:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1503              		.loc 1 250 37 is_stmt 0 view .LVU450
 1504 0630 302084E5 		str	r2, [r4, #48]	@ tmp187, g_armwave_state.bitdepth_height
 251:armwave.c     ****     g_armwave_state.target_width = target_width;
 1505              		.loc 1 251 5 is_stmt 1 view .LVU451
 252:armwave.c     ****     g_armwave_state.target_height = target_height;
 1506              		.loc 1 252 5 view .LVU452
 253:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1507              		.loc 1 253 5 view .LVU453
 254:armwave.c     **** 
 1508              		.loc 1 254 5 view .LVU454
 1509              		.loc 1 256 5 view .LVU455
 1510 0634 FEFFFFEB 		bl	printf		@
 1511              	.LVL121:
 257:armwave.c     **** 
 258:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 259:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 260:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 261:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1512              		.loc 1 261 5 view .LVU456
 1513              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 262:armwave.c     **** 
 263:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1514              		.loc 1 263 23 is_stmt 0 view .LVU457
 1515 0638 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 1516              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1517              		.loc 1 261 34 view .LVU458
 1518 063c 4030A0E3 		mov	r3, #64	@ tmp194,
 1519              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1520              		.loc 1 263 7 view .LVU459
 1521 0640 000050E3 		cmp	r0, #0	@ _11,
 1522              	@ armwave.c:261:     g_armwave_state.slice_height = 64;  
 261:armwave.c     **** 
 1523              		.loc 1 261 34 view .LVU460
 1524 0644 343084E5 		str	r3, [r4, #52]	@ tmp194, g_armwave_state.slice_height
 1525              		.loc 1 263 5 is_stmt 1 view .LVU461
 1526              	@ armwave.c:263:     if(g_armwave_state.ch1_buffer != NULL)
 1527              		.loc 1 263 7 is_stmt 0 view .LVU462
 1528 0648 0000000A 		beq	.L90		@,
 264:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1529              		.loc 1 264 9 is_stmt 1 view .LVU463
 1530 064c FEFFFFEB 		bl	free		@
 1531              	.LVL122:
 1532              	.L90:
 265:armwave.c     **** 
 266:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1533              		.loc 1 266 5 view .LVU464
 1534              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1535              		.loc 1 266 34 is_stmt 0 view .LVU465
 1536 0650 0110A0E3 		mov	r1, #1	@,
 1537 0654 400094E5 		ldr	r0, [r4, #64]	@, g_armwave_state.ch_buff_size
 1538 0658 FEFFFFEB 		bl	calloc		@
 1539              	.LVL123:
 1540              	@ armwave.c:268:     assert(g_armwave_state.ch1_buffer != NULL);
 267:armwave.c     **** 
 268:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1541              		.loc 1 268 5 view .LVU466
 1542 065c 000050E3 		cmp	r0, #0	@ tmp198,
 1543              	@ armwave.c:266:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 266:armwave.c     **** 
 1544              		.loc 1 266 32 view .LVU467
 1545 0660 040084E5 		str	r0, [r4, #4]	@ tmp198, g_armwave_state.ch1_buffer
 1546              		.loc 1 268 5 is_stmt 1 view .LVU468
 1547 0664 3300000A 		beq	.L104		@,
 269:armwave.c     **** 
 270:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 271:armwave.c     ****     length = end_point - start_point;
 1548              		.loc 1 271 5 view .LVU469
 1549              	.LVL124:
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1550              		.loc 1 272 5 view .LVU470
 1551              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1552              		.loc 1 272 34 is_stmt 0 view .LVU471
 1553 0668 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1554              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 1555              		.loc 1 272 22 view .LVU472
 1556 066c 905A06EE 		vmov	s13, r5	@ int	@ _10, _10
 1557              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 274:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1558              		.loc 1 274 40 view .LVU473
 1559 0670 8500A0E1 		lsl	r0, r5, #1	@, _10,
 1560              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1561              		.loc 1 272 34 view .LVU474
 1562 0674 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp205, target_width
 1563              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1564              		.loc 1 272 22 view .LVU475
 1565 0678 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp204, _10
 1566              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1567              		.loc 1 273 60 view .LVU476
 1568 067c 0D7AD4ED 		vldr.32	s15, [r4, #52]	@ int	@ tmp234, g_armwave_state.slice_height
 1569 0680 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp208, tmp234
 1570              	@ armwave.c:272:     points_per_pixel = length / ((float)(target_width));
 272:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1571              		.loc 1 272 22 view .LVU477
 1572 0684 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp204, tmp205
 1573              	.LVL125:
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1574              		.loc 1 273 5 is_stmt 1 view .LVU478
 1575              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1576              		.loc 1 273 60 is_stmt 0 view .LVU479
 1577 0688 887A67EE 		vmul.f32	s15, s15, s16	@ tmp210, tmp208, points_per_pixel
 1578              	@ armwave.c:273:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 273:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1579              		.loc 1 273 41 view .LVU480
 1580 068c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp211, tmp210
 1581 0690 0E7AC4ED 		vstr.32	s15, [r4, #56]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1582              		.loc 1 274 5 is_stmt 1 view .LVU481
 1583              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1584              		.loc 1 274 40 is_stmt 0 view .LVU482
 1585 0694 FEFFFFEB 		bl	malloc		@
 1586              	.LVL126:
 1587              	@ armwave.c:276:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 275:armwave.c     **** 
 276:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1588              		.loc 1 276 5 view .LVU483
 1589 0698 000050E3 		cmp	r0, #0	@ tmp213,
 1590              	@ armwave.c:274:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 274:armwave.c     **** 
 1591              		.loc 1 274 38 view .LVU484
 1592 069c 740084E5 		str	r0, [r4, #116]	@ tmp213, g_armwave_state.xcoord_to_xpixel
 1593              		.loc 1 276 5 is_stmt 1 view .LVU485
 1594 06a0 2900000A 		beq	.L105		@,
 1595              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 277:armwave.c     **** 
 278:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 279:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 279 54 is_stmt 0 view .LVU486
 1597 06a4 327ADFED 		vldr.32	s15, .L106	@ tmp219,
 1598 06a8 020040E2 		sub	r0, r0, #2	@ ivtmp.86, tmp213,
 1599              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1600              		.loc 1 278 12 view .LVU487
 1601 06ac 0030A0E3 		mov	r3, #0	@ xx,
 1602              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 279 54 view .LVU488
 1604 06b0 887A87EE 		vdiv.f32	s14, s15, s16	@ _22, tmp219, points_per_pixel
 1605              	.L93:
 1606              	.LVL127:
 1607              		.loc 1 279 9 is_stmt 1 discriminator 3 view .LVU489
 1608              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1609              		.loc 1 279 74 is_stmt 0 discriminator 3 view .LVU490
 1610 06b4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1611              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1612              		.loc 1 278 32 discriminator 3 view .LVU491
 1613 06b8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1614              	.LVL128:
 1615              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1616              		.loc 1 278 5 discriminator 3 view .LVU492
 1617 06bc 030055E1 		cmp	r5, r3	@ _10, xx
 1618              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1619              		.loc 1 279 74 discriminator 3 view .LVU493
 1620 06c0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1621 06c4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _22
 1622              	@ armwave.c:279:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1623              		.loc 1 279 46 discriminator 3 view .LVU494
 1624 06c8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1625 06cc 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1626 06d0 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _80, offset: 0B]
 1627              	@ armwave.c:278:     for(xx = 0; xx < length; xx++) {
 278:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1628              		.loc 1 278 5 discriminator 3 view .LVU495
 1629 06d4 F6FFFF1A 		bne	.L93		@,
 280:armwave.c     **** 
 281:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 282:armwave.c     ****     }
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1630              		.loc 1 284 5 is_stmt 1 view .LVU496
 1631              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1632              		.loc 1 284 34 is_stmt 0 view .LVU497
 1633 06d8 440094E5 		ldr	r0, [r4, #68]	@ g_armwave_state.size, g_armwave_state.size
 1634 06dc 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1635 06e0 FEFFFFEB 		bl	malloc		@
 1636              	.LVL129:
 1637              	@ armwave.c:284:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1638              		.loc 1 284 32 view .LVU498
 1639 06e4 580084E5 		str	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 1640              	@ armwave.c:285: }
 285:armwave.c     **** }
 1641              		.loc 1 285 1 view .LVU499
 1642 06e8 10D08DE2 		add	sp, sp, #16	@,,
 1643              		.cfi_remember_state
 1644              		.cfi_def_cfa_offset 40
 1645              		@ sp needed	@
 1646 06ec 028BBDEC 		vldm	sp!, {d8}	@
 1647              		.cfi_restore 80
 1648              		.cfi_restore 81
 1649              		.cfi_def_cfa_offset 32
 1650              	.LVL130:
 1651              		.loc 1 285 1 view .LVU500
 1652 06f0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1653              	.LVL131:
 1654              	.L85:
 1655              		.cfi_restore_state
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1656              		.loc 1 229 5 is_stmt 1 view .LVU501
 1657              	@ armwave.c:229:     if(target_height == 256) {
 229:armwave.c     ****         g_armwave_state.row_shift = 8;
 1658              		.loc 1 229 7 is_stmt 0 view .LVU502
 1659 06f4 010C56E3 		cmp	r6, #256	@ target_height,
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1660              		.loc 1 230 9 is_stmt 1 view .LVU503
 1661              	@ armwave.c:230:         g_armwave_state.row_shift = 8;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1662              		.loc 1 230 35 is_stmt 0 view .LVU504
 1663 06f8 7C409FE5 		ldr	r4, .L106+8	@ tmp228,
 1664              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1665              		.loc 1 234 34 view .LVU505
 1666 06fc 84309F15 		ldrne	r3, .L106+20	@ tmp169,
 1667              	@ armwave.c:231:         g_armwave_state.row_mask = 0x0ff;
 231:armwave.c     ****     } else if(target_height == 512) {
 1668              		.loc 1 231 34 view .LVU506
 1669 0700 0820A003 		moveq	r2, #8	@ tmp163,
 1670 0704 FF30A003 		moveq	r3, #255	@ tmp165,
 232:armwave.c     ****         g_armwave_state.row_shift = 9;
 1671              		.loc 1 232 12 is_stmt 1 view .LVU507
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1672              		.loc 1 233 9 view .LVU508
 1673              	@ armwave.c:233:         g_armwave_state.row_shift = 9;
 233:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1674              		.loc 1 233 35 is_stmt 0 view .LVU509
 1675 0708 0920A013 		movne	r2, #9	@ tmp167,
 1676              	@ armwave.c:234:         g_armwave_state.row_mask = 0x1ff;
 234:armwave.c     ****     } else if(target_height == 1024) {
 1677              		.loc 1 234 34 view .LVU510
 1678 070c F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1679 0710 B5FFFFEA 		b	.L88		@
 1680              	.L103:
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1681              		.loc 1 236 9 is_stmt 1 view .LVU511
 1682              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1683              		.loc 1 237 34 is_stmt 0 view .LVU512
 1684 0714 70309FE5 		ldr	r3, .L106+24	@ tmp173,
 1685              	@ armwave.c:236:         g_armwave_state.row_shift = 10;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1686              		.loc 1 236 35 view .LVU513
 1687 0718 0A20A0E3 		mov	r2, #10	@ tmp171,
 1688              	@ armwave.c:237:         g_armwave_state.row_mask = 0x3ff;
 237:armwave.c     ****     } else if(target_height == 2048) {
 1689              		.loc 1 237 34 view .LVU514
 1690 071c F025C4E1 		strd	r2, [r4, #80]	@, tmp228,
 1691 0720 B1FFFFEA 		b	.L88		@
 1692              	.L102:
 227:armwave.c     **** 
 1693              		.loc 1 227 5 is_stmt 1 discriminator 2 view .LVU515
 1694 0724 64309FE5 		ldr	r3, .L106+28	@,
 1695 0728 E320A0E3 		mov	r2, #227	@,
 1696 072c 60109FE5 		ldr	r1, .L106+32	@,
 1697 0730 60009FE5 		ldr	r0, .L106+36	@,
 1698 0734 FEFFFFEB 		bl	__assert_fail		@
 1699              	.LVL132:
 1700              	.L104:
 268:armwave.c     **** 
 1701              		.loc 1 268 5 discriminator 1 view .LVU516
 1702 0738 50309FE5 		ldr	r3, .L106+28	@,
 1703 073c 432FA0E3 		mov	r2, #268	@,
 1704 0740 4C109FE5 		ldr	r1, .L106+32	@,
 1705 0744 50009FE5 		ldr	r0, .L106+40	@,
 1706 0748 FEFFFFEB 		bl	__assert_fail		@
 1707              	.LVL133:
 1708              	.L105:
 276:armwave.c     **** 
 1709              		.loc 1 276 5 discriminator 1 view .LVU517
 1710 074c 3C309FE5 		ldr	r3, .L106+28	@,
 1711 0750 452FA0E3 		mov	r2, #276	@,
 1712 0754 38109FE5 		ldr	r1, .L106+32	@,
 1713 0758 40009FE5 		ldr	r0, .L106+44	@,
 1714 075c FEFFFFEB 		bl	__assert_fail		@
 1715              	.LVL134:
 1716              	.L101:
 224:armwave.c     **** 
 1717              		.loc 1 224 5 discriminator 1 view .LVU518
 1718 0760 28309FE5 		ldr	r3, .L106+28	@,
 1719 0764 E020A0E3 		mov	r2, #224	@,
 1720 0768 24109FE5 		ldr	r1, .L106+32	@,
 1721 076c 30009FE5 		ldr	r0, .L106+48	@,
 1722 0770 FEFFFFEB 		bl	__assert_fail		@
 1723              	.LVL135:
 1724              	.L107:
 1725              		.align	2
 1726              	.L106:
 1727 0774 0000803F 		.word	1065353216
 1728 0778 68000000 		.word	.LC6
 1729 077c 00000000 		.word	g_armwave_state
 1730 0780 FF070000 		.word	2047
 1731 0784 0C010000 		.word	.LC9
 1732 0788 FF010000 		.word	511
 1733 078c FF030000 		.word	1023
 1734 0790 34000000 		.word	.LANCHOR0+52
 1735 0794 48000000 		.word	.LC4
 1736 0798 AC000000 		.word	.LC8
 1737 079c 20010000 		.word	.LC10
 1738 07a0 44010000 		.word	.LC11
 1739 07a4 94000000 		.word	.LC7
 1740              		.cfi_endproc
 1741              	.LFE62:
 1743              		.align	2
 1744              		.global	armwave_set_wave_pointer
 1745              		.syntax unified
 1746              		.arm
 1747              		.fpu vfp
 1749              	armwave_set_wave_pointer:
 1750              	.LVL136:
 1751              	.LFB63:
 286:armwave.c     **** 
 287:armwave.c     **** /*
 288:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 289:armwave.c     ****  * in the future.
 290:armwave.c     ****  */
 291:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 292:armwave.c     **** {
 1752              		.loc 1 292 1 view -0
 1753              		.cfi_startproc
 1754              		@ args = 0, pretend = 0, frame = 0
 1755              		@ frame_needed = 0, uses_anonymous_args = 0
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1756              		.loc 1 293 5 view .LVU520
 1757 07a8 000050E3 		cmp	r0, #0	@ wave_buffer
 1758              		.loc 1 293 5 is_stmt 0 view .LVU521
 1759 07ac 0200000A 		beq	.L113		@,
 294:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1760              		.loc 1 294 5 is_stmt 1 view .LVU522
 1761              	@ armwave.c:294:     g_armwave_state.wave_buffer = wave_buffer;
 1762              		.loc 1 294 33 is_stmt 0 view .LVU523
 1763 07b0 1C309FE5 		ldr	r3, .L114	@ tmp116,
 1764 07b4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1765 07b8 1EFF2FE1 		bx	lr	@
 1766              	.L113:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1767              		.loc 1 293 5 is_stmt 1 discriminator 1 view .LVU524
 1768              	@ armwave.c:292: {
 292:armwave.c     ****     assert(wave_buffer != NULL);
 1769              		.loc 1 292 1 is_stmt 0 discriminator 1 view .LVU525
 1770 07bc 10402DE9 		push	{r4, lr}	@
 1771              		.cfi_def_cfa_offset 8
 1772              		.cfi_offset 4, -8
 1773              		.cfi_offset 14, -4
 1774              	@ armwave.c:293:     assert(wave_buffer != NULL);
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1775              		.loc 1 293 5 discriminator 1 view .LVU526
 1776 07c0 10309FE5 		ldr	r3, .L114+4	@,
 1777 07c4 10209FE5 		ldr	r2, .L114+8	@,
 1778 07c8 10109FE5 		ldr	r1, .L114+12	@,
 1779 07cc 10009FE5 		ldr	r0, .L114+16	@,
 1780              	.LVL137:
 293:armwave.c     ****     assert(wave_buffer != NULL);
 1781              		.loc 1 293 5 discriminator 1 view .LVU527
 1782 07d0 FEFFFFEB 		bl	__assert_fail		@
 1783              	.LVL138:
 1784              	.L115:
 1785              		.align	2
 1786              	.L114:
 1787 07d4 00000000 		.word	g_armwave_state
 1788 07d8 4C000000 		.word	.LANCHOR0+76
 1789 07dc 25010000 		.word	293
 1790 07e0 48000000 		.word	.LC4
 1791 07e4 70010000 		.word	.LC12
 1792              		.cfi_endproc
 1793              	.LFE63:
 1795              		.align	2
 1796              		.global	armwave_set_wave_pointer_as_testbuf
 1797              		.syntax unified
 1798              		.arm
 1799              		.fpu vfp
 1801              	armwave_set_wave_pointer_as_testbuf:
 1802              	.LFB64:
 295:armwave.c     **** }
 296:armwave.c     **** 
 297:armwave.c     **** /*
 298:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 299:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 300:armwave.c     ****  */
 301:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 302:armwave.c     **** {
 1803              		.loc 1 302 1 is_stmt 1 view -0
 1804              		.cfi_startproc
 1805              		@ args = 0, pretend = 0, frame = 0
 1806              		@ frame_needed = 0, uses_anonymous_args = 0
 1807              		@ link register save eliminated.
 303:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1808              		.loc 1 303 5 view .LVU529
 1809              	@ armwave.c:303:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer;
 1810              		.loc 1 303 33 is_stmt 0 view .LVU530
 1811 07e8 08309FE5 		ldr	r3, .L117	@ tmp111,
 1812 07ec 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1813 07f0 142083E5 		str	r2, [r3, #20]	@ g_armwave_state.test_wave_buffer, g_armwave_state.wave_buffer
 1814              	@ armwave.c:304: }
 304:armwave.c     **** }
 1815              		.loc 1 304 1 view .LVU531
 1816 07f4 1EFF2FE1 		bx	lr	@
 1817              	.L118:
 1818              		.align	2
 1819              	.L117:
 1820 07f8 00000000 		.word	g_armwave_state
 1821              		.cfi_endproc
 1822              	.LFE64:
 1824              		.align	2
 1825              		.global	armwave_set_wave_pointer_u32
 1826              		.syntax unified
 1827              		.arm
 1828              		.fpu vfp
 1830              	armwave_set_wave_pointer_u32:
 1831              	.LVL139:
 1832              	.LFB65:
 305:armwave.c     **** 
 306:armwave.c     **** /*
 307:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 308:armwave.c     ****  * disjointed buffers in the future.
 309:armwave.c     ****  */
 310:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 311:armwave.c     **** {
 1833              		.loc 1 311 1 is_stmt 1 view -0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 0
 1836              		@ frame_needed = 0, uses_anonymous_args = 0
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1837              		.loc 1 312 5 view .LVU533
 1838 07fc 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1839              		.loc 1 312 5 is_stmt 0 view .LVU534
 1840 0800 0200000A 		beq	.L124		@,
 313:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1841              		.loc 1 313 5 is_stmt 1 view .LVU535
 1842              	@ armwave.c:313:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1843              		.loc 1 313 33 is_stmt 0 view .LVU536
 1844 0804 1C309FE5 		ldr	r3, .L125	@ tmp116,
 1845 0808 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1846 080c 1EFF2FE1 		bx	lr	@
 1847              	.L124:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1848              		.loc 1 312 5 is_stmt 1 discriminator 1 view .LVU537
 1849              	@ armwave.c:311: {
 311:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1850              		.loc 1 311 1 is_stmt 0 discriminator 1 view .LVU538
 1851 0810 10402DE9 		push	{r4, lr}	@
 1852              		.cfi_def_cfa_offset 8
 1853              		.cfi_offset 4, -8
 1854              		.cfi_offset 14, -4
 1855              	@ armwave.c:312:     assert(wave_buffer_ptr != 0);
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1856              		.loc 1 312 5 discriminator 1 view .LVU539
 1857 0814 4E2FA0E3 		mov	r2, #312	@,
 1858 0818 0C309FE5 		ldr	r3, .L125+4	@,
 1859 081c 0C109FE5 		ldr	r1, .L125+8	@,
 1860 0820 0C009FE5 		ldr	r0, .L125+12	@,
 1861              	.LVL140:
 312:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1862              		.loc 1 312 5 discriminator 1 view .LVU540
 1863 0824 FEFFFFEB 		bl	__assert_fail		@
 1864              	.LVL141:
 1865              	.L126:
 1866              		.align	2
 1867              	.L125:
 1868 0828 00000000 		.word	g_armwave_state
 1869 082c 68000000 		.word	.LANCHOR0+104
 1870 0830 48000000 		.word	.LC4
 1871 0834 84010000 		.word	.LC13
 1872              		.cfi_endproc
 1873              	.LFE65:
 1875              		.align	2
 1876              		.global	armwave_clear_buffer
 1877              		.syntax unified
 1878              		.arm
 1879              		.fpu vfp
 1881              	armwave_clear_buffer:
 1882              	.LVL142:
 1883              	.LFB66:
 314:armwave.c     **** }
 315:armwave.c     **** 
 316:armwave.c     **** /*
 317:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 318:armwave.c     ****  */
 319:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 320:armwave.c     **** {
 1884              		.loc 1 320 1 is_stmt 1 view -0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 0
 1887              		@ frame_needed = 0, uses_anonymous_args = 0
 1888              		@ link register save eliminated.
 321:armwave.c     ****     // Flags ignored, only one buffer cleared
 322:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1889              		.loc 1 322 5 view .LVU542
 1890 0838 0C309FE5 		ldr	r3, .L128	@ tmp113,
 1891 083c 0010A0E3 		mov	r1, #0	@,
 1892 0840 402093E5 		ldr	r2, [r3, #64]	@, g_armwave_state.ch_buff_size
 1893 0844 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1894              	.LVL143:
 1895              		.loc 1 322 5 is_stmt 0 view .LVU543
 1896 0848 FEFFFFEA 		b	memset		@
 1897              	.LVL144:
 1898              	.L129:
 1899              		.align	2
 1900              	.L128:
 1901 084c 00000000 		.word	g_armwave_state
 1902              		.cfi_endproc
 1903              	.LFE66:
 1905              		.align	2
 1906              		.global	armwave_set_channel_colour
 1907              		.syntax unified
 1908              		.arm
 1909              		.fpu vfp
 1911              	armwave_set_channel_colour:
 1912              	.LVL145:
 1913              	.LFB67:
 323:armwave.c     **** }
 324:armwave.c     **** 
 325:armwave.c     **** /*
 326:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 329:armwave.c     **** {
 1914              		.loc 1 329 1 is_stmt 1 view -0
 1915              		.cfi_startproc
 1916              		@ args = 0, pretend = 0, frame = 0
 1917              		@ frame_needed = 0, uses_anonymous_args = 0
 1918              		@ link register save eliminated.
 330:armwave.c     ****     // Only 1ch supported for now
 331:armwave.c     ****     switch(ch) {
 1919              		.loc 1 331 5 view .LVU545
 1920 0850 010050E3 		cmp	r0, #1	@ ch,
 332:armwave.c     ****         case 1:
 333:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1921              		.loc 1 333 13 view .LVU546
 1922              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 1923              		.loc 1 333 41 is_stmt 0 view .LVU547
 1924 0854 0C009F05 		ldreq	r0, .L132	@ tmp117,
 1925              	.LVL146:
 1926              		.loc 1 333 41 view .LVU548
 1927 0858 BC15C001 		strheq	r1, [r0, #92]	@ movhi	@ r, g_armwave_state.ch1_color.r
 334:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1928              		.loc 1 334 13 is_stmt 1 view .LVU549
 1929              	@ armwave.c:334:             g_armwave_state.ch1_color.g = g;
 1930              		.loc 1 334 41 is_stmt 0 view .LVU550
 1931 085c BE25C001 		strheq	r2, [r0, #94]	@ movhi	@ g, g_armwave_state.ch1_color.g
 335:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1932              		.loc 1 335 13 is_stmt 1 view .LVU551
 1933              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 1934              		.loc 1 335 41 is_stmt 0 view .LVU552
 1935 0860 B036C001 		strheq	r3, [r0, #96]	@ movhi	@ b, g_armwave_state.ch1_color.b
 336:armwave.c     ****             break;
 1936              		.loc 1 336 13 is_stmt 1 view .LVU553
 1937              	@ armwave.c:338: }
 337:armwave.c     ****     }
 338:armwave.c     **** }
 1938              		.loc 1 338 1 is_stmt 0 view .LVU554
 1939 0864 1EFF2FE1 		bx	lr	@
 1940              	.L133:
 1941              		.align	2
 1942              	.L132:
 1943 0868 00000000 		.word	g_armwave_state
 1944              		.cfi_endproc
 1945              	.LFE67:
 1947              		.align	2
 1948              		.global	armwave_dump_ppm_debug
 1949              		.syntax unified
 1950              		.arm
 1951              		.fpu vfp
 1953              	armwave_dump_ppm_debug:
 1954              	.LVL147:
 1955              	.LFB68:
 339:armwave.c     **** 
 340:armwave.c     **** /*
 341:armwave.c     ****  * Dump a ppm of a buffer to a file.
 342:armwave.c     ****  */
 343:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 344:armwave.c     **** {
 1956              		.loc 1 344 1 is_stmt 1 view -0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 0
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
 345:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1960              		.loc 1 345 5 view .LVU556
 1961              	@ armwave.c:344: {
 344:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1962              		.loc 1 344 1 is_stmt 0 view .LVU557
 1963 086c 0130A0E1 		mov	r3, r1	@ fn, fn
 1964 0870 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1965              		.cfi_def_cfa_offset 28
 1966              		.cfi_offset 4, -28
 1967              		.cfi_offset 5, -24
 1968              		.cfi_offset 6, -20
 1969              		.cfi_offset 7, -16
 1970              		.cfi_offset 8, -12
 1971              		.cfi_offset 9, -8
 1972              		.cfi_offset 14, -4
 1973 0874 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1974 0878 0CD04DE2 		sub	sp, sp, #12	@,,
 1975              		.cfi_def_cfa_offset 40
 1976              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 1977              		.loc 1 345 16 view .LVU558
 1978 087c D4109FE5 		ldr	r1, .L146	@,
 1979              	.LVL148:
 1980              		.loc 1 345 16 view .LVU559
 1981 0880 0300A0E1 		mov	r0, r3	@, fn
 1982              	.LVL149:
 1983              		.loc 1 345 16 view .LVU560
 1984 0884 FEFFFFEB 		bl	fopen64		@
 1985              	.LVL150:
 1986              	@ armwave.c:352:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 346:armwave.c     ****     uint32_t data;
 347:armwave.c     ****     int xx, yy;
 348:armwave.c     **** 
 349:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 350:armwave.c     **** 
 351:armwave.c     ****     fputs("P3\n", fp);
 352:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1987              		.loc 1 352 5 view .LVU561
 1988 0888 CC609FE5 		ldr	r6, .L146+4	@ tmp154,
 1989              	@ armwave.c:351:     fputs("P3\n", fp);
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1990              		.loc 1 351 5 view .LVU562
 1991 088c 0320A0E3 		mov	r2, #3	@,
 1992 0890 0110A0E3 		mov	r1, #1	@,
 1993              	@ armwave.c:345:     FILE *fp = fopen(fn, "wb");
 345:armwave.c     ****     uint32_t data;
 1994              		.loc 1 345 16 view .LVU563
 1995 0894 0070A0E1 		mov	r7, r0	@ fp,
 1996              	.LVL151:
 346:armwave.c     ****     uint32_t data;
 1997              		.loc 1 346 5 is_stmt 1 view .LVU564
 347:armwave.c     **** 
 1998              		.loc 1 347 5 view .LVU565
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1999              		.loc 1 351 5 view .LVU566
 2000 0898 0030A0E1 		mov	r3, r0	@, fp
 2001 089c BC009FE5 		ldr	r0, .L146+8	@,
 2002              	.LVL152:
 351:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2003              		.loc 1 351 5 is_stmt 0 view .LVU567
 2004 08a0 FEFFFFEB 		bl	fwrite		@
 2005              	.LVL153:
 2006              		.loc 1 352 5 is_stmt 1 view .LVU568
 2007 08a4 D824C6E1 		ldrd	r2, [r6, #72]	@, tmp154,
 2008 08a8 B4109FE5 		ldr	r1, .L146+12	@,
 2009 08ac 0700A0E1 		mov	r0, r7	@, fp
 2010 08b0 FEFFFFEB 		bl	fprintf		@
 2011              	.LVL154:
 353:armwave.c     ****     fputs("255\n", fp);
 2012              		.loc 1 353 5 view .LVU569
 2013 08b4 0420A0E3 		mov	r2, #4	@,
 2014 08b8 0730A0E1 		mov	r3, r7	@, fp
 2015 08bc 0110A0E3 		mov	r1, #1	@,
 2016 08c0 A0009FE5 		ldr	r0, .L146+16	@,
 2017 08c4 FEFFFFEB 		bl	fwrite		@
 2018              	.LVL155:
 354:armwave.c     **** 
 355:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2019              		.loc 1 355 5 view .LVU570
 2020              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2021              		.loc 1 355 37 is_stmt 0 view .LVU571
 2022 08c8 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2023              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2024              		.loc 1 355 5 view .LVU572
 2025 08cc 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2026 08d0 1800000A 		beq	.L135		@,
 2027 08d4 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2028              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 357:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 358:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 359:armwave.c     **** 
 360:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2029              		.loc 1 360 13 view .LVU573
 2030 08d8 8C909FE5 		ldr	r9, .L146+20	@ tmp156,
 2031              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2032              		.loc 1 355 12 view .LVU574
 2033 08dc 0050A0E3 		mov	r5, #0	@ yy,
 2034              	.LVL156:
 2035              	.L136:
 2036              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2037              		.loc 1 356 9 view .LVU575
 2038 08e0 000053E3 		cmp	r3, #0	@ _12,
 2039              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2040              		.loc 1 356 16 view .LVU576
 2041 08e4 0040A013 		movne	r4, #0	@ xx,
 2042              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2043              		.loc 1 356 9 view .LVU577
 2044 08e8 1600000A 		beq	.L145		@,
 2045              	.LVL157:
 2046              	.L137:
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2047              		.loc 1 357 13 is_stmt 1 discriminator 3 view .LVU578
 2048              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2049              		.loc 1 357 29 is_stmt 0 discriminator 3 view .LVU579
 2050 08ec 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2051              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2052              		.loc 1 360 13 discriminator 3 view .LVU580
 2053 08f0 0910A0E1 		mov	r1, r9	@, tmp156
 2054 08f4 0700A0E1 		mov	r0, r7	@, fp
 2055              	@ armwave.c:357:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 357:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2056              		.loc 1 357 18 discriminator 3 view .LVU581
 2057 08f8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2058              	.LVL158:
 2059              		.loc 1 360 13 is_stmt 1 discriminator 3 view .LVU582
 2060              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2061              		.loc 1 356 58 is_stmt 0 discriminator 3 view .LVU583
 2062 08fc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2063              	.LVL159:
 2064              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2065              		.loc 1 360 81 discriminator 3 view .LVU584
 2066 0900 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2067              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2068              		.loc 1 360 61 discriminator 3 view .LVU585
 2069 0904 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2070              	@ armwave.c:360:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2071              		.loc 1 360 13 discriminator 3 view .LVU586
 2072 0908 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2073 090c 7330EFE6 		uxtb	r3, r3	@, tmp146
 2074 0910 00C08DE5 		str	ip, [sp]	@ tmp151,
 2075 0914 7220EFE6 		uxtb	r2, r2	@, data
 2076              	.LVL160:
 2077              		.loc 1 360 13 discriminator 3 view .LVU587
 2078 0918 FEFFFFEB 		bl	fprintf		@
 2079              	.LVL161:
 2080              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2081              		.loc 1 356 41 discriminator 3 view .LVU588
 2082 091c 483096E5 		ldr	r3, [r6, #72]	@ _12, g_armwave_state.target_width
 2083              	@ armwave.c:356:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 356:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2084              		.loc 1 356 9 discriminator 3 view .LVU589
 2085 0920 040053E1 		cmp	r3, r4	@ _12, xx
 2086 0924 F0FFFF8A 		bhi	.L137		@,
 2087 0928 4C2096E5 		ldr	r2, [r6, #76]	@ prephitmp_57, g_armwave_state.target_height
 2088              	.LVL162:
 2089              	.L138:
 2090              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2091              		.loc 1 355 55 discriminator 2 view .LVU590
 2092 092c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2093              	.LVL163:
 2094              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2095              		.loc 1 355 5 discriminator 2 view .LVU591
 2096 0930 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2097 0934 E9FFFF3A 		bcc	.L136		@,
 2098              	.LVL164:
 2099              	.L135:
 361:armwave.c     ****         }
 362:armwave.c     ****     }
 363:armwave.c     **** 
 364:armwave.c     ****     fclose(fp);
 2100              		.loc 1 364 5 is_stmt 1 view .LVU592
 2101 0938 0700A0E1 		mov	r0, r7	@, fp
 2102              	@ armwave.c:365: }
 365:armwave.c     **** }
 2103              		.loc 1 365 1 is_stmt 0 view .LVU593
 2104 093c 0CD08DE2 		add	sp, sp, #12	@,,
 2105              		.cfi_remember_state
 2106              		.cfi_def_cfa_offset 28
 2107              		@ sp needed	@
 2108 0940 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2109              		.cfi_restore 14
 2110              		.cfi_restore 9
 2111              		.cfi_restore 8
 2112              		.cfi_restore 7
 2113              		.cfi_restore 6
 2114              		.cfi_restore 5
 2115              		.cfi_restore 4
 2116              		.cfi_def_cfa_offset 0
 2117              	.LVL165:
 2118              	@ armwave.c:364:     fclose(fp);
 364:armwave.c     **** }
 2119              		.loc 1 364 5 view .LVU594
 2120 0944 FEFFFFEA 		b	fclose		@
 2121              	.LVL166:
 2122              	.L145:
 2123              		.cfi_restore_state
 2124              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2125              		.loc 1 355 55 view .LVU595
 2126 0948 015085E2 		add	r5, r5, #1	@ yy, yy,
 2127              	.LVL167:
 2128              	@ armwave.c:355:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 355:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2129              		.loc 1 355 5 view .LVU596
 2130 094c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2131 0950 F5FFFF8A 		bhi	.L138		@,
 2132 0954 F7FFFFEA 		b	.L135		@
 2133              	.L147:
 2134              		.align	2
 2135              	.L146:
 2136 0958 9C010000 		.word	.LC14
 2137 095c 00000000 		.word	g_armwave_state
 2138 0960 A0010000 		.word	.LC15
 2139 0964 A4010000 		.word	.LC16
 2140 0968 AC010000 		.word	.LC17
 2141 096c B4010000 		.word	.LC18
 2142              		.cfi_endproc
 2143              	.LFE68:
 2145              		.align	2
 2146              		.global	armwave_test_init
 2147              		.syntax unified
 2148              		.arm
 2149              		.fpu vfp
 2151              	armwave_test_init:
 2152              	.LVL168:
 2153              	.LFB69:
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Initialise some test functionry.
 369:armwave.c     ****  */
 370:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 371:armwave.c     **** {
 2154              		.loc 1 371 1 is_stmt 1 view -0
 2155              		.cfi_startproc
 2156              		@ args = 0, pretend = 0, frame = 0
 2157              		@ frame_needed = 0, uses_anonymous_args = 0
 372:armwave.c     ****     test_create_gamma();
 2158              		.loc 1 372 5 view .LVU598
 2159              	.LBB10:
 2160              	.LBI10:
  44:armwave.c     **** {
 2161              		.loc 1 44 6 view .LVU599
  44:armwave.c     **** {
 2162              		.loc 1 44 6 is_stmt 0 view .LVU600
 2163              	.LBE10:
 2164              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2165              		.loc 1 371 1 view .LVU601
 2166 0970 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2167              		.cfi_def_cfa_offset 32
 2168              		.cfi_offset 4, -32
 2169              		.cfi_offset 5, -28
 2170              		.cfi_offset 6, -24
 2171              		.cfi_offset 7, -20
 2172              		.cfi_offset 8, -16
 2173              		.cfi_offset 9, -12
 2174              		.cfi_offset 10, -8
 2175              		.cfi_offset 14, -4
 2176 0974 068B2DED 		vpush.64	{d8, d9, d10}	@
 2177              		.cfi_def_cfa_offset 56
 2178              		.cfi_offset 80, -56
 2179              		.cfi_offset 81, -52
 2180              		.cfi_offset 82, -48
 2181              		.cfi_offset 83, -44
 2182              		.cfi_offset 84, -40
 2183              		.cfi_offset 85, -36
 2184 0978 BC409FE5 		ldr	r4, .L152+20	@ ivtmp.100,
 2185              	.LBB13:
 2186              	.LBB11:
 2187              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2188              		.loc 1 50 32 view .LVU602
 2189 097c 2DAA9FED 		vldr.32	s20, .L152+16	@ tmp136,
 2190              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2191              		.loc 1 50 26 view .LVU603
 2192 0980 289B9FED 		vldr.64	d9, .L152	@ tmp151,
 2193              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2194              		.loc 1 50 49 view .LVU604
 2195 0984 298B9FED 		vldr.64	d8, .L152+8	@ tmp139,
 2196 0988 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.100,
 2197              	.LBE11:
 2198              	.LBE13:
 2199              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2200              		.loc 1 371 1 view .LVU605
 2201 098c 10D04DE2 		sub	sp, sp, #16	@,,
 2202              		.cfi_def_cfa_offset 72
 2203              	@ armwave.c:371: {
 371:armwave.c     ****     test_create_gamma();
 2204              		.loc 1 371 1 view .LVU606
 2205 0990 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2206 0994 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2207 0998 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2208 099c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2209 09a0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.100,
 2210 09a4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2211              	.LVL169:
 2212              	.L149:
 2213              	.LBB14:
 2214              	.LBB12:
  50:armwave.c     ****     }
 2215              		.loc 1 50 9 is_stmt 1 view .LVU607
 2216              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2217              		.loc 1 50 32 is_stmt 0 view .LVU608
 2218 09a8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.100
 2219              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2220              		.loc 1 50 26 view .LVU609
 2221 09ac 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2222              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2223              		.loc 1 50 32 view .LVU610
 2224 09b0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2225 09b4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2226 09b8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2227              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2228              		.loc 1 50 26 view .LVU611
 2229 09bc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2230 09c0 FEFFFFEB 		bl	pow		@
 2231              	.LVL170:
 2232              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2233              		.loc 1 50 49 view .LVU612
 2234 09c4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2235              	@ armwave.c:50:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  50:armwave.c     ****     }
 2236              		.loc 1 50 24 view .LVU613
 2237 09c8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2238 09cc 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2239 09d0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2240              	.LVL171:
 2241              	@ armwave.c:49:     for(i = 0; i < 256; i++) {
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2242              		.loc 1 49 5 view .LVU614
 2243 09d4 0A0054E1 		cmp	r4, r10	@ ivtmp.100, _39
 2244 09d8 F2FFFF1A 		bne	.L149		@,
 2245              	.LVL172:
  49:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2246              		.loc 1 49 5 view .LVU615
 2247              	.LBE12:
 2248              	.LBE14:
 373:armwave.c     **** 
 374:armwave.c     ****     // make ch1 yellowish by default
 375:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2249              		.loc 1 375 5 is_stmt 1 view .LVU616
 2250              	.LBB15:
 2251              	.LBI15:
 328:armwave.c     **** {
 2252              		.loc 1 328 6 view .LVU617
 2253              	.LBB16:
 331:armwave.c     ****         case 1:
 2254              		.loc 1 331 5 view .LVU618
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2255              		.loc 1 333 13 view .LVU619
 334:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2256              		.loc 1 334 13 view .LVU620
 2257              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2258              		.loc 1 333 41 is_stmt 0 view .LVU621
 2259 09dc 5CC09FE5 		ldr	ip, .L152+24	@ tmp142,
 2260 09e0 5C409FE5 		ldr	r4, .L152+28	@ tmp143,
 2261              	.LBE16:
 2262              	.LBE15:
 2263              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 376:armwave.c     **** 
 377:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2264              		.loc 1 377 5 view .LVU622
 2265 09e4 0000A0E3 		mov	r0, #0	@ tmp147,
 2266              	.LBB20:
 2267              	.LBB17:
 2268              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2269              		.loc 1 335 41 view .LVU623
 2270 09e8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2271              	.LBE17:
 2272              	.LBE20:
 2273              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2274              		.loc 1 377 5 view .LVU624
 2275 09ec 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2276 09f0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2277 09f4 00808DE5 		str	r8, [sp]	@ render_width,
 2278 09f8 0610A0E1 		mov	r1, r6	@, tmp3
 2279 09fc 0720A0E1 		mov	r2, r7	@, nwaves
 2280              	.LBB21:
 2281              	.LBB18:
 2282              	@ armwave.c:333:             g_armwave_state.ch1_color.r = r;
 333:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2283              		.loc 1 333 41 view .LVU625
 2284 0a00 5C408CE5 		str	r4, [ip, #92]	@ tmp143, MEM[(short int *)&g_armwave_state + 92B]
 335:armwave.c     ****             break;
 2285              		.loc 1 335 13 is_stmt 1 view .LVU626
 2286              	.LBE18:
 2287              	.LBE21:
 2288              	@ armwave.c:377:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2289              		.loc 1 377 5 is_stmt 0 view .LVU627
 2290 0a04 0630A0E1 		mov	r3, r6	@, wave_size
 2291              	.LBB22:
 2292              	.LBB19:
 2293              	@ armwave.c:335:             g_armwave_state.ch1_color.b = b;
 335:armwave.c     ****             break;
 2294              		.loc 1 335 41 view .LVU628
 2295 0a08 B0E6CCE1 		strh	lr, [ip, #96]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 336:armwave.c     ****     }
 2296              		.loc 1 336 13 is_stmt 1 view .LVU629
 2297              	.LVL173:
 336:armwave.c     ****     }
 2298              		.loc 1 336 13 is_stmt 0 view .LVU630
 2299              	.LBE19:
 2300              	.LBE22:
 2301              		.loc 1 377 5 is_stmt 1 view .LVU631
 2302 0a0c FEFFFFEB 		bl	armwave_setup_render		@
 2303              	.LVL174:
 378:armwave.c     **** 
 379:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2304              		.loc 1 379 5 view .LVU632
 2305 0a10 30109FE5 		ldr	r1, .L152+32	@,
 2306 0a14 30009FE5 		ldr	r0, .L152+36	@,
 2307              	@ armwave.c:380: }
 380:armwave.c     **** }
 2308              		.loc 1 380 1 is_stmt 0 view .LVU633
 2309 0a18 10D08DE2 		add	sp, sp, #16	@,,
 2310              		.cfi_def_cfa_offset 56
 2311              		@ sp needed	@
 2312 0a1c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2313              		.cfi_restore 84
 2314              		.cfi_restore 85
 2315              		.cfi_restore 82
 2316              		.cfi_restore 83
 2317              		.cfi_restore 80
 2318              		.cfi_restore 81
 2319              		.cfi_def_cfa_offset 32
 2320 0a20 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2321              		.cfi_restore 14
 2322              		.cfi_restore 10
 2323              		.cfi_restore 9
 2324              		.cfi_restore 8
 2325              		.cfi_restore 7
 2326              		.cfi_restore 6
 2327              		.cfi_restore 5
 2328              		.cfi_restore 4
 2329              		.cfi_def_cfa_offset 0
 2330              	.LVL175:
 2331              	@ armwave.c:379:     printf("armwave version: %s\n", ARMWAVE_VER);
 379:armwave.c     **** }
 2332              		.loc 1 379 5 view .LVU634
 2333 0a24 FEFFFFEA 		b	printf		@
 2334              	.LVL176:
 2335              	.L153:
 2336              		.align	3
 2337              	.L152:
 2338 0a28 000000C0 		.word	-1073741824
 2339 0a2c CCCCEC3F 		.word	1072483532
 2340 0a30 00000000 		.word	0
 2341 0a34 00E06F40 		.word	1081073664
 2342 0a38 00007F43 		.word	1132396544
 2343 0a3c FFFFFFFF 		.word	gamma_table-1
 2344 0a40 00000000 		.word	g_armwave_state
 2345 0a44 F609F406 		.word	116656630
 2346 0a48 00000000 		.word	.LC0
 2347 0a4c 08000000 		.word	.LC1
 2348              		.cfi_endproc
 2349              	.LFE69:
 2351              		.global	__aeabi_uidiv
 2352              		.align	2
 2353              		.global	armwave_test_generate
 2354              		.syntax unified
 2355              		.arm
 2356              		.fpu vfp
 2358              	armwave_test_generate:
 2359              	.LFB70:
 381:armwave.c     **** 
 382:armwave.c     **** /*
 383:armwave.c     ****  * Fill buffers with test funtionry.
 384:armwave.c     ****  */
 385:armwave.c     **** void armwave_test_generate()
 386:armwave.c     **** {
 2360              		.loc 1 386 1 is_stmt 1 view -0
 2361              		.cfi_startproc
 2362              		@ args = 0, pretend = 0, frame = 0
 2363              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     uint32_t yy;
 2364              		.loc 1 387 5 view .LVU636
 388:armwave.c     **** 
 389:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2365              		.loc 1 389 5 view .LVU637
 2366              	@ armwave.c:386: {
 386:armwave.c     ****     uint32_t yy;
 2367              		.loc 1 386 1 is_stmt 0 view .LVU638
 2368 0a50 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2369              		.cfi_def_cfa_offset 24
 2370              		.cfi_offset 4, -24
 2371              		.cfi_offset 5, -20
 2372              		.cfi_offset 6, -16
 2373              		.cfi_offset 7, -12
 2374              		.cfi_offset 8, -8
 2375              		.cfi_offset 14, -4
 2376              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2377              		.loc 1 389 5 view .LVU639
 2378 0a54 0010A0E3 		mov	r1, #0	@,
 2379 0a58 5C509FE5 		ldr	r5, .L159	@ tmp142,
 2380 0a5c 402095E5 		ldr	r2, [r5, #64]	@, g_armwave_state.ch_buff_size
 2381 0a60 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 2382 0a64 FEFFFFEB 		bl	memset		@
 2383              	.LVL177:
 390:armwave.c     **** 
 391:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2384              		.loc 1 391 5 is_stmt 1 view .LVU640
 2385              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2386              		.loc 1 391 45 is_stmt 0 view .LVU641
 2387 0a68 346095E5 		ldr	r6, [r5, #52]	@ _8, g_armwave_state.slice_height
 2388              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2389              		.loc 1 391 5 view .LVU642
 2390 0a6c 020B56E3 		cmp	r6, #2048	@ _8,
 2391 0a70 F081BD88 		pophi	{r4, r5, r6, r7, r8, pc}	@
 2392              	@ armwave.c:392:         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwav
 392:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2393              		.loc 1 392 9 view .LVU643
 2394 0a74 44709FE5 		ldr	r7, .L159+4	@ tmp143,
 2395              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2396              		.loc 1 391 12 view .LVU644
 2397 0a78 0040A0E3 		mov	r4, #0	@ yy,
 2398              	.LVL178:
 2399              	.L156:
 2400              		.loc 1 392 9 is_stmt 1 discriminator 3 view .LVU645
 2401 0a7c 940602E0 		mul	r2, r4, r6	@, yy, _8
 2402 0a80 383095E5 		ldr	r3, [r5, #56]	@, g_armwave_state.slice_record_height
 2403 0a84 0410A0E1 		mov	r1, r4	@, yy
 2404 0a88 0700A0E1 		mov	r0, r7	@, tmp143
 2405 0a8c FEFFFFEB 		bl	printf		@
 2406              	.LVL179:
 393:armwave.c     **** 
 394:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2407              		.loc 1 394 9 discriminator 3 view .LVU646
 2408 0a90 D403C5E1 		ldrd	r0, [r5, #52]	@, tmp142,
 2409 0a94 900400E0 		mul	r0, r0, r4	@, g_armwave_state.slice_height, yy
 2410 0a98 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2411              	.LVL180:
 2412              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2413              		.loc 1 391 45 is_stmt 0 discriminator 3 view .LVU647
 2414 0a9c 346095E5 		ldr	r6, [r5, #52]	@ _8, g_armwave_state.slice_height
 2415              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2416              		.loc 1 391 28 discriminator 3 view .LVU648
 2417 0aa0 020BA0E3 		mov	r0, #2048	@,
 2418 0aa4 0610A0E1 		mov	r1, r6	@, _8
 2419 0aa8 FEFFFFEB 		bl	__aeabi_uidiv		@
 2420              	.LVL181:
 2421              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2422              		.loc 1 391 63 discriminator 3 view .LVU649
 2423 0aac 014084E2 		add	r4, r4, #1	@ yy, yy,
 2424              	.LVL182:
 2425              	@ armwave.c:391:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 391:armwave.c     ****         printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_hei
 2426              		.loc 1 391 5 discriminator 3 view .LVU650
 2427 0ab0 040050E1 		cmp	r0, r4	@, yy
 2428 0ab4 F0FFFF8A 		bhi	.L156		@,
 2429 0ab8 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 2430              	.L160:
 2431              		.align	2
 2432              	.L159:
 2433 0abc 00000000 		.word	g_armwave_state
 2434 0ac0 C4010000 		.word	.LC19
 2435              		.cfi_endproc
 2436              	.LFE70:
 2438              		.align	2
 2439              		.global	armwave_test_fill_outbuf
 2440              		.syntax unified
 2441              		.arm
 2442              		.fpu vfp
 2444              	armwave_test_fill_outbuf:
 2445              	.LFB71:
 395:armwave.c     ****     }
 396:armwave.c     **** }
 397:armwave.c     **** 
 398:armwave.c     **** /*
 399:armwave.c     ****  * Render image to the local allocated buffer.
 400:armwave.c     ****  */
 401:armwave.c     **** void armwave_test_fill_outbuf()
 402:armwave.c     **** {
 2446              		.loc 1 402 1 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 8
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 403:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2450              		.loc 1 403 5 view .LVU652
 2451 0ac4 40219FE5 		ldr	r2, .L185	@ tmp203,
 2452              	@ armwave.c:402: {
 402:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2453              		.loc 1 402 1 is_stmt 0 view .LVU653
 2454 0ac8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2455              		.cfi_def_cfa_offset 36
 2456              		.cfi_offset 4, -36
 2457              		.cfi_offset 5, -32
 2458              		.cfi_offset 6, -28
 2459              		.cfi_offset 7, -24
 2460              		.cfi_offset 8, -20
 2461              		.cfi_offset 9, -16
 2462              		.cfi_offset 10, -12
 2463              		.cfi_offset 11, -8
 2464              		.cfi_offset 14, -4
 2465 0acc 0CD04DE2 		sub	sp, sp, #12	@,,
 2466              		.cfi_def_cfa_offset 48
 2467              	@ armwave.c:403:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2468              		.loc 1 403 5 view .LVU654
 2469 0ad0 588092E5 		ldr	r8, [r2, #88]	@ _1, g_armwave_state.out_pixbuf
 2470              	.LVL183:
 2471              	.LBB25:
 2472              	.LBI25:
 161:armwave.c     **** {
 2473              		.loc 1 161 6 is_stmt 1 view .LVU655
 2474              	.LBB26:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2475              		.loc 1 163 5 view .LVU656
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2476              		.loc 1 164 5 view .LVU657
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2477              		.loc 1 165 5 view .LVU658
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2478              		.loc 1 166 5 view .LVU659
 2479              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2480              		.loc 1 166 15 is_stmt 0 view .LVU660
 2481 0ad4 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2482              	.LVL184:
 167:armwave.c     ****     uint32_t offset;
 2483              		.loc 1 167 5 is_stmt 1 view .LVU661
 168:armwave.c     **** 
 2484              		.loc 1 168 5 view .LVU662
 170:armwave.c     **** 
 2485              		.loc 1 170 5 view .LVU663
 2486 0ad8 000058E3 		cmp	r8, #0	@ _1,
 2487 0adc 4500000A 		beq	.L183		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2488              		.loc 1 172 5 view .LVU664
 2489              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2490              		.loc 1 172 41 is_stmt 0 view .LVU665
 2491 0ae0 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2492 0ae4 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2493              	.LVL185:
 173:armwave.c     **** 
 2494              		.loc 1 173 5 is_stmt 1 view .LVU666
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2495              		.loc 1 175 5 view .LVU667
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2496              		.loc 1 175 5 is_stmt 0 view .LVU668
 2497 0ae8 000055E3 		cmp	r5, #0	@ npix,
 2498 0aec 0B0000DA 		ble	.L161		@,
 2499              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2500              		.loc 1 188 52 view .LVU669
 2501 0af0 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _24, g_armwave_state.ch1_color.g
 2502              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2503              		.loc 1 187 52 view .LVU670
 2504 0af4 FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _18, g_armwave_state.ch1_color.r
 2505              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2506              		.loc 1 175 11 view .LVU671
 2507 0af8 0010A0E3 		mov	r1, #0	@ n,
 2508              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2509              		.loc 1 188 52 view .LVU672
 2510 0afc 00308DE5 		str	r3, [sp]	@ _24, %sfp
 2511              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2512              		.loc 1 189 52 view .LVU673
 2513 0b00 F036D2E1 		ldrsh	r3, [r2, #96]	@ _28, g_armwave_state.ch1_color.b
 2514 0b04 04308DE5 		str	r3, [sp, #4]	@ _28, %sfp
 2515              	.LVL186:
 2516              	.L168:
 179:armwave.c     **** 
 2517              		.loc 1 179 9 is_stmt 1 view .LVU674
 2518              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 2519              		.loc 1 179 19 is_stmt 0 view .LVU675
 2520 0b08 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_9, offset: 4294967292B]
 2521              	.LVL187:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2522              		.loc 1 181 9 is_stmt 1 view .LVU676
 2523              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2524              		.loc 1 181 11 is_stmt 0 view .LVU677
 2525 0b0c 000050E3 		cmp	r0, #0	@ wave_word,
 2526 0b10 0400001A 		bne	.L180		@,
 2527 0b14 041081E2 		add	r1, r1, #4	@ n, n,
 2528              	.L164:
 2529              	.LVL188:
 2530              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2531              		.loc 1 175 5 view .LVU678
 2532 0b18 010055E1 		cmp	r5, r1	@ npix, n
 2533 0b1c F9FFFFCA 		bgt	.L168		@,
 2534              	.LVL189:
 2535              	.L161:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2536              		.loc 1 175 5 view .LVU679
 2537              	.LBE26:
 2538              	.LBE25:
 2539              	@ armwave.c:404: }
 404:armwave.c     **** }
 2540              		.loc 1 404 1 view .LVU680
 2541 0b20 0CD08DE2 		add	sp, sp, #12	@,,
 2542              		.cfi_remember_state
 2543              		.cfi_def_cfa_offset 36
 2544              		@ sp needed	@
 2545 0b24 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2546              	.LVL190:
 2547              	.L180:
 2548              		.cfi_restore_state
 2549              	.LBB28:
 2550              	.LBB27:
 2551              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2552              		.loc 1 186 19 view .LVU681
 2553 0b28 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2554              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2555              		.loc 1 181 11 view .LVU682
 2556 0b2c 0160A0E1 		mov	r6, r1	@ ivtmp.112, n
 2557              	.LVL191:
 183:armwave.c     ****                 wave_word >>= 8;
 2558              		.loc 1 183 17 is_stmt 1 view .LVU683
 184:armwave.c     **** 
 2559              		.loc 1 184 17 view .LVU684
 2560              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2561              		.loc 1 184 27 is_stmt 0 view .LVU685
 2562 0b30 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2563              	.LVL192:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2564              		.loc 1 186 17 is_stmt 1 view .LVU686
 2565 0b34 041081E2 		add	r1, r1, #4	@ n, ivtmp.112,
 2566              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2567              		.loc 1 186 19 is_stmt 0 view .LVU687
 2568 0b38 0500001A 		bne	.L184		@,
 2569              	.L165:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2570              		.loc 1 186 19 view .LVU688
 2571 0b3c 016086E2 		add	r6, r6, #1	@ ivtmp.112, ivtmp.112,
 2572              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 2573              		.loc 1 182 13 view .LVU689
 2574 0b40 060051E1 		cmp	r1, r6	@ n, ivtmp.112
 2575 0b44 F3FFFF0A 		beq	.L164		@,
 183:armwave.c     ****                 wave_word >>= 8;
 2576              		.loc 1 183 17 is_stmt 1 view .LVU690
 2577              	.LVL193:
 184:armwave.c     **** 
 2578              		.loc 1 184 17 view .LVU691
 2579              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2580              		.loc 1 186 19 is_stmt 0 view .LVU692
 2581 0b48 FFE010E2 		ands	lr, r0, #255	@ _20, wave_word,
 2582              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2583              		.loc 1 184 27 view .LVU693
 2584 0b4c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2585              	.LVL194:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2586              		.loc 1 186 17 is_stmt 1 view .LVU694
 2587              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2588              		.loc 1 186 19 is_stmt 0 view .LVU695
 2589 0b50 F9FFFF0A 		beq	.L165		@,
 2590              	.L184:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2591              		.loc 1 187 21 is_stmt 1 view .LVU696
 2592              	.LVL195:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2593              		.loc 1 188 21 view .LVU697
 189:armwave.c     **** 
 2594              		.loc 1 189 21 view .LVU698
 191:armwave.c     ****                     g = MIN(gg, 255);
 2595              		.loc 1 191 21 view .LVU699
 192:armwave.c     ****                     b = MIN(bb, 255);
 2596              		.loc 1 192 21 view .LVU700
 193:armwave.c     **** 
 2597              		.loc 1 193 21 view .LVU701
 196:armwave.c     **** 
 2598              		.loc 1 196 21 view .LVU702
 2599              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2600              		.loc 1 189 55 is_stmt 0 view .LVU703
 2601 0b54 04309DE5 		ldr	r3, [sp, #4]	@ _28, %sfp
 2602              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2603              		.loc 1 200 57 view .LVU704
 2604 0b58 20A092E5 		ldr	r10, [r2, #32]	@ _50, g_armwave_state.vscale
 2605              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2606              		.loc 1 200 32 view .LVU705
 2607 0b5c 7670EFE6 		uxtb	r7, r6	@ ivtmp.112, ivtmp.112
 2608              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2609              		.loc 1 189 55 view .LVU706
 2610 0b60 930E0CE0 		mul	ip, r3, lr	@ tmp179, _28, _20
 2611              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2612              		.loc 1 188 55 view .LVU707
 2613 0b64 00309DE5 		ldr	r3, [sp]	@ _24, %sfp
 2614              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2615              		.loc 1 200 24 view .LVU708
 2616 0b68 9A0707E0 		mul	r7, r10, r7	@ yy, _50, ivtmp.112
 2617              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2618              		.loc 1 188 55 view .LVU709
 2619 0b6c 930E04E0 		mul	r4, r3, lr	@ tmp183, _24, _20
 2620              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2621              		.loc 1 189 24 view .LVU710
 2622 0b70 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp179,
 2623              	.LVL196:
 2624              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2625              		.loc 1 187 55 view .LVU711
 2626 0b74 9E0B0EE0 		mul	lr, lr, fp	@ tmp189, _20, _18
 2627              	.LVL197:
 2628              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2629              		.loc 1 188 24 view .LVU712
 2630 0b78 4444A0E1 		asr	r4, r4, #8	@ gg, tmp183,
 2631              	.LVL198:
 2632              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2633              		.loc 1 193 25 view .LVU713
 2634 0b7c FF005CE3 		cmp	ip, #255	@ bb,
 2635 0b80 FFC0A0A3 		movge	ip, #255	@ bb,
 2636              	.LVL199:
 2637              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 2638              		.loc 1 192 25 view .LVU714
 2639 0b84 FF0054E3 		cmp	r4, #255	@ gg,
 2640 0b88 FF40A0A3 		movge	r4, #255	@ gg,
 2641              	.LVL200:
 2642              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2643              		.loc 1 187 24 view .LVU715
 2644 0b8c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp189,
 2645              	.LVL201:
 2646              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2647              		.loc 1 191 25 view .LVU716
 2648 0b90 FF005EE3 		cmp	lr, #255	@ rr,
 2649              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2650              		.loc 1 196 56 view .LVU717
 2651 0b94 0444A0E1 		lsl	r4, r4, #8	@ tmp184, gg,
 2652              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 2653              		.loc 1 191 25 view .LVU718
 2654 0b98 FFE0A0A3 		movge	lr, #255	@ rr,
 2655              	.LVL202:
 2656              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2657              		.loc 1 196 44 view .LVU719
 2658 0b9c 0C38A0E1 		lsl	r3, ip, #16	@ tmp180, bb,
 2659 0ba0 FF3803E2 		and	r3, r3, #16711680	@ tmp181, tmp180,
 2660              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2661              		.loc 1 196 56 view .LVU720
 2662 0ba4 7440FFE6 		uxth	r4, r4	@ tmp185, tmp184
 2663              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2664              		.loc 1 196 51 view .LVU721
 2665 0ba8 043083E1 		orr	r3, r3, r4	@ tmp187, tmp181, tmp185
 2666              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2667              		.loc 1 196 62 view .LVU722
 2668 0bac 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 2669 0bb0 0E3083E1 		orr	r3, r3, lr	@ tmp191, tmp187, rr
 2670              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2671              		.loc 1 203 21 view .LVU723
 2672 0bb4 00005AE3 		cmp	r10, #0	@ _50,
 2673              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 2674              		.loc 1 196 26 view .LVU724
 2675 0bb8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp191,
 2676              	.LVL203:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 2677              		.loc 1 199 21 is_stmt 1 view .LVU725
 200:armwave.c     ****                     xx = (nsub >> 8);
 2678              		.loc 1 200 21 view .LVU726
 201:armwave.c     **** 
 2679              		.loc 1 201 21 view .LVU727
 2680              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 2681              		.loc 1 201 32 is_stmt 0 view .LVU728
 2682 0bbc 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.112,
 2683              	.LVL204:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2684              		.loc 1 203 21 is_stmt 1 view .LVU729
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2685              		.loc 1 203 21 is_stmt 0 view .LVU730
 2686 0bc0 DDFFFF0A 		beq	.L165		@,
 2687              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2688              		.loc 1 203 29 view .LVU731
 2689 0bc4 00C0A0E3 		mov	ip, #0	@ row,
 2690              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2691              		.loc 1 203 38 view .LVU732
 2692 0bc8 0CE0A0E1 		mov	lr, ip	@ _54, row
 2693              	.LVL205:
 2694              	.L166:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2695              		.loc 1 204 25 is_stmt 1 view .LVU733
 205:armwave.c     ****                     }
 2696              		.loc 1 205 25 view .LVU734
 2697              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2698              		.loc 1 204 52 is_stmt 0 view .LVU735
 2699 0bcc 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2700              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2701              		.loc 1 204 45 view .LVU736
 2702 0bd0 0EE087E0 		add	lr, r7, lr	@ tmp194, yy, _54
 2703              	.LVL206:
 2704              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2705              		.loc 1 203 67 view .LVU737
 2706 0bd4 01C08CE2 		add	ip, ip, #1	@ tmp199, row,
 2707              	.LVL207:
 2708              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 2709              		.loc 1 205 43 view .LVU738
 2710 0bd8 94AE24E0 		mla	r4, r4, lr, r10	@ tmp198, g_armwave_state.target_width, tmp194, xx
 2711              	.LVL208:
 2712              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2713              		.loc 1 203 67 view .LVU739
 2714 0bdc 7CC0EFE6 		uxtb	ip, ip	@ row, tmp199
 2715              	.LVL209:
 2716              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2717              		.loc 1 203 38 view .LVU740
 2718 0be0 0CE0A0E1 		mov	lr, ip	@ _54, row
 2719              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 2720              		.loc 1 205 53 view .LVU741
 2721 0be4 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_60
 2722              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2723              		.loc 1 203 21 view .LVU742
 2724 0be8 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2725              	.LVL210:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2726              		.loc 1 203 21 view .LVU743
 2727 0bec 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 2728 0bf0 F5FFFF3A 		bcc	.L166		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 2729              		.loc 1 203 21 view .LVU744
 2730 0bf4 D0FFFFEA 		b	.L165		@
 2731              	.LVL211:
 2732              	.L183:
 170:armwave.c     **** 
 2733              		.loc 1 170 5 is_stmt 1 view .LVU745
 2734 0bf8 10309FE5 		ldr	r3, .L185+4	@,
 2735 0bfc AA20A0E3 		mov	r2, #170	@,
 2736 0c00 0C109FE5 		ldr	r1, .L185+8	@,
 2737 0c04 0C009FE5 		ldr	r0, .L185+12	@,
 2738 0c08 FEFFFFEB 		bl	__assert_fail		@
 2739              	.LVL212:
 2740              	.L186:
 2741              		.align	2
 2742              	.L185:
 2743 0c0c 00000000 		.word	g_armwave_state
 2744 0c10 18000000 		.word	.LANCHOR0+24
 2745 0c14 48000000 		.word	.LC4
 2746 0c18 54000000 		.word	.LC5
 2747              	.LBE27:
 2748              	.LBE28:
 2749              		.cfi_endproc
 2750              	.LFE71:
 2752              		.align	2
 2753              		.global	armwave_test_dump_buffer_to_ppm
 2754              		.syntax unified
 2755              		.arm
 2756              		.fpu vfp
 2758              	armwave_test_dump_buffer_to_ppm:
 2759              	.LVL213:
 2760              	.LFB72:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 410:armwave.c     **** {
 2761              		.loc 1 410 1 view -0
 2762              		.cfi_startproc
 2763              		@ args = 0, pretend = 0, frame = 0
 2764              		@ frame_needed = 0, uses_anonymous_args = 0
 2765              		@ link register save eliminated.
 411:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2766              		.loc 1 411 5 view .LVU747
 2767 0c1c 08309FE5 		ldr	r3, .L188	@ tmp112,
 2768 0c20 0010A0E1 		mov	r1, r0	@, fn
 2769 0c24 580093E5 		ldr	r0, [r3, #88]	@, g_armwave_state.out_pixbuf
 2770              	.LVL214:
 2771              		.loc 1 411 5 is_stmt 0 view .LVU748
 2772 0c28 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2773              	.LVL215:
 2774              	.L189:
 2775              		.loc 1 411 5 view .LVU749
 2776              		.align	2
 2777              	.L188:
 2778 0c2c 00000000 		.word	g_armwave_state
 2779              		.cfi_endproc
 2780              	.LFE72:
 2782              		.align	2
 2783              		.global	armwave_test_fill_gdkbuf
 2784              		.syntax unified
 2785              		.arm
 2786              		.fpu vfp
 2788              	armwave_test_fill_gdkbuf:
 2789              	.LVL216:
 2790              	.LFB73:
 412:armwave.c     **** }
 413:armwave.c     **** 
 414:armwave.c     **** /*
 415:armwave.c     ****  * Render GDK buffer with test funtionry.
 416:armwave.c     ****  */
 417:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 418:armwave.c     **** {
 2791              		.loc 1 418 1 is_stmt 1 view -0
 2792              		.cfi_startproc
 2793              		@ args = 0, pretend = 0, frame = 8
 2794              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     //PyObject *mv;
 420:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 421:armwave.c     **** 
 422:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 423:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2795              		.loc 1 423 5 view .LVU751
 2796              	@ armwave.c:423:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2797              		.loc 1 423 11 is_stmt 0 view .LVU752
 2798 0c30 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2799              	@ armwave.c:418: {
 418:armwave.c     ****     //PyObject *mv;
 2800              		.loc 1 418 1 view .LVU753
 2801 0c34 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2802              		.cfi_def_cfa_offset 36
 2803              		.cfi_offset 4, -36
 2804              		.cfi_offset 5, -32
 2805              		.cfi_offset 6, -28
 2806              		.cfi_offset 7, -24
 2807              		.cfi_offset 8, -20
 2808              		.cfi_offset 9, -16
 2809              		.cfi_offset 10, -12
 2810              		.cfi_offset 11, -8
 2811              		.cfi_offset 14, -4
 2812 0c38 0CD04DE2 		sub	sp, sp, #12	@,,
 2813              		.cfi_def_cfa_offset 48
 2814              	.LBB31:
 2815              	.LBB32:
 2816              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2817              		.loc 1 166 15 view .LVU754
 2818 0c3c 38219FE5 		ldr	r2, .L214	@ tmp206,
 2819              	.LBE32:
 2820              	.LBE31:
 2821              	@ armwave.c:423:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2822              		.loc 1 423 11 view .LVU755
 2823 0c40 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2824              	.LVL217:
 424:armwave.c     ****     
 425:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2825              		.loc 1 426 5 is_stmt 1 view .LVU756
 2826              	.LBB35:
 2827              	.LBI31:
 161:armwave.c     **** {
 2828              		.loc 1 161 6 view .LVU757
 2829              	.LBB33:
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2830              		.loc 1 163 5 view .LVU758
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 2831              		.loc 1 164 5 view .LVU759
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2832              		.loc 1 165 5 view .LVU760
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2833              		.loc 1 166 5 view .LVU761
 2834              	@ armwave.c:170:     assert(out_buffer != NULL);
 170:armwave.c     **** 
 2835              		.loc 1 170 5 is_stmt 0 view .LVU762
 2836 0c44 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2837              	@ armwave.c:166:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2838              		.loc 1 166 15 view .LVU763
 2839 0c48 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2840              	.LVL218:
 167:armwave.c     ****     uint32_t offset;
 2841              		.loc 1 167 5 is_stmt 1 view .LVU764
 168:armwave.c     **** 
 2842              		.loc 1 168 5 view .LVU765
 170:armwave.c     **** 
 2843              		.loc 1 170 5 view .LVU766
 2844 0c4c 4500000A 		beq	.L212		@,
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2845              		.loc 1 172 5 view .LVU767
 2846              	@ armwave.c:172:     npix = g_armwave_state.target_width * 256; 
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2847              		.loc 1 172 41 is_stmt 0 view .LVU768
 2848 0c50 485092E5 		ldr	r5, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2849 0c54 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2850              	.LVL219:
 173:armwave.c     **** 
 2851              		.loc 1 173 5 is_stmt 1 view .LVU769
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2852              		.loc 1 175 5 view .LVU770
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2853              		.loc 1 175 5 is_stmt 0 view .LVU771
 2854 0c58 000055E3 		cmp	r5, #0	@ npix,
 2855 0c5c 0B0000DA 		ble	.L190		@,
 2856              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2857              		.loc 1 188 52 view .LVU772
 2858 0c60 FE35D2E1 		ldrsh	r3, [r2, #94]	@ _26, g_armwave_state.ch1_color.g
 2859              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2860              		.loc 1 187 52 view .LVU773
 2861 0c64 FCB5D2E1 		ldrsh	fp, [r2, #92]	@ _20, g_armwave_state.ch1_color.r
 2862              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2863              		.loc 1 175 11 view .LVU774
 2864 0c68 0010A0E3 		mov	r1, #0	@ n,
 2865              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2866              		.loc 1 188 52 view .LVU775
 2867 0c6c 00308DE5 		str	r3, [sp]	@ _26, %sfp
 2868              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2869              		.loc 1 189 52 view .LVU776
 2870 0c70 F036D2E1 		ldrsh	r3, [r2, #96]	@ _30, g_armwave_state.ch1_color.b
 2871 0c74 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 2872              	.LVL220:
 2873              	.L197:
 179:armwave.c     **** 
 2874              		.loc 1 179 9 is_stmt 1 view .LVU777
 2875              	@ armwave.c:179:         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 2876              		.loc 1 179 19 is_stmt 0 view .LVU778
 2877 0c78 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 2878              	.LVL221:
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2879              		.loc 1 181 9 is_stmt 1 view .LVU779
 2880              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2881              		.loc 1 181 11 is_stmt 0 view .LVU780
 2882 0c7c 000050E3 		cmp	r0, #0	@ wave_word,
 2883 0c80 0400001A 		bne	.L209		@,
 2884 0c84 041081E2 		add	r1, r1, #4	@ n, n,
 2885              	.L193:
 2886              	.LVL222:
 2887              	@ armwave.c:175:     for(n = 0; n < npix; n += 4) {
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2888              		.loc 1 175 5 view .LVU781
 2889 0c88 010055E1 		cmp	r5, r1	@ npix, n
 2890 0c8c F9FFFFCA 		bgt	.L197		@,
 2891              	.LVL223:
 2892              	.L190:
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2893              		.loc 1 175 5 view .LVU782
 2894              	.LBE33:
 2895              	.LBE35:
 2896              	@ armwave.c:427: }
 427:armwave.c     **** }
 2897              		.loc 1 427 1 view .LVU783
 2898 0c90 0CD08DE2 		add	sp, sp, #12	@,,
 2899              		.cfi_remember_state
 2900              		.cfi_def_cfa_offset 36
 2901              		@ sp needed	@
 2902 0c94 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2903              	.LVL224:
 2904              	.L209:
 2905              		.cfi_restore_state
 2906              	.LBB36:
 2907              	.LBB34:
 2908              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2909              		.loc 1 186 19 view .LVU784
 2910 0c98 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2911              	@ armwave.c:181:         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 2912              		.loc 1 181 11 view .LVU785
 2913 0c9c 0160A0E1 		mov	r6, r1	@ ivtmp.128, n
 2914              	.LVL225:
 183:armwave.c     ****                 wave_word >>= 8;
 2915              		.loc 1 183 17 is_stmt 1 view .LVU786
 184:armwave.c     **** 
 2916              		.loc 1 184 17 view .LVU787
 2917              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2918              		.loc 1 184 27 is_stmt 0 view .LVU788
 2919 0ca0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2920              	.LVL226:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2921              		.loc 1 186 17 is_stmt 1 view .LVU789
 2922 0ca4 041081E2 		add	r1, r1, #4	@ n, ivtmp.128,
 2923              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2924              		.loc 1 186 19 is_stmt 0 view .LVU790
 2925 0ca8 0500001A 		bne	.L213		@,
 2926              	.L194:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2927              		.loc 1 186 19 view .LVU791
 2928 0cac 016086E2 		add	r6, r6, #1	@ ivtmp.128, ivtmp.128,
 2929              	@ armwave.c:182:             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 2930              		.loc 1 182 13 view .LVU792
 2931 0cb0 060051E1 		cmp	r1, r6	@ n, ivtmp.128
 2932 0cb4 F3FFFF0A 		beq	.L193		@,
 183:armwave.c     ****                 wave_word >>= 8;
 2933              		.loc 1 183 17 is_stmt 1 view .LVU793
 2934              	.LVL227:
 184:armwave.c     **** 
 2935              		.loc 1 184 17 view .LVU794
 2936              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2937              		.loc 1 186 19 is_stmt 0 view .LVU795
 2938 0cb8 FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2939              	@ armwave.c:184:                 wave_word >>= 8;
 184:armwave.c     **** 
 2940              		.loc 1 184 27 view .LVU796
 2941 0cbc 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2942              	.LVL228:
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2943              		.loc 1 186 17 is_stmt 1 view .LVU797
 2944              	@ armwave.c:186:                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2945              		.loc 1 186 19 is_stmt 0 view .LVU798
 2946 0cc0 F9FFFF0A 		beq	.L194		@,
 2947              	.L213:
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2948              		.loc 1 187 21 is_stmt 1 view .LVU799
 2949              	.LVL229:
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2950              		.loc 1 188 21 view .LVU800
 189:armwave.c     **** 
 2951              		.loc 1 189 21 view .LVU801
 191:armwave.c     ****                     g = MIN(gg, 255);
 2952              		.loc 1 191 21 view .LVU802
 192:armwave.c     ****                     b = MIN(bb, 255);
 2953              		.loc 1 192 21 view .LVU803
 193:armwave.c     **** 
 2954              		.loc 1 193 21 view .LVU804
 196:armwave.c     **** 
 2955              		.loc 1 196 21 view .LVU805
 2956              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2957              		.loc 1 189 55 is_stmt 0 view .LVU806
 2958 0cc4 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 2959              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2960              		.loc 1 200 57 view .LVU807
 2961 0cc8 20A092E5 		ldr	r10, [r2, #32]	@ _52, g_armwave_state.vscale
 2962              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2963              		.loc 1 200 32 view .LVU808
 2964 0ccc 7670EFE6 		uxtb	r7, r6	@ ivtmp.128, ivtmp.128
 2965              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2966              		.loc 1 189 55 view .LVU809
 2967 0cd0 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 2968              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2969              		.loc 1 188 55 view .LVU810
 2970 0cd4 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 2971              	@ armwave.c:200:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 2972              		.loc 1 200 24 view .LVU811
 2973 0cd8 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.128
 2974              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2975              		.loc 1 188 55 view .LVU812
 2976 0cdc 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 2977              	@ armwave.c:189:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 189:armwave.c     **** 
 2978              		.loc 1 189 24 view .LVU813
 2979 0ce0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 2980              	.LVL230:
 2981              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2982              		.loc 1 187 55 view .LVU814
 2983 0ce4 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 2984              	.LVL231:
 2985              	@ armwave.c:188:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2986              		.loc 1 188 24 view .LVU815
 2987 0ce8 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 2988              	.LVL232:
 2989              	@ armwave.c:193:                     b = MIN(bb, 255);
 193:armwave.c     **** 
 2990              		.loc 1 193 25 view .LVU816
 2991 0cec FF005CE3 		cmp	ip, #255	@ bb,
 2992 0cf0 FFC0A0A3 		movge	ip, #255	@ bb,
 2993              	.LVL233:
 2994              	@ armwave.c:192:                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 2995              		.loc 1 192 25 view .LVU817
 2996 0cf4 FF0054E3 		cmp	r4, #255	@ gg,
 2997 0cf8 FF40A0A3 		movge	r4, #255	@ gg,
 2998              	.LVL234:
 2999              	@ armwave.c:187:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3000              		.loc 1 187 24 view .LVU818
 3001 0cfc 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3002              	.LVL235:
 3003              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3004              		.loc 1 191 25 view .LVU819
 3005 0d00 FF005EE3 		cmp	lr, #255	@ rr,
 3006              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3007              		.loc 1 196 56 view .LVU820
 3008 0d04 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3009              	@ armwave.c:191:                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 3010              		.loc 1 191 25 view .LVU821
 3011 0d08 FFE0A0A3 		movge	lr, #255	@ rr,
 3012              	.LVL236:
 3013              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3014              		.loc 1 196 44 view .LVU822
 3015 0d0c 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3016 0d10 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3017              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3018              		.loc 1 196 56 view .LVU823
 3019 0d14 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3020              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3021              		.loc 1 196 51 view .LVU824
 3022 0d18 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3023              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3024              		.loc 1 196 62 view .LVU825
 3025 0d1c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3026 0d20 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3027              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3028              		.loc 1 203 21 view .LVU826
 3029 0d24 00005AE3 		cmp	r10, #0	@ _52,
 3030              	@ armwave.c:196:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 3031              		.loc 1 196 26 view .LVU827
 3032 0d28 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3033              	.LVL237:
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3034              		.loc 1 199 21 is_stmt 1 view .LVU828
 200:armwave.c     ****                     xx = (nsub >> 8);
 3035              		.loc 1 200 21 view .LVU829
 201:armwave.c     **** 
 3036              		.loc 1 201 21 view .LVU830
 3037              	@ armwave.c:201:                     xx = (nsub >> 8);
 201:armwave.c     **** 
 3038              		.loc 1 201 32 is_stmt 0 view .LVU831
 3039 0d2c 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.128,
 3040              	.LVL238:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3041              		.loc 1 203 21 is_stmt 1 view .LVU832
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3042              		.loc 1 203 21 is_stmt 0 view .LVU833
 3043 0d30 DDFFFF0A 		beq	.L194		@,
 3044              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3045              		.loc 1 203 29 view .LVU834
 3046 0d34 00C0A0E3 		mov	ip, #0	@ row,
 3047              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3048              		.loc 1 203 38 view .LVU835
 3049 0d38 0CE0A0E1 		mov	lr, ip	@ _56, row
 3050              	.LVL239:
 3051              	.L195:
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3052              		.loc 1 204 25 is_stmt 1 view .LVU836
 205:armwave.c     ****                     }
 3053              		.loc 1 205 25 view .LVU837
 3054              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3055              		.loc 1 204 52 is_stmt 0 view .LVU838
 3056 0d3c 484092E5 		ldr	r4, [r2, #72]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3057              	@ armwave.c:204:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3058              		.loc 1 204 45 view .LVU839
 3059 0d40 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3060              	.LVL240:
 3061              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3062              		.loc 1 203 67 view .LVU840
 3063 0d44 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3064              	.LVL241:
 3065              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3066              		.loc 1 205 43 view .LVU841
 3067 0d48 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3068              	.LVL242:
 3069              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3070              		.loc 1 203 67 view .LVU842
 3071 0d4c 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3072              	.LVL243:
 3073              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3074              		.loc 1 203 38 view .LVU843
 3075 0d50 0CE0A0E1 		mov	lr, ip	@ _56, row
 3076              	@ armwave.c:205:                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 3077              		.loc 1 205 53 view .LVU844
 3078 0d54 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3079              	@ armwave.c:203:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3080              		.loc 1 203 21 view .LVU845
 3081 0d58 204092E5 		ldr	r4, [r2, #32]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3082              	.LVL244:
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3083              		.loc 1 203 21 view .LVU846
 3084 0d5c 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3085 0d60 F5FFFF3A 		bcc	.L195		@,
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3086              		.loc 1 203 21 view .LVU847
 3087 0d64 D0FFFFEA 		b	.L194		@
 3088              	.LVL245:
 3089              	.L212:
 170:armwave.c     **** 
 3090              		.loc 1 170 5 is_stmt 1 view .LVU848
 3091 0d68 10309FE5 		ldr	r3, .L214+4	@,
 3092 0d6c AA20A0E3 		mov	r2, #170	@,
 3093 0d70 0C109FE5 		ldr	r1, .L214+8	@,
 3094 0d74 0C009FE5 		ldr	r0, .L214+12	@,
 3095              	.LVL246:
 170:armwave.c     **** 
 3096              		.loc 1 170 5 is_stmt 0 view .LVU849
 3097 0d78 FEFFFFEB 		bl	__assert_fail		@
 3098              	.LVL247:
 3099              	.L215:
 3100              		.align	2
 3101              	.L214:
 3102 0d7c 00000000 		.word	g_armwave_state
 3103 0d80 18000000 		.word	.LANCHOR0+24
 3104 0d84 48000000 		.word	.LC4
 3105 0d88 54000000 		.word	.LC5
 3106              	.LBE34:
 3107              	.LBE36:
 3108              		.cfi_endproc
 3109              	.LFE73:
 3111              		.align	2
 3112              		.global	armwave_test_buffer_alloc
 3113              		.syntax unified
 3114              		.arm
 3115              		.fpu vfp
 3117              	armwave_test_buffer_alloc:
 3118              	.LFB74:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_buffer_alloc()
 433:armwave.c     **** {
 3119              		.loc 1 433 1 is_stmt 1 view -0
 3120              		.cfi_startproc
 3121              		@ args = 0, pretend = 0, frame = 0
 3122              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3123              		.loc 1 434 5 view .LVU851
 3124              	@ armwave.c:433: {
 433:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3125              		.loc 1 433 1 is_stmt 0 view .LVU852
 3126 0d8c 70402DE9 		push	{r4, r5, r6, lr}	@
 3127              		.cfi_def_cfa_offset 16
 3128              		.cfi_offset 4, -16
 3129              		.cfi_offset 5, -12
 3130              		.cfi_offset 6, -8
 3131              		.cfi_offset 14, -4
 3132              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 3133              		.loc 1 434 23 view .LVU853
 3134 0d90 50409FE5 		ldr	r4, .L223	@ tmp130,
 3135 0d94 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3136              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 3137              		.loc 1 434 7 view .LVU854
 3138 0d98 000050E3 		cmp	r0, #0	@ _1,
 3139 0d9c 0000000A 		beq	.L217		@,
 435:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3140              		.loc 1 435 9 is_stmt 1 view .LVU855
 3141 0da0 FEFFFFEB 		bl	free		@
 3142              	.LVL248:
 3143              	.L217:
 436:armwave.c     ****     }
 437:armwave.c     **** 
 438:armwave.c     ****     printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwave_
 3144              		.loc 1 438 5 view .LVU856
 3145 0da4 2C2094E5 		ldr	r2, [r4, #44]	@, g_armwave_state.waves_max
 3146 0da8 3C1094E5 		ldr	r1, [r4, #60]	@, g_armwave_state.wave_length
 3147 0dac 38009FE5 		ldr	r0, .L223+4	@,
 3148 0db0 FEFFFFEB 		bl	printf		@
 3149              	.LVL249:
 439:armwave.c     **** 
 440:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3150              		.loc 1 440 5 view .LVU857
 3151              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3152              		.loc 1 440 40 is_stmt 0 view .LVU858
 3153 0db4 3C3094E5 		ldr	r3, [r4, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3154 0db8 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3155 0dbc 0110A0E3 		mov	r1, #1	@,
 3156 0dc0 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.waves_max, g_armwave_state.wave_length
 3157 0dc4 0500A0E1 		mov	r0, r5	@, _6
 3158 0dc8 FEFFFFEB 		bl	calloc		@
 3159              	.LVL250:
 3160              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 441:armwave.c     **** 
 442:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3161              		.loc 1 442 7 view .LVU859
 3162 0dcc 000050E3 		cmp	r0, #0	@ tmp127,
 3163              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3164              		.loc 1 440 38 view .LVU860
 3165 0dd0 180084E5 		str	r0, [r4, #24]	@ tmp127, g_armwave_state.test_wave_buffer
 3166              		.loc 1 442 5 is_stmt 1 view .LVU861
 3167              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 3168              		.loc 1 442 7 is_stmt 0 view .LVU862
 3169 0dd4 7080BD18 		popne	{r4, r5, r6, pc}	@
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3170              		.loc 1 443 9 is_stmt 1 view .LVU863
 3171 0dd8 0510A0E1 		mov	r1, r5	@, _6
 3172 0ddc 0C009FE5 		ldr	r0, .L223+8	@,
 3173              	@ armwave.c:446: }
 444:armwave.c     ****         return;
 445:armwave.c     ****     }
 446:armwave.c     **** }
 3174              		.loc 1 446 1 is_stmt 0 view .LVU864
 3175 0de0 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3176              		.cfi_restore 14
 3177              		.cfi_restore 6
 3178              		.cfi_restore 5
 3179              		.cfi_restore 4
 3180              		.cfi_def_cfa_offset 0
 3181              	@ armwave.c:443:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 443:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3182              		.loc 1 443 9 view .LVU865
 3183 0de4 FEFFFFEA 		b	printf		@
 3184              	.LVL251:
 3185              	.L224:
 3186              		.align	2
 3187              	.L223:
 3188 0de8 00000000 		.word	g_armwave_state
 3189 0dec F4010000 		.word	.LC20
 3190 0df0 24020000 		.word	.LC21
 3191              		.cfi_endproc
 3192              	.LFE74:
 3194              		.align	2
 3195              		.global	armwave_fill_pixbuf_into_pybuffer
 3196              		.syntax unified
 3197              		.arm
 3198              		.fpu vfp
 3200              	armwave_fill_pixbuf_into_pybuffer:
 3201              	.LVL252:
 3202              	.LFB75:
 447:armwave.c     **** 
 448:armwave.c     **** /*
 449:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 450:armwave.c     ****  */
 451:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 452:armwave.c     **** {
 3203              		.loc 1 452 1 is_stmt 1 view -0
 3204              		.cfi_startproc
 3205              		@ args = 0, pretend = 0, frame = 48
 3206              		@ frame_needed = 0, uses_anonymous_args = 0
 453:armwave.c     ****     Py_buffer buffer;
 3207              		.loc 1 453 5 view .LVU867
 454:armwave.c     ****     int ret;
 3208              		.loc 1 454 5 view .LVU868
 455:armwave.c     **** 
 456:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3209              		.loc 1 456 5 view .LVU869
 3210              	@ armwave.c:452: {
 452:armwave.c     ****     Py_buffer buffer;
 3211              		.loc 1 452 1 is_stmt 0 view .LVU870
 3212 0df4 10402DE9 		push	{r4, lr}	@
 3213              		.cfi_def_cfa_offset 8
 3214              		.cfi_offset 4, -8
 3215              		.cfi_offset 14, -4
 3216 0df8 0040A0E1 		mov	r4, r0	@ buf_obj, buf_obj
 3217 0dfc 30D04DE2 		sub	sp, sp, #48	@,,
 3218              		.cfi_def_cfa_offset 56
 3219              	@ armwave.c:456:     printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 3220              		.loc 1 456 5 view .LVU871
 3221 0e00 64009FE5 		ldr	r0, .L229	@,
 3222              	.LVL253:
 3223              		.loc 1 456 5 view .LVU872
 3224 0e04 FEFFFFEB 		bl	puts		@
 3225              	.LVL254:
 457:armwave.c     **** 
 458:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3226              		.loc 1 458 5 is_stmt 1 view .LVU873
 3227              	@ armwave.c:458:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3228              		.loc 1 458 11 is_stmt 0 view .LVU874
 3229 0e08 0400A0E1 		mov	r0, r4	@, buf_obj
 3230 0e0c 04108DE2 		add	r1, sp, #4	@ tmp128,,
 3231 0e10 0120A0E3 		mov	r2, #1	@,
 3232 0e14 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3233              	.LVL255:
 459:armwave.c     **** 
 460:armwave.c     ****     if(ret != 0) {
 3234              		.loc 1 460 5 is_stmt 1 view .LVU875
 3235              	@ armwave.c:460:     if(ret != 0) {
 3236              		.loc 1 460 7 is_stmt 0 view .LVU876
 3237 0e18 000050E3 		cmp	r0, #0	@,
 3238 0e1c 0900001A 		bne	.L228		@,
 461:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 462:armwave.c     ****         Py_RETURN_FALSE;
 463:armwave.c     ****     }
 464:armwave.c     **** 
 465:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 466:armwave.c     **** 
 467:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3239              		.loc 1 467 5 is_stmt 1 view .LVU877
 3240 0e20 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3241              	.LVL256:
 3242              		.loc 1 467 5 is_stmt 0 view .LVU878
 3243 0e24 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3244              	.LVL257:
 468:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 3245              		.loc 1 468 5 is_stmt 1 view .LVU879
 3246 0e28 40009FE5 		ldr	r0, .L229+4	@,
 3247 0e2c FEFFFFEB 		bl	puts		@
 3248              	.LVL258:
 469:armwave.c     **** 
 470:armwave.c     ****     PyBuffer_Release(&buffer);
 3249              		.loc 1 470 5 view .LVU880
 3250 0e30 04008DE2 		add	r0, sp, #4	@ tmp129,,
 3251 0e34 FEFFFFEB 		bl	PyBuffer_Release		@
 3252              	.LVL259:
 471:armwave.c     ****     printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 3253              		.loc 1 471 5 view .LVU881
 3254 0e38 34009FE5 		ldr	r0, .L229+8	@,
 3255 0e3c FEFFFFEB 		bl	puts		@
 3256              	.LVL260:
 3257              	@ armwave.c:472: }
 472:armwave.c     **** }
 3258              		.loc 1 472 1 is_stmt 0 view .LVU882
 3259 0e40 30D08DE2 		add	sp, sp, #48	@,,
 3260              		.cfi_remember_state
 3261              		.cfi_def_cfa_offset 8
 3262              		@ sp needed	@
 3263 0e44 1080BDE8 		pop	{r4, pc}	@
 3264              	.LVL261:
 3265              	.L228:
 3266              		.cfi_restore_state
 461:armwave.c     ****         Py_RETURN_FALSE;
 3267              		.loc 1 461 9 is_stmt 1 view .LVU883
 3268 0e48 28009FE5 		ldr	r0, .L229+12	@,
 3269              	.LVL262:
 461:armwave.c     ****         Py_RETURN_FALSE;
 3270              		.loc 1 461 9 is_stmt 0 view .LVU884
 3271 0e4c FEFFFFEB 		bl	puts		@
 3272              	.LVL263:
 462:armwave.c     ****     }
 3273              		.loc 1 462 9 is_stmt 1 view .LVU885
 3274              	.LBB37:
 3275              	.LBI37:
 3276              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3277              		.loc 2 456 20 view .LVU886
 3278              	.LBB38:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3279              		.loc 2 458 21 view .LVU887
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3280              		.loc 2 459 5 view .LVU888
 3281              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3282              		.loc 2 459 18 is_stmt 0 view .LVU889
 3283 0e50 24309FE5 		ldr	r3, .L229+16	@ tmp119,
 3284              	.LBE38:
 3285              	.LBE37:
 3286              	@ armwave.c:462:         Py_RETURN_FALSE;
 462:armwave.c     ****     }
 3287              		.loc 1 462 9 view .LVU890
 3288 0e54 0300A0E1 		mov	r0, r3	@ <retval>, tmp119
 3289              	.LBB40:
 3290              	.LBB39:
 3291              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3292              		.loc 2 459 18 view .LVU891
 3293 0e58 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct], MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3294 0e5c 012082E2 		add	r2, r2, #1	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3295 0e60 002083E5 		str	r2, [r3]	@ tmp121, MEM[(Py_ssize_t *)&_Py_FalseStruct]
 3296              	.LBE39:
 3297              	.LBE40:
 3298              	@ armwave.c:472: }
 3299              		.loc 1 472 1 view .LVU892
 3300 0e64 30D08DE2 		add	sp, sp, #48	@,,
 3301              		.cfi_def_cfa_offset 8
 3302              		@ sp needed	@
 3303 0e68 1080BDE8 		pop	{r4, pc}	@
 3304              	.LVL264:
 3305              	.L230:
 3306              		.loc 1 472 1 view .LVU893
 3307              		.align	2
 3308              	.L229:
 3309 0e6c 70020000 		.word	.LC22
 3310 0e70 F0020000 		.word	.LC24
 3311 0e74 24030000 		.word	.LC25
 3312 0e78 9C020000 		.word	.LC23
 3313 0e7c 00000000 		.word	_Py_FalseStruct
 3314              		.cfi_endproc
 3315              	.LFE75:
 3317              		.align	2
 3318              		.global	armwave_test_create_am_sine
 3319              		.syntax unified
 3320              		.arm
 3321              		.fpu vfp
 3323              	armwave_test_create_am_sine:
 3324              	.LVL265:
 3325              	.LFB76:
 473:armwave.c     **** 
 474:armwave.c     **** /*
 475:armwave.c     ****  * Make a test AM waveform for render tests.
 476:armwave.c     ****  *
 477:armwave.c     ****  * @param   mod                 modulation depth
 478:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 479:armwave.c     ****  */
 480:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 481:armwave.c     **** {
 3326              		.loc 1 481 1 is_stmt 1 view -0
 3327              		.cfi_startproc
 3328              		@ args = 0, pretend = 0, frame = 8
 3329              		@ frame_needed = 0, uses_anonymous_args = 0
 482:armwave.c     ****     float v, noise, xnoise, mod_val;
 3330              		.loc 1 482 5 view .LVU895
 483:armwave.c     ****     int w, x;
 3331              		.loc 1 483 5 view .LVU896
 484:armwave.c     **** 
 485:armwave.c     ****     armwave_test_buffer_alloc();
 3332              		.loc 1 485 5 view .LVU897
 3333              	.LBB43:
 3334              	.LBI43:
 432:armwave.c     **** {
 3335              		.loc 1 432 6 view .LVU898
 3336              	.LBB44:
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3337              		.loc 1 434 5 view .LVU899
 3338              	.LBE44:
 3339              	.LBE43:
 3340              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3341              		.loc 1 481 1 is_stmt 0 view .LVU900
 3342 0e80 70402DE9 		push	{r4, r5, r6, lr}	@
 3343              		.cfi_def_cfa_offset 16
 3344              		.cfi_offset 4, -16
 3345              		.cfi_offset 5, -12
 3346              		.cfi_offset 6, -8
 3347              		.cfi_offset 14, -4
 3348 0e84 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3349              		.cfi_def_cfa_offset 72
 3350              		.cfi_offset 80, -72
 3351              		.cfi_offset 81, -68
 3352              		.cfi_offset 82, -64
 3353              		.cfi_offset 83, -60
 3354              		.cfi_offset 84, -56
 3355              		.cfi_offset 85, -52
 3356              		.cfi_offset 86, -48
 3357              		.cfi_offset 87, -44
 3358              		.cfi_offset 88, -40
 3359              		.cfi_offset 89, -36
 3360              		.cfi_offset 90, -32
 3361              		.cfi_offset 91, -28
 3362              		.cfi_offset 92, -24
 3363              		.cfi_offset 93, -20
 3364              	.LBB49:
 3365              	.LBB45:
 3366              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3367              		.loc 1 434 23 view .LVU901
 3368 0e88 B8519FE5 		ldr	r5, .L262+32	@ tmp232,
 3369              	.LBE45:
 3370              	.LBE49:
 3371              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3372              		.loc 1 481 1 view .LVU902
 3373 0e8c 40CAF0EE 		vmov.f32	s25, s0	@ mod, mod
 3374 0e90 60BAB0EE 		vmov.f32	s22, s1	@ noise_fraction, noise_fraction
 3375              	.LBB50:
 3376              	.LBB46:
 3377              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3378              		.loc 1 434 23 view .LVU903
 3379 0e94 180095E5 		ldr	r0, [r5, #24]	@ _63, g_armwave_state.test_wave_buffer
 3380              	.LBE46:
 3381              	.LBE50:
 3382              	@ armwave.c:481: {
 481:armwave.c     ****     float v, noise, xnoise, mod_val;
 3383              		.loc 1 481 1 view .LVU904
 3384 0e98 08D04DE2 		sub	sp, sp, #8	@,,
 3385              		.cfi_def_cfa_offset 80
 3386              	.LBB51:
 3387              	.LBB47:
 3388              	@ armwave.c:434:     if(g_armwave_state.test_wave_buffer != NULL) {
 434:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3389              		.loc 1 434 7 view .LVU905
 3390 0e9c 000050E3 		cmp	r0, #0	@ _63,
 3391 0ea0 0000000A 		beq	.L232		@,
 435:armwave.c     ****     }
 3392              		.loc 1 435 9 is_stmt 1 view .LVU906
 3393 0ea4 FEFFFFEB 		bl	free		@
 3394              	.LVL266:
 3395              	.L232:
 438:armwave.c     **** 
 3396              		.loc 1 438 5 view .LVU907
 3397 0ea8 2C2095E5 		ldr	r2, [r5, #44]	@, g_armwave_state.waves_max
 3398 0eac 3C1095E5 		ldr	r1, [r5, #60]	@, g_armwave_state.wave_length
 3399 0eb0 94019FE5 		ldr	r0, .L262+36	@,
 3400 0eb4 FEFFFFEB 		bl	printf		@
 3401              	.LVL267:
 440:armwave.c     **** 
 3402              		.loc 1 440 5 view .LVU908
 3403              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3404              		.loc 1 440 40 is_stmt 0 view .LVU909
 3405 0eb8 3C3095E5 		ldr	r3, [r5, #60]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3406 0ebc 2C4095E5 		ldr	r4, [r5, #44]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3407 0ec0 0110A0E3 		mov	r1, #1	@,
 3408 0ec4 940304E0 		mul	r4, r4, r3	@ _68, g_armwave_state.waves_max, g_armwave_state.wave_length
 3409 0ec8 0400A0E1 		mov	r0, r4	@, _68
 3410 0ecc FEFFFFEB 		bl	calloc		@
 3411              	.LVL268:
 3412              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3413              		.loc 1 442 7 view .LVU910
 3414 0ed0 000050E3 		cmp	r0, #0	@ tmp177,
 3415              	@ armwave.c:440:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 440:armwave.c     **** 
 3416              		.loc 1 440 38 view .LVU911
 3417 0ed4 180085E5 		str	r0, [r5, #24]	@ tmp177, g_armwave_state.test_wave_buffer
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3418              		.loc 1 442 5 is_stmt 1 view .LVU912
 3419              	@ armwave.c:442:     if(g_armwave_state.test_wave_buffer == NULL) {
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3420              		.loc 1 442 7 is_stmt 0 view .LVU913
 3421 0ed8 4E00000A 		beq	.L261		@,
 3422              	.L233:
 3423              	.LVL269:
 442:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes)\n", g_arm
 3424              		.loc 1 442 7 view .LVU914
 3425              	.LBE47:
 3426              	.LBE51:
 3427              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 486:armwave.c     **** 
 487:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3428              		.loc 1 487 35 discriminator 1 view .LVU915
 3429 0edc 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3430              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 3431              		.loc 1 487 5 discriminator 1 view .LVU916
 3432 0ee0 000052E3 		cmp	r2, #0	@ prephitmp_80,
 3433 0ee4 4800000A 		beq	.L231		@,
 3434              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3435              		.loc 1 488 37 view .LVU917
 3436 0ee8 4EDADFED 		vldr.32	s27, .L262	@ tmp184,
 3437              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3438              		.loc 1 488 17 view .LVU918
 3439 0eec 4EDA9FED 		vldr.32	s26, .L262+4	@ tmp186,
 3440              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 489:armwave.c     ****         //mod = 1.0f;
 490:armwave.c     **** 
 491:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 492:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 493:armwave.c     ****             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 495:armwave.c     ****             noise *= noise;
 496:armwave.c     **** 
 497:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 498:armwave.c     ****                 noise = -noise;
 499:armwave.c     **** 
 500:armwave.c     ****             noise += 1.0f;
 501:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 502:armwave.c     **** 
 503:armwave.c     ****             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * nois
 3441              		.loc 1 503 41 view .LVU919
 3442 0ef0 4E8A9FED 		vldr.32	s16, .L262+8	@ tmp234,
 3443              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 3444              		.loc 1 503 29 view .LVU920
 3445 0ef4 4EBADFED 		vldr.32	s23, .L262+12	@ tmp235,
 3446              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 504:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505:armwave.c     ****             //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127), 0
 506:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = (uint8_t)MIN(
 3447              		.loc 1 506 87 view .LVU921
 3448 0ef8 4ECA9FED 		vldr.32	s24, .L262+16	@ tmp236,
 3449 0efc 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3450              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3451              		.loc 1 487 5 view .LVU922
 3452 0f00 0060A0E3 		mov	r6, #0	@ w,
 3453              	.LVL270:
 3454              	.L241:
 488:armwave.c     ****         //mod = 1.0f;
 3455              		.loc 1 488 9 is_stmt 1 view .LVU923
 3456              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3457              		.loc 1 488 28 is_stmt 0 view .LVU924
 3458 0f04 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3459              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3460              		.loc 1 488 17 view .LVU925
 3461 0f08 4D9AB0EE 		vmov.f32	s18, s26	@ mod_val, tmp186
 3462              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3463              		.loc 1 491 9 view .LVU926
 3464 0f0c 000053E3 		cmp	r3, #0	@ prephitmp_96,
 3465              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3466              		.loc 1 488 28 view .LVU927
 3467 0f10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp182, w
 3468              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3469              		.loc 1 488 37 view .LVU928
 3470 0f14 AD7A67EE 		vmul.f32	s15, s15, s27	@ tmp183, tmp182, tmp184
 3471              	@ armwave.c:488:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 488:armwave.c     ****         //mod = 1.0f;
 3472              		.loc 1 488 17 view .LVU929
 3473 0f18 AC9A07EE 		vmla.f32	s18, s15, s25	@ mod_val, tmp183, mod
 3474              	.LVL271:
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3475              		.loc 1 491 9 is_stmt 1 view .LVU930
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3476              		.loc 1 491 9 is_stmt 0 view .LVU931
 3477 0f1c 3700000A 		beq	.L235		@,
 3478 0f20 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp231, mod_val
 3479              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3480              		.loc 1 501 20 view .LVU932
 3481 0f24 44AADFED 		vldr.32	s21, .L262+20	@ tmp204,
 3482              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3483              		.loc 1 506 96 view .LVU933
 3484 0f28 44AA9FED 		vldr.32	s20, .L262+24	@ tmp215,
 3485 0f2c 448ADFED 		vldr.32	s17, .L262+28	@ tmp216,
 3486              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3487              		.loc 1 491 15 view .LVU934
 3488 0f30 0040A0E3 		mov	r4, #0	@ x,
 3489              	.LVL272:
 3490              	.L240:
 492:armwave.c     ****             noise *= noise;
 3491              		.loc 1 492 13 is_stmt 1 view .LVU935
 3492              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3493              		.loc 1 492 24 is_stmt 0 view .LVU936
 3494 0f34 FEFFFFEB 		bl	rand		@
 3495              	.LVL273:
 3496              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3497              		.loc 1 492 31 view .LVU937
 3498 0f38 7000FFE6 		uxth	r0, r0	@ tmp187,
 3499              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3500              		.loc 1 492 41 view .LVU938
 3501 0f3c 900A07EE 		vmov	s15, r0	@ int	@ tmp187, tmp187
 3502 0f40 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp189, tmp187
 3503              	@ armwave.c:492:             noise  = ((rand() & 0xffff) * noise_fraction);
 492:armwave.c     ****             noise *= noise;
 3504              		.loc 1 492 20 view .LVU939
 3505 0f44 8B7A67EE 		vmul.f32	s15, s15, s22	@ noise, tmp189, noise_fraction
 3506              	.LVL274:
 493:armwave.c     ****             noise *= noise;
 3507              		.loc 1 493 13 is_stmt 1 view .LVU940
 3508              	@ armwave.c:493:             noise *= noise;
 493:armwave.c     ****             noise *= noise;
 3509              		.loc 1 493 19 is_stmt 0 view .LVU941
 3510 0f48 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3511              	.LVL275:
 494:armwave.c     ****             noise *= noise;
 3512              		.loc 1 494 13 is_stmt 1 view .LVU942
 3513              	@ armwave.c:494:             noise *= noise;
 494:armwave.c     ****             noise *= noise;
 3514              		.loc 1 494 19 is_stmt 0 view .LVU943
 3515 0f4c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3516              	.LVL276:
 495:armwave.c     **** 
 3517              		.loc 1 495 13 is_stmt 1 view .LVU944
 3518              	@ armwave.c:495:             noise *= noise;
 495:armwave.c     **** 
 3519              		.loc 1 495 19 is_stmt 0 view .LVU945
 3520 0f50 A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3521              	.LVL277:
 497:armwave.c     ****                 noise = -noise;
 3522              		.loc 1 497 13 is_stmt 1 view .LVU946
 3523              	@ armwave.c:497:             if((rand() & 0xffff) > 0x7fff)
 497:armwave.c     ****                 noise = -noise;
 3524              		.loc 1 497 17 is_stmt 0 view .LVU947
 3525 0f54 FEFFFFEB 		bl	rand		@
 3526              	.LVL278:
 498:armwave.c     **** 
 3527              		.loc 1 498 17 is_stmt 1 view .LVU948
 3528              	@ armwave.c:497:             if((rand() & 0xffff) > 0x7fff)
 497:armwave.c     ****                 noise = -noise;
 3529              		.loc 1 497 15 is_stmt 0 view .LVU949
 3530 0f58 020910E3 		tst	r0, #32768	@,
 3531              	@ armwave.c:498:                 noise = -noise;
 498:armwave.c     **** 
 3532              		.loc 1 498 23 view .LVU950
 3533 0f5c 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3534              	.LVL279:
 500:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3535              		.loc 1 500 13 is_stmt 1 view .LVU951
 501:armwave.c     **** 
 3536              		.loc 1 501 13 view .LVU952
 3537              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3538              		.loc 1 501 23 is_stmt 0 view .LVU953
 3539 0f60 FEFFFFEB 		bl	rand		@
 3540              	.LVL280:
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3541              		.loc 1 503 13 is_stmt 1 view .LVU954
 3542              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3543              		.loc 1 503 41 is_stmt 0 view .LVU955
 3544 0f64 0F7A95ED 		vldr.32	s14, [r5, #60]	@ int	@ tmp242, g_armwave_state.wave_length
 3545              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3546              		.loc 1 503 29 view .LVU956
 3547 0f68 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3548              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3549              		.loc 1 503 41 view .LVU957
 3550 0f6c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp192, tmp242
 3551              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3552              		.loc 1 503 29 view .LVU958
 3553 0f70 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, x
 3554              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3555              		.loc 1 503 41 view .LVU959
 3556 0f74 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp194, tmp234, tmp192
 3557              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3558              		.loc 1 503 29 view .LVU960
 3559 0f78 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp197, tmp196, tmp235
 3560              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3561              		.loc 1 501 30 view .LVU961
 3562 0f7c 7000FFE6 		uxth	r0, r0	@ tmp200,
 3563              	.LVL281:
 3564              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3565              		.loc 1 501 40 view .LVU962
 3566 0f80 100A07EE 		vmov	s14, r0	@ int	@ tmp200, tmp200
 3567 0f84 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp202, tmp200
 3568              	@ armwave.c:501:             xnoise = (rand() & 0xffff) / 6553500.0f;
 501:armwave.c     **** 
 3569              		.loc 1 501 20 view .LVU963
 3570 0f88 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp202, tmp204
 3571              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3572              		.loc 1 503 73 view .LVU964
 3573 0f8c A70A06EE 		vmla.f32	s0, s13, s15	@ tmp205, tmp194, tmp197
 3574              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3575              		.loc 1 503 18 view .LVU965
 3576 0f90 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 3577 0f94 FEFFFFEB 		bl	sin		@
 3578              	.LVL282:
 3579              		.loc 1 506 13 is_stmt 1 view .LVU966
 3580              	@ armwave.c:500:             noise += 1.0f;
 500:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3581              		.loc 1 500 19 is_stmt 0 view .LVU967
 3582 0f98 087A7EEE 		vadd.f32	s15, s28, s16	@ noise, noise, tmp234
 3583              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3584              		.loc 1 506 87 view .LVU968
 3585 0f9c 0020A0E3 		mov	r2, #0	@ iftmp.22_39,
 3586              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3587              		.loc 1 503 94 view .LVU969
 3588 0fa0 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp211, noise
 3589              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3590              		.loc 1 503 83 view .LVU970
 3591 0fa4 000B29EE 		vmul.f64	d0, d9, d0	@ tmp208, tmp231,
 3592              	.LVL283:
 3593              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3594              		.loc 1 503 94 view .LVU971
 3595 0fa8 077B20EE 		vmul.f64	d7, d0, d7	@ tmp212, tmp208, tmp211
 3596              	@ armwave.c:503:             v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) 
 503:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3597              		.loc 1 503 15 view .LVU972
 3598 0fac C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp212
 3599              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3600              		.loc 1 506 96 view .LVU973
 3601 0fb0 687AF0EE 		vmov.f32	s15, s17	@ _26, tmp216
 3602 0fb4 0A7A47EE 		vmla.f32	s15, s14, s20	@ _26, v, tmp215
 3603 0fb8 C07AF5EE 		vcmpe.f32	s15, #0	@ _26
 3604 0fbc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3605 0fc0 050000DA 		ble	.L237		@,
 3606              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3607              		.loc 1 506 87 discriminator 1 view .LVU974
 3608 0fc4 CC7AF4EE 		vcmpe.f32	s15, s24	@ _26, tmp236
 3609 0fc8 FF20A0E3 		mov	r2, #255	@ iftmp.22_39,
 3610 0fcc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3611 0fd0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp220, _26
 3612 0fd4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp220, %sfp
 3613 0fd8 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_39, %sfp
 3614              	.L237:
 3615              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3616              		.loc 1 506 53 discriminator 12 view .LVU975
 3617 0fdc 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3618              	@ armwave.c:506:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3619              		.loc 1 506 85 discriminator 12 view .LVU976
 3620 0fe0 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3621 0fe4 931623E0 		mla	r3, r3, r6, r1	@ tmp226, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 3622 0fe8 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.22_39, *_31
 3623              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3624              		.loc 1 491 39 discriminator 12 view .LVU977
 3625 0fec 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_96, g_armwave_state.wave_length
 3626              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3627              		.loc 1 491 54 discriminator 12 view .LVU978
 3628 0ff0 014084E2 		add	r4, r4, #1	@ x, x,
 3629              	.LVL284:
 3630              	@ armwave.c:491:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 491:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3631              		.loc 1 491 9 discriminator 12 view .LVU979
 3632 0ff4 040053E1 		cmp	r3, r4	@ prephitmp_96, x
 3633 0ff8 CDFFFF8A 		bhi	.L240		@,
 3634 0ffc 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_80, g_armwave_state.waves
 3635              	.LVL285:
 3636              	.L235:
 3637              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3638              		.loc 1 487 44 discriminator 2 view .LVU980
 3639 1000 016086E2 		add	r6, r6, #1	@ w, w,
 3640              	.LVL286:
 3641              	@ armwave.c:487:     for(w = 0; w < g_armwave_state.waves; w++) {
 487:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3642              		.loc 1 487 5 discriminator 2 view .LVU981
 3643 1004 020056E1 		cmp	r6, r2	@ w, prephitmp_80
 3644 1008 BDFFFF3A 		bcc	.L241		@,
 3645              	.LVL287:
 3646              	.L231:
 3647              	@ armwave.c:509: }
 507:armwave.c     ****         }
 508:armwave.c     ****     }
 509:armwave.c     **** }
 3648              		.loc 1 509 1 view .LVU982
 3649 100c 08D08DE2 		add	sp, sp, #8	@,,
 3650              		.cfi_remember_state
 3651              		.cfi_def_cfa_offset 72
 3652              		@ sp needed	@
 3653 1010 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3654              		.cfi_restore 92
 3655              		.cfi_restore 93
 3656              		.cfi_restore 90
 3657              		.cfi_restore 91
 3658              		.cfi_restore 88
 3659              		.cfi_restore 89
 3660              		.cfi_restore 86
 3661              		.cfi_restore 87
 3662              		.cfi_restore 84
 3663              		.cfi_restore 85
 3664              		.cfi_restore 82
 3665              		.cfi_restore 83
 3666              		.cfi_restore 80
 3667              		.cfi_restore 81
 3668              		.cfi_def_cfa_offset 16
 3669              	.LVL288:
 3670              		.loc 1 509 1 view .LVU983
 3671 1014 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3672              	.LVL289:
 3673              	.L261:
 3674              		.cfi_restore_state
 3675              	.LBB52:
 3676              	.LBB48:
 443:armwave.c     ****         return;
 3677              		.loc 1 443 9 is_stmt 1 view .LVU984
 3678 1018 0410A0E1 		mov	r1, r4	@, _68
 3679 101c 2C009FE5 		ldr	r0, .L262+40	@,
 3680 1020 FEFFFFEB 		bl	printf		@
 3681              	.LVL290:
 444:armwave.c     ****     }
 3682              		.loc 1 444 9 view .LVU985
 3683 1024 ACFFFFEA 		b	.L233		@
 3684              	.L263:
 3685              		.align	2
 3686              	.L262:
 3687 1028 0000803C 		.word	1015021568
 3688 102c 0000003F 		.word	1056964608
 3689 1030 0000803F 		.word	1065353216
 3690 1034 C3F5C840 		.word	1086911939
 3691 1038 00007F43 		.word	1132396544
 3692 103c 38FFC74A 		.word	1254620984
 3693 1040 0000FE42 		.word	1123942400
 3694 1044 00000043 		.word	1124073472
 3695 1048 00000000 		.word	g_armwave_state
 3696 104c F4010000 		.word	.LC20
 3697 1050 24020000 		.word	.LC21
 3698              	.LBE48:
 3699              	.LBE52:
 3700              		.cfi_endproc
 3701              	.LFE76:
 3703              		.align	2
 3704              		.global	armwave_test_create_square
 3705              		.syntax unified
 3706              		.arm
 3707              		.fpu vfp
 3709              	armwave_test_create_square:
 3710              	.LVL291:
 3711              	.LFB77:
 510:armwave.c     **** 
 511:armwave.c     **** /*
 512:armwave.c     ****  * Make a test square waveform.
 513:armwave.c     ****  *
 514:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 515:armwave.c     ****  */
 516:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 517:armwave.c     **** {
 3712              		.loc 1 517 1 view -0
 3713              		.cfi_startproc
 3714              		@ args = 0, pretend = 0, frame = 8
 3715              		@ frame_needed = 0, uses_anonymous_args = 0
 518:armwave.c     ****     uint8_t v;
 3716              		.loc 1 518 5 view .LVU987
 519:armwave.c     ****     float noise, xnoise;
 3717              		.loc 1 519 5 view .LVU988
 520:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3718              		.loc 1 520 5 view .LVU989
 521:armwave.c     ****     int w, x;
 3719              		.loc 1 521 5 view .LVU990
 522:armwave.c     **** 
 523:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 3720              		.loc 1 523 5 view .LVU991
 3721              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3722              		.loc 1 517 1 is_stmt 0 view .LVU992
 3723 1054 70402DE9 		push	{r4, r5, r6, lr}	@
 3724              		.cfi_def_cfa_offset 16
 3725              		.cfi_offset 4, -16
 3726              		.cfi_offset 5, -12
 3727              		.cfi_offset 6, -8
 3728              		.cfi_offset 14, -4
 3729 1058 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3730              		.cfi_def_cfa_offset 56
 3731              		.cfi_offset 80, -56
 3732              		.cfi_offset 81, -52
 3733              		.cfi_offset 82, -48
 3734              		.cfi_offset 83, -44
 3735              		.cfi_offset 84, -40
 3736              		.cfi_offset 85, -36
 3737              		.cfi_offset 86, -32
 3738              		.cfi_offset 87, -28
 3739              		.cfi_offset 88, -24
 3740              		.cfi_offset 89, -20
 3741              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3742              		.loc 1 523 35 view .LVU993
 3743 105c 54519FE5 		ldr	r5, .L292+32	@ tmp179,
 3744 1060 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 3745              	@ armwave.c:517: {
 517:armwave.c     ****     uint8_t v;
 3746              		.loc 1 517 1 view .LVU994
 3747 1064 08D04DE2 		sub	sp, sp, #8	@,,
 3748              		.cfi_def_cfa_offset 64
 3749              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 3750              		.loc 1 523 5 view .LVU995
 3751 1068 000052E3 		cmp	r2, #0	@ prephitmp_33,
 3752 106c 4600000A 		beq	.L264		@,
 3753 1070 409AF0EE 		vmov.f32	s19, s0	@ noise_fraction, noise_fraction
 3754              	@ armwave.c:520:     float level = 0.8f, new_level = 0.8f;
 520:armwave.c     ****     int w, x;
 3755              		.loc 1 520 11 view .LVU996
 3756 1074 47CA9FED 		vldr.32	s24, .L292	@ level,
 3757              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 524:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 528:armwave.c     ****             noise *= noise;
 529:armwave.c     **** 
 530:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 531:armwave.c     ****                 noise = -noise;
 532:armwave.c     **** 
 533:armwave.c     ****             //noise += 1.0f;
 534:armwave.c     **** 
 535:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 3758              		.loc 1 535 49 view .LVU997
 3759 1078 47AA9FED 		vldr.32	s20, .L292+4	@ tmp186,
 3760              	@ armwave.c:540:                 new_level = 0.2f;
 536:armwave.c     ****                 new_level = 0.2f;
 537:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 538:armwave.c     ****                 new_level = 0.8f;
 539:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 540:armwave.c     ****                 new_level = 0.2f;
 3761              		.loc 1 540 27 view .LVU998
 3762 107c 47AADFED 		vldr.32	s21, .L292+8	@ new_level,
 3763              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3764              		.loc 1 537 56 view .LVU999
 3765 1080 47BADFED 		vldr.32	s23, .L292+12	@ tmp188,
 3766              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 3767              		.loc 1 539 56 view .LVU1000
 3768 1084 478ADFED 		vldr.32	s17, .L292+16	@ tmp189,
 3769 1088 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 3770              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3771              		.loc 1 523 11 view .LVU1001
 3772 108c 0060A0E3 		mov	r6, #0	@ w,
 3773              	.LVL292:
 3774              	.L266:
 3775              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3776              		.loc 1 524 9 view .LVU1002
 3777 1090 000053E3 		cmp	r3, #0	@ prephitmp_70,
 3778 1094 3900000A 		beq	.L273		@,
 3779              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3780              		.loc 1 538 27 view .LVU1003
 3781 1098 3EBA9FED 		vldr.32	s22, .L292	@ new_level,
 3782              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 541:armwave.c     ****             } else {
 542:armwave.c     ****                 new_level = 0.8f;
 543:armwave.c     ****             }
 544:armwave.c     **** 
 545:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3783              		.loc 1 545 29 view .LVU1004
 3784 109c 429A9FED 		vldr.32	s18, .L292+20	@ tmp161,
 3785              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3786              		.loc 1 524 15 view .LVU1005
 3787 10a0 0040A0E3 		mov	r4, #0	@ x,
 3788              	.LVL293:
 3789              	.L272:
 525:armwave.c     ****             noise *= noise;
 3790              		.loc 1 525 13 is_stmt 1 view .LVU1006
 3791              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3792              		.loc 1 525 24 is_stmt 0 view .LVU1007
 3793 10a4 FEFFFFEB 		bl	rand		@
 3794              	.LVL294:
 3795              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3796              		.loc 1 525 31 view .LVU1008
 3797 10a8 7000FFE6 		uxth	r0, r0	@ tmp148,
 3798              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3799              		.loc 1 525 41 view .LVU1009
 3800 10ac 900A07EE 		vmov	s15, r0	@ int	@ tmp148, tmp148
 3801 10b0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp150, tmp148
 3802              	@ armwave.c:525:             noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****             noise *= noise;
 3803              		.loc 1 525 20 view .LVU1010
 3804 10b4 A97A67EE 		vmul.f32	s15, s15, s19	@ noise, tmp150, noise_fraction
 3805              	.LVL295:
 526:armwave.c     ****             noise *= noise;
 3806              		.loc 1 526 13 is_stmt 1 view .LVU1011
 3807              	@ armwave.c:526:             noise *= noise;
 526:armwave.c     ****             noise *= noise;
 3808              		.loc 1 526 19 is_stmt 0 view .LVU1012
 3809 10b8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3810              	.LVL296:
 527:armwave.c     ****             noise *= noise;
 3811              		.loc 1 527 13 is_stmt 1 view .LVU1013
 3812              	@ armwave.c:527:             noise *= noise;
 527:armwave.c     ****             noise *= noise;
 3813              		.loc 1 527 19 is_stmt 0 view .LVU1014
 3814 10bc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3815              	.LVL297:
 528:armwave.c     **** 
 3816              		.loc 1 528 13 is_stmt 1 view .LVU1015
 3817              	@ armwave.c:528:             noise *= noise;
 528:armwave.c     **** 
 3818              		.loc 1 528 19 is_stmt 0 view .LVU1016
 3819 10c0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3820              	.LVL298:
 530:armwave.c     ****                 noise = -noise;
 3821              		.loc 1 530 13 is_stmt 1 view .LVU1017
 3822              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3823              		.loc 1 530 17 is_stmt 0 view .LVU1018
 3824 10c4 FEFFFFEB 		bl	rand		@
 3825              	.LVL299:
 3826              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3827              		.loc 1 535 18 view .LVU1019
 3828 10c8 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3829 10cc E77AB8EE 		vcvt.f32.s32	s14, s15	@ _6, x
 3830              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3831              		.loc 1 535 49 view .LVU1020
 3832 10d0 0F7AD5ED 		vldr.32	s15, [r5, #60]	@ int	@ tmp195, g_armwave_state.wave_length
 3833 10d4 677AF8EE 		vcvt.f32.u32	s15, s15	@ _8, tmp195
 3834 10d8 8A6A67EE 		vmul.f32	s13, s15, s20	@ tmp154, _8, tmp186
 3835              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3836              		.loc 1 535 15 view .LVU1021
 3837 10dc E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp154
 3838              	@ armwave.c:530:             if((rand() & 0xff) > 0x7f)
 530:armwave.c     ****                 noise = -noise;
 3839              		.loc 1 530 15 view .LVU1022
 3840 10e0 800010E3 		tst	r0, #128	@,
 531:armwave.c     **** 
 3841              		.loc 1 531 17 is_stmt 1 view .LVU1023
 3842              	@ armwave.c:531:                 noise = -noise;
 531:armwave.c     **** 
 3843              		.loc 1 531 23 is_stmt 0 view .LVU1024
 3844 10e4 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3845              	.LVL300:
 535:armwave.c     ****                 new_level = 0.2f;
 3846              		.loc 1 535 13 is_stmt 1 view .LVU1025
 3847              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3848              		.loc 1 535 15 is_stmt 0 view .LVU1026
 3849 10e8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3850              	@ armwave.c:540:                 new_level = 0.2f;
 540:armwave.c     ****             } else {
 3851              		.loc 1 540 27 view .LVU1027
 3852 10ec 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3853              	@ armwave.c:535:             if(x > (g_armwave_state.wave_length * 0.75f)) {
 535:armwave.c     ****                 new_level = 0.2f;
 3854              		.loc 1 535 15 view .LVU1028
 3855 10f0 090000CA 		bgt	.L268		@,
 537:armwave.c     ****                 new_level = 0.8f;
 3856              		.loc 1 537 20 is_stmt 1 view .LVU1029
 3857              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3858              		.loc 1 537 56 is_stmt 0 view .LVU1030
 3859 10f4 AB6A67EE 		vmul.f32	s13, s15, s23	@ tmp156, _8, tmp188
 3860              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3861              		.loc 1 537 22 view .LVU1031
 3862 10f8 E67AB4EE 		vcmpe.f32	s14, s13	@ _6, tmp156
 3863 10fc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3864              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3865              		.loc 1 538 27 view .LVU1032
 3866 1100 4B7AF0CE 		vmovgt.f32	s15, s22	@ new_level, new_level
 3867              	@ armwave.c:537:             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 537:armwave.c     ****                 new_level = 0.8f;
 3868              		.loc 1 537 22 view .LVU1033
 3869 1104 040000CA 		bgt	.L268		@,
 539:armwave.c     ****                 new_level = 0.2f;
 3870              		.loc 1 539 20 is_stmt 1 view .LVU1034
 3871              	@ armwave.c:539:             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 539:armwave.c     ****                 new_level = 0.2f;
 3872              		.loc 1 539 56 is_stmt 0 view .LVU1035
 3873 1108 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp158, _8, tmp189
 3874              	@ armwave.c:538:                 new_level = 0.8f;
 538:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 3875              		.loc 1 538 27 view .LVU1036
 3876 110c E77AB4EE 		vcmpe.f32	s14, s15	@ _6, tmp158
 3877 1110 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3878 1114 4B7AF0DE 		vmovle.f32	s15, s22	@, new_level, new_level
 3879 1118 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3880              	.L268:
 3881              	.LVL301:
 3882              		.loc 1 545 13 is_stmt 1 view .LVU1037
 3883              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 3884              		.loc 1 545 34 is_stmt 0 view .LVU1038
 3885 111c 097A4CEE 		vmla.f32	s15, s24, s18	@ _14, level, tmp161
 3886              	.LVL302:
 3887              	@ armwave.c:545:             level = ((level * 3) + new_level) * 0.25f;
 3888              		.loc 1 545 19 view .LVU1039
 3889 1120 A8CA27EE 		vmul.f32	s24, s15, s17	@ level, _14, tmp189
 3890              	.LVL303:
 546:armwave.c     **** 
 547:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3891              		.loc 1 547 13 is_stmt 1 view .LVU1040
 3892              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3893              		.loc 1 547 27 is_stmt 0 view .LVU1041
 3894 1124 0C7A78EE 		vadd.f32	s15, s16, s24	@ _15, noise, level
 3895 1128 C07AF5EE 		vcmpe.f32	s15, #0	@ _15
 3896 112c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3897              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3898              		.loc 1 547 17 view .LVU1042
 3899 1130 0020A0D3 		movle	r2, #0	@ iftmp.29_32,
 3900              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3901              		.loc 1 547 27 view .LVU1043
 3902 1134 080000DA 		ble	.L269		@,
 3903              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3904              		.loc 1 547 17 discriminator 1 view .LVU1044
 3905 1138 1C7A9FED 		vldr.32	s14, .L292+24	@ tmp164,
 3906 113c C77AF4EE 		vcmpe.f32	s15, s14	@ _15, tmp164
 3907 1140 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3908              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3909              		.loc 1 547 60 discriminator 1 view .LVU1045
 3910 1144 1A7A9F4D 		vldrmi.32	s14, .L292+28	@ tmp166,
 3911              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3912              		.loc 1 547 17 discriminator 1 view .LVU1046
 3913 1148 FF20A053 		movpl	r2, #255	@ iftmp.29_32,
 3914              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3915              		.loc 1 547 60 discriminator 1 view .LVU1047
 3916 114c 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp165, _15, tmp166
 3917              	@ armwave.c:547:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3918              		.loc 1 547 17 discriminator 1 view .LVU1048
 3919 1150 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp168, tmp165
 3920 1154 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp168, %sfp
 3921 1158 0420DD45 		ldrbmi	r2, [sp, #4]	@ zero_extendqisi2	@ iftmp.29_32, %sfp
 3922              	.L269:
 3923              	.LVL304:
 548:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 3924              		.loc 1 548 13 is_stmt 1 discriminator 12 view .LVU1049
 3925              	@ armwave.c:548:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3926              		.loc 1 548 53 is_stmt 0 discriminator 12 view .LVU1050
 3927 115c 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3928              	@ armwave.c:548:             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)
 3929              		.loc 1 548 85 discriminator 12 view .LVU1051
 3930 1160 181095E5 		ldr	r1, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3931 1164 931623E0 		mla	r3, r3, r6, r1	@ tmp174, g_armwave_state.wave_stride, w, g_armwave_state.test_wave_buffer
 3932 1168 0420C3E7 		strb	r2, [r3, r4]	@ iftmp.29_32, *_21
 3933              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3934              		.loc 1 524 39 discriminator 12 view .LVU1052
 3935 116c 3C3095E5 		ldr	r3, [r5, #60]	@ prephitmp_70, g_armwave_state.wave_length
 3936              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3937              		.loc 1 524 54 discriminator 12 view .LVU1053
 3938 1170 014084E2 		add	r4, r4, #1	@ x, x,
 3939              	.LVL305:
 3940              	@ armwave.c:524:         for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3941              		.loc 1 524 9 discriminator 12 view .LVU1054
 3942 1174 040053E1 		cmp	r3, r4	@ prephitmp_70, x
 3943 1178 C9FFFF8A 		bhi	.L272		@,
 3944 117c 282095E5 		ldr	r2, [r5, #40]	@ prephitmp_33, g_armwave_state.waves
 3945              	.LVL306:
 3946              	.L273:
 3947              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3948              		.loc 1 523 44 discriminator 2 view .LVU1055
 3949 1180 016086E2 		add	r6, r6, #1	@ w, w,
 3950              	.LVL307:
 3951              	@ armwave.c:523:     for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 3952              		.loc 1 523 5 discriminator 2 view .LVU1056
 3953 1184 020056E1 		cmp	r6, r2	@ w, prephitmp_33
 3954 1188 C0FFFF3A 		bcc	.L266		@,
 3955              	.LVL308:
 3956              	.L264:
 3957              	@ armwave.c:551: }
 549:armwave.c     ****         }
 550:armwave.c     ****     }
 551:armwave.c     **** }
 3958              		.loc 1 551 1 view .LVU1057
 3959 118c 08D08DE2 		add	sp, sp, #8	@,,
 3960              		.cfi_def_cfa_offset 56
 3961              		@ sp needed	@
 3962 1190 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3963              		.cfi_restore 88
 3964              		.cfi_restore 89
 3965              		.cfi_restore 86
 3966              		.cfi_restore 87
 3967              		.cfi_restore 84
 3968              		.cfi_restore 85
 3969              		.cfi_restore 82
 3970              		.cfi_restore 83
 3971              		.cfi_restore 80
 3972              		.cfi_restore 81
 3973              		.cfi_def_cfa_offset 16
 3974 1194 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3975              	.L293:
 3976              		.align	2
 3977              	.L292:
 3978 1198 CDCC4C3F 		.word	1061997773
 3979 119c 0000403F 		.word	1061158912
 3980 11a0 CDCC4C3E 		.word	1045220557
 3981 11a4 0000003F 		.word	1056964608
 3982 11a8 0000803E 		.word	1048576000
 3983 11ac 00004040 		.word	1077936128
 3984 11b0 0000803F 		.word	1065353216
 3985 11b4 00007F43 		.word	1132396544
 3986 11b8 00000000 		.word	g_armwave_state
 3987              		.cfi_endproc
 3988              	.LFE77:
 3990              		.align	2
 3991              		.global	armwave_cleanup
 3992              		.syntax unified
 3993              		.arm
 3994              		.fpu vfp
 3996              	armwave_cleanup:
 3997              	.LFB78:
 552:armwave.c     **** 
 553:armwave.c     **** /*
 554:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 555:armwave.c     ****  */
 556:armwave.c     **** void armwave_cleanup()
 557:armwave.c     **** {
 3998              		.loc 1 557 1 is_stmt 1 view -0
 3999              		.cfi_startproc
 4000              		@ args = 0, pretend = 0, frame = 0
 4001              		@ frame_needed = 0, uses_anonymous_args = 0
 558:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4002              		.loc 1 558 5 view .LVU1059
 4003              	@ armwave.c:557: {
 557:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4004              		.loc 1 557 1 is_stmt 0 view .LVU1060
 4005 11bc 10402DE9 		push	{r4, lr}	@
 4006              		.cfi_def_cfa_offset 8
 4007              		.cfi_offset 4, -8
 4008              		.cfi_offset 14, -4
 4009              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4010              		.loc 1 558 25 view .LVU1061
 4011 11c0 34409FE5 		ldr	r4, .L296	@ tmp114,
 4012              	@ armwave.c:558:     free(g_armwave_state.out_pixbuf);
 4013              		.loc 1 558 5 view .LVU1062
 4014 11c4 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.out_pixbuf
 4015 11c8 FEFFFFEB 		bl	free		@
 4016              	.LVL309:
 559:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4017              		.loc 1 559 5 is_stmt 1 view .LVU1063
 4018 11cc 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4019 11d0 FEFFFFEB 		bl	free		@
 4020              	.LVL310:
 560:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4021              		.loc 1 560 5 view .LVU1064
 4022 11d4 740094E5 		ldr	r0, [r4, #116]	@, g_armwave_state.xcoord_to_xpixel
 4023 11d8 FEFFFFEB 		bl	free		@
 4024              	.LVL311:
 561:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4025              		.loc 1 561 5 view .LVU1065
 4026 11dc 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4027 11e0 FEFFFFEB 		bl	free		@
 4028              	.LVL312:
 562:armwave.c     **** 
 563:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4029              		.loc 1 563 5 view .LVU1066
 4030              	@ armwave.c:563:     g_armwave_state.out_pixbuf = NULL;
 4031              		.loc 1 563 32 is_stmt 0 view .LVU1067
 4032 11e4 0030A0E3 		mov	r3, #0	@ tmp123,
 4033 11e8 583084E5 		str	r3, [r4, #88]	@ tmp123, g_armwave_state.out_pixbuf
 564:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4034              		.loc 1 564 5 is_stmt 1 view .LVU1068
 4035              	@ armwave.c:564:     g_armwave_state.ch1_buffer = NULL;
 4036              		.loc 1 564 32 is_stmt 0 view .LVU1069
 4037 11ec 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 565:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4038              		.loc 1 565 5 is_stmt 1 view .LVU1070
 4039              	@ armwave.c:565:     g_armwave_state.xcoord_to_xpixel = NULL;
 4040              		.loc 1 565 38 is_stmt 0 view .LVU1071
 4041 11f0 743084E5 		str	r3, [r4, #116]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 566:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4042              		.loc 1 566 5 is_stmt 1 view .LVU1072
 4043              	@ armwave.c:566:     g_armwave_state.test_wave_buffer = NULL;
 4044              		.loc 1 566 38 is_stmt 0 view .LVU1073
 4045 11f4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4046              	@ armwave.c:567: }
 567:armwave.c     **** }
 4047              		.loc 1 567 1 view .LVU1074
 4048 11f8 1080BDE8 		pop	{r4, pc}	@
 4049              	.L297:
 4050              		.align	2
 4051              	.L296:
 4052 11fc 00000000 		.word	g_armwave_state
 4053              		.cfi_endproc
 4054              	.LFE78:
 4056              		.comm	gamma_table,256,4
 4057              		.comm	g_armwave_state,120,4
 4058              		.section	.rodata
 4059              		.align	2
 4060              		.set	.LANCHOR0,. + 0
 4063              	__PRETTY_FUNCTION__.17017:
 4064 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4064      6176655F 
 4064      66696C6C 
 4064      5F706978 
 4064      6275665F 
 4067              	__PRETTY_FUNCTION__.17048:
 4068 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4068      6176655F 
 4068      66696C6C 
 4068      5F706978 
 4068      6275665F 
 4069 0033 00       		.space	1
 4072              	__PRETTY_FUNCTION__.17070:
 4073 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4073      6176655F 
 4073      73657475 
 4073      705F7265 
 4073      6E646572 
 4074 0049 000000   		.space	3
 4077              	__PRETTY_FUNCTION__.17077:
 4078 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4078      6176655F 
 4078      7365745F 
 4078      77617665 
 4078      5F706F69 
 4079 0065 000000   		.space	3
 4082              	__PRETTY_FUNCTION__.17083:
 4083 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4083      6176655F 
 4083      7365745F 
 4083      77617665 
 4083      5F706F69 
 4084              		.section	.rodata.str1.4,"aMS",%progbits,1
 4085              		.align	2
 4086              	.LC0:
 4087 0000 76302E30 		.ascii	"v0.0.1\000"
 4087      2E3100
 4088 0007 00       		.space	1
 4089              	.LC1:
 4090 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4090      61766520 
 4090      76657273 
 4090      696F6E3A 
 4090      2025730A 
 4091 001d 000000   		.space	3
 4092              	.LC2:
 4093 0020 6368315F 		.ascii	"ch1_buffer=0x%08x\012\000"
 4093      62756666 
 4093      65723D30 
 4093      78253038 
 4093      780A00
 4094 0033 00       		.space	1
 4095              	.LC3:
 4096 0034 77617665 		.ascii	"wave_buffer=0x%08x\012\000"
 4096      5F627566 
 4096      6665723D 
 4096      30782530 
 4096      38780A00 
 4097              	.LC4:
 4098 0048 61726D77 		.ascii	"armwave.c\000"
 4098      6176652E 
 4098      6300
 4099 0052 0000     		.space	2
 4100              	.LC5:
 4101 0054 6F75745F 		.ascii	"out_buffer != NULL\000"
 4101      62756666 
 4101      65722021 
 4101      3D204E55 
 4101      4C4C00
 4102 0067 00       		.space	1
 4103              	.LC6:
 4104 0068 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4104      20653D25 
 4104      6420773D 
 4104      25642077 
 4104      733D2564 
 4105              	.LC7:
 4106 0094 73746172 		.ascii	"start_point < end_point\000"
 4106      745F706F 
 4106      696E7420 
 4106      3C20656E 
 4106      645F706F 
 4107              	.LC8:
 4108 00ac 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 4108      65745F68 
 4108      65696768 
 4108      74203D3D 
 4108      20323536 
 4109 00df 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 4109      68656967 
 4109      6874203D 
 4109      3D203130 
 4109      3234207C 
 4110 010b 00       		.space	1
 4111              	.LC9:
 4112 010c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4112      7566665F 
 4112      73697A65 
 4112      3D25640A 
 4112      00
 4113 011d 000000   		.space	3
 4114              	.LC10:
 4115 0120 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4115      6D776176 
 4115      655F7374 
 4115      6174652E 
 4115      6368315F 
 4116 0143 00       		.space	1
 4117              	.LC11:
 4118 0144 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4118      6D776176 
 4118      655F7374 
 4118      6174652E 
 4118      78636F6F 
 4119 016d 000000   		.space	3
 4120              	.LC12:
 4121 0170 77617665 		.ascii	"wave_buffer != NULL\000"
 4121      5F627566 
 4121      66657220 
 4121      213D204E 
 4121      554C4C00 
 4122              	.LC13:
 4123 0184 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4123      5F627566 
 4123      6665725F 
 4123      70747220 
 4123      213D2030 
 4124 0199 000000   		.space	3
 4125              	.LC14:
 4126 019c 776200   		.ascii	"wb\000"
 4127 019f 00       		.space	1
 4128              	.LC15:
 4129 01a0 50330A00 		.ascii	"P3\012\000"
 4130              	.LC16:
 4131 01a4 25642025 		.ascii	"%d %d\012\000"
 4131      640A00
 4132 01ab 00       		.space	1
 4133              	.LC17:
 4134 01ac 3235350A 		.ascii	"255\012\000"
 4134      00
 4135 01b1 000000   		.space	3
 4136              	.LC18:
 4137 01b4 25336420 		.ascii	"%3d %3d %3d\012\000"
 4137      25336420 
 4137      2533640A 
 4137      00
 4138 01c1 000000   		.space	3
 4139              	.LC19:
 4140 01c4 61726D77 		.ascii	"armwave_test_generate: slice %d (y=%d, h=%d)\012\000"
 4140      6176655F 
 4140      74657374 
 4140      5F67656E 
 4140      65726174 
 4141 01f2 0000     		.space	2
 4142              	.LC20:
 4143 01f4 61726D77 		.ascii	"armwave_test_buffer_alloc: length=%d max=%d\012\000"
 4143      6176655F 
 4143      74657374 
 4143      5F627566 
 4143      6665725F 
 4144 0221 000000   		.space	3
 4145              	.LC21:
 4146 0224 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4146      6176655F 
 4146      74657374 
 4146      5F627566 
 4146      6665725F 
 4147 0257 77617665 		.ascii	"wave buffer (%d bytes)\012\000"
 4147      20627566 
 4147      66657220 
 4147      28256420 
 4147      62797465 
 4148 026f 00       		.space	1
 4149              	.LC22:
 4150 0270 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: start\000"
 4150      6176655F 
 4150      66696C6C 
 4150      5F706978 
 4150      6275665F 
 4151 0299 000000   		.space	3
 4152              	.LC23:
 4153 029c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4153      6176655F 
 4153      66696C6C 
 4153      5F706978 
 4153      6275665F 
 4154 02cf 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4154      20666169 
 4154      6C65642C 
 4154      20726574 
 4154      75726E69 
 4155 02ee 0000     		.space	2
 4156              	.LC24:
 4157 02f0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: buffer fill done"
 4157      6176655F 
 4157      66696C6C 
 4157      5F706978 
 4157      6275665F 
 4158 0323 00       		.ascii	"\000"
 4159              	.LC25:
 4160 0324 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: done\000"
 4160      6176655F 
 4160      66696C6C 
 4160      5F706978 
 4160      6275665F 
 4161              		.text
 4162              	.Letext0:
 4163              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4164              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4165              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4166              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4167              		.file 7 "/usr/include/stdio.h"
 4168              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4169              		.file 9 "/usr/include/errno.h"
 4170              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4171              		.file 11 "/usr/include/unistd.h"
 4172              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4173              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4174              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4175              		.file 15 "/usr/include/math.h"
 4176              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4177              		.file 17 "/usr/include/time.h"
 4178              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4179              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4180              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4181              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4182              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4183              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4184              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4185              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4186              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4187              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4188              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4189              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4190              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4191              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4192              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4193              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4194              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4195              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4196              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4197              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4198              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4199              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4200              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4201              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4202              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4203              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4204              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4205              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4206              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4207              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4208              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4209              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4210              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4211              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4212              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4213              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4214              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4215              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4216              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4217              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4218              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4219              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4220              		.file 60 "/usr/local/include/python3.8/context.h"
 4221              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4222              		.file 62 "/usr/local/include/python3.8/code.h"
 4223              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4224              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4225              		.file 65 "/usr/local/include/python3.8/import.h"
 4226              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4227              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4228              		.file 68 "armwave.h"
 4229              		.file 69 "/usr/include/stdlib.h"
 4230              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4231              		.file 71 "/usr/include/assert.h"
 4232              		.file 72 "<built-in>"
 4233              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
