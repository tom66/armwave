   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.47, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.41, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.41, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.47, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.42, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.41, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.48, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.41,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.42, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 351              		.loc 1 87 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 355              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.41, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.42,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.47, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.41, ivtmp.41, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.40, ivtmp.47
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  91:armwave.c     ****                 
 435              		.loc 1 91 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  91:armwave.c     ****                 
 470              		.loc 1 91 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  91:armwave.c     ****                 
 506              		.loc 1 91 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.42, ivtmp.42, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.47, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.47, ivtmp.47, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.47, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.48, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.48, ivtmp.48, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.48, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 555              		.loc 1 111 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 111 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU129
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU130
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU131
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU132
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU133
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU134
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU135
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU136
 591 02a8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 592              		.cfi_def_cfa_offset 32
 593              		.cfi_offset 4, -32
 594              		.cfi_offset 5, -28
 595              		.cfi_offset 6, -24
 596              		.cfi_offset 7, -20
 597              		.cfi_offset 8, -16
 598              		.cfi_offset 9, -12
 599              		.cfi_offset 10, -8
 600              		.cfi_offset 14, -4
 601              	@ armwave.c:183:     assert(out_buffer != NULL);
 602              		.loc 1 183 5 view .LVU137
 603 02ac 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 604 02b0 3900000A 		beq	.L39		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 605              		.loc 1 186 5 is_stmt 1 view .LVU138
 606              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 607              		.loc 1 186 45 is_stmt 0 view .LVU139
 608 02b4 F4409FE5 		ldr	r4, .L40	@ tmp218,
 609              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 186 5 view .LVU140
 611 02b8 0010A0E3 		mov	r1, #0	@,
 612              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 186 59 view .LVU141
 614 02bc 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 615 02c0 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 616 02c4 920302E0 		mul	r2, r2, r3	@ tmp171, g_armwave_state.target_height, g_armwave_state.target_width
 617              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 186 5 view .LVU142
 619 02c8 0221A0E1 		lsl	r2, r2, #2	@, tmp171,
 620 02cc FEFFFFEB 		bl	memset		@
 621              	.LVL24:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 188 5 is_stmt 1 view .LVU143
 623              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 188 10 is_stmt 0 view .LVU144
 625 02d0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 02d4 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 627 02d8 9C030CE0 		mul	ip, ip, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 628              	.LVL25:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 629              		.loc 1 231 5 is_stmt 1 view .LVU145
 630              		.loc 1 231 5 is_stmt 0 view .LVU146
 631 02dc 01005CE3 		cmp	ip, #1	@ npix,
 632              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 633              		.loc 1 231 26 view .LVU147
 634 02e0 ACCF8CE0 		add	ip, ip, ip, lsr #31	@ tmp184, npix, npix,
 635              	.LVL26:
 636              		.loc 1 231 26 view .LVU148
 637 02e4 CCC0A0E1 		asr	ip, ip, #1	@ _66, tmp184,
 638              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 639              		.loc 1 231 5 view .LVU149
 640 02e8 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 641 02ec 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 642              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 643              		.loc 1 236 44 view .LVU150
 644 02f0 FC86D4E1 		ldrsh	r8, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 645              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 646              		.loc 1 237 44 view .LVU151
 647 02f4 FE76D4E1 		ldrsh	r7, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 648              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 238 44 view .LVU152
 650 02f8 F067D4E1 		ldrsh	r6, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 651              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 241:armwave.c     ****             g = MIN(gg, 255);
 242:armwave.c     ****             b = MIN(bb, 255);
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n;
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 652              		.loc 1 249 49 view .LVU153
 653 02fc 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 654 0300 020040E2 		sub	r0, r0, #2	@ ivtmp.52, g_armwave_state.ch1_buffer,
 655              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 656              		.loc 1 231 11 view .LVU154
 657 0304 0010A0E3 		mov	r1, #0	@ n,
 658              	.LVL27:
 659              	.L33:
 232:armwave.c     ****         value = wave_word & 0xffff;
 660              		.loc 1 232 9 is_stmt 1 view .LVU155
 233:armwave.c     **** 
 661              		.loc 1 233 9 view .LVU156
 662              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 663              		.loc 1 233 15 is_stmt 0 view .LVU157
 664 0308 B230F0E1 		ldrh	r3, [r0, #2]!	@ MEM[base: _100, offset: 0B], MEM[base: _100, offset: 0B]
 665              	.LVL28:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 666              		.loc 1 235 9 is_stmt 1 view .LVU158
 667              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 668              		.loc 1 235 11 is_stmt 0 view .LVU159
 669 030c FF3013E2 		ands	r3, r3, #255	@ value, MEM[base: _100, offset: 0B],
 670              	.LVL29:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 671              		.loc 1 235 11 view .LVU160
 672 0310 1D00000A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 673              		.loc 1 236 13 is_stmt 1 view .LVU161
 674              	.LVL30:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 675              		.loc 1 237 13 view .LVU162
 238:armwave.c     **** 
 676              		.loc 1 238 13 view .LVU163
 240:armwave.c     ****             g = MIN(gg, 255);
 677              		.loc 1 240 13 view .LVU164
 241:armwave.c     ****             b = MIN(bb, 255);
 678              		.loc 1 241 13 view .LVU165
 242:armwave.c     **** 
 679              		.loc 1 242 13 view .LVU166
 245:armwave.c     **** 
 680              		.loc 1 245 13 view .LVU167
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 681              		.loc 1 248 13 view .LVU168
 682              		.loc 1 249 13 view .LVU169
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 683              		.loc 1 250 13 view .LVU170
 251:armwave.c     ****             xx = (nsub >> 8) / 2;
 684              		.loc 1 251 13 view .LVU171
 252:armwave.c     **** 
 253:armwave.c     ****             //for(y = yy; y < ye; y++) {
 254:armwave.c     ****             y = yy;
 685              		.loc 1 254 13 view .LVU172
 255:armwave.c     ****             {
 256:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 686              		.loc 1 256 17 view .LVU173
 257:armwave.c     ****                 *(out_buffer_base + offset) = word;
 687              		.loc 1 257 17 view .LVU174
 688              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 689              		.loc 1 249 24 is_stmt 0 view .LVU175
 690 0314 71E0EFE6 		uxtb	lr, r1	@ n, n
 691              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 692              		.loc 1 238 47 view .LVU176
 693 0318 830662E1 		smulbb	r2, r3, r6	@ tmp204, value, _20
 694              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 695              		.loc 1 249 32 view .LVU177
 696 031c 90EA07EE 		vmov	s15, lr	@ int	@ n, n
 697              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 698              		.loc 1 237 47 view .LVU178
 699 0320 830769E1 		smulbb	r9, r3, r7	@ tmp208, value, _17
 700              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 701              		.loc 1 238 16 view .LVU179
 702 0324 4224A0E1 		asr	r2, r2, #8	@ bb, tmp204,
 703              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 704              		.loc 1 242 17 view .LVU180
 705 0328 FF0052E3 		cmp	r2, #255	@ bb,
 706              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 707              		.loc 1 249 32 view .LVU181
 708 032c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, n
 709              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 237 16 view .LVU182
 711 0330 4994A0E1 		asr	r9, r9, #8	@ gg, tmp208,
 712              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 713              		.loc 1 236 47 view .LVU183
 714 0334 830863E1 		smulbb	r3, r3, r8	@ tmp214, value, _13
 715              	.LVL31:
 716              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 717              		.loc 1 242 17 view .LVU184
 718 0338 FF20A0A3 		movge	r2, #255	@ bb,
 719              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 720              		.loc 1 241 17 view .LVU185
 721 033c FF0059E3 		cmp	r9, #255	@ gg,
 722 0340 FF90A0A3 		movge	r9, #255	@ gg,
 723              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 724              		.loc 1 236 16 view .LVU186
 725 0344 4334A0E1 		asr	r3, r3, #8	@ rr, tmp214,
 726              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 727              		.loc 1 240 17 view .LVU187
 728 0348 FF0053E3 		cmp	r3, #255	@ rr,
 729              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 730              		.loc 1 249 32 view .LVU188
 731 034c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp196, tmp195, _35
 732              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 733              		.loc 1 245 48 view .LVU189
 734 0350 0994A0E1 		lsl	r9, r9, #8	@ tmp209, gg,
 735              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 736              		.loc 1 245 36 view .LVU190
 737 0354 0228A0E1 		lsl	r2, r2, #16	@ tmp205, bb,
 738              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 739              		.loc 1 240 17 view .LVU191
 740 0358 FF30A0A3 		movge	r3, #255	@ rr,
 741              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 742              		.loc 1 245 48 view .LVU192
 743 035c 7990FFE6 		uxth	r9, r9	@ tmp210, tmp209
 744              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 745              		.loc 1 245 36 view .LVU193
 746 0360 FF2802E2 		and	r2, r2, #16711680	@ tmp206, tmp205,
 747              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 748              		.loc 1 245 43 view .LVU194
 749 0364 092082E1 		orr	r2, r2, r9	@ tmp212, tmp206, tmp210
 750              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 751              		.loc 1 245 54 view .LVU195
 752 0368 7330EFE6 		uxtb	r3, r3	@ rr, rr
 753              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 754              		.loc 1 249 16 view .LVU196
 755 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 756              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 757              		.loc 1 245 54 view .LVU197
 758 0370 033082E1 		orr	r3, r2, r3	@ tmp216, tmp212, rr
 759              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 760              		.loc 1 256 35 view .LVU198
 761 0374 58E094E5 		ldr	lr, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 762              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 763              		.loc 1 251 30 view .LVU199
 764 0378 C194A0E1 		asr	r9, r1, #9	@ xx, n,
 765              	.LVL32:
 766              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 767              		.loc 1 245 18 view .LVU200
 768 037c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp216,
 769              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 770              		.loc 1 257 35 view .LVU201
 771 0380 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 772 0384 9E922EE0 		mla	lr, lr, r2, r9	@ tmp202, g_armwave_state.target_width, yy, xx
 773              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 774              		.loc 1 257 45 view .LVU202
 775 0388 0E3185E7 		str	r3, [r5, lr, lsl #2]	@ word, *_43
 776              	.LVL33:
 777              	.L32:
 778              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 779              		.loc 1 231 34 discriminator 2 view .LVU203
 780 038c 011081E2 		add	r1, r1, #1	@ n, n,
 781              	.LVL34:
 782              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 783              		.loc 1 231 5 discriminator 2 view .LVU204
 784 0390 0C0051E1 		cmp	r1, ip	@ n, _66
 785 0394 DBFFFFBA 		blt	.L33		@,
 786 0398 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 787              	.LVL35:
 788              	.L39:
 183:armwave.c     **** 
 789              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU205
 790 039c 10309FE5 		ldr	r3, .L40+4	@,
 791 03a0 B720A0E3 		mov	r2, #183	@,
 792 03a4 0C109FE5 		ldr	r1, .L40+8	@,
 793 03a8 0C009FE5 		ldr	r0, .L40+12	@,
 794              	.LVL36:
 183:armwave.c     **** 
 795              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU206
 796 03ac FEFFFFEB 		bl	__assert_fail		@
 797              	.LVL37:
 798              	.L41:
 183:armwave.c     **** 
 799              		.loc 1 183 5 discriminator 1 view .LVU207
 800              		.align	2
 801              	.L40:
 802 03b0 00000000 		.word	g_armwave_state
 803 03b4 00000000 		.word	.LANCHOR0
 804 03b8 20000000 		.word	.LC2
 805 03bc 2C000000 		.word	.LC3
 806              		.cfi_endproc
 807              	.LFE60:
 809              		.global	__aeabi_idiv
 810              		.align	2
 811              		.global	armwave_generate
 812              		.syntax unified
 813              		.arm
 814              		.fpu vfp
 816              	armwave_generate:
 817              	.LFB61:
 258:armwave.c     ****             }
 259:armwave.c     ****         }
 260:armwave.c     ****     }
 261:armwave.c     **** }
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_generate()
 267:armwave.c     **** {
 818              		.loc 1 267 1 is_stmt 1 view -0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 72
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t yy;
 822              		.loc 1 268 5 view .LVU209
 269:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 823              		.loc 1 269 5 view .LVU210
 824              	.LVL38:
 270:armwave.c     **** 
 271:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 825              		.loc 1 271 5 view .LVU211
 826              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 827              		.loc 1 267 1 is_stmt 0 view .LVU212
 828 03c0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 829              		.cfi_def_cfa_offset 36
 830              		.cfi_offset 4, -36
 831              		.cfi_offset 5, -32
 832              		.cfi_offset 6, -28
 833              		.cfi_offset 7, -24
 834              		.cfi_offset 8, -20
 835              		.cfi_offset 9, -16
 836              		.cfi_offset 10, -12
 837              		.cfi_offset 11, -8
 838              		.cfi_offset 14, -4
 839              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 840              		.loc 1 271 5 view .LVU213
 841 03c4 0010A0E3 		mov	r1, #0	@,
 842              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 843              		.loc 1 271 58 view .LVU214
 844 03c8 90429FE5 		ldr	r4, .L62	@ tmp212,
 845              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t yy;
 846              		.loc 1 267 1 view .LVU215
 847 03cc 4CD04DE2 		sub	sp, sp, #76	@,,
 848              		.cfi_def_cfa_offset 112
 849              	@ armwave.c:271:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 850              		.loc 1 271 5 view .LVU216
 851 03d0 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 852 03d4 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 853 03d8 FEFFFFEB 		bl	memset		@
 854              	.LVL39:
 272:armwave.c     **** 
 273:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 855              		.loc 1 273 5 is_stmt 1 view .LVU217
 856              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 857              		.loc 1 273 68 is_stmt 0 view .LVU218
 858 03dc 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 859              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 860              		.loc 1 273 51 view .LVU219
 861 03e0 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 862 03e4 0510A0E1 		mov	r1, r5	@, _133
 863              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 864              		.loc 1 273 68 view .LVU220
 865 03e8 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 866              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 867              		.loc 1 273 51 view .LVU221
 868 03ec FEFFFFEB 		bl	__aeabi_idiv		@
 869              	.LVL40:
 870              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 871              		.loc 1 273 5 view .LVU222
 872 03f0 003050E2 		subs	r3, r0, #0	@ _179,
 873 03f4 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 874 03f8 9600000A 		beq	.L42		@,
 875              	.LBB10:
 876              	.LBB11:
 877              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 878              		.loc 1 79 35 view .LVU223
 879 03fc 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 880              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 881              		.loc 1 80 81 view .LVU224
 882 0400 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 883 0404 000053E3 		cmp	r3, #0	@ _38,
 884              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 885              		.loc 1 79 35 view .LVU225
 886 0408 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 887              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 888              		.loc 1 71 40 view .LVU226
 889 040c 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 890              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 891              		.loc 1 71 82 view .LVU227
 892 0410 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 893              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 894              		.loc 1 71 147 view .LVU228
 895 0414 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 896              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 897              		.loc 1 80 36 view .LVU229
 898 0418 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 899              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 900              		.loc 1 80 81 view .LVU230
 901 041c 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 902 0420 8C0000DA 		ble	.L42		@,
 903 0424 000055E3 		cmp	r5, #0	@ _133,
 904 0428 8A00000A 		beq	.L42		@,
 905 042c 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 906 0430 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 907 0434 10208DE5 		str	r2, [sp, #16]	@ ivtmp.72, %sfp
 908 0438 002062E2 		rsb	r2, r2, #0	@ ivtmp.71, ivtmp.72
 909 043c 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 910 0440 14208DE5 		str	r2, [sp, #20]	@ ivtmp.71, %sfp
 911 0444 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 912 0448 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 913 044c 09B0A0E1 		mov	fp, r9	@ _21, _21
 914 0450 00C0A0E3 		mov	ip, #0	@ ivtmp.70,
 915 0454 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 916 0458 032080E0 		add	r2, r0, r3	@ ivtmp.60, tmp231, _17
 917 045c 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 918 0460 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 919 0464 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.70, %sfp
 920 0468 34208DE5 		str	r2, [sp, #52]	@ ivtmp.60, %sfp
 921              	.LBE11:
 922              	.LBE10:
 923              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 924              		.loc 1 273 12 view .LVU231
 925 046c 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.70, %sfp
 926 0470 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 927              	.LVL41:
 928              	.L48:
 274:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 275:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 276:armwave.c     **** 
 277:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 929              		.loc 1 277 9 is_stmt 1 discriminator 3 view .LVU232
 930              	.LBB13:
 931              	.LBI10:
  62:armwave.c     **** {
 932              		.loc 1 62 6 discriminator 3 view .LVU233
 933              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 934              		.loc 1 64 5 discriminator 3 view .LVU234
  65:armwave.c     ****     uint8_t *wave_base;
 935              		.loc 1 65 5 discriminator 3 view .LVU235
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 936              		.loc 1 66 5 discriminator 3 view .LVU236
  67:armwave.c     ****     bufftyp_t *write_buffer;
 937              		.loc 1 67 5 discriminator 3 view .LVU237
  68:armwave.c     **** 
 938              		.loc 1 68 5 discriminator 3 view .LVU238
  71:armwave.c     **** 
 939              		.loc 1 71 5 discriminator 3 view .LVU239
 940              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 941              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU240
 942 0474 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.70, %sfp
 943              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 944              		.loc 1 71 130 discriminator 3 view .LVU241
 945 0478 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.72, %sfp
 946              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 947              		.loc 1 71 105 discriminator 3 view .LVU242
 948 047c 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.70,
 949              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 950              		.loc 1 71 130 discriminator 3 view .LVU243
 951 0480 00208DE5 		str	r2, [sp]	@ ivtmp.72, %sfp
 952 0484 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 953              	.LVL42:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 954              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU244
 955              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 956              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU245
 957 0488 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.71, %sfp
 958 048c 04308DE5 		str	r3, [sp, #4]	@ ivtmp.71, %sfp
 959              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 960              		.loc 1 79 11 discriminator 3 view .LVU246
 961 0490 0030A0E3 		mov	r3, #0	@ w,
 962 0494 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 963              	.LVL43:
 964              	.L45:
  80:armwave.c     **** 
 965              		.loc 1 80 9 is_stmt 1 view .LVU247
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 966              		.loc 1 84 9 view .LVU248
 967              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 968              		.loc 1 79 11 is_stmt 0 view .LVU249
 969 0498 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.61, %sfp
 970 049c 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.60, %sfp
 971 04a0 00309DE5 		ldr	r3, [sp]	@ ivtmp.67, %sfp
 972 04a4 08308DE5 		str	r3, [sp, #8]	@ ivtmp.67, %sfp
 973              	.LVL44:
 974              	.L47:
  87:armwave.c     **** 
 975              		.loc 1 87 13 is_stmt 1 view .LVU250
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 976              		.loc 1 101 17 view .LVU251
 106:armwave.c     ****                 word >>= 8;
 977              		.loc 1 106 17 view .LVU252
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 978              		.loc 1 101 17 view .LVU253
 106:armwave.c     ****                 word >>= 8;
 979              		.loc 1 106 17 view .LVU254
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 980              		.loc 1 101 17 view .LVU255
 106:armwave.c     ****                 word >>= 8;
 981              		.loc 1 106 17 view .LVU256
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 982              		.loc 1 101 17 view .LVU257
 106:armwave.c     ****                 word >>= 8;
 983              		.loc 1 106 17 view .LVU258
 984              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 985              		.loc 1 102 34 is_stmt 0 view .LVU259
 986 04a8 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 987              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 988              		.loc 1 87 18 view .LVU260
 989 04ac 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.59, %sfp
 990              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 991              		.loc 1 102 34 view .LVU261
 992 04b0 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.61
 993 04b4 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.60
 994              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 995              		.loc 1 102 74 view .LVU262
 996 04b8 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 997              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 998              		.loc 1 87 18 view .LVU263
 999 04bc 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1000              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1001              		.loc 1 106 47 view .LVU264
 1002 04c0 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1003              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1004              		.loc 1 94 20 view .LVU265
 1005 04c4 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1006              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1007              		.loc 1 107 22 view .LVU266
 1008 04c8 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1009              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1010              		.loc 1 94 20 view .LVU267
 1011 04cc 0160A003 		moveq	r6, #1	@ tmp239,
 1012 04d0 0060A013 		movne	r6, #0	@ tmp239,
 1013              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1014              		.loc 1 106 47 view .LVU268
 1015 04d4 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1016              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1017              		.loc 1 94 19 view .LVU269
 1018 04d8 FF0059E3 		cmp	r9, #255	@ scale_value,
 1019 04dc 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1020              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1021              		.loc 1 87 18 view .LVU270
 1022 04e0 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.59, %sfp
 1023              	.LVL45:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1024              		.loc 1 89 13 is_stmt 1 view .LVU271
  91:armwave.c     ****                 
 1025              		.loc 1 91 17 view .LVU272
  94:armwave.c     ****                     continue;
 1026              		.loc 1 94 17 view .LVU273
 1027              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1028              		.loc 1 84 9 is_stmt 0 view .LVU274
 1029 04e4 0E90A0E1 		mov	r9, lr	@ ivtmp.59, ivtmp.59
 1030 04e8 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.66, %sfp
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1031              		.loc 1 84 9 view .LVU275
 1032 04ec 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1033              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1034              		.loc 1 102 74 view .LVU276
 1035 04f0 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.61,
 1036 04f4 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1037              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1038              		.loc 1 84 9 view .LVU277
 1039 04f8 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.59, ivtmp.66
 1040              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1041              		.loc 1 94 19 view .LVU278
 1042 04fc 000056E3 		cmp	r6, #0	@ tmp244,
 1043              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1044              		.loc 1 102 74 view .LVU279
 1045 0500 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.60,
 1046              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1047              		.loc 1 106 47 view .LVU280
 1048 0504 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1049 0508 04A08AE0 		add	r10, r10, r4	@ ivtmp.60, ivtmp.60, _208
 1050              	.LVL46:
 106:armwave.c     ****                 word >>= 8;
 1051              		.loc 1 106 47 view .LVU281
 1052 050c 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1053              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1054              		.loc 1 107 22 view .LVU282
 1055 0510 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1056              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1057              		.loc 1 106 47 view .LVU283
 1058 0514 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1059              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1060              		.loc 1 84 9 view .LVU284
 1061 0518 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1062              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1063              		.loc 1 94 19 view .LVU285
 1064 051c 2A00001A 		bne	.L53		@,
 1065              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1066              		.loc 1 94 20 view .LVU286
 1067 0520 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1068              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1069              		.loc 1 106 47 view .LVU287
 1070 0524 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1071              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1072              		.loc 1 94 20 view .LVU288
 1073 0528 0190A003 		moveq	r9, #1	@ tmp256,
 1074 052c 0090A013 		movne	r9, #0	@ tmp256,
 1075              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1076              		.loc 1 106 47 view .LVU289
 1077 0530 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1078              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1079              		.loc 1 94 19 view .LVU290
 1080 0534 FF0054E3 		cmp	r4, #255	@ scale_value,
 1081 0538 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1082 053c 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1083              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 106 47 view .LVU291
 1085 0540 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1086              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1087              		.loc 1 94 19 view .LVU292
 1088 0544 000054E3 		cmp	r4, #0	@ tmp261,
 1089              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1090              		.loc 1 106 47 view .LVU293
 1091 0548 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1092 054c B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1093              		.loc 1 107 17 is_stmt 1 view .LVU294
 1094              	.LVL47:
  91:armwave.c     ****                 
 1095              		.loc 1 91 17 view .LVU295
  94:armwave.c     ****                     continue;
 1096              		.loc 1 94 17 view .LVU296
 1097              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1098              		.loc 1 94 19 is_stmt 0 view .LVU297
 1099 0550 1D00001A 		bne	.L53		@,
 1100              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 20 view .LVU298
 1102 0554 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1103 0558 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1104              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1105              		.loc 1 106 47 view .LVU299
 1106 055c B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1107              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1108              		.loc 1 94 20 view .LVU300
 1109 0560 0140A003 		moveq	r4, #1	@ tmp273,
 1110 0564 0040A013 		movne	r4, #0	@ tmp273,
 1111              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1112              		.loc 1 106 47 view .LVU301
 1113 0568 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1114              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1115              		.loc 1 94 19 view .LVU302
 1116 056c FF005EE3 		cmp	lr, #255	@ scale_value,
 1117 0570 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1118 0574 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1119              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1120              		.loc 1 106 47 view .LVU303
 1121 0578 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1122              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1123              		.loc 1 94 19 view .LVU304
 1124 057c 00005EE3 		cmp	lr, #0	@ tmp278,
 1125              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1126              		.loc 1 106 47 view .LVU305
 1127 0580 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1128 0584 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1129              		.loc 1 107 17 is_stmt 1 view .LVU306
 1130              	.LVL48:
  91:armwave.c     ****                 
 1131              		.loc 1 91 17 view .LVU307
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 17 view .LVU308
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 19 is_stmt 0 view .LVU309
 1135 0588 0F00001A 		bne	.L53		@,
 1136              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1137              		.loc 1 94 20 view .LVU310
 1138 058c 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1139              	.LVL49:
 1140              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1141              		.loc 1 106 47 view .LVU311
 1142 0590 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1143 0594 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1144              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1145              		.loc 1 94 20 view .LVU312
 1146 0598 0110A003 		moveq	r1, #1	@ tmp288,
 1147 059c 0010A013 		movne	r1, #0	@ tmp288,
 1148              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1149              		.loc 1 106 47 view .LVU313
 1150 05a0 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1151              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1152              		.loc 1 94 19 view .LVU314
 1153 05a4 FF0050E3 		cmp	r0, #255	@ word,
 1154 05a8 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1155 05ac 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1156 05b0 000050E3 		cmp	r0, #0	@ tmp293,
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU315
 1159 05b4 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1160 05b8 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1161 05bc B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1162              		.loc 1 107 17 is_stmt 1 view .LVU316
 1163              	.LVL50:
  91:armwave.c     ****                 
 1164              		.loc 1 91 17 view .LVU317
  94:armwave.c     ****                     continue;
 1165              		.loc 1 94 17 view .LVU318
 1166              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1167              		.loc 1 106 47 is_stmt 0 view .LVU319
 1168 05c0 BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1169 05c4 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1170 05c8 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1171              		.loc 1 107 17 is_stmt 1 view .LVU320
 1172              	.LVL51:
 1173              	.L53:
 1174              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1175              		.loc 1 84 9 is_stmt 0 view .LVU321
 1176 05cc D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1177 05d0 020053E1 		cmp	r3, r2	@ _133, tmp302
 1178 05d4 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1179 05d8 035085E0 		add	r5, r5, r3	@ ivtmp.61, ivtmp.61, _208
 1180 05dc B1FFFF8A 		bhi	.L47		@,
 1181              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1182              		.loc 1 79 44 view .LVU322
 1183 05e0 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1184              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1185              		.loc 1 79 5 view .LVU323
 1186 05e4 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1187              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1188              		.loc 1 79 44 view .LVU324
 1189 05e8 013083E2 		add	r3, r3, #1	@ w, w,
 1190              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1191              		.loc 1 79 5 view .LVU325
 1192 05ec 030052E1 		cmp	r2, r3	@ _38, w
 1193              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1194              		.loc 1 79 44 view .LVU326
 1195 05f0 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1196              	.LVL52:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1197              		.loc 1 79 44 view .LVU327
 1198 05f4 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.66, %sfp
 1199 05f8 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1200              	.LVL53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1201              		.loc 1 79 44 view .LVU328
 1202 05fc 032042E0 		sub	r2, r2, r3	@ ivtmp.66, ivtmp.66, _24
 1203 0600 04208DE5 		str	r2, [sp, #4]	@ ivtmp.66, %sfp
 1204 0604 00209DE5 		ldr	r2, [sp]	@ ivtmp.67, %sfp
 1205 0608 033082E0 		add	r3, r2, r3	@ ivtmp.67, ivtmp.67, _24
 1206 060c 00308DE5 		str	r3, [sp]	@ ivtmp.67, %sfp
 1207              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1208              		.loc 1 79 5 view .LVU329
 1209 0610 A0FFFF1A 		bne	.L45		@,
 1210              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1211              		.loc 1 79 5 view .LVU330
 1212              	.LBE12:
 1213              	.LBE13:
 278:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1214              		.loc 1 278 9 is_stmt 1 view .LVU331
 279:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1215              		.loc 1 279 9 view .LVU332
 1216              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1217              		.loc 1 273 86 is_stmt 0 view .LVU333
 1218 0614 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1219              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1220              		.loc 1 273 5 view .LVU334
 1221 0618 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1222              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1223              		.loc 1 273 86 view .LVU335
 1224 061c 013083E2 		add	r3, r3, #1	@ yy, yy,
 1225              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1226              		.loc 1 273 5 view .LVU336
 1227 0620 020053E1 		cmp	r3, r2	@ yy, _179
 1228              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1229              		.loc 1 273 86 view .LVU337
 1230 0624 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1231              	.LVL55:
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1232              		.loc 1 273 86 view .LVU338
 1233 0628 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1234 062c 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.70, %sfp
 1235              	.LVL56:
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1236              		.loc 1 273 86 view .LVU339
 1237 0630 023083E0 		add	r3, r3, r2	@ ivtmp.70, ivtmp.70, _185
 1238 0634 18308DE5 		str	r3, [sp, #24]	@ ivtmp.70, %sfp
 1239 0638 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.71, %sfp
 1240 063c 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1241 0640 032042E0 		sub	r2, r2, r3	@ ivtmp.71, ivtmp.71, _133
 1242 0644 14208DE5 		str	r2, [sp, #20]	@ ivtmp.71, %sfp
 1243 0648 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.72, %sfp
 1244 064c 033082E0 		add	r3, r2, r3	@ ivtmp.72, ivtmp.72, _133
 1245 0650 10308DE5 		str	r3, [sp, #16]	@ ivtmp.72, %sfp
 1246              	@ armwave.c:273:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1247              		.loc 1 273 5 view .LVU340
 1248 0654 86FFFF1A 		bne	.L48		@,
 1249              	.LVL57:
 1250              	.L42:
 1251              	@ armwave.c:283: }
 280:armwave.c     ****     }
 281:armwave.c     **** 
 282:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 283:armwave.c     **** }
 1252              		.loc 1 283 1 view .LVU341
 1253 0658 4CD08DE2 		add	sp, sp, #76	@,,
 1254              		.cfi_def_cfa_offset 36
 1255              		@ sp needed	@
 1256 065c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1257              	.L63:
 1258              		.align	2
 1259              	.L62:
 1260 0660 00000000 		.word	g_armwave_state
 1261              		.cfi_endproc
 1262              	.LFE61:
 1264              		.align	2
 1265              		.global	armwave_setup_render
 1266              		.syntax unified
 1267              		.arm
 1268              		.fpu vfp
 1270              	armwave_setup_render:
 1271              	.LVL58:
 1272              	.LFB62:
 284:armwave.c     **** 
 285:armwave.c     **** /*
 286:armwave.c     ****  * Setup the renderer with passed parameters.
 287:armwave.c     ****  */
 288:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 289:armwave.c     **** {
 1273              		.loc 1 289 1 is_stmt 1 view -0
 1274              		.cfi_startproc
 1275              		@ args = 12, pretend = 0, frame = 0
 1276              		@ frame_needed = 0, uses_anonymous_args = 0
 290:armwave.c     ****     uint32_t length, xx;
 1277              		.loc 1 290 5 view .LVU343
 291:armwave.c     ****     float points_per_pixel;
 1278              		.loc 1 291 5 view .LVU344
 292:armwave.c     **** 
 293:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1279              		.loc 1 293 5 view .LVU345
 1280              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1281              		.loc 1 289 1 is_stmt 0 view .LVU346
 1282 0664 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1283              		.cfi_def_cfa_offset 28
 1284              		.cfi_offset 4, -28
 1285              		.cfi_offset 5, -24
 1286              		.cfi_offset 6, -20
 1287              		.cfi_offset 7, -16
 1288              		.cfi_offset 8, -12
 1289              		.cfi_offset 9, -8
 1290              		.cfi_offset 14, -4
 1291 0668 028B2DED 		vpush.64	{d8}	@
 1292              		.cfi_def_cfa_offset 36
 1293              		.cfi_offset 80, -36
 1294              		.cfi_offset 81, -32
 1295 066c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1296 0670 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1297 0674 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1298 0678 14D04DE2 		sub	sp, sp, #20	@,,
 1299              		.cfi_def_cfa_offset 56
 1300              	@ armwave.c:289: {
 289:armwave.c     ****     uint32_t length, xx;
 1301              		.loc 1 289 1 view .LVU347
 1302 067c 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1303 0680 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1304 0684 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1305              	@ armwave.c:293:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1306              		.loc 1 293 5 view .LVU348
 1307 0688 00308DE5 		str	r3, [sp]	@ wave_stride,
 1308 068c F460CDE1 		strd	r6, [sp, #4]	@,,
 1309 0690 0230A0E1 		mov	r3, r2	@, waves_max
 1310              	.LVL59:
 1311              		.loc 1 293 5 view .LVU349
 1312 0694 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1313 0698 0120A0E1 		mov	r2, r1	@, end_point
 1314              	.LVL60:
 1315              		.loc 1 293 5 view .LVU350
 1316 069c 0010A0E1 		mov	r1, r0	@, start_point
 1317              	.LVL61:
 1318              		.loc 1 293 5 view .LVU351
 1319 06a0 E0019FE5 		ldr	r0, .L78+12	@,
 1320              	.LVL62:
 1321              		.loc 1 293 5 view .LVU352
 1322 06a4 FEFFFFEB 		bl	printf		@
 1323              	.LVL63:
 294:armwave.c     **** 
 295:armwave.c     ****     // TODO these asserts should instead raise PyExc
 296:armwave.c     ****     assert(start_point < end_point);
 1324              		.loc 1 296 5 is_stmt 1 view .LVU353
 1325 06a8 050054E1 		cmp	r4, r5	@ start_point, end_point
 1326 06ac 6300002A 		bcs	.L75		@,
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 300:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 301:armwave.c     ****     if(target_height == 256) {
 302:armwave.c     ****         g_armwave_state.row_shift = 8;
 303:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 304:armwave.c     ****     } else if(target_height == 512) {
 305:armwave.c     ****         g_armwave_state.row_shift = 9;
 306:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 307:armwave.c     ****     } else if(target_height == 1024) {
 308:armwave.c     ****         g_armwave_state.row_shift = 10;
 309:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 310:armwave.c     ****     } else if(target_height == 2048) {
 311:armwave.c     ****         g_armwave_state.row_shift = 11;
 312:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 313:armwave.c     ****     }
 314:armwave.c     ****     */
 315:armwave.c     **** 
 316:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 317:armwave.c     ****     g_armwave_state.xstride = target_height;
 1327              		.loc 1 317 5 view .LVU354
 1328              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 319:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 320:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 321:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 322:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 323:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 324:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 325:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 326:armwave.c     ****     g_armwave_state.target_width = target_width;
 327:armwave.c     ****     g_armwave_state.target_height = target_height;
 328:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1329              		.loc 1 328 45 is_stmt 0 view .LVU355
 1330 06b0 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1331              	.LVL64:
 1332              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1333              		.loc 1 318 49 view .LVU356
 1334 06b4 706A9FED 		vldr.32	s12, .L78	@ tmp174,
 1335              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 329:armwave.c     **** 
 330:armwave.c     ****     // Calculate compound scaler
 331:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 332:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1336              		.loc 1 332 48 view .LVU357
 1337 06b8 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1338              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1339              		.loc 1 332 79 view .LVU358
 1340 06bc 6F6ADFED 		vldr.32	s13, .L78+4	@ tmp198,
 1341              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1342              		.loc 1 325 90 view .LVU359
 1343 06c0 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1344              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1345              		.loc 1 317 29 view .LVU360
 1346 06c4 C0419FE5 		ldr	r4, .L78+16	@ tmp242,
 1347              	.LVL65:
 1348              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1349              		.loc 1 332 48 view .LVU361
 1350 06c8 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1351              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1352              		.loc 1 318 49 view .LVU362
 1353 06cc 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1354              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1355              		.loc 1 323 42 view .LVU363
 1356 06d0 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1357              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1358              		.loc 1 325 95 view .LVU364
 1359 06d4 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1360              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1361              		.loc 1 318 49 view .LVU365
 1362 06d8 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1363              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1364              		.loc 1 332 48 view .LVU366
 1365 06dc 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1366              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 333:armwave.c     **** 
 334:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1367              		.loc 1 334 5 view .LVU367
 1368 06e0 0128A0E3 		mov	r2, #65536	@ tmp201,
 1369 06e4 04508DE5 		str	r5, [sp, #4]	@ _13,
 1370 06e8 00608DE5 		str	r6, [sp]	@ target_width,
 1371              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1372              		.loc 1 332 48 view .LVU368
 1373 06ec E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1374              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1375              		.loc 1 325 95 view .LVU369
 1376 06f0 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1377              	@ armwave.c:317:     g_armwave_state.xstride = target_height;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1378              		.loc 1 317 29 view .LVU370
 1379 06f4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1380              		.loc 1 318 5 is_stmt 1 view .LVU371
 1381              	@ armwave.c:320:     g_armwave_state.wave_stride = wave_stride;
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1382              		.loc 1 320 33 is_stmt 0 view .LVU372
 1383 06f8 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1384              	@ armwave.c:321:     g_armwave_state.waves_max = waves_max;
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1385              		.loc 1 321 31 view .LVU373
 1386 06fc 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1387              	@ armwave.c:322:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1388              		.loc 1 322 27 view .LVU374
 1389 0700 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1390              	@ armwave.c:327:     g_armwave_state.target_height = target_height;
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1391              		.loc 1 327 35 view .LVU375
 1392 0704 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1393              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1394              		.loc 1 334 5 view .LVU376
 1395 0708 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1396              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1397              		.loc 1 332 48 view .LVU377
 1398 070c 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1399              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1400              		.loc 1 324 37 view .LVU378
 1401 0710 022CA0E3 		mov	r2, #512	@ tmp184,
 1402              	@ armwave.c:323:     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1403              		.loc 1 323 26 view .LVU379
 1404 0714 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1405              	@ armwave.c:324:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1406              		.loc 1 324 37 view .LVU380
 1407 0718 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1408              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1409              		.loc 1 334 5 view .LVU381
 1410 071c 0310A0E1 		mov	r1, r3	@, tmp189
 1411              	@ armwave.c:325:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1412              		.loc 1 325 34 view .LVU382
 1413 0720 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1414              	@ armwave.c:328:     g_armwave_state.wave_length = end_point - start_point;
 328:armwave.c     **** 
 1415              		.loc 1 328 33 view .LVU383
 1416 0724 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1417              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1418              		.loc 1 334 5 view .LVU384
 1419 0728 60019FE5 		ldr	r0, .L78+20	@,
 1420              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1421              		.loc 1 318 49 view .LVU385
 1422 072c 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1423              	@ armwave.c:332:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 332:armwave.c     **** 
 1424              		.loc 1 332 79 view .LVU386
 1425 0730 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1426              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1427              		.loc 1 331 42 view .LVU387
 1428 0734 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1429              	@ armwave.c:318:     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1430              		.loc 1 318 33 view .LVU388
 1431 0738 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1432              		.loc 1 319 5 is_stmt 1 view .LVU389
 1433              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1434              		.loc 1 331 42 is_stmt 0 view .LVU390
 1435 073c 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1436              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1437              		.loc 1 319 30 view .LVU391
 1438 0740 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1439              	@ armwave.c:334:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1440              		.loc 1 334 5 view .LVU392
 1441 0744 0C30A0E1 		mov	r3, ip	@, _19
 1442 0748 0C20A0E1 		mov	r2, ip	@, tmp3
 1443              	@ armwave.c:331:     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1444              		.loc 1 331 42 view .LVU393
 1445 074c 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1446              	@ armwave.c:319:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1447              		.loc 1 319 30 view .LVU394
 1448 0750 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1449              		.loc 1 320 5 is_stmt 1 view .LVU395
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1450              		.loc 1 321 5 view .LVU396
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1451              		.loc 1 322 5 view .LVU397
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1452              		.loc 1 323 5 view .LVU398
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1453              		.loc 1 324 5 view .LVU399
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 1454              		.loc 1 325 5 view .LVU400
 326:armwave.c     ****     g_armwave_state.target_height = target_height;
 1455              		.loc 1 326 5 view .LVU401
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1456              		.loc 1 327 5 view .LVU402
 328:armwave.c     **** 
 1457              		.loc 1 328 5 view .LVU403
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1458              		.loc 1 331 5 view .LVU404
 1459              		.loc 1 334 5 view .LVU405
 1460 0754 FEFFFFEB 		bl	printf		@
 1461              	.LVL66:
 335:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 336:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 337:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 338:armwave.c     **** 
 339:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 340:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 341:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 342:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1462              		.loc 1 342 5 view .LVU406
 1463              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 343:armwave.c     **** 
 344:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1464              		.loc 1 344 23 is_stmt 0 view .LVU407
 1465 0758 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1466              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1467              		.loc 1 342 34 view .LVU408
 1468 075c 013CA0E3 		mov	r3, #256	@ tmp203,
 1469              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1470              		.loc 1 344 7 view .LVU409
 1471 0760 000050E3 		cmp	r0, #0	@ _20,
 1472              	@ armwave.c:342:     g_armwave_state.slice_height = 256; // 64;  
 342:armwave.c     **** 
 1473              		.loc 1 342 34 view .LVU410
 1474 0764 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1475              		.loc 1 344 5 is_stmt 1 view .LVU411
 1476              	@ armwave.c:344:     if(g_armwave_state.ch1_buffer != NULL)
 1477              		.loc 1 344 7 is_stmt 0 view .LVU412
 1478 0768 0000000A 		beq	.L66		@,
 345:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1479              		.loc 1 345 9 is_stmt 1 view .LVU413
 1480 076c FEFFFFEB 		bl	free		@
 1481              	.LVL67:
 1482              	.L66:
 346:armwave.c     **** 
 347:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1483              		.loc 1 347 5 view .LVU414
 1484              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1485              		.loc 1 347 34 is_stmt 0 view .LVU415
 1486 0770 0110A0E3 		mov	r1, #1	@,
 1487 0774 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1488 0778 FEFFFFEB 		bl	calloc		@
 1489              	.LVL68:
 1490              	@ armwave.c:349:     assert(g_armwave_state.ch1_buffer != NULL);
 348:armwave.c     **** 
 349:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1491              		.loc 1 349 5 view .LVU416
 1492 077c 000050E3 		cmp	r0, #0	@ _23,
 1493              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1494              		.loc 1 347 34 view .LVU417
 1495 0780 0070A0E1 		mov	r7, r0	@ _23,
 1496              	@ armwave.c:347:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 347:armwave.c     **** 
 1497              		.loc 1 347 32 view .LVU418
 1498 0784 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1499              		.loc 1 349 5 is_stmt 1 view .LVU419
 1500 0788 3600000A 		beq	.L76		@,
 350:armwave.c     **** 
 351:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 352:armwave.c     ****     length = end_point - start_point;
 1501              		.loc 1 352 5 view .LVU420
 1502              	.LVL69:
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1503              		.loc 1 353 5 view .LVU421
 1504              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1505              		.loc 1 353 34 is_stmt 0 view .LVU422
 1506 078c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1507              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 1508              		.loc 1 353 22 view .LVU423
 1509 0790 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1510              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1511              		.loc 1 354 60 view .LVU424
 1512 0794 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp253, g_armwave_state.slice_height
 1513              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1514              		.loc 1 355 40 view .LVU425
 1515 0798 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1516              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1517              		.loc 1 353 34 view .LVU426
 1518 079c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1519              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1520              		.loc 1 353 22 view .LVU427
 1521 07a0 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1522              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1523              		.loc 1 354 60 view .LVU428
 1524 07a4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp253
 1525              	@ armwave.c:353:     points_per_pixel = length / ((float)(target_width));
 353:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1526              		.loc 1 353 22 view .LVU429
 1527 07a8 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1528              	.LVL70:
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1529              		.loc 1 354 5 is_stmt 1 view .LVU430
 1530              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1531              		.loc 1 354 60 is_stmt 0 view .LVU431
 1532 07ac 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1533              	@ armwave.c:354:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 354:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1534              		.loc 1 354 41 view .LVU432
 1535 07b0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1536 07b4 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1537              		.loc 1 355 5 is_stmt 1 view .LVU433
 1538              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1539              		.loc 1 355 40 is_stmt 0 view .LVU434
 1540 07b8 FEFFFFEB 		bl	malloc		@
 1541              	.LVL71:
 1542              	@ armwave.c:357:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 356:armwave.c     **** 
 357:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1543              		.loc 1 357 5 view .LVU435
 1544 07bc 000050E3 		cmp	r0, #0	@ _31,
 1545              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1546              		.loc 1 355 40 view .LVU436
 1547 07c0 0060A0E1 		mov	r6, r0	@ _31,
 1548              	@ armwave.c:355:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 355:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1549              		.loc 1 355 38 view .LVU437
 1550 07c4 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1551              		.loc 1 357 5 is_stmt 1 view .LVU438
 1552 07c8 2100000A 		beq	.L77		@,
 1553              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 358:armwave.c     **** 
 359:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 360:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1554              		.loc 1 360 54 is_stmt 0 view .LVU439
 1555 07cc 2C7ADFED 		vldr.32	s15, .L78+8	@ tmp230,
 1556 07d0 020040E2 		sub	r0, r0, #2	@ ivtmp.76, _31,
 1557              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1558              		.loc 1 359 12 view .LVU440
 1559 07d4 0030A0E3 		mov	r3, #0	@ xx,
 1560              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1561              		.loc 1 360 54 view .LVU441
 1562 07d8 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1563              	.L69:
 1564              	.LVL72:
 1565              		.loc 1 360 9 is_stmt 1 discriminator 3 view .LVU442
 1566              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 360 74 is_stmt 0 discriminator 3 view .LVU443
 1568 07dc 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1569              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1570              		.loc 1 359 32 discriminator 3 view .LVU444
 1571 07e0 013083E2 		add	r3, r3, #1	@ xx, xx,
 1572              	.LVL73:
 1573              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 359 5 discriminator 3 view .LVU445
 1575 07e4 030055E1 		cmp	r5, r3	@ _13, xx
 1576              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1577              		.loc 1 360 74 discriminator 3 view .LVU446
 1578 07e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1579 07ec 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1580              	@ armwave.c:360:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1581              		.loc 1 360 46 discriminator 3 view .LVU447
 1582 07f0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1583 07f4 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1584 07f8 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1585              	@ armwave.c:359:     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1586              		.loc 1 359 5 discriminator 3 view .LVU448
 1587 07fc F6FFFF1A 		bne	.L69		@,
 361:armwave.c     **** 
 362:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1588              		.loc 1 365 5 is_stmt 1 view .LVU449
 1589              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1590              		.loc 1 365 34 is_stmt 0 view .LVU450
 1591 0800 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1592 0804 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1593 0808 FEFFFFEB 		bl	malloc		@
 1594              	.LVL74:
 1595              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 366:armwave.c     **** 
 367:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1596              		.loc 1 367 5 view .LVU451
 1597 080c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1598 0810 0620A0E1 		mov	r2, r6	@, _31
 1599 0814 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1600 0818 0710A0E1 		mov	r1, r7	@, _23
 1601              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1602              		.loc 1 365 34 view .LVU452
 1603 081c 00C0A0E1 		mov	ip, r0	@ tmp237,
 1604              	@ armwave.c:367:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1605              		.loc 1 367 5 view .LVU453
 1606 0820 0030A0E1 		mov	r3, r0	@, tmp237
 1607              	@ armwave.c:365:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 365:armwave.c     **** 
 1608              		.loc 1 365 32 view .LVU454
 1609 0824 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1610              		.loc 1 367 5 is_stmt 1 view .LVU455
 1611 0828 64009FE5 		ldr	r0, .L78+24	@,
 1612 082c FEFFFFEB 		bl	printf		@
 1613              	.LVL75:
 368:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 370:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 371:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 372:armwave.c     **** 
 373:armwave.c     ****     malloc_stats();
 1614              		.loc 1 373 5 view .LVU456
 1615              	@ armwave.c:374: }
 374:armwave.c     **** }
 1616              		.loc 1 374 1 is_stmt 0 view .LVU457
 1617 0830 14D08DE2 		add	sp, sp, #20	@,,
 1618              		.cfi_remember_state
 1619              		.cfi_def_cfa_offset 36
 1620              		@ sp needed	@
 1621 0834 028BBDEC 		vldm	sp!, {d8}	@
 1622              		.cfi_restore 80
 1623              		.cfi_restore 81
 1624              		.cfi_def_cfa_offset 28
 1625              	.LVL76:
 1626              		.loc 1 374 1 view .LVU458
 1627 0838 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1628              		.cfi_restore 14
 1629              		.cfi_restore 9
 1630              		.cfi_restore 8
 1631              		.cfi_restore 7
 1632              		.cfi_restore 6
 1633              		.cfi_restore 5
 1634              		.cfi_restore 4
 1635              		.cfi_def_cfa_offset 0
 1636              	.LVL77:
 1637              	@ armwave.c:373:     malloc_stats();
 373:armwave.c     **** }
 1638              		.loc 1 373 5 view .LVU459
 1639 083c FEFFFFEA 		b	malloc_stats		@
 1640              	.LVL78:
 1641              	.L75:
 1642              		.cfi_restore_state
 296:armwave.c     **** 
 1643              		.loc 1 296 5 is_stmt 1 discriminator 1 view .LVU460
 1644 0840 50309FE5 		ldr	r3, .L78+28	@,
 1645 0844 4A2FA0E3 		mov	r2, #296	@,
 1646 0848 4C109FE5 		ldr	r1, .L78+32	@,
 1647 084c 4C009FE5 		ldr	r0, .L78+36	@,
 1648 0850 FEFFFFEB 		bl	__assert_fail		@
 1649              	.LVL79:
 1650              	.L77:
 357:armwave.c     **** 
 1651              		.loc 1 357 5 discriminator 1 view .LVU461
 1652 0854 3C309FE5 		ldr	r3, .L78+28	@,
 1653 0858 44209FE5 		ldr	r2, .L78+40	@,
 1654 085c 38109FE5 		ldr	r1, .L78+32	@,
 1655 0860 40009FE5 		ldr	r0, .L78+44	@,
 1656 0864 FEFFFFEB 		bl	__assert_fail		@
 1657              	.LVL80:
 1658              	.L76:
 349:armwave.c     **** 
 1659              		.loc 1 349 5 discriminator 1 view .LVU462
 1660 0868 28309FE5 		ldr	r3, .L78+28	@,
 1661 086c 38209FE5 		ldr	r2, .L78+48	@,
 1662 0870 24109FE5 		ldr	r1, .L78+32	@,
 1663 0874 34009FE5 		ldr	r0, .L78+52	@,
 1664 0878 FEFFFFEB 		bl	__assert_fail		@
 1665              	.LVL81:
 1666              	.L79:
 1667              		.align	2
 1668              	.L78:
 1669 087c 00007F43 		.word	1132396544
 1670 0880 00008047 		.word	1199570944
 1671 0884 0000803F 		.word	1065353216
 1672 0888 40000000 		.word	.LC4
 1673 088c 00000000 		.word	g_armwave_state
 1674 0890 84000000 		.word	.LC6
 1675 0894 34010000 		.word	.LC9
 1676 0898 1C000000 		.word	.LANCHOR0+28
 1677 089c 20000000 		.word	.LC2
 1678 08a0 6C000000 		.word	.LC5
 1679 08a4 65010000 		.word	357
 1680 08a8 08010000 		.word	.LC8
 1681 08ac 5D010000 		.word	349
 1682 08b0 E4000000 		.word	.LC7
 1683              		.cfi_endproc
 1684              	.LFE62:
 1686              		.align	2
 1687              		.global	armwave_set_wave_pointer
 1688              		.syntax unified
 1689              		.arm
 1690              		.fpu vfp
 1692              	armwave_set_wave_pointer:
 1693              	.LVL82:
 1694              	.LFB63:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 378:armwave.c     ****  * in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 381:armwave.c     **** {
 1695              		.loc 1 381 1 view -0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1699              		.loc 1 382 5 view .LVU464
 1700 08b4 000050E3 		cmp	r0, #0	@ wave_buffer
 1701              		.loc 1 382 5 is_stmt 0 view .LVU465
 1702 08b8 0200000A 		beq	.L85		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1703              		.loc 1 383 5 is_stmt 1 view .LVU466
 1704              	@ armwave.c:383:     g_armwave_state.wave_buffer = wave_buffer;
 1705              		.loc 1 383 33 is_stmt 0 view .LVU467
 1706 08bc 1C309FE5 		ldr	r3, .L86	@ tmp116,
 1707 08c0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1708 08c4 1EFF2FE1 		bx	lr	@
 1709              	.L85:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1710              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU468
 1711              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1712              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU469
 1713 08c8 10402DE9 		push	{r4, lr}	@
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 4, -8
 1716              		.cfi_offset 14, -4
 1717              	@ armwave.c:382:     assert(wave_buffer != NULL);
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1718              		.loc 1 382 5 discriminator 1 view .LVU470
 1719 08cc 10309FE5 		ldr	r3, .L86+4	@,
 1720 08d0 10209FE5 		ldr	r2, .L86+8	@,
 1721 08d4 10109FE5 		ldr	r1, .L86+12	@,
 1722 08d8 10009FE5 		ldr	r0, .L86+16	@,
 1723              	.LVL83:
 382:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 382 5 discriminator 1 view .LVU471
 1725 08dc FEFFFFEB 		bl	__assert_fail		@
 1726              	.LVL84:
 1727              	.L87:
 1728              		.align	2
 1729              	.L86:
 1730 08e0 00000000 		.word	g_armwave_state
 1731 08e4 34000000 		.word	.LANCHOR0+52
 1732 08e8 7E010000 		.word	382
 1733 08ec 20000000 		.word	.LC2
 1734 08f0 58010000 		.word	.LC10
 1735              		.cfi_endproc
 1736              	.LFE63:
 1738              		.align	2
 1739              		.global	armwave_set_wave_pointer_as_testbuf
 1740              		.syntax unified
 1741              		.arm
 1742              		.fpu vfp
 1744              	armwave_set_wave_pointer_as_testbuf:
 1745              	.LVL85:
 1746              	.LFB64:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 388:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 391:armwave.c     **** {
 1747              		.loc 1 391 1 is_stmt 1 view -0
 1748              		.cfi_startproc
 1749              		@ args = 0, pretend = 0, frame = 0
 1750              		@ frame_needed = 0, uses_anonymous_args = 0
 1751              		@ link register save eliminated.
 392:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1752              		.loc 1 392 5 view .LVU473
 1753              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1754              		.loc 1 392 29 is_stmt 0 view .LVU474
 1755 08f4 24309FE5 		ldr	r3, .L91	@ tmp117,
 1756              	@ armwave.c:392:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1757              		.loc 1 392 7 view .LVU475
 1758 08f8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1759 08fc 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1760 0900 0400003A 		bcc	.L90		@,
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 394:armwave.c     ****         return;
 395:armwave.c     ****     }
 396:armwave.c     **** 
 397:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1761              		.loc 1 397 5 is_stmt 1 view .LVU476
 1762              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1763              		.loc 1 397 111 is_stmt 0 view .LVU477
 1764 0904 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1765              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1766              		.loc 1 397 68 view .LVU478
 1767 0908 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1768 090c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1769              	.LVL86:
 1770              	@ armwave.c:397:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1771              		.loc 1 397 33 view .LVU479
 1772 0910 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1773              	@ armwave.c:398: }
 398:armwave.c     **** }
 1774              		.loc 1 398 1 view .LVU480
 1775 0914 1EFF2FE1 		bx	lr	@
 1776              	.LVL87:
 1777              	.L90:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1778              		.loc 1 393 9 is_stmt 1 view .LVU481
 1779 0918 04009FE5 		ldr	r0, .L91+4	@,
 1780              	.LVL88:
 393:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1781              		.loc 1 393 9 is_stmt 0 view .LVU482
 1782 091c FEFFFFEA 		b	puts		@
 1783              	.LVL89:
 1784              	.L92:
 1785              		.align	2
 1786              	.L91:
 1787 0920 00000000 		.word	g_armwave_state
 1788 0924 6C010000 		.word	.LC11
 1789              		.cfi_endproc
 1790              	.LFE64:
 1792              		.align	2
 1793              		.global	armwave_set_wave_pointer_u32
 1794              		.syntax unified
 1795              		.arm
 1796              		.fpu vfp
 1798              	armwave_set_wave_pointer_u32:
 1799              	.LVL90:
 1800              	.LFB65:
 399:armwave.c     **** 
 400:armwave.c     **** /*
 401:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 402:armwave.c     ****  * disjointed buffers in the future.
 403:armwave.c     ****  */
 404:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 405:armwave.c     **** {
 1801              		.loc 1 405 1 is_stmt 1 view -0
 1802              		.cfi_startproc
 1803              		@ args = 0, pretend = 0, frame = 0
 1804              		@ frame_needed = 0, uses_anonymous_args = 0
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1805              		.loc 1 406 5 view .LVU484
 1806 0928 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1807              		.loc 1 406 5 is_stmt 0 view .LVU485
 1808 092c 0200000A 		beq	.L98		@,
 407:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1809              		.loc 1 407 5 is_stmt 1 view .LVU486
 1810              	@ armwave.c:407:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1811              		.loc 1 407 33 is_stmt 0 view .LVU487
 1812 0930 1C309FE5 		ldr	r3, .L99	@ tmp117,
 1813 0934 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1814 0938 1EFF2FE1 		bx	lr	@
 1815              	.L98:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1816              		.loc 1 406 5 is_stmt 1 discriminator 1 view .LVU488
 1817              	@ armwave.c:405: {
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1818              		.loc 1 405 1 is_stmt 0 discriminator 1 view .LVU489
 1819 093c 10402DE9 		push	{r4, lr}	@
 1820              		.cfi_def_cfa_offset 8
 1821              		.cfi_offset 4, -8
 1822              		.cfi_offset 14, -4
 1823              	@ armwave.c:406:     assert(wave_buffer_ptr != 0);
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1824              		.loc 1 406 5 discriminator 1 view .LVU490
 1825 0940 10309FE5 		ldr	r3, .L99+4	@,
 1826 0944 10209FE5 		ldr	r2, .L99+8	@,
 1827 0948 10109FE5 		ldr	r1, .L99+12	@,
 1828 094c 10009FE5 		ldr	r0, .L99+16	@,
 1829              	.LVL91:
 406:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1830              		.loc 1 406 5 discriminator 1 view .LVU491
 1831 0950 FEFFFFEB 		bl	__assert_fail		@
 1832              	.LVL92:
 1833              	.L100:
 1834              		.align	2
 1835              	.L99:
 1836 0954 00000000 		.word	g_armwave_state
 1837 0958 50000000 		.word	.LANCHOR0+80
 1838 095c 96010000 		.word	406
 1839 0960 20000000 		.word	.LC2
 1840 0964 A8010000 		.word	.LC12
 1841              		.cfi_endproc
 1842              	.LFE65:
 1844              		.align	2
 1845              		.global	armwave_clear_buffer
 1846              		.syntax unified
 1847              		.arm
 1848              		.fpu vfp
 1850              	armwave_clear_buffer:
 1851              	.LVL93:
 1852              	.LFB66:
 408:armwave.c     **** }
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 414:armwave.c     **** {
 1853              		.loc 1 414 1 is_stmt 1 view -0
 1854              		.cfi_startproc
 1855              		@ args = 0, pretend = 0, frame = 0
 1856              		@ frame_needed = 0, uses_anonymous_args = 0
 1857              		@ link register save eliminated.
 415:armwave.c     ****     // Flags ignored, only one buffer cleared
 416:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1858              		.loc 1 416 5 view .LVU493
 1859              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1860              		.loc 1 416 58 is_stmt 0 view .LVU494
 1861 0968 0C309FE5 		ldr	r3, .L102	@ tmp114,
 1862              	@ armwave.c:416:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1863              		.loc 1 416 5 view .LVU495
 1864 096c 0010A0E3 		mov	r1, #0	@,
 1865 0970 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1866 0974 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1867              	.LVL94:
 1868              		.loc 1 416 5 view .LVU496
 1869 0978 FEFFFFEA 		b	memset		@
 1870              	.LVL95:
 1871              	.L103:
 1872              		.align	2
 1873              	.L102:
 1874 097c 00000000 		.word	g_armwave_state
 1875              		.cfi_endproc
 1876              	.LFE66:
 1878              		.align	2
 1879              		.global	armwave_set_channel_colour
 1880              		.syntax unified
 1881              		.arm
 1882              		.fpu vfp
 1884              	armwave_set_channel_colour:
 1885              	.LVL96:
 1886              	.LFB67:
 417:armwave.c     **** }
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 423:armwave.c     **** {
 1887              		.loc 1 423 1 is_stmt 1 view -0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              		@ link register save eliminated.
 424:armwave.c     ****     // Only 1ch supported for now
 425:armwave.c     ****     switch(ch) {
 1892              		.loc 1 425 5 view .LVU498
 1893 0980 010050E3 		cmp	r0, #1	@ ch,
 426:armwave.c     ****         case 1:
 427:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1894              		.loc 1 427 13 view .LVU499
 1895              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 1896              		.loc 1 427 41 is_stmt 0 view .LVU500
 1897 0984 0C009F05 		ldreq	r0, .L106	@ tmp117,
 1898              	.LVL97:
 1899              		.loc 1 427 41 view .LVU501
 1900 0988 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 428:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1901              		.loc 1 428 13 is_stmt 1 view .LVU502
 1902              	@ armwave.c:428:             g_armwave_state.ch1_color.g = g;
 1903              		.loc 1 428 41 is_stmt 0 view .LVU503
 1904 098c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 429:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1905              		.loc 1 429 13 is_stmt 1 view .LVU504
 1906              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 1907              		.loc 1 429 41 is_stmt 0 view .LVU505
 1908 0990 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 430:armwave.c     ****             break;
 1909              		.loc 1 430 13 is_stmt 1 view .LVU506
 1910              	@ armwave.c:432: }
 431:armwave.c     ****     }
 432:armwave.c     **** }
 1911              		.loc 1 432 1 is_stmt 0 view .LVU507
 1912 0994 1EFF2FE1 		bx	lr	@
 1913              	.L107:
 1914              		.align	2
 1915              	.L106:
 1916 0998 00000000 		.word	g_armwave_state
 1917              		.cfi_endproc
 1918              	.LFE67:
 1920              		.align	2
 1921              		.global	armwave_dump_ppm_debug
 1922              		.syntax unified
 1923              		.arm
 1924              		.fpu vfp
 1926              	armwave_dump_ppm_debug:
 1927              	.LVL98:
 1928              	.LFB68:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Dump a ppm of a buffer to a file.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 438:armwave.c     **** {
 1929              		.loc 1 438 1 is_stmt 1 view -0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1933              		.loc 1 439 5 view .LVU509
 1934              	@ armwave.c:438: {
 438:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1935              		.loc 1 438 1 is_stmt 0 view .LVU510
 1936 099c 0130A0E1 		mov	r3, r1	@ fn, fn
 1937 09a0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1938              		.cfi_def_cfa_offset 28
 1939              		.cfi_offset 4, -28
 1940              		.cfi_offset 5, -24
 1941              		.cfi_offset 6, -20
 1942              		.cfi_offset 7, -16
 1943              		.cfi_offset 8, -12
 1944              		.cfi_offset 9, -8
 1945              		.cfi_offset 14, -4
 1946 09a4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1947 09a8 0CD04DE2 		sub	sp, sp, #12	@,,
 1948              		.cfi_def_cfa_offset 40
 1949              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 1950              		.loc 1 439 16 view .LVU511
 1951 09ac C4109FE5 		ldr	r1, .L116	@,
 1952              	.LVL99:
 1953              		.loc 1 439 16 view .LVU512
 1954 09b0 0300A0E1 		mov	r0, r3	@, fn
 1955              	.LVL100:
 1956              		.loc 1 439 16 view .LVU513
 1957 09b4 FEFFFFEB 		bl	fopen64		@
 1958              	.LVL101:
 1959              	@ armwave.c:446:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 440:armwave.c     ****     uint32_t data;
 441:armwave.c     ****     int xx, yy;
 442:armwave.c     **** 
 443:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 444:armwave.c     **** 
 445:armwave.c     ****     fputs("P3\n", fp);
 446:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1960              		.loc 1 446 5 view .LVU514
 1961 09b8 BC609FE5 		ldr	r6, .L116+4	@ tmp150,
 1962              	@ armwave.c:445:     fputs("P3\n", fp);
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1963              		.loc 1 445 5 view .LVU515
 1964 09bc 0320A0E3 		mov	r2, #3	@,
 1965 09c0 0110A0E3 		mov	r1, #1	@,
 1966              	@ armwave.c:439:     FILE *fp = fopen(fn, "wb");
 439:armwave.c     ****     uint32_t data;
 1967              		.loc 1 439 16 view .LVU516
 1968 09c4 0070A0E1 		mov	r7, r0	@ fp,
 1969              	.LVL102:
 440:armwave.c     ****     uint32_t data;
 1970              		.loc 1 440 5 is_stmt 1 view .LVU517
 441:armwave.c     **** 
 1971              		.loc 1 441 5 view .LVU518
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1972              		.loc 1 445 5 view .LVU519
 1973 09c8 0030A0E1 		mov	r3, r0	@, fp
 1974 09cc AC009FE5 		ldr	r0, .L116+8	@,
 1975              	.LVL103:
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1976              		.loc 1 445 5 is_stmt 0 view .LVU520
 1977 09d0 FEFFFFEB 		bl	fwrite		@
 1978              	.LVL104:
 1979              		.loc 1 446 5 is_stmt 1 view .LVU521
 1980 09d4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1981 09d8 A4109FE5 		ldr	r1, .L116+12	@,
 1982 09dc 0700A0E1 		mov	r0, r7	@, fp
 1983 09e0 FEFFFFEB 		bl	fprintf		@
 1984              	.LVL105:
 447:armwave.c     ****     fputs("255\n", fp);
 1985              		.loc 1 447 5 view .LVU522
 1986 09e4 0420A0E3 		mov	r2, #4	@,
 1987 09e8 0730A0E1 		mov	r3, r7	@, fp
 1988 09ec 0110A0E3 		mov	r1, #1	@,
 1989 09f0 90009FE5 		ldr	r0, .L116+16	@,
 1990 09f4 FEFFFFEB 		bl	fwrite		@
 1991              	.LVL106:
 448:armwave.c     **** 
 449:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1992              		.loc 1 449 5 view .LVU523
 1993              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1994              		.loc 1 449 37 is_stmt 0 view .LVU524
 1995 09f8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1996              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1997              		.loc 1 449 5 view .LVU525
 1998 09fc 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1999 0a00 180000DA 		ble	.L109		@,
 2000 0a04 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2001              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 451:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 452:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 453:armwave.c     **** 
 454:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2002              		.loc 1 454 13 view .LVU526
 2003 0a08 7C909FE5 		ldr	r9, .L116+20	@ tmp152,
 2004              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2005              		.loc 1 449 12 view .LVU527
 2006 0a0c 0050A0E3 		mov	r5, #0	@ yy,
 2007              	.LVL107:
 2008              	.L110:
 2009              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2010              		.loc 1 450 9 view .LVU528
 2011 0a10 000053E3 		cmp	r3, #0	@ _13,
 2012              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2013              		.loc 1 450 16 view .LVU529
 2014 0a14 0040A0C3 		movgt	r4, #0	@ xx,
 2015              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2016              		.loc 1 450 9 view .LVU530
 2017 0a18 0F0000DA 		ble	.L112		@,
 2018              	.LVL108:
 2019              	.L111:
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2020              		.loc 1 451 13 is_stmt 1 discriminator 3 view .LVU531
 2021              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2022              		.loc 1 451 29 is_stmt 0 discriminator 3 view .LVU532
 2023 0a1c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2024              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2025              		.loc 1 454 13 discriminator 3 view .LVU533
 2026 0a20 0910A0E1 		mov	r1, r9	@, tmp152
 2027 0a24 0700A0E1 		mov	r0, r7	@, fp
 2028              	@ armwave.c:451:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2029              		.loc 1 451 18 discriminator 3 view .LVU534
 2030 0a28 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2031              	.LVL109:
 2032              		.loc 1 454 13 is_stmt 1 discriminator 3 view .LVU535
 2033              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2034              		.loc 1 450 58 is_stmt 0 discriminator 3 view .LVU536
 2035 0a2c 014084E2 		add	r4, r4, #1	@ xx, xx,
 2036              	.LVL110:
 2037              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2038              		.loc 1 454 81 discriminator 3 view .LVU537
 2039 0a30 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2040              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2041              		.loc 1 454 61 discriminator 3 view .LVU538
 2042 0a34 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2043              	@ armwave.c:454:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2044              		.loc 1 454 13 discriminator 3 view .LVU539
 2045 0a38 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2046 0a3c 7330EFE6 		uxtb	r3, r3	@, tmp142
 2047 0a40 00C08DE5 		str	ip, [sp]	@ tmp147,
 2048 0a44 7220EFE6 		uxtb	r2, r2	@, data
 2049              	.LVL111:
 2050              		.loc 1 454 13 discriminator 3 view .LVU540
 2051 0a48 FEFFFFEB 		bl	fprintf		@
 2052              	.LVL112:
 2053              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2054              		.loc 1 450 41 discriminator 3 view .LVU541
 2055 0a4c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2056              	@ armwave.c:450:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2057              		.loc 1 450 9 discriminator 3 view .LVU542
 2058 0a50 040053E1 		cmp	r3, r4	@ _13, xx
 2059 0a54 F0FFFFCA 		bgt	.L111		@,
 2060 0a58 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2061              	.LVL113:
 2062              	.L112:
 2063              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2064              		.loc 1 449 55 discriminator 2 view .LVU543
 2065 0a5c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2066              	.LVL114:
 2067              	@ armwave.c:449:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2068              		.loc 1 449 5 discriminator 2 view .LVU544
 2069 0a60 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2070 0a64 E9FFFFBA 		blt	.L110		@,
 2071              	.LVL115:
 2072              	.L109:
 455:armwave.c     ****         }
 456:armwave.c     ****     }
 457:armwave.c     **** 
 458:armwave.c     ****     fclose(fp);
 2073              		.loc 1 458 5 is_stmt 1 view .LVU545
 2074 0a68 0700A0E1 		mov	r0, r7	@, fp
 2075              	@ armwave.c:459: }
 459:armwave.c     **** }
 2076              		.loc 1 459 1 is_stmt 0 view .LVU546
 2077 0a6c 0CD08DE2 		add	sp, sp, #12	@,,
 2078              		.cfi_def_cfa_offset 28
 2079              		@ sp needed	@
 2080 0a70 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2081              		.cfi_restore 14
 2082              		.cfi_restore 9
 2083              		.cfi_restore 8
 2084              		.cfi_restore 7
 2085              		.cfi_restore 6
 2086              		.cfi_restore 5
 2087              		.cfi_restore 4
 2088              		.cfi_def_cfa_offset 0
 2089              	.LVL116:
 2090              	@ armwave.c:458:     fclose(fp);
 458:armwave.c     **** }
 2091              		.loc 1 458 5 view .LVU547
 2092 0a74 FEFFFFEA 		b	fclose		@
 2093              	.LVL117:
 2094              	.L117:
 458:armwave.c     **** }
 2095              		.loc 1 458 5 view .LVU548
 2096              		.align	2
 2097              	.L116:
 2098 0a78 C0010000 		.word	.LC13
 2099 0a7c 00000000 		.word	g_armwave_state
 2100 0a80 C4010000 		.word	.LC14
 2101 0a84 C8010000 		.word	.LC15
 2102 0a88 D0010000 		.word	.LC16
 2103 0a8c D8010000 		.word	.LC17
 2104              		.cfi_endproc
 2105              	.LFE68:
 2107              		.align	2
 2108              		.global	armwave_test_init
 2109              		.syntax unified
 2110              		.arm
 2111              		.fpu vfp
 2113              	armwave_test_init:
 2114              	.LVL118:
 2115              	.LFB69:
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Initialise some test functionry.
 463:armwave.c     ****  */
 464:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 465:armwave.c     **** {
 2116              		.loc 1 465 1 is_stmt 1 view -0
 2117              		.cfi_startproc
 2118              		@ args = 0, pretend = 0, frame = 0
 2119              		@ frame_needed = 0, uses_anonymous_args = 0
 466:armwave.c     ****     test_create_gamma();
 2120              		.loc 1 466 5 view .LVU550
 2121              	.LBB18:
 2122              	.LBI18:
  34:armwave.c     **** {
 2123              		.loc 1 34 6 view .LVU551
  34:armwave.c     **** {
 2124              		.loc 1 34 6 is_stmt 0 view .LVU552
 2125              	.LBE18:
 2126              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2127              		.loc 1 465 1 view .LVU553
 2128 0a90 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2129              		.cfi_def_cfa_offset 32
 2130              		.cfi_offset 4, -32
 2131              		.cfi_offset 5, -28
 2132              		.cfi_offset 6, -24
 2133              		.cfi_offset 7, -20
 2134              		.cfi_offset 8, -16
 2135              		.cfi_offset 9, -12
 2136              		.cfi_offset 10, -8
 2137              		.cfi_offset 14, -4
 2138 0a94 068B2DED 		vpush.64	{d8, d9, d10}	@
 2139              		.cfi_def_cfa_offset 56
 2140              		.cfi_offset 80, -56
 2141              		.cfi_offset 81, -52
 2142              		.cfi_offset 82, -48
 2143              		.cfi_offset 83, -44
 2144              		.cfi_offset 84, -40
 2145              		.cfi_offset 85, -36
 2146 0a98 BC409FE5 		ldr	r4, .L122+20	@ ivtmp.90,
 2147              	.LBB21:
 2148              	.LBB19:
 2149              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2150              		.loc 1 40 32 view .LVU554
 2151 0a9c 2DAA9FED 		vldr.32	s20, .L122+16	@ tmp136,
 2152              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2153              		.loc 1 40 26 view .LVU555
 2154 0aa0 289B9FED 		vldr.64	d9, .L122	@ tmp151,
 2155              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2156              		.loc 1 40 49 view .LVU556
 2157 0aa4 298B9FED 		vldr.64	d8, .L122+8	@ tmp139,
 2158 0aa8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.90,
 2159              	.LBE19:
 2160              	.LBE21:
 2161              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2162              		.loc 1 465 1 view .LVU557
 2163 0aac 10D04DE2 		sub	sp, sp, #16	@,,
 2164              		.cfi_def_cfa_offset 72
 2165              	@ armwave.c:465: {
 465:armwave.c     ****     test_create_gamma();
 2166              		.loc 1 465 1 view .LVU558
 2167 0ab0 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2168 0ab4 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2169 0ab8 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2170 0abc 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2171 0ac0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.90,
 2172 0ac4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2173              	.LVL119:
 2174              	.L119:
 2175              	.LBB22:
 2176              	.LBB20:
  40:armwave.c     ****     }
 2177              		.loc 1 40 9 is_stmt 1 view .LVU559
 2178              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2179              		.loc 1 40 32 is_stmt 0 view .LVU560
 2180 0ac8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.90
 2181              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2182              		.loc 1 40 26 view .LVU561
 2183 0acc 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2184              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2185              		.loc 1 40 32 view .LVU562
 2186 0ad0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2187 0ad4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2188 0ad8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2189              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2190              		.loc 1 40 26 view .LVU563
 2191 0adc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2192 0ae0 FEFFFFEB 		bl	pow		@
 2193              	.LVL120:
 2194              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2195              		.loc 1 40 49 view .LVU564
 2196 0ae4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 24 view .LVU565
 2199 0ae8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2200 0aec 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2201 0af0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2202              	.LVL121:
 2203              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2204              		.loc 1 39 5 view .LVU566
 2205 0af4 0A0054E1 		cmp	r4, r10	@ ivtmp.90, _39
 2206 0af8 F2FFFF1A 		bne	.L119		@,
 2207              	.LVL122:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2208              		.loc 1 39 5 view .LVU567
 2209              	.LBE20:
 2210              	.LBE22:
 467:armwave.c     **** 
 468:armwave.c     ****     // make ch1 yellowish by default
 469:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2211              		.loc 1 469 5 is_stmt 1 view .LVU568
 2212              	.LBB23:
 2213              	.LBI23:
 422:armwave.c     **** {
 2214              		.loc 1 422 6 view .LVU569
 2215              	.LBB24:
 425:armwave.c     ****         case 1:
 2216              		.loc 1 425 5 view .LVU570
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2217              		.loc 1 427 13 view .LVU571
 428:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2218              		.loc 1 428 13 view .LVU572
 2219              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2220              		.loc 1 427 41 is_stmt 0 view .LVU573
 2221 0afc 5CC09FE5 		ldr	ip, .L122+24	@ tmp142,
 2222 0b00 5C409FE5 		ldr	r4, .L122+28	@ tmp143,
 2223              	.LBE24:
 2224              	.LBE23:
 2225              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 470:armwave.c     **** 
 471:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2226              		.loc 1 471 5 view .LVU574
 2227 0b04 0000A0E3 		mov	r0, #0	@ tmp147,
 2228              	.LBB28:
 2229              	.LBB25:
 2230              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2231              		.loc 1 429 41 view .LVU575
 2232 0b08 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2233              	.LBE25:
 2234              	.LBE28:
 2235              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2236              		.loc 1 471 5 view .LVU576
 2237 0b0c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2238 0b10 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2239 0b14 00808DE5 		str	r8, [sp]	@ render_width,
 2240 0b18 0610A0E1 		mov	r1, r6	@, tmp3
 2241 0b1c 0720A0E1 		mov	r2, r7	@, nwaves
 2242              	.LBB29:
 2243              	.LBB26:
 2244              	@ armwave.c:427:             g_armwave_state.ch1_color.r = r;
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2245              		.loc 1 427 41 view .LVU577
 2246 0b20 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 429:armwave.c     ****             break;
 2247              		.loc 1 429 13 is_stmt 1 view .LVU578
 2248              	.LBE26:
 2249              	.LBE29:
 2250              	@ armwave.c:471:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2251              		.loc 1 471 5 is_stmt 0 view .LVU579
 2252 0b24 0630A0E1 		mov	r3, r6	@, wave_size
 2253              	.LBB30:
 2254              	.LBB27:
 2255              	@ armwave.c:429:             g_armwave_state.ch1_color.b = b;
 429:armwave.c     ****             break;
 2256              		.loc 1 429 41 view .LVU580
 2257 0b28 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 430:armwave.c     ****     }
 2258              		.loc 1 430 13 is_stmt 1 view .LVU581
 2259              	.LVL123:
 430:armwave.c     ****     }
 2260              		.loc 1 430 13 is_stmt 0 view .LVU582
 2261              	.LBE27:
 2262              	.LBE30:
 2263              		.loc 1 471 5 is_stmt 1 view .LVU583
 2264 0b2c FEFFFFEB 		bl	armwave_setup_render		@
 2265              	.LVL124:
 472:armwave.c     **** 
 473:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2266              		.loc 1 473 5 view .LVU584
 2267 0b30 30109FE5 		ldr	r1, .L122+32	@,
 2268 0b34 30009FE5 		ldr	r0, .L122+36	@,
 2269              	@ armwave.c:474: }
 474:armwave.c     **** }
 2270              		.loc 1 474 1 is_stmt 0 view .LVU585
 2271 0b38 10D08DE2 		add	sp, sp, #16	@,,
 2272              		.cfi_def_cfa_offset 56
 2273              		@ sp needed	@
 2274 0b3c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2275              		.cfi_restore 84
 2276              		.cfi_restore 85
 2277              		.cfi_restore 82
 2278              		.cfi_restore 83
 2279              		.cfi_restore 80
 2280              		.cfi_restore 81
 2281              		.cfi_def_cfa_offset 32
 2282 0b40 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2283              		.cfi_restore 14
 2284              		.cfi_restore 10
 2285              		.cfi_restore 9
 2286              		.cfi_restore 8
 2287              		.cfi_restore 7
 2288              		.cfi_restore 6
 2289              		.cfi_restore 5
 2290              		.cfi_restore 4
 2291              		.cfi_def_cfa_offset 0
 2292              	.LVL125:
 2293              	@ armwave.c:473:     printf("armwave version: %s\n", ARMWAVE_VER);
 473:armwave.c     **** }
 2294              		.loc 1 473 5 view .LVU586
 2295 0b44 FEFFFFEA 		b	printf		@
 2296              	.LVL126:
 2297              	.L123:
 2298              		.align	3
 2299              	.L122:
 2300 0b48 000000C0 		.word	-1073741824
 2301 0b4c CCCCEC3F 		.word	1072483532
 2302 0b50 00000000 		.word	0
 2303 0b54 00E06F40 		.word	1081073664
 2304 0b58 00007F43 		.word	1132396544
 2305 0b5c FFFFFFFF 		.word	gamma_table-1
 2306 0b60 00000000 		.word	g_armwave_state
 2307 0b64 F609F406 		.word	116656630
 2308 0b68 00000000 		.word	.LC0
 2309 0b6c 08000000 		.word	.LC1
 2310              		.cfi_endproc
 2311              	.LFE69:
 2313              		.align	2
 2314              		.global	armwave_test_fill_outbuf
 2315              		.syntax unified
 2316              		.arm
 2317              		.fpu vfp
 2319              	armwave_test_fill_outbuf:
 2320              	.LFB70:
 475:armwave.c     **** 
 476:armwave.c     **** /*
 477:armwave.c     ****  * Render image to the local allocated buffer.
 478:armwave.c     ****  */
 479:armwave.c     **** void armwave_test_fill_outbuf()
 480:armwave.c     **** {
 2321              		.loc 1 480 1 is_stmt 1 view -0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 0
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 481:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2325              		.loc 1 481 5 view .LVU588
 2326              	@ armwave.c:480: {
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2327              		.loc 1 480 1 is_stmt 0 view .LVU589
 2328 0b70 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2329              		.cfi_def_cfa_offset 32
 2330              		.cfi_offset 4, -32
 2331              		.cfi_offset 5, -28
 2332              		.cfi_offset 6, -24
 2333              		.cfi_offset 7, -20
 2334              		.cfi_offset 8, -16
 2335              		.cfi_offset 9, -12
 2336              		.cfi_offset 10, -8
 2337              		.cfi_offset 14, -4
 2338              	@ armwave.c:481:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2339              		.loc 1 481 5 view .LVU590
 2340 0b74 04419FE5 		ldr	r4, .L135	@ tmp219,
 2341 0b78 685094E5 		ldr	r5, [r4, #104]	@ _1, g_armwave_state.out_pixbuf
 2342              	.LVL127:
 2343              	.LBB33:
 2344              	.LBI33:
 172:armwave.c     **** {
 2345              		.loc 1 172 6 is_stmt 1 view .LVU591
 2346              	.LBB34:
 174:armwave.c     ****     // uint32_t ysub;
 2347              		.loc 1 174 5 view .LVU592
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2348              		.loc 1 176 5 view .LVU593
 177:armwave.c     ****     // uint8_t row;
 2349              		.loc 1 177 5 view .LVU594
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2350              		.loc 1 179 5 view .LVU595
 180:armwave.c     ****     uint32_t offset;
 2351              		.loc 1 180 5 view .LVU596
 181:armwave.c     **** 
 2352              		.loc 1 181 5 view .LVU597
 183:armwave.c     **** 
 2353              		.loc 1 183 5 view .LVU598
 2354 0b7c 000055E3 		cmp	r5, #0	@ _1,
 2355 0b80 3900000A 		beq	.L134		@,
 186:armwave.c     **** 
 2356              		.loc 1 186 5 view .LVU599
 2357              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2358              		.loc 1 186 59 is_stmt 0 view .LVU600
 2359 0b84 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2360 0b88 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2361              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2362              		.loc 1 186 5 view .LVU601
 2363 0b8c 0010A0E3 		mov	r1, #0	@,
 2364 0b90 0500A0E1 		mov	r0, r5	@, _1
 2365              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2366              		.loc 1 186 59 view .LVU602
 2367 0b94 920302E0 		mul	r2, r2, r3	@ tmp172, g_armwave_state.target_height, g_armwave_state.target_width
 2368              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2369              		.loc 1 186 5 view .LVU603
 2370 0b98 0221A0E1 		lsl	r2, r2, #2	@, tmp172,
 2371 0b9c FEFFFFEB 		bl	memset		@
 2372              	.LVL128:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2373              		.loc 1 188 5 is_stmt 1 view .LVU604
 2374              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2375              		.loc 1 188 10 is_stmt 0 view .LVU605
 2376 0ba0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2377 0ba4 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2378 0ba8 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2379              	.LVL129:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2380              		.loc 1 231 5 is_stmt 1 view .LVU606
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2381              		.loc 1 231 5 is_stmt 0 view .LVU607
 2382 0bac 010052E3 		cmp	r2, #1	@ npix,
 2383              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2384              		.loc 1 231 26 view .LVU608
 2385 0bb0 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp185, npix, npix,
 2386              	.LVL130:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2387              		.loc 1 231 26 view .LVU609
 2388 0bb4 C220A0E1 		asr	r2, r2, #1	@ _67, tmp185,
 2389              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2390              		.loc 1 231 5 view .LVU610
 2391 0bb8 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2392 0bbc 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2393              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2394              		.loc 1 236 44 view .LVU611
 2395 0bc0 FC76D4E1 		ldrsh	r7, [r4, #108]	@ _19, g_armwave_state.ch1_color.r
 2396              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2397              		.loc 1 237 44 view .LVU612
 2398 0bc4 FE66D4E1 		ldrsh	r6, [r4, #110]	@ _24, g_armwave_state.ch1_color.g
 2399              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2400              		.loc 1 238 44 view .LVU613
 2401 0bc8 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _28, g_armwave_state.ch1_color.b
 2402              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2403              		.loc 1 249 49 view .LVU614
 2404 0bcc 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _48, g_armwave_state.vscale_frac
 2405 0bd0 020040E2 		sub	r0, r0, #2	@ ivtmp.95, g_armwave_state.ch1_buffer,
 2406              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2407              		.loc 1 231 11 view .LVU615
 2408 0bd4 0010A0E3 		mov	r1, #0	@ n,
 2409              	.LVL131:
 2410              	.L128:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2411              		.loc 1 232 9 is_stmt 1 view .LVU616
 233:armwave.c     **** 
 2412              		.loc 1 233 9 view .LVU617
 2413              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2414              		.loc 1 233 15 is_stmt 0 view .LVU618
 2415 0bd8 B280F0E1 		ldrh	r8, [r0, #2]!	@ MEM[base: _100, offset: 0B], MEM[base: _100, offset: 0B]
 2416              	.LVL132:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2417              		.loc 1 235 9 is_stmt 1 view .LVU619
 2418              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2419              		.loc 1 235 11 is_stmt 0 view .LVU620
 2420 0bdc FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _100, offset: 0B],
 2421              	.LVL133:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2422              		.loc 1 235 11 view .LVU621
 2423 0be0 1D00000A 		beq	.L127		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2424              		.loc 1 236 13 is_stmt 1 view .LVU622
 2425              	.LVL134:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2426              		.loc 1 237 13 view .LVU623
 238:armwave.c     **** 
 2427              		.loc 1 238 13 view .LVU624
 240:armwave.c     ****             g = MIN(gg, 255);
 2428              		.loc 1 240 13 view .LVU625
 241:armwave.c     ****             b = MIN(bb, 255);
 2429              		.loc 1 241 13 view .LVU626
 242:armwave.c     **** 
 2430              		.loc 1 242 13 view .LVU627
 245:armwave.c     **** 
 2431              		.loc 1 245 13 view .LVU628
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2432              		.loc 1 248 13 view .LVU629
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2433              		.loc 1 249 13 view .LVU630
 250:armwave.c     ****             xx = (nsub >> 8) / 2;
 2434              		.loc 1 250 13 view .LVU631
 251:armwave.c     **** 
 2435              		.loc 1 251 13 view .LVU632
 254:armwave.c     ****             {
 2436              		.loc 1 254 13 view .LVU633
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2437              		.loc 1 256 17 view .LVU634
 257:armwave.c     ****             }
 2438              		.loc 1 257 17 view .LVU635
 2439              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2440              		.loc 1 249 24 is_stmt 0 view .LVU636
 2441 0be4 71C0EFE6 		uxtb	ip, r1	@ n, n
 2442              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2443              		.loc 1 238 47 view .LVU637
 2444 0be8 880E63E1 		smulbb	r3, r8, lr	@ tmp205, value, _28
 2445              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2446              		.loc 1 249 32 view .LVU638
 2447 0bec 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2448              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2449              		.loc 1 237 47 view .LVU639
 2450 0bf0 880669E1 		smulbb	r9, r8, r6	@ tmp209, value, _24
 2451              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2452              		.loc 1 238 16 view .LVU640
 2453 0bf4 4334A0E1 		asr	r3, r3, #8	@ bb, tmp205,
 2454              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2455              		.loc 1 242 17 view .LVU641
 2456 0bf8 FF0053E3 		cmp	r3, #255	@ bb,
 2457              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2458              		.loc 1 249 32 view .LVU642
 2459 0bfc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, n
 2460              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2461              		.loc 1 237 16 view .LVU643
 2462 0c00 4994A0E1 		asr	r9, r9, #8	@ gg, tmp209,
 2463              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2464              		.loc 1 236 47 view .LVU644
 2465 0c04 880768E1 		smulbb	r8, r8, r7	@ tmp215, value, _19
 2466              	.LVL135:
 2467              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2468              		.loc 1 242 17 view .LVU645
 2469 0c08 FF30A0A3 		movge	r3, #255	@ bb,
 2470              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2471              		.loc 1 241 17 view .LVU646
 2472 0c0c FF0059E3 		cmp	r9, #255	@ gg,
 2473 0c10 FF90A0A3 		movge	r9, #255	@ gg,
 2474              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2475              		.loc 1 236 16 view .LVU647
 2476 0c14 4884A0E1 		asr	r8, r8, #8	@ rr, tmp215,
 2477              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2478              		.loc 1 240 17 view .LVU648
 2479 0c18 FF0058E3 		cmp	r8, #255	@ rr,
 2480              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2481              		.loc 1 249 32 view .LVU649
 2482 0c1c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp197, tmp196, _48
 2483              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2484              		.loc 1 245 48 view .LVU650
 2485 0c20 0994A0E1 		lsl	r9, r9, #8	@ tmp210, gg,
 2486              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2487              		.loc 1 245 36 view .LVU651
 2488 0c24 0338A0E1 		lsl	r3, r3, #16	@ tmp206, bb,
 2489              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2490              		.loc 1 240 17 view .LVU652
 2491 0c28 FF80A0A3 		movge	r8, #255	@ rr,
 2492              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2493              		.loc 1 245 48 view .LVU653
 2494 0c2c 7990FFE6 		uxth	r9, r9	@ tmp211, tmp210
 2495              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2496              		.loc 1 245 36 view .LVU654
 2497 0c30 FF3803E2 		and	r3, r3, #16711680	@ tmp207, tmp206,
 2498              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2499              		.loc 1 245 43 view .LVU655
 2500 0c34 093083E1 		orr	r3, r3, r9	@ tmp213, tmp207, tmp211
 2501              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2502              		.loc 1 245 54 view .LVU656
 2503 0c38 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2504              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2505              		.loc 1 249 16 view .LVU657
 2506 0c3c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2507              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2508              		.loc 1 245 54 view .LVU658
 2509 0c40 083083E1 		orr	r3, r3, r8	@ tmp217, tmp213, rr
 2510              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2511              		.loc 1 256 35 view .LVU659
 2512 0c44 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2513              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 2514              		.loc 1 251 30 view .LVU660
 2515 0c48 C194A0E1 		asr	r9, r1, #9	@ xx, n,
 2516              	.LVL136:
 2517              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2518              		.loc 1 245 18 view .LVU661
 2519 0c4c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp217,
 2520              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2521              		.loc 1 257 35 view .LVU662
 2522 0c50 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2523 0c54 9C982CE0 		mla	ip, ip, r8, r9	@ tmp203, g_armwave_state.target_width, yy, xx
 2524              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2525              		.loc 1 257 45 view .LVU663
 2526 0c58 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_59
 2527              	.LVL137:
 2528              	.L127:
 2529              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2530              		.loc 1 231 34 view .LVU664
 2531 0c5c 011081E2 		add	r1, r1, #1	@ n, n,
 2532              	.LVL138:
 2533              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2534              		.loc 1 231 5 view .LVU665
 2535 0c60 020051E1 		cmp	r1, r2	@ n, _67
 2536 0c64 DBFFFFBA 		blt	.L128		@,
 2537 0c68 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2538              	.LVL139:
 2539              	.L134:
 183:armwave.c     **** 
 2540              		.loc 1 183 5 is_stmt 1 view .LVU666
 2541 0c6c 10309FE5 		ldr	r3, .L135+4	@,
 2542 0c70 B720A0E3 		mov	r2, #183	@,
 2543 0c74 0C109FE5 		ldr	r1, .L135+8	@,
 2544 0c78 0C009FE5 		ldr	r0, .L135+12	@,
 2545 0c7c FEFFFFEB 		bl	__assert_fail		@
 2546              	.LVL140:
 2547              	.L136:
 183:armwave.c     **** 
 2548              		.loc 1 183 5 is_stmt 0 view .LVU667
 2549              		.align	2
 2550              	.L135:
 2551 0c80 00000000 		.word	g_armwave_state
 2552 0c84 00000000 		.word	.LANCHOR0
 2553 0c88 20000000 		.word	.LC2
 2554 0c8c 2C000000 		.word	.LC3
 2555              	.LBE34:
 2556              	.LBE33:
 2557              		.cfi_endproc
 2558              	.LFE70:
 2560              		.align	2
 2561              		.global	armwave_test_dump_buffer_to_ppm
 2562              		.syntax unified
 2563              		.arm
 2564              		.fpu vfp
 2566              	armwave_test_dump_buffer_to_ppm:
 2567              	.LVL141:
 2568              	.LFB71:
 482:armwave.c     **** }
 483:armwave.c     **** 
 484:armwave.c     **** /*
 485:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 488:armwave.c     **** {
 2569              		.loc 1 488 1 is_stmt 1 view -0
 2570              		.cfi_startproc
 2571              		@ args = 0, pretend = 0, frame = 0
 2572              		@ frame_needed = 0, uses_anonymous_args = 0
 2573              		@ link register save eliminated.
 489:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2574              		.loc 1 489 5 view .LVU669
 2575 0c90 08309FE5 		ldr	r3, .L138	@ tmp112,
 2576 0c94 0010A0E1 		mov	r1, r0	@, fn
 2577 0c98 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2578              	.LVL142:
 2579              		.loc 1 489 5 is_stmt 0 view .LVU670
 2580 0c9c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2581              	.LVL143:
 2582              	.L139:
 2583              		.loc 1 489 5 view .LVU671
 2584              		.align	2
 2585              	.L138:
 2586 0ca0 00000000 		.word	g_armwave_state
 2587              		.cfi_endproc
 2588              	.LFE71:
 2590              		.align	2
 2591              		.global	armwave_test_fill_gdkbuf
 2592              		.syntax unified
 2593              		.arm
 2594              		.fpu vfp
 2596              	armwave_test_fill_gdkbuf:
 2597              	.LVL144:
 2598              	.LFB72:
 490:armwave.c     **** }
 491:armwave.c     **** 
 492:armwave.c     **** /*
 493:armwave.c     ****  * Render GDK buffer with test funtionry.
 494:armwave.c     ****  */
 495:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 496:armwave.c     **** {
 2599              		.loc 1 496 1 is_stmt 1 view -0
 2600              		.cfi_startproc
 2601              		@ args = 0, pretend = 0, frame = 0
 2602              		@ frame_needed = 0, uses_anonymous_args = 0
 497:armwave.c     ****     //PyObject *mv;
 498:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 499:armwave.c     **** 
 500:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 501:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2603              		.loc 1 501 5 view .LVU673
 2604              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2605              		.loc 1 501 11 is_stmt 0 view .LVU674
 2606 0ca4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2607              	@ armwave.c:496: {
 496:armwave.c     ****     //PyObject *mv;
 2608              		.loc 1 496 1 view .LVU675
 2609 0ca8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2610              		.cfi_def_cfa_offset 32
 2611              		.cfi_offset 4, -32
 2612              		.cfi_offset 5, -28
 2613              		.cfi_offset 6, -24
 2614              		.cfi_offset 7, -20
 2615              		.cfi_offset 8, -16
 2616              		.cfi_offset 9, -12
 2617              		.cfi_offset 10, -8
 2618              		.cfi_offset 14, -4
 2619              	@ armwave.c:501:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2620              		.loc 1 501 11 view .LVU676
 2621 0cac 285093E5 		ldr	r5, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2622              	.LVL145:
 502:armwave.c     ****     
 503:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 504:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2623              		.loc 1 504 5 is_stmt 1 view .LVU677
 2624              	.LBB37:
 2625              	.LBI37:
 172:armwave.c     **** {
 2626              		.loc 1 172 6 view .LVU678
 2627              	.LBB38:
 174:armwave.c     ****     // uint32_t ysub;
 2628              		.loc 1 174 5 view .LVU679
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2629              		.loc 1 176 5 view .LVU680
 177:armwave.c     ****     // uint8_t row;
 2630              		.loc 1 177 5 view .LVU681
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2631              		.loc 1 179 5 view .LVU682
 180:armwave.c     ****     uint32_t offset;
 2632              		.loc 1 180 5 view .LVU683
 181:armwave.c     **** 
 2633              		.loc 1 181 5 view .LVU684
 183:armwave.c     **** 
 2634              		.loc 1 183 5 view .LVU685
 2635 0cb0 000055E3 		cmp	r5, #0	@ out_pixbuf,
 2636 0cb4 3A00000A 		beq	.L150		@,
 186:armwave.c     **** 
 2637              		.loc 1 186 5 view .LVU686
 2638              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2639              		.loc 1 186 45 is_stmt 0 view .LVU687
 2640 0cb8 F8409FE5 		ldr	r4, .L151	@ tmp221,
 2641              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2642              		.loc 1 186 5 view .LVU688
 2643 0cbc 0010A0E3 		mov	r1, #0	@,
 2644 0cc0 0500A0E1 		mov	r0, r5	@, out_pixbuf
 2645              	.LVL146:
 2646              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2647              		.loc 1 186 59 view .LVU689
 2648 0cc4 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2649 0cc8 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2650 0ccc 920302E0 		mul	r2, r2, r3	@ tmp174, g_armwave_state.target_height, g_armwave_state.target_width
 2651              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2652              		.loc 1 186 5 view .LVU690
 2653 0cd0 0221A0E1 		lsl	r2, r2, #2	@, tmp174,
 2654 0cd4 FEFFFFEB 		bl	memset		@
 2655              	.LVL147:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2656              		.loc 1 188 5 is_stmt 1 view .LVU691
 2657              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2658              		.loc 1 188 10 is_stmt 0 view .LVU692
 2659 0cd8 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2660 0cdc 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2661 0ce0 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2662              	.LVL148:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2663              		.loc 1 231 5 is_stmt 1 view .LVU693
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2664              		.loc 1 231 5 is_stmt 0 view .LVU694
 2665 0ce4 010052E3 		cmp	r2, #1	@ npix,
 2666              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2667              		.loc 1 231 26 view .LVU695
 2668 0ce8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp187, npix, npix,
 2669              	.LVL149:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2670              		.loc 1 231 26 view .LVU696
 2671 0cec C220A0E1 		asr	r2, r2, #1	@ _69, tmp187,
 2672              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2673              		.loc 1 231 5 view .LVU697
 2674 0cf0 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2675 0cf4 040094E5 		ldr	r0, [r4, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2676              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2677              		.loc 1 236 44 view .LVU698
 2678 0cf8 FC76D4E1 		ldrsh	r7, [r4, #108]	@ _21, g_armwave_state.ch1_color.r
 2679              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2680              		.loc 1 237 44 view .LVU699
 2681 0cfc FE66D4E1 		ldrsh	r6, [r4, #110]	@ _26, g_armwave_state.ch1_color.g
 2682              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2683              		.loc 1 238 44 view .LVU700
 2684 0d00 F0E7D4E1 		ldrsh	lr, [r4, #112]	@ _30, g_armwave_state.ch1_color.b
 2685              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2686              		.loc 1 249 49 view .LVU701
 2687 0d04 0A7A94ED 		vldr.32	s14, [r4, #40]	@ _50, g_armwave_state.vscale_frac
 2688 0d08 020040E2 		sub	r0, r0, #2	@ ivtmp.100, g_armwave_state.ch1_buffer,
 2689              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2690              		.loc 1 231 11 view .LVU702
 2691 0d0c 0010A0E3 		mov	r1, #0	@ n,
 2692              	.LVL150:
 2693              	.L144:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2694              		.loc 1 232 9 is_stmt 1 view .LVU703
 233:armwave.c     **** 
 2695              		.loc 1 233 9 view .LVU704
 2696              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2697              		.loc 1 233 15 is_stmt 0 view .LVU705
 2698 0d10 B280F0E1 		ldrh	r8, [r0, #2]!	@ MEM[base: _102, offset: 0B], MEM[base: _102, offset: 0B]
 2699              	.LVL151:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2700              		.loc 1 235 9 is_stmt 1 view .LVU706
 2701              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2702              		.loc 1 235 11 is_stmt 0 view .LVU707
 2703 0d14 FF8018E2 		ands	r8, r8, #255	@ value, MEM[base: _102, offset: 0B],
 2704              	.LVL152:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2705              		.loc 1 235 11 view .LVU708
 2706 0d18 1D00000A 		beq	.L143		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2707              		.loc 1 236 13 is_stmt 1 view .LVU709
 2708              	.LVL153:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2709              		.loc 1 237 13 view .LVU710
 238:armwave.c     **** 
 2710              		.loc 1 238 13 view .LVU711
 240:armwave.c     ****             g = MIN(gg, 255);
 2711              		.loc 1 240 13 view .LVU712
 241:armwave.c     ****             b = MIN(bb, 255);
 2712              		.loc 1 241 13 view .LVU713
 242:armwave.c     **** 
 2713              		.loc 1 242 13 view .LVU714
 245:armwave.c     **** 
 2714              		.loc 1 245 13 view .LVU715
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2715              		.loc 1 248 13 view .LVU716
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2716              		.loc 1 249 13 view .LVU717
 250:armwave.c     ****             xx = (nsub >> 8) / 2;
 2717              		.loc 1 250 13 view .LVU718
 251:armwave.c     **** 
 2718              		.loc 1 251 13 view .LVU719
 254:armwave.c     ****             {
 2719              		.loc 1 254 13 view .LVU720
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2720              		.loc 1 256 17 view .LVU721
 257:armwave.c     ****             }
 2721              		.loc 1 257 17 view .LVU722
 2722              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2723              		.loc 1 249 24 is_stmt 0 view .LVU723
 2724 0d1c 71C0EFE6 		uxtb	ip, r1	@ n, n
 2725              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2726              		.loc 1 238 47 view .LVU724
 2727 0d20 880E63E1 		smulbb	r3, r8, lr	@ tmp207, value, _30
 2728              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2729              		.loc 1 249 32 view .LVU725
 2730 0d24 90CA07EE 		vmov	s15, ip	@ int	@ n, n
 2731              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2732              		.loc 1 237 47 view .LVU726
 2733 0d28 880669E1 		smulbb	r9, r8, r6	@ tmp211, value, _26
 2734              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2735              		.loc 1 238 16 view .LVU727
 2736 0d2c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp207,
 2737              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2738              		.loc 1 242 17 view .LVU728
 2739 0d30 FF0053E3 		cmp	r3, #255	@ bb,
 2740              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2741              		.loc 1 249 32 view .LVU729
 2742 0d34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, n
 2743              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2744              		.loc 1 237 16 view .LVU730
 2745 0d38 4994A0E1 		asr	r9, r9, #8	@ gg, tmp211,
 2746              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2747              		.loc 1 236 47 view .LVU731
 2748 0d3c 880768E1 		smulbb	r8, r8, r7	@ tmp217, value, _21
 2749              	.LVL154:
 2750              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2751              		.loc 1 242 17 view .LVU732
 2752 0d40 FF30A0A3 		movge	r3, #255	@ bb,
 2753              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2754              		.loc 1 241 17 view .LVU733
 2755 0d44 FF0059E3 		cmp	r9, #255	@ gg,
 2756 0d48 FF90A0A3 		movge	r9, #255	@ gg,
 2757              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2758              		.loc 1 236 16 view .LVU734
 2759 0d4c 4884A0E1 		asr	r8, r8, #8	@ rr, tmp217,
 2760              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2761              		.loc 1 240 17 view .LVU735
 2762 0d50 FF0058E3 		cmp	r8, #255	@ rr,
 2763              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2764              		.loc 1 249 32 view .LVU736
 2765 0d54 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp198, _50
 2766              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2767              		.loc 1 245 48 view .LVU737
 2768 0d58 0994A0E1 		lsl	r9, r9, #8	@ tmp212, gg,
 2769              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2770              		.loc 1 245 36 view .LVU738
 2771 0d5c 0338A0E1 		lsl	r3, r3, #16	@ tmp208, bb,
 2772              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2773              		.loc 1 240 17 view .LVU739
 2774 0d60 FF80A0A3 		movge	r8, #255	@ rr,
 2775              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2776              		.loc 1 245 48 view .LVU740
 2777 0d64 7990FFE6 		uxth	r9, r9	@ tmp213, tmp212
 2778              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2779              		.loc 1 245 36 view .LVU741
 2780 0d68 FF3803E2 		and	r3, r3, #16711680	@ tmp209, tmp208,
 2781              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2782              		.loc 1 245 43 view .LVU742
 2783 0d6c 093083E1 		orr	r3, r3, r9	@ tmp215, tmp209, tmp213
 2784              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2785              		.loc 1 245 54 view .LVU743
 2786 0d70 7880EFE6 		uxtb	r8, r8	@ rr, rr
 2787              	@ armwave.c:249:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2788              		.loc 1 249 16 view .LVU744
 2789 0d74 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp199
 2790              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2791              		.loc 1 245 54 view .LVU745
 2792 0d78 083083E1 		orr	r3, r3, r8	@ tmp219, tmp215, rr
 2793              	@ armwave.c:256:                 offset = (xx + (y * g_armwave_state.target_width)); 
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2794              		.loc 1 256 35 view .LVU746
 2795 0d7c 58C094E5 		ldr	ip, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2796              	@ armwave.c:251:             xx = (nsub >> 8) / 2;
 251:armwave.c     **** 
 2797              		.loc 1 251 30 view .LVU747
 2798 0d80 C194A0E1 		asr	r9, r1, #9	@ xx, n,
 2799              	.LVL155:
 2800              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2801              		.loc 1 245 18 view .LVU748
 2802 0d84 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp219,
 2803              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2804              		.loc 1 257 35 view .LVU749
 2805 0d88 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 2806 0d8c 9C982CE0 		mla	ip, ip, r8, r9	@ tmp205, g_armwave_state.target_width, yy, xx
 2807              	@ armwave.c:257:                 *(out_buffer_base + offset) = word;
 257:armwave.c     ****             }
 2808              		.loc 1 257 45 view .LVU750
 2809 0d90 0C3185E7 		str	r3, [r5, ip, lsl #2]	@ word, *_61
 2810              	.LVL156:
 2811              	.L143:
 2812              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2813              		.loc 1 231 34 view .LVU751
 2814 0d94 011081E2 		add	r1, r1, #1	@ n, n,
 2815              	.LVL157:
 2816              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2817              		.loc 1 231 5 view .LVU752
 2818 0d98 020051E1 		cmp	r1, r2	@ n, _69
 2819 0d9c DBFFFFBA 		blt	.L144		@,
 2820 0da0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2821              	.LVL158:
 2822              	.L150:
 183:armwave.c     **** 
 2823              		.loc 1 183 5 is_stmt 1 view .LVU753
 2824 0da4 10309FE5 		ldr	r3, .L151+4	@,
 2825 0da8 B720A0E3 		mov	r2, #183	@,
 2826 0dac 0C109FE5 		ldr	r1, .L151+8	@,
 2827 0db0 0C009FE5 		ldr	r0, .L151+12	@,
 2828              	.LVL159:
 183:armwave.c     **** 
 2829              		.loc 1 183 5 is_stmt 0 view .LVU754
 2830 0db4 FEFFFFEB 		bl	__assert_fail		@
 2831              	.LVL160:
 2832              	.L152:
 183:armwave.c     **** 
 2833              		.loc 1 183 5 view .LVU755
 2834              		.align	2
 2835              	.L151:
 2836 0db8 00000000 		.word	g_armwave_state
 2837 0dbc 00000000 		.word	.LANCHOR0
 2838 0dc0 20000000 		.word	.LC2
 2839 0dc4 2C000000 		.word	.LC3
 2840              	.LBE38:
 2841              	.LBE37:
 2842              		.cfi_endproc
 2843              	.LFE72:
 2845              		.align	2
 2846              		.global	armwave_test_buffer_alloc
 2847              		.syntax unified
 2848              		.arm
 2849              		.fpu vfp
 2851              	armwave_test_buffer_alloc:
 2852              	.LVL161:
 2853              	.LFB73:
 505:armwave.c     **** }
 506:armwave.c     **** 
 507:armwave.c     **** /*
 508:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 509:armwave.c     ****  */
 510:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 511:armwave.c     **** {
 2854              		.loc 1 511 1 is_stmt 1 view -0
 2855              		.cfi_startproc
 2856              		@ args = 0, pretend = 0, frame = 0
 2857              		@ frame_needed = 0, uses_anonymous_args = 0
 512:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2858              		.loc 1 512 5 view .LVU757
 2859              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2860              		.loc 1 511 1 is_stmt 0 view .LVU758
 2861 0dc8 70402DE9 		push	{r4, r5, r6, lr}	@
 2862              		.cfi_def_cfa_offset 16
 2863              		.cfi_offset 4, -16
 2864              		.cfi_offset 5, -12
 2865              		.cfi_offset 6, -8
 2866              		.cfi_offset 14, -4
 2867              	@ armwave.c:511: {
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2868              		.loc 1 511 1 view .LVU759
 2869 0dcc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2870              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2871              		.loc 1 512 23 view .LVU760
 2872 0dd0 44409FE5 		ldr	r4, .L160	@ tmp128,
 2873 0dd4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2874              	.LVL162:
 2875              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 2876              		.loc 1 512 7 view .LVU761
 2877 0dd8 000050E3 		cmp	r0, #0	@ _1,
 2878 0ddc 0000000A 		beq	.L154		@,
 513:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2879              		.loc 1 513 9 is_stmt 1 view .LVU762
 2880 0de0 FEFFFFEB 		bl	free		@
 2881              	.LVL163:
 2882              	.L154:
 514:armwave.c     ****     }
 515:armwave.c     **** 
 516:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 517:armwave.c     **** 
 518:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2883              		.loc 1 518 5 view .LVU763
 2884              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2885              		.loc 1 518 75 is_stmt 0 view .LVU764
 2886 0de4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2887 0de8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2888              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2889              		.loc 1 518 40 view .LVU765
 2890 0dec 0610A0E1 		mov	r1, r6	@, nsets
 2891              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2892              		.loc 1 518 75 view .LVU766
 2893 0df0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2894              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2895              		.loc 1 518 40 view .LVU767
 2896 0df4 0500A0E1 		mov	r0, r5	@, _4
 2897 0df8 FEFFFFEB 		bl	calloc		@
 2898              	.LVL164:
 2899              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 519:armwave.c     **** 
 520:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2900              		.loc 1 520 7 view .LVU768
 2901 0dfc 000050E3 		cmp	r0, #0	@ tmp124,
 2902              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 2903              		.loc 1 518 38 view .LVU769
 2904 0e00 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2905              		.loc 1 520 5 is_stmt 1 view .LVU770
 2906              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 2907              		.loc 1 520 7 is_stmt 0 view .LVU771
 2908 0e04 7080BD18 		popne	{r4, r5, r6, pc}	@
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2909              		.loc 1 521 9 is_stmt 1 view .LVU772
 2910 0e08 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2911 0e0c 0620A0E1 		mov	r2, r6	@, nsets
 2912 0e10 08009FE5 		ldr	r0, .L160+4	@,
 2913              	@ armwave.c:525: }
 522:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 523:armwave.c     ****         return;
 524:armwave.c     ****     }
 525:armwave.c     **** }
 2914              		.loc 1 525 1 is_stmt 0 view .LVU773
 2915 0e14 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2916              		.cfi_restore 14
 2917              		.cfi_restore 6
 2918              		.cfi_restore 5
 2919              		.cfi_restore 4
 2920              		.cfi_def_cfa_offset 0
 2921              	.LVL165:
 2922              	@ armwave.c:521:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2923              		.loc 1 521 9 view .LVU774
 2924 0e18 FEFFFFEA 		b	printf		@
 2925              	.LVL166:
 2926              	.L161:
 521:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2927              		.loc 1 521 9 view .LVU775
 2928              		.align	2
 2929              	.L160:
 2930 0e1c 00000000 		.word	g_armwave_state
 2931 0e20 E8010000 		.word	.LC18
 2932              		.cfi_endproc
 2933              	.LFE73:
 2935              		.align	2
 2936              		.global	armwave_fill_pixbuf_into_pybuffer
 2937              		.syntax unified
 2938              		.arm
 2939              		.fpu vfp
 2941              	armwave_fill_pixbuf_into_pybuffer:
 2942              	.LVL167:
 2943              	.LFB74:
 526:armwave.c     **** 
 527:armwave.c     **** /*
 528:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 529:armwave.c     ****  */
 530:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 531:armwave.c     **** {
 2944              		.loc 1 531 1 is_stmt 1 view -0
 2945              		.cfi_startproc
 2946              		@ args = 0, pretend = 0, frame = 48
 2947              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     Py_buffer buffer;
 2948              		.loc 1 532 5 view .LVU777
 533:armwave.c     ****     int ret;
 2949              		.loc 1 533 5 view .LVU778
 534:armwave.c     **** 
 535:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 536:armwave.c     **** 
 537:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2950              		.loc 1 537 5 view .LVU779
 2951              	@ armwave.c:531: {
 531:armwave.c     ****     Py_buffer buffer;
 2952              		.loc 1 531 1 is_stmt 0 view .LVU780
 2953 0e24 04E02DE5 		str	lr, [sp, #-4]!	@,
 2954              		.cfi_def_cfa_offset 4
 2955              		.cfi_offset 14, -4
 2956 0e28 34D04DE2 		sub	sp, sp, #52	@,,
 2957              		.cfi_def_cfa_offset 56
 2958              	@ armwave.c:537:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2959              		.loc 1 537 11 view .LVU781
 2960 0e2c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2961 0e30 0120A0E3 		mov	r2, #1	@,
 2962 0e34 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2963              	.LVL168:
 538:armwave.c     **** 
 539:armwave.c     ****     if(ret != 0) {
 2964              		.loc 1 539 5 is_stmt 1 view .LVU782
 2965              	@ armwave.c:539:     if(ret != 0) {
 2966              		.loc 1 539 7 is_stmt 0 view .LVU783
 2967 0e38 000050E3 		cmp	r0, #0	@,
 2968 0e3c 0A00001A 		bne	.L166		@,
 540:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 541:armwave.c     ****         Py_RETURN_FALSE;
 542:armwave.c     ****     }
 543:armwave.c     **** 
 544:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 545:armwave.c     **** 
 546:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2969              		.loc 1 546 5 is_stmt 1 view .LVU784
 2970 0e40 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2971              	.LVL169:
 2972              		.loc 1 546 5 is_stmt 0 view .LVU785
 2973 0e44 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2974              	.LVL170:
 547:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 548:armwave.c     **** 
 549:armwave.c     ****     PyBuffer_Release(&buffer);
 2975              		.loc 1 549 5 is_stmt 1 view .LVU786
 2976 0e48 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2977 0e4c FEFFFFEB 		bl	PyBuffer_Release		@
 2978              	.LVL171:
 550:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 551:armwave.c     **** 
 552:armwave.c     ****     Py_RETURN_TRUE;
 2979              		.loc 1 552 5 view .LVU787
 2980              	.LBB39:
 2981              	.LBI39:
 2982              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2983              		.loc 2 456 20 view .LVU788
 2984              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2985              		.loc 2 458 21 view .LVU789
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2986              		.loc 2 459 5 view .LVU790
 2987              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2988              		.loc 2 459 18 is_stmt 0 view .LVU791
 2989 0e50 38309FE5 		ldr	r3, .L167	@ tmp126,
 2990              	.LBE40:
 2991              	.LBE39:
 2992              	@ armwave.c:552:     Py_RETURN_TRUE;
 2993              		.loc 1 552 5 view .LVU792
 2994 0e54 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2995              	.LBB42:
 2996              	.LBB41:
 2997              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2998              		.loc 2 459 18 view .LVU793
 2999 0e58 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3000 0e5c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3001 0e60 002083E5 		str	r2, [r3]	@ tmp128,
 3002              	.LBE41:
 3003              	.LBE42:
 3004              	@ armwave.c:553: }
 553:armwave.c     **** }
 3005              		.loc 1 553 1 view .LVU794
 3006 0e64 34D08DE2 		add	sp, sp, #52	@,,
 3007              		.cfi_remember_state
 3008              		.cfi_def_cfa_offset 4
 3009              		@ sp needed	@
 3010 0e68 04F09DE4 		ldr	pc, [sp], #4	@
 3011              	.LVL172:
 3012              	.L166:
 3013              		.cfi_restore_state
 540:armwave.c     ****         Py_RETURN_FALSE;
 3014              		.loc 1 540 9 is_stmt 1 view .LVU795
 3015 0e6c 20009FE5 		ldr	r0, .L167+4	@,
 3016              	.LVL173:
 540:armwave.c     ****         Py_RETURN_FALSE;
 3017              		.loc 1 540 9 is_stmt 0 view .LVU796
 3018 0e70 FEFFFFEB 		bl	puts		@
 3019              	.LVL174:
 541:armwave.c     ****     }
 3020              		.loc 1 541 9 is_stmt 1 view .LVU797
 3021              	.LBB43:
 3022              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 3023              		.loc 2 456 20 view .LVU798
 3024              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3025              		.loc 2 458 21 view .LVU799
 3026              		.loc 2 459 5 view .LVU800
 3027              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3028              		.loc 2 459 18 is_stmt 0 view .LVU801
 3029 0e74 1C309FE5 		ldr	r3, .L167+8	@ tmp120,
 3030              	.LBE44:
 3031              	.LBE43:
 3032              	@ armwave.c:541:         Py_RETURN_FALSE;
 541:armwave.c     ****     }
 3033              		.loc 1 541 9 view .LVU802
 3034 0e78 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3035              	.LBB46:
 3036              	.LBB45:
 3037              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3038              		.loc 2 459 18 view .LVU803
 3039 0e7c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3040 0e80 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3041 0e84 002083E5 		str	r2, [r3]	@ tmp122,
 3042              	.LBE45:
 3043              	.LBE46:
 3044              	@ armwave.c:553: }
 3045              		.loc 1 553 1 view .LVU804
 3046 0e88 34D08DE2 		add	sp, sp, #52	@,,
 3047              		.cfi_def_cfa_offset 4
 3048              		@ sp needed	@
 3049 0e8c 04F09DE4 		ldr	pc, [sp], #4	@
 3050              	.L168:
 3051              		.align	2
 3052              	.L167:
 3053 0e90 00000000 		.word	_Py_TrueStruct
 3054 0e94 3C020000 		.word	.LC19
 3055 0e98 00000000 		.word	_Py_FalseStruct
 3056              		.cfi_endproc
 3057              	.LFE74:
 3059              		.align	2
 3060              		.global	armwave_test_create_am_sine
 3061              		.syntax unified
 3062              		.arm
 3063              		.fpu vfp
 3065              	armwave_test_create_am_sine:
 3066              	.LVL175:
 3067              	.LFB75:
 554:armwave.c     **** 
 555:armwave.c     **** /*
 556:armwave.c     ****  * Make a test AM waveform for render tests.
 557:armwave.c     ****  *
 558:armwave.c     ****  * @param   mod                     modulation depth
 559:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 560:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 561:armwave.c     ****  */
 562:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 563:armwave.c     **** {
 3068              		.loc 1 563 1 is_stmt 1 view -0
 3069              		.cfi_startproc
 3070              		@ args = 0, pretend = 0, frame = 8
 3071              		@ frame_needed = 0, uses_anonymous_args = 0
 564:armwave.c     ****     float v, noise, xnoise, mod_val;
 3072              		.loc 1 564 5 view .LVU806
 565:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3073              		.loc 1 565 5 view .LVU807
 3074              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3075              		.loc 1 563 1 is_stmt 0 view .LVU808
 3076 0e9c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3077              		.cfi_def_cfa_offset 32
 3078              		.cfi_offset 4, -32
 3079              		.cfi_offset 5, -28
 3080              		.cfi_offset 6, -24
 3081              		.cfi_offset 7, -20
 3082              		.cfi_offset 8, -16
 3083              		.cfi_offset 9, -12
 3084              		.cfi_offset 10, -8
 3085              		.cfi_offset 14, -4
 3086              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3087              		.loc 1 565 38 view .LVU809
 3088 0ea0 7A7A9FED 		vldr.32	s14, .L200	@ tmp180,
 3089              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3090              		.loc 1 565 55 view .LVU810
 3091 0ea4 00529FE5 		ldr	r5, .L200+28	@ tmp250,
 3092              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3093              		.loc 1 563 1 view .LVU811
 3094 0ea8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3095              		.cfi_def_cfa_offset 80
 3096              		.cfi_offset 80, -80
 3097              		.cfi_offset 81, -76
 3098              		.cfi_offset 82, -72
 3099              		.cfi_offset 83, -68
 3100              		.cfi_offset 84, -64
 3101              		.cfi_offset 85, -60
 3102              		.cfi_offset 86, -56
 3103              		.cfi_offset 87, -52
 3104              		.cfi_offset 88, -48
 3105              		.cfi_offset 89, -44
 3106              		.cfi_offset 90, -40
 3107              		.cfi_offset 91, -36
 3108 0eac 0090A0E1 		mov	r9, r0	@ sets, sets
 3109              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3110              		.loc 1 565 38 view .LVU812
 3111 0eb0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3112              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 566:armwave.c     ****     int s, set_offset = 0;
 567:armwave.c     ****     int w, x;
 568:armwave.c     **** 
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3113              		.loc 1 569 70 view .LVU813
 3114 0eb4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3115 0eb8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3116              	.LBB49:
 3117              	.LBB50:
 3118              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3119              		.loc 1 512 23 view .LVU814
 3120 0ebc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3121              	.LVL176:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3122              		.loc 1 512 23 view .LVU815
 3123              	.LBE50:
 3124              	.LBE49:
 3125              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3126              		.loc 1 565 38 view .LVU816
 3127 0ec0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3128              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3129              		.loc 1 569 70 view .LVU817
 3130 0ec4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3131              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3132              		.loc 1 563 1 view .LVU818
 3133 0ec8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3134              	.LBB54:
 3135              	.LBB51:
 3136              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3137              		.loc 1 512 7 view .LVU819
 3138 0ecc 000050E3 		cmp	r0, #0	@ _82,
 3139              	.LBE51:
 3140              	.LBE54:
 3141              	@ armwave.c:563: {
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 3142              		.loc 1 563 1 view .LVU820
 3143 0ed0 08D04DE2 		sub	sp, sp, #8	@,,
 3144              		.cfi_def_cfa_offset 88
 3145              	@ armwave.c:570:     g_armwave_state.test_wave_buffer_nsets = sets;
 570:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3146              		.loc 1 570 44 view .LVU821
 3147 0ed4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3148              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3149              		.loc 1 569 45 view .LVU822
 3150 0ed8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3151              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3152              		.loc 1 565 38 view .LVU823
 3153 0edc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3154              	@ armwave.c:565:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 565:armwave.c     ****     int s, set_offset = 0;
 3155              		.loc 1 565 11 view .LVU824
 3156 0ee0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3157              	.LVL177:
 566:armwave.c     ****     int w, x;
 3158              		.loc 1 566 5 is_stmt 1 view .LVU825
 567:armwave.c     **** 
 3159              		.loc 1 567 5 view .LVU826
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3160              		.loc 1 569 5 view .LVU827
 3161              		.loc 1 570 5 view .LVU828
 571:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3162              		.loc 1 571 5 view .LVU829
 3163              	.LBB55:
 3164              	.LBI49:
 510:armwave.c     **** {
 3165              		.loc 1 510 6 view .LVU830
 3166              	.LBB52:
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3167              		.loc 1 512 5 view .LVU831
 3168              	@ armwave.c:512:     if(g_armwave_state.test_wave_buffer != NULL) {
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3169              		.loc 1 512 7 is_stmt 0 view .LVU832
 3170 0ee4 0000000A 		beq	.L170		@,
 513:armwave.c     ****     }
 3171              		.loc 1 513 9 is_stmt 1 view .LVU833
 3172 0ee8 FEFFFFEB 		bl	free		@
 3173              	.LVL178:
 3174              	.L170:
 518:armwave.c     **** 
 3175              		.loc 1 518 5 view .LVU834
 3176              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3177              		.loc 1 518 75 is_stmt 0 view .LVU835
 3178 0eec 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3179 0ef0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3180              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3181              		.loc 1 518 40 view .LVU836
 3182 0ef4 0910A0E1 		mov	r1, r9	@, sets
 3183              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3184              		.loc 1 518 75 view .LVU837
 3185 0ef8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3186              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3187              		.loc 1 518 40 view .LVU838
 3188 0efc 0400A0E1 		mov	r0, r4	@, _85
 3189 0f00 FEFFFFEB 		bl	calloc		@
 3190              	.LVL179:
 3191              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3192              		.loc 1 520 7 view .LVU839
 3193 0f04 000050E3 		cmp	r0, #0	@ tmp191,
 3194              	@ armwave.c:518:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 518:armwave.c     **** 
 3195              		.loc 1 518 38 view .LVU840
 3196 0f08 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3197              		.loc 1 520 5 is_stmt 1 view .LVU841
 3198              	@ armwave.c:520:     if(g_armwave_state.test_wave_buffer == NULL) {
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3199              		.loc 1 520 7 is_stmt 0 view .LVU842
 3200 0f0c 5A00000A 		beq	.L199		@,
 3201              	.L171:
 3202              	.LVL180:
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3203              		.loc 1 520 7 view .LVU843
 3204              	.LBE52:
 3205              	.LBE55:
 3206              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 572:armwave.c     **** 
 573:armwave.c     ****     for(s = 0; s < sets; s++) {
 3207              		.loc 1 573 5 discriminator 1 view .LVU844
 3208 0f10 000059E3 		cmp	r9, #0	@ sets,
 3209 0f14 550000DA 		ble	.L169		@,
 3210              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 575:armwave.c     ****     
 576:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 577:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 578:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 579:armwave.c     **** 
 580:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 581:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 584:armwave.c     ****                 noise *= noise;
 585:armwave.c     **** 
 586:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 587:armwave.c     ****                     noise = -noise;
 588:armwave.c     **** 
 589:armwave.c     ****                 noise += 1.0f;
 590:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 591:armwave.c     **** 
 592:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3211              		.loc 1 592 45 view .LVU845
 3212 0f18 5C8A9FED 		vldr.32	s16, .L200	@ tmp258,
 3213              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 593:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 594:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 595:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3214              		.loc 1 595 104 view .LVU846
 3215 0f1c 5CCA9FED 		vldr.32	s24, .L200+4	@ tmp259,
 3216              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3217              		.loc 1 573 5 view .LVU847
 3218 0f20 0070A0E3 		mov	r7, #0	@ set_offset,
 3219              	@ armwave.c:574:         printf("Calculating test set %d\n", s);
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3220              		.loc 1 574 9 view .LVU848
 3221 0f24 84A19FE5 		ldr	r10, .L200+32	@ tmp257,
 3222              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3223              		.loc 1 573 5 view .LVU849
 3224 0f28 0780A0E1 		mov	r8, r7	@ s, set_offset
 3225              	.LVL181:
 3226              	.L172:
 574:armwave.c     ****         printf("Calculating test set %d\n", s);
 3227              		.loc 1 574 9 is_stmt 1 view .LVU850
 3228 0f2c 0810A0E1 		mov	r1, r8	@, s
 3229 0f30 0A00A0E1 		mov	r0, r10	@, tmp257
 3230 0f34 FEFFFFEB 		bl	printf		@
 3231              	.LVL182:
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3232              		.loc 1 576 9 view .LVU851
 3233              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3234              		.loc 1 576 39 is_stmt 0 view .LVU852
 3235 0f38 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3236              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3237              		.loc 1 576 9 view .LVU853
 3238 0f3c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3239 0f40 450000DA 		ble	.L173		@,
 3240              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3241              		.loc 1 578 21 view .LVU854
 3242 0f44 53CADFED 		vldr.32	s25, .L200+8	@ tmp200,
 3243              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3244              		.loc 1 592 33 view .LVU855
 3245 0f48 53BA9FED 		vldr.32	s22, .L200+12	@ tmp253,
 3246              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3247              		.loc 1 590 24 view .LVU856
 3248 0f4c 53AADFED 		vldr.32	s21, .L200+16	@ tmp254,
 3249 0f50 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3250              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3251              		.loc 1 576 15 view .LVU857
 3252 0f54 0060A0E3 		mov	r6, #0	@ w,
 3253              	.LVL183:
 3254              	.L180:
 578:armwave.c     **** 
 3255              		.loc 1 578 13 is_stmt 1 view .LVU858
 3256              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3257              		.loc 1 578 21 is_stmt 0 view .LVU859
 3258 0f58 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3259 0f5c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3260              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3261              		.loc 1 580 13 view .LVU860
 3262 0f60 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3263              	@ armwave.c:578:             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 3264              		.loc 1 578 21 view .LVU861
 3265 0f64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3266 0f68 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3267              	.LVL184:
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3268              		.loc 1 580 13 is_stmt 1 view .LVU862
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3269              		.loc 1 580 13 is_stmt 0 view .LVU863
 3270 0f6c 370000DA 		ble	.L174		@,
 3271 0f70 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3272              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3273              		.loc 1 595 113 view .LVU864
 3274 0f74 4AAA9FED 		vldr.32	s20, .L200+20	@ tmp229,
 3275 0f78 4A8ADFED 		vldr.32	s17, .L200+24	@ tmp230,
 3276              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3277              		.loc 1 580 19 view .LVU865
 3278 0f7c 0040A0E3 		mov	r4, #0	@ x,
 3279              	.LVL185:
 3280              	.L179:
 581:armwave.c     ****                 noise *= noise;
 3281              		.loc 1 581 17 is_stmt 1 view .LVU866
 3282              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3283              		.loc 1 581 28 is_stmt 0 view .LVU867
 3284 0f80 FEFFFFEB 		bl	rand		@
 3285              	.LVL186:
 3286              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3287              		.loc 1 581 35 view .LVU868
 3288 0f84 7000FFE6 		uxth	r0, r0	@ tmp201,
 3289              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3290              		.loc 1 581 45 view .LVU869
 3291 0f88 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3292 0f8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3293              	@ armwave.c:581:                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 3294              		.loc 1 581 24 view .LVU870
 3295 0f90 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3296              	.LVL187:
 582:armwave.c     ****                 noise *= noise;
 3297              		.loc 1 582 17 is_stmt 1 view .LVU871
 3298              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 3299              		.loc 1 582 23 is_stmt 0 view .LVU872
 3300 0f94 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3301              	.LVL188:
 583:armwave.c     ****                 noise *= noise;
 3302              		.loc 1 583 17 is_stmt 1 view .LVU873
 3303              	@ armwave.c:583:                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 3304              		.loc 1 583 23 is_stmt 0 view .LVU874
 3305 0f98 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3306              	.LVL189:
 584:armwave.c     **** 
 3307              		.loc 1 584 17 is_stmt 1 view .LVU875
 3308              	@ armwave.c:584:                 noise *= noise;
 584:armwave.c     **** 
 3309              		.loc 1 584 23 is_stmt 0 view .LVU876
 3310 0f9c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3311              	.LVL190:
 586:armwave.c     ****                     noise = -noise;
 3312              		.loc 1 586 17 is_stmt 1 view .LVU877
 3313              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3314              		.loc 1 586 21 is_stmt 0 view .LVU878
 3315 0fa0 FEFFFFEB 		bl	rand		@
 3316              	.LVL191:
 587:armwave.c     **** 
 3317              		.loc 1 587 21 is_stmt 1 view .LVU879
 3318              	@ armwave.c:586:                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 3319              		.loc 1 586 19 is_stmt 0 view .LVU880
 3320 0fa4 020910E3 		tst	r0, #32768	@,
 3321              	@ armwave.c:587:                     noise = -noise;
 587:armwave.c     **** 
 3322              		.loc 1 587 27 view .LVU881
 3323 0fa8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3324              	.LVL192:
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3325              		.loc 1 589 17 is_stmt 1 view .LVU882
 590:armwave.c     **** 
 3326              		.loc 1 590 17 view .LVU883
 3327              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3328              		.loc 1 590 27 is_stmt 0 view .LVU884
 3329 0fac FEFFFFEB 		bl	rand		@
 3330              	.LVL193:
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3331              		.loc 1 592 17 is_stmt 1 view .LVU885
 3332              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3333              		.loc 1 592 45 is_stmt 0 view .LVU886
 3334 0fb0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3335              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3336              		.loc 1 592 33 view .LVU887
 3337 0fb4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3338              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3339              		.loc 1 592 45 view .LVU888
 3340 0fb8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3341              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3342              		.loc 1 592 33 view .LVU889
 3343 0fbc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3344              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3345              		.loc 1 592 45 view .LVU890
 3346 0fc0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3347              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3348              		.loc 1 592 33 view .LVU891
 3349 0fc4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3350              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3351              		.loc 1 590 34 view .LVU892
 3352 0fc8 7000FFE6 		uxth	r0, r0	@ tmp214,
 3353              	.LVL194:
 3354              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3355              		.loc 1 590 44 view .LVU893
 3356 0fcc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3357 0fd0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3358              	@ armwave.c:590:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 3359              		.loc 1 590 24 view .LVU894
 3360 0fd4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3361              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3362              		.loc 1 592 77 view .LVU895
 3363 0fd8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3364              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3365              		.loc 1 592 22 view .LVU896
 3366 0fdc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3367 0fe0 FEFFFFEB 		bl	sin		@
 3368              	.LVL195:
 3369              		.loc 1 595 17 is_stmt 1 view .LVU897
 3370              	@ armwave.c:589:                 noise += 1.0f;
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3371              		.loc 1 589 23 is_stmt 0 view .LVU898
 3372 0fe4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3373              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3374              		.loc 1 595 104 view .LVU899
 3375 0fe8 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3376              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3377              		.loc 1 592 98 view .LVU900
 3378 0fec E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3379              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3380              		.loc 1 592 87 view .LVU901
 3381 0ff0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3382              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3383              		.loc 1 592 98 view .LVU902
 3384 0ff4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3385              	@ armwave.c:592:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3386              		.loc 1 592 19 view .LVU903
 3387 0ff8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3388              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3389              		.loc 1 595 113 view .LVU904
 3390 0ffc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3391 1000 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3392 1004 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3393 1008 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3394 100c 050000DA 		ble	.L176		@,
 3395              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3396              		.loc 1 595 104 discriminator 1 view .LVU905
 3397 1010 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3398 1014 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3399 1018 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3400 101c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3401 1020 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3402 1024 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3403              	.L176:
 3404              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3405              		.loc 1 595 57 discriminator 12 view .LVU906
 3406 1028 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3407              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3408              		.loc 1 595 102 discriminator 12 view .LVU907
 3409 102c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3410 1030 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3411 1034 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3412              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3413              		.loc 1 580 58 discriminator 12 view .LVU908
 3414 1038 014084E2 		add	r4, r4, #1	@ x, x,
 3415              	.LVL196:
 3416              	@ armwave.c:595:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3417              		.loc 1 595 102 discriminator 12 view .LVU909
 3418 103c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3419              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3420              		.loc 1 580 43 discriminator 12 view .LVU910
 3421 1040 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3422              	@ armwave.c:580:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3423              		.loc 1 580 13 discriminator 12 view .LVU911
 3424 1044 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3425 1048 CCFFFFCA 		bgt	.L179		@,
 3426 104c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3427              	.LVL197:
 3428              	.L174:
 3429              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3430              		.loc 1 576 48 discriminator 2 view .LVU912
 3431 1050 016086E2 		add	r6, r6, #1	@ w, w,
 3432              	.LVL198:
 3433              	@ armwave.c:576:         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3434              		.loc 1 576 9 discriminator 2 view .LVU913
 3435 1054 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3436 1058 BEFFFFBA 		blt	.L180		@,
 3437              	.LVL199:
 3438              	.L173:
 596:armwave.c     ****             }
 597:armwave.c     ****         }
 598:armwave.c     **** 
 599:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3439              		.loc 1 599 9 is_stmt 1 discriminator 2 view .LVU914
 3440              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3441              		.loc 1 599 46 is_stmt 0 discriminator 2 view .LVU915
 3442 105c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3443              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3444              		.loc 1 573 27 discriminator 2 view .LVU916
 3445 1060 018088E2 		add	r8, r8, #1	@ s, s,
 3446              	.LVL200:
 3447              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3448              		.loc 1 573 5 discriminator 2 view .LVU917
 3449 1064 080059E1 		cmp	r9, r8	@ sets, s
 3450              	@ armwave.c:599:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3451              		.loc 1 599 20 discriminator 2 view .LVU918
 3452 1068 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3453              	.LVL201:
 3454              	@ armwave.c:573:     for(s = 0; s < sets; s++) {
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3455              		.loc 1 573 5 discriminator 2 view .LVU919
 3456 106c AEFFFF1A 		bne	.L172		@,
 3457              	.LVL202:
 3458              	.L169:
 3459              	@ armwave.c:601: }
 600:armwave.c     ****     }
 601:armwave.c     **** }
 3460              		.loc 1 601 1 view .LVU920
 3461 1070 08D08DE2 		add	sp, sp, #8	@,,
 3462              		.cfi_remember_state
 3463              		.cfi_def_cfa_offset 80
 3464              		@ sp needed	@
 3465 1074 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3466              		.cfi_restore 90
 3467              		.cfi_restore 91
 3468              		.cfi_restore 88
 3469              		.cfi_restore 89
 3470              		.cfi_restore 86
 3471              		.cfi_restore 87
 3472              		.cfi_restore 84
 3473              		.cfi_restore 85
 3474              		.cfi_restore 82
 3475              		.cfi_restore 83
 3476              		.cfi_restore 80
 3477              		.cfi_restore 81
 3478              		.cfi_def_cfa_offset 32
 3479              	.LVL203:
 3480              		.loc 1 601 1 view .LVU921
 3481 1078 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3482              	.LVL204:
 3483              	.L199:
 3484              		.cfi_restore_state
 3485              	.LBB56:
 3486              	.LBB53:
 521:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3487              		.loc 1 521 9 is_stmt 1 view .LVU922
 3488 107c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3489 1080 0920A0E1 		mov	r2, r9	@, sets
 3490 1084 28009FE5 		ldr	r0, .L200+36	@,
 3491 1088 FEFFFFEB 		bl	printf		@
 3492              	.LVL205:
 523:armwave.c     ****     }
 3493              		.loc 1 523 9 view .LVU923
 3494 108c 9FFFFFEA 		b	.L171		@
 3495              	.L201:
 3496              		.align	2
 3497              	.L200:
 3498 1090 0000803F 		.word	1065353216
 3499 1094 00007F43 		.word	1132396544
 3500 1098 0000003F 		.word	1056964608
 3501 109c C3F5C840 		.word	1086911939
 3502 10a0 38FFC74A 		.word	1254620984
 3503 10a4 0000FE42 		.word	1123942400
 3504 10a8 00000043 		.word	1124073472
 3505 10ac 00000000 		.word	g_armwave_state
 3506 10b0 90020000 		.word	.LC20
 3507 10b4 E8010000 		.word	.LC18
 3508              	.LBE53:
 3509              	.LBE56:
 3510              		.cfi_endproc
 3511              	.LFE75:
 3513              		.align	2
 3514              		.global	armwave_cleanup
 3515              		.syntax unified
 3516              		.arm
 3517              		.fpu vfp
 3519              	armwave_cleanup:
 3520              	.LFB76:
 602:armwave.c     **** 
 603:armwave.c     **** /*
 604:armwave.c     ****  * Make a test square waveform.
 605:armwave.c     ****  *
 606:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 607:armwave.c     ****  */
 608:armwave.c     **** #if 0
 609:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 610:armwave.c     **** {
 611:armwave.c     ****     uint8_t v;
 612:armwave.c     ****     float noise, xnoise;
 613:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 614:armwave.c     ****     int w, x;
 615:armwave.c     **** 
 616:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 617:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 618:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     ****             noise *= noise;
 621:armwave.c     ****             noise *= noise;
 622:armwave.c     **** 
 623:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 624:armwave.c     ****                 noise = -noise;
 625:armwave.c     **** 
 626:armwave.c     ****             //noise += 1.0f;
 627:armwave.c     **** 
 628:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 629:armwave.c     ****                 new_level = 0.2f;
 630:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 631:armwave.c     ****                 new_level = 0.8f;
 632:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 633:armwave.c     ****                 new_level = 0.2f;
 634:armwave.c     ****             } else {
 635:armwave.c     ****                 new_level = 0.8f;
 636:armwave.c     ****             }
 637:armwave.c     **** 
 638:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 639:armwave.c     **** 
 640:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 641:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 642:armwave.c     ****         }
 643:armwave.c     ****     }
 644:armwave.c     **** }
 645:armwave.c     **** #endif
 646:armwave.c     **** 
 647:armwave.c     **** /*
 648:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 649:armwave.c     ****  */
 650:armwave.c     **** void armwave_cleanup()
 651:armwave.c     **** {
 3521              		.loc 1 651 1 view -0
 3522              		.cfi_startproc
 3523              		@ args = 0, pretend = 0, frame = 0
 3524              		@ frame_needed = 0, uses_anonymous_args = 0
 652:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3525              		.loc 1 652 5 view .LVU925
 3526              	@ armwave.c:651: {
 651:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3527              		.loc 1 651 1 is_stmt 0 view .LVU926
 3528 10b8 10402DE9 		push	{r4, lr}	@
 3529              		.cfi_def_cfa_offset 8
 3530              		.cfi_offset 4, -8
 3531              		.cfi_offset 14, -4
 3532              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3533              		.loc 1 652 25 view .LVU927
 3534 10bc 34409FE5 		ldr	r4, .L204	@ tmp114,
 3535              	@ armwave.c:652:     free(g_armwave_state.out_pixbuf);
 3536              		.loc 1 652 5 view .LVU928
 3537 10c0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3538 10c4 FEFFFFEB 		bl	free		@
 3539              	.LVL206:
 653:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3540              		.loc 1 653 5 is_stmt 1 view .LVU929
 3541 10c8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3542 10cc FEFFFFEB 		bl	free		@
 3543              	.LVL207:
 654:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3544              		.loc 1 654 5 view .LVU930
 3545 10d0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3546 10d4 FEFFFFEB 		bl	free		@
 3547              	.LVL208:
 655:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3548              		.loc 1 655 5 view .LVU931
 3549 10d8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3550 10dc FEFFFFEB 		bl	free		@
 3551              	.LVL209:
 656:armwave.c     **** 
 657:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3552              		.loc 1 657 5 view .LVU932
 3553              	@ armwave.c:657:     g_armwave_state.out_pixbuf = NULL;
 3554              		.loc 1 657 32 is_stmt 0 view .LVU933
 3555 10e0 0030A0E3 		mov	r3, #0	@ tmp123,
 3556 10e4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 658:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3557              		.loc 1 658 5 is_stmt 1 view .LVU934
 3558              	@ armwave.c:658:     g_armwave_state.ch1_buffer = NULL;
 3559              		.loc 1 658 32 is_stmt 0 view .LVU935
 3560 10e8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 659:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3561              		.loc 1 659 5 is_stmt 1 view .LVU936
 3562              	@ armwave.c:659:     g_armwave_state.xcoord_to_xpixel = NULL;
 3563              		.loc 1 659 38 is_stmt 0 view .LVU937
 3564 10ec 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 660:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3565              		.loc 1 660 5 is_stmt 1 view .LVU938
 3566              	@ armwave.c:660:     g_armwave_state.test_wave_buffer = NULL;
 3567              		.loc 1 660 38 is_stmt 0 view .LVU939
 3568 10f0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3569              	@ armwave.c:661: }
 661:armwave.c     **** }
 3570              		.loc 1 661 1 view .LVU940
 3571 10f4 1080BDE8 		pop	{r4, pc}	@
 3572              	.L205:
 3573              		.align	2
 3574              	.L204:
 3575 10f8 00000000 		.word	g_armwave_state
 3576              		.cfi_endproc
 3577              	.LFE76:
 3579              		.comm	gamma_table,256,4
 3580              		.comm	g_armwave_state,136,4
 3581              		.section	.rodata
 3582              		.align	2
 3583              		.set	.LANCHOR0,. + 0
 3586              	__PRETTY_FUNCTION__.17096:
 3587 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3587      6176655F 
 3587      66696C6C 
 3587      5F706978 
 3587      6275665F 
 3588 001b 00       		.space	1
 3591              	__PRETTY_FUNCTION__.17120:
 3592 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3592      6176655F 
 3592      73657475 
 3592      705F7265 
 3592      6E646572 
 3593 0031 000000   		.space	3
 3596              	__PRETTY_FUNCTION__.17127:
 3597 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3597      6176655F 
 3597      7365745F 
 3597      77617665 
 3597      5F706F69 
 3598 004d 000000   		.space	3
 3601              	__PRETTY_FUNCTION__.17134:
 3602 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3602      6176655F 
 3602      7365745F 
 3602      77617665 
 3602      5F706F69 
 3603              		.section	.rodata.str1.4,"aMS",%progbits,1
 3604              		.align	2
 3605              	.LC0:
 3606 0000 76302E30 		.ascii	"v0.0.1\000"
 3606      2E3100
 3607 0007 00       		.space	1
 3608              	.LC1:
 3609 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3609      61766520 
 3609      76657273 
 3609      696F6E3A 
 3609      2025730A 
 3610 001d 000000   		.space	3
 3611              	.LC2:
 3612 0020 61726D77 		.ascii	"armwave.c\000"
 3612      6176652E 
 3612      6300
 3613 002a 0000     		.space	2
 3614              	.LC3:
 3615 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3615      62756666 
 3615      65722021 
 3615      3D204E55 
 3615      4C4C00
 3616 003f 00       		.space	1
 3617              	.LC4:
 3618 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3618      20653D25 
 3618      6420773D 
 3618      25642077 
 3618      733D2564 
 3619              	.LC5:
 3620 006c 73746172 		.ascii	"start_point < end_point\000"
 3620      745F706F 
 3620      696E7420 
 3620      3C20656E 
 3620      645F706F 
 3621              	.LC6:
 3622 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3622      7566665F 
 3622      73697A65 
 3622      3D25642C 
 3622      20636D70 
 3623 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3623      5F776964 
 3623      74683D25 
 3623      642C2077 
 3623      6176655F 
 3624 00e1 000000   		.space	3
 3625              	.LC7:
 3626 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3626      6D776176 
 3626      655F7374 
 3626      6174652E 
 3626      6368315F 
 3627 0107 00       		.space	1
 3628              	.LC8:
 3629 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3629      6D776176 
 3629      655F7374 
 3629      6174652E 
 3629      78636F6F 
 3630 0131 000000   		.space	3
 3631              	.LC9:
 3632 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3632      3A203078 
 3632      25303878 
 3632      20307825 
 3632      30387820 
 3633              	.LC10:
 3634 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3634      5F627566 
 3634      66657220 
 3634      213D204E 
 3634      554C4C00 
 3635              	.LC11:
 3636 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3636      6176655F 
 3636      7365745F 
 3636      77617665 
 3636      5F706F69 
 3637 019f 78636565 		.ascii	"xceeded\000"
 3637      64656400 
 3638 01a7 00       		.space	1
 3639              	.LC12:
 3640 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3640      5F627566 
 3640      6665725F 
 3640      70747220 
 3640      213D2030 
 3641 01bd 000000   		.space	3
 3642              	.LC13:
 3643 01c0 776200   		.ascii	"wb\000"
 3644 01c3 00       		.space	1
 3645              	.LC14:
 3646 01c4 50330A00 		.ascii	"P3\012\000"
 3647              	.LC15:
 3648 01c8 25642025 		.ascii	"%d %d\012\000"
 3648      640A00
 3649 01cf 00       		.space	1
 3650              	.LC16:
 3651 01d0 3235350A 		.ascii	"255\012\000"
 3651      00
 3652 01d5 000000   		.space	3
 3653              	.LC17:
 3654 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3654      25336420 
 3654      2533640A 
 3654      00
 3655 01e5 000000   		.space	3
 3656              	.LC18:
 3657 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3657      6176655F 
 3657      74657374 
 3657      5F627566 
 3657      6665725F 
 3658 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3658      20627566 
 3658      66657220 
 3658      28256420 
 3658      62797465 
 3659              	.LC19:
 3660 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3660      6176655F 
 3660      66696C6C 
 3660      5F706978 
 3660      6275665F 
 3661 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3661      20666169 
 3661      6C65642C 
 3661      20726574 
 3661      75726E69 
 3662 028e 0000     		.space	2
 3663              	.LC20:
 3664 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3664      756C6174 
 3664      696E6720 
 3664      74657374 
 3664      20736574 
 3665              		.text
 3666              	.Letext0:
 3667              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3668              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3669              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3670              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3671              		.file 7 "/usr/include/stdio.h"
 3672              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3673              		.file 9 "/usr/include/errno.h"
 3674              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3675              		.file 11 "/usr/include/unistd.h"
 3676              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3677              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3678              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3679              		.file 15 "/usr/include/math.h"
 3680              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3681              		.file 17 "/usr/include/time.h"
 3682              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3683              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3684              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3685              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3686              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3687              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3688              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3689              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3690              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3691              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3692              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3693              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3694              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3695              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3696              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3697              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3698              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3699              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3700              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3701              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3702              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3703              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3704              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3705              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3706              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3707              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3708              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3709              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3710              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3711              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3712              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3713              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3714              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3715              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3716              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3717              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3718              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3719              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3720              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3721              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3722              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3723              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3724              		.file 60 "/usr/local/include/python3.8/context.h"
 3725              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3726              		.file 62 "/usr/local/include/python3.8/code.h"
 3727              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3728              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3729              		.file 65 "/usr/local/include/python3.8/import.h"
 3730              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3731              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3732              		.file 68 "/usr/include/malloc.h"
 3733              		.file 69 "armwave.h"
 3734              		.file 70 "/usr/include/stdlib.h"
 3735              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3736              		.file 72 "<built-in>"
 3737              		.file 73 "/usr/include/assert.h"
 3738              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
