   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** #define TEST_WAVE_SIZE              2048
  27:armwave.c     **** 
  28:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  29:armwave.c     **** 
  30:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  31:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  32:armwave.c     **** 
  33:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  34:armwave.c     **** 
  35:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  36:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  37:armwave.c     **** 
  38:armwave.c     **** struct armwave_state_t g_armwave_state;
  39:armwave.c     **** 
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     **** 
  81:armwave.c     ****     //printf("ch1_buffer=0x%08x\n", g_armwave_state.ch1_buffer);
  82:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 82 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 14D04DE2 		sub	sp, sp, #20	@,,
 249              		.cfi_def_cfa_offset 56
 250              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 251              		.loc 1 82 40 view .LVU32
 252 00a4 64719FE5 		ldr	r7, .L27	@ tmp285,
 253              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 254              		.loc 1 74 1 view .LVU33
 255 00a8 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 256              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 257              		.loc 1 82 63 view .LVU34
 258 00ac 3C8097E5 		ldr	r8, [r7, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  83:armwave.c     **** 
  84:armwave.c     ****     // roll through each waveform
  85:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 85 5 view .LVU35
 261 00b0 343097E5 		ldr	r3, [r7, #52]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 263              		.loc 1 82 40 view .LVU36
 264 00b4 042097E5 		ldr	r2, [r7, #4]	@ _1, g_armwave_state.ch1_buffer
 265              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 85 5 view .LVU37
 267 00b8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 269              		.loc 1 82 63 view .LVU38
 270 00bc 980008E0 		mul	r8, r8, r0	@ _4, g_armwave_state.bitdepth_height, slice_y
 271              	.LVL7:
 272              		.loc 1 85 5 is_stmt 1 view .LVU39
 273              		.loc 1 85 5 is_stmt 0 view .LVU40
 274 00c0 500000DA 		ble	.L11		@,
 275 00c4 000051E3 		cmp	r1, #0	@ height,
 276 00c8 4E00000A 		beq	.L11		@,
 277 00cc 043040E2 		sub	r3, r0, #4	@ tmp286, slice_y,
 278 00d0 0C308DE5 		str	r3, [sp, #12]	@ tmp286, %sfp
 279              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
 280              		.loc 1 85 11 view .LVU41
 281 00d4 0030A0E3 		mov	r3, #0	@ w,
 282 00d8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 283              	.LVL8:
 284              	.L18:
  86:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
  87:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 285              		.loc 1 87 9 is_stmt 1 view .LVU42
  88:armwave.c     **** 
  89:armwave.c     ****         // roll through y and render the slice into the out buffer
  90:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  91:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 286              		.loc 1 91 9 view .LVU43
 287              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 288              		.loc 1 87 64 is_stmt 0 view .LVU44
 289 00dc 303097E5 		ldr	r3, [r7, #48]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 290 00e0 08009DE5 		ldr	r0, [sp, #8]	@ w, %sfp
 291 00e4 0CC09DE5 		ldr	ip, [sp, #12]	@ tmp286, %sfp
 292 00e8 149097E5 		ldr	r9, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 293 00ec 93C023E0 		mla	r3, r3, r0, ip	@ tmp212, g_armwave_state.wave_stride, w, tmp286
 294              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
 295              		.loc 1 91 16 view .LVU45
 296 00f0 0010A0E3 		mov	r1, #0	@ yy,
 297 00f4 039089E0 		add	r9, r9, r3	@ ivtmp.41, g_armwave_state.wave_buffer, tmp212
 298              	.LVL9:
 299              	.L17:
  92:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 300              		.loc 1 92 13 is_stmt 1 view .LVU46
  93:armwave.c     **** 
  94:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  95:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  96:armwave.c     ****                 scale_value = (word & 0xff);
  97:armwave.c     ****                 
  98:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  99:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
 100:armwave.c     ****                     continue;
 101:armwave.c     **** 
 102:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 102 17 view .LVU47
 103:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 302              		.loc 1 103 17 view .LVU48
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 303              		.loc 1 102 17 view .LVU49
 304              		.loc 1 103 17 view .LVU50
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 102 17 view .LVU51
 306              		.loc 1 103 17 view .LVU52
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 307              		.loc 1 102 17 view .LVU53
 308              		.loc 1 103 17 view .LVU54
 309              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 310              		.loc 1 92 18 is_stmt 0 view .LVU55
 311 00f8 0430B9E5 		ldr	r3, [r9, #4]!	@ word, MEM[base: _160, offset: 0B]
 312              	.LVL10:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 313              		.loc 1 94 13 is_stmt 1 view .LVU56
  96:armwave.c     ****                 
 314              		.loc 1 96 17 view .LVU57
  99:armwave.c     ****                     continue;
 315              		.loc 1 99 17 view .LVU58
 316              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 317              		.loc 1 102 63 is_stmt 0 view .LVU59
 318 00fc 01A081E2 		add	r10, r1, #1	@ tmp239, yy,
 319              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 320              		.loc 1 99 20 view .LVU60
 321 0100 FFB013E2 		ands	fp, r3, #255	@ scale_value, word,
 322 0104 0160A003 		moveq	r6, #1	@ tmp215,
 323 0108 0060A013 		movne	r6, #0	@ tmp215,
 324              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 325              		.loc 1 99 19 view .LVU61
 326 010c FF005BE3 		cmp	fp, #255	@ scale_value,
 327 0110 01608603 		orreq	r6, r6, #1	@,, tmp220, tmp215
 328 0114 000056E3 		cmp	r6, #0	@ tmp220,
 329              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 102 63 view .LVU62
 331 0118 024081E2 		add	r4, r1, #2	@ tmp257, yy,
 332 011c 03E081E2 		add	lr, r1, #3	@ tmp273, yy,
 333              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 103 47 view .LVU63
 335 0120 08508BE0 		add	r5, fp, r8	@ tmp224, scale_value, _4
 336              	@ armwave.c:104:                 word >>= 8;
 104:armwave.c     ****                 word >>= 8;
 337              		.loc 1 104 22 view .LVU64
 338 0124 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 339 0128 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 340              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 341              		.loc 1 99 19 view .LVU65
 342 012c 2B00001A 		bne	.L20		@,
 343              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 344              		.loc 1 102 63 view .LVU66
 345 0130 3C6097E5 		ldr	r6, [r7, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 346              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 347              		.loc 1 99 20 view .LVU67
 348 0134 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 349              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 350              		.loc 1 103 47 view .LVU68
 351 0138 08B08CE0 		add	fp, ip, r8	@ tmp242, scale_value, _4
 352 013c 965125E0 		mla	r5, r6, r1, r5	@ tmp225, g_armwave_state.bitdepth_height, yy, tmp224
 353              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 354              		.loc 1 99 20 view .LVU69
 355 0140 0160A003 		moveq	r6, #1	@ tmp232,
 356 0144 0060A013 		movne	r6, #0	@ tmp232,
 357              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 358              		.loc 1 99 19 view .LVU70
 359 0148 FF005CE3 		cmp	ip, #255	@ scale_value,
 360 014c 06C0A011 		movne	ip, r6	@, tmp237, tmp232
 361 0150 01C08603 		orreq	ip, r6, #1	@,, tmp237, tmp232
 362              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 363              		.loc 1 103 47 view .LVU71
 364 0154 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_68, *_68
 365              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 366              		.loc 1 99 19 view .LVU72
 367 0158 00005CE3 		cmp	ip, #0	@ tmp237,
 368              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 369              		.loc 1 103 47 view .LVU73
 370 015c 016086E2 		add	r6, r6, #1	@ tmp228, *_68,
 371 0160 0560C2E7 		strb	r6, [r2, r5]	@ tmp228, *_68
 372              	.LVL11:
 373              		.loc 1 104 17 is_stmt 1 view .LVU74
  96:armwave.c     ****                 
 374              		.loc 1 96 17 view .LVU75
  99:armwave.c     ****                     continue;
 375              		.loc 1 99 17 view .LVU76
 376              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 377              		.loc 1 99 19 is_stmt 0 view .LVU77
 378 0164 1D00001A 		bne	.L20		@,
 379              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 380              		.loc 1 102 63 view .LVU78
 381 0168 3CC097E5 		ldr	ip, [r7, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 382              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 383              		.loc 1 99 20 view .LVU79
 384 016c FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 385              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 386              		.loc 1 103 47 view .LVU80
 387 0170 085080E0 		add	r5, r0, r8	@ tmp260, scale_value, _4
 388 0174 9CBA2AE0 		mla	r10, ip, r10, fp	@ tmp243, g_armwave_state.bitdepth_height, tmp239, tmp242
 389              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 390              		.loc 1 99 20 view .LVU81
 391 0178 01C0A003 		moveq	ip, #1	@ tmp250,
 392 017c 00C0A013 		movne	ip, #0	@ tmp250,
 393              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 394              		.loc 1 99 19 view .LVU82
 395 0180 FF0050E3 		cmp	r0, #255	@ scale_value,
 396 0184 01C08C03 		orreq	ip, ip, #1	@,, tmp255, tmp250
 397              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 398              		.loc 1 103 47 view .LVU83
 399 0188 0A00D2E7 		ldrb	r0, [r2, r10]	@ zero_extendqisi2	@ *_95, *_95
 400              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 401              		.loc 1 99 19 view .LVU84
 402 018c 00005CE3 		cmp	ip, #0	@ tmp255,
 403              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 404              		.loc 1 103 47 view .LVU85
 405 0190 010080E2 		add	r0, r0, #1	@ tmp246, *_95,
 406 0194 0A00C2E7 		strb	r0, [r2, r10]	@ tmp246, *_95
 407              		.loc 1 104 17 is_stmt 1 view .LVU86
 408              	.LVL12:
  96:armwave.c     ****                 
 409              		.loc 1 96 17 view .LVU87
  99:armwave.c     ****                     continue;
 410              		.loc 1 99 17 view .LVU88
 411              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 412              		.loc 1 99 19 is_stmt 0 view .LVU89
 413 0198 1000001A 		bne	.L20		@,
 414              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 415              		.loc 1 102 63 view .LVU90
 416 019c 3CC097E5 		ldr	ip, [r7, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 417              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 418              		.loc 1 99 20 view .LVU91
 419 01a0 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 420              	.LVL13:
 421              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 422              		.loc 1 103 47 view .LVU92
 423 01a4 030088E0 		add	r0, r8, r3	@ tmp277, _4, word
 424 01a8 9C5424E0 		mla	r4, ip, r4, r5	@ tmp261, g_armwave_state.bitdepth_height, tmp257, tmp260
 425              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 426              		.loc 1 99 20 view .LVU93
 427 01ac 01C0A003 		moveq	ip, #1	@ tmp267,
 428 01b0 00C0A013 		movne	ip, #0	@ tmp267,
 429              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 430              		.loc 1 99 19 view .LVU94
 431 01b4 FF0053E3 		cmp	r3, #255	@ word,
 432 01b8 01C08C03 		orreq	ip, ip, #1	@,, tmp272, tmp267
 433              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 434              		.loc 1 103 47 view .LVU95
 435 01bc 0430D2E7 		ldrb	r3, [r2, r4]	@ zero_extendqisi2	@ *_122, *_122
 436              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 437              		.loc 1 99 19 view .LVU96
 438 01c0 00005CE3 		cmp	ip, #0	@ tmp272,
 439              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 440              		.loc 1 103 47 view .LVU97
 441 01c4 013083E2 		add	r3, r3, #1	@ tmp264, *_122,
 442 01c8 0430C2E7 		strb	r3, [r2, r4]	@ tmp264, *_122
 443              		.loc 1 104 17 is_stmt 1 view .LVU98
 444              	.LVL14:
  96:armwave.c     ****                 
 445              		.loc 1 96 17 view .LVU99
  99:armwave.c     ****                     continue;
 446              		.loc 1 99 17 view .LVU100
 447              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 448              		.loc 1 102 63 is_stmt 0 view .LVU101
 449 01cc 3C309705 		ldreq	r3, [r7, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 450              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 451              		.loc 1 103 47 view .LVU102
 452 01d0 930E2E00 		mlaeq	lr, r3, lr, r0	@ tmp278, g_armwave_state.bitdepth_height, tmp273, tmp277
 453 01d4 0E30D207 		ldrbeq	r3, [r2, lr]	@ zero_extendqisi2	@ *_149, *_149
 454 01d8 01308302 		addeq	r3, r3, #1	@ tmp281, *_149,
 455 01dc 0E30C207 		strbeq	r3, [r2, lr]	@ tmp281, *_149
 456              		.loc 1 104 17 is_stmt 1 view .LVU103
 457              	.LVL15:
 458              	.L20:
 459              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 460              		.loc 1 91 9 is_stmt 0 view .LVU104
 461 01e0 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 462              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 463              		.loc 1 91 37 view .LVU105
 464 01e4 041081E2 		add	r1, r1, #4	@ yy, yy,
 465              	.LVL16:
 466              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 467              		.loc 1 91 9 view .LVU106
 468 01e8 010053E1 		cmp	r3, r1	@ height, yy
 469 01ec C1FFFF8A 		bhi	.L17		@,
 470              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 471              		.loc 1 85 44 view .LVU107
 472 01f0 08109DE5 		ldr	r1, [sp, #8]	@ w, %sfp
 473              	.LVL17:
 474              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 475              		.loc 1 85 5 view .LVU108
 476 01f4 343097E5 		ldr	r3, [r7, #52]	@ g_armwave_state.waves, g_armwave_state.waves
 477              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 478              		.loc 1 85 44 view .LVU109
 479 01f8 011081E2 		add	r1, r1, #1	@ w, w,
 480              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 481              		.loc 1 85 5 view .LVU110
 482 01fc 030051E1 		cmp	r1, r3	@ w, g_armwave_state.waves
 483              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 484              		.loc 1 85 44 view .LVU111
 485 0200 08108DE5 		str	r1, [sp, #8]	@ w, %sfp
 486              	.LVL18:
 487              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 488              		.loc 1 85 5 view .LVU112
 489 0204 B4FFFFBA 		blt	.L18		@,
 490              	.LVL19:
 491              	.L11:
 492              	@ armwave.c:108: }
 105:armwave.c     ****             }
 106:armwave.c     ****         }
 107:armwave.c     ****     }
 108:armwave.c     **** }
 493              		.loc 1 108 1 view .LVU113
 494 0208 14D08DE2 		add	sp, sp, #20	@,,
 495              		.cfi_def_cfa_offset 36
 496              		@ sp needed	@
 497 020c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 498              	.LVL20:
 499              	.L28:
 500              		.loc 1 108 1 view .LVU114
 501              		.align	2
 502              	.L27:
 503 0210 00000000 		.word	g_armwave_state
 504              		.cfi_endproc
 505              	.LFE59:
 507              		.align	2
 508              		.global	armwave_fill_pixbuf_256
 509              		.syntax unified
 510              		.arm
 511              		.fpu vfp
 513              	armwave_fill_pixbuf_256:
 514              	.LVL21:
 515              	.LFB60:
 109:armwave.c     **** 
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 516              		.loc 1 114 1 is_stmt 1 view -0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 8
 519              		@ frame_needed = 0, uses_anonymous_args = 0
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 520              		.loc 1 115 5 view .LVU116
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 521              		.loc 1 116 5 view .LVU117
 117:armwave.c     ****     uint8_t r, g, b, value;
 522              		.loc 1 117 5 view .LVU118
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 523              		.loc 1 118 5 view .LVU119
 524              	@ armwave.c:114: {
 114:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 525              		.loc 1 114 1 is_stmt 0 view .LVU120
 526 0214 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 527              		.cfi_def_cfa_offset 36
 528              		.cfi_offset 4, -36
 529              		.cfi_offset 5, -32
 530              		.cfi_offset 6, -28
 531              		.cfi_offset 7, -24
 532              		.cfi_offset 8, -20
 533              		.cfi_offset 9, -16
 534              		.cfi_offset 10, -12
 535              		.cfi_offset 11, -8
 536              		.cfi_offset 14, -4
 537              	@ armwave.c:122:     assert(out_buffer != NULL);
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 538              		.loc 1 122 5 view .LVU121
 539 0218 000050E3 		cmp	r0, #0	@ out_buffer
 540              	@ armwave.c:118:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 118:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 541              		.loc 1 118 15 view .LVU122
 542 021c 44529FE5 		ldr	r5, .L56	@ tmp363,
 543              	@ armwave.c:114: {
 114:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 544              		.loc 1 114 1 view .LVU123
 545 0220 0CD04DE2 		sub	sp, sp, #12	@,,
 546              		.cfi_def_cfa_offset 48
 547              	@ armwave.c:118:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 118:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 548              		.loc 1 118 15 view .LVU124
 549 0224 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 550              	.LVL22:
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 551              		.loc 1 119 5 is_stmt 1 view .LVU125
 120:armwave.c     **** 
 552              		.loc 1 120 5 view .LVU126
 553              		.loc 1 122 5 view .LVU127
 554 0228 8900000A 		beq	.L54		@,
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 555              		.loc 1 126 5 view .LVU128
 556              	@ armwave.c:126:     npix = g_armwave_state.target_width * 256;
 557              		.loc 1 126 10 is_stmt 0 view .LVU129
 558 022c 54C095E5 		ldr	ip, [r5, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 559 0230 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 560              	.LVL23:
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 561              		.loc 1 128 5 is_stmt 1 view .LVU130
 562              		.loc 1 128 5 is_stmt 0 view .LVU131
 563 0234 00005CE3 		cmp	ip, #0	@ npix,
 564 0238 0A0000DA 		ble	.L29		@,
 565              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 566              		.loc 1 140 52 view .LVU132
 567 023c F8A6D5E1 		ldrsh	r10, [r5, #104]	@ _70, g_armwave_state.ch1_color.r
 568              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 569              		.loc 1 141 52 view .LVU133
 570 0240 FA96D5E1 		ldrsh	r9, [r5, #106]	@ _76, g_armwave_state.ch1_color.g
 571              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 142 52 view .LVU134
 573 0244 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _80, g_armwave_state.ch1_color.b
 574              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 575              		.loc 1 128 11 view .LVU135
 576 0248 0030A0E3 		mov	r3, #0	@ n,
 577 024c 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 578              	.LVL24:
 579              	.L38:
 132:armwave.c     **** 
 580              		.loc 1 132 9 is_stmt 1 view .LVU136
 581              	@ armwave.c:132:         wave_word = *base_32ptr++;
 132:armwave.c     **** 
 582              		.loc 1 132 19 is_stmt 0 view .LVU137
 583 0250 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 584              	.LVL25:
 134:armwave.c     ****             for(i = 0; i < 4; i++) {
 585              		.loc 1 134 9 is_stmt 1 view .LVU138
 586              	@ armwave.c:134:         if(COND_UNLIKELY(wave_word != 0)) {
 134:armwave.c     ****             for(i = 0; i < 4; i++) {
 587              		.loc 1 134 11 is_stmt 0 view .LVU139
 588 0254 000052E3 		cmp	r2, #0	@ wave_word,
 589 0258 0400001A 		bne	.L55		@,
 590              	.LVL26:
 591              	.L33:
 592              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 593              		.loc 1 128 28 discriminator 2 view .LVU140
 594 025c 043083E2 		add	r3, r3, #4	@ n, n,
 595              	.LVL27:
 596              	@ armwave.c:128:     for(n = 0; n < npix; n += 4) {
 128:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 597              		.loc 1 128 5 discriminator 2 view .LVU141
 598 0260 03005CE1 		cmp	ip, r3	@ npix, n
 599 0264 F9FFFFCA 		bgt	.L38		@,
 600              	.LVL28:
 601              	.L29:
 602              	@ armwave.c:161: }
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 603              		.loc 1 161 1 view .LVU142
 604 0268 0CD08DE2 		add	sp, sp, #12	@,,
 605              		.cfi_remember_state
 606              		.cfi_def_cfa_offset 36
 607              		@ sp needed	@
 608 026c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 609              	.LVL29:
 610              	.L55:
 611              		.cfi_restore_state
 136:armwave.c     ****                 wave_word >>= 8;
 612              		.loc 1 136 17 is_stmt 1 view .LVU143
 137:armwave.c     **** 
 613              		.loc 1 137 17 view .LVU144
 614              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 615              		.loc 1 139 19 is_stmt 0 view .LVU145
 616 0270 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 617              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 618              		.loc 1 137 27 view .LVU146
 619 0274 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 620              	.LVL30:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 621              		.loc 1 139 17 is_stmt 1 view .LVU147
 622              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 139 19 is_stmt 0 view .LVU148
 624 0278 1900000A 		beq	.L34		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 625              		.loc 1 140 21 is_stmt 1 view .LVU149
 626              	.LVL31:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 627              		.loc 1 141 21 view .LVU150
 142:armwave.c     **** 
 628              		.loc 1 142 21 view .LVU151
 144:armwave.c     ****                     g = MIN(gg, 255);
 629              		.loc 1 144 21 view .LVU152
 145:armwave.c     ****                     b = MIN(bb, 255);
 630              		.loc 1 145 21 view .LVU153
 146:armwave.c     **** 
 631              		.loc 1 146 21 view .LVU154
 149:armwave.c     **** 
 632              		.loc 1 149 21 view .LVU155
 152:armwave.c     ****                     xx = nsub & 0xff;
 633              		.loc 1 152 21 view .LVU156
 153:armwave.c     ****                     yy = nsub >> 8;
 634              		.loc 1 153 21 view .LVU157
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 635              		.loc 1 154 21 view .LVU158
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 636              		.loc 1 155 21 view .LVU159
 156:armwave.c     ****                 }
 637              		.loc 1 156 21 view .LVU160
 638              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 639              		.loc 1 142 55 is_stmt 0 view .LVU161
 640 027c 9B0604E0 		mul	r4, fp, r6	@ tmp279, _80, _72
 641              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 642              		.loc 1 141 55 view .LVU162
 643 0280 990608E0 		mul	r8, r9, r6	@ tmp283, _76, _72
 644              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 645              		.loc 1 142 24 view .LVU163
 646 0284 4444A0E1 		asr	r4, r4, #8	@ bb, tmp279,
 647              	.LVL32:
 648              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 649              		.loc 1 146 25 view .LVU164
 650 0288 FF0054E3 		cmp	r4, #255	@ bb,
 651              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 652              		.loc 1 141 24 view .LVU165
 653 028c 4884A0E1 		asr	r8, r8, #8	@ gg, tmp283,
 654              	.LVL33:
 655              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 656              		.loc 1 146 25 view .LVU166
 657 0290 FF40A0A3 		movge	r4, #255	@ bb,
 658              	.LVL34:
 659              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 660              		.loc 1 140 55 view .LVU167
 661 0294 960A06E0 		mul	r6, r6, r10	@ tmp289, _72, _70
 662              	.LVL35:
 663              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 664              		.loc 1 145 25 view .LVU168
 665 0298 FF0058E3 		cmp	r8, #255	@ gg,
 666 029c FF80A0A3 		movge	r8, #255	@ gg,
 667              	.LVL36:
 668              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 669              		.loc 1 140 24 view .LVU169
 670 02a0 4664A0E1 		asr	r6, r6, #8	@ rr, tmp289,
 671              	.LVL37:
 672              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 673              		.loc 1 149 56 view .LVU170
 674 02a4 0884A0E1 		lsl	r8, r8, #8	@ tmp284, gg,
 675              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 676              		.loc 1 156 39 view .LVU171
 677 02a8 540095E5 		ldr	r0, [r5, #84]	@ tmp375, g_armwave_state.target_width
 678              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 679              		.loc 1 149 44 view .LVU172
 680 02ac 0448A0E1 		lsl	r4, r4, #16	@ tmp280, bb,
 681              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 682              		.loc 1 144 25 view .LVU173
 683 02b0 FF0056E3 		cmp	r6, #255	@ rr,
 684              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 685              		.loc 1 149 56 view .LVU174
 686 02b4 7880FFE6 		uxth	r8, r8	@ tmp285, tmp284
 687              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 688              		.loc 1 153 24 view .LVU175
 689 02b8 7370EFE6 		uxtb	r7, r3	@ xx, n
 690              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 691              		.loc 1 149 44 view .LVU176
 692 02bc FF4804E2 		and	r4, r4, #16711680	@ tmp281, tmp280,
 693              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 694              		.loc 1 149 51 view .LVU177
 695 02c0 084084E1 		orr	r4, r4, r8	@ tmp287, tmp281, tmp285
 696              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 697              		.loc 1 144 25 view .LVU178
 698 02c4 FF60A0A3 		movge	r6, #255	@ rr,
 699              	.LVL38:
 700              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 701              		.loc 1 154 31 view .LVU179
 702 02c8 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 703              	.LVL39:
 704              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 705              		.loc 1 156 39 view .LVU180
 706 02cc 908727E0 		mla	r7, r0, r7, r8	@ tmp277, tmp375, xx, yy
 707              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 708              		.loc 1 149 62 view .LVU181
 709 02d0 7660EFE6 		uxtb	r6, r6	@ rr, rr
 710              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 711              		.loc 1 156 49 view .LVU182
 712 02d4 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 713              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 714              		.loc 1 149 62 view .LVU183
 715 02d8 066084E1 		orr	r6, r4, r6	@ tmp291, tmp287, rr
 716              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 717              		.loc 1 149 26 view .LVU184
 718 02dc FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp291,
 719              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 720              		.loc 1 156 49 view .LVU185
 721 02e0 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_107
 722              	.LVL40:
 723              	.L34:
 136:armwave.c     ****                 wave_word >>= 8;
 724              		.loc 1 136 17 is_stmt 1 view .LVU186
 137:armwave.c     **** 
 725              		.loc 1 137 17 view .LVU187
 726              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 727              		.loc 1 139 19 is_stmt 0 view .LVU188
 728 02e4 FFE01EE2 		ands	lr, lr, #255	@ _119, wave_word,
 729              	.LVL41:
 730              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 731              		.loc 1 137 27 view .LVU189
 732 02e8 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 733              	.LVL42:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 734              		.loc 1 139 17 is_stmt 1 view .LVU190
 735              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 736              		.loc 1 139 19 is_stmt 0 view .LVU191
 737 02ec 1C00000A 		beq	.L35		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 738              		.loc 1 140 21 is_stmt 1 view .LVU192
 739              	.LVL43:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 740              		.loc 1 141 21 view .LVU193
 142:armwave.c     **** 
 741              		.loc 1 142 21 view .LVU194
 144:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 144 21 view .LVU195
 145:armwave.c     ****                     b = MIN(bb, 255);
 743              		.loc 1 145 21 view .LVU196
 146:armwave.c     **** 
 744              		.loc 1 146 21 view .LVU197
 149:armwave.c     **** 
 745              		.loc 1 149 21 view .LVU198
 152:armwave.c     ****                     xx = nsub & 0xff;
 746              		.loc 1 152 21 view .LVU199
 747              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 748              		.loc 1 142 55 is_stmt 0 view .LVU200
 749 02f0 9E0B04E0 		mul	r4, lr, fp	@ tmp302, _119, _80
 750              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 141 55 view .LVU201
 752 02f4 9E0907E0 		mul	r7, lr, r9	@ tmp306, _119, _76
 753              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 754              		.loc 1 142 24 view .LVU202
 755 02f8 4444A0E1 		asr	r4, r4, #8	@ bb, tmp302,
 756              	.LVL44:
 757              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 758              		.loc 1 146 25 view .LVU203
 759 02fc FF0054E3 		cmp	r4, #255	@ bb,
 760 0300 FF40A0A3 		movge	r4, #255	@ bb,
 761              	.LVL45:
 762              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 763              		.loc 1 140 55 view .LVU204
 764 0304 9E0A0EE0 		mul	lr, lr, r10	@ tmp312, _119, _70
 765              	.LVL46:
 766              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 767              		.loc 1 141 24 view .LVU205
 768 0308 4774A0E1 		asr	r7, r7, #8	@ gg, tmp306,
 769              	.LVL47:
 770              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 771              		.loc 1 149 44 view .LVU206
 772 030c 0448A0E1 		lsl	r4, r4, #16	@ tmp303, bb,
 773              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 774              		.loc 1 145 25 view .LVU207
 775 0310 FF0057E3 		cmp	r7, #255	@ gg,
 776 0314 016083E2 		add	r6, r3, #1	@ _160, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 777              		.loc 1 153 21 is_stmt 1 view .LVU208
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 778              		.loc 1 154 21 view .LVU209
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 779              		.loc 1 155 21 view .LVU210
 156:armwave.c     ****                 }
 780              		.loc 1 156 21 view .LVU211
 781              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 782              		.loc 1 149 44 is_stmt 0 view .LVU212
 783 0318 FF4804E2 		and	r4, r4, #16711680	@ tmp304, tmp303,
 784              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 785              		.loc 1 145 25 view .LVU213
 786 031c FF70A0A3 		movge	r7, #255	@ gg,
 787              	.LVL48:
 788              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 789              		.loc 1 149 44 view .LVU214
 790 0320 04408DE5 		str	r4, [sp, #4]	@ tmp304, %sfp
 791              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 792              		.loc 1 156 39 view .LVU215
 793 0324 544095E5 		ldr	r4, [r5, #84]	@ tmp378, g_armwave_state.target_width
 794              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 795              		.loc 1 140 24 view .LVU216
 796 0328 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp312,
 797              	.LVL49:
 798              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 799              		.loc 1 153 24 view .LVU217
 800 032c 7600EFE6 		uxtb	r0, r6	@ xx, _160
 801              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 802              		.loc 1 144 25 view .LVU218
 803 0330 FF005EE3 		cmp	lr, #255	@ rr,
 804              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 805              		.loc 1 149 56 view .LVU219
 806 0334 0774A0E1 		lsl	r7, r7, #8	@ tmp307, gg,
 807              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 808              		.loc 1 154 31 view .LVU220
 809 0338 4664A0E1 		asr	r6, r6, #8	@ yy, _160,
 810              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 811              		.loc 1 156 39 view .LVU221
 812 033c 946026E0 		mla	r6, r4, r0, r6	@ tmp300, tmp378, xx, yy
 813              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 814              		.loc 1 144 25 view .LVU222
 815 0340 FFE0A0A3 		movge	lr, #255	@ rr,
 816              	.LVL50:
 817              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 818              		.loc 1 149 51 view .LVU223
 819 0344 04009DE5 		ldr	r0, [sp, #4]	@ tmp304, %sfp
 820              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 821              		.loc 1 149 56 view .LVU224
 822 0348 7770FFE6 		uxth	r7, r7	@ tmp308, tmp307
 823              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 824              		.loc 1 149 51 view .LVU225
 825 034c 074080E1 		orr	r4, r0, r7	@ tmp310, tmp304, tmp308
 826              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 827              		.loc 1 149 62 view .LVU226
 828 0350 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 829              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 830              		.loc 1 156 49 view .LVU227
 831 0354 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 832              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 833              		.loc 1 149 62 view .LVU228
 834 0358 0EE084E1 		orr	lr, r4, lr	@ tmp314, tmp310, rr
 835              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 836              		.loc 1 149 26 view .LVU229
 837 035c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp314,
 838              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 839              		.loc 1 156 49 view .LVU230
 840 0360 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_154
 841              	.LVL51:
 842              	.L35:
 136:armwave.c     ****                 wave_word >>= 8;
 843              		.loc 1 136 17 is_stmt 1 view .LVU231
 137:armwave.c     **** 
 844              		.loc 1 137 17 view .LVU232
 845              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 846              		.loc 1 139 19 is_stmt 0 view .LVU233
 847 0364 FFE018E2 		ands	lr, r8, #255	@ _166, wave_word,
 848              	@ armwave.c:137:                 wave_word >>= 8;
 137:armwave.c     **** 
 849              		.loc 1 137 27 view .LVU234
 850 0368 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 851              	.LVL52:
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 852              		.loc 1 139 17 is_stmt 1 view .LVU235
 853              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 854              		.loc 1 139 19 is_stmt 0 view .LVU236
 855 036c 1A00000A 		beq	.L36		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 856              		.loc 1 140 21 is_stmt 1 view .LVU237
 857              	.LVL53:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 858              		.loc 1 141 21 view .LVU238
 142:armwave.c     **** 
 859              		.loc 1 142 21 view .LVU239
 144:armwave.c     ****                     g = MIN(gg, 255);
 860              		.loc 1 144 21 view .LVU240
 145:armwave.c     ****                     b = MIN(bb, 255);
 861              		.loc 1 145 21 view .LVU241
 146:armwave.c     **** 
 862              		.loc 1 146 21 view .LVU242
 149:armwave.c     **** 
 863              		.loc 1 149 21 view .LVU243
 152:armwave.c     ****                     xx = nsub & 0xff;
 864              		.loc 1 152 21 view .LVU244
 865              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 866              		.loc 1 142 55 is_stmt 0 view .LVU245
 867 0370 9E0B04E0 		mul	r4, lr, fp	@ tmp325, _166, _80
 868              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 869              		.loc 1 141 55 view .LVU246
 870 0374 9E0906E0 		mul	r6, lr, r9	@ tmp329, _166, _76
 871              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 872              		.loc 1 142 24 view .LVU247
 873 0378 4444A0E1 		asr	r4, r4, #8	@ bb, tmp325,
 874              	.LVL54:
 875              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 876              		.loc 1 140 55 view .LVU248
 877 037c 9E0A0EE0 		mul	lr, lr, r10	@ tmp335, _166, _70
 878              	.LVL55:
 879              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 880              		.loc 1 146 25 view .LVU249
 881 0380 FF0054E3 		cmp	r4, #255	@ bb,
 882              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 883              		.loc 1 141 24 view .LVU250
 884 0384 4664A0E1 		asr	r6, r6, #8	@ gg, tmp329,
 885              	.LVL56:
 886              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 887              		.loc 1 146 25 view .LVU251
 888 0388 FF40A0A3 		movge	r4, #255	@ bb,
 889              	.LVL57:
 890              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 891              		.loc 1 145 25 view .LVU252
 892 038c FF0056E3 		cmp	r6, #255	@ gg,
 893 0390 FF60A0A3 		movge	r6, #255	@ gg,
 894              	.LVL58:
 145:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 145 25 view .LVU253
 896 0394 027083E2 		add	r7, r3, #2	@ _64, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 897              		.loc 1 153 21 is_stmt 1 view .LVU254
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 898              		.loc 1 154 21 view .LVU255
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 899              		.loc 1 155 21 view .LVU256
 156:armwave.c     ****                 }
 900              		.loc 1 156 21 view .LVU257
 901              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 902              		.loc 1 140 24 is_stmt 0 view .LVU258
 903 0398 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp335,
 904              	.LVL59:
 905              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 906              		.loc 1 156 39 view .LVU259
 907 039c 540095E5 		ldr	r0, [r5, #84]	@ tmp379, g_armwave_state.target_width
 908              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 909              		.loc 1 144 25 view .LVU260
 910 03a0 FF005EE3 		cmp	lr, #255	@ rr,
 911              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 912              		.loc 1 153 24 view .LVU261
 913 03a4 7780EFE6 		uxtb	r8, r7	@ xx, _64
 914              	.LVL60:
 915              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 916              		.loc 1 149 56 view .LVU262
 917 03a8 0664A0E1 		lsl	r6, r6, #8	@ tmp330, gg,
 918              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 919              		.loc 1 149 44 view .LVU263
 920 03ac 0448A0E1 		lsl	r4, r4, #16	@ tmp326, bb,
 921              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 922              		.loc 1 144 25 view .LVU264
 923 03b0 FFE0A0A3 		movge	lr, #255	@ rr,
 924              	.LVL61:
 925              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 926              		.loc 1 154 31 view .LVU265
 927 03b4 4774A0E1 		asr	r7, r7, #8	@ yy, _64,
 928              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 929              		.loc 1 156 39 view .LVU266
 930 03b8 907827E0 		mla	r7, r0, r8, r7	@ tmp323, tmp379, xx, yy
 931              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 932              		.loc 1 149 44 view .LVU267
 933 03bc FF4804E2 		and	r4, r4, #16711680	@ tmp327, tmp326,
 934              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 935              		.loc 1 149 56 view .LVU268
 936 03c0 7660FFE6 		uxth	r6, r6	@ tmp331, tmp330
 937              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 938              		.loc 1 149 51 view .LVU269
 939 03c4 066084E1 		orr	r6, r4, r6	@ tmp333, tmp327, tmp331
 940              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 941              		.loc 1 149 62 view .LVU270
 942 03c8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 943              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 944              		.loc 1 156 49 view .LVU271
 945 03cc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 946              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 947              		.loc 1 149 62 view .LVU272
 948 03d0 0EE086E1 		orr	lr, r6, lr	@ tmp337, tmp333, rr
 949              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 950              		.loc 1 149 26 view .LVU273
 951 03d4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp337,
 952              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 953              		.loc 1 156 49 view .LVU274
 954 03d8 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_201
 955              	.L36:
 956              	.LVL62:
 136:armwave.c     ****                 wave_word >>= 8;
 957              		.loc 1 136 17 is_stmt 1 view .LVU275
 137:armwave.c     **** 
 958              		.loc 1 137 17 view .LVU276
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 959              		.loc 1 139 17 view .LVU277
 960              	@ armwave.c:139:                 if(value != 0) {
 139:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 961              		.loc 1 139 19 is_stmt 0 view .LVU278
 962 03dc 000052E3 		cmp	r2, #0	@ wave_word,
 963 03e0 9DFFFF0A 		beq	.L33		@,
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 964              		.loc 1 140 21 is_stmt 1 view .LVU279
 965              	.LVL63:
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 966              		.loc 1 141 21 view .LVU280
 142:armwave.c     **** 
 967              		.loc 1 142 21 view .LVU281
 144:armwave.c     ****                     g = MIN(gg, 255);
 968              		.loc 1 144 21 view .LVU282
 145:armwave.c     ****                     b = MIN(bb, 255);
 969              		.loc 1 145 21 view .LVU283
 146:armwave.c     **** 
 970              		.loc 1 146 21 view .LVU284
 149:armwave.c     **** 
 971              		.loc 1 149 21 view .LVU285
 152:armwave.c     ****                     xx = nsub & 0xff;
 972              		.loc 1 152 21 view .LVU286
 973              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 974              		.loc 1 142 55 is_stmt 0 view .LVU287
 975 03e4 920B0EE0 		mul	lr, r2, fp	@ tmp346, wave_word, _80
 976              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 977              		.loc 1 141 55 view .LVU288
 978 03e8 920904E0 		mul	r4, r2, r9	@ tmp350, wave_word, _76
 979              	@ armwave.c:142:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 142:armwave.c     **** 
 980              		.loc 1 142 24 view .LVU289
 981 03ec 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp346,
 982              	.LVL64:
 983              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 984              		.loc 1 140 55 view .LVU290
 985 03f0 920A02E0 		mul	r2, r2, r10	@ tmp356, wave_word, _70
 986              	.LVL65:
 987              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 988              		.loc 1 146 25 view .LVU291
 989 03f4 FF005EE3 		cmp	lr, #255	@ bb,
 990              	@ armwave.c:141:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 141:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 991              		.loc 1 141 24 view .LVU292
 992 03f8 4444A0E1 		asr	r4, r4, #8	@ gg, tmp350,
 993              	.LVL66:
 994              	@ armwave.c:146:                     b = MIN(bb, 255);
 146:armwave.c     **** 
 995              		.loc 1 146 25 view .LVU293
 996 03fc FFE0A0A3 		movge	lr, #255	@ bb,
 997              	.LVL67:
 998              	@ armwave.c:145:                     g = MIN(gg, 255);
 145:armwave.c     ****                     b = MIN(bb, 255);
 999              		.loc 1 145 25 view .LVU294
 1000 0400 FF0054E3 		cmp	r4, #255	@ gg,
 1001 0404 FF40A0A3 		movge	r4, #255	@ gg,
 1002              	.LVL68:
 145:armwave.c     ****                     b = MIN(bb, 255);
 1003              		.loc 1 145 25 view .LVU295
 1004 0408 036083E2 		add	r6, r3, #3	@ _56, n,
 153:armwave.c     ****                     yy = nsub >> 8;
 1005              		.loc 1 153 21 is_stmt 1 view .LVU296
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1006              		.loc 1 154 21 view .LVU297
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1007              		.loc 1 155 21 view .LVU298
 156:armwave.c     ****                 }
 1008              		.loc 1 156 21 view .LVU299
 1009              	@ armwave.c:140:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 140:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1010              		.loc 1 140 24 is_stmt 0 view .LVU300
 1011 040c 4224A0E1 		asr	r2, r2, #8	@ rr, tmp356,
 1012              	.LVL69:
 1013              	@ armwave.c:155:                     offset = yy + (xx * g_armwave_state.target_width);
 155:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1014              		.loc 1 155 39 view .LVU301
 1015 0410 547095E5 		ldr	r7, [r5, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1016              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 1017              		.loc 1 144 25 view .LVU302
 1018 0414 FF0052E3 		cmp	r2, #255	@ rr,
 1019              	@ armwave.c:153:                     xx = nsub & 0xff;
 153:armwave.c     ****                     yy = nsub >> 8;
 1020              		.loc 1 153 24 view .LVU303
 1021 0418 7680EFE6 		uxtb	r8, r6	@ xx, _56
 1022              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1023              		.loc 1 149 56 view .LVU304
 1024 041c 0444A0E1 		lsl	r4, r4, #8	@ tmp351, gg,
 1025              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1026              		.loc 1 149 44 view .LVU305
 1027 0420 0EE8A0E1 		lsl	lr, lr, #16	@ tmp347, bb,
 1028              	@ armwave.c:144:                     r = MIN(rr, 255);
 144:armwave.c     ****                     g = MIN(gg, 255);
 1029              		.loc 1 144 25 view .LVU306
 1030 0424 FF20A0A3 		movge	r2, #255	@ rr,
 1031              	.LVL70:
 1032              	@ armwave.c:154:                     yy = nsub >> 8;
 154:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1033              		.loc 1 154 31 view .LVU307
 1034 0428 4664A0E1 		asr	r6, r6, #8	@ yy, _56,
 1035              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1036              		.loc 1 149 44 view .LVU308
 1037 042c FFE80EE2 		and	lr, lr, #16711680	@ tmp348, tmp347,
 1038              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1039              		.loc 1 149 56 view .LVU309
 1040 0430 7440FFE6 		uxth	r4, r4	@ tmp352, tmp351
 1041              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1042              		.loc 1 156 39 view .LVU310
 1043 0434 976826E0 		mla	r6, r7, r8, r6	@ tmp344, g_armwave_state.target_width, xx, yy
 1044              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1045              		.loc 1 149 51 view .LVU311
 1046 0438 04E08EE1 		orr	lr, lr, r4	@ tmp354, tmp348, tmp352
 1047              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1048              		.loc 1 149 62 view .LVU312
 1049 043c 7220EFE6 		uxtb	r2, r2	@ rr, rr
 1050              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1051              		.loc 1 156 49 view .LVU313
 1052 0440 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1053              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1054              		.loc 1 149 62 view .LVU314
 1055 0444 02208EE1 		orr	r2, lr, r2	@ tmp358, tmp354, rr
 1056              	@ armwave.c:149:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 149:armwave.c     **** 
 1057              		.loc 1 149 26 view .LVU315
 1058 0448 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp358,
 1059              	@ armwave.c:156:                     *(out_buffer_base + offset) = word;
 156:armwave.c     ****                 }
 1060              		.loc 1 156 49 view .LVU316
 1061 044c 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_248
 1062 0450 81FFFFEA 		b	.L33		@
 1063              	.LVL71:
 1064              	.L54:
 122:armwave.c     **** 
 1065              		.loc 1 122 5 is_stmt 1 discriminator 1 view .LVU317
 1066 0454 10309FE5 		ldr	r3, .L56+4	@,
 1067 0458 7A20A0E3 		mov	r2, #122	@,
 1068 045c 0C109FE5 		ldr	r1, .L56+8	@,
 1069              	.LVL72:
 122:armwave.c     **** 
 1070              		.loc 1 122 5 is_stmt 0 discriminator 1 view .LVU318
 1071 0460 0C009FE5 		ldr	r0, .L56+12	@,
 1072              	.LVL73:
 122:armwave.c     **** 
 1073              		.loc 1 122 5 discriminator 1 view .LVU319
 1074 0464 FEFFFFEB 		bl	__assert_fail		@
 1075              	.LVL74:
 1076              	.L57:
 122:armwave.c     **** 
 1077              		.loc 1 122 5 discriminator 1 view .LVU320
 1078              		.align	2
 1079              	.L56:
 1080 0468 00000000 		.word	g_armwave_state
 1081 046c 00000000 		.word	.LANCHOR0
 1082 0470 20000000 		.word	.LC2
 1083 0474 2C000000 		.word	.LC3
 1084              		.cfi_endproc
 1085              	.LFE60:
 1087              		.align	2
 1088              		.global	armwave_fill_pixbuf_scaled
 1089              		.syntax unified
 1090              		.arm
 1091              		.fpu vfp
 1093              	armwave_fill_pixbuf_scaled:
 1094              	.LVL75:
 1095              	.LFB61:
 162:armwave.c     **** 
 163:armwave.c     **** /*
 164:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 165:armwave.c     ****  * Rows are repeated as necessary.
 166:armwave.c     ****  */
 167:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 168:armwave.c     **** {
 1096              		.loc 1 168 1 is_stmt 1 view -0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 0, uses_anonymous_args = 0
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 1100              		.loc 1 169 5 view .LVU322
 170:armwave.c     ****     // uint32_t ysub;
 171:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 1101              		.loc 1 171 5 view .LVU323
 172:armwave.c     ****     uint8_t r, g, b, value; 
 1102              		.loc 1 172 5 view .LVU324
 173:armwave.c     ****     // uint8_t row;
 174:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1103              		.loc 1 174 5 view .LVU325
 1104              	@ armwave.c:168: {
 168:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 1105              		.loc 1 168 1 is_stmt 0 view .LVU326
 1106 0478 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1107              		.cfi_def_cfa_offset 36
 1108              		.cfi_offset 4, -36
 1109              		.cfi_offset 5, -32
 1110              		.cfi_offset 6, -28
 1111              		.cfi_offset 7, -24
 1112              		.cfi_offset 8, -20
 1113              		.cfi_offset 9, -16
 1114              		.cfi_offset 10, -12
 1115              		.cfi_offset 11, -8
 1116              		.cfi_offset 14, -4
 1117              	@ armwave.c:178:     assert(out_buffer != NULL);
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 176:armwave.c     ****     uint32_t offset;
 177:armwave.c     **** 
 178:armwave.c     ****     assert(out_buffer != NULL);
 1118              		.loc 1 178 5 view .LVU327
 1119 047c 000050E3 		cmp	r0, #0	@ out_buffer
 1120              	@ armwave.c:174:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1121              		.loc 1 174 15 view .LVU328
 1122 0480 44619FE5 		ldr	r6, .L80	@ tmp204,
 1123              	@ armwave.c:168: {
 168:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 1124              		.loc 1 168 1 view .LVU329
 1125 0484 0CD04DE2 		sub	sp, sp, #12	@,,
 1126              		.cfi_def_cfa_offset 48
 1127              	@ armwave.c:174:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1128              		.loc 1 174 15 view .LVU330
 1129 0488 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1130              	.LVL76:
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1131              		.loc 1 175 5 is_stmt 1 view .LVU331
 176:armwave.c     **** 
 1132              		.loc 1 176 5 view .LVU332
 1133              		.loc 1 178 5 view .LVU333
 1134 048c 4900000A 		beq	.L77		@,
 179:armwave.c     **** 
 180:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1135              		.loc 1 180 5 view .LVU334
 1136              	@ armwave.c:180:     npix = g_armwave_state.target_width * 256; 
 1137              		.loc 1 180 10 is_stmt 0 view .LVU335
 1138 0490 548096E5 		ldr	r8, [r6, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1139 0494 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1140              	.LVL77:
 181:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 182:armwave.c     **** 
 183:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1141              		.loc 1 183 5 is_stmt 1 view .LVU336
 1142              		.loc 1 183 5 is_stmt 0 view .LVU337
 1143 0498 000058E3 		cmp	r8, #0	@ npix,
 1144 049c 0C0000DA 		ble	.L58		@,
 1145              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 184:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 185:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 186:armwave.c     ****         // most normal waveforms.
 187:armwave.c     ****         wave_word = *base_32ptr++;
 188:armwave.c     **** 
 189:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 190:armwave.c     ****             for(w = 0; w < 4; w++) {
 191:armwave.c     ****                 value = wave_word & 0xff;
 192:armwave.c     ****                 wave_word >>= 8;
 193:armwave.c     **** 
 194:armwave.c     ****                 if(value != 0) {
 195:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 196:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1146              		.loc 1 196 52 view .LVU338
 1147 04a0 FA36D6E1 		ldrsh	r3, [r6, #106]	@ _10, g_armwave_state.ch1_color.g
 1148              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1149              		.loc 1 195 52 view .LVU339
 1150 04a4 F8B6D6E1 		ldrsh	fp, [r6, #104]	@ _6, g_armwave_state.ch1_color.r
 1151              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 198:armwave.c     **** 
 199:armwave.c     ****                     r = MIN(rr, 255);
 200:armwave.c     ****                     g = MIN(gg, 255);
 201:armwave.c     ****                     b = MIN(bb, 255);
 202:armwave.c     **** 
 203:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 204:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 205:armwave.c     **** 
 206:armwave.c     ****                     // Do line scaling as necessary.
 207:armwave.c     ****                     /*
 208:armwave.c     ****                     nsub = n + w;
 209:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 210:armwave.c     ****                     xx = (nsub >> 8);
 211:armwave.c     **** 
 212:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 213:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 214:armwave.c     ****                         *(out_buffer_base + offset) = word;
 215:armwave.c     ****                     }
 216:armwave.c     ****                     */
 217:armwave.c     **** 
 218:armwave.c     ****                     nsub = n + w;
 219:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1152              		.loc 1 219 57 view .LVU340
 1153 04a8 096AD6ED 		vldr.32	s13, [r6, #36]	@ _27, g_armwave_state.vscale_frac
 1154              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1155              		.loc 1 196 52 view .LVU341
 1156 04ac 00308DE5 		str	r3, [sp]	@ _10, %sfp
 1157              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1158              		.loc 1 197 52 view .LVU342
 1159 04b0 FC36D6E1 		ldrsh	r3, [r6, #108]	@ _13, g_armwave_state.ch1_color.b
 1160              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1161              		.loc 1 183 11 view .LVU343
 1162 04b4 0010A0E3 		mov	r1, #0	@ n,
 1163              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1164              		.loc 1 197 52 view .LVU344
 1165 04b8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 1166              	.LVL78:
 1167              	.L65:
 187:armwave.c     **** 
 1168              		.loc 1 187 9 is_stmt 1 view .LVU345
 1169              	@ armwave.c:187:         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 1170              		.loc 1 187 19 is_stmt 0 view .LVU346
 1171 04bc 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 1172              	.LVL79:
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 1173              		.loc 1 189 9 is_stmt 1 view .LVU347
 1174              	@ armwave.c:189:         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 1175              		.loc 1 189 11 is_stmt 0 view .LVU348
 1176 04c0 000053E3 		cmp	r3, #0	@ wave_word,
 1177 04c4 0400001A 		bne	.L78		@,
 1178              	.L61:
 1179              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1180              		.loc 1 183 28 view .LVU349
 1181 04c8 041081E2 		add	r1, r1, #4	@ n, n,
 1182              	.LVL80:
 1183              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1184              		.loc 1 183 5 view .LVU350
 1185 04cc 010058E1 		cmp	r8, r1	@ npix, n
 1186 04d0 F9FFFFCA 		bgt	.L65		@,
 1187              	.LVL81:
 1188              	.L58:
 1189              	@ armwave.c:231: }
 220:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     xx = (nsub >> 8);
 222:armwave.c     **** 
 223:armwave.c     ****                     for(y = yy; y < ye; y++) {
 224:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 225:armwave.c     ****                         *(out_buffer_base + offset) = word;
 226:armwave.c     ****                     }
 227:armwave.c     ****                 }
 228:armwave.c     ****             }
 229:armwave.c     ****         }
 230:armwave.c     ****     }
 231:armwave.c     **** }
 1190              		.loc 1 231 1 view .LVU351
 1191 04d4 0CD08DE2 		add	sp, sp, #12	@,,
 1192              		.cfi_remember_state
 1193              		.cfi_def_cfa_offset 36
 1194              		@ sp needed	@
 1195 04d8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1196              	.LVL82:
 1197              	.L78:
 1198              		.cfi_restore_state
 1199              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1200              		.loc 1 194 19 view .LVU352
 1201 04dc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 1202              	@ armwave.c:190:             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 1203              		.loc 1 190 19 view .LVU353
 1204 04e0 0070A0E3 		mov	r7, #0	@ w,
 1205              	.LVL83:
 191:armwave.c     ****                 wave_word >>= 8;
 1206              		.loc 1 191 17 is_stmt 1 view .LVU354
 192:armwave.c     **** 
 1207              		.loc 1 192 17 view .LVU355
 1208              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 1209              		.loc 1 192 27 is_stmt 0 view .LVU356
 1210 04e4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1211              	.LVL84:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1212              		.loc 1 194 17 is_stmt 1 view .LVU357
 1213              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1214              		.loc 1 194 19 is_stmt 0 view .LVU358
 1215 04e8 0500001A 		bne	.L79		@,
 1216              	.L62:
 1217              	@ armwave.c:190:             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 1218              		.loc 1 190 32 view .LVU359
 1219 04ec 017087E2 		add	r7, r7, #1	@ w, w,
 1220              	.LVL85:
 1221              	@ armwave.c:190:             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 1222              		.loc 1 190 13 view .LVU360
 1223 04f0 040057E3 		cmp	r7, #4	@ w,
 1224 04f4 F3FFFF0A 		beq	.L61		@,
 191:armwave.c     ****                 wave_word >>= 8;
 1225              		.loc 1 191 17 is_stmt 1 view .LVU361
 1226              	.LVL86:
 192:armwave.c     **** 
 1227              		.loc 1 192 17 view .LVU362
 1228              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1229              		.loc 1 194 19 is_stmt 0 view .LVU363
 1230 04f8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 1231              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 1232              		.loc 1 192 27 view .LVU364
 1233 04fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 1234              	.LVL87:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1235              		.loc 1 194 17 is_stmt 1 view .LVU365
 1236              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1237              		.loc 1 194 19 is_stmt 0 view .LVU366
 1238 0500 F9FFFF0A 		beq	.L62		@,
 1239              	.L79:
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1240              		.loc 1 195 21 is_stmt 1 view .LVU367
 1241              	.LVL88:
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1242              		.loc 1 196 21 view .LVU368
 197:armwave.c     **** 
 1243              		.loc 1 197 21 view .LVU369
 199:armwave.c     ****                     g = MIN(gg, 255);
 1244              		.loc 1 199 21 view .LVU370
 200:armwave.c     ****                     b = MIN(bb, 255);
 1245              		.loc 1 200 21 view .LVU371
 201:armwave.c     **** 
 1246              		.loc 1 201 21 view .LVU372
 204:armwave.c     **** 
 1247              		.loc 1 204 21 view .LVU373
 1248              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 1249              		.loc 1 197 55 is_stmt 0 view .LVU374
 1250 0504 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 1251 0508 075081E0 		add	r5, r1, r7	@ _120, n, w
 1252 050c 9C020AE0 		mul	r10, ip, r2	@ tmp182, _13, _7
 1253              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1254              		.loc 1 219 32 view .LVU375
 1255 0510 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 1256              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1257              		.loc 1 220 41 view .LVU376
 1258 0514 01408CE2 		add	r4, ip, #1	@ tmp197, _25,
 1259              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1260              		.loc 1 219 40 view .LVU377
 1261 0518 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 1262              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1263              		.loc 1 220 41 view .LVU378
 1264 051c 104A07EE 		vmov	s14, r4	@ int	@ tmp197, tmp197
 1265              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1266              		.loc 1 196 55 view .LVU379
 1267 0520 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 1268              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 1269              		.loc 1 197 24 view .LVU380
 1270 0524 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp182,
 1271              	.LVL89:
 1272              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1273              		.loc 1 219 40 view .LVU381
 1274 0528 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _25
 1275              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1276              		.loc 1 220 46 view .LVU382
 1277 052c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 1278              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1279              		.loc 1 196 55 view .LVU383
 1280 0530 9C0204E0 		mul	r4, ip, r2	@ tmp186, _10, _7
 1281              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1282              		.loc 1 195 55 view .LVU384
 1283 0534 920B02E0 		mul	r2, r2, fp	@ tmp192, _7, _6
 1284              	.LVL90:
 1285              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 1286              		.loc 1 201 25 view .LVU385
 1287 0538 FF005AE3 		cmp	r10, #255	@ bb,
 1288              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1289              		.loc 1 196 24 view .LVU386
 1290 053c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp186,
 1291              	.LVL91:
 1292              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1293              		.loc 1 219 40 view .LVU387
 1294 0540 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _27
 1295              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1296              		.loc 1 220 46 view .LVU388
 1297 0544 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _27
 1298              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1299              		.loc 1 195 24 view .LVU389
 1300 0548 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp192,
 1301              	.LVL92:
 1302              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 1303              		.loc 1 201 25 view .LVU390
 1304 054c FFA0A0A3 		movge	r10, #255	@ bb,
 1305              	.LVL93:
 1306              	@ armwave.c:200:                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 1307              		.loc 1 200 25 view .LVU391
 1308 0550 FF0054E3 		cmp	r4, #255	@ gg,
 1309 0554 FF40A0A3 		movge	r4, #255	@ gg,
 1310              	.LVL94:
 1311              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 1312              		.loc 1 199 25 view .LVU392
 1313 0558 FF005CE3 		cmp	ip, #255	@ rr,
 1314              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1315              		.loc 1 204 56 view .LVU393
 1316 055c 0444A0E1 		lsl	r4, r4, #8	@ tmp187, gg,
 1317              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1318              		.loc 1 219 24 view .LVU394
 1319 0560 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 1320              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 1321              		.loc 1 199 25 view .LVU395
 1322 0564 FFC0A0A3 		movge	ip, #255	@ rr,
 1323              	.LVL95:
 1324              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1325              		.loc 1 204 44 view .LVU396
 1326 0568 0AA8A0E1 		lsl	r10, r10, #16	@ tmp183, bb,
 1327 056c FFA80AE2 		and	r10, r10, #16711680	@ tmp184, tmp183,
 1328              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1329              		.loc 1 204 56 view .LVU397
 1330 0570 7440FFE6 		uxth	r4, r4	@ tmp188, tmp187
 1331              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1332              		.loc 1 204 51 view .LVU398
 1333 0574 04408AE1 		orr	r4, r10, r4	@ tmp190, tmp184, tmp188
 1334              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1335              		.loc 1 204 62 view .LVU399
 1336 0578 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 1337 057c 0CC084E1 		orr	ip, r4, ip	@ tmp194, tmp190, rr
 1338              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1339              		.loc 1 219 24 view .LVU400
 1340 0580 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 1341              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1342              		.loc 1 220 24 view .LVU401
 1343 0584 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 1344              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 1345              		.loc 1 204 26 view .LVU402
 1346 0588 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp194,
 1347              	.LVL96:
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 1348              		.loc 1 218 21 is_stmt 1 view .LVU403
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1349              		.loc 1 219 21 view .LVU404
 220:armwave.c     ****                     xx = (nsub >> 8);
 1350              		.loc 1 220 21 view .LVU405
 1351              	@ armwave.c:221:                     xx = (nsub >> 8);
 221:armwave.c     **** 
 1352              		.loc 1 221 32 is_stmt 0 view .LVU406
 1353 058c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 1354              	.LVL97:
 1355              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 1356              		.loc 1 220 24 view .LVU407
 1357 0590 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 1358              	.LVL98:
 221:armwave.c     **** 
 1359              		.loc 1 221 21 is_stmt 1 view .LVU408
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1360              		.loc 1 223 21 view .LVU409
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1361              		.loc 1 223 21 is_stmt 0 view .LVU410
 1362 0594 090052E1 		cmp	r2, r9	@ yy, ye
 1363 0598 D3FFFF2A 		bcs	.L62		@,
 1364              	.LVL99:
 1365              	.L63:
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1366              		.loc 1 224 25 is_stmt 1 discriminator 3 view .LVU411
 225:armwave.c     ****                     }
 1367              		.loc 1 225 25 discriminator 3 view .LVU412
 1368              	@ armwave.c:224:                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1369              		.loc 1 224 43 is_stmt 0 discriminator 3 view .LVU413
 1370 059c 54C096E5 		ldr	ip, [r6, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1371              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 1372              		.loc 1 225 43 discriminator 3 view .LVU414
 1373 05a0 9C522CE0 		mla	ip, ip, r2, r5	@ tmp203, g_armwave_state.target_width, yy, xx
 1374              	.LVL100:
 1375              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1376              		.loc 1 223 42 discriminator 3 view .LVU415
 1377 05a4 012082E2 		add	r2, r2, #1	@ yy, yy,
 1378              	.LVL101:
 1379              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1380              		.loc 1 223 21 discriminator 3 view .LVU416
 1381 05a8 020059E1 		cmp	r9, r2	@ ye, yy
 1382              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 1383              		.loc 1 225 53 discriminator 3 view .LVU417
 1384 05ac 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 1385              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1386              		.loc 1 223 21 discriminator 3 view .LVU418
 1387 05b0 F9FFFF1A 		bne	.L63		@,
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 1388              		.loc 1 223 21 discriminator 3 view .LVU419
 1389 05b4 CCFFFFEA 		b	.L62		@
 1390              	.LVL102:
 1391              	.L77:
 178:armwave.c     **** 
 1392              		.loc 1 178 5 is_stmt 1 discriminator 1 view .LVU420
 1393 05b8 10309FE5 		ldr	r3, .L80+4	@,
 1394 05bc B220A0E3 		mov	r2, #178	@,
 1395 05c0 0C109FE5 		ldr	r1, .L80+8	@,
 1396 05c4 0C009FE5 		ldr	r0, .L80+12	@,
 1397              	.LVL103:
 178:armwave.c     **** 
 1398              		.loc 1 178 5 is_stmt 0 discriminator 1 view .LVU421
 1399 05c8 FEFFFFEB 		bl	__assert_fail		@
 1400              	.LVL104:
 1401              	.L81:
 178:armwave.c     **** 
 1402              		.loc 1 178 5 discriminator 1 view .LVU422
 1403              		.align	2
 1404              	.L80:
 1405 05cc 00000000 		.word	g_armwave_state
 1406 05d0 18000000 		.word	.LANCHOR0+24
 1407 05d4 20000000 		.word	.LC2
 1408 05d8 2C000000 		.word	.LC3
 1409              		.cfi_endproc
 1410              	.LFE61:
 1412              		.align	2
 1413              		.global	armwave_setup_render
 1414              		.syntax unified
 1415              		.arm
 1416              		.fpu vfp
 1418              	armwave_setup_render:
 1419              	.LVL105:
 1420              	.LFB62:
 232:armwave.c     **** 
 233:armwave.c     **** /*
 234:armwave.c     ****  * Setup the renderer with passed parameters.
 235:armwave.c     ****  */
 236:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 237:armwave.c     **** {
 1421              		.loc 1 237 1 is_stmt 1 view -0
 1422              		.cfi_startproc
 1423              		@ args = 12, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 238:armwave.c     ****     uint32_t length, xx;
 1425              		.loc 1 238 5 view .LVU424
 239:armwave.c     ****     float points_per_pixel;
 1426              		.loc 1 239 5 view .LVU425
 240:armwave.c     **** 
 241:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1427              		.loc 1 241 5 view .LVU426
 1428              	@ armwave.c:237: {
 237:armwave.c     ****     uint32_t length, xx;
 1429              		.loc 1 237 1 is_stmt 0 view .LVU427
 1430 05dc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1431              		.cfi_def_cfa_offset 32
 1432              		.cfi_offset 4, -32
 1433              		.cfi_offset 5, -28
 1434              		.cfi_offset 6, -24
 1435              		.cfi_offset 7, -20
 1436              		.cfi_offset 8, -16
 1437              		.cfi_offset 9, -12
 1438              		.cfi_offset 10, -8
 1439              		.cfi_offset 14, -4
 1440 05e0 028B2DED 		vpush.64	{d8}	@
 1441              		.cfi_def_cfa_offset 40
 1442              		.cfi_offset 80, -40
 1443              		.cfi_offset 81, -36
 1444 05e4 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1445 05e8 0190A0E1 		mov	r9, r1	@ end_point, end_point
 1446 05ec 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1447 05f0 10D04DE2 		sub	sp, sp, #16	@,,
 1448              		.cfi_def_cfa_offset 56
 1449              	@ armwave.c:237: {
 237:armwave.c     ****     uint32_t length, xx;
 1450              		.loc 1 237 1 view .LVU428
 1451 05f4 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1452 05f8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1453 05fc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1454              	@ armwave.c:241:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1455              		.loc 1 241 5 view .LVU429
 1456 0600 00308DE5 		str	r3, [sp]	@ wave_stride,
 1457 0604 F460CDE1 		strd	r6, [sp, #4]	@,,
 1458 0608 0230A0E1 		mov	r3, r2	@, waves_max
 1459              	.LVL106:
 1460              		.loc 1 241 5 view .LVU430
 1461 060c 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1462 0610 0120A0E1 		mov	r2, r1	@, end_point
 1463              	.LVL107:
 1464              		.loc 1 241 5 view .LVU431
 1465 0614 0010A0E1 		mov	r1, r0	@, start_point
 1466              	.LVL108:
 1467              		.loc 1 241 5 view .LVU432
 1468 0618 94019FE5 		ldr	r0, .L96+8	@,
 1469              	.LVL109:
 1470              		.loc 1 241 5 view .LVU433
 1471 061c FEFFFFEB 		bl	printf		@
 1472              	.LVL110:
 242:armwave.c     **** 
 243:armwave.c     ****     // TODO these asserts should instead raise PyExc
 244:armwave.c     ****     assert(start_point < end_point);
 1473              		.loc 1 244 5 is_stmt 1 view .LVU434
 1474 0620 090055E1 		cmp	r5, r9	@ start_point, end_point
 1475 0624 5100002A 		bcs	.L93		@,
 245:armwave.c     **** 
 246:armwave.c     ****     /*
 247:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 248:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 249:armwave.c     **** 
 250:armwave.c     ****     if(target_height == 256) {
 251:armwave.c     ****         g_armwave_state.row_shift = 8;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 253:armwave.c     ****     } else if(target_height == 512) {
 254:armwave.c     ****         g_armwave_state.row_shift = 9;
 255:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 256:armwave.c     ****     } else if(target_height == 1024) {
 257:armwave.c     ****         g_armwave_state.row_shift = 10;
 258:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 259:armwave.c     ****     } else if(target_height == 2048) {
 260:armwave.c     ****         g_armwave_state.row_shift = 11;
 261:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 262:armwave.c     ****     }
 263:armwave.c     ****     */
 264:armwave.c     **** 
 265:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 266:armwave.c     ****     g_armwave_state.xstride = target_height;
 1476              		.loc 1 266 5 view .LVU435
 1477              	@ armwave.c:267:     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1478              		.loc 1 267 49 is_stmt 0 view .LVU436
 1479 0628 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1480 062c 5E7A9FED 		vldr.32	s14, .L96	@ tmp168,
 1481              	@ armwave.c:266:     g_armwave_state.xstride = target_height;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1482              		.loc 1 266 29 view .LVU437
 1483 0630 80419FE5 		ldr	r4, .L96+12	@ tmp224,
 1484              	@ armwave.c:272:     g_armwave_state.size = target_height * target_width;
 268:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 269:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 270:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 271:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 272:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1485              		.loc 1 272 42 view .LVU438
 1486 0634 970600E0 		mul	r0, r7, r6	@ tmp176, target_height, target_width
 1487              	@ armwave.c:267:     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1488              		.loc 1 267 49 view .LVU439
 1489 0638 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp167, target_height
 1490              	@ armwave.c:274:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 273:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 274:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1491              		.loc 1 274 68 view .LVU440
 1492 063c 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 1493              	@ armwave.c:273:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 273:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1494              		.loc 1 273 37 view .LVU441
 1495 0640 012CA0E3 		mov	r2, #256	@ tmp178,
 1496              	@ armwave.c:279:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 275:armwave.c     ****     g_armwave_state.target_width = target_width;
 276:armwave.c     ****     g_armwave_state.target_height = target_height;
 277:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 278:armwave.c     **** 
 279:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1497              		.loc 1 279 5 view .LVU442
 1498 0644 0310A0E1 		mov	r1, r3	@, _10
 1499              	@ armwave.c:272:     g_armwave_state.size = target_height * target_width;
 272:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1500              		.loc 1 272 26 view .LVU443
 1501 0648 500084E5 		str	r0, [r4, #80]	@ tmp176, g_armwave_state.size
 1502              	@ armwave.c:277:     g_armwave_state.wave_length = end_point - start_point;
 277:armwave.c     **** 
 1503              		.loc 1 277 45 view .LVU444
 1504 064c 055049E0 		sub	r5, r9, r5	@ _12, end_point, start_point
 1505              	.LVL111:
 1506              	@ armwave.c:279:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1507              		.loc 1 279 5 view .LVU445
 1508 0650 64019FE5 		ldr	r0, .L96+16	@,
 1509              	@ armwave.c:274:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 274:armwave.c     ****     g_armwave_state.target_width = target_width;
 1510              		.loc 1 274 34 view .LVU446
 1511 0654 4C3084E5 		str	r3, [r4, #76]	@ _10, g_armwave_state.ch_buff_size
 1512              	@ armwave.c:267:     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1513              		.loc 1 267 49 view .LVU447
 1514 0658 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp167, tmp168
 1515              	@ armwave.c:266:     g_armwave_state.xstride = target_height;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1516              		.loc 1 266 29 view .LVU448
 1517 065c 287084E5 		str	r7, [r4, #40]	@ target_height, g_armwave_state.xstride
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1518              		.loc 1 267 5 is_stmt 1 view .LVU449
 1519              	@ armwave.c:269:     g_armwave_state.wave_stride = wave_stride;
 269:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1520              		.loc 1 269 33 is_stmt 0 view .LVU450
 1521 0660 30A084E5 		str	r10, [r4, #48]	@ wave_stride, g_armwave_state.wave_stride
 1522              	@ armwave.c:270:     g_armwave_state.waves_max = waves_max;
 270:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1523              		.loc 1 270 31 view .LVU451
 1524 0664 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves_max
 1525              	@ armwave.c:271:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 271:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1526              		.loc 1 271 27 view .LVU452
 1527 0668 348084E5 		str	r8, [r4, #52]	@ waves_max, g_armwave_state.waves
 1528              	@ armwave.c:276:     g_armwave_state.target_height = target_height;
 276:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1529              		.loc 1 276 35 view .LVU453
 1530 066c F465C4E1 		strd	r6, [r4, #84]	@, tmp224,
 1531              	@ armwave.c:277:     g_armwave_state.wave_length = end_point - start_point;
 277:armwave.c     **** 
 1532              		.loc 1 277 33 view .LVU454
 1533 0670 485084E5 		str	r5, [r4, #72]	@ _12, g_armwave_state.wave_length
 1534              	@ armwave.c:273:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 273:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1535              		.loc 1 273 37 view .LVU455
 1536 0674 3C2084E5 		str	r2, [r4, #60]	@ tmp178, g_armwave_state.bitdepth_height
 1537              	@ armwave.c:268:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1538              		.loc 1 268 30 view .LVU456
 1539 0678 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp171, _3
 1540              	@ armwave.c:267:     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1541              		.loc 1 267 33 view .LVU457
 1542 067c 097AC4ED 		vstr.32	s15, [r4, #36]	@ _3, g_armwave_state.vscale_frac
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1543              		.loc 1 268 5 is_stmt 1 view .LVU458
 1544              	@ armwave.c:268:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1545              		.loc 1 268 30 is_stmt 0 view .LVU459
 1546 0680 0B7A84ED 		vstr.32	s14, [r4, #44]	@ int	@ tmp171, g_armwave_state.vscale
 269:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1547              		.loc 1 269 5 is_stmt 1 view .LVU460
 270:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1548              		.loc 1 270 5 view .LVU461
 271:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1549              		.loc 1 271 5 view .LVU462
 272:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1550              		.loc 1 272 5 view .LVU463
 273:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1551              		.loc 1 273 5 view .LVU464
 274:armwave.c     ****     g_armwave_state.target_width = target_width;
 1552              		.loc 1 274 5 view .LVU465
 275:armwave.c     ****     g_armwave_state.target_height = target_height;
 1553              		.loc 1 275 5 view .LVU466
 276:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1554              		.loc 1 276 5 view .LVU467
 277:armwave.c     **** 
 1555              		.loc 1 277 5 view .LVU468
 1556              		.loc 1 279 5 view .LVU469
 1557 0684 FEFFFFEB 		bl	printf		@
 1558              	.LVL112:
 280:armwave.c     **** 
 281:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 282:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 283:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 284:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1559              		.loc 1 284 5 view .LVU470
 1560              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer != NULL)
 285:armwave.c     **** 
 286:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1561              		.loc 1 286 23 is_stmt 0 view .LVU471
 1562 0688 040094E5 		ldr	r0, [r4, #4]	@ _14, g_armwave_state.ch1_buffer
 1563              	@ armwave.c:284:     g_armwave_state.slice_height = 64;  
 284:armwave.c     **** 
 1564              		.loc 1 284 34 view .LVU472
 1565 068c 4030A0E3 		mov	r3, #64	@ tmp185,
 1566              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer != NULL)
 1567              		.loc 1 286 7 view .LVU473
 1568 0690 000050E3 		cmp	r0, #0	@ _14,
 1569              	@ armwave.c:284:     g_armwave_state.slice_height = 64;  
 284:armwave.c     **** 
 1570              		.loc 1 284 34 view .LVU474
 1571 0694 403084E5 		str	r3, [r4, #64]	@ tmp185, g_armwave_state.slice_height
 1572              		.loc 1 286 5 is_stmt 1 view .LVU475
 1573              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer != NULL)
 1574              		.loc 1 286 7 is_stmt 0 view .LVU476
 1575 0698 0000000A 		beq	.L84		@,
 287:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1576              		.loc 1 287 9 is_stmt 1 view .LVU477
 1577 069c FEFFFFEB 		bl	free		@
 1578              	.LVL113:
 1579              	.L84:
 288:armwave.c     **** 
 289:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1580              		.loc 1 289 5 view .LVU478
 1581              	@ armwave.c:289:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1582              		.loc 1 289 34 is_stmt 0 view .LVU479
 1583 06a0 0110A0E3 		mov	r1, #1	@,
 1584 06a4 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.ch_buff_size
 1585 06a8 FEFFFFEB 		bl	calloc		@
 1586              	.LVL114:
 1587              	@ armwave.c:291:     assert(g_armwave_state.ch1_buffer != NULL);
 290:armwave.c     **** 
 291:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1588              		.loc 1 291 5 view .LVU480
 1589 06ac 000050E3 		cmp	r0, #0	@ _17,
 1590              	@ armwave.c:289:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 289:armwave.c     **** 
 1591              		.loc 1 289 34 view .LVU481
 1592 06b0 0070A0E1 		mov	r7, r0	@ _17,
 1593              	@ armwave.c:289:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 289:armwave.c     **** 
 1594              		.loc 1 289 32 view .LVU482
 1595 06b4 040084E5 		str	r0, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 1596              		.loc 1 291 5 is_stmt 1 view .LVU483
 1597 06b8 3600000A 		beq	.L94		@,
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1598              		.loc 1 294 5 view .LVU484
 1599              	.LVL115:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1600              		.loc 1 295 5 view .LVU485
 1601              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 1602              		.loc 1 295 34 is_stmt 0 view .LVU486
 1603 06bc 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1604              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 1605              		.loc 1 295 22 view .LVU487
 1606 06c0 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1607              	@ armwave.c:297:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 297:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1608              		.loc 1 297 40 view .LVU488
 1609 06c4 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1610              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1611              		.loc 1 295 34 view .LVU489
 1612 06c8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1613              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1614              		.loc 1 295 22 view .LVU490
 1615 06cc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp196, _12
 1616              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1617              		.loc 1 296 60 view .LVU491
 1618 06d0 107AD4ED 		vldr.32	s15, [r4, #64]	@ int	@ tmp230, g_armwave_state.slice_height
 1619 06d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp200, tmp230
 1620              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1621              		.loc 1 295 22 view .LVU492
 1622 06d8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1623              	.LVL116:
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1624              		.loc 1 296 5 is_stmt 1 view .LVU493
 1625              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1626              		.loc 1 296 60 is_stmt 0 view .LVU494
 1627 06dc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1628              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1629              		.loc 1 296 41 view .LVU495
 1630 06e0 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp203, tmp202
 1631 06e4 117AC4ED 		vstr.32	s15, [r4, #68]	@ int	@ tmp203, g_armwave_state.slice_record_height
 1632              		.loc 1 297 5 is_stmt 1 view .LVU496
 1633              	@ armwave.c:297:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1634              		.loc 1 297 40 is_stmt 0 view .LVU497
 1635 06e8 FEFFFFEB 		bl	malloc		@
 1636              	.LVL117:
 1637              	@ armwave.c:299:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 298:armwave.c     **** 
 299:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1638              		.loc 1 299 5 view .LVU498
 1639 06ec 000050E3 		cmp	r0, #0	@ _25,
 1640              	@ armwave.c:297:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 297:armwave.c     **** 
 1641              		.loc 1 297 40 view .LVU499
 1642 06f0 0060A0E1 		mov	r6, r0	@ _25,
 1643              	@ armwave.c:297:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 297:armwave.c     **** 
 1644              		.loc 1 297 38 view .LVU500
 1645 06f4 800084E5 		str	r0, [r4, #128]	@ _25, g_armwave_state.xcoord_to_xpixel
 1646              		.loc 1 299 5 is_stmt 1 view .LVU501
 1647 06f8 2100000A 		beq	.L95		@,
 1648              	@ armwave.c:302:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 300:armwave.c     **** 
 301:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1649              		.loc 1 302 54 is_stmt 0 view .LVU502
 1650 06fc 2B7ADFED 		vldr.32	s15, .L96+4	@ tmp212,
 1651 0700 02C040E2 		sub	ip, r0, #2	@ ivtmp.77, _25,
 1652              	@ armwave.c:301:     for(xx = 0; xx < length; xx++) {
 301:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1653              		.loc 1 301 12 view .LVU503
 1654 0704 0030A0E3 		mov	r3, #0	@ xx,
 1655              	@ armwave.c:302:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1656              		.loc 1 302 54 view .LVU504
 1657 0708 887A87EE 		vdiv.f32	s14, s15, s16	@ _26, tmp212, points_per_pixel
 1658              	.L87:
 1659              	.LVL118:
 1660              		.loc 1 302 9 is_stmt 1 discriminator 3 view .LVU505
 1661              	@ armwave.c:302:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1662              		.loc 1 302 74 is_stmt 0 discriminator 3 view .LVU506
 1663 070c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1664              	@ armwave.c:301:     for(xx = 0; xx < length; xx++) {
 301:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1665              		.loc 1 301 32 discriminator 3 view .LVU507
 1666 0710 013083E2 		add	r3, r3, #1	@ xx, xx,
 1667              	.LVL119:
 1668              	@ armwave.c:301:     for(xx = 0; xx < length; xx++) {
 301:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1669              		.loc 1 301 5 discriminator 3 view .LVU508
 1670 0714 030055E1 		cmp	r5, r3	@ _12, xx
 1671              	@ armwave.c:302:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1672              		.loc 1 302 74 discriminator 3 view .LVU509
 1673 0718 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp213, xx
 1674 071c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp214, tmp213, _26
 1675              	@ armwave.c:302:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1676              		.loc 1 302 46 discriminator 3 view .LVU510
 1677 0720 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp215, tmp214
 1678 0724 902A17EE 		vmov	r2, s15	@ int	@ tmp215, tmp215
 1679 0728 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp215, MEM[base: _94, offset: 0B]
 1680              	@ armwave.c:301:     for(xx = 0; xx < length; xx++) {
 301:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1681              		.loc 1 301 5 discriminator 3 view .LVU511
 1682 072c F6FFFF1A 		bne	.L87		@,
 303:armwave.c     **** 
 304:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 305:armwave.c     ****     }
 306:armwave.c     **** 
 307:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1683              		.loc 1 307 5 is_stmt 1 view .LVU512
 1684              	@ armwave.c:307:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1685              		.loc 1 307 34 is_stmt 0 view .LVU513
 1686 0730 500094E5 		ldr	r0, [r4, #80]	@ g_armwave_state.size, g_armwave_state.size
 1687 0734 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1688 0738 FEFFFFEB 		bl	malloc		@
 1689              	.LVL120:
 1690              	@ armwave.c:309:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 308:armwave.c     **** 
 309:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1691              		.loc 1 309 5 view .LVU514
 1692 073c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1693 0740 0620A0E1 		mov	r2, r6	@, _25
 1694 0744 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1695 0748 0710A0E1 		mov	r1, r7	@, _17
 1696              	@ armwave.c:307:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 307:armwave.c     **** 
 1697              		.loc 1 307 34 view .LVU515
 1698 074c 00C0A0E1 		mov	ip, r0	@ tmp219,
 1699              	@ armwave.c:309:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1700              		.loc 1 309 5 view .LVU516
 1701 0750 0030A0E1 		mov	r3, r0	@, tmp219
 1702 0754 64009FE5 		ldr	r0, .L96+20	@,
 1703              	@ armwave.c:307:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 307:armwave.c     **** 
 1704              		.loc 1 307 32 view .LVU517
 1705 0758 64C084E5 		str	ip, [r4, #100]	@ tmp219, g_armwave_state.out_pixbuf
 1706              		.loc 1 309 5 is_stmt 1 view .LVU518
 1707 075c FEFFFFEB 		bl	printf		@
 1708              	.LVL121:
 310:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 311:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 314:armwave.c     **** 
 315:armwave.c     ****     malloc_stats();
 1709              		.loc 1 315 5 view .LVU519
 1710              	@ armwave.c:316: }
 316:armwave.c     **** }
 1711              		.loc 1 316 1 is_stmt 0 view .LVU520
 1712 0760 10D08DE2 		add	sp, sp, #16	@,,
 1713              		.cfi_remember_state
 1714              		.cfi_def_cfa_offset 40
 1715              		@ sp needed	@
 1716 0764 028BBDEC 		vldm	sp!, {d8}	@
 1717              		.cfi_restore 80
 1718              		.cfi_restore 81
 1719              		.cfi_def_cfa_offset 32
 1720              	.LVL122:
 1721              		.loc 1 316 1 view .LVU521
 1722 0768 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1723              		.cfi_restore 14
 1724              		.cfi_restore 10
 1725              		.cfi_restore 9
 1726              		.cfi_restore 8
 1727              		.cfi_restore 7
 1728              		.cfi_restore 6
 1729              		.cfi_restore 5
 1730              		.cfi_restore 4
 1731              		.cfi_def_cfa_offset 0
 1732              	.LVL123:
 1733              	@ armwave.c:315:     malloc_stats();
 315:armwave.c     **** }
 1734              		.loc 1 315 5 view .LVU522
 1735 076c FEFFFFEA 		b	malloc_stats		@
 1736              	.LVL124:
 1737              	.L93:
 1738              		.cfi_restore_state
 244:armwave.c     **** 
 1739              		.loc 1 244 5 is_stmt 1 discriminator 1 view .LVU523
 1740 0770 4C309FE5 		ldr	r3, .L96+24	@,
 1741 0774 F420A0E3 		mov	r2, #244	@,
 1742 0778 48109FE5 		ldr	r1, .L96+28	@,
 1743 077c 48009FE5 		ldr	r0, .L96+32	@,
 1744 0780 FEFFFFEB 		bl	__assert_fail		@
 1745              	.LVL125:
 1746              	.L95:
 299:armwave.c     **** 
 1747              		.loc 1 299 5 discriminator 1 view .LVU524
 1748 0784 38309FE5 		ldr	r3, .L96+24	@,
 1749 0788 40209FE5 		ldr	r2, .L96+36	@,
 1750 078c 34109FE5 		ldr	r1, .L96+28	@,
 1751 0790 3C009FE5 		ldr	r0, .L96+40	@,
 1752 0794 FEFFFFEB 		bl	__assert_fail		@
 1753              	.LVL126:
 1754              	.L94:
 291:armwave.c     **** 
 1755              		.loc 1 291 5 discriminator 1 view .LVU525
 1756 0798 24309FE5 		ldr	r3, .L96+24	@,
 1757 079c 34209FE5 		ldr	r2, .L96+44	@,
 1758 07a0 20109FE5 		ldr	r1, .L96+28	@,
 1759 07a4 30009FE5 		ldr	r0, .L96+48	@,
 1760 07a8 FEFFFFEB 		bl	__assert_fail		@
 1761              	.LVL127:
 1762              	.L97:
 1763              		.align	2
 1764              	.L96:
 1765 07ac 00007F43 		.word	1132396544
 1766 07b0 0000803F 		.word	1065353216
 1767 07b4 40000000 		.word	.LC4
 1768 07b8 00000000 		.word	g_armwave_state
 1769 07bc 84000000 		.word	.LC6
 1770 07c0 E8000000 		.word	.LC9
 1771 07c4 34000000 		.word	.LANCHOR0+52
 1772 07c8 20000000 		.word	.LC2
 1773 07cc 6C000000 		.word	.LC5
 1774 07d0 2B010000 		.word	299
 1775 07d4 BC000000 		.word	.LC8
 1776 07d8 23010000 		.word	291
 1777 07dc 98000000 		.word	.LC7
 1778              		.cfi_endproc
 1779              	.LFE62:
 1781              		.align	2
 1782              		.global	armwave_set_wave_pointer
 1783              		.syntax unified
 1784              		.arm
 1785              		.fpu vfp
 1787              	armwave_set_wave_pointer:
 1788              	.LVL128:
 1789              	.LFB63:
 317:armwave.c     **** 
 318:armwave.c     **** /*
 319:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 320:armwave.c     ****  * in the future.
 321:armwave.c     ****  */
 322:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 323:armwave.c     **** {
 1790              		.loc 1 323 1 view -0
 1791              		.cfi_startproc
 1792              		@ args = 0, pretend = 0, frame = 0
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1794              		.loc 1 324 5 view .LVU527
 1795 07e0 000050E3 		cmp	r0, #0	@ wave_buffer
 1796              		.loc 1 324 5 is_stmt 0 view .LVU528
 1797 07e4 0200000A 		beq	.L103		@,
 325:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1798              		.loc 1 325 5 is_stmt 1 view .LVU529
 1799              	@ armwave.c:325:     g_armwave_state.wave_buffer = wave_buffer;
 1800              		.loc 1 325 33 is_stmt 0 view .LVU530
 1801 07e8 1C309FE5 		ldr	r3, .L104	@ tmp115,
 1802 07ec 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1803 07f0 1EFF2FE1 		bx	lr	@
 1804              	.L103:
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1805              		.loc 1 324 5 is_stmt 1 discriminator 1 view .LVU531
 1806              	@ armwave.c:323: {
 323:armwave.c     ****     assert(wave_buffer != NULL);
 1807              		.loc 1 323 1 is_stmt 0 discriminator 1 view .LVU532
 1808 07f4 10402DE9 		push	{r4, lr}	@
 1809              		.cfi_def_cfa_offset 8
 1810              		.cfi_offset 4, -8
 1811              		.cfi_offset 14, -4
 1812              	@ armwave.c:324:     assert(wave_buffer != NULL);
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1813              		.loc 1 324 5 discriminator 1 view .LVU533
 1814 07f8 512FA0E3 		mov	r2, #324	@,
 1815 07fc 0C309FE5 		ldr	r3, .L104+4	@,
 1816 0800 0C109FE5 		ldr	r1, .L104+8	@,
 1817 0804 0C009FE5 		ldr	r0, .L104+12	@,
 1818              	.LVL129:
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1819              		.loc 1 324 5 discriminator 1 view .LVU534
 1820 0808 FEFFFFEB 		bl	__assert_fail		@
 1821              	.LVL130:
 1822              	.L105:
 1823              		.align	2
 1824              	.L104:
 1825 080c 00000000 		.word	g_armwave_state
 1826 0810 4C000000 		.word	.LANCHOR0+76
 1827 0814 20000000 		.word	.LC2
 1828 0818 0C010000 		.word	.LC10
 1829              		.cfi_endproc
 1830              	.LFE63:
 1832              		.align	2
 1833              		.global	armwave_set_wave_pointer_as_testbuf
 1834              		.syntax unified
 1835              		.arm
 1836              		.fpu vfp
 1838              	armwave_set_wave_pointer_as_testbuf:
 1839              	.LVL131:
 1840              	.LFB64:
 326:armwave.c     **** }
 327:armwave.c     **** 
 328:armwave.c     **** /*
 329:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 330:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 331:armwave.c     ****  */
 332:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 333:armwave.c     **** {
 1841              		.loc 1 333 1 is_stmt 1 view -0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              		@ link register save eliminated.
 334:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1846              		.loc 1 334 5 view .LVU536
 1847              	@ armwave.c:334:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1848              		.loc 1 334 29 is_stmt 0 view .LVU537
 1849 081c 24309FE5 		ldr	r3, .L109	@ tmp117,
 1850              	@ armwave.c:334:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1851              		.loc 1 334 7 view .LVU538
 1852 0820 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1853 0824 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1854 0828 0400003A 		bcc	.L108		@,
 335:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 336:armwave.c     ****         return;
 337:armwave.c     ****     }
 338:armwave.c     **** 
 339:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1855              		.loc 1 339 5 is_stmt 1 view .LVU539
 1856              	@ armwave.c:339:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1857              		.loc 1 339 111 is_stmt 0 view .LVU540
 1858 082c 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1859              	@ armwave.c:339:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1860              		.loc 1 339 68 view .LVU541
 1861 0830 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1862 0834 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1863              	.LVL132:
 1864              	@ armwave.c:339:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1865              		.loc 1 339 33 view .LVU542
 1866 0838 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1867              	@ armwave.c:340: }
 340:armwave.c     **** }
 1868              		.loc 1 340 1 view .LVU543
 1869 083c 1EFF2FE1 		bx	lr	@
 1870              	.LVL133:
 1871              	.L108:
 335:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1872              		.loc 1 335 9 is_stmt 1 view .LVU544
 1873 0840 04009FE5 		ldr	r0, .L109+4	@,
 1874              	.LVL134:
 335:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1875              		.loc 1 335 9 is_stmt 0 view .LVU545
 1876 0844 FEFFFFEA 		b	puts		@
 1877              	.LVL135:
 1878              	.L110:
 1879              		.align	2
 1880              	.L109:
 1881 0848 00000000 		.word	g_armwave_state
 1882 084c 20010000 		.word	.LC11
 1883              		.cfi_endproc
 1884              	.LFE64:
 1886              		.align	2
 1887              		.global	armwave_set_wave_pointer_u32
 1888              		.syntax unified
 1889              		.arm
 1890              		.fpu vfp
 1892              	armwave_set_wave_pointer_u32:
 1893              	.LVL136:
 1894              	.LFB65:
 341:armwave.c     **** 
 342:armwave.c     **** /*
 343:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 344:armwave.c     ****  * disjointed buffers in the future.
 345:armwave.c     ****  */
 346:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 347:armwave.c     **** {
 1895              		.loc 1 347 1 is_stmt 1 view -0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 0
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1899              		.loc 1 348 5 view .LVU547
 1900 0850 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1901              		.loc 1 348 5 is_stmt 0 view .LVU548
 1902 0854 0200000A 		beq	.L116		@,
 349:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1903              		.loc 1 349 5 is_stmt 1 view .LVU549
 1904              	@ armwave.c:349:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1905              		.loc 1 349 33 is_stmt 0 view .LVU550
 1906 0858 1C309FE5 		ldr	r3, .L117	@ tmp116,
 1907 085c 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1908 0860 1EFF2FE1 		bx	lr	@
 1909              	.L116:
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1910              		.loc 1 348 5 is_stmt 1 discriminator 1 view .LVU551
 1911              	@ armwave.c:347: {
 347:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1912              		.loc 1 347 1 is_stmt 0 discriminator 1 view .LVU552
 1913 0864 10402DE9 		push	{r4, lr}	@
 1914              		.cfi_def_cfa_offset 8
 1915              		.cfi_offset 4, -8
 1916              		.cfi_offset 14, -4
 1917              	@ armwave.c:348:     assert(wave_buffer_ptr != 0);
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1918              		.loc 1 348 5 discriminator 1 view .LVU553
 1919 0868 572FA0E3 		mov	r2, #348	@,
 1920 086c 0C309FE5 		ldr	r3, .L117+4	@,
 1921 0870 0C109FE5 		ldr	r1, .L117+8	@,
 1922 0874 0C009FE5 		ldr	r0, .L117+12	@,
 1923              	.LVL137:
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1924              		.loc 1 348 5 discriminator 1 view .LVU554
 1925 0878 FEFFFFEB 		bl	__assert_fail		@
 1926              	.LVL138:
 1927              	.L118:
 1928              		.align	2
 1929              	.L117:
 1930 087c 00000000 		.word	g_armwave_state
 1931 0880 68000000 		.word	.LANCHOR0+104
 1932 0884 20000000 		.word	.LC2
 1933 0888 5C010000 		.word	.LC12
 1934              		.cfi_endproc
 1935              	.LFE65:
 1937              		.align	2
 1938              		.global	armwave_clear_buffer
 1939              		.syntax unified
 1940              		.arm
 1941              		.fpu vfp
 1943              	armwave_clear_buffer:
 1944              	.LVL139:
 1945              	.LFB66:
 350:armwave.c     **** }
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 354:armwave.c     ****  */
 355:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 356:armwave.c     **** {
 1946              		.loc 1 356 1 is_stmt 1 view -0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 357:armwave.c     ****     // Flags ignored, only one buffer cleared
 358:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1951              		.loc 1 358 5 view .LVU556
 1952              	@ armwave.c:358:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1953              		.loc 1 358 58 is_stmt 0 view .LVU557
 1954 088c 0C309FE5 		ldr	r3, .L120	@ tmp114,
 1955              	@ armwave.c:358:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1956              		.loc 1 358 5 view .LVU558
 1957 0890 0010A0E3 		mov	r1, #0	@,
 1958 0894 4C2093E5 		ldr	r2, [r3, #76]	@, g_armwave_state.ch_buff_size
 1959 0898 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1960              	.LVL140:
 1961              		.loc 1 358 5 view .LVU559
 1962 089c FEFFFFEA 		b	memset		@
 1963              	.LVL141:
 1964              	.L121:
 1965              		.align	2
 1966              	.L120:
 1967 08a0 00000000 		.word	g_armwave_state
 1968              		.cfi_endproc
 1969              	.LFE66:
 1971              		.align	2
 1972              		.global	armwave_set_channel_colour
 1973              		.syntax unified
 1974              		.arm
 1975              		.fpu vfp
 1977              	armwave_set_channel_colour:
 1978              	.LVL142:
 1979              	.LFB67:
 359:armwave.c     **** }
 360:armwave.c     **** 
 361:armwave.c     **** /*
 362:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 363:armwave.c     ****  */
 364:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 365:armwave.c     **** {
 1980              		.loc 1 365 1 is_stmt 1 view -0
 1981              		.cfi_startproc
 1982              		@ args = 0, pretend = 0, frame = 0
 1983              		@ frame_needed = 0, uses_anonymous_args = 0
 1984              		@ link register save eliminated.
 366:armwave.c     ****     // Only 1ch supported for now
 367:armwave.c     ****     switch(ch) {
 1985              		.loc 1 367 5 view .LVU561
 1986 08a4 010050E3 		cmp	r0, #1	@ ch,
 368:armwave.c     ****         case 1:
 369:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1987              		.loc 1 369 13 view .LVU562
 1988              	@ armwave.c:369:             g_armwave_state.ch1_color.r = r;
 1989              		.loc 1 369 41 is_stmt 0 view .LVU563
 1990 08a8 0C009F05 		ldreq	r0, .L124	@ tmp117,
 1991              	.LVL143:
 1992              		.loc 1 369 41 view .LVU564
 1993 08ac B816C001 		strheq	r1, [r0, #104]	@ movhi	@ r, g_armwave_state.ch1_color.r
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1994              		.loc 1 370 13 is_stmt 1 view .LVU565
 1995              	@ armwave.c:370:             g_armwave_state.ch1_color.g = g;
 1996              		.loc 1 370 41 is_stmt 0 view .LVU566
 1997 08b0 BA26C001 		strheq	r2, [r0, #106]	@ movhi	@ g, g_armwave_state.ch1_color.g
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1998              		.loc 1 371 13 is_stmt 1 view .LVU567
 1999              	@ armwave.c:371:             g_armwave_state.ch1_color.b = b;
 2000              		.loc 1 371 41 is_stmt 0 view .LVU568
 2001 08b4 BC36C001 		strheq	r3, [r0, #108]	@ movhi	@ b, g_armwave_state.ch1_color.b
 372:armwave.c     ****             break;
 2002              		.loc 1 372 13 is_stmt 1 view .LVU569
 2003              	@ armwave.c:374: }
 373:armwave.c     ****     }
 374:armwave.c     **** }
 2004              		.loc 1 374 1 is_stmt 0 view .LVU570
 2005 08b8 1EFF2FE1 		bx	lr	@
 2006              	.L125:
 2007              		.align	2
 2008              	.L124:
 2009 08bc 00000000 		.word	g_armwave_state
 2010              		.cfi_endproc
 2011              	.LFE67:
 2013              		.align	2
 2014              		.global	armwave_dump_ppm_debug
 2015              		.syntax unified
 2016              		.arm
 2017              		.fpu vfp
 2019              	armwave_dump_ppm_debug:
 2020              	.LVL144:
 2021              	.LFB68:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Dump a ppm of a buffer to a file.
 378:armwave.c     ****  */
 379:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 380:armwave.c     **** {
 2022              		.loc 1 380 1 is_stmt 1 view -0
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 0
 2025              		@ frame_needed = 0, uses_anonymous_args = 0
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2026              		.loc 1 381 5 view .LVU572
 2027              	@ armwave.c:380: {
 380:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2028              		.loc 1 380 1 is_stmt 0 view .LVU573
 2029 08c0 0130A0E1 		mov	r3, r1	@ fn, fn
 2030 08c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2031              		.cfi_def_cfa_offset 28
 2032              		.cfi_offset 4, -28
 2033              		.cfi_offset 5, -24
 2034              		.cfi_offset 6, -20
 2035              		.cfi_offset 7, -16
 2036              		.cfi_offset 8, -12
 2037              		.cfi_offset 9, -8
 2038              		.cfi_offset 14, -4
 2039 08c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2040 08cc 0CD04DE2 		sub	sp, sp, #12	@,,
 2041              		.cfi_def_cfa_offset 40
 2042              	@ armwave.c:381:     FILE *fp = fopen(fn, "wb");
 2043              		.loc 1 381 16 view .LVU574
 2044 08d0 C4109FE5 		ldr	r1, .L134	@,
 2045              	.LVL145:
 2046              		.loc 1 381 16 view .LVU575
 2047 08d4 0300A0E1 		mov	r0, r3	@, fn
 2048              	.LVL146:
 2049              		.loc 1 381 16 view .LVU576
 2050 08d8 FEFFFFEB 		bl	fopen64		@
 2051              	.LVL147:
 2052              	@ armwave.c:388:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 382:armwave.c     ****     uint32_t data;
 383:armwave.c     ****     int xx, yy;
 384:armwave.c     **** 
 385:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 386:armwave.c     **** 
 387:armwave.c     ****     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2053              		.loc 1 388 5 view .LVU577
 2054 08dc BC609FE5 		ldr	r6, .L134+4	@ tmp150,
 2055              	@ armwave.c:387:     fputs("P3\n", fp);
 387:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2056              		.loc 1 387 5 view .LVU578
 2057 08e0 0320A0E3 		mov	r2, #3	@,
 2058 08e4 0110A0E3 		mov	r1, #1	@,
 2059              	@ armwave.c:381:     FILE *fp = fopen(fn, "wb");
 381:armwave.c     ****     uint32_t data;
 2060              		.loc 1 381 16 view .LVU579
 2061 08e8 0070A0E1 		mov	r7, r0	@ fp,
 2062              	.LVL148:
 382:armwave.c     ****     uint32_t data;
 2063              		.loc 1 382 5 is_stmt 1 view .LVU580
 383:armwave.c     **** 
 2064              		.loc 1 383 5 view .LVU581
 387:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2065              		.loc 1 387 5 view .LVU582
 2066 08ec 0030A0E1 		mov	r3, r0	@, fp
 2067 08f0 AC009FE5 		ldr	r0, .L134+8	@,
 2068              	.LVL149:
 387:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2069              		.loc 1 387 5 is_stmt 0 view .LVU583
 2070 08f4 FEFFFFEB 		bl	fwrite		@
 2071              	.LVL150:
 2072              		.loc 1 388 5 is_stmt 1 view .LVU584
 2073 08f8 D425C6E1 		ldrd	r2, [r6, #84]	@, tmp150,
 2074 08fc A4109FE5 		ldr	r1, .L134+12	@,
 2075 0900 0700A0E1 		mov	r0, r7	@, fp
 2076 0904 FEFFFFEB 		bl	fprintf		@
 2077              	.LVL151:
 389:armwave.c     ****     fputs("255\n", fp);
 2078              		.loc 1 389 5 view .LVU585
 2079 0908 0420A0E3 		mov	r2, #4	@,
 2080 090c 0730A0E1 		mov	r3, r7	@, fp
 2081 0910 0110A0E3 		mov	r1, #1	@,
 2082 0914 90009FE5 		ldr	r0, .L134+16	@,
 2083 0918 FEFFFFEB 		bl	fwrite		@
 2084              	.LVL152:
 390:armwave.c     **** 
 391:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2085              		.loc 1 391 5 view .LVU586
 2086              	@ armwave.c:391:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2087              		.loc 1 391 37 is_stmt 0 view .LVU587
 2088 091c 582096E5 		ldr	r2, [r6, #88]	@ prephitmp_53, g_armwave_state.target_height
 2089              	@ armwave.c:391:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2090              		.loc 1 391 5 view .LVU588
 2091 0920 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2092 0924 180000DA 		ble	.L127		@,
 2093 0928 543096E5 		ldr	r3, [r6, #84]	@ _13, g_armwave_state.target_width
 2094              	@ armwave.c:396:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 395:armwave.c     **** 
 396:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2095              		.loc 1 396 13 view .LVU589
 2096 092c 7C909FE5 		ldr	r9, .L134+20	@ tmp152,
 2097              	@ armwave.c:391:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2098              		.loc 1 391 12 view .LVU590
 2099 0930 0050A0E3 		mov	r5, #0	@ yy,
 2100              	.LVL153:
 2101              	.L128:
 2102              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2103              		.loc 1 392 9 view .LVU591
 2104 0934 000053E3 		cmp	r3, #0	@ _13,
 2105              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2106              		.loc 1 392 16 view .LVU592
 2107 0938 0040A0C3 		movgt	r4, #0	@ xx,
 2108              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2109              		.loc 1 392 9 view .LVU593
 2110 093c 0F0000DA 		ble	.L130		@,
 2111              	.LVL154:
 2112              	.L129:
 393:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2113              		.loc 1 393 13 is_stmt 1 discriminator 3 view .LVU594
 2114              	@ armwave.c:393:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 393:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2115              		.loc 1 393 29 is_stmt 0 discriminator 3 view .LVU595
 2116 0940 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2117              	@ armwave.c:396:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2118              		.loc 1 396 13 discriminator 3 view .LVU596
 2119 0944 0910A0E1 		mov	r1, r9	@, tmp152
 2120 0948 0700A0E1 		mov	r0, r7	@, fp
 2121              	@ armwave.c:393:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 393:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2122              		.loc 1 393 18 discriminator 3 view .LVU597
 2123 094c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2124              	.LVL155:
 2125              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU598
 2126              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2127              		.loc 1 392 58 is_stmt 0 discriminator 3 view .LVU599
 2128 0950 014084E2 		add	r4, r4, #1	@ xx, xx,
 2129              	.LVL156:
 2130              	@ armwave.c:396:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2131              		.loc 1 396 81 discriminator 3 view .LVU600
 2132 0954 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2133              	@ armwave.c:396:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2134              		.loc 1 396 61 discriminator 3 view .LVU601
 2135 0958 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2136              	@ armwave.c:396:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2137              		.loc 1 396 13 discriminator 3 view .LVU602
 2138 095c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2139 0960 7330EFE6 		uxtb	r3, r3	@, tmp142
 2140 0964 00C08DE5 		str	ip, [sp]	@ tmp147,
 2141 0968 7220EFE6 		uxtb	r2, r2	@, data
 2142              	.LVL157:
 2143              		.loc 1 396 13 discriminator 3 view .LVU603
 2144 096c FEFFFFEB 		bl	fprintf		@
 2145              	.LVL158:
 2146              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2147              		.loc 1 392 41 discriminator 3 view .LVU604
 2148 0970 543096E5 		ldr	r3, [r6, #84]	@ _13, g_armwave_state.target_width
 2149              	@ armwave.c:392:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2150              		.loc 1 392 9 discriminator 3 view .LVU605
 2151 0974 040053E1 		cmp	r3, r4	@ _13, xx
 2152 0978 F0FFFFCA 		bgt	.L129		@,
 2153 097c 582096E5 		ldr	r2, [r6, #88]	@ prephitmp_53, g_armwave_state.target_height
 2154              	.LVL159:
 2155              	.L130:
 2156              	@ armwave.c:391:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2157              		.loc 1 391 55 discriminator 2 view .LVU606
 2158 0980 015085E2 		add	r5, r5, #1	@ yy, yy,
 2159              	.LVL160:
 2160              	@ armwave.c:391:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2161              		.loc 1 391 5 discriminator 2 view .LVU607
 2162 0984 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2163 0988 E9FFFFBA 		blt	.L128		@,
 2164              	.LVL161:
 2165              	.L127:
 397:armwave.c     ****         }
 398:armwave.c     ****     }
 399:armwave.c     **** 
 400:armwave.c     ****     fclose(fp);
 2166              		.loc 1 400 5 is_stmt 1 view .LVU608
 2167 098c 0700A0E1 		mov	r0, r7	@, fp
 2168              	@ armwave.c:401: }
 401:armwave.c     **** }
 2169              		.loc 1 401 1 is_stmt 0 view .LVU609
 2170 0990 0CD08DE2 		add	sp, sp, #12	@,,
 2171              		.cfi_def_cfa_offset 28
 2172              		@ sp needed	@
 2173 0994 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2174              		.cfi_restore 14
 2175              		.cfi_restore 9
 2176              		.cfi_restore 8
 2177              		.cfi_restore 7
 2178              		.cfi_restore 6
 2179              		.cfi_restore 5
 2180              		.cfi_restore 4
 2181              		.cfi_def_cfa_offset 0
 2182              	.LVL162:
 2183              	@ armwave.c:400:     fclose(fp);
 400:armwave.c     **** }
 2184              		.loc 1 400 5 view .LVU610
 2185 0998 FEFFFFEA 		b	fclose		@
 2186              	.LVL163:
 2187              	.L135:
 400:armwave.c     **** }
 2188              		.loc 1 400 5 view .LVU611
 2189              		.align	2
 2190              	.L134:
 2191 099c 74010000 		.word	.LC13
 2192 09a0 00000000 		.word	g_armwave_state
 2193 09a4 78010000 		.word	.LC14
 2194 09a8 7C010000 		.word	.LC15
 2195 09ac 84010000 		.word	.LC16
 2196 09b0 8C010000 		.word	.LC17
 2197              		.cfi_endproc
 2198              	.LFE68:
 2200              		.align	2
 2201              		.global	armwave_test_init
 2202              		.syntax unified
 2203              		.arm
 2204              		.fpu vfp
 2206              	armwave_test_init:
 2207              	.LVL164:
 2208              	.LFB69:
 402:armwave.c     **** 
 403:armwave.c     **** /*
 404:armwave.c     ****  * Initialise some test functionry.
 405:armwave.c     ****  */
 406:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 407:armwave.c     **** {
 2209              		.loc 1 407 1 is_stmt 1 view -0
 2210              		.cfi_startproc
 2211              		@ args = 0, pretend = 0, frame = 0
 2212              		@ frame_needed = 0, uses_anonymous_args = 0
 408:armwave.c     ****     test_create_gamma();
 2213              		.loc 1 408 5 view .LVU613
 2214              	.LBB12:
 2215              	.LBI12:
  45:armwave.c     **** {
 2216              		.loc 1 45 6 view .LVU614
  45:armwave.c     **** {
 2217              		.loc 1 45 6 is_stmt 0 view .LVU615
 2218              	.LBE12:
 2219              	@ armwave.c:407: {
 407:armwave.c     ****     test_create_gamma();
 2220              		.loc 1 407 1 view .LVU616
 2221 09b4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2222              		.cfi_def_cfa_offset 32
 2223              		.cfi_offset 4, -32
 2224              		.cfi_offset 5, -28
 2225              		.cfi_offset 6, -24
 2226              		.cfi_offset 7, -20
 2227              		.cfi_offset 8, -16
 2228              		.cfi_offset 9, -12
 2229              		.cfi_offset 10, -8
 2230              		.cfi_offset 14, -4
 2231 09b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2232              		.cfi_def_cfa_offset 56
 2233              		.cfi_offset 80, -56
 2234              		.cfi_offset 81, -52
 2235              		.cfi_offset 82, -48
 2236              		.cfi_offset 83, -44
 2237              		.cfi_offset 84, -40
 2238              		.cfi_offset 85, -36
 2239 09bc C0409FE5 		ldr	r4, .L140+20	@ ivtmp.91,
 2240              	.LBB15:
 2241              	.LBB13:
 2242              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2243              		.loc 1 51 32 view .LVU617
 2244 09c0 2EAA9FED 		vldr.32	s20, .L140+16	@ tmp136,
 2245              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2246              		.loc 1 51 26 view .LVU618
 2247 09c4 299B9FED 		vldr.64	d9, .L140	@ tmp151,
 2248              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2249              		.loc 1 51 49 view .LVU619
 2250 09c8 2A8B9FED 		vldr.64	d8, .L140+8	@ tmp139,
 2251 09cc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.91,
 2252              	.LBE13:
 2253              	.LBE15:
 2254              	@ armwave.c:407: {
 407:armwave.c     ****     test_create_gamma();
 2255              		.loc 1 407 1 view .LVU620
 2256 09d0 10D04DE2 		sub	sp, sp, #16	@,,
 2257              		.cfi_def_cfa_offset 72
 2258              	@ armwave.c:407: {
 407:armwave.c     ****     test_create_gamma();
 2259              		.loc 1 407 1 view .LVU621
 2260 09d4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2261 09d8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2262 09dc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2263 09e0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2264 09e4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.91,
 2265 09e8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2266              	.LVL165:
 2267              	.L137:
 2268              	.LBB16:
 2269              	.LBB14:
  51:armwave.c     ****     }
 2270              		.loc 1 51 9 is_stmt 1 view .LVU622
 2271              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2272              		.loc 1 51 32 is_stmt 0 view .LVU623
 2273 09ec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.91
 2274              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2275              		.loc 1 51 26 view .LVU624
 2276 09f0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2277              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2278              		.loc 1 51 32 view .LVU625
 2279 09f4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2280 09f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2281 09fc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2282              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2283              		.loc 1 51 26 view .LVU626
 2284 0a00 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2285 0a04 FEFFFFEB 		bl	pow		@
 2286              	.LVL166:
 2287              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2288              		.loc 1 51 49 view .LVU627
 2289 0a08 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2290              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2291              		.loc 1 51 24 view .LVU628
 2292 0a0c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2293 0a10 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2294 0a14 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2295              	.LVL167:
 2296              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2297              		.loc 1 50 5 view .LVU629
 2298 0a18 0A0054E1 		cmp	r4, r10	@ ivtmp.91, _39
 2299 0a1c F2FFFF1A 		bne	.L137		@,
 2300              	.LVL168:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2301              		.loc 1 50 5 view .LVU630
 2302              	.LBE14:
 2303              	.LBE16:
 409:armwave.c     **** 
 410:armwave.c     ****     // make ch1 yellowish by default
 411:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2304              		.loc 1 411 5 is_stmt 1 view .LVU631
 2305              	.LBB17:
 2306              	.LBI17:
 364:armwave.c     **** {
 2307              		.loc 1 364 6 view .LVU632
 2308              	.LBB18:
 367:armwave.c     ****         case 1:
 2309              		.loc 1 367 5 view .LVU633
 369:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2310              		.loc 1 369 13 view .LVU634
 370:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2311              		.loc 1 370 13 view .LVU635
 2312              	@ armwave.c:369:             g_armwave_state.ch1_color.r = r;
 369:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2313              		.loc 1 369 41 is_stmt 0 view .LVU636
 2314 0a20 60C09FE5 		ldr	ip, .L140+24	@ tmp142,
 2315 0a24 60409FE5 		ldr	r4, .L140+28	@ tmp143,
 2316              	.LBE18:
 2317              	.LBE17:
 2318              	@ armwave.c:413:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 412:armwave.c     **** 
 413:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2319              		.loc 1 413 5 view .LVU637
 2320 0a28 0000A0E3 		mov	r0, #0	@ tmp147,
 2321              	.LBB22:
 2322              	.LBB19:
 2323              	@ armwave.c:371:             g_armwave_state.ch1_color.b = b;
 371:armwave.c     ****             break;
 2324              		.loc 1 371 41 view .LVU638
 2325 0a2c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2326              	.LBE19:
 2327              	.LBE22:
 2328              	@ armwave.c:413:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2329              		.loc 1 413 5 view .LVU639
 2330 0a30 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2331 0a34 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2332 0a38 00808DE5 		str	r8, [sp]	@ render_width,
 2333 0a3c 0610A0E1 		mov	r1, r6	@, tmp3
 2334 0a40 0720A0E1 		mov	r2, r7	@, nwaves
 2335              	.LBB23:
 2336              	.LBB20:
 2337              	@ armwave.c:369:             g_armwave_state.ch1_color.r = r;
 369:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2338              		.loc 1 369 41 view .LVU640
 2339 0a44 68408CE5 		str	r4, [ip, #104]	@ tmp143, MEM[(short int *)&g_armwave_state + 104B]
 371:armwave.c     ****             break;
 2340              		.loc 1 371 13 is_stmt 1 view .LVU641
 2341              	.LBE20:
 2342              	.LBE23:
 2343              	@ armwave.c:413:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2344              		.loc 1 413 5 is_stmt 0 view .LVU642
 2345 0a48 0630A0E1 		mov	r3, r6	@, wave_size
 2346              	.LBB24:
 2347              	.LBB21:
 2348              	@ armwave.c:371:             g_armwave_state.ch1_color.b = b;
 371:armwave.c     ****             break;
 2349              		.loc 1 371 41 view .LVU643
 2350 0a4c BCE6CCE1 		strh	lr, [ip, #108]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 372:armwave.c     ****     }
 2351              		.loc 1 372 13 is_stmt 1 view .LVU644
 2352              	.LVL169:
 372:armwave.c     ****     }
 2353              		.loc 1 372 13 is_stmt 0 view .LVU645
 2354              	.LBE21:
 2355              	.LBE24:
 2356              		.loc 1 413 5 is_stmt 1 view .LVU646
 2357 0a50 FEFFFFEB 		bl	armwave_setup_render		@
 2358              	.LVL170:
 414:armwave.c     **** 
 415:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2359              		.loc 1 415 5 view .LVU647
 2360 0a54 34109FE5 		ldr	r1, .L140+32	@,
 2361 0a58 34009FE5 		ldr	r0, .L140+36	@,
 2362              	@ armwave.c:416: }
 416:armwave.c     **** }
 2363              		.loc 1 416 1 is_stmt 0 view .LVU648
 2364 0a5c 10D08DE2 		add	sp, sp, #16	@,,
 2365              		.cfi_def_cfa_offset 56
 2366              		@ sp needed	@
 2367 0a60 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2368              		.cfi_restore 84
 2369              		.cfi_restore 85
 2370              		.cfi_restore 82
 2371              		.cfi_restore 83
 2372              		.cfi_restore 80
 2373              		.cfi_restore 81
 2374              		.cfi_def_cfa_offset 32
 2375 0a64 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2376              		.cfi_restore 14
 2377              		.cfi_restore 10
 2378              		.cfi_restore 9
 2379              		.cfi_restore 8
 2380              		.cfi_restore 7
 2381              		.cfi_restore 6
 2382              		.cfi_restore 5
 2383              		.cfi_restore 4
 2384              		.cfi_def_cfa_offset 0
 2385              	.LVL171:
 2386              	@ armwave.c:415:     printf("armwave version: %s\n", ARMWAVE_VER);
 415:armwave.c     **** }
 2387              		.loc 1 415 5 view .LVU649
 2388 0a68 FEFFFFEA 		b	printf		@
 2389              	.LVL172:
 2390              	.L141:
 2391 0a6c 0000A0E1 		.align	3
 2392              	.L140:
 2393 0a70 000000C0 		.word	-1073741824
 2394 0a74 CCCCEC3F 		.word	1072483532
 2395 0a78 00000000 		.word	0
 2396 0a7c 00E06F40 		.word	1081073664
 2397 0a80 00007F43 		.word	1132396544
 2398 0a84 FFFFFFFF 		.word	gamma_table-1
 2399 0a88 00000000 		.word	g_armwave_state
 2400 0a8c F609F406 		.word	116656630
 2401 0a90 00000000 		.word	.LC0
 2402 0a94 08000000 		.word	.LC1
 2403              		.cfi_endproc
 2404              	.LFE69:
 2406              		.global	__aeabi_idiv
 2407              		.align	2
 2408              		.global	armwave_test_generate
 2409              		.syntax unified
 2410              		.arm
 2411              		.fpu vfp
 2413              	armwave_test_generate:
 2414              	.LFB70:
 417:armwave.c     **** 
 418:armwave.c     **** /*
 419:armwave.c     ****  * Fill buffers with test funtionry.
 420:armwave.c     ****  */
 421:armwave.c     **** void armwave_test_generate()
 422:armwave.c     **** {
 2415              		.loc 1 422 1 is_stmt 1 view -0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 24
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 423:armwave.c     ****     uint32_t yy;
 2419              		.loc 1 423 5 view .LVU651
 424:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2420              		.loc 1 424 5 view .LVU652
 2421              	@ armwave.c:422: {
 422:armwave.c     ****     uint32_t yy;
 2422              		.loc 1 422 1 is_stmt 0 view .LVU653
 2423 0a98 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2424              		.cfi_def_cfa_offset 36
 2425              		.cfi_offset 4, -36
 2426              		.cfi_offset 5, -32
 2427              		.cfi_offset 6, -28
 2428              		.cfi_offset 7, -24
 2429              		.cfi_offset 8, -20
 2430              		.cfi_offset 9, -16
 2431              		.cfi_offset 10, -12
 2432              		.cfi_offset 11, -8
 2433              		.cfi_offset 14, -4
 2434 0a9c 1CD04DE2 		sub	sp, sp, #28	@,,
 2435              		.cfi_def_cfa_offset 64
 2436              	@ armwave.c:424:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 2437              		.loc 1 424 38 view .LVU654
 2438 0aa0 18929FE5 		ldr	r9, .L161	@ tmp316,
 2439              	@ armwave.c:426:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 425:armwave.c     **** 
 426:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2440              		.loc 1 426 5 view .LVU655
 2441 0aa4 0010A0E3 		mov	r1, #0	@,
 2442              	@ armwave.c:424:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 424:armwave.c     **** 
 2443              		.loc 1 424 14 view .LVU656
 2444 0aa8 543099E5 		ldr	r3, [r9, #84]	@ xx_rem, g_armwave_state.target_width
 2445              	@ armwave.c:426:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2446              		.loc 1 426 5 view .LVU657
 2447 0aac 4C2099E5 		ldr	r2, [r9, #76]	@, g_armwave_state.ch_buff_size
 2448 0ab0 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 2449              	@ armwave.c:424:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 424:armwave.c     **** 
 2450              		.loc 1 424 14 view .LVU658
 2451 0ab4 0C308DE5 		str	r3, [sp, #12]	@ xx_rem, %sfp
 2452              	.LVL173:
 2453              		.loc 1 426 5 is_stmt 1 view .LVU659
 2454 0ab8 FEFFFFEB 		bl	memset		@
 2455              	.LVL174:
 427:armwave.c     **** 
 428:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 2456              		.loc 1 428 5 view .LVU660
 2457              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2458              		.loc 1 428 38 is_stmt 0 view .LVU661
 2459 0abc 544099E5 		ldr	r4, [r9, #84]	@ prephitmp_228, g_armwave_state.target_width
 2460              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2461              		.loc 1 428 69 view .LVU662
 2462 0ac0 406099E5 		ldr	r6, [r9, #64]	@ _45, g_armwave_state.slice_height
 2463              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2464              		.loc 1 428 52 view .LVU663
 2465 0ac4 0400A0E1 		mov	r0, r4	@, prephitmp_228
 2466 0ac8 0610A0E1 		mov	r1, r6	@, _45
 2467 0acc FEFFFFEB 		bl	__aeabi_idiv		@
 2468              	.LVL175:
 2469              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2470              		.loc 1 428 5 view .LVU664
 2471 0ad0 000050E3 		cmp	r0, #0	@ tmp229
 2472 0ad4 7400000A 		beq	.L153		@,
 2473 0ad8 345099E5 		ldr	r5, [r9, #52]	@ prephitmp_237, g_armwave_state.waves
 2474              	@ armwave.c:424:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 424:armwave.c     **** 
 2475              		.loc 1 424 53 view .LVU665
 2476 0adc 0030A0E3 		mov	r3, #0	@ ypos,
 2477 0ae0 10308DE5 		str	r3, [sp, #16]	@ ypos, %sfp
 2478              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 2479              		.loc 1 428 12 view .LVU666
 2480 0ae4 08308DE5 		str	r3, [sp, #8]	@ ypos, %sfp
 2481              	.LVL176:
 2482              	.L151:
 429:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 430:armwave.c     **** 
 431:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2483              		.loc 1 431 9 is_stmt 1 discriminator 3 view .LVU667
 2484 0ae8 08309DE5 		ldr	r3, [sp, #8]	@ yy, %sfp
 2485              	.LBB27:
 2486              	.LBB28:
 2487              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2488              		.loc 1 82 63 is_stmt 0 discriminator 3 view .LVU668
 2489 0aec 3C0099E5 		ldr	r0, [r9, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2490              	.LBE28:
 2491              	.LBE27:
 2492              	@ armwave.c:431:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2493              		.loc 1 431 9 discriminator 3 view .LVU669
 2494 0af0 442099E5 		ldr	r2, [r9, #68]	@ _9, g_armwave_state.slice_record_height
 2495 0af4 930603E0 		mul	r3, r3, r6	@ _7, yy, _45
 2496              	.LBB31:
 2497              	.LBB29:
 2498              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2499              		.loc 1 85 5 discriminator 3 view .LVU670
 2500 0af8 000055E3 		cmp	r5, #0	@ prephitmp_237,
 2501              	.LBE29:
 2502              	.LBE31:
 2503              	@ armwave.c:431:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2504              		.loc 1 431 9 discriminator 3 view .LVU671
 2505 0afc 04208DE5 		str	r2, [sp, #4]	@ _9, %sfp
 2506              	.LVL177:
 2507              	.LBB32:
 2508              	.LBI27:
  73:armwave.c     **** {
 2509              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU672
 2510              	.LBB30:
  75:armwave.c     ****     uint32_t value, word;
 2511              		.loc 1 75 5 discriminator 3 view .LVU673
  76:armwave.c     ****     uint8_t *wave_base;
 2512              		.loc 1 76 5 discriminator 3 view .LVU674
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2513              		.loc 1 77 5 discriminator 3 view .LVU675
  78:armwave.c     ****     uint8_t *write_buffer;
 2514              		.loc 1 78 5 discriminator 3 view .LVU676
  79:armwave.c     **** 
 2515              		.loc 1 79 5 discriminator 3 view .LVU677
  82:armwave.c     **** 
 2516              		.loc 1 82 5 discriminator 3 view .LVU678
 2517              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2518              		.loc 1 82 63 is_stmt 0 discriminator 3 view .LVU679
 2519 0b00 900300E0 		mul	r0, r0, r3	@ _32, g_armwave_state.bitdepth_height, _7
 2520              	@ armwave.c:82:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  82:armwave.c     **** 
 2521              		.loc 1 82 40 discriminator 3 view .LVU680
 2522 0b04 042099E5 		ldr	r2, [r9, #4]	@ _29, g_armwave_state.ch1_buffer
 2523              	.LVL178:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2524              		.loc 1 85 5 is_stmt 1 discriminator 3 view .LVU681
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2525              		.loc 1 85 5 is_stmt 0 discriminator 3 view .LVU682
 2526 0b08 540000DA 		ble	.L144		@,
 2527 0b0c 043043E2 		sub	r3, r3, #4	@ _158, _7,
 2528              	.LVL179:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2529              		.loc 1 85 5 discriminator 3 view .LVU683
 2530 0b10 14308DE5 		str	r3, [sp, #20]	@ _158, %sfp
 2531              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2532              		.loc 1 85 11 view .LVU684
 2533 0b14 0030A0E3 		mov	r3, #0	@ w,
 2534              	.LVL180:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2535              		.loc 1 85 11 view .LVU685
 2536 0b18 00308DE5 		str	r3, [sp]	@ w, %sfp
 2537              	.LVL181:
 2538              	.L150:
  87:armwave.c     **** 
 2539              		.loc 1 87 9 is_stmt 1 view .LVU686
 2540              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2541              		.loc 1 91 9 is_stmt 0 view .LVU687
 2542 0b1c 04109DE5 		ldr	r1, [sp, #4]	@ _9, %sfp
 2543              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2544              		.loc 1 87 64 view .LVU688
 2545 0b20 303099E5 		ldr	r3, [r9, #48]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2546              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2547              		.loc 1 91 9 view .LVU689
 2548 0b24 000051E3 		cmp	r1, #0	@ _9,
 2549              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2550              		.loc 1 87 64 view .LVU690
 2551 0b28 00109DE5 		ldr	r1, [sp]	@ w, %sfp
 2552              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2553              		.loc 1 87 36 view .LVU691
 2554 0b2c 144099E5 		ldr	r4, [r9, #20]	@ _33, g_armwave_state.wave_buffer
 2555              	@ armwave.c:87:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  87:armwave.c     **** 
 2556              		.loc 1 87 64 view .LVU692
 2557 0b30 930103E0 		mul	r3, r3, r1	@ _37, g_armwave_state.wave_stride, w
 2558              	.LVL182:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2559              		.loc 1 91 9 is_stmt 1 view .LVU693
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2560              		.loc 1 91 9 is_stmt 0 view .LVU694
 2561 0b34 4200000A 		beq	.L145		@,
 2562 0b38 14109DE5 		ldr	r1, [sp, #20]	@ _158, %sfp
 2563 0b3c 013083E0 		add	r3, r3, r1	@ tmp238, _37, _158
 2564              	.LVL183:
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2565              		.loc 1 91 9 view .LVU695
 2566 0b40 034084E0 		add	r4, r4, r3	@ ivtmp.97, _33, tmp238
 2567              	.LVL184:
 2568              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2569              		.loc 1 91 16 view .LVU696
 2570 0b44 0010A0E3 		mov	r1, #0	@ yy,
 2571              	.LVL185:
 2572              	.L149:
  92:armwave.c     **** 
 2573              		.loc 1 92 13 is_stmt 1 view .LVU697
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2574              		.loc 1 102 17 view .LVU698
 103:armwave.c     ****                 word >>= 8;
 2575              		.loc 1 103 17 view .LVU699
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2576              		.loc 1 102 17 view .LVU700
 103:armwave.c     ****                 word >>= 8;
 2577              		.loc 1 103 17 view .LVU701
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2578              		.loc 1 102 17 view .LVU702
 103:armwave.c     ****                 word >>= 8;
 2579              		.loc 1 103 17 view .LVU703
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2580              		.loc 1 102 17 view .LVU704
 103:armwave.c     ****                 word >>= 8;
 2581              		.loc 1 103 17 view .LVU705
 2582              	@ armwave.c:92:             word = *(uint32_t*)(wave_base + yy);
  92:armwave.c     **** 
 2583              		.loc 1 92 18 is_stmt 0 view .LVU706
 2584 0b48 0430B4E5 		ldr	r3, [r4, #4]!	@ word, MEM[base: _259, offset: 0B]
 2585              	.LVL186:
  94:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2586              		.loc 1 94 13 is_stmt 1 view .LVU707
  96:armwave.c     ****                 
 2587              		.loc 1 96 17 view .LVU708
  99:armwave.c     ****                     continue;
 2588              		.loc 1 99 17 view .LVU709
 2589              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2590              		.loc 1 102 63 is_stmt 0 view .LVU710
 2591 0b4c 01B081E2 		add	fp, r1, #1	@ tmp264, yy,
 2592              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2593              		.loc 1 99 20 view .LVU711
 2594 0b50 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 2595 0b54 0180A003 		moveq	r8, #1	@ tmp240,
 2596 0b58 0080A013 		movne	r8, #0	@ tmp240,
 2597              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2598              		.loc 1 99 19 view .LVU712
 2599 0b5c FF005AE3 		cmp	r10, #255	@ scale_value,
 2600 0b60 01808803 		orreq	r8, r8, #1	@,, tmp245, tmp240
 2601 0b64 000058E3 		cmp	r8, #0	@ tmp245,
 2602              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2603              		.loc 1 102 63 view .LVU713
 2604 0b68 026081E2 		add	r6, r1, #2	@ tmp282, yy,
 2605 0b6c 035081E2 		add	r5, r1, #3	@ tmp299, yy,
 2606              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2607              		.loc 1 103 47 view .LVU714
 2608 0b70 00708AE0 		add	r7, r10, r0	@ tmp249, scale_value, _32
 2609              	@ armwave.c:104:                 word >>= 8;
 104:armwave.c     ****             }
 2610              		.loc 1 104 22 view .LVU715
 2611 0b74 23E4A0E1 		lsr	lr, r3, #8	@ word, word,
 2612 0b78 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2613              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2614              		.loc 1 99 19 view .LVU716
 2615 0b7c 2B00001A 		bne	.L152		@,
 2616              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2617              		.loc 1 102 63 view .LVU717
 2618 0b80 3C8099E5 		ldr	r8, [r9, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2619              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2620              		.loc 1 99 20 view .LVU718
 2621 0b84 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 2622              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2623              		.loc 1 103 47 view .LVU719
 2624 0b88 00A08EE0 		add	r10, lr, r0	@ tmp267, scale_value, _32
 2625 0b8c 987127E0 		mla	r7, r8, r1, r7	@ tmp250, g_armwave_state.bitdepth_height, yy, tmp249
 2626              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2627              		.loc 1 99 20 view .LVU720
 2628 0b90 0180A003 		moveq	r8, #1	@ tmp257,
 2629 0b94 0080A013 		movne	r8, #0	@ tmp257,
 2630              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2631              		.loc 1 99 19 view .LVU721
 2632 0b98 FF005EE3 		cmp	lr, #255	@ scale_value,
 2633 0b9c 01808803 		orreq	r8, r8, #1	@,, tmp262, tmp257
 2634              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2635              		.loc 1 103 47 view .LVU722
 2636 0ba0 07E0D2E7 		ldrb	lr, [r2, r7]	@ zero_extendqisi2	@ *_92, *_92
 2637              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2638              		.loc 1 99 19 view .LVU723
 2639 0ba4 000058E3 		cmp	r8, #0	@ tmp262,
 2640              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2641              		.loc 1 103 47 view .LVU724
 2642 0ba8 01E08EE2 		add	lr, lr, #1	@ tmp253, *_92,
 2643 0bac 07E0C2E7 		strb	lr, [r2, r7]	@ tmp253, *_92
 2644              	.LVL187:
 104:armwave.c     ****             }
 2645              		.loc 1 104 17 is_stmt 1 view .LVU725
  96:armwave.c     ****                 
 2646              		.loc 1 96 17 view .LVU726
  99:armwave.c     ****                     continue;
 2647              		.loc 1 99 17 view .LVU727
 2648              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2649              		.loc 1 99 19 is_stmt 0 view .LVU728
 2650 0bb0 1E00001A 		bne	.L152		@,
 2651              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2652              		.loc 1 102 63 view .LVU729
 2653 0bb4 3CE099E5 		ldr	lr, [r9, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2654              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2655              		.loc 1 99 20 view .LVU730
 2656 0bb8 FF701CE2 		ands	r7, ip, #255	@ scale_value, word,
 2657 0bbc 01C0A003 		moveq	ip, #1	@ tmp275,
 2658              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2659              		.loc 1 103 47 view .LVU731
 2660 0bc0 9EAB2EE0 		mla	lr, lr, fp, r10	@ tmp268, g_armwave_state.bitdepth_height, tmp264, tmp267
 2661              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2662              		.loc 1 99 20 view .LVU732
 2663 0bc4 00C0A013 		movne	ip, #0	@ tmp275,
 2664              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2665              		.loc 1 99 19 view .LVU733
 2666 0bc8 FF0057E3 		cmp	r7, #255	@ scale_value,
 2667 0bcc 01C08C03 		orreq	ip, ip, #1	@,, tmp280, tmp275
 2668              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2669              		.loc 1 103 47 view .LVU734
 2670 0bd0 008087E0 		add	r8, r7, r0	@ tmp285, scale_value, _32
 2671 0bd4 0E70D2E7 		ldrb	r7, [r2, lr]	@ zero_extendqisi2	@ *_119, *_119
 2672              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2673              		.loc 1 99 19 view .LVU735
 2674 0bd8 00005CE3 		cmp	ip, #0	@ tmp280,
 2675              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2676              		.loc 1 103 47 view .LVU736
 2677 0bdc 017087E2 		add	r7, r7, #1	@ tmp271, *_119,
 2678 0be0 0E70C2E7 		strb	r7, [r2, lr]	@ tmp271, *_119
 104:armwave.c     ****             }
 2679              		.loc 1 104 17 is_stmt 1 view .LVU737
 2680              	.LVL188:
  96:armwave.c     ****                 
 2681              		.loc 1 96 17 view .LVU738
  99:armwave.c     ****                     continue;
 2682              		.loc 1 99 17 view .LVU739
 2683              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2684              		.loc 1 99 19 is_stmt 0 view .LVU740
 2685 0be4 1100001A 		bne	.L152		@,
 2686              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2687              		.loc 1 102 63 view .LVU741
 2688 0be8 3CC099E5 		ldr	ip, [r9, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2689              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2690              		.loc 1 99 20 view .LVU742
 2691 0bec 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2692              	.LVL189:
  99:armwave.c     ****                     continue;
 2693              		.loc 1 99 20 view .LVU743
 2694 0bf0 01E0A003 		moveq	lr, #1	@ tmp292,
 2695              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2696              		.loc 1 103 47 view .LVU744
 2697 0bf4 9C862CE0 		mla	ip, ip, r6, r8	@ tmp286, g_armwave_state.bitdepth_height, tmp282, tmp285
 2698              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2699              		.loc 1 99 20 view .LVU745
 2700 0bf8 00E0A013 		movne	lr, #0	@ tmp292,
 2701              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2702              		.loc 1 103 47 view .LVU746
 2703 0bfc 037080E0 		add	r7, r0, r3	@ tmp302, _32, word
 2704              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2705              		.loc 1 99 19 view .LVU747
 2706 0c00 FF0053E3 		cmp	r3, #255	@ word,
 2707 0c04 0E30A011 		movne	r3, lr	@, tmp297, tmp292
 2708 0c08 01308E03 		orreq	r3, lr, #1	@,, tmp297, tmp292
 2709              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2710              		.loc 1 103 47 view .LVU748
 2711 0c0c 0CE0D2E7 		ldrb	lr, [r2, ip]	@ zero_extendqisi2	@ *_146, *_146
 2712              	@ armwave.c:99:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  99:armwave.c     ****                     continue;
 2713              		.loc 1 99 19 view .LVU749
 2714 0c10 000053E3 		cmp	r3, #0	@ tmp297,
 2715              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2716              		.loc 1 103 47 view .LVU750
 2717 0c14 01E08EE2 		add	lr, lr, #1	@ tmp289, *_146,
 2718 0c18 0CE0C2E7 		strb	lr, [r2, ip]	@ tmp289, *_146
 104:armwave.c     ****             }
 2719              		.loc 1 104 17 is_stmt 1 view .LVU751
 2720              	.LVL190:
  96:armwave.c     ****                 
 2721              		.loc 1 96 17 view .LVU752
  99:armwave.c     ****                     continue;
 2722              		.loc 1 99 17 view .LVU753
 2723              	@ armwave.c:102:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2724              		.loc 1 102 63 is_stmt 0 view .LVU754
 2725 0c1c 3C309905 		ldreq	r3, [r9, #60]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2726              	@ armwave.c:103:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     ****                 word >>= 8;
 2727              		.loc 1 103 47 view .LVU755
 2728 0c20 93752300 		mlaeq	r3, r3, r5, r7	@ tmp303, g_armwave_state.bitdepth_height, tmp299, tmp302
 2729 0c24 03C0D207 		ldrbeq	ip, [r2, r3]	@ zero_extendqisi2	@ *_173, *_173
 2730 0c28 01C08C02 		addeq	ip, ip, #1	@ tmp306, *_173,
 2731 0c2c 03C0C207 		strbeq	ip, [r2, r3]	@ tmp306, *_173
 104:armwave.c     ****             }
 2732              		.loc 1 104 17 is_stmt 1 view .LVU756
 2733              	.LVL191:
 2734              	.L152:
 2735              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2736              		.loc 1 91 9 is_stmt 0 view .LVU757
 2737 0c30 04309DE5 		ldr	r3, [sp, #4]	@ _9, %sfp
 2738              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2739              		.loc 1 91 37 view .LVU758
 2740 0c34 041081E2 		add	r1, r1, #4	@ yy, yy,
 2741              	.LVL192:
 2742              	@ armwave.c:91:         for(yy = 0; yy < height; yy += 4) {
  91:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2743              		.loc 1 91 9 view .LVU759
 2744 0c38 010053E1 		cmp	r3, r1	@ _9, yy
 2745 0c3c C1FFFF8A 		bhi	.L149		@,
 2746 0c40 345099E5 		ldr	r5, [r9, #52]	@ prephitmp_237, g_armwave_state.waves
 2747              	.LVL193:
 2748              	.L145:
 2749              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2750              		.loc 1 85 44 view .LVU760
 2751 0c44 00309DE5 		ldr	r3, [sp]	@ w, %sfp
 2752 0c48 013083E2 		add	r3, r3, #1	@ w, w,
 2753              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2754              		.loc 1 85 5 view .LVU761
 2755 0c4c 050053E1 		cmp	r3, r5	@ w, prephitmp_237
 2756              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2757              		.loc 1 85 44 view .LVU762
 2758 0c50 00308DE5 		str	r3, [sp]	@ w, %sfp
 2759              	.LVL194:
 2760              	@ armwave.c:85:     for(w = 0; w < g_armwave_state.waves; w++) {
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2761              		.loc 1 85 5 view .LVU763
 2762 0c54 B0FFFFBA 		blt	.L150		@,
 2763 0c58 406099E5 		ldr	r6, [r9, #64]	@ _45, g_armwave_state.slice_height
 2764 0c5c 544099E5 		ldr	r4, [r9, #84]	@ prephitmp_228, g_armwave_state.target_width
 2765              	.LVL195:
 2766              	.L144:
  85:armwave.c     ****         //printf("wave_buffer=0x%08x\n", g_armwave_state.wave_buffer);
 2767              		.loc 1 85 5 view .LVU764
 2768              	.LBE30:
 2769              	.LBE32:
 432:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2770              		.loc 1 432 9 is_stmt 1 discriminator 3 view .LVU765
 2771              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2772              		.loc 1 428 52 is_stmt 0 discriminator 3 view .LVU766
 2773 0c60 0610A0E1 		mov	r1, r6	@, _45
 2774 0c64 0400A0E1 		mov	r0, r4	@, prephitmp_228
 2775              	.LVL196:
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2776              		.loc 1 428 52 discriminator 3 view .LVU767
 2777 0c68 FEFFFFEB 		bl	__aeabi_idiv		@
 2778              	.LVL197:
 2779              	@ armwave.c:432:         xx_rem -= g_armwave_state.slice_height;
 2780              		.loc 1 432 16 discriminator 3 view .LVU768
 2781 0c6c 0C209DE5 		ldr	r2, [sp, #12]	@ xx_rem, %sfp
 2782              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2783              		.loc 1 428 87 discriminator 3 view .LVU769
 2784 0c70 08309DE5 		ldr	r3, [sp, #8]	@ yy, %sfp
 2785              	@ armwave.c:432:         xx_rem -= g_armwave_state.slice_height;
 2786              		.loc 1 432 16 discriminator 3 view .LVU770
 2787 0c74 062042E0 		sub	r2, r2, r6	@ xx_rem, xx_rem, _45
 2788 0c78 0C208DE5 		str	r2, [sp, #12]	@ xx_rem, %sfp
 2789              	.LVL198:
 433:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2790              		.loc 1 433 9 is_stmt 1 discriminator 3 view .LVU771
 2791              	@ armwave.c:433:         ypos += g_armwave_state.slice_height;
 2792              		.loc 1 433 14 is_stmt 0 discriminator 3 view .LVU772
 2793 0c7c 10209DE5 		ldr	r2, [sp, #16]	@ ypos, %sfp
 2794              	.LVL199:
 2795              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2796              		.loc 1 428 87 discriminator 3 view .LVU773
 2797 0c80 013083E2 		add	r3, r3, #1	@ yy, yy,
 2798              	@ armwave.c:433:         ypos += g_armwave_state.slice_height;
 2799              		.loc 1 433 14 discriminator 3 view .LVU774
 2800 0c84 062082E0 		add	r2, r2, r6	@ ypos, ypos, _45
 2801              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2802              		.loc 1 428 87 discriminator 3 view .LVU775
 2803 0c88 08308DE5 		str	r3, [sp, #8]	@ yy, %sfp
 2804              	.LVL200:
 2805              	@ armwave.c:433:         ypos += g_armwave_state.slice_height;
 2806              		.loc 1 433 14 discriminator 3 view .LVU776
 2807 0c8c 10208DE5 		str	r2, [sp, #16]	@ ypos, %sfp
 2808              	.LVL201:
 2809              	@ armwave.c:428:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2810              		.loc 1 428 5 discriminator 3 view .LVU777
 2811 0c90 030050E1 		cmp	r0, r3	@, yy
 2812 0c94 93FFFF8A 		bhi	.L151		@,
 2813 0c98 0200A0E1 		mov	r0, r2	@, ypos
 434:armwave.c     ****     }
 435:armwave.c     **** 
 436:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2814              		.loc 1 436 5 is_stmt 1 view .LVU778
 2815 0c9c 0C109DE5 		ldr	r1, [sp, #12]	@, %sfp
 2816              	@ armwave.c:437: }
 437:armwave.c     **** }
 2817              		.loc 1 437 1 is_stmt 0 view .LVU779
 2818 0ca0 1CD08DE2 		add	sp, sp, #28	@,,
 2819              		.cfi_remember_state
 2820              		.cfi_def_cfa_offset 36
 2821              		@ sp needed	@
 2822 0ca4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2823              		.cfi_restore 14
 2824              		.cfi_restore 11
 2825              		.cfi_restore 10
 2826              		.cfi_restore 9
 2827              		.cfi_restore 8
 2828              		.cfi_restore 7
 2829              		.cfi_restore 6
 2830              		.cfi_restore 5
 2831              		.cfi_restore 4
 2832              		.cfi_def_cfa_offset 0
 2833              	@ armwave.c:436:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 436:armwave.c     **** }
 2834              		.loc 1 436 5 view .LVU780
 2835 0ca8 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2836              	.LVL202:
 2837              	.L153:
 2838              		.cfi_restore_state
 2839              	@ armwave.c:424:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 424:armwave.c     **** 
 2840              		.loc 1 424 53 view .LVU781
 2841 0cac 10008DE5 		str	r0, [sp, #16]	@ tmp229, %sfp
 436:armwave.c     **** }
 2842              		.loc 1 436 5 is_stmt 1 view .LVU782
 2843 0cb0 0C109DE5 		ldr	r1, [sp, #12]	@, %sfp
 2844              	@ armwave.c:437: }
 2845              		.loc 1 437 1 is_stmt 0 view .LVU783
 2846 0cb4 1CD08DE2 		add	sp, sp, #28	@,,
 2847              		.cfi_def_cfa_offset 36
 2848              		@ sp needed	@
 2849 0cb8 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2850              		.cfi_restore 14
 2851              		.cfi_restore 11
 2852              		.cfi_restore 10
 2853              		.cfi_restore 9
 2854              		.cfi_restore 8
 2855              		.cfi_restore 7
 2856              		.cfi_restore 6
 2857              		.cfi_restore 5
 2858              		.cfi_restore 4
 2859              		.cfi_def_cfa_offset 0
 2860              	@ armwave.c:436:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 436:armwave.c     **** }
 2861              		.loc 1 436 5 view .LVU784
 2862 0cbc FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2863              	.LVL203:
 2864              	.L162:
 2865              		.align	2
 2866              	.L161:
 2867 0cc0 00000000 		.word	g_armwave_state
 2868              		.cfi_endproc
 2869              	.LFE70:
 2871              		.align	2
 2872              		.global	armwave_test_fill_outbuf
 2873              		.syntax unified
 2874              		.arm
 2875              		.fpu vfp
 2877              	armwave_test_fill_outbuf:
 2878              	.LFB71:
 438:armwave.c     **** 
 439:armwave.c     **** /*
 440:armwave.c     ****  * Render image to the local allocated buffer.
 441:armwave.c     ****  */
 442:armwave.c     **** void armwave_test_fill_outbuf()
 443:armwave.c     **** {
 2879              		.loc 1 443 1 is_stmt 1 view -0
 2880              		.cfi_startproc
 2881              		@ args = 0, pretend = 0, frame = 8
 2882              		@ frame_needed = 0, uses_anonymous_args = 0
 444:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2883              		.loc 1 444 5 view .LVU786
 2884 0cc4 50C19FE5 		ldr	ip, .L184	@ tmp205,
 2885              	@ armwave.c:443: {
 443:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2886              		.loc 1 443 1 is_stmt 0 view .LVU787
 2887 0cc8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2888              		.cfi_def_cfa_offset 36
 2889              		.cfi_offset 4, -36
 2890              		.cfi_offset 5, -32
 2891              		.cfi_offset 6, -28
 2892              		.cfi_offset 7, -24
 2893              		.cfi_offset 8, -20
 2894              		.cfi_offset 9, -16
 2895              		.cfi_offset 10, -12
 2896              		.cfi_offset 11, -8
 2897              		.cfi_offset 14, -4
 2898 0ccc 0CD04DE2 		sub	sp, sp, #12	@,,
 2899              		.cfi_def_cfa_offset 48
 2900              	@ armwave.c:444:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2901              		.loc 1 444 5 view .LVU788
 2902 0cd0 64809CE5 		ldr	r8, [ip, #100]	@ _1, g_armwave_state.out_pixbuf
 2903              	.LVL204:
 2904              	.LBB35:
 2905              	.LBI35:
 167:armwave.c     **** {
 2906              		.loc 1 167 6 is_stmt 1 view .LVU789
 2907              	.LBB36:
 169:armwave.c     ****     // uint32_t ysub;
 2908              		.loc 1 169 5 view .LVU790
 171:armwave.c     ****     uint8_t r, g, b, value; 
 2909              		.loc 1 171 5 view .LVU791
 172:armwave.c     ****     // uint8_t row;
 2910              		.loc 1 172 5 view .LVU792
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2911              		.loc 1 174 5 view .LVU793
 2912              	@ armwave.c:174:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2913              		.loc 1 174 15 is_stmt 0 view .LVU794
 2914 0cd4 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2915              	.LVL205:
 175:armwave.c     ****     uint32_t offset;
 2916              		.loc 1 175 5 is_stmt 1 view .LVU795
 176:armwave.c     **** 
 2917              		.loc 1 176 5 view .LVU796
 178:armwave.c     **** 
 2918              		.loc 1 178 5 view .LVU797
 2919 0cd8 000058E3 		cmp	r8, #0	@ _1,
 2920 0cdc 4900000A 		beq	.L182		@,
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2921              		.loc 1 180 5 view .LVU798
 2922              	@ armwave.c:180:     npix = g_armwave_state.target_width * 256; 
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2923              		.loc 1 180 10 is_stmt 0 view .LVU799
 2924 0ce0 54709CE5 		ldr	r7, [ip, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2925 0ce4 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2926              	.LVL206:
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2927              		.loc 1 183 5 is_stmt 1 view .LVU800
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2928              		.loc 1 183 5 is_stmt 0 view .LVU801
 2929 0ce8 000057E3 		cmp	r7, #0	@ npix,
 2930 0cec 0A0000DA 		ble	.L163		@,
 2931              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2932              		.loc 1 195 52 view .LVU802
 2933 0cf0 F8B6DCE1 		ldrsh	fp, [ip, #104]	@ _17, g_armwave_state.ch1_color.r
 2934              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2935              		.loc 1 196 52 view .LVU803
 2936 0cf4 FAA6DCE1 		ldrsh	r10, [ip, #106]	@ _23, g_armwave_state.ch1_color.g
 2937              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 2938              		.loc 1 197 52 view .LVU804
 2939 0cf8 FC56DCE1 		ldrsh	r5, [ip, #108]	@ _27, g_armwave_state.ch1_color.b
 2940              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2941              		.loc 1 219 57 view .LVU805
 2942 0cfc 096ADCED 		vldr.32	s13, [ip, #36]	@ _49, g_armwave_state.vscale_frac
 2943              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2944              		.loc 1 183 11 view .LVU806
 2945 0d00 00E0A0E3 		mov	lr, #0	@ n,
 2946              	.LVL207:
 2947              	.L170:
 187:armwave.c     **** 
 2948              		.loc 1 187 9 is_stmt 1 view .LVU807
 2949              	@ armwave.c:187:         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 2950              		.loc 1 187 19 is_stmt 0 view .LVU808
 2951 0d04 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2952              	.LVL208:
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 2953              		.loc 1 189 9 is_stmt 1 view .LVU809
 2954              	@ armwave.c:189:         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 2955              		.loc 1 189 11 is_stmt 0 view .LVU810
 2956 0d08 000050E3 		cmp	r0, #0	@ wave_word,
 2957 0d0c 0400001A 		bne	.L179		@,
 2958 0d10 04E08EE2 		add	lr, lr, #4	@ n, n,
 2959              	.L166:
 2960              	.LVL209:
 2961              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2962              		.loc 1 183 5 view .LVU811
 2963 0d14 0E0057E1 		cmp	r7, lr	@ npix, n
 2964 0d18 F9FFFFCA 		bgt	.L170		@,
 2965              	.LVL210:
 2966              	.L163:
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2967              		.loc 1 183 5 view .LVU812
 2968              	.LBE36:
 2969              	.LBE35:
 2970              	@ armwave.c:445: }
 445:armwave.c     **** }
 2971              		.loc 1 445 1 view .LVU813
 2972 0d1c 0CD08DE2 		add	sp, sp, #12	@,,
 2973              		.cfi_remember_state
 2974              		.cfi_def_cfa_offset 36
 2975              		@ sp needed	@
 2976 0d20 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2977              	.LVL211:
 2978              	.L179:
 2979              		.cfi_restore_state
 2980              	.LBB38:
 2981              	.LBB37:
 2982              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2983              		.loc 1 194 19 view .LVU814
 2984 0d24 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2985              	@ armwave.c:189:         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 2986              		.loc 1 189 11 view .LVU815
 2987 0d28 0E60A0E1 		mov	r6, lr	@ ivtmp.114, n
 2988              	.LVL212:
 191:armwave.c     ****                 wave_word >>= 8;
 2989              		.loc 1 191 17 is_stmt 1 view .LVU816
 192:armwave.c     **** 
 2990              		.loc 1 192 17 view .LVU817
 2991              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 2992              		.loc 1 192 27 is_stmt 0 view .LVU818
 2993 0d2c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2994              	.LVL213:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2995              		.loc 1 194 17 is_stmt 1 view .LVU819
 2996 0d30 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.114,
 2997              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2998              		.loc 1 194 19 is_stmt 0 view .LVU820
 2999 0d34 0500001A 		bne	.L183		@,
 3000              	.LVL214:
 3001              	.L167:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3002              		.loc 1 194 19 view .LVU821
 3003 0d38 016086E2 		add	r6, r6, #1	@ ivtmp.114, ivtmp.114,
 3004              	@ armwave.c:190:             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 3005              		.loc 1 190 13 view .LVU822
 3006 0d3c 06005EE1 		cmp	lr, r6	@ n, ivtmp.114
 3007 0d40 F3FFFF0A 		beq	.L166		@,
 191:armwave.c     ****                 wave_word >>= 8;
 3008              		.loc 1 191 17 is_stmt 1 view .LVU823
 3009              	.LVL215:
 192:armwave.c     **** 
 3010              		.loc 1 192 17 view .LVU824
 3011              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3012              		.loc 1 194 19 is_stmt 0 view .LVU825
 3013 0d44 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 3014              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 3015              		.loc 1 192 27 view .LVU826
 3016 0d48 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3017              	.LVL216:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3018              		.loc 1 194 17 is_stmt 1 view .LVU827
 3019              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3020              		.loc 1 194 19 is_stmt 0 view .LVU828
 3021 0d4c F9FFFF0A 		beq	.L167		@,
 3022              	.L183:
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3023              		.loc 1 195 21 is_stmt 1 view .LVU829
 3024              	.LVL217:
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3025              		.loc 1 196 21 view .LVU830
 197:armwave.c     **** 
 3026              		.loc 1 197 21 view .LVU831
 199:armwave.c     ****                     g = MIN(gg, 255);
 3027              		.loc 1 199 21 view .LVU832
 200:armwave.c     ****                     b = MIN(bb, 255);
 3028              		.loc 1 200 21 view .LVU833
 201:armwave.c     **** 
 3029              		.loc 1 201 21 view .LVU834
 204:armwave.c     **** 
 3030              		.loc 1 204 21 view .LVU835
 3031              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3032              		.loc 1 219 32 is_stmt 0 view .LVU836
 3033 0d50 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.114
 3034              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3035              		.loc 1 220 41 view .LVU837
 3036 0d54 012083E2 		add	r2, r3, #1	@ tmp197, _47,
 3037              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3038              		.loc 1 219 40 view .LVU838
 3039 0d58 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 3040              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3041              		.loc 1 220 41 view .LVU839
 3042 0d5c 102A07EE 		vmov	s14, r2	@ int	@ tmp197, tmp197
 3043              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 3044              		.loc 1 197 55 view .LVU840
 3045 0d60 950103E0 		mul	r3, r5, r1	@ tmp182, _27, _19
 3046              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3047              		.loc 1 219 40 view .LVU841
 3048 0d64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp195, _47
 3049              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3050              		.loc 1 220 46 view .LVU842
 3051 0d68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, tmp197
 3052              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3053              		.loc 1 196 55 view .LVU843
 3054 0d6c 9A0102E0 		mul	r2, r10, r1	@ tmp186, _23, _19
 3055              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 3056              		.loc 1 197 24 view .LVU844
 3057 0d70 4334A0E1 		asr	r3, r3, #8	@ bb, tmp182,
 3058              	.LVL218:
 3059              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 3060              		.loc 1 201 25 view .LVU845
 3061 0d74 FF0053E3 		cmp	r3, #255	@ bb,
 3062              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3063              		.loc 1 196 24 view .LVU846
 3064 0d78 4224A0E1 		asr	r2, r2, #8	@ gg, tmp186,
 3065              	.LVL219:
 3066              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 3067              		.loc 1 201 25 view .LVU847
 3068 0d7c FF30A0A3 		movge	r3, #255	@ bb,
 3069              	.LVL220:
 3070              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3071              		.loc 1 219 40 view .LVU848
 3072 0d80 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp196, tmp195, _49
 3073              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3074              		.loc 1 220 46 view .LVU849
 3075 0d84 267A27EE 		vmul.f32	s14, s14, s13	@ tmp199, tmp198, _49
 3076              	@ armwave.c:200:                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 3077              		.loc 1 200 25 view .LVU850
 3078 0d88 FF0052E3 		cmp	r2, #255	@ gg,
 3079 0d8c FF20A0A3 		movge	r2, #255	@ gg,
 3080              	.LVL221:
 3081              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3082              		.loc 1 195 55 view .LVU851
 3083 0d90 910B01E0 		mul	r1, r1, fp	@ tmp192, _19, _17
 3084              	.LVL222:
 3085              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3086              		.loc 1 204 56 view .LVU852
 3087 0d94 0224A0E1 		lsl	r2, r2, #8	@ tmp187, gg,
 3088              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3089              		.loc 1 204 44 view .LVU853
 3090 0d98 0338A0E1 		lsl	r3, r3, #16	@ tmp183, bb,
 3091              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3092              		.loc 1 219 24 view .LVU854
 3093 0d9c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp196
 3094              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3095              		.loc 1 195 24 view .LVU855
 3096 0da0 4114A0E1 		asr	r1, r1, #8	@ rr, tmp192,
 3097              	.LVL223:
 3098              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3099              		.loc 1 204 56 view .LVU856
 3100 0da4 7220FFE6 		uxth	r2, r2	@ tmp188, tmp187
 3101              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3102              		.loc 1 204 44 view .LVU857
 3103 0da8 FF3803E2 		and	r3, r3, #16711680	@ tmp184, tmp183,
 3104              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 3105              		.loc 1 199 25 view .LVU858
 3106 0dac FF0051E3 		cmp	r1, #255	@ rr,
 3107              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3108              		.loc 1 204 51 view .LVU859
 3109 0db0 023083E1 		orr	r3, r3, r2	@ tmp190, tmp184, tmp188
 3110              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 3111              		.loc 1 199 25 view .LVU860
 3112 0db4 FF10A0A3 		movge	r1, #255	@ rr,
 3113              	.LVL224:
 3114              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3115              		.loc 1 219 24 view .LVU861
 3116 0db8 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 3117              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3118              		.loc 1 220 24 view .LVU862
 3119 0dbc C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp199
 3120              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3121              		.loc 1 204 62 view .LVU863
 3122 0dc0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3123 0dc4 013083E1 		orr	r3, r3, r1	@ tmp194, tmp190, rr
 3124              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3125              		.loc 1 204 26 view .LVU864
 3126 0dc8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp194,
 3127              	.LVL225:
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3128              		.loc 1 218 21 is_stmt 1 view .LVU865
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3129              		.loc 1 219 21 view .LVU866
 220:armwave.c     ****                     xx = (nsub >> 8);
 3130              		.loc 1 220 21 view .LVU867
 221:armwave.c     **** 
 3131              		.loc 1 221 21 view .LVU868
 3132              	@ armwave.c:221:                     xx = (nsub >> 8);
 221:armwave.c     **** 
 3133              		.loc 1 221 32 is_stmt 0 view .LVU869
 3134 0dcc 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.114,
 3135              	.LVL226:
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3136              		.loc 1 223 21 is_stmt 1 view .LVU870
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3137              		.loc 1 223 21 is_stmt 0 view .LVU871
 3138 0dd0 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3139              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3140              		.loc 1 220 24 view .LVU872
 3141 0dd4 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3142              	.LVL227:
 3143              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3144              		.loc 1 223 21 view .LVU873
 3145 0dd8 020054E1 		cmp	r4, r2	@ yy, ye
 3146 0ddc D5FFFF2A 		bcs	.L167		@,
 3147 0de0 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3148              	.LVL228:
 3149              	.L168:
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3150              		.loc 1 224 25 is_stmt 1 view .LVU874
 225:armwave.c     ****                     }
 3151              		.loc 1 225 25 view .LVU875
 3152              	@ armwave.c:224:                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3153              		.loc 1 224 43 is_stmt 0 view .LVU876
 3154 0de4 54209CE5 		ldr	r2, [ip, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3155              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3156              		.loc 1 223 21 view .LVU877
 3157 0de8 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3158              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 3159              		.loc 1 225 43 view .LVU878
 3160 0dec 921422E0 		mla	r2, r2, r4, r1	@ tmp203, g_armwave_state.target_width, yy, xx
 3161              	.LVL229:
 3162              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3163              		.loc 1 223 42 view .LVU879
 3164 0df0 014084E2 		add	r4, r4, #1	@ yy, yy,
 3165              	.LVL230:
 3166              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3167              		.loc 1 223 21 view .LVU880
 3168 0df4 040050E1 		cmp	r0, r4	@ ye, yy
 3169              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 3170              		.loc 1 225 53 view .LVU881
 3171 0df8 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 3172              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3173              		.loc 1 223 21 view .LVU882
 3174 0dfc F8FFFF1A 		bne	.L168		@,
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3175              		.loc 1 223 21 view .LVU883
 3176 0e00 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3177 0e04 CBFFFFEA 		b	.L167		@
 3178              	.LVL231:
 3179              	.L182:
 178:armwave.c     **** 
 3180              		.loc 1 178 5 is_stmt 1 view .LVU884
 3181 0e08 10309FE5 		ldr	r3, .L184+4	@,
 3182 0e0c B220A0E3 		mov	r2, #178	@,
 3183 0e10 0C109FE5 		ldr	r1, .L184+8	@,
 3184 0e14 0C009FE5 		ldr	r0, .L184+12	@,
 3185 0e18 FEFFFFEB 		bl	__assert_fail		@
 3186              	.LVL232:
 3187              	.L185:
 3188              		.align	2
 3189              	.L184:
 3190 0e1c 00000000 		.word	g_armwave_state
 3191 0e20 18000000 		.word	.LANCHOR0+24
 3192 0e24 20000000 		.word	.LC2
 3193 0e28 2C000000 		.word	.LC3
 3194              	.LBE37:
 3195              	.LBE38:
 3196              		.cfi_endproc
 3197              	.LFE71:
 3199              		.align	2
 3200              		.global	armwave_test_dump_buffer_to_ppm
 3201              		.syntax unified
 3202              		.arm
 3203              		.fpu vfp
 3205              	armwave_test_dump_buffer_to_ppm:
 3206              	.LVL233:
 3207              	.LFB72:
 446:armwave.c     **** 
 447:armwave.c     **** /*
 448:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 449:armwave.c     ****  */
 450:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 451:armwave.c     **** {
 3208              		.loc 1 451 1 view -0
 3209              		.cfi_startproc
 3210              		@ args = 0, pretend = 0, frame = 0
 3211              		@ frame_needed = 0, uses_anonymous_args = 0
 3212              		@ link register save eliminated.
 452:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3213              		.loc 1 452 5 view .LVU886
 3214 0e2c 08309FE5 		ldr	r3, .L187	@ tmp112,
 3215 0e30 0010A0E1 		mov	r1, r0	@, fn
 3216 0e34 640093E5 		ldr	r0, [r3, #100]	@, g_armwave_state.out_pixbuf
 3217              	.LVL234:
 3218              		.loc 1 452 5 is_stmt 0 view .LVU887
 3219 0e38 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3220              	.LVL235:
 3221              	.L188:
 3222              		.loc 1 452 5 view .LVU888
 3223              		.align	2
 3224              	.L187:
 3225 0e3c 00000000 		.word	g_armwave_state
 3226              		.cfi_endproc
 3227              	.LFE72:
 3229              		.align	2
 3230              		.global	armwave_test_fill_gdkbuf
 3231              		.syntax unified
 3232              		.arm
 3233              		.fpu vfp
 3235              	armwave_test_fill_gdkbuf:
 3236              	.LVL236:
 3237              	.LFB73:
 453:armwave.c     **** }
 454:armwave.c     **** 
 455:armwave.c     **** /*
 456:armwave.c     ****  * Render GDK buffer with test funtionry.
 457:armwave.c     ****  */
 458:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 459:armwave.c     **** {
 3238              		.loc 1 459 1 is_stmt 1 view -0
 3239              		.cfi_startproc
 3240              		@ args = 0, pretend = 0, frame = 8
 3241              		@ frame_needed = 0, uses_anonymous_args = 0
 460:armwave.c     ****     //PyObject *mv;
 461:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 462:armwave.c     **** 
 463:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 464:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3242              		.loc 1 464 5 view .LVU890
 3243              	@ armwave.c:464:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3244              		.loc 1 464 11 is_stmt 0 view .LVU891
 3245 0e40 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 3246              	@ armwave.c:459: {
 459:armwave.c     ****     //PyObject *mv;
 3247              		.loc 1 459 1 view .LVU892
 3248 0e44 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3249              		.cfi_def_cfa_offset 36
 3250              		.cfi_offset 4, -36
 3251              		.cfi_offset 5, -32
 3252              		.cfi_offset 6, -28
 3253              		.cfi_offset 7, -24
 3254              		.cfi_offset 8, -20
 3255              		.cfi_offset 9, -16
 3256              		.cfi_offset 10, -12
 3257              		.cfi_offset 11, -8
 3258              		.cfi_offset 14, -4
 3259 0e48 0CD04DE2 		sub	sp, sp, #12	@,,
 3260              		.cfi_def_cfa_offset 48
 3261              	.LBB41:
 3262              	.LBB42:
 3263              	@ armwave.c:174:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3264              		.loc 1 174 15 view .LVU893
 3265 0e4c 48519FE5 		ldr	r5, .L210	@ tmp207,
 3266              	.LBE42:
 3267              	.LBE41:
 3268              	@ armwave.c:464:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 3269              		.loc 1 464 11 view .LVU894
 3270 0e50 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 3271              	.LVL237:
 465:armwave.c     ****     
 466:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 467:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 3272              		.loc 1 467 5 is_stmt 1 view .LVU895
 3273              	.LBB45:
 3274              	.LBI41:
 167:armwave.c     **** {
 3275              		.loc 1 167 6 view .LVU896
 3276              	.LBB43:
 169:armwave.c     ****     // uint32_t ysub;
 3277              		.loc 1 169 5 view .LVU897
 171:armwave.c     ****     uint8_t r, g, b, value; 
 3278              		.loc 1 171 5 view .LVU898
 172:armwave.c     ****     // uint8_t row;
 3279              		.loc 1 172 5 view .LVU899
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3280              		.loc 1 174 5 view .LVU900
 3281              	@ armwave.c:178:     assert(out_buffer != NULL);
 178:armwave.c     **** 
 3282              		.loc 1 178 5 is_stmt 0 view .LVU901
 3283 0e54 000058E3 		cmp	r8, #0	@ out_pixbuf,
 3284              	@ armwave.c:174:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 3285              		.loc 1 174 15 view .LVU902
 3286 0e58 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 3287              	.LVL238:
 175:armwave.c     ****     uint32_t offset;
 3288              		.loc 1 175 5 is_stmt 1 view .LVU903
 176:armwave.c     **** 
 3289              		.loc 1 176 5 view .LVU904
 178:armwave.c     **** 
 3290              		.loc 1 178 5 view .LVU905
 3291 0e5c 4900000A 		beq	.L208		@,
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 3292              		.loc 1 180 5 view .LVU906
 3293              	@ armwave.c:180:     npix = g_armwave_state.target_width * 256; 
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 3294              		.loc 1 180 10 is_stmt 0 view .LVU907
 3295 0e60 547095E5 		ldr	r7, [r5, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3296 0e64 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 3297              	.LVL239:
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3298              		.loc 1 183 5 is_stmt 1 view .LVU908
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3299              		.loc 1 183 5 is_stmt 0 view .LVU909
 3300 0e68 000057E3 		cmp	r7, #0	@ npix,
 3301 0e6c 0A0000DA 		ble	.L189		@,
 3302              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3303              		.loc 1 195 52 view .LVU910
 3304 0e70 F8B6D5E1 		ldrsh	fp, [r5, #104]	@ _19, g_armwave_state.ch1_color.r
 3305              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3306              		.loc 1 196 52 view .LVU911
 3307 0e74 FAA6D5E1 		ldrsh	r10, [r5, #106]	@ _25, g_armwave_state.ch1_color.g
 3308              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 3309              		.loc 1 197 52 view .LVU912
 3310 0e78 FC46D5E1 		ldrsh	r4, [r5, #108]	@ _29, g_armwave_state.ch1_color.b
 3311              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3312              		.loc 1 219 57 view .LVU913
 3313 0e7c 096AD5ED 		vldr.32	s13, [r5, #36]	@ _51, g_armwave_state.vscale_frac
 3314              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3315              		.loc 1 183 11 view .LVU914
 3316 0e80 00C0A0E3 		mov	ip, #0	@ n,
 3317              	.LVL240:
 3318              	.L196:
 187:armwave.c     **** 
 3319              		.loc 1 187 9 is_stmt 1 view .LVU915
 3320              	@ armwave.c:187:         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 3321              		.loc 1 187 19 is_stmt 0 view .LVU916
 3322 0e84 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 3323              	.LVL241:
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 3324              		.loc 1 189 9 is_stmt 1 view .LVU917
 3325              	@ armwave.c:189:         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 3326              		.loc 1 189 11 is_stmt 0 view .LVU918
 3327 0e88 000050E3 		cmp	r0, #0	@ wave_word,
 3328 0e8c 0400001A 		bne	.L205		@,
 3329 0e90 04C08CE2 		add	ip, ip, #4	@ n, n,
 3330              	.L192:
 3331              	.LVL242:
 3332              	@ armwave.c:183:     for(n = 0; n < npix; n += 4) {
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3333              		.loc 1 183 5 view .LVU919
 3334 0e94 0C0057E1 		cmp	r7, ip	@ npix, n
 3335 0e98 F9FFFFCA 		bgt	.L196		@,
 3336              	.LVL243:
 3337              	.L189:
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 3338              		.loc 1 183 5 view .LVU920
 3339              	.LBE43:
 3340              	.LBE45:
 3341              	@ armwave.c:468: }
 468:armwave.c     **** }
 3342              		.loc 1 468 1 view .LVU921
 3343 0e9c 0CD08DE2 		add	sp, sp, #12	@,,
 3344              		.cfi_remember_state
 3345              		.cfi_def_cfa_offset 36
 3346              		@ sp needed	@
 3347 0ea0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3348              	.LVL244:
 3349              	.L205:
 3350              		.cfi_restore_state
 3351              	.LBB46:
 3352              	.LBB44:
 3353              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3354              		.loc 1 194 19 view .LVU922
 3355 0ea4 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 3356              	@ armwave.c:189:         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 3357              		.loc 1 189 11 view .LVU923
 3358 0ea8 0C60A0E1 		mov	r6, ip	@ ivtmp.130, n
 3359              	.LVL245:
 191:armwave.c     ****                 wave_word >>= 8;
 3360              		.loc 1 191 17 is_stmt 1 view .LVU924
 192:armwave.c     **** 
 3361              		.loc 1 192 17 view .LVU925
 3362              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 3363              		.loc 1 192 27 is_stmt 0 view .LVU926
 3364 0eac 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3365              	.LVL246:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3366              		.loc 1 194 17 is_stmt 1 view .LVU927
 3367 0eb0 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.130,
 3368              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3369              		.loc 1 194 19 is_stmt 0 view .LVU928
 3370 0eb4 0500001A 		bne	.L209		@,
 3371              	.LVL247:
 3372              	.L193:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3373              		.loc 1 194 19 view .LVU929
 3374 0eb8 016086E2 		add	r6, r6, #1	@ ivtmp.130, ivtmp.130,
 3375              	@ armwave.c:190:             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 3376              		.loc 1 190 13 view .LVU930
 3377 0ebc 06005CE1 		cmp	ip, r6	@ n, ivtmp.130
 3378 0ec0 F3FFFF0A 		beq	.L192		@,
 191:armwave.c     ****                 wave_word >>= 8;
 3379              		.loc 1 191 17 is_stmt 1 view .LVU931
 3380              	.LVL248:
 192:armwave.c     **** 
 3381              		.loc 1 192 17 view .LVU932
 3382              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3383              		.loc 1 194 19 is_stmt 0 view .LVU933
 3384 0ec4 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 3385              	@ armwave.c:192:                 wave_word >>= 8;
 192:armwave.c     **** 
 3386              		.loc 1 192 27 view .LVU934
 3387 0ec8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 3388              	.LVL249:
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3389              		.loc 1 194 17 is_stmt 1 view .LVU935
 3390              	@ armwave.c:194:                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 3391              		.loc 1 194 19 is_stmt 0 view .LVU936
 3392 0ecc F9FFFF0A 		beq	.L193		@,
 3393              	.L209:
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3394              		.loc 1 195 21 is_stmt 1 view .LVU937
 3395              	.LVL250:
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3396              		.loc 1 196 21 view .LVU938
 197:armwave.c     **** 
 3397              		.loc 1 197 21 view .LVU939
 199:armwave.c     ****                     g = MIN(gg, 255);
 3398              		.loc 1 199 21 view .LVU940
 200:armwave.c     ****                     b = MIN(bb, 255);
 3399              		.loc 1 200 21 view .LVU941
 201:armwave.c     **** 
 3400              		.loc 1 201 21 view .LVU942
 204:armwave.c     **** 
 3401              		.loc 1 204 21 view .LVU943
 3402              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3403              		.loc 1 219 32 is_stmt 0 view .LVU944
 3404 0ed0 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.130
 3405              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3406              		.loc 1 220 41 view .LVU945
 3407 0ed4 012083E2 		add	r2, r3, #1	@ tmp199, _49,
 3408              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3409              		.loc 1 219 40 view .LVU946
 3410 0ed8 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 3411              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3412              		.loc 1 220 41 view .LVU947
 3413 0edc 102A07EE 		vmov	s14, r2	@ int	@ tmp199, tmp199
 3414              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 3415              		.loc 1 197 55 view .LVU948
 3416 0ee0 940103E0 		mul	r3, r4, r1	@ tmp184, _29, _21
 3417              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3418              		.loc 1 219 40 view .LVU949
 3419 0ee4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp197, _49
 3420              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3421              		.loc 1 220 46 view .LVU950
 3422 0ee8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp200, tmp199
 3423              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3424              		.loc 1 196 55 view .LVU951
 3425 0eec 9A0102E0 		mul	r2, r10, r1	@ tmp188, _25, _21
 3426              	@ armwave.c:197:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 3427              		.loc 1 197 24 view .LVU952
 3428 0ef0 4334A0E1 		asr	r3, r3, #8	@ bb, tmp184,
 3429              	.LVL251:
 3430              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 3431              		.loc 1 201 25 view .LVU953
 3432 0ef4 FF0053E3 		cmp	r3, #255	@ bb,
 3433              	@ armwave.c:196:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3434              		.loc 1 196 24 view .LVU954
 3435 0ef8 4224A0E1 		asr	r2, r2, #8	@ gg, tmp188,
 3436              	.LVL252:
 3437              	@ armwave.c:201:                     b = MIN(bb, 255);
 201:armwave.c     **** 
 3438              		.loc 1 201 25 view .LVU955
 3439 0efc FF30A0A3 		movge	r3, #255	@ bb,
 3440              	.LVL253:
 3441              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3442              		.loc 1 219 40 view .LVU956
 3443 0f00 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, _51
 3444              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3445              		.loc 1 220 46 view .LVU957
 3446 0f04 267A27EE 		vmul.f32	s14, s14, s13	@ tmp201, tmp200, _51
 3447              	@ armwave.c:200:                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 3448              		.loc 1 200 25 view .LVU958
 3449 0f08 FF0052E3 		cmp	r2, #255	@ gg,
 3450 0f0c FF20A0A3 		movge	r2, #255	@ gg,
 3451              	.LVL254:
 3452              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3453              		.loc 1 195 55 view .LVU959
 3454 0f10 910B01E0 		mul	r1, r1, fp	@ tmp194, _21, _19
 3455              	.LVL255:
 3456              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3457              		.loc 1 204 56 view .LVU960
 3458 0f14 0224A0E1 		lsl	r2, r2, #8	@ tmp189, gg,
 3459              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3460              		.loc 1 204 44 view .LVU961
 3461 0f18 0338A0E1 		lsl	r3, r3, #16	@ tmp185, bb,
 3462              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3463              		.loc 1 219 24 view .LVU962
 3464 0f1c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp198
 3465              	@ armwave.c:195:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3466              		.loc 1 195 24 view .LVU963
 3467 0f20 4114A0E1 		asr	r1, r1, #8	@ rr, tmp194,
 3468              	.LVL256:
 3469              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3470              		.loc 1 204 56 view .LVU964
 3471 0f24 7220FFE6 		uxth	r2, r2	@ tmp190, tmp189
 3472              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3473              		.loc 1 204 44 view .LVU965
 3474 0f28 FF3803E2 		and	r3, r3, #16711680	@ tmp186, tmp185,
 3475              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 3476              		.loc 1 199 25 view .LVU966
 3477 0f2c FF0051E3 		cmp	r1, #255	@ rr,
 3478              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3479              		.loc 1 204 51 view .LVU967
 3480 0f30 023083E1 		orr	r3, r3, r2	@ tmp192, tmp186, tmp190
 3481              	@ armwave.c:199:                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 3482              		.loc 1 199 25 view .LVU968
 3483 0f34 FF10A0A3 		movge	r1, #255	@ rr,
 3484              	.LVL257:
 3485              	@ armwave.c:219:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3486              		.loc 1 219 24 view .LVU969
 3487 0f38 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 3488              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3489              		.loc 1 220 24 view .LVU970
 3490 0f3c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp201
 3491              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3492              		.loc 1 204 62 view .LVU971
 3493 0f40 7110EFE6 		uxtb	r1, r1	@ rr, rr
 3494 0f44 013083E1 		orr	r3, r3, r1	@ tmp196, tmp192, rr
 3495              	@ armwave.c:204:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 3496              		.loc 1 204 26 view .LVU972
 3497 0f48 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp196,
 3498              	.LVL258:
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 3499              		.loc 1 218 21 is_stmt 1 view .LVU973
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 3500              		.loc 1 219 21 view .LVU974
 220:armwave.c     ****                     xx = (nsub >> 8);
 3501              		.loc 1 220 21 view .LVU975
 221:armwave.c     **** 
 3502              		.loc 1 221 21 view .LVU976
 3503              	@ armwave.c:221:                     xx = (nsub >> 8);
 221:armwave.c     **** 
 3504              		.loc 1 221 32 is_stmt 0 view .LVU977
 3505 0f4c 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.130,
 3506              	.LVL259:
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3507              		.loc 1 223 21 is_stmt 1 view .LVU978
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3508              		.loc 1 223 21 is_stmt 0 view .LVU979
 3509 0f50 902A17EE 		vmov	r2, s15	@ int	@ ye,
 3510              	@ armwave.c:220:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 3511              		.loc 1 220 24 view .LVU980
 3512 0f54 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 3513              	.LVL260:
 3514              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3515              		.loc 1 223 21 view .LVU981
 3516 0f58 02005EE1 		cmp	lr, r2	@ yy, ye
 3517 0f5c D5FFFF2A 		bcs	.L193		@,
 3518 0f60 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 3519              	.LVL261:
 3520              	.L194:
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3521              		.loc 1 224 25 is_stmt 1 view .LVU982
 225:armwave.c     ****                     }
 3522              		.loc 1 225 25 view .LVU983
 3523              	@ armwave.c:224:                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3524              		.loc 1 224 43 is_stmt 0 view .LVU984
 3525 0f64 542095E5 		ldr	r2, [r5, #84]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3526              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3527              		.loc 1 223 21 view .LVU985
 3528 0f68 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 3529              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 3530              		.loc 1 225 43 view .LVU986
 3531 0f6c 921E22E0 		mla	r2, r2, lr, r1	@ tmp205, g_armwave_state.target_width, yy, xx
 3532              	.LVL262:
 3533              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3534              		.loc 1 223 42 view .LVU987
 3535 0f70 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 3536              	.LVL263:
 3537              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3538              		.loc 1 223 21 view .LVU988
 3539 0f74 0E0050E1 		cmp	r0, lr	@ ye, yy
 3540              	@ armwave.c:225:                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 3541              		.loc 1 225 53 view .LVU989
 3542 0f78 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3543              	@ armwave.c:223:                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3544              		.loc 1 223 21 view .LVU990
 3545 0f7c F8FFFF1A 		bne	.L194		@,
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3546              		.loc 1 223 21 view .LVU991
 3547 0f80 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3548 0f84 CBFFFFEA 		b	.L193		@
 3549              	.LVL264:
 3550              	.L208:
 178:armwave.c     **** 
 3551              		.loc 1 178 5 is_stmt 1 view .LVU992
 3552 0f88 10309FE5 		ldr	r3, .L210+4	@,
 3553 0f8c B220A0E3 		mov	r2, #178	@,
 3554 0f90 0C109FE5 		ldr	r1, .L210+8	@,
 3555 0f94 0C009FE5 		ldr	r0, .L210+12	@,
 3556              	.LVL265:
 178:armwave.c     **** 
 3557              		.loc 1 178 5 is_stmt 0 view .LVU993
 3558 0f98 FEFFFFEB 		bl	__assert_fail		@
 3559              	.LVL266:
 3560              	.L211:
 3561              		.align	2
 3562              	.L210:
 3563 0f9c 00000000 		.word	g_armwave_state
 3564 0fa0 18000000 		.word	.LANCHOR0+24
 3565 0fa4 20000000 		.word	.LC2
 3566 0fa8 2C000000 		.word	.LC3
 3567              	.LBE44:
 3568              	.LBE46:
 3569              		.cfi_endproc
 3570              	.LFE73:
 3572              		.align	2
 3573              		.global	armwave_test_buffer_alloc
 3574              		.syntax unified
 3575              		.arm
 3576              		.fpu vfp
 3578              	armwave_test_buffer_alloc:
 3579              	.LVL267:
 3580              	.LFB74:
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 472:armwave.c     ****  */
 473:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 474:armwave.c     **** {
 3581              		.loc 1 474 1 is_stmt 1 view -0
 3582              		.cfi_startproc
 3583              		@ args = 0, pretend = 0, frame = 0
 3584              		@ frame_needed = 0, uses_anonymous_args = 0
 475:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3585              		.loc 1 475 5 view .LVU995
 3586              	@ armwave.c:474: {
 474:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3587              		.loc 1 474 1 is_stmt 0 view .LVU996
 3588 0fac 70402DE9 		push	{r4, r5, r6, lr}	@
 3589              		.cfi_def_cfa_offset 16
 3590              		.cfi_offset 4, -16
 3591              		.cfi_offset 5, -12
 3592              		.cfi_offset 6, -8
 3593              		.cfi_offset 14, -4
 3594              	@ armwave.c:474: {
 474:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3595              		.loc 1 474 1 view .LVU997
 3596 0fb0 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3597              	@ armwave.c:475:     if(g_armwave_state.test_wave_buffer != NULL) {
 3598              		.loc 1 475 23 view .LVU998
 3599 0fb4 44409FE5 		ldr	r4, .L219	@ tmp128,
 3600 0fb8 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3601              	.LVL268:
 3602              	@ armwave.c:475:     if(g_armwave_state.test_wave_buffer != NULL) {
 3603              		.loc 1 475 7 view .LVU999
 3604 0fbc 000050E3 		cmp	r0, #0	@ _1,
 3605 0fc0 0000000A 		beq	.L213		@,
 476:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3606              		.loc 1 476 9 is_stmt 1 view .LVU1000
 3607 0fc4 FEFFFFEB 		bl	free		@
 3608              	.LVL269:
 3609              	.L213:
 477:armwave.c     ****     }
 478:armwave.c     **** 
 479:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 480:armwave.c     **** 
 481:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3610              		.loc 1 481 5 view .LVU1001
 3611              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3612              		.loc 1 481 75 is_stmt 0 view .LVU1002
 3613 0fc8 483094E5 		ldr	r3, [r4, #72]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3614 0fcc 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3615              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3616              		.loc 1 481 40 view .LVU1003
 3617 0fd0 0610A0E1 		mov	r1, r6	@, nsets
 3618              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3619              		.loc 1 481 75 view .LVU1004
 3620 0fd4 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3621              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3622              		.loc 1 481 40 view .LVU1005
 3623 0fd8 0500A0E1 		mov	r0, r5	@, _4
 3624 0fdc FEFFFFEB 		bl	calloc		@
 3625              	.LVL270:
 3626              	@ armwave.c:483:     if(g_armwave_state.test_wave_buffer == NULL) {
 482:armwave.c     **** 
 483:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3627              		.loc 1 483 7 view .LVU1006
 3628 0fe0 000050E3 		cmp	r0, #0	@ tmp124,
 3629              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3630              		.loc 1 481 38 view .LVU1007
 3631 0fe4 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3632              		.loc 1 483 5 is_stmt 1 view .LVU1008
 3633              	@ armwave.c:483:     if(g_armwave_state.test_wave_buffer == NULL) {
 3634              		.loc 1 483 7 is_stmt 0 view .LVU1009
 3635 0fe8 7080BD18 		popne	{r4, r5, r6, pc}	@
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3636              		.loc 1 484 9 is_stmt 1 view .LVU1010
 3637 0fec 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3638 0ff0 0620A0E1 		mov	r2, r6	@, nsets
 3639 0ff4 08009FE5 		ldr	r0, .L219+4	@,
 3640              	@ armwave.c:488: }
 485:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 486:armwave.c     ****         return;
 487:armwave.c     ****     }
 488:armwave.c     **** }
 3641              		.loc 1 488 1 is_stmt 0 view .LVU1011
 3642 0ff8 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3643              		.cfi_restore 14
 3644              		.cfi_restore 6
 3645              		.cfi_restore 5
 3646              		.cfi_restore 4
 3647              		.cfi_def_cfa_offset 0
 3648              	.LVL271:
 3649              	@ armwave.c:484:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3650              		.loc 1 484 9 view .LVU1012
 3651 0ffc FEFFFFEA 		b	printf		@
 3652              	.LVL272:
 3653              	.L220:
 484:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3654              		.loc 1 484 9 view .LVU1013
 3655              		.align	2
 3656              	.L219:
 3657 1000 00000000 		.word	g_armwave_state
 3658 1004 9C010000 		.word	.LC18
 3659              		.cfi_endproc
 3660              	.LFE74:
 3662              		.align	2
 3663              		.global	armwave_fill_pixbuf_into_pybuffer
 3664              		.syntax unified
 3665              		.arm
 3666              		.fpu vfp
 3668              	armwave_fill_pixbuf_into_pybuffer:
 3669              	.LVL273:
 3670              	.LFB75:
 489:armwave.c     **** 
 490:armwave.c     **** /*
 491:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 492:armwave.c     ****  */
 493:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 494:armwave.c     **** {
 3671              		.loc 1 494 1 is_stmt 1 view -0
 3672              		.cfi_startproc
 3673              		@ args = 0, pretend = 0, frame = 48
 3674              		@ frame_needed = 0, uses_anonymous_args = 0
 495:armwave.c     ****     Py_buffer buffer;
 3675              		.loc 1 495 5 view .LVU1015
 496:armwave.c     ****     int ret;
 3676              		.loc 1 496 5 view .LVU1016
 497:armwave.c     **** 
 498:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 499:armwave.c     **** 
 500:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3677              		.loc 1 500 5 view .LVU1017
 3678              	@ armwave.c:494: {
 494:armwave.c     ****     Py_buffer buffer;
 3679              		.loc 1 494 1 is_stmt 0 view .LVU1018
 3680 1008 04E02DE5 		str	lr, [sp, #-4]!	@,
 3681              		.cfi_def_cfa_offset 4
 3682              		.cfi_offset 14, -4
 3683 100c 34D04DE2 		sub	sp, sp, #52	@,,
 3684              		.cfi_def_cfa_offset 56
 3685              	@ armwave.c:500:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3686              		.loc 1 500 11 view .LVU1019
 3687 1010 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3688 1014 0120A0E3 		mov	r2, #1	@,
 3689 1018 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3690              	.LVL274:
 501:armwave.c     **** 
 502:armwave.c     ****     if(ret != 0) {
 3691              		.loc 1 502 5 is_stmt 1 view .LVU1020
 3692              	@ armwave.c:502:     if(ret != 0) {
 3693              		.loc 1 502 7 is_stmt 0 view .LVU1021
 3694 101c 000050E3 		cmp	r0, #0	@,
 3695 1020 0A00001A 		bne	.L225		@,
 503:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 504:armwave.c     ****         Py_RETURN_FALSE;
 505:armwave.c     ****     }
 506:armwave.c     **** 
 507:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 508:armwave.c     **** 
 509:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3696              		.loc 1 509 5 is_stmt 1 view .LVU1022
 3697 1024 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3698              	.LVL275:
 3699              		.loc 1 509 5 is_stmt 0 view .LVU1023
 3700 1028 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3701              	.LVL276:
 510:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 511:armwave.c     **** 
 512:armwave.c     ****     PyBuffer_Release(&buffer);
 3702              		.loc 1 512 5 is_stmt 1 view .LVU1024
 3703 102c 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3704 1030 FEFFFFEB 		bl	PyBuffer_Release		@
 3705              	.LVL277:
 513:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 514:armwave.c     **** 
 515:armwave.c     ****     Py_RETURN_TRUE;
 3706              		.loc 1 515 5 view .LVU1025
 3707              	.LBB47:
 3708              	.LBI47:
 3709              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3710              		.loc 2 456 20 view .LVU1026
 3711              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3712              		.loc 2 458 21 view .LVU1027
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3713              		.loc 2 459 5 view .LVU1028
 3714              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3715              		.loc 2 459 18 is_stmt 0 view .LVU1029
 3716 1034 38309FE5 		ldr	r3, .L226	@ tmp126,
 3717              	.LBE48:
 3718              	.LBE47:
 3719              	@ armwave.c:515:     Py_RETURN_TRUE;
 3720              		.loc 1 515 5 view .LVU1030
 3721 1038 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3722              	.LBB50:
 3723              	.LBB49:
 3724              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3725              		.loc 2 459 18 view .LVU1031
 3726 103c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3727 1040 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3728 1044 002083E5 		str	r2, [r3]	@ tmp128,
 3729              	.LBE49:
 3730              	.LBE50:
 3731              	@ armwave.c:516: }
 516:armwave.c     **** }
 3732              		.loc 1 516 1 view .LVU1032
 3733 1048 34D08DE2 		add	sp, sp, #52	@,,
 3734              		.cfi_remember_state
 3735              		.cfi_def_cfa_offset 4
 3736              		@ sp needed	@
 3737 104c 04F09DE4 		ldr	pc, [sp], #4	@
 3738              	.LVL278:
 3739              	.L225:
 3740              		.cfi_restore_state
 503:armwave.c     ****         Py_RETURN_FALSE;
 3741              		.loc 1 503 9 is_stmt 1 view .LVU1033
 3742 1050 20009FE5 		ldr	r0, .L226+4	@,
 3743              	.LVL279:
 503:armwave.c     ****         Py_RETURN_FALSE;
 3744              		.loc 1 503 9 is_stmt 0 view .LVU1034
 3745 1054 FEFFFFEB 		bl	puts		@
 3746              	.LVL280:
 504:armwave.c     ****     }
 3747              		.loc 1 504 9 is_stmt 1 view .LVU1035
 3748              	.LBB51:
 3749              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3750              		.loc 2 456 20 view .LVU1036
 3751              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3752              		.loc 2 458 21 view .LVU1037
 3753              		.loc 2 459 5 view .LVU1038
 3754              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3755              		.loc 2 459 18 is_stmt 0 view .LVU1039
 3756 1058 1C309FE5 		ldr	r3, .L226+8	@ tmp120,
 3757              	.LBE52:
 3758              	.LBE51:
 3759              	@ armwave.c:504:         Py_RETURN_FALSE;
 504:armwave.c     ****     }
 3760              		.loc 1 504 9 view .LVU1040
 3761 105c 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3762              	.LBB54:
 3763              	.LBB53:
 3764              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3765              		.loc 2 459 18 view .LVU1041
 3766 1060 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3767 1064 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3768 1068 002083E5 		str	r2, [r3]	@ tmp122,
 3769              	.LBE53:
 3770              	.LBE54:
 3771              	@ armwave.c:516: }
 3772              		.loc 1 516 1 view .LVU1042
 3773 106c 34D08DE2 		add	sp, sp, #52	@,,
 3774              		.cfi_def_cfa_offset 4
 3775              		@ sp needed	@
 3776 1070 04F09DE4 		ldr	pc, [sp], #4	@
 3777              	.L227:
 3778              		.align	2
 3779              	.L226:
 3780 1074 00000000 		.word	_Py_TrueStruct
 3781 1078 F0010000 		.word	.LC19
 3782 107c 00000000 		.word	_Py_FalseStruct
 3783              		.cfi_endproc
 3784              	.LFE75:
 3786              		.align	2
 3787              		.global	armwave_test_create_am_sine
 3788              		.syntax unified
 3789              		.arm
 3790              		.fpu vfp
 3792              	armwave_test_create_am_sine:
 3793              	.LVL281:
 3794              	.LFB76:
 517:armwave.c     **** 
 518:armwave.c     **** /*
 519:armwave.c     ****  * Make a test AM waveform for render tests.
 520:armwave.c     ****  *
 521:armwave.c     ****  * @param   mod                     modulation depth
 522:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 523:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 524:armwave.c     ****  */
 525:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 526:armwave.c     **** {
 3795              		.loc 1 526 1 is_stmt 1 view -0
 3796              		.cfi_startproc
 3797              		@ args = 0, pretend = 0, frame = 8
 3798              		@ frame_needed = 0, uses_anonymous_args = 0
 527:armwave.c     ****     float v, noise, xnoise, mod_val;
 3799              		.loc 1 527 5 view .LVU1044
 528:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3800              		.loc 1 528 5 view .LVU1045
 3801              	@ armwave.c:526: {
 526:armwave.c     ****     float v, noise, xnoise, mod_val;
 3802              		.loc 1 526 1 is_stmt 0 view .LVU1046
 3803 1080 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3804              		.cfi_def_cfa_offset 32
 3805              		.cfi_offset 4, -32
 3806              		.cfi_offset 5, -28
 3807              		.cfi_offset 6, -24
 3808              		.cfi_offset 7, -20
 3809              		.cfi_offset 8, -16
 3810              		.cfi_offset 9, -12
 3811              		.cfi_offset 10, -8
 3812              		.cfi_offset 14, -4
 3813              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3814              		.loc 1 528 38 view .LVU1047
 3815 1084 7A7A9FED 		vldr.32	s14, .L259	@ tmp180,
 3816              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3817              		.loc 1 528 55 view .LVU1048
 3818 1088 00529FE5 		ldr	r5, .L259+28	@ tmp250,
 3819              	@ armwave.c:526: {
 526:armwave.c     ****     float v, noise, xnoise, mod_val;
 3820              		.loc 1 526 1 view .LVU1049
 3821 108c 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3822              		.cfi_def_cfa_offset 80
 3823              		.cfi_offset 80, -80
 3824              		.cfi_offset 81, -76
 3825              		.cfi_offset 82, -72
 3826              		.cfi_offset 83, -68
 3827              		.cfi_offset 84, -64
 3828              		.cfi_offset 85, -60
 3829              		.cfi_offset 86, -56
 3830              		.cfi_offset 87, -52
 3831              		.cfi_offset 88, -48
 3832              		.cfi_offset 89, -44
 3833              		.cfi_offset 90, -40
 3834              		.cfi_offset 91, -36
 3835 1090 0090A0E1 		mov	r9, r0	@ sets, sets
 3836              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3837              		.loc 1 528 38 view .LVU1050
 3838 1094 0D7AD5ED 		vldr.32	s15, [r5, #52]	@ int	@ tmp264, g_armwave_state.waves
 3839              	@ armwave.c:532:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 529:armwave.c     ****     int s, set_offset = 0;
 530:armwave.c     ****     int w, x;
 531:armwave.c     **** 
 532:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3840              		.loc 1 532 70 view .LVU1051
 3841 1098 303095E5 		ldr	r3, [r5, #48]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3842 109c 342095E5 		ldr	r2, [r5, #52]	@ tmp265, g_armwave_state.waves
 3843              	.LBB57:
 3844              	.LBB58:
 3845              	@ armwave.c:475:     if(g_armwave_state.test_wave_buffer != NULL) {
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3846              		.loc 1 475 23 view .LVU1052
 3847 10a0 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3848              	.LVL282:
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3849              		.loc 1 475 23 view .LVU1053
 3850              	.LBE58:
 3851              	.LBE57:
 3852              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 528:armwave.c     ****     int s, set_offset = 0;
 3853              		.loc 1 528 38 view .LVU1054
 3854 10a4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3855              	@ armwave.c:532:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3856              		.loc 1 532 70 view .LVU1055
 3857 10a8 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3858              	@ armwave.c:526: {
 526:armwave.c     ****     float v, noise, xnoise, mod_val;
 3859              		.loc 1 526 1 view .LVU1056
 3860 10ac 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3861              	.LBB62:
 3862              	.LBB59:
 3863              	@ armwave.c:475:     if(g_armwave_state.test_wave_buffer != NULL) {
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3864              		.loc 1 475 7 view .LVU1057
 3865 10b0 000050E3 		cmp	r0, #0	@ _82,
 3866              	.LBE59:
 3867              	.LBE62:
 3868              	@ armwave.c:526: {
 526:armwave.c     ****     float v, noise, xnoise, mod_val;
 3869              		.loc 1 526 1 view .LVU1058
 3870 10b4 08D04DE2 		sub	sp, sp, #8	@,,
 3871              		.cfi_def_cfa_offset 88
 3872              	@ armwave.c:533:     g_armwave_state.test_wave_buffer_nsets = sets;
 533:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3873              		.loc 1 533 44 view .LVU1059
 3874 10b8 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3875              	@ armwave.c:532:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 532:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3876              		.loc 1 532 45 view .LVU1060
 3877 10bc 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3878              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 528:armwave.c     ****     int s, set_offset = 0;
 3879              		.loc 1 528 38 view .LVU1061
 3880 10c0 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3881              	@ armwave.c:528:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 528:armwave.c     ****     int s, set_offset = 0;
 3882              		.loc 1 528 11 view .LVU1062
 3883 10c4 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3884              	.LVL283:
 529:armwave.c     ****     int w, x;
 3885              		.loc 1 529 5 is_stmt 1 view .LVU1063
 530:armwave.c     **** 
 3886              		.loc 1 530 5 view .LVU1064
 532:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3887              		.loc 1 532 5 view .LVU1065
 3888              		.loc 1 533 5 view .LVU1066
 534:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3889              		.loc 1 534 5 view .LVU1067
 3890              	.LBB63:
 3891              	.LBI57:
 473:armwave.c     **** {
 3892              		.loc 1 473 6 view .LVU1068
 3893              	.LBB60:
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3894              		.loc 1 475 5 view .LVU1069
 3895              	@ armwave.c:475:     if(g_armwave_state.test_wave_buffer != NULL) {
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3896              		.loc 1 475 7 is_stmt 0 view .LVU1070
 3897 10c8 0000000A 		beq	.L229		@,
 476:armwave.c     ****     }
 3898              		.loc 1 476 9 is_stmt 1 view .LVU1071
 3899 10cc FEFFFFEB 		bl	free		@
 3900              	.LVL284:
 3901              	.L229:
 481:armwave.c     **** 
 3902              		.loc 1 481 5 view .LVU1072
 3903              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3904              		.loc 1 481 75 is_stmt 0 view .LVU1073
 3905 10d0 483095E5 		ldr	r3, [r5, #72]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3906 10d4 384095E5 		ldr	r4, [r5, #56]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3907              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3908              		.loc 1 481 40 view .LVU1074
 3909 10d8 0910A0E1 		mov	r1, r9	@, sets
 3910              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3911              		.loc 1 481 75 view .LVU1075
 3912 10dc 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3913              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3914              		.loc 1 481 40 view .LVU1076
 3915 10e0 0400A0E1 		mov	r0, r4	@, _85
 3916 10e4 FEFFFFEB 		bl	calloc		@
 3917              	.LVL285:
 3918              	@ armwave.c:483:     if(g_armwave_state.test_wave_buffer == NULL) {
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3919              		.loc 1 483 7 view .LVU1077
 3920 10e8 000050E3 		cmp	r0, #0	@ tmp191,
 3921              	@ armwave.c:481:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 481:armwave.c     **** 
 3922              		.loc 1 481 38 view .LVU1078
 3923 10ec 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3924              		.loc 1 483 5 is_stmt 1 view .LVU1079
 3925              	@ armwave.c:483:     if(g_armwave_state.test_wave_buffer == NULL) {
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3926              		.loc 1 483 7 is_stmt 0 view .LVU1080
 3927 10f0 5A00000A 		beq	.L258		@,
 3928              	.L230:
 3929              	.LVL286:
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3930              		.loc 1 483 7 view .LVU1081
 3931              	.LBE60:
 3932              	.LBE63:
 3933              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 535:armwave.c     **** 
 536:armwave.c     ****     for(s = 0; s < sets; s++) {
 3934              		.loc 1 536 5 discriminator 1 view .LVU1082
 3935 10f4 000059E3 		cmp	r9, #0	@ sets,
 3936 10f8 550000DA 		ble	.L228		@,
 3937              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 538:armwave.c     ****     
 539:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 540:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 541:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 542:armwave.c     **** 
 543:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 544:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 545:armwave.c     ****                 noise *= noise;
 546:armwave.c     ****                 noise *= noise;
 547:armwave.c     ****                 noise *= noise;
 548:armwave.c     **** 
 549:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 550:armwave.c     ****                     noise = -noise;
 551:armwave.c     **** 
 552:armwave.c     ****                 noise += 1.0f;
 553:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 554:armwave.c     **** 
 555:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3938              		.loc 1 555 45 view .LVU1083
 3939 10fc 5C8A9FED 		vldr.32	s16, .L259	@ tmp258,
 3940              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 556:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 557:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 558:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3941              		.loc 1 558 104 view .LVU1084
 3942 1100 5CCA9FED 		vldr.32	s24, .L259+4	@ tmp259,
 3943              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 3944              		.loc 1 536 5 view .LVU1085
 3945 1104 0070A0E3 		mov	r7, #0	@ set_offset,
 3946              	@ armwave.c:537:         printf("Calculating test set %d\n", s);
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3947              		.loc 1 537 9 view .LVU1086
 3948 1108 84A19FE5 		ldr	r10, .L259+32	@ tmp257,
 3949              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 3950              		.loc 1 536 5 view .LVU1087
 3951 110c 0780A0E1 		mov	r8, r7	@ s, set_offset
 3952              	.LVL287:
 3953              	.L231:
 537:armwave.c     ****         printf("Calculating test set %d\n", s);
 3954              		.loc 1 537 9 is_stmt 1 view .LVU1088
 3955 1110 0810A0E1 		mov	r1, r8	@, s
 3956 1114 0A00A0E1 		mov	r0, r10	@, tmp257
 3957 1118 FEFFFFEB 		bl	printf		@
 3958              	.LVL288:
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3959              		.loc 1 539 9 view .LVU1089
 3960              	@ armwave.c:539:         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3961              		.loc 1 539 39 is_stmt 0 view .LVU1090
 3962 111c 342095E5 		ldr	r2, [r5, #52]	@ prephitmp_120, g_armwave_state.waves
 3963              	@ armwave.c:539:         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3964              		.loc 1 539 9 view .LVU1091
 3965 1120 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3966 1124 450000DA 		ble	.L232		@,
 3967              	@ armwave.c:541:             mod_val = 0.5f + (_1_waves_mod * w);
 541:armwave.c     **** 
 3968              		.loc 1 541 21 view .LVU1092
 3969 1128 53CADFED 		vldr.32	s25, .L259+8	@ tmp200,
 3970              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3971              		.loc 1 555 33 view .LVU1093
 3972 112c 53BA9FED 		vldr.32	s22, .L259+12	@ tmp253,
 3973              	@ armwave.c:553:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 3974              		.loc 1 553 24 view .LVU1094
 3975 1130 53AADFED 		vldr.32	s21, .L259+16	@ tmp254,
 3976 1134 483095E5 		ldr	r3, [r5, #72]	@ prephitmp_124, g_armwave_state.wave_length
 3977              	@ armwave.c:539:         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3978              		.loc 1 539 15 view .LVU1095
 3979 1138 0060A0E3 		mov	r6, #0	@ w,
 3980              	.LVL289:
 3981              	.L239:
 541:armwave.c     **** 
 3982              		.loc 1 541 13 is_stmt 1 view .LVU1096
 3983              	@ armwave.c:541:             mod_val = 0.5f + (_1_waves_mod * w);
 541:armwave.c     **** 
 3984              		.loc 1 541 21 is_stmt 0 view .LVU1097
 3985 113c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3986 1140 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3987              	@ armwave.c:543:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3988              		.loc 1 543 13 view .LVU1098
 3989 1144 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3990              	@ armwave.c:541:             mod_val = 0.5f + (_1_waves_mod * w);
 541:armwave.c     **** 
 3991              		.loc 1 541 21 view .LVU1099
 3992 1148 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3993 114c 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3994              	.LVL290:
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3995              		.loc 1 543 13 is_stmt 1 view .LVU1100
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3996              		.loc 1 543 13 is_stmt 0 view .LVU1101
 3997 1150 370000DA 		ble	.L233		@,
 3998 1154 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3999              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4000              		.loc 1 558 113 view .LVU1102
 4001 1158 4AAA9FED 		vldr.32	s20, .L259+20	@ tmp229,
 4002 115c 4A8ADFED 		vldr.32	s17, .L259+24	@ tmp230,
 4003              	@ armwave.c:543:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4004              		.loc 1 543 19 view .LVU1103
 4005 1160 0040A0E3 		mov	r4, #0	@ x,
 4006              	.LVL291:
 4007              	.L238:
 544:armwave.c     ****                 noise *= noise;
 4008              		.loc 1 544 17 is_stmt 1 view .LVU1104
 4009              	@ armwave.c:544:                 noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****                 noise *= noise;
 4010              		.loc 1 544 28 is_stmt 0 view .LVU1105
 4011 1164 FEFFFFEB 		bl	rand		@
 4012              	.LVL292:
 4013              	@ armwave.c:544:                 noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****                 noise *= noise;
 4014              		.loc 1 544 35 view .LVU1106
 4015 1168 7000FFE6 		uxth	r0, r0	@ tmp201,
 4016              	@ armwave.c:544:                 noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****                 noise *= noise;
 4017              		.loc 1 544 45 view .LVU1107
 4018 116c 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 4019 1170 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 4020              	@ armwave.c:544:                 noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****                 noise *= noise;
 4021              		.loc 1 544 24 view .LVU1108
 4022 1174 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 4023              	.LVL293:
 545:armwave.c     ****                 noise *= noise;
 4024              		.loc 1 545 17 is_stmt 1 view .LVU1109
 4025              	@ armwave.c:545:                 noise *= noise;
 545:armwave.c     ****                 noise *= noise;
 4026              		.loc 1 545 23 is_stmt 0 view .LVU1110
 4027 1178 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4028              	.LVL294:
 546:armwave.c     ****                 noise *= noise;
 4029              		.loc 1 546 17 is_stmt 1 view .LVU1111
 4030              	@ armwave.c:546:                 noise *= noise;
 546:armwave.c     ****                 noise *= noise;
 4031              		.loc 1 546 23 is_stmt 0 view .LVU1112
 4032 117c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4033              	.LVL295:
 547:armwave.c     **** 
 4034              		.loc 1 547 17 is_stmt 1 view .LVU1113
 4035              	@ armwave.c:547:                 noise *= noise;
 547:armwave.c     **** 
 4036              		.loc 1 547 23 is_stmt 0 view .LVU1114
 4037 1180 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 4038              	.LVL296:
 549:armwave.c     ****                     noise = -noise;
 4039              		.loc 1 549 17 is_stmt 1 view .LVU1115
 4040              	@ armwave.c:549:                 if((rand() & 0xffff) > 0x7fff)
 549:armwave.c     ****                     noise = -noise;
 4041              		.loc 1 549 21 is_stmt 0 view .LVU1116
 4042 1184 FEFFFFEB 		bl	rand		@
 4043              	.LVL297:
 550:armwave.c     **** 
 4044              		.loc 1 550 21 is_stmt 1 view .LVU1117
 4045              	@ armwave.c:549:                 if((rand() & 0xffff) > 0x7fff)
 549:armwave.c     ****                     noise = -noise;
 4046              		.loc 1 549 19 is_stmt 0 view .LVU1118
 4047 1188 020910E3 		tst	r0, #32768	@,
 4048              	@ armwave.c:550:                     noise = -noise;
 550:armwave.c     **** 
 4049              		.loc 1 550 27 view .LVU1119
 4050 118c 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 4051              	.LVL298:
 552:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4052              		.loc 1 552 17 is_stmt 1 view .LVU1120
 553:armwave.c     **** 
 4053              		.loc 1 553 17 view .LVU1121
 4054              	@ armwave.c:553:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 4055              		.loc 1 553 27 is_stmt 0 view .LVU1122
 4056 1190 FEFFFFEB 		bl	rand		@
 4057              	.LVL299:
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4058              		.loc 1 555 17 is_stmt 1 view .LVU1123
 4059              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4060              		.loc 1 555 45 is_stmt 0 view .LVU1124
 4061 1194 127A95ED 		vldr.32	s14, [r5, #72]	@ int	@ tmp270, g_armwave_state.wave_length
 4062              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4063              		.loc 1 555 33 view .LVU1125
 4064 1198 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4065              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4066              		.loc 1 555 45 view .LVU1126
 4067 119c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 4068              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4069              		.loc 1 555 33 view .LVU1127
 4070 11a0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 4071              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4072              		.loc 1 555 45 view .LVU1128
 4073 11a4 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 4074              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4075              		.loc 1 555 33 view .LVU1129
 4076 11a8 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 4077              	@ armwave.c:553:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 4078              		.loc 1 553 34 view .LVU1130
 4079 11ac 7000FFE6 		uxth	r0, r0	@ tmp214,
 4080              	.LVL300:
 4081              	@ armwave.c:553:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 4082              		.loc 1 553 44 view .LVU1131
 4083 11b0 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 4084 11b4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 4085              	@ armwave.c:553:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 4086              		.loc 1 553 24 view .LVU1132
 4087 11b8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 4088              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4089              		.loc 1 555 77 view .LVU1133
 4090 11bc A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 4091              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4092              		.loc 1 555 22 view .LVU1134
 4093 11c0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 4094 11c4 FEFFFFEB 		bl	sin		@
 4095              	.LVL301:
 4096              		.loc 1 558 17 is_stmt 1 view .LVU1135
 4097              	@ armwave.c:552:                 noise += 1.0f;
 552:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4098              		.loc 1 552 23 is_stmt 0 view .LVU1136
 4099 11c8 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 4100              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4101              		.loc 1 558 104 view .LVU1137
 4102 11cc 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 4103              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4104              		.loc 1 555 98 view .LVU1138
 4105 11d0 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 4106              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4107              		.loc 1 555 87 view .LVU1139
 4108 11d4 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 4109              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4110              		.loc 1 555 98 view .LVU1140
 4111 11d8 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 4112              	@ armwave.c:555:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4113              		.loc 1 555 19 view .LVU1141
 4114 11dc C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 4115              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4116              		.loc 1 558 113 view .LVU1142
 4117 11e0 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 4118 11e4 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 4119 11e8 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 4120 11ec 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4121 11f0 050000DA 		ble	.L235		@,
 4122              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4123              		.loc 1 558 104 discriminator 1 view .LVU1143
 4124 11f4 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 4125 11f8 FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 4126 11fc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4127 1200 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 4128 1204 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 4129 1208 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 4130              	.L235:
 4131              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4132              		.loc 1 558 57 discriminator 12 view .LVU1144
 4133 120c 302095E5 		ldr	r2, [r5, #48]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4134              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4135              		.loc 1 558 102 discriminator 12 view .LVU1145
 4136 1210 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4137 1214 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 4138 1218 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 4139              	@ armwave.c:543:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4140              		.loc 1 543 58 discriminator 12 view .LVU1146
 4141 121c 014084E2 		add	r4, r4, #1	@ x, x,
 4142              	.LVL302:
 4143              	@ armwave.c:558:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4144              		.loc 1 558 102 discriminator 12 view .LVU1147
 4145 1220 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 4146              	@ armwave.c:543:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4147              		.loc 1 543 43 discriminator 12 view .LVU1148
 4148 1224 483095E5 		ldr	r3, [r5, #72]	@ prephitmp_124, g_armwave_state.wave_length
 4149              	@ armwave.c:543:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4150              		.loc 1 543 13 discriminator 12 view .LVU1149
 4151 1228 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 4152 122c CCFFFFCA 		bgt	.L238		@,
 4153 1230 342095E5 		ldr	r2, [r5, #52]	@ prephitmp_120, g_armwave_state.waves
 4154              	.LVL303:
 4155              	.L233:
 4156              	@ armwave.c:539:         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4157              		.loc 1 539 48 discriminator 2 view .LVU1150
 4158 1234 016086E2 		add	r6, r6, #1	@ w, w,
 4159              	.LVL304:
 4160              	@ armwave.c:539:         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4161              		.loc 1 539 9 discriminator 2 view .LVU1151
 4162 1238 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 4163 123c BEFFFFBA 		blt	.L239		@,
 4164              	.LVL305:
 4165              	.L232:
 559:armwave.c     ****             }
 560:armwave.c     ****         }
 561:armwave.c     **** 
 562:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4166              		.loc 1 562 9 is_stmt 1 discriminator 2 view .LVU1152
 4167              	@ armwave.c:562:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4168              		.loc 1 562 46 is_stmt 0 discriminator 2 view .LVU1153
 4169 1240 303095E5 		ldr	r3, [r5, #48]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4170              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 4171              		.loc 1 536 27 discriminator 2 view .LVU1154
 4172 1244 018088E2 		add	r8, r8, #1	@ s, s,
 4173              	.LVL306:
 4174              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 4175              		.loc 1 536 5 discriminator 2 view .LVU1155
 4176 1248 080059E1 		cmp	r9, r8	@ sets, s
 4177              	@ armwave.c:562:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4178              		.loc 1 562 20 discriminator 2 view .LVU1156
 4179 124c 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 4180              	.LVL307:
 4181              	@ armwave.c:536:     for(s = 0; s < sets; s++) {
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 4182              		.loc 1 536 5 discriminator 2 view .LVU1157
 4183 1250 AEFFFF1A 		bne	.L231		@,
 4184              	.LVL308:
 4185              	.L228:
 4186              	@ armwave.c:564: }
 563:armwave.c     ****     }
 564:armwave.c     **** }
 4187              		.loc 1 564 1 view .LVU1158
 4188 1254 08D08DE2 		add	sp, sp, #8	@,,
 4189              		.cfi_remember_state
 4190              		.cfi_def_cfa_offset 80
 4191              		@ sp needed	@
 4192 1258 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 4193              		.cfi_restore 90
 4194              		.cfi_restore 91
 4195              		.cfi_restore 88
 4196              		.cfi_restore 89
 4197              		.cfi_restore 86
 4198              		.cfi_restore 87
 4199              		.cfi_restore 84
 4200              		.cfi_restore 85
 4201              		.cfi_restore 82
 4202              		.cfi_restore 83
 4203              		.cfi_restore 80
 4204              		.cfi_restore 81
 4205              		.cfi_def_cfa_offset 32
 4206              	.LVL309:
 4207              		.loc 1 564 1 view .LVU1159
 4208 125c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 4209              	.LVL310:
 4210              	.L258:
 4211              		.cfi_restore_state
 4212              	.LBB64:
 4213              	.LBB61:
 484:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4214              		.loc 1 484 9 is_stmt 1 view .LVU1160
 4215 1260 940901E0 		mul	r1, r4, r9	@, _85, sets
 4216 1264 0920A0E1 		mov	r2, r9	@, sets
 4217 1268 28009FE5 		ldr	r0, .L259+36	@,
 4218 126c FEFFFFEB 		bl	printf		@
 4219              	.LVL311:
 486:armwave.c     ****     }
 4220              		.loc 1 486 9 view .LVU1161
 4221 1270 9FFFFFEA 		b	.L230		@
 4222              	.L260:
 4223              		.align	2
 4224              	.L259:
 4225 1274 0000803F 		.word	1065353216
 4226 1278 00007F43 		.word	1132396544
 4227 127c 0000003F 		.word	1056964608
 4228 1280 C3F5C840 		.word	1086911939
 4229 1284 38FFC74A 		.word	1254620984
 4230 1288 0000FE42 		.word	1123942400
 4231 128c 00000043 		.word	1124073472
 4232 1290 00000000 		.word	g_armwave_state
 4233 1294 44020000 		.word	.LC20
 4234 1298 9C010000 		.word	.LC18
 4235              	.LBE61:
 4236              	.LBE64:
 4237              		.cfi_endproc
 4238              	.LFE76:
 4240              		.align	2
 4241              		.global	armwave_cleanup
 4242              		.syntax unified
 4243              		.arm
 4244              		.fpu vfp
 4246              	armwave_cleanup:
 4247              	.LFB77:
 565:armwave.c     **** 
 566:armwave.c     **** /*
 567:armwave.c     ****  * Make a test square waveform.
 568:armwave.c     ****  *
 569:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 570:armwave.c     ****  */
 571:armwave.c     **** #if 0
 572:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 573:armwave.c     **** {
 574:armwave.c     ****     uint8_t v;
 575:armwave.c     ****     float noise, xnoise;
 576:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 577:armwave.c     ****     int w, x;
 578:armwave.c     **** 
 579:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 580:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 581:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 582:armwave.c     ****             noise *= noise;
 583:armwave.c     ****             noise *= noise;
 584:armwave.c     ****             noise *= noise;
 585:armwave.c     **** 
 586:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 587:armwave.c     ****                 noise = -noise;
 588:armwave.c     **** 
 589:armwave.c     ****             //noise += 1.0f;
 590:armwave.c     **** 
 591:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 592:armwave.c     ****                 new_level = 0.2f;
 593:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 594:armwave.c     ****                 new_level = 0.8f;
 595:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 596:armwave.c     ****                 new_level = 0.2f;
 597:armwave.c     ****             } else {
 598:armwave.c     ****                 new_level = 0.8f;
 599:armwave.c     ****             }
 600:armwave.c     **** 
 601:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 602:armwave.c     **** 
 603:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 604:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 605:armwave.c     ****         }
 606:armwave.c     ****     }
 607:armwave.c     **** }
 608:armwave.c     **** #endif
 609:armwave.c     **** 
 610:armwave.c     **** /*
 611:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 612:armwave.c     ****  */
 613:armwave.c     **** void armwave_cleanup()
 614:armwave.c     **** {
 4248              		.loc 1 614 1 view -0
 4249              		.cfi_startproc
 4250              		@ args = 0, pretend = 0, frame = 0
 4251              		@ frame_needed = 0, uses_anonymous_args = 0
 615:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4252              		.loc 1 615 5 view .LVU1163
 4253              	@ armwave.c:614: {
 614:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4254              		.loc 1 614 1 is_stmt 0 view .LVU1164
 4255 129c 10402DE9 		push	{r4, lr}	@
 4256              		.cfi_def_cfa_offset 8
 4257              		.cfi_offset 4, -8
 4258              		.cfi_offset 14, -4
 4259              	@ armwave.c:615:     free(g_armwave_state.out_pixbuf);
 4260              		.loc 1 615 25 view .LVU1165
 4261 12a0 34409FE5 		ldr	r4, .L263	@ tmp114,
 4262              	@ armwave.c:615:     free(g_armwave_state.out_pixbuf);
 4263              		.loc 1 615 5 view .LVU1166
 4264 12a4 640094E5 		ldr	r0, [r4, #100]	@, g_armwave_state.out_pixbuf
 4265 12a8 FEFFFFEB 		bl	free		@
 4266              	.LVL312:
 616:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4267              		.loc 1 616 5 is_stmt 1 view .LVU1167
 4268 12ac 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4269 12b0 FEFFFFEB 		bl	free		@
 4270              	.LVL313:
 617:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4271              		.loc 1 617 5 view .LVU1168
 4272 12b4 800094E5 		ldr	r0, [r4, #128]	@, g_armwave_state.xcoord_to_xpixel
 4273 12b8 FEFFFFEB 		bl	free		@
 4274              	.LVL314:
 618:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4275              		.loc 1 618 5 view .LVU1169
 4276 12bc 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4277 12c0 FEFFFFEB 		bl	free		@
 4278              	.LVL315:
 619:armwave.c     **** 
 620:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4279              		.loc 1 620 5 view .LVU1170
 4280              	@ armwave.c:620:     g_armwave_state.out_pixbuf = NULL;
 4281              		.loc 1 620 32 is_stmt 0 view .LVU1171
 4282 12c4 0030A0E3 		mov	r3, #0	@ tmp123,
 4283 12c8 643084E5 		str	r3, [r4, #100]	@ tmp123, g_armwave_state.out_pixbuf
 621:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4284              		.loc 1 621 5 is_stmt 1 view .LVU1172
 4285              	@ armwave.c:621:     g_armwave_state.ch1_buffer = NULL;
 4286              		.loc 1 621 32 is_stmt 0 view .LVU1173
 4287 12cc 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 622:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4288              		.loc 1 622 5 is_stmt 1 view .LVU1174
 4289              	@ armwave.c:622:     g_armwave_state.xcoord_to_xpixel = NULL;
 4290              		.loc 1 622 38 is_stmt 0 view .LVU1175
 4291 12d0 803084E5 		str	r3, [r4, #128]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 623:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4292              		.loc 1 623 5 is_stmt 1 view .LVU1176
 4293              	@ armwave.c:623:     g_armwave_state.test_wave_buffer = NULL;
 4294              		.loc 1 623 38 is_stmt 0 view .LVU1177
 4295 12d4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4296              	@ armwave.c:624: }
 624:armwave.c     **** }
 4297              		.loc 1 624 1 view .LVU1178
 4298 12d8 1080BDE8 		pop	{r4, pc}	@
 4299              	.L264:
 4300              		.align	2
 4301              	.L263:
 4302 12dc 00000000 		.word	g_armwave_state
 4303              		.cfi_endproc
 4304              	.LFE77:
 4306              		.comm	gamma_table,256,4
 4307              		.comm	g_armwave_state,132,4
 4308              		.section	.rodata
 4309              		.align	2
 4310              		.set	.LANCHOR0,. + 0
 4313              	__PRETTY_FUNCTION__.17094:
 4314 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 4314      6176655F 
 4314      66696C6C 
 4314      5F706978 
 4314      6275665F 
 4317              	__PRETTY_FUNCTION__.17124:
 4318 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 4318      6176655F 
 4318      66696C6C 
 4318      5F706978 
 4318      6275665F 
 4319 0033 00       		.space	1
 4322              	__PRETTY_FUNCTION__.17146:
 4323 0034 61726D77 		.ascii	"armwave_setup_render\000"
 4323      6176655F 
 4323      73657475 
 4323      705F7265 
 4323      6E646572 
 4324 0049 000000   		.space	3
 4327              	__PRETTY_FUNCTION__.17153:
 4328 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 4328      6176655F 
 4328      7365745F 
 4328      77617665 
 4328      5F706F69 
 4329 0065 000000   		.space	3
 4332              	__PRETTY_FUNCTION__.17160:
 4333 0068 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 4333      6176655F 
 4333      7365745F 
 4333      77617665 
 4333      5F706F69 
 4334              		.section	.rodata.str1.4,"aMS",%progbits,1
 4335              		.align	2
 4336              	.LC0:
 4337 0000 76302E30 		.ascii	"v0.0.1\000"
 4337      2E3100
 4338 0007 00       		.space	1
 4339              	.LC1:
 4340 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 4340      61766520 
 4340      76657273 
 4340      696F6E3A 
 4340      2025730A 
 4341 001d 000000   		.space	3
 4342              	.LC2:
 4343 0020 61726D77 		.ascii	"armwave.c\000"
 4343      6176652E 
 4343      6300
 4344 002a 0000     		.space	2
 4345              	.LC3:
 4346 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 4346      62756666 
 4346      65722021 
 4346      3D204E55 
 4346      4C4C00
 4347 003f 00       		.space	1
 4348              	.LC4:
 4349 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 4349      20653D25 
 4349      6420773D 
 4349      25642077 
 4349      733D2564 
 4350              	.LC5:
 4351 006c 73746172 		.ascii	"start_point < end_point\000"
 4351      745F706F 
 4351      696E7420 
 4351      3C20656E 
 4351      645F706F 
 4352              	.LC6:
 4353 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 4353      7566665F 
 4353      73697A65 
 4353      3D25640A 
 4353      00
 4354 0095 000000   		.space	3
 4355              	.LC7:
 4356 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 4356      6D776176 
 4356      655F7374 
 4356      6174652E 
 4356      6368315F 
 4357 00bb 00       		.space	1
 4358              	.LC8:
 4359 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 4359      6D776176 
 4359      655F7374 
 4359      6174652E 
 4359      78636F6F 
 4360 00e5 000000   		.space	3
 4361              	.LC9:
 4362 00e8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 4362      3A203078 
 4362      25303878 
 4362      20307825 
 4362      30387820 
 4363              	.LC10:
 4364 010c 77617665 		.ascii	"wave_buffer != NULL\000"
 4364      5F627566 
 4364      66657220 
 4364      213D204E 
 4364      554C4C00 
 4365              	.LC11:
 4366 0120 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 4366      6176655F 
 4366      7365745F 
 4366      77617665 
 4366      5F706F69 
 4367 0153 78636565 		.ascii	"xceeded\000"
 4367      64656400 
 4368 015b 00       		.space	1
 4369              	.LC12:
 4370 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 4370      5F627566 
 4370      6665725F 
 4370      70747220 
 4370      213D2030 
 4371 0171 000000   		.space	3
 4372              	.LC13:
 4373 0174 776200   		.ascii	"wb\000"
 4374 0177 00       		.space	1
 4375              	.LC14:
 4376 0178 50330A00 		.ascii	"P3\012\000"
 4377              	.LC15:
 4378 017c 25642025 		.ascii	"%d %d\012\000"
 4378      640A00
 4379 0183 00       		.space	1
 4380              	.LC16:
 4381 0184 3235350A 		.ascii	"255\012\000"
 4381      00
 4382 0189 000000   		.space	3
 4383              	.LC17:
 4384 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 4384      25336420 
 4384      2533640A 
 4384      00
 4385 0199 000000   		.space	3
 4386              	.LC18:
 4387 019c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 4387      6176655F 
 4387      74657374 
 4387      5F627566 
 4387      6665725F 
 4388 01cf 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 4388      20627566 
 4388      66657220 
 4388      28256420 
 4388      62797465 
 4389              	.LC19:
 4390 01f0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 4390      6176655F 
 4390      66696C6C 
 4390      5F706978 
 4390      6275665F 
 4391 0223 65722829 		.ascii	"er() failed, returning PyFalse\000"
 4391      20666169 
 4391      6C65642C 
 4391      20726574 
 4391      75726E69 
 4392 0242 0000     		.space	2
 4393              	.LC20:
 4394 0244 43616C63 		.ascii	"Calculating test set %d\012\000"
 4394      756C6174 
 4394      696E6720 
 4394      74657374 
 4394      20736574 
 4395              		.text
 4396              	.Letext0:
 4397              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 4398              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 4399              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 4400              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 4401              		.file 7 "/usr/include/stdio.h"
 4402              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 4403              		.file 9 "/usr/include/errno.h"
 4404              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 4405              		.file 11 "/usr/include/unistd.h"
 4406              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 4407              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 4408              		.file 14 "/usr/local/include/python3.8/pyport.h"
 4409              		.file 15 "/usr/include/math.h"
 4410              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 4411              		.file 17 "/usr/include/time.h"
 4412              		.file 18 "/usr/local/include/python3.8/pymem.h"
 4413              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 4414              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 4415              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 4416              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 4417              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 4418              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 4419              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 4420              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 4421              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 4422              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 4423              		.file 29 "/usr/local/include/python3.8/longobject.h"
 4424              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 4425              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 4426              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 4427              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 4428              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 4429              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 4430              		.file 36 "/usr/local/include/python3.8/listobject.h"
 4431              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 4432              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 4433              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 4434              		.file 40 "/usr/local/include/python3.8/setobject.h"
 4435              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 4436              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 4437              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4438              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4439              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4440              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4441              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4442              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4443              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4444              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4445              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4446              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4447              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4448              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4449              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4450              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4451              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4452              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4453              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4454              		.file 60 "/usr/local/include/python3.8/context.h"
 4455              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4456              		.file 62 "/usr/local/include/python3.8/code.h"
 4457              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4458              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4459              		.file 65 "/usr/local/include/python3.8/import.h"
 4460              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4461              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4462              		.file 68 "/usr/include/malloc.h"
 4463              		.file 69 "armwave.h"
 4464              		.file 70 "/usr/include/stdlib.h"
 4465              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 4466              		.file 72 "/usr/include/assert.h"
 4467              		.file 73 "<built-in>"
 4468              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
