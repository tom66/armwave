   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB71:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)		__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)		__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 143:armwave.c     ****             	word >>= 8;
 144:armwave.c     ****     		}
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 156 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 167:armwave.c     ****     assert((target_height % 256) == 0);
 168:armwave.c     **** 
 169:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 170:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 170 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp171,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 172:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 172 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 173:armwave.c     ****     g_armwave_state.waves = waves;
 174:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 175:armwave.c     ****     g_armwave_state.target_width = target_width;
 176:armwave.c     ****     g_armwave_state.target_height = target_height;
 177:armwave.c     **** 
 178:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 179:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 180:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 181:armwave.c     ****     g_armwave_state.slice_height = 64;  
 182:armwave.c     **** 
 183:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 183 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 171 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 118              		.loc 1 164 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 120              		.loc 1 167 5 is_stmt 1 view .LVU12
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 170 5 view .LVU13
 122              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 174 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 173 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 183 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 171 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 170 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 171 5 is_stmt 1 view .LVU19
 172:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 172 5 view .LVU20
 139              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 140              		.loc 1 176 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 172 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 173 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 175 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 173 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 174 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 154              		.loc 1 181 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 174 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 175 5 is_stmt 1 view .LVU29
 176:armwave.c     **** 
 160              		.loc 1 176 5 view .LVU30
 181:armwave.c     **** 
 161              		.loc 1 181 5 view .LVU31
 162              		.loc 1 183 5 view .LVU32
 163              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 183 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 184:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 184 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 185:armwave.c     **** 
 186:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 186 5 view .LVU35
 172              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 186 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 187 33 view .LVU37
 180 0064 A0209FE5 		ldr	r2, .L12+8	@ tmp149,
 181              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 189:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 189 33 view .LVU38
 183 0068 FA30A0E3 		mov	r3, #250	@ tmp152,
 184              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 187 33 view .LVU39
 186 006c 402084E5 		str	r2, [r4, #64]	@ tmp149, MEM[(short int *)&g_armwave_state + 64B]
 187              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 189 33 view .LVU40
 189 0070 B434C4E1 		strh	r3, [r4, #68]	@ movhi	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 190:armwave.c     **** 
 191:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 191 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 186 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 187 5 is_stmt 1 view .LVU43
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 188 5 view .LVU44
 189:armwave.c     **** 
 198              		.loc 1 189 5 view .LVU45
 199              		.loc 1 191 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 192:armwave.c     **** 
 193:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 194:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 194 5 view .LVU47
 202              	.LVL3:
 195:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 195 5 view .LVU48
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 196 5 view .LVU49
 205              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 196 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp173, g_armwave_state.slice_height
 208              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 197 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 196 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp158, tmp173
 214              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 196 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp160, tmp158
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp160, g_armwave_state.slice_record_height
 218              		.loc 1 197 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 197 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 198:armwave.c     **** 
 199:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 199 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp161,
 226              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 197 38 view .LVU57
 228 009c 580084E5 		str	r0, [r4, #88]	@ tmp161, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 199 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 200:armwave.c     **** 
 201:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 201 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.23, tmp161,
 234              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 235              		.loc 1 199 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 202:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 202 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 202 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 201 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 201 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 202 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, xx
 253              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 202 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp167, tmp166
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp167, tmp167
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp167, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 201 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 203:armwave.c     **** 
 204:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 205:armwave.c     ****     }
 206:armwave.c     **** 
 207:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 207 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 207 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 207 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:208: }
 208:armwave.c     **** }
 271              		.loc 1 208 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 191:armwave.c     **** 
 275              		.loc 1 191 5 is_stmt 1 view .LVU72
 276 00dc 2C309FE5 		ldr	r3, .L12+12	@,
 277 00e0 BF20A0E3 		mov	r2, #191	@,
 278 00e4 28109FE5 		ldr	r1, .L12+16	@,
 279 00e8 28009FE5 		ldr	r0, .L12+20	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 199:armwave.c     **** 
 283              		.loc 1 199 5 view .LVU73
 284 00f0 18309FE5 		ldr	r3, .L12+12	@,
 285 00f4 C720A0E3 		mov	r2, #199	@,
 286 00f8 14109FE5 		ldr	r1, .L12+16	@,
 287 00fc 18009FE5 		ldr	r0, .L12+24	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c F609F406 		.word	116656630
 296 0110 00000000 		.word	.LANCHOR0
 297 0114 00000000 		.word	.LC0
 298 0118 0C000000 		.word	.LC1
 299 011c 30000000 		.word	.LC2
 300              		.cfi_endproc
 301              	.LFE71:
 303              		.align	2
 304              		.global	test_create_waveform
 305              		.syntax unified
 306              		.arm
 307              		.fpu vfp
 309              	test_create_waveform:
 310              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 311              		.loc 1 51 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 315              		.loc 1 52 5 view .LVU75
  53:armwave.c     **** 
 316              		.loc 1 53 5 view .LVU76
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 317              		.loc 1 55 5 view .LVU77
 318              	.LVL11:
 319              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 320              		.loc 1 51 1 is_stmt 0 view .LVU78
 321 0120 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 322              		.cfi_def_cfa_offset 36
 323              		.cfi_offset 4, -36
 324              		.cfi_offset 5, -32
 325              		.cfi_offset 6, -28
 326              		.cfi_offset 7, -24
 327              		.cfi_offset 8, -20
 328              		.cfi_offset 9, -16
 329              		.cfi_offset 10, -12
 330              		.cfi_offset 11, -8
 331              		.cfi_offset 14, -4
 332 0124 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 333              		.cfi_def_cfa_offset 84
 334              		.cfi_offset 80, -84
 335              		.cfi_offset 81, -80
 336              		.cfi_offset 82, -76
 337              		.cfi_offset 83, -72
 338              		.cfi_offset 84, -68
 339              		.cfi_offset 85, -64
 340              		.cfi_offset 86, -60
 341              		.cfi_offset 87, -56
 342              		.cfi_offset 88, -52
 343              		.cfi_offset 89, -48
 344              		.cfi_offset 90, -44
 345              		.cfi_offset 91, -40
 346 0128 5C819FE5 		ldr	r8, .L33+40	@ _75,
 347              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 348              		.loc 1 56 33 view .LVU79
 349 012c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 350 0130 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.39, _75,
 351              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 352              		.loc 1 56 13 view .LVU80
 353 0134 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 354              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 355              		.loc 1 60 20 view .LVU81
 356 0138 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 357              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 358              		.loc 1 71 29 view .LVU82
 359 013c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 360              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 361              		.loc 1 71 33 view .LVU83
 362 0140 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 363              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 364              		.loc 1 69 20 view .LVU84
 365 0144 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 366 0148 02B886E2 		add	fp, r6, #131072	@ _81,,
 367 014c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 368              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 369              		.loc 1 51 1 view .LVU85
 370 0150 0CD04DE2 		sub	sp, sp, #12	@,,
 371              		.cfi_def_cfa_offset 96
 372 0154 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 373 0158 0F6086E2 		add	r6, r6, #15	@ ivtmp.39, ivtmp.39,
 374 015c 008068E2 		rsb	r8, r8, #0	@ ivtmp.42, _75
 375              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 376              		.loc 1 55 11 view .LVU86
 377 0160 0090A0E3 		mov	r9, #0	@ w,
 378              	.LVL12:
 379              	.L20:
  56:armwave.c     ****         //mod = 1.0f;
 380              		.loc 1 56 9 is_stmt 1 view .LVU87
 381              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 382              		.loc 1 56 24 is_stmt 0 view .LVU88
 383 0164 909A07EE 		vmov	s15, r9	@ int	@ w, w
 384              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 56 48 view .LVU89
 386 0168 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 387              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 388              		.loc 1 56 13 view .LVU90
 389 016c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 390              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 391              		.loc 1 68 19 view .LVU91
 392 0170 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 393              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 394              		.loc 1 56 24 view .LVU92
 395 0174 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 396              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 397              		.loc 1 73 58 view .LVU93
 398 0178 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 399 017c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.32, ivtmp.39,
 400 0180 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.42,
 401              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 402              		.loc 1 56 33 view .LVU94
 403 0184 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 404              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 405              		.loc 1 56 13 view .LVU95
 406 0188 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 407              	.LVL13:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 59 9 is_stmt 1 view .LVU96
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 409              		.loc 1 59 9 is_stmt 0 view .LVU97
 410 018c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 411              	.LVL14:
 412              	.L19:
 413              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 414              		.loc 1 60 24 view .LVU98
 415 0190 FEFFFFEB 		bl	rand		@
 416              	.LVL15:
 417 0194 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.32
 418              	.LVL16:
  60:armwave.c     ****             noise *= noise;
 419              		.loc 1 60 13 is_stmt 1 view .LVU99
 420              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 421              		.loc 1 60 31 is_stmt 0 view .LVU100
 422 0198 7000FFE6 		uxth	r0, r0	@ tmp163,
 423              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 424              		.loc 1 60 41 view .LVU101
 425 019c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 426 01a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 427              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 428              		.loc 1 60 20 view .LVU102
 429 01a4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 430              	.LVL17:
  61:armwave.c     ****             noise *= noise;
 431              		.loc 1 61 13 is_stmt 1 view .LVU103
 432              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 433              		.loc 1 61 19 is_stmt 0 view .LVU104
 434 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 435              	.LVL18:
  62:armwave.c     ****             noise *= noise;
 436              		.loc 1 62 13 is_stmt 1 view .LVU105
 437              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 438              		.loc 1 62 19 is_stmt 0 view .LVU106
 439 01ac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL19:
  63:armwave.c     **** 
 441              		.loc 1 63 13 is_stmt 1 view .LVU107
 442              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 443              		.loc 1 63 19 is_stmt 0 view .LVU108
 444 01b0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 445              	.LVL20:
  65:armwave.c     ****                 noise = -noise;
 446              		.loc 1 65 13 is_stmt 1 view .LVU109
 447              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 448              		.loc 1 65 17 is_stmt 0 view .LVU110
 449 01b4 FEFFFFEB 		bl	rand		@
 450              	.LVL21:
  66:armwave.c     **** 
 451              		.loc 1 66 17 is_stmt 1 view .LVU111
 452              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 453              		.loc 1 65 15 is_stmt 0 view .LVU112
 454 01b8 020910E3 		tst	r0, #32768	@,
 455              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 456              		.loc 1 66 23 view .LVU113
 457 01bc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 458              	.LVL22:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 459              		.loc 1 68 13 is_stmt 1 view .LVU114
  69:armwave.c     **** 
 460              		.loc 1 69 13 view .LVU115
 461              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 462              		.loc 1 69 23 is_stmt 0 view .LVU116
 463 01c0 FEFFFFEB 		bl	rand		@
 464              	.LVL23:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 465              		.loc 1 71 13 is_stmt 1 view .LVU117
 466              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 467              		.loc 1 71 29 is_stmt 0 view .LVU118
 468 01c4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 469 01c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 470 01cc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 471              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 472              		.loc 1 69 30 view .LVU119
 473 01d0 7000FFE6 		uxth	r0, r0	@ tmp173,
 474              	.LVL24:
 475              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 476              		.loc 1 69 40 view .LVU120
 477 01d4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 478 01d8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 479              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 480              		.loc 1 69 20 view .LVU121
 481 01dc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 482              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 483              		.loc 1 71 60 view .LVU122
 484 01e0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 485              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 486              		.loc 1 71 18 view .LVU123
 487 01e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 488 01e8 FEFFFFEB 		bl	sin		@
 489              	.LVL25:
  73:armwave.c     ****         }
 490              		.loc 1 73 13 is_stmt 1 view .LVU124
 491              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 492              		.loc 1 68 19 is_stmt 0 view .LVU125
 493 01ec 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 494              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 495              		.loc 1 73 58 view .LVU126
 496 01f0 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 497              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 498              		.loc 1 73 56 view .LVU127
 499 01f4 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 500 01f8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 501              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 502              		.loc 1 71 77 view .LVU128
 503 01fc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 504              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505              		.loc 1 71 70 view .LVU129
 506 0200 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 507              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 508              		.loc 1 71 77 view .LVU130
 509 0204 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 510              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 511              		.loc 1 71 15 view .LVU131
 512 0208 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 513              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 514              		.loc 1 73 58 view .LVU132
 515 020c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 516 0210 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 517 0214 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 518 0218 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 519 021c 050000DA 		ble	.L16		@,
 520              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 521              		.loc 1 73 56 discriminator 1 view .LVU133
 522 0220 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 523 0224 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 524 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 525 022c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 526 0230 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 527 0234 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 528              	.L16:
 529              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 530              		.loc 1 73 56 discriminator 12 view .LVU134
 531 0238 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 532              	.LVL26:
 533              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 534              		.loc 1 59 9 discriminator 12 view .LVU135
 535 023c 060055E1 		cmp	r5, r6	@ ivtmp.32, ivtmp.39
 536 0240 D2FFFF1A 		bne	.L19		@,
 537 0244 026B85E2 		add	r6, r5, #2048	@ ivtmp.39, ivtmp.32,
 538              	.LVL27:
 539              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 540              		.loc 1 55 5 discriminator 2 view .LVU136
 541 0248 0B0056E1 		cmp	r6, fp	@ ivtmp.39, _81
 542              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 543              		.loc 1 55 34 discriminator 2 view .LVU137
 544 024c 019089E2 		add	r9, r9, #1	@ w, w,
 545              	.LVL28:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 546              		.loc 1 55 34 discriminator 2 view .LVU138
 547 0250 028B48E2 		sub	r8, r8, #2048	@ ivtmp.42, ivtmp.42,
 548              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 549              		.loc 1 55 5 discriminator 2 view .LVU139
 550 0254 C2FFFF1A 		bne	.L20		@,
 551              	@ armwave.c:76: }
  76:armwave.c     **** 
 552              		.loc 1 76 1 view .LVU140
 553 0258 0CD08DE2 		add	sp, sp, #12	@,,
 554              		.cfi_def_cfa_offset 84
 555              		@ sp needed	@
 556 025c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 557              		.cfi_restore 90
 558              		.cfi_restore 91
 559              		.cfi_restore 88
 560              		.cfi_restore 89
 561              		.cfi_restore 86
 562              		.cfi_restore 87
 563              		.cfi_restore 84
 564              		.cfi_restore 85
 565              		.cfi_restore 82
 566              		.cfi_restore 83
 567              		.cfi_restore 80
 568              		.cfi_restore 81
 569              		.cfi_def_cfa_offset 36
 570              	.LVL29:
  76:armwave.c     **** 
 571              		.loc 1 76 1 view .LVU141
 572 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 573              	.LVL30:
 574              	.L34:
  76:armwave.c     **** 
 575              		.loc 1 76 1 view .LVU142
 576              		.align	2
 577              	.L33:
 578 0264 0000803C 		.word	1015021568
 579 0268 0000003F 		.word	1056964608
 580 026c 0050C347 		.word	1203982336
 581 0270 C3F5C840 		.word	1086911939
 582 0274 0000003A 		.word	973078528
 583 0278 38FFC74A 		.word	1254620984
 584 027c 0000803F 		.word	1065353216
 585 0280 0000FE42 		.word	1123942400
 586 0284 00000043 		.word	1124073472
 587 0288 00007F43 		.word	1132396544
 588 028c 00000000 		.word	test_wave_buffer
 589 0290 00000000 		.word	.LANCHOR1
 590              		.cfi_endproc
 591              	.LFE57:
 593              		.align	2
 594              		.global	test_create_gamma
 595              		.syntax unified
 596              		.arm
 597              		.fpu vfp
 599              	test_create_gamma:
 600              	.LFB58:
  82:armwave.c     ****     int i;
 601              		.loc 1 82 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 605              		.loc 1 83 5 view .LVU144
  84:armwave.c     **** 
 606              		.loc 1 84 5 view .LVU145
 607              	.LVL31:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 608              		.loc 1 86 5 view .LVU146
 609              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 610              		.loc 1 82 1 is_stmt 0 view .LVU147
 611 0294 70402DE9 		push	{r4, r5, r6, lr}	@
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0298 068B2DED 		vpush.64	{d8, d9, d10}	@
 618              		.cfi_def_cfa_offset 40
 619              		.cfi_offset 80, -40
 620              		.cfi_offset 81, -36
 621              		.cfi_offset 82, -32
 622              		.cfi_offset 83, -28
 623              		.cfi_offset 84, -24
 624              		.cfi_offset 85, -20
 625 029c 68409FE5 		ldr	r4, .L39+20	@ ivtmp.50,
 626              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 627              		.loc 1 87 32 view .LVU148
 628 02a0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 629              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 630              		.loc 1 87 26 view .LVU149
 631 02a4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 632              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 633              		.loc 1 87 49 view .LVU150
 634 02a8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 635 02ac 015084E2 		add	r5, r4, #1	@ _25, ivtmp.50,
 636 02b0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.50,
 637 02b4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 638              	.LVL32:
 639              	.L36:
  87:armwave.c     ****     }
 640              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU151
 641              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 642              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU152
 643 02b8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.50
 644              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 645              		.loc 1 87 26 discriminator 3 view .LVU153
 646 02bc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 647              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 648              		.loc 1 87 32 discriminator 3 view .LVU154
 649 02c0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 650 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 651 02c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 652              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 653              		.loc 1 87 26 discriminator 3 view .LVU155
 654 02cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 655 02d0 FEFFFFEB 		bl	pow		@
 656              	.LVL33:
 657              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 658              		.loc 1 87 49 discriminator 3 view .LVU156
 659 02d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 660              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 661              		.loc 1 87 24 discriminator 3 view .LVU157
 662 02d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 663 02dc 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 664 02e0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 665              	.LVL34:
 666              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 667              		.loc 1 86 5 discriminator 3 view .LVU158
 668 02e4 060054E1 		cmp	r4, r6	@ ivtmp.50, _26
 669 02e8 F2FFFF1A 		bne	.L36		@,
 670              	@ armwave.c:89: }
  89:armwave.c     **** 
 671              		.loc 1 89 1 view .LVU159
 672 02ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 16
 680 02f0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 681              	.LVL35:
 682              	.L40:
  89:armwave.c     **** 
 683              		.loc 1 89 1 view .LVU160
 684 02f4 0000A0E1 		.align	3
 685              	.L39:
 686 02f8 000000C0 		.word	-1073741824
 687 02fc CCCCEC3F 		.word	1072483532
 688 0300 00000000 		.word	0
 689 0304 00E06F40 		.word	1081073664
 690 0308 00007F43 		.word	1132396544
 691 030c FFFFFFFF 		.word	gamma_table-1
 692              		.cfi_endproc
 693              	.LFE58:
 695              		.align	2
 696              		.global	render_nonaa_to_buffer_1ch_slice
 697              		.syntax unified
 698              		.arm
 699              		.fpu vfp
 701              	render_nonaa_to_buffer_1ch_slice:
 702              	.LVL36:
 703              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 704              		.loc 1 99 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 708              		.loc 1 100 5 view .LVU162
 101:armwave.c     ****     uint8_t *wave_base;
 709              		.loc 1 101 5 view .LVU163
 102:armwave.c     ****     uint8_t *write_buffer_base;
 710              		.loc 1 102 5 view .LVU164
 103:armwave.c     ****     uint8_t *write_buffer;
 711              		.loc 1 103 5 view .LVU165
 104:armwave.c     ****     
 712              		.loc 1 104 5 view .LVU166
 106:armwave.c     **** 
 713              		.loc 1 106 5 view .LVU167
 714              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 715              		.loc 1 106 40 is_stmt 0 view .LVU168
 716 0310 F4209FE5 		ldr	r2, .L53	@ tmp257,
 717              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 718              		.loc 1 99 1 view .LVU169
 719 0314 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 720              		.cfi_def_cfa_offset 36
 721              		.cfi_offset 4, -36
 722              		.cfi_offset 5, -32
 723              		.cfi_offset 6, -28
 724              		.cfi_offset 7, -24
 725              		.cfi_offset 8, -20
 726              		.cfi_offset 9, -16
 727              		.cfi_offset 10, -12
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
 730              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 731              		.loc 1 109 5 view .LVU170
 732 0318 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 733              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 734              		.loc 1 106 63 view .LVU171
 735 031c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 736              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 737              		.loc 1 109 5 view .LVU172
 738 0320 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 739              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 740              		.loc 1 106 40 view .LVU173
 741 0324 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 742              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 743              		.loc 1 106 63 view .LVU174
 744 0328 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 745              	.LVL37:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 109 5 is_stmt 1 view .LVU175
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 747              		.loc 1 109 5 is_stmt 0 view .LVU176
 748 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 749 0330 000051E3 		cmp	r1, #0	@ height,
 750 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 751 0338 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 752              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 753              		.loc 1 109 11 view .LVU177
 754 033c 0080A0E3 		mov	r8, #0	@ w,
 755              	.LVL38:
 756              	.L45:
 110:armwave.c     **** 
 757              		.loc 1 110 9 is_stmt 1 view .LVU178
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 758              		.loc 1 120 9 view .LVU179
 759              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 760              		.loc 1 110 64 is_stmt 0 view .LVU180
 761 0340 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 762 0344 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 763              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 764              		.loc 1 120 16 view .LVU181
 765 0348 0000A0E3 		mov	r0, #0	@ yy,
 766 034c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 767 0350 037087E0 		add	r7, r7, r3	@ ivtmp.56, g_armwave_state.wave_buffer, tmp195
 768              	.LVL39:
 769              	.L44:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 770              		.loc 1 135 13 is_stmt 1 view .LVU182
 771              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 772              		.loc 1 135 18 is_stmt 0 view .LVU183
 773 0354 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 774              	.LVL40:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 775              		.loc 1 139 13 is_stmt 1 view .LVU184
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 776              		.loc 1 140 14 view .LVU185
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 777              		.loc 1 141 14 view .LVU186
 142:armwave.c     ****             	word >>= 8;
 778              		.loc 1 142 14 view .LVU187
 779              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 780              		.loc 1 140 42 is_stmt 0 view .LVU188
 781 0358 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 782              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 783              		.loc 1 141 60 view .LVU189
 784 035c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 785              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 786              		.loc 1 140 34 view .LVU190
 787 0360 73E0EFE6 		uxtb	lr, r3	@ word, word
 788              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 789              		.loc 1 143 19 view .LVU191
 790 0364 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 791              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 792              		.loc 1 142 44 view .LVU192
 793 0368 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 794              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 140 34 view .LVU193
 796 036c 7440EFE6 		uxtb	r4, r4	@ word, word
 797              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 798              		.loc 1 142 44 view .LVU194
 799 0370 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 800              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 801              		.loc 1 141 60 view .LVU195
 802 0374 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 803              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 804              		.loc 1 143 19 view .LVU196
 805 0378 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 806              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 807              		.loc 1 142 44 view .LVU197
 808 037c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 809              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 140 34 view .LVU198
 811 0380 7EE0EFE6 		uxtb	lr, lr	@ word, word
 812              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 813              		.loc 1 143 19 view .LVU199
 814 0384 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 815              	.LVL41:
 816              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 817              		.loc 1 142 44 view .LVU200
 818 0388 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 819 038c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 820              	.LVL42:
 143:armwave.c     ****     		}
 821              		.loc 1 143 14 is_stmt 1 view .LVU201
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 822              		.loc 1 140 14 view .LVU202
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 823              		.loc 1 141 14 view .LVU203
 142:armwave.c     ****             	word >>= 8;
 824              		.loc 1 142 14 view .LVU204
 825              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 826              		.loc 1 140 42 is_stmt 0 view .LVU205
 827 0390 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 828              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 829              		.loc 1 141 60 view .LVU206
 830 0394 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 831              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 832              		.loc 1 142 44 view .LVU207
 833 0398 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 834              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 835              		.loc 1 141 60 view .LVU208
 836 039c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 837              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 838              		.loc 1 142 44 view .LVU209
 839 03a0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 840              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 841              		.loc 1 141 60 view .LVU210
 842 03a4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 843              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 844              		.loc 1 120 37 view .LVU211
 845 03a8 040080E2 		add	r0, r0, #4	@ yy, yy,
 846              	.LVL43:
 847              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 848              		.loc 1 142 44 view .LVU212
 849 03ac 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 850              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 851              		.loc 1 120 9 view .LVU213
 852 03b0 000051E1 		cmp	r1, r0	@ height, yy
 853              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 854              		.loc 1 142 44 view .LVU214
 855 03b4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 856 03b8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 857              	.LVL44:
 143:armwave.c     ****     		}
 858              		.loc 1 143 14 is_stmt 1 view .LVU215
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 859              		.loc 1 140 14 view .LVU216
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 860              		.loc 1 141 14 view .LVU217
 142:armwave.c     ****             	word >>= 8;
 861              		.loc 1 142 14 view .LVU218
 862              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 863              		.loc 1 140 42 is_stmt 0 view .LVU219
 864 03bc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 865              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 866              		.loc 1 141 60 view .LVU220
 867 03c0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 868              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 869              		.loc 1 142 44 view .LVU221
 870 03c4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 871 03c8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 872 03cc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 873 03d0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 874 03d4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****     		}
 875              		.loc 1 143 14 is_stmt 1 view .LVU222
 876              	.LVL45:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 877              		.loc 1 140 14 view .LVU223
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 878              		.loc 1 141 14 view .LVU224
 142:armwave.c     ****             	word >>= 8;
 879              		.loc 1 142 14 view .LVU225
 880              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 881              		.loc 1 140 42 is_stmt 0 view .LVU226
 882 03d8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 883              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 884              		.loc 1 141 60 view .LVU227
 885 03dc 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 887              		.loc 1 142 44 view .LVU228
 888 03e0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 889 03e4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 890 03e8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 891 03ec 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 892 03f0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****     		}
 893              		.loc 1 143 14 is_stmt 1 view .LVU229
 894              	.LVL46:
 895              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 896              		.loc 1 120 9 is_stmt 0 view .LVU230
 897 03f4 D6FFFF8A 		bhi	.L44		@,
 898              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 899              		.loc 1 109 5 view .LVU231
 900 03f8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 901              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 109 44 view .LVU232
 903 03fc 018088E2 		add	r8, r8, #1	@ w, w,
 904              	.LVL47:
 905              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 109 5 view .LVU233
 907 0400 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 908 0404 CDFFFF3A 		bcc	.L45		@,
 909 0408 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 040c 00000000 		.word	g_armwave_state
 914              		.cfi_endproc
 915              	.LFE59:
 917              		.align	2
 918              		.global	armwave_init
 919              		.syntax unified
 920              		.arm
 921              		.fpu vfp
 923              	armwave_init:
 924              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 925              		.loc 1 152 1 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 153:armwave.c     **** }
 930              		.loc 1 153 5 view .LVU235
 931              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 932              		.loc 1 153 27 is_stmt 0 view .LVU236
 933 0410 08309FE5 		ldr	r3, .L56	@ tmp110,
 934 0414 0020A0E3 		mov	r2, #0	@ tmp111,
 935 0418 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 936              	@ armwave.c:154: }
 154:armwave.c     **** 
 937              		.loc 1 154 1 view .LVU237
 938 041c 1EFF2FE1 		bx	lr	@
 939              	.L57:
 940              		.align	2
 941              	.L56:
 942 0420 00000000 		.word	g_armwave_state
 943              		.cfi_endproc
 944              	.LFE60:
 946              		.align	2
 947              		.global	armwave_setup_render
 948              		.syntax unified
 949              		.arm
 950              		.fpu vfp
 952              	armwave_setup_render:
 953              	.LVL48:
 954              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 955              		.loc 1 157 1 is_stmt 1 view -0
 956              		.cfi_startproc
 957              		@ args = 16, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 959              		.loc 1 158 5 view .LVU239
 159:armwave.c     **** 
 960              		.loc 1 159 5 view .LVU240
 161:armwave.c     **** 
 961              		.loc 1 161 5 view .LVU241
 962              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 963              		.loc 1 157 1 is_stmt 0 view .LVU242
 964 0424 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 965              		.cfi_def_cfa_offset 32
 966              		.cfi_offset 4, -32
 967              		.cfi_offset 5, -28
 968              		.cfi_offset 6, -24
 969              		.cfi_offset 7, -20
 970              		.cfi_offset 8, -16
 971              		.cfi_offset 9, -12
 972              		.cfi_offset 10, -8
 973              		.cfi_offset 14, -4
 974              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 975              		.loc 1 161 5 view .LVU243
 976 0428 020051E1 		cmp	r1, r2	@ start_point, end_point
 977              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 157 1 view .LVU244
 979 042c 028B2DED 		vpush.64	{d8}	@
 980              		.cfi_def_cfa_offset 40
 981              		.cfi_offset 80, -40
 982              		.cfi_offset 81, -36
 983              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 984              		.loc 1 157 1 view .LVU245
 985 0430 0190A0E1 		mov	r9, r1	@ start_point, start_point
 986 0434 0260A0E1 		mov	r6, r2	@ end_point, end_point
 987 0438 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 988              	.LVL49:
 157:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 157 1 view .LVU246
 990 043c 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 991 0440 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 992              	.LVL50:
 993              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 994              		.loc 1 161 5 view .LVU247
 995 0444 3E00002A 		bcs	.L70		@,
 164:armwave.c     **** 
 996              		.loc 1 164 5 is_stmt 1 view .LVU248
 997              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 998              		.loc 1 164 33 is_stmt 0 view .LVU249
 999 0448 48519FE5 		ldr	r5, .L74+4	@ tmp193,
 1000              	@ armwave.c:167:     assert((target_height % 256) == 0);
 167:armwave.c     **** 
 1001              		.loc 1 167 5 view .LVU250
 1002 044c FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1003              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1004              		.loc 1 164 33 view .LVU251
 1005 0450 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1006              		.loc 1 167 5 is_stmt 1 view .LVU252
 1007 0454 4900001A 		bne	.L71		@,
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1008              		.loc 1 170 5 view .LVU253
 1009              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1010              		.loc 1 174 42 is_stmt 0 view .LVU254
 1011 0458 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1012              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1013              		.loc 1 183 23 view .LVU255
 1014 045c 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1015              	.LVL51:
 1016              	@ armwave.c:172:     g_armwave_state.wave_stride = wave_stride;
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1017              		.loc 1 172 33 view .LVU256
 1018 0460 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1019              	@ armwave.c:173:     g_armwave_state.waves = waves;
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1020              		.loc 1 173 27 view .LVU257
 1021 0464 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1022              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1023              		.loc 1 171 44 view .LVU258
 1024 0468 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1025              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1026              		.loc 1 181 34 view .LVU259
 1027 046c 4030A0E3 		mov	r3, #64	@ tmp159,
 1028              	.LVL52:
 1029              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1030              		.loc 1 183 7 view .LVU260
 1031 0470 000050E3 		cmp	r0, #0	@ _4,
 1032              	@ armwave.c:170:     g_armwave_state.xstride = target_height;
 170:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1033              		.loc 1 170 29 view .LVU261
 1034 0474 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1035              		.loc 1 171 5 is_stmt 1 view .LVU262
 1036              	@ armwave.c:175:     g_armwave_state.target_width = target_width;
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1037              		.loc 1 175 34 is_stmt 0 view .LVU263
 1038 0478 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1039              	@ armwave.c:176:     g_armwave_state.target_height = target_height;
 176:armwave.c     **** 
 1040              		.loc 1 176 35 view .LVU264
 1041 047c 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1042              	@ armwave.c:174:     g_armwave_state.size = target_height * target_width;
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1043              		.loc 1 174 26 view .LVU265
 1044 0480 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1045              	@ armwave.c:171:     g_armwave_state.vscale = target_height / 256;
 171:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1046              		.loc 1 171 28 view .LVU266
 1047 0484 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 172:armwave.c     ****     g_armwave_state.waves = waves;
 1048              		.loc 1 172 5 is_stmt 1 view .LVU267
 173:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1049              		.loc 1 173 5 view .LVU268
 174:armwave.c     ****     g_armwave_state.target_width = target_width;
 1050              		.loc 1 174 5 view .LVU269
 175:armwave.c     ****     g_armwave_state.target_height = target_height;
 1051              		.loc 1 175 5 view .LVU270
 176:armwave.c     **** 
 1052              		.loc 1 176 5 view .LVU271
 181:armwave.c     **** 
 1053              		.loc 1 181 5 view .LVU272
 1054              	@ armwave.c:181:     g_armwave_state.slice_height = 64;  
 181:armwave.c     **** 
 1055              		.loc 1 181 34 is_stmt 0 view .LVU273
 1056 0488 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 183 5 is_stmt 1 view .LVU274
 1058              	@ armwave.c:183:     if(g_armwave_state.ch1_buffer != NULL)
 183:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 183 7 is_stmt 0 view .LVU275
 1060 048c 0100000A 		beq	.L61		@,
 184:armwave.c     **** 
 1061              		.loc 1 184 9 is_stmt 1 view .LVU276
 1062 0490 FEFFFFEB 		bl	free		@
 1063              	.LVL53:
 184:armwave.c     **** 
 1064              		.loc 1 184 9 is_stmt 0 view .LVU277
 1065 0494 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1066              	.L61:
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1067              		.loc 1 186 5 is_stmt 1 view .LVU278
 1068              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1069              		.loc 1 186 34 is_stmt 0 view .LVU279
 1070 0498 0110A0E3 		mov	r1, #1	@,
 1071 049c 0700A0E1 		mov	r0, r7	@, _3
 1072 04a0 FEFFFFEB 		bl	calloc		@
 1073              	.LVL54:
 1074              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1075              		.loc 1 187 33 view .LVU280
 1076 04a4 F0209FE5 		ldr	r2, .L74+8	@ tmp165,
 1077              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 189:armwave.c     **** 
 1078              		.loc 1 189 33 view .LVU281
 1079 04a8 FA30A0E3 		mov	r3, #250	@ tmp168,
 1080              	@ armwave.c:187:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1081              		.loc 1 187 33 view .LVU282
 1082 04ac 402085E5 		str	r2, [r5, #64]	@ tmp165, MEM[(short int *)&g_armwave_state + 64B]
 1083              	@ armwave.c:189:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 189:armwave.c     **** 
 1084              		.loc 1 189 33 view .LVU283
 1085 04b0 B434C5E1 		strh	r3, [r5, #68]	@ movhi	@ tmp168, g_armwave_state.ch1_color.b
 1086              	@ armwave.c:191:     assert(g_armwave_state.ch1_buffer != NULL);
 191:armwave.c     **** 
 1087              		.loc 1 191 5 view .LVU284
 1088 04b4 000050E3 		cmp	r0, #0	@ tmp162,
 1089              	@ armwave.c:186:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 186:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1090              		.loc 1 186 32 view .LVU285
 1091 04b8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 187:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1092              		.loc 1 187 5 is_stmt 1 view .LVU286
 188:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1093              		.loc 1 188 5 view .LVU287
 189:armwave.c     **** 
 1094              		.loc 1 189 5 view .LVU288
 191:armwave.c     **** 
 1095              		.loc 1 191 5 view .LVU289
 1096 04bc 2A00000A 		beq	.L72		@,
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1097              		.loc 1 194 5 view .LVU290
 1098              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1099              		.loc 1 195 34 is_stmt 0 view .LVU291
 1100 04c0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1101              	@ armwave.c:194:     length = end_point - start_point;
 194:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 194 12 view .LVU292
 1103 04c4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1104              	.LVL55:
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1105              		.loc 1 195 5 is_stmt 1 view .LVU293
 1106              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1107              		.loc 1 197 40 is_stmt 0 view .LVU294
 1108 04c8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1109              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 195 34 view .LVU295
 1111 04cc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp173, target_width
 1112              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 195 31 view .LVU296
 1114 04d0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1115 04d4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp172, length
 1116              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 196 60 view .LVU297
 1118 04d8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp197, g_armwave_state.slice_height
 1119 04dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp176, tmp197
 1120              	@ armwave.c:195:     points_per_pixel = length / ((float)(target_width));
 195:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 195 22 view .LVU298
 1122 04e0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp172, tmp173
 1123              	.LVL56:
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 196 5 is_stmt 1 view .LVU299
 1125              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1126              		.loc 1 196 60 is_stmt 0 view .LVU300
 1127 04e4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp178, tmp176, points_per_pixel
 1128              	@ armwave.c:196:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 196:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1129              		.loc 1 196 41 view .LVU301
 1130 04e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 1131 04ec 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp179, g_armwave_state.slice_record_height
 197:armwave.c     **** 
 1132              		.loc 1 197 5 is_stmt 1 view .LVU302
 1133              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1134              		.loc 1 197 40 is_stmt 0 view .LVU303
 1135 04f0 FEFFFFEB 		bl	malloc		@
 1136              	.LVL57:
 1137              	@ armwave.c:199:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 199:armwave.c     **** 
 1138              		.loc 1 199 5 view .LVU304
 1139 04f4 000050E3 		cmp	r0, #0	@ tmp181,
 1140              	@ armwave.c:197:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 197:armwave.c     **** 
 1141              		.loc 1 197 38 view .LVU305
 1142 04f8 580085E5 		str	r0, [r5, #88]	@ tmp181, g_armwave_state.xcoord_to_xpixel
 199:armwave.c     **** 
 1143              		.loc 1 199 5 is_stmt 1 view .LVU306
 1144 04fc 1500000A 		beq	.L73		@,
 1145              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1146              		.loc 1 202 54 is_stmt 0 view .LVU307
 1147 0500 237ADFED 		vldr.32	s15, .L74	@ tmp186,
 1148 0504 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp181,
 1149 0508 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp186, points_per_pixel
 1150              	.L64:
 1151              	.LVL58:
 202:armwave.c     **** 
 1152              		.loc 1 202 9 is_stmt 1 discriminator 3 view .LVU308
 1153              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1154              		.loc 1 202 74 is_stmt 0 discriminator 3 view .LVU309
 1155 050c 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1156              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1157              		.loc 1 201 32 discriminator 3 view .LVU310
 1158 0510 014084E2 		add	r4, r4, #1	@ xx, xx,
 1159              	.LVL59:
 1160              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 201 5 discriminator 3 view .LVU311
 1162 0514 040056E1 		cmp	r6, r4	@ length, xx
 1163              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1164              		.loc 1 202 74 discriminator 3 view .LVU312
 1165 0518 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp187, xx
 1166 051c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp188, tmp187, _15
 1167              	@ armwave.c:202:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 202:armwave.c     **** 
 1168              		.loc 1 202 46 discriminator 3 view .LVU313
 1169 0520 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp189, tmp188
 1170 0524 903A17EE 		vmov	r3, s15	@ int	@ tmp189, tmp189
 1171 0528 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp189, MEM[base: _64, offset: 0B]
 1172              	@ armwave.c:201:     for(xx = 0; xx < length; xx++) {
 201:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1173              		.loc 1 201 5 discriminator 3 view .LVU314
 1174 052c F6FFFF1A 		bne	.L64		@,
 207:armwave.c     **** }
 1175              		.loc 1 207 5 is_stmt 1 view .LVU315
 1176              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1177              		.loc 1 207 34 is_stmt 0 view .LVU316
 1178 0530 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1179 0534 FEFFFFEB 		bl	malloc		@
 1180              	.LVL60:
 1181              	@ armwave.c:208: }
 1182              		.loc 1 208 1 view .LVU317
 1183 0538 028BBDEC 		vldm	sp!, {d8}	@
 1184              		.cfi_remember_state
 1185              		.cfi_restore 80
 1186              		.cfi_restore 81
 1187              		.cfi_def_cfa_offset 32
 1188              	.LVL61:
 1189              	@ armwave.c:207:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 207:armwave.c     **** }
 1190              		.loc 1 207 32 view .LVU318
 1191 053c 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1192              	@ armwave.c:208: }
 1193              		.loc 1 208 1 view .LVU319
 1194 0540 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1195              	.LVL62:
 1196              	.L70:
 1197              		.cfi_restore_state
 161:armwave.c     **** 
 1198              		.loc 1 161 5 is_stmt 1 discriminator 1 view .LVU320
 1199 0544 54309FE5 		ldr	r3, .L74+12	@,
 1200              	.LVL63:
 161:armwave.c     **** 
 1201              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU321
 1202 0548 A120A0E3 		mov	r2, #161	@,
 1203 054c 50109FE5 		ldr	r1, .L74+16	@,
 1204 0550 50009FE5 		ldr	r0, .L74+20	@,
 1205              	.LVL64:
 161:armwave.c     **** 
 1206              		.loc 1 161 5 discriminator 1 view .LVU322
 1207 0554 FEFFFFEB 		bl	__assert_fail		@
 1208              	.LVL65:
 1209              	.L73:
 199:armwave.c     **** 
 1210              		.loc 1 199 5 is_stmt 1 discriminator 1 view .LVU323
 1211 0558 40309FE5 		ldr	r3, .L74+12	@,
 1212 055c C720A0E3 		mov	r2, #199	@,
 1213 0560 3C109FE5 		ldr	r1, .L74+16	@,
 1214 0564 40009FE5 		ldr	r0, .L74+24	@,
 1215 0568 FEFFFFEB 		bl	__assert_fail		@
 1216              	.LVL66:
 1217              	.L72:
 191:armwave.c     **** 
 1218              		.loc 1 191 5 discriminator 1 view .LVU324
 1219 056c 2C309FE5 		ldr	r3, .L74+12	@,
 1220 0570 BF20A0E3 		mov	r2, #191	@,
 1221 0574 28109FE5 		ldr	r1, .L74+16	@,
 1222 0578 30009FE5 		ldr	r0, .L74+28	@,
 1223 057c FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL67:
 1225              	.L71:
 167:armwave.c     **** 
 1226              		.loc 1 167 5 discriminator 1 view .LVU325
 1227 0580 18309FE5 		ldr	r3, .L74+12	@,
 1228              	.LVL68:
 167:armwave.c     **** 
 1229              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU326
 1230 0584 A720A0E3 		mov	r2, #167	@,
 1231 0588 14109FE5 		ldr	r1, .L74+16	@,
 1232 058c 20009FE5 		ldr	r0, .L74+32	@,
 1233              	.LVL69:
 167:armwave.c     **** 
 1234              		.loc 1 167 5 discriminator 1 view .LVU327
 1235 0590 FEFFFFEB 		bl	__assert_fail		@
 1236              	.LVL70:
 1237              	.L75:
 167:armwave.c     **** 
 1238              		.loc 1 167 5 discriminator 1 view .LVU328
 1239              		.align	2
 1240              	.L74:
 1241 0594 0000803F 		.word	1065353216
 1242 0598 00000000 		.word	g_armwave_state
 1243 059c F609F406 		.word	116656630
 1244 05a0 00000000 		.word	.LANCHOR0
 1245 05a4 00000000 		.word	.LC0
 1246 05a8 5C000000 		.word	.LC3
 1247 05ac 30000000 		.word	.LC2
 1248 05b0 0C000000 		.word	.LC1
 1249 05b4 74000000 		.word	.LC4
 1250              		.cfi_endproc
 1251              	.LFE61:
 1253              		.align	2
 1254              		.global	armwave_clear_buffer
 1255              		.syntax unified
 1256              		.arm
 1257              		.fpu vfp
 1259              	armwave_clear_buffer:
 1260              	.LVL71:
 1261              	.LFB62:
 209:armwave.c     **** 
 210:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 211:armwave.c     **** {
 1262              		.loc 1 211 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 212:armwave.c     ****     // Flags ignored, only one buffer cleared
 213:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1267              		.loc 1 213 5 view .LVU330
 1268 05b8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1269 05bc 0010A0E3 		mov	r1, #0	@,
 1270 05c0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1271 05c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1272              	.LVL72:
 1273              		.loc 1 213 5 is_stmt 0 view .LVU331
 1274 05c8 FEFFFFEA 		b	memset		@
 1275              	.LVL73:
 1276              	.L78:
 1277              		.align	2
 1278              	.L77:
 1279 05cc 00000000 		.word	g_armwave_state
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.global	__aeabi_uidivmod
 1284              		.align	2
 1285              		.global	armwave_fill_pixbuf2
 1286              		.syntax unified
 1287              		.arm
 1288              		.fpu vfp
 1290              	armwave_fill_pixbuf2:
 1291              	.LVL74:
 1292              	.LFB63:
 214:armwave.c     **** }
 215:armwave.c     **** 
 216:armwave.c     **** /*
 217:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 218:armwave.c     **** {
 219:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 220:armwave.c     ****     int rr, gg, bb;
 221:armwave.c     ****     uint8_t r, g, b;
 222:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 223:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 224:armwave.c     **** 
 225:armwave.c     ****     assert(out_buffer != NULL);
 226:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 227:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 228:armwave.c     **** 
 229:armwave.c     **** #if 0
 230:armwave.c     ****     // Pixbuf tests
 231:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 232:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 233:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 234:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 235:armwave.c     ****         }
 236:armwave.c     ****     }
 237:armwave.c     **** #endif
 238:armwave.c     **** 
 239:armwave.c     **** #if 1
 240:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 241:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 242:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 243:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 244:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 245:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 246:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 247:armwave.c     **** 
 248:armwave.c     **** #if 0
 249:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 250:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 251:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 252:armwave.c     **** 
 253:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 254:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 255:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 256:armwave.c     **** #endif
 257:armwave.c     **** 
 258:armwave.c     ****             if(value != 0) {
 259:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 263:armwave.c     **** 	            r = MIN(rr, 255);
 264:armwave.c     **** 	            g = MIN(gg, 255);
 265:armwave.c     **** 	            b = MIN(bb, 255);
 266:armwave.c     **** 
 267:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 268:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 270:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 271:armwave.c     **** 
 272:armwave.c     **** 	            *out_buffer++ = word;
 273:armwave.c     **** 	        }
 274:armwave.c     ****         }
 275:armwave.c     ****     }
 276:armwave.c     **** #endif
 277:armwave.c     **** }
 278:armwave.c     **** */
 279:armwave.c     **** 
 280:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 281:armwave.c     **** {
 1293              		.loc 1 281 1 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 0, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 282:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1297              		.loc 1 282 5 view .LVU333
 283:armwave.c     ****     int rr, gg, bb;
 1298              		.loc 1 283 5 view .LVU334
 284:armwave.c     ****     uint8_t r, g, b;
 1299              		.loc 1 284 5 view .LVU335
 285:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1300              		.loc 1 285 5 view .LVU336
 1301              	@ armwave.c:281: {
 281:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1302              		.loc 1 281 1 is_stmt 0 view .LVU337
 1303 05d0 F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1304              		.cfi_def_cfa_offset 40
 1305              		.cfi_offset 3, -40
 1306              		.cfi_offset 4, -36
 1307              		.cfi_offset 5, -32
 1308              		.cfi_offset 6, -28
 1309              		.cfi_offset 7, -24
 1310              		.cfi_offset 8, -20
 1311              		.cfi_offset 9, -16
 1312              		.cfi_offset 10, -12
 1313              		.cfi_offset 11, -8
 1314              		.cfi_offset 14, -4
 1315              	@ armwave.c:289:     assert(out_buffer != NULL);
 286:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 287:armwave.c     ****     uint32_t npix, n;
 288:armwave.c     **** 
 289:armwave.c     ****     assert(out_buffer != NULL);
 1316              		.loc 1 289 5 view .LVU338
 1317 05d4 00B050E2 		subs	fp, r0, #0	@ out_buffer, out_buffer
 1318              	@ armwave.c:285:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 285:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1319              		.loc 1 285 14 view .LVU339
 1320 05d8 D4809FE5 		ldr	r8, .L93	@ tmp190,
 1321 05dc 044098E5 		ldr	r4, [r8, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1322              	.LVL75:
 286:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1323              		.loc 1 286 5 is_stmt 1 view .LVU340
 287:armwave.c     **** 
 1324              		.loc 1 287 5 view .LVU341
 1325              		.loc 1 289 5 view .LVU342
 1326 05e0 2E00000A 		beq	.L92		@,
 290:armwave.c     **** 
 291:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 292:armwave.c     **** 
 293:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1327              		.loc 1 293 5 view .LVU343
 1328              	@ armwave.c:293:     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1329              		.loc 1 293 10 is_stmt 0 view .LVU344
 1330 05e4 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1331 05e8 386098E5 		ldr	r6, [r8, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1332 05ec 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.target_height, g_armwave_state.target_width
 1333              	.LVL76:
 294:armwave.c     **** 
 295:armwave.c     ****     for(n = 0; n < npix; n++) {
 1334              		.loc 1 295 5 is_stmt 1 view .LVU345
 1335              		.loc 1 295 5 is_stmt 0 view .LVU346
 1336 05f0 000056E3 		cmp	r6, #0	@ npix,
 1337 05f4 F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1338 05f8 066084E0 		add	r6, r4, r6	@ _58, base_ptr, npix
 1339              	.LVL77:
 1340              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 1341              		.loc 1 295 11 view .LVU347
 1342 05fc 0050A0E3 		mov	r5, #0	@ n,
 1343 0600 020000EA 		b	.L83		@
 1344              	.LVL78:
 1345              	.L82:
 1346              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 1347              		.loc 1 295 5 discriminator 2 view .LVU348
 1348 0604 060054E1 		cmp	r4, r6	@ base_ptr, _58
 1349              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 1350              		.loc 1 295 27 discriminator 2 view .LVU349
 1351 0608 015085E2 		add	r5, r5, #1	@ n, n,
 1352              	.LVL79:
 1353              	@ armwave.c:295:     for(n = 0; n < npix; n++) {
 1354              		.loc 1 295 5 discriminator 2 view .LVU350
 1355 060c F88FBD08 		popeq	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1356              	.LVL80:
 1357              	.L83:
 296:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 297:armwave.c     ****         value = *base_ptr++;
 1358              		.loc 1 297 9 is_stmt 1 view .LVU351
 1359              	@ armwave.c:297:         value = *base_ptr++;
 1360              		.loc 1 297 17 is_stmt 0 view .LVU352
 1361 0610 0130D4E4 		ldrb	r3, [r4], #1	@ zero_extendqisi2	@ _3, MEM[base: base_ptr_45, offset: 4294967295B]
 1362              	.LVL81:
 298:armwave.c     **** 
 299:armwave.c     ****         // yup, this is generally not going to happen, for most waveforms
 300:armwave.c     ****         if(COND_UNLIKELY(value != 0)) {
 1363              		.loc 1 300 9 is_stmt 1 view .LVU353
 1364              	@ armwave.c:300:         if(COND_UNLIKELY(value != 0)) {
 1365              		.loc 1 300 11 is_stmt 0 view .LVU354
 1366 0614 000053E3 		cmp	r3, #0	@ _3,
 1367 0618 F9FFFF0A 		beq	.L82		@,
 301:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1368              		.loc 1 301 13 is_stmt 1 view .LVU355
 1369              	.LVL82:
 302:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1370              		.loc 1 302 13 view .LVU356
 303:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1371              		.loc 1 303 13 view .LVU357
 304:armwave.c     **** 
 305:armwave.c     ****             r = MIN(rr, 255);
 1372              		.loc 1 305 13 view .LVU358
 306:armwave.c     ****             g = MIN(gg, 255);
 1373              		.loc 1 306 13 view .LVU359
 307:armwave.c     ****             b = MIN(bb, 255);
 1374              		.loc 1 307 13 view .LVU360
 308:armwave.c     **** 
 309:armwave.c     ****             // ensure 100% alpha channel, if it is used
 310:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1375              		.loc 1 310 13 view .LVU361
 1376              	@ armwave.c:303:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 303:armwave.c     **** 
 1377              		.loc 1 303 47 is_stmt 0 view .LVU362
 1378 061c B474D8E1 		ldrh	r7, [r8, #68]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1379              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1380              		.loc 1 302 47 view .LVU363
 1381 0620 B224D8E1 		ldrh	r2, [r8, #66]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1382              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1383              		.loc 1 301 47 view .LVU364
 1384 0624 B004D8E1 		ldrh	r0, [r8, #64]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1385 0628 341098E5 		ldr	r1, [r8, #52]	@, g_armwave_state.target_width
 1386              	@ armwave.c:303:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 303:armwave.c     **** 
 1387              		.loc 1 303 47 view .LVU365
 1388 062c 870367E1 		smulbb	r7, r7, r3	@ tmp167, g_armwave_state.ch1_color.b, _3
 1389              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1390              		.loc 1 302 47 view .LVU366
 1391 0630 820362E1 		smulbb	r2, r2, r3	@ tmp173, g_armwave_state.ch1_color.g, _3
 1392              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1393              		.loc 1 301 47 view .LVU367
 1394 0634 800363E1 		smulbb	r3, r0, r3	@ tmp180, g_armwave_state.ch1_color.r, _3
 1395              	.LVL83:
 1396              	@ armwave.c:303:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 303:armwave.c     **** 
 1397              		.loc 1 303 56 view .LVU368
 1398 0638 2704A0E1 		lsr	r0, r7, #8	@ bb, tmp167,
 1399              	@ armwave.c:302:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 302:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1400              		.loc 1 302 56 view .LVU369
 1401 063c 2224A0E1 		lsr	r2, r2, #8	@ gg, tmp173,
 1402              	@ armwave.c:307:             b = MIN(bb, 255);
 307:armwave.c     **** 
 1403              		.loc 1 307 17 view .LVU370
 1404 0640 FF0050E3 		cmp	r0, #255	@ bb,
 1405 0644 FF00A0A3 		movge	r0, #255	@ bb,
 1406              	@ armwave.c:306:             g = MIN(gg, 255);
 306:armwave.c     ****             b = MIN(bb, 255);
 1407              		.loc 1 306 17 view .LVU371
 1408 0648 FF0052E3 		cmp	r2, #255	@ gg,
 1409 064c FF20A0A3 		movge	r2, #255	@ gg,
 1410              	@ armwave.c:301:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 301:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1411              		.loc 1 301 56 view .LVU372
 1412 0650 2334A0E1 		lsr	r3, r3, #8	@ rr, tmp180,
 1413              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1414              		.loc 1 310 43 view .LVU373
 1415 0654 0274A0E1 		lsl	r7, r2, #8	@ tmp176, gg,
 1416 0658 007887E1 		orr	r7, r7, r0, lsl #16	@ tmp177, tmp176, bb,
 1417 065c 0500A0E1 		mov	r0, r5	@, n
 1418              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1419              		.loc 1 310 54 view .LVU374
 1420 0660 FF0053E3 		cmp	r3, #255	@ rr,
 1421 0664 037087D1 		orrle	r7, r7, r3	@,, tmp183, tmp177, rr
 1422 0668 FF7087C3 		orrgt	r7, r7, #255	@,, tmp183, tmp177,
 1423 066c FEFFFFEB 		bl	__aeabi_uidivmod		@
 1424              	.LVL84:
 1425              	@ armwave.c:310:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1426              		.loc 1 310 18 view .LVU375
 1427 0670 FF7487E3 		orr	r7, r7, #-16777216	@ word, tmp183,
 1428              	.LVL85:
 311:armwave.c     ****             xx = n % g_armwave_state.target_width;
 1429              		.loc 1 311 13 is_stmt 1 view .LVU376
 1430              	@ armwave.c:313:             printf("%d %d,%d\n", n, xx, yy);
 312:armwave.c     ****             yy = n / g_armwave_state.target_width;
 313:armwave.c     ****             printf("%d %d,%d\n", n, xx, yy);
 1431              		.loc 1 313 13 is_stmt 0 view .LVU377
 1432 0674 0030A0E1 		mov	r3, r0	@, divmod_tmp_82
 1433 0678 0090A0E1 		mov	r9, r0	@ divmod_tmp_82,
 1434 067c 01A0A0E1 		mov	r10, r1	@ divmod_tmp_82,
 1435              	.LVL86:
 312:armwave.c     ****             yy = n / g_armwave_state.target_width;
 1436              		.loc 1 312 13 is_stmt 1 view .LVU378
 1437              		.loc 1 313 13 view .LVU379
 1438 0680 0120A0E1 		mov	r2, r1	@, divmod_tmp_82
 1439 0684 2C009FE5 		ldr	r0, .L93+4	@,
 1440              	.LVL87:
 1441              		.loc 1 313 13 is_stmt 0 view .LVU380
 1442 0688 0510A0E1 		mov	r1, r5	@, n
 1443              	.LVL88:
 1444              		.loc 1 313 13 view .LVU381
 1445 068c FEFFFFEB 		bl	printf		@
 1446              	.LVL89:
 314:armwave.c     ****             *(out_buffer_base + ((xx + (yy * g_armwave_state.target_height)) << 2)) = word;
 1447              		.loc 1 314 13 is_stmt 1 view .LVU382
 1448              	@ armwave.c:314:             *(out_buffer_base + ((xx + (yy * g_armwave_state.target_height)) << 2)
 1449              		.loc 1 314 44 is_stmt 0 view .LVU383
 1450 0690 383098E5 		ldr	r3, [r8, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1451              	@ armwave.c:314:             *(out_buffer_base + ((xx + (yy * g_armwave_state.target_height)) << 2)
 1452              		.loc 1 314 31 view .LVU384
 1453 0694 93A929E0 		mla	r9, r3, r9, r10	@ tmp189, g_armwave_state.target_height, divmod_tmp_82, divmod_tmp_82
 1454              	.LVL90:
 1455              	@ armwave.c:314:             *(out_buffer_base + ((xx + (yy * g_armwave_state.target_height)) << 2)
 1456              		.loc 1 314 85 view .LVU385
 1457 0698 09728BE7 		str	r7, [fp, r9, lsl #4]	@ word, *_34
 1458 069c D8FFFFEA 		b	.L82		@
 1459              	.LVL91:
 1460              	.L92:
 289:armwave.c     **** 
 1461              		.loc 1 289 5 is_stmt 1 discriminator 1 view .LVU386
 1462 06a0 14309FE5 		ldr	r3, .L93+8	@,
 1463 06a4 14209FE5 		ldr	r2, .L93+12	@,
 1464 06a8 14109FE5 		ldr	r1, .L93+16	@,
 1465 06ac 14009FE5 		ldr	r0, .L93+20	@,
 1466              	.LVL92:
 289:armwave.c     **** 
 1467              		.loc 1 289 5 is_stmt 0 discriminator 1 view .LVU387
 1468 06b0 FEFFFFEB 		bl	__assert_fail		@
 1469              	.LVL93:
 1470              	.L94:
 1471              		.align	2
 1472              	.L93:
 1473 06b4 00000000 		.word	g_armwave_state
 1474 06b8 A4000000 		.word	.LC6
 1475 06bc 18000000 		.word	.LANCHOR0+24
 1476 06c0 21010000 		.word	289
 1477 06c4 00000000 		.word	.LC0
 1478 06c8 90000000 		.word	.LC5
 1479              		.cfi_endproc
 1480              	.LFE63:
 1482              		.align	2
 1483              		.global	armwave_dump_ppm_debug
 1484              		.syntax unified
 1485              		.arm
 1486              		.fpu vfp
 1488              	armwave_dump_ppm_debug:
 1489              	.LVL94:
 1490              	.LFB64:
 315:armwave.c     ****         }
 316:armwave.c     ****     }
 317:armwave.c     **** }
 318:armwave.c     **** 
 319:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 320:armwave.c     **** {
 1491              		.loc 1 320 1 is_stmt 1 view -0
 1492              		.cfi_startproc
 1493              		@ args = 0, pretend = 0, frame = 0
 1494              		@ frame_needed = 0, uses_anonymous_args = 0
 321:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1495              		.loc 1 321 5 view .LVU389
 1496              	@ armwave.c:320: {
 320:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1497              		.loc 1 320 1 is_stmt 0 view .LVU390
 1498 06cc 0130A0E1 		mov	r3, r1	@ fn, fn
 1499 06d0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1500              		.cfi_def_cfa_offset 28
 1501              		.cfi_offset 4, -28
 1502              		.cfi_offset 5, -24
 1503              		.cfi_offset 6, -20
 1504              		.cfi_offset 7, -16
 1505              		.cfi_offset 8, -12
 1506              		.cfi_offset 9, -8
 1507              		.cfi_offset 14, -4
 1508 06d4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1509 06d8 0CD04DE2 		sub	sp, sp, #12	@,,
 1510              		.cfi_def_cfa_offset 40
 1511              	@ armwave.c:321:     FILE *fp = fopen(fn, "wb");
 1512              		.loc 1 321 16 view .LVU391
 1513 06dc D8109FE5 		ldr	r1, .L107	@,
 1514              	.LVL95:
 1515              		.loc 1 321 16 view .LVU392
 1516 06e0 0300A0E1 		mov	r0, r3	@, fn
 1517              	.LVL96:
 1518              		.loc 1 321 16 view .LVU393
 1519 06e4 FEFFFFEB 		bl	fopen64		@
 1520              	.LVL97:
 1521              	@ armwave.c:328:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 322:armwave.c     ****     uint32_t data;
 323:armwave.c     ****     int xx, yy;
 324:armwave.c     **** 
 325:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 326:armwave.c     **** 
 327:armwave.c     ****     fputs("P3\n", fp);
 328:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1522              		.loc 1 328 5 view .LVU394
 1523 06e8 D0609FE5 		ldr	r6, .L107+4	@ tmp154,
 1524              	@ armwave.c:327:     fputs("P3\n", fp);
 327:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1525              		.loc 1 327 5 view .LVU395
 1526 06ec 0320A0E3 		mov	r2, #3	@,
 1527 06f0 0110A0E3 		mov	r1, #1	@,
 1528              	@ armwave.c:321:     FILE *fp = fopen(fn, "wb");
 321:armwave.c     ****     uint32_t data;
 1529              		.loc 1 321 16 view .LVU396
 1530 06f4 0070A0E1 		mov	r7, r0	@ fp,
 1531              	.LVL98:
 322:armwave.c     ****     uint32_t data;
 1532              		.loc 1 322 5 is_stmt 1 view .LVU397
 323:armwave.c     **** 
 1533              		.loc 1 323 5 view .LVU398
 327:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1534              		.loc 1 327 5 view .LVU399
 1535 06f8 0030A0E1 		mov	r3, r0	@, fp
 1536 06fc C0009FE5 		ldr	r0, .L107+8	@,
 1537              	.LVL99:
 327:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1538              		.loc 1 327 5 is_stmt 0 view .LVU400
 1539 0700 FEFFFFEB 		bl	fwrite		@
 1540              	.LVL100:
 1541              		.loc 1 328 5 is_stmt 1 view .LVU401
 1542 0704 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1543 0708 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1544 070c B4109FE5 		ldr	r1, .L107+12	@,
 1545 0710 0700A0E1 		mov	r0, r7	@, fp
 1546 0714 FEFFFFEB 		bl	fprintf		@
 1547              	.LVL101:
 329:armwave.c     ****     fputs("255\n", fp);
 1548              		.loc 1 329 5 view .LVU402
 1549 0718 0420A0E3 		mov	r2, #4	@,
 1550 071c 0730A0E1 		mov	r3, r7	@, fp
 1551 0720 0110A0E3 		mov	r1, #1	@,
 1552 0724 A0009FE5 		ldr	r0, .L107+16	@,
 1553 0728 FEFFFFEB 		bl	fwrite		@
 1554              	.LVL102:
 330:armwave.c     **** 
 331:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1555              		.loc 1 331 5 view .LVU403
 1556              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1557              		.loc 1 331 37 is_stmt 0 view .LVU404
 1558 072c 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1559              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1560              		.loc 1 331 5 view .LVU405
 1561 0730 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1562 0734 1800000A 		beq	.L96		@,
 1563 0738 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1564              	@ armwave.c:336:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 333:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 334:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 335:armwave.c     **** 
 336:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1565              		.loc 1 336 13 view .LVU406
 1566 073c 8C909FE5 		ldr	r9, .L107+20	@ tmp156,
 1567              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 331:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1568              		.loc 1 331 12 view .LVU407
 1569 0740 0050A0E3 		mov	r5, #0	@ yy,
 1570              	.LVL103:
 1571              	.L97:
 1572              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1573              		.loc 1 332 9 view .LVU408
 1574 0744 000053E3 		cmp	r3, #0	@ _12,
 1575              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1576              		.loc 1 332 16 view .LVU409
 1577 0748 0040A013 		movne	r4, #0	@ xx,
 1578              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1579              		.loc 1 332 9 view .LVU410
 1580 074c 1600000A 		beq	.L106		@,
 1581              	.LVL104:
 1582              	.L98:
 333:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1583              		.loc 1 333 13 is_stmt 1 discriminator 3 view .LVU411
 1584              	@ armwave.c:333:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 333:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1585              		.loc 1 333 29 is_stmt 0 discriminator 3 view .LVU412
 1586 0750 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1587              	@ armwave.c:336:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1588              		.loc 1 336 13 discriminator 3 view .LVU413
 1589 0754 0910A0E1 		mov	r1, r9	@, tmp156
 1590 0758 0700A0E1 		mov	r0, r7	@, fp
 1591              	@ armwave.c:333:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 333:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1592              		.loc 1 333 18 discriminator 3 view .LVU414
 1593 075c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1594              	.LVL105:
 1595              		.loc 1 336 13 is_stmt 1 discriminator 3 view .LVU415
 1596              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1597              		.loc 1 332 58 is_stmt 0 discriminator 3 view .LVU416
 1598 0760 014084E2 		add	r4, r4, #1	@ xx, xx,
 1599              	.LVL106:
 1600              	@ armwave.c:336:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1601              		.loc 1 336 81 discriminator 3 view .LVU417
 1602 0764 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1603              	@ armwave.c:336:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1604              		.loc 1 336 61 discriminator 3 view .LVU418
 1605 0768 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1606              	@ armwave.c:336:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1607              		.loc 1 336 13 discriminator 3 view .LVU419
 1608 076c 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1609 0770 7330EFE6 		uxtb	r3, r3	@, tmp146
 1610 0774 00C08DE5 		str	ip, [sp]	@ tmp151,
 1611 0778 7220EFE6 		uxtb	r2, r2	@, data
 1612              	.LVL107:
 1613              		.loc 1 336 13 discriminator 3 view .LVU420
 1614 077c FEFFFFEB 		bl	fprintf		@
 1615              	.LVL108:
 1616              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1617              		.loc 1 332 41 discriminator 3 view .LVU421
 1618 0780 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1619              	@ armwave.c:332:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 332:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1620              		.loc 1 332 9 discriminator 3 view .LVU422
 1621 0784 040053E1 		cmp	r3, r4	@ _12, xx
 1622 0788 F0FFFF8A 		bhi	.L98		@,
 1623 078c 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1624              	.LVL109:
 1625              	.L99:
 1626              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 331:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1627              		.loc 1 331 55 discriminator 2 view .LVU423
 1628 0790 015085E2 		add	r5, r5, #1	@ yy, yy,
 1629              	.LVL110:
 1630              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 331:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1631              		.loc 1 331 5 discriminator 2 view .LVU424
 1632 0794 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1633 0798 E9FFFF3A 		bcc	.L97		@,
 1634              	.LVL111:
 1635              	.L96:
 337:armwave.c     ****         }
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     fclose(fp);
 1636              		.loc 1 340 5 is_stmt 1 view .LVU425
 1637 079c 0700A0E1 		mov	r0, r7	@, fp
 1638              	@ armwave.c:341: }
 341:armwave.c     **** }
 1639              		.loc 1 341 1 is_stmt 0 view .LVU426
 1640 07a0 0CD08DE2 		add	sp, sp, #12	@,,
 1641              		.cfi_remember_state
 1642              		.cfi_def_cfa_offset 28
 1643              		@ sp needed	@
 1644 07a4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1645              		.cfi_restore 14
 1646              		.cfi_restore 9
 1647              		.cfi_restore 8
 1648              		.cfi_restore 7
 1649              		.cfi_restore 6
 1650              		.cfi_restore 5
 1651              		.cfi_restore 4
 1652              		.cfi_def_cfa_offset 0
 1653              	.LVL112:
 1654              	@ armwave.c:340:     fclose(fp);
 340:armwave.c     **** }
 1655              		.loc 1 340 5 view .LVU427
 1656 07a8 FEFFFFEA 		b	fclose		@
 1657              	.LVL113:
 1658              	.L106:
 1659              		.cfi_restore_state
 1660              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 331:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1661              		.loc 1 331 55 view .LVU428
 1662 07ac 015085E2 		add	r5, r5, #1	@ yy, yy,
 1663              	.LVL114:
 1664              	@ armwave.c:331:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 331:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1665              		.loc 1 331 5 view .LVU429
 1666 07b0 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1667 07b4 F5FFFF8A 		bhi	.L99		@,
 1668 07b8 F7FFFFEA 		b	.L96		@
 1669              	.L108:
 1670              		.align	2
 1671              	.L107:
 1672 07bc B0000000 		.word	.LC7
 1673 07c0 00000000 		.word	g_armwave_state
 1674 07c4 B4000000 		.word	.LC8
 1675 07c8 B8000000 		.word	.LC9
 1676 07cc C0000000 		.word	.LC10
 1677 07d0 C8000000 		.word	.LC11
 1678              		.cfi_endproc
 1679              	.LFE64:
 1681              		.align	2
 1682              		.global	armwave_test_init
 1683              		.syntax unified
 1684              		.arm
 1685              		.fpu vfp
 1687              	armwave_test_init:
 1688              	.LVL115:
 1689              	.LFB65:
 342:armwave.c     **** 
 343:armwave.c     **** void armwave_test_init(float mod)
 344:armwave.c     **** {
 1690              		.loc 1 344 1 is_stmt 1 view -0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 0
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 345:armwave.c     **** 	mod_depth = mod;
 1694              		.loc 1 345 2 view .LVU431
 1695              	@ armwave.c:345: 	mod_depth = mod;
 1696              		.loc 1 345 12 is_stmt 0 view .LVU432
 1697 07d4 88309FE5 		ldr	r3, .L113+20	@ tmp124,
 1698              	@ armwave.c:344: {
 344:armwave.c     **** 	mod_depth = mod;
 1699              		.loc 1 344 1 view .LVU433
 1700 07d8 70402DE9 		push	{r4, r5, r6, lr}	@
 1701              		.cfi_def_cfa_offset 16
 1702              		.cfi_offset 4, -16
 1703              		.cfi_offset 5, -12
 1704              		.cfi_offset 6, -8
 1705              		.cfi_offset 14, -4
 1706 07dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 1707              		.cfi_def_cfa_offset 40
 1708              		.cfi_offset 80, -40
 1709              		.cfi_offset 81, -36
 1710              		.cfi_offset 82, -32
 1711              		.cfi_offset 83, -28
 1712              		.cfi_offset 84, -24
 1713              		.cfi_offset 85, -20
 1714 07e0 80409FE5 		ldr	r4, .L113+24	@ ivtmp.86,
 1715              	.LBB6:
 1716              	.LBB7:
 1717              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1718              		.loc 1 87 32 view .LVU434
 1719 07e4 1DAA9FED 		vldr.32	s20, .L113+16	@ tmp130,
 1720              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1721              		.loc 1 87 26 view .LVU435
 1722 07e8 189B9FED 		vldr.64	d9, .L113	@ tmp139,
 1723              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1724              		.loc 1 87 49 view .LVU436
 1725 07ec 198B9FED 		vldr.64	d8, .L113+8	@ tmp133,
 1726              	.LBE7:
 1727              	.LBE6:
 1728              	@ armwave.c:345: 	mod_depth = mod;
 1729              		.loc 1 345 12 view .LVU437
 1730 07f0 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 346:armwave.c     **** 
 347:armwave.c     ****     test_create_waveform();
 1731              		.loc 1 347 5 is_stmt 1 view .LVU438
 1732 07f4 FEFFFFEB 		bl	test_create_waveform		@
 1733              	.LVL116:
 348:armwave.c     ****     test_create_gamma();
 1734              		.loc 1 348 5 view .LVU439
 1735              	.LBB9:
 1736              	.LBI6:
  81:armwave.c     **** {
 1737              		.loc 1 81 6 view .LVU440
  81:armwave.c     **** {
 1738              		.loc 1 81 6 is_stmt 0 view .LVU441
 1739 07f8 013084E2 		add	r3, r4, #1	@ _30, ivtmp.86,
 1740 07fc 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.86,
 1741 0800 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1742              	.LVL117:
 1743              	.L110:
 1744              	.LBB8:
  87:armwave.c     ****     }
 1745              		.loc 1 87 9 is_stmt 1 view .LVU442
 1746              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1747              		.loc 1 87 32 is_stmt 0 view .LVU443
 1748 0804 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.86
 1749              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1750              		.loc 1 87 26 view .LVU444
 1751 0808 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1752              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1753              		.loc 1 87 32 view .LVU445
 1754 080c 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1755 0810 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1756 0814 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1757              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1758              		.loc 1 87 26 view .LVU446
 1759 0818 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1760 081c FEFFFFEB 		bl	pow		@
 1761              	.LVL118:
 1762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1763              		.loc 1 87 49 view .LVU447
 1764 0820 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1765              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 1766              		.loc 1 87 24 view .LVU448
 1767 0824 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1768 0828 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1769 082c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1770              	.LVL119:
 1771              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1772              		.loc 1 86 5 view .LVU449
 1773 0830 060054E1 		cmp	r4, r6	@ ivtmp.86, _31
 1774 0834 F2FFFF1A 		bne	.L110		@,
 1775              	.LVL120:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1776              		.loc 1 86 5 view .LVU450
 1777              	.LBE8:
 1778              	.LBE9:
 349:armwave.c     **** 
 350:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1779              		.loc 1 350 5 is_stmt 1 view .LVU451
 1780 0838 F0FDFFEB 		bl	armwave_setup_render.constprop.0		@
 1781              	.LVL121:
 351:armwave.c     **** 
 352:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1782              		.loc 1 352 5 view .LVU452
 1783              	@ armwave.c:353: }
 353:armwave.c     **** }
 1784              		.loc 1 353 1 is_stmt 0 view .LVU453
 1785 083c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1786              		.cfi_restore 84
 1787              		.cfi_restore 85
 1788              		.cfi_restore 82
 1789              		.cfi_restore 83
 1790              		.cfi_restore 80
 1791              		.cfi_restore 81
 1792              		.cfi_def_cfa_offset 16
 1793              	@ armwave.c:352:     printf("armwave version: %s\n", ARMWAVE_VER);
 352:armwave.c     **** }
 1794              		.loc 1 352 5 view .LVU454
 1795 0840 24109FE5 		ldr	r1, .L113+28	@,
 1796 0844 24009FE5 		ldr	r0, .L113+32	@,
 1797              	@ armwave.c:353: }
 1798              		.loc 1 353 1 view .LVU455
 1799 0848 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1800              		.cfi_restore 14
 1801              		.cfi_restore 6
 1802              		.cfi_restore 5
 1803              		.cfi_restore 4
 1804              		.cfi_def_cfa_offset 0
 1805              	@ armwave.c:352:     printf("armwave version: %s\n", ARMWAVE_VER);
 352:armwave.c     **** }
 1806              		.loc 1 352 5 view .LVU456
 1807 084c FEFFFFEA 		b	printf		@
 1808              	.LVL122:
 1809              	.L114:
 1810              		.align	3
 1811              	.L113:
 1812 0850 000000C0 		.word	-1073741824
 1813 0854 CCCCEC3F 		.word	1072483532
 1814 0858 00000000 		.word	0
 1815 085c 00E06F40 		.word	1081073664
 1816 0860 00007F43 		.word	1132396544
 1817 0864 00000000 		.word	.LANCHOR1
 1818 0868 FFFFFFFF 		.word	gamma_table-1
 1819 086c D8000000 		.word	.LC12
 1820 0870 E0000000 		.word	.LC13
 1821              		.cfi_endproc
 1822              	.LFE65:
 1824              		.global	__aeabi_uidiv
 1825              		.align	2
 1826              		.global	armwave_test_generate
 1827              		.syntax unified
 1828              		.arm
 1829              		.fpu vfp
 1831              	armwave_test_generate:
 1832              	.LFB66:
 354:armwave.c     **** 
 355:armwave.c     **** void armwave_test_generate()
 356:armwave.c     **** {
 1833              		.loc 1 356 1 is_stmt 1 view -0
 1834              		.cfi_startproc
 1835              		@ args = 0, pretend = 0, frame = 8
 1836              		@ frame_needed = 0, uses_anonymous_args = 0
 357:armwave.c     **** 	uint32_t yy;
 1837              		.loc 1 357 2 view .LVU458
 358:armwave.c     **** 
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1838              		.loc 1 359 5 view .LVU459
 1839              	@ armwave.c:356: {
 356:armwave.c     **** 	uint32_t yy;
 1840              		.loc 1 356 1 is_stmt 0 view .LVU460
 1841 0874 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1842              		.cfi_def_cfa_offset 36
 1843              		.cfi_offset 4, -36
 1844              		.cfi_offset 5, -32
 1845              		.cfi_offset 6, -28
 1846              		.cfi_offset 7, -24
 1847              		.cfi_offset 8, -20
 1848              		.cfi_offset 9, -16
 1849              		.cfi_offset 10, -12
 1850              		.cfi_offset 11, -8
 1851              		.cfi_offset 14, -4
 1852              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1853              		.loc 1 359 5 view .LVU461
 1854 0878 0010A0E3 		mov	r1, #0	@,
 1855 087c 44419FE5 		ldr	r4, .L133	@ tmp269,
 1856              	@ armwave.c:356: {
 356:armwave.c     **** 	uint32_t yy;
 1857              		.loc 1 356 1 view .LVU462
 1858 0880 0CD04DE2 		sub	sp, sp, #12	@,,
 1859              		.cfi_def_cfa_offset 48
 1860              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1861              		.loc 1 359 5 view .LVU463
 1862 0884 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 1863 0888 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1864 088c FEFFFFEB 		bl	memset		@
 1865              	.LVL123:
 360:armwave.c     **** 
 361:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1866              		.loc 1 361 5 is_stmt 1 view .LVU464
 1867              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1868              		.loc 1 361 45 is_stmt 0 view .LVU465
 1869 0890 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 1870              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1871              		.loc 1 361 5 view .LVU466
 1872 0894 020B55E3 		cmp	r5, #2048	@ _72,
 1873 0898 4800008A 		bhi	.L115		@,
 1874 089c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 1875              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1876              		.loc 1 361 12 view .LVU467
 1877 08a0 00A0A0E3 		mov	r10, #0	@ yy,
 1878              	.LVL124:
 1879              	.L121:
 362:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1880              		.loc 1 362 9 is_stmt 1 discriminator 3 view .LVU468
 1881 08a4 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 1882              	.LBB12:
 1883              	.LBB13:
 1884              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1885              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU469
 1886 08a8 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1887              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1888              		.loc 1 109 5 discriminator 3 view .LVU470
 1889 08ac 000056E3 		cmp	r6, #0	@ prephitmp_171,
 1890              	.LBE13:
 1891              	.LBE12:
 1892              	@ armwave.c:362:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1893              		.loc 1 362 9 discriminator 3 view .LVU471
 1894 08b0 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 1895              	.LVL125:
 1896              	.LBB15:
 1897              	.LBI12:
  98:armwave.c     **** {
 1898              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU472
 1899              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 1900              		.loc 1 100 5 discriminator 3 view .LVU473
 101:armwave.c     ****     uint8_t *wave_base;
 1901              		.loc 1 101 5 discriminator 3 view .LVU474
 102:armwave.c     ****     uint8_t *write_buffer_base;
 1902              		.loc 1 102 5 discriminator 3 view .LVU475
 103:armwave.c     ****     uint8_t *write_buffer;
 1903              		.loc 1 103 5 discriminator 3 view .LVU476
 104:armwave.c     ****     
 1904              		.loc 1 104 5 discriminator 3 view .LVU477
 106:armwave.c     **** 
 1905              		.loc 1 106 5 discriminator 3 view .LVU478
 1906              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1907              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU479
 1908 08b4 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 1909              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 1910              		.loc 1 106 40 discriminator 3 view .LVU480
 1911 08b8 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 1912              	.LVL126:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1913              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU481
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1914              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU482
 1915 08bc 3900000A 		beq	.L117		@,
 1916              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1917              		.loc 1 109 11 view .LVU483
 1918 08c0 0080A0E3 		mov	r8, #0	@ w,
 1919 08c4 043043E2 		sub	r3, r3, #4	@ _77, _3,
 1920              	.LVL127:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1921              		.loc 1 109 11 view .LVU484
 1922 08c8 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 1923              	.LVL128:
 1924              	.L120:
 110:armwave.c     **** 
 1925              		.loc 1 110 9 is_stmt 1 view .LVU485
 1926              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1927              		.loc 1 110 64 is_stmt 0 view .LVU486
 1928 08cc 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1929              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1930              		.loc 1 120 9 view .LVU487
 1931 08d0 000059E3 		cmp	r9, #0	@ _4,
 1932              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1933              		.loc 1 110 36 view .LVU488
 1934 08d4 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 1935              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 1936              		.loc 1 110 64 view .LVU489
 1937 08d8 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 1938              	.LVL129:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1939              		.loc 1 120 9 is_stmt 1 view .LVU490
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1940              		.loc 1 120 9 is_stmt 0 view .LVU491
 1941 08dc 2D00000A 		beq	.L118		@,
 1942 08e0 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 1943 08e4 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 1944              	.LVL130:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1945              		.loc 1 120 9 view .LVU492
 1946 08e8 03E08EE0 		add	lr, lr, r3	@ ivtmp.92, _16, tmp205
 1947              	.LVL131:
 1948              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1949              		.loc 1 120 16 view .LVU493
 1950 08ec 0010A0E3 		mov	r1, #0	@ yy,
 1951              	.LVL132:
 1952              	.L119:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1953              		.loc 1 135 13 is_stmt 1 view .LVU494
 1954              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1955              		.loc 1 135 18 is_stmt 0 view .LVU495
 1956 08f0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 1957              	.LVL133:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 1958              		.loc 1 139 13 is_stmt 1 view .LVU496
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1959              		.loc 1 140 14 view .LVU497
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1960              		.loc 1 141 14 view .LVU498
 142:armwave.c     ****             	word >>= 8;
 1961              		.loc 1 142 14 view .LVU499
 1962              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1963              		.loc 1 140 42 is_stmt 0 view .LVU500
 1964 08f4 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1965              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1966              		.loc 1 141 60 view .LVU501
 1967 08f8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1968              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1969              		.loc 1 140 34 view .LVU502
 1970 08fc 73C0EFE6 		uxtb	ip, r3	@ word, word
 1971              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 1972              		.loc 1 143 19 view .LVU503
 1973 0900 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 1974              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 1975              		.loc 1 142 44 view .LVU504
 1976 0904 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 1977              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1978              		.loc 1 140 34 view .LVU505
 1979 0908 7550EFE6 		uxtb	r5, r5	@ word, word
 1980              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 1981              		.loc 1 142 44 view .LVU506
 1982 090c 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 1983              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1984              		.loc 1 141 60 view .LVU507
 1985 0910 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 1986              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 1987              		.loc 1 143 19 view .LVU508
 1988 0914 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 1989              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 1990              		.loc 1 142 44 view .LVU509
 1991 0918 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 1992              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1993              		.loc 1 140 34 view .LVU510
 1994 091c 7CC0EFE6 		uxtb	ip, ip	@ word, word
 1995              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 1996              		.loc 1 143 19 view .LVU511
 1997 0920 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1998              	.LVL134:
 1999              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2000              		.loc 1 142 44 view .LVU512
 2001 0924 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2002 0928 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2003              	.LVL135:
 143:armwave.c     ****     		}
 2004              		.loc 1 143 14 is_stmt 1 view .LVU513
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2005              		.loc 1 140 14 view .LVU514
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2006              		.loc 1 141 14 view .LVU515
 142:armwave.c     ****             	word >>= 8;
 2007              		.loc 1 142 14 view .LVU516
 2008              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2009              		.loc 1 140 42 is_stmt 0 view .LVU517
 2010 092c 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2011              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2012              		.loc 1 141 60 view .LVU518
 2013 0930 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2014              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2015              		.loc 1 142 44 view .LVU519
 2016 0934 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2017              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2018              		.loc 1 141 60 view .LVU520
 2019 0938 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2020              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2021              		.loc 1 142 44 view .LVU521
 2022 093c 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2023              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2024              		.loc 1 141 60 view .LVU522
 2025 0940 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2026              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2027              		.loc 1 120 37 view .LVU523
 2028 0944 041081E2 		add	r1, r1, #4	@ yy, yy,
 2029              	.LVL136:
 2030              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2031              		.loc 1 142 44 view .LVU524
 2032 0948 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2033              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2034              		.loc 1 120 9 view .LVU525
 2035 094c 010059E1 		cmp	r9, r1	@ _4, yy
 2036              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2037              		.loc 1 142 44 view .LVU526
 2038 0950 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2039 0954 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2040              	.LVL137:
 143:armwave.c     ****     		}
 2041              		.loc 1 143 14 is_stmt 1 view .LVU527
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2042              		.loc 1 140 14 view .LVU528
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2043              		.loc 1 141 14 view .LVU529
 142:armwave.c     ****             	word >>= 8;
 2044              		.loc 1 142 14 view .LVU530
 2045              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2046              		.loc 1 140 42 is_stmt 0 view .LVU531
 2047 0958 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2048              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2049              		.loc 1 141 60 view .LVU532
 2050 095c 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2051              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2052              		.loc 1 142 44 view .LVU533
 2053 0960 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2054 0964 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2055 0968 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2056 096c 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2057 0970 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****     		}
 2058              		.loc 1 143 14 is_stmt 1 view .LVU534
 2059              	.LVL138:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2060              		.loc 1 140 14 view .LVU535
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2061              		.loc 1 141 14 view .LVU536
 142:armwave.c     ****             	word >>= 8;
 2062              		.loc 1 142 14 view .LVU537
 2063              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2064              		.loc 1 140 42 is_stmt 0 view .LVU538
 2065 0974 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2066              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2067              		.loc 1 141 60 view .LVU539
 2068 0978 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2069              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2070              		.loc 1 142 44 view .LVU540
 2071 097c 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2072 0980 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2073 0984 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2074 0988 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2075 098c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****     		}
 2076              		.loc 1 143 14 is_stmt 1 view .LVU541
 2077              	.LVL139:
 2078              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2079              		.loc 1 120 9 is_stmt 0 view .LVU542
 2080 0990 D6FFFF8A 		bhi	.L119		@,
 2081 0994 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2082              	.LVL140:
 2083              	.L118:
 2084              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2085              		.loc 1 109 44 view .LVU543
 2086 0998 018088E2 		add	r8, r8, #1	@ w, w,
 2087              	.LVL141:
 2088              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2089              		.loc 1 109 5 view .LVU544
 2090 099c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2091 09a0 C9FFFF3A 		bcc	.L120		@,
 2092 09a4 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2093              	.LVL142:
 2094              	.L117:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2095              		.loc 1 109 5 view .LVU545
 2096              	.LBE14:
 2097              	.LBE15:
 2098              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 361:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2099              		.loc 1 361 28 discriminator 3 view .LVU546
 2100 09a8 0510A0E1 		mov	r1, r5	@, _72
 2101 09ac 020BA0E3 		mov	r0, #2048	@,
 2102              	.LVL143:
 361:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2103              		.loc 1 361 28 discriminator 3 view .LVU547
 2104 09b0 FEFFFFEB 		bl	__aeabi_uidiv		@
 2105              	.LVL144:
 2106              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 361:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2107              		.loc 1 361 63 discriminator 3 view .LVU548
 2108 09b4 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2109              	.LVL145:
 2110              	@ armwave.c:361:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 361:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2111              		.loc 1 361 5 discriminator 3 view .LVU549
 2112 09b8 0A0050E1 		cmp	r0, r10	@, yy
 2113 09bc B8FFFF8A 		bhi	.L121		@,
 2114              	.LVL146:
 2115              	.L115:
 2116              	@ armwave.c:364: }
 363:armwave.c     ****     }
 364:armwave.c     **** }
 2117              		.loc 1 364 1 view .LVU550
 2118 09c0 0CD08DE2 		add	sp, sp, #12	@,,
 2119              		.cfi_def_cfa_offset 36
 2120              		@ sp needed	@
 2121 09c4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2122              	.L134:
 2123              		.align	2
 2124              	.L133:
 2125 09c8 00000000 		.word	g_armwave_state
 2126              		.cfi_endproc
 2127              	.LFE66:
 2129              		.align	2
 2130              		.global	armwave_test_get_buffer
 2131              		.syntax unified
 2132              		.arm
 2133              		.fpu vfp
 2135              	armwave_test_get_buffer:
 2136              	.LFB67:
 365:armwave.c     **** 
 366:armwave.c     **** PyObject *armwave_test_get_buffer()
 367:armwave.c     **** {
 2137              		.loc 1 367 1 is_stmt 1 view -0
 2138              		.cfi_startproc
 2139              		@ args = 0, pretend = 0, frame = 0
 2140              		@ frame_needed = 0, uses_anonymous_args = 0
 368:armwave.c     ****     PyObject *mv;
 2141              		.loc 1 368 5 view .LVU552
 369:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2142              		.loc 1 369 5 view .LVU553
 2143              	@ armwave.c:367: {
 367:armwave.c     ****     PyObject *mv;
 2144              		.loc 1 367 1 is_stmt 0 view .LVU554
 2145 09cc 30402DE9 		push	{r4, r5, lr}	@
 2146              		.cfi_def_cfa_offset 12
 2147              		.cfi_offset 4, -12
 2148              		.cfi_offset 5, -8
 2149              		.cfi_offset 14, -4
 2150              	@ armwave.c:369:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2151              		.loc 1 369 22 view .LVU555
 2152 09d0 2C00A0E3 		mov	r0, #44	@,
 2153              	@ armwave.c:367: {
 367:armwave.c     ****     PyObject *mv;
 2154              		.loc 1 367 1 view .LVU556
 2155 09d4 0CD04DE2 		sub	sp, sp, #12	@,,
 2156              		.cfi_def_cfa_offset 24
 2157              	@ armwave.c:369:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2158              		.loc 1 369 22 view .LVU557
 2159 09d8 FEFFFFEB 		bl	malloc		@
 2160              	.LVL147:
 2161              	@ armwave.c:371:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 370:armwave.c     ****     
 371:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2162              		.loc 1 371 5 view .LVU558
 2163 09dc 3C409FE5 		ldr	r4, .L137	@ tmp118,
 2164              	@ armwave.c:369:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 369:armwave.c     ****     
 2165              		.loc 1 369 22 view .LVU559
 2166 09e0 0050A0E1 		mov	r5, r0	@ tmp117,
 2167              	.LVL148:
 2168              		.loc 1 371 5 is_stmt 1 view .LVU560
 2169 09e4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2170              	.LVL149:
 2171              		.loc 1 371 5 is_stmt 0 view .LVU561
 2172 09e8 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2173              	.LVL150:
 372:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2174              		.loc 1 372 5 is_stmt 1 view .LVU562
 2175              	@ armwave.c:372:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2176              		.loc 1 372 79 is_stmt 0 view .LVU563
 2177 09ec 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2178              	@ armwave.c:372:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2179              		.loc 1 372 5 view .LVU564
 2180 09f0 08C0A0E3 		mov	ip, #8	@ tmp125,
 2181 09f4 0110A0E3 		mov	r1, #1	@ tmp126,
 2182 09f8 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2183 09fc 02108DE8 		stm	sp, {r1, ip}	@,,
 2184 0a00 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2185 0a04 0500A0E1 		mov	r0, r5	@, tmp117
 2186 0a08 0010A0E3 		mov	r1, #0	@,
 2187 0a0c FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2188              	.LVL151:
 373:armwave.c     **** 
 374:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2189              		.loc 1 374 2 is_stmt 1 view .LVU565
 2190              	@ armwave.c:374: 	mv = PyMemoryView_FromBuffer(buf);
 2191              		.loc 1 374 7 is_stmt 0 view .LVU566
 2192 0a10 0500A0E1 		mov	r0, r5	@, tmp117
 2193              	@ armwave.c:375: }
 375:armwave.c     **** }
 2194              		.loc 1 375 1 view .LVU567
 2195 0a14 0CD08DE2 		add	sp, sp, #12	@,,
 2196              		.cfi_def_cfa_offset 12
 2197              		@ sp needed	@
 2198 0a18 3040BDE8 		pop	{r4, r5, lr}	@
 2199              		.cfi_restore 14
 2200              		.cfi_restore 5
 2201              		.cfi_restore 4
 2202              		.cfi_def_cfa_offset 0
 2203              	.LVL152:
 2204              	@ armwave.c:374: 	mv = PyMemoryView_FromBuffer(buf);
 374:armwave.c     **** }
 2205              		.loc 1 374 7 view .LVU568
 2206 0a1c FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2207              	.LVL153:
 2208              	.L138:
 374:armwave.c     **** }
 2209              		.loc 1 374 7 view .LVU569
 2210              		.align	2
 2211              	.L137:
 2212 0a20 00000000 		.word	g_armwave_state
 2213              		.cfi_endproc
 2214              	.LFE67:
 2216              		.align	2
 2217              		.global	armwave_test_dump_buffer_to_ppm
 2218              		.syntax unified
 2219              		.arm
 2220              		.fpu vfp
 2222              	armwave_test_dump_buffer_to_ppm:
 2223              	.LVL154:
 2224              	.LFB68:
 376:armwave.c     **** 
 377:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 378:armwave.c     **** {
 2225              		.loc 1 378 1 is_stmt 1 view -0
 2226              		.cfi_startproc
 2227              		@ args = 0, pretend = 0, frame = 0
 2228              		@ frame_needed = 0, uses_anonymous_args = 0
 2229              		@ link register save eliminated.
 379:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2230              		.loc 1 379 2 view .LVU571
 2231 0a24 08309FE5 		ldr	r3, .L140	@ tmp112,
 2232 0a28 0010A0E1 		mov	r1, r0	@, fn
 2233 0a2c 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2234              	.LVL155:
 2235              		.loc 1 379 2 is_stmt 0 view .LVU572
 2236 0a30 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2237              	.LVL156:
 2238              	.L141:
 2239              		.loc 1 379 2 view .LVU573
 2240              		.align	2
 2241              	.L140:
 2242 0a34 00000000 		.word	g_armwave_state
 2243              		.cfi_endproc
 2244              	.LFE68:
 2246              		.align	2
 2247              		.global	armwave_cleanup
 2248              		.syntax unified
 2249              		.arm
 2250              		.fpu vfp
 2252              	armwave_cleanup:
 2253              	.LFB69:
 380:armwave.c     **** }
 381:armwave.c     **** 
 382:armwave.c     **** void armwave_cleanup()
 383:armwave.c     **** {
 2254              		.loc 1 383 1 is_stmt 1 view -0
 2255              		.cfi_startproc
 2256              		@ args = 0, pretend = 0, frame = 0
 2257              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2258              		.loc 1 384 2 view .LVU575
 2259              	@ armwave.c:383: {
 383:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2260              		.loc 1 383 1 is_stmt 0 view .LVU576
 2261 0a38 10402DE9 		push	{r4, lr}	@
 2262              		.cfi_def_cfa_offset 8
 2263              		.cfi_offset 4, -8
 2264              		.cfi_offset 14, -4
 2265              	@ armwave.c:384: 	free(g_armwave_state.out_pixbuf);
 2266              		.loc 1 384 22 view .LVU577
 2267 0a3c 28409FE5 		ldr	r4, .L144	@ tmp113,
 2268              	@ armwave.c:384: 	free(g_armwave_state.out_pixbuf);
 2269              		.loc 1 384 2 view .LVU578
 2270 0a40 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2271 0a44 FEFFFFEB 		bl	free		@
 2272              	.LVL157:
 385:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2273              		.loc 1 385 2 is_stmt 1 view .LVU579
 2274 0a48 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2275 0a4c FEFFFFEB 		bl	free		@
 2276              	.LVL158:
 386:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2277              		.loc 1 386 2 view .LVU580
 2278 0a50 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.xcoord_to_xpixel
 2279 0a54 FEFFFFEB 		bl	free		@
 2280              	.LVL159:
 387:armwave.c     **** 
 388:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2281              		.loc 1 388 2 view .LVU581
 2282              	@ armwave.c:388: 	g_armwave_state.out_pixbuf = NULL;
 2283              		.loc 1 388 29 is_stmt 0 view .LVU582
 2284 0a58 0030A0E3 		mov	r3, #0	@ tmp120,
 2285 0a5c 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 389:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2286              		.loc 1 389 2 is_stmt 1 view .LVU583
 2287              	@ armwave.c:389: 	g_armwave_state.ch1_buffer = NULL;
 2288              		.loc 1 389 29 is_stmt 0 view .LVU584
 2289 0a60 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 390:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2290              		.loc 1 390 2 is_stmt 1 view .LVU585
 2291              	@ armwave.c:390: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2292              		.loc 1 390 35 is_stmt 0 view .LVU586
 2293 0a64 583084E5 		str	r3, [r4, #88]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2294              	@ armwave.c:391: }
 391:armwave.c     **** }
 2295              		.loc 1 391 1 view .LVU587
 2296 0a68 1080BDE8 		pop	{r4, pc}	@
 2297              	.L145:
 2298              		.align	2
 2299              	.L144:
 2300 0a6c 00000000 		.word	g_armwave_state
 2301              		.cfi_endproc
 2302              	.LFE69:
 2304              		.section	.text.startup,"ax",%progbits
 2305              		.align	2
 2306              		.global	main
 2307              		.syntax unified
 2308              		.arm
 2309              		.fpu vfp
 2311              	main:
 2312              	.LVL160:
 2313              	.LFB70:
 392:armwave.c     **** 
 393:armwave.c     **** int main(int argc, char *argv[])
 394:armwave.c     **** {
 2314              		.loc 1 394 1 is_stmt 1 view -0
 2315              		.cfi_startproc
 2316              		@ args = 0, pretend = 0, frame = 8
 2317              		@ frame_needed = 0, uses_anonymous_args = 0
 395:armwave.c     ****     uint32_t *out_buffer;
 2318              		.loc 1 395 5 view .LVU589
 396:armwave.c     ****     uint32_t xx, yy, n;
 2319              		.loc 1 396 5 view .LVU590
 397:armwave.c     **** 
 398:armwave.c     ****     //printf("Starting armwave...\n");
 399:armwave.c     ****     armwave_init();
 2320              		.loc 1 399 5 view .LVU591
 2321              	.LBB20:
 2322              	.LBI20:
 151:armwave.c     **** {
 2323              		.loc 1 151 6 view .LVU592
 2324              	.LBB21:
 153:armwave.c     **** }
 2325              		.loc 1 153 5 view .LVU593
 2326              	.LBE21:
 2327              	.LBE20:
 2328              	@ armwave.c:394: {
 394:armwave.c     ****     uint32_t *out_buffer;
 2329              		.loc 1 394 1 is_stmt 0 view .LVU594
 2330 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2331              		.cfi_def_cfa_offset 36
 2332              		.cfi_offset 4, -36
 2333              		.cfi_offset 5, -32
 2334              		.cfi_offset 6, -28
 2335              		.cfi_offset 7, -24
 2336              		.cfi_offset 8, -20
 2337              		.cfi_offset 9, -16
 2338              		.cfi_offset 10, -12
 2339              		.cfi_offset 11, -8
 2340              		.cfi_offset 14, -4
 2341 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2342              		.cfi_def_cfa_offset 48
 2343              	.LBB25:
 2344              	.LBB22:
 2345              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2346              		.loc 1 153 27 view .LVU595
 2347 0008 68919FE5 		ldr	r9, .L166	@ tmp267,
 2348              	.LBE22:
 2349              	.LBE25:
 2350              	@ armwave.c:408:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 400:armwave.c     **** 
 401:armwave.c     ****     //printf("Creating test waveform...\n");
 402:armwave.c     ****     test_create_waveform();
 403:armwave.c     **** 
 404:armwave.c     ****     //printf("Creating gamma LUT...\n");
 405:armwave.c     ****     test_create_gamma();
 406:armwave.c     **** 
 407:armwave.c     ****     //printf("Setting up render...\n");
 408:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2351              		.loc 1 408 5 view .LVU596
 2352 000c 68219FE5 		ldr	r2, .L166+4	@ ivtmp_191,
 2353              	.LBB26:
 2354              	.LBB23:
 2355              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2356              		.loc 1 153 27 view .LVU597
 2357 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2358              	.LBE23:
 2359              	.LBE26:
 2360              	@ armwave.c:408:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2361              		.loc 1 408 5 view .LVU598
 2362 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2363              	.LBB27:
 2364              	.LBB24:
 2365              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 2366              		.loc 1 153 27 view .LVU599
 2367 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2368              	.LBE24:
 2369              	.LBE27:
 402:armwave.c     **** 
 2370              		.loc 1 402 5 is_stmt 1 view .LVU600
 2371 001c FEFFFFEB 		bl	test_create_waveform		@
 2372              	.LVL161:
 405:armwave.c     **** 
 2373              		.loc 1 405 5 view .LVU601
 2374 0020 FEFFFFEB 		bl	test_create_gamma		@
 2375              	.LVL162:
 2376              		.loc 1 408 5 view .LVU602
 2377 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2378              	.LVL163:
 409:armwave.c     **** 
 410:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 411:armwave.c     **** 
 412:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2379              		.loc 1 412 5 view .LVU603
 2380              		.loc 1 412 5 is_stmt 0 view .LVU604
 2381 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2382              	.LVL164:
 2383              	.L147:
 2384              	@ armwave.c:413:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 413:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2385              		.loc 1 413 9 view .LVU605
 2386 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2387 0030 4900008A 		bhi	.L155		@,
 2388 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2389              	@ armwave.c:413:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2390              		.loc 1 413 16 view .LVU606
 2391 0038 0080A0E3 		mov	r8, #0	@ yy,
 2392 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2393              	.LVL165:
 2394              	.L152:
 414:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 415:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2395              		.loc 1 415 13 is_stmt 1 discriminator 3 view .LVU607
 2396 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2397              	.LBB28:
 2398              	.LBB29:
 2399              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2400              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU608
 2401 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2402              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2403              		.loc 1 109 5 discriminator 3 view .LVU609
 2404 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2405              	.LBE29:
 2406              	.LBE28:
 2407              	@ armwave.c:415:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2408              		.loc 1 415 13 discriminator 3 view .LVU610
 2409 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2410              	.LVL166:
 2411              	.LBB31:
 2412              	.LBI28:
  98:armwave.c     **** {
 2413              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU611
 2414              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 2415              		.loc 1 100 5 discriminator 3 view .LVU612
 101:armwave.c     ****     uint8_t *wave_base;
 2416              		.loc 1 101 5 discriminator 3 view .LVU613
 102:armwave.c     ****     uint8_t *write_buffer_base;
 2417              		.loc 1 102 5 discriminator 3 view .LVU614
 103:armwave.c     ****     uint8_t *write_buffer;
 2418              		.loc 1 103 5 discriminator 3 view .LVU615
 104:armwave.c     ****     
 2419              		.loc 1 104 5 discriminator 3 view .LVU616
 106:armwave.c     **** 
 2420              		.loc 1 106 5 discriminator 3 view .LVU617
 2421              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2422              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU618
 2423 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2424              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 2425              		.loc 1 106 40 discriminator 3 view .LVU619
 2426 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2427              	.LVL167:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2428              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU620
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2429              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU621
 2430 0058 3900000A 		beq	.L148		@,
 2431              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2432              		.loc 1 109 11 view .LVU622
 2433 005c 0070A0E3 		mov	r7, #0	@ w,
 2434 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2435              	.LVL168:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2436              		.loc 1 109 11 view .LVU623
 2437 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2438              	.LVL169:
 2439              	.L151:
 110:armwave.c     **** 
 2440              		.loc 1 110 9 is_stmt 1 view .LVU624
 2441              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2442              		.loc 1 110 64 is_stmt 0 view .LVU625
 2443 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2444              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2445              		.loc 1 120 9 view .LVU626
 2446 006c 00005AE3 		cmp	r10, #0	@ _2,
 2447              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2448              		.loc 1 110 36 view .LVU627
 2449 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2450              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 2451              		.loc 1 110 64 view .LVU628
 2452 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2453              	.LVL170:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2454              		.loc 1 120 9 is_stmt 1 view .LVU629
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2455              		.loc 1 120 9 is_stmt 0 view .LVU630
 2456 0078 2D00000A 		beq	.L149		@,
 2457 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2458 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2459              	.LVL171:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2460              		.loc 1 120 9 view .LVU631
 2461 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.105, _20, tmp202
 2462              	.LVL172:
 2463              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2464              		.loc 1 120 16 view .LVU632
 2465 0088 0010A0E3 		mov	r1, #0	@ yy,
 2466              	.LVL173:
 2467              	.L150:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2468              		.loc 1 135 13 is_stmt 1 view .LVU633
 2469              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2470              		.loc 1 135 18 is_stmt 0 view .LVU634
 2471 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2472              	.LVL174:
 139:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2473              		.loc 1 139 13 is_stmt 1 view .LVU635
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2474              		.loc 1 140 14 view .LVU636
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2475              		.loc 1 141 14 view .LVU637
 142:armwave.c     ****             	word >>= 8;
 2476              		.loc 1 142 14 view .LVU638
 2477              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2478              		.loc 1 140 42 is_stmt 0 view .LVU639
 2479 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2480              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2481              		.loc 1 141 60 view .LVU640
 2482 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2483              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2484              		.loc 1 140 34 view .LVU641
 2485 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2486              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2487              		.loc 1 143 19 view .LVU642
 2488 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2489              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2490              		.loc 1 142 44 view .LVU643
 2491 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2492              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2493              		.loc 1 140 34 view .LVU644
 2494 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2495              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2496              		.loc 1 142 44 view .LVU645
 2497 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2498              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2499              		.loc 1 141 60 view .LVU646
 2500 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2501              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2502              		.loc 1 143 19 view .LVU647
 2503 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2504              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2505              		.loc 1 142 44 view .LVU648
 2506 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2507              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2508              		.loc 1 140 34 view .LVU649
 2509 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2510              	@ armwave.c:143:             	word >>= 8;
 143:armwave.c     ****     		}
 2511              		.loc 1 143 19 view .LVU650
 2512 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2513              	.LVL175:
 2514              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2515              		.loc 1 142 44 view .LVU651
 2516 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2517 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2518              	.LVL176:
 143:armwave.c     ****     		}
 2519              		.loc 1 143 14 is_stmt 1 view .LVU652
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2520              		.loc 1 140 14 view .LVU653
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2521              		.loc 1 141 14 view .LVU654
 142:armwave.c     ****             	word >>= 8;
 2522              		.loc 1 142 14 view .LVU655
 2523              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2524              		.loc 1 140 42 is_stmt 0 view .LVU656
 2525 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2526              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2527              		.loc 1 141 60 view .LVU657
 2528 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2529              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2530              		.loc 1 142 44 view .LVU658
 2531 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2532              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2533              		.loc 1 141 60 view .LVU659
 2534 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2535              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2536              		.loc 1 142 44 view .LVU660
 2537 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2538              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2539              		.loc 1 141 60 view .LVU661
 2540 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2541              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2542              		.loc 1 120 37 view .LVU662
 2543 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2544              	.LVL177:
 2545              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2546              		.loc 1 142 44 view .LVU663
 2547 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2548              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2549              		.loc 1 120 9 view .LVU664
 2550 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2551              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2552              		.loc 1 142 44 view .LVU665
 2553 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2554 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2555              	.LVL178:
 143:armwave.c     ****     		}
 2556              		.loc 1 143 14 is_stmt 1 view .LVU666
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2557              		.loc 1 140 14 view .LVU667
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2558              		.loc 1 141 14 view .LVU668
 142:armwave.c     ****             	word >>= 8;
 2559              		.loc 1 142 14 view .LVU669
 2560              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2561              		.loc 1 140 42 is_stmt 0 view .LVU670
 2562 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2563              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2564              		.loc 1 141 60 view .LVU671
 2565 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2566              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2567              		.loc 1 142 44 view .LVU672
 2568 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2569 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2570 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2571 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2572 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****     		}
 2573              		.loc 1 143 14 is_stmt 1 view .LVU673
 2574              	.LVL179:
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2575              		.loc 1 140 14 view .LVU674
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2576              		.loc 1 141 14 view .LVU675
 142:armwave.c     ****             	word >>= 8;
 2577              		.loc 1 142 14 view .LVU676
 2578              	@ armwave.c:140:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2579              		.loc 1 140 42 is_stmt 0 view .LVU677
 2580 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2581              	@ armwave.c:141:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 141:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2582              		.loc 1 141 60 view .LVU678
 2583 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2584              	@ armwave.c:142:             	*(write_buffer + scale_value) += 1;
 142:armwave.c     ****             	word >>= 8;
 2585              		.loc 1 142 44 view .LVU679
 2586 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2587 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2588 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2589 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2590 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****     		}
 2591              		.loc 1 143 14 is_stmt 1 view .LVU680
 2592              	.LVL180:
 2593              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2594              		.loc 1 120 9 is_stmt 0 view .LVU681
 2595 012c D6FFFF8A 		bhi	.L150		@,
 2596 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2597              	.LVL181:
 2598              	.L149:
 2599              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2600              		.loc 1 109 44 view .LVU682
 2601 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2602              	.LVL182:
 2603              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2604              		.loc 1 109 5 view .LVU683
 2605 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2606 013c C9FFFF3A 		bcc	.L151		@,
 2607 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2608              	.LVL183:
 2609              	.L148:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2610              		.loc 1 109 5 view .LVU684
 2611              	.LBE30:
 2612              	.LBE31:
 2613              	@ armwave.c:413:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 413:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2614              		.loc 1 413 32 discriminator 3 view .LVU685
 2615 0144 0510A0E1 		mov	r1, r5	@, _61
 2616 0148 020BA0E3 		mov	r0, #2048	@,
 2617              	.LVL184:
 413:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2618              		.loc 1 413 32 discriminator 3 view .LVU686
 2619 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2620              	.LVL185:
 2621              	@ armwave.c:413:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 413:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2622              		.loc 1 413 67 discriminator 3 view .LVU687
 2623 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2624              	.LVL186:
 2625              	@ armwave.c:413:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 413:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2626              		.loc 1 413 9 discriminator 3 view .LVU688
 2627 0154 080050E1 		cmp	r0, r8	@, yy
 2628 0158 B8FFFF8A 		bhi	.L152		@,
 2629              	.LVL187:
 2630              	.L155:
 2631              	@ armwave.c:412:     for(n = 0; n < 5000; n++) {
 412:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2632              		.loc 1 412 5 discriminator 2 view .LVU689
 2633 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2634 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2635 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2636 0168 AFFFFF1A 		bne	.L147		@,
 2637 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 416:armwave.c     ****         }
 417:armwave.c     ****     }
 418:armwave.c     **** 
 419:armwave.c     ****     /*
 420:armwave.c     ****     printf("Creating pixbuf\n");
 421:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 422:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 423:armwave.c     **** 
 424:armwave.c     ****     printf("Dumping pixbuf\n");
 425:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 426:armwave.c     ****     */
 427:armwave.c     **** 
 428:armwave.c     ****     return 0;
 2638              		.loc 1 428 5 is_stmt 1 view .LVU690
 2639              	@ armwave.c:429: }
 429:armwave.c     **** }...
 2640              		.loc 1 429 1 is_stmt 0 view .LVU691
 2641 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2642              		.cfi_def_cfa_offset 36
 2643              		@ sp needed	@
 2644 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2645              	.L167:
 2646              		.align	2
 2647              	.L166:
 2648 0178 00000000 		.word	g_armwave_state
 2649 017c 88130000 		.word	5000
 2650              		.cfi_endproc
 2651              	.LFE70:
 2653              		.global	mod_depth
 2654              		.global	overall_scale
 2655              		.comm	gamma_table,256,4
 2656              		.comm	test_wave_buffer,131072,4
 2657              		.comm	g_armwave_state,92,4
 2658              		.section	.rodata
 2659              		.align	2
 2660              		.set	.LANCHOR0,. + 0
 2663              	__PRETTY_FUNCTION__.16995:
 2664 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2664      6176655F 
 2664      73657475 
 2664      705F7265 
 2664      6E646572 
 2665 0015 000000   		.space	3
 2668              	__PRETTY_FUNCTION__.17020:
 2669 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2669      6176655F 
 2669      66696C6C 
 2669      5F706978 
 2669      62756632 
 2670 002d 000000   		.space	3
 2673              	overall_scale:
 2674 0030 00002041 		.word	1092616192
 2675              		.bss
 2676              		.align	2
 2677              		.set	.LANCHOR1,. + 0
 2680              	mod_depth:
 2681 0000 00000000 		.space	4
 2682              		.section	.rodata.str1.4,"aMS",%progbits,1
 2683              		.align	2
 2684              	.LC0:
 2685 0000 61726D77 		.ascii	"armwave.c\000"
 2685      6176652E 
 2685      6300
 2686 000a 0000     		.space	2
 2687              	.LC1:
 2688 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2688      6D776176 
 2688      655F7374 
 2688      6174652E 
 2688      6368315F 
 2689 002f 00       		.space	1
 2690              	.LC2:
 2691 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2691      6D776176 
 2691      655F7374 
 2691      6174652E 
 2691      78636F6F 
 2692 0059 000000   		.space	3
 2693              	.LC3:
 2694 005c 73746172 		.ascii	"start_point < end_point\000"
 2694      745F706F 
 2694      696E7420 
 2694      3C20656E 
 2694      645F706F 
 2695              	.LC4:
 2696 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2696      6765745F 
 2696      68656967 
 2696      68742025 
 2696      20323536 
 2697 008f 00       		.space	1
 2698              	.LC5:
 2699 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2699      62756666 
 2699      65722021 
 2699      3D204E55 
 2699      4C4C00
 2700 00a3 00       		.space	1
 2701              	.LC6:
 2702 00a4 25642025 		.ascii	"%d %d,%d\012\000"
 2702      642C2564 
 2702      0A00
 2703 00ae 0000     		.space	2
 2704              	.LC7:
 2705 00b0 776200   		.ascii	"wb\000"
 2706 00b3 00       		.space	1
 2707              	.LC8:
 2708 00b4 50330A00 		.ascii	"P3\012\000"
 2709              	.LC9:
 2710 00b8 25642025 		.ascii	"%d %d\012\000"
 2710      640A00
 2711 00bf 00       		.space	1
 2712              	.LC10:
 2713 00c0 3235350A 		.ascii	"255\012\000"
 2713      00
 2714 00c5 000000   		.space	3
 2715              	.LC11:
 2716 00c8 25336420 		.ascii	"%3d %3d %3d\012\000"
 2716      25336420 
 2716      2533640A 
 2716      00
 2717 00d5 000000   		.space	3
 2718              	.LC12:
 2719 00d8 76302E30 		.ascii	"v0.0.1\000"
 2719      2E3100
 2720 00df 00       		.space	1
 2721              	.LC13:
 2722 00e0 61726D77 		.ascii	"armwave version: %s\012\000"
 2722      61766520 
 2722      76657273 
 2722      696F6E3A 
 2722      2025730A 
 2723              		.text
 2724              	.Letext0:
 2725              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2726              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2727              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2728              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2729              		.file 6 "/usr/include/stdio.h"
 2730              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2731              		.file 8 "/usr/include/errno.h"
 2732              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2733              		.file 10 "/usr/include/unistd.h"
 2734              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2735              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2736              		.file 13 "/usr/local/include/python3.8/pyport.h"
 2737              		.file 14 "/usr/include/math.h"
 2738              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2739              		.file 16 "/usr/include/time.h"
 2740              		.file 17 "/usr/local/include/python3.8/pymem.h"
 2741              		.file 18 "/usr/local/include/python3.8/object.h"
 2742              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2743              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2744              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2745              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2746              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2747              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2748              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2749              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2750              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2751              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2752              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2753              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2754              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2755              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2756              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2757              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2758              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2759              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2760              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2761              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2762              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2763              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2764              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2765              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2766              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2767              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2768              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2769              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2770              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2771              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2772              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2773              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2774              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2775              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2776              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2777              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2778              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2779              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2780              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2781              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2782              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2783              		.file 60 "/usr/local/include/python3.8/context.h"
 2784              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2785              		.file 62 "/usr/local/include/python3.8/code.h"
 2786              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2787              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2788              		.file 65 "/usr/local/include/python3.8/import.h"
 2789              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2790              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2791              		.file 68 "armwave.h"
 2792              		.file 69 "/usr/include/stdlib.h"
 2793              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 2794              		.file 71 "<built-in>"
 2795              		.file 72 "/usr/include/assert.h"
 2796              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
