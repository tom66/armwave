   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=94 --param ggc-min-heapsize=119998
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	rgb2yuv
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	rgb2yuv:
  83              	.LVL0:
  84              	.LFB57:
  85              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #ifndef NO_PYTHON
  12:armwave.c     **** #include <Python.h>
  13:armwave.c     **** #endif
  14:armwave.c     **** 
  15:armwave.c     **** #include <sys/ipc.h>
  16:armwave.c     **** #include <sys/shm.h>
  17:armwave.c     **** 
  18:armwave.c     **** #include <X11/Xlib.h>
  19:armwave.c     **** #include <X11/Xutil.h>
  20:armwave.c     **** #include <X11/extensions/XShm.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include <assert.h>
  23:armwave.c     **** #include <ctype.h>
  24:armwave.c     **** #include <stdio.h>
  25:armwave.c     **** #include <stdint.h>
  26:armwave.c     **** #include <stdlib.h>
  27:armwave.c     **** #include <stdbool.h>
  28:armwave.c     **** #include <malloc.h>
  29:armwave.c     **** #include <string.h>
  30:armwave.c     **** #include <math.h>
  31:armwave.c     **** #include <unistd.h>
  32:armwave.c     **** 
  33:armwave.c     **** #include <X11/Xlib.h>
  34:armwave.c     **** #include <X11/Xutil.h>
  35:armwave.c     **** #include <X11/Xatom.h>
  36:armwave.c     **** #include <X11/extensions/Xv.h>
  37:armwave.c     **** #include <X11/extensions/Xvlib.h>
  38:armwave.c     **** #include <X11/extensions/XShm.h>
  39:armwave.c     **** 
  40:armwave.c     **** #include <time.h>
  41:armwave.c     **** 
  42:armwave.c     **** #include "armwave.h"
  43:armwave.c     **** 
  44:armwave.c     **** #define ARMWAVE_VER  "v0.2.4"
  45:armwave.c     **** 
  46:armwave.c     **** struct armwave_state_t g_armwave_state;
  47:armwave.c     **** struct armwave_yuv_t g_yuv_lut[4][256];
  48:armwave.c     **** 
  49:armwave.c     **** const struct armwave_rgb_t g_fill_black = { 0, 0, 0 };
  50:armwave.c     **** 
  51:armwave.c     **** /*
  52:armwave.c     ****  * X11 properties.  Should these be commoned into one struct?
  53:armwave.c     ****  */ 
  54:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims;
  55:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims_last;
  56:armwave.c     **** 
  57:armwave.c     **** int g_frame_num = 0, g_n_test_waves = 8;
  58:armwave.c     **** Window g_window = 0;
  59:armwave.c     **** Display *g_dpy;
  60:armwave.c     **** int g_xv_port;
  61:armwave.c     **** XVisualInfo	g_vinfo;
  62:armwave.c     **** GC g_gc = NULL;
  63:armwave.c     **** XvImage *g_yuv_image = NULL;
  64:armwave.c     **** XShmSegmentInfo g_yuv_shminfo;
  65:armwave.c     **** XColor g_grat_colour, g_grat_subcolour; 
  66:armwave.c     **** XSetWindowAttributes g_xswa;
  67:armwave.c     ****     
  68:armwave.c     **** struct MwmHints {
  69:armwave.c     ****     unsigned long flags;
  70:armwave.c     ****     unsigned long functions;
  71:armwave.c     ****     unsigned long decorations;
  72:armwave.c     ****     long input_mode;
  73:armwave.c     ****     unsigned long status;
  74:armwave.c     **** };
  75:armwave.c     **** 
  76:armwave.c     **** enum {
  77:armwave.c     ****     MWM_HINTS_FUNCTIONS = (1L << 0),
  78:armwave.c     ****     MWM_HINTS_DECORATIONS =  (1L << 1),
  79:armwave.c     **** 
  80:armwave.c     ****     MWM_FUNC_ALL = (1L << 0),
  81:armwave.c     ****     MWM_FUNC_RESIZE = (1L << 1),
  82:armwave.c     ****     MWM_FUNC_MOVE = (1L << 2),
  83:armwave.c     ****     MWM_FUNC_MINIMIZE = (1L << 3),
  84:armwave.c     ****     MWM_FUNC_MAXIMIZE = (1L << 4),
  85:armwave.c     ****     MWM_FUNC_CLOSE = (1L << 5)
  86:armwave.c     **** };
  87:armwave.c     **** 
  88:armwave.c     **** static void plot_pixel_yuv(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  89:armwave.c     **** static void plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * Helper function to convert 8-bit RGB to 8-bit YUV values.
  93:armwave.c     ****  */
  94:armwave.c     **** void rgb2yuv(struct armwave_rgb_t *rgb_in, struct armwave_yuv_t *yuv_out)
  95:armwave.c     **** {
  86              		.loc 1 95 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
  91              		.loc 1 96 5 view .LVU1
  92              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93              		.loc 1 96 41 is_stmt 0 view .LVU2
  94 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2	@ rgb_in_32(D)->r, rgb_in_32(D)->r
  95              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96              		.loc 1 96 33 view .LVU3
  97 0004 254A9FED 		vldr.32	s8, .L3	@ tmp146,
  98              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
  99              		.loc 1 97 22 view .LVU4
 100 0008 257ADFED 		vldr.32	s15, .L3+4	@ tmp160,
 101              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 102              		.loc 1 96 22 view .LVU5
 103 000c 257A9FED 		vldr.32	s14, .L3+8	@ tmp148,
 104              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 105              		.loc 1 96 41 view .LVU6
 106 0010 103A05EE 		vmov	s10, r3	@ int	@ rgb_in_32(D)->r, rgb_in_32(D)->r
 107              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 108              		.loc 1 96 64 view .LVU7
 109 0014 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 110              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 111              		.loc 1 97 33 view .LVU8
 112 0018 236ADFED 		vldr.32	s13, .L3+12	@ tmp158,
 113              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 114              		.loc 1 97 79 view .LVU9
 115 001c 234ADFED 		vldr.32	s9, .L3+16	@ tmp165,
 116              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 117              		.loc 1 96 33 view .LVU10
 118 0020 C55AB8EE 		vcvt.f32.s32	s10, s10	@ _3, rgb_in_32(D)->r
 119              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 120              		.loc 1 96 64 view .LVU11
 121 0024 903A05EE 		vmov	s11, r3	@ int	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 122              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 123              		.loc 1 96 87 view .LVU12
 124 0028 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 125              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 126              		.loc 1 96 56 view .LVU13
 127 002c 202ADFED 		vldr.32	s5, .L3+20	@ tmp150,
 128              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 129              		.loc 1 97 56 view .LVU14
 130 0030 203A9FED 		vldr.32	s6, .L3+24	@ tmp162,
 131              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 132              		.loc 1 96 56 view .LVU15
 133 0034 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _8, rgb_in_32(D)->g
 134              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 135              		.loc 1 96 87 view .LVU16
 136 0038 103A06EE 		vmov	s12, r3	@ int	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 137              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 138              		.loc 1 98 56 view .LVU17
 139 003c 1E3ADFED 		vldr.32	s7, .L3+28	@ tmp174,
 140              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 141              		.loc 1 96 22 view .LVU18
 142 0040 047A05EE 		vmla.f32	s14, s10, s8	@ tmp147, _3, tmp146
 143              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 144              		.loc 1 97 22 view .LVU19
 145 0044 674AB0EE 		vmov.f32	s8, s15	@ tmp159, tmp160
 146              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 147              		.loc 1 96 79 view .LVU20
 148 0048 C66AB8EE 		vcvt.f32.s32	s12, s12	@ _13, rgb_in_32(D)->b
 149              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 150              		.loc 1 98 22 view .LVU21
 151 004c 247A45EE 		vmla.f32	s15, s10, s9	@ tmp171, _3, tmp165
 152              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 153              		.loc 1 97 22 view .LVU22
 154 0050 264A05EE 		vmla.f32	s8, s10, s13	@ tmp159, _3, tmp158
 155              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 156              		.loc 1 98 79 view .LVU23
 157 0054 195A9FED 		vldr.32	s10, .L3+32	@ tmp177,
 158              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 159              		.loc 1 96 46 view .LVU24
 160 0058 A27A05EE 		vmla.f32	s14, s11, s5	@ tmp151, _8, tmp150
 161              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 162              		.loc 1 98 46 view .LVU25
 163 005c E37A45EE 		vmls.f32	s15, s11, s7	@ tmp175, _8, tmp174
 164              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 165              		.loc 1 97 22 view .LVU26
 166 0060 446AF0EE 		vmov.f32	s13, s8	@ tmp159, tmp159
 167              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 168              		.loc 1 96 79 view .LVU27
 169 0064 164A9FED 		vldr.32	s8, .L3+36	@ tmp153,
 170              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 171              		.loc 1 97 46 view .LVU28
 172 0068 C36A45EE 		vmls.f32	s13, s11, s6	@ tmp163, _8, tmp162
 173              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 174              		.loc 1 96 69 view .LVU29
 175 006c 047A06EE 		vmla.f32	s14, s12, s8	@ tmp154, _13, tmp153
 176              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 177              		.loc 1 98 69 view .LVU30
 178 0070 457A46EE 		vmls.f32	s15, s12, s10	@ tmp178, _13, tmp177
 179              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 180              		.loc 1 97 69 view .LVU31
 181 0074 246A46EE 		vmla.f32	s13, s12, s9	@ tmp166, _13, tmp165
 182              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 183              		.loc 1 96 16 view .LVU32
 184 0078 C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp155, tmp154
 185              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 186              		.loc 1 98 16 view .LVU33
 187 007c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 188              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 189              		.loc 1 96 16 view .LVU34
 190 0080 102A17EE 		vmov	r2, s14	@ int	@ tmp155, tmp155
 191              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 192              		.loc 1 97 16 view .LVU35
 193 0084 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp167, tmp166
 194              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 195              		.loc 1 98 16 view .LVU36
 196 0088 903A17EE 		vmov	r3, s15	@ int	@ tmp179, tmp179
 197              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 198              		.loc 1 96 16 view .LVU37
 199 008c 0020C1E5 		strb	r2, [r1]	@ tmp155, yuv_out_33(D)->y
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 200              		.loc 1 97 5 is_stmt 1 view .LVU38
 201              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 202              		.loc 1 98 16 is_stmt 0 view .LVU39
 203 0090 0230C1E5 		strb	r3, [r1, #2]	@ tmp179, yuv_out_33(D)->v
 204              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 205              		.loc 1 97 16 view .LVU40
 206 0094 100A17EE 		vmov	r0, s14	@ int	@ tmp167, tmp167
 207              	.LVL1:
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 208              		.loc 1 97 16 view .LVU41
 209 0098 0100C1E5 		strb	r0, [r1, #1]	@ tmp167, yuv_out_33(D)->u
 210              		.loc 1 98 5 is_stmt 1 view .LVU42
 211              	@ armwave.c:99: }
  99:armwave.c     **** }
 212              		.loc 1 99 1 is_stmt 0 view .LVU43
 213 009c 1EFF2FE1 		bx	lr	@
 214              	.L4:
 215              		.align	2
 216              	.L3:
 217 00a0 6F12833E 		.word	1048777327
 218 00a4 00000043 		.word	1124073472
 219 00a8 00008041 		.word	1098907648
 220 00ac 508D17BE 		.word	-1105752752
 221 00b0 9CC4E03E 		.word	1054917788
 222 00b4 2506013F 		.word	1057031717
 223 00b8 F4FD943E 		.word	1049951732
 224 00bc 7F6ABC3E 		.word	1052535423
 225 00c0 7368913D 		.word	1032939635
 226 00c4 F0A7C63D 		.word	1036429296
 227              		.cfi_endproc
 228              	.LFE57:
 230              		.align	2
 231              		.global	hsv2rgb
 232              		.syntax unified
 233              		.arm
 234              		.fpu vfp
 236              	hsv2rgb:
 237              	.LVL2:
 238              	.LFB58:
 100:armwave.c     **** 
 101:armwave.c     **** /*
 102:armwave.c     ****  * Helper function to convert 8-bit HSV to 8-bit RGB.
 103:armwave.c     ****  *
 104:armwave.c     ****  * https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-ra
 105:armwave.c     ****  */
 106:armwave.c     **** void hsv2rgb(struct armwave_hsv_t *hsv_in, struct armwave_rgb_t *rgb_out)
 107:armwave.c     **** {
 239              		.loc 1 107 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     unsigned char region, remainder, p, q, t;
 243              		.loc 1 108 5 view .LVU45
 109:armwave.c     **** 
 110:armwave.c     ****     if (hsv_in->s == 0)
 244              		.loc 1 110 5 view .LVU46
 245              	@ armwave.c:107: {
 107:armwave.c     ****     unsigned char region, remainder, p, q, t;
 246              		.loc 1 107 1 is_stmt 0 view .LVU47
 247 00c8 30402DE9 		push	{r4, r5, lr}	@
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 252              	@ armwave.c:110:     if (hsv_in->s == 0)
 253              		.loc 1 110 15 view .LVU48
 254 00cc 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2	@ _1, hsv_in_29(D)->s
 255 00d0 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2	@ pretmp_65, hsv_in_29(D)->v
 256              	@ armwave.c:110:     if (hsv_in->s == 0)
 257              		.loc 1 110 8 view .LVU49
 258 00d4 00005EE3 		cmp	lr, #0	@ _1,
 259 00d8 2100000A 		beq	.L16		@,
 111:armwave.c     ****     {
 112:armwave.c     ****         rgb_out->r = hsv_in->v;
 113:armwave.c     ****         rgb_out->g = hsv_in->v;
 114:armwave.c     ****         rgb_out->b = hsv_in->v;
 115:armwave.c     ****         return;
 116:armwave.c     ****     }
 117:armwave.c     **** 
 118:armwave.c     ****     region = hsv_in->h / 43;
 260              		.loc 1 118 5 is_stmt 1 view .LVU50
 261              	@ armwave.c:118:     region = hsv_in->h / 43;
 262              		.loc 1 118 20 is_stmt 0 view .LVU51
 263 00dc 0040D0E5 		ldrb	r4, [r0]	@ zero_extendqisi2	@ _3, hsv_in_29(D)->h
 264              	@ armwave.c:118:     region = hsv_in->h / 43;
 265              		.loc 1 118 12 view .LVU52
 266 00e0 EC209FE5 		ldr	r2, .L17	@ tmp149,
 267              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 268              		.loc 1 119 38 view .LVU53
 269 00e4 2A30E0E3 		mvn	r3, #42	@ tmp151,
 270              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 120:armwave.c     **** 
 121:armwave.c     ****     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 271              		.loc 1 121 27 view .LVU54
 272 00e8 FF006EE2 		rsb	r0, lr, #255	@ tmp160, _1,
 273              	.LVL3:
 274              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 275              		.loc 1 118 12 view .LVU55
 276 00ec 925482E0 		umull	r5, r2, r2, r4	@ tmp192, tmp148, tmp149, _3
 277              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 278              		.loc 1 121 20 view .LVU56
 279 00f0 9C0000E0 		mul	r0, ip, r0	@ tmp161, pretmp_65, tmp160
 280              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 281              		.loc 1 118 12 view .LVU57
 282 00f4 A221A0E1 		lsr	r2, r2, #3	@ region, tmp148,
 283              	.LVL4:
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 284              		.loc 1 119 5 is_stmt 1 view .LVU58
 285              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 286              		.loc 1 119 28 is_stmt 0 view .LVU59
 287 00f8 934223E0 		mla	r3, r3, r2, r4	@ tmp152, tmp151, region, _3
 288              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 289              		.loc 1 121 41 view .LVU60
 290 00fc 4004A0E1 		asr	r0, r0, #8	@ tmp162, tmp161,
 291              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 292              		.loc 1 119 15 view .LVU61
 293 0100 833083E0 		add	r3, r3, r3, lsl #1	@ tmp157, tmp152, tmp152,
 294              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 295              		.loc 1 121 7 view .LVU62
 296 0104 7000EFE6 		uxtb	r0, r0	@ p, tmp162
 297              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 298              		.loc 1 119 15 view .LVU63
 299 0108 8330A0E1 		lsl	r3, r3, #1	@ tmp159, tmp157,
 300 010c 7330EFE6 		uxtb	r3, r3	@ remainder, tmp159
 301              	.LVL5:
 302              		.loc 1 121 5 is_stmt 1 view .LVU64
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 303              		.loc 1 122 5 view .LVU65
 304              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 305              		.loc 1 123 48 is_stmt 0 view .LVU66
 306 0110 FF4063E2 		rsb	r4, r3, #255	@ tmp168, remainder,
 307              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 308              		.loc 1 122 41 view .LVU67
 309 0114 8E0363E1 		smulbb	r3, lr, r3	@ tmp163, _1, remainder
 310              	.LVL6:
 311              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 312              		.loc 1 123 41 view .LVU68
 313 0118 9E040EE0 		mul	lr, lr, r4	@ tmp169, _1, tmp168
 314              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 315              		.loc 1 122 54 view .LVU69
 316 011c 4334A0E1 		asr	r3, r3, #8	@ tmp164, tmp163,
 317              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 318              		.loc 1 122 27 view .LVU70
 319 0120 FF3063E2 		rsb	r3, r3, #255	@ tmp165, tmp164,
 320              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 321              		.loc 1 123 62 view .LVU71
 322 0124 4EE4A0E1 		asr	lr, lr, #8	@ tmp170, tmp169,
 323              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 324              		.loc 1 123 27 view .LVU72
 325 0128 FFE06EE2 		rsb	lr, lr, #255	@ tmp171, tmp170,
 326              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 327              		.loc 1 122 20 view .LVU73
 328 012c 9C0303E0 		mul	r3, ip, r3	@ tmp166, pretmp_65, tmp165
 329              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 330              		.loc 1 123 20 view .LVU74
 331 0130 9C0E0EE0 		mul	lr, ip, lr	@ tmp172, pretmp_65, tmp171
 332              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 333              		.loc 1 122 62 view .LVU75
 334 0134 4334A0E1 		asr	r3, r3, #8	@ tmp167, tmp166,
 335              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 336              		.loc 1 123 70 view .LVU76
 337 0138 4EE4A0E1 		asr	lr, lr, #8	@ tmp173, tmp172,
 338              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 339              		.loc 1 122 7 view .LVU77
 340 013c 7330EFE6 		uxtb	r3, r3	@ q, tmp167
 341              	.LVL7:
 342              		.loc 1 123 5 is_stmt 1 view .LVU78
 343              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 344              		.loc 1 123 7 is_stmt 0 view .LVU79
 345 0140 7EE0EFE6 		uxtb	lr, lr	@ t, tmp173
 346              	.LVL8:
 124:armwave.c     **** 
 125:armwave.c     ****     switch (region)
 347              		.loc 1 125 5 is_stmt 1 view .LVU80
 348 0144 040052E3 		cmp	r2, #4	@ region,
 349 0148 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 350 014c 1C0000EA 		b	.L8	@
 351              	.L10:
 352 0150 84010000 		.word	.L14
 353 0154 94010000 		.word	.L13
 354 0158 A4010000 		.word	.L12
 355 015c B4010000 		.word	.L11
 356 0160 74010000 		.word	.L9
 357              	.LVL9:
 358              	.L16:
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 359              		.loc 1 112 9 view .LVU81
 360              	@ armwave.c:112:         rgb_out->r = hsv_in->v;
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 361              		.loc 1 112 20 is_stmt 0 view .LVU82
 362 0164 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 363              		.loc 1 113 9 is_stmt 1 view .LVU83
 364              	@ armwave.c:113:         rgb_out->g = hsv_in->v;
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 365              		.loc 1 113 20 is_stmt 0 view .LVU84
 366 0168 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 114:armwave.c     ****         return;
 367              		.loc 1 114 9 is_stmt 1 view .LVU85
 368              	@ armwave.c:114:         rgb_out->b = hsv_in->v;
 114:armwave.c     ****         return;
 369              		.loc 1 114 20 is_stmt 0 view .LVU86
 370 016c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 115:armwave.c     ****     }
 371              		.loc 1 115 9 is_stmt 1 view .LVU87
 372 0170 3080BDE8 		pop	{r4, r5, pc}	@
 373              	.LVL10:
 374              	.L9:
 126:armwave.c     ****     {
 127:armwave.c     ****         case 0:
 128:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 129:armwave.c     ****             break;
 130:armwave.c     ****         case 1:
 131:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 132:armwave.c     ****             break;
 133:armwave.c     ****         case 2:
 134:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 135:armwave.c     ****             break;
 136:armwave.c     ****         case 3:
 137:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 138:armwave.c     ****             break;
 139:armwave.c     ****         case 4:
 140:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 375              		.loc 1 140 13 view .LVU88
 376              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 377              		.loc 1 140 24 is_stmt 0 view .LVU89
 378 0174 00E0C1E5 		strb	lr, [r1]	@ t, rgb_out_30(D)->r
 379              	.LVL11:
 380              		.loc 1 140 29 is_stmt 1 view .LVU90
 381              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 382              		.loc 1 140 40 is_stmt 0 view .LVU91
 383 0178 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 384              		.loc 1 140 45 is_stmt 1 view .LVU92
 385              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 386              		.loc 1 140 56 is_stmt 0 view .LVU93
 387 017c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 141:armwave.c     ****             break;
 388              		.loc 1 141 13 is_stmt 1 view .LVU94
 389 0180 3080BDE8 		pop	{r4, r5, pc}	@
 390              	.LVL12:
 391              	.L14:
 128:armwave.c     ****             break;
 392              		.loc 1 128 13 view .LVU95
 393              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 394              		.loc 1 128 24 is_stmt 0 view .LVU96
 395 0184 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 396              	.LVL13:
 128:armwave.c     ****             break;
 397              		.loc 1 128 37 is_stmt 1 view .LVU97
 398              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 399              		.loc 1 128 48 is_stmt 0 view .LVU98
 400 0188 01E0C1E5 		strb	lr, [r1, #1]	@ t, rgb_out_30(D)->g
 128:armwave.c     ****             break;
 401              		.loc 1 128 53 is_stmt 1 view .LVU99
 402              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 403              		.loc 1 128 64 is_stmt 0 view .LVU100
 404 018c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 129:armwave.c     ****         case 1:
 405              		.loc 1 129 13 is_stmt 1 view .LVU101
 406 0190 3080BDE8 		pop	{r4, r5, pc}	@
 407              	.LVL14:
 408              	.L13:
 131:armwave.c     ****             break;
 409              		.loc 1 131 13 view .LVU102
 410              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 411              		.loc 1 131 24 is_stmt 0 view .LVU103
 412 0194 0030C1E5 		strb	r3, [r1]	@ q, rgb_out_30(D)->r
 413              	.LVL15:
 131:armwave.c     ****             break;
 414              		.loc 1 131 29 is_stmt 1 view .LVU104
 415              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 416              		.loc 1 131 40 is_stmt 0 view .LVU105
 417 0198 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 131:armwave.c     ****             break;
 418              		.loc 1 131 53 is_stmt 1 view .LVU106
 419              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 420              		.loc 1 131 64 is_stmt 0 view .LVU107
 421 019c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 132:armwave.c     ****         case 2:
 422              		.loc 1 132 13 is_stmt 1 view .LVU108
 423 01a0 3080BDE8 		pop	{r4, r5, pc}	@
 424              	.LVL16:
 425              	.L12:
 134:armwave.c     ****             break;
 426              		.loc 1 134 13 view .LVU109
 427              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 428              		.loc 1 134 24 is_stmt 0 view .LVU110
 429 01a4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 430              	.LVL17:
 134:armwave.c     ****             break;
 431              		.loc 1 134 29 is_stmt 1 view .LVU111
 432              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 433              		.loc 1 134 40 is_stmt 0 view .LVU112
 434 01a8 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 134:armwave.c     ****             break;
 435              		.loc 1 134 53 is_stmt 1 view .LVU113
 436              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 437              		.loc 1 134 64 is_stmt 0 view .LVU114
 438 01ac 02E0C1E5 		strb	lr, [r1, #2]	@ t, rgb_out_30(D)->b
 135:armwave.c     ****         case 3:
 439              		.loc 1 135 13 is_stmt 1 view .LVU115
 440 01b0 3080BDE8 		pop	{r4, r5, pc}	@
 441              	.LVL18:
 442              	.L11:
 137:armwave.c     ****             break;
 443              		.loc 1 137 13 view .LVU116
 444              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 445              		.loc 1 137 24 is_stmt 0 view .LVU117
 446 01b4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 447              	.LVL19:
 137:armwave.c     ****             break;
 448              		.loc 1 137 29 is_stmt 1 view .LVU118
 449              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 450              		.loc 1 137 40 is_stmt 0 view .LVU119
 451 01b8 0130C1E5 		strb	r3, [r1, #1]	@ q, rgb_out_30(D)->g
 137:armwave.c     ****             break;
 452              		.loc 1 137 45 is_stmt 1 view .LVU120
 453              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 454              		.loc 1 137 56 is_stmt 0 view .LVU121
 455 01bc 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 138:armwave.c     ****         case 4:
 456              		.loc 1 138 13 is_stmt 1 view .LVU122
 457 01c0 3080BDE8 		pop	{r4, r5, pc}	@
 458              	.LVL20:
 459              	.L8:
 142:armwave.c     ****         default:
 143:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 460              		.loc 1 143 13 view .LVU123
 461              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 462              		.loc 1 143 24 is_stmt 0 view .LVU124
 463 01c4 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 464              	.LVL21:
 465              		.loc 1 143 37 is_stmt 1 view .LVU125
 466              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 467              		.loc 1 143 48 is_stmt 0 view .LVU126
 468 01c8 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 469              		.loc 1 143 53 is_stmt 1 view .LVU127
 470              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 471              		.loc 1 143 64 is_stmt 0 view .LVU128
 472 01cc 0230C1E5 		strb	r3, [r1, #2]	@ q, rgb_out_30(D)->b
 144:armwave.c     ****             break;
 473              		.loc 1 144 13 is_stmt 1 view .LVU129
 474              	@ armwave.c:146: }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 475              		.loc 1 146 1 is_stmt 0 view .LVU130
 476 01d0 3080BDE8 		pop	{r4, r5, pc}	@
 477              	.L18:
 478              		.align	2
 479              	.L17:
 480 01d4 83BEA02F 		.word	799063683
 481              		.cfi_endproc
 482              	.LFE58:
 484              		.align	2
 485              		.global	fill_rgb_xvimage
 486              		.syntax unified
 487              		.arm
 488              		.fpu vfp
 490              	fill_rgb_xvimage:
 491              	.LVL22:
 492              	.LFB61:
 147:armwave.c     **** 
 148:armwave.c     **** /*
 149:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.
 150:armwave.c     ****  */
 151:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv(XvImage *img, int x, int y, struct armwav
 152:armwave.c     **** {
 153:armwave.c     ****     int uv_base = img->width * img->height;
 154:armwave.c     ****     
 155:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 156:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 157:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 158:armwave.c     **** }
 159:armwave.c     **** 
 160:armwave.c     **** /*
 161:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.  Does not write
 162:armwave.c     ****  * U/V values if x or y are odd.
 163:armwave.c     ****  */
 164:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct 
 165:armwave.c     **** {
 166:armwave.c     ****     int uv_base = img->width * img->height;
 167:armwave.c     ****     
 168:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 169:armwave.c     ****     
 170:armwave.c     ****     if(!(x & 1) && !(y & 1)) {
 171:armwave.c     ****         img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 172:armwave.c     ****         img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 173:armwave.c     ****     }
 174:armwave.c     **** }
 175:armwave.c     **** 
 176:armwave.c     **** /*
 177:armwave.c     ****  * Fill an XvImage canvas with an RGB value.
 178:armwave.c     ****  */
 179:armwave.c     **** void fill_rgb_xvimage(XvImage *img, struct armwave_rgb_t *rgb)
 180:armwave.c     **** {
 493              		.loc 1 180 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 181:armwave.c     ****     struct armwave_yuv_t yuv;
 497              		.loc 1 181 5 view .LVU132
 182:armwave.c     ****     
 183:armwave.c     ****     // Compute the Y, U and V values, then use memset to block write them
 184:armwave.c     ****     rgb2yuv(rgb, &yuv);
 498              		.loc 1 184 5 view .LVU133
 499              	.LBB8:
 500              	.LBI8:
  94:armwave.c     **** {
 501              		.loc 1 94 6 view .LVU134
 502              	.LBB9:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 503              		.loc 1 96 5 view .LVU135
 504              	.LBE9:
 505              	.LBE8:
 506              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 507              		.loc 1 180 1 is_stmt 0 view .LVU136
 508 01d8 10402DE9 		push	{r4, lr}	@
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 01dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 80, -32
 515              		.cfi_offset 81, -28
 516              		.cfi_offset 82, -24
 517              		.cfi_offset 83, -20
 518              		.cfi_offset 84, -16
 519              		.cfi_offset 85, -12
 520              	.LBB26:
 521              	.LBB10:
 522              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 523              		.loc 1 96 33 view .LVU137
 524 01e0 476A9FED 		vldr.32	s12, .L21	@ tmp204,
 525              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 526              		.loc 1 96 22 view .LVU138
 527 01e4 477ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 528              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 529              		.loc 1 96 56 view .LVU139
 530 01e8 476ADFED 		vldr.32	s13, .L21+8	@ tmp208,
 531              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 532              		.loc 1 96 41 view .LVU140
 533 01ec 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2	@ rgb_39(D)->r, rgb_39(D)->r
 534              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 535              		.loc 1 96 79 view .LVU141
 536 01f0 467A9FED 		vldr.32	s14, .L21+12	@ tmp211,
 537              	.LBE10:
 538              	.LBE26:
 539              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 540              		.loc 1 180 1 view .LVU142
 541 01f4 08D04DE2 		sub	sp, sp, #8	@,,
 542              		.cfi_def_cfa_offset 40
 543              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 185:armwave.c     ****     
 186:armwave.c     ****     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 544              		.loc 1 186 36 view .LVU143
 545 01f8 182090E5 		ldr	r2, [r0, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 546              	.LBB27:
 547              	.LBB11:
 548              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 549              		.loc 1 96 41 view .LVU144
 550 01fc 903A09EE 		vmov	s19, r3	@ int	@ rgb_39(D)->r, rgb_39(D)->r
 551              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 552              		.loc 1 96 64 view .LVU145
 553 0200 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ rgb_39(D)->g, rgb_39(D)->g
 554              	.LBE11:
 555              	.LBE27:
 556              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 557              		.loc 1 180 1 view .LVU146
 558 0204 0040A0E1 		mov	r4, r0	@ img, img
 559              	.LBB28:
 560              	.LBB12:
 561              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 562              		.loc 1 98 22 view .LVU147
 563 0208 418A9FED 		vldr.32	s16, .L21+16	@ tmp257,
 564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 565              		.loc 1 96 33 view .LVU148
 566 020c E99AF8EE 		vcvt.f32.s32	s19, s19	@ _48, rgb_39(D)->r
 567              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 568              		.loc 1 96 64 view .LVU149
 569 0210 103A09EE 		vmov	s18, r3	@ int	@ rgb_39(D)->g, rgb_39(D)->g
 570              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 571              		.loc 1 96 87 view .LVU150
 572 0214 0230D1E5 		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ rgb_39(D)->b, rgb_39(D)->b
 573              	.LBE12:
 574              	.LBE28:
 575              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 576              		.loc 1 186 22 view .LVU151
 577 0218 001092E5 		ldr	r1, [r2]	@ *_2, *_2
 578              	.LVL23:
 579              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 580              		.loc 1 186 59 view .LVU152
 581 021c 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 582              	.LBB29:
 583              	.LBB13:
 584              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 585              		.loc 1 96 56 view .LVU153
 586 0220 C99AB8EE 		vcvt.f32.s32	s18, s18	@ _53, rgb_39(D)->g
 587              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 588              		.loc 1 96 87 view .LVU154
 589 0224 903A08EE 		vmov	s17, r3	@ int	@ rgb_39(D)->b, rgb_39(D)->b
 590              	.LBE13:
 591              	.LBE29:
 592              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 593              		.loc 1 186 59 view .LVU155
 594 0228 043090E5 		ldr	r3, [r0, #4]	@ img_41(D)->width, img_41(D)->width
 595              	.LBB30:
 596              	.LBB14:
 597              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 598              		.loc 1 96 22 view .LVU156
 599 022c 867A49EE 		vmla.f32	s15, s19, s12	@ tmp205, _48, tmp204
 600              	.LBE14:
 601              	.LBE30:
 602              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 603              		.loc 1 186 22 view .LVU157
 604 0230 1C0090E5 		ldr	r0, [r0, #28]	@ img_41(D)->data, img_41(D)->data
 605              	.LVL24:
 606              	.LBB31:
 607              	.LBB15:
 608              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 609              		.loc 1 96 79 view .LVU158
 610 0234 E88AF8EE 		vcvt.f32.s32	s17, s17	@ _58, rgb_39(D)->b
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 611              		.loc 1 97 5 is_stmt 1 view .LVU159
  98:armwave.c     **** }
 612              		.loc 1 98 5 view .LVU160
 613              	.LVL25:
  98:armwave.c     **** }
 614              		.loc 1 98 5 is_stmt 0 view .LVU161
 615              	.LBE15:
 616              	.LBE31:
 617              		.loc 1 186 5 is_stmt 1 view .LVU162
 618 0238 920302E0 		mul	r2, r2, r3	@, img_41(D)->height, img_41(D)->width
 619              	.LBB32:
 620              	.LBB16:
 621              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 622              		.loc 1 98 33 is_stmt 0 view .LVU163
 623 023c 35AA9FED 		vldr.32	s20, .L21+20	@ tmp255,
 624              	.LBE16:
 625              	.LBE32:
 626              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 627              		.loc 1 186 5 view .LVU164
 628 0240 010080E0 		add	r0, r0, r1	@, img_41(D)->data, *_2
 629              	.LBB33:
 630              	.LBB17:
 631              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 632              		.loc 1 96 46 view .LVU165
 633 0244 267A49EE 		vmla.f32	s15, s18, s13	@ tmp209, _53, tmp208
 634              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 635              		.loc 1 96 69 view .LVU166
 636 0248 877A48EE 		vmla.f32	s15, s17, s14	@ tmp212, _58, tmp211
 637              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 638              		.loc 1 96 16 view .LVU167
 639 024c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp212
 640 0250 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp214, %sfp
 641              	.LBE17:
 642              	.LBE33:
 643              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 644              		.loc 1 186 5 view .LVU168
 645 0254 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 646 0258 FEFFFFEB 		bl	memset		@
 647              	.LVL26:
 187:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 648              		.loc 1 187 5 is_stmt 1 view .LVU169
 649              	.LBB34:
 650              	.LBB18:
 651              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 652              		.loc 1 98 22 is_stmt 0 view .LVU170
 653 025c 487AF0EE 		vmov.f32	s15, s16	@ tmp256, tmp257
 654              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 655              		.loc 1 98 56 view .LVU171
 656 0260 2D6ADFED 		vldr.32	s13, .L21+24	@ tmp259,
 657              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 658              		.loc 1 98 79 view .LVU172
 659 0264 2D7A9FED 		vldr.32	s14, .L21+28	@ tmp262,
 660              	.LBE18:
 661              	.LBE34:
 662              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 663              		.loc 1 187 61 view .LVU173
 664 0268 141094E5 		ldr	r1, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 665              	.LBB35:
 666              	.LBB19:
 667              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 668              		.loc 1 98 22 view .LVU174
 669 026c 8A7A49EE 		vmla.f32	s15, s19, s20	@ tmp256, _48, tmp255
 670              	.LBE19:
 671              	.LBE35:
 672              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 673              		.loc 1 187 65 view .LVU175
 674 0270 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 675 0274 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_19 + 4B], MEM[(int *)_19 + 4B]
 676              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 677              		.loc 1 187 36 view .LVU176
 678 0278 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 679              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 680              		.loc 1 187 22 view .LVU177
 681 027c 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 682              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 683              		.loc 1 187 65 view .LVU178
 684 0280 920102E0 		mul	r2, r2, r1	@ tmp247, img_41(D)->height, MEM[(int *)_19 + 4B]
 685              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 686              		.loc 1 187 22 view .LVU179
 687 0284 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_13 + 4B], MEM[(int *)_13 + 4B]
 688              	.LBB36:
 689              	.LBB20:
 690              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 691              		.loc 1 98 46 view .LVU180
 692 0288 667A49EE 		vmls.f32	s15, s18, s13	@ tmp260, _53, tmp259
 693              	.LBE20:
 694              	.LBE36:
 695              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 696              		.loc 1 187 80 view .LVU181
 697 028c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp252, tmp247, tmp247,
 698              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 699              		.loc 1 187 5 view .LVU182
 700 0290 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_13 + 4B]
 701 0294 C220A0E1 		asr	r2, r2, #1	@, tmp252,
 702              	.LBB37:
 703              	.LBB21:
 704              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 705              		.loc 1 98 69 view .LVU183
 706 0298 C77A48EE 		vmls.f32	s15, s17, s14	@ tmp263, _58, tmp262
 707              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 708              		.loc 1 98 16 view .LVU184
 709 029c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp265, tmp263
 710 02a0 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp265, %sfp
 711              	.LBE21:
 712              	.LBE37:
 713              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 714              		.loc 1 187 5 view .LVU185
 715 02a4 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 716 02a8 FEFFFFEB 		bl	memset		@
 717              	.LVL27:
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 718              		.loc 1 188 5 is_stmt 1 view .LVU186
 719              	.LBB38:
 720              	.LBB22:
 721              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 722              		.loc 1 97 33 is_stmt 0 view .LVU187
 723 02ac 1C7A9FED 		vldr.32	s14, .L21+32	@ tmp306,
 724              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 725              		.loc 1 97 56 view .LVU188
 726 02b0 1C7ADFED 		vldr.32	s15, .L21+36	@ tmp310,
 727              	.LBE22:
 728              	.LBE38:
 729              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 730              		.loc 1 188 61 view .LVU189
 731 02b4 143094E5 		ldr	r3, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 732              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 733              		.loc 1 188 65 view .LVU190
 734 02b8 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 735              	.LBB39:
 736              	.LBB23:
 737              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 738              		.loc 1 97 22 view .LVU191
 739 02bc 878A09EE 		vmla.f32	s16, s19, s14	@ tmp307, _48, tmp306
 740              	.LBE23:
 741              	.LBE39:
 742              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 743              		.loc 1 188 65 view .LVU192
 744 02c0 081093E5 		ldr	r1, [r3, #8]	@ MEM[(int *)_32 + 8B], MEM[(int *)_32 + 8B]
 745              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 746              		.loc 1 188 36 view .LVU193
 747 02c4 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 748              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 749              		.loc 1 188 22 view .LVU194
 750 02c8 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 751              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 752              		.loc 1 188 65 view .LVU195
 753 02cc 920102E0 		mul	r2, r2, r1	@ tmp298, img_41(D)->height, MEM[(int *)_32 + 8B]
 754              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 755              		.loc 1 188 22 view .LVU196
 756 02d0 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_26 + 8B], MEM[(int *)_26 + 8B]
 757              	.LBB40:
 758              	.LBB24:
 759              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 760              		.loc 1 97 46 view .LVU197
 761 02d4 678A09EE 		vmls.f32	s16, s18, s15	@ tmp311, _53, tmp310
 762              	.LBE24:
 763              	.LBE40:
 764              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 765              		.loc 1 188 80 view .LVU198
 766 02d8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp303, tmp298, tmp298,
 767              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 768              		.loc 1 188 5 view .LVU199
 769 02dc 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_26 + 8B]
 770 02e0 C220A0E1 		asr	r2, r2, #1	@, tmp303,
 771              	.LBB41:
 772              	.LBB25:
 773              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 774              		.loc 1 97 69 view .LVU200
 775 02e4 8A8A08EE 		vmla.f32	s16, s17, s20	@ tmp314, _58, tmp255
 776              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 777              		.loc 1 97 16 view .LVU201
 778 02e8 C87AFCEE 		vcvt.u32.f32	s15, s16	@ tmp316, tmp314
 779 02ec 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp316, %sfp
 780              	.LBE25:
 781              	.LBE41:
 782              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 783              		.loc 1 188 5 view .LVU202
 784 02f0 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 785              	@ armwave.c:189: }
 189:armwave.c     **** }
 786              		.loc 1 189 1 view .LVU203
 787 02f4 08D08DE2 		add	sp, sp, #8	@,,
 788              		.cfi_def_cfa_offset 32
 789              		@ sp needed	@
 790 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 791              		.cfi_restore 84
 792              		.cfi_restore 85
 793              		.cfi_restore 82
 794              		.cfi_restore 83
 795              		.cfi_restore 80
 796              		.cfi_restore 81
 797              		.cfi_def_cfa_offset 8
 798 02fc 1040BDE8 		pop	{r4, lr}	@
 799              		.cfi_restore 14
 800              		.cfi_restore 4
 801              		.cfi_def_cfa_offset 0
 802              	.LVL28:
 803              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 804              		.loc 1 188 5 view .LVU204
 805 0300 FEFFFFEA 		b	memset		@
 806              	.LVL29:
 807              	.L22:
 808              		.align	2
 809              	.L21:
 810 0304 6F12833E 		.word	1048777327
 811 0308 00008041 		.word	1098907648
 812 030c 2506013F 		.word	1057031717
 813 0310 F0A7C63D 		.word	1036429296
 814 0314 00000043 		.word	1124073472
 815 0318 9CC4E03E 		.word	1054917788
 816 031c 7F6ABC3E 		.word	1052535423
 817 0320 7368913D 		.word	1032939635
 818 0324 508D17BE 		.word	-1105752752
 819 0328 F4FD943E 		.word	1049951732
 820              		.cfi_endproc
 821              	.LFE61:
 823              		.align	2
 824              		.global	armwave_prep_yuv_palette
 825              		.syntax unified
 826              		.arm
 827              		.fpu vfp
 829              	armwave_prep_yuv_palette:
 830              	.LVL30:
 831              	.LFB62:
 190:armwave.c     **** 
 191:armwave.c     **** /*
 192:armwave.c     ****  * Prepare the YUV table for a given range of intensities.
 193:armwave.c     ****  *
 194:armwave.c     ****  * This can be used to generate different palettes. Right now only
 195:armwave.c     ****  * the default palette '0' is supported which is linear intensity with
 196:armwave.c     ****  * given trace colour.
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_prep_yuv_palette(int ch, int palette, struct armwave_color_mix_t *color0, struct armwa
 199:armwave.c     **** {
 832              		.loc 1 199 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     int v;
 836              		.loc 1 200 5 view .LVU206
 201:armwave.c     ****     float h;
 837              		.loc 1 201 5 view .LVU207
 202:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 838              		.loc 1 202 5 view .LVU208
 203:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 839              		.loc 1 203 5 view .LVU209
 204:armwave.c     ****     
 205:armwave.c     ****     if(ch < 0 || ch > 3) {
 840              		.loc 1 205 5 view .LVU210
 841              	@ armwave.c:205:     if(ch < 0 || ch > 3) {
 842              		.loc 1 205 7 is_stmt 0 view .LVU211
 843 032c 030050E3 		cmp	r0, #3	@ ch,
 844 0330 0B00008A 		bhi	.L47		@,
 206:armwave.c     ****         printf("armwave: error: palette channel out of range %d\n", ch);
 207:armwave.c     ****         return;
 208:armwave.c     ****     }
 209:armwave.c     ****     
 210:armwave.c     ****     switch(palette) {
 845              		.loc 1 210 5 is_stmt 1 view .LVU212
 846              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 847              		.loc 1 199 1 is_stmt 0 view .LVU213
 848 0334 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 849              		.cfi_def_cfa_offset 24
 850              		.cfi_offset 4, -24
 851              		.cfi_offset 5, -20
 852              		.cfi_offset 6, -16
 853              		.cfi_offset 7, -12
 854              		.cfi_offset 8, -8
 855              		.cfi_offset 14, -4
 856 0338 028B2DED 		vpush.64	{d8}	@
 857              		.cfi_def_cfa_offset 32
 858              		.cfi_offset 80, -32
 859              		.cfi_offset 81, -28
 860              	@ armwave.c:210:     switch(palette) {
 861              		.loc 1 210 5 view .LVU214
 862 033c 010051E3 		cmp	r1, #1	@ palette,
 863              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 864              		.loc 1 199 1 view .LVU215
 865 0340 08D04DE2 		sub	sp, sp, #8	@,,
 866              		.cfi_def_cfa_offset 40
 867              	@ armwave.c:210:     switch(palette) {
 868              		.loc 1 210 5 view .LVU216
 869 0344 5100000A 		beq	.L25		@,
 870 0348 020051E3 		cmp	r1, #2	@ palette,
 871 034c 9800000A 		beq	.L26		@,
 872 0350 000051E3 		cmp	r1, #0	@ palette,
 873 0354 0500000A 		beq	.L48		@,
 874              	@ armwave.c:255: }
 211:armwave.c     ****         case PLT_SINGLE_COLOUR:
 212:armwave.c     ****             for(v = 0; v < 256; v++) {
 213:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 214:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 215:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 216:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 217:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[ch][v]); 
 218:armwave.c     ****             }
 219:armwave.c     ****             break;
 220:armwave.c     ****         
 221:armwave.c     ****         case PLT_INVERT_SINGLE_COLOUR:
 222:armwave.c     ****             for(v = 0; v < 256; v++) {
 223:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 224:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 225:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 226:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 227:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[ch][255 - v]); 
 228:armwave.c     ****             }
 229:armwave.c     ****             break;
 230:armwave.c     ****         
 231:armwave.c     ****         case PLT_RAINBOW_THERMAL:
 232:armwave.c     ****             for(v = 0; v < 256; v++) {
 233:armwave.c     ****                 hsv_temp.h = v;
 234:armwave.c     ****                 hsv_temp.s = 255;
 235:armwave.c     ****                 
 236:armwave.c     ****                 if(v < 20) {
 237:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 238:armwave.c     ****                 } else {
 239:armwave.c     ****                     hsv_temp.v = 255;
 240:armwave.c     ****                 }
 241:armwave.c     ****                 
 242:armwave.c     ****                 hsv2rgb(&hsv_temp, &rgb_temp);
 243:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[ch][v]); 
 244:armwave.c     ****                 
 245:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h, hsv_temp.s, h
 246:armwave.c     ****             }
 247:armwave.c     ****             break;
 248:armwave.c     ****     }
 249:armwave.c     ****     
 250:armwave.c     ****     /*
 251:armwave.c     ****     for(v = 0; v < 256; v++) {
 252:armwave.c     ****         printf("%3d = (%3d, %3d, %3d) ch%d\n", v, g_yuv_lut[ch][v].y, g_yuv_lut[ch][v].u, g_yuv_lut
 253:armwave.c     ****     }
 254:armwave.c     ****     */
 255:armwave.c     **** }
 875              		.loc 1 255 1 view .LVU217
 876 0358 08D08DE2 		add	sp, sp, #8	@,,
 877              		.cfi_def_cfa_offset 32
 878              		@ sp needed	@
 879 035c 028BBDEC 		vldm	sp!, {d8}	@
 880              		.cfi_restore 80
 881              		.cfi_restore 81
 882              		.cfi_def_cfa_offset 24
 883 0360 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 884              	.L47:
 885              		.cfi_def_cfa_offset 0
 886              		.cfi_restore 4
 887              		.cfi_restore 5
 888              		.cfi_restore 6
 889              		.cfi_restore 7
 890              		.cfi_restore 8
 891              		.cfi_restore 14
 206:armwave.c     ****         return;
 892              		.loc 1 206 9 is_stmt 1 view .LVU218
 893 0364 0010A0E1 		mov	r1, r0	@, ch
 894              	.LVL31:
 206:armwave.c     ****         return;
 895              		.loc 1 206 9 is_stmt 0 view .LVU219
 896 0368 18049FE5 		ldr	r0, .L49+48	@,
 897              	.LVL32:
 206:armwave.c     ****         return;
 898              		.loc 1 206 9 view .LVU220
 899 036c FEFFFFEA 		b	printf		@
 900              	.LVL33:
 901              	.L48:
 902              		.cfi_def_cfa_offset 40
 903              		.cfi_offset 4, -24
 904              		.cfi_offset 5, -20
 905              		.cfi_offset 6, -16
 906              		.cfi_offset 7, -12
 907              		.cfi_offset 8, -8
 908              		.cfi_offset 14, -4
 909              		.cfi_offset 80, -32
 910              		.cfi_offset 81, -28
 206:armwave.c     ****         return;
 911              		.loc 1 206 9 view .LVU221
 912 0370 14C49FE5 		ldr	ip, .L49+52	@ tmp305,
 913 0374 800080E0 		add	r0, r0, r0, lsl #1	@ tmp303, ch, ch,
 914              	.LVL34:
 206:armwave.c     ****         return;
 915              		.loc 1 206 9 view .LVU222
 916 0378 F070D2E1 		ldrsh	r7, [r2]	@ _19, color0_61(D)->r
 917 037c F260D2E1 		ldrsh	r6, [r2, #2]	@ _38, color0_61(D)->g
 918 0380 F450D2E1 		ldrsh	r5, [r2, #4]	@ _595, color0_61(D)->b
 919              	.LBB50:
 920              	.LBB51:
 921              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 922              		.loc 1 96 33 view .LVU223
 923 0384 F30ADFED 		vldr.32	s1, .L49	@ tmp315,
 924              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 925              		.loc 1 96 22 view .LVU224
 926 0388 F31A9FED 		vldr.32	s2, .L49+4	@ tmp317,
 927              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 928              		.loc 1 96 56 view .LVU225
 929 038c F31ADFED 		vldr.32	s3, .L49+8	@ tmp319,
 930              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 931              		.loc 1 96 79 view .LVU226
 932 0390 F32A9FED 		vldr.32	s4, .L49+12	@ tmp322,
 933              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 934              		.loc 1 97 33 view .LVU227
 935 0394 F32ADFED 		vldr.32	s5, .L49+16	@ tmp327,
 936              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 937              		.loc 1 97 22 view .LVU228
 938 0398 F34ADFED 		vldr.32	s9, .L49+20	@ tmp329,
 939              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 940              		.loc 1 97 56 view .LVU229
 941 039c F33A9FED 		vldr.32	s6, .L49+24	@ tmp331,
 942              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 943              		.loc 1 97 79 view .LVU230
 944 03a0 F35A9FED 		vldr.32	s10, .L49+28	@ tmp334,
 945              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 946              		.loc 1 98 56 view .LVU231
 947 03a4 F33ADFED 		vldr.32	s7, .L49+32	@ tmp343,
 948 03a8 0034A0E1 		lsl	r3, r0, #8	@ tmp304, tmp303,
 949              	.LVL35:
  98:armwave.c     **** }
 950              		.loc 1 98 56 view .LVU232
 951 03ac 034C8CE2 		add	r4, ip, #768	@ tmp306, tmp305,
 952 03b0 0C0083E0 		add	r0, r3, ip	@ ivtmp.142, tmp304, tmp305
 953 03b4 034084E0 		add	r4, r4, r3	@ _581, tmp306, tmp304
 954              	.LBE51:
 955              	.LBE50:
 956              	@ armwave.c:215:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 957              		.loc 1 215 30 view .LVU233
 958 03b8 01E0A0E1 		mov	lr, r1	@ ivtmp.140, ivtmp.141
 959 03bc 01C0A0E1 		mov	ip, r1	@ ivtmp.139, ivtmp.141
 960              	.LVL36:
 961              	.L28:
 213:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 962              		.loc 1 213 17 is_stmt 1 discriminator 3 view .LVU234
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 963              		.loc 1 214 17 discriminator 3 view .LVU235
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 964              		.loc 1 215 17 discriminator 3 view .LVU236
 217:armwave.c     ****             }
 965              		.loc 1 217 17 discriminator 3 view .LVU237
 966              	.LBB58:
 967              	.LBI50:
  94:armwave.c     **** {
 968              		.loc 1 94 6 discriminator 3 view .LVU238
 969              	.LBB52:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 970              		.loc 1 96 5 discriminator 3 view .LVU239
 971              	.LBE52:
 972              	.LBE58:
 973              	@ armwave.c:213:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 213:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 974              		.loc 1 213 30 is_stmt 0 discriminator 3 view .LVU240
 975 03c0 4C34A0E1 		asr	r3, ip, #8	@ tmp308, ivtmp.139,
 976 03c4 FF0053E3 		cmp	r3, #255	@ tmp308,
 977 03c8 FF30A0A3 		movge	r3, #255	@ tmp308,
 978              	@ armwave.c:214:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 979              		.loc 1 214 30 discriminator 3 view .LVU241
 980 03cc 4E24A0E1 		asr	r2, lr, #8	@ tmp310, ivtmp.140,
 981              	.LBB59:
 982              	.LBB53:
 983              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 984              		.loc 1 96 33 discriminator 3 view .LVU242
 985 03d0 7330EFE6 		uxtb	r3, r3	@ tmp309, tmp308
 986              	.LBE53:
 987              	.LBE59:
 988              	@ armwave.c:214:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 989              		.loc 1 214 30 discriminator 3 view .LVU243
 990 03d4 FF0052E3 		cmp	r2, #255	@ tmp310,
 991              	.LBB60:
 992              	.LBB54:
 993              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 994              		.loc 1 96 33 discriminator 3 view .LVU244
 995 03d8 903A07EE 		vmov	s15, r3	@ int	@ tmp309, tmp309
 996              	.LBE54:
 997              	.LBE60:
 998              	@ armwave.c:214:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 999              		.loc 1 214 30 discriminator 3 view .LVU245
 1000 03dc FF20A0A3 		movge	r2, #255	@ tmp310,
 1001              	.LBB61:
 1002              	.LBB55:
 1003              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1004              		.loc 1 97 22 discriminator 3 view .LVU246
 1005 03e0 646AF0EE 		vmov.f32	s13, s9	@ tmp328, tmp329
 1006              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1007              		.loc 1 96 56 discriminator 3 view .LVU247
 1008 03e4 7220EFE6 		uxtb	r2, r2	@ tmp311, tmp310
 1009              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1010              		.loc 1 96 33 discriminator 3 view .LVU248
 1011 03e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _83, tmp309
 1012              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1013              		.loc 1 96 56 discriminator 3 view .LVU249
 1014 03ec 102A07EE 		vmov	s14, r2	@ int	@ tmp311, tmp311
 1015              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1016              		.loc 1 96 22 discriminator 3 view .LVU250
 1017 03f0 415AF0EE 		vmov.f32	s11, s2	@ tmp316, tmp317
 1018              	.LBE55:
 1019              	.LBE61:
 1020              	@ armwave.c:215:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1021              		.loc 1 215 30 discriminator 3 view .LVU251
 1022 03f4 4134A0E1 		asr	r3, r1, #8	@ tmp312, ivtmp.141,
 1023 03f8 FF0053E3 		cmp	r3, #255	@ tmp312,
 1024              	.LBB62:
 1025              	.LBB56:
 1026              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1027              		.loc 1 96 56 discriminator 3 view .LVU252
 1028 03fc C77AB8EE 		vcvt.f32.s32	s14, s14	@ _88, tmp311
 1029              	.LBE56:
 1030              	.LBE62:
 1031              	@ armwave.c:215:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1032              		.loc 1 215 30 discriminator 3 view .LVU253
 1033 0400 FF30A0A3 		movge	r3, #255	@ tmp312,
 1034              	.LBB63:
 1035              	.LBB57:
 1036              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1037              		.loc 1 98 22 discriminator 3 view .LVU254
 1038 0404 646AB0EE 		vmov.f32	s12, s9	@ tmp340, tmp329
 1039              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1040              		.loc 1 97 22 discriminator 3 view .LVU255
 1041 0408 A26A47EE 		vmla.f32	s13, s15, s5	@ tmp328, _83, tmp327
 1042              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1043              		.loc 1 96 22 discriminator 3 view .LVU256
 1044 040c A05A47EE 		vmla.f32	s11, s15, s1	@ tmp316, _83, tmp315
 1045              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1046              		.loc 1 96 79 discriminator 3 view .LVU257
 1047 0410 7330EFE6 		uxtb	r3, r3	@ tmp313, tmp312
 1048              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1049              		.loc 1 98 22 discriminator 3 view .LVU258
 1050 0414 856A07EE 		vmla.f32	s12, s15, s10	@ tmp340, _83, tmp334
 1051              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1052              		.loc 1 96 79 discriminator 3 view .LVU259
 1053 0418 903A07EE 		vmov	s15, r3	@ int	@ tmp313, tmp313
 1054              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1055              		.loc 1 98 79 discriminator 3 view .LVU260
 1056 041c DE4A9FED 		vldr.32	s8, .L49+68	@ tmp346,
 1057 0420 030080E2 		add	r0, r0, #3	@ ivtmp.142, ivtmp.142,
 1058 0424 07C08CE0 		add	ip, ip, r7	@ ivtmp.139, ivtmp.139, _19
 1059              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1060              		.loc 1 97 46 discriminator 3 view .LVU261
 1061 0428 436A47EE 		vmls.f32	s13, s14, s6	@ tmp328, _88, tmp331
 1062              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1063              		.loc 1 96 79 discriminator 3 view .LVU262
 1064 042c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _93, tmp313
 1065              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1066              		.loc 1 96 46 discriminator 3 view .LVU263
 1067 0430 215A47EE 		vmla.f32	s11, s14, s3	@ tmp320, _88, tmp319
 1068              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1069              		.loc 1 98 46 discriminator 3 view .LVU264
 1070 0434 636A07EE 		vmls.f32	s12, s14, s7	@ tmp344, _88, tmp343
 1071 0438 06E08EE0 		add	lr, lr, r6	@ ivtmp.140, ivtmp.140, _38
 1072 043c 051081E0 		add	r1, r1, r5	@ ivtmp.141, ivtmp.141, _595
 1073              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1074              		.loc 1 97 46 discriminator 3 view .LVU265
 1075 0440 667AB0EE 		vmov.f32	s14, s13	@ tmp332, tmp328
 1076              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1077              		.loc 1 96 69 discriminator 3 view .LVU266
 1078 0444 825A47EE 		vmla.f32	s11, s15, s4	@ tmp323, _93, tmp322
 1079              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1080              		.loc 1 98 69 discriminator 3 view .LVU267
 1081 0448 466AF0EE 		vmov.f32	s13, s12	@ tmp344, tmp344
 1082              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1083              		.loc 1 97 69 discriminator 3 view .LVU268
 1084 044c 857A07EE 		vmla.f32	s14, s15, s10	@ tmp332, _93, tmp334
 1085              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1086              		.loc 1 98 69 discriminator 3 view .LVU269
 1087 0450 C46A47EE 		vmls.f32	s13, s15, s8	@ tmp344, _93, tmp346
 1088              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1089              		.loc 1 97 69 discriminator 3 view .LVU270
 1090 0454 477AF0EE 		vmov.f32	s15, s14	@ tmp335, tmp332
 1091              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1092              		.loc 1 96 16 discriminator 3 view .LVU271
 1093 0458 E57ABCEE 		vcvt.u32.f32	s14, s11	@ tmp324, tmp323
 1094              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1095              		.loc 1 97 16 discriminator 3 view .LVU272
 1096 045c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp336, tmp335
 1097              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1098              		.loc 1 96 16 discriminator 3 view .LVU273
 1099 0460 108A17EE 		vmov	r8, s14	@ int	@ tmp324, tmp324
 1100              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1101              		.loc 1 98 16 discriminator 3 view .LVU274
 1102 0464 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp348, tmp347
 1103              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1104              		.loc 1 97 16 discriminator 3 view .LVU275
 1105 0468 903A17EE 		vmov	r3, s15	@ int	@ tmp336, tmp336
 1106              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1107              		.loc 1 96 16 discriminator 3 view .LVU276
 1108 046c 038040E5 		strb	r8, [r0, #-3]	@ tmp324, MEM[base: _588, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1109              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU277
 1110              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1111              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU278
 1112 0470 023040E5 		strb	r3, [r0, #-2]	@ tmp336, MEM[base: _588, offset: 1B]
  98:armwave.c     **** }
 1113              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU279
 1114              	.LVL37:
 1115              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1116              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU280
 1117 0474 102A17EE 		vmov	r2, s14	@ int	@ tmp348, tmp348
 1118 0478 012040E5 		strb	r2, [r0, #-1]	@ tmp348, MEM[base: _588, offset: 2B]
 1119              	.LBE57:
 1120              	.LBE63:
 1121              	@ armwave.c:212:             for(v = 0; v < 256; v++) {
 212:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1122              		.loc 1 212 13 discriminator 3 view .LVU281
 1123 047c 000054E1 		cmp	r4, r0	@ _581, ivtmp.142
 1124 0480 CEFFFF1A 		bne	.L28		@,
 1125              	@ armwave.c:255: }
 1126              		.loc 1 255 1 view .LVU282
 1127 0484 08D08DE2 		add	sp, sp, #8	@,,
 1128              		.cfi_remember_state
 1129              		.cfi_def_cfa_offset 32
 1130              		@ sp needed	@
 1131 0488 028BBDEC 		vldm	sp!, {d8}	@
 1132              		.cfi_restore 80
 1133              		.cfi_restore 81
 1134              		.cfi_def_cfa_offset 24
 1135 048c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1136              	.LVL38:
 1137              	.L25:
 1138              		.cfi_restore_state
 1139              		.loc 1 255 1 view .LVU283
 1140 0490 800080E0 		add	r0, r0, r0, lsl #1	@ tmp352, ch, ch,
 1141              	.LVL39:
 1142              		.loc 1 255 1 view .LVU284
 1143 0494 F0129FE5 		ldr	r1, .L49+52	@ tmp354,
 1144              	.LVL40:
 1145              		.loc 1 255 1 view .LVU285
 1146 0498 F070D2E1 		ldrsh	r7, [r2]	@ _578, color0_61(D)->r
 1147 049c F260D2E1 		ldrsh	r6, [r2, #2]	@ _575, color0_61(D)->g
 1148 04a0 F450D2E1 		ldrsh	r5, [r2, #4]	@ _572, color0_61(D)->b
 1149              	.LBB64:
 1150              	.LBB65:
 1151              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1152              		.loc 1 96 33 view .LVU286
 1153 04a4 AB0ADFED 		vldr.32	s1, .L49	@ tmp364,
 1154              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1155              		.loc 1 96 22 view .LVU287
 1156 04a8 AB1A9FED 		vldr.32	s2, .L49+4	@ tmp366,
 1157              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1158              		.loc 1 96 56 view .LVU288
 1159 04ac AB1ADFED 		vldr.32	s3, .L49+8	@ tmp368,
 1160              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1161              		.loc 1 96 79 view .LVU289
 1162 04b0 AB2A9FED 		vldr.32	s4, .L49+12	@ tmp371,
 1163              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1164              		.loc 1 97 33 view .LVU290
 1165 04b4 AB2ADFED 		vldr.32	s5, .L49+16	@ tmp376,
 1166              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1167              		.loc 1 97 22 view .LVU291
 1168 04b8 AB4ADFED 		vldr.32	s9, .L49+20	@ tmp378,
 1169              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1170              		.loc 1 97 56 view .LVU292
 1171 04bc AB3A9FED 		vldr.32	s6, .L49+24	@ tmp380,
 1172              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1173              		.loc 1 97 79 view .LVU293
 1174 04c0 AB5A9FED 		vldr.32	s10, .L49+28	@ tmp383,
 1175              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1176              		.loc 1 98 56 view .LVU294
 1177 04c4 AB3ADFED 		vldr.32	s7, .L49+32	@ tmp392,
 1178 04c8 0034A0E1 		lsl	r3, r0, #8	@ tmp353, tmp352,
 1179              	.LVL41:
  98:armwave.c     **** }
 1180              		.loc 1 98 56 view .LVU295
 1181 04cc 034C41E2 		sub	r4, r1, #768	@ tmp355, tmp354,
 1182              	.LBE65:
 1183              	.LBE64:
 1184              	@ armwave.c:225:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1185              		.loc 1 225 30 view .LVU296
 1186 04d0 0000A0E3 		mov	r0, #0	@ ivtmp.151,
 1187 04d4 011083E0 		add	r1, r3, r1	@ ivtmp.153, tmp353, tmp354
 1188 04d8 034084E0 		add	r4, r4, r3	@ _425, tmp355, tmp353
 1189 04dc 00E0A0E1 		mov	lr, r0	@ ivtmp.150, ivtmp.151
 1190 04e0 00C0A0E1 		mov	ip, r0	@ ivtmp.149, ivtmp.151
 1191              	.LVL42:
 1192              	.L29:
 223:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1193              		.loc 1 223 17 is_stmt 1 discriminator 3 view .LVU297
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1194              		.loc 1 224 17 discriminator 3 view .LVU298
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1195              		.loc 1 225 17 discriminator 3 view .LVU299
 227:armwave.c     ****             }
 1196              		.loc 1 227 17 discriminator 3 view .LVU300
 1197              	.LBB72:
 1198              	.LBI64:
  94:armwave.c     **** {
 1199              		.loc 1 94 6 discriminator 3 view .LVU301
 1200              	.LBB66:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1201              		.loc 1 96 5 discriminator 3 view .LVU302
 1202              	.LBE66:
 1203              	.LBE72:
 1204              	@ armwave.c:223:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 223:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1205              		.loc 1 223 30 is_stmt 0 discriminator 3 view .LVU303
 1206 04e4 4C34A0E1 		asr	r3, ip, #8	@ tmp357, ivtmp.149,
 1207 04e8 FF0053E3 		cmp	r3, #255	@ tmp357,
 1208 04ec FF30A0A3 		movge	r3, #255	@ tmp357,
 1209              	@ armwave.c:224:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1210              		.loc 1 224 30 discriminator 3 view .LVU304
 1211 04f0 4E24A0E1 		asr	r2, lr, #8	@ tmp359, ivtmp.150,
 1212              	.LBB73:
 1213              	.LBB67:
 1214              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1215              		.loc 1 96 33 discriminator 3 view .LVU305
 1216 04f4 7330EFE6 		uxtb	r3, r3	@ tmp358, tmp357
 1217              	.LBE67:
 1218              	.LBE73:
 1219              	@ armwave.c:224:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1220              		.loc 1 224 30 discriminator 3 view .LVU306
 1221 04f8 FF0052E3 		cmp	r2, #255	@ tmp359,
 1222              	.LBB74:
 1223              	.LBB68:
 1224              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1225              		.loc 1 96 33 discriminator 3 view .LVU307
 1226 04fc 903A07EE 		vmov	s15, r3	@ int	@ tmp358, tmp358
 1227              	.LBE68:
 1228              	.LBE74:
 1229              	@ armwave.c:224:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1230              		.loc 1 224 30 discriminator 3 view .LVU308
 1231 0500 FF20A0A3 		movge	r2, #255	@ tmp359,
 1232              	.LBB75:
 1233              	.LBB69:
 1234              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1235              		.loc 1 97 22 discriminator 3 view .LVU309
 1236 0504 646AF0EE 		vmov.f32	s13, s9	@ tmp377, tmp378
 1237              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1238              		.loc 1 96 56 discriminator 3 view .LVU310
 1239 0508 7220EFE6 		uxtb	r2, r2	@ tmp360, tmp359
 1240              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1241              		.loc 1 96 33 discriminator 3 view .LVU311
 1242 050c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _113, tmp358
 1243              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1244              		.loc 1 96 56 discriminator 3 view .LVU312
 1245 0510 102A07EE 		vmov	s14, r2	@ int	@ tmp360, tmp360
 1246              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1247              		.loc 1 96 22 discriminator 3 view .LVU313
 1248 0514 415AF0EE 		vmov.f32	s11, s2	@ tmp365, tmp366
 1249              	.LBE69:
 1250              	.LBE75:
 1251              	@ armwave.c:225:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1252              		.loc 1 225 30 discriminator 3 view .LVU314
 1253 0518 4034A0E1 		asr	r3, r0, #8	@ tmp361, ivtmp.151,
 1254 051c FF0053E3 		cmp	r3, #255	@ tmp361,
 1255              	.LBB76:
 1256              	.LBB70:
 1257              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1258              		.loc 1 96 56 discriminator 3 view .LVU315
 1259 0520 C77AB8EE 		vcvt.f32.s32	s14, s14	@ _118, tmp360
 1260              	.LBE70:
 1261              	.LBE76:
 1262              	@ armwave.c:225:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1263              		.loc 1 225 30 discriminator 3 view .LVU316
 1264 0524 FF30A0A3 		movge	r3, #255	@ tmp361,
 1265              	.LBB77:
 1266              	.LBB71:
 1267              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1268              		.loc 1 98 22 discriminator 3 view .LVU317
 1269 0528 646AB0EE 		vmov.f32	s12, s9	@ tmp389, tmp378
 1270              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1271              		.loc 1 97 22 discriminator 3 view .LVU318
 1272 052c A26A47EE 		vmla.f32	s13, s15, s5	@ tmp377, _113, tmp376
 1273              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1274              		.loc 1 96 22 discriminator 3 view .LVU319
 1275 0530 A05A47EE 		vmla.f32	s11, s15, s1	@ tmp365, _113, tmp364
 1276              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1277              		.loc 1 96 79 discriminator 3 view .LVU320
 1278 0534 7330EFE6 		uxtb	r3, r3	@ tmp362, tmp361
 1279              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1280              		.loc 1 98 22 discriminator 3 view .LVU321
 1281 0538 856A07EE 		vmla.f32	s12, s15, s10	@ tmp389, _113, tmp383
 1282              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1283              		.loc 1 96 79 discriminator 3 view .LVU322
 1284 053c 903A07EE 		vmov	s15, r3	@ int	@ tmp362, tmp362
 1285              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1286              		.loc 1 98 79 discriminator 3 view .LVU323
 1287 0540 954A9FED 		vldr.32	s8, .L49+68	@ tmp395,
 1288 0544 031041E2 		sub	r1, r1, #3	@ ivtmp.153, ivtmp.153,
 1289 0548 07C08CE0 		add	ip, ip, r7	@ ivtmp.149, ivtmp.149, _578
 1290              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1291              		.loc 1 97 46 discriminator 3 view .LVU324
 1292 054c 436A47EE 		vmls.f32	s13, s14, s6	@ tmp377, _118, tmp380
 1293              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1294              		.loc 1 96 79 discriminator 3 view .LVU325
 1295 0550 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _123, tmp362
 1296              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1297              		.loc 1 96 46 discriminator 3 view .LVU326
 1298 0554 215A47EE 		vmla.f32	s11, s14, s3	@ tmp369, _118, tmp368
 1299              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1300              		.loc 1 98 46 discriminator 3 view .LVU327
 1301 0558 636A07EE 		vmls.f32	s12, s14, s7	@ tmp393, _118, tmp392
 1302 055c 06E08EE0 		add	lr, lr, r6	@ ivtmp.150, ivtmp.150, _575
 1303 0560 050080E0 		add	r0, r0, r5	@ ivtmp.151, ivtmp.151, _572
 1304              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1305              		.loc 1 97 46 discriminator 3 view .LVU328
 1306 0564 667AB0EE 		vmov.f32	s14, s13	@ tmp381, tmp377
 1307              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1308              		.loc 1 96 69 discriminator 3 view .LVU329
 1309 0568 825A47EE 		vmla.f32	s11, s15, s4	@ tmp372, _123, tmp371
 1310              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1311              		.loc 1 98 69 discriminator 3 view .LVU330
 1312 056c 466AF0EE 		vmov.f32	s13, s12	@ tmp393, tmp393
 1313              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1314              		.loc 1 97 69 discriminator 3 view .LVU331
 1315 0570 857A07EE 		vmla.f32	s14, s15, s10	@ tmp381, _123, tmp383
 1316              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1317              		.loc 1 98 69 discriminator 3 view .LVU332
 1318 0574 C46A47EE 		vmls.f32	s13, s15, s8	@ tmp393, _123, tmp395
 1319              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1320              		.loc 1 97 69 discriminator 3 view .LVU333
 1321 0578 477AF0EE 		vmov.f32	s15, s14	@ tmp384, tmp381
 1322              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1323              		.loc 1 96 16 discriminator 3 view .LVU334
 1324 057c E57ABCEE 		vcvt.u32.f32	s14, s11	@ tmp373, tmp372
 1325              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1326              		.loc 1 97 16 discriminator 3 view .LVU335
 1327 0580 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp385, tmp384
 1328              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1329              		.loc 1 96 16 discriminator 3 view .LVU336
 1330 0584 108A17EE 		vmov	r8, s14	@ int	@ tmp373, tmp373
 1331              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1332              		.loc 1 98 16 discriminator 3 view .LVU337
 1333 0588 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp397, tmp396
 1334              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1335              		.loc 1 97 16 discriminator 3 view .LVU338
 1336 058c 903A17EE 		vmov	r3, s15	@ int	@ tmp385, tmp385
 1337              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1338              		.loc 1 96 16 discriminator 3 view .LVU339
 1339 0590 0083C1E5 		strb	r8, [r1, #768]	@ tmp373, MEM[base: _432, offset: 765B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1340              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU340
 1341              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1342              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU341
 1343 0594 0133C1E5 		strb	r3, [r1, #769]	@ tmp385, MEM[base: _432, offset: 766B]
  98:armwave.c     **** }
 1344              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU342
 1345              	.LVL43:
 1346              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1347              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU343
 1348 0598 102A17EE 		vmov	r2, s14	@ int	@ tmp397, tmp397
 1349 059c 0223C1E5 		strb	r2, [r1, #770]	@ tmp397, MEM[base: _432, offset: 767B]
 1350              	.LBE71:
 1351              	.LBE77:
 1352              	@ armwave.c:222:             for(v = 0; v < 256; v++) {
 222:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1353              		.loc 1 222 13 discriminator 3 view .LVU344
 1354 05a0 010054E1 		cmp	r4, r1	@ _425, ivtmp.153
 1355 05a4 CEFFFF1A 		bne	.L29		@,
 1356              	@ armwave.c:255: }
 1357              		.loc 1 255 1 view .LVU345
 1358 05a8 08D08DE2 		add	sp, sp, #8	@,,
 1359              		.cfi_remember_state
 1360              		.cfi_def_cfa_offset 32
 1361              		@ sp needed	@
 1362 05ac 028BBDEC 		vldm	sp!, {d8}	@
 1363              		.cfi_restore 80
 1364              		.cfi_restore 81
 1365              		.cfi_def_cfa_offset 24
 1366 05b0 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1367              	.LVL44:
 1368              	.L26:
 1369              		.cfi_restore_state
 1370              		.loc 1 255 1 view .LVU346
 1371 05b4 800080E0 		add	r0, r0, r0, lsl #1	@ tmp401, ch, ch,
 1372              	.LVL45:
 1373              		.loc 1 255 1 view .LVU347
 1374 05b8 CCE19FE5 		ldr	lr, .L49+52	@ tmp403,
 1375 05bc 6E5A9FED 		vldr.32	s10, .L49+36	@ _368,
 1376              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1377              		.loc 1 237 48 view .LVU348
 1378 05c0 6E2A9FED 		vldr.32	s4, .L49+40	@ tmp530,
 1379 05c4 632ADFED 		vldr.32	s5, .L49	@ tmp531,
 1380              	.LBB78:
 1381              	.LBB79:
 1382              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1383              		.loc 1 142 9 view .LVU349
 1384 05c8 6D4ADFED 		vldr.32	s9, .L49+44	@ _459,
 1385 05cc 633A9FED 		vldr.32	s6, .L49+8	@ tmp533,
 1386 05d0 663ADFED 		vldr.32	s7, .L49+24	@ tmp534,
 1387 05d4 674A9FED 		vldr.32	s8, .L49+32	@ tmp535,
 1388              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1389              		.loc 1 118 12 view .LVU350
 1390 05d8 B0419FE5 		ldr	r4, .L49+56	@ tmp411,
 1391 05dc 00E48EE0 		add	lr, lr, r0, lsl #8	@ ivtmp.159, tmp403, tmp401,
 1392              	.LBE79:
 1393              	.LBE78:
 1394              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 1395              		.loc 1 232 19 view .LVU351
 1396 05e0 00C0A0E3 		mov	ip, #0	@ v,
 1397              	.LVL46:
 1398              	.L40:
 233:armwave.c     ****                 hsv_temp.s = 255;
 1399              		.loc 1 233 17 is_stmt 1 view .LVU352
 1400              	@ armwave.c:236:                 if(v < 20) {
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1401              		.loc 1 236 19 is_stmt 0 view .LVU353
 1402 05e4 13005CE3 		cmp	ip, #19	@ v,
 1403 05e8 7C10EFE6 		uxtb	r1, ip	@ _415, v
 234:armwave.c     ****                 
 1404              		.loc 1 234 17 is_stmt 1 view .LVU354
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1405              		.loc 1 236 17 view .LVU355
 237:armwave.c     ****                 } else {
 1406              		.loc 1 237 21 view .LVU356
 242:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[ch][v]); 
 1407              		.loc 1 242 17 view .LVU357
 1408              	.LVL47:
 1409              	.LBB88:
 1410              	.LBI78:
 106:armwave.c     **** {
 1411              		.loc 1 106 6 view .LVU358
 1412              	.LBB80:
 108:armwave.c     **** 
 1413              		.loc 1 108 5 view .LVU359
 110:armwave.c     ****     {
 1414              		.loc 1 110 5 view .LVU360
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1415              		.loc 1 118 5 view .LVU361
 1416              	.LBE80:
 1417              	.LBE88:
 1418              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1419              		.loc 1 237 48 is_stmt 0 view .LVU362
 1420 05ec 90CA07DE 		vmovle	s15, ip	@ int	@ v, v
 1421              	.LBB89:
 1422              	.LBB81:
 1423              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1424              		.loc 1 118 12 view .LVU363
 1425 05f0 943181E0 		umull	r3, r1, r4, r1	@ tmp539, tmp410, tmp411, _415
 1426              	.LBE81:
 1427              	.LBE89:
 1428 05f4 451AF0CE 		vmovgt.f32	s3, s10	@ _368, _368
 1429              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1430              		.loc 1 237 48 view .LVU364
 1431 05f8 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp404, v
 1432              	.LBB90:
 1433              	.LBB82:
 1434              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1435              		.loc 1 119 38 view .LVU365
 1436 05fc 2A30E0E3 		mvn	r3, #42	@ tmp413,
 1437              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1438              		.loc 1 118 12 view .LVU366
 1439 0600 A111A0E1 		lsr	r1, r1, #3	@ region, tmp410,
 1440              	.LVL48:
 119:armwave.c     **** 
 1441              		.loc 1 119 5 is_stmt 1 view .LVU367
 1442              	.LBE82:
 1443              	.LBE90:
 1444 0604 FF00A0C3 		movgt	r0, #255	@ _366,
 1445              	.LBB91:
 1446              	.LBB83:
 1447              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1448              		.loc 1 119 28 is_stmt 0 view .LVU368
 1449 0608 93C123E0 		mla	r3, r3, r1, ip	@ tmp414, tmp413, region, v
 1450              	.LBE83:
 1451              	.LBE91:
 1452              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1453              		.loc 1 237 48 view .LVU369
 1454 060c 827A67DE 		vmulle.f32	s15, s15, s4	@ tmp405, tmp404, tmp530
 1455              	.LBB92:
 1456              	.LBB84:
 1457              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1458              		.loc 1 119 15 view .LVU370
 1459 0610 833083E0 		add	r3, r3, r3, lsl #1	@ tmp419, tmp414, tmp414,
 1460 0614 8330A0E1 		lsl	r3, r3, #1	@ tmp421, tmp419,
 1461 0618 7330EFE6 		uxtb	r3, r3	@ remainder, tmp421
 1462              	.LVL49:
 121:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 1463              		.loc 1 121 5 is_stmt 1 view .LVU371
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1464              		.loc 1 122 5 view .LVU372
 1465              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1466              		.loc 1 123 48 is_stmt 0 view .LVU373
 1467 061c FF2063E2 		rsb	r2, r3, #255	@ tmp429, remainder,
 1468              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1469              		.loc 1 122 41 view .LVU374
 1470 0620 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp425, remainder, remainder,
 1471              	.LVL50:
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1472              		.loc 1 122 41 view .LVU375
 1473              	.LBE84:
 1474              	.LBE92:
 1475              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1476              		.loc 1 237 32 view .LVU376
 1477 0624 E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp408, tmp405
 1478              	.LBB93:
 1479              	.LBB85:
 1480              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1481              		.loc 1 123 41 view .LVU377
 1482 0628 022462E0 		rsb	r2, r2, r2, lsl #8	@ tmp432, tmp429, tmp429,
 1483              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1484              		.loc 1 122 54 view .LVU378
 1485 062c 4334A0E1 		asr	r3, r3, #8	@ tmp426, tmp425,
 1486              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1487              		.loc 1 123 62 view .LVU379
 1488 0630 4224A0E1 		asr	r2, r2, #8	@ tmp433, tmp432,
 1489              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1490              		.loc 1 123 27 view .LVU380
 1491 0634 FF2062E2 		rsb	r2, r2, #255	@ tmp434, tmp433,
 1492              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1493              		.loc 1 122 27 view .LVU381
 1494 0638 FF3063E2 		rsb	r3, r3, #255	@ tmp427, tmp426,
 1495              	.LBE85:
 1496              	.LBE93:
 1497              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 1498              		.loc 1 237 32 view .LVU382
 1499 063c 017ACDDD 		vstrle.32	s15, [sp, #4]	@ int	@ tmp408, %sfp
 1500 0640 0400DDD5 		ldrble	r0, [sp, #4]	@ zero_extendqisi2	@ _366, %sfp
 1501 0644 900A07DE 		vmovle	s15, r0	@ int	@ _366, _366
 1502              	.LBB94:
 1503              	.LBB86:
 1504              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1505              		.loc 1 123 20 view .LVU383
 1506 0648 900202E0 		mul	r2, r0, r2	@ tmp435, _366, tmp434
 1507              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1508              		.loc 1 122 20 view .LVU384
 1509 064c 900303E0 		mul	r3, r0, r3	@ tmp428, _366, tmp427
 1510 0650 E71AF8DE 		vcvtle.f32.s32	s3, s15	@ _368, _366
 1511              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1512              		.loc 1 123 70 view .LVU385
 1513 0654 4224A0E1 		asr	r2, r2, #8	@ _200, tmp435,
 1514              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1515              		.loc 1 122 62 view .LVU386
 1516 0658 4334A0E1 		asr	r3, r3, #8	@ _193, tmp428,
 1517              	.LVL51:
 123:armwave.c     **** 
 1518              		.loc 1 123 5 is_stmt 1 view .LVU387
 125:armwave.c     ****     {
 1519              		.loc 1 125 5 view .LVU388
 1520 065c 040051E3 		cmp	r1, #4	@ region,
 1521 0660 01F19F97 		ldrls	pc, [pc, r1, asl #2]	@ region
 1522 0664 820000EA 		b	.L32	@
 1523              	.L34:
 1524 0668 7C060000 		.word	.L38
 1525 066c 2C080000 		.word	.L37
 1526 0670 EC070000 		.word	.L36
 1527 0674 AC070000 		.word	.L35
 1528 0678 0C070000 		.word	.L33
 1529              	.L38:
 1530 067c 3A6A9FED 		vldr.32	s12, .L49+20	@ tmp443,
 1531 0680 385ADFED 		vldr.32	s11, .L49+16	@ tmp441,
 1532 0684 902A07EE 		vmov	s15, r2	@ int	@ _200, _200
 1533 0688 396ADFED 		vldr.32	s13, .L49+28	@ tmp447,
 1534 068c 461AB0EE 		vmov.f32	s2, s12	@ tmp442, tmp443
 1535 0690 317A9FED 		vldr.32	s14, .L49+4	@ tmp438,
 1536 0694 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _454, _200
 1537 0698 A66A01EE 		vmla.f32	s12, s3, s13	@ tmp448, _368, tmp447
 1538 069c A51A01EE 		vmla.f32	s2, s3, s11	@ tmp442, _368, tmp441
 1539 06a0 A27A01EE 		vmla.f32	s14, s3, s5	@ _448, _368, tmp531
 1540 06a4 648AB0EE 		vmov.f32	s16, s9	@ _492, _459
 1541 06a8 640AF0EE 		vmov.f32	s1, s9	@ _467, _459
 1542 06ac 836A67EE 		vmul.f32	s13, s15, s6	@ _459, _454, tmp533
 1543 06b0 C46A07EE 		vmls.f32	s12, s15, s8	@ _515, _454, tmp535
 1544 06b4 415AF0EE 		vmov.f32	s11, s2	@ tmp442, tmp442
 1545 06b8 E35A47EE 		vmls.f32	s11, s15, s7	@ tmp442, _454, tmp534
 1546 06bc 658AF0EE 		vmov.f32	s17, s11	@ _490, tmp442
 1547              	.L39:
 1548              	.LVL52:
 125:armwave.c     ****     {
 1549              		.loc 1 125 5 is_stmt 0 view .LVU389
 1550              	.LBE86:
 1551              	.LBE94:
 243:armwave.c     ****                 
 1552              		.loc 1 243 17 is_stmt 1 view .LVU390
 1553              	.LBB95:
 1554              	.LBI95:
  94:armwave.c     **** {
 1555              		.loc 1 94 6 view .LVU391
 1556              	.LBB96:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1557              		.loc 1 96 5 view .LVU392
 1558              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1559              		.loc 1 96 46 is_stmt 0 view .LVU393
 1560 06c0 267A77EE 		vadd.f32	s15, s14, s13	@ tmp520, _448, _459
 1561              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1562              		.loc 1 97 69 view .LVU394
 1563 06c4 887A38EE 		vadd.f32	s14, s17, s16	@ tmp524, _490, _492
 1564              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1565              		.loc 1 98 16 view .LVU395
 1566 06c8 C66AFCEE 		vcvt.u32.f32	s13, s12	@ tmp527, _515
 1567              	.LBE96:
 1568              	.LBE95:
 1569              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 1570              		.loc 1 232 34 view .LVU396
 1571 06cc 01C08CE2 		add	ip, ip, #1	@ v, v,
 1572              	.LVL53:
 1573              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 1574              		.loc 1 232 13 view .LVU397
 1575 06d0 010C5CE3 		cmp	ip, #256	@ v,
 1576 06d4 03E08EE2 		add	lr, lr, #3	@ ivtmp.159, ivtmp.159,
 1577              	.LBB98:
 1578              	.LBB97:
 1579              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1580              		.loc 1 96 69 view .LVU398
 1581 06d8 A07A77EE 		vadd.f32	s15, s15, s1	@ tmp521, tmp520, _467
 1582              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1583              		.loc 1 97 16 view .LVU399
 1584 06dc C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp525, tmp524
 1585              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1586              		.loc 1 98 16 view .LVU400
 1587 06e0 903A16EE 		vmov	r3, s13	@ int	@ tmp527, tmp527
 1588 06e4 01304EE5 		strb	r3, [lr, #-1]	@ tmp527, MEM[base: _418, offset: 2B]
 1589              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1590              		.loc 1 96 16 view .LVU401
 1591 06e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp522, tmp521
 1592              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1593              		.loc 1 97 16 view .LVU402
 1594 06ec 102A17EE 		vmov	r2, s14	@ int	@ tmp525, tmp525
 1595 06f0 02204EE5 		strb	r2, [lr, #-2]	@ tmp525, MEM[base: _418, offset: 1B]
 1596              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1597              		.loc 1 96 16 view .LVU403
 1598 06f4 903A17EE 		vmov	r3, s15	@ int	@ tmp522, tmp522
 1599 06f8 03304EE5 		strb	r3, [lr, #-3]	@ tmp522, MEM[base: _418, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1600              		.loc 1 97 5 is_stmt 1 view .LVU404
  98:armwave.c     **** }
 1601              		.loc 1 98 5 view .LVU405
 1602              	.LVL54:
  98:armwave.c     **** }
 1603              		.loc 1 98 5 is_stmt 0 view .LVU406
 1604              	.LBE97:
 1605              	.LBE98:
 1606              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 1607              		.loc 1 232 13 view .LVU407
 1608 06fc B8FFFF1A 		bne	.L40		@,
 1609              	@ armwave.c:255: }
 1610              		.loc 1 255 1 view .LVU408
 1611 0700 08D08DE2 		add	sp, sp, #8	@,,
 1612              		.cfi_remember_state
 1613              		.cfi_def_cfa_offset 32
 1614              		@ sp needed	@
 1615 0704 028BBDEC 		vldm	sp!, {d8}	@
 1616              		.cfi_restore 80
 1617              		.cfi_restore 81
 1618              		.cfi_def_cfa_offset 24
 1619 0708 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1620              	.LVL55:
 1621              	.L33:
 1622              		.cfi_restore_state
 1623              	.LBB99:
 1624              	.LBB87:
 140:armwave.c     ****             break;
 1625              		.loc 1 140 13 is_stmt 1 view .LVU409
 140:armwave.c     ****             break;
 1626              		.loc 1 140 29 view .LVU410
 140:armwave.c     ****             break;
 1627              		.loc 1 140 45 view .LVU411
 141:armwave.c     ****         default:
 1628              		.loc 1 141 13 view .LVU412
 1629 070c 902A07EE 		vmov	s15, r2	@ int	@ _200, _200
 1630 0710 155ADFED 		vldr.32	s11, .L49+20	@ tmp498,
 1631 0714 166ADFED 		vldr.32	s13, .L49+28	@ tmp499,
 1632 0718 127A9FED 		vldr.32	s14, .L49+16	@ tmp497,
 1633 071c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _437, _200
 1634 0720 656AB0EE 		vmov.f32	s12, s11	@ tmp502, tmp498
 1635 0724 0C0A9FED 		vldr.32	s0, .L49+4	@ tmp494,
 1636 0728 1B1A9FED 		vldr.32	s2, .L49+68	@ tmp505,
 1637 072c 0C0ADFED 		vldr.32	s1, .L49+12	@ tmp495,
 1638 0730 A68A21EE 		vmul.f32	s16, s3, s13	@ _492, _368, tmp499
 1639 0734 A66A07EE 		vmla.f32	s12, s15, s13	@ tmp502, _437, tmp499
 1640 0738 875A47EE 		vmla.f32	s11, s15, s14	@ tmp498, _437, tmp497
 1641 073c 407AB0EE 		vmov.f32	s14, s0	@ tmp494, tmp494
 1642 0740 A00A61EE 		vmul.f32	s1, s3, s1	@ _467, _368, tmp495
 1643              	@ armwave.c:139:         case 4:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1644              		.loc 1 139 9 is_stmt 0 view .LVU413
 1645 0744 646AF0EE 		vmov.f32	s13, s9	@ _459, _459
 1646 0748 A27A07EE 		vmla.f32	s14, s15, s5	@ tmp494, _437, tmp531
 1647 074c C16A01EE 		vmls.f32	s12, s3, s2	@ _515, _368, tmp505
 1648 0750 658AF0EE 		vmov.f32	s17, s11	@ _490, tmp498
 1649 0754 D9FFFFEA 		b	.L39		@
 1650              	.L50:
 1651              		.align	2
 1652              	.L49:
 1653 0758 6F12833E 		.word	1048777327
 1654 075c 00008041 		.word	1098907648
 1655 0760 2506013F 		.word	1057031717
 1656 0764 F0A7C63D 		.word	1036429296
 1657 0768 508D17BE 		.word	-1105752752
 1658 076c 00000043 		.word	1124073472
 1659 0770 F4FD943E 		.word	1049951732
 1660 0774 9CC4E03E 		.word	1054917788
 1661 0778 7F6ABC3E 		.word	1052535423
 1662 077c 00007F43 		.word	1132396544
 1663 0780 00004C41 		.word	1095499776
 1664 0784 00000000 		.word	0
 1665 0788 00000000 		.word	.LC0
 1666 078c 00000000 		.word	g_yuv_lut
 1667 0790 83BEA02F 		.word	799063683
 1668 0794 00000043 		.word	1124073472
 1669 0798 9CC4E03E 		.word	1054917788
 1670 079c 7368913D 		.word	1032939635
 1671 07a0 F0A7C63D 		.word	1036429296
 1672 07a4 508D17BE 		.word	-1105752752
 1673 07a8 00008041 		.word	1098907648
 1674              	.LVL56:
 1675              	.L35:
 137:armwave.c     ****             break;
 1676              		.loc 1 137 13 is_stmt 1 view .LVU414
 137:armwave.c     ****             break;
 1677              		.loc 1 137 29 view .LVU415
 137:armwave.c     ****             break;
 1678              		.loc 1 137 45 view .LVU416
 138:armwave.c     ****         case 4:
 1679              		.loc 1 138 13 view .LVU417
 1680 07ac 903A07EE 		vmov	s15, r3	@ int	@ _193, _193
 1681 07b0 095A5FED 		vldr.32	s11, .L49+60	@ tmp484,
 1682 07b4 081A1FED 		vldr.32	s2, .L49+68	@ tmp491,
 1683 07b8 080A5FED 		vldr.32	s1, .L49+72	@ tmp481,
 1684 07bc E76AF8EE 		vcvt.f32.s32	s13, s15	@ _453, _193
 1685 07c0 656AB0EE 		vmov.f32	s12, s11	@ tmp488, tmp484
 1686 07c4 0D8A1FED 		vldr.32	s16, .L49+64	@ tmp485,
 1687              	@ armwave.c:136:         case 3:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1688              		.loc 1 136 9 is_stmt 0 view .LVU418
 1689 07c8 0A7A1FED 		vldr.32	s14, .L49+80	@ _448,
 1690 07cc A00A61EE 		vmul.f32	s1, s3, s1	@ _467, _368, tmp481
 1691 07d0 888A21EE 		vmul.f32	s16, s3, s16	@ _492, _368, tmp485
 1692 07d4 C46A06EE 		vmls.f32	s12, s13, s8	@ tmp488, _453, tmp535
 1693 07d8 E35A46EE 		vmls.f32	s11, s13, s7	@ tmp484, _453, tmp534
 1694 07dc 836A66EE 		vmul.f32	s13, s13, s6	@ _459, _453, tmp533
 1695 07e0 C16A01EE 		vmls.f32	s12, s3, s2	@ _515, _368, tmp491
 1696 07e4 658AF0EE 		vmov.f32	s17, s11	@ _490, tmp484
 1697 07e8 B4FFFFEA 		b	.L39		@
 1698              	.LVL57:
 1699              	.L36:
 134:armwave.c     ****             break;
 1700              		.loc 1 134 13 is_stmt 1 view .LVU419
 134:armwave.c     ****             break;
 1701              		.loc 1 134 29 view .LVU420
 134:armwave.c     ****             break;
 1702              		.loc 1 134 53 view .LVU421
 135:armwave.c     ****         case 3:
 1703              		.loc 1 135 13 view .LVU422
 1704 07ec 185A5FED 		vldr.32	s11, .L49+60	@ tmp472,
 1705 07f0 902A07EE 		vmov	s15, r2	@ int	@ _200, _200
 1706 07f4 181A1FED 		vldr.32	s2, .L49+68	@ tmp479,
 1707 07f8 180A5FED 		vldr.32	s1, .L49+72	@ tmp469,
 1708 07fc 656AB0EE 		vmov.f32	s12, s11	@ tmp476, tmp472
 1709 0800 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _464, _200
 1710 0804 E35A41EE 		vmls.f32	s11, s3, s7	@ tmp472, _368, tmp534
 1711 0808 1E8A1FED 		vldr.32	s16, .L49+64	@ tmp473,
 1712 080c C46A01EE 		vmls.f32	s12, s3, s8	@ tmp476, _368, tmp535
 1713 0810 836A61EE 		vmul.f32	s13, s3, s6	@ _459, _368, tmp533
 1714              	@ armwave.c:133:         case 2:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1715              		.loc 1 133 9 is_stmt 0 view .LVU423
 1716 0814 1D7A1FED 		vldr.32	s14, .L49+80	@ _448,
 1717 0818 A00A67EE 		vmul.f32	s1, s15, s1	@ _467, _464, tmp469
 1718 081c 658AF0EE 		vmov.f32	s17, s11	@ _490, tmp472
 1719 0820 888A27EE 		vmul.f32	s16, s15, s16	@ _492, _464, tmp473
 1720 0824 C16A07EE 		vmls.f32	s12, s15, s2	@ _515, _464, tmp479
 1721 0828 A4FFFFEA 		b	.L39		@
 1722              	.LVL58:
 1723              	.L37:
 131:armwave.c     ****             break;
 1724              		.loc 1 131 13 is_stmt 1 view .LVU424
 131:armwave.c     ****             break;
 1725              		.loc 1 131 29 view .LVU425
 131:armwave.c     ****             break;
 1726              		.loc 1 131 53 view .LVU426
 132:armwave.c     ****         case 2:
 1727              		.loc 1 132 13 view .LVU427
 1728 082c 903A07EE 		vmov	s15, r3	@ int	@ _193, _193
 1729 0830 295A5FED 		vldr.32	s11, .L49+60	@ tmp459,
 1730 0834 297A1FED 		vldr.32	s14, .L49+64	@ tmp463,
 1731 0838 271A1FED 		vldr.32	s2, .L49+76	@ tmp457,
 1732 083c E76AB8EE 		vcvt.f32.s32	s12, s15	@ _438, _193
 1733 0840 658AF0EE 		vmov.f32	s17, s11	@ tmp458, tmp459
 1734 0844 297A5FED 		vldr.32	s15, .L49+80	@ tmp454,
 1735 0848 836A61EE 		vmul.f32	s13, s3, s6	@ _459, _368, tmp533
 1736              	@ armwave.c:130:         case 1:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1737              		.loc 1 130 9 is_stmt 0 view .LVU428
 1738 084c 648AB0EE 		vmov.f32	s16, s9	@ _492, _459
 1739 0850 640AF0EE 		vmov.f32	s1, s9	@ _467, _459
 1740 0854 075A46EE 		vmla.f32	s11, s12, s14	@ tmp464, _438, tmp463
 1741 0858 018A46EE 		vmla.f32	s17, s12, s2	@ tmp458, _438, tmp457
 1742 085c 227A46EE 		vmla.f32	s15, s12, s5	@ tmp454, _438, tmp531
 1743 0860 656AB0EE 		vmov.f32	s12, s11	@ tmp464, tmp464
 1744 0864 E38A41EE 		vmls.f32	s17, s3, s7	@ _490, _368, tmp534
 1745 0868 677AB0EE 		vmov.f32	s14, s15	@ _448, tmp454
 1746 086c C46A01EE 		vmls.f32	s12, s3, s8	@ tmp464, _368, tmp535
 1747 0870 92FFFFEA 		b	.L39		@
 1748              	.LVL59:
 1749              	.L32:
 143:armwave.c     ****             break;
 1750              		.loc 1 143 13 is_stmt 1 view .LVU429
 143:armwave.c     ****             break;
 1751              		.loc 1 143 37 view .LVU430
 143:armwave.c     ****             break;
 1752              		.loc 1 143 53 view .LVU431
 144:armwave.c     ****     }
 1753              		.loc 1 144 13 view .LVU432
 1754 0874 3A8A5FED 		vldr.32	s17, .L49+60	@ tmp512,
 1755 0878 3A8A1FED 		vldr.32	s16, .L49+64	@ tmp513,
 1756 087c 903A07EE 		vmov	s15, r3	@ int	@ _193, _193
 1757 0880 3B1A1FED 		vldr.32	s2, .L49+68	@ tmp519,
 1758 0884 685AF0EE 		vmov.f32	s11, s17	@ tmp516, tmp512
 1759 0888 3C0A5FED 		vldr.32	s1, .L49+72	@ tmp509,
 1760 088c E76AB8EE 		vcvt.f32.s32	s12, s15	@ _462, _193
 1761 0890 3D0A1FED 		vldr.32	s0, .L49+76	@ tmp511,
 1762 0894 885A41EE 		vmla.f32	s11, s3, s16	@ tmp516, _368, tmp513
 1763 0898 3E7A1FED 		vldr.32	s14, .L49+80	@ tmp508,
 1764              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1765              		.loc 1 142 9 is_stmt 0 view .LVU433
 1766 089c 646AF0EE 		vmov.f32	s13, s9	@ _459, _459
 1767 08a0 808A41EE 		vmla.f32	s17, s3, s0	@ _490, _368, tmp511
 1768 08a4 A27A01EE 		vmla.f32	s14, s3, s5	@ _448, _368, tmp531
 1769 08a8 088A26EE 		vmul.f32	s16, s12, s16	@ _492, _462, tmp513
 1770 08ac 200A66EE 		vmul.f32	s1, s12, s1	@ _467, _462, tmp509
 1771 08b0 415A46EE 		vmls.f32	s11, s12, s2	@ tmp516, _462, tmp519
 1772 08b4 656AB0EE 		vmov.f32	s12, s11	@ _515, tmp516
 1773 08b8 80FFFFEA 		b	.L39		@
 1774              	.LBE87:
 1775              	.LBE99:
 1776              		.cfi_endproc
 1777              	.LFE62:
 1779              		.align	2
 1780              		.global	armwave_init
 1781              		.syntax unified
 1782              		.arm
 1783              		.fpu vfp
 1785              	armwave_init:
 1786              	.LFB63:
 256:armwave.c     **** 
 257:armwave.c     **** /*
 258:armwave.c     ****  * Initialise things.  STUB, mostly.
 259:armwave.c     ****  */
 260:armwave.c     **** void armwave_init()
 261:armwave.c     **** {
 1787              		.loc 1 261 1 is_stmt 1 view -0
 1788              		.cfi_startproc
 1789              		@ args = 0, pretend = 0, frame = 0
 1790              		@ frame_needed = 0, uses_anonymous_args = 0
 262:armwave.c     ****     g_armwave_state.flags = 0;
 1791              		.loc 1 262 5 view .LVU435
 1792              	@ armwave.c:262:     g_armwave_state.flags = 0;
 1793              		.loc 1 262 27 is_stmt 0 view .LVU436
 1794 08bc 24309FE5 		ldr	r3, .L53	@ tmp110,
 1795              	@ armwave.c:261: {
 261:armwave.c     ****     g_armwave_state.flags = 0;
 1796              		.loc 1 261 1 view .LVU437
 1797 08c0 10402DE9 		push	{r4, lr}	@
 1798              		.cfi_def_cfa_offset 8
 1799              		.cfi_offset 4, -8
 1800              		.cfi_offset 14, -4
 1801              	@ armwave.c:262:     g_armwave_state.flags = 0;
 1802              		.loc 1 262 27 view .LVU438
 1803 08c4 0020A0E3 		mov	r2, #0	@ tmp111,
 1804              	@ armwave.c:265:     printf("armwave version: %s\n", ARMWAVE_VER);
 263:armwave.c     ****     g_armwave_state.frame_margin = 0;
 264:armwave.c     **** 
 265:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1805              		.loc 1 265 5 view .LVU439
 1806 08c8 1C109FE5 		ldr	r1, .L53+4	@,
 1807 08cc 1C009FE5 		ldr	r0, .L53+8	@,
 1808              	@ armwave.c:262:     g_armwave_state.flags = 0;
 262:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1809              		.loc 1 262 27 view .LVU440
 1810 08d0 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 263:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1811              		.loc 1 263 5 is_stmt 1 view .LVU441
 1812              	@ armwave.c:263:     g_armwave_state.frame_margin = 0;
 263:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1813              		.loc 1 263 34 is_stmt 0 view .LVU442
 1814 08d4 5C2083E5 		str	r2, [r3, #92]	@ tmp111, g_armwave_state.frame_margin
 1815              		.loc 1 265 5 is_stmt 1 view .LVU443
 1816 08d8 FEFFFFEB 		bl	printf		@
 1817              	.LVL60:
 266:armwave.c     ****     
 267:armwave.c     **** #ifndef NO_PYTHON
 268:armwave.c     ****     printf("built without Python linkings\n");
 1818              		.loc 1 268 5 view .LVU444
 1819 08dc 10009FE5 		ldr	r0, .L53+12	@,
 1820              	@ armwave.c:270: }
 269:armwave.c     **** #endif
 270:armwave.c     **** }
 1821              		.loc 1 270 1 is_stmt 0 view .LVU445
 1822 08e0 1040BDE8 		pop	{r4, lr}	@
 1823              		.cfi_restore 14
 1824              		.cfi_restore 4
 1825              		.cfi_def_cfa_offset 0
 1826              	@ armwave.c:268:     printf("built without Python linkings\n");
 268:armwave.c     **** #endif
 1827              		.loc 1 268 5 view .LVU446
 1828 08e4 FEFFFFEA 		b	puts		@
 1829              	.LVL61:
 1830              	.L54:
 1831              		.align	2
 1832              	.L53:
 1833 08e8 00000000 		.word	g_armwave_state
 1834 08ec 34000000 		.word	.LC1
 1835 08f0 3C000000 		.word	.LC2
 1836 08f4 54000000 		.word	.LC3
 1837              		.cfi_endproc
 1838              	.LFE63:
 1840              		.align	2
 1841              		.global	render_nonaa_to_buffer_1ch_slice
 1842              		.syntax unified
 1843              		.arm
 1844              		.fpu vfp
 1846              	render_nonaa_to_buffer_1ch_slice:
 1847              	.LVL62:
 1848              	.LFB64:
 271:armwave.c     **** 
 272:armwave.c     **** /*
 273:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
 274:armwave.c     ****  * pre-computed.
 275:armwave.c     ****  *
 276:armwave.c     ****  * @param    slice_y        Slice to render at
 277:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
 278:armwave.c     ****  *                          accounting for cache behaviour, etc.)
 279:armwave.c     ****  */
 280:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 281:armwave.c     **** {
 1849              		.loc 1 281 1 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 8
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 282:armwave.c     ****     int yy, ys, yi, w, scale_value, i, a, b, read;
 1853              		.loc 1 282 5 view .LVU448
 283:armwave.c     ****     uint32_t value, word;
 1854              		.loc 1 283 5 view .LVU449
 284:armwave.c     ****     uint8_t *wave_base;
 1855              		.loc 1 284 5 view .LVU450
 285:armwave.c     ****     bufftyp_t *write_buffer_base;
 1856              		.loc 1 285 5 view .LVU451
 286:armwave.c     ****     bufftyp_t *write_buffer;
 1857              		.loc 1 286 5 view .LVU452
 287:armwave.c     ****     uint8_t last;
 1858              		.loc 1 287 5 view .LVU453
 288:armwave.c     **** 
 289:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 290:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_
 291:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_state.bitdepth_sca
 1859              		.loc 1 291 5 view .LVU454
 1860              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 1861              		.loc 1 291 70 is_stmt 0 view .LVU455
 1862 08f8 900A07EE 		vmov	s15, r0	@ int	@ slice_y, slice_y
 1863              	@ armwave.c:281: {
 281:armwave.c     ****     int yy, ys, yi, w, scale_value, i, a, b, read;
 1864              		.loc 1 281 1 view .LVU456
 1865 08fc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1866              		.cfi_def_cfa_offset 36
 1867              		.cfi_offset 4, -36
 1868              		.cfi_offset 5, -32
 1869              		.cfi_offset 6, -28
 1870              		.cfi_offset 7, -24
 1871              		.cfi_offset 8, -20
 1872              		.cfi_offset 9, -16
 1873              		.cfi_offset 10, -12
 1874              		.cfi_offset 11, -8
 1875              		.cfi_offset 14, -4
 1876 0900 0CD04DE2 		sub	sp, sp, #12	@,,
 1877              		.cfi_def_cfa_offset 48
 1878              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 1879              		.loc 1 291 40 view .LVU457
 1880 0904 48A19FE5 		ldr	r10, .L83+4	@ tmp275,
 1881              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 1882              		.loc 1 291 70 view .LVU458
 1883 0908 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp209, slice_y
 1884              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 1885              		.loc 1 291 107 view .LVU459
 1886 090c 4F7ADFED 		vldr.32	s15, .L83	@ tmp214,
 1887              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 1888              		.loc 1 291 70 view .LVU460
 1889 0910 0A7A9AED 		vldr.32	s14, [r10, #40]	@ g_armwave_state.bitdepth_scale_fp, g_armwave_state.bitdepth_scale_fp
 1890              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 292:armwave.c     ****     
 293:armwave.c     ****     /*
 294:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d w
 295:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 296:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
 297:armwave.c     ****         g_armwave_state.bitdepth_height, g_armwave_state.waves * g_armwave_state.wave_stride);
 298:armwave.c     ****     */
 299:armwave.c     ****       
 300:armwave.c     ****     // roll through each waveform
 301:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 1891              		.loc 1 301 5 view .LVU461
 1892 0914 3C309AE5 		ldr	r3, [r10, #60]	@ g_armwave_state.waves, g_armwave_state.waves
 1893              	@ armwave.c:281: {
 281:armwave.c     ****     int yy, ys, yi, w, scale_value, i, a, b, read;
 1894              		.loc 1 281 1 view .LVU462
 1895 0918 04008DE5 		str	r0, [sp, #4]	@ slice_y, %sfp
 1896              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 1897              		.loc 1 301 5 view .LVU463
 1898 091c 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 1899              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 291:armwave.c     ****     
 1900              		.loc 1 291 40 view .LVU464
 1901 0920 04E09AE5 		ldr	lr, [r10, #4]	@ _1, g_armwave_state.ch1_buffer
 1902              	@ armwave.c:291:     write_buffer_base = g_armwave_state.ch1_buffer + ((int)((slice_y * g_armwave_s
 291:armwave.c     ****     
 1903              		.loc 1 291 107 view .LVU465
 1904 0924 877A46EE 		vmla.f32	s15, s13, s14	@ tmp213, tmp209, g_armwave_state.bitdepth_scale_fp
 1905              	.LVL63:
 1906              		.loc 1 301 5 is_stmt 1 view .LVU466
 1907              		.loc 1 301 5 is_stmt 0 view .LVU467
 1908 0928 460000DA 		ble	.L55		@,
 1909 092c 000051E3 		cmp	r1, #0	@ height,
 1910 0930 4400000A 		beq	.L55		@,
 1911 0934 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp215, tmp213
 1912              	.LVL64:
 1913              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 1914              		.loc 1 301 11 view .LVU468
 1915 0938 0030A0E3 		mov	r3, #0	@ w,
 1916 093c 00308DE5 		str	r3, [sp]	@ w, %sfp
 1917 0940 905A17EE 		vmov	r5, s15	@ int	@ tmp215, tmp215
 1918 0944 0554A0E1 		lsl	r5, r5, #8	@ _8, tmp215,
 1919              	.LVL65:
 1920              	.L63:
 302:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1921              		.loc 1 302 9 is_stmt 1 view .LVU469
 1922              	@ armwave.c:302:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1923              		.loc 1 302 64 is_stmt 0 view .LVU470
 1924 0948 38309AE5 		ldr	r3, [r10, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1925              	@ armwave.c:302:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1926              		.loc 1 302 59 view .LVU471
 1927 094c 00209DE5 		ldr	r2, [sp]	@ w, %sfp
 1928 0950 04009DE5 		ldr	r0, [sp, #4]	@ slice_y, %sfp
 1929              	@ armwave.c:302:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1930              		.loc 1 302 19 view .LVU472
 1931 0954 14B09AE5 		ldr	fp, [r10, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1932              	@ armwave.c:302:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1933              		.loc 1 302 59 view .LVU473
 1934 0958 930223E0 		mla	r3, r3, r2, r0	@ tmp222, g_armwave_state.wave_stride, w, slice_y
 1935              	@ armwave.c:302:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1936              		.loc 1 302 19 view .LVU474
 1937 095c 0040A0E3 		mov	r4, #0	@ ivtmp.168,
 1938 0960 03B08BE0 		add	fp, fp, r3	@ wave_base, g_armwave_state.wave_buffer, tmp222
 1939              	.LVL66:
 303:armwave.c     ****         last = *wave_base; // Assuming starting with zeroth byte for last byte
 1940              		.loc 1 303 9 is_stmt 1 view .LVU475
 304:armwave.c     ****         //printf("wb=0x%08x w=%d\n", wave_base, w);
 305:armwave.c     **** 
 306:armwave.c     ****         // roll through y and render the slice into the out buffer
 307:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 308:armwave.c     ****         for(yy = 0, yi = 0; yy < height; yy += 4) {
 1941              		.loc 1 308 9 view .LVU476
 1942              		.loc 1 308 9 is_stmt 0 view .LVU477
 1943 0964 04004BE2 		sub	r0, fp, #4	@ ivtmp.165, wave_base,
 1944              	.LVL67:
 1945              	.L62:
 309:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1946              		.loc 1 309 13 is_stmt 1 view .LVU478
 310:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 311:armwave.c     ****             
 312:armwave.c     ****             for(ys = 0; ys < 4; ys++, yi++) {
 313:armwave.c     ****                 scale_value = word & 0xff;
 314:armwave.c     ****                 word >>= 8;
 315:armwave.c     ****                 
 316:armwave.c     ****                 //printf("%02x ", scale_value);
 317:armwave.c     ****                 
 318:armwave.c     **** #if USE_ALU_XCOORD == 1
 319:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
 320:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 321:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 322:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 323:armwave.c     ****                 /*
 324:armwave.c     ****                 write_buffer = write_buffer_base + \
 325:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326:armwave.c     ****                 */
 327:armwave.c     ****                 
 328:armwave.c     ****                 write_buffer = write_buffer_base + \
 329:armwave.c     ****                     ((int)((yy + ys) * g_armwave_state.bitdepth_scale_fp) * 256 * sizeof(bufftyp_t)
 330:armwave.c     **** #else
 331:armwave.c     ****                 write_buffer = write_buffer_base + \
 332:armwave.c     ****                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bufftyp_t));
 333:armwave.c     **** #endif
 334:armwave.c     **** 
 335:armwave.c     ****                 read = *(write_buffer + scale_value);
 336:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 337:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 338:armwave.c     ****                 }
 339:armwave.c     ****                 
 340:armwave.c     **** #if 0
 341:armwave.c     ****                 if(last != scale_value) {
 342:armwave.c     ****                     if(last > scale_value) {
 343:armwave.c     ****                         a = scale_value;
 344:armwave.c     ****                         b = last;
 345:armwave.c     ****                     } else if(last < scale_value) {
 346:armwave.c     ****                         a = last;
 347:armwave.c     ****                         b = scale_value;
 348:armwave.c     ****                     }
 349:armwave.c     ****                     
 350:armwave.c     ****                     for(i = a; i <= b; i++) {
 351:armwave.c     ****                         *(write_buffer + i) += 1;
 352:armwave.c     ****                     }
 353:armwave.c     ****                 }
 354:armwave.c     **** #endif
 355:armwave.c     **** 
 356:armwave.c     ****                 last = scale_value;
 1947              		.loc 1 356 17 view .LVU479
 1948              		.loc 1 356 17 view .LVU480
 313:armwave.c     ****                 word >>= 8;
 1949              		.loc 1 313 17 view .LVU481
 314:armwave.c     ****                 
 1950              		.loc 1 314 17 view .LVU482
 1951              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 1952              		.loc 1 332 38 is_stmt 0 view .LVU483
 1953 0968 D0209AE5 		ldr	r2, [r10, #208]	@ _70, g_armwave_state.xcoord_to_xpixel
 1954              	@ armwave.c:309:             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 309:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 1955              		.loc 1 309 18 view .LVU484
 1956 096c 043090E5 		ldr	r3, [r0, #4]	@ word, MEM[base: _338, offset: 0B]
 1957              	.LVL68:
 310:armwave.c     ****             
 1958              		.loc 1 310 13 is_stmt 1 view .LVU485
 313:armwave.c     ****                 word >>= 8;
 1959              		.loc 1 313 17 view .LVU486
 314:armwave.c     ****                 
 1960              		.loc 1 314 17 view .LVU487
 1961              	@ armwave.c:310:             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likel
 310:armwave.c     ****             
 1962              		.loc 1 310 13 is_stmt 0 view .LVU488
 1963 0970 44F0D0F5 		pld	[r0, #68]		@
 312:armwave.c     ****                 scale_value = word & 0xff;
 1964              		.loc 1 312 13 is_stmt 1 view .LVU489
 1965              	.LVL69:
 313:armwave.c     ****                 word >>= 8;
 1966              		.loc 1 313 17 view .LVU490
 314:armwave.c     ****                 
 1967              		.loc 1 314 17 view .LVU491
 1968              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 1969              		.loc 1 332 60 is_stmt 0 view .LVU492
 1970 0974 B4C092E1 		ldrh	ip, [r2, r4]	@ *_73, *_73
 1971              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 1972              		.loc 1 335 39 view .LVU493
 1973 0978 7370E5E6 		uxtab	r7, r5, r3	@ tmp231, _8, word
 1974              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 1975              		.loc 1 332 66 view .LVU494
 1976 097c FFCC0CE2 		and	ip, ip, #65280	@ tmp229, *_73,
 1977              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 1978              		.loc 1 335 39 view .LVU495
 1979 0980 07C08CE0 		add	ip, ip, r7	@ tmp232, tmp229, tmp231
 1980              	@ armwave.c:314:                 word >>= 8;
 314:armwave.c     ****                 
 1981              		.loc 1 314 22 view .LVU496
 1982 0984 2384A0E1 		lsr	r8, r3, #8	@ word, word,
 1983              	.LVL70:
 331:armwave.c     ****                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bufftyp_t));
 1984              		.loc 1 331 17 is_stmt 1 view .LVU497
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 1985              		.loc 1 335 17 view .LVU498
 1986              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 1987              		.loc 1 335 24 is_stmt 0 view .LVU499
 1988 0988 0C90DEE7 		ldrb	r9, [lr, ip]	@ zero_extendqisi2	@ _83, *_82
 1989              	.LVL71:
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 1990              		.loc 1 336 17 is_stmt 1 view .LVU500
 1991              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 1992              		.loc 1 335 39 is_stmt 0 view .LVU501
 1993 098c 7880E5E6 		uxtab	r8, r5, r8	@ tmp243, _8, word
 1994              	.LVL72:
 1995              	@ armwave.c:336:                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 1996              		.loc 1 336 19 view .LVU502
 1997 0990 FF0059E3 		cmp	r9, #255	@ _83,
 1998              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 1999              		.loc 1 337 58 view .LVU503
 2000 0994 01908912 		addne	r9, r9, #1	@ tmp234, _83,
 2001              	.LVL73:
 2002              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2003              		.loc 1 337 51 view .LVU504
 2004 0998 0C90CE17 		strbne	r9, [lr, ip]	@ tmp234, *_82
 2005              	.LVL74:
 337:armwave.c     ****                 }
 2006              		.loc 1 337 51 view .LVU505
 2007 099c D0209A15 		ldrne	r2, [r10, #208]	@ _70, g_armwave_state.xcoord_to_xpixel
 2008              	@ armwave.c:314:                 word >>= 8;
 314:armwave.c     ****                 
 2009              		.loc 1 314 22 view .LVU506
 2010 09a0 2378A0E1 		lsr	r7, r3, #16	@ word, word,
 2011              	.LVL75:
 331:armwave.c     ****                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bufftyp_t));
 2012              		.loc 1 331 17 is_stmt 1 view .LVU507
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2013              		.loc 1 335 17 view .LVU508
 2014              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2015              		.loc 1 332 55 is_stmt 0 view .LVU509
 2016 09a4 042082E0 		add	r2, r2, r4	@ tmp274, _70, ivtmp.168
 2017              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2018              		.loc 1 335 39 view .LVU510
 2019 09a8 7770E5E6 		uxtab	r7, r5, r7	@ tmp255, _8, word
 2020              	.LVL76:
 2021              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2022              		.loc 1 332 60 view .LVU511
 2023 09ac B2C0D2E1 		ldrh	ip, [r2, #2]	@ *_104, *_104
 2024              	@ armwave.c:314:                 word >>= 8;
 314:armwave.c     ****                 
 2025              		.loc 1 314 22 view .LVU512
 2026 09b0 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2027              	.LVL77:
 331:armwave.c     ****                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bufftyp_t));
 2028              		.loc 1 331 17 is_stmt 1 view .LVU513
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2029              		.loc 1 335 17 view .LVU514
 2030              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2031              		.loc 1 335 39 is_stmt 0 view .LVU515
 2032 09b4 033085E0 		add	r3, r5, r3	@ tmp266, _8, word
 2033              	.LVL78:
 2034              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2035              		.loc 1 332 66 view .LVU516
 2036 09b8 FFCC0CE2 		and	ip, ip, #65280	@ tmp241, *_104,
 2037              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2038              		.loc 1 335 39 view .LVU517
 2039 09bc 08808CE0 		add	r8, ip, r8	@ tmp244, tmp241, tmp243
 2040 09c0 086080E2 		add	r6, r0, #8	@ tmp271, ivtmp.165,
 2041              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2042              		.loc 1 335 24 view .LVU518
 2043 09c4 08C0DEE7 		ldrb	ip, [lr, r8]	@ zero_extendqisi2	@ _114, *_113
 2044 09c8 0B6046E0 		sub	r6, r6, fp	@ _333, tmp271, wave_base
 2045 09cc 040080E2 		add	r0, r0, #4	@ ivtmp.165, ivtmp.165,
 337:armwave.c     ****                 }
 2046              		.loc 1 337 21 is_stmt 1 view .LVU519
 2047              	.LVL79:
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2048              		.loc 1 336 17 view .LVU520
 2049              	@ armwave.c:336:                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2050              		.loc 1 336 19 is_stmt 0 view .LVU521
 2051 09d0 FF005CE3 		cmp	ip, #255	@ _114,
 337:armwave.c     ****                 }
 2052              		.loc 1 337 21 is_stmt 1 view .LVU522
 2053              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2054              		.loc 1 337 58 is_stmt 0 view .LVU523
 2055 09d4 01C08C12 		addne	ip, ip, #1	@ tmp246, _114,
 2056              	.LVL80:
 2057              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2058              		.loc 1 337 51 view .LVU524
 2059 09d8 08C0CE17 		strbne	ip, [lr, r8]	@ tmp246, *_113
 2060              	.LVL81:
 337:armwave.c     ****                 }
 2061              		.loc 1 337 51 view .LVU525
 2062 09dc D0209A15 		ldrne	r2, [r10, #208]	@ _70, g_armwave_state.xcoord_to_xpixel
 2063 09e0 04208210 		addne	r2, r2, r4	@ tmp274, _70, ivtmp.168
 2064              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2065              		.loc 1 332 60 view .LVU526
 2066 09e4 B4C0D2E1 		ldrh	ip, [r2, #4]	@ *_135, *_135
 2067              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2068              		.loc 1 332 66 view .LVU527
 2069 09e8 FFCC0CE2 		and	ip, ip, #65280	@ tmp253, *_135,
 2070              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2071              		.loc 1 335 39 view .LVU528
 2072 09ec 07708CE0 		add	r7, ip, r7	@ tmp256, tmp253, tmp255
 2073              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2074              		.loc 1 335 24 view .LVU529
 2075 09f0 07C0DEE7 		ldrb	ip, [lr, r7]	@ zero_extendqisi2	@ _145, *_144
 2076              	.LVL82:
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2077              		.loc 1 336 17 is_stmt 1 view .LVU530
 2078              	@ armwave.c:336:                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2079              		.loc 1 336 19 is_stmt 0 view .LVU531
 2080 09f4 FF005CE3 		cmp	ip, #255	@ _145,
 337:armwave.c     ****                 }
 2081              		.loc 1 337 21 is_stmt 1 view .LVU532
 2082              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2083              		.loc 1 337 58 is_stmt 0 view .LVU533
 2084 09f8 01C08C12 		addne	ip, ip, #1	@ tmp258, _145,
 2085              	.LVL83:
 2086              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2087              		.loc 1 337 51 view .LVU534
 2088 09fc 07C0CE17 		strbne	ip, [lr, r7]	@ tmp258, *_144
 2089              	.LVL84:
 2090              		.loc 1 356 17 is_stmt 1 view .LVU535
 313:armwave.c     ****                 word >>= 8;
 2091              		.loc 1 313 17 view .LVU536
 314:armwave.c     ****                 
 2092              		.loc 1 314 17 view .LVU537
 331:armwave.c     ****                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bufftyp_t));
 2093              		.loc 1 331 17 view .LVU538
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2094              		.loc 1 335 17 view .LVU539
 2095 0a00 D0209A15 		ldrne	r2, [r10, #208]	@ _70, g_armwave_state.xcoord_to_xpixel
 2096 0a04 04208210 		addne	r2, r2, r4	@ tmp274, _70, ivtmp.168
 2097 0a08 084084E2 		add	r4, r4, #8	@ ivtmp.168, ivtmp.168,
 2098              	.LVL85:
 2099              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2100              		.loc 1 332 60 is_stmt 0 view .LVU540
 2101 0a0c B620D2E1 		ldrh	r2, [r2, #6]	@ *_166, *_166
 2102              		.loc 1 356 17 is_stmt 1 view .LVU541
 2103              	.LVL86:
 2104              	@ armwave.c:332:                     ((g_armwave_state.xcoord_to_xpixel[yi] >> 8) * 256 * sizeof(bu
 332:armwave.c     **** #endif
 2105              		.loc 1 332 66 is_stmt 0 view .LVU542
 2106 0a10 FF2C02E2 		and	r2, r2, #65280	@ tmp265, *_166,
 2107              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2108              		.loc 1 335 39 view .LVU543
 2109 0a14 033082E0 		add	r3, r2, r3	@ tmp267, tmp265, tmp266
 2110              	@ armwave.c:335:                 read = *(write_buffer + scale_value);
 335:armwave.c     ****                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 2111              		.loc 1 335 24 view .LVU544
 2112 0a18 0320DEE7 		ldrb	r2, [lr, r3]	@ zero_extendqisi2	@ _176, *_175
 2113              	.LVL87:
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2114              		.loc 1 336 17 is_stmt 1 view .LVU545
 2115              	@ armwave.c:336:                 if(COND_UNLIKELY(read != BUFFTYP_MASK)) {
 336:armwave.c     ****                     *(write_buffer + scale_value) = read + 1;
 2116              		.loc 1 336 19 is_stmt 0 view .LVU546
 2117 0a1c FF0052E3 		cmp	r2, #255	@ _176,
 337:armwave.c     ****                 }
 2118              		.loc 1 337 21 is_stmt 1 view .LVU547
 2119              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2120              		.loc 1 337 58 is_stmt 0 view .LVU548
 2121 0a20 01208212 		addne	r2, r2, #1	@ tmp269, _176,
 2122              	.LVL88:
 2123              	@ armwave.c:337:                     *(write_buffer + scale_value) = read + 1;
 337:armwave.c     ****                 }
 2124              		.loc 1 337 51 view .LVU549
 2125 0a24 0320CE17 		strbne	r2, [lr, r3]	@ tmp269, *_175
 2126              	.LVL89:
 2127              	@ armwave.c:308:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 308:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2128              		.loc 1 308 9 view .LVU550
 2129 0a28 060051E1 		cmp	r1, r6	@ height, _333
 2130 0a2c CDFFFF8A 		bhi	.L62		@,
 2131              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2132              		.loc 1 301 44 view .LVU551
 2133 0a30 00209DE5 		ldr	r2, [sp]	@ w, %sfp
 2134              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2135              		.loc 1 301 5 view .LVU552
 2136 0a34 3C309AE5 		ldr	r3, [r10, #60]	@ g_armwave_state.waves, g_armwave_state.waves
 2137              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2138              		.loc 1 301 44 view .LVU553
 2139 0a38 012082E2 		add	r2, r2, #1	@ w, w,
 2140              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2141              		.loc 1 301 5 view .LVU554
 2142 0a3c 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 2143              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2144              		.loc 1 301 44 view .LVU555
 2145 0a40 00208DE5 		str	r2, [sp]	@ w, %sfp
 2146              	.LVL90:
 2147              	@ armwave.c:301:     for(w = 0; w < g_armwave_state.waves; w++) {
 301:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2148              		.loc 1 301 5 view .LVU556
 2149 0a44 BFFFFFBA 		blt	.L63		@,
 2150              	.LVL91:
 2151              	.L55:
 2152              	@ armwave.c:362: }
 357:armwave.c     ****             }
 358:armwave.c     ****         }
 359:armwave.c     ****     }
 360:armwave.c     **** 
 361:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 362:armwave.c     **** }
 2153              		.loc 1 362 1 view .LVU557
 2154 0a48 0CD08DE2 		add	sp, sp, #12	@,,
 2155              		.cfi_def_cfa_offset 36
 2156              		@ sp needed	@
 2157 0a4c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2158              	.L84:
 2159              		.align	2
 2160              	.L83:
 2161 0a50 00000000 		.word	0
 2162 0a54 00000000 		.word	g_armwave_state
 2163              		.cfi_endproc
 2164              	.LFE64:
 2166              		.global	__aeabi_idiv
 2167              		.align	2
 2168              		.global	armwave_generate
 2169              		.syntax unified
 2170              		.arm
 2171              		.fpu vfp
 2173              	armwave_generate:
 2174              	.LFB65:
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_generate()
 368:armwave.c     **** {
 2175              		.loc 1 368 1 is_stmt 1 view -0
 2176              		.cfi_startproc
 2177              		@ args = 0, pretend = 0, frame = 0
 2178              		@ frame_needed = 0, uses_anonymous_args = 0
 369:armwave.c     ****     uint32_t yy;
 2179              		.loc 1 369 5 view .LVU559
 370:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 2180              		.loc 1 370 5 view .LVU560
 2181              	@ armwave.c:368: {
 368:armwave.c     ****     uint32_t yy;
 2182              		.loc 1 368 1 is_stmt 0 view .LVU561
 2183 0a58 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2184              		.cfi_def_cfa_offset 24
 2185              		.cfi_offset 4, -24
 2186              		.cfi_offset 5, -20
 2187              		.cfi_offset 6, -16
 2188              		.cfi_offset 7, -12
 2189              		.cfi_offset 8, -8
 2190              		.cfi_offset 14, -4
 2191              	@ armwave.c:373:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 371:armwave.c     **** 
 372:armwave.c     ****     // Zero the buffer
 373:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2192              		.loc 1 373 5 view .LVU562
 2193 0a5c 0010A0E3 		mov	r1, #0	@,
 2194              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 2195              		.loc 1 370 38 view .LVU563
 2196 0a60 80609FE5 		ldr	r6, .L91	@ tmp147,
 2197              	@ armwave.c:373:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2198              		.loc 1 373 5 view .LVU564
 2199 0a64 542096E5 		ldr	r2, [r6, #84]	@, g_armwave_state.ch_buff_size
 2200 0a68 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 2201              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 2202              		.loc 1 370 14 view .LVU565
 2203 0a6c 508096E5 		ldr	r8, [r6, #80]	@ xx_rem, g_armwave_state.wave_length
 2204              	.LVL92:
 2205              		.loc 1 373 5 is_stmt 1 view .LVU566
 2206 0a70 FEFFFFEB 		bl	memset		@
 2207              	.LVL93:
 374:armwave.c     **** 
 375:armwave.c     ****     // Render the main slices
 376:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 2208              		.loc 1 376 5 view .LVU567
 2209              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2210              		.loc 1 376 68 is_stmt 0 view .LVU568
 2211 0a74 484096E5 		ldr	r4, [r6, #72]	@ _9, g_armwave_state.slice_height
 2212              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2213              		.loc 1 376 51 view .LVU569
 2214 0a78 500096E5 		ldr	r0, [r6, #80]	@, g_armwave_state.wave_length
 2215 0a7c 0410A0E1 		mov	r1, r4	@, _9
 2216 0a80 FEFFFFEB 		bl	__aeabi_idiv		@
 2217              	.LVL94:
 2218              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2219              		.loc 1 376 5 view .LVU570
 2220 0a84 000050E3 		cmp	r0, #0	@ tmp139
 2221 0a88 1100000A 		beq	.L88		@,
 2222              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 2223              		.loc 1 370 52 view .LVU571
 2224 0a8c 0070A0E3 		mov	r7, #0	@ ypos,
 2225              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2226              		.loc 1 376 12 view .LVU572
 2227 0a90 0750A0E1 		mov	r5, r7	@ yy, ypos
 2228              	.LVL95:
 2229              	.L87:
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2230              		.loc 1 377 9 is_stmt 1 discriminator 3 view .LVU573
 2231 0a94 950400E0 		mul	r0, r5, r4	@, yy, tmp1
 2232 0a98 0410A0E1 		mov	r1, r4	@, _9
 2233 0a9c FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2234              	.LVL96:
 378:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2235              		.loc 1 378 9 discriminator 3 view .LVU574
 2236              	@ armwave.c:378:         xx_rem -= g_armwave_state.slice_height;
 2237              		.loc 1 378 34 is_stmt 0 discriminator 3 view .LVU575
 2238 0aa0 484096E5 		ldr	r4, [r6, #72]	@ _9, g_armwave_state.slice_height
 2239              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2240              		.loc 1 376 51 discriminator 3 view .LVU576
 2241 0aa4 500096E5 		ldr	r0, [r6, #80]	@, g_armwave_state.wave_length
 2242 0aa8 0410A0E1 		mov	r1, r4	@, _9
 2243 0aac FEFFFFEB 		bl	__aeabi_idiv		@
 2244              	.LVL97:
 2245              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2246              		.loc 1 376 86 discriminator 3 view .LVU577
 2247 0ab0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2248              	.LVL98:
 2249              	@ armwave.c:378:         xx_rem -= g_armwave_state.slice_height;
 2250              		.loc 1 378 16 discriminator 3 view .LVU578
 2251 0ab4 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _9
 2252              	.LVL99:
 379:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 2253              		.loc 1 379 9 is_stmt 1 discriminator 3 view .LVU579
 2254              	@ armwave.c:379:         ypos += g_armwave_state.slice_height;   
 2255              		.loc 1 379 14 is_stmt 0 discriminator 3 view .LVU580
 2256 0ab8 047087E0 		add	r7, r7, r4	@ ypos, ypos, _9
 2257              	.LVL100:
 2258              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2259              		.loc 1 376 5 discriminator 3 view .LVU581
 2260 0abc 050050E1 		cmp	r0, r5	@, yy
 2261 0ac0 F3FFFF8A 		bhi	.L87		@,
 380:armwave.c     ****     }
 381:armwave.c     **** 
 382:armwave.c     ****     // Render whatever is left over
 383:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2262              		.loc 1 383 5 is_stmt 1 view .LVU582
 2263 0ac4 0810A0E1 		mov	r1, r8	@, xx_rem
 2264 0ac8 0700A0E1 		mov	r0, r7	@, ypos
 2265              	@ armwave.c:384: }
 384:armwave.c     **** }
 2266              		.loc 1 384 1 is_stmt 0 view .LVU583
 2267 0acc F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2268              		.cfi_remember_state
 2269              		.cfi_restore 14
 2270              		.cfi_restore 8
 2271              		.cfi_restore 7
 2272              		.cfi_restore 6
 2273              		.cfi_restore 5
 2274              		.cfi_restore 4
 2275              		.cfi_def_cfa_offset 0
 2276              	.LVL101:
 2277              	@ armwave.c:383:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 383:armwave.c     **** }
 2278              		.loc 1 383 5 view .LVU584
 2279 0ad0 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2280              	.LVL102:
 2281              	.L88:
 2282              		.cfi_restore_state
 2283              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 2284              		.loc 1 370 52 view .LVU585
 2285 0ad4 0070A0E1 		mov	r7, r0	@ ypos, tmp139
 383:armwave.c     **** }
 2286              		.loc 1 383 5 is_stmt 1 view .LVU586
 2287 0ad8 0810A0E1 		mov	r1, r8	@, xx_rem
 2288 0adc 0700A0E1 		mov	r0, r7	@, ypos
 2289              	@ armwave.c:384: }
 2290              		.loc 1 384 1 is_stmt 0 view .LVU587
 2291 0ae0 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2292              		.cfi_restore 14
 2293              		.cfi_restore 8
 2294              		.cfi_restore 7
 2295              		.cfi_restore 6
 2296              		.cfi_restore 5
 2297              		.cfi_restore 4
 2298              		.cfi_def_cfa_offset 0
 2299              	.LVL103:
 2300              	@ armwave.c:383:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 383:armwave.c     **** }
 2301              		.loc 1 383 5 view .LVU588
 2302 0ae4 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2303              	.LVL104:
 2304              	.L92:
 2305              		.align	2
 2306              	.L91:
 2307 0ae8 00000000 		.word	g_armwave_state
 2308              		.cfi_endproc
 2309              	.LFE65:
 2311              		.align	2
 2312              		.global	fill_xvimage_scaled
 2313              		.syntax unified
 2314              		.arm
 2315              		.fpu vfp
 2317              	fill_xvimage_scaled:
 2318              	.LVL105:
 2319              	.LFB66:
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Render buffer to an XvImage canvas.
 388:armwave.c     ****  */
 389:armwave.c     **** void fill_xvimage_scaled(XvImage *img)
 390:armwave.c     **** {
 2320              		.loc 1 390 1 is_stmt 1 view -0
 2321              		.cfi_startproc
 2322              		@ args = 0, pretend = 0, frame = 0
 2323              		@ frame_needed = 0, uses_anonymous_args = 0
 391:armwave.c     ****     uint32_t xx, yy, ye, word, wave_word, painted = 0;
 2324              		.loc 1 391 5 view .LVU590
 392:armwave.c     ****     // uint32_t ysub;
 393:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, last_x = -1, last_y = -1, sy, ey, i;
 2325              		.loc 1 393 5 view .LVU591
 394:armwave.c     ****     uint8_t r, g, b;
 2326              		.loc 1 394 5 view .LVU592
 395:armwave.c     ****     int value; 
 2327              		.loc 1 395 5 view .LVU593
 396:armwave.c     ****     // uint8_t row;
 397:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2328              		.loc 1 397 5 view .LVU594
 2329              	@ armwave.c:390: {
 390:armwave.c     ****     uint32_t xx, yy, ye, word, wave_word, painted = 0;
 2330              		.loc 1 390 1 is_stmt 0 view .LVU595
 2331 0aec F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2332              		.cfi_def_cfa_offset 40
 2333              		.cfi_offset 3, -40
 2334              		.cfi_offset 4, -36
 2335              		.cfi_offset 5, -32
 2336              		.cfi_offset 6, -28
 2337              		.cfi_offset 7, -24
 2338              		.cfi_offset 8, -20
 2339              		.cfi_offset 9, -16
 2340              		.cfi_offset 10, -12
 2341              		.cfi_offset 11, -8
 2342              		.cfi_offset 14, -4
 2343              	@ armwave.c:390: {
 390:armwave.c     ****     uint32_t xx, yy, ye, word, wave_word, painted = 0;
 2344              		.loc 1 390 1 view .LVU596
 2345 0af0 0040A0E1 		mov	r4, r0	@ img, img
 2346              	@ armwave.c:397:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2347              		.loc 1 397 15 view .LVU597
 2348 0af4 E4729FE5 		ldr	r7, .L117	@ tmp312,
 2349              	@ armwave.c:402:     printf("output buffer: 0x%08x\n", img);
 398:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 399:armwave.c     ****     uint32_t offset;
 400:armwave.c     ****     struct armwave_yuv_t plot_col;
 401:armwave.c     **** 
 402:armwave.c     ****     printf("output buffer: 0x%08x\n", img);
 2350              		.loc 1 402 5 view .LVU598
 2351 0af8 0010A0E1 		mov	r1, r0	@, img
 2352 0afc E0029FE5 		ldr	r0, .L117+4	@,
 2353              	.LVL106:
 2354              	@ armwave.c:397:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 397:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 2355              		.loc 1 397 15 view .LVU599
 2356 0b00 045097E5 		ldr	r5, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2357              	.LVL107:
 399:armwave.c     ****     struct armwave_yuv_t plot_col;
 2358              		.loc 1 399 5 is_stmt 1 view .LVU600
 400:armwave.c     **** 
 2359              		.loc 1 400 5 view .LVU601
 2360              		.loc 1 402 5 view .LVU602
 2361 0b04 FEFFFFEB 		bl	printf		@
 2362              	.LVL108:
 403:armwave.c     **** 
 404:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2363              		.loc 1 404 5 view .LVU603
 2364              	.LBB106:
 2365              	.LBB107:
 2366              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2367              		.loc 1 186 59 is_stmt 0 view .LVU604
 2368 0b08 043094E5 		ldr	r3, [r4, #4]	@ img_24(D)->width, img_24(D)->width
 2369              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2370              		.loc 1 186 36 view .LVU605
 2371 0b0c 181094E5 		ldr	r1, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2372              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2373              		.loc 1 186 59 view .LVU606
 2374 0b10 082094E5 		ldr	r2, [r4, #8]	@ img_24(D)->height, img_24(D)->height
 2375              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2376              		.loc 1 186 22 view .LVU607
 2377 0b14 1C0094E5 		ldr	r0, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2378 0b18 001091E5 		ldr	r1, [r1]	@ *_75, *_75
 2379              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2380              		.loc 1 186 5 view .LVU608
 2381 0b1c 920302E0 		mul	r2, r2, r3	@, img_24(D)->height, img_24(D)->width
 2382              	.LBE107:
 2383              	.LBE106:
 2384              	@ armwave.c:404:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2385              		.loc 1 404 10 view .LVU609
 2386 0b20 446097E5 		ldr	r6, [r7, #68]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2387 0b24 743097E5 		ldr	r3, [r7, #116]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2388              	.LBB111:
 2389              	.LBB108:
 2390              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2391              		.loc 1 186 5 view .LVU610
 2392 0b28 010080E0 		add	r0, r0, r1	@, img_24(D)->data, *_75
 2393 0b2c 1010A0E3 		mov	r1, #16	@,
 2394              	.LBE108:
 2395              	.LBE111:
 2396              	@ armwave.c:404:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2397              		.loc 1 404 10 view .LVU611
 2398 0b30 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2399              	.LVL109:
 405:armwave.c     ****     
 406:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 407:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 408:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 409:armwave.c     **** 
 410:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 411:armwave.c     ****     //memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 412:armwave.c     ****     fill_rgb_xvimage(img, &g_fill_black);
 2400              		.loc 1 412 5 is_stmt 1 view .LVU612
 2401              	.LBB112:
 2402              	.LBI106:
 179:armwave.c     **** {
 2403              		.loc 1 179 6 view .LVU613
 2404              	.LBB109:
 181:armwave.c     ****     
 2405              		.loc 1 181 5 view .LVU614
 184:armwave.c     ****     
 2406              		.loc 1 184 5 view .LVU615
 184:armwave.c     ****     
 2407              		.loc 1 184 5 is_stmt 0 view .LVU616
 2408              	.LBE109:
 2409              	.LBE112:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 2410              		.loc 1 96 5 is_stmt 1 view .LVU617
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 2411              		.loc 1 97 5 view .LVU618
  98:armwave.c     **** }
 2412              		.loc 1 98 5 view .LVU619
 2413              	.LBB113:
 2414              	.LBB110:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2415              		.loc 1 186 5 view .LVU620
 2416 0b34 FEFFFFEB 		bl	memset		@
 2417              	.LVL110:
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2418              		.loc 1 187 5 view .LVU621
 2419              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2420              		.loc 1 187 61 is_stmt 0 view .LVU622
 2421 0b38 141094E5 		ldr	r1, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2422              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2423              		.loc 1 187 65 view .LVU623
 2424 0b3c 082094E5 		ldr	r2, [r4, #8]	@ img_24(D)->height, img_24(D)->height
 2425              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2426              		.loc 1 187 36 view .LVU624
 2427 0b40 183094E5 		ldr	r3, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2428              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2429              		.loc 1 187 65 view .LVU625
 2430 0b44 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_92 + 4B], MEM[(int *)_92 + 4B]
 2431              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2432              		.loc 1 187 22 view .LVU626
 2433 0b48 1C0094E5 		ldr	r0, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2434 0b4c 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_86 + 4B], MEM[(int *)_86 + 4B]
 2435              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2436              		.loc 1 187 65 view .LVU627
 2437 0b50 920102E0 		mul	r2, r2, r1	@ tmp347, img_24(D)->height, MEM[(int *)_92 + 4B]
 2438              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2439              		.loc 1 187 5 view .LVU628
 2440 0b54 030080E0 		add	r0, r0, r3	@, img_24(D)->data, MEM[(int *)_86 + 4B]
 2441 0b58 8010A0E3 		mov	r1, #128	@,
 2442              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2443              		.loc 1 187 80 view .LVU629
 2444 0b5c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp352, tmp347, tmp347,
 2445              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2446              		.loc 1 187 5 view .LVU630
 2447 0b60 C220A0E1 		asr	r2, r2, #1	@, tmp352,
 2448 0b64 FEFFFFEB 		bl	memset		@
 2449              	.LVL111:
 188:armwave.c     **** }
 2450              		.loc 1 188 5 is_stmt 1 view .LVU631
 2451              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2452              		.loc 1 188 61 is_stmt 0 view .LVU632
 2453 0b68 141094E5 		ldr	r1, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2454              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2455              		.loc 1 188 65 view .LVU633
 2456 0b6c 082094E5 		ldr	r2, [r4, #8]	@ img_24(D)->height, img_24(D)->height
 2457              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2458              		.loc 1 188 36 view .LVU634
 2459 0b70 183094E5 		ldr	r3, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2460              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2461              		.loc 1 188 65 view .LVU635
 2462 0b74 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_105 + 8B], MEM[(int *)_105 + 8B]
 2463              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2464              		.loc 1 188 22 view .LVU636
 2465 0b78 1C0094E5 		ldr	r0, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2466 0b7c 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_99 + 8B], MEM[(int *)_99 + 8B]
 2467              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2468              		.loc 1 188 65 view .LVU637
 2469 0b80 920102E0 		mul	r2, r2, r1	@ tmp372, img_24(D)->height, MEM[(int *)_105 + 8B]
 2470              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2471              		.loc 1 188 5 view .LVU638
 2472 0b84 030080E0 		add	r0, r0, r3	@, img_24(D)->data, MEM[(int *)_99 + 8B]
 2473 0b88 8010A0E3 		mov	r1, #128	@,
 2474              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2475              		.loc 1 188 80 view .LVU639
 2476 0b8c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp377, tmp372, tmp372,
 2477              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2478              		.loc 1 188 5 view .LVU640
 2479 0b90 C220A0E1 		asr	r2, r2, #1	@, tmp377,
 2480 0b94 FEFFFFEB 		bl	memset		@
 2481              	.LVL112:
 188:armwave.c     **** }
 2482              		.loc 1 188 5 view .LVU641
 2483              	.LBE110:
 2484              	.LBE113:
 2485              	@ armwave.c:416:     for(n = 0; n < npix; n += (4 / sizeof(bufftyp_t))) {
 413:armwave.c     ****     
 414:armwave.c     ****     //printf("iter...\n");
 415:armwave.c     ****     
 416:armwave.c     ****     for(n = 0; n < npix; n += (4 / sizeof(bufftyp_t))) {
 2486              		.loc 1 416 5 view .LVU642
 2487 0b98 000056E3 		cmp	r6, #0	@ npix,
 2488 0b9c F88FBDD8 		pople	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2489              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 417:armwave.c     ****         wave_word = *base_32ptr++;
 418:armwave.c     **** 
 419:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 420:armwave.c     ****             for(w = 0; w < (4 / sizeof(bufftyp_t)); w++) {
 421:armwave.c     ****                 value = wave_word & BUFFTYP_MASK;
 422:armwave.c     ****                 wave_word >>= sizeof(bufftyp_t) * 8;
 423:armwave.c     **** 
 424:armwave.c     ****                 if(value != 0) {
 425:armwave.c     ****                     // Plot the pixels
 426:armwave.c     ****                     nsub = n + w;
 427:armwave.c     ****                     yy = (nsub & 0xff); 
 428:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 429:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2490              		.loc 1 429 30 view .LVU643
 2491 0ba0 40C29FE5 		ldr	ip, .L117+8	@ tmp515,
 2492              	@ armwave.c:416:     for(n = 0; n < npix; n += (4 / sizeof(bufftyp_t))) {
 416:armwave.c     ****         wave_word = *base_32ptr++;
 2493              		.loc 1 416 11 view .LVU644
 2494 0ba4 0030A0E3 		mov	r3, #0	@ n,
 2495 0ba8 020000EA 		b	.L94		@
 2496              	.LVL113:
 2497              	.L96:
 416:armwave.c     ****         wave_word = *base_32ptr++;
 2498              		.loc 1 416 11 view .LVU645
 2499 0bac 043083E2 		add	r3, r3, #4	@ n, n,
 2500              	.LVL114:
 2501              	@ armwave.c:416:     for(n = 0; n < npix; n += (4 / sizeof(bufftyp_t))) {
 416:armwave.c     ****         wave_word = *base_32ptr++;
 2502              		.loc 1 416 5 discriminator 2 view .LVU646
 2503 0bb0 030056E1 		cmp	r6, r3	@ npix, n
 2504 0bb4 F88FBDD8 		pople	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2505              	.LVL115:
 2506              	.L94:
 417:armwave.c     ****         wave_word = *base_32ptr++;
 2507              		.loc 1 417 9 is_stmt 1 view .LVU647
 2508              	@ armwave.c:417:         wave_word = *base_32ptr++;
 417:armwave.c     ****         wave_word = *base_32ptr++;
 2509              		.loc 1 417 19 is_stmt 0 view .LVU648
 2510 0bb8 042095E4 		ldr	r2, [r5], #4	@ wave_word, MEM[base: base_32ptr_29, offset: 4294967292B]
 2511              	.LVL116:
 419:armwave.c     ****             for(w = 0; w < (4 / sizeof(bufftyp_t)); w++) {
 2512              		.loc 1 419 9 is_stmt 1 view .LVU649
 2513              	@ armwave.c:419:         if(COND_UNLIKELY(wave_word != 0)) {
 419:armwave.c     ****             for(w = 0; w < (4 / sizeof(bufftyp_t)); w++) {
 2514              		.loc 1 419 11 is_stmt 0 view .LVU650
 2515 0bbc 000052E3 		cmp	r2, #0	@ wave_word,
 2516 0bc0 F9FFFF0A 		beq	.L96		@,
 2517              	.LVL117:
 421:armwave.c     ****                 wave_word >>= sizeof(bufftyp_t) * 8;
 2518              		.loc 1 421 17 is_stmt 1 view .LVU651
 422:armwave.c     **** 
 2519              		.loc 1 422 17 view .LVU652
 2520              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2521              		.loc 1 424 19 is_stmt 0 view .LVU653
 2522 0bc4 FF0012E2 		ands	r0, r2, #255	@ value, wave_word,
 2523              	@ armwave.c:422:                 wave_word >>= sizeof(bufftyp_t) * 8;
 422:armwave.c     **** 
 2524              		.loc 1 422 27 view .LVU654
 2525 0bc8 2214A0E1 		lsr	r1, r2, #8	@ wave_word, wave_word,
 2526              	.LVL118:
 424:armwave.c     ****                     // Plot the pixels
 2527              		.loc 1 424 17 is_stmt 1 view .LVU655
 2528              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2529              		.loc 1 424 19 is_stmt 0 view .LVU656
 2530 0bcc 1D00000A 		beq	.L97		@,
 426:armwave.c     ****                     yy = (nsub & 0xff); 
 2531              		.loc 1 426 21 is_stmt 1 view .LVU657
 2532              	.LVL119:
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2533              		.loc 1 427 21 view .LVU658
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2534              		.loc 1 428 21 view .LVU659
 2535              	.LBB114:
 2536              	.LBB115:
 2537              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2538              		.loc 1 155 27 is_stmt 0 view .LVU660
 2539 0bd0 048094E5 		ldr	r8, [r4, #4]	@ img_24(D)->width, img_24(D)->width
 2540              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2541              		.loc 1 155 37 view .LVU661
 2542 0bd4 1C7094E5 		ldr	r7, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2543              	.LBE115:
 2544              	.LBE114:
 2545              	@ armwave.c:427:                     yy = (nsub & 0xff); 
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2546              		.loc 1 427 24 view .LVU662
 2547 0bd8 73E0EFE6 		uxtb	lr, r3	@ last_y, n
 2548              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2549              		.loc 1 429 30 view .LVU663
 2550 0bdc 800080E0 		add	r0, r0, r0, lsl #1	@ tmp385, value, value,
 2551              	.LBB130:
 2552              	.LBB116:
 2553              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2554              		.loc 1 155 37 view .LVU664
 2555 0be0 987E27E0 		mla	r7, r8, lr, r7	@ tmp390, img_24(D)->width, last_y, img_24(D)->data
 2556              	.LBE116:
 2557              	.LBE130:
 2558              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2559              		.loc 1 429 30 view .LVU665
 2560 0be4 0C90D0E7 		ldrb	r9, [r0, ip]	@ zero_extendqisi2	@ plot_col$y, MEM[(struct armwave_yuv_t *)_123]
 2561              	@ armwave.c:428:                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2562              		.loc 1 428 32 view .LVU666
 2563 0be8 43B4A0E1 		asr	fp, r3, #8	@ _121, n,
 2564              		.loc 1 429 21 is_stmt 1 view .LVU667
 2565              	.LVL120:
 2566              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2567              		.loc 1 429 30 is_stmt 0 view .LVU668
 2568 0bec 0C0080E0 		add	r0, r0, ip	@ _123, tmp385, tmp515
 2569              	.LBB131:
 2570              	.LBB117:
 2571              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2572              		.loc 1 156 55 view .LVU669
 2573 0bf0 CEE0A0E1 		asr	lr, lr, #1	@ _140, last_y,
 2574              	.LBE117:
 2575              	.LBE131:
 2576              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2577              		.loc 1 429 30 view .LVU670
 2578 0bf4 02A0D0E5 		ldrb	r10, [r0, #2]	@ zero_extendqisi2	@ plot_col$v, MEM[(struct armwave_yuv_t *)_123 + 2B]
 2579 0bf8 0180D0E5 		ldrb	r8, [r0, #1]	@ zero_extendqisi2	@ plot_col$u, MEM[(struct armwave_yuv_t *)_123 + 1B]
 2580              	.LVL121:
 430:armwave.c     ****                     
 431:armwave.c     **** #if 0
 432:armwave.c     ****                     if(yy > last_y && last_y > 0) {
 433:armwave.c     ****                         sy = last_y;
 434:armwave.c     ****                         ey = yy;
 435:armwave.c     ****                         
 436:armwave.c     ****                         printf("%4d %4d %4d\n", xx, sy, ey);
 437:armwave.c     ****                         
 438:armwave.c     ****                         for(i = ey; i > sy; i--) {
 439:armwave.c     ****                             plot_pixel_yuv(img, xx, i, &plot_col);
 440:armwave.c     ****                         }
 441:armwave.c     ****                     } else {
 442:armwave.c     ****                         if(last_x != xx) {
 443:armwave.c     ****                             last_y = -1;
 444:armwave.c     ****                         }
 445:armwave.c     ****                     }
 446:armwave.c     **** #endif
 447:armwave.c     ****                
 448:armwave.c     ****                     last_x = xx;
 2581              		.loc 1 448 21 is_stmt 1 view .LVU671
 449:armwave.c     ****                     last_y = yy;
 2582              		.loc 1 449 21 view .LVU672
 450:armwave.c     **** 
 451:armwave.c     ****                     // FASTQ does not paint U/V for odd pixels; works OK for most purposes.
 452:armwave.c     ****                     //plot_pixel_yuv_fastq(img, xx, yy, &g_yuv_lut[0][MIN(value, 255)]);
 453:armwave.c     ****                     // TODO: Index needs to change wrt to channel plotted...
 454:armwave.c     ****                     plot_pixel_yuv(img, xx, yy, &plot_col);
 2583              		.loc 1 454 21 view .LVU673
 2584              	.LBB132:
 2585              	.LBI114:
 151:armwave.c     **** {
 2586              		.loc 1 151 44 view .LVU674
 2587              	.LBB118:
 153:armwave.c     ****     
 2588              		.loc 1 153 5 view .LVU675
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2589              		.loc 1 155 5 view .LVU676
 2590              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2591              		.loc 1 155 37 is_stmt 0 view .LVU677
 2592 0bfc 0B90C7E7 		strb	r9, [r7, fp]	@ plot_col$y, *_133
 2593              	.LVL122:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2594              		.loc 1 156 5 is_stmt 1 view .LVU678
 2595              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2596              		.loc 1 156 46 is_stmt 0 view .LVU679
 2597 0c00 147094E5 		ldr	r7, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2598              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2599              		.loc 1 156 66 view .LVU680
 2600 0c04 AB0F8BE0 		add	r0, fp, fp, lsr #31	@ tmp394, _121, _121,
 2601              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2602              		.loc 1 156 72 view .LVU681
 2603 0c08 1C9094E5 		ldr	r9, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2604              	.LVL123:
 2605              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2606              		.loc 1 156 50 view .LVU682
 2607 0c0c 047097E5 		ldr	r7, [r7, #4]	@ MEM[(int *)_138 + 4B], MEM[(int *)_138 + 4B]
 2608              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2609              		.loc 1 156 27 view .LVU683
 2610 0c10 18B094E5 		ldr	fp, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2611              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2612              		.loc 1 156 66 view .LVU684
 2613 0c14 C000A0E1 		asr	r0, r0, #1	@ tmp395, tmp394,
 2614              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2615              		.loc 1 156 72 view .LVU685
 2616 0c18 009089E0 		add	r9, r9, r0	@ tmp402, img_24(D)->data, tmp395
 2617 0c1c 979E27E0 		mla	r7, r7, lr, r9	@ tmp403, MEM[(int *)_138 + 4B], _140, tmp402
 2618 0c20 04909BE5 		ldr	r9, [fp, #4]	@ MEM[(int *)_136 + 4B], MEM[(int *)_136 + 4B]
 2619 0c24 09A0C7E7 		strb	r10, [r7, r9]	@ plot_col$v, *_152
 157:armwave.c     **** }
 2620              		.loc 1 157 5 is_stmt 1 view .LVU686
 2621              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2622              		.loc 1 157 46 is_stmt 0 view .LVU687
 2623 0c28 149094E5 		ldr	r9, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2624              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2625              		.loc 1 157 72 view .LVU688
 2626 0c2c 1C7094E5 		ldr	r7, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2627              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2628              		.loc 1 157 27 view .LVU689
 2629 0c30 18A094E5 		ldr	r10, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2630              	.LVL124:
 2631              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2632              		.loc 1 157 50 view .LVU690
 2633 0c34 089099E5 		ldr	r9, [r9, #8]	@ MEM[(int *)_157 + 8B], MEM[(int *)_157 + 8B]
 2634              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2635              		.loc 1 157 72 view .LVU691
 2636 0c38 000087E0 		add	r0, r7, r0	@ tmp412, img_24(D)->data, tmp395
 2637 0c3c 08709AE5 		ldr	r7, [r10, #8]	@ MEM[(int *)_155 + 8B], MEM[(int *)_155 + 8B]
 2638 0c40 990E2EE0 		mla	lr, r9, lr, r0	@ tmp413, MEM[(int *)_157 + 8B], _140, tmp412
 2639 0c44 0780CEE7 		strb	r8, [lr, r7]	@ plot_col$u, *_163
 2640              	.LVL125:
 157:armwave.c     **** }
 2641              		.loc 1 157 72 view .LVU692
 2642              	.LBE118:
 2643              	.LBE132:
 455:armwave.c     ****                     painted++;
 2644              		.loc 1 455 21 is_stmt 1 view .LVU693
 2645              	.L97:
 421:armwave.c     ****                 wave_word >>= sizeof(bufftyp_t) * 8;
 2646              		.loc 1 421 17 view .LVU694
 422:armwave.c     **** 
 2647              		.loc 1 422 17 view .LVU695
 2648              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2649              		.loc 1 424 19 is_stmt 0 view .LVU696
 2650 0c48 FF0011E2 		ands	r0, r1, #255	@ value, wave_word,
 2651              	@ armwave.c:422:                 wave_word >>= sizeof(bufftyp_t) * 8;
 422:armwave.c     **** 
 2652              		.loc 1 422 27 view .LVU697
 2653 0c4c 2218A0E1 		lsr	r1, r2, #16	@ wave_word, wave_word,
 2654              	.LVL126:
 424:armwave.c     ****                     // Plot the pixels
 2655              		.loc 1 424 17 is_stmt 1 view .LVU698
 2656              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2657              		.loc 1 424 19 is_stmt 0 view .LVU699
 2658 0c50 1E00000A 		beq	.L98		@,
 426:armwave.c     ****                     yy = (nsub & 0xff); 
 2659              		.loc 1 426 21 is_stmt 1 view .LVU700
 2660 0c54 01E083E2 		add	lr, r3, #1	@ _269, n,
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2661              		.loc 1 427 21 view .LVU701
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2662              		.loc 1 428 21 view .LVU702
 2663              	.LBB133:
 2664              	.LBB119:
 2665              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2666              		.loc 1 155 27 is_stmt 0 view .LVU703
 2667 0c58 049094E5 		ldr	r9, [r4, #4]	@ img_24(D)->width, img_24(D)->width
 2668              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2669              		.loc 1 155 37 view .LVU704
 2670 0c5c 1C8094E5 		ldr	r8, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2671              	.LBE119:
 2672              	.LBE133:
 2673              	@ armwave.c:427:                     yy = (nsub & 0xff); 
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2674              		.loc 1 427 24 view .LVU705
 2675 0c60 7E70EFE6 		uxtb	r7, lr	@ last_y, _269
 2676              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2677              		.loc 1 429 30 view .LVU706
 2678 0c64 800080E0 		add	r0, r0, r0, lsl #1	@ tmp418, value, value,
 2679              	.LBB134:
 2680              	.LBB120:
 2681              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2682              		.loc 1 155 37 view .LVU707
 2683 0c68 998728E0 		mla	r8, r9, r7, r8	@ tmp423, img_24(D)->width, last_y, img_24(D)->data
 2684              	.LBE120:
 2685              	.LBE134:
 2686              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2687              		.loc 1 429 30 view .LVU708
 2688 0c6c 0CA0D0E7 		ldrb	r10, [r0, ip]	@ zero_extendqisi2	@ plot_col$y, MEM[(struct armwave_yuv_t *)_179]
 2689              	@ armwave.c:428:                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2690              		.loc 1 428 32 view .LVU709
 2691 0c70 4EE4A0E1 		asr	lr, lr, #8	@ _177, _269,
 2692              	.LVL127:
 429:armwave.c     ****                     
 2693              		.loc 1 429 21 is_stmt 1 view .LVU710
 2694              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2695              		.loc 1 429 30 is_stmt 0 view .LVU711
 2696 0c74 0C0080E0 		add	r0, r0, ip	@ _179, tmp418, tmp515
 2697              	.LBB135:
 2698              	.LBB121:
 2699              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2700              		.loc 1 156 55 view .LVU712
 2701 0c78 C770A0E1 		asr	r7, r7, #1	@ _196, last_y,
 2702              	.LBE121:
 2703              	.LBE135:
 2704              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2705              		.loc 1 429 30 view .LVU713
 2706 0c7c 0190D0E5 		ldrb	r9, [r0, #1]	@ zero_extendqisi2	@ plot_col$u, MEM[(struct armwave_yuv_t *)_179 + 1B]
 2707              	.LVL128:
 429:armwave.c     ****                     
 2708              		.loc 1 429 30 view .LVU714
 2709 0c80 0200D0E5 		ldrb	r0, [r0, #2]	@ zero_extendqisi2	@ plot_col$v, MEM[(struct armwave_yuv_t *)_179 + 2B]
 2710              	.LVL129:
 448:armwave.c     ****                     last_y = yy;
 2711              		.loc 1 448 21 is_stmt 1 view .LVU715
 449:armwave.c     **** 
 2712              		.loc 1 449 21 view .LVU716
 454:armwave.c     ****                     painted++;
 2713              		.loc 1 454 21 view .LVU717
 2714              	.LBB136:
 151:armwave.c     **** {
 2715              		.loc 1 151 44 view .LVU718
 2716              	.LBB122:
 153:armwave.c     ****     
 2717              		.loc 1 153 5 view .LVU719
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2718              		.loc 1 155 5 view .LVU720
 2719              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2720              		.loc 1 155 37 is_stmt 0 view .LVU721
 2721 0c84 0EA0C8E7 		strb	r10, [r8, lr]	@ plot_col$y, *_189
 2722              	.LVL130:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2723              		.loc 1 156 5 is_stmt 1 view .LVU722
 2724              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2725              		.loc 1 156 46 is_stmt 0 view .LVU723
 2726 0c88 148094E5 		ldr	r8, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2727              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2728              		.loc 1 156 66 view .LVU724
 2729 0c8c AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp427, _177, _177,
 2730              	.LVL131:
 2731              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2732              		.loc 1 156 72 view .LVU725
 2733 0c90 1CA094E5 		ldr	r10, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2734              	.LVL132:
 2735              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2736              		.loc 1 156 50 view .LVU726
 2737 0c94 048098E5 		ldr	r8, [r8, #4]	@ MEM[(int *)_194 + 4B], MEM[(int *)_194 + 4B]
 2738              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2739              		.loc 1 156 27 view .LVU727
 2740 0c98 18B094E5 		ldr	fp, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2741              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2742              		.loc 1 156 66 view .LVU728
 2743 0c9c CEE0A0E1 		asr	lr, lr, #1	@ tmp428, tmp427,
 2744              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2745              		.loc 1 156 72 view .LVU729
 2746 0ca0 0EA08AE0 		add	r10, r10, lr	@ tmp435, img_24(D)->data, tmp428
 2747 0ca4 98A728E0 		mla	r8, r8, r7, r10	@ tmp436, MEM[(int *)_194 + 4B], _196, tmp435
 2748 0ca8 04A09BE5 		ldr	r10, [fp, #4]	@ MEM[(int *)_192 + 4B], MEM[(int *)_192 + 4B]
 2749 0cac 0A00C8E7 		strb	r0, [r8, r10]	@ plot_col$v, *_202
 157:armwave.c     **** }
 2750              		.loc 1 157 5 is_stmt 1 view .LVU730
 2751              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2752              		.loc 1 157 46 is_stmt 0 view .LVU731
 2753 0cb0 148094E5 		ldr	r8, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2754              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2755              		.loc 1 157 72 view .LVU732
 2756 0cb4 1C0094E5 		ldr	r0, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2757              	.LVL133:
 2758              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2759              		.loc 1 157 27 view .LVU733
 2760 0cb8 18A094E5 		ldr	r10, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2761              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2762              		.loc 1 157 50 view .LVU734
 2763 0cbc 088098E5 		ldr	r8, [r8, #8]	@ MEM[(int *)_207 + 8B], MEM[(int *)_207 + 8B]
 2764              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2765              		.loc 1 157 72 view .LVU735
 2766 0cc0 0EE080E0 		add	lr, r0, lr	@ tmp445, img_24(D)->data, tmp428
 2767 0cc4 08009AE5 		ldr	r0, [r10, #8]	@ MEM[(int *)_205 + 8B], MEM[(int *)_205 + 8B]
 2768 0cc8 98E72EE0 		mla	lr, r8, r7, lr	@ tmp446, MEM[(int *)_207 + 8B], _196, tmp445
 2769 0ccc 0090CEE7 		strb	r9, [lr, r0]	@ plot_col$u, *_213
 2770              	.LVL134:
 157:armwave.c     **** }
 2771              		.loc 1 157 72 view .LVU736
 2772              	.LBE122:
 2773              	.LBE136:
 2774              		.loc 1 455 21 is_stmt 1 view .LVU737
 2775              	.L98:
 421:armwave.c     ****                 wave_word >>= sizeof(bufftyp_t) * 8;
 2776              		.loc 1 421 17 view .LVU738
 422:armwave.c     **** 
 2777              		.loc 1 422 17 view .LVU739
 2778              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2779              		.loc 1 424 19 is_stmt 0 view .LVU740
 2780 0cd0 FF1011E2 		ands	r1, r1, #255	@ value, wave_word,
 2781              	.LVL135:
 2782              	@ armwave.c:422:                 wave_word >>= sizeof(bufftyp_t) * 8;
 422:armwave.c     **** 
 2783              		.loc 1 422 27 view .LVU741
 2784 0cd4 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2785              	.LVL136:
 424:armwave.c     ****                     // Plot the pixels
 2786              		.loc 1 424 17 is_stmt 1 view .LVU742
 2787              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2788              		.loc 1 424 19 is_stmt 0 view .LVU743
 2789 0cd8 1E00000A 		beq	.L99		@,
 426:armwave.c     ****                     yy = (nsub & 0xff); 
 2790              		.loc 1 426 21 is_stmt 1 view .LVU744
 2791 0cdc 020083E2 		add	r0, r3, #2	@ _167, n,
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2792              		.loc 1 427 21 view .LVU745
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2793              		.loc 1 428 21 view .LVU746
 2794              	.LBB137:
 2795              	.LBB123:
 2796              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2797              		.loc 1 155 27 is_stmt 0 view .LVU747
 2798 0ce0 048094E5 		ldr	r8, [r4, #4]	@ img_24(D)->width, img_24(D)->width
 2799              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2800              		.loc 1 155 37 view .LVU748
 2801 0ce4 1C7094E5 		ldr	r7, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2802              	.LBE123:
 2803              	.LBE137:
 2804              	@ armwave.c:427:                     yy = (nsub & 0xff); 
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2805              		.loc 1 427 24 view .LVU749
 2806 0ce8 70E0EFE6 		uxtb	lr, r0	@ last_y, _167
 2807              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2808              		.loc 1 429 30 view .LVU750
 2809 0cec 811081E0 		add	r1, r1, r1, lsl #1	@ tmp451, value, value,
 2810              	.LBB138:
 2811              	.LBB124:
 2812              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2813              		.loc 1 155 37 view .LVU751
 2814 0cf0 987E27E0 		mla	r7, r8, lr, r7	@ tmp456, img_24(D)->width, last_y, img_24(D)->data
 2815              	.LBE124:
 2816              	.LBE138:
 2817              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2818              		.loc 1 429 30 view .LVU752
 2819 0cf4 0C90D1E7 		ldrb	r9, [r1, ip]	@ zero_extendqisi2	@ plot_col$y, MEM[(struct armwave_yuv_t *)_229]
 2820              	@ armwave.c:428:                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2821              		.loc 1 428 32 view .LVU753
 2822 0cf8 4004A0E1 		asr	r0, r0, #8	@ _227, _167,
 2823              	.LVL137:
 429:armwave.c     ****                     
 2824              		.loc 1 429 21 is_stmt 1 view .LVU754
 2825              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2826              		.loc 1 429 30 is_stmt 0 view .LVU755
 2827 0cfc 0C1081E0 		add	r1, r1, ip	@ _229, tmp451, tmp515
 2828              	.LBB139:
 2829              	.LBB125:
 2830              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2831              		.loc 1 156 55 view .LVU756
 2832 0d00 CEE0A0E1 		asr	lr, lr, #1	@ _246, last_y,
 2833              	.LBE125:
 2834              	.LBE139:
 2835              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2836              		.loc 1 429 30 view .LVU757
 2837 0d04 0180D1E5 		ldrb	r8, [r1, #1]	@ zero_extendqisi2	@ plot_col$u, MEM[(struct armwave_yuv_t *)_229 + 1B]
 2838              	.LVL138:
 429:armwave.c     ****                     
 2839              		.loc 1 429 30 view .LVU758
 2840 0d08 0210D1E5 		ldrb	r1, [r1, #2]	@ zero_extendqisi2	@ plot_col$v, MEM[(struct armwave_yuv_t *)_229 + 2B]
 2841              	.LVL139:
 448:armwave.c     ****                     last_y = yy;
 2842              		.loc 1 448 21 is_stmt 1 view .LVU759
 449:armwave.c     **** 
 2843              		.loc 1 449 21 view .LVU760
 454:armwave.c     ****                     painted++;
 2844              		.loc 1 454 21 view .LVU761
 2845              	.LBB140:
 151:armwave.c     **** {
 2846              		.loc 1 151 44 view .LVU762
 2847              	.LBB126:
 153:armwave.c     ****     
 2848              		.loc 1 153 5 view .LVU763
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2849              		.loc 1 155 5 view .LVU764
 2850              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2851              		.loc 1 155 37 is_stmt 0 view .LVU765
 2852 0d0c 0090C7E7 		strb	r9, [r7, r0]	@ plot_col$y, *_239
 2853              	.LVL140:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2854              		.loc 1 156 5 is_stmt 1 view .LVU766
 2855              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2856              		.loc 1 156 46 is_stmt 0 view .LVU767
 2857 0d10 147094E5 		ldr	r7, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2858              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2859              		.loc 1 156 66 view .LVU768
 2860 0d14 A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp460, _227, _227,
 2861              	.LVL141:
 2862              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2863              		.loc 1 156 72 view .LVU769
 2864 0d18 1C9094E5 		ldr	r9, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2865              	.LVL142:
 2866              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2867              		.loc 1 156 50 view .LVU770
 2868 0d1c 047097E5 		ldr	r7, [r7, #4]	@ MEM[(int *)_244 + 4B], MEM[(int *)_244 + 4B]
 2869              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2870              		.loc 1 156 27 view .LVU771
 2871 0d20 18A094E5 		ldr	r10, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2872              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2873              		.loc 1 156 66 view .LVU772
 2874 0d24 C000A0E1 		asr	r0, r0, #1	@ tmp461, tmp460,
 2875              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2876              		.loc 1 156 72 view .LVU773
 2877 0d28 009089E0 		add	r9, r9, r0	@ tmp468, img_24(D)->data, tmp461
 2878 0d2c 979E27E0 		mla	r7, r7, lr, r9	@ tmp469, MEM[(int *)_244 + 4B], _246, tmp468
 2879 0d30 04909AE5 		ldr	r9, [r10, #4]	@ MEM[(int *)_242 + 4B], MEM[(int *)_242 + 4B]
 2880 0d34 0910C7E7 		strb	r1, [r7, r9]	@ plot_col$v, *_252
 157:armwave.c     **** }
 2881              		.loc 1 157 5 is_stmt 1 view .LVU774
 2882              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2883              		.loc 1 157 46 is_stmt 0 view .LVU775
 2884 0d38 147094E5 		ldr	r7, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2885              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2886              		.loc 1 157 72 view .LVU776
 2887 0d3c 1C1094E5 		ldr	r1, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2888              	.LVL143:
 2889              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2890              		.loc 1 157 27 view .LVU777
 2891 0d40 189094E5 		ldr	r9, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2892              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2893              		.loc 1 157 50 view .LVU778
 2894 0d44 087097E5 		ldr	r7, [r7, #8]	@ MEM[(int *)_257 + 8B], MEM[(int *)_257 + 8B]
 2895              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2896              		.loc 1 157 72 view .LVU779
 2897 0d48 000081E0 		add	r0, r1, r0	@ tmp478, img_24(D)->data, tmp461
 2898 0d4c 081099E5 		ldr	r1, [r9, #8]	@ MEM[(int *)_255 + 8B], MEM[(int *)_255 + 8B]
 2899 0d50 970E20E0 		mla	r0, r7, lr, r0	@ tmp479, MEM[(int *)_257 + 8B], _246, tmp478
 2900 0d54 0180C0E7 		strb	r8, [r0, r1]	@ plot_col$u, *_263
 2901              	.LVL144:
 157:armwave.c     **** }
 2902              		.loc 1 157 72 view .LVU780
 2903              	.LBE126:
 2904              	.LBE140:
 2905              		.loc 1 455 21 is_stmt 1 view .LVU781
 2906              	.L99:
 421:armwave.c     ****                 wave_word >>= sizeof(bufftyp_t) * 8;
 2907              		.loc 1 421 17 view .LVU782
 422:armwave.c     **** 
 2908              		.loc 1 422 17 view .LVU783
 424:armwave.c     ****                     // Plot the pixels
 2909              		.loc 1 424 17 view .LVU784
 2910              	@ armwave.c:424:                 if(value != 0) {
 424:armwave.c     ****                     // Plot the pixels
 2911              		.loc 1 424 19 is_stmt 0 view .LVU785
 2912 0d58 000052E3 		cmp	r2, #0	@ wave_word,
 2913 0d5c 92FFFF0A 		beq	.L96		@,
 426:armwave.c     ****                     yy = (nsub & 0xff); 
 2914              		.loc 1 426 21 is_stmt 1 view .LVU786
 2915 0d60 031083E2 		add	r1, r3, #3	@ _79, n,
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2916              		.loc 1 427 21 view .LVU787
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2917              		.loc 1 428 21 view .LVU788
 2918              	.LBB141:
 2919              	.LBB127:
 2920              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2921              		.loc 1 155 27 is_stmt 0 view .LVU789
 2922 0d64 047094E5 		ldr	r7, [r4, #4]	@ img_24(D)->width, img_24(D)->width
 2923              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2924              		.loc 1 155 37 view .LVU790
 2925 0d68 1CE094E5 		ldr	lr, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2926              	.LBE127:
 2927              	.LBE141:
 2928              	@ armwave.c:427:                     yy = (nsub & 0xff); 
 427:armwave.c     ****                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 2929              		.loc 1 427 24 view .LVU791
 2930 0d6c 7100EFE6 		uxtb	r0, r1	@ last_y, _79
 2931              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2932              		.loc 1 429 30 view .LVU792
 2933 0d70 822082E0 		add	r2, r2, r2, lsl #1	@ tmp484, wave_word, wave_word,
 2934              	.LVL145:
 2935              	.LBB142:
 2936              	.LBB128:
 2937              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2938              		.loc 1 155 37 view .LVU793
 2939 0d74 97E027E0 		mla	r7, r7, r0, lr	@ tmp489, img_24(D)->width, last_y, img_24(D)->data
 2940              	.LBE128:
 2941              	.LBE142:
 2942              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2943              		.loc 1 429 30 view .LVU794
 2944 0d78 0C90D2E7 		ldrb	r9, [r2, ip]	@ zero_extendqisi2	@ plot_col$y, MEM[(struct armwave_yuv_t *)_279]
 2945              	@ armwave.c:428:                     xx = (nsub >> 8) / sizeof(bufftyp_t);
 428:armwave.c     ****                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 2946              		.loc 1 428 32 view .LVU795
 2947 0d7c 4114A0E1 		asr	r1, r1, #8	@ _277, _79,
 2948              	.LVL146:
 429:armwave.c     ****                     
 2949              		.loc 1 429 21 is_stmt 1 view .LVU796
 2950              	@ armwave.c:429:                     plot_col = g_yuv_lut[0][MIN(value, 255)];
 429:armwave.c     ****                     
 2951              		.loc 1 429 30 is_stmt 0 view .LVU797
 2952 0d80 0C2082E0 		add	r2, r2, ip	@ _279, tmp484, tmp515
 2953 0d84 0280D2E5 		ldrb	r8, [r2, #2]	@ zero_extendqisi2	@ plot_col$v, MEM[(struct armwave_yuv_t *)_279 + 2B]
 2954 0d88 01E0D2E5 		ldrb	lr, [r2, #1]	@ zero_extendqisi2	@ plot_col$u, MEM[(struct armwave_yuv_t *)_279 + 1B]
 2955              	.LVL147:
 448:armwave.c     ****                     last_y = yy;
 2956              		.loc 1 448 21 is_stmt 1 view .LVU798
 449:armwave.c     **** 
 2957              		.loc 1 449 21 view .LVU799
 454:armwave.c     ****                     painted++;
 2958              		.loc 1 454 21 view .LVU800
 2959              	.LBB143:
 151:armwave.c     **** {
 2960              		.loc 1 151 44 view .LVU801
 2961              	.LBB129:
 153:armwave.c     ****     
 2962              		.loc 1 153 5 view .LVU802
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2963              		.loc 1 155 5 view .LVU803
 2964              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2965              		.loc 1 155 37 is_stmt 0 view .LVU804
 2966 0d8c 0190C7E7 		strb	r9, [r7, r1]	@ plot_col$y, *_289
 2967              	.LVL148:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2968              		.loc 1 156 5 is_stmt 1 view .LVU805
 2969              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2970              		.loc 1 156 46 is_stmt 0 view .LVU806
 2971 0d90 142094E5 		ldr	r2, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 2972              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2973              		.loc 1 156 66 view .LVU807
 2974 0d94 A11F81E0 		add	r1, r1, r1, lsr #31	@ tmp493, _277, _277,
 2975              	.LVL149:
 2976              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2977              		.loc 1 156 72 view .LVU808
 2978 0d98 1C9094E5 		ldr	r9, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 2979              	.LVL150:
 2980              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2981              		.loc 1 156 50 view .LVU809
 2982 0d9c 047092E5 		ldr	r7, [r2, #4]	@ MEM[(int *)_294 + 4B], MEM[(int *)_294 + 4B]
 2983              	.LVL151:
 2984              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2985              		.loc 1 156 27 view .LVU810
 2986 0da0 18A094E5 		ldr	r10, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 2987              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2988              		.loc 1 156 55 view .LVU811
 2989 0da4 C020A0E1 		asr	r2, r0, #1	@ _296, last_y,
 2990              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2991              		.loc 1 156 66 view .LVU812
 2992 0da8 C110A0E1 		asr	r1, r1, #1	@ tmp494, tmp493,
 2993              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2994              		.loc 1 156 72 view .LVU813
 2995 0dac 010089E0 		add	r0, r9, r1	@ tmp501, img_24(D)->data, tmp494
 2996              	.LVL152:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2997              		.loc 1 156 72 view .LVU814
 2998 0db0 970220E0 		mla	r0, r7, r2, r0	@ tmp502, MEM[(int *)_294 + 4B], _296, tmp501
 2999 0db4 04709AE5 		ldr	r7, [r10, #4]	@ MEM[(int *)_292 + 4B], MEM[(int *)_292 + 4B]
 3000 0db8 0780C0E7 		strb	r8, [r0, r7]	@ plot_col$v, *_302
 157:armwave.c     **** }
 3001              		.loc 1 157 5 is_stmt 1 view .LVU815
 3002              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 3003              		.loc 1 157 46 is_stmt 0 view .LVU816
 3004 0dbc 147094E5 		ldr	r7, [r4, #20]	@ img_24(D)->pitches, img_24(D)->pitches
 3005              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 3006              		.loc 1 157 72 view .LVU817
 3007 0dc0 1C0094E5 		ldr	r0, [r4, #28]	@ img_24(D)->data, img_24(D)->data
 3008              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 3009              		.loc 1 157 27 view .LVU818
 3010 0dc4 188094E5 		ldr	r8, [r4, #24]	@ img_24(D)->offsets, img_24(D)->offsets
 3011              	.LVL153:
 3012              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 3013              		.loc 1 157 50 view .LVU819
 3014 0dc8 087097E5 		ldr	r7, [r7, #8]	@ MEM[(int *)_307 + 8B], MEM[(int *)_307 + 8B]
 3015              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 3016              		.loc 1 157 72 view .LVU820
 3017 0dcc 011080E0 		add	r1, r0, r1	@ tmp511, img_24(D)->data, tmp494
 3018 0dd0 080098E5 		ldr	r0, [r8, #8]	@ MEM[(int *)_305 + 8B], MEM[(int *)_305 + 8B]
 3019 0dd4 971221E0 		mla	r1, r7, r2, r1	@ tmp512, MEM[(int *)_307 + 8B], _296, tmp511
 3020 0dd8 00E0C1E7 		strb	lr, [r1, r0]	@ plot_col$u, *_313
 3021              	.LVL154:
 157:armwave.c     **** }
 3022              		.loc 1 157 72 view .LVU821
 3023              	.LBE129:
 3024              	.LBE143:
 3025              		.loc 1 455 21 is_stmt 1 view .LVU822
 3026 0ddc 72FFFFEA 		b	.L96		@
 3027              	.L118:
 3028              		.align	2
 3029              	.L117:
 3030 0de0 00000000 		.word	g_armwave_state
 3031 0de4 74000000 		.word	.LC4
 3032 0de8 00000000 		.word	g_yuv_lut
 3033              		.cfi_endproc
 3034              	.LFE66:
 3036              		.global	__aeabi_uidiv
 3037              		.align	2
 3038              		.global	armwave_setup_render
 3039              		.syntax unified
 3040              		.arm
 3041              		.fpu vfp
 3043              	armwave_setup_render:
 3044              	.LVL155:
 3045              	.LFB67:
 456:armwave.c     ****                 }
 457:armwave.c     ****             }
 458:armwave.c     ****         }
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 462:armwave.c     **** }
 463:armwave.c     **** 
 464:armwave.c     **** /*
 465:armwave.c     ****  * Setup the renderer with passed parameters.
 466:armwave.c     ****  */
 467:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 468:armwave.c     **** {
 3046              		.loc 1 468 1 view -0
 3047              		.cfi_startproc
 3048              		@ args = 12, pretend = 0, frame = 8
 3049              		@ frame_needed = 0, uses_anonymous_args = 0
 469:armwave.c     ****     uint32_t length, tex_width = 0, xx, i;
 3050              		.loc 1 469 5 view .LVU824
 470:armwave.c     ****     float points_per_pixel;
 3051              		.loc 1 470 5 view .LVU825
 471:armwave.c     **** 
 472:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 3052              		.loc 1 472 5 view .LVU826
 3053              	@ armwave.c:468: {
 468:armwave.c     ****     uint32_t length, tex_width = 0, xx, i;
 3054              		.loc 1 468 1 is_stmt 0 view .LVU827
 3055 0dec F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3056              		.cfi_def_cfa_offset 36
 3057              		.cfi_offset 4, -36
 3058              		.cfi_offset 5, -32
 3059              		.cfi_offset 6, -28
 3060              		.cfi_offset 7, -24
 3061              		.cfi_offset 8, -20
 3062              		.cfi_offset 9, -16
 3063              		.cfi_offset 10, -12
 3064              		.cfi_offset 11, -8
 3065              		.cfi_offset 14, -4
 3066 0df0 028B2DED 		vpush.64	{d8}	@
 3067              		.cfi_def_cfa_offset 44
 3068              		.cfi_offset 80, -44
 3069              		.cfi_offset 81, -40
 3070 0df4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 3071 0df8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 3072 0dfc 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 3073 0e00 24D04DE2 		sub	sp, sp, #36	@,,
 3074              		.cfi_def_cfa_offset 80
 3075              	@ armwave.c:468: {
 468:armwave.c     ****     uint32_t length, tex_width = 0, xx, i;
 3076              		.loc 1 468 1 view .LVU828
 3077 0e04 58E09DE5 		ldr	lr, [sp, #88]	@ render_flags, render_flags
 3078 0e08 50C09DE5 		ldr	ip, [sp, #80]	@ target_width, target_width
 3079 0e0c 54809DE5 		ldr	r8, [sp, #84]	@ target_height, target_height
 3080 0e10 18308DE5 		str	r3, [sp, #24]	@ wave_stride, %sfp
 3081              	@ armwave.c:472:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 3082              		.loc 1 472 5 view .LVU829
 3083 0e14 00308DE5 		str	r3, [sp]	@ wave_stride,
 3084 0e18 04C08DE5 		str	ip, [sp, #4]	@ target_width,
 3085 0e1c 0230A0E1 		mov	r3, r2	@, waves_max
 3086              	.LVL156:
 3087              		.loc 1 472 5 view .LVU830
 3088 0e20 08808DE5 		str	r8, [sp, #8]	@ target_height,
 3089 0e24 0120A0E1 		mov	r2, r1	@, end_point
 3090              	.LVL157:
 3091              		.loc 1 472 5 view .LVU831
 3092 0e28 0CE08DE5 		str	lr, [sp, #12]	@ render_flags,
 3093 0e2c 0010A0E1 		mov	r1, r0	@, start_point
 3094              	.LVL158:
 3095              		.loc 1 472 5 view .LVU832
 3096 0e30 70029FE5 		ldr	r0, .L134+16	@,
 3097              	.LVL159:
 3098              	@ armwave.c:468: {
 468:armwave.c     ****     uint32_t length, tex_width = 0, xx, i;
 3099              		.loc 1 468 1 view .LVU833
 3100 0e34 1CE08DE5 		str	lr, [sp, #28]	@ render_flags, %sfp
 3101              	@ armwave.c:472:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 3102              		.loc 1 472 5 view .LVU834
 3103 0e38 FEFFFFEB 		bl	printf		@
 3104              	.LVL160:
 473:armwave.c     **** 
 474:armwave.c     ****     if(start_point > end_point) {
 3105              		.loc 1 474 5 is_stmt 1 view .LVU835
 3106              	@ armwave.c:474:     if(start_point > end_point) {
 3107              		.loc 1 474 7 is_stmt 0 view .LVU836
 3108 0e3c 050054E1 		cmp	r4, r5	@ start_point, end_point
 3109 0e40 8300008A 		bhi	.L132		@,
 475:armwave.c     ****         printf("Error: start point more than end point\n");
 476:armwave.c     ****         return;
 477:armwave.c     ****     }
 478:armwave.c     ****     
 479:armwave.c     ****     /* 
 480:armwave.c     ****      * Compute best texture width.
 481:armwave.c     ****      * Requirements:
 482:armwave.c     ****      *  - At least AM_MIN_TEXTURE_WIDTH pixels across but no more than AM_MAX_TEXTURE_WIDTH pixels 
 483:armwave.c     ****      *  - As close a multiple of the waveform length
 484:armwave.c     ****      *  - The largest size is chosen.
 485:armwave.c     ****      */
 486:armwave.c     ****     length = end_point - start_point;
 3110              		.loc 1 486 5 is_stmt 1 view .LVU837
 3111              	@ armwave.c:486:     length = end_point - start_point;
 3112              		.loc 1 486 12 is_stmt 0 view .LVU838
 3113 0e44 044045E0 		sub	r4, r5, r4	@ length, end_point, start_point
 3114              	.LVL161:
 487:armwave.c     ****     i = 1;
 3115              		.loc 1 487 5 is_stmt 1 view .LVU839
 3116              	@ armwave.c:490:         printf("Try tex_width %d pixel\r\n", tex_width);
 488:armwave.c     ****     while(1) {
 489:armwave.c     ****         tex_width = length / i;
 490:armwave.c     ****         printf("Try tex_width %d pixel\r\n", tex_width);
 3117              		.loc 1 490 9 is_stmt 0 view .LVU840
 3118 0e48 5C729FE5 		ldr	r7, .L134+20	@ tmp259,
 3119              	@ armwave.c:491:         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 491:armwave.c     ****         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 3120              		.loc 1 491 11 view .LVU841
 3121 0e4c 5C629FE5 		ldr	r6, .L134+24	@ tmp183,
 3122              	@ armwave.c:487:     i = 1;
 487:armwave.c     ****     i = 1;
 3123              		.loc 1 487 7 view .LVU842
 3124 0e50 01B0A0E3 		mov	fp, #1	@ i,
 3125              	@ armwave.c:491:         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 3126              		.loc 1 491 45 view .LVU843
 3127 0e54 025CE0E3 		mvn	r5, #512	@ tmp181,
 3128              	.LVL162:
 3129              		.loc 1 491 45 view .LVU844
 3130 0e58 000000EA 		b	.L124		@
 3131              	.LVL163:
 3132              	.L121:
 492:armwave.c     ****             target_width = tex_width;
 493:armwave.c     ****             break;
 494:armwave.c     ****         }
 495:armwave.c     ****         i *= 2;
 3133              		.loc 1 495 9 is_stmt 1 view .LVU845
 3134              	@ armwave.c:495:         i *= 2;
 3135              		.loc 1 495 11 is_stmt 0 view .LVU846
 3136 0e5c 8BB0A0E1 		lsl	fp, fp, #1	@ i, i,
 3137              	.LVL164:
 3138              	.L124:
 488:armwave.c     ****         tex_width = length / i;
 3139              		.loc 1 488 5 is_stmt 1 view .LVU847
 489:armwave.c     ****         printf("Try tex_width %d pixel\r\n", tex_width);
 3140              		.loc 1 489 9 view .LVU848
 3141              	@ armwave.c:489:         tex_width = length / i;
 489:armwave.c     ****         printf("Try tex_width %d pixel\r\n", tex_width);
 3142              		.loc 1 489 19 is_stmt 0 view .LVU849
 3143 0e60 0B10A0E1 		mov	r1, fp	@, i
 3144 0e64 0400A0E1 		mov	r0, r4	@, length
 3145 0e68 FEFFFFEB 		bl	__aeabi_uidiv		@
 3146              	.LVL165:
 3147              	@ armwave.c:490:         printf("Try tex_width %d pixel\r\n", tex_width);
 490:armwave.c     ****         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 3148              		.loc 1 490 9 view .LVU850
 3149 0e6c 0010A0E1 		mov	r1, r0	@, tmp179
 3150              	@ armwave.c:489:         tex_width = length / i;
 489:armwave.c     ****         printf("Try tex_width %d pixel\r\n", tex_width);
 3151              		.loc 1 489 19 view .LVU851
 3152 0e70 00A0A0E1 		mov	r10, r0	@ tmp179,
 3153              	.LVL166:
 490:armwave.c     ****         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 3154              		.loc 1 490 9 is_stmt 1 view .LVU852
 3155 0e74 0700A0E1 		mov	r0, r7	@, tmp259
 3156              	.LVL167:
 490:armwave.c     ****         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 3157              		.loc 1 490 9 is_stmt 0 view .LVU853
 3158 0e78 FEFFFFEB 		bl	printf		@
 3159              	.LVL168:
 491:armwave.c     ****             target_width = tex_width;
 3160              		.loc 1 491 9 is_stmt 1 view .LVU854
 3161              	@ armwave.c:491:         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 491:armwave.c     ****             target_width = tex_width;
 3162              		.loc 1 491 45 is_stmt 0 view .LVU855
 3163 0e7c 05108AE0 		add	r1, r10, r5	@ tmp182, tmp179, tmp181
 3164              	@ armwave.c:491:         if(tex_width > AM_MIN_TEXTURE_WIDTH && tex_width < AM_MAX_TEXTURE_WIDTH) {
 491:armwave.c     ****             target_width = tex_width;
 3165              		.loc 1 491 11 view .LVU856
 3166 0e80 060051E1 		cmp	r1, r6	@ tmp182, tmp183
 3167 0e84 F4FFFF8A 		bhi	.L121		@,
 492:armwave.c     ****             break;
 3168              		.loc 1 492 13 is_stmt 1 view .LVU857
 3169              	.LVL169:
 493:armwave.c     ****         }
 3170              		.loc 1 493 13 view .LVU858
 496:armwave.c     ****     }
 497:armwave.c     **** 
 498:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 499:armwave.c     ****     g_armwave_state.xstride = target_height;
 3171              		.loc 1 499 5 view .LVU859
 3172              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 500:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 501:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 502:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 503:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 504:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 505:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 506:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 507:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 508:armwave.c     ****     g_armwave_state.target_width = target_width;
 509:armwave.c     ****     g_armwave_state.target_height = target_height;
 510:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 511:armwave.c     ****     g_armwave_state.flags = render_flags;
 512:armwave.c     ****     g_armwave_state.draw_xoff = 0;
 513:armwave.c     ****     g_armwave_state.draw_yoff = 0;
 514:armwave.c     ****     g_armwave_state.draw_width = target_width;
 515:armwave.c     ****     g_armwave_state.draw_height = target_height;
 516:armwave.c     **** 
 517:armwave.c     ****     // Calculate compound scaler
 518:armwave.c     ****     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g_armwave_state.wa
 3173              		.loc 1 518 80 is_stmt 0 view .LVU860
 3174 0e88 904A07EE 		vmov	s15, r4	@ int	@ length, length
 3175 0e8c 815A9FED 		vldr.32	s10, .L134	@ tmp215,
 3176              	@ armwave.c:500:     g_armwave_state.vscale_frac = target_height / 255.0f;
 500:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 3177              		.loc 1 500 49 view .LVU861
 3178 0e90 816A9FED 		vldr.32	s12, .L134+4	@ tmp186,
 3179              	@ armwave.c:499:     g_armwave_state.xstride = target_height;
 499:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 3180              		.loc 1 499 29 view .LVU862
 3181 0e94 18529FE5 		ldr	r5, .L134+28	@ tmp258,
 3182              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 3183              		.loc 1 518 80 view .LVU863
 3184 0e98 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp213, length
 3185              	@ armwave.c:500:     g_armwave_state.vscale_frac = target_height / 255.0f;
 500:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 3186              		.loc 1 500 49 view .LVU864
 3187 0e9c 908A07EE 		vmov	s15, r8	@ int	@ target_height, target_height
 3188              	@ armwave.c:502:     g_armwave_state.wave_stride = wave_stride;
 502:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 3189              		.loc 1 502 33 view .LVU865
 3190 0ea0 18309DE5 		ldr	r3, [sp, #24]	@ wave_stride, %sfp
 3191              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 519:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 520:armwave.c     ****         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 521:armwave.c     **** 
 522:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_width=%d, wave_length
 3192              		.loc 1 522 5 view .LVU866
 3193 0ea4 0C408DE5 		str	r4, [sp, #12]	@ length,
 3194 0ea8 08A08DE5 		str	r10, [sp, #8]	@ tmp179,
 3195              	@ armwave.c:500:     g_armwave_state.vscale_frac = target_height / 255.0f;
 500:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 3196              		.loc 1 500 49 view .LVU867
 3197 0eac 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp185, target_height
 3198              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3199              		.loc 1 518 72 view .LVU868
 3200 0eb0 90AA07EE 		vmov	s15, r10	@ int	@ tmp179, tmp179
 3201              	@ armwave.c:502:     g_armwave_state.wave_stride = wave_stride;
 502:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 3202              		.loc 1 502 33 view .LVU869
 3203 0eb4 383085E5 		str	r3, [r5, #56]	@ wave_stride, g_armwave_state.wave_stride
 3204              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3205              		.loc 1 518 80 view .LVU870
 3206 0eb8 267A85EE 		vdiv.f32	s14, s10, s13	@ tmp214, tmp215, tmp213
 3207              	@ armwave.c:511:     g_armwave_state.flags = render_flags;
 511:armwave.c     ****     g_armwave_state.draw_xoff = 0;
 3208              		.loc 1 511 27 view .LVU871
 3209 0ebc 1C309DE5 		ldr	r3, [sp, #28]	@ render_flags, %sfp
 3210              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3211              		.loc 1 518 72 view .LVU872
 3212 0ec0 E78AB8EE 		vcvt.f32.s32	s16, s15	@ _15, tmp179
 3213              	@ armwave.c:520:         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 520:armwave.c     **** 
 3214              		.loc 1 520 44 view .LVU873
 3215 0ec4 757ADFED 		vldr.32	s15, .L134+8	@ tmp218,
 3216              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3217              		.loc 1 522 5 view .LVU874
 3218 0ec8 0118A0E3 		mov	r1, #65536	@ tmp221,
 3219              	@ armwave.c:511:     g_armwave_state.flags = render_flags;
 511:armwave.c     ****     g_armwave_state.draw_xoff = 0;
 3220              		.loc 1 511 27 view .LVU875
 3221 0ecc 003085E5 		str	r3, [r5]	@ render_flags, g_armwave_state.flags
 3222              	@ armwave.c:499:     g_armwave_state.xstride = target_height;
 499:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 3223              		.loc 1 499 29 view .LVU876
 3224 0ed0 308085E5 		str	r8, [r5, #48]	@ target_height, g_armwave_state.xstride
 500:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 3225              		.loc 1 500 5 is_stmt 1 view .LVU877
 3226              	@ armwave.c:503:     g_armwave_state.waves_max = waves_max;
 503:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 3227              		.loc 1 503 31 is_stmt 0 view .LVU878
 3228 0ed4 409085E5 		str	r9, [r5, #64]	@ waves_max, g_armwave_state.waves_max
 3229              	@ armwave.c:504:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 504:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 3230              		.loc 1 504 27 view .LVU879
 3231 0ed8 3C9085E5 		str	r9, [r5, #60]	@ waves_max, g_armwave_state.waves
 3232              	@ armwave.c:508:     g_armwave_state.target_width = target_width;
 508:armwave.c     ****     g_armwave_state.target_height = target_height;
 3233              		.loc 1 508 34 view .LVU880
 3234 0edc 74A085E5 		str	r10, [r5, #116]	@ tmp179, g_armwave_state.target_width
 3235              	@ armwave.c:509:     g_armwave_state.target_height = target_height;
 509:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 3236              		.loc 1 509 35 view .LVU881
 3237 0ee0 788085E5 		str	r8, [r5, #120]	@ target_height, g_armwave_state.target_height
 3238              	@ armwave.c:510:     g_armwave_state.wave_length = end_point - start_point;
 510:armwave.c     ****     g_armwave_state.flags = render_flags;
 3239              		.loc 1 510 33 view .LVU882
 3240 0ee4 504085E5 		str	r4, [r5, #80]	@ length, g_armwave_state.wave_length
 3241              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3242              		.loc 1 522 5 view .LVU883
 3243 0ee8 10108DE5 		str	r1, [sp, #16]	@ tmp221,
 3244              	@ armwave.c:506:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 506:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 3245              		.loc 1 506 37 view .LVU884
 3246 0eec 01CCA0E3 		mov	ip, #256	@ tmp196,
 3247              	@ armwave.c:507:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 507:armwave.c     ****     g_armwave_state.target_width = target_width;
 3248              		.loc 1 507 90 view .LVU885
 3249 0ef0 04208AE2 		add	r2, r10, #4	@ tmp197, tmp179,
 3250              	@ armwave.c:500:     g_armwave_state.vscale_frac = target_height / 255.0f;
 500:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 3251              		.loc 1 500 49 view .LVU886
 3252 0ef4 866AC5EE 		vdiv.f32	s13, s11, s12	@ _4, tmp185, tmp186
 3253              	@ armwave.c:506:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 506:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 3254              		.loc 1 506 37 view .LVU887
 3255 0ef8 44C085E5 		str	ip, [r5, #68]	@ tmp196, g_armwave_state.bitdepth_height
 3256              	@ armwave.c:505:     g_armwave_state.size = target_height * target_width;
 505:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 3257              		.loc 1 505 42 view .LVU888
 3258 0efc 9A080EE0 		mul	lr, r10, r8	@ tmp194, tmp179, target_height
 3259              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3260              		.loc 1 518 72 view .LVU889
 3261 0f00 087A27EE 		vmul.f32	s14, s14, s16	@ _18, tmp214, _15
 3262              	@ armwave.c:507:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 507:armwave.c     ****     g_armwave_state.target_width = target_width;
 3263              		.loc 1 507 95 view .LVU890
 3264 0f04 022382E0 		add	r2, r2, r2, lsl #6	@ tmp200, tmp197, tmp197,
 3265              	@ armwave.c:512:     g_armwave_state.draw_xoff = 0;
 512:armwave.c     ****     g_armwave_state.draw_yoff = 0;
 3266              		.loc 1 512 31 view .LVU891
 3267 0f08 0030A0E3 		mov	r3, #0	@ tmp208,
 3268              	@ armwave.c:507:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 507:armwave.c     ****     g_armwave_state.target_width = target_width;
 3269              		.loc 1 507 95 view .LVU892
 3270 0f0c 0221A0E1 		lsl	r2, r2, #2	@ tmp201, tmp200,
 3271              	@ armwave.c:507:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 507:armwave.c     ****     g_armwave_state.target_width = target_width;
 3272              		.loc 1 507 34 view .LVU893
 3273 0f10 542085E5 		str	r2, [r5, #84]	@ tmp201, g_armwave_state.ch_buff_size
 3274              	@ armwave.c:512:     g_armwave_state.draw_xoff = 0;
 512:armwave.c     ****     g_armwave_state.draw_yoff = 0;
 3275              		.loc 1 512 31 view .LVU894
 3276 0f14 7C3085E5 		str	r3, [r5, #124]	@ tmp208, g_armwave_state.draw_xoff
 3277              	@ armwave.c:513:     g_armwave_state.draw_yoff = 0;
 513:armwave.c     ****     g_armwave_state.draw_width = target_width;
 3278              		.loc 1 513 31 view .LVU895
 3279 0f18 803085E5 		str	r3, [r5, #128]	@ tmp208, g_armwave_state.draw_yoff
 3280              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3281              		.loc 1 522 5 view .LVU896
 3282 0f1c 0210A0E1 		mov	r1, r2	@, tmp201
 3283              	@ armwave.c:520:         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 520:armwave.c     **** 
 3284              		.loc 1 520 44 view .LVU897
 3285 0f20 277A67EE 		vmul.f32	s15, s14, s15	@ tmp217, _18, tmp218
 3286              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3287              		.loc 1 522 5 view .LVU898
 3288 0f24 C75AB7EE 		vcvt.f64.f32	d5, s14	@ tmp222, _18
 3289              	@ armwave.c:518:     g_armwave_state.bitdepth_scale_fp = ((g_armwave_state.target_width * (1.0f / g
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3290              		.loc 1 518 39 view .LVU899
 3291 0f28 0A7A85ED 		vstr.32	s14, [r5, #40]	@ _18, g_armwave_state.bitdepth_scale_fp
 3292              	@ armwave.c:514:     g_armwave_state.draw_width = target_width;
 514:armwave.c     ****     g_armwave_state.draw_height = target_height;
 3293              		.loc 1 514 32 view .LVU900
 3294 0f2c 84A085E5 		str	r10, [r5, #132]	@ tmp179, g_armwave_state.draw_width
 3295              	@ armwave.c:515:     g_armwave_state.draw_height = target_height;
 515:armwave.c     **** 
 3296              		.loc 1 515 33 view .LVU901
 3297 0f30 888085E5 		str	r8, [r5, #136]	@ target_height, g_armwave_state.draw_height
 3298              	@ armwave.c:505:     g_armwave_state.size = target_height * target_width;
 505:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 3299              		.loc 1 505 26 view .LVU902
 3300 0f34 58E085E5 		str	lr, [r5, #88]	@ tmp194, g_armwave_state.size
 3301              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3302              		.loc 1 522 5 view .LVU903
 3303 0f38 78019FE5 		ldr	r0, .L134+32	@,
 3304              	@ armwave.c:501:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 501:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 3305              		.loc 1 501 30 view .LVU904
 3306 0f3c E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp189, _4
 3307              	@ armwave.c:519:     g_armwave_state.cmp_x_bitdepth_scale = \
 519:armwave.c     ****         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 3308              		.loc 1 519 42 view .LVU905
 3309 0f40 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp217
 3310              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3311              		.loc 1 522 5 view .LVU906
 3312 0f44 005B8DED 		vstr.64	d5, [sp]	@ tmp222,
 3313              	@ armwave.c:500:     g_armwave_state.vscale_frac = target_height / 255.0f;
 500:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 3314              		.loc 1 500 33 view .LVU907
 3315 0f48 0B6AC5ED 		vstr.32	s13, [r5, #44]	@ _4, g_armwave_state.vscale_frac
 501:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 3316              		.loc 1 501 5 is_stmt 1 view .LVU908
 3317              	@ armwave.c:501:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 501:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 3318              		.loc 1 501 30 is_stmt 0 view .LVU909
 3319 0f4c 0D7A85ED 		vstr.32	s14, [r5, #52]	@ int	@ tmp189, g_armwave_state.vscale
 502:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 3320              		.loc 1 502 5 is_stmt 1 view .LVU910
 503:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 3321              		.loc 1 503 5 view .LVU911
 504:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 3322              		.loc 1 504 5 view .LVU912
 505:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 3323              		.loc 1 505 5 view .LVU913
 506:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 3324              		.loc 1 506 5 view .LVU914
 507:armwave.c     ****     g_armwave_state.target_width = target_width;
 3325              		.loc 1 507 5 view .LVU915
 508:armwave.c     ****     g_armwave_state.target_height = target_height;
 3326              		.loc 1 508 5 view .LVU916
 509:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 3327              		.loc 1 509 5 view .LVU917
 510:armwave.c     ****     g_armwave_state.flags = render_flags;
 3328              		.loc 1 510 5 view .LVU918
 511:armwave.c     ****     g_armwave_state.draw_xoff = 0;
 3329              		.loc 1 511 5 view .LVU919
 512:armwave.c     ****     g_armwave_state.draw_yoff = 0;
 3330              		.loc 1 512 5 view .LVU920
 513:armwave.c     ****     g_armwave_state.draw_width = target_width;
 3331              		.loc 1 513 5 view .LVU921
 514:armwave.c     ****     g_armwave_state.draw_height = target_height;
 3332              		.loc 1 514 5 view .LVU922
 515:armwave.c     **** 
 3333              		.loc 1 515 5 view .LVU923
 518:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 3334              		.loc 1 518 5 view .LVU924
 519:armwave.c     ****         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 3335              		.loc 1 519 5 view .LVU925
 3336              	@ armwave.c:519:     g_armwave_state.cmp_x_bitdepth_scale = \
 519:armwave.c     ****         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 3337              		.loc 1 519 42 is_stmt 0 view .LVU926
 3338 0f50 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 3339              	@ armwave.c:522:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) (fp:%.3f), targ_widt
 3340              		.loc 1 522 5 view .LVU927
 3341 0f54 903A17EE 		vmov	r3, s15	@ int	@, _20
 3342              	@ armwave.c:519:     g_armwave_state.cmp_x_bitdepth_scale = \
 519:armwave.c     ****         (g_armwave_state.bitdepth_scale_fp * (1 << AM_XCOORD_MULT_SHIFT));
 3343              		.loc 1 519 42 view .LVU928
 3344 0f58 097AC5ED 		vstr.32	s15, [r5, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 3345              		.loc 1 522 5 is_stmt 1 view .LVU929
 3346 0f5c 0C20A0E1 		mov	r2, ip	@, tmp3
 3347 0f60 FEFFFFEB 		bl	printf		@
 3348              	.LVL170:
 523:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 524:armwave.c     ****         g_armwave_state.bitdepth_scale_fp, g_armwave_state.target_width, g_armwave_state.wave_lengt
 525:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 526:armwave.c     **** 
 527:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 528:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 529:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 530:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 3349              		.loc 1 530 5 view .LVU930
 3350              	@ armwave.c:532:     if(g_armwave_state.ch1_buffer != NULL)
 531:armwave.c     **** 
 532:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 3351              		.loc 1 532 23 is_stmt 0 view .LVU931
 3352 0f64 040095E5 		ldr	r0, [r5, #4]	@ _22, g_armwave_state.ch1_buffer
 3353              	@ armwave.c:530:     g_armwave_state.slice_height = 64; // 64;  
 530:armwave.c     **** 
 3354              		.loc 1 530 34 view .LVU932
 3355 0f68 4030A0E3 		mov	r3, #64	@ tmp224,
 3356              	@ armwave.c:532:     if(g_armwave_state.ch1_buffer != NULL)
 3357              		.loc 1 532 7 view .LVU933
 3358 0f6c 000050E3 		cmp	r0, #0	@ _22,
 3359              	@ armwave.c:530:     g_armwave_state.slice_height = 64; // 64;  
 530:armwave.c     **** 
 3360              		.loc 1 530 34 view .LVU934
 3361 0f70 483085E5 		str	r3, [r5, #72]	@ tmp224, g_armwave_state.slice_height
 3362              		.loc 1 532 5 is_stmt 1 view .LVU935
 3363              	@ armwave.c:532:     if(g_armwave_state.ch1_buffer != NULL)
 3364              		.loc 1 532 7 is_stmt 0 view .LVU936
 3365 0f74 0000000A 		beq	.L123		@,
 533:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 3366              		.loc 1 533 9 is_stmt 1 view .LVU937
 3367 0f78 FEFFFFEB 		bl	free		@
 3368              	.LVL171:
 3369              	.L123:
 534:armwave.c     **** 
 535:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 3370              		.loc 1 535 5 view .LVU938
 3371              	@ armwave.c:535:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 3372              		.loc 1 535 56 is_stmt 0 view .LVU939
 3373 0f7c 546095E5 		ldr	r6, [r5, #84]	@ _23, g_armwave_state.ch_buff_size
 3374              	@ armwave.c:535:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 3375              		.loc 1 535 34 view .LVU940
 3376 0f80 0110A0E3 		mov	r1, #1	@,
 3377 0f84 0600A0E1 		mov	r0, r6	@, _23
 3378 0f88 FEFFFFEB 		bl	calloc		@
 3379              	.LVL172:
 3380              	@ armwave.c:537:     if(g_armwave_state.ch1_buffer == NULL) {
 536:armwave.c     **** 
 537:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 3381              		.loc 1 537 7 view .LVU941
 3382 0f8c 000050E3 		cmp	r0, #0	@ _25,
 3383              	@ armwave.c:535:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 535:armwave.c     **** 
 3384              		.loc 1 535 34 view .LVU942
 3385 0f90 0070A0E1 		mov	r7, r0	@ _25,
 3386              	@ armwave.c:535:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 535:armwave.c     **** 
 3387              		.loc 1 535 32 view .LVU943
 3388 0f94 040085E5 		str	r0, [r5, #4]	@ _25, g_armwave_state.ch1_buffer
 3389              		.loc 1 537 5 is_stmt 1 view .LVU944
 3390              	@ armwave.c:537:     if(g_armwave_state.ch1_buffer == NULL) {
 3391              		.loc 1 537 7 is_stmt 0 view .LVU945
 3392 0f98 3700000A 		beq	.L133		@,
 538:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 539:armwave.c     ****         exit(-1);
 540:armwave.c     ****     }
 541:armwave.c     **** 
 542:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 543:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3393              		.loc 1 543 5 is_stmt 1 view .LVU946
 3394              	.LVL173:
 544:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3395              		.loc 1 544 5 view .LVU947
 3396              	@ armwave.c:543:     points_per_pixel = length / ((float)(target_width));
 543:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3397              		.loc 1 543 31 is_stmt 0 view .LVU948
 3398 0f9c 904A07EE 		vmov	s15, r4	@ int	@ length, length
 3399              	@ armwave.c:544:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3400              		.loc 1 544 77 view .LVU949
 3401 0fa0 484095E5 		ldr	r4, [r5, #72]	@ _29, g_armwave_state.slice_height
 3402              	.LVL174:
 3403              	@ armwave.c:543:     points_per_pixel = length / ((float)(target_width));
 543:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3404              		.loc 1 543 31 view .LVU950
 3405 0fa4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp233, length
 3406              	.LVL175:
 3407              	@ armwave.c:544:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3408              		.loc 1 544 60 view .LVU951
 3409 0fa8 104A07EE 		vmov	s14, r4	@ int	@ _29, _29
 3410              	@ armwave.c:546:     g_armwave_state.xcoord_to_xpixel = malloc(g_armwave_state.slice_height * sizeo
 545:armwave.c     **** 
 546:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(g_armwave_state.slice_height * sizeof(uint16_t));
 3411              		.loc 1 546 40 view .LVU952
 3412 0fac 8400A0E1 		lsl	r0, r4, #1	@, _29,
 3413              	@ armwave.c:544:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 544:armwave.c     **** 
 3414              		.loc 1 544 60 view .LVU953
 3415 0fb0 C76AF8EE 		vcvt.f32.s32	s13, s14	@ tmp235, _29
 3416              	@ armwave.c:543:     points_per_pixel = length / ((float)(target_width));
 543:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3417              		.loc 1 543 22 view .LVU954
 3418 0fb4 887A87EE 		vdiv.f32	s14, s15, s16	@ points_per_pixel, tmp233, _15
 3419              	.LVL176:
 3420              	@ armwave.c:544:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 544:armwave.c     **** 
 3421              		.loc 1 544 60 view .LVU955
 3422 0fb8 267A67EE 		vmul.f32	s15, s14, s13	@ tmp236, points_per_pixel, tmp235
 3423              	@ armwave.c:544:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 544:armwave.c     **** 
 3424              		.loc 1 544 41 view .LVU956
 3425 0fbc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp237, tmp236
 3426 0fc0 137AC5ED 		vstr.32	s15, [r5, #76]	@ int	@ tmp237, g_armwave_state.slice_record_height
 3427              		.loc 1 546 5 is_stmt 1 view .LVU957
 3428              	@ armwave.c:546:     g_armwave_state.xcoord_to_xpixel = malloc(g_armwave_state.slice_height * sizeo
 3429              		.loc 1 546 40 is_stmt 0 view .LVU958
 3430 0fc4 FEFFFFEB 		bl	malloc		@
 3431              	.LVL177:
 3432              	@ armwave.c:548:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 547:armwave.c     **** 
 548:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 3433              		.loc 1 548 5 view .LVU959
 3434 0fc8 000050E3 		cmp	r0, #0	@ _35,
 3435              	@ armwave.c:546:     g_armwave_state.xcoord_to_xpixel = malloc(g_armwave_state.slice_height * sizeo
 546:armwave.c     **** 
 3436              		.loc 1 546 40 view .LVU960
 3437 0fcc 0060A0E1 		mov	r6, r0	@ _35,
 3438              	@ armwave.c:546:     g_armwave_state.xcoord_to_xpixel = malloc(g_armwave_state.slice_height * sizeo
 546:armwave.c     **** 
 3439              		.loc 1 546 38 view .LVU961
 3440 0fd0 D00085E5 		str	r0, [r5, #208]	@ _35, g_armwave_state.xcoord_to_xpixel
 3441              		.loc 1 548 5 is_stmt 1 view .LVU962
 3442 0fd4 2300000A 		beq	.L126		@,
 3443              	.LVL178:
 3444              	@ armwave.c:550:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 549:armwave.c     **** 
 550:armwave.c     ****     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3445              		.loc 1 550 5 is_stmt 0 view .LVU963
 3446 0fd8 000054E3 		cmp	r4, #0	@ _29,
 3447 0fdc 0D00000A 		beq	.L128		@,
 3448              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 551:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdepth_scale_fp) * 256
 3449              		.loc 1 551 75 view .LVU964
 3450 0fe0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _37, g_armwave_state.bitdepth_scale_fp
 3451              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3452              		.loc 1 551 95 view .LVU965
 3453 0fe4 2E7A9FED 		vldr.32	s14, .L134+12	@ tmp248,
 3454 0fe8 020040E2 		sub	r0, r0, #2	@ ivtmp.189, _35,
 3455              	@ armwave.c:550:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 550:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdepth_scale_fp) * 256
 3456              		.loc 1 550 12 view .LVU966
 3457 0fec 0030A0E3 		mov	r3, #0	@ xx,
 3458              	.LVL179:
 3459              	.L129:
 3460              		.loc 1 551 9 is_stmt 1 discriminator 3 view .LVU967
 3461              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3462              		.loc 1 551 58 is_stmt 0 discriminator 3 view .LVU968
 3463 0ff0 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 3464              	@ armwave.c:550:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 550:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdepth_scale_fp) * 256
 3465              		.loc 1 550 54 discriminator 3 view .LVU969
 3466 0ff4 013083E2 		add	r3, r3, #1	@ xx, xx,
 3467              	.LVL180:
 3468              	@ armwave.c:550:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 550:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdepth_scale_fp) * 256
 3469              		.loc 1 550 5 discriminator 3 view .LVU970
 3470 0ff8 030054E1 		cmp	r4, r3	@ _29, xx
 3471              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3472              		.loc 1 551 58 discriminator 3 view .LVU971
 3473 0ffc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp245, xx
 3474 1000 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp246, tmp245, _37
 3475              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3476              		.loc 1 551 95 discriminator 3 view .LVU972
 3477 1004 877A67EE 		vmul.f32	s15, s15, s14	@ tmp247, tmp246, tmp248
 3478              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3479              		.loc 1 551 48 discriminator 3 view .LVU973
 3480 1008 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp249, tmp247
 3481              	@ armwave.c:551:         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdept
 3482              		.loc 1 551 46 discriminator 3 view .LVU974
 3483 100c 902A17EE 		vmov	r2, s15	@ int	@ tmp249, tmp249
 3484 1010 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp249, MEM[base: _135, offset: 0B]
 3485              	@ armwave.c:550:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 550:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (int)((xx * g_armwave_state.bitdepth_scale_fp) * 256
 3486              		.loc 1 550 5 discriminator 3 view .LVU975
 3487 1014 F5FFFF1A 		bne	.L129		@,
 3488              	.LVL181:
 3489              	.L128:
 552:armwave.c     ****         //printf("xcoord_to_xpixel[%5d] = %5d (addr: 0x%08x)\n", xx, g_armwave_state.xcoord_to_xpix
 553:armwave.c     ****     }
 554:armwave.c     ****     
 555:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3490              		.loc 1 555 5 is_stmt 1 view .LVU976
 3491              	@ armwave.c:555:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3492              		.loc 1 555 34 is_stmt 0 view .LVU977
 3493 1018 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.size, g_armwave_state.size
 3494 101c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 3495 1020 FEFFFFEB 		bl	malloc		@
 3496              	.LVL182:
 3497              	@ armwave.c:557:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 556:armwave.c     **** 
 557:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3498              		.loc 1 557 5 view .LVU978
 3499 1024 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3500 1028 0620A0E1 		mov	r2, r6	@, _35
 3501 102c 50308DE5 		str	r3, [sp, #80]	@ g_armwave_state.test_wave_buffer,
 3502 1030 0710A0E1 		mov	r1, r7	@, _25
 3503              	@ armwave.c:555:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 555:armwave.c     **** 
 3504              		.loc 1 555 34 view .LVU979
 3505 1034 00C0A0E1 		mov	ip, r0	@ tmp253,
 3506              	@ armwave.c:557:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3507              		.loc 1 557 5 view .LVU980
 3508 1038 0030A0E1 		mov	r3, r0	@, tmp253
 3509              	@ armwave.c:555:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 555:armwave.c     **** 
 3510              		.loc 1 555 32 view .LVU981
 3511 103c 94C085E5 		str	ip, [r5, #148]	@ tmp253, g_armwave_state.out_pixbuf
 3512              		.loc 1 557 5 is_stmt 1 view .LVU982
 3513 1040 74009FE5 		ldr	r0, .L134+36	@,
 3514              	@ armwave.c:564: }
 558:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 559:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 560:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 561:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 562:armwave.c     **** 
 563:armwave.c     ****      //malloc_stats();
 564:armwave.c     **** }
 3515              		.loc 1 564 1 is_stmt 0 view .LVU983
 3516 1044 24D08DE2 		add	sp, sp, #36	@,,
 3517              		.cfi_remember_state
 3518              		.cfi_def_cfa_offset 44
 3519              		@ sp needed	@
 3520 1048 028BBDEC 		vldm	sp!, {d8}	@
 3521              		.cfi_restore 80
 3522              		.cfi_restore 81
 3523              		.cfi_def_cfa_offset 36
 3524              	.LVL183:
 3525              		.loc 1 564 1 view .LVU984
 3526 104c F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3527              		.cfi_restore 14
 3528              		.cfi_restore 11
 3529              		.cfi_restore 10
 3530              		.cfi_restore 9
 3531              		.cfi_restore 8
 3532              		.cfi_restore 7
 3533              		.cfi_restore 6
 3534              		.cfi_restore 5
 3535              		.cfi_restore 4
 3536              		.cfi_def_cfa_offset 0
 3537              	.LVL184:
 3538              	@ armwave.c:557:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 557:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 3539              		.loc 1 557 5 view .LVU985
 3540 1050 FEFFFFEA 		b	printf		@
 3541              	.LVL185:
 3542              	.L132:
 3543              		.cfi_restore_state
 475:armwave.c     ****         return;
 3544              		.loc 1 475 9 is_stmt 1 view .LVU986
 3545 1054 64009FE5 		ldr	r0, .L134+40	@,
 3546              	@ armwave.c:564: }
 3547              		.loc 1 564 1 is_stmt 0 view .LVU987
 3548 1058 24D08DE2 		add	sp, sp, #36	@,,
 3549              		.cfi_remember_state
 3550              		.cfi_def_cfa_offset 44
 3551              		@ sp needed	@
 3552 105c 028BBDEC 		vldm	sp!, {d8}	@
 3553              		.cfi_restore 80
 3554              		.cfi_restore 81
 3555              		.cfi_def_cfa_offset 36
 3556 1060 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3557              		.cfi_restore 14
 3558              		.cfi_restore 11
 3559              		.cfi_restore 10
 3560              		.cfi_restore 9
 3561              		.cfi_restore 8
 3562              		.cfi_restore 7
 3563              		.cfi_restore 6
 3564              		.cfi_restore 5
 3565              		.cfi_restore 4
 3566              		.cfi_def_cfa_offset 0
 3567              	.LVL186:
 3568              	@ armwave.c:475:         printf("Error: start point more than end point\n");
 475:armwave.c     ****         return;
 3569              		.loc 1 475 9 view .LVU988
 3570 1064 FEFFFFEA 		b	puts		@
 3571              	.LVL187:
 3572              	.L126:
 3573              		.cfi_restore_state
 548:armwave.c     **** 
 3574              		.loc 1 548 5 is_stmt 1 discriminator 1 view .LVU989
 3575 1068 54309FE5 		ldr	r3, .L134+44	@,
 3576 106c 892FA0E3 		mov	r2, #548	@,
 3577 1070 50109FE5 		ldr	r1, .L134+48	@,
 3578 1074 50009FE5 		ldr	r0, .L134+52	@,
 3579 1078 FEFFFFEB 		bl	__assert_fail		@
 3580              	.LVL188:
 3581              	.L133:
 538:armwave.c     ****         exit(-1);
 3582              		.loc 1 538 9 view .LVU990
 3583 107c 4C309FE5 		ldr	r3, .L134+56	@ tmp230,
 3584 1080 0620A0E1 		mov	r2, r6	@, _23
 3585 1084 48109FE5 		ldr	r1, .L134+60	@,
 3586 1088 000093E5 		ldr	r0, [r3]	@, stderr
 3587 108c FEFFFFEB 		bl	fprintf		@
 3588              	.LVL189:
 539:armwave.c     ****     }
 3589              		.loc 1 539 9 view .LVU991
 3590 1090 0000E0E3 		mvn	r0, #0	@,
 3591 1094 FEFFFFEB 		bl	exit		@
 3592              	.LVL190:
 3593              	.L135:
 3594              		.align	2
 3595              	.L134:
 3596 1098 0000803F 		.word	1065353216
 3597 109c 00007F43 		.word	1132396544
 3598 10a0 00008047 		.word	1199570944
 3599 10a4 00008043 		.word	1132462080
 3600 10a8 8C000000 		.word	.LC5
 3601 10ac E0000000 		.word	.LC7
 3602 10b0 6A050000 		.word	1386
 3603 10b4 00000000 		.word	g_armwave_state
 3604 10b8 FC000000 		.word	.LC8
 3605 10bc E0010000 		.word	.LC12
 3606 10c0 B8000000 		.word	.LC6
 3607 10c4 00000000 		.word	.LANCHOR0
 3608 10c8 A8010000 		.word	.LC10
 3609 10cc B4010000 		.word	.LC11
 3610 10d0 00000000 		.word	stderr
 3611 10d4 64010000 		.word	.LC9
 3612              		.cfi_endproc
 3613              	.LFE67:
 3615              		.align	2
 3616              		.global	armwave_set_wave_pointer
 3617              		.syntax unified
 3618              		.arm
 3619              		.fpu vfp
 3621              	armwave_set_wave_pointer:
 3622              	.LVL191:
 3623              	.LFB68:
 565:armwave.c     **** 
 566:armwave.c     **** /*
 567:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 568:armwave.c     ****  * in the future.
 569:armwave.c     ****  */
 570:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 571:armwave.c     **** {
 3624              		.loc 1 571 1 view -0
 3625              		.cfi_startproc
 3626              		@ args = 0, pretend = 0, frame = 0
 3627              		@ frame_needed = 0, uses_anonymous_args = 0
 572:armwave.c     ****     assert(wave_buffer != NULL);
 3628              		.loc 1 572 5 view .LVU993
 3629              	@ armwave.c:571: {
 571:armwave.c     ****     assert(wave_buffer != NULL);
 3630              		.loc 1 571 1 is_stmt 0 view .LVU994
 3631 10d8 10402DE9 		push	{r4, lr}	@
 3632              		.cfi_def_cfa_offset 8
 3633              		.cfi_offset 4, -8
 3634              		.cfi_offset 14, -4
 3635              	@ armwave.c:572:     assert(wave_buffer != NULL);
 3636              		.loc 1 572 5 view .LVU995
 3637 10dc 004050E2 		subs	r4, r0, #0	@ wave_buffer, wave_buffer
 3638 10e0 0400000A 		beq	.L139		@,
 573:armwave.c     ****     printf("armwave_set_wave_pointer\n");
 3639              		.loc 1 573 5 is_stmt 1 view .LVU996
 3640 10e4 20009FE5 		ldr	r0, .L140	@,
 3641              	.LVL192:
 3642              		.loc 1 573 5 is_stmt 0 view .LVU997
 3643 10e8 FEFFFFEB 		bl	puts		@
 3644              	.LVL193:
 574:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 3645              		.loc 1 574 5 is_stmt 1 view .LVU998
 3646              	@ armwave.c:574:     g_armwave_state.wave_buffer = wave_buffer;
 3647              		.loc 1 574 33 is_stmt 0 view .LVU999
 3648 10ec 1C309FE5 		ldr	r3, .L140+4	@ tmp116,
 3649 10f0 144083E5 		str	r4, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 3650              	@ armwave.c:575: }
 575:armwave.c     **** }
 3651              		.loc 1 575 1 view .LVU1000
 3652 10f4 1080BDE8 		pop	{r4, pc}	@
 3653              	.LVL194:
 3654              	.L139:
 572:armwave.c     ****     printf("armwave_set_wave_pointer\n");
 3655              		.loc 1 572 5 is_stmt 1 discriminator 1 view .LVU1001
 3656 10f8 14309FE5 		ldr	r3, .L140+8	@,
 3657 10fc 8F2FA0E3 		mov	r2, #572	@,
 3658 1100 10109FE5 		ldr	r1, .L140+12	@,
 3659 1104 10009FE5 		ldr	r0, .L140+16	@,
 3660              	.LVL195:
 572:armwave.c     ****     printf("armwave_set_wave_pointer\n");
 3661              		.loc 1 572 5 is_stmt 0 discriminator 1 view .LVU1002
 3662 1108 FEFFFFEB 		bl	__assert_fail		@
 3663              	.LVL196:
 3664              	.L141:
 3665              		.align	2
 3666              	.L140:
 3667 110c 18020000 		.word	.LC14
 3668 1110 00000000 		.word	g_armwave_state
 3669 1114 18000000 		.word	.LANCHOR0+24
 3670 1118 A8010000 		.word	.LC10
 3671 111c 04020000 		.word	.LC13
 3672              		.cfi_endproc
 3673              	.LFE68:
 3675              		.align	2
 3676              		.global	armwave_set_wave_pointer_as_testbuf
 3677              		.syntax unified
 3678              		.arm
 3679              		.fpu vfp
 3681              	armwave_set_wave_pointer_as_testbuf:
 3682              	.LVL197:
 3683              	.LFB69:
 576:armwave.c     **** 
 577:armwave.c     **** /*
 578:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 579:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 580:armwave.c     ****  */
 581:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 582:armwave.c     **** {
 3684              		.loc 1 582 1 is_stmt 1 view -0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 0
 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 583:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3688              		.loc 1 583 5 view .LVU1004
 3689              	@ armwave.c:582: {
 582:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3690              		.loc 1 582 1 is_stmt 0 view .LVU1005
 3691 1120 70402DE9 		push	{r4, r5, r6, lr}	@
 3692              		.cfi_def_cfa_offset 16
 3693              		.cfi_offset 4, -16
 3694              		.cfi_offset 5, -12
 3695              		.cfi_offset 6, -8
 3696              		.cfi_offset 14, -4
 3697              	@ armwave.c:583:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3698              		.loc 1 583 29 view .LVU1006
 3699 1124 38509FE5 		ldr	r5, .L146	@ tmp117,
 3700              	@ armwave.c:583:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3701              		.loc 1 583 7 view .LVU1007
 3702 1128 203095E5 		ldr	r3, [r5, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 3703 112c 000053E1 		cmp	r3, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 3704 1130 0800003A 		bcc	.L145		@,
 584:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 585:armwave.c     ****         return;
 586:armwave.c     ****     }
 587:armwave.c     **** 
 588:armwave.c     ****     printf("armwave_set_wave_pointer_as_testbuf = %d\n", set);
 3705              		.loc 1 588 5 is_stmt 1 view .LVU1008
 3706 1134 0040A0E1 		mov	r4, r0	@ set, set
 3707 1138 0010A0E1 		mov	r1, r0	@, set
 3708 113c 24009FE5 		ldr	r0, .L146+4	@,
 3709              	.LVL198:
 3710              		.loc 1 588 5 is_stmt 0 view .LVU1009
 3711 1140 FEFFFFEB 		bl	printf		@
 3712              	.LVL199:
 589:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 3713              		.loc 1 589 5 is_stmt 1 view .LVU1010
 3714              	@ armwave.c:589:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3715              		.loc 1 589 111 is_stmt 0 view .LVU1011
 3716 1144 1C3095E5 		ldr	r3, [r5, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 3717              	@ armwave.c:589:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3718              		.loc 1 589 68 view .LVU1012
 3719 1148 180095E5 		ldr	r0, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3720 114c 930420E0 		mla	r0, r3, r4, r0	@ tmp126, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 3721              	@ armwave.c:589:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3722              		.loc 1 589 33 view .LVU1013
 3723 1150 140085E5 		str	r0, [r5, #20]	@ tmp126, g_armwave_state.wave_buffer
 3724              	@ armwave.c:590: }
 590:armwave.c     **** }
 3725              		.loc 1 590 1 view .LVU1014
 3726 1154 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3727              	.LVL200:
 3728              	.L145:
 584:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3729              		.loc 1 584 9 is_stmt 1 view .LVU1015
 3730 1158 0C009FE5 		ldr	r0, .L146+8	@,
 3731              	.LVL201:
 3732              	@ armwave.c:590: }
 3733              		.loc 1 590 1 is_stmt 0 view .LVU1016
 3734 115c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3735              		.cfi_restore 14
 3736              		.cfi_restore 6
 3737              		.cfi_restore 5
 3738              		.cfi_restore 4
 3739              		.cfi_def_cfa_offset 0
 3740              	@ armwave.c:584:         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 584:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3741              		.loc 1 584 9 view .LVU1017
 3742 1160 FEFFFFEA 		b	puts		@
 3743              	.LVL202:
 3744              	.L147:
 3745              		.align	2
 3746              	.L146:
 3747 1164 00000000 		.word	g_armwave_state
 3748 1168 70020000 		.word	.LC16
 3749 116c 34020000 		.word	.LC15
 3750              		.cfi_endproc
 3751              	.LFE69:
 3753              		.align	2
 3754              		.global	armwave_set_wave_pointer_u32
 3755              		.syntax unified
 3756              		.arm
 3757              		.fpu vfp
 3759              	armwave_set_wave_pointer_u32:
 3760              	.LVL203:
 3761              	.LFB70:
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 594:armwave.c     ****  * disjointed buffers in the future.
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 597:armwave.c     **** {
 3762              		.loc 1 597 1 is_stmt 1 view -0
 3763              		.cfi_startproc
 3764              		@ args = 0, pretend = 0, frame = 0
 3765              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3766              		.loc 1 598 5 view .LVU1019
 3767              	@ armwave.c:597: {
 597:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3768              		.loc 1 597 1 is_stmt 0 view .LVU1020
 3769 1170 10402DE9 		push	{r4, lr}	@
 3770              		.cfi_def_cfa_offset 8
 3771              		.cfi_offset 4, -8
 3772              		.cfi_offset 14, -4
 3773              	@ armwave.c:598:     assert(wave_buffer_ptr != 0);
 3774              		.loc 1 598 5 view .LVU1021
 3775 1174 004050E2 		subs	r4, r0, #0	@ wave_buffer_ptr, wave_buffer_ptr
 3776 1178 0500000A 		beq	.L151		@,
 599:armwave.c     ****     printf("armwave_set_wave_pointer_u32 = 0x%08x\n", wave_buffer_ptr);
 3777              		.loc 1 599 5 is_stmt 1 view .LVU1022
 3778 117c 0410A0E1 		mov	r1, r4	@, wave_buffer_ptr
 3779 1180 20009FE5 		ldr	r0, .L152	@,
 3780              	.LVL204:
 3781              		.loc 1 599 5 is_stmt 0 view .LVU1023
 3782 1184 FEFFFFEB 		bl	printf		@
 3783              	.LVL205:
 600:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3784              		.loc 1 600 5 is_stmt 1 view .LVU1024
 3785              	@ armwave.c:600:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3786              		.loc 1 600 33 is_stmt 0 view .LVU1025
 3787 1188 1C309FE5 		ldr	r3, .L152+4	@ tmp118,
 3788 118c 144083E5 		str	r4, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 3789              	@ armwave.c:601: }
 601:armwave.c     **** }
 3790              		.loc 1 601 1 view .LVU1026
 3791 1190 1080BDE8 		pop	{r4, pc}	@
 3792              	.LVL206:
 3793              	.L151:
 598:armwave.c     ****     printf("armwave_set_wave_pointer_u32 = 0x%08x\n", wave_buffer_ptr);
 3794              		.loc 1 598 5 is_stmt 1 discriminator 1 view .LVU1027
 3795 1194 14309FE5 		ldr	r3, .L152+8	@,
 3796 1198 14209FE5 		ldr	r2, .L152+12	@,
 3797 119c 14109FE5 		ldr	r1, .L152+16	@,
 3798 11a0 14009FE5 		ldr	r0, .L152+20	@,
 3799              	.LVL207:
 598:armwave.c     ****     printf("armwave_set_wave_pointer_u32 = 0x%08x\n", wave_buffer_ptr);
 3800              		.loc 1 598 5 is_stmt 0 discriminator 1 view .LVU1028
 3801 11a4 FEFFFFEB 		bl	__assert_fail		@
 3802              	.LVL208:
 3803              	.L153:
 3804              		.align	2
 3805              	.L152:
 3806 11a8 B4020000 		.word	.LC18
 3807 11ac 00000000 		.word	g_armwave_state
 3808 11b0 34000000 		.word	.LANCHOR0+52
 3809 11b4 56020000 		.word	598
 3810 11b8 A8010000 		.word	.LC10
 3811 11bc 9C020000 		.word	.LC17
 3812              		.cfi_endproc
 3813              	.LFE70:
 3815              		.align	2
 3816              		.global	armwave_clear_buffer
 3817              		.syntax unified
 3818              		.arm
 3819              		.fpu vfp
 3821              	armwave_clear_buffer:
 3822              	.LVL209:
 3823              	.LFB71:
 602:armwave.c     **** 
 603:armwave.c     **** /*
 604:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 605:armwave.c     ****  */
 606:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 607:armwave.c     **** {
 3824              		.loc 1 607 1 is_stmt 1 view -0
 3825              		.cfi_startproc
 3826              		@ args = 0, pretend = 0, frame = 0
 3827              		@ frame_needed = 0, uses_anonymous_args = 0
 3828              		@ link register save eliminated.
 608:armwave.c     ****     // Flags ignored, only one buffer cleared
 609:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3829              		.loc 1 609 5 view .LVU1030
 3830              	@ armwave.c:609:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3831              		.loc 1 609 58 is_stmt 0 view .LVU1031
 3832 11c0 0C309FE5 		ldr	r3, .L155	@ tmp114,
 3833              	@ armwave.c:609:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3834              		.loc 1 609 5 view .LVU1032
 3835 11c4 0010A0E3 		mov	r1, #0	@,
 3836 11c8 542093E5 		ldr	r2, [r3, #84]	@, g_armwave_state.ch_buff_size
 3837 11cc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 3838              	.LVL210:
 3839              		.loc 1 609 5 view .LVU1033
 3840 11d0 FEFFFFEA 		b	memset		@
 3841              	.LVL211:
 3842              	.L156:
 3843              		.align	2
 3844              	.L155:
 3845 11d4 00000000 		.word	g_armwave_state
 3846              		.cfi_endproc
 3847              	.LFE71:
 3849              		.align	2
 3850              		.global	armwave_set_channel_colour
 3851              		.syntax unified
 3852              		.arm
 3853              		.fpu vfp
 3855              	armwave_set_channel_colour:
 3856              	.LVL212:
 3857              	.LFB72:
 610:armwave.c     **** }
 611:armwave.c     **** 
 612:armwave.c     **** /*
 613:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.  
 614:armwave.c     ****  * `I` sets intensity multiplier for all colours.
 615:armwave.c     ****  */
 616:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b, float i, int pri_sec)
 617:armwave.c     **** {
 3858              		.loc 1 617 1 is_stmt 1 view -0
 3859              		.cfi_startproc
 3860              		@ args = 4, pretend = 0, frame = 16
 3861              		@ frame_needed = 0, uses_anonymous_args = 0
 3862              		@ link register save eliminated.
 618:armwave.c     ****     // Only 1ch supported for now
 619:armwave.c     ****     switch(ch) {
 3863              		.loc 1 619 5 view .LVU1035
 3864              	@ armwave.c:617: {
 617:armwave.c     ****     // Only 1ch supported for now
 3865              		.loc 1 617 1 is_stmt 0 view .LVU1036
 3866 11d8 10D04DE2 		sub	sp, sp, #16	@,,
 3867              		.cfi_def_cfa_offset 16
 3868              	@ armwave.c:619:     switch(ch) {
 3869              		.loc 1 619 5 view .LVU1037
 3870 11dc 010050E3 		cmp	r0, #1	@ ch,
 3871              	@ armwave.c:617: {
 617:armwave.c     ****     // Only 1ch supported for now
 3872              		.loc 1 617 1 view .LVU1038
 3873 11e0 0E008DE9 		stmib	sp, {r1, r2, r3}	@,,,
 3874              	@ armwave.c:619:     switch(ch) {
 3875              		.loc 1 619 5 view .LVU1039
 3876 11e4 1A00001A 		bne	.L157		@,
 620:armwave.c     ****         case 1:
 621:armwave.c     ****             if(pri_sec) {
 3877              		.loc 1 621 13 is_stmt 1 view .LVU1040
 3878 11e8 901A07EE 		vmov	s15, r1	@ int	@ r,
 3879              	@ armwave.c:622:                 g_armwave_state.ch1_color_a.r = r * i;
 622:armwave.c     ****                 g_armwave_state.ch1_color_a.r = r * i;
 3880              		.loc 1 622 47 is_stmt 0 view .LVU1041
 3881 11ec 68009FE5 		ldr	r0, .L161	@ tmp137,
 3882              	.LVL213:
 3883              		.loc 1 622 47 view .LVU1042
 3884 11f0 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp125, r
 3885 11f4 902A07EE 		vmov	s15, r2	@ int	@ g,
 3886 11f8 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp129, g
 3887 11fc 903A07EE 		vmov	s15, r3	@ int	@ b,
 3888              	@ armwave.c:621:             if(pri_sec) {
 621:armwave.c     ****                 g_armwave_state.ch1_color_a.r = r * i;
 3889              		.loc 1 621 15 view .LVU1043
 3890 1200 10309DE5 		ldr	r3, [sp, #16]	@ tmp146, pri_sec
 3891              	.LVL214:
 621:armwave.c     ****                 g_armwave_state.ch1_color_a.r = r * i;
 3892              		.loc 1 621 15 view .LVU1044
 3893 1204 806A66EE 		vmul.f32	s13, s13, s0	@ tmp126, tmp125, i
 3894 1208 000053E3 		cmp	r3, #0	@ tmp146,
 3895 120c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp133, b
 3896              	.LVL215:
 621:armwave.c     ****                 g_armwave_state.ch1_color_a.r = r * i;
 3897              		.loc 1 621 15 view .LVU1045
 3898 1210 007A27EE 		vmul.f32	s14, s14, s0	@ tmp130, tmp129, i
 3899 1214 E66AFDEE 		vcvt.s32.f32	s13, s13	@ tmp128, tmp126
 3900 1218 807A67EE 		vmul.f32	s15, s15, s0	@ tmp134, tmp133, i
 3901 121c C77ABDEE 		vcvt.s32.f32	s14, s14	@ tmp132, tmp130
 3902 1220 903A16EE 		vmov	r3, s13	@ int	@ tmp128, tmp128
 3903 1224 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp136, tmp134
 3904 1228 7310BFE6 		sxth	r1, r3	@ _35, tmp128
 3905              	.LVL216:
 621:armwave.c     ****                 g_armwave_state.ch1_color_a.r = r * i;
 3906              		.loc 1 621 15 view .LVU1046
 3907 122c 103A17EE 		vmov	r3, s14	@ int	@ tmp132, tmp132
 3908              	@ armwave.c:622:                 g_armwave_state.ch1_color_a.r = r * i;
 3909              		.loc 1 622 47 view .LVU1047
 3910 1230 B819C011 		strhne	r1, [r0, #152]	@ movhi	@ _35, g_armwave_state.ch1_color_a.r
 3911              	@ armwave.c:626:                 g_armwave_state.ch1_color_b.r = r * i;
 623:armwave.c     ****                 g_armwave_state.ch1_color_a.g = g * i;
 624:armwave.c     ****                 g_armwave_state.ch1_color_a.b = b * i;
 625:armwave.c     ****             } else {
 626:armwave.c     ****                 g_armwave_state.ch1_color_b.r = r * i;
 3912              		.loc 1 626 47 view .LVU1048
 3913 1234 BE19C001 		strheq	r1, [r0, #158]	@ movhi	@ _35, g_armwave_state.ch1_color_b.r
 3914 1238 7320BFE6 		sxth	r2, r3	@ _38, tmp132
 3915              	.LVL217:
 3916              		.loc 1 626 47 view .LVU1049
 3917 123c 903A17EE 		vmov	r3, s15	@ int	@ tmp136, tmp136
 3918              	@ armwave.c:623:                 g_armwave_state.ch1_color_a.g = g * i;
 623:armwave.c     ****                 g_armwave_state.ch1_color_a.g = g * i;
 3919              		.loc 1 623 47 view .LVU1050
 3920 1240 BA29C011 		strhne	r2, [r0, #154]	@ movhi	@ _38, g_armwave_state.ch1_color_a.g
 3921              	@ armwave.c:627:                 g_armwave_state.ch1_color_b.g = g * i;
 627:armwave.c     ****                 g_armwave_state.ch1_color_b.g = g * i;
 3922              		.loc 1 627 47 view .LVU1051
 3923 1244 B02AC001 		strheq	r2, [r0, #160]	@ movhi	@ _38, g_armwave_state.ch1_color_b.g
 3924 1248 7330BFE6 		sxth	r3, r3	@ _41, tmp136
 622:armwave.c     ****                 g_armwave_state.ch1_color_a.g = g * i;
 3925              		.loc 1 622 17 is_stmt 1 view .LVU1052
 623:armwave.c     ****                 g_armwave_state.ch1_color_a.g = g * i;
 3926              		.loc 1 623 17 view .LVU1053
 624:armwave.c     ****             } else {
 3927              		.loc 1 624 17 view .LVU1054
 3928              	@ armwave.c:624:                 g_armwave_state.ch1_color_a.b = b * i;
 624:armwave.c     ****             } else {
 3929              		.loc 1 624 47 is_stmt 0 view .LVU1055
 3930 124c BC39C011 		strhne	r3, [r0, #156]	@ movhi	@ _41, g_armwave_state.ch1_color_a.b
 626:armwave.c     ****                 g_armwave_state.ch1_color_b.g = g * i;
 3931              		.loc 1 626 17 is_stmt 1 view .LVU1056
 3932              		.loc 1 627 17 view .LVU1057
 628:armwave.c     ****                 g_armwave_state.ch1_color_b.b = b * i;
 3933              		.loc 1 628 17 view .LVU1058
 3934              	@ armwave.c:628:                 g_armwave_state.ch1_color_b.b = b * i;
 3935              		.loc 1 628 47 is_stmt 0 view .LVU1059
 3936 1250 B23AC001 		strheq	r3, [r0, #162]	@ movhi	@ _41, g_armwave_state.ch1_color_b.b
 3937              	.L157:
 3938              	@ armwave.c:632: }
 629:armwave.c     ****             }
 630:armwave.c     ****             break;
 631:armwave.c     ****     }
 632:armwave.c     **** }
 3939              		.loc 1 632 1 view .LVU1060
 3940 1254 10D08DE2 		add	sp, sp, #16	@,,
 3941              		.cfi_def_cfa_offset 0
 3942              		@ sp needed	@
 3943 1258 1EFF2FE1 		bx	lr	@
 3944              	.L162:
 3945              		.align	2
 3946              	.L161:
 3947 125c 00000000 		.word	g_armwave_state
 3948              		.cfi_endproc
 3949              	.LFE72:
 3951              		.align	2
 3952              		.global	armwave_set_channel_palette
 3953              		.syntax unified
 3954              		.arm
 3955              		.fpu vfp
 3957              	armwave_set_channel_palette:
 3958              	.LVL218:
 3959              	.LFB73:
 633:armwave.c     **** 
 634:armwave.c     **** /*
 635:armwave.c     ****  * Set and recalculate a channel's palette.  Needs to be done after changing channel colours.
 636:armwave.c     ****  */
 637:armwave.c     **** void armwave_set_channel_palette(int ch, int palette)
 638:armwave.c     **** {
 3960              		.loc 1 638 1 is_stmt 1 view -0
 3961              		.cfi_startproc
 3962              		@ args = 0, pretend = 0, frame = 8
 3963              		@ frame_needed = 0, uses_anonymous_args = 0
 639:armwave.c     ****     // Only 1ch supported for now
 640:armwave.c     ****     switch(ch) {
 3964              		.loc 1 640 5 view .LVU1062
 3965 1260 010050E3 		cmp	r0, #1	@ ch,
 3966 1264 1EFF2F11 		bxne	lr	@
 641:armwave.c     ****         case 1:
 642:armwave.c     ****             // Channels are 1-4 externally, 0-3 internally (hence ch0, ch1, ... for yuv_palette)
 643:armwave.c     ****             armwave_prep_yuv_palette(0, palette, &g_armwave_state.ch1_color_a, &g_armwave_state.ch1
 3967              		.loc 1 643 13 view .LVU1063
 3968              	.LVL219:
 3969              	.LBB154:
 3970              	.LBI154:
 198:armwave.c     **** {
 3971              		.loc 1 198 6 view .LVU1064
 3972              	.LBB155:
 200:armwave.c     ****     float h;
 3973              		.loc 1 200 5 view .LVU1065
 201:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 3974              		.loc 1 201 5 view .LVU1066
 202:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 3975              		.loc 1 202 5 view .LVU1067
 203:armwave.c     ****     
 3976              		.loc 1 203 5 view .LVU1068
 205:armwave.c     ****         printf("armwave: error: palette channel out of range %d\n", ch);
 3977              		.loc 1 205 5 view .LVU1069
 210:armwave.c     ****         case PLT_SINGLE_COLOUR:
 3978              		.loc 1 210 5 view .LVU1070
 3979              	.LBE155:
 3980              	.LBE154:
 3981              	@ armwave.c:638: {
 638:armwave.c     ****     // Only 1ch supported for now
 3982              		.loc 1 638 1 is_stmt 0 view .LVU1071
 3983 1268 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 3984              		.cfi_def_cfa_offset 24
 3985              		.cfi_offset 4, -24
 3986              		.cfi_offset 5, -20
 3987              		.cfi_offset 6, -16
 3988              		.cfi_offset 7, -12
 3989              		.cfi_offset 8, -8
 3990              		.cfi_offset 14, -4
 3991 126c 028B2DED 		vpush.64	{d8}	@
 3992              		.cfi_def_cfa_offset 32
 3993              		.cfi_offset 80, -32
 3994              		.cfi_offset 81, -28
 3995              	.LBB201:
 3996              	.LBB198:
 3997              	@ armwave.c:210:     switch(palette) {
 210:armwave.c     ****         case PLT_SINGLE_COLOUR:
 3998              		.loc 1 210 5 view .LVU1072
 3999 1270 010051E3 		cmp	r1, #1	@ palette,
 4000              	.LBE198:
 4001              	.LBE201:
 4002              	@ armwave.c:638: {
 638:armwave.c     ****     // Only 1ch supported for now
 4003              		.loc 1 638 1 view .LVU1073
 4004 1274 08D04DE2 		sub	sp, sp, #8	@,,
 4005              		.cfi_def_cfa_offset 40
 4006              	.LBB202:
 4007              	.LBB199:
 4008              	@ armwave.c:210:     switch(palette) {
 210:armwave.c     ****         case PLT_SINGLE_COLOUR:
 4009              		.loc 1 210 5 view .LVU1074
 4010 1278 0600000A 		beq	.L165		@,
 4011 127c 020051E3 		cmp	r1, #2	@ palette,
 4012 1280 8B00000A 		beq	.L166		@,
 4013 1284 000051E3 		cmp	r1, #0	@ palette,
 4014 1288 4600000A 		beq	.L189		@,
 4015              	.LVL220:
 4016              	.L163:
 210:armwave.c     ****         case PLT_SINGLE_COLOUR:
 4017              		.loc 1 210 5 view .LVU1075
 4018              	.LBE199:
 4019              	.LBE202:
 4020              	@ armwave.c:646: }
 644:armwave.c     ****             break;
 645:armwave.c     ****     }
 646:armwave.c     **** }
 4021              		.loc 1 646 1 view .LVU1076
 4022 128c 08D08DE2 		add	sp, sp, #8	@,,
 4023              		.cfi_remember_state
 4024              		.cfi_def_cfa_offset 32
 4025              		@ sp needed	@
 4026 1290 028BBDEC 		vldm	sp!, {d8}	@
 4027              		.cfi_restore 80
 4028              		.cfi_restore 81
 4029              		.cfi_def_cfa_offset 24
 4030 1294 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 4031              	.LVL221:
 4032              	.L165:
 4033              		.cfi_restore_state
 4034              	.LBB203:
 4035              	.LBB200:
 4036              	@ armwave.c:223:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 223:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4037              		.loc 1 223 30 view .LVU1077
 4038 1298 0C349FE5 		ldr	r3, .L190+48	@ tmp332,
 4039 129c 0C249FE5 		ldr	r2, .L190+52	@ ivtmp.213,
 4040              	.LBB156:
 4041              	.LBB157:
 4042              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4043              		.loc 1 96 33 view .LVU1078
 4044 12a0 F50ADFED 		vldr.32	s1, .L190	@ tmp342,
 4045 12a4 F869D3E1 		ldrsh	r6, [r3, #152]	@ _579, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].r
 4046 12a8 FA59D3E1 		ldrsh	r5, [r3, #154]	@ _576, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].g
 4047 12ac FC49D3E1 		ldrsh	r4, [r3, #156]	@ _573, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].b
 4048              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4049              		.loc 1 96 22 view .LVU1079
 4050 12b0 F21A9FED 		vldr.32	s2, .L190+4	@ tmp344,
 4051              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4052              		.loc 1 96 56 view .LVU1080
 4053 12b4 F21ADFED 		vldr.32	s3, .L190+8	@ tmp346,
 4054              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4055              		.loc 1 96 79 view .LVU1081
 4056 12b8 F22A9FED 		vldr.32	s4, .L190+12	@ tmp349,
 4057              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4058              		.loc 1 97 33 view .LVU1082
 4059 12bc F22ADFED 		vldr.32	s5, .L190+16	@ tmp354,
 4060              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4061              		.loc 1 97 22 view .LVU1083
 4062 12c0 F24ADFED 		vldr.32	s9, .L190+20	@ tmp356,
 4063              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4064              		.loc 1 97 56 view .LVU1084
 4065 12c4 F23A9FED 		vldr.32	s6, .L190+24	@ tmp358,
 4066              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4067              		.loc 1 97 79 view .LVU1085
 4068 12c8 F25A9FED 		vldr.32	s10, .L190+28	@ tmp361,
 4069              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4070              		.loc 1 98 56 view .LVU1086
 4071 12cc F23ADFED 		vldr.32	s7, .L190+32	@ tmp370,
 4072              	.LBE157:
 4073              	.LBE156:
 4074              	@ armwave.c:225:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4075              		.loc 1 225 30 view .LVU1087
 4076 12d0 0010A0E3 		mov	r1, #0	@ ivtmp.211,
 4077              	.LVL222:
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4078              		.loc 1 225 30 view .LVU1088
 4079 12d4 03EC42E2 		sub	lr, r2, #768	@ _565, ivtmp.213,
 4080 12d8 01C0A0E1 		mov	ip, r1	@ ivtmp.210, ivtmp.211
 4081 12dc 0100A0E1 		mov	r0, r1	@ ivtmp.209, ivtmp.211
 4082              	.LVL223:
 4083              	.L169:
 223:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4084              		.loc 1 223 17 is_stmt 1 view .LVU1089
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 4085              		.loc 1 224 17 view .LVU1090
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4086              		.loc 1 225 17 view .LVU1091
 227:armwave.c     ****             }
 4087              		.loc 1 227 17 view .LVU1092
 4088              	.LBB162:
 4089              	.LBI156:
  94:armwave.c     **** {
 4090              		.loc 1 94 6 view .LVU1093
 4091              	.LBB158:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4092              		.loc 1 96 5 view .LVU1094
 4093              	.LBE158:
 4094              	.LBE162:
 4095              	@ armwave.c:223:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 223:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4096              		.loc 1 223 30 is_stmt 0 view .LVU1095
 4097 12e0 4034A0E1 		asr	r3, r0, #8	@ tmp335, ivtmp.209,
 4098 12e4 FF0053E3 		cmp	r3, #255	@ tmp335,
 4099 12e8 FF30A0A3 		movge	r3, #255	@ tmp335,
 4100              	.LBB163:
 4101              	.LBB159:
 4102              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4103              		.loc 1 97 22 view .LVU1096
 4104 12ec 646AF0EE 		vmov.f32	s13, s9	@ tmp355, tmp356
 4105              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4106              		.loc 1 96 33 view .LVU1097
 4107 12f0 7330EFE6 		uxtb	r3, r3	@ tmp336, tmp335
 4108              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4109              		.loc 1 96 22 view .LVU1098
 4110 12f4 415AF0EE 		vmov.f32	s11, s2	@ tmp343, tmp344
 4111              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4112              		.loc 1 96 33 view .LVU1099
 4113 12f8 903A07EE 		vmov	s15, r3	@ int	@ tmp336, tmp336
 4114              	.LBE159:
 4115              	.LBE163:
 4116              	@ armwave.c:224:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 224:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 4117              		.loc 1 224 30 view .LVU1100
 4118 12fc 4C34A0E1 		asr	r3, ip, #8	@ tmp337, ivtmp.210,
 4119 1300 FF0053E3 		cmp	r3, #255	@ tmp337,
 4120 1304 FF30A0A3 		movge	r3, #255	@ tmp337,
 4121              	.LBB164:
 4122              	.LBB160:
 4123              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4124              		.loc 1 96 33 view .LVU1101
 4125 1308 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _89, tmp336
 4126              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4127              		.loc 1 96 56 view .LVU1102
 4128 130c 7330EFE6 		uxtb	r3, r3	@ tmp338, tmp337
 4129              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4130              		.loc 1 98 22 view .LVU1103
 4131 1310 646AB0EE 		vmov.f32	s12, s9	@ tmp367, tmp356
 4132              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4133              		.loc 1 96 56 view .LVU1104
 4134 1314 103A07EE 		vmov	s14, r3	@ int	@ tmp338, tmp338
 4135              	.LBE160:
 4136              	.LBE164:
 4137              	@ armwave.c:225:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 225:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4138              		.loc 1 225 30 view .LVU1105
 4139 1318 4134A0E1 		asr	r3, r1, #8	@ tmp339, ivtmp.211,
 4140 131c FF0053E3 		cmp	r3, #255	@ tmp339,
 4141 1320 FF30A0A3 		movge	r3, #255	@ tmp339,
 4142              	.LBB165:
 4143              	.LBB161:
 4144              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4145              		.loc 1 96 56 view .LVU1106
 4146 1324 C77AB8EE 		vcvt.f32.s32	s14, s14	@ _94, tmp338
 4147              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4148              		.loc 1 97 22 view .LVU1107
 4149 1328 A26A47EE 		vmla.f32	s13, s15, s5	@ tmp355, _89, tmp354
 4150              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4151              		.loc 1 96 22 view .LVU1108
 4152 132c A05A47EE 		vmla.f32	s11, s15, s1	@ tmp343, _89, tmp342
 4153              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4154              		.loc 1 96 79 view .LVU1109
 4155 1330 7330EFE6 		uxtb	r3, r3	@ tmp340, tmp339
 4156              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4157              		.loc 1 98 22 view .LVU1110
 4158 1334 856A07EE 		vmla.f32	s12, s15, s10	@ tmp367, _89, tmp361
 4159              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4160              		.loc 1 96 79 view .LVU1111
 4161 1338 903A07EE 		vmov	s15, r3	@ int	@ tmp340, tmp340
 4162              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4163              		.loc 1 98 79 view .LVU1112
 4164 133c E04A9FED 		vldr.32	s8, .L190+72	@ tmp373,
 4165 1340 032042E2 		sub	r2, r2, #3	@ ivtmp.213, ivtmp.213,
 4166 1344 060080E0 		add	r0, r0, r6	@ ivtmp.209, ivtmp.209, _579
 4167              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4168              		.loc 1 97 46 view .LVU1113
 4169 1348 436A47EE 		vmls.f32	s13, s14, s6	@ tmp355, _94, tmp358
 4170              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4171              		.loc 1 96 79 view .LVU1114
 4172 134c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _99, tmp340
 4173              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4174              		.loc 1 96 46 view .LVU1115
 4175 1350 215A47EE 		vmla.f32	s11, s14, s3	@ tmp347, _94, tmp346
 4176              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4177              		.loc 1 98 46 view .LVU1116
 4178 1354 636A07EE 		vmls.f32	s12, s14, s7	@ tmp371, _94, tmp370
 4179 1358 05C08CE0 		add	ip, ip, r5	@ ivtmp.210, ivtmp.210, _576
 4180 135c 041081E0 		add	r1, r1, r4	@ ivtmp.211, ivtmp.211, _573
 4181              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4182              		.loc 1 97 46 view .LVU1117
 4183 1360 667AB0EE 		vmov.f32	s14, s13	@ tmp359, tmp355
 4184              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4185              		.loc 1 96 69 view .LVU1118
 4186 1364 825A47EE 		vmla.f32	s11, s15, s4	@ tmp350, _99, tmp349
 4187              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4188              		.loc 1 98 69 view .LVU1119
 4189 1368 466AF0EE 		vmov.f32	s13, s12	@ tmp371, tmp371
 4190              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4191              		.loc 1 97 69 view .LVU1120
 4192 136c 857A07EE 		vmla.f32	s14, s15, s10	@ tmp359, _99, tmp361
 4193              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4194              		.loc 1 98 69 view .LVU1121
 4195 1370 C46A47EE 		vmls.f32	s13, s15, s8	@ tmp371, _99, tmp373
 4196              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4197              		.loc 1 97 69 view .LVU1122
 4198 1374 477AF0EE 		vmov.f32	s15, s14	@ tmp362, tmp359
 4199              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4200              		.loc 1 96 16 view .LVU1123
 4201 1378 E57ABCEE 		vcvt.u32.f32	s14, s11	@ tmp351, tmp350
 4202              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4203              		.loc 1 97 16 view .LVU1124
 4204 137c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp363, tmp362
 4205              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4206              		.loc 1 96 16 view .LVU1125
 4207 1380 108A17EE 		vmov	r8, s14	@ int	@ tmp351, tmp351
 4208              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4209              		.loc 1 98 16 view .LVU1126
 4210 1384 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp375, tmp374
 4211              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4212              		.loc 1 97 16 view .LVU1127
 4213 1388 903A17EE 		vmov	r3, s15	@ int	@ tmp363, tmp363
 4214              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4215              		.loc 1 96 16 view .LVU1128
 4216 138c 0083C2E5 		strb	r8, [r2, #768]	@ tmp351, MEM[base: _569, offset: 765B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4217              		.loc 1 97 5 is_stmt 1 view .LVU1129
 4218              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4219              		.loc 1 97 16 is_stmt 0 view .LVU1130
 4220 1390 0133C2E5 		strb	r3, [r2, #769]	@ tmp363, MEM[base: _569, offset: 766B]
  98:armwave.c     **** }
 4221              		.loc 1 98 5 is_stmt 1 view .LVU1131
 4222              	.LVL224:
 4223              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4224              		.loc 1 98 16 is_stmt 0 view .LVU1132
 4225 1394 107A17EE 		vmov	r7, s14	@ int	@ tmp375, tmp375
 4226 1398 0273C2E5 		strb	r7, [r2, #770]	@ tmp375, MEM[base: _569, offset: 767B]
 4227              	.LBE161:
 4228              	.LBE165:
 4229              	@ armwave.c:222:             for(v = 0; v < 256; v++) {
 222:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 4230              		.loc 1 222 13 view .LVU1133
 4231 139c 02005EE1 		cmp	lr, r2	@ _565, ivtmp.213
 4232 13a0 CEFFFF1A 		bne	.L169		@,
 4233 13a4 B8FFFFEA 		b	.L163		@
 4234              	.LVL225:
 4235              	.L189:
 4236              	@ armwave.c:213:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 213:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4237              		.loc 1 213 30 view .LVU1134
 4238 13a8 FC329FE5 		ldr	r3, .L190+48	@ tmp287,
 4239 13ac FC229FE5 		ldr	r2, .L190+52	@ ivtmp.203,
 4240              	.LBB166:
 4241              	.LBB167:
 4242              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4243              		.loc 1 96 33 view .LVU1135
 4244 13b0 B10ADFED 		vldr.32	s1, .L190	@ tmp297,
 4245 13b4 F869D3E1 		ldrsh	r6, [r3, #152]	@ _25, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].r
 4246 13b8 FA59D3E1 		ldrsh	r5, [r3, #154]	@ _46, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].g
 4247 13bc FC49D3E1 		ldrsh	r4, [r3, #156]	@ _590, MEM[(struct armwave_color_mix_t *)&g_armwave_state + 152B].b
 4248              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4249              		.loc 1 96 22 view .LVU1136
 4250 13c0 AE1A9FED 		vldr.32	s2, .L190+4	@ tmp299,
 4251              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4252              		.loc 1 96 56 view .LVU1137
 4253 13c4 AE1ADFED 		vldr.32	s3, .L190+8	@ tmp301,
 4254              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4255              		.loc 1 96 79 view .LVU1138
 4256 13c8 AE2A9FED 		vldr.32	s4, .L190+12	@ tmp304,
 4257              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4258              		.loc 1 97 33 view .LVU1139
 4259 13cc AE2ADFED 		vldr.32	s5, .L190+16	@ tmp309,
 4260              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4261              		.loc 1 97 22 view .LVU1140
 4262 13d0 AE4ADFED 		vldr.32	s9, .L190+20	@ tmp311,
 4263              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4264              		.loc 1 97 56 view .LVU1141
 4265 13d4 AE3A9FED 		vldr.32	s6, .L190+24	@ tmp313,
 4266              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4267              		.loc 1 97 79 view .LVU1142
 4268 13d8 AE5A9FED 		vldr.32	s10, .L190+28	@ tmp316,
 4269              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4270              		.loc 1 98 56 view .LVU1143
 4271 13dc AE3ADFED 		vldr.32	s7, .L190+32	@ tmp325,
 4272              	.LBE167:
 4273              	.LBE166:
 4274              	@ armwave.c:215:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4275              		.loc 1 215 30 view .LVU1144
 4276 13e0 01C0A0E1 		mov	ip, r1	@ ivtmp.201, ivtmp.202
 4277 13e4 0100A0E1 		mov	r0, r1	@ ivtmp.200, ivtmp.202
 4278              	.LVL226:
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4279              		.loc 1 215 30 view .LVU1145
 4280 13e8 03EC82E2 		add	lr, r2, #768	@ _582, ivtmp.203,
 4281              	.LVL227:
 4282              	.L168:
 213:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4283              		.loc 1 213 17 is_stmt 1 view .LVU1146
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 4284              		.loc 1 214 17 view .LVU1147
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4285              		.loc 1 215 17 view .LVU1148
 217:armwave.c     ****             }
 4286              		.loc 1 217 17 view .LVU1149
 4287              	.LBB172:
 4288              	.LBI166:
  94:armwave.c     **** {
 4289              		.loc 1 94 6 view .LVU1150
 4290              	.LBB168:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4291              		.loc 1 96 5 view .LVU1151
 4292              	.LBE168:
 4293              	.LBE172:
 4294              	@ armwave.c:213:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 213:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 4295              		.loc 1 213 30 is_stmt 0 view .LVU1152
 4296 13ec 4034A0E1 		asr	r3, r0, #8	@ tmp290, ivtmp.200,
 4297 13f0 FF0053E3 		cmp	r3, #255	@ tmp290,
 4298 13f4 FF30A0A3 		movge	r3, #255	@ tmp290,
 4299              	.LBB173:
 4300              	.LBB169:
 4301              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4302              		.loc 1 97 22 view .LVU1153
 4303 13f8 646AF0EE 		vmov.f32	s13, s9	@ tmp310, tmp311
 4304              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4305              		.loc 1 96 33 view .LVU1154
 4306 13fc 7330EFE6 		uxtb	r3, r3	@ tmp291, tmp290
 4307              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4308              		.loc 1 96 22 view .LVU1155
 4309 1400 415AF0EE 		vmov.f32	s11, s2	@ tmp298, tmp299
 4310              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4311              		.loc 1 96 33 view .LVU1156
 4312 1404 903A07EE 		vmov	s15, r3	@ int	@ tmp291, tmp291
 4313              	.LBE169:
 4314              	.LBE173:
 4315              	@ armwave.c:214:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 214:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 4316              		.loc 1 214 30 view .LVU1157
 4317 1408 4C34A0E1 		asr	r3, ip, #8	@ tmp292, ivtmp.201,
 4318 140c FF0053E3 		cmp	r3, #255	@ tmp292,
 4319 1410 FF30A0A3 		movge	r3, #255	@ tmp292,
 4320              	.LBB174:
 4321              	.LBB170:
 4322              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4323              		.loc 1 96 33 view .LVU1158
 4324 1414 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _59, tmp291
 4325              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4326              		.loc 1 96 56 view .LVU1159
 4327 1418 7330EFE6 		uxtb	r3, r3	@ tmp293, tmp292
 4328              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4329              		.loc 1 98 22 view .LVU1160
 4330 141c 646AB0EE 		vmov.f32	s12, s9	@ tmp322, tmp311
 4331              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4332              		.loc 1 96 56 view .LVU1161
 4333 1420 103A07EE 		vmov	s14, r3	@ int	@ tmp293, tmp293
 4334              	.LBE170:
 4335              	.LBE174:
 4336              	@ armwave.c:215:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 215:armwave.c     ****                 //printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 4337              		.loc 1 215 30 view .LVU1162
 4338 1424 4134A0E1 		asr	r3, r1, #8	@ tmp294, ivtmp.202,
 4339 1428 FF0053E3 		cmp	r3, #255	@ tmp294,
 4340 142c FF30A0A3 		movge	r3, #255	@ tmp294,
 4341              	.LBB175:
 4342              	.LBB171:
 4343              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4344              		.loc 1 96 56 view .LVU1163
 4345 1430 C77AB8EE 		vcvt.f32.s32	s14, s14	@ _64, tmp293
 4346              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4347              		.loc 1 97 22 view .LVU1164
 4348 1434 A26A47EE 		vmla.f32	s13, s15, s5	@ tmp310, _59, tmp309
 4349              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4350              		.loc 1 96 22 view .LVU1165
 4351 1438 A05A47EE 		vmla.f32	s11, s15, s1	@ tmp298, _59, tmp297
 4352              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4353              		.loc 1 96 79 view .LVU1166
 4354 143c 7330EFE6 		uxtb	r3, r3	@ tmp295, tmp294
 4355              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4356              		.loc 1 98 22 view .LVU1167
 4357 1440 856A07EE 		vmla.f32	s12, s15, s10	@ tmp322, _59, tmp316
 4358              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4359              		.loc 1 96 79 view .LVU1168
 4360 1444 903A07EE 		vmov	s15, r3	@ int	@ tmp295, tmp295
 4361              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4362              		.loc 1 98 79 view .LVU1169
 4363 1448 9D4A9FED 		vldr.32	s8, .L190+72	@ tmp328,
 4364 144c 032082E2 		add	r2, r2, #3	@ ivtmp.203, ivtmp.203,
 4365 1450 060080E0 		add	r0, r0, r6	@ ivtmp.200, ivtmp.200, _25
 4366              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4367              		.loc 1 97 46 view .LVU1170
 4368 1454 436A47EE 		vmls.f32	s13, s14, s6	@ tmp310, _64, tmp313
 4369              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4370              		.loc 1 96 79 view .LVU1171
 4371 1458 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _69, tmp295
 4372              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4373              		.loc 1 96 46 view .LVU1172
 4374 145c 215A47EE 		vmla.f32	s11, s14, s3	@ tmp302, _64, tmp301
 4375              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4376              		.loc 1 98 46 view .LVU1173
 4377 1460 636A07EE 		vmls.f32	s12, s14, s7	@ tmp326, _64, tmp325
 4378 1464 05C08CE0 		add	ip, ip, r5	@ ivtmp.201, ivtmp.201, _46
 4379 1468 041081E0 		add	r1, r1, r4	@ ivtmp.202, ivtmp.202, _590
 4380              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4381              		.loc 1 97 46 view .LVU1174
 4382 146c 667AB0EE 		vmov.f32	s14, s13	@ tmp314, tmp310
 4383              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4384              		.loc 1 96 69 view .LVU1175
 4385 1470 825A47EE 		vmla.f32	s11, s15, s4	@ tmp305, _69, tmp304
 4386              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4387              		.loc 1 98 69 view .LVU1176
 4388 1474 466AF0EE 		vmov.f32	s13, s12	@ tmp326, tmp326
 4389              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4390              		.loc 1 97 69 view .LVU1177
 4391 1478 857A07EE 		vmla.f32	s14, s15, s10	@ tmp314, _69, tmp316
 4392              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4393              		.loc 1 98 69 view .LVU1178
 4394 147c C46A47EE 		vmls.f32	s13, s15, s8	@ tmp326, _69, tmp328
 4395              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4396              		.loc 1 97 69 view .LVU1179
 4397 1480 477AF0EE 		vmov.f32	s15, s14	@ tmp317, tmp314
 4398              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4399              		.loc 1 96 16 view .LVU1180
 4400 1484 E57ABCEE 		vcvt.u32.f32	s14, s11	@ tmp306, tmp305
 4401              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4402              		.loc 1 97 16 view .LVU1181
 4403 1488 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp318, tmp317
 4404              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4405              		.loc 1 96 16 view .LVU1182
 4406 148c 108A17EE 		vmov	r8, s14	@ int	@ tmp306, tmp306
 4407              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4408              		.loc 1 98 16 view .LVU1183
 4409 1490 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp330, tmp329
 4410              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4411              		.loc 1 97 16 view .LVU1184
 4412 1494 903A17EE 		vmov	r3, s15	@ int	@ tmp318, tmp318
 4413              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4414              		.loc 1 96 16 view .LVU1185
 4415 1498 038042E5 		strb	r8, [r2, #-3]	@ tmp306, MEM[base: _586, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4416              		.loc 1 97 5 is_stmt 1 view .LVU1186
 4417              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4418              		.loc 1 97 16 is_stmt 0 view .LVU1187
 4419 149c 023042E5 		strb	r3, [r2, #-2]	@ tmp318, MEM[base: _586, offset: 1B]
  98:armwave.c     **** }
 4420              		.loc 1 98 5 is_stmt 1 view .LVU1188
 4421              	.LVL228:
 4422              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4423              		.loc 1 98 16 is_stmt 0 view .LVU1189
 4424 14a0 107A17EE 		vmov	r7, s14	@ int	@ tmp330, tmp330
 4425 14a4 017042E5 		strb	r7, [r2, #-1]	@ tmp330, MEM[base: _586, offset: 2B]
 4426              	.LBE171:
 4427              	.LBE175:
 4428              	@ armwave.c:212:             for(v = 0; v < 256; v++) {
 212:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 4429              		.loc 1 212 13 view .LVU1190
 4430 14a8 02005EE1 		cmp	lr, r2	@ _582, ivtmp.203
 4431 14ac CEFFFF1A 		bne	.L168		@,
 4432 14b0 75FFFFEA 		b	.L163		@
 4433              	.LVL229:
 4434              	.L166:
 4435              	@ armwave.c:236:                 if(v < 20) {
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 4436              		.loc 1 236 19 view .LVU1191
 4437 14b4 792A9FED 		vldr.32	s4, .L190+36	@ _363,
 4438              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4439              		.loc 1 237 48 view .LVU1192
 4440 14b8 791ADFED 		vldr.32	s3, .L190+40	@ tmp503,
 4441 14bc 6E2ADFED 		vldr.32	s5, .L190	@ tmp504,
 4442              	.LBB176:
 4443              	.LBB177:
 4444              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 4445              		.loc 1 142 9 view .LVU1193
 4446 14c0 784ADFED 		vldr.32	s9, .L190+44	@ _454,
 4447 14c4 6E3A9FED 		vldr.32	s6, .L190+8	@ tmp506,
 4448 14c8 713ADFED 		vldr.32	s7, .L190+24	@ tmp507,
 4449 14cc 724A9FED 		vldr.32	s8, .L190+32	@ tmp508,
 4450 14d0 D8E19FE5 		ldr	lr, .L190+52	@ ivtmp.220,
 4451              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 4452              		.loc 1 118 12 view .LVU1194
 4453 14d4 D8419FE5 		ldr	r4, .L190+56	@ tmp384,
 4454              	.LBE177:
 4455              	.LBE176:
 4456              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 4457              		.loc 1 232 19 view .LVU1195
 4458 14d8 00C0A0E3 		mov	ip, #0	@ v,
 4459              	.LVL230:
 4460              	.L180:
 233:armwave.c     ****                 hsv_temp.s = 255;
 4461              		.loc 1 233 17 is_stmt 1 view .LVU1196
 4462              	@ armwave.c:236:                 if(v < 20) {
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 4463              		.loc 1 236 19 is_stmt 0 view .LVU1197
 4464 14dc 13005CE3 		cmp	ip, #19	@ v,
 4465 14e0 7C00EFE6 		uxtb	r0, ip	@ _425, v
 234:armwave.c     ****                 
 4466              		.loc 1 234 17 is_stmt 1 view .LVU1198
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 4467              		.loc 1 236 17 view .LVU1199
 237:armwave.c     ****                 } else {
 4468              		.loc 1 237 21 view .LVU1200
 242:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[ch][v]); 
 4469              		.loc 1 242 17 view .LVU1201
 4470              	.LVL231:
 4471              	.LBB186:
 4472              	.LBI176:
 106:armwave.c     **** {
 4473              		.loc 1 106 6 view .LVU1202
 4474              	.LBB178:
 108:armwave.c     **** 
 4475              		.loc 1 108 5 view .LVU1203
 110:armwave.c     ****     {
 4476              		.loc 1 110 5 view .LVU1204
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 4477              		.loc 1 118 5 view .LVU1205
 4478              	.LBE178:
 4479              	.LBE186:
 4480              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4481              		.loc 1 237 48 is_stmt 0 view .LVU1206
 4482 14e4 90CA07DE 		vmovle	s15, ip	@ int	@ v, v
 4483              	.LBB187:
 4484              	.LBB179:
 4485              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 4486              		.loc 1 118 12 view .LVU1207
 4487 14e8 943080E0 		umull	r3, r0, r4, r0	@ tmp512, tmp383, tmp384, _425
 4488              	.LBE179:
 4489              	.LBE187:
 4490              	@ armwave.c:236:                 if(v < 20) {
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 4491              		.loc 1 236 19 view .LVU1208
 4492 14ec 421AB0CE 		vmovgt.f32	s2, s4	@ _363, _363
 4493              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4494              		.loc 1 237 48 view .LVU1209
 4495 14f0 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp377, v
 4496              	.LBB188:
 4497              	.LBB180:
 4498              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 4499              		.loc 1 119 38 view .LVU1210
 4500 14f4 2A20E0E3 		mvn	r2, #42	@ tmp386,
 4501              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 4502              		.loc 1 118 12 view .LVU1211
 4503 14f8 A001A0E1 		lsr	r0, r0, #3	@ region, tmp383,
 4504              	.LVL232:
 119:armwave.c     **** 
 4505              		.loc 1 119 5 is_stmt 1 view .LVU1212
 4506              	.LBE180:
 4507              	.LBE188:
 4508              	@ armwave.c:236:                 if(v < 20) {
 236:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 4509              		.loc 1 236 19 is_stmt 0 view .LVU1213
 4510 14fc FF10A0C3 		movgt	r1, #255	@ _361,
 4511              	.LBB189:
 4512              	.LBB181:
 4513              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 4514              		.loc 1 119 28 view .LVU1214
 4515 1500 92C022E0 		mla	r2, r2, r0, ip	@ tmp387, tmp386, region, v
 4516              	.LBE181:
 4517              	.LBE189:
 4518              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4519              		.loc 1 237 48 view .LVU1215
 4520 1504 A17A67DE 		vmulle.f32	s15, s15, s3	@ tmp378, tmp377, tmp503
 4521              	.LBB190:
 4522              	.LBB182:
 4523              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 4524              		.loc 1 119 15 view .LVU1216
 4525 1508 822082E0 		add	r2, r2, r2, lsl #1	@ tmp392, tmp387, tmp387,
 4526 150c 8220A0E1 		lsl	r2, r2, #1	@ tmp394, tmp392,
 4527 1510 7220EFE6 		uxtb	r2, r2	@ remainder, tmp394
 4528              	.LVL233:
 121:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 4529              		.loc 1 121 5 is_stmt 1 view .LVU1217
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4530              		.loc 1 122 5 view .LVU1218
 4531              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4532              		.loc 1 123 48 is_stmt 0 view .LVU1219
 4533 1514 FF3062E2 		rsb	r3, r2, #255	@ tmp402, remainder,
 4534              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4535              		.loc 1 122 41 view .LVU1220
 4536 1518 022462E0 		rsb	r2, r2, r2, lsl #8	@ tmp398, remainder, remainder,
 4537              	.LVL234:
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4538              		.loc 1 122 41 view .LVU1221
 4539              	.LBE182:
 4540              	.LBE190:
 4541              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4542              		.loc 1 237 32 view .LVU1222
 4543 151c E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp381, tmp378
 4544              	.LBB191:
 4545              	.LBB183:
 4546              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4547              		.loc 1 123 41 view .LVU1223
 4548 1520 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp405, tmp402, tmp402,
 4549              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4550              		.loc 1 122 54 view .LVU1224
 4551 1524 4224A0E1 		asr	r2, r2, #8	@ tmp399, tmp398,
 4552              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4553              		.loc 1 123 62 view .LVU1225
 4554 1528 4334A0E1 		asr	r3, r3, #8	@ tmp406, tmp405,
 4555              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4556              		.loc 1 123 27 view .LVU1226
 4557 152c FF3063E2 		rsb	r3, r3, #255	@ tmp407, tmp406,
 4558              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4559              		.loc 1 122 27 view .LVU1227
 4560 1530 FF2062E2 		rsb	r2, r2, #255	@ tmp400, tmp399,
 4561              	.LBE183:
 4562              	.LBE191:
 4563              	@ armwave.c:237:                     hsv_temp.v = (255 / 20.0f) * v;
 237:armwave.c     ****                 } else {
 4564              		.loc 1 237 32 view .LVU1228
 4565 1534 017ACDDD 		vstrle.32	s15, [sp, #4]	@ int	@ tmp381, %sfp
 4566 1538 0410DDD5 		ldrble	r1, [sp, #4]	@ zero_extendqisi2	@ _361, %sfp
 4567              	.LBB192:
 4568              	.LBB184:
 4569              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4570              		.loc 1 123 20 view .LVU1229
 4571 153c 910303E0 		mul	r3, r1, r3	@ tmp408, _361, tmp407
 4572 1540 901A07DE 		vmovle	s15, r1	@ int	@ _361, _361
 4573              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4574              		.loc 1 122 20 view .LVU1230
 4575 1544 910202E0 		mul	r2, r1, r2	@ tmp401, _361, tmp400
 4576              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4577              		.loc 1 123 70 view .LVU1231
 4578 1548 4334A0E1 		asr	r3, r3, #8	@ _176, tmp408,
 4579 154c E71AB8DE 		vcvtle.f32.s32	s2, s15	@ _363, _361
 4580              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 4581              		.loc 1 122 62 view .LVU1232
 4582 1550 4224A0E1 		asr	r2, r2, #8	@ _169, tmp401,
 4583              	.LVL235:
 123:armwave.c     **** 
 4584              		.loc 1 123 5 is_stmt 1 view .LVU1233
 4585              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 4586              		.loc 1 123 70 is_stmt 0 view .LVU1234
 4587 1554 903A07EE 		vmov	s15, r3	@ int	@ _176, _176
 4588              	.LVL236:
 125:armwave.c     ****     {
 4589              		.loc 1 125 5 is_stmt 1 view .LVU1235
 4590 1558 040050E3 		cmp	r0, #4	@ region,
 4591 155c 00F19F97 		ldrls	pc, [pc, r0, asl #2]	@ region
 4592 1560 7A0000EA 		b	.L172	@
 4593              	.L174:
 4594 1564 78150000 		.word	.L178
 4595 1568 0C170000 		.word	.L177
 4596 156c D0160000 		.word	.L176
 4597 1570 40160000 		.word	.L175
 4598 1574 FC150000 		.word	.L173
 4599              	.L178:
 4600 1578 447A9FED 		vldr.32	s14, .L190+20	@ tmp416,
 4601 157c 455ADFED 		vldr.32	s11, .L190+28	@ tmp420,
 4602 1580 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _449, _176
 4603 1584 406ADFED 		vldr.32	s13, .L190+16	@ tmp414,
 4604 1588 475AB0EE 		vmov.f32	s10, s14	@ tmp415, tmp416
 4605 158c 257A01EE 		vmla.f32	s14, s2, s11	@ tmp421, _363, tmp420
 4606 1590 3A6A9FED 		vldr.32	s12, .L190+4	@ tmp411,
 4607 1594 640AB0EE 		vmov.f32	s0, s9	@ _487, _454
 4608 1598 265A01EE 		vmla.f32	s10, s2, s13	@ tmp415, _363, tmp414
 4609 159c 648AB0EE 		vmov.f32	s16, s9	@ _462, _454
 4610 15a0 226A01EE 		vmla.f32	s12, s2, s5	@ _443, _363, tmp504
 4611 15a4 C47A07EE 		vmls.f32	s14, s15, s8	@ tmp421, _449, tmp508
 4612 15a8 456AF0EE 		vmov.f32	s13, s10	@ tmp415, tmp415
 4613 15ac 835A27EE 		vmul.f32	s10, s15, s6	@ _454, _449, tmp506
 4614 15b0 E36A47EE 		vmls.f32	s13, s15, s7	@ _485, _449, tmp507
 4615 15b4 477AF0EE 		vmov.f32	s15, s14	@ _510, tmp421
 4616              	.L179:
 4617              	.LVL237:
 125:armwave.c     ****     {
 4618              		.loc 1 125 5 is_stmt 0 view .LVU1236
 4619              	.LBE184:
 4620              	.LBE192:
 243:armwave.c     ****                 
 4621              		.loc 1 243 17 is_stmt 1 view .LVU1237
 4622              	.LBB193:
 4623              	.LBI193:
  94:armwave.c     **** {
 4624              		.loc 1 94 6 view .LVU1238
 4625              	.LBB194:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4626              		.loc 1 96 5 view .LVU1239
 4627              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4628              		.loc 1 98 16 is_stmt 0 view .LVU1240
 4629 15b8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp500, _510
 4630              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4631              		.loc 1 96 46 view .LVU1241
 4632 15bc 056A36EE 		vadd.f32	s12, s12, s10	@ tmp493, _443, _454
 4633              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4634              		.loc 1 97 69 view .LVU1242
 4635 15c0 806A76EE 		vadd.f32	s13, s13, s0	@ tmp497, _485, _487
 4636              	.LBE194:
 4637              	.LBE193:
 4638              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 4639              		.loc 1 232 34 view .LVU1243
 4640 15c4 01C08CE2 		add	ip, ip, #1	@ v, v,
 4641              	.LVL238:
 4642              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 4643              		.loc 1 232 13 view .LVU1244
 4644 15c8 010C5CE3 		cmp	ip, #256	@ v,
 4645 15cc 03E08EE2 		add	lr, lr, #3	@ ivtmp.220, ivtmp.220,
 4646              	.LBB196:
 4647              	.LBB195:
 4648              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4649              		.loc 1 98 16 view .LVU1245
 4650 15d0 903A17EE 		vmov	r3, s15	@ int	@ tmp500, tmp500
 4651              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4652              		.loc 1 96 69 view .LVU1246
 4653 15d4 086A36EE 		vadd.f32	s12, s12, s16	@ tmp494, tmp493, _462
 4654              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4655              		.loc 1 97 16 view .LVU1247
 4656 15d8 E67AFCEE 		vcvt.u32.f32	s15, s13	@ tmp498, tmp497
 4657              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 4658              		.loc 1 98 16 view .LVU1248
 4659 15dc 01304EE5 		strb	r3, [lr, #-1]	@ tmp500, MEM[base: _428, offset: 2B]
 4660              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4661              		.loc 1 97 16 view .LVU1249
 4662 15e0 902A17EE 		vmov	r2, s15	@ int	@ tmp498, tmp498
 4663              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4664              		.loc 1 96 16 view .LVU1250
 4665 15e4 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp495, tmp494
 4666              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4667              		.loc 1 97 16 view .LVU1251
 4668 15e8 02204EE5 		strb	r2, [lr, #-2]	@ tmp498, MEM[base: _428, offset: 1B]
 4669              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 4670              		.loc 1 96 16 view .LVU1252
 4671 15ec 903A17EE 		vmov	r3, s15	@ int	@ tmp495, tmp495
 4672 15f0 03304EE5 		strb	r3, [lr, #-3]	@ tmp495, MEM[base: _428, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 4673              		.loc 1 97 5 is_stmt 1 view .LVU1253
  98:armwave.c     **** }
 4674              		.loc 1 98 5 view .LVU1254
 4675              	.LVL239:
  98:armwave.c     **** }
 4676              		.loc 1 98 5 is_stmt 0 view .LVU1255
 4677              	.LBE195:
 4678              	.LBE196:
 4679              	@ armwave.c:232:             for(v = 0; v < 256; v++) {
 232:armwave.c     ****                 hsv_temp.h = v;
 4680              		.loc 1 232 13 view .LVU1256
 4681 15f4 B8FFFF1A 		bne	.L180		@,
 4682 15f8 23FFFFEA 		b	.L163		@
 4683              	.LVL240:
 4684              	.L173:
 4685              	.LBB197:
 4686              	.LBB185:
 140:armwave.c     ****             break;
 4687              		.loc 1 140 13 is_stmt 1 view .LVU1257
 140:armwave.c     ****             break;
 4688              		.loc 1 140 29 view .LVU1258
 140:armwave.c     ****             break;
 4689              		.loc 1 140 45 view .LVU1259
 141:armwave.c     ****         default:
 4690              		.loc 1 141 13 view .LVU1260
 4691 15fc E77AF8EE 		vcvt.f32.s32	s15, s15	@ _432, _176
 4692 1600 226ADFED 		vldr.32	s13, .L190+20	@ tmp471,
 4693 1604 235ADFED 		vldr.32	s11, .L190+28	@ tmp472,
 4694 1608 1F8A9FED 		vldr.32	s16, .L190+16	@ tmp470,
 4695 160c 1B6A9FED 		vldr.32	s12, .L190+4	@ tmp467,
 4696 1610 667AB0EE 		vmov.f32	s14, s13	@ tmp475, tmp471
 4697 1614 1B5A9FED 		vldr.32	s10, .L190+12	@ tmp468,
 4698 1618 290ADFED 		vldr.32	s1, .L190+72	@ tmp478,
 4699 161c 886A47EE 		vmla.f32	s13, s15, s16	@ _485, _432, tmp470
 4700 1620 A57A07EE 		vmla.f32	s14, s15, s11	@ tmp475, _432, tmp472
 4701 1624 A26A07EE 		vmla.f32	s12, s15, s5	@ _443, _432, tmp504
 4702 1628 058A21EE 		vmul.f32	s16, s2, s10	@ _462, _363, tmp468
 4703 162c 250A21EE 		vmul.f32	s0, s2, s11	@ _487, _363, tmp472
 4704              	@ armwave.c:139:         case 4:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 4705              		.loc 1 139 9 is_stmt 0 view .LVU1261
 4706 1630 645AB0EE 		vmov.f32	s10, s9	@ _454, _454
 4707 1634 477AF0EE 		vmov.f32	s15, s14	@ tmp475, tmp475
 4708 1638 607A41EE 		vmls.f32	s15, s2, s1	@ tmp475, _363, tmp478
 4709 163c DDFFFFEA 		b	.L179		@
 4710              	.LVL241:
 4711              	.L175:
 137:armwave.c     ****             break;
 4712              		.loc 1 137 13 is_stmt 1 view .LVU1262
 137:armwave.c     ****             break;
 4713              		.loc 1 137 29 view .LVU1263
 137:armwave.c     ****             break;
 4714              		.loc 1 137 45 view .LVU1264
 138:armwave.c     ****         case 4:
 4715              		.loc 1 138 13 view .LVU1265
 4716 1640 902A07EE 		vmov	s15, r2	@ int	@ _169, _169
 4717 1644 116ADFED 		vldr.32	s13, .L190+20	@ tmp457,
 4718 1648 0E5A9FED 		vldr.32	s10, .L190+12	@ tmp454,
 4719 164c 1C5ADFED 		vldr.32	s11, .L190+72	@ tmp464,
 4720 1650 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _448, _169
 4721 1654 667AF0EE 		vmov.f32	s15, s13	@ tmp461, tmp457
 4722 1658 0E0A9FED 		vldr.32	s0, .L190+28	@ tmp458,
 4723 165c 058A21EE 		vmul.f32	s16, s2, s10	@ _462, _363, tmp454
 4724              	@ armwave.c:136:         case 3:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 4725              		.loc 1 136 9 is_stmt 0 view .LVU1266
 4726 1660 066A9FED 		vldr.32	s12, .L190+4	@ _443,
 4727 1664 000A21EE 		vmul.f32	s0, s2, s0	@ _487, _363, tmp458
 4728 1668 447A47EE 		vmls.f32	s15, s14, s8	@ tmp461, _448, tmp508
 4729 166c 636A47EE 		vmls.f32	s13, s14, s7	@ _485, _448, tmp507
 4730 1670 035A27EE 		vmul.f32	s10, s14, s6	@ _454, _448, tmp506
 4731 1674 657A41EE 		vmls.f32	s15, s2, s11	@ _510, _363, tmp464
 4732 1678 CEFFFFEA 		b	.L179		@
 4733              	.L191:
 4734              		.align	2
 4735              	.L190:
 4736 167c 6F12833E 		.word	1048777327
 4737 1680 00008041 		.word	1098907648
 4738 1684 2506013F 		.word	1057031717
 4739 1688 F0A7C63D 		.word	1036429296
 4740 168c 508D17BE 		.word	-1105752752
 4741 1690 00000043 		.word	1124073472
 4742 1694 F4FD943E 		.word	1049951732
 4743 1698 9CC4E03E 		.word	1054917788
 4744 169c 7F6ABC3E 		.word	1052535423
 4745 16a0 00007F43 		.word	1132396544
 4746 16a4 00004C41 		.word	1095499776
 4747 16a8 00000000 		.word	0
 4748 16ac 00000000 		.word	g_armwave_state
 4749 16b0 00000000 		.word	g_yuv_lut
 4750 16b4 83BEA02F 		.word	799063683
 4751 16b8 00000043 		.word	1124073472
 4752 16bc 9CC4E03E 		.word	1054917788
 4753 16c0 508D17BE 		.word	-1105752752
 4754 16c4 7368913D 		.word	1032939635
 4755 16c8 F0A7C63D 		.word	1036429296
 4756 16cc 00008041 		.word	1098907648
 4757              	.LVL242:
 4758              	.L176:
 134:armwave.c     ****             break;
 4759              		.loc 1 134 13 is_stmt 1 view .LVU1267
 134:armwave.c     ****             break;
 4760              		.loc 1 134 29 view .LVU1268
 134:armwave.c     ****             break;
 4761              		.loc 1 134 53 view .LVU1269
 135:armwave.c     ****         case 3:
 4762              		.loc 1 135 13 view .LVU1270
 4763 16d0 086A5FED 		vldr.32	s13, .L190+60	@ tmp445,
 4764 16d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _459, _176
 4765 16d8 075A5FED 		vldr.32	s11, .L190+72	@ tmp452,
 4766 16dc 078A1FED 		vldr.32	s16, .L190+76	@ tmp442,
 4767 16e0 667AB0EE 		vmov.f32	s14, s13	@ tmp449, tmp445
 4768 16e4 0C0A1FED 		vldr.32	s0, .L190+64	@ tmp446,
 4769 16e8 636A41EE 		vmls.f32	s13, s2, s7	@ _485, _363, tmp507
 4770 16ec 035A21EE 		vmul.f32	s10, s2, s6	@ _454, _363, tmp506
 4771 16f0 447A01EE 		vmls.f32	s14, s2, s8	@ tmp449, _363, tmp508
 4772 16f4 888A27EE 		vmul.f32	s16, s15, s16	@ _462, _459, tmp442
 4773 16f8 800A27EE 		vmul.f32	s0, s15, s0	@ _487, _459, tmp446
 4774              	@ armwave.c:133:         case 2:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 4775              		.loc 1 133 9 is_stmt 0 view .LVU1271
 4776 16fc 0E6A1FED 		vldr.32	s12, .L190+80	@ _443,
 4777 1700 E57A07EE 		vmls.f32	s14, s15, s11	@ tmp449, _459, tmp452
 4778 1704 477AF0EE 		vmov.f32	s15, s14	@ _510, tmp449
 4779 1708 AAFFFFEA 		b	.L179		@
 4780              	.LVL243:
 4781              	.L177:
 131:armwave.c     ****             break;
 4782              		.loc 1 131 13 is_stmt 1 view .LVU1272
 131:armwave.c     ****             break;
 4783              		.loc 1 131 29 view .LVU1273
 131:armwave.c     ****             break;
 4784              		.loc 1 131 53 view .LVU1274
 132:armwave.c     ****         case 2:
 4785              		.loc 1 132 13 view .LVU1275
 4786 170c 902A07EE 		vmov	s15, r2	@ int	@ _169, _169
 4787 1710 166A5FED 		vldr.32	s13, .L190+68	@ tmp430,
 4788 1714 187A1FED 		vldr.32	s14, .L190+64	@ tmp436,
 4789 1718 156A1FED 		vldr.32	s12, .L190+80	@ tmp427,
 4790 171c E75AF8EE 		vcvt.f32.s32	s11, s15	@ _433, _169
 4791 1720 1C7A5FED 		vldr.32	s15, .L190+60	@ tmp432,
 4792 1724 035A21EE 		vmul.f32	s10, s2, s6	@ _454, _363, tmp506
 4793              	@ armwave.c:130:         case 1:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 4794              		.loc 1 130 9 is_stmt 0 view .LVU1276
 4795 1728 640AB0EE 		vmov.f32	s0, s9	@ _487, _454
 4796 172c 648AB0EE 		vmov.f32	s16, s9	@ _462, _454
 4797 1730 670AF0EE 		vmov.f32	s1, s15	@ tmp431, tmp432
 4798 1734 877A45EE 		vmla.f32	s15, s11, s14	@ tmp437, _433, tmp436
 4799 1738 A60A45EE 		vmla.f32	s1, s11, s13	@ tmp431, _433, tmp430
 4800 173c A26A05EE 		vmla.f32	s12, s11, s5	@ _443, _433, tmp504
 4801 1740 447A41EE 		vmls.f32	s15, s2, s8	@ _510, _363, tmp508
 4802 1744 606AF0EE 		vmov.f32	s13, s1	@ tmp431, tmp431
 4803 1748 636A41EE 		vmls.f32	s13, s2, s7	@ _485, _363, tmp507
 4804 174c 99FFFFEA 		b	.L179		@
 4805              	.LVL244:
 4806              	.L172:
 143:armwave.c     ****             break;
 4807              		.loc 1 143 13 is_stmt 1 view .LVU1277
 143:armwave.c     ****             break;
 4808              		.loc 1 143 37 view .LVU1278
 143:armwave.c     ****             break;
 4809              		.loc 1 143 53 view .LVU1279
 144:armwave.c     ****     }
 4810              		.loc 1 144 13 view .LVU1280
 4811 1750 287A1FED 		vldr.32	s14, .L190+60	@ tmp485,
 4812 1754 902A07EE 		vmov	s15, r2	@ int	@ _169, _169
 4813 1758 296A5FED 		vldr.32	s13, .L190+64	@ tmp486,
 4814 175c 298A5FED 		vldr.32	s17, .L190+68	@ tmp484,
 4815 1760 290A5FED 		vldr.32	s1, .L190+72	@ tmp492,
 4816 1764 E75AF8EE 		vcvt.f32.s32	s11, s15	@ _457, _169
 4817 1768 477AF0EE 		vmov.f32	s15, s14	@ tmp489, tmp485
 4818 176c 287A01EE 		vmla.f32	s14, s2, s17	@ tmp485, _363, tmp484
 4819 1770 2C8A1FED 		vldr.32	s16, .L190+76	@ tmp482,
 4820 1774 2C6A1FED 		vldr.32	s12, .L190+80	@ tmp481,
 4821 1778 267A41EE 		vmla.f32	s15, s2, s13	@ tmp489, _363, tmp486
 4822              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 4823              		.loc 1 142 9 is_stmt 0 view .LVU1281
 4824 177c 645AB0EE 		vmov.f32	s10, s9	@ _454, _454
 4825 1780 A60A25EE 		vmul.f32	s0, s11, s13	@ _487, _457, tmp486
 4826 1784 888A25EE 		vmul.f32	s16, s11, s16	@ _462, _457, tmp482
 4827 1788 476AF0EE 		vmov.f32	s13, s14	@ _485, tmp485
 4828 178c 226A01EE 		vmla.f32	s12, s2, s5	@ _443, _363, tmp504
 4829 1790 E07A45EE 		vmls.f32	s15, s11, s1	@ _510, _457, tmp492
 4830 1794 87FFFFEA 		b	.L179		@
 4831              	.LBE185:
 4832              	.LBE197:
 4833              	.LBE200:
 4834              	.LBE203:
 4835              		.cfi_endproc
 4836              	.LFE73:
 4838              		.align	2
 4839              		.global	armwave_set_graticule_colour
 4840              		.syntax unified
 4841              		.arm
 4842              		.fpu vfp
 4844              	armwave_set_graticule_colour:
 4845              	.LVL245:
 4846              	.LFB74:
 647:armwave.c     **** 
 648:armwave.c     **** /*
 649:armwave.c     ****  * Set the graticule colour.
 650:armwave.c     ****  */
 651:armwave.c     **** void armwave_set_graticule_colour(int r, int g, int b)
 652:armwave.c     **** {
 4847              		.loc 1 652 1 is_stmt 1 view -0
 4848              		.cfi_startproc
 4849              		@ args = 0, pretend = 0, frame = 0
 4850              		@ frame_needed = 0, uses_anonymous_args = 0
 653:armwave.c     ****     /*
 654:armwave.c     ****     g_grat_colour.red = r * 255;
 655:armwave.c     ****     g_grat_colour.green = g * 255;
 656:armwave.c     ****     g_grat_colour.blue = b * 255;
 657:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 658:armwave.c     ****     */
 659:armwave.c     ****     printf("armwave_set_graticule_colour()\n");
 4851              		.loc 1 659 5 view .LVU1283
 4852              	@ armwave.c:652: {
 652:armwave.c     ****     /*
 4853              		.loc 1 652 1 is_stmt 0 view .LVU1284
 4854 1798 70402DE9 		push	{r4, r5, r6, lr}	@
 4855              		.cfi_def_cfa_offset 16
 4856              		.cfi_offset 4, -16
 4857              		.cfi_offset 5, -12
 4858              		.cfi_offset 6, -8
 4859              		.cfi_offset 14, -4
 4860              	@ armwave.c:652: {
 652:armwave.c     ****     /*
 4861              		.loc 1 652 1 view .LVU1285
 4862 179c 0060A0E1 		mov	r6, r0	@ r, r
 4863              	@ armwave.c:659:     printf("armwave_set_graticule_colour()\n");
 4864              		.loc 1 659 5 view .LVU1286
 4865 17a0 48009FE5 		ldr	r0, .L194	@,
 4866              	.LVL246:
 4867              	@ armwave.c:652: {
 652:armwave.c     ****     /*
 4868              		.loc 1 652 1 view .LVU1287
 4869 17a4 0150A0E1 		mov	r5, r1	@ g, g
 4870 17a8 0240A0E1 		mov	r4, r2	@ b, b
 4871              	@ armwave.c:659:     printf("armwave_set_graticule_colour()\n");
 4872              		.loc 1 659 5 view .LVU1288
 4873 17ac FEFFFFEB 		bl	puts		@
 4874              	.LVL247:
 660:armwave.c     ****     
 661:armwave.c     ****     /*
 662:armwave.c     ****     r &= 0xff;
 663:armwave.c     ****     g &= 0xff;
 664:armwave.c     ****     b &= 0xff;
 665:armwave.c     ****     g_armwave_state.grat_colour_main = 0xff000000 | (b << 16) | (g << 8) | r;
 666:armwave.c     ****     */
 667:armwave.c     ****     
 668:armwave.c     ****     g_grat_colour.red = r * 255;
 4875              		.loc 1 668 5 is_stmt 1 view .LVU1289
 4876              	@ armwave.c:668:     g_grat_colour.red = r * 255;
 4877              		.loc 1 668 23 is_stmt 0 view .LVU1290
 4878 17b0 3C309FE5 		ldr	r3, .L194+4	@ tmp122,
 4879              	@ armwave.c:672:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 669:armwave.c     ****     g_grat_colour.green = g * 255;
 670:armwave.c     ****     g_grat_colour.blue = b * 255;
 671:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 672:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 4880              		.loc 1 672 5 view .LVU1291
 4881 17b4 3C209FE5 		ldr	r2, .L194+8	@ tmp146,
 4882 17b8 3C109FE5 		ldr	r1, .L194+12	@ tmp144,
 4883              	@ armwave.c:668:     g_grat_colour.red = r * 255;
 668:armwave.c     ****     g_grat_colour.green = g * 255;
 4884              		.loc 1 668 23 view .LVU1292
 4885 17bc 066466E0 		rsb	r6, r6, r6, lsl #8	@ tmp127, r, r,
 4886              	.LVL248:
 4887              	@ armwave.c:669:     g_grat_colour.green = g * 255;
 669:armwave.c     ****     g_grat_colour.green = g * 255;
 4888              		.loc 1 669 25 view .LVU1293
 4889 17c0 055465E0 		rsb	r5, r5, r5, lsl #8	@ tmp133, g, g,
 4890              	.LVL249:
 4891              	@ armwave.c:670:     g_grat_colour.blue = b * 255;
 670:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 4892              		.loc 1 670 24 view .LVU1294
 4893 17c4 044464E0 		rsb	r4, r4, r4, lsl #8	@ tmp139, b, b,
 4894              	.LVL250:
 4895              	@ armwave.c:671:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 671:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 4896              		.loc 1 671 25 view .LVU1295
 4897 17c8 07C0A0E3 		mov	ip, #7	@ tmp141,
 4898              	@ armwave.c:672:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 4899              		.loc 1 672 5 view .LVU1296
 4900 17cc 000092E5 		ldr	r0, [r2]	@, g_dpy
 4901              	@ armwave.c:668:     g_grat_colour.red = r * 255;
 668:armwave.c     ****     g_grat_colour.green = g * 255;
 4902              		.loc 1 668 23 view .LVU1297
 4903 17d0 B460C3E1 		strh	r6, [r3, #4]	@ movhi	@ tmp127, g_grat_colour.red
 669:armwave.c     ****     g_grat_colour.blue = b * 255;
 4904              		.loc 1 669 5 is_stmt 1 view .LVU1298
 4905              	@ armwave.c:669:     g_grat_colour.green = g * 255;
 669:armwave.c     ****     g_grat_colour.blue = b * 255;
 4906              		.loc 1 669 25 is_stmt 0 view .LVU1299
 4907 17d4 B650C3E1 		strh	r5, [r3, #6]	@ movhi	@ tmp133, g_grat_colour.green
 670:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 4908              		.loc 1 670 5 is_stmt 1 view .LVU1300
 4909              	@ armwave.c:670:     g_grat_colour.blue = b * 255;
 670:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 4910              		.loc 1 670 24 is_stmt 0 view .LVU1301
 4911 17d8 B840C3E1 		strh	r4, [r3, #8]	@ movhi	@ tmp139, g_grat_colour.blue
 671:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 4912              		.loc 1 671 5 is_stmt 1 view .LVU1302
 4913              	@ armwave.c:671:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 671:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 4914              		.loc 1 671 25 is_stmt 0 view .LVU1303
 4915 17dc 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp141, g_grat_colour.flags
 4916              		.loc 1 672 5 is_stmt 1 view .LVU1304
 4917 17e0 341091E5 		ldr	r1, [r1, #52]	@, g_xswa.colormap
 4918 17e4 0320A0E1 		mov	r2, r3	@, tmp122
 4919              	@ armwave.c:674: }
 673:armwave.c     ****     //g_armwave_state.grat_colour_main = g_grat_colour.pixel;
 674:armwave.c     **** }
 4920              		.loc 1 674 1 is_stmt 0 view .LVU1305
 4921 17e8 7040BDE8 		pop	{r4, r5, r6, lr}	@
 4922              		.cfi_restore 14
 4923              		.cfi_restore 6
 4924              		.cfi_restore 5
 4925              		.cfi_restore 4
 4926              		.cfi_def_cfa_offset 0
 4927              	@ armwave.c:672:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 672:armwave.c     ****     //g_armwave_state.grat_colour_main = g_grat_colour.pixel;
 4928              		.loc 1 672 5 view .LVU1306
 4929 17ec FEFFFFEA 		b	XAllocColor		@
 4930              	.LVL251:
 4931              	.L195:
 4932              		.align	2
 4933              	.L194:
 4934 17f0 DC020000 		.word	.LC19
 4935 17f4 00000000 		.word	g_grat_colour
 4936 17f8 00000000 		.word	g_dpy
 4937 17fc 00000000 		.word	g_xswa
 4938              		.cfi_endproc
 4939              	.LFE74:
 4941              		.align	2
 4942              		.global	armwave_set_graticule_subcolour
 4943              		.syntax unified
 4944              		.arm
 4945              		.fpu vfp
 4947              	armwave_set_graticule_subcolour:
 4948              	.LVL252:
 4949              	.LFB75:
 675:armwave.c     ****     
 676:armwave.c     **** /*
 677:armwave.c     ****  * Set the graticule sub colour.
 678:armwave.c     ****  */
 679:armwave.c     **** void armwave_set_graticule_subcolour(int r, int g, int b)
 680:armwave.c     **** {
 4950              		.loc 1 680 1 is_stmt 1 view -0
 4951              		.cfi_startproc
 4952              		@ args = 0, pretend = 0, frame = 0
 4953              		@ frame_needed = 0, uses_anonymous_args = 0
 681:armwave.c     ****     g_grat_subcolour.red = r * 255;
 4954              		.loc 1 681 5 view .LVU1308
 4955              	@ armwave.c:681:     g_grat_subcolour.red = r * 255;
 4956              		.loc 1 681 26 is_stmt 0 view .LVU1309
 4957 1800 3C309FE5 		ldr	r3, .L198	@ tmp121,
 4958              	@ armwave.c:680: {
 680:armwave.c     ****     g_grat_subcolour.red = r * 255;
 4959              		.loc 1 680 1 view .LVU1310
 4960 1804 70402DE9 		push	{r4, r5, r6, lr}	@
 4961              		.cfi_def_cfa_offset 16
 4962              		.cfi_offset 4, -16
 4963              		.cfi_offset 5, -12
 4964              		.cfi_offset 6, -8
 4965              		.cfi_offset 14, -4
 4966              	@ armwave.c:681:     g_grat_subcolour.red = r * 255;
 4967              		.loc 1 681 26 view .LVU1311
 4968 1808 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 4969              	@ armwave.c:685:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 682:armwave.c     ****     g_grat_subcolour.green = g * 255;
 683:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 684:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 685:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 4970              		.loc 1 685 5 view .LVU1312
 4971 180c 34609FE5 		ldr	r6, .L198+4	@ tmp143,
 4972 1810 34509FE5 		ldr	r5, .L198+8	@ tmp145,
 4973              	@ armwave.c:682:     g_grat_subcolour.green = g * 255;
 682:armwave.c     ****     g_grat_subcolour.green = g * 255;
 4974              		.loc 1 682 28 view .LVU1313
 4975 1814 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 4976              	@ armwave.c:683:     g_grat_subcolour.blue = b * 255;
 683:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 4977              		.loc 1 683 27 view .LVU1314
 4978 1818 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 4979              	@ armwave.c:681:     g_grat_subcolour.red = r * 255;
 681:armwave.c     ****     g_grat_subcolour.green = g * 255;
 4980              		.loc 1 681 26 view .LVU1315
 4981 181c B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_subcolour.red
 682:armwave.c     ****     g_grat_subcolour.green = g * 255;
 4982              		.loc 1 682 5 is_stmt 1 view .LVU1316
 4983              	@ armwave.c:684:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 684:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 4984              		.loc 1 684 28 is_stmt 0 view .LVU1317
 4985 1820 07C0A0E3 		mov	ip, #7	@ tmp140,
 4986              	@ armwave.c:685:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 4987              		.loc 1 685 5 view .LVU1318
 4988 1824 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 4989              	.LVL253:
 4990              		.loc 1 685 5 view .LVU1319
 4991 1828 000095E5 		ldr	r0, [r5]	@, g_dpy
 4992              	.LVL254:
 4993              	@ armwave.c:682:     g_grat_subcolour.green = g * 255;
 682:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 4994              		.loc 1 682 28 view .LVU1320
 4995 182c B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_subcolour.green
 683:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 4996              		.loc 1 683 5 is_stmt 1 view .LVU1321
 4997              	@ armwave.c:683:     g_grat_subcolour.blue = b * 255;
 683:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 4998              		.loc 1 683 27 is_stmt 0 view .LVU1322
 4999 1830 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_subcolour.blue
 684:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 5000              		.loc 1 684 5 is_stmt 1 view .LVU1323
 5001              	@ armwave.c:684:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 684:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 5002              		.loc 1 684 28 is_stmt 0 view .LVU1324
 5003 1834 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_subcolour.flags
 5004              		.loc 1 685 5 is_stmt 1 view .LVU1325
 5005 1838 0320A0E1 		mov	r2, r3	@, tmp121
 5006              	.LVL255:
 5007              	@ armwave.c:686: }
 686:armwave.c     **** }
 5008              		.loc 1 686 1 is_stmt 0 view .LVU1326
 5009 183c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 5010              		.cfi_restore 14
 5011              		.cfi_restore 6
 5012              		.cfi_restore 5
 5013              		.cfi_restore 4
 5014              		.cfi_def_cfa_offset 0
 5015              	@ armwave.c:685:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 685:armwave.c     **** }
 5016              		.loc 1 685 5 view .LVU1327
 5017 1840 FEFFFFEA 		b	XAllocColor		@
 5018              	.LVL256:
 5019              	.L199:
 5020              		.align	2
 5021              	.L198:
 5022 1844 00000000 		.word	g_grat_subcolour
 5023 1848 00000000 		.word	g_xswa
 5024 184c 00000000 		.word	g_dpy
 5025              		.cfi_endproc
 5026              	.LFE75:
 5028              		.align	2
 5029              		.global	armwave_set_graticule_dims
 5030              		.syntax unified
 5031              		.arm
 5032              		.fpu vfp
 5034              	armwave_set_graticule_dims:
 5035              	.LVL257:
 5036              	.LFB76:
 687:armwave.c     **** 
 688:armwave.c     **** /*
 689:armwave.c     ****  * Set the graticule dimensions.
 690:armwave.c     ****  */
 691:armwave.c     **** void armwave_set_graticule_dims(int marg, int n_hdiv, int n_vdiv, int n_subhdiv, int n_subvdiv, flo
 692:armwave.c     **** {
 5037              		.loc 1 692 1 is_stmt 1 view -0
 5038              		.cfi_startproc
 5039              		@ args = 4, pretend = 0, frame = 0
 5040              		@ frame_needed = 0, uses_anonymous_args = 0
 693:armwave.c     ****     if(marg > 0) {
 5041              		.loc 1 693 5 view .LVU1329
 5042              	@ armwave.c:693:     if(marg > 0) {
 5043              		.loc 1 693 7 is_stmt 0 view .LVU1330
 5044 1850 000050E3 		cmp	r0, #0	@ marg
 5045              	@ armwave.c:692: {
 692:armwave.c     ****     if(marg > 0) {
 5046              		.loc 1 692 1 view .LVU1331
 5047 1854 04E02DE5 		str	lr, [sp, #-4]!	@,
 5048              		.cfi_def_cfa_offset 4
 5049              		.cfi_offset 14, -4
 5050              	@ armwave.c:694:         g_armwave_state.frame_margin = marg;
 694:armwave.c     ****         g_armwave_state.frame_margin = marg;
 5051              		.loc 1 694 38 view .LVU1332
 5052 1858 58E09FC5 		ldrgt	lr, .L210	@ tmp120,
 5053              	@ armwave.c:692: {
 692:armwave.c     ****     if(marg > 0) {
 5054              		.loc 1 692 1 view .LVU1333
 5055 185c 04C09DE5 		ldr	ip, [sp, #4]	@ n_subvdiv, n_subvdiv
 5056              		.loc 1 694 9 is_stmt 1 view .LVU1334
 5057              	@ armwave.c:694:         g_armwave_state.frame_margin = marg;
 5058              		.loc 1 694 38 is_stmt 0 view .LVU1335
 5059 1860 5C008EC5 		strgt	r0, [lr, #92]	@ marg, g_armwave_state.frame_margin
 695:armwave.c     ****     }
 696:armwave.c     ****     
 697:armwave.c     ****     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 5060              		.loc 1 697 5 is_stmt 1 view .LVU1336
 5061              	@ armwave.c:697:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 5062              		.loc 1 697 7 is_stmt 0 view .LVU1337
 5063 1864 000051E3 		cmp	r1, #0	@ n_hdiv,
 5064 1868 020000DA 		ble	.L202		@,
 5065              	@ armwave.c:697:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 5066              		.loc 1 697 19 discriminator 1 view .LVU1338
 5067 186c 010011E3 		tst	r1, #1	@ n_hdiv,
 698:armwave.c     ****         g_armwave_state.n_hdiv = n_hdiv;
 5068              		.loc 1 698 9 is_stmt 1 discriminator 1 view .LVU1339
 5069              	@ armwave.c:698:         g_armwave_state.n_hdiv = n_hdiv;
 5070              		.loc 1 698 32 is_stmt 0 discriminator 1 view .LVU1340
 5071 1870 40009F05 		ldreq	r0, .L210	@ tmp122,
 5072              	.LVL258:
 5073              		.loc 1 698 32 discriminator 1 view .LVU1341
 5074 1874 60108005 		streq	r1, [r0, #96]	@ n_hdiv, g_armwave_state.n_hdiv
 5075              	.L202:
 699:armwave.c     ****     }
 700:armwave.c     ****     
 701:armwave.c     ****     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 5076              		.loc 1 701 5 is_stmt 1 view .LVU1342
 5077              	@ armwave.c:701:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 5078              		.loc 1 701 7 is_stmt 0 view .LVU1343
 5079 1878 000052E3 		cmp	r2, #0	@ n_vdiv,
 5080 187c 020000DA 		ble	.L203		@,
 5081              	@ armwave.c:701:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 5082              		.loc 1 701 19 discriminator 1 view .LVU1344
 5083 1880 010012E3 		tst	r2, #1	@ n_vdiv,
 702:armwave.c     ****         g_armwave_state.n_vdiv = n_vdiv;
 5084              		.loc 1 702 9 is_stmt 1 discriminator 1 view .LVU1345
 5085              	@ armwave.c:702:         g_armwave_state.n_vdiv = n_vdiv;
 5086              		.loc 1 702 32 is_stmt 0 discriminator 1 view .LVU1346
 5087 1884 2C109F05 		ldreq	r1, .L210	@ tmp124,
 5088              	.LVL259:
 5089              		.loc 1 702 32 discriminator 1 view .LVU1347
 5090 1888 64208105 		streq	r2, [r1, #100]	@ n_vdiv, g_armwave_state.n_vdiv
 5091              	.L203:
 703:armwave.c     ****     }
 704:armwave.c     ****     
 705:armwave.c     ****     if(n_subhdiv > 0) {
 5092              		.loc 1 705 5 is_stmt 1 view .LVU1348
 5093              	@ armwave.c:705:     if(n_subhdiv > 0) {
 5094              		.loc 1 705 7 is_stmt 0 view .LVU1349
 5095 188c 000053E3 		cmp	r3, #0	@ n_subhdiv,
 706:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 5096              		.loc 1 706 9 is_stmt 1 view .LVU1350
 5097              	@ armwave.c:713:     if(subdiv_frac > 0) {
 707:armwave.c     ****     }
 708:armwave.c     ****     
 709:armwave.c     ****     if(n_subvdiv > 0) {
 710:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 711:armwave.c     ****     }
 712:armwave.c     ****     
 713:armwave.c     ****     if(subdiv_frac > 0) {
 5098              		.loc 1 713 7 is_stmt 0 view .LVU1351
 5099 1890 C00AB5EE 		vcmpe.f32	s0, #0	@ subdiv_frac
 5100              	@ armwave.c:706:         g_armwave_state.n_subhdiv = n_subhdiv;
 706:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 5101              		.loc 1 706 35 view .LVU1352
 5102 1894 1C209FC5 		ldrgt	r2, .L210	@ tmp125,
 5103              	.LVL260:
 706:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 5104              		.loc 1 706 35 view .LVU1353
 5105 1898 683082C5 		strgt	r3, [r2, #104]	@ n_subhdiv, g_armwave_state.n_subhdiv
 709:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 5106              		.loc 1 709 5 is_stmt 1 view .LVU1354
 5107              	@ armwave.c:709:     if(n_subvdiv > 0) {
 709:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 5108              		.loc 1 709 7 is_stmt 0 view .LVU1355
 5109 189c 00005CE3 		cmp	ip, #0	@ n_subvdiv,
 710:armwave.c     ****     }
 5110              		.loc 1 710 9 is_stmt 1 view .LVU1356
 5111              	@ armwave.c:710:         g_armwave_state.n_subvdiv = n_subvdiv;
 710:armwave.c     ****     }
 5112              		.loc 1 710 35 is_stmt 0 view .LVU1357
 5113 18a0 10309FC5 		ldrgt	r3, .L210	@ tmp126,
 5114              	.LVL261:
 710:armwave.c     ****     }
 5115              		.loc 1 710 35 view .LVU1358
 5116 18a4 6CC083C5 		strgt	ip, [r3, #108]	@ n_subvdiv, g_armwave_state.n_subvdiv
 5117              		.loc 1 713 5 is_stmt 1 view .LVU1359
 5118              	@ armwave.c:713:     if(subdiv_frac > 0) {
 5119              		.loc 1 713 7 is_stmt 0 view .LVU1360
 5120 18a8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 714:armwave.c     ****         g_armwave_state.subdiv_frac = subdiv_frac;
 5121              		.loc 1 714 9 is_stmt 1 view .LVU1361
 5122              	@ armwave.c:714:         g_armwave_state.subdiv_frac = subdiv_frac;
 5123              		.loc 1 714 37 is_stmt 0 view .LVU1362
 5124 18ac 04309FC5 		ldrgt	r3, .L210	@ tmp128,
 5125 18b0 1C0A83CD 		vstrgt.32	s0, [r3, #112]	@ subdiv_frac, g_armwave_state.subdiv_frac
 5126              	@ armwave.c:716: }
 715:armwave.c     ****     }
 716:armwave.c     **** }
 5127              		.loc 1 716 1 view .LVU1363
 5128 18b4 04F09DE4 		ldr	pc, [sp], #4	@
 5129              	.L211:
 5130              		.align	2
 5131              	.L210:
 5132 18b8 00000000 		.word	g_armwave_state
 5133              		.cfi_endproc
 5134              	.LFE76:
 5136              		.align	2
 5137              		.global	armwave_test_buffer_alloc
 5138              		.syntax unified
 5139              		.arm
 5140              		.fpu vfp
 5142              	armwave_test_buffer_alloc:
 5143              	.LVL262:
 5144              	.LFB77:
 717:armwave.c     **** 
 718:armwave.c     **** /*
 719:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 720:armwave.c     ****  */
 721:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 722:armwave.c     **** {
 5145              		.loc 1 722 1 is_stmt 1 view -0
 5146              		.cfi_startproc
 5147              		@ args = 0, pretend = 0, frame = 0
 5148              		@ frame_needed = 0, uses_anonymous_args = 0
 723:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 5149              		.loc 1 723 5 view .LVU1365
 5150              	@ armwave.c:722: {
 722:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 5151              		.loc 1 722 1 is_stmt 0 view .LVU1366
 5152 18bc 70402DE9 		push	{r4, r5, r6, lr}	@
 5153              		.cfi_def_cfa_offset 16
 5154              		.cfi_offset 4, -16
 5155              		.cfi_offset 5, -12
 5156              		.cfi_offset 6, -8
 5157              		.cfi_offset 14, -4
 5158              	@ armwave.c:722: {
 722:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 5159              		.loc 1 722 1 view .LVU1367
 5160 18c0 0060A0E1 		mov	r6, r0	@ nsets, nsets
 5161              	@ armwave.c:723:     if(g_armwave_state.test_wave_buffer != NULL) {
 5162              		.loc 1 723 23 view .LVU1368
 5163 18c4 48409FE5 		ldr	r4, .L219	@ tmp133,
 5164 18c8 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 5165              	.LVL263:
 5166              	@ armwave.c:723:     if(g_armwave_state.test_wave_buffer != NULL) {
 5167              		.loc 1 723 7 view .LVU1369
 5168 18cc 000050E3 		cmp	r0, #0	@ _1,
 5169 18d0 0000000A 		beq	.L213		@,
 724:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5170              		.loc 1 724 9 is_stmt 1 view .LVU1370
 5171 18d4 FEFFFFEB 		bl	free		@
 5172              	.LVL264:
 5173              	.L213:
 725:armwave.c     ****     }
 726:armwave.c     **** 
 727:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 728:armwave.c     **** 
 729:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armwave_state.waves_m
 5174              		.loc 1 729 5 view .LVU1371
 5175              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 5176              		.loc 1 729 92 is_stmt 0 view .LVU1372
 5177 18d8 405094E5 		ldr	r5, [r4, #64]	@ _3, g_armwave_state.waves_max
 5178              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 5179              		.loc 1 729 75 view .LVU1373
 5180 18dc 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 5181              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 5182              		.loc 1 729 40 view .LVU1374
 5183 18e0 0610A0E1 		mov	r1, r6	@, nsets
 5184 18e4 900500E0 		mul	r0, r0, r5	@, g_armwave_state.wave_stride, _3
 5185 18e8 FEFFFFEB 		bl	calloc		@
 5186              	.LVL265:
 5187              	@ armwave.c:731:     if(g_armwave_state.test_wave_buffer == NULL) {
 730:armwave.c     **** 
 731:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 5188              		.loc 1 731 7 view .LVU1375
 5189 18ec 000050E3 		cmp	r0, #0	@ tmp126,
 5190              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 729:armwave.c     **** 
 5191              		.loc 1 729 38 view .LVU1376
 5192 18f0 180084E5 		str	r0, [r4, #24]	@ tmp126, g_armwave_state.test_wave_buffer
 5193              		.loc 1 731 5 is_stmt 1 view .LVU1377
 5194              	@ armwave.c:731:     if(g_armwave_state.test_wave_buffer == NULL) {
 5195              		.loc 1 731 7 is_stmt 0 view .LVU1378
 5196 18f4 7080BD18 		popne	{r4, r5, r6, pc}	@
 732:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5197              		.loc 1 732 9 is_stmt 1 view .LVU1379
 5198              	@ armwave.c:733:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 733:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 5199              		.loc 1 733 41 is_stmt 0 view .LVU1380
 5200 18f8 501094E5 		ldr	r1, [r4, #80]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 5201              	@ armwave.c:732:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 732:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5202              		.loc 1 732 9 view .LVU1381
 5203 18fc 0620A0E1 		mov	r2, r6	@, nsets
 5204 1900 10009FE5 		ldr	r0, .L219+4	@,
 5205              	@ armwave.c:733:             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets
 5206              		.loc 1 733 41 view .LVU1382
 5207 1904 910501E0 		mul	r1, r1, r5	@ tmp129, g_armwave_state.wave_length, _3
 5208              	@ armwave.c:732:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 732:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5209              		.loc 1 732 9 view .LVU1383
 5210 1908 960101E0 		mul	r1, r6, r1	@, tmp2, tmp129
 5211              	@ armwave.c:736: }
 734:armwave.c     ****         return;
 735:armwave.c     ****     }
 736:armwave.c     **** }
 5212              		.loc 1 736 1 view .LVU1384
 5213 190c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 5214              		.cfi_restore 14
 5215              		.cfi_restore 6
 5216              		.cfi_restore 5
 5217              		.cfi_restore 4
 5218              		.cfi_def_cfa_offset 0
 5219              	.LVL266:
 5220              	@ armwave.c:732:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 732:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 5221              		.loc 1 732 9 view .LVU1385
 5222 1910 FEFFFFEA 		b	printf		@
 5223              	.LVL267:
 5224              	.L220:
 732:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 5225              		.loc 1 732 9 view .LVU1386
 5226              		.align	2
 5227              	.L219:
 5228 1914 00000000 		.word	g_armwave_state
 5229 1918 FC020000 		.word	.LC20
 5230              		.cfi_endproc
 5231              	.LFE77:
 5233              		.align	2
 5234              		.global	armwave_test_create_am_sine
 5235              		.syntax unified
 5236              		.arm
 5237              		.fpu vfp
 5239              	armwave_test_create_am_sine:
 5240              	.LVL268:
 5241              	.LFB78:
 737:armwave.c     **** 
 738:armwave.c     **** /*
 739:armwave.c     ****  * Make a test AM waveform for render tests.
 740:armwave.c     ****  *
 741:armwave.c     ****  * @param   mod                     modulation depth
 742:armwave.c     ****  * @param   noise_fraction          typically 1e-6`
 743:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 744:armwave.c     ****  */
 745:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 746:armwave.c     **** {
 5242              		.loc 1 746 1 is_stmt 1 view -0
 5243              		.cfi_startproc
 5244              		@ args = 0, pretend = 0, frame = 8
 5245              		@ frame_needed = 0, uses_anonymous_args = 0
 747:armwave.c     ****     float v, noise, xnoise, mod_val;
 5246              		.loc 1 747 5 view .LVU1388
 748:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 5247              		.loc 1 748 5 view .LVU1389
 5248              	@ armwave.c:746: {
 746:armwave.c     ****     float v, noise, xnoise, mod_val;
 5249              		.loc 1 746 1 is_stmt 0 view .LVU1390
 5250 191c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5251              		.cfi_def_cfa_offset 36
 5252              		.cfi_offset 4, -36
 5253              		.cfi_offset 5, -32
 5254              		.cfi_offset 6, -28
 5255              		.cfi_offset 7, -24
 5256              		.cfi_offset 8, -20
 5257              		.cfi_offset 9, -16
 5258              		.cfi_offset 10, -12
 5259              		.cfi_offset 11, -8
 5260              		.cfi_offset 14, -4
 5261              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 5262              		.loc 1 748 38 view .LVU1391
 5263 1920 887A9FED 		vldr.32	s14, .L252+16	@ tmp186,
 5264              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 5265              		.loc 1 748 55 view .LVU1392
 5266 1924 34529FE5 		ldr	r5, .L252+40	@ tmp264,
 5267              	@ armwave.c:746: {
 746:armwave.c     ****     float v, noise, xnoise, mod_val;
 5268              		.loc 1 746 1 view .LVU1393
 5269 1928 108B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14, d15}	@
 5270              		.cfi_def_cfa_offset 100
 5271              		.cfi_offset 80, -100
 5272              		.cfi_offset 81, -96
 5273              		.cfi_offset 82, -92
 5274              		.cfi_offset 83, -88
 5275              		.cfi_offset 84, -84
 5276              		.cfi_offset 85, -80
 5277              		.cfi_offset 86, -76
 5278              		.cfi_offset 87, -72
 5279              		.cfi_offset 88, -68
 5280              		.cfi_offset 89, -64
 5281              		.cfi_offset 90, -60
 5282              		.cfi_offset 91, -56
 5283              		.cfi_offset 92, -52
 5284              		.cfi_offset 93, -48
 5285              		.cfi_offset 94, -44
 5286              		.cfi_offset 95, -40
 5287 192c 0090A0E1 		mov	r9, r0	@ sets, sets
 5288              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 5289              		.loc 1 748 55 view .LVU1394
 5290 1930 404095E5 		ldr	r4, [r5, #64]	@ _1, g_armwave_state.waves_max
 5291              	@ armwave.c:752:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves_max * g_armwa
 749:armwave.c     ****     int s, set_offset = 0;
 750:armwave.c     ****     int w, x;
 751:armwave.c     **** 
 752:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves_max * g_armwave_state.wave_str
 5292              		.loc 1 752 74 view .LVU1395
 5293 1934 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 5294              	.LBB206:
 5295              	.LBB207:
 5296              	@ armwave.c:723:     if(g_armwave_state.test_wave_buffer != NULL) {
 723:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5297              		.loc 1 723 23 view .LVU1396
 5298 1938 180095E5 		ldr	r0, [r5, #24]	@ _88, g_armwave_state.test_wave_buffer
 5299              	.LVL269:
 723:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5300              		.loc 1 723 23 view .LVU1397
 5301              	.LBE207:
 5302              	.LBE206:
 5303              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 748:armwave.c     ****     int s, set_offset = 0;
 5304              		.loc 1 748 38 view .LVU1398
 5305 193c 904A07EE 		vmov	s15, r4	@ int	@ _1, _1
 5306              	@ armwave.c:752:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves_max * g_armwa
 5307              		.loc 1 752 74 view .LVU1399
 5308 1940 930403E0 		mul	r3, r3, r4	@ _7, g_armwave_state.wave_stride, _1
 5309              	@ armwave.c:746: {
 746:armwave.c     ****     float v, noise, xnoise, mod_val;
 5310              		.loc 1 746 1 view .LVU1400
 5311 1944 60DAF0EE 		vmov.f32	s27, s1	@ noise_fraction, noise_fraction
 5312              	.LBB211:
 5313              	.LBB208:
 5314              	@ armwave.c:723:     if(g_armwave_state.test_wave_buffer != NULL) {
 723:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5315              		.loc 1 723 7 view .LVU1401
 5316 1948 000050E3 		cmp	r0, #0	@ _88,
 5317              	.LBE208:
 5318              	.LBE211:
 5319              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 748:armwave.c     ****     int s, set_offset = 0;
 5320              		.loc 1 748 38 view .LVU1402
 5321 194c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp184, _1
 5322              	@ armwave.c:746: {
 746:armwave.c     ****     float v, noise, xnoise, mod_val;
 5323              		.loc 1 746 1 view .LVU1403
 5324 1950 0CD04DE2 		sub	sp, sp, #12	@,,
 5325              		.cfi_def_cfa_offset 112
 5326              	@ armwave.c:753:     g_armwave_state.test_wave_buffer_nsets = sets;
 753:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 5327              		.loc 1 753 44 view .LVU1404
 5328 1954 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 5329              	@ armwave.c:752:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves_max * g_armwa
 752:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 5330              		.loc 1 752 45 view .LVU1405
 5331 1958 1C3085E5 		str	r3, [r5, #28]	@ _7, g_armwave_state.test_wave_buffer_stride
 5332              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 748:armwave.c     ****     int s, set_offset = 0;
 5333              		.loc 1 748 38 view .LVU1406
 5334 195c 27EAC7EE 		vdiv.f32	s29, s14, s15	@ tmp185, tmp186, tmp184
 5335              	@ armwave.c:748:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves_max);
 748:armwave.c     ****     int s, set_offset = 0;
 5336              		.loc 1 748 11 view .LVU1407
 5337 1960 80EA6EEE 		vmul.f32	s29, s29, s0	@ _1_waves_mod, tmp185, mod
 5338              	.LVL270:
 749:armwave.c     ****     int w, x;
 5339              		.loc 1 749 5 is_stmt 1 view .LVU1408
 750:armwave.c     **** 
 5340              		.loc 1 750 5 view .LVU1409
 752:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 5341              		.loc 1 752 5 view .LVU1410
 5342              		.loc 1 753 5 view .LVU1411
 754:armwave.c     ****     armwave_test_buffer_alloc(sets);
 5343              		.loc 1 754 5 view .LVU1412
 5344              	.LBB212:
 5345              	.LBI206:
 721:armwave.c     **** {
 5346              		.loc 1 721 6 view .LVU1413
 5347              	.LBB209:
 723:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5348              		.loc 1 723 5 view .LVU1414
 5349              	@ armwave.c:723:     if(g_armwave_state.test_wave_buffer != NULL) {
 723:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 5350              		.loc 1 723 7 is_stmt 0 view .LVU1415
 5351 1964 0300000A 		beq	.L222		@,
 724:armwave.c     ****     }
 5352              		.loc 1 724 9 is_stmt 1 view .LVU1416
 5353 1968 FEFFFFEB 		bl	free		@
 5354              	.LVL271:
 724:armwave.c     ****     }
 5355              		.loc 1 724 9 is_stmt 0 view .LVU1417
 5356 196c 404095E5 		ldr	r4, [r5, #64]	@ _1, g_armwave_state.waves_max
 5357 1970 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 5358 1974 930403E0 		mul	r3, r3, r4	@ _7, g_armwave_state.wave_stride, _1
 5359              	.L222:
 729:armwave.c     **** 
 5360              		.loc 1 729 5 is_stmt 1 view .LVU1418
 5361              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 729:armwave.c     **** 
 5362              		.loc 1 729 40 is_stmt 0 view .LVU1419
 5363 1978 0300A0E1 		mov	r0, r3	@, _7
 5364 197c 0910A0E1 		mov	r1, r9	@, sets
 5365 1980 FEFFFFEB 		bl	calloc		@
 5366              	.LVL272:
 5367              	@ armwave.c:731:     if(g_armwave_state.test_wave_buffer == NULL) {
 731:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5368              		.loc 1 731 7 view .LVU1420
 5369 1984 000050E3 		cmp	r0, #0	@ tmp195,
 5370              	@ armwave.c:729:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_stride * g_armw
 729:armwave.c     **** 
 5371              		.loc 1 729 38 view .LVU1421
 5372 1988 180085E5 		str	r0, [r5, #24]	@ tmp195, g_armwave_state.test_wave_buffer
 731:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5373              		.loc 1 731 5 is_stmt 1 view .LVU1422
 5374              	@ armwave.c:731:     if(g_armwave_state.test_wave_buffer == NULL) {
 731:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5375              		.loc 1 731 7 is_stmt 0 view .LVU1423
 5376 198c 6100000A 		beq	.L251		@,
 5377              	.L223:
 5378              	.LVL273:
 731:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 5379              		.loc 1 731 7 view .LVU1424
 5380              	.LBE209:
 5381              	.LBE212:
 5382              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 755:armwave.c     **** 
 756:armwave.c     ****     for(s = 0; s < sets; s++) {
 5383              		.loc 1 756 5 discriminator 1 view .LVU1425
 5384 1990 000059E3 		cmp	r9, #0	@ sets,
 5385 1994 5C0000DA 		ble	.L221		@,
 5386              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 757:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 758:armwave.c     ****     
 759:armwave.c     ****         for(w = 0; w < g_armwave_state.waves_max; w++) {
 760:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 761:armwave.c     ****             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 5387              		.loc 1 761 63 view .LVU1426
 5388 1998 66BB9FED 		vldr.64	d11, .L252	@ tmp271,
 5389              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 5390              		.loc 1 761 28 view .LVU1427
 5391 199c 67AB9FED 		vldr.64	d10, .L252+8	@ tmp272,
 5392              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 762:armwave.c     **** 
 763:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 764:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 765:armwave.c     ****                 noise *= noise;
 766:armwave.c     ****                 noise *= noise;
 767:armwave.c     ****                 noise *= noise;
 768:armwave.c     **** 
 769:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 770:armwave.c     ****                     noise = -noise;
 771:armwave.c     **** 
 772:armwave.c     ****                 noise += 1.0f;
 773:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 774:armwave.c     **** 
 775:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 776:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 777:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 778:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 5393              		.loc 1 778 104 view .LVU1428
 5394 19a0 69EA9FED 		vldr.32	s28, .L252+20	@ tmp273,
 5395              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 756:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5396              		.loc 1 756 5 view .LVU1429
 5397 19a4 0070A0E3 		mov	r7, #0	@ set_offset,
 5398              	@ armwave.c:757:         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_le
 757:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5399              		.loc 1 757 9 view .LVU1430
 5400 19a8 B4A19FE5 		ldr	r10, .L252+44	@ tmp270,
 5401              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 756:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5402              		.loc 1 756 5 view .LVU1431
 5403 19ac 0780A0E1 		mov	r8, r7	@ s, set_offset
 5404              	.LVL274:
 5405              	.L224:
 757:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5406              		.loc 1 757 9 is_stmt 1 view .LVU1432
 5407 19b0 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.wave_length
 5408 19b4 0810A0E1 		mov	r1, r8	@, s
 5409 19b8 0A00A0E1 		mov	r0, r10	@, tmp270
 5410 19bc FEFFFFEB 		bl	printf		@
 5411              	.LVL275:
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5412              		.loc 1 759 9 view .LVU1433
 5413              	@ armwave.c:759:         for(w = 0; w < g_armwave_state.waves_max; w++) {
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5414              		.loc 1 759 39 is_stmt 0 view .LVU1434
 5415 19c0 404095E5 		ldr	r4, [r5, #64]	@ prephitmp_145, g_armwave_state.waves_max
 5416              	@ armwave.c:759:         for(w = 0; w < g_armwave_state.waves_max; w++) {
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5417              		.loc 1 759 9 view .LVU1435
 5418 19c4 000054E3 		cmp	r4, #0	@ prephitmp_145,
 5419 19c8 4A0000DA 		ble	.L225		@,
 5420              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5421              		.loc 1 761 54 view .LVU1436
 5422 19cc 5F8ADFED 		vldr.32	s17, .L252+24	@ tmp210,
 5423              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5424              		.loc 1 775 45 view .LVU1437
 5425 19d0 5C8A9FED 		vldr.32	s16, .L252+16	@ tmp267,
 5426 19d4 50B095E5 		ldr	fp, [r5, #80]	@ prephitmp_149, g_armwave_state.wave_length
 5427              	@ armwave.c:759:         for(w = 0; w < g_armwave_state.waves_max; w++) {
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5428              		.loc 1 759 15 view .LVU1438
 5429 19d8 0060A0E3 		mov	r6, #0	@ w,
 5430              	.LVL276:
 5431              	.L232:
 761:armwave.c     **** 
 5432              		.loc 1 761 13 is_stmt 1 view .LVU1439
 5433              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5434              		.loc 1 761 49 is_stmt 0 view .LVU1440
 5435 19dc 906A07EE 		vmov	s15, r6	@ int	@ w, w
 5436 19e0 E70AB8EE 		vcvt.f32.s32	s0, s15	@ tmp207, w
 5437 19e4 2E0A20EE 		vmul.f32	s0, s0, s29	@ tmp208, tmp207, _1_waves_mod
 5438              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5439              		.loc 1 761 54 view .LVU1441
 5440 19e8 280A20EE 		vmul.f32	s0, s0, s17	@ tmp209, tmp208, tmp210
 5441              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5442              		.loc 1 761 31 view .LVU1442
 5443 19ec C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp209
 5444 19f0 FEFFFFEB 		bl	sin		@
 5445              	.LVL277:
 5446              	@ armwave.c:763:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5447              		.loc 1 763 13 view .LVU1443
 5448 19f4 00005BE3 		cmp	fp, #0	@ prephitmp_149,
 5449              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5450              		.loc 1 761 63 view .LVU1444
 5451 19f8 0B0B30EE 		vadd.f64	d0, d0, d11	@ tmp212,, tmp271
 5452              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5453              		.loc 1 761 28 view .LVU1445
 5454 19fc 0A0B20EE 		vmul.f64	d0, d0, d10	@ tmp214, tmp212, tmp272
 5455              	@ armwave.c:761:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 761:armwave.c     **** 
 5456              		.loc 1 761 21 view .LVU1446
 5457 1a00 C00BB7EE 		vcvt.f32.f64	s0, d0	@ mod_val, tmp214
 5458              	.LVL278:
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5459              		.loc 1 763 13 is_stmt 1 view .LVU1447
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5460              		.loc 1 763 13 is_stmt 0 view .LVU1448
 5461 1a04 380000DA 		ble	.L226		@,
 5462 1a08 C09AB7EE 		vcvt.f64.f32	d9, s0	@ tmp265, mod_val
 5463              	@ armwave.c:773:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 773:armwave.c     **** 
 5464              		.loc 1 773 24 view .LVU1449
 5465 1a0c 50DA9FED 		vldr.32	s26, .L252+28	@ tmp233,
 5466              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5467              		.loc 1 778 113 view .LVU1450
 5468 1a10 50CADFED 		vldr.32	s25, .L252+32	@ tmp244,
 5469 1a14 50CA9FED 		vldr.32	s24, .L252+36	@ tmp245,
 5470              	@ armwave.c:763:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5471              		.loc 1 763 19 view .LVU1451
 5472 1a18 0040A0E3 		mov	r4, #0	@ x,
 5473              	.LVL279:
 5474              	.L231:
 764:armwave.c     ****                 noise *= noise;
 5475              		.loc 1 764 17 is_stmt 1 view .LVU1452
 5476              	@ armwave.c:764:                 noise  = ((rand() & 0xffff) * noise_fraction);
 764:armwave.c     ****                 noise *= noise;
 5477              		.loc 1 764 28 is_stmt 0 view .LVU1453
 5478 1a1c FEFFFFEB 		bl	rand		@
 5479              	.LVL280:
 5480              	@ armwave.c:764:                 noise  = ((rand() & 0xffff) * noise_fraction);
 764:armwave.c     ****                 noise *= noise;
 5481              		.loc 1 764 35 view .LVU1454
 5482 1a20 7000FFE6 		uxth	r0, r0	@ tmp216,
 5483              	@ armwave.c:764:                 noise  = ((rand() & 0xffff) * noise_fraction);
 764:armwave.c     ****                 noise *= noise;
 5484              		.loc 1 764 45 view .LVU1455
 5485 1a24 900A07EE 		vmov	s15, r0	@ int	@ tmp216, tmp216
 5486 1a28 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp218, tmp216
 5487              	@ armwave.c:764:                 noise  = ((rand() & 0xffff) * noise_fraction);
 764:armwave.c     ****                 noise *= noise;
 5488              		.loc 1 764 24 view .LVU1456
 5489 1a2c AD7A67EE 		vmul.f32	s15, s15, s27	@ noise, tmp218, noise_fraction
 5490              	.LVL281:
 765:armwave.c     ****                 noise *= noise;
 5491              		.loc 1 765 17 is_stmt 1 view .LVU1457
 5492              	@ armwave.c:765:                 noise *= noise;
 765:armwave.c     ****                 noise *= noise;
 5493              		.loc 1 765 23 is_stmt 0 view .LVU1458
 5494 1a30 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 5495              	.LVL282:
 766:armwave.c     ****                 noise *= noise;
 5496              		.loc 1 766 17 is_stmt 1 view .LVU1459
 5497              	@ armwave.c:766:                 noise *= noise;
 766:armwave.c     ****                 noise *= noise;
 5498              		.loc 1 766 23 is_stmt 0 view .LVU1460
 5499 1a34 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 5500              	.LVL283:
 767:armwave.c     **** 
 5501              		.loc 1 767 17 is_stmt 1 view .LVU1461
 5502              	@ armwave.c:767:                 noise *= noise;
 767:armwave.c     **** 
 5503              		.loc 1 767 23 is_stmt 0 view .LVU1462
 5504 1a38 A7FA27EE 		vmul.f32	s30, s15, s15	@ noise, noise, noise
 5505              	.LVL284:
 769:armwave.c     ****                     noise = -noise;
 5506              		.loc 1 769 17 is_stmt 1 view .LVU1463
 5507              	@ armwave.c:769:                 if((rand() & 0xffff) > 0x7fff)
 769:armwave.c     ****                     noise = -noise;
 5508              		.loc 1 769 21 is_stmt 0 view .LVU1464
 5509 1a3c FEFFFFEB 		bl	rand		@
 5510              	.LVL285:
 770:armwave.c     **** 
 5511              		.loc 1 770 21 is_stmt 1 view .LVU1465
 5512              	@ armwave.c:769:                 if((rand() & 0xffff) > 0x7fff)
 769:armwave.c     ****                     noise = -noise;
 5513              		.loc 1 769 19 is_stmt 0 view .LVU1466
 5514 1a40 020910E3 		tst	r0, #32768	@,
 5515              	@ armwave.c:770:                     noise = -noise;
 770:armwave.c     **** 
 5516              		.loc 1 770 27 view .LVU1467
 5517 1a44 4FFAB11E 		vnegne.f32	s30, s30	@ noise, noise
 5518              	.LVL286:
 772:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 5519              		.loc 1 772 17 is_stmt 1 view .LVU1468
 773:armwave.c     **** 
 5520              		.loc 1 773 17 view .LVU1469
 5521              	@ armwave.c:773:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 773:armwave.c     **** 
 5522              		.loc 1 773 27 is_stmt 0 view .LVU1470
 5523 1a48 FEFFFFEB 		bl	rand		@
 5524              	.LVL287:
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5525              		.loc 1 775 17 is_stmt 1 view .LVU1471
 5526              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5527              		.loc 1 775 45 is_stmt 0 view .LVU1472
 5528 1a4c 147A95ED 		vldr.32	s14, [r5, #80]	@ int	@ tmp280, g_armwave_state.wave_length
 5529              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5530              		.loc 1 775 33 view .LVU1473
 5531 1a50 904A07EE 		vmov	s15, r4	@ int	@ x, x
 5532              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5533              		.loc 1 775 45 view .LVU1474
 5534 1a54 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp221, tmp280
 5535              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5536              		.loc 1 775 33 view .LVU1475
 5537 1a58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, x
 5538              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5539              		.loc 1 775 45 view .LVU1476
 5540 1a5c 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp223, tmp267, tmp221
 5541              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5542              		.loc 1 775 33 view .LVU1477
 5543 1a60 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp226, tmp225, tmp210
 5544              	@ armwave.c:773:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 773:armwave.c     **** 
 5545              		.loc 1 773 34 view .LVU1478
 5546 1a64 7000FFE6 		uxth	r0, r0	@ tmp229,
 5547              	.LVL288:
 5548              	@ armwave.c:773:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 773:armwave.c     **** 
 5549              		.loc 1 773 44 view .LVU1479
 5550 1a68 100A07EE 		vmov	s14, r0	@ int	@ tmp229, tmp229
 5551 1a6c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp231, tmp229
 5552              	@ armwave.c:773:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 773:armwave.c     **** 
 5553              		.loc 1 773 24 view .LVU1480
 5554 1a70 0D0A87EE 		vdiv.f32	s0, s14, s26	@ xnoise, tmp231, tmp233
 5555              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5556              		.loc 1 775 77 view .LVU1481
 5557 1a74 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp234, tmp223, tmp226
 5558              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5559              		.loc 1 775 22 view .LVU1482
 5560 1a78 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp234
 5561 1a7c FEFFFFEB 		bl	sin		@
 5562              	.LVL289:
 5563              		.loc 1 778 17 is_stmt 1 view .LVU1483
 5564              	@ armwave.c:772:                 noise += 1.0f;
 772:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 5565              		.loc 1 772 23 is_stmt 0 view .LVU1484
 5566 1a80 087A7FEE 		vadd.f32	s15, s30, s16	@ noise, noise, tmp267
 5567              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5568              		.loc 1 778 104 view .LVU1485
 5569 1a84 0010A0E3 		mov	r1, #0	@ iftmp.33_56,
 5570              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5571              		.loc 1 775 98 view .LVU1486
 5572 1a88 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp240, noise
 5573              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5574              		.loc 1 775 87 view .LVU1487
 5575 1a8c 000B29EE 		vmul.f64	d0, d9, d0	@ tmp237, tmp265,
 5576              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5577              		.loc 1 775 98 view .LVU1488
 5578 1a90 077B20EE 		vmul.f64	d7, d0, d7	@ tmp241, tmp237, tmp240
 5579              	@ armwave.c:775:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 775:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 5580              		.loc 1 775 19 view .LVU1489
 5581 1a94 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp241
 5582              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5583              		.loc 1 778 113 view .LVU1490
 5584 1a98 4C7AF0EE 		vmov.f32	s15, s24	@ _39, tmp245
 5585 1a9c 2C7A47EE 		vmla.f32	s15, s14, s25	@ _39, v, tmp244
 5586 1aa0 C07AF5EE 		vcmpe.f32	s15, #0	@ _39
 5587 1aa4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 5588 1aa8 050000DA 		ble	.L228		@,
 5589              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5590              		.loc 1 778 104 discriminator 1 view .LVU1491
 5591 1aac CE7AF4EE 		vcmpe.f32	s15, s28	@ _39, tmp273
 5592 1ab0 FF10A0E3 		mov	r1, #255	@ iftmp.33_56,
 5593 1ab4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 5594 1ab8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp249, _39
 5595 1abc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp249, %sfp
 5596 1ac0 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.33_56, %sfp
 5597              	.L228:
 5598              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5599              		.loc 1 778 57 discriminator 12 view .LVU1492
 5600 1ac4 382095E5 		ldr	r2, [r5, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 5601              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5602              		.loc 1 778 102 discriminator 12 view .LVU1493
 5603 1ac8 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 5604 1acc 927622E0 		mla	r2, r2, r6, r7	@ tmp256, g_armwave_state.wave_stride, w, set_offset
 5605 1ad0 043083E0 		add	r3, r3, r4	@ tmp255, g_armwave_state.test_wave_buffer, x
 5606              	@ armwave.c:763:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5607              		.loc 1 763 58 discriminator 12 view .LVU1494
 5608 1ad4 014084E2 		add	r4, r4, #1	@ x, x,
 5609              	.LVL290:
 5610              	@ armwave.c:778:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 5611              		.loc 1 778 102 discriminator 12 view .LVU1495
 5612 1ad8 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.33_56, *_46
 5613              	@ armwave.c:763:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5614              		.loc 1 763 43 discriminator 12 view .LVU1496
 5615 1adc 50B095E5 		ldr	fp, [r5, #80]	@ prephitmp_149, g_armwave_state.wave_length
 5616              	@ armwave.c:763:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 763:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 5617              		.loc 1 763 13 discriminator 12 view .LVU1497
 5618 1ae0 04005BE1 		cmp	fp, r4	@ prephitmp_149, x
 5619 1ae4 CCFFFFCA 		bgt	.L231		@,
 5620 1ae8 404095E5 		ldr	r4, [r5, #64]	@ prephitmp_145, g_armwave_state.waves_max
 5621              	.LVL291:
 5622              	.L226:
 5623              	@ armwave.c:759:         for(w = 0; w < g_armwave_state.waves_max; w++) {
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5624              		.loc 1 759 52 discriminator 2 view .LVU1498
 5625 1aec 016086E2 		add	r6, r6, #1	@ w, w,
 5626              	.LVL292:
 5627              	@ armwave.c:759:         for(w = 0; w < g_armwave_state.waves_max; w++) {
 759:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 5628              		.loc 1 759 9 discriminator 2 view .LVU1499
 5629 1af0 040056E1 		cmp	r6, r4	@ w, prephitmp_145
 5630 1af4 B8FFFFBA 		blt	.L232		@,
 5631              	.LVL293:
 5632              	.L225:
 779:armwave.c     ****             }
 780:armwave.c     ****         }
 781:armwave.c     **** 
 782:armwave.c     ****         set_offset += (g_armwave_state.waves_max * g_armwave_state.wave_stride);
 5633              		.loc 1 782 9 is_stmt 1 discriminator 2 view .LVU1500
 5634              	@ armwave.c:782:         set_offset += (g_armwave_state.waves_max * g_armwave_state.wave_stride);
 5635              		.loc 1 782 50 is_stmt 0 discriminator 2 view .LVU1501
 5636 1af8 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 5637              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 756:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5638              		.loc 1 756 27 discriminator 2 view .LVU1502
 5639 1afc 018088E2 		add	r8, r8, #1	@ s, s,
 5640              	.LVL294:
 5641              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 756:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5642              		.loc 1 756 5 discriminator 2 view .LVU1503
 5643 1b00 080059E1 		cmp	r9, r8	@ sets, s
 5644              	@ armwave.c:782:         set_offset += (g_armwave_state.waves_max * g_armwave_state.wave_stride);
 5645              		.loc 1 782 20 discriminator 2 view .LVU1504
 5646 1b04 937427E0 		mla	r7, r3, r4, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_145, set_offset
 5647              	.LVL295:
 5648              	@ armwave.c:756:     for(s = 0; s < sets; s++) {
 756:armwave.c     ****         printf("Calculating test set %d (length=%d)\n", s, g_armwave_state.wave_length);
 5649              		.loc 1 756 5 discriminator 2 view .LVU1505
 5650 1b08 A8FFFF1A 		bne	.L224		@,
 5651              	.LVL296:
 5652              	.L221:
 5653              	@ armwave.c:784: }
 783:armwave.c     ****     }
 784:armwave.c     **** }
 5654              		.loc 1 784 1 view .LVU1506
 5655 1b0c 0CD08DE2 		add	sp, sp, #12	@,,
 5656              		.cfi_remember_state
 5657              		.cfi_def_cfa_offset 100
 5658              		@ sp needed	@
 5659 1b10 108BBDEC 		vldm	sp!, {d8-d15}	@,
 5660              		.cfi_restore 94
 5661              		.cfi_restore 95
 5662              		.cfi_restore 92
 5663              		.cfi_restore 93
 5664              		.cfi_restore 90
 5665              		.cfi_restore 91
 5666              		.cfi_restore 88
 5667              		.cfi_restore 89
 5668              		.cfi_restore 86
 5669              		.cfi_restore 87
 5670              		.cfi_restore 84
 5671              		.cfi_restore 85
 5672              		.cfi_restore 82
 5673              		.cfi_restore 83
 5674              		.cfi_restore 80
 5675              		.cfi_restore 81
 5676              		.cfi_def_cfa_offset 36
 5677 1b14 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5678              	.LVL297:
 5679              	.L251:
 5680              		.cfi_restore_state
 5681              	.LBB213:
 5682              	.LBB210:
 732:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 5683              		.loc 1 732 9 is_stmt 1 view .LVU1507
 5684 1b18 501095E5 		ldr	r1, [r5, #80]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 5685 1b1c 0920A0E1 		mov	r2, r9	@, sets
 5686 1b20 40009FE5 		ldr	r0, .L252+48	@,
 5687 1b24 910901E0 		mul	r1, r1, r9	@ tmp198, g_armwave_state.wave_length, sets
 5688 1b28 940101E0 		mul	r1, r4, r1	@, _1, tmp198
 5689 1b2c FEFFFFEB 		bl	printf		@
 5690              	.LVL298:
 734:armwave.c     ****     }
 5691              		.loc 1 734 9 view .LVU1508
 5692 1b30 96FFFFEA 		b	.L223		@
 5693              	.L253:
 5694 1b34 0000A0E1 		.align	3
 5695              	.L252:
 5696 1b38 00000000 		.word	0
 5697 1b3c 0000F03F 		.word	1072693248
 5698 1b40 00000000 		.word	0
 5699 1b44 0000E03F 		.word	1071644672
 5700 1b48 0000803F 		.word	1065353216
 5701 1b4c 00007F43 		.word	1132396544
 5702 1b50 C3F5C840 		.word	1086911939
 5703 1b54 38FFC74A 		.word	1254620984
 5704 1b58 0000FE42 		.word	1123942400
 5705 1b5c 00000043 		.word	1124073472
 5706 1b60 00000000 		.word	g_armwave_state
 5707 1b64 50030000 		.word	.LC21
 5708 1b68 FC020000 		.word	.LC20
 5709              	.LBE210:
 5710              	.LBE213:
 5711              		.cfi_endproc
 5712              	.LFE78:
 5714              		.align	2
 5715              		.global	armwave_cleanup
 5716              		.syntax unified
 5717              		.arm
 5718              		.fpu vfp
 5720              	armwave_cleanup:
 5721              	.LFB79:
 785:armwave.c     **** 
 786:armwave.c     **** /*
 787:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 788:armwave.c     ****  */
 789:armwave.c     **** void armwave_cleanup()
 790:armwave.c     **** {
 5722              		.loc 1 790 1 view -0
 5723              		.cfi_startproc
 5724              		@ args = 0, pretend = 0, frame = 0
 5725              		@ frame_needed = 0, uses_anonymous_args = 0
 791:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 5726              		.loc 1 791 5 view .LVU1510
 5727              	@ armwave.c:790: {
 790:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 5728              		.loc 1 790 1 is_stmt 0 view .LVU1511
 5729 1b6c 10402DE9 		push	{r4, lr}	@
 5730              		.cfi_def_cfa_offset 8
 5731              		.cfi_offset 4, -8
 5732              		.cfi_offset 14, -4
 5733              	@ armwave.c:791:     free(g_armwave_state.out_pixbuf);
 5734              		.loc 1 791 25 view .LVU1512
 5735 1b70 34409FE5 		ldr	r4, .L256	@ tmp114,
 5736              	@ armwave.c:791:     free(g_armwave_state.out_pixbuf);
 5737              		.loc 1 791 5 view .LVU1513
 5738 1b74 940094E5 		ldr	r0, [r4, #148]	@, g_armwave_state.out_pixbuf
 5739 1b78 FEFFFFEB 		bl	free		@
 5740              	.LVL299:
 792:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 5741              		.loc 1 792 5 is_stmt 1 view .LVU1514
 5742 1b7c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 5743 1b80 FEFFFFEB 		bl	free		@
 5744              	.LVL300:
 793:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 5745              		.loc 1 793 5 view .LVU1515
 5746 1b84 D00094E5 		ldr	r0, [r4, #208]	@, g_armwave_state.xcoord_to_xpixel
 5747 1b88 FEFFFFEB 		bl	free		@
 5748              	.LVL301:
 794:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 5749              		.loc 1 794 5 view .LVU1516
 5750 1b8c 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 5751 1b90 FEFFFFEB 		bl	free		@
 5752              	.LVL302:
 795:armwave.c     **** 
 796:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 5753              		.loc 1 796 5 view .LVU1517
 5754              	@ armwave.c:796:     g_armwave_state.out_pixbuf = NULL;
 5755              		.loc 1 796 32 is_stmt 0 view .LVU1518
 5756 1b94 0030A0E3 		mov	r3, #0	@ tmp123,
 5757 1b98 943084E5 		str	r3, [r4, #148]	@ tmp123, g_armwave_state.out_pixbuf
 797:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 5758              		.loc 1 797 5 is_stmt 1 view .LVU1519
 5759              	@ armwave.c:797:     g_armwave_state.ch1_buffer = NULL;
 5760              		.loc 1 797 32 is_stmt 0 view .LVU1520
 5761 1b9c 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 798:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 5762              		.loc 1 798 5 is_stmt 1 view .LVU1521
 5763              	@ armwave.c:798:     g_armwave_state.xcoord_to_xpixel = NULL;
 5764              		.loc 1 798 38 is_stmt 0 view .LVU1522
 5765 1ba0 D03084E5 		str	r3, [r4, #208]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 799:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 5766              		.loc 1 799 5 is_stmt 1 view .LVU1523
 5767              	@ armwave.c:799:     g_armwave_state.test_wave_buffer = NULL;
 5768              		.loc 1 799 38 is_stmt 0 view .LVU1524
 5769 1ba4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 5770              	@ armwave.c:800: }
 800:armwave.c     **** }
 5771              		.loc 1 800 1 view .LVU1525
 5772 1ba8 1080BDE8 		pop	{r4, pc}	@
 5773              	.L257:
 5774              		.align	2
 5775              	.L256:
 5776 1bac 00000000 		.word	g_armwave_state
 5777              		.cfi_endproc
 5778              	.LFE79:
 5780              		.align	2
 5781              		.global	armwave_set_window_dims
 5782              		.syntax unified
 5783              		.arm
 5784              		.fpu vfp
 5786              	armwave_set_window_dims:
 5787              	.LVL303:
 5788              	.LFB81:
 801:armwave.c     **** 
 802:armwave.c     **** /*
 803:armwave.c     ****  * Create an XWindow for rendering onto a dedicated window plane.
 804:armwave.c     ****  * Seems to be necessary for GTK.
 805:armwave.c     ****  *
 806:armwave.c     ****  * Initial dimensions of 640x480 are assumed.  Window can be resized on demand 
 807:armwave.c     ****  * using armwave_resize_xwindow().
 808:armwave.c     ****  */
 809:armwave.c     **** void armwave_create_xwindow()
 810:armwave.c     **** {
 811:armwave.c     ****     Window window;
 812:armwave.c     ****     unsigned long mask;
 813:armwave.c     ****     
 814:armwave.c     ****     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.visual, AllocNone);
 815:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 816:armwave.c     ****     g_xswa.background_pixel = 0;
 817:armwave.c     ****     g_xswa.border_pixel = 0;
 818:armwave.c     ****     
 819:armwave.c     ****     mask = CWBackPixel | CWBorderPixel | CWColormap | CWEventMask;
 820:armwave.c     ****     
 821:armwave.c     ****     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 822:armwave.c     **** 			 0, 0,
 823:armwave.c     **** 			 640,
 824:armwave.c     **** 			 480,
 825:armwave.c     **** 			 0, g_vinfo.depth,
 826:armwave.c     **** 			 InputOutput,
 827:armwave.c     **** 			 g_vinfo.visual,
 828:armwave.c     **** 			 mask, &g_xswa);
 829:armwave.c     ****     
 830:armwave.c     ****     printf("armwave: Created X11 Window: %d (0x%08x)\n", window, window);
 831:armwave.c     ****     
 832:armwave.c     ****     armwave_grab_xid(window);
 833:armwave.c     **** }
 834:armwave.c     **** 
 835:armwave.c     **** /*
 836:armwave.c     ****  * Resize and position the active XWindow.  May not make sense if we do not own that window.
 837:armwave.c     ****  */
 838:armwave.c     **** void armwave_set_window_dims(int x, int y, int w, int h)
 839:armwave.c     **** {
 5789              		.loc 1 839 1 is_stmt 1 view -0
 5790              		.cfi_startproc
 5791              		@ args = 0, pretend = 0, frame = 0
 5792              		@ frame_needed = 0, uses_anonymous_args = 0
 840:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 5793              		.loc 1 840 5 view .LVU1527
 5794              	@ armwave.c:839: {
 839:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 5795              		.loc 1 839 1 is_stmt 0 view .LVU1528
 5796 1bb0 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 5797              		.cfi_def_cfa_offset 20
 5798              		.cfi_offset 4, -20
 5799              		.cfi_offset 5, -16
 5800              		.cfi_offset 6, -12
 5801              		.cfi_offset 7, -8
 5802              		.cfi_offset 14, -4
 5803 1bb4 0CD04DE2 		sub	sp, sp, #12	@,,
 5804              		.cfi_def_cfa_offset 32
 5805              	@ armwave.c:839: {
 839:armwave.c     ****     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 5806              		.loc 1 839 1 view .LVU1529
 5807 1bb8 0070A0E1 		mov	r7, r0	@ x, x
 5808 1bbc 0160A0E1 		mov	r6, r1	@ y, y
 5809 1bc0 0250A0E1 		mov	r5, r2	@ w, w
 5810 1bc4 0340A0E1 		mov	r4, r3	@ h, h
 5811              	@ armwave.c:840:     printf("armwave: armwave_set_window_dims(%d,%d,%d,%d)\n", x, y, w, h);
 5812              		.loc 1 840 5 view .LVU1530
 5813 1bc8 00308DE5 		str	r3, [sp]	@ h,
 5814 1bcc 0230A0E1 		mov	r3, r2	@, w
 5815              	.LVL304:
 5816              		.loc 1 840 5 view .LVU1531
 5817 1bd0 0120A0E1 		mov	r2, r1	@, y
 5818              	.LVL305:
 5819              		.loc 1 840 5 view .LVU1532
 5820 1bd4 0010A0E1 		mov	r1, r0	@, x
 5821              	.LVL306:
 5822              		.loc 1 840 5 view .LVU1533
 5823 1bd8 40009FE5 		ldr	r0, .L260	@,
 5824              	.LVL307:
 5825              		.loc 1 840 5 view .LVU1534
 5826 1bdc FEFFFFEB 		bl	printf		@
 5827              	.LVL308:
 841:armwave.c     ****     
 842:armwave.c     ****     XMoveResizeWindow(g_dpy, g_window, x, y, w, h);
 5828              		.loc 1 842 5 is_stmt 1 view .LVU1535
 5829 1be0 3C109FE5 		ldr	r1, .L260+4	@ tmp119,
 5830 1be4 3C009FE5 		ldr	r0, .L260+8	@ tmp121,
 5831 1be8 04408DE5 		str	r4, [sp, #4]	@ h,
 5832 1bec 00508DE5 		str	r5, [sp]	@ w,
 5833 1bf0 0630A0E1 		mov	r3, r6	@, y
 5834 1bf4 0720A0E1 		mov	r2, r7	@, x
 5835 1bf8 001091E5 		ldr	r1, [r1]	@, g_window
 5836 1bfc 000090E5 		ldr	r0, [r0]	@, g_dpy
 5837 1c00 FEFFFFEB 		bl	XMoveResizeWindow		@
 5838              	.LVL309:
 843:armwave.c     ****     armwave_set_draw_dims(x, y, w, h);
 5839              		.loc 1 843 5 view .LVU1536
 5840              	.LBB214:
 5841              	.LBI214:
 844:armwave.c     **** }
 845:armwave.c     **** 
 846:armwave.c     **** /*
 847:armwave.c     ****  * Change the draw position and size for windows not owned by us.
 848:armwave.c     ****  */
 849:armwave.c     **** void armwave_set_draw_dims(int x, int y, int w, int h)
 5842              		.loc 1 849 6 view .LVU1537
 5843              	.LBB215:
 850:armwave.c     **** {
 851:armwave.c     ****     //printf("armwave: armwave_set_draw_dims(%d,%d,%d,%d)\n", x, y, w, h);
 852:armwave.c     ****     
 853:armwave.c     ****     g_armwave_state.draw_xoff = x;
 5844              		.loc 1 853 5 view .LVU1538
 5845              	@ armwave.c:853:     g_armwave_state.draw_xoff = x;
 5846              		.loc 1 853 31 is_stmt 0 view .LVU1539
 5847 1c04 20309FE5 		ldr	r3, .L260+12	@ tmp123,
 5848 1c08 7C7083E5 		str	r7, [r3, #124]	@ x, g_armwave_state.draw_xoff
 854:armwave.c     ****     g_armwave_state.draw_yoff = y;
 5849              		.loc 1 854 5 is_stmt 1 view .LVU1540
 5850              	@ armwave.c:854:     g_armwave_state.draw_yoff = y;
 5851              		.loc 1 854 31 is_stmt 0 view .LVU1541
 5852 1c0c 806083E5 		str	r6, [r3, #128]	@ y, g_armwave_state.draw_yoff
 855:armwave.c     ****     g_armwave_state.draw_width = w;
 5853              		.loc 1 855 5 is_stmt 1 view .LVU1542
 5854              	@ armwave.c:855:     g_armwave_state.draw_width = w;
 5855              		.loc 1 855 32 is_stmt 0 view .LVU1543
 5856 1c10 845083E5 		str	r5, [r3, #132]	@ w, g_armwave_state.draw_width
 856:armwave.c     ****     g_armwave_state.draw_height = h;
 5857              		.loc 1 856 5 is_stmt 1 view .LVU1544
 5858              	@ armwave.c:856:     g_armwave_state.draw_height = h;
 5859              		.loc 1 856 33 is_stmt 0 view .LVU1545
 5860 1c14 884083E5 		str	r4, [r3, #136]	@ h, g_armwave_state.draw_height
 5861              	.LVL310:
 5862              		.loc 1 856 33 view .LVU1546
 5863              	.LBE215:
 5864              	.LBE214:
 5865              	@ armwave.c:844: }
 844:armwave.c     **** 
 5866              		.loc 1 844 1 view .LVU1547
 5867 1c18 0CD08DE2 		add	sp, sp, #12	@,,
 5868              		.cfi_def_cfa_offset 20
 5869              		@ sp needed	@
 5870 1c1c F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 5871              	.LVL311:
 5872              	.L261:
 844:armwave.c     **** 
 5873              		.loc 1 844 1 view .LVU1548
 5874              		.align	2
 5875              	.L260:
 5876 1c20 78030000 		.word	.LC22
 5877 1c24 00000000 		.word	.LANCHOR1
 5878 1c28 00000000 		.word	g_dpy
 5879 1c2c 00000000 		.word	g_armwave_state
 5880              		.cfi_endproc
 5881              	.LFE81:
 5883              		.align	2
 5884              		.global	armwave_set_draw_dims
 5885              		.syntax unified
 5886              		.arm
 5887              		.fpu vfp
 5889              	armwave_set_draw_dims:
 5890              	.LVL312:
 5891              	.LFB82:
 850:armwave.c     ****     //printf("armwave: armwave_set_draw_dims(%d,%d,%d,%d)\n", x, y, w, h);
 5892              		.loc 1 850 1 is_stmt 1 view -0
 5893              		.cfi_startproc
 5894              		@ args = 0, pretend = 0, frame = 0
 5895              		@ frame_needed = 0, uses_anonymous_args = 0
 5896              		@ link register save eliminated.
 853:armwave.c     ****     g_armwave_state.draw_yoff = y;
 5897              		.loc 1 853 5 view .LVU1550
 5898              	@ armwave.c:853:     g_armwave_state.draw_xoff = x;
 853:armwave.c     ****     g_armwave_state.draw_yoff = y;
 5899              		.loc 1 853 31 is_stmt 0 view .LVU1551
 5900 1c30 08C09FE5 		ldr	ip, .L263	@ tmp114,
 5901              	@ armwave.c:854:     g_armwave_state.draw_yoff = y;
 854:armwave.c     ****     g_armwave_state.draw_width = w;
 5902              		.loc 1 854 31 view .LVU1552
 5903 1c34 FC07CCE1 		strd	r0, [ip, #124]	@, tmp114,
 855:armwave.c     ****     g_armwave_state.draw_height = h;
 5904              		.loc 1 855 5 is_stmt 1 view .LVU1553
 5905              	@ armwave.c:856:     g_armwave_state.draw_height = h;
 5906              		.loc 1 856 33 is_stmt 0 view .LVU1554
 5907 1c38 F428CCE1 		strd	r2, [ip, #132]	@, tmp114,
 5908              	@ armwave.c:857: }
 857:armwave.c     **** }
 5909              		.loc 1 857 1 view .LVU1555
 5910 1c3c 1EFF2FE1 		bx	lr	@
 5911              	.L264:
 5912              		.align	2
 5913              	.L263:
 5914 1c40 00000000 		.word	g_armwave_state
 5915              		.cfi_endproc
 5916              	.LFE82:
 5918              		.align	2
 5919              		.global	armwave_grab_xid
 5920              		.syntax unified
 5921              		.arm
 5922              		.fpu vfp
 5924              	armwave_grab_xid:
 5925              	.LVL313:
 5926              	.LFB83:
 858:armwave.c     **** 
 859:armwave.c     **** /*
 860:armwave.c     ****  * Grab a given XWindow by ID.
 861:armwave.c     ****  */
 862:armwave.c     **** void armwave_grab_xid(int id)
 863:armwave.c     **** {
 5927              		.loc 1 863 1 is_stmt 1 view -0
 5928              		.cfi_startproc
 5929              		@ args = 0, pretend = 0, frame = 0
 5930              		@ frame_needed = 0, uses_anonymous_args = 0
 864:armwave.c     ****     XEvent event;
 5931              		.loc 1 864 5 view .LVU1557
 865:armwave.c     ****     
 866:armwave.c     ****     if(g_window != 0) {
 5932              		.loc 1 866 5 view .LVU1558
 5933              	@ armwave.c:863: {
 863:armwave.c     ****     XEvent event;
 5934              		.loc 1 863 1 is_stmt 0 view .LVU1559
 5935 1c44 70402DE9 		push	{r4, r5, r6, lr}	@
 5936              		.cfi_def_cfa_offset 16
 5937              		.cfi_offset 4, -16
 5938              		.cfi_offset 5, -12
 5939              		.cfi_offset 6, -8
 5940              		.cfi_offset 14, -4
 5941              	@ armwave.c:863: {
 863:armwave.c     ****     XEvent event;
 5942              		.loc 1 863 1 view .LVU1560
 5943 1c48 0060A0E1 		mov	r6, r0	@ id, id
 5944              	@ armwave.c:866:     if(g_window != 0) {
 5945              		.loc 1 866 17 view .LVU1561
 5946 1c4c B0509FE5 		ldr	r5, .L272	@ tmp168,
 5947 1c50 B0409FE5 		ldr	r4, .L272+4	@ tmp169,
 5948 1c54 001095E5 		ldr	r1, [r5]	@ g_window.47_1, g_window
 5949 1c58 000094E5 		ldr	r0, [r4]	@ pretmp_47, g_dpy
 5950              	.LVL314:
 5951              	@ armwave.c:866:     if(g_window != 0) {
 5952              		.loc 1 866 7 view .LVU1562
 5953 1c5c 000051E3 		cmp	r1, #0	@ g_window.47_1,
 5954 1c60 2400001A 		bne	.L271		@,
 5955              	.L266:
 867:armwave.c     ****         XUnmapWindow(g_dpy, g_window);
 868:armwave.c     ****     }
 869:armwave.c     ****     
 870:armwave.c     ****     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.visual, AllocNone);
 5956              		.loc 1 870 5 is_stmt 1 view .LVU1563
 5957              	@ armwave.c:870:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 5958              		.loc 1 870 46 is_stmt 0 view .LVU1564
 5959 1c64 843090E5 		ldr	r3, [r0, #132]	@ MEM[(struct  *)prephitmp_49].default_screen, MEM[(struct  *)prephitmp_49].def
 5960              	@ armwave.c:870:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 5961              		.loc 1 870 23 view .LVU1565
 5962 1c68 8C2090E5 		ldr	r2, [r0, #140]	@ MEM[(struct  *)prephitmp_49].screens, MEM[(struct  *)prephitmp_49].screens
 5963 1c6c 98109FE5 		ldr	r1, .L272+8	@ tmp132,
 5964 1c70 033183E0 		add	r3, r3, r3, lsl #2	@ tmp138, MEM[(struct  *)prephitmp_49].default_screen, MEM[(struct  *)preph
 5965 1c74 033282E0 		add	r3, r2, r3, lsl #4	@ tmp140, MEM[(struct  *)prephitmp_49].screens, tmp138,
 5966 1c78 002091E5 		ldr	r2, [r1]	@, g_vinfo.visual
 5967 1c7c 081093E5 		ldr	r1, [r3, #8]	@, _8->root
 5968 1c80 0030A0E3 		mov	r3, #0	@,
 5969 1c84 FEFFFFEB 		bl	XCreateColormap		@
 5970              	.LVL315:
 5971              	@ armwave.c:870:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 5972              		.loc 1 870 21 view .LVU1566
 5973 1c88 80309FE5 		ldr	r3, .L272+12	@ tmp142,
 5974              	@ armwave.c:871:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 871:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 5975              		.loc 1 871 23 view .LVU1567
 5976 1c8c 0AE9A0E3 		mov	lr, #163840	@ tmp144,
 5977              	@ armwave.c:872:     g_xswa.background_pixel = 0;
 872:armwave.c     ****     g_xswa.background_pixel = 0;
 5978              		.loc 1 872 29 view .LVU1568
 5979 1c90 00C0A0E3 		mov	ip, #0	@ tmp146,
 5980              	@ armwave.c:877:     XStoreName(g_dpy, g_window, "ArmWave Render Buffer");
 873:armwave.c     ****     g_xswa.border_pixel = 0;
 874:armwave.c     ****     
 875:armwave.c     ****     g_window = id;
 876:armwave.c     ****     
 877:armwave.c     ****     XStoreName(g_dpy, g_window, "ArmWave Render Buffer");
 5981              		.loc 1 877 5 view .LVU1569
 5982 1c94 0610A0E1 		mov	r1, r6	@, id
 5983 1c98 74209FE5 		ldr	r2, .L272+16	@,
 5984              	@ armwave.c:871:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 871:armwave.c     ****     g_xswa.background_pixel = 0;
 5985              		.loc 1 871 23 view .LVU1570
 5986 1c9c 28E083E5 		str	lr, [r3, #40]	@ tmp144, g_xswa.event_mask
 5987              	@ armwave.c:872:     g_xswa.background_pixel = 0;
 872:armwave.c     ****     g_xswa.background_pixel = 0;
 5988              		.loc 1 872 29 view .LVU1571
 5989 1ca0 04C083E5 		str	ip, [r3, #4]	@ tmp146, g_xswa.background_pixel
 5990              	@ armwave.c:873:     g_xswa.border_pixel = 0;
 873:armwave.c     ****     g_xswa.border_pixel = 0;
 5991              		.loc 1 873 25 view .LVU1572
 5992 1ca4 0CC083E5 		str	ip, [r3, #12]	@ tmp146, g_xswa.border_pixel
 5993              	@ armwave.c:875:     g_window = id;
 875:armwave.c     ****     
 5994              		.loc 1 875 14 view .LVU1573
 5995 1ca8 006085E5 		str	r6, [r5]	@ id, g_window
 5996              	@ armwave.c:870:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 870:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 5997              		.loc 1 870 21 view .LVU1574
 5998 1cac 340083E5 		str	r0, [r3, #52]	@, g_xswa.colormap
 871:armwave.c     ****     g_xswa.background_pixel = 0;
 5999              		.loc 1 871 5 is_stmt 1 view .LVU1575
 872:armwave.c     ****     g_xswa.border_pixel = 0;
 6000              		.loc 1 872 5 view .LVU1576
 873:armwave.c     ****     
 6001              		.loc 1 873 5 view .LVU1577
 875:armwave.c     ****     
 6002              		.loc 1 875 5 view .LVU1578
 6003              		.loc 1 877 5 view .LVU1579
 6004 1cb0 000094E5 		ldr	r0, [r4]	@, g_dpy
 6005 1cb4 FEFFFFEB 		bl	XStoreName		@
 6006              	.LVL316:
 878:armwave.c     ****     XSetIconName(g_dpy, g_window, "ArmWave Render Buffer");
 6007              		.loc 1 878 5 view .LVU1580
 6008 1cb8 001095E5 		ldr	r1, [r5]	@, g_window
 6009 1cbc 50209FE5 		ldr	r2, .L272+16	@,
 6010 1cc0 000094E5 		ldr	r0, [r4]	@, g_dpy
 6011 1cc4 FEFFFFEB 		bl	XSetIconName		@
 6012              	.LVL317:
 879:armwave.c     ****     XSelectInput(g_dpy, g_window, StructureNotifyMask);
 6013              		.loc 1 879 5 view .LVU1581
 6014 1cc8 001095E5 		ldr	r1, [r5]	@, g_window
 6015 1ccc 0228A0E3 		mov	r2, #131072	@,
 6016 1cd0 000094E5 		ldr	r0, [r4]	@, g_dpy
 6017 1cd4 FEFFFFEB 		bl	XSelectInput		@
 6018              	.LVL318:
 880:armwave.c     ****     
 881:armwave.c     ****     printf("Window done, mapping...\n");
 6019              		.loc 1 881 5 view .LVU1582
 6020 1cd8 38009FE5 		ldr	r0, .L272+20	@,
 6021 1cdc FEFFFFEB 		bl	puts		@
 6022              	.LVL319:
 882:armwave.c     **** 
 883:armwave.c     **** #if 1	 
 884:armwave.c     ****     XMapWindow(g_dpy, g_window);
 6023              		.loc 1 884 5 view .LVU1583
 6024 1ce0 001095E5 		ldr	r1, [r5]	@, g_window
 6025 1ce4 000094E5 		ldr	r0, [r4]	@, g_dpy
 6026 1ce8 FEFFFFEB 		bl	XMapWindow		@
 6027              	.LVL320:
 885:armwave.c     **** 
 886:armwave.c     **** #if 0    
 887:armwave.c     ****     do {
 888:armwave.c     ****         XNextEvent(g_dpy, &event);
 889:armwave.c     ****     }
 890:armwave.c     ****     while(event.type != MapNotify || event.xmap.event != g_window);
 891:armwave.c     **** #endif
 892:armwave.c     **** #endif
 893:armwave.c     **** 
 894:armwave.c     ****     printf("All done in window\n");
 6028              		.loc 1 894 5 view .LVU1584
 6029 1cec 28009FE5 		ldr	r0, .L272+24	@,
 6030              	@ armwave.c:895: }
 895:armwave.c     **** }
 6031              		.loc 1 895 1 is_stmt 0 view .LVU1585
 6032 1cf0 7040BDE8 		pop	{r4, r5, r6, lr}	@
 6033              		.cfi_remember_state
 6034              		.cfi_restore 14
 6035              		.cfi_restore 6
 6036              		.cfi_restore 5
 6037              		.cfi_restore 4
 6038              		.cfi_def_cfa_offset 0
 6039              	.LVL321:
 6040              	@ armwave.c:894:     printf("All done in window\n");
 894:armwave.c     **** }
 6041              		.loc 1 894 5 view .LVU1586
 6042 1cf4 FEFFFFEA 		b	puts		@
 6043              	.LVL322:
 6044              	.L271:
 6045              		.cfi_restore_state
 867:armwave.c     ****     }
 6046              		.loc 1 867 9 is_stmt 1 view .LVU1587
 6047 1cf8 FEFFFFEB 		bl	XUnmapWindow		@
 6048              	.LVL323:
 6049 1cfc 000094E5 		ldr	r0, [r4]	@ pretmp_47, g_dpy
 6050 1d00 D7FFFFEA 		b	.L266		@
 6051              	.L273:
 6052              		.align	2
 6053              	.L272:
 6054 1d04 00000000 		.word	.LANCHOR1
 6055 1d08 00000000 		.word	g_dpy
 6056 1d0c 00000000 		.word	g_vinfo
 6057 1d10 00000000 		.word	g_xswa
 6058 1d14 A8030000 		.word	.LC23
 6059 1d18 C0030000 		.word	.LC24
 6060 1d1c D8030000 		.word	.LC25
 6061              		.cfi_endproc
 6062              	.LFE83:
 6064              		.align	2
 6065              		.global	armwave_create_xwindow
 6066              		.syntax unified
 6067              		.arm
 6068              		.fpu vfp
 6070              	armwave_create_xwindow:
 6071              	.LFB80:
 810:armwave.c     ****     Window window;
 6072              		.loc 1 810 1 view -0
 6073              		.cfi_startproc
 6074              		@ args = 0, pretend = 0, frame = 0
 6075              		@ frame_needed = 0, uses_anonymous_args = 0
 811:armwave.c     ****     unsigned long mask;
 6076              		.loc 1 811 5 view .LVU1589
 812:armwave.c     ****     
 6077              		.loc 1 812 5 view .LVU1590
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6078              		.loc 1 814 5 view .LVU1591
 6079              	@ armwave.c:810: {
 810:armwave.c     ****     Window window;
 6080              		.loc 1 810 1 is_stmt 0 view .LVU1592
 6081 1d20 30402DE9 		push	{r4, r5, lr}	@
 6082              		.cfi_def_cfa_offset 12
 6083              		.cfi_offset 4, -12
 6084              		.cfi_offset 5, -8
 6085              		.cfi_offset 14, -4
 6086              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6087              		.loc 1 814 23 view .LVU1593
 6088 1d24 0030A0E3 		mov	r3, #0	@,
 6089 1d28 C4409FE5 		ldr	r4, .L276	@ tmp130,
 6090 1d2c C4509FE5 		ldr	r5, .L276+4	@ tmp131,
 6091              	@ armwave.c:810: {
 810:armwave.c     ****     Window window;
 6092              		.loc 1 810 1 view .LVU1594
 6093 1d30 24D04DE2 		sub	sp, sp, #36	@,,
 6094              		.cfi_def_cfa_offset 48
 6095              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6096              		.loc 1 814 23 view .LVU1595
 6097 1d34 000094E5 		ldr	r0, [r4]	@ g_dpy.36_1, g_dpy
 6098 1d38 002095E5 		ldr	r2, [r5]	@, g_vinfo.visual
 6099              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6100              		.loc 1 814 46 view .LVU1596
 6101 1d3c 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)g_dpy.36_1].default_screen, MEM[(struct  *)g_dpy.36_1].default
 6102              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6103              		.loc 1 814 23 view .LVU1597
 6104 1d40 8CC090E5 		ldr	ip, [r0, #140]	@ MEM[(struct  *)g_dpy.36_1].screens, MEM[(struct  *)g_dpy.36_1].screens
 6105 1d44 011181E0 		add	r1, r1, r1, lsl #2	@ tmp137, MEM[(struct  *)g_dpy.36_1].default_screen, MEM[(struct  *)g_dpy.3
 6106 1d48 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp139, MEM[(struct  *)g_dpy.36_1].screens, tmp137,
 6107 1d4c 081091E5 		ldr	r1, [r1, #8]	@, _6->root
 6108 1d50 FEFFFFEB 		bl	XCreateColormap		@
 6109              	.LVL324:
 6110              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6111              		.loc 1 821 14 view .LVU1598
 6112 1d54 004094E5 		ldr	r4, [r4]	@ g_dpy.39_10, g_dpy
 6113 1d58 00E095E5 		ldr	lr, [r5]	@ g_vinfo.visual, g_vinfo.visual
 6114              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6115              		.loc 1 814 21 view .LVU1599
 6116 1d5c 98C09FE5 		ldr	ip, .L276+8	@ tmp141,
 6117              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6118              		.loc 1 821 35 view .LVU1600
 6119 1d60 843094E5 		ldr	r3, [r4, #132]	@ MEM[(struct  *)g_dpy.39_10].default_screen, MEM[(struct  *)g_dpy.39_10].defau
 6120              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6121              		.loc 1 821 14 view .LVU1601
 6122 1d64 8C2094E5 		ldr	r2, [r4, #140]	@ MEM[(struct  *)g_dpy.39_10].screens, MEM[(struct  *)g_dpy.39_10].screens
 6123 1d68 0C5095E5 		ldr	r5, [r5, #12]	@ g_vinfo.depth, g_vinfo.depth
 6124 1d6c 033183E0 		add	r3, r3, r3, lsl #2	@ tmp153, MEM[(struct  *)g_dpy.39_10].default_screen, MEM[(struct  *)g_dpy.
 6125 1d70 033282E0 		add	r3, r2, r3, lsl #4	@ tmp155, MEM[(struct  *)g_dpy.39_10].screens, tmp153,
 6126 1d74 84209FE5 		ldr	r2, .L276+12	@ tmp158,
 6127 1d78 081093E5 		ldr	r1, [r3, #8]	@ _15->root, _15->root
 6128 1d7c 18208DE5 		str	r2, [sp, #24]	@ tmp158,
 6129 1d80 0130A0E3 		mov	r3, #1	@ tmp161,
 6130 1d84 1E2EA0E3 		mov	r2, #480	@ tmp165,
 6131 1d88 14E08DE5 		str	lr, [sp, #20]	@ g_vinfo.visual,
 6132 1d8c 10308DE5 		str	r3, [sp, #16]	@ tmp161,
 6133              	@ armwave.c:816:     g_xswa.background_pixel = 0;
 816:armwave.c     ****     g_xswa.border_pixel = 0;
 6134              		.loc 1 816 29 view .LVU1602
 6135 1d90 00E0A0E3 		mov	lr, #0	@ tmp145,
 6136              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6137              		.loc 1 821 14 view .LVU1603
 6138 1d94 04208DE5 		str	r2, [sp, #4]	@ tmp165,
 6139 1d98 0A3DA0E3 		mov	r3, #640	@ tmp166,
 6140              	@ armwave.c:815:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 815:armwave.c     ****     g_xswa.background_pixel = 0;
 6141              		.loc 1 815 23 view .LVU1604
 6142 1d9c 0A29A0E3 		mov	r2, #163840	@ tmp143,
 6143              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6144              		.loc 1 821 14 view .LVU1605
 6145 1da0 1CC08DE5 		str	ip, [sp, #28]	@ tmp141,
 6146 1da4 08E08DE5 		str	lr, [sp, #8]	@ tmp145,
 6147 1da8 00308DE5 		str	r3, [sp]	@ tmp166,
 6148 1dac 0C508DE5 		str	r5, [sp, #12]	@ g_vinfo.depth,
 6149 1db0 0E30A0E1 		mov	r3, lr	@, tmp145
 6150              	@ armwave.c:815:     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 815:armwave.c     ****     g_xswa.background_pixel = 0;
 6151              		.loc 1 815 23 view .LVU1606
 6152 1db4 28208CE5 		str	r2, [ip, #40]	@ tmp143, g_xswa.event_mask
 6153              	@ armwave.c:816:     g_xswa.background_pixel = 0;
 816:armwave.c     ****     g_xswa.border_pixel = 0;
 6154              		.loc 1 816 29 view .LVU1607
 6155 1db8 04E08CE5 		str	lr, [ip, #4]	@ tmp145, g_xswa.background_pixel
 6156              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6157              		.loc 1 821 14 view .LVU1608
 6158 1dbc 0E20A0E1 		mov	r2, lr	@, tmp3
 6159              	@ armwave.c:817:     g_xswa.border_pixel = 0;
 817:armwave.c     ****     
 6160              		.loc 1 817 25 view .LVU1609
 6161 1dc0 0CE08CE5 		str	lr, [ip, #12]	@ tmp145, g_xswa.border_pixel
 6162              	@ armwave.c:814:     g_xswa.colormap = XCreateColormap(g_dpy, DefaultRootWindow(g_dpy), g_vinfo.vis
 814:armwave.c     ****     g_xswa.event_mask = StructureNotifyMask | ExposureMask;
 6163              		.loc 1 814 21 view .LVU1610
 6164 1dc4 34008CE5 		str	r0, [ip, #52]	@, g_xswa.colormap
 815:armwave.c     ****     g_xswa.background_pixel = 0;
 6165              		.loc 1 815 5 is_stmt 1 view .LVU1611
 816:armwave.c     ****     g_xswa.border_pixel = 0;
 6166              		.loc 1 816 5 view .LVU1612
 817:armwave.c     ****     
 6167              		.loc 1 817 5 view .LVU1613
 819:armwave.c     ****     
 6168              		.loc 1 819 5 view .LVU1614
 6169              	.LVL325:
 821:armwave.c     **** 			 0, 0,
 6170              		.loc 1 821 5 view .LVU1615
 6171              	@ armwave.c:821:     window = XCreateWindow(g_dpy, DefaultRootWindow(g_dpy),
 821:armwave.c     **** 			 0, 0,
 6172              		.loc 1 821 14 is_stmt 0 view .LVU1616
 6173 1dc8 0400A0E1 		mov	r0, r4	@, g_dpy.39_10
 6174 1dcc FEFFFFEB 		bl	XCreateWindow		@
 6175              	.LVL326:
 6176 1dd0 0040A0E1 		mov	r4, r0	@ window,
 6177              	.LVL327:
 830:armwave.c     ****     
 6178              		.loc 1 830 5 is_stmt 1 view .LVU1617
 6179 1dd4 0020A0E1 		mov	r2, r0	@, window
 6180 1dd8 0010A0E1 		mov	r1, r0	@, window
 6181 1ddc 20009FE5 		ldr	r0, .L276+16	@,
 6182              	.LVL328:
 830:armwave.c     ****     
 6183              		.loc 1 830 5 is_stmt 0 view .LVU1618
 6184 1de0 FEFFFFEB 		bl	printf		@
 6185              	.LVL329:
 832:armwave.c     **** }
 6186              		.loc 1 832 5 is_stmt 1 view .LVU1619
 6187 1de4 0400A0E1 		mov	r0, r4	@, window
 6188              	@ armwave.c:833: }
 833:armwave.c     **** 
 6189              		.loc 1 833 1 is_stmt 0 view .LVU1620
 6190 1de8 24D08DE2 		add	sp, sp, #36	@,,
 6191              		.cfi_def_cfa_offset 12
 6192              		@ sp needed	@
 6193 1dec 3040BDE8 		pop	{r4, r5, lr}	@
 6194              		.cfi_restore 14
 6195              		.cfi_restore 5
 6196              		.cfi_restore 4
 6197              		.cfi_def_cfa_offset 0
 6198              	.LVL330:
 6199              	@ armwave.c:832:     armwave_grab_xid(window);
 832:armwave.c     **** }
 6200              		.loc 1 832 5 view .LVU1621
 6201 1df0 FEFFFFEA 		b	armwave_grab_xid		@
 6202              	.LVL331:
 6203              	.L277:
 832:armwave.c     **** }
 6204              		.loc 1 832 5 view .LVU1622
 6205              		.align	2
 6206              	.L276:
 6207 1df4 00000000 		.word	g_dpy
 6208 1df8 00000000 		.word	g_vinfo
 6209 1dfc 00000000 		.word	g_xswa
 6210 1e00 0A280000 		.word	10250
 6211 1e04 EC030000 		.word	.LC26
 6212              		.cfi_endproc
 6213              	.LFE80:
 6215              		.align	2
 6216              		.global	armwave_init_x11
 6217              		.syntax unified
 6218              		.arm
 6219              		.fpu vfp
 6221              	armwave_init_x11:
 6222              	.LFB84:
 896:armwave.c     **** 
 897:armwave.c     **** /*
 898:armwave.c     ****  * Initialise the Xvideo and MITSHM extension.
 899:armwave.c     ****  */
 900:armwave.c     **** void armwave_init_x11()
 901:armwave.c     **** {
 6223              		.loc 1 901 1 is_stmt 1 view -0
 6224              		.cfi_startproc
 6225              		@ args = 0, pretend = 0, frame = 0
 6226              		@ frame_needed = 0, uses_anonymous_args = 0
 902:armwave.c     ****     int screen;
 6227              		.loc 1 902 5 view .LVU1624
 903:armwave.c     ****     
 904:armwave.c     ****     printf("armwave: initialising for X11...\n");
 6228              		.loc 1 904 5 view .LVU1625
 6229              	@ armwave.c:901: {
 901:armwave.c     ****     int screen;
 6230              		.loc 1 901 1 is_stmt 0 view .LVU1626
 6231 1e08 04E02DE5 		str	lr, [sp, #-4]!	@,
 6232              		.cfi_def_cfa_offset 4
 6233              		.cfi_offset 14, -4
 6234 1e0c 0CD04DE2 		sub	sp, sp, #12	@,,
 6235              		.cfi_def_cfa_offset 16
 6236              	@ armwave.c:904:     printf("armwave: initialising for X11...\n");
 6237              		.loc 1 904 5 view .LVU1627
 6238 1e10 68009FE5 		ldr	r0, .L283	@,
 6239 1e14 FEFFFFEB 		bl	puts		@
 6240              	.LVL332:
 905:armwave.c     ****         
 906:armwave.c     ****     /*
 907:armwave.c     ****      * Try to open the display.
 908:armwave.c     ****      */
 909:armwave.c     ****     g_dpy = XOpenDisplay(NULL);
 6241              		.loc 1 909 5 is_stmt 1 view .LVU1628
 6242              	@ armwave.c:909:     g_dpy = XOpenDisplay(NULL);
 6243              		.loc 1 909 13 is_stmt 0 view .LVU1629
 6244 1e18 0000A0E3 		mov	r0, #0	@,
 6245 1e1c FEFFFFEB 		bl	XOpenDisplay		@
 6246              	.LVL333:
 6247              	@ armwave.c:909:     g_dpy = XOpenDisplay(NULL);
 6248              		.loc 1 909 11 view .LVU1630
 6249 1e20 5C209FE5 		ldr	r2, .L283+4	@ tmp114,
 6250              	@ armwave.c:910:     if (g_dpy == NULL) {
 910:armwave.c     ****     if (g_dpy == NULL) {
 6251              		.loc 1 910 8 view .LVU1631
 6252 1e24 000050E3 		cmp	r0, #0	@ _1,
 6253              	@ armwave.c:909:     g_dpy = XOpenDisplay(NULL);
 909:armwave.c     ****     if (g_dpy == NULL) {
 6254              		.loc 1 909 11 view .LVU1632
 6255 1e28 000082E5 		str	r0, [r2]	@ _1, g_dpy
 6256              		.loc 1 910 5 is_stmt 1 view .LVU1633
 6257              	@ armwave.c:910:     if (g_dpy == NULL) {
 6258              		.loc 1 910 8 is_stmt 0 view .LVU1634
 6259 1e2c 0B00000A 		beq	.L282		@,
 911:armwave.c     ****         printf("Error: Fatal X11: Cannot open display.\n");
 912:armwave.c     ****         exit (-1);
 913:armwave.c     ****     }
 914:armwave.c     ****     
 915:armwave.c     ****     screen = DefaultScreen(g_dpy);
 6260              		.loc 1 915 5 is_stmt 1 view .LVU1635
 6261              	.LVL334:
 916:armwave.c     ****     
 917:armwave.c     ****     /*
 918:armwave.c     ****      * Check the display supports 24-bit TrueColor, if not then abort early.
 919:armwave.c     ****      */
 920:armwave.c     ****     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 6262              		.loc 1 920 5 view .LVU1636
 6263              	@ armwave.c:920:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 6264              		.loc 1 920 9 is_stmt 0 view .LVU1637
 6265 1e30 50309FE5 		ldr	r3, .L283+8	@ tmp117,
 6266 1e34 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)_1].default_screen, MEM[(struct  *)_1].default_screen
 6267 1e38 1820A0E3 		mov	r2, #24	@,
 6268 1e3c 00308DE5 		str	r3, [sp]	@ tmp117,
 6269              	.LVL335:
 6270              		.loc 1 920 9 view .LVU1638
 6271 1e40 0430A0E3 		mov	r3, #4	@,
 6272 1e44 FEFFFFEB 		bl	XMatchVisualInfo		@
 6273              	.LVL336:
 6274              	@ armwave.c:920:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 6275              		.loc 1 920 8 view .LVU1639
 6276 1e48 000050E3 		cmp	r0, #0	@,
 6277 1e4c 0700000A 		beq	.L280		@,
 921:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 6278              		.loc 1 921 9 is_stmt 1 view .LVU1640
 6279 1e50 34009FE5 		ldr	r0, .L283+12	@,
 6280              	@ armwave.c:926: }
 922:armwave.c     ****     } else {
 923:armwave.c     ****         printf("Error: Fatal X11: not supported 24-bit TrueColor display.\n");
 924:armwave.c     ****         exit(-1);
 925:armwave.c     ****     }
 926:armwave.c     **** }
 6281              		.loc 1 926 1 is_stmt 0 view .LVU1641
 6282 1e54 0CD08DE2 		add	sp, sp, #12	@,,
 6283              		.cfi_remember_state
 6284              		.cfi_def_cfa_offset 4
 6285              		@ sp needed	@
 6286 1e58 04E09DE4 		ldr	lr, [sp], #4	@,
 6287              		.cfi_restore 14
 6288              		.cfi_def_cfa_offset 0
 6289              	@ armwave.c:921:         printf("Found 24bit TrueColor.\n");
 921:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 6290              		.loc 1 921 9 view .LVU1642
 6291 1e5c FEFFFFEA 		b	puts		@
 6292              	.LVL337:
 6293              	.L282:
 6294              		.cfi_restore_state
 911:armwave.c     ****         exit (-1);
 6295              		.loc 1 911 9 is_stmt 1 view .LVU1643
 6296 1e60 28009FE5 		ldr	r0, .L283+16	@,
 6297 1e64 FEFFFFEB 		bl	puts		@
 6298              	.LVL338:
 912:armwave.c     ****     }
 6299              		.loc 1 912 9 view .LVU1644
 6300 1e68 0000E0E3 		mvn	r0, #0	@,
 6301 1e6c FEFFFFEB 		bl	exit		@
 6302              	.LVL339:
 6303              	.L280:
 923:armwave.c     ****         exit(-1);
 6304              		.loc 1 923 9 view .LVU1645
 6305 1e70 1C009FE5 		ldr	r0, .L283+20	@,
 6306 1e74 FEFFFFEB 		bl	puts		@
 6307              	.LVL340:
 924:armwave.c     ****     }
 6308              		.loc 1 924 9 view .LVU1646
 6309 1e78 0000E0E3 		mvn	r0, #0	@,
 6310 1e7c FEFFFFEB 		bl	exit		@
 6311              	.LVL341:
 6312              	.L284:
 6313              		.align	2
 6314              	.L283:
 6315 1e80 18040000 		.word	.LC27
 6316 1e84 00000000 		.word	g_dpy
 6317 1e88 00000000 		.word	g_vinfo
 6318 1e8c 64040000 		.word	.LC29
 6319 1e90 3C040000 		.word	.LC28
 6320 1e94 7C040000 		.word	.LC30
 6321              		.cfi_endproc
 6322              	.LFE84:
 6324              		.align	2
 6325              		.global	armwave_init_xvimage_shared
 6326              		.syntax unified
 6327              		.arm
 6328              		.fpu vfp
 6330              	armwave_init_xvimage_shared:
 6331              	.LVL342:
 6332              	.LFB85:
 927:armwave.c     **** 
 928:armwave.c     **** /*
 929:armwave.c     ****  * Create the shared memory buffer for the XvImage.
 930:armwave.c     ****  */
 931:armwave.c     **** void armwave_init_xvimage_shared(int tex_width, int tex_height)
 932:armwave.c     **** {
 6333              		.loc 1 932 1 view -0
 6334              		.cfi_startproc
 6335              		@ args = 0, pretend = 0, frame = 120
 6336              		@ frame_needed = 0, uses_anonymous_args = 0
 933:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 6337              		.loc 1 933 5 view .LVU1648
 934:armwave.c     ****     int	p_num_adaptors, ret, n;
 6338              		.loc 1 934 5 view .LVU1649
 935:armwave.c     ****     XGCValues gc_values;
 6339              		.loc 1 935 5 view .LVU1650
 936:armwave.c     ****     XvAdaptorInfo *ai;
 6340              		.loc 1 936 5 view .LVU1651
 937:armwave.c     ****     
 938:armwave.c     ****     tex_width = g_armwave_state.target_width;
 6341              		.loc 1 938 5 view .LVU1652
 6342              	@ armwave.c:938:     tex_width = g_armwave_state.target_width;
 6343              		.loc 1 938 15 is_stmt 0 view .LVU1653
 6344 1e98 48329FE5 		ldr	r3, .L308	@ tmp166,
 6345              	@ armwave.c:932: {
 932:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 6346              		.loc 1 932 1 view .LVU1654
 6347 1e9c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 6348              		.cfi_def_cfa_offset 32
 6349              		.cfi_offset 4, -32
 6350              		.cfi_offset 5, -28
 6351              		.cfi_offset 6, -24
 6352              		.cfi_offset 7, -20
 6353              		.cfi_offset 8, -16
 6354              		.cfi_offset 9, -12
 6355              		.cfi_offset 10, -8
 6356              		.cfi_offset 14, -4
 6357              	@ armwave.c:940:     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 939:armwave.c     ****     
 940:armwave.c     ****     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 6358              		.loc 1 940 5 view .LVU1655
 6359 1ea0 0120A0E1 		mov	r2, r1	@, tex_height
 6360              	@ armwave.c:938:     tex_width = g_armwave_state.target_width;
 938:armwave.c     ****     
 6361              		.loc 1 938 15 view .LVU1656
 6362 1ea4 746093E5 		ldr	r6, [r3, #116]	@ tex_width, g_armwave_state.target_width
 6363              	.LVL343:
 6364              		.loc 1 940 5 is_stmt 1 view .LVU1657
 6365              	@ armwave.c:945:     if(!XShmQueryExtension(g_dpy)) {
 941:armwave.c     ****     
 942:armwave.c     ****     /*
 943:armwave.c     ****      * Query the MITSHM extension - check it is available.
 944:armwave.c     ****      */
 945:armwave.c     ****     if(!XShmQueryExtension(g_dpy)) {
 6366              		.loc 1 945 9 is_stmt 0 view .LVU1658
 6367 1ea8 3C729FE5 		ldr	r7, .L308+4	@ tmp255,
 6368              	@ armwave.c:932: {
 932:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 6369              		.loc 1 932 1 view .LVU1659
 6370 1eac 88D04DE2 		sub	sp, sp, #136	@,,
 6371              		.cfi_def_cfa_offset 168
 6372              	@ armwave.c:932: {
 932:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 6373              		.loc 1 932 1 view .LVU1660
 6374 1eb0 01A0A0E1 		mov	r10, r1	@ tex_height, tex_height
 6375              	@ armwave.c:940:     printf("armwave_init_xvimage_shared(%d,%d)\n", tex_width, tex_height);
 940:armwave.c     ****     
 6376              		.loc 1 940 5 view .LVU1661
 6377 1eb4 34029FE5 		ldr	r0, .L308+8	@,
 6378 1eb8 0610A0E1 		mov	r1, r6	@, tex_width
 6379              	.LVL344:
 940:armwave.c     ****     
 6380              		.loc 1 940 5 view .LVU1662
 6381 1ebc FEFFFFEB 		bl	printf		@
 6382              	.LVL345:
 6383              		.loc 1 945 5 is_stmt 1 view .LVU1663
 6384              	@ armwave.c:945:     if(!XShmQueryExtension(g_dpy)) {
 6385              		.loc 1 945 9 is_stmt 0 view .LVU1664
 6386 1ec0 000097E5 		ldr	r0, [r7]	@, g_dpy
 6387 1ec4 FEFFFFEB 		bl	XShmQueryExtension		@
 6388              	.LVL346:
 6389              	@ armwave.c:945:     if(!XShmQueryExtension(g_dpy)) {
 6390              		.loc 1 945 7 view .LVU1665
 6391 1ec8 000050E3 		cmp	r0, #0	@,
 6392 1ecc 6E00000A 		beq	.L303		@,
 946:armwave.c     ****         printf("Error: Fatal X11: Shared memory extension not available or failed to allocate share
 947:armwave.c     ****         exit(-1);
 948:armwave.c     ****     }
 949:armwave.c     ****     
 950:armwave.c     ****     XShmGetEventBase(g_dpy);  // What does this do? 
 6393              		.loc 1 950 5 is_stmt 1 view .LVU1666
 6394 1ed0 000097E5 		ldr	r0, [r7]	@, g_dpy
 6395 1ed4 FEFFFFEB 		bl	XShmGetEventBase		@
 6396              	.LVL347:
 951:armwave.c     ****     
 952:armwave.c     ****     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 6397              		.loc 1 952 5 view .LVU1667
 6398              	@ armwave.c:952:     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 6399              		.loc 1 952 11 is_stmt 0 view .LVU1668
 6400 1ed8 20208DE2 		add	r2, sp, #32	@ tmp178,,
 6401 1edc 1C308DE2 		add	r3, sp, #28	@ tmp179,,
 6402 1ee0 04208DE5 		str	r2, [sp, #4]	@ tmp178,
 6403 1ee4 00308DE5 		str	r3, [sp]	@ tmp179,
 6404 1ee8 14208DE2 		add	r2, sp, #20	@,,
 6405 1eec 18308DE2 		add	r3, sp, #24	@,,
 6406 1ef0 10108DE2 		add	r1, sp, #16	@,,
 6407 1ef4 000097E5 		ldr	r0, [r7]	@, g_dpy
 6408 1ef8 FEFFFFEB 		bl	XvQueryExtension		@
 6409              	.LVL348:
 953:armwave.c     **** 			 &p_event_base, &p_error_base);
 954:armwave.c     ****     if(ret != Success) {
 6410              		.loc 1 954 5 is_stmt 1 view .LVU1669
 6411              	@ armwave.c:954:     if(ret != Success) {
 6412              		.loc 1 954 7 is_stmt 0 view .LVU1670
 6413 1efc 000050E3 		cmp	r0, #0	@ ret
 6414              		.loc 1 954 7 view .LVU1671
 6415 1f00 7300001A 		bne	.L304		@,
 955:armwave.c     ****         printf("Error: Fatal X11: Unable to find XVideo extension (%d).  Is it configured correctly
 956:armwave.c     ****         exit(-1);
 957:armwave.c     ****     }
 958:armwave.c     ****     
 959:armwave.c     ****     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 6416              		.loc 1 959 5 is_stmt 1 view .LVU1672
 6417              	@ armwave.c:959:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 6418              		.loc 1 959 11 is_stmt 0 view .LVU1673
 6419 1f04 002097E5 		ldr	r2, [r7]	@ g_dpy.68_5, g_dpy
 6420 1f08 28308DE2 		add	r3, sp, #40	@,,
 6421 1f0c 0200A0E1 		mov	r0, r2	@, g_dpy.68_5
 6422              	.LVL349:
 6423              	@ armwave.c:959:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 6424              		.loc 1 959 34 view .LVU1674
 6425 1f10 841092E5 		ldr	r1, [r2, #132]	@ MEM[(struct  *)g_dpy.68_5].default_screen, MEM[(struct  *)g_dpy.68_5].default
 6426              	@ armwave.c:959:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 6427              		.loc 1 959 11 view .LVU1675
 6428 1f14 8CC092E5 		ldr	ip, [r2, #140]	@ MEM[(struct  *)g_dpy.68_5].screens, MEM[(struct  *)g_dpy.68_5].screens
 6429 1f18 24208DE2 		add	r2, sp, #36	@,,
 6430 1f1c 011181E0 		add	r1, r1, r1, lsl #2	@ tmp188, MEM[(struct  *)g_dpy.68_5].default_screen, MEM[(struct  *)g_dpy.6
 6431 1f20 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp190, MEM[(struct  *)g_dpy.68_5].screens, tmp188,
 6432 1f24 081091E5 		ldr	r1, [r1, #8]	@, _10->root
 6433 1f28 FEFFFFEB 		bl	XvQueryAdaptors		@
 6434              	.LVL350:
 960:armwave.c     **** 			&p_num_adaptors, &ai);
 961:armwave.c     ****     
 962:armwave.c     ****     if(ret != Success) {
 6435              		.loc 1 962 5 is_stmt 1 view .LVU1676
 6436              	@ armwave.c:962:     if(ret != Success) {
 6437              		.loc 1 962 7 is_stmt 0 view .LVU1677
 6438 1f2c 004050E2 		subs	r4, r0, #0	@ n,
 6439 1f30 6200001A 		bne	.L305		@,
 963:armwave.c     ****         printf("Error: Fatal X11: Unable to query XVideo extension (%d).  Is it configured correctl
 964:armwave.c     ****         exit(-1);
 965:armwave.c     ****     }
 966:armwave.c     ****     
 967:armwave.c     ****     // Use the last port available
 968:armwave.c     ****     g_xv_port = ai[p_num_adaptors - 1].base_id;
 6440              		.loc 1 968 5 is_stmt 1 view .LVU1678
 6441              	@ armwave.c:968:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 6442              		.loc 1 968 19 is_stmt 0 view .LVU1679
 6443 1f34 24109DE5 		ldr	r1, [sp, #36]	@ p_num_adaptors.72_13, p_num_adaptors
 6444              	@ armwave.c:968:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 6445              		.loc 1 968 39 view .LVU1680
 6446 1f38 28309DE5 		ldr	r3, [sp, #40]	@ ai, ai
 6447              	@ armwave.c:968:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 6448              		.loc 1 968 15 view .LVU1681
 6449 1f3c B0919FE5 		ldr	r9, .L308+12	@ tmp254,
 6450              	@ armwave.c:968:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 6451              		.loc 1 968 39 view .LVU1682
 6452 1f40 812161E0 		rsb	r2, r1, r1, lsl #3	@ tmp196, p_num_adaptors.72_13, p_num_adaptors.72_13,
 6453 1f44 023183E0 		add	r3, r3, r2, lsl #2	@ tmp198, ai, tmp196,
 6454 1f48 1C5013E5 		ldr	r5, [r3, #-28]	@ _19, _17->base_id
 6455              	@ armwave.c:969:     if(g_xv_port == -1) {
 969:armwave.c     ****     if(g_xv_port == -1) {
 6456              		.loc 1 969 7 view .LVU1683
 6457 1f4c 010075E3 		cmn	r5, #1	@ _19,
 6458              	@ armwave.c:968:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 968:armwave.c     ****     if(g_xv_port == -1) {
 6459              		.loc 1 968 15 view .LVU1684
 6460 1f50 005089E5 		str	r5, [r9]	@ _19, g_xv_port
 6461              		.loc 1 969 5 is_stmt 1 view .LVU1685
 6462              	@ armwave.c:969:     if(g_xv_port == -1) {
 6463              		.loc 1 969 7 is_stmt 0 view .LVU1686
 6464 1f54 5400000A 		beq	.L306		@,
 970:armwave.c     ****         printf("Error: Fatal X11: Unable to use the port %d\n\n", p_num_adaptors - 1);
 971:armwave.c     ****         exit(-1);
 972:armwave.c     ****     }
 973:armwave.c     ****     
 974:armwave.c     ****     /*
 975:armwave.c     ****      * Create the shared image and attach to it.
 976:armwave.c     ****      */
 977:armwave.c     ****     printf("Attaching XvShm...\n");
 6465              		.loc 1 977 5 is_stmt 1 view .LVU1687
 6466              	@ armwave.c:979:     if(g_yuv_image != NULL) {
 978:armwave.c     ****     
 979:armwave.c     ****     if(g_yuv_image != NULL) {
 6467              		.loc 1 979 20 is_stmt 0 view .LVU1688
 6468 1f58 98519FE5 		ldr	r5, .L308+16	@ tmp253,
 6469              	@ armwave.c:977:     printf("Attaching XvShm...\n");
 977:armwave.c     ****     
 6470              		.loc 1 977 5 view .LVU1689
 6471 1f5c 98019FE5 		ldr	r0, .L308+20	@,
 6472              	.LVL351:
 977:armwave.c     ****     
 6473              		.loc 1 977 5 view .LVU1690
 6474 1f60 FEFFFFEB 		bl	puts		@
 6475              	.LVL352:
 6476              		.loc 1 979 5 is_stmt 1 view .LVU1691
 6477              	@ armwave.c:979:     if(g_yuv_image != NULL) {
 6478              		.loc 1 979 20 is_stmt 0 view .LVU1692
 6479 1f64 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.76_21, g_yuv_image
 6480              	@ armwave.c:979:     if(g_yuv_image != NULL) {
 6481              		.loc 1 979 7 view .LVU1693
 6482 1f68 000050E3 		cmp	r0, #0	@ g_yuv_image.76_21,
 6483 1f6c 0100000A 		beq	.L290		@,
 980:armwave.c     ****         // Unsure if this is reasonable
 981:armwave.c     ****         XFree(g_yuv_image);
 6484              		.loc 1 981 9 is_stmt 1 view .LVU1694
 6485 1f70 FEFFFFEB 		bl	XFree		@
 6486              	.LVL353:
 982:armwave.c     ****         g_yuv_image = NULL;
 6487              		.loc 1 982 9 view .LVU1695
 6488              	@ armwave.c:982:         g_yuv_image = NULL;
 6489              		.loc 1 982 21 is_stmt 0 view .LVU1696
 6490 1f74 044085E5 		str	r4, [r5, #4]	@ n, g_yuv_image
 6491              	.L290:
 983:armwave.c     ****     }
 984:armwave.c     ****     
 985:armwave.c     ****     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_width, tex_height, &
 6492              		.loc 1 985 5 is_stmt 1 view .LVU1697
 6493              	@ armwave.c:985:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 6494              		.loc 1 985 19 is_stmt 0 view .LVU1698
 6495 1f78 80819FE5 		ldr	r8, .L308+24	@ tmp252,
 6496 1f7c 40048DE8 		stm	sp, {r6, r10}	@,,
 6497 1f80 0030A0E3 		mov	r3, #0	@,
 6498 1f84 78219FE5 		ldr	r2, .L308+28	@,
 6499 1f88 001099E5 		ldr	r1, [r9]	@, g_xv_port
 6500 1f8c 08808DE5 		str	r8, [sp, #8]	@ tmp252,
 6501 1f90 000097E5 		ldr	r0, [r7]	@, g_dpy
 6502 1f94 FEFFFFEB 		bl	XvShmCreateImage		@
 6503              	.LVL354:
 6504              	@ armwave.c:986:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 986:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 6505              		.loc 1 986 27 view .LVU1699
 6506 1f98 68219FE5 		ldr	r2, .L308+32	@,
 6507              	@ armwave.c:985:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 985:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 6508              		.loc 1 985 19 view .LVU1700
 6509 1f9c 0030A0E1 		mov	r3, r0	@ _25,
 6510              	@ armwave.c:986:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 6511              		.loc 1 986 27 view .LVU1701
 6512 1fa0 0C1090E5 		ldr	r1, [r0, #12]	@, _25->data_size
 6513 1fa4 0000A0E3 		mov	r0, #0	@,
 6514              	@ armwave.c:985:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 985:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 6515              		.loc 1 985 17 view .LVU1702
 6516 1fa8 043085E5 		str	r3, [r5, #4]	@ _25, g_yuv_image
 6517              		.loc 1 986 5 is_stmt 1 view .LVU1703
 6518              	@ armwave.c:986:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 6519              		.loc 1 986 27 is_stmt 0 view .LVU1704
 6520 1fac FEFFFFEB 		bl	shmget		@
 6521              	.LVL355:
 6522              	@ armwave.c:987:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 987:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 6523              		.loc 1 987 49 view .LVU1705
 6524 1fb0 0020A0E3 		mov	r2, #0	@,
 6525 1fb4 0210A0E1 		mov	r1, r2	@,
 6526              	@ armwave.c:987:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 6527              		.loc 1 987 40 view .LVU1706
 6528 1fb8 046095E5 		ldr	r6, [r5, #4]	@ g_yuv_image.82_29, g_yuv_image
 6529              	.LVL356:
 6530              	@ armwave.c:986:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 986:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 6531              		.loc 1 986 25 view .LVU1707
 6532 1fbc 040088E5 		str	r0, [r8, #4]	@, g_yuv_shminfo.shmid
 6533              		.loc 1 987 5 is_stmt 1 view .LVU1708
 6534              	@ armwave.c:987:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 6535              		.loc 1 987 49 is_stmt 0 view .LVU1709
 6536 1fc0 FEFFFFEB 		bl	shmat		@
 6537              	.LVL357:
 6538              	@ armwave.c:990:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 988:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 989:armwave.c     ****     
 990:armwave.c     ****     for(n = 0; n < g_yuv_image->num_planes; n++) {
 6539              		.loc 1 990 31 view .LVU1710
 6540 1fc4 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.87_39, g_yuv_image
 6541              	@ armwave.c:988:     g_yuv_shminfo.readOnly = False;
 988:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 6542              		.loc 1 988 28 view .LVU1711
 6543 1fc8 0020A0E3 		mov	r2, #0	@ tmp220,
 6544 1fcc 0C2088E5 		str	r2, [r8, #12]	@ tmp220, g_yuv_shminfo.readOnly
 6545              	@ armwave.c:990:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 6546              		.loc 1 990 5 view .LVU1712
 6547 1fd0 101093E5 		ldr	r1, [r3, #16]	@ g_yuv_image.87_107->num_planes, g_yuv_image.87_107->num_planes
 6548 1fd4 020051E1 		cmp	r1, r2	@ g_yuv_image.87_107->num_planes,
 6549              	@ armwave.c:987:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 987:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 6550              		.loc 1 987 47 view .LVU1713
 6551 1fd8 1C0086E5 		str	r0, [r6, #28]	@ _30, g_yuv_image.82_29->data
 6552              	@ armwave.c:987:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 987:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 6553              		.loc 1 987 27 view .LVU1714
 6554 1fdc 080088E5 		str	r0, [r8, #8]	@ _30, g_yuv_shminfo.shmaddr
 988:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 6555              		.loc 1 988 5 is_stmt 1 view .LVU1715
 6556              		.loc 1 990 5 view .LVU1716
 6557              	.LVL358:
 6558              		.loc 1 990 5 is_stmt 0 view .LVU1717
 6559 1fe0 0C0000DA 		ble	.L291		@,
 6560              	@ armwave.c:991:         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[
 991:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 6561              		.loc 1 991 9 view .LVU1718
 6562 1fe4 20619FE5 		ldr	r6, .L308+36	@ tmp256,
 6563              	.LVL359:
 6564              	.L292:
 6565              		.loc 1 991 9 is_stmt 1 discriminator 3 view .LVU1719
 6566 1fe8 140093E5 		ldr	r0, [r3, #20]	@ g_yuv_image.87_106->pitches, g_yuv_image.87_106->pitches
 6567 1fec 182093E5 		ldr	r2, [r3, #24]	@ g_yuv_image.87_106->offsets, g_yuv_image.87_106->offsets
 6568 1ff0 0410A0E1 		mov	r1, r4	@, n
 6569 1ff4 043190E7 		ldr	r3, [r0, r4, lsl #2]	@, *_37
 6570 1ff8 042192E7 		ldr	r2, [r2, r4, lsl #2]	@, *_34
 6571 1ffc 0600A0E1 		mov	r0, r6	@, tmp256
 6572 2000 FEFFFFEB 		bl	printf		@
 6573              	.LVL360:
 6574              	@ armwave.c:990:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 990:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 6575              		.loc 1 990 31 is_stmt 0 discriminator 3 view .LVU1720
 6576 2004 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.87_39, g_yuv_image
 6577              	@ armwave.c:990:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 990:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 6578              		.loc 1 990 46 discriminator 3 view .LVU1721
 6579 2008 014084E2 		add	r4, r4, #1	@ n, n,
 6580              	.LVL361:
 6581              	@ armwave.c:990:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 990:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 6582              		.loc 1 990 5 discriminator 3 view .LVU1722
 6583 200c 102093E5 		ldr	r2, [r3, #16]	@ g_yuv_image.87_39->num_planes, g_yuv_image.87_39->num_planes
 6584 2010 040052E1 		cmp	r2, r4	@ g_yuv_image.87_39->num_planes, n
 6585 2014 F3FFFFCA 		bgt	.L292		@,
 6586              	.LVL362:
 6587              	.L291:
 992:armwave.c     ****     }
 993:armwave.c     ****     
 994:armwave.c     ****     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 6588              		.loc 1 994 5 is_stmt 1 view .LVU1723
 6589              	@ armwave.c:994:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 6590              		.loc 1 994 9 is_stmt 0 view .LVU1724
 6591 2018 E0109FE5 		ldr	r1, .L308+24	@,
 6592 201c 000097E5 		ldr	r0, [r7]	@, g_dpy
 6593 2020 FEFFFFEB 		bl	XShmAttach		@
 6594              	.LVL363:
 6595              	@ armwave.c:994:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 6596              		.loc 1 994 7 view .LVU1725
 6597 2024 000050E3 		cmp	r0, #0	@,
 6598 2028 1B00000A 		beq	.L307		@,
 995:armwave.c     ****         printf("Error: Fatal X11: XShmAttached failed\n");
 996:armwave.c     ****         exit (-1);
 997:armwave.c     ****     }
 998:armwave.c     ****     
 999:armwave.c     ****     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_image->data_size, 
 6599              		.loc 1 999 5 is_stmt 1 view .LVU1726
 6600              	@ armwave.c:999:     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_i
 6601              		.loc 1 999 87 is_stmt 0 view .LVU1727
 6602 202c 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.89_43, g_yuv_image
 6603              	@ armwave.c:999:     printf("%d bytes for XvImage, shmid %d, xv_port %d, buffer: 0x%08x\n", g_yuv_i
 6604              		.loc 1 999 5 view .LVU1728
 6605 2030 003099E5 		ldr	r3, [r9]	@, g_xv_port
 6606 2034 042098E5 		ldr	r2, [r8, #4]	@, g_yuv_shminfo.shmid
 6607 2038 0C1090E5 		ldr	r1, [r0, #12]	@ g_yuv_image.89_43->data_size, g_yuv_image.89_43->data_size
 6608 203c 00008DE5 		str	r0, [sp]	@ g_yuv_image.89_43,
 6609 2040 C8009FE5 		ldr	r0, .L308+40	@,
 6610 2044 FEFFFFEB 		bl	printf		@
 6611              	.LVL364:
1000:armwave.c     ****     
1001:armwave.c     ****     // Create the GC
1002:armwave.c     ****     if(g_gc != NULL) {
 6612              		.loc 1 1002 5 is_stmt 1 view .LVU1729
 6613              	@ armwave.c:1002:     if(g_gc != NULL) {
 6614              		.loc 1 1002 13 is_stmt 0 view .LVU1730
 6615 2048 081095E5 		ldr	r1, [r5, #8]	@ g_gc.92_47, g_gc
 6616              	@ armwave.c:1002:     if(g_gc != NULL) {
 6617              		.loc 1 1002 7 view .LVU1731
 6618 204c 000051E3 		cmp	r1, #0	@ g_gc.92_47,
 6619 2050 0100000A 		beq	.L294		@,
1003:armwave.c     ****         XFreeGC(g_dpy, g_gc);
 6620              		.loc 1 1003 9 is_stmt 1 view .LVU1732
 6621 2054 000097E5 		ldr	r0, [r7]	@, g_dpy
 6622 2058 FEFFFFEB 		bl	XFreeGC		@
 6623              	.LVL365:
 6624              	.L294:
1004:armwave.c     ****     }
1005:armwave.c     ****     
1006:armwave.c     ****     gc_values.line_width = 1;
 6625              		.loc 1 1006 5 view .LVU1733
 6626              	@ armwave.c:1006:     gc_values.line_width = 1;
 6627              		.loc 1 1006 26 is_stmt 0 view .LVU1734
 6628 205c 0110A0E3 		mov	r1, #1	@ tmp244,
 6629              	@ armwave.c:1007:     gc_values.cap_style = CapNotLast;
1007:armwave.c     ****     gc_values.cap_style = CapNotLast;
 6630              		.loc 1 1007 25 view .LVU1735
 6631 2060 00C0A0E3 		mov	ip, #0	@ tmp245,
 6632              	@ armwave.c:1006:     gc_values.line_width = 1;
1006:armwave.c     ****     gc_values.cap_style = CapNotLast;
 6633              		.loc 1 1006 26 view .LVU1736
 6634 2064 3C108DE5 		str	r1, [sp, #60]	@ tmp244, gc_values.line_width
 6635              		.loc 1 1007 5 is_stmt 1 view .LVU1737
 6636              	@ armwave.c:1008:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCCapStyle, &gc_values);
1008:armwave.c     ****     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCCapStyle, &gc_values);
 6637              		.loc 1 1008 12 is_stmt 0 view .LVU1738
 6638 2068 000097E5 		ldr	r0, [r7]	@, g_dpy
 6639 206c 2C308DE2 		add	r3, sp, #44	@,,
 6640 2070 5020A0E3 		mov	r2, #80	@,
 6641 2074 001095E5 		ldr	r1, [r5]	@, g_window
 6642              	@ armwave.c:1007:     gc_values.cap_style = CapNotLast;
1007:armwave.c     ****     gc_values.cap_style = CapNotLast;
 6643              		.loc 1 1007 25 view .LVU1739
 6644 2078 44C08DE5 		str	ip, [sp, #68]	@ tmp245, gc_values.cap_style
 6645              		.loc 1 1008 5 is_stmt 1 view .LVU1740
 6646              	@ armwave.c:1008:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCCapStyle, &gc_values);
 6647              		.loc 1 1008 12 is_stmt 0 view .LVU1741
 6648 207c FEFFFFEB 		bl	XCreateGC		@
 6649              	.LVL366:
 6650              	@ armwave.c:1008:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCCapStyle, &gc_values);
 6651              		.loc 1 1008 10 view .LVU1742
 6652 2080 080085E5 		str	r0, [r5, #8]	@, g_gc
 6653              	@ armwave.c:1009: }
1009:armwave.c     **** }
 6654              		.loc 1 1009 1 view .LVU1743
 6655 2084 88D08DE2 		add	sp, sp, #136	@,,
 6656              		.cfi_remember_state
 6657              		.cfi_def_cfa_offset 32
 6658              		@ sp needed	@
 6659 2088 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 6660              	.LVL367:
 6661              	.L303:
 6662              		.cfi_restore_state
 946:armwave.c     ****         exit(-1);
 6663              		.loc 1 946 9 is_stmt 1 view .LVU1744
 6664 208c 80009FE5 		ldr	r0, .L308+44	@,
 6665 2090 FEFFFFEB 		bl	puts		@
 6666              	.LVL368:
 947:armwave.c     ****     }
 6667              		.loc 1 947 9 view .LVU1745
 6668 2094 0000E0E3 		mvn	r0, #0	@,
 6669 2098 FEFFFFEB 		bl	exit		@
 6670              	.LVL369:
 6671              	.L307:
 995:armwave.c     ****         exit (-1);
 6672              		.loc 1 995 9 view .LVU1746
 6673 209c 74009FE5 		ldr	r0, .L308+48	@,
 6674 20a0 FEFFFFEB 		bl	puts		@
 6675              	.LVL370:
 996:armwave.c     ****     }
 6676              		.loc 1 996 9 view .LVU1747
 6677 20a4 0000E0E3 		mvn	r0, #0	@,
 6678 20a8 FEFFFFEB 		bl	exit		@
 6679              	.LVL371:
 6680              	.L306:
 970:armwave.c     ****         exit(-1);
 6681              		.loc 1 970 9 view .LVU1748
 6682 20ac 011041E2 		sub	r1, r1, #1	@, p_num_adaptors.72_13,
 6683 20b0 64009FE5 		ldr	r0, .L308+52	@,
 6684              	.LVL372:
 970:armwave.c     ****         exit(-1);
 6685              		.loc 1 970 9 is_stmt 0 view .LVU1749
 6686 20b4 FEFFFFEB 		bl	printf		@
 6687              	.LVL373:
 971:armwave.c     ****     }
 6688              		.loc 1 971 9 is_stmt 1 view .LVU1750
 6689 20b8 0500A0E1 		mov	r0, r5	@, _19
 6690 20bc FEFFFFEB 		bl	exit		@
 6691              	.LVL374:
 6692              	.L305:
 963:armwave.c     ****         exit(-1);
 6693              		.loc 1 963 9 view .LVU1751
 6694 20c0 0410A0E1 		mov	r1, r4	@, n
 6695 20c4 54009FE5 		ldr	r0, .L308+56	@,
 6696              	.LVL375:
 963:armwave.c     ****         exit(-1);
 6697              		.loc 1 963 9 is_stmt 0 view .LVU1752
 6698 20c8 FEFFFFEB 		bl	printf		@
 6699              	.LVL376:
 964:armwave.c     ****     }
 6700              		.loc 1 964 9 is_stmt 1 view .LVU1753
 6701 20cc 0000E0E3 		mvn	r0, #0	@,
 6702 20d0 FEFFFFEB 		bl	exit		@
 6703              	.LVL377:
 6704              	.L304:
 955:armwave.c     ****         exit(-1);
 6705              		.loc 1 955 9 view .LVU1754
 6706 20d4 0010A0E1 		mov	r1, r0	@, ret
 6707 20d8 44009FE5 		ldr	r0, .L308+60	@,
 6708              	.LVL378:
 955:armwave.c     ****         exit(-1);
 6709              		.loc 1 955 9 is_stmt 0 view .LVU1755
 6710 20dc FEFFFFEB 		bl	printf		@
 6711              	.LVL379:
 956:armwave.c     ****     }
 6712              		.loc 1 956 9 is_stmt 1 view .LVU1756
 6713 20e0 0000E0E3 		mvn	r0, #0	@,
 6714 20e4 FEFFFFEB 		bl	exit		@
 6715              	.LVL380:
 6716              	.L309:
 6717              		.align	2
 6718              	.L308:
 6719 20e8 00000000 		.word	g_armwave_state
 6720 20ec 00000000 		.word	g_dpy
 6721 20f0 B8040000 		.word	.LC31
 6722 20f4 00000000 		.word	g_xv_port
 6723 20f8 00000000 		.word	.LANCHOR1
 6724 20fc 1C060000 		.word	.LC36
 6725 2100 00000000 		.word	g_yuv_shminfo
 6726 2104 59563132 		.word	842094169
 6727 2108 FF030000 		.word	1023
 6728 210c 30060000 		.word	.LC37
 6729 2110 80060000 		.word	.LC39
 6730 2114 DC040000 		.word	.LC32
 6731 2118 58060000 		.word	.LC38
 6732 211c EC050000 		.word	.LC35
 6733 2120 94050000 		.word	.LC34
 6734 2124 3C050000 		.word	.LC33
 6735              		.cfi_endproc
 6736              	.LFE85:
 6738              		.align	2
 6739              		.global	armwave_render_graticule
 6740              		.syntax unified
 6741              		.arm
 6742              		.fpu vfp
 6744              	armwave_render_graticule:
 6745              	.LFB86:
1010:armwave.c     **** 
1011:armwave.c     **** /*
1012:armwave.c     ****  * Render the graticule.
1013:armwave.c     ****  */
1014:armwave.c     **** void armwave_render_graticule()
1015:armwave.c     **** {
 6746              		.loc 1 1015 1 view -0
 6747              		.cfi_startproc
 6748              		@ args = 0, pretend = 0, frame = 8
 6749              		@ frame_needed = 0, uses_anonymous_args = 0
1016:armwave.c     ****     int w, h, i, j, mx, my, q, ch, cw, n_sub, hhalf, vhalf;
 6750              		.loc 1 1016 5 view .LVU1758
1017:armwave.c     ****     int x0, y0, x1, y1;
 6751              		.loc 1 1017 5 view .LVU1759
1018:armwave.c     ****     float gr_size, p;
 6752              		.loc 1 1018 5 view .LVU1760
1019:armwave.c     ****     /*
1020:armwave.c     ****     mx = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1021:armwave.c     ****     my = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
1022:armwave.c     ****     w = g_armwave_state.draw_width - g_armwave_state.frame_margin;
1023:armwave.c     ****     h = g_armwave_state.draw_height - g_armwave_state.frame_margin;
1024:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
1025:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
1026:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
1027:armwave.c     ****     cw = w - mx;
1028:armwave.c     ****     ch = h - my;
1029:armwave.c     ****     */
1030:armwave.c     ****     
1031:armwave.c     ****     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
 6753              		.loc 1 1031 5 view .LVU1761
 6754              	@ armwave.c:1015: {
1015:armwave.c     ****     int w, h, i, j, mx, my, q, ch, cw, n_sub, hhalf, vhalf;
 6755              		.loc 1 1015 1 is_stmt 0 view .LVU1762
 6756 2128 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 6757              		.cfi_def_cfa_offset 36
 6758              		.cfi_offset 4, -36
 6759              		.cfi_offset 5, -32
 6760              		.cfi_offset 6, -28
 6761              		.cfi_offset 7, -24
 6762              		.cfi_offset 8, -20
 6763              		.cfi_offset 9, -16
 6764              		.cfi_offset 10, -12
 6765              		.cfi_offset 11, -8
 6766              		.cfi_offset 14, -4
 6767 212c 028B2DED 		vpush.64	{d8}	@
 6768              		.cfi_def_cfa_offset 44
 6769              		.cfi_offset 80, -44
 6770              		.cfi_offset 81, -40
 6771              	@ armwave.c:1031:     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
 6772              		.loc 1 1031 25 view .LVU1763
 6773 2130 DC619FE5 		ldr	r6, .L326	@ tmp235,
 6774              	@ armwave.c:1038:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
1032:armwave.c     ****     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
1033:armwave.c     ****     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1034:armwave.c     ****     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
1035:armwave.c     ****     
1036:armwave.c     ****     //XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
1037:armwave.c     ****     
1038:armwave.c     ****     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 6775              		.loc 1 1038 5 view .LVU1764
 6776 2134 DC319FE5 		ldr	r3, .L326+4	@ tmp172,
 6777 2138 DC519FE5 		ldr	r5, .L326+8	@ tmp233,
 6778              	@ armwave.c:1031:     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1031:armwave.c     ****     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6779              		.loc 1 1031 25 view .LVU1765
 6780 213c 5C1096E5 		ldr	r1, [r6, #92]	@ _1, g_armwave_state.frame_margin
 6781              	@ armwave.c:1034:     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_s
1034:armwave.c     ****     
 6782              		.loc 1 1034 38 view .LVU1766
 6783 2140 882096E5 		ldr	r2, [r6, #136]	@ g_armwave_state.draw_height, g_armwave_state.draw_height
 6784              	@ armwave.c:1033:     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_st
1033:armwave.c     ****     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6785              		.loc 1 1033 37 view .LVU1767
 6786 2144 847096E5 		ldr	r7, [r6, #132]	@ g_armwave_state.draw_width, g_armwave_state.draw_width
 6787              	@ armwave.c:1038:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 6788              		.loc 1 1038 5 view .LVU1768
 6789 2148 D0819FE5 		ldr	r8, .L326+12	@ tmp234,
 6790              	@ armwave.c:1015: {
1015:armwave.c     ****     int w, h, i, j, mx, my, q, ch, cw, n_sub, hhalf, vhalf;
 6791              		.loc 1 1015 1 view .LVU1769
 6792 214c 1CD04DE2 		sub	sp, sp, #28	@,,
 6793              		.cfi_def_cfa_offset 72
 6794              	@ armwave.c:1031:     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1031:armwave.c     ****     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6795              		.loc 1 1031 56 view .LVU1770
 6796 2150 7C9096E5 		ldr	r9, [r6, #124]	@ _2, g_armwave_state.draw_xoff
 6797              	@ armwave.c:1032:     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
1032:armwave.c     ****     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
 6798              		.loc 1 1032 56 view .LVU1771
 6799 2154 804096E5 		ldr	r4, [r6, #128]	@ _3, g_armwave_state.draw_yoff
 6800              	@ armwave.c:1034:     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_s
1034:armwave.c     ****     
 6801              		.loc 1 1034 38 view .LVU1772
 6802 2158 010042E0 		sub	r0, r2, r1	@ _7, g_armwave_state.draw_height, _1
 6803              	@ armwave.c:1033:     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_st
1033:armwave.c     ****     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6804              		.loc 1 1033 37 view .LVU1773
 6805 215c 017047E0 		sub	r7, r7, r1	@ _5, g_armwave_state.draw_width, _1
 6806              	@ armwave.c:1034:     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_s
1034:armwave.c     ****     
 6807              		.loc 1 1034 8 view .LVU1774
 6808 2160 00B084E0 		add	fp, r4, r0	@ y1, _3, _7
 6809              	@ armwave.c:1038:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 6810              		.loc 1 1038 5 view .LVU1775
 6811 2164 002093E5 		ldr	r2, [r3]	@, g_grat_colour.pixel
 6812              	@ armwave.c:1031:     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1031:armwave.c     ****     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6813              		.loc 1 1031 25 view .LVU1776
 6814 2168 10108DE5 		str	r1, [sp, #16]	@ _1, %sfp
 6815              	@ armwave.c:1034:     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_s
1034:armwave.c     ****     
 6816              		.loc 1 1034 38 view .LVU1777
 6817 216c 14008DE5 		str	r0, [sp, #20]	@ _7, %sfp
 6818              	@ armwave.c:1033:     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_st
1033:armwave.c     ****     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6819              		.loc 1 1033 8 view .LVU1778
 6820 2170 07A089E0 		add	r10, r9, r7	@ x1, _2, _5
 6821              	@ armwave.c:1032:     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
1032:armwave.c     ****     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
 6822              		.loc 1 1032 8 view .LVU1779
 6823 2174 044081E0 		add	r4, r1, r4	@ y0, _1, _3
 6824              	@ armwave.c:1031:     x0 = g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
1031:armwave.c     ****     y0 = g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6825              		.loc 1 1031 8 view .LVU1780
 6826 2178 099081E0 		add	r9, r1, r9	@ x0, _1, _2
 6827              	.LVL381:
1032:armwave.c     ****     x1 = g_armwave_state.draw_width - g_armwave_state.frame_margin + g_armwave_state.draw_xoff;
 6828              		.loc 1 1032 5 is_stmt 1 view .LVU1781
1033:armwave.c     ****     y1 = g_armwave_state.draw_height - g_armwave_state.frame_margin + g_armwave_state.draw_yoff;
 6829              		.loc 1 1033 5 view .LVU1782
1034:armwave.c     ****     
 6830              		.loc 1 1034 5 view .LVU1783
 6831              		.loc 1 1038 5 view .LVU1784
 6832 217c 000098E5 		ldr	r0, [r8]	@, g_dpy
 6833 2180 081095E5 		ldr	r1, [r5, #8]	@, g_gc
 6834 2184 FEFFFFEB 		bl	XSetForeground		@
 6835              	.LVL382:
1039:armwave.c     ****     
1040:armwave.c     ****     //printf("colour: %5d, %5d, %5d (0x%08x)\n", g_grat_colour.red, g_grat_colour.green, g_grat_col
1041:armwave.c     ****     printf("dims: %d,%d,%d,%d\n", x0, y0, x1, y1);
 6836              		.loc 1 1041 5 view .LVU1785
 6837 2188 0A30A0E1 		mov	r3, r10	@, x1
 6838 218c 00B08DE5 		str	fp, [sp]	@ y1,
 6839 2190 0420A0E1 		mov	r2, r4	@, y0
 6840 2194 0910A0E1 		mov	r1, r9	@, x0
 6841 2198 84019FE5 		ldr	r0, .L326+16	@,
 6842 219c FEFFFFEB 		bl	printf		@
 6843              	.LVL383:
1042:armwave.c     ****     
1043:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 6844              		.loc 1 1043 5 view .LVU1786
 6845              	@ armwave.c:1043:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 6846              		.loc 1 1043 23 is_stmt 0 view .LVU1787
 6847 21a0 003096E5 		ldr	r3, [r6]	@ _11, g_armwave_state.flags
 6848              	@ armwave.c:1043:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 6849              		.loc 1 1043 7 view .LVU1788
 6850 21a4 010A13E3 		tst	r3, #4096	@ _11,
 6851 21a8 3C00001A 		bne	.L325		@,
 6852              	.L311:
1044:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x0, y0, x1, y0);
1045:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x0, y1, x1, y1);
1046:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x0, y0, x0, y1);
1047:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x1, y0, x1, y1);
1048:armwave.c     ****     }
1049:armwave.c     ****     
1050:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 6853              		.loc 1 1050 5 is_stmt 1 view .LVU1789
 6854              	@ armwave.c:1050:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 6855              		.loc 1 1050 7 is_stmt 0 view .LVU1790
 6856 21ac 020A13E3 		tst	r3, #8192	@ _11,
 6857 21b0 3700000A 		beq	.L310		@,
1051:armwave.c     ****         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6858              		.loc 1 1051 9 is_stmt 1 view .LVU1791
 6859              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6860              		.loc 1 1051 24 is_stmt 0 view .LVU1792
 6861 21b4 10309DE5 		ldr	r3, [sp, #16]	@ _1, %sfp
 6862              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6863              		.loc 1 1051 32 view .LVU1793
 6864 21b8 187A96ED 		vldr.32	s14, [r6, #96]	@ int	@ tmp254, g_armwave_state.n_hdiv
 6865              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6866              		.loc 1 1051 24 view .LVU1794
 6867 21bc 037047E0 		sub	r7, r7, r3	@ tmp208, _5, _1
 6868              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
1052:armwave.c     ****         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 6869              		.loc 1 1052 9 view .LVU1795
 6870 21c0 603096E5 		ldr	r3, [r6, #96]	@ tmp255, g_armwave_state.n_hdiv
 6871              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
1051:armwave.c     ****         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6872              		.loc 1 1051 30 view .LVU1796
 6873 21c4 907A07EE 		vmov	s15, r7	@ int	@ tmp208, tmp208
 6874              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
1051:armwave.c     ****         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6875              		.loc 1 1051 32 view .LVU1797
 6876 21c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp210, tmp254
 6877              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
 6878              		.loc 1 1052 9 view .LVU1798
 6879 21cc 000053E3 		cmp	r3, #0	@ tmp255,
 6880              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
 6881              		.loc 1 1052 15 view .LVU1799
 6882 21d0 0070A0C3 		movgt	r7, #0	@ i,
 6883              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
1051:armwave.c     ****         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6884              		.loc 1 1051 30 view .LVU1800
 6885 21d4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp209, tmp208
 6886              	@ armwave.c:1051:         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
1051:armwave.c     ****         gr_size = ((x1 - x0) / (float)g_armwave_state.n_hdiv);
 6887              		.loc 1 1051 17 view .LVU1801
 6888 21d8 878AC7EE 		vdiv.f32	s17, s15, s14	@ gr_size, tmp209, tmp210
 6889              	.LVL384:
 6890              		.loc 1 1052 9 is_stmt 1 view .LVU1802
 6891              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
 6892              		.loc 1 1052 22 is_stmt 0 view .LVU1803
 6893 21dc 909A07EE 		vmov	s15, r9	@ int	@ x0, x0
 6894 21e0 E78AB8EE 		vcvt.f32.s32	s16, s15	@ tmp211, x0
 6895 21e4 288A38EE 		vadd.f32	s16, s16, s17	@ p, tmp211, gr_size
 6896              	.LVL385:
 6897              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
 6898              		.loc 1 1052 9 view .LVU1804
 6899 21e8 0D0000DA 		ble	.L316		@,
 6900              	.LVL386:
 6901              	.L313:
1053:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, p, y0, p, y1);
 6902              		.loc 1 1053 13 is_stmt 1 discriminator 3 view .LVU1805
 6903 21ec C87AFDEE 		vcvt.s32.f32	s15, s16	@ _35, p
 6904 21f0 08B08DE5 		str	fp, [sp, #8]	@ y1,
 6905 21f4 00408DE5 		str	r4, [sp]	@ y0,
 6906 21f8 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 6907 21fc 001095E5 		ldr	r1, [r5]	@, g_window
 6908 2200 000098E5 		ldr	r0, [r8]	@, g_dpy
 6909              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
1052:armwave.c     ****         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 6910              		.loc 1 1052 67 is_stmt 0 discriminator 3 view .LVU1806
 6911 2204 017087E2 		add	r7, r7, #1	@ i, i,
 6912              	.LVL387:
 6913              	@ armwave.c:1053:             XDrawLine(g_dpy, g_window, g_gc, p, y0, p, y1);
 6914              		.loc 1 1053 13 discriminator 3 view .LVU1807
 6915 2208 903A17EE 		vmov	r3, s15	@ int	@ _35, _35
 6916 220c 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ _35,
 6917 2210 FEFFFFEB 		bl	XDrawLine		@
 6918              	.LVL388:
 6919              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
1052:armwave.c     ****         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 6920              		.loc 1 1052 9 discriminator 3 view .LVU1808
 6921 2214 603096E5 		ldr	r3, [r6, #96]	@ g_armwave_state.n_hdiv, g_armwave_state.n_hdiv
 6922              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
1052:armwave.c     ****         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 6923              		.loc 1 1052 73 discriminator 3 view .LVU1809
 6924 2218 288A38EE 		vadd.f32	s16, s16, s17	@ p, p, gr_size
 6925              	.LVL389:
 6926              	@ armwave.c:1052:         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_siz
1052:armwave.c     ****         for(i = 0, p = x0 + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 6927              		.loc 1 1052 9 discriminator 3 view .LVU1810
 6928 221c 070053E1 		cmp	r3, r7	@ g_armwave_state.n_hdiv, i
 6929 2220 F1FFFFCA 		bgt	.L313		@,
 6930              	.LVL390:
 6931              	.L316:
1054:armwave.c     ****             
1055:armwave.c     ****             /*
1056:armwave.c     ****             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
1057:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
1058:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
1059:armwave.c     ****                     //printf("%3d, %3d\n", q, p);
1060:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((mx + h) / 2) - 8, q, ((mx + h) / 2) + 8);
1061:armwave.c     ****                 }
1062:armwave.c     ****             }
1063:armwave.c     ****             */
1064:armwave.c     ****         }
1065:armwave.c     ****         
1066:armwave.c     ****         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
 6932              		.loc 1 1066 9 is_stmt 1 view .LVU1811
 6933              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
 6934              		.loc 1 1066 24 is_stmt 0 view .LVU1812
 6935 2224 D021CDE1 		ldrd	r2, [sp, #16]	@,,
 6936              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
1067:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6937              		.loc 1 1067 27 view .LVU1813
 6938 2228 104A07EE 		vmov	s14, r4	@ int	@ y0, y0
 6939              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6940              		.loc 1 1066 24 view .LVU1814
 6941 222c 023043E0 		sub	r3, r3, r2	@ tmp213, _7, _1
 6942              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6943              		.loc 1 1067 27 view .LVU1815
 6944 2230 C78AB8EE 		vcvt.f32.s32	s16, s14	@ tmp216, y0
 6945              	.LVL391:
 6946              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6947              		.loc 1 1066 24 view .LVU1816
 6948 2234 903A07EE 		vmov	s15, r3	@ int	@ tmp213, tmp213
 6949              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6950              		.loc 1 1066 32 view .LVU1817
 6951 2238 197A96ED 		vldr.32	s14, [r6, #100]	@ int	@ tmp261, g_armwave_state.n_vdiv
 6952              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6953              		.loc 1 1067 9 view .LVU1818
 6954 223c 643096E5 		ldr	r3, [r6, #100]	@ tmp262, g_armwave_state.n_vdiv
 6955              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6956              		.loc 1 1066 30 view .LVU1819
 6957 2240 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp214, tmp213
 6958              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6959              		.loc 1 1066 32 view .LVU1820
 6960 2244 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp261
 6961              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6962              		.loc 1 1067 9 view .LVU1821
 6963 2248 000053E3 		cmp	r3, #0	@ tmp262,
 6964              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6965              		.loc 1 1067 15 view .LVU1822
 6966 224c 0040A0C3 		movgt	r4, #0	@ i,
 6967              	.LVL392:
 6968              	@ armwave.c:1066:         gr_size = ((y1 - y0) / (float)g_armwave_state.n_vdiv);
1066:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6969              		.loc 1 1066 17 view .LVU1823
 6970 2250 878AC7EE 		vdiv.f32	s17, s15, s14	@ gr_size, tmp214, tmp215
 6971              	.LVL393:
 6972              		.loc 1 1067 9 is_stmt 1 view .LVU1824
 6973              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6974              		.loc 1 1067 22 is_stmt 0 view .LVU1825
 6975 2254 288A38EE 		vadd.f32	s16, s16, s17	@ p, tmp216, gr_size
 6976              	.LVL394:
 6977              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
 6978              		.loc 1 1067 9 view .LVU1826
 6979 2258 0D0000DA 		ble	.L310		@,
 6980              	.LVL395:
 6981              	.L314:
1068:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, x0, p, x1, p);
 6982              		.loc 1 1068 13 is_stmt 1 discriminator 3 view .LVU1827
 6983 225c C87AFDEE 		vcvt.s32.f32	s15, s16	@ _45, p
 6984 2260 0930A0E1 		mov	r3, r9	@, x0
 6985 2264 04A08DE5 		str	r10, [sp, #4]	@ x1,
 6986 2268 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 6987 226c 001095E5 		ldr	r1, [r5]	@, g_window
 6988 2270 000098E5 		ldr	r0, [r8]	@, g_dpy
 6989              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
1067:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 6990              		.loc 1 1067 67 is_stmt 0 discriminator 3 view .LVU1828
 6991 2274 014084E2 		add	r4, r4, #1	@ i, i,
 6992              	.LVL396:
 6993              	@ armwave.c:1068:             XDrawLine(g_dpy, g_window, g_gc, x0, p, x1, p);
 6994              		.loc 1 1068 13 discriminator 3 view .LVU1829
 6995 2278 027ACDED 		vstr.32	s15, [sp, #8]	@ int	@ _45,
 6996 227c 007ACDED 		vstr.32	s15, [sp]	@ int	@ _45,
 6997 2280 FEFFFFEB 		bl	XDrawLine		@
 6998              	.LVL397:
 6999              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
1067:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 7000              		.loc 1 1067 9 discriminator 3 view .LVU1830
 7001 2284 643096E5 		ldr	r3, [r6, #100]	@ g_armwave_state.n_vdiv, g_armwave_state.n_vdiv
 7002              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
1067:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 7003              		.loc 1 1067 73 discriminator 3 view .LVU1831
 7004 2288 288A38EE 		vadd.f32	s16, s16, s17	@ p, p, gr_size
 7005              	.LVL398:
 7006              	@ armwave.c:1067:         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_siz
1067:armwave.c     ****         for(i = 0, p = y0 + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 7007              		.loc 1 1067 9 discriminator 3 view .LVU1832
 7008 228c 040053E1 		cmp	r3, r4	@ g_armwave_state.n_vdiv, i
 7009 2290 F1FFFFCA 		bgt	.L314		@,
 7010              	.LVL399:
 7011              	.L310:
 7012              	@ armwave.c:1085: }
1069:armwave.c     ****         }
1070:armwave.c     ****     }
1071:armwave.c     ****     
1072:armwave.c     ****     /*
1073:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
1074:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
1075:armwave.c     ****         
1076:armwave.c     ****         for(i = 0, p = m + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
1077:armwave.c     ****             for(j = 0; j < n_sub; j++) {
1078:armwave.c     ****                 q = p + (gr_size * g_armwave_state.subdiv_frac * j);
1079:armwave.c     ****                 printf("%3d, %3d\n", q, p);
1080:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, q, m + (ch / 2) - 16, q, m + (ch / 2) + 16);
1081:armwave.c     ****             }
1082:armwave.c     ****         }
1083:armwave.c     ****     }
1084:armwave.c     ****     */
1085:armwave.c     **** }
 7013              		.loc 1 1085 1 view .LVU1833
 7014 2294 1CD08DE2 		add	sp, sp, #28	@,,
 7015              		.cfi_remember_state
 7016              		.cfi_def_cfa_offset 44
 7017              		@ sp needed	@
 7018 2298 028BBDEC 		vldm	sp!, {d8}	@
 7019              		.cfi_restore 80
 7020              		.cfi_restore 81
 7021              		.cfi_def_cfa_offset 36
 7022 229c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 7023              	.LVL400:
 7024              	.L325:
 7025              		.cfi_restore_state
1044:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x0, y1, x1, y1);
 7026              		.loc 1 1044 9 is_stmt 1 view .LVU1834
 7027 22a0 0930A0E1 		mov	r3, r9	@, x0
 7028 22a4 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 7029 22a8 001095E5 		ldr	r1, [r5]	@, g_window
 7030 22ac 08408DE5 		str	r4, [sp, #8]	@ y0,
 7031 22b0 10048DE8 		stm	sp, {r4, r10}	@,,
 7032 22b4 000098E5 		ldr	r0, [r8]	@, g_dpy
 7033 22b8 FEFFFFEB 		bl	XDrawLine		@
 7034              	.LVL401:
1045:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x0, y0, x0, y1);
 7035              		.loc 1 1045 9 view .LVU1835
 7036 22bc 0930A0E1 		mov	r3, r9	@, x0
 7037 22c0 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 7038 22c4 001095E5 		ldr	r1, [r5]	@, g_window
 7039 22c8 F4A0CDE1 		strd	r10, [sp, #4]	@,,
 7040 22cc 00B08DE5 		str	fp, [sp]	@ y1,
 7041 22d0 000098E5 		ldr	r0, [r8]	@, g_dpy
 7042 22d4 FEFFFFEB 		bl	XDrawLine		@
 7043              	.LVL402:
1046:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, x1, y0, x1, y1);
 7044              		.loc 1 1046 9 view .LVU1836
 7045 22d8 0930A0E1 		mov	r3, r9	@, x0
 7046 22dc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 7047 22e0 001095E5 		ldr	r1, [r5]	@, g_window
 7048 22e4 100A8DE8 		stm	sp, {r4, r9, fp}	@,,,
 7049 22e8 000098E5 		ldr	r0, [r8]	@, g_dpy
 7050 22ec FEFFFFEB 		bl	XDrawLine		@
 7051              	.LVL403:
1047:armwave.c     ****     }
 7052              		.loc 1 1047 9 view .LVU1837
 7053 22f0 0A30A0E1 		mov	r3, r10	@, x1
 7054 22f4 F4A0CDE1 		strd	r10, [sp, #4]	@,,
 7055 22f8 00408DE5 		str	r4, [sp]	@ y0,
 7056 22fc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 7057 2300 001095E5 		ldr	r1, [r5]	@, g_window
 7058 2304 000098E5 		ldr	r0, [r8]	@, g_dpy
 7059 2308 FEFFFFEB 		bl	XDrawLine		@
 7060              	.LVL404:
 7061 230c 003096E5 		ldr	r3, [r6]	@ _11, g_armwave_state.flags
 7062 2310 A5FFFFEA 		b	.L311		@
 7063              	.L327:
 7064              		.align	2
 7065              	.L326:
 7066 2314 00000000 		.word	g_armwave_state
 7067 2318 00000000 		.word	g_grat_colour
 7068 231c 00000000 		.word	.LANCHOR1
 7069 2320 00000000 		.word	g_dpy
 7070 2324 BC060000 		.word	.LC40
 7071              		.cfi_endproc
 7072              	.LFE86:
 7074              		.align	2
 7075              		.global	armwave_render_frame_x11
 7076              		.syntax unified
 7077              		.arm
 7078              		.fpu vfp
 7080              	armwave_render_frame_x11:
 7081              	.LFB87:
1086:armwave.c     **** 
1087:armwave.c     **** /*
1088:armwave.c     ****  * Run one rendering tick.
1089:armwave.c     ****  */
1090:armwave.c     **** void armwave_render_frame_x11()
1091:armwave.c     **** {
 7082              		.loc 1 1091 1 view -0
 7083              		.cfi_startproc
 7084              		@ args = 0, pretend = 0, frame = 0
 7085              		@ frame_needed = 0, uses_anonymous_args = 0
1092:armwave.c     ****     Window _dw;
 7086              		.loc 1 1092 5 view .LVU1839
1093:armwave.c     ****     int _d, _w, _h;
 7087              		.loc 1 1093 5 view .LVU1840
1094:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 7088              		.loc 1 1094 5 view .LVU1841
 7089              	@ armwave.c:1091: {
1091:armwave.c     ****     Window _dw;
 7090              		.loc 1 1091 1 is_stmt 0 view .LVU1842
 7091 2328 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 7092              		.cfi_def_cfa_offset 28
 7093              		.cfi_offset 4, -28
 7094              		.cfi_offset 5, -24
 7095              		.cfi_offset 6, -20
 7096              		.cfi_offset 7, -16
 7097              		.cfi_offset 8, -12
 7098              		.cfi_offset 9, -8
 7099              		.cfi_offset 14, -4
 7100              	.LBB218:
 7101              	.LBB219:
 7102              	@ armwave.c:373:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 373:armwave.c     **** 
 7103              		.loc 1 373 5 view .LVU1843
 7104 232c 0010A0E3 		mov	r1, #0	@,
 7105              	.LBE219:
 7106              	.LBE218:
 7107              	@ armwave.c:1094:     int m = g_armwave_state.frame_margin; 
 7108              		.loc 1 1094 9 view .LVU1844
 7109 2330 2C419FE5 		ldr	r4, .L334	@ tmp217,
 7110              	@ armwave.c:1091: {
1091:armwave.c     ****     Window _dw;
 7111              		.loc 1 1091 1 view .LVU1845
 7112 2334 2CD04DE2 		sub	sp, sp, #44	@,,
 7113              		.cfi_def_cfa_offset 72
 7114              	.LBB224:
 7115              	.LBB220:
 7116              	@ armwave.c:373:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 373:armwave.c     **** 
 7117              		.loc 1 373 5 view .LVU1846
 7118 2338 542094E5 		ldr	r2, [r4, #84]	@, g_armwave_state.ch_buff_size
 7119 233c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 7120              	.LBE220:
 7121              	.LBE224:
 7122              	@ armwave.c:1094:     int m = g_armwave_state.frame_margin; 
 7123              		.loc 1 1094 9 view .LVU1847
 7124 2340 5C5094E5 		ldr	r5, [r4, #92]	@ m, g_armwave_state.frame_margin
 7125              	.LVL405:
1095:armwave.c     ****     
1096:armwave.c     ****     //armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
1097:armwave.c     ****     armwave_generate();
 7126              		.loc 1 1097 5 is_stmt 1 view .LVU1848
 7127              	.LBB225:
 7128              	.LBI218:
 367:armwave.c     **** {
 7129              		.loc 1 367 6 view .LVU1849
 7130              	.LBB221:
 369:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 7131              		.loc 1 369 5 view .LVU1850
 370:armwave.c     **** 
 7132              		.loc 1 370 5 view .LVU1851
 7133              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 7134              		.loc 1 370 14 is_stmt 0 view .LVU1852
 7135 2344 509094E5 		ldr	r9, [r4, #80]	@ xx_rem, g_armwave_state.wave_length
 7136              	.LVL406:
 373:armwave.c     **** 
 7137              		.loc 1 373 5 is_stmt 1 view .LVU1853
 7138 2348 FEFFFFEB 		bl	memset		@
 7139              	.LVL407:
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7140              		.loc 1 376 5 view .LVU1854
 7141              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7142              		.loc 1 376 68 is_stmt 0 view .LVU1855
 7143 234c 486094E5 		ldr	r6, [r4, #72]	@ _45, g_armwave_state.slice_height
 7144              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7145              		.loc 1 376 51 view .LVU1856
 7146 2350 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.wave_length
 7147 2354 0610A0E1 		mov	r1, r6	@, _45
 7148 2358 FEFFFFEB 		bl	__aeabi_idiv		@
 7149              	.LVL408:
 7150              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7151              		.loc 1 376 5 view .LVU1857
 7152 235c 000050E3 		cmp	r0, #0	@ tmp169
 7153 2360 3D00000A 		beq	.L331		@,
 7154              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 7155              		.loc 1 370 52 view .LVU1858
 7156 2364 0070A0E3 		mov	r7, #0	@ ypos,
 7157              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7158              		.loc 1 376 12 view .LVU1859
 7159 2368 0780A0E1 		mov	r8, r7	@ yy, ypos
 7160              	.LVL409:
 7161              	.L330:
 377:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 7162              		.loc 1 377 9 is_stmt 1 view .LVU1860
 7163 236c 980600E0 		mul	r0, r8, r6	@, yy, tmp1
 7164 2370 0610A0E1 		mov	r1, r6	@, _45
 7165 2374 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 7166              	.LVL410:
 378:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 7167              		.loc 1 378 9 view .LVU1861
 7168              	@ armwave.c:378:         xx_rem -= g_armwave_state.slice_height;
 378:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 7169              		.loc 1 378 34 is_stmt 0 view .LVU1862
 7170 2378 486094E5 		ldr	r6, [r4, #72]	@ _45, g_armwave_state.slice_height
 7171              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7172              		.loc 1 376 51 view .LVU1863
 7173 237c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.wave_length
 7174 2380 0610A0E1 		mov	r1, r6	@, _45
 7175 2384 FEFFFFEB 		bl	__aeabi_idiv		@
 7176              	.LVL411:
 7177              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7178              		.loc 1 376 86 view .LVU1864
 7179 2388 018088E2 		add	r8, r8, #1	@ yy, yy,
 7180              	.LVL412:
 7181              	@ armwave.c:378:         xx_rem -= g_armwave_state.slice_height;
 378:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 7182              		.loc 1 378 16 view .LVU1865
 7183 238c 069049E0 		sub	r9, r9, r6	@ xx_rem, xx_rem, _45
 7184              	.LVL413:
 379:armwave.c     ****     }
 7185              		.loc 1 379 9 is_stmt 1 view .LVU1866
 7186              	@ armwave.c:379:         ypos += g_armwave_state.slice_height;   
 379:armwave.c     ****     }
 7187              		.loc 1 379 14 is_stmt 0 view .LVU1867
 7188 2390 067087E0 		add	r7, r7, r6	@ ypos, ypos, _45
 7189              	.LVL414:
 7190              	@ armwave.c:376:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 7191              		.loc 1 376 5 view .LVU1868
 7192 2394 000058E1 		cmp	r8, r0	@ yy,
 7193 2398 F3FFFF3A 		bcc	.L330		@,
 7194              	.LVL415:
 7195              	.L329:
 383:armwave.c     **** }
 7196              		.loc 1 383 5 is_stmt 1 view .LVU1869
 7197              	.LBE221:
 7198              	.LBE225:
 7199              	@ armwave.c:1098:     fill_xvimage_scaled(g_yuv_image);
1098:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 7200              		.loc 1 1098 5 is_stmt 0 view .LVU1870
 7201 239c C4609FE5 		ldr	r6, .L334+4	@ tmp177,
 7202              	.LBB226:
 7203              	.LBB222:
 7204              	@ armwave.c:383:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 383:armwave.c     **** }
 7205              		.loc 1 383 5 view .LVU1871
 7206 23a0 0910A0E1 		mov	r1, r9	@, xx_rem
 7207 23a4 0700A0E1 		mov	r0, r7	@, ypos
 7208 23a8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 7209              	.LVL416:
 383:armwave.c     **** }
 7210              		.loc 1 383 5 view .LVU1872
 7211              	.LBE222:
 7212              	.LBE226:
 7213              		.loc 1 1098 5 is_stmt 1 view .LVU1873
 7214 23ac 040096E5 		ldr	r0, [r6, #4]	@, g_yuv_image
 7215 23b0 FEFFFFEB 		bl	fill_xvimage_scaled		@
 7216              	.LVL417:
1099:armwave.c     ****     
1100:armwave.c     ****     /*
1101:armwave.c     ****     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
1102:armwave.c     ****     g_canvas_dims.w = _w;
1103:armwave.c     ****     g_canvas_dims.h = _h;
1104:armwave.c     ****     
1105:armwave.c     ****     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas_dims.h) {
1106:armwave.c     ****         printf("XClearWindow()\n");
1107:armwave.c     ****         XClearWindow(g_dpy, g_window);
1108:armwave.c     ****     }
1109:armwave.c     ****     
1110:armwave.c     ****     printf("Canvas dims: %d x %d (margin: %d) (YUV image: %d x %d)\n", _w, _h, m, g_yuv_image->widt
1111:armwave.c     ****     printf("Test buf ptr: %d\n", g_frame_num % g_n_test_waves);
1112:armwave.c     ****     
1113:armwave.c     ****     g_canvas_dims_last = g_canvas_dims;
1114:armwave.c     ****     */
1115:armwave.c     ****     
1116:armwave.c     ****     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 7217              		.loc 1 1116 5 view .LVU1874
 7218              	@ armwave.c:1118:         m + g_armwave_state.draw_xoff + 1, 
1117:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
1118:armwave.c     ****         m + g_armwave_state.draw_xoff + 1, 
 7219              		.loc 1 1118 11 is_stmt 0 view .LVU1875
 7220 23b4 7CC094E5 		ldr	ip, [r4, #124]	@ g_armwave_state.draw_xoff, g_armwave_state.draw_xoff
 7221              	@ armwave.c:1119:         m + g_armwave_state.draw_yoff + 1, 
1119:armwave.c     ****         m + g_armwave_state.draw_yoff + 1, 
 7222              		.loc 1 1119 11 view .LVU1876
 7223 23b8 803094E5 		ldr	r3, [r4, #128]	@ g_armwave_state.draw_yoff, g_armwave_state.draw_yoff
 7224              	@ armwave.c:1121:         g_armwave_state.draw_height - (m * 2) - 2, True);
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
1121:armwave.c     ****         g_armwave_state.draw_height - (m * 2) - 2, True);
 7225              		.loc 1 1121 47 view .LVU1877
 7226 23bc 881094E5 		ldr	r1, [r4, #136]	@ g_armwave_state.draw_height, g_armwave_state.draw_height
 7227              	@ armwave.c:1120:         g_armwave_state.draw_width - (m * 2) - 2, 
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
 7228              		.loc 1 1120 46 view .LVU1878
 7229 23c0 842094E5 		ldr	r2, [r4, #132]	@ g_armwave_state.draw_width, g_armwave_state.draw_width
 7230              	@ armwave.c:1120:         g_armwave_state.draw_width - (m * 2) - 2, 
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
 7231              		.loc 1 1120 41 view .LVU1879
 7232 23c4 850F65E0 		rsb	r0, r5, r5, lsl #31	@ tmp182, m, m,
 7233              	@ armwave.c:1119:         m + g_armwave_state.draw_yoff + 1, 
1119:armwave.c     ****         m + g_armwave_state.draw_yoff + 1, 
 7234              		.loc 1 1119 11 view .LVU1880
 7235 23c8 033085E0 		add	r3, r5, r3	@ tmp202, m, g_armwave_state.draw_yoff
 7236              	@ armwave.c:1118:         m + g_armwave_state.draw_xoff + 1, 
1118:armwave.c     ****         m + g_armwave_state.draw_yoff + 1, 
 7237              		.loc 1 1118 11 view .LVU1881
 7238 23cc 0C5085E0 		add	r5, r5, ip	@ tmp206, m, g_armwave_state.draw_xoff
 7239              	.LVL418:
 7240              	@ armwave.c:1116:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
1116:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 7241              		.loc 1 1116 5 view .LVU1882
 7242 23d0 04C096E5 		ldr	ip, [r6, #4]	@ g_yuv_image.123_7, g_yuv_image
 7243              	@ armwave.c:1120:         g_armwave_state.draw_width - (m * 2) - 2, 
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
 7244              		.loc 1 1120 41 view .LVU1883
 7245 23d4 8000A0E1 		lsl	r0, r0, #1	@ tmp183, tmp182,
 7246              	@ armwave.c:1121:         g_armwave_state.draw_height - (m * 2) - 2, True);
 7247              		.loc 1 1121 47 view .LVU1884
 7248 23d8 021041E2 		sub	r1, r1, #2	@ tmp194, g_armwave_state.draw_height,
 7249              	@ armwave.c:1120:         g_armwave_state.draw_width - (m * 2) - 2, 
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
 7250              		.loc 1 1120 46 view .LVU1885
 7251 23dc 022042E2 		sub	r2, r2, #2	@ tmp198, g_armwave_state.draw_width,
 7252              	@ armwave.c:1121:         g_armwave_state.draw_height - (m * 2) - 2, True);
 7253              		.loc 1 1121 47 view .LVU1886
 7254 23e0 001081E0 		add	r1, r1, r0	@ tmp196, tmp194, tmp183
 7255              	@ armwave.c:1120:         g_armwave_state.draw_width - (m * 2) - 2, 
1120:armwave.c     ****         g_armwave_state.draw_width - (m * 2) - 2, 
 7256              		.loc 1 1120 46 view .LVU1887
 7257 23e4 002082E0 		add	r2, r2, r0	@ tmp200, tmp198, tmp183
 7258              	@ armwave.c:1116:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
1116:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 7259              		.loc 1 1116 5 view .LVU1888
 7260 23e8 013083E2 		add	r3, r3, #1	@ tmp204, tmp202,
 7261 23ec 015085E2 		add	r5, r5, #1	@ tmp208, tmp206,
 7262 23f0 0100A0E3 		mov	r0, #1	@ tmp192,
 7263 23f4 20108DE5 		str	r1, [sp, #32]	@ tmp196,
 7264 23f8 24008DE5 		str	r0, [sp, #36]	@ tmp192,
 7265 23fc 1C208DE5 		str	r2, [sp, #28]	@ tmp200,
 7266 2400 18308DE5 		str	r3, [sp, #24]	@ tmp204,
 7267 2404 14508DE5 		str	r5, [sp, #20]	@ tmp208,
 7268 2408 08309CE5 		ldr	r3, [ip, #8]	@ g_yuv_image.123_7->height, g_yuv_image.123_7->height
 7269 240c 58109FE5 		ldr	r1, .L334+8	@ tmp188,
 7270 2410 58009FE5 		ldr	r0, .L334+12	@ tmp190,
 7271 2414 10308DE5 		str	r3, [sp, #16]	@ g_yuv_image.123_7->height,
 7272 2418 04309CE5 		ldr	r3, [ip, #4]	@ g_yuv_image.123_7->width, g_yuv_image.123_7->width
 7273 241c 00E0A0E3 		mov	lr, #0	@ tmp211,
 7274 2420 00C08DE5 		str	ip, [sp]	@ g_yuv_image.123_7,
 7275 2424 0C308DE5 		str	r3, [sp, #12]	@ g_yuv_image.123_7->width,
 7276 2428 083096E5 		ldr	r3, [r6, #8]	@, g_gc
 7277 242c 002096E5 		ldr	r2, [r6]	@, g_window
 7278 2430 001091E5 		ldr	r1, [r1]	@, g_xv_port
 7279 2434 000090E5 		ldr	r0, [r0]	@, g_dpy
 7280 2438 08E08DE5 		str	lr, [sp, #8]	@ tmp211,
 7281 243c 04E08DE5 		str	lr, [sp, #4]	@ tmp211,
 7282 2440 FEFFFFEB 		bl	XvShmPutImage		@
 7283              	.LVL419:
1122:armwave.c     ****     
1123:armwave.c     ****     armwave_render_graticule();
 7284              		.loc 1 1123 5 is_stmt 1 view .LVU1889
 7285 2444 FEFFFFEB 		bl	armwave_render_graticule		@
 7286              	.LVL420:
1124:armwave.c     **** 
1125:armwave.c     ****     //XFlush(g_dpy);
1126:armwave.c     **** 
1127:armwave.c     ****     g_frame_num++;
 7287              		.loc 1 1127 5 view .LVU1890
 7288              	@ armwave.c:1127:     g_frame_num++;
 7289              		.loc 1 1127 16 is_stmt 0 view .LVU1891
 7290 2448 0C3096E5 		ldr	r3, [r6, #12]	@ g_frame_num, g_frame_num
 7291 244c 013083E2 		add	r3, r3, #1	@ tmp215, g_frame_num,
 7292 2450 0C3086E5 		str	r3, [r6, #12]	@ tmp215, g_frame_num
 7293              	@ armwave.c:1128: }
1128:armwave.c     **** }
 7294              		.loc 1 1128 1 view .LVU1892
 7295 2454 2CD08DE2 		add	sp, sp, #44	@,,
 7296              		.cfi_remember_state
 7297              		.cfi_def_cfa_offset 28
 7298              		@ sp needed	@
 7299 2458 F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 7300              	.LVL421:
 7301              	.L331:
 7302              		.cfi_restore_state
 7303              	.LBB227:
 7304              	.LBB223:
 7305              	@ armwave.c:370:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 370:armwave.c     **** 
 7306              		.loc 1 370 52 view .LVU1893
 7307 245c 0070A0E1 		mov	r7, r0	@ ypos, tmp169
 7308 2460 CDFFFFEA 		b	.L329		@
 7309              	.L335:
 7310              		.align	2
 7311              	.L334:
 7312 2464 00000000 		.word	g_armwave_state
 7313 2468 00000000 		.word	.LANCHOR1
 7314 246c 00000000 		.word	g_xv_port
 7315 2470 00000000 		.word	g_dpy
 7316              	.LBE223:
 7317              	.LBE227:
 7318              		.cfi_endproc
 7319              	.LFE87:
 7321              		.comm	g_xswa,60,4
 7322              		.comm	g_grat_subcolour,12,4
 7323              		.comm	g_grat_colour,12,4
 7324              		.comm	g_yuv_shminfo,16,4
 7325              		.global	g_yuv_image
 7326              		.global	g_gc
 7327              		.comm	g_vinfo,40,4
 7328              		.comm	g_xv_port,4,4
 7329              		.comm	g_dpy,4,4
 7330              		.global	g_window
 7331              		.global	g_n_test_waves
 7332              		.global	g_frame_num
 7333              		.comm	g_canvas_dims_last,8,4
 7334              		.comm	g_canvas_dims,8,4
 7335              		.global	g_fill_black
 7336              		.comm	g_yuv_lut,3072,4
 7337              		.comm	g_armwave_state,212,4
 7338              		.section	.rodata
 7339              		.align	2
 7340              		.set	.LANCHOR0,. + 0
 7343              	__PRETTY_FUNCTION__.20887:
 7344 0000 61726D77 		.ascii	"armwave_setup_render\000"
 7344      6176655F 
 7344      73657475 
 7344      705F7265 
 7344      6E646572 
 7345 0015 000000   		.space	3
 7348              	__PRETTY_FUNCTION__.20894:
 7349 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 7349      6176655F 
 7349      7365745F 
 7349      77617665 
 7349      5F706F69 
 7350 0031 000000   		.space	3
 7353              	__PRETTY_FUNCTION__.20901:
 7354 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 7354      6176655F 
 7354      7365745F 
 7354      77617665 
 7354      5F706F69 
 7355 0051 000000   		.space	3
 7358              	g_fill_black:
 7359 0054 000000   		.space	3
 7360              		.data
 7361              		.align	2
 7364              	g_n_test_waves:
 7365 0000 08000000 		.word	8
 7366              		.bss
 7367              		.align	2
 7368              		.set	.LANCHOR1,. + 0
 7371              	g_window:
 7372 0000 00000000 		.space	4
 7375              	g_yuv_image:
 7376 0004 00000000 		.space	4
 7379              	g_gc:
 7380 0008 00000000 		.space	4
 7383              	g_frame_num:
 7384 000c 00000000 		.space	4
 7385              		.section	.rodata.str1.4,"aMS",%progbits,1
 7386              		.align	2
 7387              	.LC0:
 7388 0000 61726D77 		.ascii	"armwave: error: palette channel out of range %d\012"
 7388      6176653A 
 7388      20657272 
 7388      6F723A20 
 7388      70616C65 
 7389 0030 00       		.ascii	"\000"
 7390 0031 000000   		.space	3
 7391              	.LC1:
 7392 0034 76302E32 		.ascii	"v0.2.4\000"
 7392      2E3400
 7393 003b 00       		.space	1
 7394              	.LC2:
 7395 003c 61726D77 		.ascii	"armwave version: %s\012\000"
 7395      61766520 
 7395      76657273 
 7395      696F6E3A 
 7395      2025730A 
 7396 0051 000000   		.space	3
 7397              	.LC3:
 7398 0054 6275696C 		.ascii	"built without Python linkings\000"
 7398      74207769 
 7398      74686F75 
 7398      74205079 
 7398      74686F6E 
 7399 0072 0000     		.space	2
 7400              	.LC4:
 7401 0074 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 7401      75742062 
 7401      75666665 
 7401      723A2030 
 7401      78253038 
 7402 008b 00       		.space	1
 7403              	.LC5:
 7404 008c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 7404      20653D25 
 7404      6420773D 
 7404      25642077 
 7404      733D2564 
 7405              	.LC6:
 7406 00b8 4572726F 		.ascii	"Error: start point more than end point\000"
 7406      723A2073 
 7406      74617274 
 7406      20706F69 
 7406      6E74206D 
 7407 00df 00       		.space	1
 7408              	.LC7:
 7409 00e0 54727920 		.ascii	"Try tex_width %d pixel\015\012\000"
 7409      7465785F 
 7409      77696474 
 7409      68202564 
 7409      20706978 
 7410 00f9 000000   		.space	3
 7411              	.LC8:
 7412 00fc 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x) ("
 7412      7566665F 
 7412      73697A65 
 7412      3D25642C 
 7412      20636D70 
 7413 012f 66703A25 		.ascii	"fp:%.3f), targ_width=%d, wave_length=%d, scaler=%d\012"
 7413      2E336629 
 7413      2C207461 
 7413      72675F77 
 7413      69647468 
 7414 0162 00       		.ascii	"\000"
 7415 0163 00       		.space	1
 7416              	.LC9:
 7417 0164 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 7417      6F632066 
 7417      61696C75 
 7417      72652061 
 7417      6C6C6F63 
 7418 0197 2E636831 		.ascii	".ch1_buffer)\012\000"
 7418      5F627566 
 7418      66657229 
 7418      0A00
 7419 01a5 000000   		.space	3
 7420              	.LC10:
 7421 01a8 61726D77 		.ascii	"armwave.c\000"
 7421      6176652E 
 7421      6300
 7422 01b2 0000     		.space	2
 7423              	.LC11:
 7424 01b4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 7424      6D776176 
 7424      655F7374 
 7424      6174652E 
 7424      78636F6F 
 7425 01dd 000000   		.space	3
 7426              	.LC12:
 7427 01e0 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 7427      3A203078 
 7427      25303878 
 7427      20307825 
 7427      30387820 
 7428              	.LC13:
 7429 0204 77617665 		.ascii	"wave_buffer != NULL\000"
 7429      5F627566 
 7429      66657220 
 7429      213D204E 
 7429      554C4C00 
 7430              	.LC14:
 7431 0218 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 7431      6176655F 
 7431      7365745F 
 7431      77617665 
 7431      5F706F69 
 7432 0231 000000   		.space	3
 7433              	.LC15:
 7434 0234 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 7434      6176655F 
 7434      7365745F 
 7434      77617665 
 7434      5F706F69 
 7435 0267 78636565 		.ascii	"xceeded\000"
 7435      64656400 
 7436 026f 00       		.space	1
 7437              	.LC16:
 7438 0270 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf = %d\012\000"
 7438      6176655F 
 7438      7365745F 
 7438      77617665 
 7438      5F706F69 
 7439 029a 0000     		.space	2
 7440              	.LC17:
 7441 029c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 7441      5F627566 
 7441      6665725F 
 7441      70747220 
 7441      213D2030 
 7442 02b1 000000   		.space	3
 7443              	.LC18:
 7444 02b4 61726D77 		.ascii	"armwave_set_wave_pointer_u32 = 0x%08x\012\000"
 7444      6176655F 
 7444      7365745F 
 7444      77617665 
 7444      5F706F69 
 7445 02db 00       		.space	1
 7446              	.LC19:
 7447 02dc 61726D77 		.ascii	"armwave_set_graticule_colour()\000"
 7447      6176655F 
 7447      7365745F 
 7447      67726174 
 7447      6963756C 
 7448 02fb 00       		.space	1
 7449              	.LC20:
 7450 02fc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 7450      6176655F 
 7450      74657374 
 7450      5F627566 
 7450      6665725F 
 7451 032f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 7451      20627566 
 7451      66657220 
 7451      28256420 
 7451      62797465 
 7452              	.LC21:
 7453 0350 43616C63 		.ascii	"Calculating test set %d (length=%d)\012\000"
 7453      756C6174 
 7453      696E6720 
 7453      74657374 
 7453      20736574 
 7454 0375 000000   		.space	3
 7455              	.LC22:
 7456 0378 61726D77 		.ascii	"armwave: armwave_set_window_dims(%d,%d,%d,%d)\012\000"
 7456      6176653A 
 7456      2061726D 
 7456      77617665 
 7456      5F736574 
 7457 03a7 00       		.space	1
 7458              	.LC23:
 7459 03a8 41726D57 		.ascii	"ArmWave Render Buffer\000"
 7459      61766520 
 7459      52656E64 
 7459      65722042 
 7459      75666665 
 7460 03be 0000     		.space	2
 7461              	.LC24:
 7462 03c0 57696E64 		.ascii	"Window done, mapping...\000"
 7462      6F772064 
 7462      6F6E652C 
 7462      206D6170 
 7462      70696E67 
 7463              	.LC25:
 7464 03d8 416C6C20 		.ascii	"All done in window\000"
 7464      646F6E65 
 7464      20696E20 
 7464      77696E64 
 7464      6F7700
 7465 03eb 00       		.space	1
 7466              	.LC26:
 7467 03ec 61726D77 		.ascii	"armwave: Created X11 Window: %d (0x%08x)\012\000"
 7467      6176653A 
 7467      20437265 
 7467      61746564 
 7467      20583131 
 7468 0416 0000     		.space	2
 7469              	.LC27:
 7470 0418 61726D77 		.ascii	"armwave: initialising for X11...\000"
 7470      6176653A 
 7470      20696E69 
 7470      7469616C 
 7470      6973696E 
 7471 0439 000000   		.space	3
 7472              	.LC28:
 7473 043c 4572726F 		.ascii	"Error: Fatal X11: Cannot open display.\000"
 7473      723A2046 
 7473      6174616C 
 7473      20583131 
 7473      3A204361 
 7474 0463 00       		.space	1
 7475              	.LC29:
 7476 0464 466F756E 		.ascii	"Found 24bit TrueColor.\000"
 7476      64203234 
 7476      62697420 
 7476      54727565 
 7476      436F6C6F 
 7477 047b 00       		.space	1
 7478              	.LC30:
 7479 047c 4572726F 		.ascii	"Error: Fatal X11: not supported 24-bit TrueColor di"
 7479      723A2046 
 7479      6174616C 
 7479      20583131 
 7479      3A206E6F 
 7480 04af 73706C61 		.ascii	"splay.\000"
 7480      792E00
 7481 04b6 0000     		.space	2
 7482              	.LC31:
 7483 04b8 61726D77 		.ascii	"armwave_init_xvimage_shared(%d,%d)\012\000"
 7483      6176655F 
 7483      696E6974 
 7483      5F787669 
 7483      6D616765 
 7484              	.LC32:
 7485 04dc 4572726F 		.ascii	"Error: Fatal X11: Shared memory extension not avail"
 7485      723A2046 
 7485      6174616C 
 7485      20583131 
 7485      3A205368 
 7486 050f 61626C65 		.ascii	"able or failed to allocate shared memory.\000"
 7486      206F7220 
 7486      6661696C 
 7486      65642074 
 7486      6F20616C 
 7487 0539 000000   		.space	3
 7488              	.LC33:
 7489 053c 4572726F 		.ascii	"Error: Fatal X11: Unable to find XVideo extension ("
 7489      723A2046 
 7489      6174616C 
 7489      20583131 
 7489      3A20556E 
 7490 056f 2564292E 		.ascii	"%d).  Is it configured correctly?\012\000"
 7490      20204973 
 7490      20697420 
 7490      636F6E66 
 7490      69677572 
 7491 0592 0000     		.space	2
 7492              	.LC34:
 7493 0594 4572726F 		.ascii	"Error: Fatal X11: Unable to query XVideo extension "
 7493      723A2046 
 7493      6174616C 
 7493      20583131 
 7493      3A20556E 
 7494 05c7 28256429 		.ascii	"(%d).  Is it configured correctly?\012\000"
 7494      2E202049 
 7494      73206974 
 7494      20636F6E 
 7494      66696775 
 7495 05eb 00       		.space	1
 7496              	.LC35:
 7497 05ec 4572726F 		.ascii	"Error: Fatal X11: Unable to use the port %d\012\012"
 7497      723A2046 
 7497      6174616C 
 7497      20583131 
 7497      3A20556E 
 7498 0619 00       		.ascii	"\000"
 7499 061a 0000     		.space	2
 7500              	.LC36:
 7501 061c 41747461 		.ascii	"Attaching XvShm...\000"
 7501      6368696E 
 7501      67205876 
 7501      53686D2E 
 7501      2E2E00
 7502 062f 00       		.space	1
 7503              	.LC37:
 7504 0630 7975765F 		.ascii	"yuv_image plane %d offset %d pitch %d\012\000"
 7504      696D6167 
 7504      6520706C 
 7504      616E6520 
 7504      2564206F 
 7505 0657 00       		.space	1
 7506              	.LC38:
 7507 0658 4572726F 		.ascii	"Error: Fatal X11: XShmAttached failed\000"
 7507      723A2046 
 7507      6174616C 
 7507      20583131 
 7507      3A205853 
 7508 067e 0000     		.space	2
 7509              	.LC39:
 7510 0680 25642062 		.ascii	"%d bytes for XvImage, shmid %d, xv_port %d, buffer:"
 7510      79746573 
 7510      20666F72 
 7510      20587649 
 7510      6D616765 
 7511 06b3 20307825 		.ascii	" 0x%08x\012\000"
 7511      3038780A 
 7511      00
 7512              	.LC40:
 7513 06bc 64696D73 		.ascii	"dims: %d,%d,%d,%d\012\000"
 7513      3A202564 
 7513      2C25642C 
 7513      25642C25 
 7513      640A00
 7514              		.text
 7515              	.Letext0:
 7516              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 7517              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 7518              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 7519              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 7520              		.file 6 "/usr/include/stdio.h"
 7521              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 7522              		.file 8 "/usr/include/errno.h"
 7523              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 7524              		.file 10 "/usr/include/unistd.h"
 7525              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 7526              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 7527              		.file 13 "/usr/local/include/python3.8/pyport.h"
 7528              		.file 14 "/usr/include/math.h"
 7529              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 7530              		.file 16 "/usr/include/time.h"
 7531              		.file 17 "/usr/local/include/python3.8/pymem.h"
 7532              		.file 18 "/usr/local/include/python3.8/object.h"
 7533              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 7534              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 7535              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 7536              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 7537              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 7538              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 7539              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 7540              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 7541              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 7542              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 7543              		.file 29 "/usr/local/include/python3.8/longobject.h"
 7544              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 7545              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 7546              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 7547              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 7548              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 7549              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 7550              		.file 36 "/usr/local/include/python3.8/listobject.h"
 7551              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 7552              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 7553              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 7554              		.file 40 "/usr/local/include/python3.8/setobject.h"
 7555              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 7556              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 7557              		.file 43 "/usr/local/include/python3.8/classobject.h"
 7558              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 7559              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 7560              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 7561              		.file 47 "/usr/local/include/python3.8/traceback.h"
 7562              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 7563              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 7564              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 7565              		.file 51 "/usr/local/include/python3.8/pystate.h"
 7566              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 7567              		.file 53 "/usr/local/include/python3.8/genobject.h"
 7568              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 7569              		.file 55 "/usr/local/include/python3.8/structseq.h"
 7570              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 7571              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 7572              		.file 58 "/usr/local/include/python3.8/codecs.h"
 7573              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 7574              		.file 60 "/usr/local/include/python3.8/context.h"
 7575              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 7576              		.file 62 "/usr/local/include/python3.8/code.h"
 7577              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 7578              		.file 64 "/usr/local/include/python3.8/ceval.h"
 7579              		.file 65 "/usr/local/include/python3.8/import.h"
 7580              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 7581              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 7582              		.file 68 "/usr/include/X11/X.h"
 7583              		.file 69 "/usr/include/X11/Xlib.h"
 7584              		.file 70 "/usr/include/X11/Xutil.h"
 7585              		.file 71 "/usr/include/X11/extensions/XShm.h"
 7586              		.file 72 "/usr/include/malloc.h"
 7587              		.file 73 "/usr/include/X11/extensions/Xv.h"
 7588              		.file 74 "/usr/include/X11/extensions/Xvlib.h"
 7589              		.file 75 "armwave.h"
 7590              		.file 76 "<built-in>"
 7591              		.file 77 "/usr/include/arm-linux-gnueabihf/sys/shm.h"
 7592              		.file 78 "/usr/include/stdlib.h"
 7593              		.file 79 "/usr/include/assert.h"
 7594              		.file 80 "/usr/include/string.h"
 7595              		.file 81 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
