   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                  	((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                 	((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)            	MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)       	__builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)        	__builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  97:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  98:armwave.c     ****  */
  99:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 100:armwave.c     **** {
 101:armwave.c     ****     int yy, ys, w, scale_value;
 102:armwave.c     ****     uint32_t value, word;
 103:armwave.c     ****     uint8_t *wave_base;
 104:armwave.c     ****     uint8_t *write_buffer_base;
 105:armwave.c     ****     uint8_t *write_buffer;
 106:armwave.c     ****     
 107:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 108:armwave.c     **** 
 109:armwave.c     ****     // roll through each waveform
 110:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 111:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 112:armwave.c     **** 
 113:armwave.c     ****         // roll through y and render the slice into the out buffer
 114:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 115:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 116:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 117:armwave.c     **** 
 118:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 119:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 123:armwave.c     ****             }
 124:armwave.c     ****         }
 125:armwave.c     ****     }
 126:armwave.c     **** }
 127:armwave.c     **** 
 128:armwave.c     **** void armwave_init()
 129:armwave.c     **** {
 130:armwave.c     ****     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 132:armwave.c     **** 
 133:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 133 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 134:armwave.c     **** {
 135:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 135 5 view .LVU1
 136:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 136 5 view .LVU2
 137:armwave.c     **** 
 138:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 138 5 view .LVU3
 139:armwave.c     **** 
 140:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 141:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 141 5 view .LVU4
  93              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
  94              		.loc 1 133 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 142:armwave.c     **** 
 143:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 144:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 144 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp142, target_height,
 104              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 105              		.loc 1 141 33 view .LVU7
 106 0008 A8419FE5 		ldr	r4, .L21+8	@ tmp215,
 107 000c A8319FE5 		ldr	r3, .L21+12	@ tmp141,
 108              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 144 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp217, tmp142,
 111              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
 112              		.loc 1 133 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:133: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 133:armwave.c     **** {
 118              		.loc 1 133 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 121              		.loc 1 141 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp141, g_armwave_state.wave_buffer
 123              		.loc 1 144 5 is_stmt 1 view .LVU12
 124 0020 4800000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp144, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp218, tmp144,
 127 002c 5000001A 		bne	.L17		@,
 145:armwave.c     **** 
 146:armwave.c     ****     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 149 12 view .LVU13
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 152 12 view .LVU14
 130              	@ armwave.c:152:     } else if(target_height == 1024) {
 131              		.loc 1 152 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4A00000A 		beq	.L18		@,
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 155 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:155:     } else if(target_height == 2048) {
 136              		.loc 1 155 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 156 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:156:         g_armwave_state.row_shift = 11;
 140              		.loc 1 156 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp164,
 142 0040 78319F05 		ldreq	r3, .L21+16	@ tmp162,
 143 0044 F424C401 		strdeq	r2, [r4, #68]	@, tmp215,
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 157 9 is_stmt 1 view .LVU20
 145              	.L5:
 158:armwave.c     ****     } 
 159:armwave.c     **** 
 160:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 161:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 161 5 view .LVU21
 147              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 148              		.loc 1 165 42 is_stmt 0 view .LVU22
 149 0048 950103E0 		mul	r3, r5, r1	@ tmp173, target_width, target_height
 150              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 170:armwave.c     **** 
 171:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 172:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 173:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 174:armwave.c     ****     g_armwave_state.slice_height = 64;  
 175:armwave.c     **** 
 176:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 151              		.loc 1 176 23 view .LVU23
 152 004c 042094E5 		ldr	r2, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 153              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 154              		.loc 1 163 33 view .LVU24
 155 0050 020BA0E3 		mov	r0, #2048	@ tmp169,
 156              	.LVL1:
 157              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 158              		.loc 1 162 44 view .LVU25
 159 0054 21C4A0E1 		lsr	ip, r1, #8	@ tmp167, target_height,
 160              	@ armwave.c:161:     g_armwave_state.xstride = target_height;
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 161              		.loc 1 161 29 view .LVU26
 162 0058 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 163              		.loc 1 162 5 is_stmt 1 view .LVU27
 164              	@ armwave.c:169:     g_armwave_state.target_height = target_height;
 169:armwave.c     **** 
 165              		.loc 1 169 35 is_stmt 0 view .LVU28
 166 005c 401084E5 		str	r1, [r4, #64]	@ target_height, g_armwave_state.target_height
 167              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 168              		.loc 1 165 26 view .LVU29
 169 0060 383084E5 		str	r3, [r4, #56]	@ tmp173, g_armwave_state.size
 170              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 171              		.loc 1 166 37 view .LVU30
 172 0064 011CA0E3 		mov	r1, #256	@ tmp175,
 173              	.LVL2:
 174              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 175              		.loc 1 164 27 view .LVU31
 176 0068 4030A0E3 		mov	r3, #64	@ tmp171,
 177              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 178              		.loc 1 163 33 view .LVU32
 179 006c 200084E5 		str	r0, [r4, #32]	@ tmp169, g_armwave_state.wave_stride
 180              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 181              		.loc 1 176 7 view .LVU33
 182 0070 000052E3 		cmp	r2, #0	@ _12,
 183              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 184              		.loc 1 167 68 view .LVU34
 185 0074 0504A0E1 		lsl	r0, r5, #8	@ _11, target_width,
 186              	@ armwave.c:168:     g_armwave_state.target_width = target_width;
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 187              		.loc 1 168 34 view .LVU35
 188 0078 3C5084E5 		str	r5, [r4, #60]	@ target_width, g_armwave_state.target_width
 189              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 190              		.loc 1 162 28 view .LVU36
 191 007c 1CC084E5 		str	ip, [r4, #28]	@ tmp167, g_armwave_state.vscale
 163:armwave.c     ****     g_armwave_state.waves = waves;
 192              		.loc 1 163 5 is_stmt 1 view .LVU37
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 193              		.loc 1 164 5 view .LVU38
 194              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 195              		.loc 1 164 27 is_stmt 0 view .LVU39
 196 0080 243084E5 		str	r3, [r4, #36]	@ tmp171, g_armwave_state.waves
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 197              		.loc 1 165 5 is_stmt 1 view .LVU40
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 198              		.loc 1 166 5 view .LVU41
 199              	@ armwave.c:174:     g_armwave_state.slice_height = 64;  
 174:armwave.c     **** 
 200              		.loc 1 174 34 is_stmt 0 view .LVU42
 201 0084 2C3084E5 		str	r3, [r4, #44]	@ tmp171, g_armwave_state.slice_height
 202              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 203              		.loc 1 166 37 view .LVU43
 204 0088 281084E5 		str	r1, [r4, #40]	@ tmp175, g_armwave_state.bitdepth_height
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 205              		.loc 1 167 5 is_stmt 1 view .LVU44
 206              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 207              		.loc 1 167 34 is_stmt 0 view .LVU45
 208 008c 340084E5 		str	r0, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 209              		.loc 1 168 5 is_stmt 1 view .LVU46
 169:armwave.c     **** 
 210              		.loc 1 169 5 view .LVU47
 174:armwave.c     **** 
 211              		.loc 1 174 5 view .LVU48
 212              		.loc 1 176 5 view .LVU49
 213              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 214              		.loc 1 176 7 is_stmt 0 view .LVU50
 215 0090 0200000A 		beq	.L7		@,
 177:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 216              		.loc 1 177 9 is_stmt 1 view .LVU51
 217 0094 0200A0E1 		mov	r0, r2	@, _12
 218 0098 FEFFFFEB 		bl	free		@
 219              	.LVL3:
 220              		.loc 1 177 9 is_stmt 0 view .LVU52
 221 009c 340094E5 		ldr	r0, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 222              	.L7:
 178:armwave.c     **** 
 179:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 223              		.loc 1 179 5 is_stmt 1 view .LVU53
 224              	@ armwave.c:179:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 225              		.loc 1 179 34 is_stmt 0 view .LVU54
 226 00a0 0110A0E3 		mov	r1, #1	@,
 227 00a4 FEFFFFEB 		bl	calloc		@
 228              	.LVL4:
 229              	@ armwave.c:180:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 180:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 230              		.loc 1 180 33 view .LVU55
 231 00a8 14219FE5 		ldr	r2, .L21+20	@ tmp186,
 232              	@ armwave.c:182:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 181:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 182:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 233              		.loc 1 182 33 view .LVU56
 234 00ac FA30A0E3 		mov	r3, #250	@ tmp189,
 235              	@ armwave.c:180:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 180:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 236              		.loc 1 180 33 view .LVU57
 237 00b0 502084E5 		str	r2, [r4, #80]	@ tmp186, MEM[(short int *)&g_armwave_state + 80B]
 238              	@ armwave.c:182:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 239              		.loc 1 182 33 view .LVU58
 240 00b4 B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp189, g_armwave_state.ch1_color.b
 241              	@ armwave.c:184:     assert(g_armwave_state.ch1_buffer != NULL);
 183:armwave.c     **** 
 184:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 242              		.loc 1 184 5 view .LVU59
 243 00b8 000050E3 		cmp	r0, #0	@ tmp183,
 244              	@ armwave.c:179:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 179:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 245              		.loc 1 179 32 view .LVU60
 246 00bc 040084E5 		str	r0, [r4, #4]	@ tmp183, g_armwave_state.ch1_buffer
 180:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 247              		.loc 1 180 5 is_stmt 1 view .LVU61
 181:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 248              		.loc 1 181 5 view .LVU62
 182:armwave.c     **** 
 249              		.loc 1 182 5 view .LVU63
 250              		.loc 1 184 5 view .LVU64
 251 00c0 3000000A 		beq	.L19		@,
 185:armwave.c     **** 
 186:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 187:armwave.c     ****     length = end_point - start_point;
 252              		.loc 1 187 5 view .LVU65
 253              	.LVL5:
 188:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 254              		.loc 1 188 5 view .LVU66
 255              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 256              		.loc 1 188 34 is_stmt 0 view .LVU67
 257 00c4 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 258              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 259              		.loc 1 188 22 view .LVU68
 260 00c8 386ADFED 		vldr.32	s13, .L21	@ tmp194,
 261              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 189:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 190:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 262              		.loc 1 190 40 view .LVU69
 263 00cc 010AA0E3 		mov	r0, #4096	@,
 264              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 265              		.loc 1 188 34 view .LVU70
 266 00d0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp193, target_width
 267              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 268              		.loc 1 189 60 view .LVU71
 269 00d4 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp220, g_armwave_state.slice_height
 270 00d8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp197, tmp220
 271              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 272              		.loc 1 188 22 view .LVU72
 273 00dc 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp194, tmp193
 274              	.LVL6:
 189:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 275              		.loc 1 189 5 is_stmt 1 view .LVU73
 276              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 277              		.loc 1 189 60 is_stmt 0 view .LVU74
 278 00e0 887A67EE 		vmul.f32	s15, s15, s16	@ tmp199, tmp197, points_per_pixel
 279              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 280              		.loc 1 189 41 view .LVU75
 281 00e4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp200, tmp199
 282 00e8 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp200, g_armwave_state.slice_record_height
 283              		.loc 1 190 5 is_stmt 1 view .LVU76
 284              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 285              		.loc 1 190 40 is_stmt 0 view .LVU77
 286 00ec FEFFFFEB 		bl	malloc		@
 287              	.LVL7:
 288              	@ armwave.c:192:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 191:armwave.c     **** 
 192:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 289              		.loc 1 192 5 view .LVU78
 290 00f0 000050E3 		cmp	r0, #0	@ tmp201,
 291              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 190:armwave.c     **** 
 292              		.loc 1 190 38 view .LVU79
 293 00f4 680084E5 		str	r0, [r4, #104]	@ tmp201, g_armwave_state.xcoord_to_xpixel
 294              		.loc 1 192 5 is_stmt 1 view .LVU80
 295 00f8 2700000A 		beq	.L20		@,
 296              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 193:armwave.c     **** 
 194:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 195:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 297              		.loc 1 195 54 is_stmt 0 view .LVU81
 298 00fc 2C7ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 299 0100 020040E2 		sub	r0, r0, #2	@ ivtmp.28, tmp201,
 300              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301              		.loc 1 194 12 view .LVU82
 302 0104 0030A0E3 		mov	r3, #0	@ xx,
 303              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 304              		.loc 1 195 54 view .LVU83
 305 0108 887A87EE 		vdiv.f32	s14, s15, s16	@ _25, tmp206, points_per_pixel
 306              	.L10:
 307              	.LVL8:
 308              		.loc 1 195 9 is_stmt 1 view .LVU84
 309              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 310              		.loc 1 195 74 is_stmt 0 view .LVU85
 311 010c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 312              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 313              		.loc 1 194 32 view .LVU86
 314 0110 013083E2 		add	r3, r3, #1	@ xx, xx,
 315              	.LVL9:
 316              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 317              		.loc 1 194 5 view .LVU87
 318 0114 020B53E3 		cmp	r3, #2048	@ xx,
 319              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 320              		.loc 1 195 74 view .LVU88
 321 0118 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp207, xx
 322 011c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp208, tmp207, _25
 323              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 324              		.loc 1 195 46 view .LVU89
 325 0120 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp209, tmp208
 326 0124 902A17EE 		vmov	r2, s15	@ int	@ tmp209, tmp209
 327 0128 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp209, MEM[base: _5, offset: 0B]
 328              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 329              		.loc 1 194 5 view .LVU90
 330 012c F6FFFF1A 		bne	.L10		@,
 196:armwave.c     **** 
 197:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 198:armwave.c     ****     }
 199:armwave.c     **** 
 200:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 331              		.loc 1 200 5 is_stmt 1 view .LVU91
 332              	@ armwave.c:200:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333              		.loc 1 200 34 is_stmt 0 view .LVU92
 334 0130 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 335 0134 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 336 0138 FEFFFFEB 		bl	malloc		@
 337              	.LVL10:
 338              	@ armwave.c:201: }
 201:armwave.c     **** }
 339              		.loc 1 201 1 view .LVU93
 340 013c 028BBDEC 		vldm	sp!, {d8}	@
 341              		.cfi_remember_state
 342              		.cfi_restore 80
 343              		.cfi_restore 81
 344              		.cfi_def_cfa_offset 16
 345              	.LVL11:
 346              	@ armwave.c:200:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 200:armwave.c     **** }
 347              		.loc 1 200 32 view .LVU94
 348 0140 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 349              	@ armwave.c:201: }
 350              		.loc 1 201 1 view .LVU95
 351 0144 7080BDE8 		pop	{r4, r5, r6, pc}	@
 352              	.LVL12:
 353              	.L2:
 354              		.cfi_restore_state
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 355              		.loc 1 146 5 is_stmt 1 view .LVU96
 356              	@ armwave.c:146:     if(target_height == 256) {
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 357              		.loc 1 146 7 is_stmt 0 view .LVU97
 358 0148 010C51E3 		cmp	r1, #256	@ target_height,
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 359              		.loc 1 147 9 is_stmt 1 view .LVU98
 360              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 361              		.loc 1 148 34 is_stmt 0 view .LVU99
 362 014c 0820A003 		moveq	r2, #8	@ tmp150,
 363              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 364              		.loc 1 150 35 view .LVU100
 365 0150 70309F15 		ldrne	r3, .L21+24	@ tmp154,
 366              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 367              		.loc 1 148 34 view .LVU101
 368 0154 FF30A003 		moveq	r3, #255	@ tmp152,
 149:armwave.c     ****         g_armwave_state.row_shift = 9;
 369              		.loc 1 149 12 is_stmt 1 view .LVU102
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 370              		.loc 1 150 9 view .LVU103
 371              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 372              		.loc 1 150 35 is_stmt 0 view .LVU104
 373 0158 0920A013 		movne	r2, #9	@ tmp156,
 374 015c F424C4E1 		strd	r2, [r4, #68]	@, tmp215,
 151:armwave.c     ****     } else if(target_height == 1024) {
 375              		.loc 1 151 9 is_stmt 1 view .LVU105
 376 0160 B8FFFFEA 		b	.L5		@
 377              	.L18:
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 378              		.loc 1 153 9 view .LVU106
 379              	@ armwave.c:153:         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 380              		.loc 1 153 35 is_stmt 0 view .LVU107
 381 0164 60309FE5 		ldr	r3, .L21+28	@ tmp158,
 382 0168 0A20A0E3 		mov	r2, #10	@ tmp160,
 383 016c F424C4E1 		strd	r2, [r4, #68]	@, tmp215,
 154:armwave.c     ****     } else if(target_height == 2048) {
 384              		.loc 1 154 9 is_stmt 1 view .LVU108
 385 0170 B4FFFFEA 		b	.L5		@
 386              	.L17:
 144:armwave.c     **** 
 387              		.loc 1 144 5 view .LVU109
 388 0174 54309FE5 		ldr	r3, .L21+32	@,
 389 0178 9020A0E3 		mov	r2, #144	@,
 390 017c 50109FE5 		ldr	r1, .L21+36	@,
 391              	.LVL13:
 144:armwave.c     **** 
 392              		.loc 1 144 5 is_stmt 0 view .LVU110
 393 0180 50009FE5 		ldr	r0, .L21+40	@,
 394              	.LVL14:
 144:armwave.c     **** 
 395              		.loc 1 144 5 view .LVU111
 396 0184 FEFFFFEB 		bl	__assert_fail		@
 397              	.LVL15:
 398              	.L19:
 184:armwave.c     **** 
 399              		.loc 1 184 5 is_stmt 1 view .LVU112
 400 0188 40309FE5 		ldr	r3, .L21+32	@,
 401 018c B820A0E3 		mov	r2, #184	@,
 402 0190 3C109FE5 		ldr	r1, .L21+36	@,
 403 0194 40009FE5 		ldr	r0, .L21+44	@,
 404 0198 FEFFFFEB 		bl	__assert_fail		@
 405              	.LVL16:
 406              	.L20:
 192:armwave.c     **** 
 407              		.loc 1 192 5 view .LVU113
 408 019c 2C309FE5 		ldr	r3, .L21+32	@,
 409 01a0 C020A0E3 		mov	r2, #192	@,
 410 01a4 28109FE5 		ldr	r1, .L21+36	@,
 411 01a8 30009FE5 		ldr	r0, .L21+48	@,
 412 01ac FEFFFFEB 		bl	__assert_fail		@
 413              	.LVL17:
 414              	.L22:
 415              		.align	2
 416              	.L21:
 417 01b0 00000045 		.word	1157627904
 418 01b4 0000803F 		.word	1065353216
 419 01b8 00000000 		.word	g_armwave_state
 420 01bc 00000000 		.word	test_wave_buffer
 421 01c0 FF070000 		.word	2047
 422 01c4 F609F406 		.word	116656630
 423 01c8 FF010000 		.word	511
 424 01cc FF030000 		.word	1023
 425 01d0 00000000 		.word	.LANCHOR0
 426 01d4 00000000 		.word	.LC0
 427 01d8 0C000000 		.word	.LC1
 428 01dc 6C000000 		.word	.LC2
 429 01e0 90000000 		.word	.LC3
 430              		.cfi_endproc
 431              	.LFE72:
 433              		.align	2
 434              		.global	test_create_waveform
 435              		.syntax unified
 436              		.arm
 437              		.fpu vfp
 439              	test_create_waveform:
 440              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 441              		.loc 1 51 1 view -0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 8
 444              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 445              		.loc 1 52 5 view .LVU115
  53:armwave.c     **** 
 446              		.loc 1 53 5 view .LVU116
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 447              		.loc 1 55 5 view .LVU117
 448              	.LVL18:
 449              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 450              		.loc 1 51 1 is_stmt 0 view .LVU118
 451 01e4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 452              		.cfi_def_cfa_offset 36
 453              		.cfi_offset 4, -36
 454              		.cfi_offset 5, -32
 455              		.cfi_offset 6, -28
 456              		.cfi_offset 7, -24
 457              		.cfi_offset 8, -20
 458              		.cfi_offset 9, -16
 459              		.cfi_offset 10, -12
 460              		.cfi_offset 11, -8
 461              		.cfi_offset 14, -4
 462 01e8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 463              		.cfi_def_cfa_offset 84
 464              		.cfi_offset 80, -84
 465              		.cfi_offset 81, -80
 466              		.cfi_offset 82, -76
 467              		.cfi_offset 83, -72
 468              		.cfi_offset 84, -68
 469              		.cfi_offset 85, -64
 470              		.cfi_offset 86, -60
 471              		.cfi_offset 87, -56
 472              		.cfi_offset 88, -52
 473              		.cfi_offset 89, -48
 474              		.cfi_offset 90, -44
 475              		.cfi_offset 91, -40
 476 01ec 5C819FE5 		ldr	r8, .L42+40	@ _75,
 477              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 478              		.loc 1 56 33 view .LVU119
 479 01f0 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 480 01f4 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.44, _75,
 481              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 482              		.loc 1 56 13 view .LVU120
 483 01f8 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 484              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 485              		.loc 1 60 20 view .LVU121
 486 01fc 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 487              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 488              		.loc 1 71 29 view .LVU122
 489 0200 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 490              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 491              		.loc 1 71 33 view .LVU123
 492 0204 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 493              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 494              		.loc 1 69 20 view .LVU124
 495 0208 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 496 020c 02B886E2 		add	fp, r6, #131072	@ _81,,
 497 0210 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 498              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 499              		.loc 1 51 1 view .LVU125
 500 0214 0CD04DE2 		sub	sp, sp, #12	@,,
 501              		.cfi_def_cfa_offset 96
 502 0218 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 503 021c 0F6086E2 		add	r6, r6, #15	@ ivtmp.44, ivtmp.44,
 504 0220 008068E2 		rsb	r8, r8, #0	@ ivtmp.47, _75
 505              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 506              		.loc 1 55 11 view .LVU126
 507 0224 0090A0E3 		mov	r9, #0	@ w,
 508              	.LVL19:
 509              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 510              		.loc 1 56 9 is_stmt 1 view .LVU127
 511              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 512              		.loc 1 56 24 is_stmt 0 view .LVU128
 513 0228 909A07EE 		vmov	s15, r9	@ int	@ w, w
 514              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 515              		.loc 1 56 48 view .LVU129
 516 022c 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 517              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 518              		.loc 1 56 13 view .LVU130
 519 0230 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 520              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 521              		.loc 1 68 19 view .LVU131
 522 0234 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 523              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 524              		.loc 1 56 24 view .LVU132
 525 0238 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 526              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 527              		.loc 1 73 58 view .LVU133
 528 023c 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 529 0240 025B46E2 		sub	r5, r6, #2048	@ ivtmp.37, ivtmp.44,
 530 0244 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.47,
 531              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 532              		.loc 1 56 33 view .LVU134
 533 0248 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 534              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 535              		.loc 1 56 13 view .LVU135
 536 024c 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 537              	.LVL20:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 538              		.loc 1 59 9 is_stmt 1 view .LVU136
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 539              		.loc 1 59 9 is_stmt 0 view .LVU137
 540 0250 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 541              	.LVL21:
 542              	.L28:
 543              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 544              		.loc 1 60 24 view .LVU138
 545 0254 FEFFFFEB 		bl	rand		@
 546              	.LVL22:
 547 0258 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.37
 548              	.LVL23:
  60:armwave.c     ****             noise *= noise;
 549              		.loc 1 60 13 is_stmt 1 view .LVU139
 550              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 551              		.loc 1 60 31 is_stmt 0 view .LVU140
 552 025c 7000FFE6 		uxth	r0, r0	@ tmp163,
 553              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 554              		.loc 1 60 41 view .LVU141
 555 0260 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 556 0264 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 557              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 558              		.loc 1 60 20 view .LVU142
 559 0268 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 560              	.LVL24:
  61:armwave.c     ****             noise *= noise;
 561              		.loc 1 61 13 is_stmt 1 view .LVU143
 562              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 563              		.loc 1 61 19 is_stmt 0 view .LVU144
 564 026c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 565              	.LVL25:
  62:armwave.c     ****             noise *= noise;
 566              		.loc 1 62 13 is_stmt 1 view .LVU145
 567              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 568              		.loc 1 62 19 is_stmt 0 view .LVU146
 569 0270 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 570              	.LVL26:
  63:armwave.c     **** 
 571              		.loc 1 63 13 is_stmt 1 view .LVU147
 572              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 573              		.loc 1 63 19 is_stmt 0 view .LVU148
 574 0274 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 575              	.LVL27:
  65:armwave.c     ****                 noise = -noise;
 576              		.loc 1 65 13 is_stmt 1 view .LVU149
 577              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 578              		.loc 1 65 17 is_stmt 0 view .LVU150
 579 0278 FEFFFFEB 		bl	rand		@
 580              	.LVL28:
  66:armwave.c     **** 
 581              		.loc 1 66 17 is_stmt 1 view .LVU151
 582              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 583              		.loc 1 65 15 is_stmt 0 view .LVU152
 584 027c 020910E3 		tst	r0, #32768	@,
 585              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 586              		.loc 1 66 23 view .LVU153
 587 0280 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 588              	.LVL29:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 589              		.loc 1 68 13 is_stmt 1 view .LVU154
  69:armwave.c     **** 
 590              		.loc 1 69 13 view .LVU155
 591              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 592              		.loc 1 69 23 is_stmt 0 view .LVU156
 593 0284 FEFFFFEB 		bl	rand		@
 594              	.LVL30:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 595              		.loc 1 71 13 is_stmt 1 view .LVU157
 596              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 597              		.loc 1 71 29 is_stmt 0 view .LVU158
 598 0288 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 599 028c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 600 0290 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 601              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 602              		.loc 1 69 30 view .LVU159
 603 0294 7000FFE6 		uxth	r0, r0	@ tmp173,
 604              	.LVL31:
 605              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 606              		.loc 1 69 40 view .LVU160
 607 0298 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 608 029c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 609              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 610              		.loc 1 69 20 view .LVU161
 611 02a0 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 612              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 613              		.loc 1 71 60 view .LVU162
 614 02a4 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 615              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 616              		.loc 1 71 18 view .LVU163
 617 02a8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 618 02ac FEFFFFEB 		bl	sin		@
 619              	.LVL32:
  73:armwave.c     ****         }
 620              		.loc 1 73 13 is_stmt 1 view .LVU164
 621              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 622              		.loc 1 68 19 is_stmt 0 view .LVU165
 623 02b0 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 624              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 625              		.loc 1 73 58 view .LVU166
 626 02b4 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 627              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 628              		.loc 1 73 56 view .LVU167
 629 02b8 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 630 02bc 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 631              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 632              		.loc 1 71 77 view .LVU168
 633 02c0 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 634              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 635              		.loc 1 71 70 view .LVU169
 636 02c4 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 637              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 638              		.loc 1 71 77 view .LVU170
 639 02c8 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 640              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 641              		.loc 1 71 15 view .LVU171
 642 02cc C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 643              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 644              		.loc 1 73 58 view .LVU172
 645 02d0 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 646 02d4 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 647 02d8 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 648 02dc 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 649 02e0 050000DA 		ble	.L25		@,
 650              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 651              		.loc 1 73 56 discriminator 1 view .LVU173
 652 02e4 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 653 02e8 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 654 02ec 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 655 02f0 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 656 02f4 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 657 02f8 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 658              	.L25:
 659              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 660              		.loc 1 73 56 discriminator 12 view .LVU174
 661 02fc 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 662              	.LVL33:
 663              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 664              		.loc 1 59 9 discriminator 12 view .LVU175
 665 0300 060055E1 		cmp	r5, r6	@ ivtmp.37, ivtmp.44
 666 0304 D2FFFF1A 		bne	.L28		@,
 667 0308 026B85E2 		add	r6, r5, #2048	@ ivtmp.44, ivtmp.37,
 668              	.LVL34:
 669              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 670              		.loc 1 55 5 discriminator 2 view .LVU176
 671 030c 0B0056E1 		cmp	r6, fp	@ ivtmp.44, _81
 672              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 673              		.loc 1 55 34 discriminator 2 view .LVU177
 674 0310 019089E2 		add	r9, r9, #1	@ w, w,
 675              	.LVL35:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 676              		.loc 1 55 34 discriminator 2 view .LVU178
 677 0314 028B48E2 		sub	r8, r8, #2048	@ ivtmp.47, ivtmp.47,
 678              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 679              		.loc 1 55 5 discriminator 2 view .LVU179
 680 0318 C2FFFF1A 		bne	.L29		@,
 681              	@ armwave.c:76: }
  76:armwave.c     **** 
 682              		.loc 1 76 1 view .LVU180
 683 031c 0CD08DE2 		add	sp, sp, #12	@,,
 684              		.cfi_def_cfa_offset 84
 685              		@ sp needed	@
 686 0320 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 687              		.cfi_restore 90
 688              		.cfi_restore 91
 689              		.cfi_restore 88
 690              		.cfi_restore 89
 691              		.cfi_restore 86
 692              		.cfi_restore 87
 693              		.cfi_restore 84
 694              		.cfi_restore 85
 695              		.cfi_restore 82
 696              		.cfi_restore 83
 697              		.cfi_restore 80
 698              		.cfi_restore 81
 699              		.cfi_def_cfa_offset 36
 700              	.LVL36:
  76:armwave.c     **** 
 701              		.loc 1 76 1 view .LVU181
 702 0324 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 703              	.LVL37:
 704              	.L43:
  76:armwave.c     **** 
 705              		.loc 1 76 1 view .LVU182
 706              		.align	2
 707              	.L42:
 708 0328 0000803C 		.word	1015021568
 709 032c 0000003F 		.word	1056964608
 710 0330 0050C347 		.word	1203982336
 711 0334 C3F5C840 		.word	1086911939
 712 0338 0000003A 		.word	973078528
 713 033c 38FFC74A 		.word	1254620984
 714 0340 0000803F 		.word	1065353216
 715 0344 0000FE42 		.word	1123942400
 716 0348 00000043 		.word	1124073472
 717 034c 00007F43 		.word	1132396544
 718 0350 00000000 		.word	test_wave_buffer
 719 0354 00000000 		.word	.LANCHOR1
 720              		.cfi_endproc
 721              	.LFE57:
 723              		.align	2
 724              		.global	test_create_gamma
 725              		.syntax unified
 726              		.arm
 727              		.fpu vfp
 729              	test_create_gamma:
 730              	.LFB58:
  82:armwave.c     ****     int i;
 731              		.loc 1 82 1 is_stmt 1 view -0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 0
 734              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 735              		.loc 1 83 5 view .LVU184
  84:armwave.c     **** 
 736              		.loc 1 84 5 view .LVU185
 737              	.LVL38:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 738              		.loc 1 86 5 view .LVU186
 739              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 740              		.loc 1 82 1 is_stmt 0 view .LVU187
 741 0358 70402DE9 		push	{r4, r5, r6, lr}	@
 742              		.cfi_def_cfa_offset 16
 743              		.cfi_offset 4, -16
 744              		.cfi_offset 5, -12
 745              		.cfi_offset 6, -8
 746              		.cfi_offset 14, -4
 747 035c 068B2DED 		vpush.64	{d8, d9, d10}	@
 748              		.cfi_def_cfa_offset 40
 749              		.cfi_offset 80, -40
 750              		.cfi_offset 81, -36
 751              		.cfi_offset 82, -32
 752              		.cfi_offset 83, -28
 753              		.cfi_offset 84, -24
 754              		.cfi_offset 85, -20
 755 0360 64409FE5 		ldr	r4, .L48+20	@ ivtmp.55,
 756              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 757              		.loc 1 87 32 view .LVU188
 758 0364 17AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 759              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 760              		.loc 1 87 26 view .LVU189
 761 0368 129B9FED 		vldr.64	d9, .L48	@ tmp135,
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 49 view .LVU190
 764 036c 138B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 765 0370 015084E2 		add	r5, r4, #1	@ _25, ivtmp.55,
 766 0374 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.55,
 767 0378 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 768              	.LVL39:
 769              	.L45:
  87:armwave.c     ****     }
 770              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU191
 771              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 772              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU192
 773 037c 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.55
 774              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 775              		.loc 1 87 26 discriminator 3 view .LVU193
 776 0380 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 777              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 778              		.loc 1 87 32 discriminator 3 view .LVU194
 779 0384 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 780 0388 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 781 038c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 782              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 783              		.loc 1 87 26 discriminator 3 view .LVU195
 784 0390 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 785 0394 FEFFFFEB 		bl	pow		@
 786              	.LVL40:
 787              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 788              		.loc 1 87 49 discriminator 3 view .LVU196
 789 0398 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 790              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 791              		.loc 1 87 24 discriminator 3 view .LVU197
 792 039c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 793 03a0 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 794 03a4 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 795              	.LVL41:
 796              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 797              		.loc 1 86 5 discriminator 3 view .LVU198
 798 03a8 060054E1 		cmp	r4, r6	@ ivtmp.55, _26
 799 03ac F2FFFF1A 		bne	.L45		@,
 800              	@ armwave.c:89: }
  89:armwave.c     **** 
 801              		.loc 1 89 1 view .LVU199
 802 03b0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 803              		.cfi_restore 84
 804              		.cfi_restore 85
 805              		.cfi_restore 82
 806              		.cfi_restore 83
 807              		.cfi_restore 80
 808              		.cfi_restore 81
 809              		.cfi_def_cfa_offset 16
 810 03b4 7080BDE8 		pop	{r4, r5, r6, pc}	@
 811              	.LVL42:
 812              	.L49:
  89:armwave.c     **** 
 813              		.loc 1 89 1 view .LVU200
 814              		.align	3
 815              	.L48:
 816 03b8 000000C0 		.word	-1073741824
 817 03bc CCCCEC3F 		.word	1072483532
 818 03c0 00000000 		.word	0
 819 03c4 00E06F40 		.word	1081073664
 820 03c8 00007F43 		.word	1132396544
 821 03cc FFFFFFFF 		.word	gamma_table-1
 822              		.cfi_endproc
 823              	.LFE58:
 825              		.align	2
 826              		.global	render_nonaa_to_buffer_1ch_slice
 827              		.syntax unified
 828              		.arm
 829              		.fpu vfp
 831              	render_nonaa_to_buffer_1ch_slice:
 832              	.LVL43:
 833              	.LFB59:
 100:armwave.c     ****     int yy, ys, w, scale_value;
 834              		.loc 1 100 1 is_stmt 1 view -0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 101:armwave.c     ****     uint32_t value, word;
 838              		.loc 1 101 5 view .LVU202
 102:armwave.c     ****     uint8_t *wave_base;
 839              		.loc 1 102 5 view .LVU203
 103:armwave.c     ****     uint8_t *write_buffer_base;
 840              		.loc 1 103 5 view .LVU204
 104:armwave.c     ****     uint8_t *write_buffer;
 841              		.loc 1 104 5 view .LVU205
 105:armwave.c     ****     
 842              		.loc 1 105 5 view .LVU206
 107:armwave.c     **** 
 843              		.loc 1 107 5 view .LVU207
 844              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 845              		.loc 1 107 40 is_stmt 0 view .LVU208
 846 03d0 F4209FE5 		ldr	r2, .L62	@ tmp257,
 847              	@ armwave.c:100: {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 848              		.loc 1 100 1 view .LVU209
 849 03d4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 850              		.cfi_def_cfa_offset 36
 851              		.cfi_offset 4, -36
 852              		.cfi_offset 5, -32
 853              		.cfi_offset 6, -28
 854              		.cfi_offset 7, -24
 855              		.cfi_offset 8, -20
 856              		.cfi_offset 9, -16
 857              		.cfi_offset 10, -12
 858              		.cfi_offset 11, -8
 859              		.cfi_offset 14, -4
 860              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 861              		.loc 1 110 5 view .LVU210
 862 03d8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 863              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 864              		.loc 1 107 63 view .LVU211
 865 03dc 286092E5 		ldr	r6, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 866              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 867              		.loc 1 110 5 view .LVU212
 868 03e0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 869              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 870              		.loc 1 107 40 view .LVU213
 871 03e4 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 872              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 873              		.loc 1 107 63 view .LVU214
 874 03e8 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 875              	.LVL44:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 876              		.loc 1 110 5 is_stmt 1 view .LVU215
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 877              		.loc 1 110 5 is_stmt 0 view .LVU216
 878 03ec F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 879 03f0 000051E3 		cmp	r1, #0	@ height,
 880 03f4 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 881 03f8 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 882              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 883              		.loc 1 110 11 view .LVU217
 884 03fc 0080A0E3 		mov	r8, #0	@ w,
 885              	.LVL45:
 886              	.L54:
 111:armwave.c     **** 
 887              		.loc 1 111 9 is_stmt 1 view .LVU218
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 888              		.loc 1 115 9 view .LVU219
 889              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 890              		.loc 1 111 64 is_stmt 0 view .LVU220
 891 0400 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 892 0404 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 893              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 894              		.loc 1 115 16 view .LVU221
 895 0408 0000A0E3 		mov	r0, #0	@ yy,
 896 040c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 897 0410 037087E0 		add	r7, r7, r3	@ ivtmp.61, g_armwave_state.wave_buffer, tmp195
 898              	.LVL46:
 899              	.L53:
 116:armwave.c     **** 
 900              		.loc 1 116 13 is_stmt 1 view .LVU222
 901              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 902              		.loc 1 116 18 is_stmt 0 view .LVU223
 903 0414 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 904              	.LVL47:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 905              		.loc 1 118 13 is_stmt 1 view .LVU224
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 906              		.loc 1 119 17 view .LVU225
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 907              		.loc 1 120 17 view .LVU226
 121:armwave.c     ****                 word >>= 8;
 908              		.loc 1 121 17 view .LVU227
 909              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 910              		.loc 1 119 45 is_stmt 0 view .LVU228
 911 0418 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 912              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 913              		.loc 1 120 63 view .LVU229
 914 041c 285092E5 		ldr	r5, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 915              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 916              		.loc 1 119 37 view .LVU230
 917 0420 73E0EFE6 		uxtb	lr, r3	@ word, word
 918              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 919              		.loc 1 122 22 view .LVU231
 920 0424 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 921              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 922              		.loc 1 121 47 view .LVU232
 923 0428 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 924              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 925              		.loc 1 119 37 view .LVU233
 926 042c 7440EFE6 		uxtb	r4, r4	@ word, word
 927              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 928              		.loc 1 121 47 view .LVU234
 929 0430 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.bitdepth_height, yy, tmp201
 930              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 931              		.loc 1 120 63 view .LVU235
 932 0434 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 933              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 934              		.loc 1 122 22 view .LVU236
 935 0438 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 936              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 937              		.loc 1 121 47 view .LVU237
 938 043c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 939              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 940              		.loc 1 119 37 view .LVU238
 941 0440 7EE0EFE6 		uxtb	lr, lr	@ word, word
 942              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 943              		.loc 1 122 22 view .LVU239
 944 0444 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 945              	.LVL48:
 946              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 947              		.loc 1 121 47 view .LVU240
 948 0448 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 949 044c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 950              	.LVL49:
 122:armwave.c     ****             }
 951              		.loc 1 122 17 is_stmt 1 view .LVU241
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 952              		.loc 1 119 17 view .LVU242
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 953              		.loc 1 120 17 view .LVU243
 121:armwave.c     ****                 word >>= 8;
 954              		.loc 1 121 17 view .LVU244
 955              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 956              		.loc 1 119 45 is_stmt 0 view .LVU245
 957 0450 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 958              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 959              		.loc 1 120 63 view .LVU246
 960 0454 285092E5 		ldr	r5, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 961              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 962              		.loc 1 121 47 view .LVU247
 963 0458 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 964              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 965              		.loc 1 120 63 view .LVU248
 966 045c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 967              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 968              		.loc 1 121 47 view .LVU249
 969 0460 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.bitdepth_height, tmp217, tmp215
 970              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 971              		.loc 1 120 63 view .LVU250
 972 0464 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 973              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 974              		.loc 1 115 37 view .LVU251
 975 0468 040080E2 		add	r0, r0, #4	@ yy, yy,
 976              	.LVL50:
 977              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 978              		.loc 1 121 47 view .LVU252
 979 046c 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 980              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 981              		.loc 1 115 9 view .LVU253
 982 0470 000051E1 		cmp	r1, r0	@ height, yy
 983              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 984              		.loc 1 121 47 view .LVU254
 985 0474 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 986 0478 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 987              	.LVL51:
 122:armwave.c     ****             }
 988              		.loc 1 122 17 is_stmt 1 view .LVU255
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 989              		.loc 1 119 17 view .LVU256
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 990              		.loc 1 120 17 view .LVU257
 121:armwave.c     ****                 word >>= 8;
 991              		.loc 1 121 17 view .LVU258
 992              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 993              		.loc 1 119 45 is_stmt 0 view .LVU259
 994 047c 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 995              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 996              		.loc 1 120 63 view .LVU260
 997 0480 284092E5 		ldr	r4, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 998              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 999              		.loc 1 121 47 view .LVU261
 1000 0484 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 1001 0488 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.bitdepth_height, tmp232, tmp230
 1002 048c 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 1003 0490 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 1004 0494 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 122:armwave.c     ****             }
 1005              		.loc 1 122 17 is_stmt 1 view .LVU262
 1006              	.LVL52:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 1007              		.loc 1 119 17 view .LVU263
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1008              		.loc 1 120 17 view .LVU264
 121:armwave.c     ****                 word >>= 8;
 1009              		.loc 1 121 17 view .LVU265
 1010              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 1011              		.loc 1 119 45 is_stmt 0 view .LVU266
 1012 0498 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1013              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1014              		.loc 1 120 63 view .LVU267
 1015 049c 28E092E5 		ldr	lr, [r2, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1016              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 1017              		.loc 1 121 47 view .LVU268
 1018 04a0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 1019 04a4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.bitdepth_height, tmp246, tmp244
 1020 04a8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 1021 04ac 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 1022 04b0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 122:armwave.c     ****             }
 1023              		.loc 1 122 17 is_stmt 1 view .LVU269
 1024              	.LVL53:
 1025              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1026              		.loc 1 115 9 is_stmt 0 view .LVU270
 1027 04b4 D6FFFF8A 		bhi	.L53		@,
 1028              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1029              		.loc 1 110 5 view .LVU271
 1030 04b8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1031              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1032              		.loc 1 110 44 view .LVU272
 1033 04bc 018088E2 		add	r8, r8, #1	@ w, w,
 1034              	.LVL54:
 1035              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1036              		.loc 1 110 5 view .LVU273
 1037 04c0 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 1038 04c4 CDFFFF3A 		bcc	.L54		@,
 1039 04c8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1040              	.L63:
 1041              		.align	2
 1042              	.L62:
 1043 04cc 00000000 		.word	g_armwave_state
 1044              		.cfi_endproc
 1045              	.LFE59:
 1047              		.align	2
 1048              		.global	armwave_init
 1049              		.syntax unified
 1050              		.arm
 1051              		.fpu vfp
 1053              	armwave_init:
 1054              	.LFB60:
 129:armwave.c     ****     g_armwave_state.flags = 0;
 1055              		.loc 1 129 1 is_stmt 1 view -0
 1056              		.cfi_startproc
 1057              		@ args = 0, pretend = 0, frame = 0
 1058              		@ frame_needed = 0, uses_anonymous_args = 0
 1059              		@ link register save eliminated.
 130:armwave.c     **** }
 1060              		.loc 1 130 5 view .LVU275
 1061              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 1062              		.loc 1 130 27 is_stmt 0 view .LVU276
 1063 04d0 08309FE5 		ldr	r3, .L65	@ tmp110,
 1064 04d4 0020A0E3 		mov	r2, #0	@ tmp111,
 1065 04d8 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1066              	@ armwave.c:131: }
 131:armwave.c     **** 
 1067              		.loc 1 131 1 view .LVU277
 1068 04dc 1EFF2FE1 		bx	lr	@
 1069              	.L66:
 1070              		.align	2
 1071              	.L65:
 1072 04e0 00000000 		.word	g_armwave_state
 1073              		.cfi_endproc
 1074              	.LFE60:
 1076              		.align	2
 1077              		.global	armwave_setup_render
 1078              		.syntax unified
 1079              		.arm
 1080              		.fpu vfp
 1082              	armwave_setup_render:
 1083              	.LVL55:
 1084              	.LFB61:
 134:armwave.c     ****     uint32_t length, xx;
 1085              		.loc 1 134 1 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 16, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 135:armwave.c     ****     float points_per_pixel;
 1089              		.loc 1 135 5 view .LVU279
 136:armwave.c     **** 
 1090              		.loc 1 136 5 view .LVU280
 138:armwave.c     **** 
 1091              		.loc 1 138 5 view .LVU281
 1092              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1093              		.loc 1 134 1 is_stmt 0 view .LVU282
 1094 04e4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1095              		.cfi_def_cfa_offset 24
 1096              		.cfi_offset 4, -24
 1097              		.cfi_offset 5, -20
 1098              		.cfi_offset 6, -16
 1099              		.cfi_offset 7, -12
 1100              		.cfi_offset 8, -8
 1101              		.cfi_offset 14, -4
 1102              	@ armwave.c:138:     assert(start_point < end_point);
 138:armwave.c     **** 
 1103              		.loc 1 138 5 view .LVU283
 1104 04e8 020051E1 		cmp	r1, r2	@ start_point, end_point
 1105              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1106              		.loc 1 134 1 view .LVU284
 1107 04ec 028B2DED 		vpush.64	{d8}	@
 1108              		.cfi_def_cfa_offset 32
 1109              		.cfi_offset 80, -32
 1110              		.cfi_offset 81, -28
 1111              	@ armwave.c:134: {
 134:armwave.c     ****     uint32_t length, xx;
 1112              		.loc 1 134 1 view .LVU285
 1113 04f0 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1114 04f4 20C09DE5 		ldr	ip, [sp, #32]	@ wave_stride, wave_stride
 1115 04f8 24609DE5 		ldr	r6, [sp, #36]	@ target_width, target_width
 1116 04fc 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1117              	.LVL56:
 1118              	@ armwave.c:138:     assert(start_point < end_point);
 138:armwave.c     **** 
 1119              		.loc 1 138 5 view .LVU286
 1120 0500 6900002A 		bcs	.L83		@,
 141:armwave.c     **** 
 1121              		.loc 1 141 5 is_stmt 1 view .LVU287
 1122              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 1123              		.loc 1 141 33 is_stmt 0 view .LVU288
 1124 0504 B8419FE5 		ldr	r4, .L88+4	@ tmp225,
 1125 0508 0170A0E1 		mov	r7, r1	@ start_point, start_point
 1126              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 144:armwave.c     **** 
 1127              		.loc 1 144 5 view .LVU289
 1128 050c 011C42E2 		sub	r1, r2, #256	@ tmp153, target_height,
 1129              	.LVL57:
 144:armwave.c     **** 
 1130              		.loc 1 144 5 view .LVU290
 1131 0510 011CD1E3 		bics	r1, r1, #256	@ tmp227, tmp153,
 1132              	@ armwave.c:141:     g_armwave_state.wave_buffer = wave_buffer;
 141:armwave.c     **** 
 1133              		.loc 1 141 33 view .LVU291
 1134 0514 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 144:armwave.c     **** 
 1135              		.loc 1 144 5 is_stmt 1 view .LVU292
 1136 0518 4900000A 		beq	.L69		@,
 1137              	@ armwave.c:144:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 144:armwave.c     **** 
 1138              		.loc 1 144 5 is_stmt 0 discriminator 1 view .LVU293
 1139 051c 011B42E2 		sub	r1, r2, #1024	@ tmp155, target_height,
 1140 0520 011BD1E3 		bics	r1, r1, #1024	@ tmp228, tmp155,
 1141 0524 5100001A 		bne	.L84		@,
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1142              		.loc 1 146 5 is_stmt 1 view .LVU294
 152:armwave.c     ****         g_armwave_state.row_shift = 10;
 1143              		.loc 1 152 12 view .LVU295
 1144              	@ armwave.c:152:     } else if(target_height == 1024) {
 152:armwave.c     ****         g_armwave_state.row_shift = 10;
 1145              		.loc 1 152 14 is_stmt 0 view .LVU296
 1146 0528 010B52E3 		cmp	r2, #1024	@ target_height,
 1147 052c 4B00000A 		beq	.L85		@,
 155:armwave.c     ****         g_armwave_state.row_shift = 11;
 1148              		.loc 1 155 12 is_stmt 1 view .LVU297
 1149              	@ armwave.c:155:     } else if(target_height == 2048) {
 155:armwave.c     ****         g_armwave_state.row_shift = 11;
 1150              		.loc 1 155 14 is_stmt 0 view .LVU298
 1151 0530 020B52E3 		cmp	r2, #2048	@ target_height,
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1152              		.loc 1 156 9 is_stmt 1 view .LVU299
 1153              	@ armwave.c:156:         g_armwave_state.row_shift = 11;
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1154              		.loc 1 156 35 is_stmt 0 view .LVU300
 1155 0534 0B00A003 		moveq	r0, #11	@ tmp175,
 1156              	.LVL58:
 156:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1157              		.loc 1 156 35 view .LVU301
 1158 0538 88119F05 		ldreq	r1, .L88+8	@ tmp173,
 1159 053c F404C401 		strdeq	r0, [r4, #68]	@, tmp225,
 157:armwave.c     ****     } 
 1160              		.loc 1 157 9 is_stmt 1 view .LVU302
 1161              	.L72:
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1162              		.loc 1 161 5 view .LVU303
 1163              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 1164              		.loc 1 165 42 is_stmt 0 view .LVU304
 1165 0540 960200E0 		mul	r0, r6, r2	@ tmp182, target_width, target_height
 1166              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 176:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1167              		.loc 1 176 23 view .LVU305
 1168 0544 041094E5 		ldr	r1, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1169              	@ armwave.c:164:     g_armwave_state.waves = waves;
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1170              		.loc 1 164 27 view .LVU306
 1171 0548 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1172              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1173              		.loc 1 162 44 view .LVU307
 1174 054c 2234A0E1 		lsr	r3, r2, #8	@ tmp178, target_height,
 1175              	.LVL59:
 1176              	@ armwave.c:161:     g_armwave_state.xstride = target_height;
 161:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1177              		.loc 1 161 29 view .LVU308
 1178 0550 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1179              		.loc 1 162 5 is_stmt 1 view .LVU309
 1180              	@ armwave.c:169:     g_armwave_state.target_height = target_height;
 169:armwave.c     **** 
 1181              		.loc 1 169 35 is_stmt 0 view .LVU310
 1182 0554 402084E5 		str	r2, [r4, #64]	@ target_height, g_armwave_state.target_height
 1183              	@ armwave.c:165:     g_armwave_state.size = target_height * target_width;
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 1184              		.loc 1 165 26 view .LVU311
 1185 0558 380084E5 		str	r0, [r4, #56]	@ tmp182, g_armwave_state.size
 1186              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1187              		.loc 1 166 37 view .LVU312
 1188 055c 012CA0E3 		mov	r2, #256	@ tmp184,
 1189              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1190              		.loc 1 167 68 view .LVU313
 1191 0560 0604A0E1 		lsl	r0, r6, #8	@ _9, target_width,
 1192              	@ armwave.c:162:     g_armwave_state.vscale = target_height / 256;
 162:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1193              		.loc 1 162 28 view .LVU314
 1194 0564 1C3084E5 		str	r3, [r4, #28]	@ tmp178, g_armwave_state.vscale
 163:armwave.c     ****     g_armwave_state.waves = waves;
 1195              		.loc 1 163 5 is_stmt 1 view .LVU315
 164:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1196              		.loc 1 164 5 view .LVU316
 165:armwave.c     ****     g_armwave_state.bitdepth_height = 256;
 1197              		.loc 1 165 5 view .LVU317
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1198              		.loc 1 166 5 view .LVU318
 1199              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 176:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1200              		.loc 1 176 7 is_stmt 0 view .LVU319
 1201 0568 000051E3 		cmp	r1, #0	@ _10,
 1202              	@ armwave.c:174:     g_armwave_state.slice_height = 64;  
 174:armwave.c     **** 
 1203              		.loc 1 174 34 view .LVU320
 1204 056c 4030A0E3 		mov	r3, #64	@ tmp189,
 1205              	@ armwave.c:163:     g_armwave_state.wave_stride = wave_stride;
 163:armwave.c     ****     g_armwave_state.waves = waves;
 1206              		.loc 1 163 33 view .LVU321
 1207 0570 20C084E5 		str	ip, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1208              	@ armwave.c:168:     g_armwave_state.target_width = target_width;
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 1209              		.loc 1 168 34 view .LVU322
 1210 0574 3C6084E5 		str	r6, [r4, #60]	@ target_width, g_armwave_state.target_width
 1211              	@ armwave.c:166:     g_armwave_state.bitdepth_height = 256;
 166:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1212              		.loc 1 166 37 view .LVU323
 1213 0578 282084E5 		str	r2, [r4, #40]	@ tmp184, g_armwave_state.bitdepth_height
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1214              		.loc 1 167 5 is_stmt 1 view .LVU324
 1215              	@ armwave.c:167:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.target_width = target_width;
 1216              		.loc 1 167 34 is_stmt 0 view .LVU325
 1217 057c 340084E5 		str	r0, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 168:armwave.c     ****     g_armwave_state.target_height = target_height;
 1218              		.loc 1 168 5 is_stmt 1 view .LVU326
 169:armwave.c     **** 
 1219              		.loc 1 169 5 view .LVU327
 174:armwave.c     **** 
 1220              		.loc 1 174 5 view .LVU328
 1221              	@ armwave.c:174:     g_armwave_state.slice_height = 64;  
 174:armwave.c     **** 
 1222              		.loc 1 174 34 is_stmt 0 view .LVU329
 1223 0580 2C3084E5 		str	r3, [r4, #44]	@ tmp189, g_armwave_state.slice_height
 176:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1224              		.loc 1 176 5 is_stmt 1 view .LVU330
 1225              	@ armwave.c:176:     if(g_armwave_state.ch1_buffer != NULL)
 176:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1226              		.loc 1 176 7 is_stmt 0 view .LVU331
 1227 0584 0200000A 		beq	.L74		@,
 177:armwave.c     **** 
 1228              		.loc 1 177 9 is_stmt 1 view .LVU332
 1229 0588 0100A0E1 		mov	r0, r1	@, _10
 1230 058c FEFFFFEB 		bl	free		@
 1231              	.LVL60:
 177:armwave.c     **** 
 1232              		.loc 1 177 9 is_stmt 0 view .LVU333
 1233 0590 340094E5 		ldr	r0, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 1234              	.L74:
 179:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1235              		.loc 1 179 5 is_stmt 1 view .LVU334
 1236              	@ armwave.c:179:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 179:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1237              		.loc 1 179 34 is_stmt 0 view .LVU335
 1238 0594 0110A0E3 		mov	r1, #1	@,
 1239 0598 FEFFFFEB 		bl	calloc		@
 1240              	.LVL61:
 1241              	@ armwave.c:180:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 180:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1242              		.loc 1 180 33 view .LVU336
 1243 059c 28219FE5 		ldr	r2, .L88+12	@ tmp195,
 1244              	@ armwave.c:182:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182:armwave.c     **** 
 1245              		.loc 1 182 33 view .LVU337
 1246 05a0 FA30A0E3 		mov	r3, #250	@ tmp198,
 1247              	@ armwave.c:180:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 180:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1248              		.loc 1 180 33 view .LVU338
 1249 05a4 502084E5 		str	r2, [r4, #80]	@ tmp195, MEM[(short int *)&g_armwave_state + 80B]
 1250              	@ armwave.c:182:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182:armwave.c     **** 
 1251              		.loc 1 182 33 view .LVU339
 1252 05a8 B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp198, g_armwave_state.ch1_color.b
 1253              	@ armwave.c:184:     assert(g_armwave_state.ch1_buffer != NULL);
 184:armwave.c     **** 
 1254              		.loc 1 184 5 view .LVU340
 1255 05ac 000050E3 		cmp	r0, #0	@ tmp192,
 1256              	@ armwave.c:179:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 179:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1257              		.loc 1 179 32 view .LVU341
 1258 05b0 040084E5 		str	r0, [r4, #4]	@ tmp192, g_armwave_state.ch1_buffer
 180:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1259              		.loc 1 180 5 is_stmt 1 view .LVU342
 181:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1260              		.loc 1 181 5 view .LVU343
 182:armwave.c     **** 
 1261              		.loc 1 182 5 view .LVU344
 184:armwave.c     **** 
 1262              		.loc 1 184 5 view .LVU345
 1263 05b4 3200000A 		beq	.L86		@,
 187:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1264              		.loc 1 187 5 view .LVU346
 1265              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1266              		.loc 1 188 34 is_stmt 0 view .LVU347
 1267 05b8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1268              	@ armwave.c:187:     length = end_point - start_point;
 187:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1269              		.loc 1 187 12 view .LVU348
 1270 05bc 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1271              	.LVL62:
 188:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1272              		.loc 1 188 5 is_stmt 1 view .LVU349
 1273              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 190:armwave.c     **** 
 1274              		.loc 1 190 40 is_stmt 0 view .LVU350
 1275 05c0 8500A0E1 		lsl	r0, r5, #1	@, length,
 1276              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1277              		.loc 1 188 34 view .LVU351
 1278 05c4 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp203, target_width
 1279              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1280              		.loc 1 188 31 view .LVU352
 1281 05c8 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1282 05cc 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp202, length
 1283              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1284              		.loc 1 189 60 view .LVU353
 1285 05d0 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp231, g_armwave_state.slice_height
 1286 05d4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp206, tmp231
 1287              	@ armwave.c:188:     points_per_pixel = length / ((float)(target_width));
 188:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1288              		.loc 1 188 22 view .LVU354
 1289 05d8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp202, tmp203
 1290              	.LVL63:
 189:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1291              		.loc 1 189 5 is_stmt 1 view .LVU355
 1292              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1293              		.loc 1 189 60 is_stmt 0 view .LVU356
 1294 05dc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp208, tmp206, points_per_pixel
 1295              	@ armwave.c:189:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 189:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1296              		.loc 1 189 41 view .LVU357
 1297 05e0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp209, tmp208
 1298 05e4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp209, g_armwave_state.slice_record_height
 190:armwave.c     **** 
 1299              		.loc 1 190 5 is_stmt 1 view .LVU358
 1300              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 190:armwave.c     **** 
 1301              		.loc 1 190 40 is_stmt 0 view .LVU359
 1302 05e8 FEFFFFEB 		bl	malloc		@
 1303              	.LVL64:
 1304              	@ armwave.c:192:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 192:armwave.c     **** 
 1305              		.loc 1 192 5 view .LVU360
 1306 05ec 000050E3 		cmp	r0, #0	@ tmp211,
 1307              	@ armwave.c:190:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 190:armwave.c     **** 
 1308              		.loc 1 190 38 view .LVU361
 1309 05f0 680084E5 		str	r0, [r4, #104]	@ tmp211, g_armwave_state.xcoord_to_xpixel
 192:armwave.c     **** 
 1310              		.loc 1 192 5 is_stmt 1 view .LVU362
 1311 05f4 2700000A 		beq	.L87		@,
 1312              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 1313              		.loc 1 195 54 is_stmt 0 view .LVU363
 1314 05f8 307ADFED 		vldr.32	s15, .L88	@ tmp216,
 1315 05fc 020040E2 		sub	r0, r0, #2	@ ivtmp.73, tmp211,
 1316              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1317              		.loc 1 194 12 view .LVU364
 1318 0600 0030A0E3 		mov	r3, #0	@ xx,
 1319              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 1320              		.loc 1 195 54 view .LVU365
 1321 0604 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp216, points_per_pixel
 1322              	.L77:
 1323              	.LVL65:
 195:armwave.c     **** 
 1324              		.loc 1 195 9 is_stmt 1 discriminator 3 view .LVU366
 1325              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 1326              		.loc 1 195 74 is_stmt 0 discriminator 3 view .LVU367
 1327 0608 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1328              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1329              		.loc 1 194 32 discriminator 3 view .LVU368
 1330 060c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1331              	.LVL66:
 1332              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1333              		.loc 1 194 5 discriminator 3 view .LVU369
 1334 0610 030055E1 		cmp	r5, r3	@ length, xx
 1335              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 1336              		.loc 1 195 74 discriminator 3 view .LVU370
 1337 0614 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp217, xx
 1338 0618 877A67EE 		vmul.f32	s15, s15, s14	@ tmp218, tmp217, _21
 1339              	@ armwave.c:195:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 195:armwave.c     **** 
 1340              		.loc 1 195 46 discriminator 3 view .LVU371
 1341 061c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp219, tmp218
 1342 0620 902A17EE 		vmov	r2, s15	@ int	@ tmp219, tmp219
 1343 0624 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp219, MEM[base: _6, offset: 0B]
 1344              	@ armwave.c:194:     for(xx = 0; xx < length; xx++) {
 194:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1345              		.loc 1 194 5 discriminator 3 view .LVU372
 1346 0628 F6FFFF1A 		bne	.L77		@,
 200:armwave.c     **** }
 1347              		.loc 1 200 5 is_stmt 1 view .LVU373
 1348              	@ armwave.c:200:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 200:armwave.c     **** }
 1349              		.loc 1 200 34 is_stmt 0 view .LVU374
 1350 062c 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 1351 0630 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1352 0634 FEFFFFEB 		bl	malloc		@
 1353              	.LVL67:
 1354              	@ armwave.c:201: }
 1355              		.loc 1 201 1 view .LVU375
 1356 0638 028BBDEC 		vldm	sp!, {d8}	@
 1357              		.cfi_remember_state
 1358              		.cfi_restore 80
 1359              		.cfi_restore 81
 1360              		.cfi_def_cfa_offset 24
 1361              	.LVL68:
 1362              	@ armwave.c:200:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 200:armwave.c     **** }
 1363              		.loc 1 200 32 view .LVU376
 1364 063c 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 1365              	@ armwave.c:201: }
 1366              		.loc 1 201 1 view .LVU377
 1367 0640 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1368              	.LVL69:
 1369              	.L69:
 1370              		.cfi_restore_state
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1371              		.loc 1 146 5 is_stmt 1 view .LVU378
 1372              	@ armwave.c:146:     if(target_height == 256) {
 146:armwave.c     ****         g_armwave_state.row_shift = 8;
 1373              		.loc 1 146 7 is_stmt 0 view .LVU379
 1374 0644 010C52E3 		cmp	r2, #256	@ target_height,
 147:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1375              		.loc 1 147 9 is_stmt 1 view .LVU380
 1376              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 1377              		.loc 1 148 34 is_stmt 0 view .LVU381
 1378 0648 0800A003 		moveq	r0, #8	@ tmp161,
 1379              	.LVL70:
 1380              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1381              		.loc 1 150 35 view .LVU382
 1382 064c 7C109F15 		ldrne	r1, .L88+16	@ tmp165,
 1383              	@ armwave.c:148:         g_armwave_state.row_mask = 0x0ff;
 148:armwave.c     ****     } else if(target_height == 512) {
 1384              		.loc 1 148 34 view .LVU383
 1385 0650 FF10A003 		moveq	r1, #255	@ tmp163,
 149:armwave.c     ****         g_armwave_state.row_shift = 9;
 1386              		.loc 1 149 12 is_stmt 1 view .LVU384
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1387              		.loc 1 150 9 view .LVU385
 1388              	@ armwave.c:150:         g_armwave_state.row_shift = 9;
 150:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1389              		.loc 1 150 35 is_stmt 0 view .LVU386
 1390 0654 0900A013 		movne	r0, #9	@ tmp167,
 1391 0658 F404C4E1 		strd	r0, [r4, #68]	@, tmp225,
 151:armwave.c     ****     } else if(target_height == 1024) {
 1392              		.loc 1 151 9 is_stmt 1 view .LVU387
 1393 065c B7FFFFEA 		b	.L72		@
 1394              	.LVL71:
 1395              	.L85:
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1396              		.loc 1 153 9 view .LVU388
 1397              	@ armwave.c:153:         g_armwave_state.row_shift = 10;
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1398              		.loc 1 153 35 is_stmt 0 view .LVU389
 1399 0660 6C109FE5 		ldr	r1, .L88+20	@ tmp169,
 1400 0664 0A00A0E3 		mov	r0, #10	@ tmp171,
 1401              	.LVL72:
 153:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1402              		.loc 1 153 35 view .LVU390
 1403 0668 F404C4E1 		strd	r0, [r4, #68]	@, tmp225,
 154:armwave.c     ****     } else if(target_height == 2048) {
 1404              		.loc 1 154 9 is_stmt 1 view .LVU391
 1405 066c B3FFFFEA 		b	.L72		@
 1406              	.LVL73:
 1407              	.L84:
 144:armwave.c     **** 
 1408              		.loc 1 144 5 discriminator 2 view .LVU392
 1409 0670 60309FE5 		ldr	r3, .L88+24	@,
 1410              	.LVL74:
 144:armwave.c     **** 
 1411              		.loc 1 144 5 is_stmt 0 discriminator 2 view .LVU393
 1412 0674 9020A0E3 		mov	r2, #144	@,
 1413 0678 5C109FE5 		ldr	r1, .L88+28	@,
 1414 067c 5C009FE5 		ldr	r0, .L88+32	@,
 1415              	.LVL75:
 144:armwave.c     **** 
 1416              		.loc 1 144 5 discriminator 2 view .LVU394
 1417 0680 FEFFFFEB 		bl	__assert_fail		@
 1418              	.LVL76:
 1419              	.L86:
 184:armwave.c     **** 
 1420              		.loc 1 184 5 is_stmt 1 discriminator 1 view .LVU395
 1421 0684 4C309FE5 		ldr	r3, .L88+24	@,
 1422 0688 B820A0E3 		mov	r2, #184	@,
 1423 068c 48109FE5 		ldr	r1, .L88+28	@,
 1424 0690 4C009FE5 		ldr	r0, .L88+36	@,
 1425 0694 FEFFFFEB 		bl	__assert_fail		@
 1426              	.LVL77:
 1427              	.L87:
 192:armwave.c     **** 
 1428              		.loc 1 192 5 discriminator 1 view .LVU396
 1429 0698 38309FE5 		ldr	r3, .L88+24	@,
 1430 069c C020A0E3 		mov	r2, #192	@,
 1431 06a0 34109FE5 		ldr	r1, .L88+28	@,
 1432 06a4 3C009FE5 		ldr	r0, .L88+40	@,
 1433 06a8 FEFFFFEB 		bl	__assert_fail		@
 1434              	.LVL78:
 1435              	.L83:
 138:armwave.c     **** 
 1436              		.loc 1 138 5 discriminator 1 view .LVU397
 1437 06ac 24309FE5 		ldr	r3, .L88+24	@,
 1438              	.LVL79:
 138:armwave.c     **** 
 1439              		.loc 1 138 5 is_stmt 0 discriminator 1 view .LVU398
 1440 06b0 8A20A0E3 		mov	r2, #138	@,
 1441 06b4 20109FE5 		ldr	r1, .L88+28	@,
 1442              	.LVL80:
 138:armwave.c     **** 
 1443              		.loc 1 138 5 discriminator 1 view .LVU399
 1444 06b8 2C009FE5 		ldr	r0, .L88+44	@,
 1445              	.LVL81:
 138:armwave.c     **** 
 1446              		.loc 1 138 5 discriminator 1 view .LVU400
 1447 06bc FEFFFFEB 		bl	__assert_fail		@
 1448              	.LVL82:
 1449              	.L89:
 1450              		.align	2
 1451              	.L88:
 1452 06c0 0000803F 		.word	1065353216
 1453 06c4 00000000 		.word	g_armwave_state
 1454 06c8 FF070000 		.word	2047
 1455 06cc F609F406 		.word	116656630
 1456 06d0 FF010000 		.word	511
 1457 06d4 FF030000 		.word	1023
 1458 06d8 00000000 		.word	.LANCHOR0
 1459 06dc 00000000 		.word	.LC0
 1460 06e0 0C000000 		.word	.LC1
 1461 06e4 6C000000 		.word	.LC2
 1462 06e8 90000000 		.word	.LC3
 1463 06ec BC000000 		.word	.LC4
 1464              		.cfi_endproc
 1465              	.LFE61:
 1467              		.align	2
 1468              		.global	armwave_clear_buffer
 1469              		.syntax unified
 1470              		.arm
 1471              		.fpu vfp
 1473              	armwave_clear_buffer:
 1474              	.LVL83:
 1475              	.LFB62:
 202:armwave.c     **** 
 203:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 204:armwave.c     **** {
 1476              		.loc 1 204 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
 1480              		@ link register save eliminated.
 205:armwave.c     ****     // Flags ignored, only one buffer cleared
 206:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1481              		.loc 1 206 5 view .LVU402
 1482 06f0 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1483 06f4 0010A0E3 		mov	r1, #0	@,
 1484 06f8 382093E5 		ldr	r2, [r3, #56]	@, g_armwave_state.size
 1485 06fc 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1486              	.LVL84:
 1487              		.loc 1 206 5 is_stmt 0 view .LVU403
 1488 0700 FEFFFFEA 		b	memset		@
 1489              	.LVL85:
 1490              	.L92:
 1491              		.align	2
 1492              	.L91:
 1493 0704 00000000 		.word	g_armwave_state
 1494              		.cfi_endproc
 1495              	.LFE62:
 1497              		.align	2
 1498              		.global	armwave_fill_pixbuf_256
 1499              		.syntax unified
 1500              		.arm
 1501              		.fpu vfp
 1503              	armwave_fill_pixbuf_256:
 1504              	.LVL86:
 1505              	.LFB63:
 207:armwave.c     **** }
 208:armwave.c     **** 
 209:armwave.c     **** /*
 210:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 211:armwave.c     ****  */
 212:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 213:armwave.c     **** {
 1506              		.loc 1 213 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 8
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 214:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1510              		.loc 1 214 5 view .LVU405
 215:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1511              		.loc 1 215 5 view .LVU406
 216:armwave.c     ****     uint8_t r, g, b, value;
 1512              		.loc 1 216 5 view .LVU407
 217:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1513              		.loc 1 217 5 view .LVU408
 1514              	@ armwave.c:213: {
 213:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1515              		.loc 1 213 1 is_stmt 0 view .LVU409
 1516 0708 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1517              		.cfi_def_cfa_offset 36
 1518              		.cfi_offset 4, -36
 1519              		.cfi_offset 5, -32
 1520              		.cfi_offset 6, -28
 1521              		.cfi_offset 7, -24
 1522              		.cfi_offset 8, -20
 1523              		.cfi_offset 9, -16
 1524              		.cfi_offset 10, -12
 1525              		.cfi_offset 11, -8
 1526              		.cfi_offset 14, -4
 1527              	@ armwave.c:221:     assert(out_buffer != NULL);
 218:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 219:armwave.c     ****     uint32_t offset;
 220:armwave.c     **** 
 221:armwave.c     ****     assert(out_buffer != NULL);
 1528              		.loc 1 221 5 view .LVU410
 1529 070c 000050E3 		cmp	r0, #0	@ out_buffer
 1530              	@ armwave.c:217:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 217:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1531              		.loc 1 217 15 view .LVU411
 1532 0710 44529FE5 		ldr	r5, .L120	@ tmp361,
 1533              	@ armwave.c:213: {
 213:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1534              		.loc 1 213 1 view .LVU412
 1535 0714 0CD04DE2 		sub	sp, sp, #12	@,,
 1536              		.cfi_def_cfa_offset 48
 1537              	@ armwave.c:217:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 217:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1538              		.loc 1 217 15 view .LVU413
 1539 0718 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1540              	.LVL87:
 218:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1541              		.loc 1 218 5 is_stmt 1 view .LVU414
 219:armwave.c     **** 
 1542              		.loc 1 219 5 view .LVU415
 1543              		.loc 1 221 5 view .LVU416
 1544 071c 8900000A 		beq	.L118		@,
 222:armwave.c     **** 
 223:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 224:armwave.c     **** 
 225:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1545              		.loc 1 225 5 view .LVU417
 1546              	@ armwave.c:225:     npix = g_armwave_state.target_width * 256;
 1547              		.loc 1 225 41 is_stmt 0 view .LVU418
 1548 0720 3CC095E5 		ldr	ip, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1549 0724 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1550              	.LVL88:
 226:armwave.c     **** 
 227:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1551              		.loc 1 227 5 is_stmt 1 view .LVU419
 1552              		.loc 1 227 5 is_stmt 0 view .LVU420
 1553 0728 00005CE3 		cmp	ip, #0	@ npix,
 1554 072c 0A0000DA 		ble	.L93		@,
 1555              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 228:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 229:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 230:armwave.c     ****         // most normal waveforms.
 231:armwave.c     ****         wave_word = *base_32ptr++;
 232:armwave.c     **** 
 233:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 234:armwave.c     ****             for(i = 0; i < 4; i++) {
 235:armwave.c     ****                 value = wave_word & 0xff;
 236:armwave.c     ****                 wave_word >>= 8;
 237:armwave.c     **** 
 238:armwave.c     ****                 if(value != 0) {
 239:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1556              		.loc 1 239 52 view .LVU421
 1557 0730 F0A5D5E1 		ldrsh	r10, [r5, #80]	@ _70, g_armwave_state.ch1_color.r
 1558              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1559              		.loc 1 240 52 view .LVU422
 1560 0734 F295D5E1 		ldrsh	r9, [r5, #82]	@ _76, g_armwave_state.ch1_color.g
 1561              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1562              		.loc 1 241 52 view .LVU423
 1563 0738 F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _80, g_armwave_state.ch1_color.b
 1564              	@ armwave.c:227:     for(n = 0; n < npix; n += 4) {
 227:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1565              		.loc 1 227 11 view .LVU424
 1566 073c 0030A0E3 		mov	r3, #0	@ n,
 1567 0740 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1568              	.LVL89:
 1569              	.L102:
 231:armwave.c     **** 
 1570              		.loc 1 231 9 is_stmt 1 view .LVU425
 1571              	@ armwave.c:231:         wave_word = *base_32ptr++;
 231:armwave.c     **** 
 1572              		.loc 1 231 19 is_stmt 0 view .LVU426
 1573 0744 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1574              	.LVL90:
 233:armwave.c     ****             for(i = 0; i < 4; i++) {
 1575              		.loc 1 233 9 is_stmt 1 view .LVU427
 1576              	@ armwave.c:233:         if(COND_UNLIKELY(wave_word != 0)) {
 233:armwave.c     ****             for(i = 0; i < 4; i++) {
 1577              		.loc 1 233 11 is_stmt 0 view .LVU428
 1578 0748 000052E3 		cmp	r2, #0	@ wave_word,
 1579 074c 0400001A 		bne	.L119		@,
 1580              	.LVL91:
 1581              	.L97:
 1582              	@ armwave.c:227:     for(n = 0; n < npix; n += 4) {
 227:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1583              		.loc 1 227 28 discriminator 2 view .LVU429
 1584 0750 043083E2 		add	r3, r3, #4	@ n, n,
 1585              	.LVL92:
 1586              	@ armwave.c:227:     for(n = 0; n < npix; n += 4) {
 227:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1587              		.loc 1 227 5 discriminator 2 view .LVU430
 1588 0754 03005CE1 		cmp	ip, r3	@ npix, n
 1589 0758 F9FFFFCA 		bgt	.L102		@,
 1590              	.LVL93:
 1591              	.L93:
 1592              	@ armwave.c:260: }
 242:armwave.c     **** 
 243:armwave.c     ****                     r = MIN(rr, 255);
 244:armwave.c     ****                     g = MIN(gg, 255);
 245:armwave.c     ****                     b = MIN(bb, 255);
 246:armwave.c     **** 
 247:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 248:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 249:armwave.c     **** 
 250:armwave.c     ****                     // Is there a better way?
 251:armwave.c     ****                     nsub = n + i;
 252:armwave.c     ****                     xx = nsub & 0xff;
 253:armwave.c     ****                     yy = nsub >> 8;
 254:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 255:armwave.c     ****                     *(out_buffer_base + offset) = word;
 256:armwave.c     ****                 }
 257:armwave.c     ****             }
 258:armwave.c     ****         } 
 259:armwave.c     ****     }
 260:armwave.c     **** }
 1593              		.loc 1 260 1 view .LVU431
 1594 075c 0CD08DE2 		add	sp, sp, #12	@,,
 1595              		.cfi_remember_state
 1596              		.cfi_def_cfa_offset 36
 1597              		@ sp needed	@
 1598 0760 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1599              	.LVL94:
 1600              	.L119:
 1601              		.cfi_restore_state
 235:armwave.c     ****                 wave_word >>= 8;
 1602              		.loc 1 235 17 is_stmt 1 view .LVU432
 236:armwave.c     **** 
 1603              		.loc 1 236 17 view .LVU433
 1604              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1605              		.loc 1 238 19 is_stmt 0 view .LVU434
 1606 0764 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1607              	@ armwave.c:236:                 wave_word >>= 8;
 236:armwave.c     **** 
 1608              		.loc 1 236 27 view .LVU435
 1609 0768 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1610              	.LVL95:
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1611              		.loc 1 238 17 is_stmt 1 view .LVU436
 1612              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1613              		.loc 1 238 19 is_stmt 0 view .LVU437
 1614 076c 1900000A 		beq	.L98		@,
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1615              		.loc 1 239 21 is_stmt 1 view .LVU438
 1616              	.LVL96:
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1617              		.loc 1 240 21 view .LVU439
 241:armwave.c     **** 
 1618              		.loc 1 241 21 view .LVU440
 243:armwave.c     ****                     g = MIN(gg, 255);
 1619              		.loc 1 243 21 view .LVU441
 244:armwave.c     ****                     b = MIN(bb, 255);
 1620              		.loc 1 244 21 view .LVU442
 245:armwave.c     **** 
 1621              		.loc 1 245 21 view .LVU443
 248:armwave.c     **** 
 1622              		.loc 1 248 21 view .LVU444
 251:armwave.c     ****                     xx = nsub & 0xff;
 1623              		.loc 1 251 21 view .LVU445
 252:armwave.c     ****                     yy = nsub >> 8;
 1624              		.loc 1 252 21 view .LVU446
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1625              		.loc 1 253 21 view .LVU447
 254:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1626              		.loc 1 254 21 view .LVU448
 255:armwave.c     ****                 }
 1627              		.loc 1 255 21 view .LVU449
 1628              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1629              		.loc 1 241 55 is_stmt 0 view .LVU450
 1630 0770 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1631              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1632              		.loc 1 240 55 view .LVU451
 1633 0774 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1634              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1635              		.loc 1 241 24 view .LVU452
 1636 0778 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1637              	.LVL97:
 1638              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1639              		.loc 1 245 25 view .LVU453
 1640 077c FF0054E3 		cmp	r4, #255	@ bb,
 1641              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1642              		.loc 1 240 24 view .LVU454
 1643 0780 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1644              	.LVL98:
 1645              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1646              		.loc 1 245 25 view .LVU455
 1647 0784 FF40A0A3 		movge	r4, #255	@ bb,
 1648              	.LVL99:
 1649              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1650              		.loc 1 239 55 view .LVU456
 1651 0788 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1652              	.LVL100:
 1653              	@ armwave.c:244:                     g = MIN(gg, 255);
 244:armwave.c     ****                     b = MIN(bb, 255);
 1654              		.loc 1 244 25 view .LVU457
 1655 078c FF0058E3 		cmp	r8, #255	@ gg,
 1656 0790 FF80A0A3 		movge	r8, #255	@ gg,
 1657              	.LVL101:
 1658              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1659              		.loc 1 239 24 view .LVU458
 1660 0794 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1661              	.LVL102:
 1662              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1663              		.loc 1 248 56 view .LVU459
 1664 0798 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1665              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1666              		.loc 1 255 39 view .LVU460
 1667 079c 3C0095E5 		ldr	r0, [r5, #60]	@ tmp373, g_armwave_state.target_width
 1668              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1669              		.loc 1 248 44 view .LVU461
 1670 07a0 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1671              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1672              		.loc 1 243 25 view .LVU462
 1673 07a4 FF0056E3 		cmp	r6, #255	@ rr,
 1674              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1675              		.loc 1 248 56 view .LVU463
 1676 07a8 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1677              	@ armwave.c:252:                     xx = nsub & 0xff;
 252:armwave.c     ****                     yy = nsub >> 8;
 1678              		.loc 1 252 24 view .LVU464
 1679 07ac 7370EFE6 		uxtb	r7, r3	@ xx, n
 1680              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1681              		.loc 1 248 44 view .LVU465
 1682 07b0 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1683              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1684              		.loc 1 248 51 view .LVU466
 1685 07b4 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1686              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1687              		.loc 1 243 25 view .LVU467
 1688 07b8 FF60A0A3 		movge	r6, #255	@ rr,
 1689              	.LVL103:
 1690              	@ armwave.c:253:                     yy = nsub >> 8;
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1691              		.loc 1 253 31 view .LVU468
 1692 07bc 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1693              	.LVL104:
 1694              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1695              		.loc 1 255 39 view .LVU469
 1696 07c0 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1697              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1698              		.loc 1 248 62 view .LVU470
 1699 07c4 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1700              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1701              		.loc 1 255 49 view .LVU471
 1702 07c8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1703              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1704              		.loc 1 248 62 view .LVU472
 1705 07cc 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1706              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1707              		.loc 1 248 26 view .LVU473
 1708 07d0 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1709              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1710              		.loc 1 255 49 view .LVU474
 1711 07d4 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1712              	.LVL105:
 1713              	.L98:
 235:armwave.c     ****                 wave_word >>= 8;
 1714              		.loc 1 235 17 is_stmt 1 view .LVU475
 236:armwave.c     **** 
 1715              		.loc 1 236 17 view .LVU476
 1716              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1717              		.loc 1 238 19 is_stmt 0 view .LVU477
 1718 07d8 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1719              	.LVL106:
 1720              	@ armwave.c:236:                 wave_word >>= 8;
 236:armwave.c     **** 
 1721              		.loc 1 236 27 view .LVU478
 1722 07dc 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1723              	.LVL107:
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1724              		.loc 1 238 17 is_stmt 1 view .LVU479
 1725              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1726              		.loc 1 238 19 is_stmt 0 view .LVU480
 1727 07e0 1C00000A 		beq	.L99		@,
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1728              		.loc 1 239 21 is_stmt 1 view .LVU481
 1729              	.LVL108:
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1730              		.loc 1 240 21 view .LVU482
 241:armwave.c     **** 
 1731              		.loc 1 241 21 view .LVU483
 243:armwave.c     ****                     g = MIN(gg, 255);
 1732              		.loc 1 243 21 view .LVU484
 244:armwave.c     ****                     b = MIN(bb, 255);
 1733              		.loc 1 244 21 view .LVU485
 245:armwave.c     **** 
 1734              		.loc 1 245 21 view .LVU486
 248:armwave.c     **** 
 1735              		.loc 1 248 21 view .LVU487
 251:armwave.c     ****                     xx = nsub & 0xff;
 1736              		.loc 1 251 21 view .LVU488
 1737              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1738              		.loc 1 241 55 is_stmt 0 view .LVU489
 1739 07e4 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1740              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1741              		.loc 1 240 55 view .LVU490
 1742 07e8 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1743              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1744              		.loc 1 241 24 view .LVU491
 1745 07ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1746              	.LVL109:
 1747              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1748              		.loc 1 245 25 view .LVU492
 1749 07f0 FF0054E3 		cmp	r4, #255	@ bb,
 1750 07f4 FF40A0A3 		movge	r4, #255	@ bb,
 1751              	.LVL110:
 1752              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1753              		.loc 1 239 55 view .LVU493
 1754 07f8 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1755              	.LVL111:
 1756              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1757              		.loc 1 240 24 view .LVU494
 1758 07fc 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1759              	.LVL112:
 1760              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1761              		.loc 1 248 44 view .LVU495
 1762 0800 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1763              	@ armwave.c:244:                     g = MIN(gg, 255);
 244:armwave.c     ****                     b = MIN(bb, 255);
 1764              		.loc 1 244 25 view .LVU496
 1765 0804 FF0057E3 		cmp	r7, #255	@ gg,
 1766 0808 016083E2 		add	r6, r3, #1	@ _158, n,
 252:armwave.c     ****                     yy = nsub >> 8;
 1767              		.loc 1 252 21 is_stmt 1 view .LVU497
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1768              		.loc 1 253 21 view .LVU498
 254:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1769              		.loc 1 254 21 view .LVU499
 255:armwave.c     ****                 }
 1770              		.loc 1 255 21 view .LVU500
 1771              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1772              		.loc 1 248 44 is_stmt 0 view .LVU501
 1773 080c FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1774              	@ armwave.c:244:                     g = MIN(gg, 255);
 244:armwave.c     ****                     b = MIN(bb, 255);
 1775              		.loc 1 244 25 view .LVU502
 1776 0810 FF70A0A3 		movge	r7, #255	@ gg,
 1777              	.LVL113:
 1778              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1779              		.loc 1 248 44 view .LVU503
 1780 0814 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1781              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1782              		.loc 1 255 39 view .LVU504
 1783 0818 3C4095E5 		ldr	r4, [r5, #60]	@ tmp376, g_armwave_state.target_width
 1784              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1785              		.loc 1 239 24 view .LVU505
 1786 081c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1787              	.LVL114:
 1788              	@ armwave.c:252:                     xx = nsub & 0xff;
 252:armwave.c     ****                     yy = nsub >> 8;
 1789              		.loc 1 252 24 view .LVU506
 1790 0820 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1791              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1792              		.loc 1 243 25 view .LVU507
 1793 0824 FF005EE3 		cmp	lr, #255	@ rr,
 1794              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1795              		.loc 1 248 56 view .LVU508
 1796 0828 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1797              	@ armwave.c:253:                     yy = nsub >> 8;
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1798              		.loc 1 253 31 view .LVU509
 1799 082c 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1800              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1801              		.loc 1 255 39 view .LVU510
 1802 0830 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1803              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1804              		.loc 1 243 25 view .LVU511
 1805 0834 FFE0A0A3 		movge	lr, #255	@ rr,
 1806              	.LVL115:
 1807              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1808              		.loc 1 248 51 view .LVU512
 1809 0838 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1810              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1811              		.loc 1 248 56 view .LVU513
 1812 083c 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1813              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1814              		.loc 1 248 51 view .LVU514
 1815 0840 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1816              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1817              		.loc 1 248 62 view .LVU515
 1818 0844 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1819              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1820              		.loc 1 255 49 view .LVU516
 1821 0848 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1822              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1823              		.loc 1 248 62 view .LVU517
 1824 084c 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1825              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1826              		.loc 1 248 26 view .LVU518
 1827 0850 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1828              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1829              		.loc 1 255 49 view .LVU519
 1830 0854 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1831              	.LVL116:
 1832              	.L99:
 235:armwave.c     ****                 wave_word >>= 8;
 1833              		.loc 1 235 17 is_stmt 1 view .LVU520
 236:armwave.c     **** 
 1834              		.loc 1 236 17 view .LVU521
 1835              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1836              		.loc 1 238 19 is_stmt 0 view .LVU522
 1837 0858 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1838              	@ armwave.c:236:                 wave_word >>= 8;
 236:armwave.c     **** 
 1839              		.loc 1 236 27 view .LVU523
 1840 085c 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1841              	.LVL117:
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1842              		.loc 1 238 17 is_stmt 1 view .LVU524
 1843              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1844              		.loc 1 238 19 is_stmt 0 view .LVU525
 1845 0860 1A00000A 		beq	.L100		@,
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1846              		.loc 1 239 21 is_stmt 1 view .LVU526
 1847              	.LVL118:
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1848              		.loc 1 240 21 view .LVU527
 241:armwave.c     **** 
 1849              		.loc 1 241 21 view .LVU528
 243:armwave.c     ****                     g = MIN(gg, 255);
 1850              		.loc 1 243 21 view .LVU529
 244:armwave.c     ****                     b = MIN(bb, 255);
 1851              		.loc 1 244 21 view .LVU530
 245:armwave.c     **** 
 1852              		.loc 1 245 21 view .LVU531
 248:armwave.c     **** 
 1853              		.loc 1 248 21 view .LVU532
 251:armwave.c     ****                     xx = nsub & 0xff;
 1854              		.loc 1 251 21 view .LVU533
 1855              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1856              		.loc 1 241 55 is_stmt 0 view .LVU534
 1857 0864 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1858              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1859              		.loc 1 240 55 view .LVU535
 1860 0868 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1861              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1862              		.loc 1 241 24 view .LVU536
 1863 086c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1864              	.LVL119:
 1865              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1866              		.loc 1 239 55 view .LVU537
 1867 0870 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1868              	.LVL120:
 1869              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1870              		.loc 1 245 25 view .LVU538
 1871 0874 FF0054E3 		cmp	r4, #255	@ bb,
 1872              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1873              		.loc 1 240 24 view .LVU539
 1874 0878 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1875              	.LVL121:
 1876              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1877              		.loc 1 245 25 view .LVU540
 1878 087c FF40A0A3 		movge	r4, #255	@ bb,
 1879              	.LVL122:
 1880              	@ armwave.c:244:                     g = MIN(gg, 255);
 244:armwave.c     ****                     b = MIN(bb, 255);
 1881              		.loc 1 244 25 view .LVU541
 1882 0880 FF0056E3 		cmp	r6, #255	@ gg,
 1883 0884 FF60A0A3 		movge	r6, #255	@ gg,
 1884              	.LVL123:
 244:armwave.c     ****                     b = MIN(bb, 255);
 1885              		.loc 1 244 25 view .LVU542
 1886 0888 027083E2 		add	r7, r3, #2	@ _66, n,
 252:armwave.c     ****                     yy = nsub >> 8;
 1887              		.loc 1 252 21 is_stmt 1 view .LVU543
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1888              		.loc 1 253 21 view .LVU544
 254:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1889              		.loc 1 254 21 view .LVU545
 255:armwave.c     ****                 }
 1890              		.loc 1 255 21 view .LVU546
 1891              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1892              		.loc 1 239 24 is_stmt 0 view .LVU547
 1893 088c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1894              	.LVL124:
 1895              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1896              		.loc 1 255 39 view .LVU548
 1897 0890 3C0095E5 		ldr	r0, [r5, #60]	@ tmp377, g_armwave_state.target_width
 1898              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1899              		.loc 1 243 25 view .LVU549
 1900 0894 FF005EE3 		cmp	lr, #255	@ rr,
 1901              	@ armwave.c:252:                     xx = nsub & 0xff;
 252:armwave.c     ****                     yy = nsub >> 8;
 1902              		.loc 1 252 24 view .LVU550
 1903 0898 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1904              	.LVL125:
 1905              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1906              		.loc 1 248 56 view .LVU551
 1907 089c 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1908              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1909              		.loc 1 248 44 view .LVU552
 1910 08a0 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1911              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 1912              		.loc 1 243 25 view .LVU553
 1913 08a4 FFE0A0A3 		movge	lr, #255	@ rr,
 1914              	.LVL126:
 1915              	@ armwave.c:253:                     yy = nsub >> 8;
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1916              		.loc 1 253 31 view .LVU554
 1917 08a8 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1918              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1919              		.loc 1 255 39 view .LVU555
 1920 08ac 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1921              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1922              		.loc 1 248 44 view .LVU556
 1923 08b0 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1924              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1925              		.loc 1 248 56 view .LVU557
 1926 08b4 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1927              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1928              		.loc 1 248 51 view .LVU558
 1929 08b8 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1930              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1931              		.loc 1 248 62 view .LVU559
 1932 08bc 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1933              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1934              		.loc 1 255 49 view .LVU560
 1935 08c0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1936              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1937              		.loc 1 248 62 view .LVU561
 1938 08c4 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1939              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 1940              		.loc 1 248 26 view .LVU562
 1941 08c8 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1942              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 1943              		.loc 1 255 49 view .LVU563
 1944 08cc 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1945              	.L100:
 1946              	.LVL127:
 235:armwave.c     ****                 wave_word >>= 8;
 1947              		.loc 1 235 17 is_stmt 1 view .LVU564
 236:armwave.c     **** 
 1948              		.loc 1 236 17 view .LVU565
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1949              		.loc 1 238 17 view .LVU566
 1950              	@ armwave.c:238:                 if(value != 0) {
 238:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1951              		.loc 1 238 19 is_stmt 0 view .LVU567
 1952 08d0 000052E3 		cmp	r2, #0	@ wave_word,
 1953 08d4 9DFFFF0A 		beq	.L97		@,
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1954              		.loc 1 239 21 is_stmt 1 view .LVU568
 1955              	.LVL128:
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1956              		.loc 1 240 21 view .LVU569
 241:armwave.c     **** 
 1957              		.loc 1 241 21 view .LVU570
 243:armwave.c     ****                     g = MIN(gg, 255);
 1958              		.loc 1 243 21 view .LVU571
 244:armwave.c     ****                     b = MIN(bb, 255);
 1959              		.loc 1 244 21 view .LVU572
 245:armwave.c     **** 
 1960              		.loc 1 245 21 view .LVU573
 248:armwave.c     **** 
 1961              		.loc 1 248 21 view .LVU574
 251:armwave.c     ****                     xx = nsub & 0xff;
 1962              		.loc 1 251 21 view .LVU575
 1963              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1964              		.loc 1 241 55 is_stmt 0 view .LVU576
 1965 08d8 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1966              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1967              		.loc 1 240 55 view .LVU577
 1968 08dc 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1969              	@ armwave.c:241:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 241:armwave.c     **** 
 1970              		.loc 1 241 24 view .LVU578
 1971 08e0 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1972              	.LVL129:
 1973              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1974              		.loc 1 239 55 view .LVU579
 1975 08e4 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1976              	.LVL130:
 1977              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1978              		.loc 1 245 25 view .LVU580
 1979 08e8 FF005EE3 		cmp	lr, #255	@ bb,
 1980              	@ armwave.c:240:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 240:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1981              		.loc 1 240 24 view .LVU581
 1982 08ec 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1983              	.LVL131:
 1984              	@ armwave.c:245:                     b = MIN(bb, 255);
 245:armwave.c     **** 
 1985              		.loc 1 245 25 view .LVU582
 1986 08f0 FFE0A0A3 		movge	lr, #255	@ bb,
 1987              	.LVL132:
 1988              	@ armwave.c:244:                     g = MIN(gg, 255);
 244:armwave.c     ****                     b = MIN(bb, 255);
 1989              		.loc 1 244 25 view .LVU583
 1990 08f4 FF0054E3 		cmp	r4, #255	@ gg,
 1991 08f8 FF40A0A3 		movge	r4, #255	@ gg,
 1992              	.LVL133:
 244:armwave.c     ****                     b = MIN(bb, 255);
 1993              		.loc 1 244 25 view .LVU584
 1994 08fc 036083E2 		add	r6, r3, #3	@ _59, n,
 252:armwave.c     ****                     yy = nsub >> 8;
 1995              		.loc 1 252 21 is_stmt 1 view .LVU585
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1996              		.loc 1 253 21 view .LVU586
 254:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1997              		.loc 1 254 21 view .LVU587
 255:armwave.c     ****                 }
 1998              		.loc 1 255 21 view .LVU588
 1999              	@ armwave.c:239:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 239:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2000              		.loc 1 239 24 is_stmt 0 view .LVU589
 2001 0900 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 2002              	.LVL134:
 2003              	@ armwave.c:254:                     offset = yy + (xx * g_armwave_state.target_width);
 254:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2004              		.loc 1 254 39 view .LVU590
 2005 0904 3C7095E5 		ldr	r7, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2006              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 2007              		.loc 1 243 25 view .LVU591
 2008 0908 FF0052E3 		cmp	r2, #255	@ rr,
 2009              	@ armwave.c:252:                     xx = nsub & 0xff;
 252:armwave.c     ****                     yy = nsub >> 8;
 2010              		.loc 1 252 24 view .LVU592
 2011 090c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 2012              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2013              		.loc 1 248 56 view .LVU593
 2014 0910 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 2015              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2016              		.loc 1 248 44 view .LVU594
 2017 0914 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2018              	@ armwave.c:243:                     r = MIN(rr, 255);
 243:armwave.c     ****                     g = MIN(gg, 255);
 2019              		.loc 1 243 25 view .LVU595
 2020 0918 FF20A0A3 		movge	r2, #255	@ rr,
 2021              	.LVL135:
 2022              	@ armwave.c:253:                     yy = nsub >> 8;
 253:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2023              		.loc 1 253 31 view .LVU596
 2024 091c 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2025              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2026              		.loc 1 248 44 view .LVU597
 2027 0920 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2028              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2029              		.loc 1 248 56 view .LVU598
 2030 0924 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2031              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 2032              		.loc 1 255 39 view .LVU599
 2033 0928 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2034              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2035              		.loc 1 248 51 view .LVU600
 2036 092c 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2037              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2038              		.loc 1 248 62 view .LVU601
 2039 0930 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2040              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 2041              		.loc 1 255 49 view .LVU602
 2042 0934 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2043              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2044              		.loc 1 248 62 view .LVU603
 2045 0938 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2046              	@ armwave.c:248:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 248:armwave.c     **** 
 2047              		.loc 1 248 26 view .LVU604
 2048 093c FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2049              	@ armwave.c:255:                     *(out_buffer_base + offset) = word;
 255:armwave.c     ****                 }
 2050              		.loc 1 255 49 view .LVU605
 2051 0940 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2052 0944 81FFFFEA 		b	.L97		@
 2053              	.LVL136:
 2054              	.L118:
 221:armwave.c     **** 
 2055              		.loc 1 221 5 is_stmt 1 discriminator 1 view .LVU606
 2056 0948 10309FE5 		ldr	r3, .L120+4	@,
 2057 094c DD20A0E3 		mov	r2, #221	@,
 2058 0950 0C109FE5 		ldr	r1, .L120+8	@,
 2059              	.LVL137:
 221:armwave.c     **** 
 2060              		.loc 1 221 5 is_stmt 0 discriminator 1 view .LVU607
 2061 0954 0C009FE5 		ldr	r0, .L120+12	@,
 2062              	.LVL138:
 221:armwave.c     **** 
 2063              		.loc 1 221 5 discriminator 1 view .LVU608
 2064 0958 FEFFFFEB 		bl	__assert_fail		@
 2065              	.LVL139:
 2066              	.L121:
 221:armwave.c     **** 
 2067              		.loc 1 221 5 discriminator 1 view .LVU609
 2068              		.align	2
 2069              	.L120:
 2070 095c 00000000 		.word	g_armwave_state
 2071 0960 18000000 		.word	.LANCHOR0+24
 2072 0964 00000000 		.word	.LC0
 2073 0968 D4000000 		.word	.LC5
 2074              		.cfi_endproc
 2075              	.LFE63:
 2077              		.align	2
 2078              		.global	armwave_fill_pixbuf_scaled
 2079              		.syntax unified
 2080              		.arm
 2081              		.fpu vfp
 2083              	armwave_fill_pixbuf_scaled:
 2084              	.LVL140:
 2085              	.LFB64:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 264:armwave.c     ****  * Rows are repeated as necessary.
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 267:armwave.c     **** {
 2086              		.loc 1 267 1 is_stmt 1 view -0
 2087              		.cfi_startproc
 2088              		@ args = 0, pretend = 0, frame = 8
 2089              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2090              		.loc 1 268 5 view .LVU611
 269:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2091              		.loc 1 269 5 view .LVU612
 270:armwave.c     ****     uint8_t r, g, b, value;
 2092              		.loc 1 270 5 view .LVU613
 271:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2093              		.loc 1 271 5 view .LVU614
 2094              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2095              		.loc 1 267 1 is_stmt 0 view .LVU615
 2096 096c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2097              		.cfi_def_cfa_offset 36
 2098              		.cfi_offset 4, -36
 2099              		.cfi_offset 5, -32
 2100              		.cfi_offset 6, -28
 2101              		.cfi_offset 7, -24
 2102              		.cfi_offset 8, -20
 2103              		.cfi_offset 9, -16
 2104              		.cfi_offset 10, -12
 2105              		.cfi_offset 11, -8
 2106              		.cfi_offset 14, -4
 2107              	@ armwave.c:275:     assert(out_buffer != NULL);
 272:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 273:armwave.c     ****     uint32_t offset;
 274:armwave.c     **** 
 275:armwave.c     ****     assert(out_buffer != NULL);
 2108              		.loc 1 275 5 view .LVU616
 2109 0970 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 2110              	@ armwave.c:271:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 271:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2111              		.loc 1 271 15 view .LVU617
 2112 0974 5C629FE5 		ldr	r6, .L149	@ tmp366,
 2113              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2114              		.loc 1 267 1 view .LVU618
 2115 0978 0CD04DE2 		sub	sp, sp, #12	@,,
 2116              		.cfi_def_cfa_offset 48
 2117              	@ armwave.c:271:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 271:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2118              		.loc 1 271 15 view .LVU619
 2119 097c 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2120              	.LVL141:
 272:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2121              		.loc 1 272 5 is_stmt 1 view .LVU620
 273:armwave.c     **** 
 2122              		.loc 1 273 5 view .LVU621
 2123              		.loc 1 275 5 view .LVU622
 2124 0980 8F00000A 		beq	.L147		@,
 276:armwave.c     **** 
 277:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 278:armwave.c     **** 
 279:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2125              		.loc 1 279 5 view .LVU623
 2126              	@ armwave.c:279:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2127              		.loc 1 279 27 is_stmt 0 view .LVU624
 2128 0984 3C5096E5 		ldr	r5, [r6, #60]	@ _1, g_armwave_state.target_width
 2129              	@ armwave.c:280:     vscale = g_armwave_state.target_height / 256;
 280:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2130              		.loc 1 280 44 view .LVU625
 2131 0988 403096E5 		ldr	r3, [r6, #64]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2132              	@ armwave.c:282:     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 281:armwave.c     **** 
 282:armwave.c     ****     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 2133              		.loc 1 282 5 view .LVU626
 2134 098c 0520A0E1 		mov	r2, r5	@, _1
 2135              	@ armwave.c:279:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 279:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2136              		.loc 1 279 41 view .LVU627
 2137 0990 0554A0E1 		lsl	r5, r5, #8	@ npix, _1,
 2138              	.LVL142:
 280:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2139              		.loc 1 280 5 is_stmt 1 view .LVU628
 2140              		.loc 1 282 5 view .LVU629
 2141 0994 0510A0E1 		mov	r1, r5	@, npix
 2142 0998 2334A0E1 		lsr	r3, r3, #8	@, g_armwave_state.target_height,
 2143              	.LVL143:
 2144              		.loc 1 282 5 is_stmt 0 view .LVU630
 2145 099c 38029FE5 		ldr	r0, .L149+4	@,
 2146              	.LVL144:
 2147              		.loc 1 282 5 view .LVU631
 2148 09a0 FEFFFFEB 		bl	printf		@
 2149              	.LVL145:
 283:armwave.c     **** 
 284:armwave.c     ****     /*
 285:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 286:armwave.c     ****         for(i = 0; i < 4; i++) {
 287:armwave.c     ****             yy = ((n & 0xff) * 4) + i;
 288:armwave.c     ****             xx = n >> 8;
 289:armwave.c     **** 
 290:armwave.c     ****             //offset = (yy + (xx * g_armwave_state.target_width));
 291:armwave.c     ****             //*(out_buffer_base + offset) = 0xff000000 | (yy << 8) | xx;
 292:armwave.c     **** 
 293:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 294:armwave.c     ****             *(out_buffer_base + offset) = 0xff000000 | ((i * 64) << 16); // | (yy << 8) | xx;
 295:armwave.c     ****         }
 296:armwave.c     ****     }
 297:armwave.c     ****     */
 298:armwave.c     **** 
 299:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2150              		.loc 1 299 5 is_stmt 1 view .LVU632
 2151              		.loc 1 299 5 is_stmt 0 view .LVU633
 2152 09a4 000055E3 		cmp	r5, #0	@ npix,
 2153 09a8 0A0000DA 		ble	.L122		@,
 2154              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 300:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 301:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 302:armwave.c     ****         // most normal waveforms.
 303:armwave.c     ****         wave_word = *base_32ptr++;
 304:armwave.c     **** 
 305:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 306:armwave.c     ****             for(w = 0; w < 4; w++) {
 307:armwave.c     ****                 value = wave_word & 0xff;
 308:armwave.c     ****                 wave_word >>= 8;
 309:armwave.c     **** 
 310:armwave.c     ****                 if(value != 0) {
 311:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2155              		.loc 1 311 52 view .LVU634
 2156 09ac F0A5D6E1 		ldrsh	r10, [r6, #80]	@ _74, g_armwave_state.ch1_color.r
 2157              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2158              		.loc 1 312 52 view .LVU635
 2159 09b0 F295D6E1 		ldrsh	r9, [r6, #82]	@ _80, g_armwave_state.ch1_color.g
 2160              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2161              		.loc 1 313 52 view .LVU636
 2162 09b4 F4B5D6E1 		ldrsh	fp, [r6, #84]	@ _84, g_armwave_state.ch1_color.b
 2163              	@ armwave.c:299:     for(n = 0; n < npix; n += 4) {
 299:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2164              		.loc 1 299 11 view .LVU637
 2165 09b8 0030A0E3 		mov	r3, #0	@ n,
 2166 09bc 00708DE5 		str	r7, [sp]	@ out_buffer, %sfp
 2167              	.LVL146:
 2168              	.L131:
 303:armwave.c     **** 
 2169              		.loc 1 303 9 is_stmt 1 view .LVU638
 2170              	@ armwave.c:303:         wave_word = *base_32ptr++;
 303:armwave.c     **** 
 2171              		.loc 1 303 19 is_stmt 0 view .LVU639
 2172 09c0 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_50, offset: 4294967292B]
 2173              	.LVL147:
 305:armwave.c     ****             for(w = 0; w < 4; w++) {
 2174              		.loc 1 305 9 is_stmt 1 view .LVU640
 2175              	@ armwave.c:305:         if(COND_UNLIKELY(wave_word != 0)) {
 305:armwave.c     ****             for(w = 0; w < 4; w++) {
 2176              		.loc 1 305 11 is_stmt 0 view .LVU641
 2177 09c4 000052E3 		cmp	r2, #0	@ wave_word,
 2178 09c8 0400001A 		bne	.L148		@,
 2179              	.LVL148:
 2180              	.L126:
 2181              	@ armwave.c:299:     for(n = 0; n < npix; n += 4) {
 299:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2182              		.loc 1 299 28 discriminator 2 view .LVU642
 2183 09cc 043083E2 		add	r3, r3, #4	@ n, n,
 2184              	.LVL149:
 2185              	@ armwave.c:299:     for(n = 0; n < npix; n += 4) {
 299:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2186              		.loc 1 299 5 discriminator 2 view .LVU643
 2187 09d0 030055E1 		cmp	r5, r3	@ npix, n
 2188 09d4 F9FFFFCA 		bgt	.L131		@,
 2189              	.LVL150:
 2190              	.L122:
 2191              	@ armwave.c:336: }
 314:armwave.c     **** 
 315:armwave.c     ****                     r = MIN(rr, 255);
 316:armwave.c     ****                     g = MIN(gg, 255);
 317:armwave.c     ****                     b = MIN(bb, 255);
 318:armwave.c     **** 
 319:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 320:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 321:armwave.c     **** 
 322:armwave.c     ****                     // Do line scaling as necessary.
 323:armwave.c     ****                     nsub = n + w;
 324:armwave.c     ****                     yy = (nsub & 0xff);
 325:armwave.c     ****                     xx = (nsub >> 8);
 326:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 327:armwave.c     ****                     *(out_buffer_base + offset) = word;
 328:armwave.c     ****                 }
 329:armwave.c     ****             }
 330:armwave.c     ****         }
 331:armwave.c     **** 
 332:armwave.c     ****         //printf("0x%08x, %d\n", out_buffer_base, n);
 333:armwave.c     **** 
 334:armwave.c     ****         //*out_buffer_base++ = 0xff000000 | n;
 335:armwave.c     ****     }
 336:armwave.c     **** }
 2192              		.loc 1 336 1 view .LVU644
 2193 09d8 0CD08DE2 		add	sp, sp, #12	@,,
 2194              		.cfi_remember_state
 2195              		.cfi_def_cfa_offset 36
 2196              		@ sp needed	@
 2197 09dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2198              	.LVL151:
 2199              	.L148:
 2200              		.cfi_restore_state
 307:armwave.c     ****                 wave_word >>= 8;
 2201              		.loc 1 307 17 is_stmt 1 view .LVU645
 308:armwave.c     **** 
 2202              		.loc 1 308 17 view .LVU646
 2203              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2204              		.loc 1 310 19 is_stmt 0 view .LVU647
 2205 09e0 FFC012E2 		ands	ip, r2, #255	@ _76, wave_word,
 2206              	@ armwave.c:308:                 wave_word >>= 8;
 308:armwave.c     **** 
 2207              		.loc 1 308 27 view .LVU648
 2208 09e4 2214A0E1 		lsr	r1, r2, #8	@ wave_word, wave_word,
 2209              	.LVL152:
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2210              		.loc 1 310 17 is_stmt 1 view .LVU649
 2211              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2212              		.loc 1 310 19 is_stmt 0 view .LVU650
 2213 09e8 1900000A 		beq	.L127		@,
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2214              		.loc 1 311 21 is_stmt 1 view .LVU651
 2215              	.LVL153:
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2216              		.loc 1 312 21 view .LVU652
 313:armwave.c     **** 
 2217              		.loc 1 313 21 view .LVU653
 315:armwave.c     ****                     g = MIN(gg, 255);
 2218              		.loc 1 315 21 view .LVU654
 316:armwave.c     ****                     b = MIN(bb, 255);
 2219              		.loc 1 316 21 view .LVU655
 317:armwave.c     **** 
 2220              		.loc 1 317 21 view .LVU656
 320:armwave.c     **** 
 2221              		.loc 1 320 21 view .LVU657
 323:armwave.c     ****                     yy = (nsub & 0xff);
 2222              		.loc 1 323 21 view .LVU658
 324:armwave.c     ****                     xx = (nsub >> 8);
 2223              		.loc 1 324 21 view .LVU659
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2224              		.loc 1 325 21 view .LVU660
 326:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2225              		.loc 1 326 21 view .LVU661
 327:armwave.c     ****                 }
 2226              		.loc 1 327 21 view .LVU662
 2227              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2228              		.loc 1 313 55 is_stmt 0 view .LVU663
 2229 09ec 9B0C00E0 		mul	r0, fp, ip	@ tmp284, _84, _76
 2230              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2231              		.loc 1 312 55 view .LVU664
 2232 09f0 990C08E0 		mul	r8, r9, ip	@ tmp288, _80, _76
 2233              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2234              		.loc 1 313 24 view .LVU665
 2235 09f4 4004A0E1 		asr	r0, r0, #8	@ bb, tmp284,
 2236              	.LVL154:
 2237              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2238              		.loc 1 317 25 view .LVU666
 2239 09f8 FF0050E3 		cmp	r0, #255	@ bb,
 2240              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2241              		.loc 1 312 24 view .LVU667
 2242 09fc 4884A0E1 		asr	r8, r8, #8	@ gg, tmp288,
 2243              	.LVL155:
 2244              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2245              		.loc 1 311 55 view .LVU668
 2246 0a00 9C0A0CE0 		mul	ip, ip, r10	@ tmp294, _76, _74
 2247              	.LVL156:
 2248              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2249              		.loc 1 317 25 view .LVU669
 2250 0a04 FF00A0A3 		movge	r0, #255	@ bb,
 2251              	.LVL157:
 2252              	@ armwave.c:316:                     g = MIN(gg, 255);
 316:armwave.c     ****                     b = MIN(bb, 255);
 2253              		.loc 1 316 25 view .LVU670
 2254 0a08 FF0058E3 		cmp	r8, #255	@ gg,
 2255 0a0c FF80A0A3 		movge	r8, #255	@ gg,
 2256              	.LVL158:
 2257              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2258              		.loc 1 311 24 view .LVU671
 2259 0a10 4CC4A0E1 		asr	ip, ip, #8	@ rr, tmp294,
 2260              	.LVL159:
 2261              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2262              		.loc 1 320 56 view .LVU672
 2263 0a14 0884A0E1 		lsl	r8, r8, #8	@ tmp289, gg,
 2264              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2265              		.loc 1 315 25 view .LVU673
 2266 0a18 FF005CE3 		cmp	ip, #255	@ rr,
 2267              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2268              		.loc 1 327 39 view .LVU674
 2269 0a1c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp380, g_armwave_state.target_width
 2270              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2271              		.loc 1 320 44 view .LVU675
 2272 0a20 0008A0E1 		lsl	r0, r0, #16	@ tmp285, bb,
 2273              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2274              		.loc 1 320 56 view .LVU676
 2275 0a24 7880FFE6 		uxth	r8, r8	@ tmp290, tmp289
 2276              	@ armwave.c:324:                     yy = (nsub & 0xff);
 324:armwave.c     ****                     xx = (nsub >> 8);
 2277              		.loc 1 324 24 view .LVU677
 2278 0a28 73E0EFE6 		uxtb	lr, r3	@ yy, n
 2279              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2280              		.loc 1 315 25 view .LVU678
 2281 0a2c FFC0A0A3 		movge	ip, #255	@ rr,
 2282              	.LVL160:
 2283              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2284              		.loc 1 320 44 view .LVU679
 2285 0a30 FF0800E2 		and	r0, r0, #16711680	@ tmp286, tmp285,
 2286              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2287              		.loc 1 320 51 view .LVU680
 2288 0a34 080080E1 		orr	r0, r0, r8	@ tmp292, tmp286, tmp290
 2289              	@ armwave.c:325:                     xx = (nsub >> 8);
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2290              		.loc 1 325 32 view .LVU681
 2291 0a38 4384A0E1 		asr	r8, r3, #8	@ xx, n,
 2292              	.LVL161:
 2293              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2294              		.loc 1 327 39 view .LVU682
 2295 0a3c 978E2EE0 		mla	lr, r7, lr, r8	@ tmp282, tmp380, yy, xx
 2296              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2297              		.loc 1 320 62 view .LVU683
 2298 0a40 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 2299 0a44 0CC080E1 		orr	ip, r0, ip	@ tmp296, tmp292, rr
 2300              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2301              		.loc 1 327 49 view .LVU684
 2302 0a48 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2303              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2304              		.loc 1 320 26 view .LVU685
 2305 0a4c FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp296,
 2306              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2307              		.loc 1 327 49 view .LVU686
 2308 0a50 0EC180E7 		str	ip, [r0, lr, lsl #2]	@ word, *_110
 2309              	.LVL162:
 2310              	.L127:
 307:armwave.c     ****                 wave_word >>= 8;
 2311              		.loc 1 307 17 is_stmt 1 view .LVU687
 308:armwave.c     **** 
 2312              		.loc 1 308 17 view .LVU688
 2313              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2314              		.loc 1 310 19 is_stmt 0 view .LVU689
 2315 0a54 FF1011E2 		ands	r1, r1, #255	@ _122, wave_word,
 2316              	.LVL163:
 2317              	@ armwave.c:308:                 wave_word >>= 8;
 308:armwave.c     **** 
 2318              		.loc 1 308 27 view .LVU690
 2319 0a58 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 2320              	.LVL164:
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2321              		.loc 1 310 17 is_stmt 1 view .LVU691
 2322              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2323              		.loc 1 310 19 is_stmt 0 view .LVU692
 2324 0a5c 1C00000A 		beq	.L128		@,
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2325              		.loc 1 311 21 is_stmt 1 view .LVU693
 2326              	.LVL165:
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2327              		.loc 1 312 21 view .LVU694
 313:armwave.c     **** 
 2328              		.loc 1 313 21 view .LVU695
 315:armwave.c     ****                     g = MIN(gg, 255);
 2329              		.loc 1 315 21 view .LVU696
 316:armwave.c     ****                     b = MIN(bb, 255);
 2330              		.loc 1 316 21 view .LVU697
 317:armwave.c     **** 
 2331              		.loc 1 317 21 view .LVU698
 320:armwave.c     **** 
 2332              		.loc 1 320 21 view .LVU699
 323:armwave.c     ****                     yy = (nsub & 0xff);
 2333              		.loc 1 323 21 view .LVU700
 2334              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2335              		.loc 1 313 55 is_stmt 0 view .LVU701
 2336 0a60 910B00E0 		mul	r0, r1, fp	@ tmp307, _122, _84
 2337              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2338              		.loc 1 312 55 view .LVU702
 2339 0a64 91090EE0 		mul	lr, r1, r9	@ tmp311, _122, _80
 2340              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2341              		.loc 1 313 24 view .LVU703
 2342 0a68 4004A0E1 		asr	r0, r0, #8	@ bb, tmp307,
 2343              	.LVL166:
 2344              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2345              		.loc 1 317 25 view .LVU704
 2346 0a6c FF0050E3 		cmp	r0, #255	@ bb,
 2347 0a70 FF00A0A3 		movge	r0, #255	@ bb,
 2348              	.LVL167:
 2349              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2350              		.loc 1 311 55 view .LVU705
 2351 0a74 910A01E0 		mul	r1, r1, r10	@ tmp317, _122, _74
 2352              	.LVL168:
 2353              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2354              		.loc 1 312 24 view .LVU706
 2355 0a78 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp311,
 2356              	.LVL169:
 2357              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2358              		.loc 1 320 44 view .LVU707
 2359 0a7c 0008A0E1 		lsl	r0, r0, #16	@ tmp308, bb,
 2360              	@ armwave.c:316:                     g = MIN(gg, 255);
 316:armwave.c     ****                     b = MIN(bb, 255);
 2361              		.loc 1 316 25 view .LVU708
 2362 0a80 FF005EE3 		cmp	lr, #255	@ gg,
 2363 0a84 01C083E2 		add	ip, r3, #1	@ _162, n,
 324:armwave.c     ****                     xx = (nsub >> 8);
 2364              		.loc 1 324 21 is_stmt 1 view .LVU709
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2365              		.loc 1 325 21 view .LVU710
 326:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2366              		.loc 1 326 21 view .LVU711
 327:armwave.c     ****                 }
 2367              		.loc 1 327 21 view .LVU712
 2368              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2369              		.loc 1 320 44 is_stmt 0 view .LVU713
 2370 0a88 FF0800E2 		and	r0, r0, #16711680	@ tmp309, tmp308,
 2371              	@ armwave.c:316:                     g = MIN(gg, 255);
 316:armwave.c     ****                     b = MIN(bb, 255);
 2372              		.loc 1 316 25 view .LVU714
 2373 0a8c FFE0A0A3 		movge	lr, #255	@ gg,
 2374              	.LVL170:
 2375              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2376              		.loc 1 320 44 view .LVU715
 2377 0a90 04008DE5 		str	r0, [sp, #4]	@ tmp309, %sfp
 2378              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2379              		.loc 1 327 39 view .LVU716
 2380 0a94 3C0096E5 		ldr	r0, [r6, #60]	@ tmp383, g_armwave_state.target_width
 2381              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2382              		.loc 1 311 24 view .LVU717
 2383 0a98 4114A0E1 		asr	r1, r1, #8	@ rr, tmp317,
 2384              	.LVL171:
 2385              	@ armwave.c:324:                     yy = (nsub & 0xff);
 324:armwave.c     ****                     xx = (nsub >> 8);
 2386              		.loc 1 324 24 view .LVU718
 2387 0a9c 7C70EFE6 		uxtb	r7, ip	@ yy, _162
 2388              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2389              		.loc 1 315 25 view .LVU719
 2390 0aa0 FF0051E3 		cmp	r1, #255	@ rr,
 2391              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2392              		.loc 1 320 56 view .LVU720
 2393 0aa4 0EE4A0E1 		lsl	lr, lr, #8	@ tmp312, gg,
 2394              	@ armwave.c:325:                     xx = (nsub >> 8);
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2395              		.loc 1 325 32 view .LVU721
 2396 0aa8 4CC4A0E1 		asr	ip, ip, #8	@ xx, _162,
 2397              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2398              		.loc 1 327 39 view .LVU722
 2399 0aac 90C72CE0 		mla	ip, r0, r7, ip	@ tmp305, tmp383, yy, xx
 2400              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2401              		.loc 1 315 25 view .LVU723
 2402 0ab0 FF10A0A3 		movge	r1, #255	@ rr,
 2403              	.LVL172:
 2404              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2405              		.loc 1 320 51 view .LVU724
 2406 0ab4 04009DE5 		ldr	r0, [sp, #4]	@ tmp309, %sfp
 2407              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2408              		.loc 1 320 56 view .LVU725
 2409 0ab8 7EE0FFE6 		uxth	lr, lr	@ tmp313, tmp312
 2410              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2411              		.loc 1 320 51 view .LVU726
 2412 0abc 0E0080E1 		orr	r0, r0, lr	@ tmp315, tmp309, tmp313
 2413              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2414              		.loc 1 320 62 view .LVU727
 2415 0ac0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2416 0ac4 011080E1 		orr	r1, r0, r1	@ tmp319, tmp315, rr
 2417              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2418              		.loc 1 327 49 view .LVU728
 2419 0ac8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2420              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2421              		.loc 1 320 26 view .LVU729
 2422 0acc FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp319,
 2423              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2424              		.loc 1 327 49 view .LVU730
 2425 0ad0 0C1180E7 		str	r1, [r0, ip, lsl #2]	@ word, *_156
 2426              	.LVL173:
 2427              	.L128:
 307:armwave.c     ****                 wave_word >>= 8;
 2428              		.loc 1 307 17 is_stmt 1 view .LVU731
 308:armwave.c     **** 
 2429              		.loc 1 308 17 view .LVU732
 2430              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2431              		.loc 1 310 19 is_stmt 0 view .LVU733
 2432 0ad4 FF1018E2 		ands	r1, r8, #255	@ _168, wave_word,
 2433              	@ armwave.c:308:                 wave_word >>= 8;
 308:armwave.c     **** 
 2434              		.loc 1 308 27 view .LVU734
 2435 0ad8 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2436              	.LVL174:
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2437              		.loc 1 310 17 is_stmt 1 view .LVU735
 2438              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2439              		.loc 1 310 19 is_stmt 0 view .LVU736
 2440 0adc 1A00000A 		beq	.L129		@,
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2441              		.loc 1 311 21 is_stmt 1 view .LVU737
 2442              	.LVL175:
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2443              		.loc 1 312 21 view .LVU738
 313:armwave.c     **** 
 2444              		.loc 1 313 21 view .LVU739
 315:armwave.c     ****                     g = MIN(gg, 255);
 2445              		.loc 1 315 21 view .LVU740
 316:armwave.c     ****                     b = MIN(bb, 255);
 2446              		.loc 1 316 21 view .LVU741
 317:armwave.c     **** 
 2447              		.loc 1 317 21 view .LVU742
 320:armwave.c     **** 
 2448              		.loc 1 320 21 view .LVU743
 323:armwave.c     ****                     yy = (nsub & 0xff);
 2449              		.loc 1 323 21 view .LVU744
 2450              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2451              		.loc 1 313 55 is_stmt 0 view .LVU745
 2452 0ae0 910B00E0 		mul	r0, r1, fp	@ tmp330, _168, _84
 2453              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2454              		.loc 1 312 55 view .LVU746
 2455 0ae4 91090CE0 		mul	ip, r1, r9	@ tmp334, _168, _80
 2456              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2457              		.loc 1 313 24 view .LVU747
 2458 0ae8 4004A0E1 		asr	r0, r0, #8	@ bb, tmp330,
 2459              	.LVL176:
 2460              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2461              		.loc 1 311 55 view .LVU748
 2462 0aec 910A01E0 		mul	r1, r1, r10	@ tmp340, _168, _74
 2463              	.LVL177:
 2464              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2465              		.loc 1 317 25 view .LVU749
 2466 0af0 FF0050E3 		cmp	r0, #255	@ bb,
 2467              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2468              		.loc 1 312 24 view .LVU750
 2469 0af4 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp334,
 2470              	.LVL178:
 2471              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2472              		.loc 1 317 25 view .LVU751
 2473 0af8 FF00A0A3 		movge	r0, #255	@ bb,
 2474              	.LVL179:
 2475              	@ armwave.c:316:                     g = MIN(gg, 255);
 316:armwave.c     ****                     b = MIN(bb, 255);
 2476              		.loc 1 316 25 view .LVU752
 2477 0afc FF005CE3 		cmp	ip, #255	@ gg,
 2478 0b00 FFC0A0A3 		movge	ip, #255	@ gg,
 2479              	.LVL180:
 316:armwave.c     ****                     b = MIN(bb, 255);
 2480              		.loc 1 316 25 view .LVU753
 2481 0b04 02E083E2 		add	lr, r3, #2	@ _70, n,
 324:armwave.c     ****                     xx = (nsub >> 8);
 2482              		.loc 1 324 21 is_stmt 1 view .LVU754
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2483              		.loc 1 325 21 view .LVU755
 326:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2484              		.loc 1 326 21 view .LVU756
 327:armwave.c     ****                 }
 2485              		.loc 1 327 21 view .LVU757
 2486              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2487              		.loc 1 311 24 is_stmt 0 view .LVU758
 2488 0b08 4114A0E1 		asr	r1, r1, #8	@ rr, tmp340,
 2489              	.LVL181:
 2490              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2491              		.loc 1 327 39 view .LVU759
 2492 0b0c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp384, g_armwave_state.target_width
 2493              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2494              		.loc 1 315 25 view .LVU760
 2495 0b10 FF0051E3 		cmp	r1, #255	@ rr,
 2496              	@ armwave.c:324:                     yy = (nsub & 0xff);
 324:armwave.c     ****                     xx = (nsub >> 8);
 2497              		.loc 1 324 24 view .LVU761
 2498 0b14 7E80EFE6 		uxtb	r8, lr	@ yy, _70
 2499              	.LVL182:
 2500              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2501              		.loc 1 320 56 view .LVU762
 2502 0b18 0CC4A0E1 		lsl	ip, ip, #8	@ tmp335, gg,
 2503              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2504              		.loc 1 320 44 view .LVU763
 2505 0b1c 0008A0E1 		lsl	r0, r0, #16	@ tmp331, bb,
 2506              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2507              		.loc 1 315 25 view .LVU764
 2508 0b20 FF10A0A3 		movge	r1, #255	@ rr,
 2509              	.LVL183:
 2510              	@ armwave.c:325:                     xx = (nsub >> 8);
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2511              		.loc 1 325 32 view .LVU765
 2512 0b24 4EE4A0E1 		asr	lr, lr, #8	@ xx, _70,
 2513              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2514              		.loc 1 320 44 view .LVU766
 2515 0b28 FF0800E2 		and	r0, r0, #16711680	@ tmp332, tmp331,
 2516              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2517              		.loc 1 320 56 view .LVU767
 2518 0b2c 7CC0FFE6 		uxth	ip, ip	@ tmp336, tmp335
 2519              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2520              		.loc 1 327 39 view .LVU768
 2521 0b30 97E82EE0 		mla	lr, r7, r8, lr	@ tmp328, tmp384, yy, xx
 2522              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2523              		.loc 1 320 51 view .LVU769
 2524 0b34 0CC080E1 		orr	ip, r0, ip	@ tmp338, tmp332, tmp336
 2525              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2526              		.loc 1 320 62 view .LVU770
 2527 0b38 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2528              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2529              		.loc 1 327 49 view .LVU771
 2530 0b3c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2531              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2532              		.loc 1 320 62 view .LVU772
 2533 0b40 01108CE1 		orr	r1, ip, r1	@ tmp342, tmp338, rr
 2534              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2535              		.loc 1 320 26 view .LVU773
 2536 0b44 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp342,
 2537              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2538              		.loc 1 327 49 view .LVU774
 2539 0b48 0E1180E7 		str	r1, [r0, lr, lsl #2]	@ word, *_202
 2540              	.L129:
 2541              	.LVL184:
 307:armwave.c     ****                 wave_word >>= 8;
 2542              		.loc 1 307 17 is_stmt 1 view .LVU775
 308:armwave.c     **** 
 2543              		.loc 1 308 17 view .LVU776
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2544              		.loc 1 310 17 view .LVU777
 2545              	@ armwave.c:310:                 if(value != 0) {
 310:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2546              		.loc 1 310 19 is_stmt 0 view .LVU778
 2547 0b4c 000052E3 		cmp	r2, #0	@ wave_word,
 2548 0b50 9DFFFF0A 		beq	.L126		@,
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2549              		.loc 1 311 21 is_stmt 1 view .LVU779
 2550              	.LVL185:
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2551              		.loc 1 312 21 view .LVU780
 313:armwave.c     **** 
 2552              		.loc 1 313 21 view .LVU781
 315:armwave.c     ****                     g = MIN(gg, 255);
 2553              		.loc 1 315 21 view .LVU782
 316:armwave.c     ****                     b = MIN(bb, 255);
 2554              		.loc 1 316 21 view .LVU783
 317:armwave.c     **** 
 2555              		.loc 1 317 21 view .LVU784
 320:armwave.c     **** 
 2556              		.loc 1 320 21 view .LVU785
 323:armwave.c     ****                     yy = (nsub & 0xff);
 2557              		.loc 1 323 21 view .LVU786
 2558              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2559              		.loc 1 313 55 is_stmt 0 view .LVU787
 2560 0b54 920B01E0 		mul	r1, r2, fp	@ tmp351, wave_word, _84
 2561              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2562              		.loc 1 312 55 view .LVU788
 2563 0b58 920900E0 		mul	r0, r2, r9	@ tmp355, wave_word, _80
 2564              	@ armwave.c:313:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 313:armwave.c     **** 
 2565              		.loc 1 313 24 view .LVU789
 2566 0b5c 4114A0E1 		asr	r1, r1, #8	@ bb, tmp351,
 2567              	.LVL186:
 2568              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2569              		.loc 1 311 55 view .LVU790
 2570 0b60 920A02E0 		mul	r2, r2, r10	@ tmp361, wave_word, _74
 2571              	.LVL187:
 2572              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2573              		.loc 1 317 25 view .LVU791
 2574 0b64 FF0051E3 		cmp	r1, #255	@ bb,
 2575              	@ armwave.c:312:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 312:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2576              		.loc 1 312 24 view .LVU792
 2577 0b68 4004A0E1 		asr	r0, r0, #8	@ gg, tmp355,
 2578              	.LVL188:
 2579              	@ armwave.c:317:                     b = MIN(bb, 255);
 317:armwave.c     **** 
 2580              		.loc 1 317 25 view .LVU793
 2581 0b6c FF10A0A3 		movge	r1, #255	@ bb,
 2582              	.LVL189:
 2583              	@ armwave.c:316:                     g = MIN(gg, 255);
 316:armwave.c     ****                     b = MIN(bb, 255);
 2584              		.loc 1 316 25 view .LVU794
 2585 0b70 FF0050E3 		cmp	r0, #255	@ gg,
 2586 0b74 FF00A0A3 		movge	r0, #255	@ gg,
 2587              	.LVL190:
 2588              	@ armwave.c:311:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2589              		.loc 1 311 24 view .LVU795
 2590 0b78 4224A0E1 		asr	r2, r2, #8	@ rr, tmp361,
 2591              	.LVL191:
 311:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2592              		.loc 1 311 24 view .LVU796
 2593 0b7c 03C083E2 		add	ip, r3, #3	@ _63, n,
 324:armwave.c     ****                     xx = (nsub >> 8);
 2594              		.loc 1 324 21 is_stmt 1 view .LVU797
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2595              		.loc 1 325 21 view .LVU798
 326:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2596              		.loc 1 326 21 view .LVU799
 327:armwave.c     ****                 }
 2597              		.loc 1 327 21 view .LVU800
 2598              	@ armwave.c:326:                     offset = (xx + (yy * g_armwave_state.target_width)); 
 326:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2599              		.loc 1 326 40 is_stmt 0 view .LVU801
 2600 0b80 3CE096E5 		ldr	lr, [r6, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2601              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2602              		.loc 1 315 25 view .LVU802
 2603 0b84 FF0052E3 		cmp	r2, #255	@ rr,
 2604              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2605              		.loc 1 320 56 view .LVU803
 2606 0b88 0004A0E1 		lsl	r0, r0, #8	@ tmp356, gg,
 2607              	@ armwave.c:324:                     yy = (nsub & 0xff);
 324:armwave.c     ****                     xx = (nsub >> 8);
 2608              		.loc 1 324 24 view .LVU804
 2609 0b8c 7C80EFE6 		uxtb	r8, ip	@ yy, _63
 2610              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2611              		.loc 1 320 44 view .LVU805
 2612 0b90 0118A0E1 		lsl	r1, r1, #16	@ tmp352, bb,
 2613              	@ armwave.c:315:                     r = MIN(rr, 255);
 315:armwave.c     ****                     g = MIN(gg, 255);
 2614              		.loc 1 315 25 view .LVU806
 2615 0b94 FF20A0A3 		movge	r2, #255	@ rr,
 2616              	.LVL192:
 2617              	@ armwave.c:325:                     xx = (nsub >> 8);
 325:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2618              		.loc 1 325 32 view .LVU807
 2619 0b98 4CC4A0E1 		asr	ip, ip, #8	@ xx, _63,
 2620              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2621              		.loc 1 320 44 view .LVU808
 2622 0b9c FF1801E2 		and	r1, r1, #16711680	@ tmp353, tmp352,
 2623              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2624              		.loc 1 320 56 view .LVU809
 2625 0ba0 7000FFE6 		uxth	r0, r0	@ tmp357, tmp356
 2626              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2627              		.loc 1 320 51 view .LVU810
 2628 0ba4 001081E1 		orr	r1, r1, r0	@ tmp359, tmp353, tmp357
 2629              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2630              		.loc 1 327 39 view .LVU811
 2631 0ba8 9EC82CE0 		mla	ip, lr, r8, ip	@ tmp349, g_armwave_state.target_width, yy, xx
 2632              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2633              		.loc 1 320 62 view .LVU812
 2634 0bac 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2635 0bb0 022081E1 		orr	r2, r1, r2	@ tmp363, tmp359, rr
 2636              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2637              		.loc 1 327 49 view .LVU813
 2638 0bb4 00109DE5 		ldr	r1, [sp]	@ out_buffer, %sfp
 2639              	@ armwave.c:320:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 320:armwave.c     **** 
 2640              		.loc 1 320 26 view .LVU814
 2641 0bb8 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp363,
 2642              	@ armwave.c:327:                     *(out_buffer_base + offset) = word;
 327:armwave.c     ****                 }
 2643              		.loc 1 327 49 view .LVU815
 2644 0bbc 0C2181E7 		str	r2, [r1, ip, lsl #2]	@ word, *_248
 2645 0bc0 81FFFFEA 		b	.L126		@
 2646              	.LVL193:
 2647              	.L147:
 275:armwave.c     **** 
 2648              		.loc 1 275 5 is_stmt 1 discriminator 1 view .LVU816
 2649 0bc4 14309FE5 		ldr	r3, .L149+8	@,
 2650 0bc8 14209FE5 		ldr	r2, .L149+12	@,
 2651 0bcc 14109FE5 		ldr	r1, .L149+16	@,
 2652 0bd0 14009FE5 		ldr	r0, .L149+20	@,
 2653              	.LVL194:
 275:armwave.c     **** 
 2654              		.loc 1 275 5 is_stmt 0 discriminator 1 view .LVU817
 2655 0bd4 FEFFFFEB 		bl	__assert_fail		@
 2656              	.LVL195:
 2657              	.L150:
 2658              		.align	2
 2659              	.L149:
 2660 0bd8 00000000 		.word	g_armwave_state
 2661 0bdc E8000000 		.word	.LC6
 2662 0be0 30000000 		.word	.LANCHOR0+48
 2663 0be4 13010000 		.word	275
 2664 0be8 00000000 		.word	.LC0
 2665 0bec D4000000 		.word	.LC5
 2666              		.cfi_endproc
 2667              	.LFE64:
 2669              		.align	2
 2670              		.global	armwave_dump_ppm_debug
 2671              		.syntax unified
 2672              		.arm
 2673              		.fpu vfp
 2675              	armwave_dump_ppm_debug:
 2676              	.LVL196:
 2677              	.LFB65:
 337:armwave.c     **** 
 338:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 339:armwave.c     **** {
 2678              		.loc 1 339 1 is_stmt 1 view -0
 2679              		.cfi_startproc
 2680              		@ args = 0, pretend = 0, frame = 0
 2681              		@ frame_needed = 0, uses_anonymous_args = 0
 340:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2682              		.loc 1 340 5 view .LVU819
 2683              	@ armwave.c:339: {
 339:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2684              		.loc 1 339 1 is_stmt 0 view .LVU820
 2685 0bf0 0130A0E1 		mov	r3, r1	@ fn, fn
 2686 0bf4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2687              		.cfi_def_cfa_offset 28
 2688              		.cfi_offset 4, -28
 2689              		.cfi_offset 5, -24
 2690              		.cfi_offset 6, -20
 2691              		.cfi_offset 7, -16
 2692              		.cfi_offset 8, -12
 2693              		.cfi_offset 9, -8
 2694              		.cfi_offset 14, -4
 2695 0bf8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2696 0bfc 0CD04DE2 		sub	sp, sp, #12	@,,
 2697              		.cfi_def_cfa_offset 40
 2698              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 2699              		.loc 1 340 16 view .LVU821
 2700 0c00 D8109FE5 		ldr	r1, .L163	@,
 2701              	.LVL197:
 2702              		.loc 1 340 16 view .LVU822
 2703 0c04 0300A0E1 		mov	r0, r3	@, fn
 2704              	.LVL198:
 2705              		.loc 1 340 16 view .LVU823
 2706 0c08 FEFFFFEB 		bl	fopen64		@
 2707              	.LVL199:
 2708              	@ armwave.c:347:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 341:armwave.c     ****     uint32_t data;
 342:armwave.c     ****     int xx, yy;
 343:armwave.c     **** 
 344:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 345:armwave.c     **** 
 346:armwave.c     ****     fputs("P3\n", fp);
 347:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2709              		.loc 1 347 5 view .LVU824
 2710 0c0c D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 2711              	@ armwave.c:346:     fputs("P3\n", fp);
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2712              		.loc 1 346 5 view .LVU825
 2713 0c10 0320A0E3 		mov	r2, #3	@,
 2714 0c14 0110A0E3 		mov	r1, #1	@,
 2715              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 340:armwave.c     ****     uint32_t data;
 2716              		.loc 1 340 16 view .LVU826
 2717 0c18 0070A0E1 		mov	r7, r0	@ fp,
 2718              	.LVL200:
 341:armwave.c     ****     uint32_t data;
 2719              		.loc 1 341 5 is_stmt 1 view .LVU827
 342:armwave.c     **** 
 2720              		.loc 1 342 5 view .LVU828
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2721              		.loc 1 346 5 view .LVU829
 2722 0c1c 0030A0E1 		mov	r3, r0	@, fp
 2723 0c20 C0009FE5 		ldr	r0, .L163+8	@,
 2724              	.LVL201:
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2725              		.loc 1 346 5 is_stmt 0 view .LVU830
 2726 0c24 FEFFFFEB 		bl	fwrite		@
 2727              	.LVL202:
 2728              		.loc 1 347 5 is_stmt 1 view .LVU831
 2729 0c28 3C3096E5 		ldr	r3, [r6, #60]	@, g_armwave_state.target_width
 2730 0c2c 402096E5 		ldr	r2, [r6, #64]	@, g_armwave_state.target_height
 2731 0c30 B4109FE5 		ldr	r1, .L163+12	@,
 2732 0c34 0700A0E1 		mov	r0, r7	@, fp
 2733 0c38 FEFFFFEB 		bl	fprintf		@
 2734              	.LVL203:
 348:armwave.c     ****     fputs("255\n", fp);
 2735              		.loc 1 348 5 view .LVU832
 2736 0c3c 0420A0E3 		mov	r2, #4	@,
 2737 0c40 0730A0E1 		mov	r3, r7	@, fp
 2738 0c44 0110A0E3 		mov	r1, #1	@,
 2739 0c48 A0009FE5 		ldr	r0, .L163+16	@,
 2740 0c4c FEFFFFEB 		bl	fwrite		@
 2741              	.LVL204:
 349:armwave.c     **** 
 350:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2742              		.loc 1 350 5 view .LVU833
 2743              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2744              		.loc 1 350 37 is_stmt 0 view .LVU834
 2745 0c50 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2746              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2747              		.loc 1 350 5 view .LVU835
 2748 0c54 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2749 0c58 1800000A 		beq	.L152		@,
 2750 0c5c 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2751              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 352:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 353:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 354:armwave.c     **** 
 355:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2752              		.loc 1 355 13 view .LVU836
 2753 0c60 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 2754              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2755              		.loc 1 350 12 view .LVU837
 2756 0c64 0050A0E3 		mov	r5, #0	@ yy,
 2757              	.LVL205:
 2758              	.L153:
 2759              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2760              		.loc 1 351 9 view .LVU838
 2761 0c68 000053E3 		cmp	r3, #0	@ _12,
 2762              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2763              		.loc 1 351 16 view .LVU839
 2764 0c6c 0040A013 		movne	r4, #0	@ xx,
 2765              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2766              		.loc 1 351 9 view .LVU840
 2767 0c70 1600000A 		beq	.L162		@,
 2768              	.LVL206:
 2769              	.L154:
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2770              		.loc 1 352 13 is_stmt 1 discriminator 3 view .LVU841
 2771              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2772              		.loc 1 352 29 is_stmt 0 discriminator 3 view .LVU842
 2773 0c74 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2774              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2775              		.loc 1 355 13 discriminator 3 view .LVU843
 2776 0c78 0910A0E1 		mov	r1, r9	@, tmp156
 2777 0c7c 0700A0E1 		mov	r0, r7	@, fp
 2778              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2779              		.loc 1 352 18 discriminator 3 view .LVU844
 2780 0c80 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2781              	.LVL207:
 2782              		.loc 1 355 13 is_stmt 1 discriminator 3 view .LVU845
 2783              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2784              		.loc 1 351 58 is_stmt 0 discriminator 3 view .LVU846
 2785 0c84 014084E2 		add	r4, r4, #1	@ xx, xx,
 2786              	.LVL208:
 2787              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2788              		.loc 1 355 81 discriminator 3 view .LVU847
 2789 0c88 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2790              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2791              		.loc 1 355 61 discriminator 3 view .LVU848
 2792 0c8c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2793              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2794              		.loc 1 355 13 discriminator 3 view .LVU849
 2795 0c90 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2796 0c94 7330EFE6 		uxtb	r3, r3	@, tmp146
 2797 0c98 00C08DE5 		str	ip, [sp]	@ tmp151,
 2798 0c9c 7220EFE6 		uxtb	r2, r2	@, data
 2799              	.LVL209:
 2800              		.loc 1 355 13 discriminator 3 view .LVU850
 2801 0ca0 FEFFFFEB 		bl	fprintf		@
 2802              	.LVL210:
 2803              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2804              		.loc 1 351 41 discriminator 3 view .LVU851
 2805 0ca4 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2806              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2807              		.loc 1 351 9 discriminator 3 view .LVU852
 2808 0ca8 040053E1 		cmp	r3, r4	@ _12, xx
 2809 0cac F0FFFF8A 		bhi	.L154		@,
 2810 0cb0 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2811              	.LVL211:
 2812              	.L155:
 2813              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2814              		.loc 1 350 55 discriminator 2 view .LVU853
 2815 0cb4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2816              	.LVL212:
 2817              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2818              		.loc 1 350 5 discriminator 2 view .LVU854
 2819 0cb8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2820 0cbc E9FFFF3A 		bcc	.L153		@,
 2821              	.LVL213:
 2822              	.L152:
 356:armwave.c     ****         }
 357:armwave.c     ****     }
 358:armwave.c     **** 
 359:armwave.c     ****     fclose(fp);
 2823              		.loc 1 359 5 is_stmt 1 view .LVU855
 2824 0cc0 0700A0E1 		mov	r0, r7	@, fp
 2825              	@ armwave.c:360: }
 360:armwave.c     **** }
 2826              		.loc 1 360 1 is_stmt 0 view .LVU856
 2827 0cc4 0CD08DE2 		add	sp, sp, #12	@,,
 2828              		.cfi_remember_state
 2829              		.cfi_def_cfa_offset 28
 2830              		@ sp needed	@
 2831 0cc8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2832              		.cfi_restore 14
 2833              		.cfi_restore 9
 2834              		.cfi_restore 8
 2835              		.cfi_restore 7
 2836              		.cfi_restore 6
 2837              		.cfi_restore 5
 2838              		.cfi_restore 4
 2839              		.cfi_def_cfa_offset 0
 2840              	.LVL214:
 2841              	@ armwave.c:359:     fclose(fp);
 359:armwave.c     **** }
 2842              		.loc 1 359 5 view .LVU857
 2843 0ccc FEFFFFEA 		b	fclose		@
 2844              	.LVL215:
 2845              	.L162:
 2846              		.cfi_restore_state
 2847              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2848              		.loc 1 350 55 view .LVU858
 2849 0cd0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2850              	.LVL216:
 2851              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2852              		.loc 1 350 5 view .LVU859
 2853 0cd4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2854 0cd8 F5FFFF8A 		bhi	.L155		@,
 2855 0cdc F7FFFFEA 		b	.L152		@
 2856              	.L164:
 2857              		.align	2
 2858              	.L163:
 2859 0ce0 FC000000 		.word	.LC7
 2860 0ce4 00000000 		.word	g_armwave_state
 2861 0ce8 00010000 		.word	.LC8
 2862 0cec 04010000 		.word	.LC9
 2863 0cf0 0C010000 		.word	.LC10
 2864 0cf4 14010000 		.word	.LC11
 2865              		.cfi_endproc
 2866              	.LFE65:
 2868              		.align	2
 2869              		.global	armwave_test_init
 2870              		.syntax unified
 2871              		.arm
 2872              		.fpu vfp
 2874              	armwave_test_init:
 2875              	.LVL217:
 2876              	.LFB66:
 361:armwave.c     **** 
 362:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 363:armwave.c     **** {
 2877              		.loc 1 363 1 is_stmt 1 view -0
 2878              		.cfi_startproc
 2879              		@ args = 0, pretend = 0, frame = 0
 2880              		@ frame_needed = 0, uses_anonymous_args = 0
 364:armwave.c     ****     mod_depth = mod;
 2881              		.loc 1 364 5 view .LVU861
 2882              	@ armwave.c:364:     mod_depth = mod;
 2883              		.loc 1 364 15 is_stmt 0 view .LVU862
 2884 0cf8 9C309FE5 		ldr	r3, .L169+20	@ tmp128,
 2885              	@ armwave.c:363: {
 363:armwave.c     ****     mod_depth = mod;
 2886              		.loc 1 363 1 view .LVU863
 2887 0cfc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2888              		.cfi_def_cfa_offset 24
 2889              		.cfi_offset 4, -24
 2890              		.cfi_offset 5, -20
 2891              		.cfi_offset 6, -16
 2892              		.cfi_offset 7, -12
 2893              		.cfi_offset 8, -8
 2894              		.cfi_offset 14, -4
 2895 0d00 068B2DED 		vpush.64	{d8, d9, d10}	@
 2896              		.cfi_def_cfa_offset 48
 2897              		.cfi_offset 80, -48
 2898              		.cfi_offset 81, -44
 2899              		.cfi_offset 82, -40
 2900              		.cfi_offset 83, -36
 2901              		.cfi_offset 84, -32
 2902              		.cfi_offset 85, -28
 2903 0d04 94409FE5 		ldr	r4, .L169+24	@ ivtmp.105,
 2904              	.LBB6:
 2905              	.LBB7:
 2906              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2907              		.loc 1 87 32 view .LVU864
 2908 0d08 22AA9FED 		vldr.32	s20, .L169+16	@ tmp134,
 2909              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2910              		.loc 1 87 26 view .LVU865
 2911 0d0c 1D9B9FED 		vldr.64	d9, .L169	@ tmp143,
 2912              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2913              		.loc 1 87 49 view .LVU866
 2914 0d10 1E8B9FED 		vldr.64	d8, .L169+8	@ tmp137,
 2915              	.LBE7:
 2916              	.LBE6:
 2917              	@ armwave.c:364:     mod_depth = mod;
 2918              		.loc 1 364 15 view .LVU867
 2919 0d14 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 365:armwave.c     **** 
 366:armwave.c     ****     test_create_waveform();
 2920              		.loc 1 366 5 is_stmt 1 view .LVU868
 2921              	@ armwave.c:363: {
 363:armwave.c     ****     mod_depth = mod;
 2922              		.loc 1 363 1 is_stmt 0 view .LVU869
 2923 0d18 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2924 0d1c 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2925              	@ armwave.c:366:     test_create_waveform();
 2926              		.loc 1 366 5 view .LVU870
 2927 0d20 FEFFFFEB 		bl	test_create_waveform		@
 2928              	.LVL218:
 367:armwave.c     ****     test_create_gamma();
 2929              		.loc 1 367 5 is_stmt 1 view .LVU871
 2930              	.LBB9:
 2931              	.LBI6:
  81:armwave.c     **** {
 2932              		.loc 1 81 6 view .LVU872
  81:armwave.c     **** {
 2933              		.loc 1 81 6 is_stmt 0 view .LVU873
 2934 0d24 013084E2 		add	r3, r4, #1	@ _34, ivtmp.105,
 2935 0d28 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.105,
 2936 0d2c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2937              	.LVL219:
 2938              	.L166:
 2939              	.LBB8:
  87:armwave.c     ****     }
 2940              		.loc 1 87 9 is_stmt 1 view .LVU874
 2941              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2942              		.loc 1 87 32 is_stmt 0 view .LVU875
 2943 0d30 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.105
 2944              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2945              		.loc 1 87 26 view .LVU876
 2946 0d34 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2947              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2948              		.loc 1 87 32 view .LVU877
 2949 0d38 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2950 0d3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2951 0d40 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2952              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2953              		.loc 1 87 26 view .LVU878
 2954 0d44 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2955 0d48 FEFFFFEB 		bl	pow		@
 2956              	.LVL220:
 2957              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2958              		.loc 1 87 49 view .LVU879
 2959 0d4c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2960              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2961              		.loc 1 87 24 view .LVU880
 2962 0d50 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2963 0d54 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2964 0d58 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2965              	.LVL221:
 2966              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2967              		.loc 1 86 5 view .LVU881
 2968 0d5c 080054E1 		cmp	r4, r8	@ ivtmp.105, _35
 2969 0d60 F2FFFF1A 		bne	.L166		@,
 2970              	.LVL222:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2971              		.loc 1 86 5 view .LVU882
 2972              	.LBE8:
 2973              	.LBE9:
 368:armwave.c     **** 
 369:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2974              		.loc 1 369 5 is_stmt 1 view .LVU883
 2975 0d64 0710A0E1 		mov	r1, r7	@, render_height
 2976 0d68 0600A0E1 		mov	r0, r6	@, render_width
 2977 0d6c A3FCFFEB 		bl	armwave_setup_render.constprop.0		@
 2978              	.LVL223:
 370:armwave.c     **** 
 371:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2979              		.loc 1 371 5 view .LVU884
 2980              	@ armwave.c:372: }
 372:armwave.c     **** }
 2981              		.loc 1 372 1 is_stmt 0 view .LVU885
 2982 0d70 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2983              		.cfi_restore 84
 2984              		.cfi_restore 85
 2985              		.cfi_restore 82
 2986              		.cfi_restore 83
 2987              		.cfi_restore 80
 2988              		.cfi_restore 81
 2989              		.cfi_def_cfa_offset 24
 2990              	@ armwave.c:371:     printf("armwave version: %s\n", ARMWAVE_VER);
 371:armwave.c     **** }
 2991              		.loc 1 371 5 view .LVU886
 2992 0d74 28109FE5 		ldr	r1, .L169+28	@,
 2993 0d78 28009FE5 		ldr	r0, .L169+32	@,
 2994              	@ armwave.c:372: }
 2995              		.loc 1 372 1 view .LVU887
 2996 0d7c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2997              		.cfi_restore 14
 2998              		.cfi_restore 8
 2999              		.cfi_restore 7
 3000              		.cfi_restore 6
 3001              		.cfi_restore 5
 3002              		.cfi_restore 4
 3003              		.cfi_def_cfa_offset 0
 3004              	.LVL224:
 3005              	@ armwave.c:371:     printf("armwave version: %s\n", ARMWAVE_VER);
 371:armwave.c     **** }
 3006              		.loc 1 371 5 view .LVU888
 3007 0d80 FEFFFFEA 		b	printf		@
 3008              	.LVL225:
 3009              	.L170:
 3010 0d84 0000A0E1 		.align	3
 3011              	.L169:
 3012 0d88 000000C0 		.word	-1073741824
 3013 0d8c CCCCEC3F 		.word	1072483532
 3014 0d90 00000000 		.word	0
 3015 0d94 00E06F40 		.word	1081073664
 3016 0d98 00007F43 		.word	1132396544
 3017 0d9c 00000000 		.word	.LANCHOR1
 3018 0da0 FFFFFFFF 		.word	gamma_table-1
 3019 0da4 24010000 		.word	.LC12
 3020 0da8 2C010000 		.word	.LC13
 3021              		.cfi_endproc
 3022              	.LFE66:
 3024              		.global	__aeabi_uidiv
 3025              		.align	2
 3026              		.global	armwave_test_generate
 3027              		.syntax unified
 3028              		.arm
 3029              		.fpu vfp
 3031              	armwave_test_generate:
 3032              	.LFB67:
 373:armwave.c     **** 
 374:armwave.c     **** void armwave_test_generate()
 375:armwave.c     **** {
 3033              		.loc 1 375 1 is_stmt 1 view -0
 3034              		.cfi_startproc
 3035              		@ args = 0, pretend = 0, frame = 8
 3036              		@ frame_needed = 0, uses_anonymous_args = 0
 376:armwave.c     ****     uint32_t yy;
 3037              		.loc 1 376 5 view .LVU890
 377:armwave.c     **** 
 378:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3038              		.loc 1 378 5 view .LVU891
 3039              	@ armwave.c:375: {
 375:armwave.c     ****     uint32_t yy;
 3040              		.loc 1 375 1 is_stmt 0 view .LVU892
 3041 0dac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3042              		.cfi_def_cfa_offset 36
 3043              		.cfi_offset 4, -36
 3044              		.cfi_offset 5, -32
 3045              		.cfi_offset 6, -28
 3046              		.cfi_offset 7, -24
 3047              		.cfi_offset 8, -20
 3048              		.cfi_offset 9, -16
 3049              		.cfi_offset 10, -12
 3050              		.cfi_offset 11, -8
 3051              		.cfi_offset 14, -4
 3052              	@ armwave.c:378:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3053              		.loc 1 378 5 view .LVU893
 3054 0db0 0010A0E3 		mov	r1, #0	@,
 3055 0db4 44419FE5 		ldr	r4, .L189	@ tmp269,
 3056              	@ armwave.c:375: {
 375:armwave.c     ****     uint32_t yy;
 3057              		.loc 1 375 1 view .LVU894
 3058 0db8 0CD04DE2 		sub	sp, sp, #12	@,,
 3059              		.cfi_def_cfa_offset 48
 3060              	@ armwave.c:378:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3061              		.loc 1 378 5 view .LVU895
 3062 0dbc 382094E5 		ldr	r2, [r4, #56]	@, g_armwave_state.size
 3063 0dc0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3064 0dc4 FEFFFFEB 		bl	memset		@
 3065              	.LVL226:
 379:armwave.c     **** 
 380:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3066              		.loc 1 380 5 is_stmt 1 view .LVU896
 3067              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3068              		.loc 1 380 45 is_stmt 0 view .LVU897
 3069 0dc8 2C5094E5 		ldr	r5, [r4, #44]	@ _72, g_armwave_state.slice_height
 3070              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3071              		.loc 1 380 5 view .LVU898
 3072 0dcc 020B55E3 		cmp	r5, #2048	@ _72,
 3073 0dd0 4800008A 		bhi	.L171		@,
 3074 0dd4 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3075              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3076              		.loc 1 380 12 view .LVU899
 3077 0dd8 00A0A0E3 		mov	r10, #0	@ yy,
 3078              	.LVL227:
 3079              	.L177:
 381:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3080              		.loc 1 381 9 is_stmt 1 discriminator 3 view .LVU900
 3081 0ddc 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 3082              	.LBB12:
 3083              	.LBB13:
 3084              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3085              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU901
 3086 0de0 280094E5 		ldr	r0, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3087              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3088              		.loc 1 110 5 discriminator 3 view .LVU902
 3089 0de4 000056E3 		cmp	r6, #0	@ prephitmp_171,
 3090              	.LBE13:
 3091              	.LBE12:
 3092              	@ armwave.c:381:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3093              		.loc 1 381 9 discriminator 3 view .LVU903
 3094 0de8 309094E5 		ldr	r9, [r4, #48]	@ _4, g_armwave_state.slice_record_height
 3095              	.LVL228:
 3096              	.LBB15:
 3097              	.LBI12:
  99:armwave.c     **** {
 3098              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU904
 3099              	.LBB14:
 101:armwave.c     ****     uint32_t value, word;
 3100              		.loc 1 101 5 discriminator 3 view .LVU905
 102:armwave.c     ****     uint8_t *wave_base;
 3101              		.loc 1 102 5 discriminator 3 view .LVU906
 103:armwave.c     ****     uint8_t *write_buffer_base;
 3102              		.loc 1 103 5 discriminator 3 view .LVU907
 104:armwave.c     ****     uint8_t *write_buffer;
 3103              		.loc 1 104 5 discriminator 3 view .LVU908
 105:armwave.c     ****     
 3104              		.loc 1 105 5 discriminator 3 view .LVU909
 107:armwave.c     **** 
 3105              		.loc 1 107 5 discriminator 3 view .LVU910
 3106              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3107              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU911
 3108 0dec 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.bitdepth_height, _3
 3109              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3110              		.loc 1 107 40 discriminator 3 view .LVU912
 3111 0df0 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 3112              	.LVL229:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3113              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU913
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3114              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU914
 3115 0df4 3900000A 		beq	.L173		@,
 3116              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3117              		.loc 1 110 11 view .LVU915
 3118 0df8 0080A0E3 		mov	r8, #0	@ w,
 3119 0dfc 043043E2 		sub	r3, r3, #4	@ _77, _3,
 3120              	.LVL230:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3121              		.loc 1 110 11 view .LVU916
 3122 0e00 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 3123              	.LVL231:
 3124              	.L176:
 111:armwave.c     **** 
 3125              		.loc 1 111 9 is_stmt 1 view .LVU917
 3126              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3127              		.loc 1 111 64 is_stmt 0 view .LVU918
 3128 0e04 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3129              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3130              		.loc 1 115 9 view .LVU919
 3131 0e08 000059E3 		cmp	r9, #0	@ _4,
 3132              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3133              		.loc 1 111 36 view .LVU920
 3134 0e0c 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 3135              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3136              		.loc 1 111 64 view .LVU921
 3137 0e10 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 3138              	.LVL232:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3139              		.loc 1 115 9 is_stmt 1 view .LVU922
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3140              		.loc 1 115 9 is_stmt 0 view .LVU923
 3141 0e14 2D00000A 		beq	.L174		@,
 3142 0e18 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 3143 0e1c 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 3144              	.LVL233:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3145              		.loc 1 115 9 view .LVU924
 3146 0e20 03E08EE0 		add	lr, lr, r3	@ ivtmp.111, _16, tmp205
 3147              	.LVL234:
 3148              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3149              		.loc 1 115 16 view .LVU925
 3150 0e24 0010A0E3 		mov	r1, #0	@ yy,
 3151              	.LVL235:
 3152              	.L175:
 116:armwave.c     **** 
 3153              		.loc 1 116 13 is_stmt 1 view .LVU926
 3154              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 3155              		.loc 1 116 18 is_stmt 0 view .LVU927
 3156 0e28 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 3157              	.LVL236:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3158              		.loc 1 118 13 is_stmt 1 view .LVU928
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3159              		.loc 1 119 17 view .LVU929
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3160              		.loc 1 120 17 view .LVU930
 121:armwave.c     ****                 word >>= 8;
 3161              		.loc 1 121 17 view .LVU931
 3162              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3163              		.loc 1 119 45 is_stmt 0 view .LVU932
 3164 0e2c 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3165              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3166              		.loc 1 120 63 view .LVU933
 3167 0e30 286094E5 		ldr	r6, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3168              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3169              		.loc 1 119 37 view .LVU934
 3170 0e34 73C0EFE6 		uxtb	ip, r3	@ word, word
 3171              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3172              		.loc 1 122 22 view .LVU935
 3173 0e38 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 3174              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3175              		.loc 1 121 47 view .LVU936
 3176 0e3c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 3177              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3178              		.loc 1 119 37 view .LVU937
 3179 0e40 7550EFE6 		uxtb	r5, r5	@ word, word
 3180              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3181              		.loc 1 121 47 view .LVU938
 3182 0e44 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.bitdepth_height, yy, tmp210
 3183              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3184              		.loc 1 120 63 view .LVU939
 3185 0e48 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 3186              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3187              		.loc 1 122 22 view .LVU940
 3188 0e4c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3189              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3190              		.loc 1 121 47 view .LVU941
 3191 0e50 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 3192              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3193              		.loc 1 119 37 view .LVU942
 3194 0e54 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3195              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3196              		.loc 1 122 22 view .LVU943
 3197 0e58 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3198              	.LVL237:
 3199              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3200              		.loc 1 121 47 view .LVU944
 3201 0e5c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 3202 0e60 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 3203              	.LVL238:
 122:armwave.c     ****             }
 3204              		.loc 1 122 17 is_stmt 1 view .LVU945
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3205              		.loc 1 119 17 view .LVU946
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3206              		.loc 1 120 17 view .LVU947
 121:armwave.c     ****                 word >>= 8;
 3207              		.loc 1 121 17 view .LVU948
 3208              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3209              		.loc 1 119 45 is_stmt 0 view .LVU949
 3210 0e64 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3211              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3212              		.loc 1 120 63 view .LVU950
 3213 0e68 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 3214              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3215              		.loc 1 121 47 view .LVU951
 3216 0e6c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 3217              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3218              		.loc 1 120 63 view .LVU952
 3219 0e70 286094E5 		ldr	r6, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3220              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3221              		.loc 1 121 47 view .LVU953
 3222 0e74 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.bitdepth_height, tmp226, tmp224
 3223              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3224              		.loc 1 120 63 view .LVU954
 3225 0e78 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 3226              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3227              		.loc 1 115 37 view .LVU955
 3228 0e7c 041081E2 		add	r1, r1, #4	@ yy, yy,
 3229              	.LVL239:
 3230              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3231              		.loc 1 121 47 view .LVU956
 3232 0e80 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 3233              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3234              		.loc 1 115 9 view .LVU957
 3235 0e84 010059E1 		cmp	r9, r1	@ _4, yy
 3236              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3237              		.loc 1 121 47 view .LVU958
 3238 0e88 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 3239 0e8c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 3240              	.LVL240:
 122:armwave.c     ****             }
 3241              		.loc 1 122 17 is_stmt 1 view .LVU959
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3242              		.loc 1 119 17 view .LVU960
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3243              		.loc 1 120 17 view .LVU961
 121:armwave.c     ****                 word >>= 8;
 3244              		.loc 1 121 17 view .LVU962
 3245              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3246              		.loc 1 119 45 is_stmt 0 view .LVU963
 3247 0e90 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3248              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3249              		.loc 1 120 63 view .LVU964
 3250 0e94 285094E5 		ldr	r5, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3251              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3252              		.loc 1 121 47 view .LVU965
 3253 0e98 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 3254 0e9c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.bitdepth_height, tmp241, tmp239
 3255 0ea0 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 3256 0ea4 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 3257 0ea8 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 122:armwave.c     ****             }
 3258              		.loc 1 122 17 is_stmt 1 view .LVU966
 3259              	.LVL241:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3260              		.loc 1 119 17 view .LVU967
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3261              		.loc 1 120 17 view .LVU968
 121:armwave.c     ****                 word >>= 8;
 3262              		.loc 1 121 17 view .LVU969
 3263              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3264              		.loc 1 119 45 is_stmt 0 view .LVU970
 3265 0eac 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3266              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3267              		.loc 1 120 63 view .LVU971
 3268 0eb0 28C094E5 		ldr	ip, [r4, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3269              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3270              		.loc 1 121 47 view .LVU972
 3271 0eb4 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 3272 0eb8 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.bitdepth_height, tmp255, tmp253
 3273 0ebc 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 3274 0ec0 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 3275 0ec4 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 122:armwave.c     ****             }
 3276              		.loc 1 122 17 is_stmt 1 view .LVU973
 3277              	.LVL242:
 3278              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3279              		.loc 1 115 9 is_stmt 0 view .LVU974
 3280 0ec8 D6FFFF8A 		bhi	.L175		@,
 3281 0ecc 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3282              	.LVL243:
 3283              	.L174:
 3284              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3285              		.loc 1 110 44 view .LVU975
 3286 0ed0 018088E2 		add	r8, r8, #1	@ w, w,
 3287              	.LVL244:
 3288              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3289              		.loc 1 110 5 view .LVU976
 3290 0ed4 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 3291 0ed8 C9FFFF3A 		bcc	.L176		@,
 3292 0edc 2C5094E5 		ldr	r5, [r4, #44]	@ _72, g_armwave_state.slice_height
 3293              	.LVL245:
 3294              	.L173:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3295              		.loc 1 110 5 view .LVU977
 3296              	.LBE14:
 3297              	.LBE15:
 3298              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3299              		.loc 1 380 28 discriminator 3 view .LVU978
 3300 0ee0 0510A0E1 		mov	r1, r5	@, _72
 3301 0ee4 020BA0E3 		mov	r0, #2048	@,
 3302              	.LVL246:
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3303              		.loc 1 380 28 discriminator 3 view .LVU979
 3304 0ee8 FEFFFFEB 		bl	__aeabi_uidiv		@
 3305              	.LVL247:
 3306              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3307              		.loc 1 380 63 discriminator 3 view .LVU980
 3308 0eec 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 3309              	.LVL248:
 3310              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3311              		.loc 1 380 5 discriminator 3 view .LVU981
 3312 0ef0 0A0050E1 		cmp	r0, r10	@, yy
 3313 0ef4 B8FFFF8A 		bhi	.L177		@,
 3314              	.LVL249:
 3315              	.L171:
 3316              	@ armwave.c:383: }
 382:armwave.c     ****     }
 383:armwave.c     **** }
 3317              		.loc 1 383 1 view .LVU982
 3318 0ef8 0CD08DE2 		add	sp, sp, #12	@,,
 3319              		.cfi_def_cfa_offset 36
 3320              		@ sp needed	@
 3321 0efc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3322              	.L190:
 3323              		.align	2
 3324              	.L189:
 3325 0f00 00000000 		.word	g_armwave_state
 3326              		.cfi_endproc
 3327              	.LFE67:
 3329              		.align	2
 3330              		.global	armwave_test_get_buffer
 3331              		.syntax unified
 3332              		.arm
 3333              		.fpu vfp
 3335              	armwave_test_get_buffer:
 3336              	.LFB68:
 384:armwave.c     **** 
 385:armwave.c     **** PyObject *armwave_test_get_buffer()
 386:armwave.c     **** {
 3337              		.loc 1 386 1 is_stmt 1 view -0
 3338              		.cfi_startproc
 3339              		@ args = 0, pretend = 0, frame = 0
 3340              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     PyObject *mv;
 3341              		.loc 1 387 5 view .LVU984
 388:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3342              		.loc 1 388 5 view .LVU985
 3343              	@ armwave.c:386: {
 386:armwave.c     ****     PyObject *mv;
 3344              		.loc 1 386 1 is_stmt 0 view .LVU986
 3345 0f04 30402DE9 		push	{r4, r5, lr}	@
 3346              		.cfi_def_cfa_offset 12
 3347              		.cfi_offset 4, -12
 3348              		.cfi_offset 5, -8
 3349              		.cfi_offset 14, -4
 3350              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3351              		.loc 1 388 22 view .LVU987
 3352 0f08 2C00A0E3 		mov	r0, #44	@,
 3353              	@ armwave.c:386: {
 386:armwave.c     ****     PyObject *mv;
 3354              		.loc 1 386 1 view .LVU988
 3355 0f0c 0CD04DE2 		sub	sp, sp, #12	@,,
 3356              		.cfi_def_cfa_offset 24
 3357              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3358              		.loc 1 388 22 view .LVU989
 3359 0f10 FEFFFFEB 		bl	malloc		@
 3360              	.LVL250:
 3361              	@ armwave.c:390:  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 389:armwave.c     ****     
 390:armwave.c     ****  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3362              		.loc 1 390 3 view .LVU990
 3363 0f14 3C409FE5 		ldr	r4, .L193	@ tmp118,
 3364              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 388:armwave.c     ****     
 3365              		.loc 1 388 22 view .LVU991
 3366 0f18 0050A0E1 		mov	r5, r0	@ tmp117,
 3367              	.LVL251:
 3368              		.loc 1 390 3 is_stmt 1 view .LVU992
 3369 0f1c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3370              	.LVL252:
 3371              		.loc 1 390 3 is_stmt 0 view .LVU993
 3372 0f20 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3373              	.LVL253:
 391:armwave.c     **** 
 392:armwave.c     ****     /*
 393:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 394:armwave.c     ****         armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 395:armwave.c     ****     } else {
 396:armwave.c     ****         armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 397:armwave.c     ****     }
 398:armwave.c     ****     */
 399:armwave.c     **** 
 400:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3374              		.loc 1 400 5 is_stmt 1 view .LVU994
 3375              	@ armwave.c:400:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3376              		.loc 1 400 79 is_stmt 0 view .LVU995
 3377 0f24 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 3378              	@ armwave.c:400:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3379              		.loc 1 400 5 view .LVU996
 3380 0f28 08C0A0E3 		mov	ip, #8	@ tmp125,
 3381 0f2c 0110A0E3 		mov	r1, #1	@ tmp126,
 3382 0f30 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3383 0f34 02108DE8 		stm	sp, {r1, ip}	@,,
 3384 0f38 4C2094E5 		ldr	r2, [r4, #76]	@, g_armwave_state.out_pixbuf
 3385 0f3c 0500A0E1 		mov	r0, r5	@, tmp117
 3386 0f40 0010A0E3 		mov	r1, #0	@,
 3387 0f44 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3388              	.LVL254:
 401:armwave.c     **** 
 402:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3389              		.loc 1 402 5 is_stmt 1 view .LVU997
 3390              	@ armwave.c:402:     mv = PyMemoryView_FromBuffer(buf);
 3391              		.loc 1 402 10 is_stmt 0 view .LVU998
 3392 0f48 0500A0E1 		mov	r0, r5	@, tmp117
 3393              	@ armwave.c:403: }
 403:armwave.c     **** }
 3394              		.loc 1 403 1 view .LVU999
 3395 0f4c 0CD08DE2 		add	sp, sp, #12	@,,
 3396              		.cfi_def_cfa_offset 12
 3397              		@ sp needed	@
 3398 0f50 3040BDE8 		pop	{r4, r5, lr}	@
 3399              		.cfi_restore 14
 3400              		.cfi_restore 5
 3401              		.cfi_restore 4
 3402              		.cfi_def_cfa_offset 0
 3403              	.LVL255:
 3404              	@ armwave.c:402:     mv = PyMemoryView_FromBuffer(buf);
 402:armwave.c     **** }
 3405              		.loc 1 402 10 view .LVU1000
 3406 0f54 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3407              	.LVL256:
 3408              	.L194:
 402:armwave.c     **** }
 3409              		.loc 1 402 10 view .LVU1001
 3410              		.align	2
 3411              	.L193:
 3412 0f58 00000000 		.word	g_armwave_state
 3413              		.cfi_endproc
 3414              	.LFE68:
 3416              		.align	2
 3417              		.global	armwave_test_dump_buffer_to_ppm
 3418              		.syntax unified
 3419              		.arm
 3420              		.fpu vfp
 3422              	armwave_test_dump_buffer_to_ppm:
 3423              	.LVL257:
 3424              	.LFB69:
 404:armwave.c     **** 
 405:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 406:armwave.c     **** {
 3425              		.loc 1 406 1 is_stmt 1 view -0
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 0
 3428              		@ frame_needed = 0, uses_anonymous_args = 0
 3429              		@ link register save eliminated.
 407:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3430              		.loc 1 407 5 view .LVU1003
 3431 0f5c 08309FE5 		ldr	r3, .L196	@ tmp112,
 3432 0f60 0010A0E1 		mov	r1, r0	@, fn
 3433 0f64 4C0093E5 		ldr	r0, [r3, #76]	@, g_armwave_state.out_pixbuf
 3434              	.LVL258:
 3435              		.loc 1 407 5 is_stmt 0 view .LVU1004
 3436 0f68 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3437              	.LVL259:
 3438              	.L197:
 3439              		.loc 1 407 5 view .LVU1005
 3440              		.align	2
 3441              	.L196:
 3442 0f6c 00000000 		.word	g_armwave_state
 3443              		.cfi_endproc
 3444              	.LFE69:
 3446              		.align	2
 3447              		.global	armwave_cleanup
 3448              		.syntax unified
 3449              		.arm
 3450              		.fpu vfp
 3452              	armwave_cleanup:
 3453              	.LFB70:
 408:armwave.c     **** }
 409:armwave.c     **** 
 410:armwave.c     **** void armwave_cleanup()
 411:armwave.c     **** {
 3454              		.loc 1 411 1 is_stmt 1 view -0
 3455              		.cfi_startproc
 3456              		@ args = 0, pretend = 0, frame = 0
 3457              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3458              		.loc 1 412 5 view .LVU1007
 3459              	@ armwave.c:411: {
 411:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3460              		.loc 1 411 1 is_stmt 0 view .LVU1008
 3461 0f70 10402DE9 		push	{r4, lr}	@
 3462              		.cfi_def_cfa_offset 8
 3463              		.cfi_offset 4, -8
 3464              		.cfi_offset 14, -4
 3465              	@ armwave.c:412:     free(g_armwave_state.out_pixbuf);
 3466              		.loc 1 412 25 view .LVU1009
 3467 0f74 28409FE5 		ldr	r4, .L200	@ tmp113,
 3468              	@ armwave.c:412:     free(g_armwave_state.out_pixbuf);
 3469              		.loc 1 412 5 view .LVU1010
 3470 0f78 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3471 0f7c FEFFFFEB 		bl	free		@
 3472              	.LVL260:
 413:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3473              		.loc 1 413 5 is_stmt 1 view .LVU1011
 3474 0f80 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3475 0f84 FEFFFFEB 		bl	free		@
 3476              	.LVL261:
 414:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3477              		.loc 1 414 5 view .LVU1012
 3478 0f88 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.xcoord_to_xpixel
 3479 0f8c FEFFFFEB 		bl	free		@
 3480              	.LVL262:
 415:armwave.c     **** 
 416:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3481              		.loc 1 416 5 view .LVU1013
 3482              	@ armwave.c:416:     g_armwave_state.out_pixbuf = NULL;
 3483              		.loc 1 416 32 is_stmt 0 view .LVU1014
 3484 0f90 0030A0E3 		mov	r3, #0	@ tmp120,
 3485 0f94 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.out_pixbuf
 417:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3486              		.loc 1 417 5 is_stmt 1 view .LVU1015
 3487              	@ armwave.c:417:     g_armwave_state.ch1_buffer = NULL;
 3488              		.loc 1 417 32 is_stmt 0 view .LVU1016
 3489 0f98 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 418:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3490              		.loc 1 418 5 is_stmt 1 view .LVU1017
 3491              	@ armwave.c:418:     g_armwave_state.xcoord_to_xpixel = NULL;
 3492              		.loc 1 418 38 is_stmt 0 view .LVU1018
 3493 0f9c 683084E5 		str	r3, [r4, #104]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3494              	@ armwave.c:419: }
 419:armwave.c     **** }
 3495              		.loc 1 419 1 view .LVU1019
 3496 0fa0 1080BDE8 		pop	{r4, pc}	@
 3497              	.L201:
 3498              		.align	2
 3499              	.L200:
 3500 0fa4 00000000 		.word	g_armwave_state
 3501              		.cfi_endproc
 3502              	.LFE70:
 3504              		.section	.text.startup,"ax",%progbits
 3505              		.align	2
 3506              		.global	main
 3507              		.syntax unified
 3508              		.arm
 3509              		.fpu vfp
 3511              	main:
 3512              	.LVL263:
 3513              	.LFB71:
 420:armwave.c     **** 
 421:armwave.c     **** int main(int argc, char *argv[])
 422:armwave.c     **** {
 3514              		.loc 1 422 1 is_stmt 1 view -0
 3515              		.cfi_startproc
 3516              		@ args = 0, pretend = 0, frame = 8
 3517              		@ frame_needed = 0, uses_anonymous_args = 0
 423:armwave.c     ****     uint32_t *out_buffer;
 3518              		.loc 1 423 5 view .LVU1021
 424:armwave.c     ****     uint32_t xx, yy, n;
 3519              		.loc 1 424 5 view .LVU1022
 425:armwave.c     **** 
 426:armwave.c     ****     //printf("Starting armwave...\n");
 427:armwave.c     ****     armwave_init();
 3520              		.loc 1 427 5 view .LVU1023
 3521              	.LBB20:
 3522              	.LBI20:
 128:armwave.c     **** {
 3523              		.loc 1 128 6 view .LVU1024
 3524              	.LBB21:
 130:armwave.c     **** }
 3525              		.loc 1 130 5 view .LVU1025
 3526              	.LBE21:
 3527              	.LBE20:
 3528              	@ armwave.c:422: {
 422:armwave.c     ****     uint32_t *out_buffer;
 3529              		.loc 1 422 1 is_stmt 0 view .LVU1026
 3530 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3531              		.cfi_def_cfa_offset 36
 3532              		.cfi_offset 4, -36
 3533              		.cfi_offset 5, -32
 3534              		.cfi_offset 6, -28
 3535              		.cfi_offset 7, -24
 3536              		.cfi_offset 8, -20
 3537              		.cfi_offset 9, -16
 3538              		.cfi_offset 10, -12
 3539              		.cfi_offset 11, -8
 3540              		.cfi_offset 14, -4
 3541 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3542              		.cfi_def_cfa_offset 48
 3543              	.LBB25:
 3544              	.LBB22:
 3545              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3546              		.loc 1 130 27 view .LVU1027
 3547 0008 70919FE5 		ldr	r9, .L222	@ tmp267,
 3548              	.LBE22:
 3549              	.LBE25:
 3550              	@ armwave.c:436:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 428:armwave.c     **** 
 429:armwave.c     ****     //printf("Creating test waveform...\n");
 430:armwave.c     ****     test_create_waveform();
 431:armwave.c     **** 
 432:armwave.c     ****     //printf("Creating gamma LUT...\n");
 433:armwave.c     ****     test_create_gamma();
 434:armwave.c     **** 
 435:armwave.c     ****     //printf("Setting up render...\n");
 436:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3551              		.loc 1 436 5 view .LVU1028
 3552 000c 70219FE5 		ldr	r2, .L222+4	@ ivtmp_191,
 3553              	.LBB26:
 3554              	.LBB23:
 3555              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3556              		.loc 1 130 27 view .LVU1029
 3557 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 3558              	.LBE23:
 3559              	.LBE26:
 3560              	@ armwave.c:436:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3561              		.loc 1 436 5 view .LVU1030
 3562 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 3563              	.LBB27:
 3564              	.LBB24:
 3565              	@ armwave.c:130:     g_armwave_state.flags = 0;
 130:armwave.c     **** }
 3566              		.loc 1 130 27 view .LVU1031
 3567 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 3568              	.LBE24:
 3569              	.LBE27:
 430:armwave.c     **** 
 3570              		.loc 1 430 5 is_stmt 1 view .LVU1032
 3571 001c FEFFFFEB 		bl	test_create_waveform		@
 3572              	.LVL264:
 433:armwave.c     **** 
 3573              		.loc 1 433 5 view .LVU1033
 3574 0020 FEFFFFEB 		bl	test_create_gamma		@
 3575              	.LVL265:
 3576              		.loc 1 436 5 view .LVU1034
 3577 0024 011CA0E3 		mov	r1, #256	@,
 3578 0028 020BA0E3 		mov	r0, #2048	@,
 3579 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3580              	.LVL266:
 437:armwave.c     **** 
 438:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 439:armwave.c     **** 
 440:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3581              		.loc 1 440 5 view .LVU1035
 3582              		.loc 1 440 5 is_stmt 0 view .LVU1036
 3583 0030 2C5099E5 		ldr	r5, [r9, #44]	@ _61, g_armwave_state.slice_height
 3584              	.LVL267:
 3585              	.L203:
 3586              	@ armwave.c:441:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 441:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3587              		.loc 1 441 9 view .LVU1037
 3588 0034 020B55E3 		cmp	r5, #2048	@ _61,
 3589 0038 4900008A 		bhi	.L211		@,
 3590 003c 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3591              	@ armwave.c:441:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3592              		.loc 1 441 16 view .LVU1038
 3593 0040 0080A0E3 		mov	r8, #0	@ yy,
 3594 0044 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 3595              	.LVL268:
 3596              	.L208:
 442:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 443:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3597              		.loc 1 443 13 is_stmt 1 discriminator 3 view .LVU1039
 3598 0048 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 3599              	.LBB28:
 3600              	.LBB29:
 3601              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3602              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU1040
 3603 004c 280099E5 		ldr	r0, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3604              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3605              		.loc 1 110 5 discriminator 3 view .LVU1041
 3606 0050 000056E3 		cmp	r6, #0	@ prephitmp_178,
 3607              	.LBE29:
 3608              	.LBE28:
 3609              	@ armwave.c:443:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3610              		.loc 1 443 13 discriminator 3 view .LVU1042
 3611 0054 30A099E5 		ldr	r10, [r9, #48]	@ _2, g_armwave_state.slice_record_height
 3612              	.LVL269:
 3613              	.LBB31:
 3614              	.LBI28:
  99:armwave.c     **** {
 3615              		.loc 1 99 6 is_stmt 1 discriminator 3 view .LVU1043
 3616              	.LBB30:
 101:armwave.c     ****     uint32_t value, word;
 3617              		.loc 1 101 5 discriminator 3 view .LVU1044
 102:armwave.c     ****     uint8_t *wave_base;
 3618              		.loc 1 102 5 discriminator 3 view .LVU1045
 103:armwave.c     ****     uint8_t *write_buffer_base;
 3619              		.loc 1 103 5 discriminator 3 view .LVU1046
 104:armwave.c     ****     uint8_t *write_buffer;
 3620              		.loc 1 104 5 discriminator 3 view .LVU1047
 105:armwave.c     ****     
 3621              		.loc 1 105 5 discriminator 3 view .LVU1048
 107:armwave.c     **** 
 3622              		.loc 1 107 5 discriminator 3 view .LVU1049
 3623              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3624              		.loc 1 107 63 is_stmt 0 discriminator 3 view .LVU1050
 3625 0058 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.bitdepth_height, _1
 3626              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 3627              		.loc 1 107 40 discriminator 3 view .LVU1051
 3628 005c 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 3629              	.LVL270:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3630              		.loc 1 110 5 is_stmt 1 discriminator 3 view .LVU1052
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3631              		.loc 1 110 5 is_stmt 0 discriminator 3 view .LVU1053
 3632 0060 3900000A 		beq	.L204		@,
 3633              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3634              		.loc 1 110 11 view .LVU1054
 3635 0064 0070A0E3 		mov	r7, #0	@ w,
 3636 0068 043043E2 		sub	r3, r3, #4	@ _81, _1,
 3637              	.LVL271:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3638              		.loc 1 110 11 view .LVU1055
 3639 006c 00308DE5 		str	r3, [sp]	@ _81, %sfp
 3640              	.LVL272:
 3641              	.L207:
 111:armwave.c     **** 
 3642              		.loc 1 111 9 is_stmt 1 view .LVU1056
 3643              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3644              		.loc 1 111 64 is_stmt 0 view .LVU1057
 3645 0070 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3646              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3647              		.loc 1 115 9 view .LVU1058
 3648 0074 00005AE3 		cmp	r10, #0	@ _2,
 3649              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3650              		.loc 1 111 36 view .LVU1059
 3651 0078 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 3652              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 3653              		.loc 1 111 64 view .LVU1060
 3654 007c 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 3655              	.LVL273:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3656              		.loc 1 115 9 is_stmt 1 view .LVU1061
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3657              		.loc 1 115 9 is_stmt 0 view .LVU1062
 3658 0080 2D00000A 		beq	.L205		@,
 3659 0084 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 3660 0088 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 3661              	.LVL274:
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3662              		.loc 1 115 9 view .LVU1063
 3663 008c 03E08EE0 		add	lr, lr, r3	@ ivtmp.124, _20, tmp202
 3664              	.LVL275:
 3665              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3666              		.loc 1 115 16 view .LVU1064
 3667 0090 0010A0E3 		mov	r1, #0	@ yy,
 3668              	.LVL276:
 3669              	.L206:
 116:armwave.c     **** 
 3670              		.loc 1 116 13 is_stmt 1 view .LVU1065
 3671              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 3672              		.loc 1 116 18 is_stmt 0 view .LVU1066
 3673 0094 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 3674              	.LVL277:
 118:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3675              		.loc 1 118 13 is_stmt 1 view .LVU1067
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3676              		.loc 1 119 17 view .LVU1068
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3677              		.loc 1 120 17 view .LVU1069
 121:armwave.c     ****                 word >>= 8;
 3678              		.loc 1 121 17 view .LVU1070
 3679              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3680              		.loc 1 119 45 is_stmt 0 view .LVU1071
 3681 0098 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3682              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3683              		.loc 1 120 63 view .LVU1072
 3684 009c 285099E5 		ldr	r5, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3685              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3686              		.loc 1 119 37 view .LVU1073
 3687 00a0 73C0EFE6 		uxtb	ip, r3	@ word, word
 3688              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3689              		.loc 1 122 22 view .LVU1074
 3690 00a4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3691              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3692              		.loc 1 121 47 view .LVU1075
 3693 00a8 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 3694              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3695              		.loc 1 119 37 view .LVU1076
 3696 00ac 7440EFE6 		uxtb	r4, r4	@ word, word
 3697              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3698              		.loc 1 121 47 view .LVU1077
 3699 00b0 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.bitdepth_height, yy, tmp207
 3700              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3701              		.loc 1 120 63 view .LVU1078
 3702 00b4 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 3703              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3704              		.loc 1 122 22 view .LVU1079
 3705 00b8 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3706              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3707              		.loc 1 121 47 view .LVU1080
 3708 00bc 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 3709              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3710              		.loc 1 119 37 view .LVU1081
 3711 00c0 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3712              	@ armwave.c:122:                 word >>= 8;
 122:armwave.c     ****             }
 3713              		.loc 1 122 22 view .LVU1082
 3714 00c4 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3715              	.LVL278:
 3716              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3717              		.loc 1 121 47 view .LVU1083
 3718 00c8 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 3719 00cc 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 3720              	.LVL279:
 122:armwave.c     ****             }
 3721              		.loc 1 122 17 is_stmt 1 view .LVU1084
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3722              		.loc 1 119 17 view .LVU1085
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3723              		.loc 1 120 17 view .LVU1086
 121:armwave.c     ****                 word >>= 8;
 3724              		.loc 1 121 17 view .LVU1087
 3725              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3726              		.loc 1 119 45 is_stmt 0 view .LVU1088
 3727 00d0 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3728              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3729              		.loc 1 120 63 view .LVU1089
 3730 00d4 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3731              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3732              		.loc 1 121 47 view .LVU1090
 3733 00d8 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3734              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3735              		.loc 1 120 63 view .LVU1091
 3736 00dc 285099E5 		ldr	r5, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3737              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3738              		.loc 1 121 47 view .LVU1092
 3739 00e0 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.bitdepth_height, tmp223, tmp221
 3740              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3741              		.loc 1 120 63 view .LVU1093
 3742 00e4 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3743              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3744              		.loc 1 115 37 view .LVU1094
 3745 00e8 041081E2 		add	r1, r1, #4	@ yy, yy,
 3746              	.LVL280:
 3747              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3748              		.loc 1 121 47 view .LVU1095
 3749 00ec 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3750              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3751              		.loc 1 115 9 view .LVU1096
 3752 00f0 01005AE1 		cmp	r10, r1	@ _2, yy
 3753              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3754              		.loc 1 121 47 view .LVU1097
 3755 00f4 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3756 00f8 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3757              	.LVL281:
 122:armwave.c     ****             }
 3758              		.loc 1 122 17 is_stmt 1 view .LVU1098
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3759              		.loc 1 119 17 view .LVU1099
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3760              		.loc 1 120 17 view .LVU1100
 121:armwave.c     ****                 word >>= 8;
 3761              		.loc 1 121 17 view .LVU1101
 3762              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3763              		.loc 1 119 45 is_stmt 0 view .LVU1102
 3764 00fc 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3765              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3766              		.loc 1 120 63 view .LVU1103
 3767 0100 284099E5 		ldr	r4, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3768              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3769              		.loc 1 121 47 view .LVU1104
 3770 0104 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3771 0108 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.bitdepth_height, tmp238, tmp236
 3772 010c 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3773 0110 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3774 0114 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 122:armwave.c     ****             }
 3775              		.loc 1 122 17 is_stmt 1 view .LVU1105
 3776              	.LVL282:
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3777              		.loc 1 119 17 view .LVU1106
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3778              		.loc 1 120 17 view .LVU1107
 121:armwave.c     ****                 word >>= 8;
 3779              		.loc 1 121 17 view .LVU1108
 3780              	@ armwave.c:119:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 119:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 3781              		.loc 1 119 45 is_stmt 0 view .LVU1109
 3782 0118 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3783              	@ armwave.c:120:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 120:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3784              		.loc 1 120 63 view .LVU1110
 3785 011c 28C099E5 		ldr	ip, [r9, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3786              	@ armwave.c:121:                 *(write_buffer + scale_value) += 1;
 121:armwave.c     ****                 word >>= 8;
 3787              		.loc 1 121 47 view .LVU1111
 3788 0120 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3789 0124 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.bitdepth_height, tmp252, tmp250
 3790 0128 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3791 012c 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3792 0130 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 122:armwave.c     ****             }
 3793              		.loc 1 122 17 is_stmt 1 view .LVU1112
 3794              	.LVL283:
 3795              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3796              		.loc 1 115 9 is_stmt 0 view .LVU1113
 3797 0134 D6FFFF8A 		bhi	.L206		@,
 3798 0138 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3799              	.LVL284:
 3800              	.L205:
 3801              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3802              		.loc 1 110 44 view .LVU1114
 3803 013c 017087E2 		add	r7, r7, #1	@ w, w,
 3804              	.LVL285:
 3805              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3806              		.loc 1 110 5 view .LVU1115
 3807 0140 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3808 0144 C9FFFF3A 		bcc	.L207		@,
 3809 0148 2C5099E5 		ldr	r5, [r9, #44]	@ _61, g_armwave_state.slice_height
 3810              	.LVL286:
 3811              	.L204:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3812              		.loc 1 110 5 view .LVU1116
 3813              	.LBE30:
 3814              	.LBE31:
 3815              	@ armwave.c:441:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 441:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3816              		.loc 1 441 32 discriminator 3 view .LVU1117
 3817 014c 0510A0E1 		mov	r1, r5	@, _61
 3818 0150 020BA0E3 		mov	r0, #2048	@,
 3819              	.LVL287:
 441:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3820              		.loc 1 441 32 discriminator 3 view .LVU1118
 3821 0154 FEFFFFEB 		bl	__aeabi_uidiv		@
 3822              	.LVL288:
 3823              	@ armwave.c:441:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 441:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3824              		.loc 1 441 67 discriminator 3 view .LVU1119
 3825 0158 018088E2 		add	r8, r8, #1	@ yy, yy,
 3826              	.LVL289:
 3827              	@ armwave.c:441:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 441:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3828              		.loc 1 441 9 discriminator 3 view .LVU1120
 3829 015c 080050E1 		cmp	r0, r8	@, yy
 3830 0160 B8FFFF8A 		bhi	.L208		@,
 3831              	.LVL290:
 3832              	.L211:
 3833              	@ armwave.c:440:     for(n = 0; n < 5000; n++) {
 440:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3834              		.loc 1 440 5 discriminator 2 view .LVU1121
 3835 0164 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3836 0168 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3837 016c 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3838 0170 AFFFFF1A 		bne	.L203		@,
 3839 0174 0300A0E1 		mov	r0, r3	@, ivtmp_191
 444:armwave.c     ****         }
 445:armwave.c     ****     }
 446:armwave.c     **** 
 447:armwave.c     ****     /*
 448:armwave.c     ****     printf("Creating pixbuf\n");
 449:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 450:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 451:armwave.c     **** 
 452:armwave.c     ****     printf("Dumping pixbuf\n");
 453:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 454:armwave.c     ****     */
 455:armwave.c     **** 
 456:armwave.c     ****     return 0;
 3840              		.loc 1 456 5 is_stmt 1 view .LVU1122
 3841              	@ armwave.c:457: }
 457:armwave.c     **** }...
 3842              		.loc 1 457 1 is_stmt 0 view .LVU1123
 3843 0178 0CD08DE2 		add	sp, sp, #12	@,,
 3844              		.cfi_def_cfa_offset 36
 3845              		@ sp needed	@
 3846 017c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3847              	.L223:
 3848              		.align	2
 3849              	.L222:
 3850 0180 00000000 		.word	g_armwave_state
 3851 0184 88130000 		.word	5000
 3852              		.cfi_endproc
 3853              	.LFE71:
 3855              		.global	mod_depth
 3856              		.global	overall_scale
 3857              		.comm	gamma_table,256,4
 3858              		.comm	test_wave_buffer,131072,4
 3859              		.comm	g_armwave_state,108,4
 3860              		.section	.rodata
 3861              		.align	2
 3862              		.set	.LANCHOR0,. + 0
 3865              	__PRETTY_FUNCTION__.17003:
 3866 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3866      6176655F 
 3866      73657475 
 3866      705F7265 
 3866      6E646572 
 3867 0015 000000   		.space	3
 3870              	__PRETTY_FUNCTION__.17031:
 3871 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3871      6176655F 
 3871      66696C6C 
 3871      5F706978 
 3871      6275665F 
 3874              	__PRETTY_FUNCTION__.17061:
 3875 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3875      6176655F 
 3875      66696C6C 
 3875      5F706978 
 3875      6275665F 
 3876 004b 00       		.space	1
 3879              	overall_scale:
 3880 004c 00002041 		.word	1092616192
 3881              		.bss
 3882              		.align	2
 3883              		.set	.LANCHOR1,. + 0
 3886              	mod_depth:
 3887 0000 00000000 		.space	4
 3888              		.section	.rodata.str1.4,"aMS",%progbits,1
 3889              		.align	2
 3890              	.LC0:
 3891 0000 61726D77 		.ascii	"armwave.c\000"
 3891      6176652E 
 3891      6300
 3892 000a 0000     		.space	2
 3893              	.LC1:
 3894 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3894      65745F68 
 3894      65696768 
 3894      74203D3D 
 3894      20323536 
 3895 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3895      68656967 
 3895      6874203D 
 3895      3D203130 
 3895      3234207C 
 3896 006b 00       		.space	1
 3897              	.LC2:
 3898 006c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3898      6D776176 
 3898      655F7374 
 3898      6174652E 
 3898      6368315F 
 3899 008f 00       		.space	1
 3900              	.LC3:
 3901 0090 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3901      6D776176 
 3901      655F7374 
 3901      6174652E 
 3901      78636F6F 
 3902 00b9 000000   		.space	3
 3903              	.LC4:
 3904 00bc 73746172 		.ascii	"start_point < end_point\000"
 3904      745F706F 
 3904      696E7420 
 3904      3C20656E 
 3904      645F706F 
 3905              	.LC5:
 3906 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 3906      62756666 
 3906      65722021 
 3906      3D204E55 
 3906      4C4C00
 3907 00e7 00       		.space	1
 3908              	.LC6:
 3909 00e8 6E703D25 		.ascii	"np=%d w=%d v=%d\012\000"
 3909      6420773D 
 3909      25642076 
 3909      3D25640A 
 3909      00
 3910 00f9 000000   		.space	3
 3911              	.LC7:
 3912 00fc 776200   		.ascii	"wb\000"
 3913 00ff 00       		.space	1
 3914              	.LC8:
 3915 0100 50330A00 		.ascii	"P3\012\000"
 3916              	.LC9:
 3917 0104 25642025 		.ascii	"%d %d\012\000"
 3917      640A00
 3918 010b 00       		.space	1
 3919              	.LC10:
 3920 010c 3235350A 		.ascii	"255\012\000"
 3920      00
 3921 0111 000000   		.space	3
 3922              	.LC11:
 3923 0114 25336420 		.ascii	"%3d %3d %3d\012\000"
 3923      25336420 
 3923      2533640A 
 3923      00
 3924 0121 000000   		.space	3
 3925              	.LC12:
 3926 0124 76302E30 		.ascii	"v0.0.1\000"
 3926      2E3100
 3927 012b 00       		.space	1
 3928              	.LC13:
 3929 012c 61726D77 		.ascii	"armwave version: %s\012\000"
 3929      61766520 
 3929      76657273 
 3929      696F6E3A 
 3929      2025730A 
 3930              		.text
 3931              	.Letext0:
 3932              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3933              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3934              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3935              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3936              		.file 6 "/usr/include/stdio.h"
 3937              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3938              		.file 8 "/usr/include/errno.h"
 3939              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3940              		.file 10 "/usr/include/unistd.h"
 3941              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3942              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3943              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3944              		.file 14 "/usr/include/math.h"
 3945              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3946              		.file 16 "/usr/include/time.h"
 3947              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3948              		.file 18 "/usr/local/include/python3.8/object.h"
 3949              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3950              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3951              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3952              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3953              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3954              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3955              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3956              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3957              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3958              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3959              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3960              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3961              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3962              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3963              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3964              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3965              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3966              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3967              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3968              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3969              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3970              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3971              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3972              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3973              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3974              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3975              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3976              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3977              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3978              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3979              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3980              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3981              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3982              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3983              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3984              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3985              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3986              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3987              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3988              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3989              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3990              		.file 60 "/usr/local/include/python3.8/context.h"
 3991              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3992              		.file 62 "/usr/local/include/python3.8/code.h"
 3993              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3994              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3995              		.file 65 "/usr/local/include/python3.8/import.h"
 3996              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3997              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3998              		.file 68 "armwave.h"
 3999              		.file 69 "/usr/include/stdlib.h"
 4000              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4001              		.file 71 "<built-in>"
 4002              		.file 72 "/usr/include/assert.h"
 4003              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
