   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** /*
  43:armwave.c     ****  * Create a gamma table.
  44:armwave.c     ****  */
  45:armwave.c     **** void test_create_gamma()
  46:armwave.c     **** {
  85              		.loc 1 46 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  47:armwave.c     ****     int i;
  89              		.loc 1 47 5 view .LVU1
  48:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 48 5 view .LVU2
  91              	.LVL0:
  49:armwave.c     **** 
  50:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 50 5 view .LVU3
  93              	@ armwave.c:46: {
  46:armwave.c     ****     int i;
  94              		.loc 1 46 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.30,
 110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 51 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 51 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 51 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.30,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.30,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 51 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 51 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.30
 128              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 51 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 51 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 51 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 51 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 51 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 50 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.30, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:53: }
  52:armwave.c     ****     }
  53:armwave.c     **** }
 155              		.loc 1 53 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 53 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  54:armwave.c     **** 
  55:armwave.c     **** /*
  56:armwave.c     ****  * Initialise things.  STUB, mostly.
  57:armwave.c     ****  */
  58:armwave.c     **** void armwave_init()
  59:armwave.c     **** {
 187              		.loc 1 59 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  60:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 60 5 view .LVU19
 193              	@ armwave.c:60:     g_armwave_state.flags = 0;
 194              		.loc 1 60 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:62:     printf("armwave version: %s\n", ARMWAVE_VER);
  61:armwave.c     **** 
  62:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 62 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:60:     g_armwave_state.flags = 0;
  60:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 60 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 62 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  63:armwave.c     **** }
  64:armwave.c     **** 
  65:armwave.c     **** /*
  66:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  67:armwave.c     ****  * pre-computed.
  68:armwave.c     ****  *
  69:armwave.c     ****  * @param    slice_y        Slice to render at
  70:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  71:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  72:armwave.c     ****  */
  73:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  74:armwave.c     **** {
 225              		.loc 1 74 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  75:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 75 5 view .LVU25
  76:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 76 5 view .LVU26
  77:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 77 5 view .LVU27
  78:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 78 5 view .LVU28
  79:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 79 5 view .LVU29
  80:armwave.c     ****     
  81:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 81 5 view .LVU30
 235              	@ armwave.c:74: {
  74:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 74 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
 249              		.loc 1 81 40 view .LVU32
 250 00a0 D0409FE5 		ldr	r4, .L23	@ tmp242,
 251              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  82:armwave.c     **** 
  83:armwave.c     ****     // roll through each waveform
  84:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 252              		.loc 1 84 5 view .LVU33
 253 00a4 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 254              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 255              		.loc 1 81 63 view .LVU34
 256 00a8 2C5094E5 		ldr	r5, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 257              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 84 5 view .LVU35
 259 00ac 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 261              		.loc 1 81 40 view .LVU36
 262 00b0 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 263              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 264              		.loc 1 81 63 view .LVU37
 265 00b4 950005E0 		mul	r5, r5, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 266              	.LVL7:
 267              		.loc 1 84 5 is_stmt 1 view .LVU38
 268              		.loc 1 84 5 is_stmt 0 view .LVU39
 269 00b8 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 270 00bc 000051E3 		cmp	r1, #0	@ height,
 271 00c0 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 272 00c4 048040E2 		sub	r8, r0, #4	@ tmp243, slice_y,
 273              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 84 11 view .LVU40
 275 00c8 0070A0E3 		mov	r7, #0	@ w,
 276              	.LVL8:
 277              	.L15:
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 85 9 is_stmt 1 view .LVU41
  86:armwave.c     **** 
  87:armwave.c     ****         // roll through y and render the slice into the out buffer
  88:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  89:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 279              		.loc 1 89 9 view .LVU42
 280              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 281              		.loc 1 85 64 is_stmt 0 view .LVU43
 282 00cc 200094E5 		ldr	r0, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 283 00d0 146094E5 		ldr	r6, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 284              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
 285              		.loc 1 89 16 view .LVU44
 286 00d4 0020A0E3 		mov	r2, #0	@ yy,
 287 00d8 908720E0 		mla	r0, r0, r7, r8	@ tmp193, g_armwave_state.wave_stride, w, tmp243
 288 00dc 006086E0 		add	r6, r6, r0	@ ivtmp.37, g_armwave_state.wave_buffer, tmp193
 289              	.LVL9:
 290              	.L14:
  90:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 291              		.loc 1 90 13 is_stmt 1 view .LVU45
 292              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
 293              		.loc 1 90 18 is_stmt 0 view .LVU46
 294 00e0 0400B6E5 		ldr	r0, [r6, #4]!	@ word, MEM[base: _168, offset: 0B]
 295              	.LVL10:
  91:armwave.c     **** 
  92:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 296              		.loc 1 92 13 is_stmt 1 view .LVU47
  93:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
  94:armwave.c     ****                 scale_value = (word & 0xff);
 297              		.loc 1 94 17 view .LVU48
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 298              		.loc 1 95 17 view .LVU49
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 299              		.loc 1 96 17 view .LVU50
 300              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 301              		.loc 1 95 63 is_stmt 0 view .LVU51
 302 00e4 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 303 00e8 01C082E2 		add	ip, r2, #1	@ tmp206, yy,
 304              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
 305              		.loc 1 96 47 view .LVU52
 306 00ec 70E0E5E6 		uxtab	lr, r5, r0	@ tmp199, _3, word
 307 00f0 99E229E0 		mla	r9, r9, r2, lr	@ tmp200, g_armwave_state.bitdepth_height, yy, tmp199
 308              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****                 word >>= 8;
 309              		.loc 1 97 22 view .LVU53
 310 00f4 20B4A0E1 		lsr	fp, r0, #8	@ word, word,
 311 00f8 20A8A0E1 		lsr	r10, r0, #16	@ word, word,
 312              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 313              		.loc 1 96 47 view .LVU54
 314 00fc 09E0D3E7 		ldrb	lr, [r3, r9]	@ zero_extendqisi2	@ *_55, *_55
 315 0100 7BB0E5E6 		uxtab	fp, r5, fp	@ tmp211, _3, word
 316 0104 01E08EE2 		add	lr, lr, #1	@ tmp203, *_55,
 317 0108 09E0C3E7 		strb	lr, [r3, r9]	@ tmp203, *_55
 318              	.LVL11:
 319              		.loc 1 97 17 is_stmt 1 view .LVU55
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 320              		.loc 1 94 17 view .LVU56
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 95 17 view .LVU57
  96:armwave.c     ****                 word >>= 8;
 322              		.loc 1 96 17 view .LVU58
 323              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 324              		.loc 1 95 63 is_stmt 0 view .LVU59
 325 010c 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 326              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 327              		.loc 1 96 47 view .LVU60
 328 0110 7AA0E5E6 		uxtab	r10, r5, r10	@ tmp223, _3, word
 329 0114 9EBC2EE0 		mla	lr, lr, ip, fp	@ tmp212, g_armwave_state.bitdepth_height, tmp206, tmp211
 330              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 331              		.loc 1 95 63 view .LVU61
 332 0118 02C082E2 		add	ip, r2, #2	@ tmp218, yy,
 333 011c 039082E2 		add	r9, r2, #3	@ tmp230, yy,
 334              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 335              		.loc 1 96 47 view .LVU62
 336 0120 0EB0D3E7 		ldrb	fp, [r3, lr]	@ zero_extendqisi2	@ *_75, *_75
 337 0124 200C85E0 		add	r0, r5, r0, lsr #24	@ tmp234, _3, word,
 338              	.LVL12:
 339              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 340              		.loc 1 89 37 view .LVU63
 341 0128 042082E2 		add	r2, r2, #4	@ yy, yy,
 342              	.LVL13:
 343              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 344              		.loc 1 96 47 view .LVU64
 345 012c 01B08BE2 		add	fp, fp, #1	@ tmp215, *_75,
 346 0130 0EB0C3E7 		strb	fp, [r3, lr]	@ tmp215, *_75
 347              	.LVL14:
 348              		.loc 1 97 17 is_stmt 1 view .LVU65
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 349              		.loc 1 94 17 view .LVU66
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 350              		.loc 1 95 17 view .LVU67
  96:armwave.c     ****                 word >>= 8;
 351              		.loc 1 96 17 view .LVU68
 352              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 95 63 is_stmt 0 view .LVU69
 354 0134 2CE094E5 		ldr	lr, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 355              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 356              		.loc 1 89 9 view .LVU70
 357 0138 020051E1 		cmp	r1, r2	@ height, yy
 358              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 359              		.loc 1 96 47 view .LVU71
 360 013c 9EAC2CE0 		mla	ip, lr, ip, r10	@ tmp224, g_armwave_state.bitdepth_height, tmp218, tmp223
 361 0140 0CE0D3E7 		ldrb	lr, [r3, ip]	@ zero_extendqisi2	@ *_95, *_95
 362 0144 01E08EE2 		add	lr, lr, #1	@ tmp227, *_95,
 363 0148 0CE0C3E7 		strb	lr, [r3, ip]	@ tmp227, *_95
 364              		.loc 1 97 17 is_stmt 1 view .LVU72
 365              	.LVL15:
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 366              		.loc 1 94 17 view .LVU73
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 367              		.loc 1 95 17 view .LVU74
  96:armwave.c     ****                 word >>= 8;
 368              		.loc 1 96 17 view .LVU75
 369              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 370              		.loc 1 95 63 is_stmt 0 view .LVU76
 371 014c 2CC094E5 		ldr	ip, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 372              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 373              		.loc 1 96 47 view .LVU77
 374 0150 9C0920E0 		mla	r0, ip, r9, r0	@ tmp235, g_armwave_state.bitdepth_height, tmp230, tmp234
 375 0154 00C0D3E7 		ldrb	ip, [r3, r0]	@ zero_extendqisi2	@ *_115, *_115
 376 0158 01C08CE2 		add	ip, ip, #1	@ tmp238, *_115,
 377 015c 00C0C3E7 		strb	ip, [r3, r0]	@ tmp238, *_115
 378              		.loc 1 97 17 is_stmt 1 view .LVU78
 379              	.LVL16:
 380              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 381              		.loc 1 89 9 is_stmt 0 view .LVU79
 382 0160 DEFFFF8A 		bhi	.L14		@,
 383              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 384              		.loc 1 84 5 view .LVU80
 385 0164 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 386              	.LVL17:
 387              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 388              		.loc 1 84 44 view .LVU81
 389 0168 017087E2 		add	r7, r7, #1	@ w, w,
 390              	.LVL18:
 391              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 392              		.loc 1 84 5 view .LVU82
 393 016c 020057E1 		cmp	r7, r2	@ w, g_armwave_state.waves
 394 0170 D5FFFF3A 		bcc	.L15		@,
 395 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 396              	.L24:
 397              		.align	2
 398              	.L23:
 399 0178 00000000 		.word	g_armwave_state
 400              		.cfi_endproc
 401              	.LFE59:
 403              		.align	2
 404              		.global	armwave_fill_pixbuf_256
 405              		.syntax unified
 406              		.arm
 407              		.fpu vfp
 409              	armwave_fill_pixbuf_256:
 410              	.LVL19:
 411              	.LFB60:
  98:armwave.c     ****             }
  99:armwave.c     ****         }
 100:armwave.c     ****     }
 101:armwave.c     **** }
 102:armwave.c     **** 
 103:armwave.c     **** /*
 104:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 105:armwave.c     ****  */
 106:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 107:armwave.c     **** {
 412              		.loc 1 107 1 is_stmt 1 view -0
 413              		.cfi_startproc
 414              		@ args = 0, pretend = 0, frame = 8
 415              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 416              		.loc 1 108 5 view .LVU84
 109:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 417              		.loc 1 109 5 view .LVU85
 110:armwave.c     ****     uint8_t r, g, b, value;
 418              		.loc 1 110 5 view .LVU86
 111:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 419              		.loc 1 111 5 view .LVU87
 420              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 421              		.loc 1 107 1 is_stmt 0 view .LVU88
 422 017c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 423              		.cfi_def_cfa_offset 36
 424              		.cfi_offset 4, -36
 425              		.cfi_offset 5, -32
 426              		.cfi_offset 6, -28
 427              		.cfi_offset 7, -24
 428              		.cfi_offset 8, -20
 429              		.cfi_offset 9, -16
 430              		.cfi_offset 10, -12
 431              		.cfi_offset 11, -8
 432              		.cfi_offset 14, -4
 433              	@ armwave.c:115:     assert(out_buffer != NULL);
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 113:armwave.c     ****     uint32_t offset;
 114:armwave.c     **** 
 115:armwave.c     ****     assert(out_buffer != NULL);
 434              		.loc 1 115 5 view .LVU89
 435 0180 000050E3 		cmp	r0, #0	@ out_buffer
 436              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 437              		.loc 1 111 15 view .LVU90
 438 0184 44529FE5 		ldr	r5, .L52	@ tmp360,
 439              	@ armwave.c:107: {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 440              		.loc 1 107 1 view .LVU91
 441 0188 0CD04DE2 		sub	sp, sp, #12	@,,
 442              		.cfi_def_cfa_offset 48
 443              	@ armwave.c:111:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 444              		.loc 1 111 15 view .LVU92
 445 018c 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 446              	.LVL20:
 112:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 447              		.loc 1 112 5 is_stmt 1 view .LVU93
 113:armwave.c     **** 
 448              		.loc 1 113 5 view .LVU94
 449              		.loc 1 115 5 view .LVU95
 450 0190 8900000A 		beq	.L50		@,
 116:armwave.c     **** 
 117:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 118:armwave.c     **** 
 119:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 451              		.loc 1 119 5 view .LVU96
 452              	@ armwave.c:119:     npix = g_armwave_state.target_width * 256;
 453              		.loc 1 119 41 is_stmt 0 view .LVU97
 454 0194 40C095E5 		ldr	ip, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 455 0198 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 456              	.LVL21:
 120:armwave.c     **** 
 121:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 457              		.loc 1 121 5 is_stmt 1 view .LVU98
 458              		.loc 1 121 5 is_stmt 0 view .LVU99
 459 019c 00005CE3 		cmp	ip, #0	@ npix,
 460 01a0 0A0000DA 		ble	.L25		@,
 461              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 122:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 123:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 124:armwave.c     ****         // most normal waveforms.
 125:armwave.c     ****         wave_word = *base_32ptr++;
 126:armwave.c     **** 
 127:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 128:armwave.c     ****             for(i = 0; i < 4; i++) {
 129:armwave.c     ****                 value = wave_word & 0xff;
 130:armwave.c     ****                 wave_word >>= 8;
 131:armwave.c     **** 
 132:armwave.c     ****                 if(value != 0) {
 133:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 462              		.loc 1 133 52 view .LVU100
 463 01a4 F4A5D5E1 		ldrsh	r10, [r5, #84]	@ _70, g_armwave_state.ch1_color.r
 464              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 465              		.loc 1 134 52 view .LVU101
 466 01a8 F695D5E1 		ldrsh	r9, [r5, #86]	@ _76, g_armwave_state.ch1_color.g
 467              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 468              		.loc 1 135 52 view .LVU102
 469 01ac F8B5D5E1 		ldrsh	fp, [r5, #88]	@ _80, g_armwave_state.ch1_color.b
 470              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 471              		.loc 1 121 11 view .LVU103
 472 01b0 0030A0E3 		mov	r3, #0	@ n,
 473 01b4 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 474              	.LVL22:
 475              	.L34:
 125:armwave.c     **** 
 476              		.loc 1 125 9 is_stmt 1 view .LVU104
 477              	@ armwave.c:125:         wave_word = *base_32ptr++;
 125:armwave.c     **** 
 478              		.loc 1 125 19 is_stmt 0 view .LVU105
 479 01b8 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 480              	.LVL23:
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 481              		.loc 1 127 9 is_stmt 1 view .LVU106
 482              	@ armwave.c:127:         if(COND_UNLIKELY(wave_word != 0)) {
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 483              		.loc 1 127 11 is_stmt 0 view .LVU107
 484 01bc 000052E3 		cmp	r2, #0	@ wave_word,
 485 01c0 0400001A 		bne	.L51		@,
 486              	.LVL24:
 487              	.L29:
 488              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 489              		.loc 1 121 28 discriminator 2 view .LVU108
 490 01c4 043083E2 		add	r3, r3, #4	@ n, n,
 491              	.LVL25:
 492              	@ armwave.c:121:     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 493              		.loc 1 121 5 discriminator 2 view .LVU109
 494 01c8 03005CE1 		cmp	ip, r3	@ npix, n
 495 01cc F9FFFFCA 		bgt	.L34		@,
 496              	.LVL26:
 497              	.L25:
 498              	@ armwave.c:154: }
 136:armwave.c     **** 
 137:armwave.c     ****                     r = MIN(rr, 255);
 138:armwave.c     ****                     g = MIN(gg, 255);
 139:armwave.c     ****                     b = MIN(bb, 255);
 140:armwave.c     **** 
 141:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 142:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 143:armwave.c     **** 
 144:armwave.c     ****                     // Is there a better way?
 145:armwave.c     ****                     nsub = n + i;
 146:armwave.c     ****                     xx = nsub & 0xff;
 147:armwave.c     ****                     yy = nsub >> 8;
 148:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 149:armwave.c     ****                     *(out_buffer_base + offset) = word;
 150:armwave.c     ****                 }
 151:armwave.c     ****             }
 152:armwave.c     ****         } 
 153:armwave.c     ****     }
 154:armwave.c     **** }
 499              		.loc 1 154 1 view .LVU110
 500 01d0 0CD08DE2 		add	sp, sp, #12	@,,
 501              		.cfi_remember_state
 502              		.cfi_def_cfa_offset 36
 503              		@ sp needed	@
 504 01d4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 505              	.LVL27:
 506              	.L51:
 507              		.cfi_restore_state
 129:armwave.c     ****                 wave_word >>= 8;
 508              		.loc 1 129 17 is_stmt 1 view .LVU111
 130:armwave.c     **** 
 509              		.loc 1 130 17 view .LVU112
 510              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 511              		.loc 1 132 19 is_stmt 0 view .LVU113
 512 01d8 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 513              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 514              		.loc 1 130 27 view .LVU114
 515 01dc 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 516              	.LVL28:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 517              		.loc 1 132 17 is_stmt 1 view .LVU115
 518              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 519              		.loc 1 132 19 is_stmt 0 view .LVU116
 520 01e0 1900000A 		beq	.L30		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 521              		.loc 1 133 21 is_stmt 1 view .LVU117
 522              	.LVL29:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 523              		.loc 1 134 21 view .LVU118
 135:armwave.c     **** 
 524              		.loc 1 135 21 view .LVU119
 137:armwave.c     ****                     g = MIN(gg, 255);
 525              		.loc 1 137 21 view .LVU120
 138:armwave.c     ****                     b = MIN(bb, 255);
 526              		.loc 1 138 21 view .LVU121
 139:armwave.c     **** 
 527              		.loc 1 139 21 view .LVU122
 142:armwave.c     **** 
 528              		.loc 1 142 21 view .LVU123
 145:armwave.c     ****                     xx = nsub & 0xff;
 529              		.loc 1 145 21 view .LVU124
 146:armwave.c     ****                     yy = nsub >> 8;
 530              		.loc 1 146 21 view .LVU125
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 531              		.loc 1 147 21 view .LVU126
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 532              		.loc 1 148 21 view .LVU127
 149:armwave.c     ****                 }
 533              		.loc 1 149 21 view .LVU128
 534              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 535              		.loc 1 135 55 is_stmt 0 view .LVU129
 536 01e4 9B0604E0 		mul	r4, fp, r6	@ tmp276, _80, _72
 537              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 538              		.loc 1 134 55 view .LVU130
 539 01e8 990608E0 		mul	r8, r9, r6	@ tmp280, _76, _72
 540              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 541              		.loc 1 135 24 view .LVU131
 542 01ec 4444A0E1 		asr	r4, r4, #8	@ bb, tmp276,
 543              	.LVL30:
 544              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 545              		.loc 1 139 25 view .LVU132
 546 01f0 FF0054E3 		cmp	r4, #255	@ bb,
 547              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 548              		.loc 1 134 24 view .LVU133
 549 01f4 4884A0E1 		asr	r8, r8, #8	@ gg, tmp280,
 550              	.LVL31:
 551              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 552              		.loc 1 139 25 view .LVU134
 553 01f8 FF40A0A3 		movge	r4, #255	@ bb,
 554              	.LVL32:
 555              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 556              		.loc 1 133 55 view .LVU135
 557 01fc 960A06E0 		mul	r6, r6, r10	@ tmp286, _72, _70
 558              	.LVL33:
 559              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 560              		.loc 1 138 25 view .LVU136
 561 0200 FF0058E3 		cmp	r8, #255	@ gg,
 562 0204 FF80A0A3 		movge	r8, #255	@ gg,
 563              	.LVL34:
 564              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 565              		.loc 1 133 24 view .LVU137
 566 0208 4664A0E1 		asr	r6, r6, #8	@ rr, tmp286,
 567              	.LVL35:
 568              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 569              		.loc 1 142 56 view .LVU138
 570 020c 0884A0E1 		lsl	r8, r8, #8	@ tmp281, gg,
 571              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 572              		.loc 1 149 39 view .LVU139
 573 0210 400095E5 		ldr	r0, [r5, #64]	@ tmp372, g_armwave_state.target_width
 574              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 575              		.loc 1 142 44 view .LVU140
 576 0214 0448A0E1 		lsl	r4, r4, #16	@ tmp277, bb,
 577              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 578              		.loc 1 137 25 view .LVU141
 579 0218 FF0056E3 		cmp	r6, #255	@ rr,
 580              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 581              		.loc 1 142 56 view .LVU142
 582 021c 7880FFE6 		uxth	r8, r8	@ tmp282, tmp281
 583              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 584              		.loc 1 146 24 view .LVU143
 585 0220 7370EFE6 		uxtb	r7, r3	@ xx, n
 586              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 587              		.loc 1 142 44 view .LVU144
 588 0224 FF4804E2 		and	r4, r4, #16711680	@ tmp278, tmp277,
 589              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 590              		.loc 1 142 51 view .LVU145
 591 0228 084084E1 		orr	r4, r4, r8	@ tmp284, tmp278, tmp282
 592              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 593              		.loc 1 137 25 view .LVU146
 594 022c FF60A0A3 		movge	r6, #255	@ rr,
 595              	.LVL36:
 596              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 597              		.loc 1 147 31 view .LVU147
 598 0230 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 599              	.LVL37:
 600              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 601              		.loc 1 149 39 view .LVU148
 602 0234 908727E0 		mla	r7, r0, r7, r8	@ tmp274, tmp372, xx, yy
 603              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 604              		.loc 1 142 62 view .LVU149
 605 0238 7660EFE6 		uxtb	r6, r6	@ rr, rr
 606              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 607              		.loc 1 149 49 view .LVU150
 608 023c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 609              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 610              		.loc 1 142 62 view .LVU151
 611 0240 066084E1 		orr	r6, r4, r6	@ tmp288, tmp284, rr
 612              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 613              		.loc 1 142 26 view .LVU152
 614 0244 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp288,
 615              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 616              		.loc 1 149 49 view .LVU153
 617 0248 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 618              	.LVL38:
 619              	.L30:
 129:armwave.c     ****                 wave_word >>= 8;
 620              		.loc 1 129 17 is_stmt 1 view .LVU154
 130:armwave.c     **** 
 621              		.loc 1 130 17 view .LVU155
 622              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 623              		.loc 1 132 19 is_stmt 0 view .LVU156
 624 024c FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 625              	.LVL39:
 626              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 627              		.loc 1 130 27 view .LVU157
 628 0250 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 629              	.LVL40:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 630              		.loc 1 132 17 is_stmt 1 view .LVU158
 631              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 132 19 is_stmt 0 view .LVU159
 633 0254 1C00000A 		beq	.L31		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 133 21 is_stmt 1 view .LVU160
 635              	.LVL41:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 134 21 view .LVU161
 135:armwave.c     **** 
 637              		.loc 1 135 21 view .LVU162
 137:armwave.c     ****                     g = MIN(gg, 255);
 638              		.loc 1 137 21 view .LVU163
 138:armwave.c     ****                     b = MIN(bb, 255);
 639              		.loc 1 138 21 view .LVU164
 139:armwave.c     **** 
 640              		.loc 1 139 21 view .LVU165
 142:armwave.c     **** 
 641              		.loc 1 142 21 view .LVU166
 145:armwave.c     ****                     xx = nsub & 0xff;
 642              		.loc 1 145 21 view .LVU167
 643              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 644              		.loc 1 135 55 is_stmt 0 view .LVU168
 645 0258 9E0B04E0 		mul	r4, lr, fp	@ tmp299, _118, _80
 646              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 134 55 view .LVU169
 648 025c 9E0907E0 		mul	r7, lr, r9	@ tmp303, _118, _76
 649              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 650              		.loc 1 135 24 view .LVU170
 651 0260 4444A0E1 		asr	r4, r4, #8	@ bb, tmp299,
 652              	.LVL42:
 653              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 654              		.loc 1 139 25 view .LVU171
 655 0264 FF0054E3 		cmp	r4, #255	@ bb,
 656 0268 FF40A0A3 		movge	r4, #255	@ bb,
 657              	.LVL43:
 658              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 659              		.loc 1 133 55 view .LVU172
 660 026c 9E0A0EE0 		mul	lr, lr, r10	@ tmp309, _118, _70
 661              	.LVL44:
 662              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 134 24 view .LVU173
 664 0270 4774A0E1 		asr	r7, r7, #8	@ gg, tmp303,
 665              	.LVL45:
 666              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 667              		.loc 1 142 44 view .LVU174
 668 0274 0448A0E1 		lsl	r4, r4, #16	@ tmp300, bb,
 669              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 670              		.loc 1 138 25 view .LVU175
 671 0278 FF0057E3 		cmp	r7, #255	@ gg,
 672 027c 016083E2 		add	r6, r3, #1	@ _158, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 673              		.loc 1 146 21 is_stmt 1 view .LVU176
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 674              		.loc 1 147 21 view .LVU177
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 675              		.loc 1 148 21 view .LVU178
 149:armwave.c     ****                 }
 676              		.loc 1 149 21 view .LVU179
 677              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 678              		.loc 1 142 44 is_stmt 0 view .LVU180
 679 0280 FF4804E2 		and	r4, r4, #16711680	@ tmp301, tmp300,
 680              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 681              		.loc 1 138 25 view .LVU181
 682 0284 FF70A0A3 		movge	r7, #255	@ gg,
 683              	.LVL46:
 684              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 685              		.loc 1 142 44 view .LVU182
 686 0288 04408DE5 		str	r4, [sp, #4]	@ tmp301, %sfp
 687              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 688              		.loc 1 149 39 view .LVU183
 689 028c 404095E5 		ldr	r4, [r5, #64]	@ tmp375, g_armwave_state.target_width
 690              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 691              		.loc 1 133 24 view .LVU184
 692 0290 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp309,
 693              	.LVL47:
 694              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 695              		.loc 1 146 24 view .LVU185
 696 0294 7600EFE6 		uxtb	r0, r6	@ xx, _158
 697              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 698              		.loc 1 137 25 view .LVU186
 699 0298 FF005EE3 		cmp	lr, #255	@ rr,
 700              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 701              		.loc 1 142 56 view .LVU187
 702 029c 0774A0E1 		lsl	r7, r7, #8	@ tmp304, gg,
 703              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 704              		.loc 1 147 31 view .LVU188
 705 02a0 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 706              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 707              		.loc 1 149 39 view .LVU189
 708 02a4 946026E0 		mla	r6, r4, r0, r6	@ tmp297, tmp375, xx, yy
 709              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 710              		.loc 1 137 25 view .LVU190
 711 02a8 FFE0A0A3 		movge	lr, #255	@ rr,
 712              	.LVL48:
 713              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 714              		.loc 1 142 51 view .LVU191
 715 02ac 04009DE5 		ldr	r0, [sp, #4]	@ tmp301, %sfp
 716              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 717              		.loc 1 142 56 view .LVU192
 718 02b0 7770FFE6 		uxth	r7, r7	@ tmp305, tmp304
 719              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 720              		.loc 1 142 51 view .LVU193
 721 02b4 074080E1 		orr	r4, r0, r7	@ tmp307, tmp301, tmp305
 722              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 723              		.loc 1 142 62 view .LVU194
 724 02b8 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 725              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 726              		.loc 1 149 49 view .LVU195
 727 02bc 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 728              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 729              		.loc 1 142 62 view .LVU196
 730 02c0 0EE084E1 		orr	lr, r4, lr	@ tmp311, tmp307, rr
 731              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 732              		.loc 1 142 26 view .LVU197
 733 02c4 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp311,
 734              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 735              		.loc 1 149 49 view .LVU198
 736 02c8 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 737              	.LVL49:
 738              	.L31:
 129:armwave.c     ****                 wave_word >>= 8;
 739              		.loc 1 129 17 is_stmt 1 view .LVU199
 130:armwave.c     **** 
 740              		.loc 1 130 17 view .LVU200
 741              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 132 19 is_stmt 0 view .LVU201
 743 02cc FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 744              	@ armwave.c:130:                 wave_word >>= 8;
 130:armwave.c     **** 
 745              		.loc 1 130 27 view .LVU202
 746 02d0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 747              	.LVL50:
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 132 17 is_stmt 1 view .LVU203
 749              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 132 19 is_stmt 0 view .LVU204
 751 02d4 1A00000A 		beq	.L32		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 133 21 is_stmt 1 view .LVU205
 753              	.LVL51:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 134 21 view .LVU206
 135:armwave.c     **** 
 755              		.loc 1 135 21 view .LVU207
 137:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 137 21 view .LVU208
 138:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 138 21 view .LVU209
 139:armwave.c     **** 
 758              		.loc 1 139 21 view .LVU210
 142:armwave.c     **** 
 759              		.loc 1 142 21 view .LVU211
 145:armwave.c     ****                     xx = nsub & 0xff;
 760              		.loc 1 145 21 view .LVU212
 761              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 762              		.loc 1 135 55 is_stmt 0 view .LVU213
 763 02d8 9E0B04E0 		mul	r4, lr, fp	@ tmp322, _164, _80
 764              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 765              		.loc 1 134 55 view .LVU214
 766 02dc 9E0906E0 		mul	r6, lr, r9	@ tmp326, _164, _76
 767              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 768              		.loc 1 135 24 view .LVU215
 769 02e0 4444A0E1 		asr	r4, r4, #8	@ bb, tmp322,
 770              	.LVL52:
 771              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 772              		.loc 1 133 55 view .LVU216
 773 02e4 9E0A0EE0 		mul	lr, lr, r10	@ tmp332, _164, _70
 774              	.LVL53:
 775              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 776              		.loc 1 139 25 view .LVU217
 777 02e8 FF0054E3 		cmp	r4, #255	@ bb,
 778              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 779              		.loc 1 134 24 view .LVU218
 780 02ec 4664A0E1 		asr	r6, r6, #8	@ gg, tmp326,
 781              	.LVL54:
 782              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 783              		.loc 1 139 25 view .LVU219
 784 02f0 FF40A0A3 		movge	r4, #255	@ bb,
 785              	.LVL55:
 786              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 787              		.loc 1 138 25 view .LVU220
 788 02f4 FF0056E3 		cmp	r6, #255	@ gg,
 789 02f8 FF60A0A3 		movge	r6, #255	@ gg,
 790              	.LVL56:
 138:armwave.c     ****                     b = MIN(bb, 255);
 791              		.loc 1 138 25 view .LVU221
 792 02fc 027083E2 		add	r7, r3, #2	@ _66, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 793              		.loc 1 146 21 is_stmt 1 view .LVU222
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 794              		.loc 1 147 21 view .LVU223
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 795              		.loc 1 148 21 view .LVU224
 149:armwave.c     ****                 }
 796              		.loc 1 149 21 view .LVU225
 797              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 798              		.loc 1 133 24 is_stmt 0 view .LVU226
 799 0300 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp332,
 800              	.LVL57:
 801              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 802              		.loc 1 149 39 view .LVU227
 803 0304 400095E5 		ldr	r0, [r5, #64]	@ tmp376, g_armwave_state.target_width
 804              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 805              		.loc 1 137 25 view .LVU228
 806 0308 FF005EE3 		cmp	lr, #255	@ rr,
 807              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 808              		.loc 1 146 24 view .LVU229
 809 030c 7780EFE6 		uxtb	r8, r7	@ xx, _66
 810              	.LVL58:
 811              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 812              		.loc 1 142 56 view .LVU230
 813 0310 0664A0E1 		lsl	r6, r6, #8	@ tmp327, gg,
 814              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 815              		.loc 1 142 44 view .LVU231
 816 0314 0448A0E1 		lsl	r4, r4, #16	@ tmp323, bb,
 817              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 137 25 view .LVU232
 819 0318 FFE0A0A3 		movge	lr, #255	@ rr,
 820              	.LVL59:
 821              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 822              		.loc 1 147 31 view .LVU233
 823 031c 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 824              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 825              		.loc 1 149 39 view .LVU234
 826 0320 907827E0 		mla	r7, r0, r8, r7	@ tmp320, tmp376, xx, yy
 827              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 828              		.loc 1 142 44 view .LVU235
 829 0324 FF4804E2 		and	r4, r4, #16711680	@ tmp324, tmp323,
 830              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 831              		.loc 1 142 56 view .LVU236
 832 0328 7660FFE6 		uxth	r6, r6	@ tmp328, tmp327
 833              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 834              		.loc 1 142 51 view .LVU237
 835 032c 066084E1 		orr	r6, r4, r6	@ tmp330, tmp324, tmp328
 836              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 837              		.loc 1 142 62 view .LVU238
 838 0330 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 839              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 840              		.loc 1 149 49 view .LVU239
 841 0334 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 842              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 843              		.loc 1 142 62 view .LVU240
 844 0338 0EE086E1 		orr	lr, r6, lr	@ tmp334, tmp330, rr
 845              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 846              		.loc 1 142 26 view .LVU241
 847 033c FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp334,
 848              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 849              		.loc 1 149 49 view .LVU242
 850 0340 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 851              	.L32:
 852              	.LVL60:
 129:armwave.c     ****                 wave_word >>= 8;
 853              		.loc 1 129 17 is_stmt 1 view .LVU243
 130:armwave.c     **** 
 854              		.loc 1 130 17 view .LVU244
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 855              		.loc 1 132 17 view .LVU245
 856              	@ armwave.c:132:                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 857              		.loc 1 132 19 is_stmt 0 view .LVU246
 858 0344 000052E3 		cmp	r2, #0	@ wave_word,
 859 0348 9DFFFF0A 		beq	.L29		@,
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 860              		.loc 1 133 21 is_stmt 1 view .LVU247
 861              	.LVL61:
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 862              		.loc 1 134 21 view .LVU248
 135:armwave.c     **** 
 863              		.loc 1 135 21 view .LVU249
 137:armwave.c     ****                     g = MIN(gg, 255);
 864              		.loc 1 137 21 view .LVU250
 138:armwave.c     ****                     b = MIN(bb, 255);
 865              		.loc 1 138 21 view .LVU251
 139:armwave.c     **** 
 866              		.loc 1 139 21 view .LVU252
 142:armwave.c     **** 
 867              		.loc 1 142 21 view .LVU253
 145:armwave.c     ****                     xx = nsub & 0xff;
 868              		.loc 1 145 21 view .LVU254
 869              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 870              		.loc 1 135 55 is_stmt 0 view .LVU255
 871 034c 920B0EE0 		mul	lr, r2, fp	@ tmp343, wave_word, _80
 872              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 873              		.loc 1 134 55 view .LVU256
 874 0350 920904E0 		mul	r4, r2, r9	@ tmp347, wave_word, _76
 875              	@ armwave.c:135:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 876              		.loc 1 135 24 view .LVU257
 877 0354 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp343,
 878              	.LVL62:
 879              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 880              		.loc 1 133 55 view .LVU258
 881 0358 920A02E0 		mul	r2, r2, r10	@ tmp353, wave_word, _70
 882              	.LVL63:
 883              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 884              		.loc 1 139 25 view .LVU259
 885 035c FF005EE3 		cmp	lr, #255	@ bb,
 886              	@ armwave.c:134:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 887              		.loc 1 134 24 view .LVU260
 888 0360 4444A0E1 		asr	r4, r4, #8	@ gg, tmp347,
 889              	.LVL64:
 890              	@ armwave.c:139:                     b = MIN(bb, 255);
 139:armwave.c     **** 
 891              		.loc 1 139 25 view .LVU261
 892 0364 FFE0A0A3 		movge	lr, #255	@ bb,
 893              	.LVL65:
 894              	@ armwave.c:138:                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 895              		.loc 1 138 25 view .LVU262
 896 0368 FF0054E3 		cmp	r4, #255	@ gg,
 897 036c FF40A0A3 		movge	r4, #255	@ gg,
 898              	.LVL66:
 138:armwave.c     ****                     b = MIN(bb, 255);
 899              		.loc 1 138 25 view .LVU263
 900 0370 036083E2 		add	r6, r3, #3	@ _59, n,
 146:armwave.c     ****                     yy = nsub >> 8;
 901              		.loc 1 146 21 is_stmt 1 view .LVU264
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 902              		.loc 1 147 21 view .LVU265
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 903              		.loc 1 148 21 view .LVU266
 149:armwave.c     ****                 }
 904              		.loc 1 149 21 view .LVU267
 905              	@ armwave.c:133:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 906              		.loc 1 133 24 is_stmt 0 view .LVU268
 907 0374 4224A0E1 		asr	r2, r2, #8	@ rr, tmp353,
 908              	.LVL67:
 909              	@ armwave.c:148:                     offset = yy + (xx * g_armwave_state.target_width);
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 910              		.loc 1 148 39 view .LVU269
 911 0378 407095E5 		ldr	r7, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 912              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 913              		.loc 1 137 25 view .LVU270
 914 037c FF0052E3 		cmp	r2, #255	@ rr,
 915              	@ armwave.c:146:                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 916              		.loc 1 146 24 view .LVU271
 917 0380 7680EFE6 		uxtb	r8, r6	@ xx, _59
 918              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 919              		.loc 1 142 56 view .LVU272
 920 0384 0444A0E1 		lsl	r4, r4, #8	@ tmp348, gg,
 921              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 922              		.loc 1 142 44 view .LVU273
 923 0388 0EE8A0E1 		lsl	lr, lr, #16	@ tmp344, bb,
 924              	@ armwave.c:137:                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 925              		.loc 1 137 25 view .LVU274
 926 038c FF20A0A3 		movge	r2, #255	@ rr,
 927              	.LVL68:
 928              	@ armwave.c:147:                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 929              		.loc 1 147 31 view .LVU275
 930 0390 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 931              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 932              		.loc 1 142 44 view .LVU276
 933 0394 FFE80EE2 		and	lr, lr, #16711680	@ tmp345, tmp344,
 934              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 935              		.loc 1 142 56 view .LVU277
 936 0398 7440FFE6 		uxth	r4, r4	@ tmp349, tmp348
 937              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 938              		.loc 1 149 39 view .LVU278
 939 039c 976826E0 		mla	r6, r7, r8, r6	@ tmp341, g_armwave_state.target_width, xx, yy
 940              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 941              		.loc 1 142 51 view .LVU279
 942 03a0 04E08EE1 		orr	lr, lr, r4	@ tmp351, tmp345, tmp349
 943              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 944              		.loc 1 142 62 view .LVU280
 945 03a4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 946              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 947              		.loc 1 149 49 view .LVU281
 948 03a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 949              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 950              		.loc 1 142 62 view .LVU282
 951 03ac 02208EE1 		orr	r2, lr, r2	@ tmp355, tmp351, rr
 952              	@ armwave.c:142:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 953              		.loc 1 142 26 view .LVU283
 954 03b0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp355,
 955              	@ armwave.c:149:                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 956              		.loc 1 149 49 view .LVU284
 957 03b4 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 958 03b8 81FFFFEA 		b	.L29		@
 959              	.LVL69:
 960              	.L50:
 115:armwave.c     **** 
 961              		.loc 1 115 5 is_stmt 1 discriminator 1 view .LVU285
 962 03bc 10309FE5 		ldr	r3, .L52+4	@,
 963 03c0 7320A0E3 		mov	r2, #115	@,
 964 03c4 0C109FE5 		ldr	r1, .L52+8	@,
 965              	.LVL70:
 115:armwave.c     **** 
 966              		.loc 1 115 5 is_stmt 0 discriminator 1 view .LVU286
 967 03c8 0C009FE5 		ldr	r0, .L52+12	@,
 968              	.LVL71:
 115:armwave.c     **** 
 969              		.loc 1 115 5 discriminator 1 view .LVU287
 970 03cc FEFFFFEB 		bl	__assert_fail		@
 971              	.LVL72:
 972              	.L53:
 115:armwave.c     **** 
 973              		.loc 1 115 5 discriminator 1 view .LVU288
 974              		.align	2
 975              	.L52:
 976 03d0 00000000 		.word	g_armwave_state
 977 03d4 00000000 		.word	.LANCHOR0
 978 03d8 20000000 		.word	.LC2
 979 03dc 2C000000 		.word	.LC3
 980              		.cfi_endproc
 981              	.LFE60:
 983              		.align	2
 984              		.global	armwave_fill_pixbuf_scaled
 985              		.syntax unified
 986              		.arm
 987              		.fpu vfp
 989              	armwave_fill_pixbuf_scaled:
 990              	.LVL73:
 991              	.LFB61:
 155:armwave.c     **** 
 156:armwave.c     **** /*
 157:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 158:armwave.c     ****  * Rows are repeated as necessary.
 159:armwave.c     ****  */
 160:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 161:armwave.c     **** {
 992              		.loc 1 161 1 is_stmt 1 view -0
 993              		.cfi_startproc
 994              		@ args = 0, pretend = 0, frame = 8
 995              		@ frame_needed = 0, uses_anonymous_args = 0
 162:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 996              		.loc 1 162 5 view .LVU290
 163:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 997              		.loc 1 163 5 view .LVU291
 164:armwave.c     ****     uint8_t r, g, b, value, row;
 998              		.loc 1 164 5 view .LVU292
 165:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 999              		.loc 1 165 5 view .LVU293
 1000              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1001              		.loc 1 161 1 is_stmt 0 view .LVU294
 1002 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1003              		.cfi_def_cfa_offset 36
 1004              		.cfi_offset 4, -36
 1005              		.cfi_offset 5, -32
 1006              		.cfi_offset 6, -28
 1007              		.cfi_offset 7, -24
 1008              		.cfi_offset 8, -20
 1009              		.cfi_offset 9, -16
 1010              		.cfi_offset 10, -12
 1011              		.cfi_offset 11, -8
 1012              		.cfi_offset 14, -4
 1013              	@ armwave.c:169:     assert(out_buffer != NULL);
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 167:armwave.c     ****     uint32_t offset;
 168:armwave.c     **** 
 169:armwave.c     ****     assert(out_buffer != NULL);
 1014              		.loc 1 169 5 view .LVU295
 1015 03e4 000050E3 		cmp	r0, #0	@ out_buffer
 1016              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1017              		.loc 1 165 15 view .LVU296
 1018 03e8 34519FE5 		ldr	r5, .L79	@ tmp202,
 1019              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 1020              		.loc 1 161 1 view .LVU297
 1021 03ec 0CD04DE2 		sub	sp, sp, #12	@,,
 1022              		.cfi_def_cfa_offset 48
 1023              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1024              		.loc 1 165 15 view .LVU298
 1025 03f0 046095E5 		ldr	r6, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1026              	.LVL74:
 166:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1027              		.loc 1 166 5 is_stmt 1 view .LVU299
 167:armwave.c     **** 
 1028              		.loc 1 167 5 view .LVU300
 1029              		.loc 1 169 5 view .LVU301
 1030 03f4 4500000A 		beq	.L76		@,
 170:armwave.c     **** 
 171:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 1031              		.loc 1 171 5 view .LVU302
 1032              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 1033              		.loc 1 171 41 is_stmt 0 view .LVU303
 1034 03f8 408095E5 		ldr	r8, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1035 03fc 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 1036              	.LVL75:
 172:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 1037              		.loc 1 172 5 is_stmt 1 view .LVU304
 173:armwave.c     **** 
 174:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1038              		.loc 1 174 5 view .LVU305
 1039              		.loc 1 174 5 is_stmt 0 view .LVU306
 1040 0400 000058E3 		cmp	r8, #0	@ npix,
 1041 0404 0B0000DA 		ble	.L54		@,
 1042              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 175:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 176:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 177:armwave.c     ****         // most normal waveforms.
 178:armwave.c     ****         wave_word = *base_32ptr++;
 179:armwave.c     **** 
 180:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 181:armwave.c     ****             for(w = 0; w < 4; w++) {
 182:armwave.c     ****                 value = wave_word & 0xff;
 183:armwave.c     ****                 wave_word >>= 8;
 184:armwave.c     **** 
 185:armwave.c     ****                 if(value != 0) {
 186:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 187:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1043              		.loc 1 187 52 view .LVU307
 1044 0408 F635D5E1 		ldrsh	r3, [r5, #86]	@ _11, g_armwave_state.ch1_color.g
 1045              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1046              		.loc 1 186 52 view .LVU308
 1047 040c F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _7, g_armwave_state.ch1_color.r
 1048              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1049              		.loc 1 174 11 view .LVU309
 1050 0410 00E0A0E3 		mov	lr, #0	@ n,
 1051              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1052              		.loc 1 187 52 view .LVU310
 1053 0414 00308DE5 		str	r3, [sp]	@ _11, %sfp
 1054              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1055              		.loc 1 188 52 view .LVU311
 1056 0418 F835D5E1 		ldrsh	r3, [r5, #88]	@ _14, g_armwave_state.ch1_color.b
 1057 041c 04308DE5 		str	r3, [sp, #4]	@ _14, %sfp
 1058              	.LVL76:
 1059              	.L61:
 178:armwave.c     **** 
 1060              		.loc 1 178 9 is_stmt 1 view .LVU312
 1061              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 1062              		.loc 1 178 19 is_stmt 0 view .LVU313
 1063 0420 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_53, offset: 4294967292B]
 1064              	.LVL77:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1065              		.loc 1 180 9 is_stmt 1 view .LVU314
 1066              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 1067              		.loc 1 180 11 is_stmt 0 view .LVU315
 1068 0424 00005CE3 		cmp	ip, #0	@ wave_word,
 1069 0428 0400001A 		bne	.L77		@,
 1070              	.L57:
 1071              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1072              		.loc 1 174 28 view .LVU316
 1073 042c 04E08EE2 		add	lr, lr, #4	@ n, n,
 1074              	.LVL78:
 1075              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1076              		.loc 1 174 5 view .LVU317
 1077 0430 0E0058E1 		cmp	r8, lr	@ npix, n
 1078 0434 F9FFFFCA 		bgt	.L61		@,
 1079              	.LVL79:
 1080              	.L54:
 1081              	@ armwave.c:210: }
 189:armwave.c     **** 
 190:armwave.c     ****                     r = MIN(rr, 255);
 191:armwave.c     ****                     g = MIN(gg, 255);
 192:armwave.c     ****                     b = MIN(bb, 255);
 193:armwave.c     **** 
 194:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 195:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 196:armwave.c     **** 
 197:armwave.c     ****                     // Do line scaling as necessary.
 198:armwave.c     ****                     nsub = n + w;
 199:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 200:armwave.c     ****                     xx = (nsub >> 8);
 201:armwave.c     **** 
 202:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 203:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 204:armwave.c     ****                         *(out_buffer_base + offset) = word;
 205:armwave.c     ****                     }
 206:armwave.c     ****                 }
 207:armwave.c     ****             }
 208:armwave.c     ****         }
 209:armwave.c     ****     }
 210:armwave.c     **** }
 1082              		.loc 1 210 1 view .LVU318
 1083 0438 0CD08DE2 		add	sp, sp, #12	@,,
 1084              		.cfi_remember_state
 1085              		.cfi_def_cfa_offset 36
 1086              		@ sp needed	@
 1087 043c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1088              	.LVL80:
 1089              	.L77:
 1090              		.cfi_restore_state
 1091              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1092              		.loc 1 185 19 view .LVU319
 1093 0440 FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1094              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1095              		.loc 1 181 19 view .LVU320
 1096 0444 0090A0E3 		mov	r9, #0	@ w,
 1097              	.LVL81:
 182:armwave.c     ****                 wave_word >>= 8;
 1098              		.loc 1 182 17 is_stmt 1 view .LVU321
 183:armwave.c     **** 
 1099              		.loc 1 183 17 view .LVU322
 1100              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1101              		.loc 1 183 27 is_stmt 0 view .LVU323
 1102 0448 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1103              	.LVL82:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1104              		.loc 1 185 17 is_stmt 1 view .LVU324
 1105              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1106              		.loc 1 185 19 is_stmt 0 view .LVU325
 1107 044c 0500001A 		bne	.L78		@,
 1108              	.L58:
 1109              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1110              		.loc 1 181 32 view .LVU326
 1111 0450 019089E2 		add	r9, r9, #1	@ w, w,
 1112              	.LVL83:
 1113              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 1114              		.loc 1 181 13 view .LVU327
 1115 0454 040059E3 		cmp	r9, #4	@ w,
 1116 0458 F3FFFF0A 		beq	.L57		@,
 182:armwave.c     ****                 wave_word >>= 8;
 1117              		.loc 1 182 17 is_stmt 1 view .LVU328
 1118              	.LVL84:
 183:armwave.c     **** 
 1119              		.loc 1 183 17 view .LVU329
 1120              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1121              		.loc 1 185 19 is_stmt 0 view .LVU330
 1122 045c FF301CE2 		ands	r3, ip, #255	@ _8, wave_word,
 1123              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 1124              		.loc 1 183 27 view .LVU331
 1125 0460 2CC4A0E1 		lsr	ip, ip, #8	@ wave_word, wave_word,
 1126              	.LVL85:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1127              		.loc 1 185 17 is_stmt 1 view .LVU332
 1128              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1129              		.loc 1 185 19 is_stmt 0 view .LVU333
 1130 0464 F9FFFF0A 		beq	.L58		@,
 1131              	.L78:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1132              		.loc 1 186 21 is_stmt 1 view .LVU334
 1133              	.LVL86:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1134              		.loc 1 187 21 view .LVU335
 188:armwave.c     **** 
 1135              		.loc 1 188 21 view .LVU336
 190:armwave.c     ****                     g = MIN(gg, 255);
 1136              		.loc 1 190 21 view .LVU337
 191:armwave.c     ****                     b = MIN(bb, 255);
 1137              		.loc 1 191 21 view .LVU338
 192:armwave.c     **** 
 1138              		.loc 1 192 21 view .LVU339
 195:armwave.c     **** 
 1139              		.loc 1 195 21 view .LVU340
 1140              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1141              		.loc 1 188 55 is_stmt 0 view .LVU341
 1142 0468 04209DE5 		ldr	r2, [sp, #4]	@ _14, %sfp
 1143              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1144              		.loc 1 187 55 view .LVU342
 1145 046c 00109DE5 		ldr	r1, [sp]	@ _11, %sfp
 1146 0470 09708EE0 		add	r7, lr, r9	@ _113, n, w
 1147              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1148              		.loc 1 188 55 view .LVU343
 1149 0474 920302E0 		mul	r2, r2, r3	@ tmp179, _14, _8
 1150              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1151              		.loc 1 187 55 view .LVU344
 1152 0478 910301E0 		mul	r1, r1, r3	@ tmp183, _11, _8
 1153              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 1154              		.loc 1 188 24 view .LVU345
 1155 047c 4224A0E1 		asr	r2, r2, #8	@ bb, tmp179,
 1156              	.LVL87:
 1157              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1158              		.loc 1 186 55 view .LVU346
 1159 0480 930B03E0 		mul	r3, r3, fp	@ tmp189, _8, _7
 1160              	.LVL88:
 1161              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1162              		.loc 1 187 24 view .LVU347
 1163 0484 4114A0E1 		asr	r1, r1, #8	@ gg, tmp183,
 1164              	.LVL89:
 1165              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 1166              		.loc 1 192 25 view .LVU348
 1167 0488 FF0052E3 		cmp	r2, #255	@ bb,
 1168 048c FF20A0A3 		movge	r2, #255	@ bb,
 1169              	.LVL90:
 1170              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 1171              		.loc 1 191 25 view .LVU349
 1172 0490 FF0051E3 		cmp	r1, #255	@ gg,
 1173 0494 FF10A0A3 		movge	r1, #255	@ gg,
 1174              	.LVL91:
 1175              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1176              		.loc 1 186 24 view .LVU350
 1177 0498 4334A0E1 		asr	r3, r3, #8	@ rr, tmp189,
 1178              	.LVL92:
 1179              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1180              		.loc 1 190 25 view .LVU351
 1181 049c FF0053E3 		cmp	r3, #255	@ rr,
 1182              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1183              		.loc 1 195 56 view .LVU352
 1184 04a0 0114A0E1 		lsl	r1, r1, #8	@ tmp184, gg,
 1185              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 1186              		.loc 1 190 25 view .LVU353
 1187 04a4 FF30A0A3 		movge	r3, #255	@ rr,
 1188              	.LVL93:
 1189              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1190              		.loc 1 195 44 view .LVU354
 1191 04a8 0248A0E1 		lsl	r4, r2, #16	@ tmp180, bb,
 1192              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1193              		.loc 1 195 56 view .LVU355
 1194 04ac 7110FFE6 		uxth	r1, r1	@ tmp185, tmp184
 1195              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1196              		.loc 1 199 57 view .LVU356
 1197 04b0 1CA095E5 		ldr	r10, [r5, #28]	@ _28, g_armwave_state.vscale
 1198              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1199              		.loc 1 195 44 view .LVU357
 1200 04b4 FF4804E2 		and	r4, r4, #16711680	@ tmp181, tmp180,
 1201              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1202              		.loc 1 195 51 view .LVU358
 1203 04b8 014084E1 		orr	r4, r4, r1	@ tmp187, tmp181, tmp185
 1204              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1205              		.loc 1 195 62 view .LVU359
 1206 04bc 7330EFE6 		uxtb	r3, r3	@ rr, rr
 1207              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1208              		.loc 1 199 32 view .LVU360
 1209 04c0 7710EFE6 		uxtb	r1, r7	@ _113, _113
 1210              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1211              		.loc 1 195 62 view .LVU361
 1212 04c4 034084E1 		orr	r4, r4, r3	@ tmp191, tmp187, rr
 1213              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1214              		.loc 1 202 21 view .LVU362
 1215 04c8 00005AE3 		cmp	r10, #0	@ _28,
 1216              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 1217              		.loc 1 195 26 view .LVU363
 1218 04cc FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp191,
 1219              	.LVL94:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 1220              		.loc 1 198 21 is_stmt 1 view .LVU364
 199:armwave.c     ****                     xx = (nsub >> 8);
 1221              		.loc 1 199 21 view .LVU365
 1222              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 1223              		.loc 1 200 32 is_stmt 0 view .LVU366
 1224 04d0 4774A0E1 		asr	r7, r7, #8	@ xx, _113,
 1225              	.LVL95:
 1226              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 1227              		.loc 1 199 24 view .LVU367
 1228 04d4 9A010AE0 		mul	r10, r10, r1	@ yy, _28, _113
 1229              	.LVL96:
 200:armwave.c     **** 
 1230              		.loc 1 200 21 is_stmt 1 view .LVU368
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1231              		.loc 1 202 21 view .LVU369
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1232              		.loc 1 202 21 is_stmt 0 view .LVU370
 1233 04d8 DCFFFF0A 		beq	.L58		@,
 1234              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1235              		.loc 1 202 29 view .LVU371
 1236 04dc 0030A0E3 		mov	r3, #0	@ row,
 1237              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1238              		.loc 1 202 38 view .LVU372
 1239 04e0 0320A0E1 		mov	r2, r3	@ _35, row
 1240              	.LVL97:
 1241              	.L59:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1242              		.loc 1 203 25 is_stmt 1 discriminator 3 view .LVU373
 204:armwave.c     ****                     }
 1243              		.loc 1 204 25 discriminator 3 view .LVU374
 1244              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1245              		.loc 1 203 52 is_stmt 0 discriminator 3 view .LVU375
 1246 04e4 401095E5 		ldr	r1, [r5, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1247              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 1248              		.loc 1 203 45 discriminator 3 view .LVU376
 1249 04e8 0A2082E0 		add	r2, r2, r10	@ tmp194, _35, yy
 1250              	.LVL98:
 1251              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1252              		.loc 1 202 67 discriminator 3 view .LVU377
 1253 04ec 013083E2 		add	r3, r3, #1	@ tmp199, row,
 1254              	.LVL99:
 1255              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1256              		.loc 1 204 43 discriminator 3 view .LVU378
 1257 04f0 917221E0 		mla	r1, r1, r2, r7	@ tmp198, g_armwave_state.target_width, tmp194, xx
 1258              	.LVL100:
 1259              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1260              		.loc 1 202 67 discriminator 3 view .LVU379
 1261 04f4 7330EFE6 		uxtb	r3, r3	@ row, tmp199
 1262              	.LVL101:
 1263              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1264              		.loc 1 202 38 discriminator 3 view .LVU380
 1265 04f8 0320A0E1 		mov	r2, r3	@ _35, row
 1266              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 1267              		.loc 1 204 53 discriminator 3 view .LVU381
 1268 04fc 014180E7 		str	r4, [r0, r1, lsl #2]	@ word, *_34
 1269              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1270              		.loc 1 202 21 discriminator 3 view .LVU382
 1271 0500 1C1095E5 		ldr	r1, [r5, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1272              	.LVL102:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1273              		.loc 1 202 21 discriminator 3 view .LVU383
 1274 0504 010053E1 		cmp	r3, r1	@ row, g_armwave_state.vscale
 1275 0508 F5FFFF3A 		bcc	.L59		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 1276              		.loc 1 202 21 discriminator 3 view .LVU384
 1277 050c CFFFFFEA 		b	.L58		@
 1278              	.LVL103:
 1279              	.L76:
 169:armwave.c     **** 
 1280              		.loc 1 169 5 is_stmt 1 discriminator 1 view .LVU385
 1281 0510 10309FE5 		ldr	r3, .L79+4	@,
 1282 0514 A920A0E3 		mov	r2, #169	@,
 1283 0518 0C109FE5 		ldr	r1, .L79+8	@,
 1284 051c 0C009FE5 		ldr	r0, .L79+12	@,
 1285              	.LVL104:
 169:armwave.c     **** 
 1286              		.loc 1 169 5 is_stmt 0 discriminator 1 view .LVU386
 1287 0520 FEFFFFEB 		bl	__assert_fail		@
 1288              	.LVL105:
 1289              	.L80:
 1290              		.align	2
 1291              	.L79:
 1292 0524 00000000 		.word	g_armwave_state
 1293 0528 18000000 		.word	.LANCHOR0+24
 1294 052c 20000000 		.word	.LC2
 1295 0530 2C000000 		.word	.LC3
 1296              		.cfi_endproc
 1297              	.LFE61:
 1299              		.align	2
 1300              		.global	armwave_setup_render
 1301              		.syntax unified
 1302              		.arm
 1303              		.fpu vfp
 1305              	armwave_setup_render:
 1306              	.LVL106:
 1307              	.LFB62:
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Setup the renderer with passed parameters.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 216:armwave.c     **** {
 1308              		.loc 1 216 1 is_stmt 1 view -0
 1309              		.cfi_startproc
 1310              		@ args = 12, pretend = 0, frame = 0
 1311              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t length, xx;
 1312              		.loc 1 217 5 view .LVU388
 218:armwave.c     ****     float points_per_pixel;
 1313              		.loc 1 218 5 view .LVU389
 219:armwave.c     **** 
 220:armwave.c     ****     assert(start_point < end_point);
 1314              		.loc 1 220 5 view .LVU390
 1315              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1316              		.loc 1 216 1 is_stmt 0 view .LVU391
 1317 0534 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1318              		.cfi_def_cfa_offset 24
 1319              		.cfi_offset 4, -24
 1320              		.cfi_offset 5, -20
 1321              		.cfi_offset 6, -16
 1322              		.cfi_offset 7, -12
 1323              		.cfi_offset 8, -8
 1324              		.cfi_offset 14, -4
 1325              	@ armwave.c:220:     assert(start_point < end_point);
 1326              		.loc 1 220 5 view .LVU392
 1327 0538 010050E1 		cmp	r0, r1	@ start_point, end_point
 1328              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1329              		.loc 1 216 1 view .LVU393
 1330 053c 028B2DED 		vpush.64	{d8}	@
 1331              		.cfi_def_cfa_offset 32
 1332              		.cfi_offset 80, -32
 1333              		.cfi_offset 81, -28
 1334              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t length, xx;
 1335              		.loc 1 216 1 view .LVU394
 1336 0540 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1337 0544 20609DE5 		ldr	r6, [sp, #32]	@ target_width, target_width
 1338 0548 24109DE5 		ldr	r1, [sp, #36]	@ target_height, target_height
 1339              	.LVL107:
 1340              	@ armwave.c:220:     assert(start_point < end_point);
 1341              		.loc 1 220 5 view .LVU395
 1342 054c 6B00002A 		bcs	.L99		@,
 221:armwave.c     **** 
 222:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 223:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 1343              		.loc 1 223 5 is_stmt 1 view .LVU396
 1344 0550 0070A0E1 		mov	r7, r0	@ start_point, start_point
 1345 0554 010C41E2 		sub	r0, r1, #256	@ tmp153, target_height,
 1346              	.LVL108:
 1347              		.loc 1 223 5 is_stmt 0 view .LVU397
 1348 0558 010CD0E3 		bics	r0, r0, #256	@ tmp230, tmp153,
 1349 055c 4A00000A 		beq	.L83		@,
 1350              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 1351              		.loc 1 223 5 discriminator 1 view .LVU398
 1352 0560 010B41E2 		sub	r0, r1, #1024	@ tmp155, target_height,
 1353 0564 010BD0E3 		bics	r0, r0, #1024	@ tmp231, tmp155,
 1354 0568 5500001A 		bne	.L100		@,
 224:armwave.c     **** 
 225:armwave.c     ****     if(target_height == 256) {
 1355              		.loc 1 225 5 is_stmt 1 view .LVU399
 226:armwave.c     ****         g_armwave_state.row_shift = 8;
 227:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 228:armwave.c     ****     } else if(target_height == 512) {
 229:armwave.c     ****         g_armwave_state.row_shift = 9;
 230:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 231:armwave.c     ****     } else if(target_height == 1024) {
 1356              		.loc 1 231 12 view .LVU400
 1357              	@ armwave.c:231:     } else if(target_height == 1024) {
 1358              		.loc 1 231 14 is_stmt 0 view .LVU401
 1359 056c 010B51E3 		cmp	r1, #1024	@ target_height,
 1360              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_shift = 10;
 1361              		.loc 1 232 35 view .LVU402
 1362 0570 A0419FE5 		ldr	r4, .L104+4	@ tmp228,
 1363              	@ armwave.c:231:     } else if(target_height == 1024) {
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 1364              		.loc 1 231 14 view .LVU403
 1365 0574 4D00000A 		beq	.L101		@,
 233:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 234:armwave.c     ****     } else if(target_height == 2048) {
 1366              		.loc 1 234 12 is_stmt 1 view .LVU404
 1367              	@ armwave.c:234:     } else if(target_height == 2048) {
 1368              		.loc 1 234 14 is_stmt 0 view .LVU405
 1369 0578 020B51E3 		cmp	r1, #2048	@ target_height,
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 1370              		.loc 1 235 9 is_stmt 1 view .LVU406
 1371              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 1372              		.loc 1 235 35 is_stmt 0 view .LVU407
 1373 057c 0BC0A003 		moveq	ip, #11	@ tmp174,
 1374              	@ armwave.c:236:         g_armwave_state.row_mask = 0x7ff;
 236:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1375              		.loc 1 236 34 view .LVU408
 1376 0580 94019F05 		ldreq	r0, .L104+8	@ tmp176,
 1377              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 235:armwave.c     ****         g_armwave_state.row_shift = 11;
 1378              		.loc 1 235 35 view .LVU409
 1379 0584 48C08405 		streq	ip, [r4, #72]	@ tmp174, g_armwave_state.row_shift
 1380              		.loc 1 236 9 is_stmt 1 view .LVU410
 1381              	@ armwave.c:236:         g_armwave_state.row_mask = 0x7ff;
 1382              		.loc 1 236 34 is_stmt 0 view .LVU411
 1383 0588 4C008405 		streq	r0, [r4, #76]	@ tmp176, g_armwave_state.row_mask
 1384              	.L86:
 237:armwave.c     ****     } 
 238:armwave.c     **** 
 239:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 240:armwave.c     ****     g_armwave_state.xstride = target_height;
 1385              		.loc 1 240 5 is_stmt 1 view .LVU412
 1386              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 242:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 243:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 244:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 245:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1387              		.loc 1 245 42 is_stmt 0 view .LVU413
 1388 058c 96010CE0 		mul	ip, r6, r1	@ tmp184, target_width, target_height
 1389              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1390              		.loc 1 241 44 view .LVU414
 1391 0590 2104A0E1 		lsr	r0, r1, #8	@ tmp179, target_height,
 1392              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1393              		.loc 1 242 33 view .LVU415
 1394 0594 203084E5 		str	r3, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1395              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 246:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 247:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1396              		.loc 1 247 68 view .LVU416
 1397 0598 0634A0E1 		lsl	r3, r6, #8	@ _9, target_width,
 1398              	.LVL109:
 1399              	@ armwave.c:240:     g_armwave_state.xstride = target_height;
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1400              		.loc 1 240 29 view .LVU417
 1401 059c 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1402              		.loc 1 241 5 is_stmt 1 view .LVU418
 1403              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1404              		.loc 1 243 31 is_stmt 0 view .LVU419
 1405 05a0 282084E5 		str	r2, [r4, #40]	@ waves_max, g_armwave_state.waves_max
 1406              	@ armwave.c:244:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1407              		.loc 1 244 27 view .LVU420
 1408 05a4 242084E5 		str	r2, [r4, #36]	@ waves_max, g_armwave_state.waves
 1409              	@ armwave.c:249:     g_armwave_state.target_height = target_height;
 248:armwave.c     ****     g_armwave_state.target_width = target_width;
 249:armwave.c     ****     g_armwave_state.target_height = target_height;
 1410              		.loc 1 249 35 view .LVU421
 1411 05a8 441084E5 		str	r1, [r4, #68]	@ target_height, g_armwave_state.target_height
 1412              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1413              		.loc 1 246 37 view .LVU422
 1414 05ac 012CA0E3 		mov	r2, #256	@ tmp186,
 1415              	.LVL110:
 1416              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 250:armwave.c     **** 
 251:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1417              		.loc 1 251 5 view .LVU423
 1418 05b0 0310A0E1 		mov	r1, r3	@, _9
 1419              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1420              		.loc 1 241 28 view .LVU424
 1421 05b4 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1422              		.loc 1 242 5 is_stmt 1 view .LVU425
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1423              		.loc 1 243 5 view .LVU426
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1424              		.loc 1 244 5 view .LVU427
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1425              		.loc 1 245 5 view .LVU428
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1426              		.loc 1 246 5 view .LVU429
 1427              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 1428              		.loc 1 251 5 is_stmt 0 view .LVU430
 1429 05b8 60019FE5 		ldr	r0, .L104+12	@,
 1430              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 1431              		.loc 1 247 34 view .LVU431
 1432 05bc 383084E5 		str	r3, [r4, #56]	@ _9, g_armwave_state.ch_buff_size
 1433              	@ armwave.c:248:     g_armwave_state.target_width = target_width;
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 1434              		.loc 1 248 34 view .LVU432
 1435 05c0 406084E5 		str	r6, [r4, #64]	@ target_width, g_armwave_state.target_width
 1436              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1437              		.loc 1 245 26 view .LVU433
 1438 05c4 3CC084E5 		str	ip, [r4, #60]	@ tmp184, g_armwave_state.size
 1439              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1440              		.loc 1 246 37 view .LVU434
 1441 05c8 2C2084E5 		str	r2, [r4, #44]	@ tmp186, g_armwave_state.bitdepth_height
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 1442              		.loc 1 247 5 is_stmt 1 view .LVU435
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 1443              		.loc 1 248 5 view .LVU436
 249:armwave.c     **** 
 1444              		.loc 1 249 5 view .LVU437
 1445              		.loc 1 251 5 view .LVU438
 1446 05cc FEFFFFEB 		bl	printf		@
 1447              	.LVL111:
 252:armwave.c     **** 
 253:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 254:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 255:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 256:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1448              		.loc 1 256 5 view .LVU439
 1449              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 257:armwave.c     **** 
 258:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1450              		.loc 1 258 23 is_stmt 0 view .LVU440
 1451 05d0 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1452              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 1453              		.loc 1 256 34 view .LVU441
 1454 05d4 4030A0E3 		mov	r3, #64	@ tmp192,
 1455              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 1456              		.loc 1 258 7 view .LVU442
 1457 05d8 000050E3 		cmp	r0, #0	@ _10,
 1458              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 1459              		.loc 1 256 34 view .LVU443
 1460 05dc 303084E5 		str	r3, [r4, #48]	@ tmp192, g_armwave_state.slice_height
 1461              		.loc 1 258 5 is_stmt 1 view .LVU444
 1462              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 1463              		.loc 1 258 7 is_stmt 0 view .LVU445
 1464 05e0 0000000A 		beq	.L88		@,
 259:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1465              		.loc 1 259 9 is_stmt 1 view .LVU446
 1466 05e4 FEFFFFEB 		bl	free		@
 1467              	.LVL112:
 1468              	.L88:
 260:armwave.c     **** 
 261:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1469              		.loc 1 261 5 view .LVU447
 1470              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1471              		.loc 1 261 34 is_stmt 0 view .LVU448
 1472 05e8 0110A0E3 		mov	r1, #1	@,
 1473 05ec 380094E5 		ldr	r0, [r4, #56]	@, g_armwave_state.ch_buff_size
 1474 05f0 FEFFFFEB 		bl	calloc		@
 1475              	.LVL113:
 1476              	@ armwave.c:263:     assert(g_armwave_state.ch1_buffer != NULL);
 262:armwave.c     **** 
 263:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1477              		.loc 1 263 5 view .LVU449
 1478 05f4 000050E3 		cmp	r0, #0	@ tmp196,
 1479              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 1480              		.loc 1 261 32 view .LVU450
 1481 05f8 040084E5 		str	r0, [r4, #4]	@ tmp196, g_armwave_state.ch1_buffer
 1482              		.loc 1 263 5 is_stmt 1 view .LVU451
 1483 05fc 3500000A 		beq	.L102		@,
 264:armwave.c     **** 
 265:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 266:armwave.c     ****     length = end_point - start_point;
 1484              		.loc 1 266 5 view .LVU452
 1485              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1486              		.loc 1 267 34 is_stmt 0 view .LVU453
 1487 0600 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1488              	@ armwave.c:266:     length = end_point - start_point;
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1489              		.loc 1 266 12 view .LVU454
 1490 0604 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1491              	.LVL114:
 1492              		.loc 1 267 5 is_stmt 1 view .LVU455
 1493              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 269:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1494              		.loc 1 269 40 is_stmt 0 view .LVU456
 1495 0608 8500A0E1 		lsl	r0, r5, #1	@, length,
 1496              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1497              		.loc 1 267 34 view .LVU457
 1498 060c 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp204, target_width
 1499              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1500              		.loc 1 267 31 view .LVU458
 1501 0610 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1502 0614 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp203, length
 1503              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1504              		.loc 1 268 60 view .LVU459
 1505 0618 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp234, g_armwave_state.slice_height
 1506 061c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp207, tmp234
 1507              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1508              		.loc 1 267 22 view .LVU460
 1509 0620 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp203, tmp204
 1510              	.LVL115:
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1511              		.loc 1 268 5 is_stmt 1 view .LVU461
 1512              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1513              		.loc 1 268 60 is_stmt 0 view .LVU462
 1514 0624 887A67EE 		vmul.f32	s15, s15, s16	@ tmp209, tmp207, points_per_pixel
 1515              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1516              		.loc 1 268 41 view .LVU463
 1517 0628 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp210, tmp209
 1518 062c 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp210, g_armwave_state.slice_record_height
 1519              		.loc 1 269 5 is_stmt 1 view .LVU464
 1520              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1521              		.loc 1 269 40 is_stmt 0 view .LVU465
 1522 0630 FEFFFFEB 		bl	malloc		@
 1523              	.LVL116:
 1524              	@ armwave.c:271:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 270:armwave.c     **** 
 271:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1525              		.loc 1 271 5 view .LVU466
 1526 0634 000050E3 		cmp	r0, #0	@ tmp212,
 1527              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 1528              		.loc 1 269 38 view .LVU467
 1529 0638 6C0084E5 		str	r0, [r4, #108]	@ tmp212, g_armwave_state.xcoord_to_xpixel
 1530              		.loc 1 271 5 is_stmt 1 view .LVU468
 1531 063c 2A00000A 		beq	.L103		@,
 1532              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 272:armwave.c     **** 
 273:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 274:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1533              		.loc 1 274 54 is_stmt 0 view .LVU469
 1534 0640 337ADFED 		vldr.32	s15, .L104	@ tmp219,
 1535 0644 020040E2 		sub	r0, r0, #2	@ ivtmp.73, tmp212,
 1536              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1537              		.loc 1 273 12 view .LVU470
 1538 0648 0030A0E3 		mov	r3, #0	@ xx,
 1539              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1540              		.loc 1 274 54 view .LVU471
 1541 064c 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp219, points_per_pixel
 1542              	.L91:
 1543              	.LVL117:
 1544              		.loc 1 274 9 is_stmt 1 discriminator 3 view .LVU472
 1545              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1546              		.loc 1 274 74 is_stmt 0 discriminator 3 view .LVU473
 1547 0650 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1548              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1549              		.loc 1 273 32 discriminator 3 view .LVU474
 1550 0654 013083E2 		add	r3, r3, #1	@ xx, xx,
 1551              	.LVL118:
 1552              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1553              		.loc 1 273 5 discriminator 3 view .LVU475
 1554 0658 030055E1 		cmp	r5, r3	@ length, xx
 1555              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1556              		.loc 1 274 74 discriminator 3 view .LVU476
 1557 065c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1558 0660 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _21
 1559              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1560              		.loc 1 274 46 discriminator 3 view .LVU477
 1561 0664 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1562 0668 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1563 066c B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _77, offset: 0B]
 1564              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1565              		.loc 1 273 5 discriminator 3 view .LVU478
 1566 0670 F6FFFF1A 		bne	.L91		@,
 275:armwave.c     **** 
 276:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 277:armwave.c     ****     }
 278:armwave.c     **** 
 279:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1567              		.loc 1 279 5 is_stmt 1 view .LVU479
 1568              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1569              		.loc 1 279 34 is_stmt 0 view .LVU480
 1570 0674 3C0094E5 		ldr	r0, [r4, #60]	@ g_armwave_state.size, g_armwave_state.size
 1571 0678 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1572 067c FEFFFFEB 		bl	malloc		@
 1573              	.LVL119:
 1574              	@ armwave.c:280: }
 280:armwave.c     **** }
 1575              		.loc 1 280 1 view .LVU481
 1576 0680 028BBDEC 		vldm	sp!, {d8}	@
 1577              		.cfi_remember_state
 1578              		.cfi_restore 80
 1579              		.cfi_restore 81
 1580              		.cfi_def_cfa_offset 24
 1581              	.LVL120:
 1582              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 1583              		.loc 1 279 32 view .LVU482
 1584 0684 500084E5 		str	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 1585              	@ armwave.c:280: }
 1586              		.loc 1 280 1 view .LVU483
 1587 0688 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1588              	.LVL121:
 1589              	.L83:
 1590              		.cfi_restore_state
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 1591              		.loc 1 225 5 is_stmt 1 view .LVU484
 1592              	@ armwave.c:225:     if(target_height == 256) {
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 1593              		.loc 1 225 7 is_stmt 0 view .LVU485
 1594 068c 010C51E3 		cmp	r1, #256	@ target_height,
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1595              		.loc 1 226 9 is_stmt 1 view .LVU486
 1596              	@ armwave.c:226:         g_armwave_state.row_shift = 8;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1597              		.loc 1 226 35 is_stmt 0 view .LVU487
 1598 0690 80409FE5 		ldr	r4, .L104+4	@ tmp228,
 1599              	@ armwave.c:230:         g_armwave_state.row_mask = 0x1ff;
 230:armwave.c     ****     } else if(target_height == 1024) {
 1600              		.loc 1 230 34 view .LVU488
 1601 0694 88009F15 		ldrne	r0, .L104+16	@ tmp168,
 1602              	@ armwave.c:226:         g_armwave_state.row_shift = 8;
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1603              		.loc 1 226 35 view .LVU489
 1604 0698 08C0A003 		moveq	ip, #8	@ tmp162,
 1605              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 1606              		.loc 1 227 34 view .LVU490
 1607 069c FF00A003 		moveq	r0, #255	@ tmp164,
 228:armwave.c     ****         g_armwave_state.row_shift = 9;
 1608              		.loc 1 228 12 is_stmt 1 view .LVU491
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1609              		.loc 1 229 9 view .LVU492
 1610              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1611              		.loc 1 229 35 is_stmt 0 view .LVU493
 1612 06a0 09C0A013 		movne	ip, #9	@ tmp166,
 1613 06a4 48C084E5 		str	ip, [r4, #72]	@ tmp166, g_armwave_state.row_shift
 230:armwave.c     ****     } else if(target_height == 1024) {
 1614              		.loc 1 230 9 is_stmt 1 view .LVU494
 1615              	@ armwave.c:230:         g_armwave_state.row_mask = 0x1ff;
 230:armwave.c     ****     } else if(target_height == 1024) {
 1616              		.loc 1 230 34 is_stmt 0 view .LVU495
 1617 06a8 4C0084E5 		str	r0, [r4, #76]	@ tmp168, g_armwave_state.row_mask
 1618 06ac B6FFFFEA 		b	.L86		@
 1619              	.L101:
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1620              		.loc 1 232 9 is_stmt 1 view .LVU496
 1621              	@ armwave.c:233:         g_armwave_state.row_mask = 0x3ff;
 233:armwave.c     ****     } else if(target_height == 2048) {
 1622              		.loc 1 233 34 is_stmt 0 view .LVU497
 1623 06b0 70009FE5 		ldr	r0, .L104+20	@ tmp172,
 1624              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1625              		.loc 1 232 35 view .LVU498
 1626 06b4 0AC0A0E3 		mov	ip, #10	@ tmp170,
 1627 06b8 48C084E5 		str	ip, [r4, #72]	@ tmp170, g_armwave_state.row_shift
 233:armwave.c     ****     } else if(target_height == 2048) {
 1628              		.loc 1 233 9 is_stmt 1 view .LVU499
 1629              	@ armwave.c:233:         g_armwave_state.row_mask = 0x3ff;
 233:armwave.c     ****     } else if(target_height == 2048) {
 1630              		.loc 1 233 34 is_stmt 0 view .LVU500
 1631 06bc 4C0084E5 		str	r0, [r4, #76]	@ tmp172, g_armwave_state.row_mask
 1632 06c0 B1FFFFEA 		b	.L86		@
 1633              	.L100:
 223:armwave.c     **** 
 1634              		.loc 1 223 5 is_stmt 1 discriminator 2 view .LVU501
 1635 06c4 60309FE5 		ldr	r3, .L104+24	@,
 1636              	.LVL122:
 223:armwave.c     **** 
 1637              		.loc 1 223 5 is_stmt 0 discriminator 2 view .LVU502
 1638 06c8 DF20A0E3 		mov	r2, #223	@,
 1639              	.LVL123:
 223:armwave.c     **** 
 1640              		.loc 1 223 5 discriminator 2 view .LVU503
 1641 06cc 5C109FE5 		ldr	r1, .L104+28	@,
 1642 06d0 5C009FE5 		ldr	r0, .L104+32	@,
 1643 06d4 FEFFFFEB 		bl	__assert_fail		@
 1644              	.LVL124:
 1645              	.L102:
 263:armwave.c     **** 
 1646              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU504
 1647 06d8 4C309FE5 		ldr	r3, .L104+24	@,
 1648 06dc 54209FE5 		ldr	r2, .L104+36	@,
 1649 06e0 48109FE5 		ldr	r1, .L104+28	@,
 1650 06e4 50009FE5 		ldr	r0, .L104+40	@,
 1651 06e8 FEFFFFEB 		bl	__assert_fail		@
 1652              	.LVL125:
 1653              	.L103:
 271:armwave.c     **** 
 1654              		.loc 1 271 5 discriminator 1 view .LVU505
 1655 06ec 38309FE5 		ldr	r3, .L104+24	@,
 1656 06f0 48209FE5 		ldr	r2, .L104+44	@,
 1657 06f4 34109FE5 		ldr	r1, .L104+28	@,
 1658 06f8 44009FE5 		ldr	r0, .L104+48	@,
 1659 06fc FEFFFFEB 		bl	__assert_fail		@
 1660              	.LVL126:
 1661              	.L99:
 220:armwave.c     **** 
 1662              		.loc 1 220 5 discriminator 1 view .LVU506
 1663 0700 24309FE5 		ldr	r3, .L104+24	@,
 1664              	.LVL127:
 220:armwave.c     **** 
 1665              		.loc 1 220 5 is_stmt 0 discriminator 1 view .LVU507
 1666 0704 DC20A0E3 		mov	r2, #220	@,
 1667              	.LVL128:
 220:armwave.c     **** 
 1668              		.loc 1 220 5 discriminator 1 view .LVU508
 1669 0708 20109FE5 		ldr	r1, .L104+28	@,
 1670 070c 34009FE5 		ldr	r0, .L104+52	@,
 1671              	.LVL129:
 220:armwave.c     **** 
 1672              		.loc 1 220 5 discriminator 1 view .LVU509
 1673 0710 FEFFFFEB 		bl	__assert_fail		@
 1674              	.LVL130:
 1675              	.L105:
 1676              		.align	2
 1677              	.L104:
 1678 0714 0000803F 		.word	1065353216
 1679 0718 00000000 		.word	g_armwave_state
 1680 071c FF070000 		.word	2047
 1681 0720 B8000000 		.word	.LC6
 1682 0724 FF010000 		.word	511
 1683 0728 FF030000 		.word	1023
 1684 072c 34000000 		.word	.LANCHOR0+52
 1685 0730 20000000 		.word	.LC2
 1686 0734 58000000 		.word	.LC5
 1687 0738 07010000 		.word	263
 1688 073c CC000000 		.word	.LC7
 1689 0740 0F010000 		.word	271
 1690 0744 F0000000 		.word	.LC8
 1691 0748 40000000 		.word	.LC4
 1692              		.cfi_endproc
 1693              	.LFE62:
 1695              		.align	2
 1696              		.global	armwave_set_wave_pointer
 1697              		.syntax unified
 1698              		.arm
 1699              		.fpu vfp
 1701              	armwave_set_wave_pointer:
 1702              	.LVL131:
 1703              	.LFB63:
 281:armwave.c     **** 
 282:armwave.c     **** /*
 283:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 284:armwave.c     ****  * in the future.
 285:armwave.c     ****  */
 286:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 287:armwave.c     **** {
 1704              		.loc 1 287 1 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1708              		.loc 1 288 5 view .LVU511
 1709 074c 000050E3 		cmp	r0, #0	@ wave_buffer
 1710              		.loc 1 288 5 is_stmt 0 view .LVU512
 1711 0750 0200000A 		beq	.L111		@,
 289:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1712              		.loc 1 289 5 is_stmt 1 view .LVU513
 1713              	@ armwave.c:289:     g_armwave_state.wave_buffer = wave_buffer;
 1714              		.loc 1 289 33 is_stmt 0 view .LVU514
 1715 0754 1C309FE5 		ldr	r3, .L112	@ tmp115,
 1716 0758 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1717 075c 1EFF2FE1 		bx	lr	@
 1718              	.L111:
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1719              		.loc 1 288 5 is_stmt 1 discriminator 1 view .LVU515
 1720              	@ armwave.c:287: {
 287:armwave.c     ****     assert(wave_buffer != NULL);
 1721              		.loc 1 287 1 is_stmt 0 discriminator 1 view .LVU516
 1722 0760 10402DE9 		push	{r4, lr}	@
 1723              		.cfi_def_cfa_offset 8
 1724              		.cfi_offset 4, -8
 1725              		.cfi_offset 14, -4
 1726              	@ armwave.c:288:     assert(wave_buffer != NULL);
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1727              		.loc 1 288 5 discriminator 1 view .LVU517
 1728 0764 122EA0E3 		mov	r2, #288	@,
 1729 0768 0C309FE5 		ldr	r3, .L112+4	@,
 1730 076c 0C109FE5 		ldr	r1, .L112+8	@,
 1731 0770 0C009FE5 		ldr	r0, .L112+12	@,
 1732              	.LVL132:
 288:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 288 5 discriminator 1 view .LVU518
 1734 0774 FEFFFFEB 		bl	__assert_fail		@
 1735              	.LVL133:
 1736              	.L113:
 1737              		.align	2
 1738              	.L112:
 1739 0778 00000000 		.word	g_armwave_state
 1740 077c 4C000000 		.word	.LANCHOR0+76
 1741 0780 20000000 		.word	.LC2
 1742 0784 1C010000 		.word	.LC9
 1743              		.cfi_endproc
 1744              	.LFE63:
 1746              		.align	2
 1747              		.global	armwave_set_wave_pointer_as_testbuf
 1748              		.syntax unified
 1749              		.arm
 1750              		.fpu vfp
 1752              	armwave_set_wave_pointer_as_testbuf:
 1753              	.LFB64:
 290:armwave.c     **** }
 291:armwave.c     **** 
 292:armwave.c     **** /*
 293:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 294:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 295:armwave.c     ****  */
 296:armwave.c     **** void armwave_set_wave_pointer_as_testbuf()
 297:armwave.c     **** {
 1754              		.loc 1 297 1 is_stmt 1 view -0
 1755              		.cfi_startproc
 1756              		@ args = 0, pretend = 0, frame = 0
 1757              		@ frame_needed = 0, uses_anonymous_args = 0
 1758              		@ link register save eliminated.
 298:armwave.c     ****     g_armwave_state.wave_buffer = &test_wave_buffer;
 1759              		.loc 1 298 5 view .LVU520
 1760              	@ armwave.c:298:     g_armwave_state.wave_buffer = &test_wave_buffer;
 1761              		.loc 1 298 33 is_stmt 0 view .LVU521
 1762 0788 08309FE5 		ldr	r3, .L115	@ tmp110,
 1763 078c 08209FE5 		ldr	r2, .L115+4	@ tmp111,
 1764 0790 142083E5 		str	r2, [r3, #20]	@ tmp111, g_armwave_state.wave_buffer
 1765              	@ armwave.c:299: }
 299:armwave.c     **** }
 1766              		.loc 1 299 1 view .LVU522
 1767 0794 1EFF2FE1 		bx	lr	@
 1768              	.L116:
 1769              		.align	2
 1770              	.L115:
 1771 0798 00000000 		.word	g_armwave_state
 1772 079c 00000000 		.word	test_wave_buffer
 1773              		.cfi_endproc
 1774              	.LFE64:
 1776              		.align	2
 1777              		.global	armwave_clear_buffer
 1778              		.syntax unified
 1779              		.arm
 1780              		.fpu vfp
 1782              	armwave_clear_buffer:
 1783              	.LVL134:
 1784              	.LFB65:
 300:armwave.c     **** 
 301:armwave.c     **** /*
 302:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 303:armwave.c     ****  */
 304:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 305:armwave.c     **** {
 1785              		.loc 1 305 1 is_stmt 1 view -0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
 1789              		@ link register save eliminated.
 306:armwave.c     ****     // Flags ignored, only one buffer cleared
 307:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1790              		.loc 1 307 5 view .LVU524
 1791 07a0 0C309FE5 		ldr	r3, .L118	@ tmp113,
 1792 07a4 0010A0E3 		mov	r1, #0	@,
 1793 07a8 3C2093E5 		ldr	r2, [r3, #60]	@, g_armwave_state.size
 1794 07ac 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1795              	.LVL135:
 1796              		.loc 1 307 5 is_stmt 0 view .LVU525
 1797 07b0 FEFFFFEA 		b	memset		@
 1798              	.LVL136:
 1799              	.L119:
 1800              		.align	2
 1801              	.L118:
 1802 07b4 00000000 		.word	g_armwave_state
 1803              		.cfi_endproc
 1804              	.LFE65:
 1806              		.align	2
 1807              		.global	armwave_set_channel_colour
 1808              		.syntax unified
 1809              		.arm
 1810              		.fpu vfp
 1812              	armwave_set_channel_colour:
 1813              	.LVL137:
 1814              	.LFB66:
 308:armwave.c     **** }
 309:armwave.c     **** 
 310:armwave.c     **** /*
 311:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 312:armwave.c     ****  */
 313:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 314:armwave.c     **** {
 1815              		.loc 1 314 1 is_stmt 1 view -0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 1819              		@ link register save eliminated.
 315:armwave.c     ****     // Only 1ch supported for now
 316:armwave.c     ****     switch(ch) {
 1820              		.loc 1 316 5 view .LVU527
 1821 07b8 010050E3 		cmp	r0, #1	@ ch,
 317:armwave.c     ****         case 1:
 318:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1822              		.loc 1 318 13 view .LVU528
 1823              	@ armwave.c:318:             g_armwave_state.ch1_color.r = r;
 1824              		.loc 1 318 41 is_stmt 0 view .LVU529
 1825 07bc 0C009F05 		ldreq	r0, .L122	@ tmp117,
 1826              	.LVL138:
 1827              		.loc 1 318 41 view .LVU530
 1828 07c0 B415C001 		strheq	r1, [r0, #84]	@ movhi	@ r, g_armwave_state.ch1_color.r
 319:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1829              		.loc 1 319 13 is_stmt 1 view .LVU531
 1830              	@ armwave.c:319:             g_armwave_state.ch1_color.g = g;
 1831              		.loc 1 319 41 is_stmt 0 view .LVU532
 1832 07c4 B625C001 		strheq	r2, [r0, #86]	@ movhi	@ g, g_armwave_state.ch1_color.g
 320:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1833              		.loc 1 320 13 is_stmt 1 view .LVU533
 1834              	@ armwave.c:320:             g_armwave_state.ch1_color.b = b;
 1835              		.loc 1 320 41 is_stmt 0 view .LVU534
 1836 07c8 B835C001 		strheq	r3, [r0, #88]	@ movhi	@ b, g_armwave_state.ch1_color.b
 321:armwave.c     ****             break;
 1837              		.loc 1 321 13 is_stmt 1 view .LVU535
 1838              	@ armwave.c:323: }
 322:armwave.c     ****     }
 323:armwave.c     **** }
 1839              		.loc 1 323 1 is_stmt 0 view .LVU536
 1840 07cc 1EFF2FE1 		bx	lr	@
 1841              	.L123:
 1842              		.align	2
 1843              	.L122:
 1844 07d0 00000000 		.word	g_armwave_state
 1845              		.cfi_endproc
 1846              	.LFE66:
 1848              		.align	2
 1849              		.global	armwave_dump_ppm_debug
 1850              		.syntax unified
 1851              		.arm
 1852              		.fpu vfp
 1854              	armwave_dump_ppm_debug:
 1855              	.LVL139:
 1856              	.LFB67:
 324:armwave.c     **** 
 325:armwave.c     **** /*
 326:armwave.c     ****  * Dump a ppm of a buffer to a file.
 327:armwave.c     ****  */
 328:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 329:armwave.c     **** {
 1857              		.loc 1 329 1 is_stmt 1 view -0
 1858              		.cfi_startproc
 1859              		@ args = 0, pretend = 0, frame = 0
 1860              		@ frame_needed = 0, uses_anonymous_args = 0
 330:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1861              		.loc 1 330 5 view .LVU538
 1862              	@ armwave.c:329: {
 329:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1863              		.loc 1 329 1 is_stmt 0 view .LVU539
 1864 07d4 0130A0E1 		mov	r3, r1	@ fn, fn
 1865 07d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1866              		.cfi_def_cfa_offset 28
 1867              		.cfi_offset 4, -28
 1868              		.cfi_offset 5, -24
 1869              		.cfi_offset 6, -20
 1870              		.cfi_offset 7, -16
 1871              		.cfi_offset 8, -12
 1872              		.cfi_offset 9, -8
 1873              		.cfi_offset 14, -4
 1874 07dc 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1875 07e0 0CD04DE2 		sub	sp, sp, #12	@,,
 1876              		.cfi_def_cfa_offset 40
 1877              	@ armwave.c:330:     FILE *fp = fopen(fn, "wb");
 1878              		.loc 1 330 16 view .LVU540
 1879 07e4 D8109FE5 		ldr	r1, .L136	@,
 1880              	.LVL140:
 1881              		.loc 1 330 16 view .LVU541
 1882 07e8 0300A0E1 		mov	r0, r3	@, fn
 1883              	.LVL141:
 1884              		.loc 1 330 16 view .LVU542
 1885 07ec FEFFFFEB 		bl	fopen64		@
 1886              	.LVL142:
 1887              	@ armwave.c:337:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 331:armwave.c     ****     uint32_t data;
 332:armwave.c     ****     int xx, yy;
 333:armwave.c     **** 
 334:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 335:armwave.c     **** 
 336:armwave.c     ****     fputs("P3\n", fp);
 337:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1888              		.loc 1 337 5 view .LVU543
 1889 07f0 D0609FE5 		ldr	r6, .L136+4	@ tmp154,
 1890              	@ armwave.c:336:     fputs("P3\n", fp);
 336:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1891              		.loc 1 336 5 view .LVU544
 1892 07f4 0320A0E3 		mov	r2, #3	@,
 1893 07f8 0110A0E3 		mov	r1, #1	@,
 1894              	@ armwave.c:330:     FILE *fp = fopen(fn, "wb");
 330:armwave.c     ****     uint32_t data;
 1895              		.loc 1 330 16 view .LVU545
 1896 07fc 0070A0E1 		mov	r7, r0	@ fp,
 1897              	.LVL143:
 331:armwave.c     ****     uint32_t data;
 1898              		.loc 1 331 5 is_stmt 1 view .LVU546
 332:armwave.c     **** 
 1899              		.loc 1 332 5 view .LVU547
 336:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1900              		.loc 1 336 5 view .LVU548
 1901 0800 0030A0E1 		mov	r3, r0	@, fp
 1902 0804 C0009FE5 		ldr	r0, .L136+8	@,
 1903              	.LVL144:
 336:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1904              		.loc 1 336 5 is_stmt 0 view .LVU549
 1905 0808 FEFFFFEB 		bl	fwrite		@
 1906              	.LVL145:
 1907              		.loc 1 337 5 is_stmt 1 view .LVU550
 1908 080c 403096E5 		ldr	r3, [r6, #64]	@, g_armwave_state.target_width
 1909 0810 442096E5 		ldr	r2, [r6, #68]	@, g_armwave_state.target_height
 1910 0814 B4109FE5 		ldr	r1, .L136+12	@,
 1911 0818 0700A0E1 		mov	r0, r7	@, fp
 1912 081c FEFFFFEB 		bl	fprintf		@
 1913              	.LVL146:
 338:armwave.c     ****     fputs("255\n", fp);
 1914              		.loc 1 338 5 view .LVU551
 1915 0820 0420A0E3 		mov	r2, #4	@,
 1916 0824 0730A0E1 		mov	r3, r7	@, fp
 1917 0828 0110A0E3 		mov	r1, #1	@,
 1918 082c A0009FE5 		ldr	r0, .L136+16	@,
 1919 0830 FEFFFFEB 		bl	fwrite		@
 1920              	.LVL147:
 339:armwave.c     **** 
 340:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1921              		.loc 1 340 5 view .LVU552
 1922              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1923              		.loc 1 340 37 is_stmt 0 view .LVU553
 1924 0834 442096E5 		ldr	r2, [r6, #68]	@ prephitmp_57, g_armwave_state.target_height
 1925              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1926              		.loc 1 340 5 view .LVU554
 1927 0838 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1928 083c 1800000A 		beq	.L125		@,
 1929 0840 403096E5 		ldr	r3, [r6, #64]	@ _12, g_armwave_state.target_width
 1930              	@ armwave.c:345:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 342:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 343:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 344:armwave.c     **** 
 345:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1931              		.loc 1 345 13 view .LVU555
 1932 0844 8C909FE5 		ldr	r9, .L136+20	@ tmp156,
 1933              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 340:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1934              		.loc 1 340 12 view .LVU556
 1935 0848 0050A0E3 		mov	r5, #0	@ yy,
 1936              	.LVL148:
 1937              	.L126:
 1938              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1939              		.loc 1 341 9 view .LVU557
 1940 084c 000053E3 		cmp	r3, #0	@ _12,
 1941              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1942              		.loc 1 341 16 view .LVU558
 1943 0850 0040A013 		movne	r4, #0	@ xx,
 1944              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1945              		.loc 1 341 9 view .LVU559
 1946 0854 1600000A 		beq	.L135		@,
 1947              	.LVL149:
 1948              	.L127:
 342:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1949              		.loc 1 342 13 is_stmt 1 discriminator 3 view .LVU560
 1950              	@ armwave.c:342:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 342:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1951              		.loc 1 342 29 is_stmt 0 discriminator 3 view .LVU561
 1952 0858 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1953              	@ armwave.c:345:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1954              		.loc 1 345 13 discriminator 3 view .LVU562
 1955 085c 0910A0E1 		mov	r1, r9	@, tmp156
 1956 0860 0700A0E1 		mov	r0, r7	@, fp
 1957              	@ armwave.c:342:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 342:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1958              		.loc 1 342 18 discriminator 3 view .LVU563
 1959 0864 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1960              	.LVL150:
 1961              		.loc 1 345 13 is_stmt 1 discriminator 3 view .LVU564
 1962              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1963              		.loc 1 341 58 is_stmt 0 discriminator 3 view .LVU565
 1964 0868 014084E2 		add	r4, r4, #1	@ xx, xx,
 1965              	.LVL151:
 1966              	@ armwave.c:345:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1967              		.loc 1 345 81 discriminator 3 view .LVU566
 1968 086c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1969              	@ armwave.c:345:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1970              		.loc 1 345 61 discriminator 3 view .LVU567
 1971 0870 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1972              	@ armwave.c:345:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1973              		.loc 1 345 13 discriminator 3 view .LVU568
 1974 0874 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1975 0878 7330EFE6 		uxtb	r3, r3	@, tmp146
 1976 087c 00C08DE5 		str	ip, [sp]	@ tmp151,
 1977 0880 7220EFE6 		uxtb	r2, r2	@, data
 1978              	.LVL152:
 1979              		.loc 1 345 13 discriminator 3 view .LVU569
 1980 0884 FEFFFFEB 		bl	fprintf		@
 1981              	.LVL153:
 1982              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1983              		.loc 1 341 41 discriminator 3 view .LVU570
 1984 0888 403096E5 		ldr	r3, [r6, #64]	@ _12, g_armwave_state.target_width
 1985              	@ armwave.c:341:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 341:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1986              		.loc 1 341 9 discriminator 3 view .LVU571
 1987 088c 040053E1 		cmp	r3, r4	@ _12, xx
 1988 0890 F0FFFF8A 		bhi	.L127		@,
 1989 0894 442096E5 		ldr	r2, [r6, #68]	@ prephitmp_57, g_armwave_state.target_height
 1990              	.LVL154:
 1991              	.L128:
 1992              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 340:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1993              		.loc 1 340 55 discriminator 2 view .LVU572
 1994 0898 015085E2 		add	r5, r5, #1	@ yy, yy,
 1995              	.LVL155:
 1996              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 340:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1997              		.loc 1 340 5 discriminator 2 view .LVU573
 1998 089c 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1999 08a0 E9FFFF3A 		bcc	.L126		@,
 2000              	.LVL156:
 2001              	.L125:
 346:armwave.c     ****         }
 347:armwave.c     ****     }
 348:armwave.c     **** 
 349:armwave.c     ****     fclose(fp);
 2002              		.loc 1 349 5 is_stmt 1 view .LVU574
 2003 08a4 0700A0E1 		mov	r0, r7	@, fp
 2004              	@ armwave.c:350: }
 350:armwave.c     **** }
 2005              		.loc 1 350 1 is_stmt 0 view .LVU575
 2006 08a8 0CD08DE2 		add	sp, sp, #12	@,,
 2007              		.cfi_remember_state
 2008              		.cfi_def_cfa_offset 28
 2009              		@ sp needed	@
 2010 08ac F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2011              		.cfi_restore 14
 2012              		.cfi_restore 9
 2013              		.cfi_restore 8
 2014              		.cfi_restore 7
 2015              		.cfi_restore 6
 2016              		.cfi_restore 5
 2017              		.cfi_restore 4
 2018              		.cfi_def_cfa_offset 0
 2019              	.LVL157:
 2020              	@ armwave.c:349:     fclose(fp);
 349:armwave.c     **** }
 2021              		.loc 1 349 5 view .LVU576
 2022 08b0 FEFFFFEA 		b	fclose		@
 2023              	.LVL158:
 2024              	.L135:
 2025              		.cfi_restore_state
 2026              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 340:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2027              		.loc 1 340 55 view .LVU577
 2028 08b4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2029              	.LVL159:
 2030              	@ armwave.c:340:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 340:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2031              		.loc 1 340 5 view .LVU578
 2032 08b8 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2033 08bc F5FFFF8A 		bhi	.L128		@,
 2034 08c0 F7FFFFEA 		b	.L125		@
 2035              	.L137:
 2036              		.align	2
 2037              	.L136:
 2038 08c4 30010000 		.word	.LC10
 2039 08c8 00000000 		.word	g_armwave_state
 2040 08cc 34010000 		.word	.LC11
 2041 08d0 38010000 		.word	.LC12
 2042 08d4 40010000 		.word	.LC13
 2043 08d8 48010000 		.word	.LC14
 2044              		.cfi_endproc
 2045              	.LFE67:
 2047              		.align	2
 2048              		.global	armwave_test_init
 2049              		.syntax unified
 2050              		.arm
 2051              		.fpu vfp
 2053              	armwave_test_init:
 2054              	.LVL160:
 2055              	.LFB68:
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Initialise some test functionry.
 354:armwave.c     ****  */
 355:armwave.c     **** void armwave_test_init(int render_width, int render_height)
 356:armwave.c     **** {
 2056              		.loc 1 356 1 is_stmt 1 view -0
 2057              		.cfi_startproc
 2058              		@ args = 0, pretend = 0, frame = 0
 2059              		@ frame_needed = 0, uses_anonymous_args = 0
 357:armwave.c     ****     test_create_gamma();
 2060              		.loc 1 357 5 view .LVU580
 2061              	.LBB10:
 2062              	.LBI10:
  45:armwave.c     **** {
 2063              		.loc 1 45 6 view .LVU581
  45:armwave.c     **** {
 2064              		.loc 1 45 6 is_stmt 0 view .LVU582
 2065              	.LBE10:
 2066              	@ armwave.c:356: {
 356:armwave.c     ****     test_create_gamma();
 2067              		.loc 1 356 1 view .LVU583
 2068 08dc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2069              		.cfi_def_cfa_offset 24
 2070              		.cfi_offset 4, -24
 2071              		.cfi_offset 5, -20
 2072              		.cfi_offset 6, -16
 2073              		.cfi_offset 7, -12
 2074              		.cfi_offset 8, -8
 2075              		.cfi_offset 14, -4
 2076 08e0 068B2DED 		vpush.64	{d8, d9, d10}	@
 2077              		.cfi_def_cfa_offset 48
 2078              		.cfi_offset 80, -48
 2079              		.cfi_offset 81, -44
 2080              		.cfi_offset 82, -40
 2081              		.cfi_offset 83, -36
 2082              		.cfi_offset 84, -32
 2083              		.cfi_offset 85, -28
 2084 08e4 20429FE5 		ldr	r4, .L159+28	@ ivtmp.95,
 2085              	.LBB13:
 2086              	.LBB11:
 2087              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2088              		.loc 1 51 32 view .LVU584
 2089 08e8 84AA9FED 		vldr.32	s20, .L159+16	@ tmp161,
 2090              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2091              		.loc 1 51 26 view .LVU585
 2092 08ec 7F9B9FED 		vldr.64	d9, .L159	@ tmp253,
 2093              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2094              		.loc 1 51 49 view .LVU586
 2095 08f0 808B9FED 		vldr.64	d8, .L159+8	@ tmp164,
 2096 08f4 013084E2 		add	r3, r4, #1	@ _32, ivtmp.95,
 2097              	.LBE11:
 2098              	.LBE13:
 2099              	@ armwave.c:356: {
 356:armwave.c     ****     test_create_gamma();
 2100              		.loc 1 356 1 view .LVU587
 2101 08f8 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2102 08fc 0150A0E1 		mov	r5, r1	@ render_height, render_height
 2103 0900 018C84E2 		add	r8, r4, #256	@ _25, ivtmp.95,
 2104 0904 017063E2 		rsb	r7, r3, #1	@ tmp251, _32,
 2105              	.LVL161:
 2106              	.L139:
 2107              	.LBB14:
 2108              	.LBB12:
  51:armwave.c     ****     }
 2109              		.loc 1 51 9 is_stmt 1 view .LVU588
 2110              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2111              		.loc 1 51 32 is_stmt 0 view .LVU589
 2112 0908 043087E0 		add	r3, r7, r4	@ tmp158, tmp251, ivtmp.95
 2113              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2114              		.loc 1 51 26 view .LVU590
 2115 090c 491BB0EE 		vmov.f64	d1, d9	@, tmp253
 2116              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2117              		.loc 1 51 32 view .LVU591
 2118 0910 903A07EE 		vmov	s15, r3	@ int	@ tmp158, tmp158
 2119 0914 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp159, tmp158
 2120 0918 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp160, tmp159, tmp161
 2121              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2122              		.loc 1 51 26 view .LVU592
 2123 091c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp160
 2124 0920 FEFFFFEB 		bl	pow		@
 2125              	.LVL162:
 2126              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2127              		.loc 1 51 49 view .LVU593
 2128 0924 080B20EE 		vmul.f64	d0, d0, d8	@ tmp163,, tmp164
 2129              	@ armwave.c:51:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  51:armwave.c     ****     }
 2130              		.loc 1 51 24 view .LVU594
 2131 0928 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp165, tmp163
 2132 092c 903A17EE 		vmov	r3, s15	@ int	@ tmp165, tmp165
 2133 0930 0130E4E5 		strb	r3, [r4, #1]!	@ tmp165, MEM[base: _4, offset: 0B]
 2134              	.LVL163:
 2135              	@ armwave.c:50:     for(i = 0; i < 256; i++) {
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2136              		.loc 1 50 5 view .LVU595
 2137 0934 080054E1 		cmp	r4, r8	@ ivtmp.95, _25
 2138 0938 F2FFFF1A 		bne	.L139		@,
 2139              	.LVL164:
  50:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2140              		.loc 1 50 5 view .LVU596
 2141              	.LBE12:
 2142              	.LBE14:
 358:armwave.c     **** 
 359:armwave.c     ****     // make ch1 yellowish by default
 360:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2143              		.loc 1 360 5 is_stmt 1 view .LVU597
 2144              	.LBB15:
 2145              	.LBI15:
 313:armwave.c     **** {
 2146              		.loc 1 313 6 view .LVU598
 2147              	.LBB16:
 316:armwave.c     ****         case 1:
 2148              		.loc 1 316 5 view .LVU599
 318:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2149              		.loc 1 318 13 view .LVU600
 319:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2150              		.loc 1 319 13 view .LVU601
 2151              	@ armwave.c:318:             g_armwave_state.ch1_color.r = r;
 318:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2152              		.loc 1 318 41 is_stmt 0 view .LVU602
 2153 093c CC419FE5 		ldr	r4, .L159+32	@ tmp252,
 2154              	.LBE16:
 2155              	.LBE15:
 2156              	.LBB19:
 2157              	.LBB20:
 2158              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 223:armwave.c     **** 
 2159              		.loc 1 223 5 view .LVU603
 2160 0940 013C45E2 		sub	r3, r5, #256	@ tmp172, render_height,
 2161              	.LBE20:
 2162              	.LBE19:
 2163              	.LBB25:
 2164              	.LBB17:
 2165              	@ armwave.c:318:             g_armwave_state.ch1_color.r = r;
 318:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2166              		.loc 1 318 41 view .LVU604
 2167 0944 C8219FE5 		ldr	r2, .L159+36	@ tmp168,
 2168              	.LBE17:
 2169              	.LBE25:
 2170              	.LBB26:
 2171              	.LBB21:
 2172              	@ armwave.c:223:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 223:armwave.c     **** 
 2173              		.loc 1 223 5 view .LVU605
 2174 0948 013CD3E3 		bics	r3, r3, #256	@ tmp255, tmp172,
 2175              	.LBE21:
 2176              	.LBE26:
 2177              	.LBB27:
 2178              	.LBB18:
 2179              	@ armwave.c:320:             g_armwave_state.ch1_color.b = b;
 320:armwave.c     ****             break;
 2180              		.loc 1 320 41 view .LVU606
 2181 094c FA30A0E3 		mov	r3, #250	@ tmp171,
 2182              	@ armwave.c:318:             g_armwave_state.ch1_color.r = r;
 318:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2183              		.loc 1 318 41 view .LVU607
 2184 0950 542084E5 		str	r2, [r4, #84]	@ tmp168, MEM[(short int *)&g_armwave_state + 84B]
 320:armwave.c     ****             break;
 2185              		.loc 1 320 13 is_stmt 1 view .LVU608
 2186              	@ armwave.c:320:             g_armwave_state.ch1_color.b = b;
 320:armwave.c     ****             break;
 2187              		.loc 1 320 41 is_stmt 0 view .LVU609
 2188 0954 B835C4E1 		strh	r3, [r4, #88]	@ movhi	@ tmp171, g_armwave_state.ch1_color.b
 321:armwave.c     ****     }
 2189              		.loc 1 321 13 is_stmt 1 view .LVU610
 2190              	.LVL165:
 321:armwave.c     ****     }
 2191              		.loc 1 321 13 is_stmt 0 view .LVU611
 2192              	.LBE18:
 2193              	.LBE27:
 361:armwave.c     **** 
 362:armwave.c     ****     armwave_setup_render(0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_width, render_heigh
 2194              		.loc 1 362 5 is_stmt 1 view .LVU612
 2195              	.LBB28:
 2196              	.LBI19:
 215:armwave.c     **** {
 2197              		.loc 1 215 6 view .LVU613
 2198              	.LBB22:
 217:armwave.c     ****     float points_per_pixel;
 2199              		.loc 1 217 5 view .LVU614
 218:armwave.c     **** 
 2200              		.loc 1 218 5 view .LVU615
 220:armwave.c     **** 
 2201              		.loc 1 220 5 view .LVU616
 223:armwave.c     **** 
 2202              		.loc 1 223 5 view .LVU617
 2203 0958 0900000A 		beq	.L140		@,
 2204 095c 013B45E2 		sub	r3, r5, #1024	@ tmp174, render_height,
 2205 0960 013BD3E3 		bics	r3, r3, #1024	@ tmp256, tmp174,
 2206 0964 5200001A 		bne	.L155		@,
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2207              		.loc 1 225 5 view .LVU618
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 2208              		.loc 1 231 12 view .LVU619
 2209              	@ armwave.c:231:     } else if(target_height == 1024) {
 231:armwave.c     ****         g_armwave_state.row_shift = 10;
 2210              		.loc 1 231 14 is_stmt 0 view .LVU620
 2211 0968 010B55E3 		cmp	r5, #1024	@ render_height,
 2212 096c 4C00000A 		beq	.L156		@,
 234:armwave.c     ****         g_armwave_state.row_shift = 11;
 2213              		.loc 1 234 12 is_stmt 1 view .LVU621
 2214              	@ armwave.c:234:     } else if(target_height == 2048) {
 234:armwave.c     ****         g_armwave_state.row_shift = 11;
 2215              		.loc 1 234 14 is_stmt 0 view .LVU622
 2216 0970 020B55E3 		cmp	r5, #2048	@ render_height,
 235:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2217              		.loc 1 235 9 is_stmt 1 view .LVU623
 2218              	@ armwave.c:235:         g_armwave_state.row_shift = 11;
 235:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 2219              		.loc 1 235 35 is_stmt 0 view .LVU624
 2220 0974 0B20A003 		moveq	r2, #11	@ tmp195,
 2221 0978 98319F05 		ldreq	r3, .L159+40	@ tmp193,
 2222 097c F824C401 		strdeq	r2, [r4, #72]	@, tmp252,
 236:armwave.c     ****     } 
 2223              		.loc 1 236 9 is_stmt 1 view .LVU625
 2224 0980 050000EA 		b	.L143		@
 2225              	.L140:
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2226              		.loc 1 225 5 view .LVU626
 2227              	@ armwave.c:225:     if(target_height == 256) {
 225:armwave.c     ****         g_armwave_state.row_shift = 8;
 2228              		.loc 1 225 7 is_stmt 0 view .LVU627
 2229 0984 010C55E3 		cmp	r5, #256	@ render_height,
 226:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 2230              		.loc 1 226 9 is_stmt 1 view .LVU628
 2231              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 2232              		.loc 1 227 34 is_stmt 0 view .LVU629
 2233 0988 0820A003 		moveq	r2, #8	@ tmp181,
 2234              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2235              		.loc 1 229 35 view .LVU630
 2236 098c 88319F15 		ldrne	r3, .L159+44	@ tmp185,
 2237              	@ armwave.c:227:         g_armwave_state.row_mask = 0x0ff;
 227:armwave.c     ****     } else if(target_height == 512) {
 2238              		.loc 1 227 34 view .LVU631
 2239 0990 FF30A003 		moveq	r3, #255	@ tmp183,
 228:armwave.c     ****         g_armwave_state.row_shift = 9;
 2240              		.loc 1 228 12 is_stmt 1 view .LVU632
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2241              		.loc 1 229 9 view .LVU633
 2242              	@ armwave.c:229:         g_armwave_state.row_shift = 9;
 229:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 2243              		.loc 1 229 35 is_stmt 0 view .LVU634
 2244 0994 0920A013 		movne	r2, #9	@ tmp187,
 2245 0998 F824C4E1 		strd	r2, [r4, #72]	@, tmp252,
 230:armwave.c     ****     } else if(target_height == 1024) {
 2246              		.loc 1 230 9 is_stmt 1 view .LVU635
 2247              	.L143:
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2248              		.loc 1 240 5 view .LVU636
 2249              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2250              		.loc 1 245 42 is_stmt 0 view .LVU637
 2251 099c 950602E0 		mul	r2, r5, r6	@ tmp206, render_height, render_width
 2252              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2253              		.loc 1 247 68 view .LVU638
 2254 09a0 0634A0E1 		lsl	r3, r6, #8	@ _20, render_width,
 2255              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2256              		.loc 1 241 44 view .LVU639
 2257 09a4 2504A0E1 		lsr	r0, r5, #8	@ tmp198, render_height,
 2258              	@ armwave.c:240:     g_armwave_state.xstride = target_height;
 240:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 2259              		.loc 1 240 29 view .LVU640
 2260 09a8 185084E5 		str	r5, [r4, #24]	@ render_height, g_armwave_state.xstride
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2261              		.loc 1 241 5 is_stmt 1 view .LVU641
 2262              	@ armwave.c:249:     g_armwave_state.target_height = target_height;
 249:armwave.c     **** 
 2263              		.loc 1 249 35 is_stmt 0 view .LVU642
 2264 09ac 445084E5 		str	r5, [r4, #68]	@ render_height, g_armwave_state.target_height
 2265              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     **** 
 2266              		.loc 1 251 5 view .LVU643
 2267 09b0 0310A0E1 		mov	r1, r3	@, _20
 2268              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2269              		.loc 1 243 31 view .LVU644
 2270 09b4 4050A0E3 		mov	r5, #64	@ tmp202,
 2271              	.LVL166:
 2272              	@ armwave.c:245:     g_armwave_state.size = target_height * target_width;
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2273              		.loc 1 245 26 view .LVU645
 2274 09b8 3C2084E5 		str	r2, [r4, #60]	@ tmp206, g_armwave_state.size
 2275              	@ armwave.c:241:     g_armwave_state.vscale = target_height / 256;
 241:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2276              		.loc 1 241 28 view .LVU646
 2277 09bc 1C0084E5 		str	r0, [r4, #28]	@ tmp198, g_armwave_state.vscale
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2278              		.loc 1 242 5 is_stmt 1 view .LVU647
 2279              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2280              		.loc 1 242 33 is_stmt 0 view .LVU648
 2281 09c0 022BA0E3 		mov	r2, #2048	@ tmp200,
 2282              	@ armwave.c:247:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2283              		.loc 1 247 34 view .LVU649
 2284 09c4 383084E5 		str	r3, [r4, #56]	@ _20, g_armwave_state.ch_buff_size
 2285              	@ armwave.c:251:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 251:armwave.c     **** 
 2286              		.loc 1 251 5 view .LVU650
 2287 09c8 50019FE5 		ldr	r0, .L159+48	@,
 2288              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2289              		.loc 1 246 37 view .LVU651
 2290 09cc 013CA0E3 		mov	r3, #256	@ tmp208,
 2291              	@ armwave.c:248:     g_armwave_state.target_width = target_width;
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 2292              		.loc 1 248 34 view .LVU652
 2293 09d0 406084E5 		str	r6, [r4, #64]	@ render_width, g_armwave_state.target_width
 2294              	@ armwave.c:242:     g_armwave_state.wave_stride = wave_stride;
 242:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2295              		.loc 1 242 33 view .LVU653
 2296 09d4 202084E5 		str	r2, [r4, #32]	@ tmp200, g_armwave_state.wave_stride
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2297              		.loc 1 243 5 is_stmt 1 view .LVU654
 2298              	@ armwave.c:243:     g_armwave_state.waves_max = waves_max;
 243:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2299              		.loc 1 243 31 is_stmt 0 view .LVU655
 2300 09d8 285084E5 		str	r5, [r4, #40]	@ tmp202, g_armwave_state.waves_max
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2301              		.loc 1 244 5 is_stmt 1 view .LVU656
 2302              	@ armwave.c:244:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 244:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2303              		.loc 1 244 27 is_stmt 0 view .LVU657
 2304 09dc 245084E5 		str	r5, [r4, #36]	@ tmp202, g_armwave_state.waves
 245:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 2305              		.loc 1 245 5 is_stmt 1 view .LVU658
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2306              		.loc 1 246 5 view .LVU659
 2307              	@ armwave.c:246:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 246:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 2308              		.loc 1 246 37 is_stmt 0 view .LVU660
 2309 09e0 2C3084E5 		str	r3, [r4, #44]	@ tmp208, g_armwave_state.bitdepth_height
 247:armwave.c     ****     g_armwave_state.target_width = target_width;
 2310              		.loc 1 247 5 is_stmt 1 view .LVU661
 248:armwave.c     ****     g_armwave_state.target_height = target_height;
 2311              		.loc 1 248 5 view .LVU662
 249:armwave.c     **** 
 2312              		.loc 1 249 5 view .LVU663
 251:armwave.c     **** 
 2313              		.loc 1 251 5 view .LVU664
 2314 09e4 FEFFFFEB 		bl	printf		@
 2315              	.LVL167:
 256:armwave.c     **** 
 2316              		.loc 1 256 5 view .LVU665
 2317              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2318              		.loc 1 258 23 is_stmt 0 view .LVU666
 2319 09e8 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2320              	@ armwave.c:256:     g_armwave_state.slice_height = 64;  
 256:armwave.c     **** 
 2321              		.loc 1 256 34 view .LVU667
 2322 09ec 305084E5 		str	r5, [r4, #48]	@ tmp202, g_armwave_state.slice_height
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2323              		.loc 1 258 5 is_stmt 1 view .LVU668
 2324              	@ armwave.c:258:     if(g_armwave_state.ch1_buffer != NULL)
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2325              		.loc 1 258 7 is_stmt 0 view .LVU669
 2326 09f0 000050E3 		cmp	r0, #0	@ _21,
 2327 09f4 0000000A 		beq	.L145		@,
 259:armwave.c     **** 
 2328              		.loc 1 259 9 is_stmt 1 view .LVU670
 2329 09f8 FEFFFFEB 		bl	free		@
 2330              	.LVL168:
 2331              	.L145:
 261:armwave.c     **** 
 2332              		.loc 1 261 5 view .LVU671
 2333              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 2334              		.loc 1 261 34 is_stmt 0 view .LVU672
 2335 09fc 0110A0E3 		mov	r1, #1	@,
 2336 0a00 380094E5 		ldr	r0, [r4, #56]	@, g_armwave_state.ch_buff_size
 2337 0a04 FEFFFFEB 		bl	calloc		@
 2338              	.LVL169:
 2339              	@ armwave.c:263:     assert(g_armwave_state.ch1_buffer != NULL);
 263:armwave.c     **** 
 2340              		.loc 1 263 5 view .LVU673
 2341 0a08 000050E3 		cmp	r0, #0	@ tmp218,
 2342              	@ armwave.c:261:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 261:armwave.c     **** 
 2343              		.loc 1 261 32 view .LVU674
 2344 0a0c 040084E5 		str	r0, [r4, #4]	@ tmp218, g_armwave_state.ch1_buffer
 263:armwave.c     **** 
 2345              		.loc 1 263 5 is_stmt 1 view .LVU675
 2346 0a10 3100000A 		beq	.L157		@,
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 2347              		.loc 1 266 5 view .LVU676
 2348              	.LVL170:
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2349              		.loc 1 267 5 view .LVU677
 2350              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2351              		.loc 1 267 34 is_stmt 0 view .LVU678
 2352 0a14 906A07EE 		vmov	s15, r6	@ int	@ render_width, render_width
 2353              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2354              		.loc 1 267 22 view .LVU679
 2355 0a18 396ADFED 		vldr.32	s13, .L159+20	@ tmp226,
 2356              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2357              		.loc 1 269 40 view .LVU680
 2358 0a1c 010AA0E3 		mov	r0, #4096	@,
 2359              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2360              		.loc 1 267 34 view .LVU681
 2361 0a20 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp225, render_width
 2362              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2363              		.loc 1 268 60 view .LVU682
 2364 0a24 0C7AD4ED 		vldr.32	s15, [r4, #48]	@ int	@ tmp260, g_armwave_state.slice_height
 2365 0a28 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp229, tmp260
 2366              	@ armwave.c:267:     points_per_pixel = length / ((float)(target_width));
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 2367              		.loc 1 267 22 view .LVU683
 2368 0a2c 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp226, tmp225
 2369              	.LVL171:
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2370              		.loc 1 268 5 is_stmt 1 view .LVU684
 2371              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2372              		.loc 1 268 60 is_stmt 0 view .LVU685
 2373 0a30 887A67EE 		vmul.f32	s15, s15, s16	@ tmp231, tmp229, points_per_pixel
 2374              	@ armwave.c:268:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 2375              		.loc 1 268 41 view .LVU686
 2376 0a34 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 2377 0a38 0D7AC4ED 		vstr.32	s15, [r4, #52]	@ int	@ tmp232, g_armwave_state.slice_record_height
 269:armwave.c     **** 
 2378              		.loc 1 269 5 is_stmt 1 view .LVU687
 2379              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2380              		.loc 1 269 40 is_stmt 0 view .LVU688
 2381 0a3c FEFFFFEB 		bl	malloc		@
 2382              	.LVL172:
 2383              	@ armwave.c:271:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 271:armwave.c     **** 
 2384              		.loc 1 271 5 view .LVU689
 2385 0a40 000050E3 		cmp	r0, #0	@ tmp233,
 2386              	@ armwave.c:269:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 269:armwave.c     **** 
 2387              		.loc 1 269 38 view .LVU690
 2388 0a44 6C0084E5 		str	r0, [r4, #108]	@ tmp233, g_armwave_state.xcoord_to_xpixel
 271:armwave.c     **** 
 2389              		.loc 1 271 5 is_stmt 1 view .LVU691
 2390 0a48 1E00000A 		beq	.L158		@,
 2391              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2392              		.loc 1 274 54 is_stmt 0 view .LVU692
 2393 0a4c 2D7ADFED 		vldr.32	s15, .L159+24	@ tmp240,
 2394 0a50 020040E2 		sub	r0, r0, #2	@ ivtmp.87, tmp233,
 2395              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2396              		.loc 1 273 12 view .LVU693
 2397 0a54 0030A0E3 		mov	r3, #0	@ xx,
 2398              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2399              		.loc 1 274 54 view .LVU694
 2400 0a58 887A87EE 		vdiv.f32	s14, s15, s16	@ _34, tmp240, points_per_pixel
 2401              	.L148:
 2402              	.LVL173:
 274:armwave.c     **** 
 2403              		.loc 1 274 9 is_stmt 1 view .LVU695
 2404              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2405              		.loc 1 274 74 is_stmt 0 view .LVU696
 2406 0a5c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 2407              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2408              		.loc 1 273 32 view .LVU697
 2409 0a60 013083E2 		add	r3, r3, #1	@ xx, xx,
 2410              	.LVL174:
 2411              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2412              		.loc 1 273 5 view .LVU698
 2413 0a64 020B53E3 		cmp	r3, #2048	@ xx,
 2414              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2415              		.loc 1 274 74 view .LVU699
 2416 0a68 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp241, xx
 2417 0a6c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp242, tmp241, _34
 2418              	@ armwave.c:274:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 274:armwave.c     **** 
 2419              		.loc 1 274 46 view .LVU700
 2420 0a70 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp243, tmp242
 2421 0a74 902A17EE 		vmov	r2, s15	@ int	@ tmp243, tmp243
 2422 0a78 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp243, MEM[base: _16, offset: 0B]
 2423              	@ armwave.c:273:     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 2424              		.loc 1 273 5 view .LVU701
 2425 0a7c F6FFFF1A 		bne	.L148		@,
 279:armwave.c     **** }
 2426              		.loc 1 279 5 is_stmt 1 view .LVU702
 2427              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 2428              		.loc 1 279 34 is_stmt 0 view .LVU703
 2429 0a80 3C0094E5 		ldr	r0, [r4, #60]	@ g_armwave_state.size, g_armwave_state.size
 2430 0a84 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 2431 0a88 FEFFFFEB 		bl	malloc		@
 2432              	.LVL175:
 279:armwave.c     **** }
 2433              		.loc 1 279 34 view .LVU704
 2434              	.LBE22:
 2435              	.LBE28:
 2436              	@ armwave.c:365: }
 363:armwave.c     **** 
 364:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 365:armwave.c     **** }
 2437              		.loc 1 365 1 view .LVU705
 2438 0a8c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2439              		.cfi_remember_state
 2440              		.cfi_restore 84
 2441              		.cfi_restore 85
 2442              		.cfi_restore 82
 2443              		.cfi_restore 83
 2444              		.cfi_restore 80
 2445              		.cfi_restore 81
 2446              		.cfi_def_cfa_offset 24
 2447              	.LVL176:
 2448              	@ armwave.c:364:     printf("armwave version: %s\n", ARMWAVE_VER);
 364:armwave.c     **** }
 2449              		.loc 1 364 5 view .LVU706
 2450 0a90 8C109FE5 		ldr	r1, .L159+52	@,
 2451              	.LBB29:
 2452              	.LBB23:
 2453              	@ armwave.c:279:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 279:armwave.c     **** }
 2454              		.loc 1 279 32 view .LVU707
 2455 0a94 500084E5 		str	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 2456              	.LVL177:
 279:armwave.c     **** }
 2457              		.loc 1 279 32 view .LVU708
 2458              	.LBE23:
 2459              	.LBE29:
 364:armwave.c     **** }
 2460              		.loc 1 364 5 is_stmt 1 view .LVU709
 2461 0a98 88009FE5 		ldr	r0, .L159+56	@,
 2462              	@ armwave.c:365: }
 2463              		.loc 1 365 1 is_stmt 0 view .LVU710
 2464 0a9c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2465              		.cfi_restore 14
 2466              		.cfi_restore 8
 2467              		.cfi_restore 7
 2468              		.cfi_restore 6
 2469              		.cfi_restore 5
 2470              		.cfi_restore 4
 2471              		.cfi_def_cfa_offset 0
 2472              	.LVL178:
 2473              	@ armwave.c:364:     printf("armwave version: %s\n", ARMWAVE_VER);
 364:armwave.c     **** }
 2474              		.loc 1 364 5 view .LVU711
 2475 0aa0 FEFFFFEA 		b	printf		@
 2476              	.LVL179:
 2477              	.L156:
 2478              		.cfi_restore_state
 2479              	.LBB30:
 2480              	.LBB24:
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2481              		.loc 1 232 9 is_stmt 1 view .LVU712
 2482              	@ armwave.c:232:         g_armwave_state.row_shift = 10;
 232:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 2483              		.loc 1 232 35 is_stmt 0 view .LVU713
 2484 0aa4 80309FE5 		ldr	r3, .L159+60	@ tmp189,
 2485 0aa8 0A20A0E3 		mov	r2, #10	@ tmp191,
 2486 0aac F824C4E1 		strd	r2, [r4, #72]	@, tmp252,
 233:armwave.c     ****     } else if(target_height == 2048) {
 2487              		.loc 1 233 9 is_stmt 1 view .LVU714
 2488 0ab0 B9FFFFEA 		b	.L143		@
 2489              	.L155:
 223:armwave.c     **** 
 2490              		.loc 1 223 5 view .LVU715
 2491 0ab4 74309FE5 		ldr	r3, .L159+64	@,
 2492 0ab8 DF20A0E3 		mov	r2, #223	@,
 2493 0abc 70109FE5 		ldr	r1, .L159+68	@,
 2494 0ac0 70009FE5 		ldr	r0, .L159+72	@,
 2495 0ac4 FEFFFFEB 		bl	__assert_fail		@
 2496              	.LVL180:
 2497              	.L158:
 271:armwave.c     **** 
 2498              		.loc 1 271 5 view .LVU716
 2499 0ac8 60309FE5 		ldr	r3, .L159+64	@,
 2500 0acc 68209FE5 		ldr	r2, .L159+76	@,
 2501 0ad0 5C109FE5 		ldr	r1, .L159+68	@,
 2502 0ad4 64009FE5 		ldr	r0, .L159+80	@,
 2503 0ad8 FEFFFFEB 		bl	__assert_fail		@
 2504              	.LVL181:
 2505              	.L157:
 263:armwave.c     **** 
 2506              		.loc 1 263 5 view .LVU717
 2507 0adc 4C309FE5 		ldr	r3, .L159+64	@,
 2508 0ae0 5C209FE5 		ldr	r2, .L159+84	@,
 2509 0ae4 48109FE5 		ldr	r1, .L159+68	@,
 2510 0ae8 58009FE5 		ldr	r0, .L159+88	@,
 2511 0aec FEFFFFEB 		bl	__assert_fail		@
 2512              	.LVL182:
 2513              	.L160:
 2514              		.align	3
 2515              	.L159:
 2516 0af0 000000C0 		.word	-1073741824
 2517 0af4 CCCCEC3F 		.word	1072483532
 2518 0af8 00000000 		.word	0
 2519 0afc 00E06F40 		.word	1081073664
 2520 0b00 00007F43 		.word	1132396544
 2521 0b04 00000045 		.word	1157627904
 2522 0b08 0000803F 		.word	1065353216
 2523 0b0c FFFFFFFF 		.word	gamma_table-1
 2524 0b10 00000000 		.word	g_armwave_state
 2525 0b14 F609F406 		.word	116656630
 2526 0b18 FF070000 		.word	2047
 2527 0b1c FF010000 		.word	511
 2528 0b20 B8000000 		.word	.LC6
 2529 0b24 00000000 		.word	.LC0
 2530 0b28 08000000 		.word	.LC1
 2531 0b2c FF030000 		.word	1023
 2532 0b30 34000000 		.word	.LANCHOR0+52
 2533 0b34 20000000 		.word	.LC2
 2534 0b38 58000000 		.word	.LC5
 2535 0b3c 0F010000 		.word	271
 2536 0b40 F0000000 		.word	.LC8
 2537 0b44 07010000 		.word	263
 2538 0b48 CC000000 		.word	.LC7
 2539              	.LBE24:
 2540              	.LBE30:
 2541              		.cfi_endproc
 2542              	.LFE68:
 2544              		.global	__aeabi_uidiv
 2545              		.align	2
 2546              		.global	armwave_test_generate
 2547              		.syntax unified
 2548              		.arm
 2549              		.fpu vfp
 2551              	armwave_test_generate:
 2552              	.LFB69:
 366:armwave.c     **** 
 367:armwave.c     **** /*
 368:armwave.c     ****  * Fill buffers with test funtionry.
 369:armwave.c     ****  */
 370:armwave.c     **** void armwave_test_generate()
 371:armwave.c     **** {
 2553              		.loc 1 371 1 view -0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 372:armwave.c     ****     uint32_t yy;
 2557              		.loc 1 372 5 view .LVU719
 373:armwave.c     **** 
 374:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2558              		.loc 1 374 5 view .LVU720
 2559              	@ armwave.c:371: {
 371:armwave.c     ****     uint32_t yy;
 2560              		.loc 1 371 1 is_stmt 0 view .LVU721
 2561 0b4c F84F2DE9 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2562              		.cfi_def_cfa_offset 40
 2563              		.cfi_offset 3, -40
 2564              		.cfi_offset 4, -36
 2565              		.cfi_offset 5, -32
 2566              		.cfi_offset 6, -28
 2567              		.cfi_offset 7, -24
 2568              		.cfi_offset 8, -20
 2569              		.cfi_offset 9, -16
 2570              		.cfi_offset 10, -12
 2571              		.cfi_offset 11, -8
 2572              		.cfi_offset 14, -4
 2573              	@ armwave.c:374:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2574              		.loc 1 374 5 view .LVU722
 2575 0b50 0010A0E3 		mov	r1, #0	@,
 2576 0b54 14419FE5 		ldr	r4, .L179	@ tmp255,
 2577 0b58 382094E5 		ldr	r2, [r4, #56]	@, g_armwave_state.ch_buff_size
 2578 0b5c 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2579 0b60 FEFFFFEB 		bl	memset		@
 2580              	.LVL183:
 375:armwave.c     **** 
 376:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2581              		.loc 1 376 5 is_stmt 1 view .LVU723
 2582              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2583              		.loc 1 376 45 is_stmt 0 view .LVU724
 2584 0b64 309094E5 		ldr	r9, [r4, #48]	@ _92, g_armwave_state.slice_height
 2585              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2586              		.loc 1 376 5 view .LVU725
 2587 0b68 020B59E3 		cmp	r9, #2048	@ _92,
 2588 0b6c F88FBD88 		pophi	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2589 0b70 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2590              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2591              		.loc 1 376 12 view .LVU726
 2592 0b74 0050A0E3 		mov	r5, #0	@ yy,
 2593              	.LVL184:
 2594              	.L167:
 377:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2595              		.loc 1 377 9 is_stmt 1 discriminator 3 view .LVU727
 2596 0b78 990506E0 		mul	r6, r9, r5	@ _3, _92, yy
 2597              	.LBB33:
 2598              	.LBB34:
 2599              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2600              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU728
 2601 0b7c 2C0094E5 		ldr	r0, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2602              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2603              		.loc 1 84 5 discriminator 3 view .LVU729
 2604 0b80 000058E3 		cmp	r8, #0	@ prephitmp_177,
 2605              	.LBE34:
 2606              	.LBE33:
 2607              	@ armwave.c:377:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2608              		.loc 1 377 9 discriminator 3 view .LVU730
 2609 0b84 347094E5 		ldr	r7, [r4, #52]	@ _4, g_armwave_state.slice_record_height
 2610              	.LVL185:
 2611              	.LBB36:
 2612              	.LBI33:
  73:armwave.c     **** {
 2613              		.loc 1 73 6 is_stmt 1 discriminator 3 view .LVU731
 2614              	.LBB35:
  75:armwave.c     ****     uint32_t value, word;
 2615              		.loc 1 75 5 discriminator 3 view .LVU732
  76:armwave.c     ****     uint8_t *wave_base;
 2616              		.loc 1 76 5 discriminator 3 view .LVU733
  77:armwave.c     ****     uint8_t *write_buffer_base;
 2617              		.loc 1 77 5 discriminator 3 view .LVU734
  78:armwave.c     ****     uint8_t *write_buffer;
 2618              		.loc 1 78 5 discriminator 3 view .LVU735
  79:armwave.c     ****     
 2619              		.loc 1 79 5 discriminator 3 view .LVU736
  81:armwave.c     **** 
 2620              		.loc 1 81 5 discriminator 3 view .LVU737
 2621              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2622              		.loc 1 81 63 is_stmt 0 discriminator 3 view .LVU738
 2623 0b88 900600E0 		mul	r0, r0, r6	@ _15, g_armwave_state.bitdepth_height, _3
 2624              	@ armwave.c:81:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bit
  81:armwave.c     **** 
 2625              		.loc 1 81 40 discriminator 3 view .LVU739
 2626 0b8c 043094E5 		ldr	r3, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2627              	.LVL186:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2628              		.loc 1 84 5 is_stmt 1 discriminator 3 view .LVU740
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2629              		.loc 1 84 5 is_stmt 0 discriminator 3 view .LVU741
 2630 0b90 2F00000A 		beq	.L163		@,
 2631 0b94 046046E2 		sub	r6, r6, #4	@ _76, _3,
 2632              	.LVL187:
 2633              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2634              		.loc 1 84 11 view .LVU742
 2635 0b98 00E0A0E3 		mov	lr, #0	@ w,
 2636              	.LVL188:
 2637              	.L166:
  85:armwave.c     **** 
 2638              		.loc 1 85 9 is_stmt 1 view .LVU743
 2639              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2640              		.loc 1 85 64 is_stmt 0 view .LVU744
 2641 0b9c 202094E5 		ldr	r2, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2642              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2643              		.loc 1 89 9 view .LVU745
 2644 0ba0 000057E3 		cmp	r7, #0	@ _4,
 2645              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2646              		.loc 1 85 36 view .LVU746
 2647 0ba4 14C094E5 		ldr	ip, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2648              	@ armwave.c:85:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  85:armwave.c     **** 
 2649              		.loc 1 85 64 view .LVU747
 2650 0ba8 920E02E0 		mul	r2, r2, lr	@ _19, g_armwave_state.wave_stride, w
 2651              	.LVL189:
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2652              		.loc 1 89 9 is_stmt 1 view .LVU748
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2653              		.loc 1 89 9 is_stmt 0 view .LVU749
 2654 0bac 2400000A 		beq	.L164		@,
 2655 0bb0 062082E0 		add	r2, r2, r6	@ tmp203, _19, _76
 2656              	.LVL190:
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2657              		.loc 1 89 9 view .LVU750
 2658 0bb4 02C08CE0 		add	ip, ip, r2	@ ivtmp.101, _16, tmp203
 2659              	.LVL191:
 2660              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2661              		.loc 1 89 16 view .LVU751
 2662 0bb8 0020A0E3 		mov	r2, #0	@ yy,
 2663              	.LVL192:
 2664              	.L165:
  90:armwave.c     **** 
 2665              		.loc 1 90 13 is_stmt 1 view .LVU752
 2666              	@ armwave.c:90:             word = *(uint32_t*)(wave_base + yy);
  90:armwave.c     **** 
 2667              		.loc 1 90 18 is_stmt 0 view .LVU753
 2668 0bbc 0410BCE5 		ldr	r1, [ip, #4]!	@ word, MEM[base: _189, offset: 0B]
 2669              	.LVL193:
  92:armwave.c     ****                 //printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 2670              		.loc 1 92 13 is_stmt 1 view .LVU754
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2671              		.loc 1 94 17 view .LVU755
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2672              		.loc 1 95 17 view .LVU756
  96:armwave.c     ****                 word >>= 8;
 2673              		.loc 1 96 17 view .LVU757
 2674              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2675              		.loc 1 95 63 is_stmt 0 view .LVU758
 2676 0bc0 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2677 0bc4 01B082E2 		add	fp, r2, #1	@ tmp215, yy,
 2678              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2679              		.loc 1 96 47 view .LVU759
 2680 0bc8 7180E0E6 		uxtab	r8, r0, r1	@ tmp208, _15, word
 2681 0bcc 998229E0 		mla	r9, r9, r2, r8	@ tmp209, g_armwave_state.bitdepth_height, yy, tmp208
 2682              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2683              		.loc 1 97 22 view .LVU760
 2684 0bd0 21A4A0E1 		lsr	r10, r1, #8	@ word, word,
 2685              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2686              		.loc 1 96 47 view .LVU761
 2687 0bd4 0980D3E7 		ldrb	r8, [r3, r9]	@ zero_extendqisi2	@ *_63, *_63
 2688 0bd8 7AA0E0E6 		uxtab	r10, r0, r10	@ tmp220, _15, word
 2689 0bdc 018088E2 		add	r8, r8, #1	@ tmp212, *_63,
 2690 0be0 0980C3E7 		strb	r8, [r3, r9]	@ tmp212, *_63
 2691              	.LVL194:
  97:armwave.c     ****             }
 2692              		.loc 1 97 17 is_stmt 1 view .LVU762
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2693              		.loc 1 94 17 view .LVU763
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2694              		.loc 1 95 17 view .LVU764
  96:armwave.c     ****                 word >>= 8;
 2695              		.loc 1 96 17 view .LVU765
 2696              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2697              		.loc 1 95 63 is_stmt 0 view .LVU766
 2698 0be4 2C8094E5 		ldr	r8, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2699              	@ armwave.c:97:                 word >>= 8;
  97:armwave.c     ****             }
 2700              		.loc 1 97 22 view .LVU767
 2701 0be8 2198A0E1 		lsr	r9, r1, #16	@ word, word,
 2702              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2703              		.loc 1 96 47 view .LVU768
 2704 0bec 211C80E0 		add	r1, r0, r1, lsr #24	@ tmp243, _15, word,
 2705              	.LVL195:
  96:armwave.c     ****                 word >>= 8;
 2706              		.loc 1 96 47 view .LVU769
 2707 0bf0 98AB28E0 		mla	r8, r8, fp, r10	@ tmp221, g_armwave_state.bitdepth_height, tmp215, tmp220
 2708 0bf4 79A0E0E6 		uxtab	r10, r0, r9	@ tmp228, _15, word
 2709 0bf8 08B0D3E7 		ldrb	fp, [r3, r8]	@ zero_extendqisi2	@ *_83, *_83
 2710              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2711              		.loc 1 95 63 view .LVU770
 2712 0bfc 029082E2 		add	r9, r2, #2	@ tmp230, yy,
 2713              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2714              		.loc 1 96 47 view .LVU771
 2715 0c00 01B08BE2 		add	fp, fp, #1	@ tmp224, *_83,
 2716 0c04 08B0C3E7 		strb	fp, [r3, r8]	@ tmp224, *_83
 2717              	.LVL196:
  97:armwave.c     ****             }
 2718              		.loc 1 97 17 is_stmt 1 view .LVU772
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2719              		.loc 1 94 17 view .LVU773
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2720              		.loc 1 95 17 view .LVU774
  96:armwave.c     ****                 word >>= 8;
 2721              		.loc 1 96 17 view .LVU775
 2722              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2723              		.loc 1 95 63 is_stmt 0 view .LVU776
 2724 0c08 2CB094E5 		ldr	fp, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2725 0c0c 038082E2 		add	r8, r2, #3	@ tmp239, yy,
 2726              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2727              		.loc 1 89 37 view .LVU777
 2728 0c10 042082E2 		add	r2, r2, #4	@ yy, yy,
 2729              	.LVL197:
 2730              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2731              		.loc 1 96 47 view .LVU778
 2732 0c14 9BA929E0 		mla	r9, fp, r9, r10	@ tmp233, g_armwave_state.bitdepth_height, tmp230, tmp228
 2733              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2734              		.loc 1 89 9 view .LVU779
 2735 0c18 020057E1 		cmp	r7, r2	@ _4, yy
 2736              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2737              		.loc 1 96 47 view .LVU780
 2738 0c1c 09A0D3E7 		ldrb	r10, [r3, r9]	@ zero_extendqisi2	@ *_103, *_103
 2739 0c20 01A08AE2 		add	r10, r10, #1	@ tmp236, *_103,
 2740 0c24 09A0C3E7 		strb	r10, [r3, r9]	@ tmp236, *_103
 2741              	.LVL198:
  97:armwave.c     ****             }
 2742              		.loc 1 97 17 is_stmt 1 view .LVU781
  94:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 2743              		.loc 1 94 17 view .LVU782
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2744              		.loc 1 95 17 view .LVU783
  96:armwave.c     ****                 word >>= 8;
 2745              		.loc 1 96 17 view .LVU784
 2746              	@ armwave.c:95:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bit
  95:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2747              		.loc 1 95 63 is_stmt 0 view .LVU785
 2748 0c28 2C9094E5 		ldr	r9, [r4, #44]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2749              	@ armwave.c:96:                 *(write_buffer + scale_value) += 1;
  96:armwave.c     ****                 word >>= 8;
 2750              		.loc 1 96 47 view .LVU786
 2751 0c2c 991821E0 		mla	r1, r9, r8, r1	@ tmp244, g_armwave_state.bitdepth_height, tmp239, tmp243
 2752 0c30 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ *_123, *_123
 2753 0c34 018088E2 		add	r8, r8, #1	@ tmp247, *_123,
 2754 0c38 0180C3E7 		strb	r8, [r3, r1]	@ tmp247, *_123
  97:armwave.c     ****             }
 2755              		.loc 1 97 17 is_stmt 1 view .LVU787
 2756              	.LVL199:
 2757              	@ armwave.c:89:         for(yy = 0; yy < height; yy += 4) {
  89:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2758              		.loc 1 89 9 is_stmt 0 view .LVU788
 2759 0c3c DEFFFF8A 		bhi	.L165		@,
 2760 0c40 248094E5 		ldr	r8, [r4, #36]	@ prephitmp_177, g_armwave_state.waves
 2761              	.LVL200:
 2762              	.L164:
 2763              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2764              		.loc 1 84 44 view .LVU789
 2765 0c44 01E08EE2 		add	lr, lr, #1	@ w, w,
 2766              	.LVL201:
 2767              	@ armwave.c:84:     for(w = 0; w < g_armwave_state.waves; w++) {
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2768              		.loc 1 84 5 view .LVU790
 2769 0c48 08005EE1 		cmp	lr, r8	@ w, prephitmp_177
 2770 0c4c D2FFFF3A 		bcc	.L166		@,
 2771 0c50 309094E5 		ldr	r9, [r4, #48]	@ _92, g_armwave_state.slice_height
 2772              	.LVL202:
 2773              	.L163:
  84:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2774              		.loc 1 84 5 view .LVU791
 2775              	.LBE35:
 2776              	.LBE36:
 2777              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2778              		.loc 1 376 28 discriminator 3 view .LVU792
 2779 0c54 0910A0E1 		mov	r1, r9	@, _92
 2780 0c58 020BA0E3 		mov	r0, #2048	@,
 2781              	.LVL203:
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2782              		.loc 1 376 28 discriminator 3 view .LVU793
 2783 0c5c FEFFFFEB 		bl	__aeabi_uidiv		@
 2784              	.LVL204:
 2785              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2786              		.loc 1 376 63 discriminator 3 view .LVU794
 2787 0c60 015085E2 		add	r5, r5, #1	@ yy, yy,
 2788              	.LVL205:
 2789              	@ armwave.c:376:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 376:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2790              		.loc 1 376 5 discriminator 3 view .LVU795
 2791 0c64 050050E1 		cmp	r0, r5	@, yy
 2792 0c68 C2FFFF8A 		bhi	.L167		@,
 2793 0c6c F88FBDE8 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2794              	.L180:
 2795              		.align	2
 2796              	.L179:
 2797 0c70 00000000 		.word	g_armwave_state
 2798              		.cfi_endproc
 2799              	.LFE69:
 2801              		.align	2
 2802              		.global	armwave_test_fill_gdkbuf
 2803              		.syntax unified
 2804              		.arm
 2805              		.fpu vfp
 2807              	armwave_test_fill_gdkbuf:
 2808              	.LVL206:
 2809              	.LFB70:
 378:armwave.c     ****     }
 379:armwave.c     **** }
 380:armwave.c     **** 
 381:armwave.c     **** /*
 382:armwave.c     ****  * Render GDK buffer with test funtionry.
 383:armwave.c     ****  */
 384:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 385:armwave.c     **** {
 2810              		.loc 1 385 1 is_stmt 1 view -0
 2811              		.cfi_startproc
 2812              		@ args = 0, pretend = 0, frame = 8
 2813              		@ frame_needed = 0, uses_anonymous_args = 0
 386:armwave.c     ****     //PyObject *mv;
 387:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 388:armwave.c     **** 
 389:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 390:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2814              		.loc 1 390 5 view .LVU797
 2815              	@ armwave.c:390:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2816              		.loc 1 390 11 is_stmt 0 view .LVU798
 2817 0c74 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2818              	@ armwave.c:385: {
 385:armwave.c     ****     //PyObject *mv;
 2819              		.loc 1 385 1 view .LVU799
 2820 0c78 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2821              		.cfi_def_cfa_offset 36
 2822              		.cfi_offset 4, -36
 2823              		.cfi_offset 5, -32
 2824              		.cfi_offset 6, -28
 2825              		.cfi_offset 7, -24
 2826              		.cfi_offset 8, -20
 2827              		.cfi_offset 9, -16
 2828              		.cfi_offset 10, -12
 2829              		.cfi_offset 11, -8
 2830              		.cfi_offset 14, -4
 2831 0c7c 0CD04DE2 		sub	sp, sp, #12	@,,
 2832              		.cfi_def_cfa_offset 48
 2833              	.LBB39:
 2834              	.LBB40:
 2835              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2836              		.loc 1 165 15 view .LVU800
 2837 0c80 38219FE5 		ldr	r2, .L205	@ tmp206,
 2838              	.LBE40:
 2839              	.LBE39:
 2840              	@ armwave.c:390:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2841              		.loc 1 390 11 view .LVU801
 2842 0c84 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2843              	.LVL207:
 391:armwave.c     ****     
 392:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 393:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2844              		.loc 1 393 5 is_stmt 1 view .LVU802
 2845              	.LBB43:
 2846              	.LBI39:
 160:armwave.c     **** {
 2847              		.loc 1 160 6 view .LVU803
 2848              	.LBB41:
 162:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2849              		.loc 1 162 5 view .LVU804
 163:armwave.c     ****     uint8_t r, g, b, value, row;
 2850              		.loc 1 163 5 view .LVU805
 164:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2851              		.loc 1 164 5 view .LVU806
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2852              		.loc 1 165 5 view .LVU807
 2853              	@ armwave.c:169:     assert(out_buffer != NULL);
 169:armwave.c     **** 
 2854              		.loc 1 169 5 is_stmt 0 view .LVU808
 2855 0c88 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2856              	@ armwave.c:165:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 165:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2857              		.loc 1 165 15 view .LVU809
 2858 0c8c 049092E5 		ldr	r9, [r2, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2859              	.LVL208:
 166:armwave.c     ****     uint32_t offset;
 2860              		.loc 1 166 5 is_stmt 1 view .LVU810
 167:armwave.c     **** 
 2861              		.loc 1 167 5 view .LVU811
 169:armwave.c     **** 
 2862              		.loc 1 169 5 view .LVU812
 2863 0c90 4500000A 		beq	.L203		@,
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2864              		.loc 1 171 5 view .LVU813
 2865              	@ armwave.c:171:     npix = g_armwave_state.target_width * 256; 
 171:armwave.c     ****     vscale = g_armwave_state.target_height >> 8;
 2866              		.loc 1 171 41 is_stmt 0 view .LVU814
 2867 0c94 405092E5 		ldr	r5, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2868 0c98 0554A0E1 		lsl	r5, r5, #8	@ npix, g_armwave_state.target_width,
 2869              	.LVL209:
 172:armwave.c     **** 
 2870              		.loc 1 172 5 is_stmt 1 view .LVU815
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2871              		.loc 1 174 5 view .LVU816
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2872              		.loc 1 174 5 is_stmt 0 view .LVU817
 2873 0c9c 000055E3 		cmp	r5, #0	@ npix,
 2874 0ca0 0B0000DA 		ble	.L181		@,
 2875              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2876              		.loc 1 187 52 view .LVU818
 2877 0ca4 F635D2E1 		ldrsh	r3, [r2, #86]	@ _26, g_armwave_state.ch1_color.g
 2878              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2879              		.loc 1 186 52 view .LVU819
 2880 0ca8 F4B5D2E1 		ldrsh	fp, [r2, #84]	@ _20, g_armwave_state.ch1_color.r
 2881              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2882              		.loc 1 174 11 view .LVU820
 2883 0cac 0010A0E3 		mov	r1, #0	@ n,
 2884              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2885              		.loc 1 187 52 view .LVU821
 2886 0cb0 00308DE5 		str	r3, [sp]	@ _26, %sfp
 2887              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2888              		.loc 1 188 52 view .LVU822
 2889 0cb4 F835D2E1 		ldrsh	r3, [r2, #88]	@ _30, g_armwave_state.ch1_color.b
 2890 0cb8 04308DE5 		str	r3, [sp, #4]	@ _30, %sfp
 2891              	.LVL210:
 2892              	.L188:
 178:armwave.c     **** 
 2893              		.loc 1 178 9 is_stmt 1 view .LVU823
 2894              	@ armwave.c:178:         wave_word = *base_32ptr++;
 178:armwave.c     **** 
 2895              		.loc 1 178 19 is_stmt 0 view .LVU824
 2896 0cbc 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_11, offset: 4294967292B]
 2897              	.LVL211:
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2898              		.loc 1 180 9 is_stmt 1 view .LVU825
 2899              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2900              		.loc 1 180 11 is_stmt 0 view .LVU826
 2901 0cc0 000050E3 		cmp	r0, #0	@ wave_word,
 2902 0cc4 0400001A 		bne	.L200		@,
 2903 0cc8 041081E2 		add	r1, r1, #4	@ n, n,
 2904              	.L184:
 2905              	.LVL212:
 2906              	@ armwave.c:174:     for(n = 0; n < npix; n += 4) {
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2907              		.loc 1 174 5 view .LVU827
 2908 0ccc 010055E1 		cmp	r5, r1	@ npix, n
 2909 0cd0 F9FFFFCA 		bgt	.L188		@,
 2910              	.LVL213:
 2911              	.L181:
 174:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2912              		.loc 1 174 5 view .LVU828
 2913              	.LBE41:
 2914              	.LBE43:
 2915              	@ armwave.c:394: }
 394:armwave.c     **** }
 2916              		.loc 1 394 1 view .LVU829
 2917 0cd4 0CD08DE2 		add	sp, sp, #12	@,,
 2918              		.cfi_remember_state
 2919              		.cfi_def_cfa_offset 36
 2920              		@ sp needed	@
 2921 0cd8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2922              	.LVL214:
 2923              	.L200:
 2924              		.cfi_restore_state
 2925              	.LBB44:
 2926              	.LBB42:
 2927              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2928              		.loc 1 185 19 view .LVU830
 2929 0cdc FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2930              	@ armwave.c:180:         if(COND_UNLIKELY(wave_word != 0)) {
 180:armwave.c     ****             for(w = 0; w < 4; w++) {
 2931              		.loc 1 180 11 view .LVU831
 2932 0ce0 0160A0E1 		mov	r6, r1	@ ivtmp.118, n
 2933              	.LVL215:
 182:armwave.c     ****                 wave_word >>= 8;
 2934              		.loc 1 182 17 is_stmt 1 view .LVU832
 183:armwave.c     **** 
 2935              		.loc 1 183 17 view .LVU833
 2936              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2937              		.loc 1 183 27 is_stmt 0 view .LVU834
 2938 0ce4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2939              	.LVL216:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2940              		.loc 1 185 17 is_stmt 1 view .LVU835
 2941 0ce8 041081E2 		add	r1, r1, #4	@ n, ivtmp.118,
 2942              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2943              		.loc 1 185 19 is_stmt 0 view .LVU836
 2944 0cec 0500001A 		bne	.L204		@,
 2945              	.L185:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2946              		.loc 1 185 19 view .LVU837
 2947 0cf0 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2948              	@ armwave.c:181:             for(w = 0; w < 4; w++) {
 181:armwave.c     ****                 value = wave_word & 0xff;
 2949              		.loc 1 181 13 view .LVU838
 2950 0cf4 060051E1 		cmp	r1, r6	@ n, ivtmp.118
 2951 0cf8 F3FFFF0A 		beq	.L184		@,
 182:armwave.c     ****                 wave_word >>= 8;
 2952              		.loc 1 182 17 is_stmt 1 view .LVU839
 2953              	.LVL217:
 183:armwave.c     **** 
 2954              		.loc 1 183 17 view .LVU840
 2955              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2956              		.loc 1 185 19 is_stmt 0 view .LVU841
 2957 0cfc FFE010E2 		ands	lr, r0, #255	@ _22, wave_word,
 2958              	@ armwave.c:183:                 wave_word >>= 8;
 183:armwave.c     **** 
 2959              		.loc 1 183 27 view .LVU842
 2960 0d00 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2961              	.LVL218:
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2962              		.loc 1 185 17 is_stmt 1 view .LVU843
 2963              	@ armwave.c:185:                 if(value != 0) {
 185:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2964              		.loc 1 185 19 is_stmt 0 view .LVU844
 2965 0d04 F9FFFF0A 		beq	.L185		@,
 2966              	.L204:
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2967              		.loc 1 186 21 is_stmt 1 view .LVU845
 2968              	.LVL219:
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2969              		.loc 1 187 21 view .LVU846
 188:armwave.c     **** 
 2970              		.loc 1 188 21 view .LVU847
 190:armwave.c     ****                     g = MIN(gg, 255);
 2971              		.loc 1 190 21 view .LVU848
 191:armwave.c     ****                     b = MIN(bb, 255);
 2972              		.loc 1 191 21 view .LVU849
 192:armwave.c     **** 
 2973              		.loc 1 192 21 view .LVU850
 195:armwave.c     **** 
 2974              		.loc 1 195 21 view .LVU851
 2975              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2976              		.loc 1 188 55 is_stmt 0 view .LVU852
 2977 0d08 04309DE5 		ldr	r3, [sp, #4]	@ _30, %sfp
 2978              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2979              		.loc 1 199 57 view .LVU853
 2980 0d0c 1CA092E5 		ldr	r10, [r2, #28]	@ _52, g_armwave_state.vscale
 2981              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2982              		.loc 1 199 32 view .LVU854
 2983 0d10 7670EFE6 		uxtb	r7, r6	@ ivtmp.118, ivtmp.118
 2984              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2985              		.loc 1 188 55 view .LVU855
 2986 0d14 930E0CE0 		mul	ip, r3, lr	@ tmp181, _30, _22
 2987              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2988              		.loc 1 187 55 view .LVU856
 2989 0d18 00309DE5 		ldr	r3, [sp]	@ _26, %sfp
 2990              	@ armwave.c:199:                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 199:armwave.c     ****                     xx = (nsub >> 8);
 2991              		.loc 1 199 24 view .LVU857
 2992 0d1c 9A0707E0 		mul	r7, r10, r7	@ yy, _52, ivtmp.118
 2993              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2994              		.loc 1 187 55 view .LVU858
 2995 0d20 930E04E0 		mul	r4, r3, lr	@ tmp185, _26, _22
 2996              	@ armwave.c:188:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 188:armwave.c     **** 
 2997              		.loc 1 188 24 view .LVU859
 2998 0d24 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp181,
 2999              	.LVL220:
 3000              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3001              		.loc 1 186 55 view .LVU860
 3002 0d28 9E0B0EE0 		mul	lr, lr, fp	@ tmp191, _22, _20
 3003              	.LVL221:
 3004              	@ armwave.c:187:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 187:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 3005              		.loc 1 187 24 view .LVU861
 3006 0d2c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 3007              	.LVL222:
 3008              	@ armwave.c:192:                     b = MIN(bb, 255);
 192:armwave.c     **** 
 3009              		.loc 1 192 25 view .LVU862
 3010 0d30 FF005CE3 		cmp	ip, #255	@ bb,
 3011 0d34 FFC0A0A3 		movge	ip, #255	@ bb,
 3012              	.LVL223:
 3013              	@ armwave.c:191:                     g = MIN(gg, 255);
 191:armwave.c     ****                     b = MIN(bb, 255);
 3014              		.loc 1 191 25 view .LVU863
 3015 0d38 FF0054E3 		cmp	r4, #255	@ gg,
 3016 0d3c FF40A0A3 		movge	r4, #255	@ gg,
 3017              	.LVL224:
 3018              	@ armwave.c:186:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 186:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 3019              		.loc 1 186 24 view .LVU864
 3020 0d40 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp191,
 3021              	.LVL225:
 3022              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3023              		.loc 1 190 25 view .LVU865
 3024 0d44 FF005EE3 		cmp	lr, #255	@ rr,
 3025              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3026              		.loc 1 195 56 view .LVU866
 3027 0d48 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 3028              	@ armwave.c:190:                     r = MIN(rr, 255);
 190:armwave.c     ****                     g = MIN(gg, 255);
 3029              		.loc 1 190 25 view .LVU867
 3030 0d4c FFE0A0A3 		movge	lr, #255	@ rr,
 3031              	.LVL226:
 3032              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3033              		.loc 1 195 44 view .LVU868
 3034 0d50 0C38A0E1 		lsl	r3, ip, #16	@ tmp182, bb,
 3035 0d54 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 3036              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3037              		.loc 1 195 56 view .LVU869
 3038 0d58 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 3039              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3040              		.loc 1 195 51 view .LVU870
 3041 0d5c 043083E1 		orr	r3, r3, r4	@ tmp189, tmp183, tmp187
 3042              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3043              		.loc 1 195 62 view .LVU871
 3044 0d60 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 3045 0d64 0E3083E1 		orr	r3, r3, lr	@ tmp193, tmp189, rr
 3046              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3047              		.loc 1 202 21 view .LVU872
 3048 0d68 00005AE3 		cmp	r10, #0	@ _52,
 3049              	@ armwave.c:195:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 195:armwave.c     **** 
 3050              		.loc 1 195 26 view .LVU873
 3051 0d6c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 3052              	.LVL227:
 198:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 3053              		.loc 1 198 21 is_stmt 1 view .LVU874
 199:armwave.c     ****                     xx = (nsub >> 8);
 3054              		.loc 1 199 21 view .LVU875
 200:armwave.c     **** 
 3055              		.loc 1 200 21 view .LVU876
 3056              	@ armwave.c:200:                     xx = (nsub >> 8);
 200:armwave.c     **** 
 3057              		.loc 1 200 32 is_stmt 0 view .LVU877
 3058 0d70 46A4A0E1 		asr	r10, r6, #8	@ xx, ivtmp.118,
 3059              	.LVL228:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3060              		.loc 1 202 21 is_stmt 1 view .LVU878
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3061              		.loc 1 202 21 is_stmt 0 view .LVU879
 3062 0d74 DDFFFF0A 		beq	.L185		@,
 3063              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3064              		.loc 1 202 29 view .LVU880
 3065 0d78 00C0A0E3 		mov	ip, #0	@ row,
 3066              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3067              		.loc 1 202 38 view .LVU881
 3068 0d7c 0CE0A0E1 		mov	lr, ip	@ _56, row
 3069              	.LVL229:
 3070              	.L186:
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3071              		.loc 1 203 25 is_stmt 1 view .LVU882
 204:armwave.c     ****                     }
 3072              		.loc 1 204 25 view .LVU883
 3073              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3074              		.loc 1 203 52 is_stmt 0 view .LVU884
 3075 0d80 404092E5 		ldr	r4, [r2, #64]	@ g_armwave_state.target_width, g_armwave_state.target_width
 3076              	@ armwave.c:203:                         offset = (xx + ((yy + row) * g_armwave_state.target_width)
 203:armwave.c     ****                         *(out_buffer_base + offset) = word;
 3077              		.loc 1 203 45 view .LVU885
 3078 0d84 0EE087E0 		add	lr, r7, lr	@ tmp196, yy, _56
 3079              	.LVL230:
 3080              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3081              		.loc 1 202 67 view .LVU886
 3082 0d88 01C08CE2 		add	ip, ip, #1	@ tmp201, row,
 3083              	.LVL231:
 3084              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3085              		.loc 1 204 43 view .LVU887
 3086 0d8c 94AE24E0 		mla	r4, r4, lr, r10	@ tmp200, g_armwave_state.target_width, tmp196, xx
 3087              	.LVL232:
 3088              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3089              		.loc 1 202 67 view .LVU888
 3090 0d90 7CC0EFE6 		uxtb	ip, ip	@ row, tmp201
 3091              	.LVL233:
 3092              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3093              		.loc 1 202 38 view .LVU889
 3094 0d94 0CE0A0E1 		mov	lr, ip	@ _56, row
 3095              	@ armwave.c:204:                         *(out_buffer_base + offset) = word;
 204:armwave.c     ****                     }
 3096              		.loc 1 204 53 view .LVU890
 3097 0d98 043188E7 		str	r3, [r8, r4, lsl #2]	@ word, *_62
 3098              	@ armwave.c:202:                     for(row = 0; row < g_armwave_state.vscale; row++) {
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3099              		.loc 1 202 21 view .LVU891
 3100 0d9c 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3101              	.LVL234:
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3102              		.loc 1 202 21 view .LVU892
 3103 0da0 04005CE1 		cmp	ip, r4	@ row, g_armwave_state.vscale
 3104 0da4 F5FFFF3A 		bcc	.L186		@,
 202:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 3105              		.loc 1 202 21 view .LVU893
 3106 0da8 D0FFFFEA 		b	.L185		@
 3107              	.LVL235:
 3108              	.L203:
 169:armwave.c     **** 
 3109              		.loc 1 169 5 is_stmt 1 view .LVU894
 3110 0dac 10309FE5 		ldr	r3, .L205+4	@,
 3111 0db0 A920A0E3 		mov	r2, #169	@,
 3112 0db4 0C109FE5 		ldr	r1, .L205+8	@,
 3113 0db8 0C009FE5 		ldr	r0, .L205+12	@,
 3114              	.LVL236:
 169:armwave.c     **** 
 3115              		.loc 1 169 5 is_stmt 0 view .LVU895
 3116 0dbc FEFFFFEB 		bl	__assert_fail		@
 3117              	.LVL237:
 3118              	.L206:
 3119              		.align	2
 3120              	.L205:
 3121 0dc0 00000000 		.word	g_armwave_state
 3122 0dc4 18000000 		.word	.LANCHOR0+24
 3123 0dc8 20000000 		.word	.LC2
 3124 0dcc 2C000000 		.word	.LC3
 3125              	.LBE42:
 3126              	.LBE44:
 3127              		.cfi_endproc
 3128              	.LFE70:
 3130              		.align	2
 3131              		.global	armwave_fill_pixbuf_into_pybuffer
 3132              		.syntax unified
 3133              		.arm
 3134              		.fpu vfp
 3136              	armwave_fill_pixbuf_into_pybuffer:
 3137              	.LVL238:
 3138              	.LFB71:
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 400:armwave.c     **** {
 3139              		.loc 1 400 1 is_stmt 1 view -0
 3140              		.cfi_startproc
 3141              		@ args = 0, pretend = 0, frame = 48
 3142              		@ frame_needed = 0, uses_anonymous_args = 0
 401:armwave.c     ****     Py_buffer buffer;
 3143              		.loc 1 401 5 view .LVU897
 402:armwave.c     ****     assert(PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE) != 0);
 3144              		.loc 1 402 5 view .LVU898
 3145              	@ armwave.c:400: {
 400:armwave.c     ****     Py_buffer buffer;
 3146              		.loc 1 400 1 is_stmt 0 view .LVU899
 3147 0dd0 04E02DE5 		str	lr, [sp, #-4]!	@,
 3148              		.cfi_def_cfa_offset 4
 3149              		.cfi_offset 14, -4
 3150 0dd4 34D04DE2 		sub	sp, sp, #52	@,,
 3151              		.cfi_def_cfa_offset 56
 3152              	@ armwave.c:402:     assert(PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE) != 
 3153              		.loc 1 402 5 view .LVU900
 3154 0dd8 04108DE2 		add	r1, sp, #4	@ tmp121,,
 3155 0ddc 0120A0E3 		mov	r2, #1	@,
 3156 0de0 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3157              	.LVL239:
 3158              		.loc 1 402 5 view .LVU901
 3159 0de4 000050E3 		cmp	r0, #0	@,
 3160 0de8 0500000A 		beq	.L210		@,
 403:armwave.c     **** 
 404:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3161              		.loc 1 404 5 is_stmt 1 view .LVU902
 3162 0dec 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3163 0df0 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3164              	.LVL240:
 405:armwave.c     ****     PyBuffer_Release(&buffer);
 3165              		.loc 1 405 5 view .LVU903
 3166 0df4 04008DE2 		add	r0, sp, #4	@ tmp122,,
 3167 0df8 FEFFFFEB 		bl	PyBuffer_Release		@
 3168              	.LVL241:
 3169              	@ armwave.c:406: }
 406:armwave.c     **** }
 3170              		.loc 1 406 1 is_stmt 0 view .LVU904
 3171 0dfc 34D08DE2 		add	sp, sp, #52	@,,
 3172              		.cfi_remember_state
 3173              		.cfi_def_cfa_offset 4
 3174              		@ sp needed	@
 3175 0e00 04F09DE4 		ldr	pc, [sp], #4	@
 3176              	.L210:
 3177              		.cfi_restore_state
 402:armwave.c     **** 
 3178              		.loc 1 402 5 is_stmt 1 discriminator 1 view .LVU905
 3179 0e04 0C309FE5 		ldr	r3, .L211	@,
 3180 0e08 0C209FE5 		ldr	r2, .L211+4	@,
 3181 0e0c 0C109FE5 		ldr	r1, .L211+8	@,
 3182 0e10 0C009FE5 		ldr	r0, .L211+12	@,
 3183 0e14 FEFFFFEB 		bl	__assert_fail		@
 3184              	.LVL242:
 3185              	.L212:
 3186              		.align	2
 3187              	.L211:
 3188 0e18 68000000 		.word	.LANCHOR0+104
 3189 0e1c 92010000 		.word	402
 3190 0e20 20000000 		.word	.LC2
 3191 0e24 58010000 		.word	.LC15
 3192              		.cfi_endproc
 3193              	.LFE71:
 3195              		.align	2
 3196              		.global	armwave_test_dump_buffer_to_ppm
 3197              		.syntax unified
 3198              		.arm
 3199              		.fpu vfp
 3201              	armwave_test_dump_buffer_to_ppm:
 3202              	.LVL243:
 3203              	.LFB72:
 407:armwave.c     **** 
 408:armwave.c     **** /*
 409:armwave.c     ****  * Dump a ppm of the working output buffer to a file.
 410:armwave.c     ****  */
 411:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 412:armwave.c     **** {
 3204              		.loc 1 412 1 view -0
 3205              		.cfi_startproc
 3206              		@ args = 0, pretend = 0, frame = 0
 3207              		@ frame_needed = 0, uses_anonymous_args = 0
 3208              		@ link register save eliminated.
 413:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3209              		.loc 1 413 5 view .LVU907
 3210 0e28 08309FE5 		ldr	r3, .L214	@ tmp112,
 3211 0e2c 0010A0E1 		mov	r1, r0	@, fn
 3212 0e30 500093E5 		ldr	r0, [r3, #80]	@, g_armwave_state.out_pixbuf
 3213              	.LVL244:
 3214              		.loc 1 413 5 is_stmt 0 view .LVU908
 3215 0e34 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3216              	.LVL245:
 3217              	.L215:
 3218              		.loc 1 413 5 view .LVU909
 3219              		.align	2
 3220              	.L214:
 3221 0e38 00000000 		.word	g_armwave_state
 3222              		.cfi_endproc
 3223              	.LFE72:
 3225              		.align	2
 3226              		.global	armwave_test_create_am_sine
 3227              		.syntax unified
 3228              		.arm
 3229              		.fpu vfp
 3231              	armwave_test_create_am_sine:
 3232              	.LVL246:
 3233              	.LFB73:
 414:armwave.c     **** }
 415:armwave.c     **** 
 416:armwave.c     **** /*
 417:armwave.c     ****  * Make a test AM waveform for render tests.
 418:armwave.c     ****  *
 419:armwave.c     ****  * @param   mod                 modulation depth
 420:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction)
 423:armwave.c     **** {
 3234              		.loc 1 423 1 is_stmt 1 view -0
 3235              		.cfi_startproc
 3236              		@ args = 0, pretend = 0, frame = 8
 3237              		@ frame_needed = 0, uses_anonymous_args = 0
 424:armwave.c     ****     float v, noise, xnoise, mod_val;
 3238              		.loc 1 424 5 view .LVU911
 425:armwave.c     ****     int w, x;
 3239              		.loc 1 425 5 view .LVU912
 426:armwave.c     **** 
 427:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3240              		.loc 1 427 5 view .LVU913
 3241              	@ armwave.c:423: {
 423:armwave.c     ****     float v, noise, xnoise, mod_val;
 3242              		.loc 1 423 1 is_stmt 0 view .LVU914
 3243 0e3c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3244              		.cfi_def_cfa_offset 32
 3245              		.cfi_offset 4, -32
 3246              		.cfi_offset 5, -28
 3247              		.cfi_offset 6, -24
 3248              		.cfi_offset 7, -20
 3249              		.cfi_offset 8, -16
 3250              		.cfi_offset 9, -12
 3251              		.cfi_offset 10, -8
 3252              		.cfi_offset 14, -4
 3253 0e40 0E8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14}	@
 3254              		.cfi_def_cfa_offset 88
 3255              		.cfi_offset 80, -88
 3256              		.cfi_offset 81, -84
 3257              		.cfi_offset 82, -80
 3258              		.cfi_offset 83, -76
 3259              		.cfi_offset 84, -72
 3260              		.cfi_offset 85, -68
 3261              		.cfi_offset 86, -64
 3262              		.cfi_offset 87, -60
 3263              		.cfi_offset 88, -56
 3264              		.cfi_offset 89, -52
 3265              		.cfi_offset 90, -48
 3266              		.cfi_offset 91, -44
 3267              		.cfi_offset 92, -40
 3268              		.cfi_offset 93, -36
 3269 0e44 54819FE5 		ldr	r8, .L235+36	@ _76,
 3270 0e48 40DAF0EE 		vmov.f32	s27, s0	@ mod, mod
 3271 0e4c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.139, _76,
 3272 0e50 60CAB0EE 		vmov.f32	s24, s1	@ noise_fraction, noise_fraction
 3273              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3274              		.loc 1 428 37 view .LVU915
 3275 0e54 48DA9FED 		vldr.32	s26, .L235	@ tmp158,
 3276              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3277              		.loc 1 428 17 view .LVU916
 3278 0e58 48CADFED 		vldr.32	s25, .L235+4	@ tmp160,
 3279              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 429:armwave.c     ****         //mod = 1.0f;
 430:armwave.c     **** 
 431:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 432:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 433:armwave.c     ****             noise *= noise;
 434:armwave.c     ****             noise *= noise;
 435:armwave.c     ****             noise *= noise;
 436:armwave.c     **** 
 437:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
 438:armwave.c     ****                 noise = -noise;
 439:armwave.c     **** 
 440:armwave.c     ****             noise += 1.0f;
 441:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 442:armwave.c     **** 
 443:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * noise;
 3280              		.loc 1 443 29 view .LVU917
 3281 0e5c 48BADFED 		vldr.32	s23, .L235+8	@ tmp168,
 3282              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 3283              		.loc 1 443 33 view .LVU918
 3284 0e60 48BA9FED 		vldr.32	s22, .L235+12	@ tmp170,
 3285              	@ armwave.c:441:             xnoise = (rand() & 0xffff) / 6553500.0f;
 441:armwave.c     **** 
 3286              		.loc 1 441 20 view .LVU919
 3287 0e64 48AADFED 		vldr.32	s21, .L235+16	@ tmp175,
 3288              	@ armwave.c:440:             noise += 1.0f;
 440:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3289              		.loc 1 440 19 view .LVU920
 3290 0e68 48AA9FED 		vldr.32	s20, .L235+20	@ tmp181,
 3291 0e6c 02A886E2 		add	r10, r6, #131072	@ _82,,
 3292              	@ armwave.c:423: {
 423:armwave.c     ****     float v, noise, xnoise, mod_val;
 3293              		.loc 1 423 1 view .LVU921
 3294 0e70 08D04DE2 		sub	sp, sp, #8	@,,
 3295              		.cfi_def_cfa_offset 96
 3296 0e74 0FA08AE2 		add	r10, r10, #15	@ _82, _82,
 3297 0e78 0F6086E2 		add	r6, r6, #15	@ ivtmp.139, ivtmp.139,
 3298 0e7c 008068E2 		rsb	r8, r8, #0	@ ivtmp.142, _76
 3299              	@ armwave.c:427:     for(w = 0; w < TEST_NWAVES; w++) {
 427:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3300              		.loc 1 427 11 view .LVU922
 3301 0e80 0090A0E3 		mov	r9, #0	@ w,
 3302              	.LVL247:
 3303              	.L222:
 428:armwave.c     ****         //mod = 1.0f;
 3304              		.loc 1 428 9 is_stmt 1 view .LVU923
 3305              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         //mod = 1.0f;
 3306              		.loc 1 428 28 is_stmt 0 view .LVU924
 3307 0e84 909A07EE 		vmov	s15, r9	@ int	@ w, w
 3308              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         //mod = 1.0f;
 3309              		.loc 1 428 17 view .LVU925
 3310 0e88 6C8AB0EE 		vmov.f32	s16, s25	@ mod_val, tmp160
 3311              	@ armwave.c:445:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 444:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 445:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
 3312              		.loc 1 445 58 view .LVU926
 3313 0e8c 409ADFED 		vldr.32	s19, .L235+24	@ tmp186,
 3314 0e90 409A9FED 		vldr.32	s18, .L235+28	@ tmp187,
 3315              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         //mod = 1.0f;
 3316              		.loc 1 428 28 view .LVU927
 3317 0e94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp156, w
 3318 0e98 025B46E2 		sub	r5, r6, #2048	@ ivtmp.132, ivtmp.139,
 3319 0e9c 017088E2 		add	r7, r8, #1	@ tmp193, ivtmp.142,
 3320              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         //mod = 1.0f;
 3321              		.loc 1 428 37 view .LVU928
 3322 0ea0 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp157, tmp156, tmp158
 3323              	@ armwave.c:428:         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 428:armwave.c     ****         //mod = 1.0f;
 3324              		.loc 1 428 17 view .LVU929
 3325 0ea4 AD8A07EE 		vmla.f32	s16, s15, s27	@ mod_val, tmp157, mod
 3326              	.LVL248:
 431:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3327              		.loc 1 431 9 is_stmt 1 view .LVU930
 431:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3328              		.loc 1 431 9 is_stmt 0 view .LVU931
 3329 0ea8 C88AB7EE 		vcvt.f64.f32	d8, s16	@ tmp194, mod_val
 3330              	.LVL249:
 3331              	.L221:
 3332              	@ armwave.c:432:             noise  = ((rand() & 0xffff) * noise_fraction);
 432:armwave.c     ****             noise *= noise;
 3333              		.loc 1 432 24 view .LVU932
 3334 0eac FEFFFFEB 		bl	rand		@
 3335              	.LVL250:
 3336 0eb0 054087E0 		add	r4, r7, r5	@ _72, tmp193, ivtmp.132
 3337              	.LVL251:
 432:armwave.c     ****             noise *= noise;
 3338              		.loc 1 432 13 is_stmt 1 view .LVU933
 3339              	@ armwave.c:432:             noise  = ((rand() & 0xffff) * noise_fraction);
 432:armwave.c     ****             noise *= noise;
 3340              		.loc 1 432 31 is_stmt 0 view .LVU934
 3341 0eb4 7000FFE6 		uxth	r0, r0	@ tmp162,
 3342              	@ armwave.c:432:             noise  = ((rand() & 0xffff) * noise_fraction);
 432:armwave.c     ****             noise *= noise;
 3343              		.loc 1 432 41 view .LVU935
 3344 0eb8 900A07EE 		vmov	s15, r0	@ int	@ tmp162, tmp162
 3345 0ebc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp164, tmp162
 3346              	@ armwave.c:432:             noise  = ((rand() & 0xffff) * noise_fraction);
 432:armwave.c     ****             noise *= noise;
 3347              		.loc 1 432 20 view .LVU936
 3348 0ec0 8C7A67EE 		vmul.f32	s15, s15, s24	@ noise, tmp164, noise_fraction
 3349              	.LVL252:
 433:armwave.c     ****             noise *= noise;
 3350              		.loc 1 433 13 is_stmt 1 view .LVU937
 3351              	@ armwave.c:433:             noise *= noise;
 433:armwave.c     ****             noise *= noise;
 3352              		.loc 1 433 19 is_stmt 0 view .LVU938
 3353 0ec4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3354              	.LVL253:
 434:armwave.c     ****             noise *= noise;
 3355              		.loc 1 434 13 is_stmt 1 view .LVU939
 3356              	@ armwave.c:434:             noise *= noise;
 434:armwave.c     ****             noise *= noise;
 3357              		.loc 1 434 19 is_stmt 0 view .LVU940
 3358 0ec8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3359              	.LVL254:
 435:armwave.c     **** 
 3360              		.loc 1 435 13 is_stmt 1 view .LVU941
 3361              	@ armwave.c:435:             noise *= noise;
 435:armwave.c     **** 
 3362              		.loc 1 435 19 is_stmt 0 view .LVU942
 3363 0ecc A7EA27EE 		vmul.f32	s28, s15, s15	@ noise, noise, noise
 3364              	.LVL255:
 437:armwave.c     ****                 noise = -noise;
 3365              		.loc 1 437 13 is_stmt 1 view .LVU943
 3366              	@ armwave.c:437:             if((rand() & 0xffff) > 0x7fff)
 437:armwave.c     ****                 noise = -noise;
 3367              		.loc 1 437 17 is_stmt 0 view .LVU944
 3368 0ed0 FEFFFFEB 		bl	rand		@
 3369              	.LVL256:
 438:armwave.c     **** 
 3370              		.loc 1 438 17 is_stmt 1 view .LVU945
 3371              	@ armwave.c:437:             if((rand() & 0xffff) > 0x7fff)
 437:armwave.c     ****                 noise = -noise;
 3372              		.loc 1 437 15 is_stmt 0 view .LVU946
 3373 0ed4 020910E3 		tst	r0, #32768	@,
 3374              	@ armwave.c:438:                 noise = -noise;
 438:armwave.c     **** 
 3375              		.loc 1 438 23 view .LVU947
 3376 0ed8 4EEAB11E 		vnegne.f32	s28, s28	@ noise, noise
 3377              	.LVL257:
 440:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3378              		.loc 1 440 13 is_stmt 1 view .LVU948
 441:armwave.c     **** 
 3379              		.loc 1 441 13 view .LVU949
 3380              	@ armwave.c:441:             xnoise = (rand() & 0xffff) / 6553500.0f;
 441:armwave.c     **** 
 3381              		.loc 1 441 23 is_stmt 0 view .LVU950
 3382 0edc FEFFFFEB 		bl	rand		@
 3383              	.LVL258:
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3384              		.loc 1 443 13 is_stmt 1 view .LVU951
 3385              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3386              		.loc 1 443 29 is_stmt 0 view .LVU952
 3387 0ee0 904A07EE 		vmov	s15, r4	@ int	@ _72, _72
 3388 0ee4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, _72
 3389 0ee8 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp167, tmp166, tmp168
 3390              	@ armwave.c:441:             xnoise = (rand() & 0xffff) / 6553500.0f;
 441:armwave.c     **** 
 3391              		.loc 1 441 30 view .LVU953
 3392 0eec 7000FFE6 		uxth	r0, r0	@ tmp171,
 3393              	.LVL259:
 3394              	@ armwave.c:441:             xnoise = (rand() & 0xffff) / 6553500.0f;
 441:armwave.c     **** 
 3395              		.loc 1 441 40 view .LVU954
 3396 0ef0 100A07EE 		vmov	s14, r0	@ int	@ tmp171, tmp171
 3397 0ef4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp173, tmp171
 3398              	@ armwave.c:441:             xnoise = (rand() & 0xffff) / 6553500.0f;
 441:armwave.c     **** 
 3399              		.loc 1 441 20 view .LVU955
 3400 0ef8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp173, tmp175
 3401              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3402              		.loc 1 443 60 view .LVU956
 3403 0efc 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp176, tmp167, tmp170
 3404              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3405              		.loc 1 443 18 view .LVU957
 3406 0f00 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp176
 3407 0f04 FEFFFFEB 		bl	sin		@
 3408              	.LVL260:
 3409              		.loc 1 445 13 is_stmt 1 view .LVU958
 3410              	@ armwave.c:440:             noise += 1.0f;
 440:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 3411              		.loc 1 440 19 is_stmt 0 view .LVU959
 3412 0f08 0A7A7EEE 		vadd.f32	s15, s28, s20	@ noise, noise, tmp181
 3413              	@ armwave.c:445:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3414              		.loc 1 445 56 view .LVU960
 3415 0f0c 226ADFED 		vldr.32	s13, .L235+32	@ tmp189,
 3416 0f10 0030A0E3 		mov	r3, #0	@ iftmp.18_29,
 3417              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3418              		.loc 1 443 81 view .LVU961
 3419 0f14 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp182, noise
 3420              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3421              		.loc 1 443 70 view .LVU962
 3422 0f18 000B28EE 		vmul.f64	d0, d8, d0	@ tmp179, tmp194,
 3423              	.LVL261:
 3424              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3425              		.loc 1 443 81 view .LVU963
 3426 0f1c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp183, tmp179, tmp182
 3427              	@ armwave.c:443:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod_val) * 
 443:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 3428              		.loc 1 443 15 view .LVU964
 3429 0f20 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp183
 3430              	@ armwave.c:445:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3431              		.loc 1 445 58 view .LVU965
 3432 0f24 497AF0EE 		vmov.f32	s15, s18	@ _23, tmp187
 3433 0f28 297A47EE 		vmla.f32	s15, s14, s19	@ _23, v, tmp186
 3434 0f2c C07AF5EE 		vcmpe.f32	s15, #0	@ _23
 3435 0f30 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3436 0f34 050000DA 		ble	.L218		@,
 3437              	@ armwave.c:445:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3438              		.loc 1 445 56 discriminator 1 view .LVU966
 3439 0f38 E67AF4EE 		vcmpe.f32	s15, s13	@ _23, tmp189
 3440 0f3c FF30A0E3 		mov	r3, #255	@ iftmp.18_29,
 3441 0f40 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3442 0f44 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp191, _23
 3443 0f48 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp191, %sfp
 3444 0f4c 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.18_29, %sfp
 3445              	.L218:
 3446              	@ armwave.c:445:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 
 3447              		.loc 1 445 56 discriminator 12 view .LVU967
 3448 0f50 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.18_29, MEM[base: _61, offset: 0B]
 3449              	.LVL262:
 3450              	@ armwave.c:431:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 431:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3451              		.loc 1 431 9 discriminator 12 view .LVU968
 3452 0f54 060055E1 		cmp	r5, r6	@ ivtmp.132, ivtmp.139
 3453 0f58 D3FFFF1A 		bne	.L221		@,
 3454 0f5c 026B85E2 		add	r6, r5, #2048	@ ivtmp.139, ivtmp.132,
 3455              	.LVL263:
 3456              	@ armwave.c:427:     for(w = 0; w < TEST_NWAVES; w++) {
 427:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3457              		.loc 1 427 5 discriminator 2 view .LVU969
 3458 0f60 0A0056E1 		cmp	r6, r10	@ ivtmp.139, _82
 3459              	@ armwave.c:427:     for(w = 0; w < TEST_NWAVES; w++) {
 427:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3460              		.loc 1 427 34 discriminator 2 view .LVU970
 3461 0f64 019089E2 		add	r9, r9, #1	@ w, w,
 3462              	.LVL264:
 427:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3463              		.loc 1 427 34 discriminator 2 view .LVU971
 3464 0f68 028B48E2 		sub	r8, r8, #2048	@ ivtmp.142, ivtmp.142,
 3465              	@ armwave.c:427:     for(w = 0; w < TEST_NWAVES; w++) {
 427:armwave.c     ****         mod_val = 0.5f + (((float)w / TEST_NWAVES) * mod);
 3466              		.loc 1 427 5 discriminator 2 view .LVU972
 3467 0f6c C4FFFF1A 		bne	.L222		@,
 3468              	@ armwave.c:448: }
 446:armwave.c     ****         }
 447:armwave.c     ****     }
 448:armwave.c     **** }
 3469              		.loc 1 448 1 view .LVU973
 3470 0f70 08D08DE2 		add	sp, sp, #8	@,,
 3471              		.cfi_def_cfa_offset 88
 3472              		@ sp needed	@
 3473 0f74 0E8BBDEC 		vldm	sp!, {d8-d14}	@,
 3474              		.cfi_restore 92
 3475              		.cfi_restore 93
 3476              		.cfi_restore 90
 3477              		.cfi_restore 91
 3478              		.cfi_restore 88
 3479              		.cfi_restore 89
 3480              		.cfi_restore 86
 3481              		.cfi_restore 87
 3482              		.cfi_restore 84
 3483              		.cfi_restore 85
 3484              		.cfi_restore 82
 3485              		.cfi_restore 83
 3486              		.cfi_restore 80
 3487              		.cfi_restore 81
 3488              		.cfi_def_cfa_offset 32
 3489              	.LVL265:
 3490              		.loc 1 448 1 view .LVU974
 3491 0f78 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3492              	.LVL266:
 3493              	.L236:
 3494              		.loc 1 448 1 view .LVU975
 3495              		.align	2
 3496              	.L235:
 3497 0f7c 0000803C 		.word	1015021568
 3498 0f80 0000003F 		.word	1056964608
 3499 0f84 C3F5C840 		.word	1086911939
 3500 0f88 0000003A 		.word	973078528
 3501 0f8c 38FFC74A 		.word	1254620984
 3502 0f90 0000803F 		.word	1065353216
 3503 0f94 0000FE42 		.word	1123942400
 3504 0f98 00000043 		.word	1124073472
 3505 0f9c 00007F43 		.word	1132396544
 3506 0fa0 00000000 		.word	test_wave_buffer
 3507              		.cfi_endproc
 3508              	.LFE73:
 3510              		.align	2
 3511              		.global	armwave_test_create_square
 3512              		.syntax unified
 3513              		.arm
 3514              		.fpu vfp
 3516              	armwave_test_create_square:
 3517              	.LVL267:
 3518              	.LFB74:
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Make a test square waveform.
 452:armwave.c     ****  *
 453:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 456:armwave.c     **** {
 3519              		.loc 1 456 1 is_stmt 1 view -0
 3520              		.cfi_startproc
 3521              		@ args = 0, pretend = 0, frame = 8
 3522              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     uint8_t v;
 3523              		.loc 1 457 5 view .LVU977
 458:armwave.c     ****     float noise, xnoise;
 3524              		.loc 1 458 5 view .LVU978
 459:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 3525              		.loc 1 459 5 view .LVU979
 460:armwave.c     ****     int w, x;
 3526              		.loc 1 460 5 view .LVU980
 461:armwave.c     **** 
 462:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
 3527              		.loc 1 462 5 view .LVU981
 3528              	@ armwave.c:456: {
 456:armwave.c     ****     uint8_t v;
 3529              		.loc 1 456 1 is_stmt 0 view .LVU982
 3530 0fa4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 3531              		.cfi_def_cfa_offset 28
 3532              		.cfi_offset 4, -28
 3533              		.cfi_offset 5, -24
 3534              		.cfi_offset 6, -20
 3535              		.cfi_offset 7, -16
 3536              		.cfi_offset 8, -12
 3537              		.cfi_offset 9, -8
 3538              		.cfi_offset 14, -4
 3539 0fa8 0A8B2DED 		vpush.64	{d8, d9, d10, d11, d12}	@
 3540              		.cfi_def_cfa_offset 68
 3541              		.cfi_offset 80, -68
 3542              		.cfi_offset 81, -64
 3543              		.cfi_offset 82, -60
 3544              		.cfi_offset 83, -56
 3545              		.cfi_offset 84, -52
 3546              		.cfi_offset 85, -48
 3547              		.cfi_offset 86, -44
 3548              		.cfi_offset 87, -40
 3549              		.cfi_offset 88, -36
 3550              		.cfi_offset 89, -32
 3551              	@ armwave.c:459:     float level = 0.8f, new_level = 0.8f;
 459:armwave.c     ****     int w, x;
 3552              		.loc 1 459 11 view .LVU983
 3553 0fac 438ADFED 		vldr.32	s17, .L260	@ level,
 3554 0fb0 2C819FE5 		ldr	r8, .L260+36	@ _62,
 3555              	@ armwave.c:456: {
 456:armwave.c     ****     uint8_t v;
 3556              		.loc 1 456 1 view .LVU984
 3557 0fb4 40AAB0EE 		vmov.f32	s20, s0	@ noise_fraction, noise_fraction
 3558 0fb8 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.157, _62,
 3559              	@ armwave.c:477:                 new_level = 0.8f;
 463:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 464:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 465:armwave.c     ****             noise *= noise;
 466:armwave.c     ****             noise *= noise;
 467:armwave.c     ****             noise *= noise;
 468:armwave.c     **** 
 469:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 470:armwave.c     ****                 noise = -noise;
 471:armwave.c     **** 
 472:armwave.c     ****             //noise += 1.0f;
 473:armwave.c     **** 
 474:armwave.c     ****             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 475:armwave.c     ****                 new_level = 0.2f;
 476:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 477:armwave.c     ****                 new_level = 0.8f;
 3560              		.loc 1 477 27 view .LVU985
 3561 0fbc 68BAF0EE 		vmov.f32	s23, s17	@ new_level, level
 3562              	@ armwave.c:474:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 474:armwave.c     ****                 new_level = 0.2f;
 3563              		.loc 1 474 15 view .LVU986
 3564 0fc0 3F9ADFED 		vldr.32	s19, .L260+4	@ tmp144,
 3565              	@ armwave.c:479:                 new_level = 0.2f;
 478:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 479:armwave.c     ****                 new_level = 0.2f;
 3566              		.loc 1 479 27 view .LVU987
 3567 0fc4 3FAADFED 		vldr.32	s21, .L260+8	@ new_level,
 3568              	@ armwave.c:476:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 476:armwave.c     ****                 new_level = 0.8f;
 3569              		.loc 1 476 22 view .LVU988
 3570 0fc8 3FBA9FED 		vldr.32	s22, .L260+12	@ tmp161,
 3571 0fcc 0F6086E2 		add	r6, r6, #15	@ ivtmp.157, ivtmp.157,
 3572              	@ armwave.c:456: {
 456:armwave.c     ****     uint8_t v;
 3573              		.loc 1 456 1 view .LVU989
 3574 0fd0 0CD04DE2 		sub	sp, sp, #12	@,,
 3575              		.cfi_def_cfa_offset 80
 3576 0fd4 008068E2 		rsb	r8, r8, #0	@ ivtmp.160, _62
 3577 0fd8 029886E2 		add	r9, r6, #131072	@ _68,,
 3578              	.LVL268:
 3579              	.L238:
 3580              	@ armwave.c:478:             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 478:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3581              		.loc 1 478 22 view .LVU990
 3582 0fdc 3BCA9FED 		vldr.32	s24, .L260+16	@ tmp163,
 3583              	@ armwave.c:484:             level = ((level * 3) + new_level) * 0.25f;
 480:armwave.c     ****             } else {
 481:armwave.c     ****                 new_level = 0.8f;
 482:armwave.c     ****             }
 483:armwave.c     **** 
 484:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 3584              		.loc 1 484 29 view .LVU991
 3585 0fe0 3B9A9FED 		vldr.32	s18, .L260+20	@ tmp148,
 3586 0fe4 025B46E2 		sub	r5, r6, #2048	@ ivtmp.150, ivtmp.157,
 3587 0fe8 017088E2 		add	r7, r8, #1	@ tmp157, ivtmp.160,
 3588              	.LVL269:
 3589              	.L244:
 3590              	@ armwave.c:464:             noise  = ((rand() & 0xffff) * noise_fraction);
 464:armwave.c     ****             noise *= noise;
 3591              		.loc 1 464 24 view .LVU992
 3592 0fec FEFFFFEB 		bl	rand		@
 3593              	.LVL270:
 3594 0ff0 054087E0 		add	r4, r7, r5	@ _58, tmp157, ivtmp.150
 3595              	.LVL271:
 464:armwave.c     ****             noise *= noise;
 3596              		.loc 1 464 13 is_stmt 1 view .LVU993
 3597              	@ armwave.c:464:             noise  = ((rand() & 0xffff) * noise_fraction);
 464:armwave.c     ****             noise *= noise;
 3598              		.loc 1 464 31 is_stmt 0 view .LVU994
 3599 0ff4 7000FFE6 		uxth	r0, r0	@ tmp140,
 3600              	@ armwave.c:464:             noise  = ((rand() & 0xffff) * noise_fraction);
 464:armwave.c     ****             noise *= noise;
 3601              		.loc 1 464 41 view .LVU995
 3602 0ff8 900A07EE 		vmov	s15, r0	@ int	@ tmp140, tmp140
 3603 0ffc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp142, tmp140
 3604              	@ armwave.c:464:             noise  = ((rand() & 0xffff) * noise_fraction);
 464:armwave.c     ****             noise *= noise;
 3605              		.loc 1 464 20 view .LVU996
 3606 1000 8A7A67EE 		vmul.f32	s15, s15, s20	@ noise, tmp142, noise_fraction
 3607              	.LVL272:
 465:armwave.c     ****             noise *= noise;
 3608              		.loc 1 465 13 is_stmt 1 view .LVU997
 3609              	@ armwave.c:465:             noise *= noise;
 465:armwave.c     ****             noise *= noise;
 3610              		.loc 1 465 19 is_stmt 0 view .LVU998
 3611 1004 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3612              	.LVL273:
 466:armwave.c     ****             noise *= noise;
 3613              		.loc 1 466 13 is_stmt 1 view .LVU999
 3614              	@ armwave.c:466:             noise *= noise;
 466:armwave.c     ****             noise *= noise;
 3615              		.loc 1 466 19 is_stmt 0 view .LVU1000
 3616 1008 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3617              	.LVL274:
 467:armwave.c     **** 
 3618              		.loc 1 467 13 is_stmt 1 view .LVU1001
 3619              	@ armwave.c:467:             noise *= noise;
 467:armwave.c     **** 
 3620              		.loc 1 467 19 is_stmt 0 view .LVU1002
 3621 100c A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 3622              	.LVL275:
 469:armwave.c     ****                 noise = -noise;
 3623              		.loc 1 469 13 is_stmt 1 view .LVU1003
 3624              	@ armwave.c:469:             if((rand() & 0xff) > 0x7f)
 469:armwave.c     ****                 noise = -noise;
 3625              		.loc 1 469 17 is_stmt 0 view .LVU1004
 3626 1010 FEFFFFEB 		bl	rand		@
 3627              	.LVL276:
 3628              	@ armwave.c:474:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 474:armwave.c     ****                 new_level = 0.2f;
 3629              		.loc 1 474 18 view .LVU1005
 3630 1014 904A07EE 		vmov	s15, r4	@ int	@ _58, _58
 3631 1018 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _6, _58
 3632              	@ armwave.c:474:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 474:armwave.c     ****                 new_level = 0.2f;
 3633              		.loc 1 474 15 view .LVU1006
 3634 101c E97AF4EE 		vcmpe.f32	s15, s19	@ _6, tmp144
 3635              	@ armwave.c:469:             if((rand() & 0xff) > 0x7f)
 469:armwave.c     ****                 noise = -noise;
 3636              		.loc 1 469 15 view .LVU1007
 3637 1020 800010E3 		tst	r0, #128	@,
 470:armwave.c     **** 
 3638              		.loc 1 470 17 is_stmt 1 view .LVU1008
 3639              	@ armwave.c:470:                 noise = -noise;
 470:armwave.c     **** 
 3640              		.loc 1 470 23 is_stmt 0 view .LVU1009
 3641 1024 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 3642              	.LVL277:
 474:armwave.c     ****                 new_level = 0.2f;
 3643              		.loc 1 474 13 is_stmt 1 view .LVU1010
 3644              	@ armwave.c:474:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 474:armwave.c     ****                 new_level = 0.2f;
 3645              		.loc 1 474 15 is_stmt 0 view .LVU1011
 3646 1028 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3647              	@ armwave.c:479:                 new_level = 0.2f;
 479:armwave.c     ****             } else {
 3648              		.loc 1 479 27 view .LVU1012
 3649 102c 6A7AF0CE 		vmovgt.f32	s15, s21	@ new_level, new_level
 3650              	@ armwave.c:474:             if(x > (TEST_WAVE_SIZE * 0.75f)) {
 474:armwave.c     ****                 new_level = 0.2f;
 3651              		.loc 1 474 15 view .LVU1013
 3652 1030 070000CA 		bgt	.L240		@,
 476:armwave.c     ****                 new_level = 0.8f;
 3653              		.loc 1 476 20 is_stmt 1 view .LVU1014
 3654              	@ armwave.c:476:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 476:armwave.c     ****                 new_level = 0.8f;
 3655              		.loc 1 476 22 is_stmt 0 view .LVU1015
 3656 1034 CB7AF4EE 		vcmpe.f32	s15, s22	@ _6, tmp161
 3657 1038 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3658              	@ armwave.c:477:                 new_level = 0.8f;
 477:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3659              		.loc 1 477 27 view .LVU1016
 3660 103c 6B7AF0CE 		vmovgt.f32	s15, s23	@ new_level, new_level
 3661              	@ armwave.c:476:             } else if(x > (TEST_WAVE_SIZE * 0.5f)) {
 476:armwave.c     ****                 new_level = 0.8f;
 3662              		.loc 1 476 22 view .LVU1017
 3663 1040 030000CA 		bgt	.L240		@,
 478:armwave.c     ****                 new_level = 0.2f;
 3664              		.loc 1 478 20 is_stmt 1 view .LVU1018
 3665              	@ armwave.c:477:                 new_level = 0.8f;
 477:armwave.c     ****             } else if(x > (TEST_WAVE_SIZE * 0.25f)) {
 3666              		.loc 1 477 27 is_stmt 0 view .LVU1019
 3667 1044 CC7AF4EE 		vcmpe.f32	s15, s24	@ _6, tmp163
 3668 1048 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3669 104c 6B7AF0DE 		vmovle.f32	s15, s23	@, new_level, new_level
 3670 1050 6A7AF0CE 		vmovgt.f32	s15, s21	@, new_level, new_level
 3671              	.L240:
 3672              	.LVL278:
 3673              		.loc 1 484 13 is_stmt 1 view .LVU1020
 3674              	@ armwave.c:484:             level = ((level * 3) + new_level) * 0.25f;
 3675              		.loc 1 484 34 is_stmt 0 view .LVU1021
 3676 1054 897A48EE 		vmla.f32	s15, s17, s18	@ _9, level, tmp148
 3677              	.LVL279:
 3678              	@ armwave.c:484:             level = ((level * 3) + new_level) * 0.25f;
 3679              		.loc 1 484 19 view .LVU1022
 3680 1058 1E8ADFED 		vldr.32	s17, .L260+24	@ tmp149,
 3681              	.LVL280:
 3682              		.loc 1 484 19 view .LVU1023
 3683 105c A88A67EE 		vmul.f32	s17, s15, s17	@ level, _9, tmp149
 3684              	.LVL281:
 485:armwave.c     **** 
 486:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3685              		.loc 1 486 13 is_stmt 1 view .LVU1024
 3686              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3687              		.loc 1 486 27 is_stmt 0 view .LVU1025
 3688 1060 287A78EE 		vadd.f32	s15, s16, s17	@ _10, noise, level
 3689 1064 C07AF5EE 		vcmpe.f32	s15, #0	@ _10
 3690 1068 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3691              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3692              		.loc 1 486 17 view .LVU1026
 3693 106c 0030A0D3 		movle	r3, #0	@ iftmp.21_20,
 3694              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3695              		.loc 1 486 27 view .LVU1027
 3696 1070 080000DA 		ble	.L241		@,
 3697              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3698              		.loc 1 486 17 discriminator 1 view .LVU1028
 3699 1074 187A9FED 		vldr.32	s14, .L260+28	@ tmp151,
 3700 1078 C77AF4EE 		vcmpe.f32	s15, s14	@ _10, tmp151
 3701 107c 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3702              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3703              		.loc 1 486 60 discriminator 1 view .LVU1029
 3704 1080 167A9F4D 		vldrmi.32	s14, .L260+32	@ tmp153,
 3705              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3706              		.loc 1 486 17 discriminator 1 view .LVU1030
 3707 1084 FF30A053 		movpl	r3, #255	@ iftmp.21_20,
 3708              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3709              		.loc 1 486 60 discriminator 1 view .LVU1031
 3710 1088 877A674E 		vmulmi.f32	s15, s15, s14	@ tmp152, _10, tmp153
 3711              	@ armwave.c:486:             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 3712              		.loc 1 486 17 discriminator 1 view .LVU1032
 3713 108c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp155, tmp152
 3714 1090 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp155, %sfp
 3715 1094 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.21_20, %sfp
 3716              	.L241:
 3717              	.LVL282:
 487:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 3718              		.loc 1 487 13 is_stmt 1 discriminator 12 view .LVU1033
 3719              	@ armwave.c:487:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = v;
 3720              		.loc 1 487 56 is_stmt 0 discriminator 12 view .LVU1034
 3721 1098 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.21_20, MEM[base: _43, offset: 0B]
 3722              	.LVL283:
 3723              	@ armwave.c:463:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 463:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3724              		.loc 1 463 9 discriminator 12 view .LVU1035
 3725 109c 060055E1 		cmp	r5, r6	@ ivtmp.150, ivtmp.157
 3726 10a0 D1FFFF1A 		bne	.L244		@,
 463:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 3727              		.loc 1 463 9 discriminator 12 view .LVU1036
 3728 10a4 026B85E2 		add	r6, r5, #2048	@ ivtmp.157, ivtmp.150,
 3729              	.LVL284:
 3730              	@ armwave.c:462:     for(w = 0; w < TEST_NWAVES; w++) {
 462:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
 3731              		.loc 1 462 5 discriminator 2 view .LVU1037
 3732 10a8 090056E1 		cmp	r6, r9	@ ivtmp.157, _68
 3733 10ac 028B48E2 		sub	r8, r8, #2048	@ ivtmp.160, ivtmp.160,
 3734 10b0 C9FFFF1A 		bne	.L238		@,
 3735              	@ armwave.c:490: }
 488:armwave.c     ****         }
 489:armwave.c     ****     }
 490:armwave.c     **** }
 3736              		.loc 1 490 1 view .LVU1038
 3737 10b4 0CD08DE2 		add	sp, sp, #12	@,,
 3738              		.cfi_def_cfa_offset 68
 3739              		@ sp needed	@
 3740 10b8 0A8BBDEC 		vldm	sp!, {d8-d12}	@,
 3741              		.cfi_restore 88
 3742              		.cfi_restore 89
 3743              		.cfi_restore 86
 3744              		.cfi_restore 87
 3745              		.cfi_restore 84
 3746              		.cfi_restore 85
 3747              		.cfi_restore 82
 3748              		.cfi_restore 83
 3749              		.cfi_restore 80
 3750              		.cfi_restore 81
 3751              		.cfi_def_cfa_offset 28
 3752              	.LVL285:
 3753              		.loc 1 490 1 view .LVU1039
 3754 10bc F083BDE8 		pop	{r4, r5, r6, r7, r8, r9, pc}	@
 3755              	.L261:
 3756              		.loc 1 490 1 view .LVU1040
 3757              		.align	2
 3758              	.L260:
 3759 10c0 CDCC4C3F 		.word	1061997773
 3760 10c4 0000C044 		.word	1153433600
 3761 10c8 CDCC4C3E 		.word	1045220557
 3762 10cc 00008044 		.word	1149239296
 3763 10d0 00000044 		.word	1140850688
 3764 10d4 00004040 		.word	1077936128
 3765 10d8 0000803E 		.word	1048576000
 3766 10dc 0000803F 		.word	1065353216
 3767 10e0 00007F43 		.word	1132396544
 3768 10e4 00000000 		.word	test_wave_buffer
 3769              		.cfi_endproc
 3770              	.LFE74:
 3772              		.align	2
 3773              		.global	armwave_cleanup
 3774              		.syntax unified
 3775              		.arm
 3776              		.fpu vfp
 3778              	armwave_cleanup:
 3779              	.LFB75:
 491:armwave.c     **** 
 492:armwave.c     **** /*
 493:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 494:armwave.c     ****  */
 495:armwave.c     **** void armwave_cleanup()
 496:armwave.c     **** {
 3780              		.loc 1 496 1 is_stmt 1 view -0
 3781              		.cfi_startproc
 3782              		@ args = 0, pretend = 0, frame = 0
 3783              		@ frame_needed = 0, uses_anonymous_args = 0
 497:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3784              		.loc 1 497 5 view .LVU1042
 3785              	@ armwave.c:496: {
 496:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3786              		.loc 1 496 1 is_stmt 0 view .LVU1043
 3787 10e8 10402DE9 		push	{r4, lr}	@
 3788              		.cfi_def_cfa_offset 8
 3789              		.cfi_offset 4, -8
 3790              		.cfi_offset 14, -4
 3791              	@ armwave.c:497:     free(g_armwave_state.out_pixbuf);
 3792              		.loc 1 497 25 view .LVU1044
 3793 10ec 28409FE5 		ldr	r4, .L264	@ tmp113,
 3794              	@ armwave.c:497:     free(g_armwave_state.out_pixbuf);
 3795              		.loc 1 497 5 view .LVU1045
 3796 10f0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.out_pixbuf
 3797 10f4 FEFFFFEB 		bl	free		@
 3798              	.LVL286:
 498:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3799              		.loc 1 498 5 is_stmt 1 view .LVU1046
 3800 10f8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3801 10fc FEFFFFEB 		bl	free		@
 3802              	.LVL287:
 499:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3803              		.loc 1 499 5 view .LVU1047
 3804 1100 6C0094E5 		ldr	r0, [r4, #108]	@, g_armwave_state.xcoord_to_xpixel
 3805 1104 FEFFFFEB 		bl	free		@
 3806              	.LVL288:
 500:armwave.c     **** 
 501:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3807              		.loc 1 501 5 view .LVU1048
 3808              	@ armwave.c:501:     g_armwave_state.out_pixbuf = NULL;
 3809              		.loc 1 501 32 is_stmt 0 view .LVU1049
 3810 1108 0030A0E3 		mov	r3, #0	@ tmp120,
 3811 110c 503084E5 		str	r3, [r4, #80]	@ tmp120, g_armwave_state.out_pixbuf
 502:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3812              		.loc 1 502 5 is_stmt 1 view .LVU1050
 3813              	@ armwave.c:502:     g_armwave_state.ch1_buffer = NULL;
 3814              		.loc 1 502 32 is_stmt 0 view .LVU1051
 3815 1110 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 503:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3816              		.loc 1 503 5 is_stmt 1 view .LVU1052
 3817              	@ armwave.c:503:     g_armwave_state.xcoord_to_xpixel = NULL;
 3818              		.loc 1 503 38 is_stmt 0 view .LVU1053
 3819 1114 6C3084E5 		str	r3, [r4, #108]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3820              	@ armwave.c:504: }
 504:armwave.c     **** }
 3821              		.loc 1 504 1 view .LVU1054
 3822 1118 1080BDE8 		pop	{r4, pc}	@
 3823              	.L265:
 3824              		.align	2
 3825              	.L264:
 3826 111c 00000000 		.word	g_armwave_state
 3827              		.cfi_endproc
 3828              	.LFE75:
 3830              		.comm	gamma_table,256,4
 3831              		.comm	test_wave_buffer,131072,4
 3832              		.comm	g_armwave_state,112,4
 3833              		.section	.rodata
 3834              		.align	2
 3835              		.set	.LANCHOR0,. + 0
 3838              	__PRETTY_FUNCTION__.17009:
 3839 0000 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3839      6176655F 
 3839      66696C6C 
 3839      5F706978 
 3839      6275665F 
 3842              	__PRETTY_FUNCTION__.17040:
 3843 0018 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3843      6176655F 
 3843      66696C6C 
 3843      5F706978 
 3843      6275665F 
 3844 0033 00       		.space	1
 3847              	__PRETTY_FUNCTION__.17062:
 3848 0034 61726D77 		.ascii	"armwave_setup_render\000"
 3848      6176655F 
 3848      73657475 
 3848      705F7265 
 3848      6E646572 
 3849 0049 000000   		.space	3
 3852              	__PRETTY_FUNCTION__.17069:
 3853 004c 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3853      6176655F 
 3853      7365745F 
 3853      77617665 
 3853      5F706F69 
 3854 0065 000000   		.space	3
 3857              	__PRETTY_FUNCTION__.17115:
 3858 0068 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer\000"
 3858      6176655F 
 3858      66696C6C 
 3858      5F706978 
 3858      6275665F 
 3859              		.section	.rodata.str1.4,"aMS",%progbits,1
 3860              		.align	2
 3861              	.LC0:
 3862 0000 76302E30 		.ascii	"v0.0.1\000"
 3862      2E3100
 3863 0007 00       		.space	1
 3864              	.LC1:
 3865 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3865      61766520 
 3865      76657273 
 3865      696F6E3A 
 3865      2025730A 
 3866 001d 000000   		.space	3
 3867              	.LC2:
 3868 0020 61726D77 		.ascii	"armwave.c\000"
 3868      6176652E 
 3868      6300
 3869 002a 0000     		.space	2
 3870              	.LC3:
 3871 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3871      62756666 
 3871      65722021 
 3871      3D204E55 
 3871      4C4C00
 3872 003f 00       		.space	1
 3873              	.LC4:
 3874 0040 73746172 		.ascii	"start_point < end_point\000"
 3874      745F706F 
 3874      696E7420 
 3874      3C20656E 
 3874      645F706F 
 3875              	.LC5:
 3876 0058 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3876      65745F68 
 3876      65696768 
 3876      74203D3D 
 3876      20323536 
 3877 008b 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3877      68656967 
 3877      6874203D 
 3877      3D203130 
 3877      3234207C 
 3878 00b7 00       		.space	1
 3879              	.LC6:
 3880 00b8 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3880      7566665F 
 3880      73697A65 
 3880      3D25640A 
 3880      00
 3881 00c9 000000   		.space	3
 3882              	.LC7:
 3883 00cc 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3883      6D776176 
 3883      655F7374 
 3883      6174652E 
 3883      6368315F 
 3884 00ef 00       		.space	1
 3885              	.LC8:
 3886 00f0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3886      6D776176 
 3886      655F7374 
 3886      6174652E 
 3886      78636F6F 
 3887 0119 000000   		.space	3
 3888              	.LC9:
 3889 011c 77617665 		.ascii	"wave_buffer != NULL\000"
 3889      5F627566 
 3889      66657220 
 3889      213D204E 
 3889      554C4C00 
 3890              	.LC10:
 3891 0130 776200   		.ascii	"wb\000"
 3892 0133 00       		.space	1
 3893              	.LC11:
 3894 0134 50330A00 		.ascii	"P3\012\000"
 3895              	.LC12:
 3896 0138 25642025 		.ascii	"%d %d\012\000"
 3896      640A00
 3897 013f 00       		.space	1
 3898              	.LC13:
 3899 0140 3235350A 		.ascii	"255\012\000"
 3899      00
 3900 0145 000000   		.space	3
 3901              	.LC14:
 3902 0148 25336420 		.ascii	"%3d %3d %3d\012\000"
 3902      25336420 
 3902      2533640A 
 3902      00
 3903 0155 000000   		.space	3
 3904              	.LC15:
 3905 0158 50794F62 		.ascii	"PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE |"
 3905      6A656374 
 3905      5F476574 
 3905      42756666 
 3905      65722862 
 3906 018b 20507942 		.ascii	" PyBUF_WRITABLE) != 0\000"
 3906      55465F57 
 3906      52495441 
 3906      424C4529 
 3906      20213D20 
 3907              		.text
 3908              	.Letext0:
 3909              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3910              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3911              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3912              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3913              		.file 6 "/usr/include/stdio.h"
 3914              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3915              		.file 8 "/usr/include/errno.h"
 3916              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3917              		.file 10 "/usr/include/unistd.h"
 3918              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3919              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3920              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3921              		.file 14 "/usr/include/math.h"
 3922              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3923              		.file 16 "/usr/include/time.h"
 3924              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3925              		.file 18 "/usr/local/include/python3.8/object.h"
 3926              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3927              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3928              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3929              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3930              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3931              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3932              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3933              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3934              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3935              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3936              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3937              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3938              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3939              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3940              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3941              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3942              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3943              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3944              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3945              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3946              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3947              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3948              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3949              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3950              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3951              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3952              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3953              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3954              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3955              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3956              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3957              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3958              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3959              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3960              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3961              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3962              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3963              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3964              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3965              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3966              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3967              		.file 60 "/usr/local/include/python3.8/context.h"
 3968              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3969              		.file 62 "/usr/local/include/python3.8/code.h"
 3970              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3971              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3972              		.file 65 "/usr/local/include/python3.8/import.h"
 3973              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3974              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3975              		.file 68 "armwave.h"
 3976              		.file 69 "/usr/include/stdlib.h"
 3977              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 3978              		.file 71 "/usr/include/assert.h"
 3979              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3980              		.file 73 "<built-in>"
