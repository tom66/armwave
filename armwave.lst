   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE            2048
  25:armwave.c     **** #define TEST_NWAVES                64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                  ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                 ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)            MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)        __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)        __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render
  97:armwave.c     ****  */
  98:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  99:armwave.c     **** {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 101:armwave.c     ****     uint32_t value, word;
 102:armwave.c     ****     uint8_t *wave_base;
 103:armwave.c     ****     uint8_t *write_buffer_base;
 104:armwave.c     ****     uint8_t *write_buffer;
 105:armwave.c     ****     
 106:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 107:armwave.c     **** 
 108:armwave.c     ****     // roll through each waveform
 109:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 114:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 115:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 116:armwave.c     **** #endif
 117:armwave.c     **** 
 118:armwave.c     ****         // roll through y and render the slice into the out buffer
 119:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 120:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 121:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 122:armwave.c     **** 
 123:armwave.c     **** #if 0
 124:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 125:armwave.c     **** 
 126:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 127:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 128:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 129:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 130:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 131:armwave.c     ****                    wave_base + yy);
 132:armwave.c     **** #endif
 133:armwave.c     **** 
 134:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 135:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 136:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 137:armwave.c     ****             //*(write_buffer + value) = 0xff;
 138:armwave.c     **** 
 139:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 140:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 141:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 142:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 143:armwave.c     ****                 word >>= 8;
 144:armwave.c     ****             }
 145:armwave.c     **** 
 146:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 147:armwave.c     ****         }
 148:armwave.c     ****     }
 149:armwave.c     **** }
 150:armwave.c     **** 
 151:armwave.c     **** void armwave_init()
 152:armwave.c     **** {
 153:armwave.c     ****     g_armwave_state.flags = 0;
 154:armwave.c     **** }
 155:armwave.c     **** 
 156:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 156 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 157:armwave.c     **** {
 158:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 158 5 view .LVU1
 159:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 159 5 view .LVU2
 160:armwave.c     **** 
 161:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 161 5 view .LVU3
 162:armwave.c     **** 
 163:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 164:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 164 5 view .LVU4
  93              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
  94              		.loc 1 156 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 165:armwave.c     **** 
 166:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 167:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 167 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp140, target_height,
 104              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 105              		.loc 1 164 33 view .LVU7
 106 0008 90419FE5 		ldr	r4, .L21+8	@ tmp207,
 107 000c 90319FE5 		ldr	r3, .L21+12	@ tmp139,
 108              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 167 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp209, tmp140,
 111              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
 112              		.loc 1 156 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:156: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 156:armwave.c     **** {
 118              		.loc 1 156 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 121              		.loc 1 164 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp139, g_armwave_state.wave_buffer
 123              		.loc 1 167 5 is_stmt 1 view .LVU12
 124 0020 4200000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp142, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp210, tmp142,
 127 002c 4A00001A 		bne	.L17		@,
 168:armwave.c     **** 
 169:armwave.c     ****     if(target_height == 256) {
 170:armwave.c     ****         g_armwave_state.row_shift = 8;
 171:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 172:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 172 12 view .LVU13
 173:armwave.c     ****         g_armwave_state.row_shift = 9;
 174:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 175:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 175 12 view .LVU14
 130              	@ armwave.c:175:     } else if(target_height == 1024) {
 131              		.loc 1 175 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4400000A 		beq	.L18		@,
 176:armwave.c     ****         g_armwave_state.row_shift = 10;
 177:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 178:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 178 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:178:     } else if(target_height == 2048) {
 136              		.loc 1 178 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 179:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 179 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 140              		.loc 1 179 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp162,
 142 0040 60319F05 		ldreq	r3, .L21+16	@ tmp160,
 143 0044 FC23C401 		strdeq	r2, [r4, #60]	@, tmp207,
 180:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 180 9 is_stmt 1 view .LVU20
 145              	.L5:
 181:armwave.c     ****     } 
 182:armwave.c     **** 
 183:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 184:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 184 5 view .LVU21
 147              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 148              		.loc 1 185 44 is_stmt 0 view .LVU22
 149 0048 2134A0E1 		lsr	r3, r1, #8	@ tmp165, target_height,
 150              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 187:armwave.c     ****     g_armwave_state.waves = waves;
 188:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 151              		.loc 1 188 42 view .LVU23
 152 004c 950106E0 		mul	r6, r5, r1	@ _10, target_width, target_height
 153              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 189:armwave.c     ****     g_armwave_state.target_width = target_width;
 190:armwave.c     ****     g_armwave_state.target_height = target_height;
 191:armwave.c     **** 
 192:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 193:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 194:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 195:armwave.c     ****     g_armwave_state.slice_height = 64;  
 196:armwave.c     **** 
 197:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 154              		.loc 1 197 23 view .LVU24
 155 0050 040094E5 		ldr	r0, [r4, #4]	@ _11, g_armwave_state.ch1_buffer
 156              	.LVL1:
 157              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 158              		.loc 1 186 33 view .LVU25
 159 0054 022BA0E3 		mov	r2, #2048	@ tmp167,
 160              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 161              		.loc 1 185 28 view .LVU26
 162 0058 1C3084E5 		str	r3, [r4, #28]	@ tmp165, g_armwave_state.vscale
 163              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 164              		.loc 1 187 27 view .LVU27
 165 005c 4030A0E3 		mov	r3, #64	@ tmp169,
 166              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 167              		.loc 1 197 7 view .LVU28
 168 0060 000050E3 		cmp	r0, #0	@ _11,
 169              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 170              		.loc 1 184 29 view .LVU29
 171 0064 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 172              		.loc 1 185 5 is_stmt 1 view .LVU30
 186:armwave.c     ****     g_armwave_state.waves = waves;
 173              		.loc 1 186 5 view .LVU31
 174              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 175              		.loc 1 189 34 is_stmt 0 view .LVU32
 176 0068 345084E5 		str	r5, [r4, #52]	@ target_width, g_armwave_state.target_width
 177              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 178              		.loc 1 190 35 view .LVU33
 179 006c 381084E5 		str	r1, [r4, #56]	@ target_height, g_armwave_state.target_height
 180              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 181              		.loc 1 188 26 view .LVU34
 182 0070 306084E5 		str	r6, [r4, #48]	@ _10, g_armwave_state.size
 183              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 184              		.loc 1 187 27 view .LVU35
 185 0074 F022C4E1 		strd	r2, [r4, #32]	@, tmp207,
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 186              		.loc 1 188 5 is_stmt 1 view .LVU36
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 187              		.loc 1 189 5 view .LVU37
 190:armwave.c     **** 
 188              		.loc 1 190 5 view .LVU38
 195:armwave.c     **** 
 189              		.loc 1 195 5 view .LVU39
 190              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 191              		.loc 1 195 34 is_stmt 0 view .LVU40
 192 0078 283084E5 		str	r3, [r4, #40]	@ tmp169, g_armwave_state.slice_height
 193              		.loc 1 197 5 is_stmt 1 view .LVU41
 194              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 195              		.loc 1 197 7 is_stmt 0 view .LVU42
 196 007c 0100000A 		beq	.L7		@,
 198:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 197              		.loc 1 198 9 is_stmt 1 view .LVU43
 198 0080 FEFFFFEB 		bl	free		@
 199              	.LVL2:
 200              		.loc 1 198 9 is_stmt 0 view .LVU44
 201 0084 306094E5 		ldr	r6, [r4, #48]	@ _10, g_armwave_state.size
 202              	.L7:
 199:armwave.c     **** 
 200:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 203              		.loc 1 200 5 is_stmt 1 view .LVU45
 204              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 205              		.loc 1 200 34 is_stmt 0 view .LVU46
 206 0088 0110A0E3 		mov	r1, #1	@,
 207 008c 0600A0E1 		mov	r0, r6	@, _10
 208 0090 FEFFFFEB 		bl	calloc		@
 209              	.LVL3:
 210              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 211              		.loc 1 201 33 view .LVU47
 212 0094 10219FE5 		ldr	r2, .L21+20	@ tmp180,
 213              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 202:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 203:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 214              		.loc 1 203 33 view .LVU48
 215 0098 FA30A0E3 		mov	r3, #250	@ tmp183,
 216              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 217              		.loc 1 201 33 view .LVU49
 218 009c 482084E5 		str	r2, [r4, #72]	@ tmp180, MEM[(short int *)&g_armwave_state + 72B]
 219              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 220              		.loc 1 203 33 view .LVU50
 221 00a0 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp183, g_armwave_state.ch1_color.b
 222              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 204:armwave.c     **** 
 205:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 223              		.loc 1 205 5 view .LVU51
 224 00a4 000050E3 		cmp	r0, #0	@ tmp177,
 225              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 226              		.loc 1 200 32 view .LVU52
 227 00a8 040084E5 		str	r0, [r4, #4]	@ tmp177, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 228              		.loc 1 201 5 is_stmt 1 view .LVU53
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 229              		.loc 1 202 5 view .LVU54
 203:armwave.c     **** 
 230              		.loc 1 203 5 view .LVU55
 231              		.loc 1 205 5 view .LVU56
 232 00ac 2F00000A 		beq	.L19		@,
 206:armwave.c     **** 
 207:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 208:armwave.c     ****     length = end_point - start_point;
 233              		.loc 1 208 5 view .LVU57
 234              	.LVL4:
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 235              		.loc 1 209 5 view .LVU58
 236              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 237              		.loc 1 209 34 is_stmt 0 view .LVU59
 238 00b0 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 239              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 240              		.loc 1 209 22 view .LVU60
 241 00b4 376ADFED 		vldr.32	s13, .L21	@ tmp188,
 242              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 211:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 243              		.loc 1 211 40 view .LVU61
 244 00b8 010AA0E3 		mov	r0, #4096	@,
 245              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 246              		.loc 1 209 34 view .LVU62
 247 00bc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp187, target_width
 248              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 249              		.loc 1 210 60 view .LVU63
 250 00c0 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp212, g_armwave_state.slice_height
 251 00c4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp191, tmp212
 252              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 253              		.loc 1 209 22 view .LVU64
 254 00c8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp188, tmp187
 255              	.LVL5:
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 256              		.loc 1 210 5 is_stmt 1 view .LVU65
 257              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 258              		.loc 1 210 60 is_stmt 0 view .LVU66
 259 00cc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp193, tmp191, points_per_pixel
 260              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 261              		.loc 1 210 41 view .LVU67
 262 00d0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp194, tmp193
 263 00d4 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp194, g_armwave_state.slice_record_height
 264              		.loc 1 211 5 is_stmt 1 view .LVU68
 265              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 266              		.loc 1 211 40 is_stmt 0 view .LVU69
 267 00d8 FEFFFFEB 		bl	malloc		@
 268              	.LVL6:
 269              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 212:armwave.c     **** 
 213:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 270              		.loc 1 213 5 view .LVU70
 271 00dc 000050E3 		cmp	r0, #0	@ tmp195,
 272              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 273              		.loc 1 211 38 view .LVU71
 274 00e0 600084E5 		str	r0, [r4, #96]	@ tmp195, g_armwave_state.xcoord_to_xpixel
 275              		.loc 1 213 5 is_stmt 1 view .LVU72
 276 00e4 2600000A 		beq	.L20		@,
 277              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 214:armwave.c     **** 
 215:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 216:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 278              		.loc 1 216 54 is_stmt 0 view .LVU73
 279 00e8 2B7ADFED 		vldr.32	s15, .L21+4	@ tmp200,
 280 00ec 020040E2 		sub	r0, r0, #2	@ ivtmp.29, tmp195,
 281              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 282              		.loc 1 215 12 view .LVU74
 283 00f0 0030A0E3 		mov	r3, #0	@ xx,
 284              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 285              		.loc 1 216 54 view .LVU75
 286 00f4 887A87EE 		vdiv.f32	s14, s15, s16	@ _24, tmp200, points_per_pixel
 287              	.L10:
 288              	.LVL7:
 289              		.loc 1 216 9 is_stmt 1 view .LVU76
 290              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 291              		.loc 1 216 74 is_stmt 0 view .LVU77
 292 00f8 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 293              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 294              		.loc 1 215 32 view .LVU78
 295 00fc 013083E2 		add	r3, r3, #1	@ xx, xx,
 296              	.LVL8:
 297              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 298              		.loc 1 215 5 view .LVU79
 299 0100 020B53E3 		cmp	r3, #2048	@ xx,
 300              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301              		.loc 1 216 74 view .LVU80
 302 0104 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, xx
 303 0108 877A67EE 		vmul.f32	s15, s15, s14	@ tmp202, tmp201, _24
 304              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305              		.loc 1 216 46 view .LVU81
 306 010c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 307 0110 902A17EE 		vmov	r2, s15	@ int	@ tmp203, tmp203
 308 0114 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp203, MEM[base: _4, offset: 0B]
 309              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 310              		.loc 1 215 5 view .LVU82
 311 0118 F6FFFF1A 		bne	.L10		@,
 217:armwave.c     **** 
 218:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 219:armwave.c     ****     }
 220:armwave.c     **** 
 221:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 312              		.loc 1 221 5 is_stmt 1 view .LVU83
 313              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 314              		.loc 1 221 34 is_stmt 0 view .LVU84
 315 011c 0601A0E1 		lsl	r0, r6, #2	@, _10,
 316 0120 FEFFFFEB 		bl	malloc		@
 317              	.LVL9:
 318              	@ armwave.c:222: }
 222:armwave.c     **** }
 319              		.loc 1 222 1 view .LVU85
 320 0124 028BBDEC 		vldm	sp!, {d8}	@
 321              		.cfi_remember_state
 322              		.cfi_restore 80
 323              		.cfi_restore 81
 324              		.cfi_def_cfa_offset 16
 325              	.LVL10:
 326              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 327              		.loc 1 221 32 view .LVU86
 328 0128 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 329              	@ armwave.c:222: }
 330              		.loc 1 222 1 view .LVU87
 331 012c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 332              	.LVL11:
 333              	.L2:
 334              		.cfi_restore_state
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 335              		.loc 1 169 5 is_stmt 1 view .LVU88
 336              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 337              		.loc 1 169 7 is_stmt 0 view .LVU89
 338 0130 010C51E3 		cmp	r1, #256	@ target_height,
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 339              		.loc 1 170 9 is_stmt 1 view .LVU90
 340              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 341              		.loc 1 171 34 is_stmt 0 view .LVU91
 342 0134 0820A003 		moveq	r2, #8	@ tmp148,
 343              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 344              		.loc 1 173 35 view .LVU92
 345 0138 70309F15 		ldrne	r3, .L21+24	@ tmp152,
 346              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 347              		.loc 1 171 34 view .LVU93
 348 013c FF30A003 		moveq	r3, #255	@ tmp150,
 172:armwave.c     ****         g_armwave_state.row_shift = 9;
 349              		.loc 1 172 12 is_stmt 1 view .LVU94
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 350              		.loc 1 173 9 view .LVU95
 351              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 352              		.loc 1 173 35 is_stmt 0 view .LVU96
 353 0140 0920A013 		movne	r2, #9	@ tmp154,
 354 0144 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 174:armwave.c     ****     } else if(target_height == 1024) {
 355              		.loc 1 174 9 is_stmt 1 view .LVU97
 356 0148 BEFFFFEA 		b	.L5		@
 357              	.L18:
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 358              		.loc 1 176 9 view .LVU98
 359              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 360              		.loc 1 176 35 is_stmt 0 view .LVU99
 361 014c 60309FE5 		ldr	r3, .L21+28	@ tmp156,
 362 0150 0A20A0E3 		mov	r2, #10	@ tmp158,
 363 0154 FC23C4E1 		strd	r2, [r4, #60]	@, tmp207,
 177:armwave.c     ****     } else if(target_height == 2048) {
 364              		.loc 1 177 9 is_stmt 1 view .LVU100
 365 0158 BAFFFFEA 		b	.L5		@
 366              	.L17:
 167:armwave.c     **** 
 367              		.loc 1 167 5 view .LVU101
 368 015c 54309FE5 		ldr	r3, .L21+32	@,
 369 0160 A720A0E3 		mov	r2, #167	@,
 370 0164 50109FE5 		ldr	r1, .L21+36	@,
 371              	.LVL12:
 167:armwave.c     **** 
 372              		.loc 1 167 5 is_stmt 0 view .LVU102
 373 0168 50009FE5 		ldr	r0, .L21+40	@,
 374              	.LVL13:
 167:armwave.c     **** 
 375              		.loc 1 167 5 view .LVU103
 376 016c FEFFFFEB 		bl	__assert_fail		@
 377              	.LVL14:
 378              	.L19:
 205:armwave.c     **** 
 379              		.loc 1 205 5 is_stmt 1 view .LVU104
 380 0170 40309FE5 		ldr	r3, .L21+32	@,
 381 0174 CD20A0E3 		mov	r2, #205	@,
 382 0178 3C109FE5 		ldr	r1, .L21+36	@,
 383 017c 40009FE5 		ldr	r0, .L21+44	@,
 384 0180 FEFFFFEB 		bl	__assert_fail		@
 385              	.LVL15:
 386              	.L20:
 213:armwave.c     **** 
 387              		.loc 1 213 5 view .LVU105
 388 0184 2C309FE5 		ldr	r3, .L21+32	@,
 389 0188 D520A0E3 		mov	r2, #213	@,
 390 018c 28109FE5 		ldr	r1, .L21+36	@,
 391 0190 30009FE5 		ldr	r0, .L21+48	@,
 392 0194 FEFFFFEB 		bl	__assert_fail		@
 393              	.LVL16:
 394              	.L22:
 395              		.align	2
 396              	.L21:
 397 0198 00000045 		.word	1157627904
 398 019c 0000803F 		.word	1065353216
 399 01a0 00000000 		.word	g_armwave_state
 400 01a4 00000000 		.word	test_wave_buffer
 401 01a8 FF070000 		.word	2047
 402 01ac F609F406 		.word	116656630
 403 01b0 FF010000 		.word	511
 404 01b4 FF030000 		.word	1023
 405 01b8 00000000 		.word	.LANCHOR0
 406 01bc 00000000 		.word	.LC0
 407 01c0 0C000000 		.word	.LC1
 408 01c4 6C000000 		.word	.LC2
 409 01c8 90000000 		.word	.LC3
 410              		.cfi_endproc
 411              	.LFE72:
 413              		.align	2
 414              		.global	test_create_waveform
 415              		.syntax unified
 416              		.arm
 417              		.fpu vfp
 419              	test_create_waveform:
 420              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 421              		.loc 1 51 1 view -0
 422              		.cfi_startproc
 423              		@ args = 0, pretend = 0, frame = 8
 424              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 425              		.loc 1 52 5 view .LVU107
  53:armwave.c     **** 
 426              		.loc 1 53 5 view .LVU108
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 427              		.loc 1 55 5 view .LVU109
 428              	.LVL17:
 429              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 430              		.loc 1 51 1 is_stmt 0 view .LVU110
 431 01cc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 432              		.cfi_def_cfa_offset 36
 433              		.cfi_offset 4, -36
 434              		.cfi_offset 5, -32
 435              		.cfi_offset 6, -28
 436              		.cfi_offset 7, -24
 437              		.cfi_offset 8, -20
 438              		.cfi_offset 9, -16
 439              		.cfi_offset 10, -12
 440              		.cfi_offset 11, -8
 441              		.cfi_offset 14, -4
 442 01d0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 443              		.cfi_def_cfa_offset 84
 444              		.cfi_offset 80, -84
 445              		.cfi_offset 81, -80
 446              		.cfi_offset 82, -76
 447              		.cfi_offset 83, -72
 448              		.cfi_offset 84, -68
 449              		.cfi_offset 85, -64
 450              		.cfi_offset 86, -60
 451              		.cfi_offset 87, -56
 452              		.cfi_offset 88, -52
 453              		.cfi_offset 89, -48
 454              		.cfi_offset 90, -44
 455              		.cfi_offset 91, -40
 456 01d4 5C819FE5 		ldr	r8, .L42+40	@ _75,
 457              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 458              		.loc 1 56 33 view .LVU111
 459 01d8 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 460 01dc 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.45, _75,
 461              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 462              		.loc 1 56 13 view .LVU112
 463 01e0 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 464              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 465              		.loc 1 60 20 view .LVU113
 466 01e4 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 467              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 468              		.loc 1 71 29 view .LVU114
 469 01e8 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 470              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 471              		.loc 1 71 33 view .LVU115
 472 01ec 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 473              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 474              		.loc 1 69 20 view .LVU116
 475 01f0 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 476 01f4 02B886E2 		add	fp, r6, #131072	@ _81,,
 477 01f8 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 478              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 479              		.loc 1 51 1 view .LVU117
 480 01fc 0CD04DE2 		sub	sp, sp, #12	@,,
 481              		.cfi_def_cfa_offset 96
 482 0200 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 483 0204 0F6086E2 		add	r6, r6, #15	@ ivtmp.45, ivtmp.45,
 484 0208 008068E2 		rsb	r8, r8, #0	@ ivtmp.48, _75
 485              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 486              		.loc 1 55 11 view .LVU118
 487 020c 0090A0E3 		mov	r9, #0	@ w,
 488              	.LVL18:
 489              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 490              		.loc 1 56 9 is_stmt 1 view .LVU119
 491              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 492              		.loc 1 56 24 is_stmt 0 view .LVU120
 493 0210 909A07EE 		vmov	s15, r9	@ int	@ w, w
 494              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 495              		.loc 1 56 48 view .LVU121
 496 0214 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 497              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 498              		.loc 1 56 13 view .LVU122
 499 0218 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 500              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 501              		.loc 1 68 19 view .LVU123
 502 021c 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 503              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 504              		.loc 1 56 24 view .LVU124
 505 0220 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 506              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 507              		.loc 1 73 58 view .LVU125
 508 0224 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 509 0228 025B46E2 		sub	r5, r6, #2048	@ ivtmp.38, ivtmp.45,
 510 022c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.48,
 511              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 512              		.loc 1 56 33 view .LVU126
 513 0230 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 514              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 515              		.loc 1 56 13 view .LVU127
 516 0234 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 517              	.LVL19:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 518              		.loc 1 59 9 is_stmt 1 view .LVU128
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 519              		.loc 1 59 9 is_stmt 0 view .LVU129
 520 0238 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 521              	.LVL20:
 522              	.L28:
 523              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 524              		.loc 1 60 24 view .LVU130
 525 023c FEFFFFEB 		bl	rand		@
 526              	.LVL21:
 527 0240 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.38
 528              	.LVL22:
  60:armwave.c     ****             noise *= noise;
 529              		.loc 1 60 13 is_stmt 1 view .LVU131
 530              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 531              		.loc 1 60 31 is_stmt 0 view .LVU132
 532 0244 7000FFE6 		uxth	r0, r0	@ tmp163,
 533              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 534              		.loc 1 60 41 view .LVU133
 535 0248 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 536 024c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 537              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 538              		.loc 1 60 20 view .LVU134
 539 0250 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 540              	.LVL23:
  61:armwave.c     ****             noise *= noise;
 541              		.loc 1 61 13 is_stmt 1 view .LVU135
 542              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 543              		.loc 1 61 19 is_stmt 0 view .LVU136
 544 0254 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 545              	.LVL24:
  62:armwave.c     ****             noise *= noise;
 546              		.loc 1 62 13 is_stmt 1 view .LVU137
 547              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 548              		.loc 1 62 19 is_stmt 0 view .LVU138
 549 0258 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 550              	.LVL25:
  63:armwave.c     **** 
 551              		.loc 1 63 13 is_stmt 1 view .LVU139
 552              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 553              		.loc 1 63 19 is_stmt 0 view .LVU140
 554 025c A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 555              	.LVL26:
  65:armwave.c     ****                 noise = -noise;
 556              		.loc 1 65 13 is_stmt 1 view .LVU141
 557              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 558              		.loc 1 65 17 is_stmt 0 view .LVU142
 559 0260 FEFFFFEB 		bl	rand		@
 560              	.LVL27:
  66:armwave.c     **** 
 561              		.loc 1 66 17 is_stmt 1 view .LVU143
 562              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 563              		.loc 1 65 15 is_stmt 0 view .LVU144
 564 0264 020910E3 		tst	r0, #32768	@,
 565              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 566              		.loc 1 66 23 view .LVU145
 567 0268 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 568              	.LVL28:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 569              		.loc 1 68 13 is_stmt 1 view .LVU146
  69:armwave.c     **** 
 570              		.loc 1 69 13 view .LVU147
 571              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 572              		.loc 1 69 23 is_stmt 0 view .LVU148
 573 026c FEFFFFEB 		bl	rand		@
 574              	.LVL29:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 575              		.loc 1 71 13 is_stmt 1 view .LVU149
 576              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 577              		.loc 1 71 29 is_stmt 0 view .LVU150
 578 0270 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 579 0274 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 580 0278 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 581              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 582              		.loc 1 69 30 view .LVU151
 583 027c 7000FFE6 		uxth	r0, r0	@ tmp173,
 584              	.LVL30:
 585              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 586              		.loc 1 69 40 view .LVU152
 587 0280 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 588 0284 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 589              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 590              		.loc 1 69 20 view .LVU153
 591 0288 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 592              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 593              		.loc 1 71 60 view .LVU154
 594 028c 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 595              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 596              		.loc 1 71 18 view .LVU155
 597 0290 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 598 0294 FEFFFFEB 		bl	sin		@
 599              	.LVL31:
  73:armwave.c     ****         }
 600              		.loc 1 73 13 is_stmt 1 view .LVU156
 601              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 602              		.loc 1 68 19 is_stmt 0 view .LVU157
 603 0298 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 604              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 605              		.loc 1 73 58 view .LVU158
 606 029c 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 607              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 608              		.loc 1 73 56 view .LVU159
 609 02a0 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 610 02a4 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 611              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 612              		.loc 1 71 77 view .LVU160
 613 02a8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 614              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 615              		.loc 1 71 70 view .LVU161
 616 02ac 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 617              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 618              		.loc 1 71 77 view .LVU162
 619 02b0 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 620              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 621              		.loc 1 71 15 view .LVU163
 622 02b4 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 623              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 624              		.loc 1 73 58 view .LVU164
 625 02b8 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 626 02bc 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 627 02c0 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 628 02c4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 629 02c8 050000DA 		ble	.L25		@,
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 56 discriminator 1 view .LVU165
 632 02cc C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 633 02d0 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 634 02d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 635 02d8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 636 02dc 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 637 02e0 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 638              	.L25:
 639              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 640              		.loc 1 73 56 discriminator 12 view .LVU166
 641 02e4 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 642              	.LVL32:
 643              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 644              		.loc 1 59 9 discriminator 12 view .LVU167
 645 02e8 060055E1 		cmp	r5, r6	@ ivtmp.38, ivtmp.45
 646 02ec D2FFFF1A 		bne	.L28		@,
 647 02f0 026B85E2 		add	r6, r5, #2048	@ ivtmp.45, ivtmp.38,
 648              	.LVL33:
 649              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 650              		.loc 1 55 5 discriminator 2 view .LVU168
 651 02f4 0B0056E1 		cmp	r6, fp	@ ivtmp.45, _81
 652              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 653              		.loc 1 55 34 discriminator 2 view .LVU169
 654 02f8 019089E2 		add	r9, r9, #1	@ w, w,
 655              	.LVL34:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 656              		.loc 1 55 34 discriminator 2 view .LVU170
 657 02fc 028B48E2 		sub	r8, r8, #2048	@ ivtmp.48, ivtmp.48,
 658              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 659              		.loc 1 55 5 discriminator 2 view .LVU171
 660 0300 C2FFFF1A 		bne	.L29		@,
 661              	@ armwave.c:76: }
  76:armwave.c     **** 
 662              		.loc 1 76 1 view .LVU172
 663 0304 0CD08DE2 		add	sp, sp, #12	@,,
 664              		.cfi_def_cfa_offset 84
 665              		@ sp needed	@
 666 0308 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 667              		.cfi_restore 90
 668              		.cfi_restore 91
 669              		.cfi_restore 88
 670              		.cfi_restore 89
 671              		.cfi_restore 86
 672              		.cfi_restore 87
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 36
 680              	.LVL35:
  76:armwave.c     **** 
 681              		.loc 1 76 1 view .LVU173
 682 030c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 683              	.LVL36:
 684              	.L43:
  76:armwave.c     **** 
 685              		.loc 1 76 1 view .LVU174
 686              		.align	2
 687              	.L42:
 688 0310 0000803C 		.word	1015021568
 689 0314 0000003F 		.word	1056964608
 690 0318 0050C347 		.word	1203982336
 691 031c C3F5C840 		.word	1086911939
 692 0320 0000003A 		.word	973078528
 693 0324 38FFC74A 		.word	1254620984
 694 0328 0000803F 		.word	1065353216
 695 032c 0000FE42 		.word	1123942400
 696 0330 00000043 		.word	1124073472
 697 0334 00007F43 		.word	1132396544
 698 0338 00000000 		.word	test_wave_buffer
 699 033c 00000000 		.word	.LANCHOR1
 700              		.cfi_endproc
 701              	.LFE57:
 703              		.align	2
 704              		.global	test_create_gamma
 705              		.syntax unified
 706              		.arm
 707              		.fpu vfp
 709              	test_create_gamma:
 710              	.LFB58:
  82:armwave.c     ****     int i;
 711              		.loc 1 82 1 is_stmt 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 715              		.loc 1 83 5 view .LVU176
  84:armwave.c     **** 
 716              		.loc 1 84 5 view .LVU177
 717              	.LVL37:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 718              		.loc 1 86 5 view .LVU178
 719              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 720              		.loc 1 82 1 is_stmt 0 view .LVU179
 721 0340 70402DE9 		push	{r4, r5, r6, lr}	@
 722              		.cfi_def_cfa_offset 16
 723              		.cfi_offset 4, -16
 724              		.cfi_offset 5, -12
 725              		.cfi_offset 6, -8
 726              		.cfi_offset 14, -4
 727 0344 068B2DED 		vpush.64	{d8, d9, d10}	@
 728              		.cfi_def_cfa_offset 40
 729              		.cfi_offset 80, -40
 730              		.cfi_offset 81, -36
 731              		.cfi_offset 82, -32
 732              		.cfi_offset 83, -28
 733              		.cfi_offset 84, -24
 734              		.cfi_offset 85, -20
 735 0348 64409FE5 		ldr	r4, .L48+20	@ ivtmp.56,
 736              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 737              		.loc 1 87 32 view .LVU180
 738 034c 17AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 739              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 740              		.loc 1 87 26 view .LVU181
 741 0350 129B9FED 		vldr.64	d9, .L48	@ tmp135,
 742              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 743              		.loc 1 87 49 view .LVU182
 744 0354 138B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 745 0358 015084E2 		add	r5, r4, #1	@ _25, ivtmp.56,
 746 035c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.56,
 747 0360 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 748              	.LVL38:
 749              	.L45:
  87:armwave.c     ****     }
 750              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU183
 751              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 752              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU184
 753 0364 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.56
 754              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 755              		.loc 1 87 26 discriminator 3 view .LVU185
 756 0368 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 757              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 758              		.loc 1 87 32 discriminator 3 view .LVU186
 759 036c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 760 0370 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 761 0374 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 26 discriminator 3 view .LVU187
 764 0378 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 765 037c FEFFFFEB 		bl	pow		@
 766              	.LVL39:
 767              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 768              		.loc 1 87 49 discriminator 3 view .LVU188
 769 0380 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 770              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 771              		.loc 1 87 24 discriminator 3 view .LVU189
 772 0384 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 773 0388 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 774 038c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 775              	.LVL40:
 776              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 777              		.loc 1 86 5 discriminator 3 view .LVU190
 778 0390 060054E1 		cmp	r4, r6	@ ivtmp.56, _26
 779 0394 F2FFFF1A 		bne	.L45		@,
 780              	@ armwave.c:89: }
  89:armwave.c     **** 
 781              		.loc 1 89 1 view .LVU191
 782 0398 068BBDEC 		vldm	sp!, {d8-d10}	@,
 783              		.cfi_restore 84
 784              		.cfi_restore 85
 785              		.cfi_restore 82
 786              		.cfi_restore 83
 787              		.cfi_restore 80
 788              		.cfi_restore 81
 789              		.cfi_def_cfa_offset 16
 790 039c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 791              	.LVL41:
 792              	.L49:
  89:armwave.c     **** 
 793              		.loc 1 89 1 view .LVU192
 794              		.align	3
 795              	.L48:
 796 03a0 000000C0 		.word	-1073741824
 797 03a4 CCCCEC3F 		.word	1072483532
 798 03a8 00000000 		.word	0
 799 03ac 00E06F40 		.word	1081073664
 800 03b0 00007F43 		.word	1132396544
 801 03b4 FFFFFFFF 		.word	gamma_table-1
 802              		.cfi_endproc
 803              	.LFE58:
 805              		.align	2
 806              		.global	render_nonaa_to_buffer_1ch_slice
 807              		.syntax unified
 808              		.arm
 809              		.fpu vfp
 811              	render_nonaa_to_buffer_1ch_slice:
 812              	.LVL42:
 813              	.LFB59:
  99:armwave.c     ****     int yy, ys, w, scale_value;
 814              		.loc 1 99 1 is_stmt 1 view -0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 0
 817              		@ frame_needed = 0, uses_anonymous_args = 0
 100:armwave.c     ****     uint32_t value, word;
 818              		.loc 1 100 5 view .LVU194
 101:armwave.c     ****     uint8_t *wave_base;
 819              		.loc 1 101 5 view .LVU195
 102:armwave.c     ****     uint8_t *write_buffer_base;
 820              		.loc 1 102 5 view .LVU196
 103:armwave.c     ****     uint8_t *write_buffer;
 821              		.loc 1 103 5 view .LVU197
 104:armwave.c     ****     
 822              		.loc 1 104 5 view .LVU198
 106:armwave.c     **** 
 823              		.loc 1 106 5 view .LVU199
 824              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 825              		.loc 1 106 40 is_stmt 0 view .LVU200
 826 03b8 F4209FE5 		ldr	r2, .L62	@ tmp257,
 827              	@ armwave.c:99: {
  99:armwave.c     ****     int yy, ys, w, scale_value;
 828              		.loc 1 99 1 view .LVU201
 829 03bc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 830              		.cfi_def_cfa_offset 36
 831              		.cfi_offset 4, -36
 832              		.cfi_offset 5, -32
 833              		.cfi_offset 6, -28
 834              		.cfi_offset 7, -24
 835              		.cfi_offset 8, -20
 836              		.cfi_offset 9, -16
 837              		.cfi_offset 10, -12
 838              		.cfi_offset 11, -8
 839              		.cfi_offset 14, -4
 840              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 841              		.loc 1 109 5 view .LVU202
 842 03c0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 843              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 844              		.loc 1 106 63 view .LVU203
 845 03c4 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 846              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 847              		.loc 1 109 5 view .LVU204
 848 03c8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 849              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 850              		.loc 1 106 40 view .LVU205
 851 03cc 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 852              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 853              		.loc 1 106 63 view .LVU206
 854 03d0 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 855              	.LVL43:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 856              		.loc 1 109 5 is_stmt 1 view .LVU207
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 857              		.loc 1 109 5 is_stmt 0 view .LVU208
 858 03d4 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 859 03d8 000051E3 		cmp	r1, #0	@ height,
 860 03dc F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 861 03e0 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 862              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 863              		.loc 1 109 11 view .LVU209
 864 03e4 0080A0E3 		mov	r8, #0	@ w,
 865              	.LVL44:
 866              	.L54:
 110:armwave.c     **** 
 867              		.loc 1 110 9 is_stmt 1 view .LVU210
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 868              		.loc 1 120 9 view .LVU211
 869              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 870              		.loc 1 110 64 is_stmt 0 view .LVU212
 871 03e8 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 872 03ec 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 873              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 874              		.loc 1 120 16 view .LVU213
 875 03f0 0000A0E3 		mov	r0, #0	@ yy,
 876 03f4 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 877 03f8 037087E0 		add	r7, r7, r3	@ ivtmp.62, g_armwave_state.wave_buffer, tmp195
 878              	.LVL45:
 879              	.L53:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 880              		.loc 1 135 13 is_stmt 1 view .LVU214
 881              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 882              		.loc 1 135 18 is_stmt 0 view .LVU215
 883 03fc 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 884              	.LVL46:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 885              		.loc 1 139 13 is_stmt 1 view .LVU216
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 886              		.loc 1 140 17 view .LVU217
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 887              		.loc 1 141 17 view .LVU218
 142:armwave.c     ****                 word >>= 8;
 888              		.loc 1 142 17 view .LVU219
 889              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 890              		.loc 1 140 45 is_stmt 0 view .LVU220
 891 0400 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 892              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 893              		.loc 1 141 63 view .LVU221
 894 0404 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 895              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 896              		.loc 1 140 37 view .LVU222
 897 0408 73E0EFE6 		uxtb	lr, r3	@ word, word
 898              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 899              		.loc 1 143 22 view .LVU223
 900 040c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 901              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 902              		.loc 1 142 47 view .LVU224
 903 0410 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 904              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 905              		.loc 1 140 37 view .LVU225
 906 0414 7440EFE6 		uxtb	r4, r4	@ word, word
 907              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 908              		.loc 1 142 47 view .LVU226
 909 0418 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 910              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 911              		.loc 1 141 63 view .LVU227
 912 041c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 913              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 914              		.loc 1 143 22 view .LVU228
 915 0420 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 916              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 917              		.loc 1 142 47 view .LVU229
 918 0424 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 919              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 920              		.loc 1 140 37 view .LVU230
 921 0428 7EE0EFE6 		uxtb	lr, lr	@ word, word
 922              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 923              		.loc 1 143 22 view .LVU231
 924 042c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 925              	.LVL47:
 926              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 927              		.loc 1 142 47 view .LVU232
 928 0430 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 929 0434 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 930              	.LVL48:
 143:armwave.c     ****             }
 931              		.loc 1 143 17 is_stmt 1 view .LVU233
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 932              		.loc 1 140 17 view .LVU234
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 933              		.loc 1 141 17 view .LVU235
 142:armwave.c     ****                 word >>= 8;
 934              		.loc 1 142 17 view .LVU236
 935              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 936              		.loc 1 140 45 is_stmt 0 view .LVU237
 937 0438 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 938              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 939              		.loc 1 141 63 view .LVU238
 940 043c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 941              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 942              		.loc 1 142 47 view .LVU239
 943 0440 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 944              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 945              		.loc 1 141 63 view .LVU240
 946 0444 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 947              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 948              		.loc 1 142 47 view .LVU241
 949 0448 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 950              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 951              		.loc 1 141 63 view .LVU242
 952 044c 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 953              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 954              		.loc 1 120 37 view .LVU243
 955 0450 040080E2 		add	r0, r0, #4	@ yy, yy,
 956              	.LVL49:
 957              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 958              		.loc 1 142 47 view .LVU244
 959 0454 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 960              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 961              		.loc 1 120 9 view .LVU245
 962 0458 000051E1 		cmp	r1, r0	@ height, yy
 963              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 964              		.loc 1 142 47 view .LVU246
 965 045c 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 966 0460 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 967              	.LVL50:
 143:armwave.c     ****             }
 968              		.loc 1 143 17 is_stmt 1 view .LVU247
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 969              		.loc 1 140 17 view .LVU248
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 970              		.loc 1 141 17 view .LVU249
 142:armwave.c     ****                 word >>= 8;
 971              		.loc 1 142 17 view .LVU250
 972              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 973              		.loc 1 140 45 is_stmt 0 view .LVU251
 974 0464 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 975              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 976              		.loc 1 141 63 view .LVU252
 977 0468 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 978              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 979              		.loc 1 142 47 view .LVU253
 980 046c 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 981 0470 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 982 0474 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 983 0478 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 984 047c 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 143:armwave.c     ****             }
 985              		.loc 1 143 17 is_stmt 1 view .LVU254
 986              	.LVL51:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 987              		.loc 1 140 17 view .LVU255
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 988              		.loc 1 141 17 view .LVU256
 142:armwave.c     ****                 word >>= 8;
 989              		.loc 1 142 17 view .LVU257
 990              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 991              		.loc 1 140 45 is_stmt 0 view .LVU258
 992 0480 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 993              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 994              		.loc 1 141 63 view .LVU259
 995 0484 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 996              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 997              		.loc 1 142 47 view .LVU260
 998 0488 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 999 048c 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 1000 0490 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 1001 0494 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 1002 0498 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 143:armwave.c     ****             }
 1003              		.loc 1 143 17 is_stmt 1 view .LVU261
 1004              	.LVL52:
 1005              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1006              		.loc 1 120 9 is_stmt 0 view .LVU262
 1007 049c D6FFFF8A 		bhi	.L53		@,
 1008              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1009              		.loc 1 109 5 view .LVU263
 1010 04a0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 1011              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1012              		.loc 1 109 44 view .LVU264
 1013 04a4 018088E2 		add	r8, r8, #1	@ w, w,
 1014              	.LVL53:
 1015              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1016              		.loc 1 109 5 view .LVU265
 1017 04a8 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 1018 04ac CDFFFF3A 		bcc	.L54		@,
 1019 04b0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1020              	.L63:
 1021              		.align	2
 1022              	.L62:
 1023 04b4 00000000 		.word	g_armwave_state
 1024              		.cfi_endproc
 1025              	.LFE59:
 1027              		.align	2
 1028              		.global	armwave_init
 1029              		.syntax unified
 1030              		.arm
 1031              		.fpu vfp
 1033              	armwave_init:
 1034              	.LFB60:
 152:armwave.c     ****     g_armwave_state.flags = 0;
 1035              		.loc 1 152 1 is_stmt 1 view -0
 1036              		.cfi_startproc
 1037              		@ args = 0, pretend = 0, frame = 0
 1038              		@ frame_needed = 0, uses_anonymous_args = 0
 1039              		@ link register save eliminated.
 153:armwave.c     **** }
 1040              		.loc 1 153 5 view .LVU267
 1041              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 1042              		.loc 1 153 27 is_stmt 0 view .LVU268
 1043 04b8 08309FE5 		ldr	r3, .L65	@ tmp110,
 1044 04bc 0020A0E3 		mov	r2, #0	@ tmp111,
 1045 04c0 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1046              	@ armwave.c:154: }
 154:armwave.c     **** 
 1047              		.loc 1 154 1 view .LVU269
 1048 04c4 1EFF2FE1 		bx	lr	@
 1049              	.L66:
 1050              		.align	2
 1051              	.L65:
 1052 04c8 00000000 		.word	g_armwave_state
 1053              		.cfi_endproc
 1054              	.LFE60:
 1056              		.align	2
 1057              		.global	armwave_setup_render
 1058              		.syntax unified
 1059              		.arm
 1060              		.fpu vfp
 1062              	armwave_setup_render:
 1063              	.LVL54:
 1064              	.LFB61:
 157:armwave.c     ****     uint32_t length, xx;
 1065              		.loc 1 157 1 is_stmt 1 view -0
 1066              		.cfi_startproc
 1067              		@ args = 16, pretend = 0, frame = 0
 1068              		@ frame_needed = 0, uses_anonymous_args = 0
 158:armwave.c     ****     float points_per_pixel;
 1069              		.loc 1 158 5 view .LVU271
 159:armwave.c     **** 
 1070              		.loc 1 159 5 view .LVU272
 161:armwave.c     **** 
 1071              		.loc 1 161 5 view .LVU273
 1072              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1073              		.loc 1 157 1 is_stmt 0 view .LVU274
 1074 04cc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1075              		.cfi_def_cfa_offset 24
 1076              		.cfi_offset 4, -24
 1077              		.cfi_offset 5, -20
 1078              		.cfi_offset 6, -16
 1079              		.cfi_offset 7, -12
 1080              		.cfi_offset 8, -8
 1081              		.cfi_offset 14, -4
 1082              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1083              		.loc 1 161 5 view .LVU275
 1084 04d0 020051E1 		cmp	r1, r2	@ start_point, end_point
 1085              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1086              		.loc 1 157 1 view .LVU276
 1087 04d4 028B2DED 		vpush.64	{d8}	@
 1088              		.cfi_def_cfa_offset 32
 1089              		.cfi_offset 80, -32
 1090              		.cfi_offset 81, -28
 1091              	@ armwave.c:157: {
 157:armwave.c     ****     uint32_t length, xx;
 1092              		.loc 1 157 1 view .LVU277
 1093 04d8 0180A0E1 		mov	r8, r1	@ start_point, start_point
 1094 04dc 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1095 04e0 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1096              	.LVL55:
 157:armwave.c     ****     uint32_t length, xx;
 1097              		.loc 1 157 1 view .LVU278
 1098 04e4 24709DE5 		ldr	r7, [sp, #36]	@ target_width, target_width
 1099 04e8 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1100              	.LVL56:
 1101              	@ armwave.c:161:     assert(start_point < end_point);
 161:armwave.c     **** 
 1102              		.loc 1 161 5 view .LVU279
 1103 04ec 6800002A 		bcs	.L83		@,
 164:armwave.c     **** 
 1104              		.loc 1 164 5 is_stmt 1 view .LVU280
 1105              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1106              		.loc 1 164 33 is_stmt 0 view .LVU281
 1107 04f0 B4419FE5 		ldr	r4, .L88+4	@ tmp217,
 1108              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1109              		.loc 1 167 5 view .LVU282
 1110 04f4 01CC42E2 		sub	ip, r2, #256	@ tmp151, target_height,
 1111 04f8 01CCDCE3 		bics	ip, ip, #256	@ tmp219, tmp151,
 1112              	@ armwave.c:164:     g_armwave_state.wave_buffer = wave_buffer;
 164:armwave.c     **** 
 1113              		.loc 1 164 33 view .LVU283
 1114 04fc 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 167:armwave.c     **** 
 1115              		.loc 1 167 5 is_stmt 1 view .LVU284
 1116 0500 4500000A 		beq	.L69		@,
 1117              	@ armwave.c:167:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 167:armwave.c     **** 
 1118              		.loc 1 167 5 is_stmt 0 discriminator 1 view .LVU285
 1119 0504 010B42E2 		sub	r0, r2, #1024	@ tmp153, target_height,
 1120              	.LVL57:
 167:armwave.c     **** 
 1121              		.loc 1 167 5 discriminator 1 view .LVU286
 1122 0508 010BD0E3 		bics	r0, r0, #1024	@ tmp220, tmp153,
 1123 050c 5100001A 		bne	.L84		@,
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1124              		.loc 1 169 5 is_stmt 1 view .LVU287
 175:armwave.c     ****         g_armwave_state.row_shift = 10;
 1125              		.loc 1 175 12 view .LVU288
 1126              	@ armwave.c:175:     } else if(target_height == 1024) {
 175:armwave.c     ****         g_armwave_state.row_shift = 10;
 1127              		.loc 1 175 14 is_stmt 0 view .LVU289
 1128 0510 010B52E3 		cmp	r2, #1024	@ target_height,
 1129 0514 4A00000A 		beq	.L85		@,
 178:armwave.c     ****         g_armwave_state.row_shift = 11;
 1130              		.loc 1 178 12 is_stmt 1 view .LVU290
 1131              	@ armwave.c:178:     } else if(target_height == 2048) {
 178:armwave.c     ****         g_armwave_state.row_shift = 11;
 1132              		.loc 1 178 14 is_stmt 0 view .LVU291
 1133 0518 020B52E3 		cmp	r2, #2048	@ target_height,
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1134              		.loc 1 179 9 is_stmt 1 view .LVU292
 1135              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1136              		.loc 1 179 35 is_stmt 0 view .LVU293
 1137 051c 0B00A003 		moveq	r0, #11	@ tmp171,
 1138              	@ armwave.c:180:         g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1139              		.loc 1 180 34 view .LVU294
 1140 0520 88C19F05 		ldreq	ip, .L88+8	@ tmp173,
 1141              	@ armwave.c:179:         g_armwave_state.row_shift = 11;
 179:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1142              		.loc 1 179 35 view .LVU295
 1143 0524 3C008405 		streq	r0, [r4, #60]	@ tmp171, g_armwave_state.row_shift
 180:armwave.c     ****     } 
 1144              		.loc 1 180 9 is_stmt 1 view .LVU296
 1145              	@ armwave.c:180:         g_armwave_state.row_mask = 0x7ff;
 180:armwave.c     ****     } 
 1146              		.loc 1 180 34 is_stmt 0 view .LVU297
 1147 0528 40C08405 		streq	ip, [r4, #64]	@ tmp173, g_armwave_state.row_mask
 1148              	.L72:
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1149              		.loc 1 184 5 is_stmt 1 view .LVU298
 1150              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1151              		.loc 1 188 42 is_stmt 0 view .LVU299
 1152 052c 970206E0 		mul	r6, r7, r2	@ _8, target_width, target_height
 1153              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1154              		.loc 1 197 23 view .LVU300
 1155 0530 040094E5 		ldr	r0, [r4, #4]	@ _9, g_armwave_state.ch1_buffer
 1156              	@ armwave.c:186:     g_armwave_state.wave_stride = wave_stride;
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1157              		.loc 1 186 33 view .LVU301
 1158 0534 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1159              	@ armwave.c:187:     g_armwave_state.waves = waves;
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1160              		.loc 1 187 27 view .LVU302
 1161 0538 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1162              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1163              		.loc 1 185 44 view .LVU303
 1164 053c 2214A0E1 		lsr	r1, r2, #8	@ tmp176, target_height,
 1165              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1166              		.loc 1 195 34 view .LVU304
 1167 0540 4030A0E3 		mov	r3, #64	@ tmp183,
 1168              	.LVL58:
 1169              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1170              		.loc 1 197 7 view .LVU305
 1171 0544 000050E3 		cmp	r0, #0	@ _9,
 1172              	@ armwave.c:184:     g_armwave_state.xstride = target_height;
 184:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1173              		.loc 1 184 29 view .LVU306
 1174 0548 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1175              		.loc 1 185 5 is_stmt 1 view .LVU307
 1176              	@ armwave.c:189:     g_armwave_state.target_width = target_width;
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1177              		.loc 1 189 34 is_stmt 0 view .LVU308
 1178 054c 347084E5 		str	r7, [r4, #52]	@ target_width, g_armwave_state.target_width
 1179              	@ armwave.c:190:     g_armwave_state.target_height = target_height;
 190:armwave.c     **** 
 1180              		.loc 1 190 35 view .LVU309
 1181 0550 382084E5 		str	r2, [r4, #56]	@ target_height, g_armwave_state.target_height
 1182              	@ armwave.c:188:     g_armwave_state.size = target_height * target_width;
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1183              		.loc 1 188 26 view .LVU310
 1184 0554 306084E5 		str	r6, [r4, #48]	@ _8, g_armwave_state.size
 1185              	@ armwave.c:185:     g_armwave_state.vscale = target_height / 256;
 185:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1186              		.loc 1 185 28 view .LVU311
 1187 0558 1C1084E5 		str	r1, [r4, #28]	@ tmp176, g_armwave_state.vscale
 186:armwave.c     ****     g_armwave_state.waves = waves;
 1188              		.loc 1 186 5 is_stmt 1 view .LVU312
 187:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1189              		.loc 1 187 5 view .LVU313
 188:armwave.c     ****     g_armwave_state.target_width = target_width;
 1190              		.loc 1 188 5 view .LVU314
 189:armwave.c     ****     g_armwave_state.target_height = target_height;
 1191              		.loc 1 189 5 view .LVU315
 190:armwave.c     **** 
 1192              		.loc 1 190 5 view .LVU316
 195:armwave.c     **** 
 1193              		.loc 1 195 5 view .LVU317
 1194              	@ armwave.c:195:     g_armwave_state.slice_height = 64;  
 195:armwave.c     **** 
 1195              		.loc 1 195 34 is_stmt 0 view .LVU318
 1196 055c 283084E5 		str	r3, [r4, #40]	@ tmp183, g_armwave_state.slice_height
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1197              		.loc 1 197 5 is_stmt 1 view .LVU319
 1198              	@ armwave.c:197:     if(g_armwave_state.ch1_buffer != NULL)
 197:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1199              		.loc 1 197 7 is_stmt 0 view .LVU320
 1200 0560 0100000A 		beq	.L74		@,
 198:armwave.c     **** 
 1201              		.loc 1 198 9 is_stmt 1 view .LVU321
 1202 0564 FEFFFFEB 		bl	free		@
 1203              	.LVL59:
 198:armwave.c     **** 
 1204              		.loc 1 198 9 is_stmt 0 view .LVU322
 1205 0568 306094E5 		ldr	r6, [r4, #48]	@ _8, g_armwave_state.size
 1206              	.L74:
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1207              		.loc 1 200 5 is_stmt 1 view .LVU323
 1208              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1209              		.loc 1 200 34 is_stmt 0 view .LVU324
 1210 056c 0110A0E3 		mov	r1, #1	@,
 1211 0570 0600A0E1 		mov	r0, r6	@, _8
 1212 0574 FEFFFFEB 		bl	calloc		@
 1213              	.LVL60:
 1214              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1215              		.loc 1 201 33 view .LVU325
 1216 0578 34219FE5 		ldr	r2, .L88+12	@ tmp189,
 1217              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1218              		.loc 1 203 33 view .LVU326
 1219 057c FA30A0E3 		mov	r3, #250	@ tmp192,
 1220              	@ armwave.c:201:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1221              		.loc 1 201 33 view .LVU327
 1222 0580 482084E5 		str	r2, [r4, #72]	@ tmp189, MEM[(short int *)&g_armwave_state + 72B]
 1223              	@ armwave.c:203:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 203:armwave.c     **** 
 1224              		.loc 1 203 33 view .LVU328
 1225 0584 BC34C4E1 		strh	r3, [r4, #76]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 1226              	@ armwave.c:205:     assert(g_armwave_state.ch1_buffer != NULL);
 205:armwave.c     **** 
 1227              		.loc 1 205 5 view .LVU329
 1228 0588 000050E3 		cmp	r0, #0	@ tmp186,
 1229              	@ armwave.c:200:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 200:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1230              		.loc 1 200 32 view .LVU330
 1231 058c 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 201:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1232              		.loc 1 201 5 is_stmt 1 view .LVU331
 202:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1233              		.loc 1 202 5 view .LVU332
 203:armwave.c     **** 
 1234              		.loc 1 203 5 view .LVU333
 205:armwave.c     **** 
 1235              		.loc 1 205 5 view .LVU334
 1236 0590 3500000A 		beq	.L86		@,
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1237              		.loc 1 208 5 view .LVU335
 1238              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1239              		.loc 1 209 34 is_stmt 0 view .LVU336
 1240 0594 907A07EE 		vmov	s15, r7	@ int	@ target_width, target_width
 1241              	@ armwave.c:208:     length = end_point - start_point;
 208:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1242              		.loc 1 208 12 view .LVU337
 1243 0598 085045E0 		sub	r5, r5, r8	@ length, end_point, start_point
 1244              	.LVL61:
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1245              		.loc 1 209 5 is_stmt 1 view .LVU338
 1246              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1247              		.loc 1 211 40 is_stmt 0 view .LVU339
 1248 059c 8500A0E1 		lsl	r0, r5, #1	@, length,
 1249              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1250              		.loc 1 209 34 view .LVU340
 1251 05a0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp197, target_width
 1252              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1253              		.loc 1 209 31 view .LVU341
 1254 05a4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1255 05a8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp196, length
 1256              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1257              		.loc 1 210 60 view .LVU342
 1258 05ac 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp223, g_armwave_state.slice_height
 1259 05b0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 1260              	@ armwave.c:209:     points_per_pixel = length / ((float)(target_width));
 209:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1261              		.loc 1 209 22 view .LVU343
 1262 05b4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp196, tmp197
 1263              	.LVL62:
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1264              		.loc 1 210 5 is_stmt 1 view .LVU344
 1265              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1266              		.loc 1 210 60 is_stmt 0 view .LVU345
 1267 05b8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 1268              	@ armwave.c:210:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 210:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1269              		.loc 1 210 41 view .LVU346
 1270 05bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 1271 05c0 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp203, g_armwave_state.slice_record_height
 211:armwave.c     **** 
 1272              		.loc 1 211 5 is_stmt 1 view .LVU347
 1273              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1274              		.loc 1 211 40 is_stmt 0 view .LVU348
 1275 05c4 FEFFFFEB 		bl	malloc		@
 1276              	.LVL63:
 1277              	@ armwave.c:213:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 213:armwave.c     **** 
 1278              		.loc 1 213 5 view .LVU349
 1279 05c8 000050E3 		cmp	r0, #0	@ tmp205,
 1280              	@ armwave.c:211:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 211:armwave.c     **** 
 1281              		.loc 1 211 38 view .LVU350
 1282 05cc 600084E5 		str	r0, [r4, #96]	@ tmp205, g_armwave_state.xcoord_to_xpixel
 213:armwave.c     **** 
 1283              		.loc 1 213 5 is_stmt 1 view .LVU351
 1284 05d0 2A00000A 		beq	.L87		@,
 1285              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1286              		.loc 1 216 54 is_stmt 0 view .LVU352
 1287 05d4 337ADFED 		vldr.32	s15, .L88	@ tmp210,
 1288 05d8 020040E2 		sub	r0, r0, #2	@ ivtmp.74, tmp205,
 1289              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1290              		.loc 1 215 12 view .LVU353
 1291 05dc 0030A0E3 		mov	r3, #0	@ xx,
 1292              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1293              		.loc 1 216 54 view .LVU354
 1294 05e0 887A87EE 		vdiv.f32	s14, s15, s16	@ _20, tmp210, points_per_pixel
 1295              	.L77:
 1296              	.LVL64:
 216:armwave.c     **** 
 1297              		.loc 1 216 9 is_stmt 1 discriminator 3 view .LVU355
 1298              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1299              		.loc 1 216 74 is_stmt 0 discriminator 3 view .LVU356
 1300 05e4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1301              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1302              		.loc 1 215 32 discriminator 3 view .LVU357
 1303 05e8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1304              	.LVL65:
 1305              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1306              		.loc 1 215 5 discriminator 3 view .LVU358
 1307 05ec 030055E1 		cmp	r5, r3	@ length, xx
 1308              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1309              		.loc 1 216 74 discriminator 3 view .LVU359
 1310 05f0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp211, xx
 1311 05f4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp212, tmp211, _20
 1312              	@ armwave.c:216:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 216:armwave.c     **** 
 1313              		.loc 1 216 46 discriminator 3 view .LVU360
 1314 05f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp213, tmp212
 1315 05fc 902A17EE 		vmov	r2, s15	@ int	@ tmp213, tmp213
 1316 0600 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp213, MEM[base: _6, offset: 0B]
 1317              	@ armwave.c:215:     for(xx = 0; xx < length; xx++) {
 215:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1318              		.loc 1 215 5 discriminator 3 view .LVU361
 1319 0604 F6FFFF1A 		bne	.L77		@,
 221:armwave.c     **** }
 1320              		.loc 1 221 5 is_stmt 1 view .LVU362
 1321              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1322              		.loc 1 221 34 is_stmt 0 view .LVU363
 1323 0608 0601A0E1 		lsl	r0, r6, #2	@, _8,
 1324 060c FEFFFFEB 		bl	malloc		@
 1325              	.LVL66:
 1326              	@ armwave.c:222: }
 1327              		.loc 1 222 1 view .LVU364
 1328 0610 028BBDEC 		vldm	sp!, {d8}	@
 1329              		.cfi_remember_state
 1330              		.cfi_restore 80
 1331              		.cfi_restore 81
 1332              		.cfi_def_cfa_offset 24
 1333              	.LVL67:
 1334              	@ armwave.c:221:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 221:armwave.c     **** }
 1335              		.loc 1 221 32 view .LVU365
 1336 0614 440084E5 		str	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 1337              	@ armwave.c:222: }
 1338              		.loc 1 222 1 view .LVU366
 1339 0618 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1340              	.LVL68:
 1341              	.L69:
 1342              		.cfi_restore_state
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1343              		.loc 1 169 5 is_stmt 1 view .LVU367
 1344              	@ armwave.c:169:     if(target_height == 256) {
 169:armwave.c     ****         g_armwave_state.row_shift = 8;
 1345              		.loc 1 169 7 is_stmt 0 view .LVU368
 1346 061c 010C52E3 		cmp	r2, #256	@ target_height,
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1347              		.loc 1 170 9 is_stmt 1 view .LVU369
 1348              	@ armwave.c:170:         g_armwave_state.row_shift = 8;
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1349              		.loc 1 170 35 is_stmt 0 view .LVU370
 1350 0620 08C0A003 		moveq	ip, #8	@ tmp159,
 1351              	@ armwave.c:174:         g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1352              		.loc 1 174 34 view .LVU371
 1353 0624 8CC09F15 		ldrne	ip, .L88+16	@ tmp165,
 1354              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1355              		.loc 1 171 34 view .LVU372
 1356 0628 FF00A003 		moveq	r0, #255	@ tmp161,
 1357              	.LVL69:
 1358              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1359              		.loc 1 173 35 view .LVU373
 1360 062c 0900A013 		movne	r0, #9	@ tmp163,
 1361              	@ armwave.c:170:         g_armwave_state.row_shift = 8;
 170:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1362              		.loc 1 170 35 view .LVU374
 1363 0630 3CC08405 		streq	ip, [r4, #60]	@ tmp159, g_armwave_state.row_shift
 171:armwave.c     ****     } else if(target_height == 512) {
 1364              		.loc 1 171 9 is_stmt 1 view .LVU375
 1365              	@ armwave.c:171:         g_armwave_state.row_mask = 0x0ff;
 171:armwave.c     ****     } else if(target_height == 512) {
 1366              		.loc 1 171 34 is_stmt 0 view .LVU376
 1367 0634 40008405 		streq	r0, [r4, #64]	@ tmp161, g_armwave_state.row_mask
 172:armwave.c     ****         g_armwave_state.row_shift = 9;
 1368              		.loc 1 172 12 is_stmt 1 view .LVU377
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1369              		.loc 1 173 9 view .LVU378
 1370              	@ armwave.c:174:         g_armwave_state.row_mask = 0x1ff;
 174:armwave.c     ****     } else if(target_height == 1024) {
 1371              		.loc 1 174 34 is_stmt 0 view .LVU379
 1372 0638 40C08415 		strne	ip, [r4, #64]	@ tmp165, g_armwave_state.row_mask
 1373              	@ armwave.c:173:         g_armwave_state.row_shift = 9;
 173:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1374              		.loc 1 173 35 view .LVU380
 1375 063c 3C008415 		strne	r0, [r4, #60]	@ tmp163, g_armwave_state.row_shift
 174:armwave.c     ****     } else if(target_height == 1024) {
 1376              		.loc 1 174 9 is_stmt 1 view .LVU381
 1377 0640 B9FFFFEA 		b	.L72		@
 1378              	.L85:
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1379              		.loc 1 176 9 view .LVU382
 1380              	@ armwave.c:177:         g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1381              		.loc 1 177 34 is_stmt 0 view .LVU383
 1382 0644 70C09FE5 		ldr	ip, .L88+20	@ tmp169,
 1383              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1384              		.loc 1 176 35 view .LVU384
 1385 0648 0A00A0E3 		mov	r0, #10	@ tmp167,
 1386              	@ armwave.c:177:         g_armwave_state.row_mask = 0x3ff;
 177:armwave.c     ****     } else if(target_height == 2048) {
 1387              		.loc 1 177 34 view .LVU385
 1388 064c 40C084E5 		str	ip, [r4, #64]	@ tmp169, g_armwave_state.row_mask
 1389              	@ armwave.c:176:         g_armwave_state.row_shift = 10;
 176:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1390              		.loc 1 176 35 view .LVU386
 1391 0650 3C0084E5 		str	r0, [r4, #60]	@ tmp167, g_armwave_state.row_shift
 177:armwave.c     ****     } else if(target_height == 2048) {
 1392              		.loc 1 177 9 is_stmt 1 view .LVU387
 1393 0654 B4FFFFEA 		b	.L72		@
 1394              	.L84:
 167:armwave.c     **** 
 1395              		.loc 1 167 5 discriminator 2 view .LVU388
 1396 0658 60309FE5 		ldr	r3, .L88+24	@,
 1397              	.LVL70:
 167:armwave.c     **** 
 1398              		.loc 1 167 5 is_stmt 0 discriminator 2 view .LVU389
 1399 065c A720A0E3 		mov	r2, #167	@,
 1400 0660 5C109FE5 		ldr	r1, .L88+28	@,
 1401 0664 5C009FE5 		ldr	r0, .L88+32	@,
 1402 0668 FEFFFFEB 		bl	__assert_fail		@
 1403              	.LVL71:
 1404              	.L86:
 205:armwave.c     **** 
 1405              		.loc 1 205 5 is_stmt 1 discriminator 1 view .LVU390
 1406 066c 4C309FE5 		ldr	r3, .L88+24	@,
 1407 0670 CD20A0E3 		mov	r2, #205	@,
 1408 0674 48109FE5 		ldr	r1, .L88+28	@,
 1409 0678 4C009FE5 		ldr	r0, .L88+36	@,
 1410 067c FEFFFFEB 		bl	__assert_fail		@
 1411              	.LVL72:
 1412              	.L87:
 213:armwave.c     **** 
 1413              		.loc 1 213 5 discriminator 1 view .LVU391
 1414 0680 38309FE5 		ldr	r3, .L88+24	@,
 1415 0684 D520A0E3 		mov	r2, #213	@,
 1416 0688 34109FE5 		ldr	r1, .L88+28	@,
 1417 068c 3C009FE5 		ldr	r0, .L88+40	@,
 1418 0690 FEFFFFEB 		bl	__assert_fail		@
 1419              	.LVL73:
 1420              	.L83:
 161:armwave.c     **** 
 1421              		.loc 1 161 5 discriminator 1 view .LVU392
 1422 0694 24309FE5 		ldr	r3, .L88+24	@,
 1423              	.LVL74:
 161:armwave.c     **** 
 1424              		.loc 1 161 5 is_stmt 0 discriminator 1 view .LVU393
 1425 0698 A120A0E3 		mov	r2, #161	@,
 1426 069c 20109FE5 		ldr	r1, .L88+28	@,
 1427 06a0 2C009FE5 		ldr	r0, .L88+44	@,
 1428              	.LVL75:
 161:armwave.c     **** 
 1429              		.loc 1 161 5 discriminator 1 view .LVU394
 1430 06a4 FEFFFFEB 		bl	__assert_fail		@
 1431              	.LVL76:
 1432              	.L89:
 1433              		.align	2
 1434              	.L88:
 1435 06a8 0000803F 		.word	1065353216
 1436 06ac 00000000 		.word	g_armwave_state
 1437 06b0 FF070000 		.word	2047
 1438 06b4 F609F406 		.word	116656630
 1439 06b8 FF010000 		.word	511
 1440 06bc FF030000 		.word	1023
 1441 06c0 00000000 		.word	.LANCHOR0
 1442 06c4 00000000 		.word	.LC0
 1443 06c8 0C000000 		.word	.LC1
 1444 06cc 6C000000 		.word	.LC2
 1445 06d0 90000000 		.word	.LC3
 1446 06d4 BC000000 		.word	.LC4
 1447              		.cfi_endproc
 1448              	.LFE61:
 1450              		.align	2
 1451              		.global	armwave_clear_buffer
 1452              		.syntax unified
 1453              		.arm
 1454              		.fpu vfp
 1456              	armwave_clear_buffer:
 1457              	.LVL77:
 1458              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 225:armwave.c     **** {
 1459              		.loc 1 225 1 is_stmt 1 view -0
 1460              		.cfi_startproc
 1461              		@ args = 0, pretend = 0, frame = 0
 1462              		@ frame_needed = 0, uses_anonymous_args = 0
 1463              		@ link register save eliminated.
 226:armwave.c     ****     // Flags ignored, only one buffer cleared
 227:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1464              		.loc 1 227 5 view .LVU396
 1465 06d8 0C309FE5 		ldr	r3, .L91	@ tmp113,
 1466 06dc 0010A0E3 		mov	r1, #0	@,
 1467 06e0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1468 06e4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1469              	.LVL78:
 1470              		.loc 1 227 5 is_stmt 0 view .LVU397
 1471 06e8 FEFFFFEA 		b	memset		@
 1472              	.LVL79:
 1473              	.L92:
 1474              		.align	2
 1475              	.L91:
 1476 06ec 00000000 		.word	g_armwave_state
 1477              		.cfi_endproc
 1478              	.LFE62:
 1480              		.align	2
 1481              		.global	armwave_fill_pixbuf_256
 1482              		.syntax unified
 1483              		.arm
 1484              		.fpu vfp
 1486              	armwave_fill_pixbuf_256:
 1487              	.LVL80:
 1488              	.LFB63:
 228:armwave.c     **** }
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 234:armwave.c     **** {
 1489              		.loc 1 234 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 8
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1493              		.loc 1 235 5 view .LVU399
 236:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1494              		.loc 1 236 5 view .LVU400
 237:armwave.c     ****     uint8_t r, g, b, value;
 1495              		.loc 1 237 5 view .LVU401
 238:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1496              		.loc 1 238 5 view .LVU402
 1497              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1498              		.loc 1 234 1 is_stmt 0 view .LVU403
 1499 06f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1500              		.cfi_def_cfa_offset 36
 1501              		.cfi_offset 4, -36
 1502              		.cfi_offset 5, -32
 1503              		.cfi_offset 6, -28
 1504              		.cfi_offset 7, -24
 1505              		.cfi_offset 8, -20
 1506              		.cfi_offset 9, -16
 1507              		.cfi_offset 10, -12
 1508              		.cfi_offset 11, -8
 1509              		.cfi_offset 14, -4
 1510              	@ armwave.c:242:     assert(out_buffer != NULL);
 239:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 240:armwave.c     ****     uint32_t offset;
 241:armwave.c     **** 
 242:armwave.c     ****     assert(out_buffer != NULL);
 1511              		.loc 1 242 5 view .LVU404
 1512 06f4 000050E3 		cmp	r0, #0	@ out_buffer
 1513              	@ armwave.c:238:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 238:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1514              		.loc 1 238 15 view .LVU405
 1515 06f8 44529FE5 		ldr	r5, .L120	@ tmp361,
 1516              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1517              		.loc 1 234 1 view .LVU406
 1518 06fc 0CD04DE2 		sub	sp, sp, #12	@,,
 1519              		.cfi_def_cfa_offset 48
 1520              	@ armwave.c:238:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 238:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1521              		.loc 1 238 15 view .LVU407
 1522 0700 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1523              	.LVL81:
 239:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1524              		.loc 1 239 5 is_stmt 1 view .LVU408
 240:armwave.c     **** 
 1525              		.loc 1 240 5 view .LVU409
 1526              		.loc 1 242 5 view .LVU410
 1527 0704 8900000A 		beq	.L118		@,
 243:armwave.c     **** 
 244:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 245:armwave.c     **** 
 246:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1528              		.loc 1 246 5 view .LVU411
 1529              	@ armwave.c:246:     npix = g_armwave_state.target_width * 256;
 1530              		.loc 1 246 41 is_stmt 0 view .LVU412
 1531 0708 34C095E5 		ldr	ip, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1532 070c 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1533              	.LVL82:
 247:armwave.c     **** 
 248:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1534              		.loc 1 248 5 is_stmt 1 view .LVU413
 1535              		.loc 1 248 5 is_stmt 0 view .LVU414
 1536 0710 00005CE3 		cmp	ip, #0	@ npix,
 1537 0714 0A0000DA 		ble	.L93		@,
 1538              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 249:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 250:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 251:armwave.c     ****         // most normal waveforms.
 252:armwave.c     ****         wave_word = *base_32ptr++;
 253:armwave.c     **** 
 254:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 255:armwave.c     ****             for(i = 0; i < 4; i++) {
 256:armwave.c     ****                 value = wave_word & 0xff;
 257:armwave.c     ****                 wave_word >>= 8;
 258:armwave.c     **** 
 259:armwave.c     ****                 if(value != 0) {
 260:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1539              		.loc 1 260 52 view .LVU415
 1540 0718 F8A4D5E1 		ldrsh	r10, [r5, #72]	@ _70, g_armwave_state.ch1_color.r
 1541              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1542              		.loc 1 261 52 view .LVU416
 1543 071c FA94D5E1 		ldrsh	r9, [r5, #74]	@ _76, g_armwave_state.ch1_color.g
 1544              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1545              		.loc 1 262 52 view .LVU417
 1546 0720 FCB4D5E1 		ldrsh	fp, [r5, #76]	@ _80, g_armwave_state.ch1_color.b
 1547              	@ armwave.c:248:     for(n = 0; n < npix; n += 4) {
 248:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1548              		.loc 1 248 11 view .LVU418
 1549 0724 0030A0E3 		mov	r3, #0	@ n,
 1550 0728 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1551              	.LVL83:
 1552              	.L102:
 252:armwave.c     **** 
 1553              		.loc 1 252 9 is_stmt 1 view .LVU419
 1554              	@ armwave.c:252:         wave_word = *base_32ptr++;
 252:armwave.c     **** 
 1555              		.loc 1 252 19 is_stmt 0 view .LVU420
 1556 072c 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1557              	.LVL84:
 254:armwave.c     ****             for(i = 0; i < 4; i++) {
 1558              		.loc 1 254 9 is_stmt 1 view .LVU421
 1559              	@ armwave.c:254:         if(COND_UNLIKELY(wave_word != 0)) {
 254:armwave.c     ****             for(i = 0; i < 4; i++) {
 1560              		.loc 1 254 11 is_stmt 0 view .LVU422
 1561 0730 000052E3 		cmp	r2, #0	@ wave_word,
 1562 0734 0400001A 		bne	.L119		@,
 1563              	.LVL85:
 1564              	.L97:
 1565              	@ armwave.c:248:     for(n = 0; n < npix; n += 4) {
 248:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1566              		.loc 1 248 28 discriminator 2 view .LVU423
 1567 0738 043083E2 		add	r3, r3, #4	@ n, n,
 1568              	.LVL86:
 1569              	@ armwave.c:248:     for(n = 0; n < npix; n += 4) {
 248:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1570              		.loc 1 248 5 discriminator 2 view .LVU424
 1571 073c 03005CE1 		cmp	ip, r3	@ npix, n
 1572 0740 F9FFFFCA 		bgt	.L102		@,
 1573              	.LVL87:
 1574              	.L93:
 1575              	@ armwave.c:281: }
 263:armwave.c     **** 
 264:armwave.c     ****                     r = MIN(rr, 255);
 265:armwave.c     ****                     g = MIN(gg, 255);
 266:armwave.c     ****                     b = MIN(bb, 255);
 267:armwave.c     **** 
 268:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 269:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 270:armwave.c     **** 
 271:armwave.c     ****                     // Is there a better way?
 272:armwave.c     ****                     nsub = n + i;
 273:armwave.c     ****                     xx = nsub & 0xff;
 274:armwave.c     ****                     yy = nsub >> 8;
 275:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 276:armwave.c     ****                     *(out_buffer_base + offset) = word;
 277:armwave.c     ****                 }
 278:armwave.c     ****             }
 279:armwave.c     ****         } 
 280:armwave.c     ****     }
 281:armwave.c     **** }
 1576              		.loc 1 281 1 view .LVU425
 1577 0744 0CD08DE2 		add	sp, sp, #12	@,,
 1578              		.cfi_remember_state
 1579              		.cfi_def_cfa_offset 36
 1580              		@ sp needed	@
 1581 0748 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1582              	.LVL88:
 1583              	.L119:
 1584              		.cfi_restore_state
 256:armwave.c     ****                 wave_word >>= 8;
 1585              		.loc 1 256 17 is_stmt 1 view .LVU426
 257:armwave.c     **** 
 1586              		.loc 1 257 17 view .LVU427
 1587              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1588              		.loc 1 259 19 is_stmt 0 view .LVU428
 1589 074c FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1590              	@ armwave.c:257:                 wave_word >>= 8;
 257:armwave.c     **** 
 1591              		.loc 1 257 27 view .LVU429
 1592 0750 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1593              	.LVL89:
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1594              		.loc 1 259 17 is_stmt 1 view .LVU430
 1595              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1596              		.loc 1 259 19 is_stmt 0 view .LVU431
 1597 0754 1900000A 		beq	.L98		@,
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1598              		.loc 1 260 21 is_stmt 1 view .LVU432
 1599              	.LVL90:
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1600              		.loc 1 261 21 view .LVU433
 262:armwave.c     **** 
 1601              		.loc 1 262 21 view .LVU434
 264:armwave.c     ****                     g = MIN(gg, 255);
 1602              		.loc 1 264 21 view .LVU435
 265:armwave.c     ****                     b = MIN(bb, 255);
 1603              		.loc 1 265 21 view .LVU436
 266:armwave.c     **** 
 1604              		.loc 1 266 21 view .LVU437
 269:armwave.c     **** 
 1605              		.loc 1 269 21 view .LVU438
 272:armwave.c     ****                     xx = nsub & 0xff;
 1606              		.loc 1 272 21 view .LVU439
 273:armwave.c     ****                     yy = nsub >> 8;
 1607              		.loc 1 273 21 view .LVU440
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1608              		.loc 1 274 21 view .LVU441
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1609              		.loc 1 275 21 view .LVU442
 276:armwave.c     ****                 }
 1610              		.loc 1 276 21 view .LVU443
 1611              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1612              		.loc 1 262 55 is_stmt 0 view .LVU444
 1613 0758 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1614              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1615              		.loc 1 261 55 view .LVU445
 1616 075c 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1617              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1618              		.loc 1 262 24 view .LVU446
 1619 0760 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1620              	.LVL91:
 1621              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1622              		.loc 1 266 25 view .LVU447
 1623 0764 FF0054E3 		cmp	r4, #255	@ bb,
 1624              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1625              		.loc 1 261 24 view .LVU448
 1626 0768 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1627              	.LVL92:
 1628              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1629              		.loc 1 266 25 view .LVU449
 1630 076c FF40A0A3 		movge	r4, #255	@ bb,
 1631              	.LVL93:
 1632              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1633              		.loc 1 260 55 view .LVU450
 1634 0770 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1635              	.LVL94:
 1636              	@ armwave.c:265:                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 1637              		.loc 1 265 25 view .LVU451
 1638 0774 FF0058E3 		cmp	r8, #255	@ gg,
 1639 0778 FF80A0A3 		movge	r8, #255	@ gg,
 1640              	.LVL95:
 1641              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1642              		.loc 1 260 24 view .LVU452
 1643 077c 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1644              	.LVL96:
 1645              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1646              		.loc 1 269 56 view .LVU453
 1647 0780 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1648              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1649              		.loc 1 276 39 view .LVU454
 1650 0784 340095E5 		ldr	r0, [r5, #52]	@ tmp373, g_armwave_state.target_width
 1651              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1652              		.loc 1 269 44 view .LVU455
 1653 0788 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1654              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1655              		.loc 1 264 25 view .LVU456
 1656 078c FF0056E3 		cmp	r6, #255	@ rr,
 1657              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1658              		.loc 1 269 56 view .LVU457
 1659 0790 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1660              	@ armwave.c:273:                     xx = nsub & 0xff;
 273:armwave.c     ****                     yy = nsub >> 8;
 1661              		.loc 1 273 24 view .LVU458
 1662 0794 7370EFE6 		uxtb	r7, r3	@ xx, n
 1663              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1664              		.loc 1 269 44 view .LVU459
 1665 0798 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1666              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1667              		.loc 1 269 51 view .LVU460
 1668 079c 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1669              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1670              		.loc 1 264 25 view .LVU461
 1671 07a0 FF60A0A3 		movge	r6, #255	@ rr,
 1672              	.LVL97:
 1673              	@ armwave.c:274:                     yy = nsub >> 8;
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1674              		.loc 1 274 31 view .LVU462
 1675 07a4 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1676              	.LVL98:
 1677              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1678              		.loc 1 276 39 view .LVU463
 1679 07a8 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1680              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1681              		.loc 1 269 62 view .LVU464
 1682 07ac 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1683              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1684              		.loc 1 276 49 view .LVU465
 1685 07b0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1686              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1687              		.loc 1 269 62 view .LVU466
 1688 07b4 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1689              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1690              		.loc 1 269 26 view .LVU467
 1691 07b8 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1692              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1693              		.loc 1 276 49 view .LVU468
 1694 07bc 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1695              	.LVL99:
 1696              	.L98:
 256:armwave.c     ****                 wave_word >>= 8;
 1697              		.loc 1 256 17 is_stmt 1 view .LVU469
 257:armwave.c     **** 
 1698              		.loc 1 257 17 view .LVU470
 1699              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1700              		.loc 1 259 19 is_stmt 0 view .LVU471
 1701 07c0 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1702              	.LVL100:
 1703              	@ armwave.c:257:                 wave_word >>= 8;
 257:armwave.c     **** 
 1704              		.loc 1 257 27 view .LVU472
 1705 07c4 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1706              	.LVL101:
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1707              		.loc 1 259 17 is_stmt 1 view .LVU473
 1708              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1709              		.loc 1 259 19 is_stmt 0 view .LVU474
 1710 07c8 1C00000A 		beq	.L99		@,
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1711              		.loc 1 260 21 is_stmt 1 view .LVU475
 1712              	.LVL102:
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1713              		.loc 1 261 21 view .LVU476
 262:armwave.c     **** 
 1714              		.loc 1 262 21 view .LVU477
 264:armwave.c     ****                     g = MIN(gg, 255);
 1715              		.loc 1 264 21 view .LVU478
 265:armwave.c     ****                     b = MIN(bb, 255);
 1716              		.loc 1 265 21 view .LVU479
 266:armwave.c     **** 
 1717              		.loc 1 266 21 view .LVU480
 269:armwave.c     **** 
 1718              		.loc 1 269 21 view .LVU481
 272:armwave.c     ****                     xx = nsub & 0xff;
 1719              		.loc 1 272 21 view .LVU482
 1720              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1721              		.loc 1 262 55 is_stmt 0 view .LVU483
 1722 07cc 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1723              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1724              		.loc 1 261 55 view .LVU484
 1725 07d0 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1726              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1727              		.loc 1 262 24 view .LVU485
 1728 07d4 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1729              	.LVL103:
 1730              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1731              		.loc 1 266 25 view .LVU486
 1732 07d8 FF0054E3 		cmp	r4, #255	@ bb,
 1733 07dc FF40A0A3 		movge	r4, #255	@ bb,
 1734              	.LVL104:
 1735              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1736              		.loc 1 260 55 view .LVU487
 1737 07e0 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1738              	.LVL105:
 1739              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1740              		.loc 1 261 24 view .LVU488
 1741 07e4 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1742              	.LVL106:
 1743              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1744              		.loc 1 269 44 view .LVU489
 1745 07e8 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1746              	@ armwave.c:265:                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 1747              		.loc 1 265 25 view .LVU490
 1748 07ec FF0057E3 		cmp	r7, #255	@ gg,
 1749 07f0 016083E2 		add	r6, r3, #1	@ _158, n,
 273:armwave.c     ****                     yy = nsub >> 8;
 1750              		.loc 1 273 21 is_stmt 1 view .LVU491
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1751              		.loc 1 274 21 view .LVU492
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1752              		.loc 1 275 21 view .LVU493
 276:armwave.c     ****                 }
 1753              		.loc 1 276 21 view .LVU494
 1754              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1755              		.loc 1 269 44 is_stmt 0 view .LVU495
 1756 07f4 FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1757              	@ armwave.c:265:                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 1758              		.loc 1 265 25 view .LVU496
 1759 07f8 FF70A0A3 		movge	r7, #255	@ gg,
 1760              	.LVL107:
 1761              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1762              		.loc 1 269 44 view .LVU497
 1763 07fc 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1764              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1765              		.loc 1 276 39 view .LVU498
 1766 0800 344095E5 		ldr	r4, [r5, #52]	@ tmp376, g_armwave_state.target_width
 1767              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1768              		.loc 1 260 24 view .LVU499
 1769 0804 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1770              	.LVL108:
 1771              	@ armwave.c:273:                     xx = nsub & 0xff;
 273:armwave.c     ****                     yy = nsub >> 8;
 1772              		.loc 1 273 24 view .LVU500
 1773 0808 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1774              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1775              		.loc 1 264 25 view .LVU501
 1776 080c FF005EE3 		cmp	lr, #255	@ rr,
 1777              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1778              		.loc 1 269 56 view .LVU502
 1779 0810 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1780              	@ armwave.c:274:                     yy = nsub >> 8;
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1781              		.loc 1 274 31 view .LVU503
 1782 0814 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1783              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1784              		.loc 1 276 39 view .LVU504
 1785 0818 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1786              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1787              		.loc 1 264 25 view .LVU505
 1788 081c FFE0A0A3 		movge	lr, #255	@ rr,
 1789              	.LVL109:
 1790              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1791              		.loc 1 269 51 view .LVU506
 1792 0820 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1793              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1794              		.loc 1 269 56 view .LVU507
 1795 0824 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1796              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1797              		.loc 1 269 51 view .LVU508
 1798 0828 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1799              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1800              		.loc 1 269 62 view .LVU509
 1801 082c 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1802              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1803              		.loc 1 276 49 view .LVU510
 1804 0830 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1805              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1806              		.loc 1 269 62 view .LVU511
 1807 0834 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1808              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1809              		.loc 1 269 26 view .LVU512
 1810 0838 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1811              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1812              		.loc 1 276 49 view .LVU513
 1813 083c 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1814              	.LVL110:
 1815              	.L99:
 256:armwave.c     ****                 wave_word >>= 8;
 1816              		.loc 1 256 17 is_stmt 1 view .LVU514
 257:armwave.c     **** 
 1817              		.loc 1 257 17 view .LVU515
 1818              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1819              		.loc 1 259 19 is_stmt 0 view .LVU516
 1820 0840 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1821              	@ armwave.c:257:                 wave_word >>= 8;
 257:armwave.c     **** 
 1822              		.loc 1 257 27 view .LVU517
 1823 0844 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1824              	.LVL111:
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1825              		.loc 1 259 17 is_stmt 1 view .LVU518
 1826              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1827              		.loc 1 259 19 is_stmt 0 view .LVU519
 1828 0848 1A00000A 		beq	.L100		@,
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1829              		.loc 1 260 21 is_stmt 1 view .LVU520
 1830              	.LVL112:
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1831              		.loc 1 261 21 view .LVU521
 262:armwave.c     **** 
 1832              		.loc 1 262 21 view .LVU522
 264:armwave.c     ****                     g = MIN(gg, 255);
 1833              		.loc 1 264 21 view .LVU523
 265:armwave.c     ****                     b = MIN(bb, 255);
 1834              		.loc 1 265 21 view .LVU524
 266:armwave.c     **** 
 1835              		.loc 1 266 21 view .LVU525
 269:armwave.c     **** 
 1836              		.loc 1 269 21 view .LVU526
 272:armwave.c     ****                     xx = nsub & 0xff;
 1837              		.loc 1 272 21 view .LVU527
 1838              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1839              		.loc 1 262 55 is_stmt 0 view .LVU528
 1840 084c 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1841              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1842              		.loc 1 261 55 view .LVU529
 1843 0850 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1844              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1845              		.loc 1 262 24 view .LVU530
 1846 0854 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1847              	.LVL113:
 1848              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1849              		.loc 1 260 55 view .LVU531
 1850 0858 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1851              	.LVL114:
 1852              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1853              		.loc 1 266 25 view .LVU532
 1854 085c FF0054E3 		cmp	r4, #255	@ bb,
 1855              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1856              		.loc 1 261 24 view .LVU533
 1857 0860 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1858              	.LVL115:
 1859              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1860              		.loc 1 266 25 view .LVU534
 1861 0864 FF40A0A3 		movge	r4, #255	@ bb,
 1862              	.LVL116:
 1863              	@ armwave.c:265:                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 1864              		.loc 1 265 25 view .LVU535
 1865 0868 FF0056E3 		cmp	r6, #255	@ gg,
 1866 086c FF60A0A3 		movge	r6, #255	@ gg,
 1867              	.LVL117:
 265:armwave.c     ****                     b = MIN(bb, 255);
 1868              		.loc 1 265 25 view .LVU536
 1869 0870 027083E2 		add	r7, r3, #2	@ _66, n,
 273:armwave.c     ****                     yy = nsub >> 8;
 1870              		.loc 1 273 21 is_stmt 1 view .LVU537
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1871              		.loc 1 274 21 view .LVU538
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1872              		.loc 1 275 21 view .LVU539
 276:armwave.c     ****                 }
 1873              		.loc 1 276 21 view .LVU540
 1874              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1875              		.loc 1 260 24 is_stmt 0 view .LVU541
 1876 0874 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1877              	.LVL118:
 1878              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1879              		.loc 1 276 39 view .LVU542
 1880 0878 340095E5 		ldr	r0, [r5, #52]	@ tmp377, g_armwave_state.target_width
 1881              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1882              		.loc 1 264 25 view .LVU543
 1883 087c FF005EE3 		cmp	lr, #255	@ rr,
 1884              	@ armwave.c:273:                     xx = nsub & 0xff;
 273:armwave.c     ****                     yy = nsub >> 8;
 1885              		.loc 1 273 24 view .LVU544
 1886 0880 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1887              	.LVL119:
 1888              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1889              		.loc 1 269 56 view .LVU545
 1890 0884 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1891              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1892              		.loc 1 269 44 view .LVU546
 1893 0888 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1894              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1895              		.loc 1 264 25 view .LVU547
 1896 088c FFE0A0A3 		movge	lr, #255	@ rr,
 1897              	.LVL120:
 1898              	@ armwave.c:274:                     yy = nsub >> 8;
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1899              		.loc 1 274 31 view .LVU548
 1900 0890 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1901              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1902              		.loc 1 276 39 view .LVU549
 1903 0894 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1904              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1905              		.loc 1 269 44 view .LVU550
 1906 0898 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1907              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1908              		.loc 1 269 56 view .LVU551
 1909 089c 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1910              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1911              		.loc 1 269 51 view .LVU552
 1912 08a0 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1913              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1914              		.loc 1 269 62 view .LVU553
 1915 08a4 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1916              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1917              		.loc 1 276 49 view .LVU554
 1918 08a8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1919              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1920              		.loc 1 269 62 view .LVU555
 1921 08ac 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1922              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1923              		.loc 1 269 26 view .LVU556
 1924 08b0 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1925              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 1926              		.loc 1 276 49 view .LVU557
 1927 08b4 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1928              	.L100:
 1929              	.LVL121:
 256:armwave.c     ****                 wave_word >>= 8;
 1930              		.loc 1 256 17 is_stmt 1 view .LVU558
 257:armwave.c     **** 
 1931              		.loc 1 257 17 view .LVU559
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1932              		.loc 1 259 17 view .LVU560
 1933              	@ armwave.c:259:                 if(value != 0) {
 259:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1934              		.loc 1 259 19 is_stmt 0 view .LVU561
 1935 08b8 000052E3 		cmp	r2, #0	@ wave_word,
 1936 08bc 9DFFFF0A 		beq	.L97		@,
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1937              		.loc 1 260 21 is_stmt 1 view .LVU562
 1938              	.LVL122:
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1939              		.loc 1 261 21 view .LVU563
 262:armwave.c     **** 
 1940              		.loc 1 262 21 view .LVU564
 264:armwave.c     ****                     g = MIN(gg, 255);
 1941              		.loc 1 264 21 view .LVU565
 265:armwave.c     ****                     b = MIN(bb, 255);
 1942              		.loc 1 265 21 view .LVU566
 266:armwave.c     **** 
 1943              		.loc 1 266 21 view .LVU567
 269:armwave.c     **** 
 1944              		.loc 1 269 21 view .LVU568
 272:armwave.c     ****                     xx = nsub & 0xff;
 1945              		.loc 1 272 21 view .LVU569
 1946              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1947              		.loc 1 262 55 is_stmt 0 view .LVU570
 1948 08c0 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1949              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1950              		.loc 1 261 55 view .LVU571
 1951 08c4 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1952              	@ armwave.c:262:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 262:armwave.c     **** 
 1953              		.loc 1 262 24 view .LVU572
 1954 08c8 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1955              	.LVL123:
 1956              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1957              		.loc 1 260 55 view .LVU573
 1958 08cc 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1959              	.LVL124:
 1960              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1961              		.loc 1 266 25 view .LVU574
 1962 08d0 FF005EE3 		cmp	lr, #255	@ bb,
 1963              	@ armwave.c:261:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 261:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1964              		.loc 1 261 24 view .LVU575
 1965 08d4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1966              	.LVL125:
 1967              	@ armwave.c:266:                     b = MIN(bb, 255);
 266:armwave.c     **** 
 1968              		.loc 1 266 25 view .LVU576
 1969 08d8 FFE0A0A3 		movge	lr, #255	@ bb,
 1970              	.LVL126:
 1971              	@ armwave.c:265:                     g = MIN(gg, 255);
 265:armwave.c     ****                     b = MIN(bb, 255);
 1972              		.loc 1 265 25 view .LVU577
 1973 08dc FF0054E3 		cmp	r4, #255	@ gg,
 1974 08e0 FF40A0A3 		movge	r4, #255	@ gg,
 1975              	.LVL127:
 265:armwave.c     ****                     b = MIN(bb, 255);
 1976              		.loc 1 265 25 view .LVU578
 1977 08e4 036083E2 		add	r6, r3, #3	@ _59, n,
 273:armwave.c     ****                     yy = nsub >> 8;
 1978              		.loc 1 273 21 is_stmt 1 view .LVU579
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1979              		.loc 1 274 21 view .LVU580
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1980              		.loc 1 275 21 view .LVU581
 276:armwave.c     ****                 }
 1981              		.loc 1 276 21 view .LVU582
 1982              	@ armwave.c:260:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 260:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1983              		.loc 1 260 24 is_stmt 0 view .LVU583
 1984 08e8 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1985              	.LVL128:
 1986              	@ armwave.c:275:                     offset = yy + (xx * g_armwave_state.target_width);
 275:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1987              		.loc 1 275 39 view .LVU584
 1988 08ec 347095E5 		ldr	r7, [r5, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1989              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 1990              		.loc 1 264 25 view .LVU585
 1991 08f0 FF0052E3 		cmp	r2, #255	@ rr,
 1992              	@ armwave.c:273:                     xx = nsub & 0xff;
 273:armwave.c     ****                     yy = nsub >> 8;
 1993              		.loc 1 273 24 view .LVU586
 1994 08f4 7680EFE6 		uxtb	r8, r6	@ xx, _59
 1995              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1996              		.loc 1 269 56 view .LVU587
 1997 08f8 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 1998              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 1999              		.loc 1 269 44 view .LVU588
 2000 08fc 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2001              	@ armwave.c:264:                     r = MIN(rr, 255);
 264:armwave.c     ****                     g = MIN(gg, 255);
 2002              		.loc 1 264 25 view .LVU589
 2003 0900 FF20A0A3 		movge	r2, #255	@ rr,
 2004              	.LVL129:
 2005              	@ armwave.c:274:                     yy = nsub >> 8;
 274:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2006              		.loc 1 274 31 view .LVU590
 2007 0904 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2008              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2009              		.loc 1 269 44 view .LVU591
 2010 0908 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2011              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2012              		.loc 1 269 56 view .LVU592
 2013 090c 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2014              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 2015              		.loc 1 276 39 view .LVU593
 2016 0910 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2017              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2018              		.loc 1 269 51 view .LVU594
 2019 0914 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2020              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2021              		.loc 1 269 62 view .LVU595
 2022 0918 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2023              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 2024              		.loc 1 276 49 view .LVU596
 2025 091c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2026              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2027              		.loc 1 269 62 view .LVU597
 2028 0920 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2029              	@ armwave.c:269:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 269:armwave.c     **** 
 2030              		.loc 1 269 26 view .LVU598
 2031 0924 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2032              	@ armwave.c:276:                     *(out_buffer_base + offset) = word;
 276:armwave.c     ****                 }
 2033              		.loc 1 276 49 view .LVU599
 2034 0928 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2035 092c 81FFFFEA 		b	.L97		@
 2036              	.LVL130:
 2037              	.L118:
 242:armwave.c     **** 
 2038              		.loc 1 242 5 is_stmt 1 discriminator 1 view .LVU600
 2039 0930 10309FE5 		ldr	r3, .L120+4	@,
 2040 0934 F220A0E3 		mov	r2, #242	@,
 2041 0938 0C109FE5 		ldr	r1, .L120+8	@,
 2042              	.LVL131:
 242:armwave.c     **** 
 2043              		.loc 1 242 5 is_stmt 0 discriminator 1 view .LVU601
 2044 093c 0C009FE5 		ldr	r0, .L120+12	@,
 2045              	.LVL132:
 242:armwave.c     **** 
 2046              		.loc 1 242 5 discriminator 1 view .LVU602
 2047 0940 FEFFFFEB 		bl	__assert_fail		@
 2048              	.LVL133:
 2049              	.L121:
 242:armwave.c     **** 
 2050              		.loc 1 242 5 discriminator 1 view .LVU603
 2051              		.align	2
 2052              	.L120:
 2053 0944 00000000 		.word	g_armwave_state
 2054 0948 18000000 		.word	.LANCHOR0+24
 2055 094c 00000000 		.word	.LC0
 2056 0950 D4000000 		.word	.LC5
 2057              		.cfi_endproc
 2058              	.LFE63:
 2060              		.align	2
 2061              		.global	armwave_fill_pixbuf_scaled
 2062              		.syntax unified
 2063              		.arm
 2064              		.fpu vfp
 2066              	armwave_fill_pixbuf_scaled:
 2067              	.LVL134:
 2068              	.LFB64:
 282:armwave.c     **** 
 283:armwave.c     **** /*
 284:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 285:armwave.c     ****  * Rows are repeated as necessary.
 286:armwave.c     ****  */
 287:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 288:armwave.c     **** {
 2069              		.loc 1 288 1 is_stmt 1 view -0
 2070              		.cfi_startproc
 2071              		@ args = 0, pretend = 0, frame = 16
 2072              		@ frame_needed = 0, uses_anonymous_args = 0
 289:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2073              		.loc 1 289 5 view .LVU605
 290:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i, vscale;
 2074              		.loc 1 290 5 view .LVU606
 291:armwave.c     ****     uint8_t r, g, b, value;
 2075              		.loc 1 291 5 view .LVU607
 292:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2076              		.loc 1 292 5 view .LVU608
 2077              	@ armwave.c:288: {
 288:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2078              		.loc 1 288 1 is_stmt 0 view .LVU609
 2079 0954 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2080              		.cfi_def_cfa_offset 36
 2081              		.cfi_offset 4, -36
 2082              		.cfi_offset 5, -32
 2083              		.cfi_offset 6, -28
 2084              		.cfi_offset 7, -24
 2085              		.cfi_offset 8, -20
 2086              		.cfi_offset 9, -16
 2087              		.cfi_offset 10, -12
 2088              		.cfi_offset 11, -8
 2089              		.cfi_offset 14, -4
 2090              	@ armwave.c:296:     assert(out_buffer != NULL);
 293:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 294:armwave.c     ****     uint32_t offset;
 295:armwave.c     **** 
 296:armwave.c     ****     assert(out_buffer != NULL);
 2091              		.loc 1 296 5 view .LVU610
 2092 0958 000050E3 		cmp	r0, #0	@ out_buffer
 2093              	@ armwave.c:292:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 292:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2094              		.loc 1 292 15 view .LVU611
 2095 095c 7CE29FE5 		ldr	lr, .L149	@ tmp371,
 2096              	@ armwave.c:288: {
 288:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2097              		.loc 1 288 1 view .LVU612
 2098 0960 14D04DE2 		sub	sp, sp, #20	@,,
 2099              		.cfi_def_cfa_offset 56
 2100              	@ armwave.c:292:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 292:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2101              		.loc 1 292 15 view .LVU613
 2102 0964 04109EE5 		ldr	r1, [lr, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2103              	.LVL135:
 293:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2104              		.loc 1 293 5 is_stmt 1 view .LVU614
 294:armwave.c     **** 
 2105              		.loc 1 294 5 view .LVU615
 2106              		.loc 1 296 5 view .LVU616
 2107 0968 9700000A 		beq	.L147		@,
 297:armwave.c     **** 
 298:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 299:armwave.c     **** 
 300:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2108              		.loc 1 300 5 view .LVU617
 2109              	@ armwave.c:300:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2110              		.loc 1 300 41 is_stmt 0 view .LVU618
 2111 096c 34C09EE5 		ldr	ip, [lr, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2112              	@ armwave.c:301:     vscale = g_armwave_state.target_height / 256;
 301:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2113              		.loc 1 301 44 view .LVU619
 2114 0970 38709EE5 		ldr	r7, [lr, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2115              	@ armwave.c:300:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 300:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2116              		.loc 1 300 41 view .LVU620
 2117 0974 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 2118              	.LVL136:
 2119              		.loc 1 301 5 is_stmt 1 view .LVU621
 2120              	@ armwave.c:303:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     **** 
 303:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2121              		.loc 1 303 5 is_stmt 0 view .LVU622
 2122 0978 00005CE3 		cmp	ip, #0	@ npix,
 2123              	@ armwave.c:301:     vscale = g_armwave_state.target_height / 256;
 301:armwave.c     **** 
 2124              		.loc 1 301 44 view .LVU623
 2125 097c 2774A0E1 		lsr	r7, r7, #8	@ _4, g_armwave_state.target_height,
 2126              	.LVL137:
 2127              		.loc 1 303 5 is_stmt 1 view .LVU624
 2128              		.loc 1 303 5 is_stmt 0 view .LVU625
 2129 0980 0C0000DA 		ble	.L122		@,
 2130              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 304:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 305:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 306:armwave.c     ****         // most normal waveforms.
 307:armwave.c     ****         wave_word = *base_32ptr++;
 308:armwave.c     **** 
 309:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 310:armwave.c     ****             for(i = 0; i < 4; i++) {
 311:armwave.c     ****                 value = wave_word & 0xff;
 312:armwave.c     ****                 wave_word >>= 8;
 313:armwave.c     **** 
 314:armwave.c     ****                 if(value != 0) {
 315:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 316:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2131              		.loc 1 316 52 view .LVU626
 2132 0984 FA34DEE1 		ldrsh	r3, [lr, #74]	@ _79, g_armwave_state.ch1_color.g
 2133              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2134              		.loc 1 315 52 view .LVU627
 2135 0988 F884DEE1 		ldrsh	r8, [lr, #72]	@ _73, g_armwave_state.ch1_color.r
 2136              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2137              		.loc 1 317 52 view .LVU628
 2138 098c FCB4DEE1 		ldrsh	fp, [lr, #76]	@ _83, g_armwave_state.ch1_color.b
 2139              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2140              		.loc 1 316 52 view .LVU629
 2141 0990 04308DE5 		str	r3, [sp, #4]	@ _79, %sfp
 2142              	@ armwave.c:303:     for(n = 0; n < npix; n += 4) {
 303:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2143              		.loc 1 303 11 view .LVU630
 2144 0994 07A0A0E1 		mov	r10, r7	@ _4, _4
 2145 0998 0030A0E3 		mov	r3, #0	@ n,
 2146 099c 08008DE5 		str	r0, [sp, #8]	@ out_buffer, %sfp
 2147              	.LVL138:
 2148              	.L131:
 307:armwave.c     **** 
 2149              		.loc 1 307 9 is_stmt 1 view .LVU631
 2150              	@ armwave.c:307:         wave_word = *base_32ptr++;
 307:armwave.c     **** 
 2151              		.loc 1 307 19 is_stmt 0 view .LVU632
 2152 09a0 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_49, offset: 4294967292B]
 2153              	.LVL139:
 309:armwave.c     ****             for(i = 0; i < 4; i++) {
 2154              		.loc 1 309 9 is_stmt 1 view .LVU633
 2155              	@ armwave.c:309:         if(COND_UNLIKELY(wave_word != 0)) {
 309:armwave.c     ****             for(i = 0; i < 4; i++) {
 2156              		.loc 1 309 11 is_stmt 0 view .LVU634
 2157 09a4 000052E3 		cmp	r2, #0	@ wave_word,
 2158 09a8 0400001A 		bne	.L148		@,
 2159              	.LVL140:
 2160              	.L126:
 2161              	@ armwave.c:303:     for(n = 0; n < npix; n += 4) {
 303:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2162              		.loc 1 303 28 discriminator 2 view .LVU635
 2163 09ac 043083E2 		add	r3, r3, #4	@ n, n,
 2164              	.LVL141:
 2165              	@ armwave.c:303:     for(n = 0; n < npix; n += 4) {
 303:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2166              		.loc 1 303 5 discriminator 2 view .LVU636
 2167 09b0 03005CE1 		cmp	ip, r3	@ npix, n
 2168 09b4 F9FFFFCA 		bgt	.L131		@,
 2169              	.LVL142:
 2170              	.L122:
 2171              	@ armwave.c:336: }
 318:armwave.c     **** 
 319:armwave.c     ****                     r = MIN(rr, 255);
 320:armwave.c     ****                     g = MIN(gg, 255);
 321:armwave.c     ****                     b = MIN(bb, 255);
 322:armwave.c     **** 
 323:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 324:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 325:armwave.c     **** 
 326:armwave.c     ****                     // Do line scaling as necessary.
 327:armwave.c     ****                     nsub = n + i;
 328:armwave.c     ****                     xx = nsub & 0xff;
 329:armwave.c     ****                     yy = nsub >> 8;
 330:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 331:armwave.c     ****                     *(out_buffer_base + offset) = word;
 332:armwave.c     ****                 }
 333:armwave.c     ****             }
 334:armwave.c     ****         } 
 335:armwave.c     ****     }
 336:armwave.c     **** }
 2172              		.loc 1 336 1 view .LVU637
 2173 09b8 14D08DE2 		add	sp, sp, #20	@,,
 2174              		.cfi_remember_state
 2175              		.cfi_def_cfa_offset 36
 2176              		@ sp needed	@
 2177 09bc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2178              	.LVL143:
 2179              	.L148:
 2180              		.cfi_restore_state
 311:armwave.c     ****                 wave_word >>= 8;
 2181              		.loc 1 311 17 is_stmt 1 view .LVU638
 312:armwave.c     **** 
 2182              		.loc 1 312 17 view .LVU639
 2183              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2184              		.loc 1 314 19 is_stmt 0 view .LVU640
 2185 09c0 FF5012E2 		ands	r5, r2, #255	@ _75, wave_word,
 2186              	@ armwave.c:312:                 wave_word >>= 8;
 312:armwave.c     **** 
 2187              		.loc 1 312 27 view .LVU641
 2188 09c4 2264A0E1 		lsr	r6, r2, #8	@ wave_word, wave_word,
 2189              	.LVL144:
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2190              		.loc 1 314 17 is_stmt 1 view .LVU642
 2191              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2192              		.loc 1 314 19 is_stmt 0 view .LVU643
 2193 09c8 1D00000A 		beq	.L127		@,
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2194              		.loc 1 315 21 is_stmt 1 view .LVU644
 2195              	.LVL145:
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2196              		.loc 1 316 21 view .LVU645
 317:armwave.c     **** 
 2197              		.loc 1 317 21 view .LVU646
 319:armwave.c     ****                     g = MIN(gg, 255);
 2198              		.loc 1 319 21 view .LVU647
 320:armwave.c     ****                     b = MIN(bb, 255);
 2199              		.loc 1 320 21 view .LVU648
 321:armwave.c     **** 
 2200              		.loc 1 321 21 view .LVU649
 324:armwave.c     **** 
 2201              		.loc 1 324 21 view .LVU650
 327:armwave.c     ****                     xx = nsub & 0xff;
 2202              		.loc 1 327 21 view .LVU651
 328:armwave.c     ****                     yy = nsub >> 8;
 2203              		.loc 1 328 21 view .LVU652
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2204              		.loc 1 329 21 view .LVU653
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2205              		.loc 1 330 21 view .LVU654
 331:armwave.c     ****                 }
 2206              		.loc 1 331 21 view .LVU655
 2207              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2208              		.loc 1 316 55 is_stmt 0 view .LVU656
 2209 09cc 04409DE5 		ldr	r4, [sp, #4]	@ _79, %sfp
 2210              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2211              		.loc 1 317 55 view .LVU657
 2212 09d0 9B0507E0 		mul	r7, fp, r5	@ tmp286, _83, _75
 2213              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2214              		.loc 1 315 55 view .LVU658
 2215 09d4 950800E0 		mul	r0, r5, r8	@ tmp296, _75, _73
 2216              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2217              		.loc 1 316 55 view .LVU659
 2218 09d8 940504E0 		mul	r4, r4, r5	@ tmp290, _79, _75
 2219              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2220              		.loc 1 330 34 view .LVU660
 2221 09dc 34509EE5 		ldr	r5, [lr, #52]	@ tmp388, g_armwave_state.target_width
 2222              	.LVL146:
 2223              	@ armwave.c:328:                     xx = nsub & 0xff;
 328:armwave.c     ****                     yy = nsub >> 8;
 2224              		.loc 1 328 24 view .LVU661
 2225 09e0 7390EFE6 		uxtb	r9, r3	@ xx, n
 2226              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2227              		.loc 1 317 24 view .LVU662
 2228 09e4 4774A0E1 		asr	r7, r7, #8	@ bb, tmp286,
 2229              	.LVL147:
 2230              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2231              		.loc 1 315 55 view .LVU663
 2232 09e8 0C008DE5 		str	r0, [sp, #12]	@ tmp296, %sfp
 2233              	@ armwave.c:329:                     yy = nsub >> 8;
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2234              		.loc 1 329 31 view .LVU664
 2235 09ec 4304A0E1 		asr	r0, r3, #8	@ yy, n,
 2236              	.LVL148:
 2237              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2238              		.loc 1 321 25 view .LVU665
 2239 09f0 FF0057E3 		cmp	r7, #255	@ bb,
 2240              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2241              		.loc 1 316 24 view .LVU666
 2242 09f4 4444A0E1 		asr	r4, r4, #8	@ gg, tmp290,
 2243              	.LVL149:
 2244              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2245              		.loc 1 330 34 view .LVU667
 2246 09f8 950929E0 		mla	r9, r5, r9, r0	@ tmp283, tmp388, xx, yy
 2247              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2248              		.loc 1 315 24 view .LVU668
 2249 09fc 0C009DE5 		ldr	r0, [sp, #12]	@ tmp296, %sfp
 2250              	.LVL150:
 2251              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2252              		.loc 1 321 25 view .LVU669
 2253 0a00 FF70A0A3 		movge	r7, #255	@ bb,
 2254              	.LVL151:
 2255              	@ armwave.c:320:                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 2256              		.loc 1 320 25 view .LVU670
 2257 0a04 FF0054E3 		cmp	r4, #255	@ gg,
 2258 0a08 FF40A0A3 		movge	r4, #255	@ gg,
 2259              	.LVL152:
 2260              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2261              		.loc 1 315 24 view .LVU671
 2262 0a0c 4054A0E1 		asr	r5, r0, #8	@ rr, tmp296,
 2263              	.LVL153:
 2264              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2265              		.loc 1 319 25 view .LVU672
 2266 0a10 FF0055E3 		cmp	r5, #255	@ rr,
 2267              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2268              		.loc 1 324 56 view .LVU673
 2269 0a14 0444A0E1 		lsl	r4, r4, #8	@ tmp291, gg,
 2270              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2271              		.loc 1 324 44 view .LVU674
 2272 0a18 0778A0E1 		lsl	r7, r7, #16	@ tmp287, bb,
 2273              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2274              		.loc 1 319 25 view .LVU675
 2275 0a1c FF50A0A3 		movge	r5, #255	@ rr,
 2276              	.LVL154:
 2277              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2278              		.loc 1 324 44 view .LVU676
 2279 0a20 FF7807E2 		and	r7, r7, #16711680	@ tmp288, tmp287,
 2280              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2281              		.loc 1 324 56 view .LVU677
 2282 0a24 7440FFE6 		uxth	r4, r4	@ tmp292, tmp291
 2283              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2284              		.loc 1 331 39 view .LVU678
 2285 0a28 9A0909E0 		mul	r9, r10, r9	@ tmp284, _4, tmp283
 2286              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2287              		.loc 1 324 51 view .LVU679
 2288 0a2c 044087E1 		orr	r4, r7, r4	@ tmp294, tmp288, tmp292
 2289              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2290              		.loc 1 324 62 view .LVU680
 2291 0a30 7550EFE6 		uxtb	r5, r5	@ rr, rr
 2292              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2293              		.loc 1 331 49 view .LVU681
 2294 0a34 08009DE5 		ldr	r0, [sp, #8]	@ out_buffer, %sfp
 2295              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2296              		.loc 1 324 62 view .LVU682
 2297 0a38 054084E1 		orr	r4, r4, r5	@ tmp298, tmp294, rr
 2298              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2299              		.loc 1 324 26 view .LVU683
 2300 0a3c FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp298,
 2301              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2302              		.loc 1 331 49 view .LVU684
 2303 0a40 094180E7 		str	r4, [r0, r9, lsl #2]	@ word, *_110
 2304              	.LVL155:
 2305              	.L127:
 311:armwave.c     ****                 wave_word >>= 8;
 2306              		.loc 1 311 17 is_stmt 1 view .LVU685
 312:armwave.c     **** 
 2307              		.loc 1 312 17 view .LVU686
 2308              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2309              		.loc 1 314 19 is_stmt 0 view .LVU687
 2310 0a44 FF6016E2 		ands	r6, r6, #255	@ _122, wave_word,
 2311              	.LVL156:
 2312              	@ armwave.c:312:                 wave_word >>= 8;
 312:armwave.c     **** 
 2313              		.loc 1 312 27 view .LVU688
 2314 0a48 2248A0E1 		lsr	r4, r2, #16	@ wave_word, wave_word,
 2315              	.LVL157:
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2316              		.loc 1 314 17 is_stmt 1 view .LVU689
 2317              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2318              		.loc 1 314 19 is_stmt 0 view .LVU690
 2319 0a4c 1E00000A 		beq	.L128		@,
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2320              		.loc 1 315 21 is_stmt 1 view .LVU691
 2321              	.LVL158:
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2322              		.loc 1 316 21 view .LVU692
 317:armwave.c     **** 
 2323              		.loc 1 317 21 view .LVU693
 319:armwave.c     ****                     g = MIN(gg, 255);
 2324              		.loc 1 319 21 view .LVU694
 320:armwave.c     ****                     b = MIN(bb, 255);
 2325              		.loc 1 320 21 view .LVU695
 321:armwave.c     **** 
 2326              		.loc 1 321 21 view .LVU696
 324:armwave.c     **** 
 2327              		.loc 1 324 21 view .LVU697
 327:armwave.c     ****                     xx = nsub & 0xff;
 2328              		.loc 1 327 21 view .LVU698
 2329              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2330              		.loc 1 316 55 is_stmt 0 view .LVU699
 2331 0a50 04009DE5 		ldr	r0, [sp, #4]	@ _79, %sfp
 2332              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2333              		.loc 1 317 55 view .LVU700
 2334 0a54 960B09E0 		mul	r9, r6, fp	@ tmp310, _122, _83
 2335              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2336              		.loc 1 316 55 view .LVU701
 2337 0a58 960005E0 		mul	r5, r6, r0	@ tmp314, _122, _79
 2338              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2339              		.loc 1 315 55 view .LVU702
 2340 0a5c 960800E0 		mul	r0, r6, r8	@ tmp320, _122, _73
 2341 0a60 017083E2 		add	r7, r3, #1	@ _208, n,
 328:armwave.c     ****                     yy = nsub >> 8;
 2342              		.loc 1 328 21 is_stmt 1 view .LVU703
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2343              		.loc 1 329 21 view .LVU704
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2344              		.loc 1 330 21 view .LVU705
 331:armwave.c     ****                 }
 2345              		.loc 1 331 21 view .LVU706
 2346              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2347              		.loc 1 330 34 is_stmt 0 view .LVU707
 2348 0a64 34609EE5 		ldr	r6, [lr, #52]	@ tmp393, g_armwave_state.target_width
 2349              	.LVL159:
 2350              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2351              		.loc 1 315 55 view .LVU708
 2352 0a68 0C008DE5 		str	r0, [sp, #12]	@ tmp320, %sfp
 2353              	@ armwave.c:328:                     xx = nsub & 0xff;
 328:armwave.c     ****                     yy = nsub >> 8;
 2354              		.loc 1 328 24 view .LVU709
 2355 0a6c 7700EFE6 		uxtb	r0, r7	@ xx, _208
 2356              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2357              		.loc 1 317 24 view .LVU710
 2358 0a70 4994A0E1 		asr	r9, r9, #8	@ bb, tmp310,
 2359              	.LVL160:
 2360              	@ armwave.c:329:                     yy = nsub >> 8;
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2361              		.loc 1 329 31 view .LVU711
 2362 0a74 4774A0E1 		asr	r7, r7, #8	@ yy, _208,
 2363              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2364              		.loc 1 321 25 view .LVU712
 2365 0a78 FF0059E3 		cmp	r9, #255	@ bb,
 2366              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2367              		.loc 1 316 24 view .LVU713
 2368 0a7c 4554A0E1 		asr	r5, r5, #8	@ gg, tmp314,
 2369              	.LVL161:
 2370              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2371              		.loc 1 330 34 view .LVU714
 2372 0a80 967027E0 		mla	r7, r6, r0, r7	@ tmp307, tmp393, xx, yy
 2373              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2374              		.loc 1 315 24 view .LVU715
 2375 0a84 0C009DE5 		ldr	r0, [sp, #12]	@ tmp320, %sfp
 2376              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2377              		.loc 1 321 25 view .LVU716
 2378 0a88 FF90A0A3 		movge	r9, #255	@ bb,
 2379              	.LVL162:
 2380              	@ armwave.c:320:                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 2381              		.loc 1 320 25 view .LVU717
 2382 0a8c FF0055E3 		cmp	r5, #255	@ gg,
 2383 0a90 FF50A0A3 		movge	r5, #255	@ gg,
 2384              	.LVL163:
 2385              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2386              		.loc 1 315 24 view .LVU718
 2387 0a94 4064A0E1 		asr	r6, r0, #8	@ rr, tmp320,
 2388              	.LVL164:
 2389              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2390              		.loc 1 319 25 view .LVU719
 2391 0a98 FF0056E3 		cmp	r6, #255	@ rr,
 2392              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2393              		.loc 1 324 56 view .LVU720
 2394 0a9c 0554A0E1 		lsl	r5, r5, #8	@ tmp315, gg,
 2395              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2396              		.loc 1 324 44 view .LVU721
 2397 0aa0 0998A0E1 		lsl	r9, r9, #16	@ tmp311, bb,
 2398              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2399              		.loc 1 319 25 view .LVU722
 2400 0aa4 FF60A0A3 		movge	r6, #255	@ rr,
 2401              	.LVL165:
 2402              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2403              		.loc 1 324 44 view .LVU723
 2404 0aa8 FF9809E2 		and	r9, r9, #16711680	@ tmp312, tmp311,
 2405              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2406              		.loc 1 324 56 view .LVU724
 2407 0aac 7550FFE6 		uxth	r5, r5	@ tmp316, tmp315
 2408              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2409              		.loc 1 331 39 view .LVU725
 2410 0ab0 9A0707E0 		mul	r7, r10, r7	@ tmp308, _4, tmp307
 2411              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2412              		.loc 1 324 51 view .LVU726
 2413 0ab4 055089E1 		orr	r5, r9, r5	@ tmp318, tmp312, tmp316
 2414              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2415              		.loc 1 324 62 view .LVU727
 2416 0ab8 7660EFE6 		uxtb	r6, r6	@ rr, rr
 2417              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2418              		.loc 1 331 49 view .LVU728
 2419 0abc 08009DE5 		ldr	r0, [sp, #8]	@ out_buffer, %sfp
 2420              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2421              		.loc 1 324 62 view .LVU729
 2422 0ac0 065085E1 		orr	r5, r5, r6	@ tmp322, tmp318, rr
 2423              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2424              		.loc 1 324 26 view .LVU730
 2425 0ac4 FF5485E3 		orr	r5, r5, #-16777216	@ word, tmp322,
 2426              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2427              		.loc 1 331 49 view .LVU731
 2428 0ac8 075180E7 		str	r5, [r0, r7, lsl #2]	@ word, *_157
 2429              	.LVL166:
 2430              	.L128:
 311:armwave.c     ****                 wave_word >>= 8;
 2431              		.loc 1 311 17 is_stmt 1 view .LVU732
 312:armwave.c     **** 
 2432              		.loc 1 312 17 view .LVU733
 2433              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2434              		.loc 1 314 19 is_stmt 0 view .LVU734
 2435 0acc FF4014E2 		ands	r4, r4, #255	@ _169, wave_word,
 2436              	.LVL167:
 2437              	@ armwave.c:312:                 wave_word >>= 8;
 312:armwave.c     **** 
 2438              		.loc 1 312 27 view .LVU735
 2439 0ad0 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2440              	.LVL168:
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2441              		.loc 1 314 17 is_stmt 1 view .LVU736
 2442              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2443              		.loc 1 314 19 is_stmt 0 view .LVU737
 2444 0ad4 1C00000A 		beq	.L129		@,
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2445              		.loc 1 315 21 is_stmt 1 view .LVU738
 2446              	.LVL169:
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2447              		.loc 1 316 21 view .LVU739
 317:armwave.c     **** 
 2448              		.loc 1 317 21 view .LVU740
 319:armwave.c     ****                     g = MIN(gg, 255);
 2449              		.loc 1 319 21 view .LVU741
 320:armwave.c     ****                     b = MIN(bb, 255);
 2450              		.loc 1 320 21 view .LVU742
 321:armwave.c     **** 
 2451              		.loc 1 321 21 view .LVU743
 324:armwave.c     **** 
 2452              		.loc 1 324 21 view .LVU744
 327:armwave.c     ****                     xx = nsub & 0xff;
 2453              		.loc 1 327 21 view .LVU745
 2454              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2455              		.loc 1 316 55 is_stmt 0 view .LVU746
 2456 0ad8 04009DE5 		ldr	r0, [sp, #4]	@ _79, %sfp
 2457              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2458              		.loc 1 317 55 view .LVU747
 2459 0adc 940B05E0 		mul	r5, r4, fp	@ tmp334, _169, _83
 2460              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2461              		.loc 1 316 55 view .LVU748
 2462 0ae0 940007E0 		mul	r7, r4, r0	@ tmp338, _169, _79
 2463 0ae4 026083E2 		add	r6, r3, #2	@ _100, n,
 328:armwave.c     ****                     yy = nsub >> 8;
 2464              		.loc 1 328 21 is_stmt 1 view .LVU749
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2465              		.loc 1 329 21 view .LVU750
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2466              		.loc 1 330 21 view .LVU751
 331:armwave.c     ****                 }
 2467              		.loc 1 331 21 view .LVU752
 2468              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2469              		.loc 1 317 24 is_stmt 0 view .LVU753
 2470 0ae8 4554A0E1 		asr	r5, r5, #8	@ bb, tmp334,
 2471              	.LVL170:
 2472              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2473              		.loc 1 330 34 view .LVU754
 2474 0aec 34009EE5 		ldr	r0, [lr, #52]	@ tmp395, g_armwave_state.target_width
 2475              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2476              		.loc 1 315 55 view .LVU755
 2477 0af0 940804E0 		mul	r4, r4, r8	@ tmp344, _169, _73
 2478              	.LVL171:
 2479              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2480              		.loc 1 321 25 view .LVU756
 2481 0af4 FF0055E3 		cmp	r5, #255	@ bb,
 2482              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2483              		.loc 1 316 24 view .LVU757
 2484 0af8 4774A0E1 		asr	r7, r7, #8	@ gg, tmp338,
 2485              	.LVL172:
 2486              	@ armwave.c:328:                     xx = nsub & 0xff;
 328:armwave.c     ****                     yy = nsub >> 8;
 2487              		.loc 1 328 24 view .LVU758
 2488 0afc 7690EFE6 		uxtb	r9, r6	@ xx, _100
 2489              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2490              		.loc 1 321 25 view .LVU759
 2491 0b00 FF50A0A3 		movge	r5, #255	@ bb,
 2492              	.LVL173:
 2493              	@ armwave.c:329:                     yy = nsub >> 8;
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2494              		.loc 1 329 31 view .LVU760
 2495 0b04 4664A0E1 		asr	r6, r6, #8	@ yy, _100,
 2496              	@ armwave.c:320:                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 2497              		.loc 1 320 25 view .LVU761
 2498 0b08 FF0057E3 		cmp	r7, #255	@ gg,
 2499 0b0c FF70A0A3 		movge	r7, #255	@ gg,
 2500              	.LVL174:
 2501              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2502              		.loc 1 330 34 view .LVU762
 2503 0b10 906926E0 		mla	r6, r0, r9, r6	@ tmp331, tmp395, xx, yy
 2504              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2505              		.loc 1 315 24 view .LVU763
 2506 0b14 4444A0E1 		asr	r4, r4, #8	@ rr, tmp344,
 2507              	.LVL175:
 2508              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2509              		.loc 1 319 25 view .LVU764
 2510 0b18 FF0054E3 		cmp	r4, #255	@ rr,
 2511              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2512              		.loc 1 324 56 view .LVU765
 2513 0b1c 0774A0E1 		lsl	r7, r7, #8	@ tmp339, gg,
 2514              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2515              		.loc 1 324 44 view .LVU766
 2516 0b20 0558A0E1 		lsl	r5, r5, #16	@ tmp335, bb,
 2517              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2518              		.loc 1 319 25 view .LVU767
 2519 0b24 FF40A0A3 		movge	r4, #255	@ rr,
 2520              	.LVL176:
 2521              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2522              		.loc 1 324 44 view .LVU768
 2523 0b28 FF5805E2 		and	r5, r5, #16711680	@ tmp336, tmp335,
 2524              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2525              		.loc 1 324 56 view .LVU769
 2526 0b2c 7770FFE6 		uxth	r7, r7	@ tmp340, tmp339
 2527              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2528              		.loc 1 331 39 view .LVU770
 2529 0b30 9A0606E0 		mul	r6, r10, r6	@ tmp332, _4, tmp331
 2530              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2531              		.loc 1 324 51 view .LVU771
 2532 0b34 077085E1 		orr	r7, r5, r7	@ tmp342, tmp336, tmp340
 2533              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2534              		.loc 1 324 62 view .LVU772
 2535 0b38 7440EFE6 		uxtb	r4, r4	@ rr, rr
 2536              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2537              		.loc 1 331 49 view .LVU773
 2538 0b3c 08009DE5 		ldr	r0, [sp, #8]	@ out_buffer, %sfp
 2539              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2540              		.loc 1 324 62 view .LVU774
 2541 0b40 044087E1 		orr	r4, r7, r4	@ tmp346, tmp342, rr
 2542              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2543              		.loc 1 324 26 view .LVU775
 2544 0b44 FF4484E3 		orr	r4, r4, #-16777216	@ word, tmp346,
 2545              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2546              		.loc 1 331 49 view .LVU776
 2547 0b48 064180E7 		str	r4, [r0, r6, lsl #2]	@ word, *_204
 2548              	.L129:
 2549              	.LVL177:
 311:armwave.c     ****                 wave_word >>= 8;
 2550              		.loc 1 311 17 is_stmt 1 view .LVU777
 312:armwave.c     **** 
 2551              		.loc 1 312 17 view .LVU778
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2552              		.loc 1 314 17 view .LVU779
 2553              	@ armwave.c:314:                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2554              		.loc 1 314 19 is_stmt 0 view .LVU780
 2555 0b4c 000052E3 		cmp	r2, #0	@ wave_word,
 2556 0b50 95FFFF0A 		beq	.L126		@,
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2557              		.loc 1 315 21 is_stmt 1 view .LVU781
 2558              	.LVL178:
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2559              		.loc 1 316 21 view .LVU782
 317:armwave.c     **** 
 2560              		.loc 1 317 21 view .LVU783
 319:armwave.c     ****                     g = MIN(gg, 255);
 2561              		.loc 1 319 21 view .LVU784
 320:armwave.c     ****                     b = MIN(bb, 255);
 2562              		.loc 1 320 21 view .LVU785
 321:armwave.c     **** 
 2563              		.loc 1 321 21 view .LVU786
 324:armwave.c     **** 
 2564              		.loc 1 324 21 view .LVU787
 327:armwave.c     ****                     xx = nsub & 0xff;
 2565              		.loc 1 327 21 view .LVU788
 2566              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2567              		.loc 1 316 55 is_stmt 0 view .LVU789
 2568 0b54 04009DE5 		ldr	r0, [sp, #4]	@ _79, %sfp
 2569              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2570              		.loc 1 317 55 view .LVU790
 2571 0b58 920B04E0 		mul	r4, r2, fp	@ tmp356, wave_word, _83
 2572              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2573              		.loc 1 316 55 view .LVU791
 2574 0b5c 920006E0 		mul	r6, r2, r0	@ tmp360, wave_word, _79
 2575 0b60 035083E2 		add	r5, r3, #3	@ _64, n,
 328:armwave.c     ****                     yy = nsub >> 8;
 2576              		.loc 1 328 21 is_stmt 1 view .LVU792
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2577              		.loc 1 329 21 view .LVU793
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2578              		.loc 1 330 21 view .LVU794
 331:armwave.c     ****                 }
 2579              		.loc 1 331 21 view .LVU795
 2580              	@ armwave.c:317:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 317:armwave.c     **** 
 2581              		.loc 1 317 24 is_stmt 0 view .LVU796
 2582 0b64 4444A0E1 		asr	r4, r4, #8	@ bb, tmp356,
 2583              	.LVL179:
 2584              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2585              		.loc 1 330 40 view .LVU797
 2586 0b68 34909EE5 		ldr	r9, [lr, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2587              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2588              		.loc 1 315 55 view .LVU798
 2589 0b6c 920802E0 		mul	r2, r2, r8	@ tmp366, wave_word, _73
 2590              	.LVL180:
 2591              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2592              		.loc 1 321 25 view .LVU799
 2593 0b70 FF0054E3 		cmp	r4, #255	@ bb,
 2594              	@ armwave.c:316:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2595              		.loc 1 316 24 view .LVU800
 2596 0b74 4664A0E1 		asr	r6, r6, #8	@ gg, tmp360,
 2597              	.LVL181:
 2598              	@ armwave.c:328:                     xx = nsub & 0xff;
 328:armwave.c     ****                     yy = nsub >> 8;
 2599              		.loc 1 328 24 view .LVU801
 2600 0b78 7570EFE6 		uxtb	r7, r5	@ xx, _64
 2601              	@ armwave.c:321:                     b = MIN(bb, 255);
 321:armwave.c     **** 
 2602              		.loc 1 321 25 view .LVU802
 2603 0b7c FF40A0A3 		movge	r4, #255	@ bb,
 2604              	.LVL182:
 2605              	@ armwave.c:329:                     yy = nsub >> 8;
 329:armwave.c     ****                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 2606              		.loc 1 329 31 view .LVU803
 2607 0b80 4554A0E1 		asr	r5, r5, #8	@ yy, _64,
 2608              	@ armwave.c:320:                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 2609              		.loc 1 320 25 view .LVU804
 2610 0b84 FF0056E3 		cmp	r6, #255	@ gg,
 2611 0b88 FF60A0A3 		movge	r6, #255	@ gg,
 2612              	.LVL183:
 2613              	@ armwave.c:330:                     offset = (yy + (xx * g_armwave_state.target_width)) * vscale;
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2614              		.loc 1 330 34 view .LVU805
 2615 0b8c 995725E0 		mla	r5, r9, r7, r5	@ tmp353, g_armwave_state.target_width, xx, yy
 2616              	@ armwave.c:315:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2617              		.loc 1 315 24 view .LVU806
 2618 0b90 4224A0E1 		asr	r2, r2, #8	@ rr, tmp366,
 2619              	.LVL184:
 2620              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2621              		.loc 1 319 25 view .LVU807
 2622 0b94 FF0052E3 		cmp	r2, #255	@ rr,
 2623              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2624              		.loc 1 324 56 view .LVU808
 2625 0b98 0664A0E1 		lsl	r6, r6, #8	@ tmp361, gg,
 2626              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2627              		.loc 1 324 44 view .LVU809
 2628 0b9c 0448A0E1 		lsl	r4, r4, #16	@ tmp357, bb,
 2629              	@ armwave.c:319:                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 2630              		.loc 1 319 25 view .LVU810
 2631 0ba0 FF20A0A3 		movge	r2, #255	@ rr,
 2632              	.LVL185:
 2633              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2634              		.loc 1 324 44 view .LVU811
 2635 0ba4 FF4804E2 		and	r4, r4, #16711680	@ tmp358, tmp357,
 2636              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2637              		.loc 1 324 56 view .LVU812
 2638 0ba8 7660FFE6 		uxth	r6, r6	@ tmp362, tmp361
 2639              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2640              		.loc 1 331 39 view .LVU813
 2641 0bac 9A0505E0 		mul	r5, r10, r5	@ tmp354, _4, tmp353
 2642              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2643              		.loc 1 324 51 view .LVU814
 2644 0bb0 064084E1 		orr	r4, r4, r6	@ tmp364, tmp358, tmp362
 2645              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2646              		.loc 1 324 62 view .LVU815
 2647 0bb4 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2648              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2649              		.loc 1 331 49 view .LVU816
 2650 0bb8 08009DE5 		ldr	r0, [sp, #8]	@ out_buffer, %sfp
 2651              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2652              		.loc 1 324 62 view .LVU817
 2653 0bbc 022084E1 		orr	r2, r4, r2	@ tmp368, tmp364, rr
 2654              	@ armwave.c:324:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 2655              		.loc 1 324 26 view .LVU818
 2656 0bc0 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp368,
 2657              	@ armwave.c:331:                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 2658              		.loc 1 331 49 view .LVU819
 2659 0bc4 052180E7 		str	r2, [r0, r5, lsl #2]	@ word, *_251
 2660 0bc8 77FFFFEA 		b	.L126		@
 2661              	.LVL186:
 2662              	.L147:
 296:armwave.c     **** 
 2663              		.loc 1 296 5 is_stmt 1 discriminator 1 view .LVU820
 2664 0bcc 10309FE5 		ldr	r3, .L149+4	@,
 2665 0bd0 4A2FA0E3 		mov	r2, #296	@,
 2666 0bd4 0C109FE5 		ldr	r1, .L149+8	@,
 2667              	.LVL187:
 296:armwave.c     **** 
 2668              		.loc 1 296 5 is_stmt 0 discriminator 1 view .LVU821
 2669 0bd8 0C009FE5 		ldr	r0, .L149+12	@,
 2670              	.LVL188:
 296:armwave.c     **** 
 2671              		.loc 1 296 5 discriminator 1 view .LVU822
 2672 0bdc FEFFFFEB 		bl	__assert_fail		@
 2673              	.LVL189:
 2674              	.L150:
 296:armwave.c     **** 
 2675              		.loc 1 296 5 discriminator 1 view .LVU823
 2676              		.align	2
 2677              	.L149:
 2678 0be0 00000000 		.word	g_armwave_state
 2679 0be4 30000000 		.word	.LANCHOR0+48
 2680 0be8 00000000 		.word	.LC0
 2681 0bec D4000000 		.word	.LC5
 2682              		.cfi_endproc
 2683              	.LFE64:
 2685              		.align	2
 2686              		.global	armwave_dump_ppm_debug
 2687              		.syntax unified
 2688              		.arm
 2689              		.fpu vfp
 2691              	armwave_dump_ppm_debug:
 2692              	.LVL190:
 2693              	.LFB65:
 337:armwave.c     **** 
 338:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 339:armwave.c     **** {
 2694              		.loc 1 339 1 is_stmt 1 view -0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 340:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2698              		.loc 1 340 5 view .LVU825
 2699              	@ armwave.c:339: {
 339:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2700              		.loc 1 339 1 is_stmt 0 view .LVU826
 2701 0bf0 0130A0E1 		mov	r3, r1	@ fn, fn
 2702 0bf4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2703              		.cfi_def_cfa_offset 28
 2704              		.cfi_offset 4, -28
 2705              		.cfi_offset 5, -24
 2706              		.cfi_offset 6, -20
 2707              		.cfi_offset 7, -16
 2708              		.cfi_offset 8, -12
 2709              		.cfi_offset 9, -8
 2710              		.cfi_offset 14, -4
 2711 0bf8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2712 0bfc 0CD04DE2 		sub	sp, sp, #12	@,,
 2713              		.cfi_def_cfa_offset 40
 2714              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 2715              		.loc 1 340 16 view .LVU827
 2716 0c00 D8109FE5 		ldr	r1, .L163	@,
 2717              	.LVL191:
 2718              		.loc 1 340 16 view .LVU828
 2719 0c04 0300A0E1 		mov	r0, r3	@, fn
 2720              	.LVL192:
 2721              		.loc 1 340 16 view .LVU829
 2722 0c08 FEFFFFEB 		bl	fopen64		@
 2723              	.LVL193:
 2724              	@ armwave.c:347:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 341:armwave.c     ****     uint32_t data;
 342:armwave.c     ****     int xx, yy;
 343:armwave.c     **** 
 344:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 345:armwave.c     **** 
 346:armwave.c     ****     fputs("P3\n", fp);
 347:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2725              		.loc 1 347 5 view .LVU830
 2726 0c0c D0609FE5 		ldr	r6, .L163+4	@ tmp154,
 2727              	@ armwave.c:346:     fputs("P3\n", fp);
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2728              		.loc 1 346 5 view .LVU831
 2729 0c10 0320A0E3 		mov	r2, #3	@,
 2730 0c14 0110A0E3 		mov	r1, #1	@,
 2731              	@ armwave.c:340:     FILE *fp = fopen(fn, "wb");
 340:armwave.c     ****     uint32_t data;
 2732              		.loc 1 340 16 view .LVU832
 2733 0c18 0070A0E1 		mov	r7, r0	@ fp,
 2734              	.LVL194:
 341:armwave.c     ****     uint32_t data;
 2735              		.loc 1 341 5 is_stmt 1 view .LVU833
 342:armwave.c     **** 
 2736              		.loc 1 342 5 view .LVU834
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2737              		.loc 1 346 5 view .LVU835
 2738 0c1c 0030A0E1 		mov	r3, r0	@, fp
 2739 0c20 C0009FE5 		ldr	r0, .L163+8	@,
 2740              	.LVL195:
 346:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2741              		.loc 1 346 5 is_stmt 0 view .LVU836
 2742 0c24 FEFFFFEB 		bl	fwrite		@
 2743              	.LVL196:
 2744              		.loc 1 347 5 is_stmt 1 view .LVU837
 2745 0c28 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 2746 0c2c 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 2747 0c30 B4109FE5 		ldr	r1, .L163+12	@,
 2748 0c34 0700A0E1 		mov	r0, r7	@, fp
 2749 0c38 FEFFFFEB 		bl	fprintf		@
 2750              	.LVL197:
 348:armwave.c     ****     fputs("255\n", fp);
 2751              		.loc 1 348 5 view .LVU838
 2752 0c3c 0420A0E3 		mov	r2, #4	@,
 2753 0c40 0730A0E1 		mov	r3, r7	@, fp
 2754 0c44 0110A0E3 		mov	r1, #1	@,
 2755 0c48 A0009FE5 		ldr	r0, .L163+16	@,
 2756 0c4c FEFFFFEB 		bl	fwrite		@
 2757              	.LVL198:
 349:armwave.c     **** 
 350:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2758              		.loc 1 350 5 view .LVU839
 2759              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2760              		.loc 1 350 37 is_stmt 0 view .LVU840
 2761 0c50 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2762              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2763              		.loc 1 350 5 view .LVU841
 2764 0c54 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2765 0c58 1800000A 		beq	.L152		@,
 2766 0c5c 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2767              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 352:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 353:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 354:armwave.c     **** 
 355:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2768              		.loc 1 355 13 view .LVU842
 2769 0c60 8C909FE5 		ldr	r9, .L163+20	@ tmp156,
 2770              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2771              		.loc 1 350 12 view .LVU843
 2772 0c64 0050A0E3 		mov	r5, #0	@ yy,
 2773              	.LVL199:
 2774              	.L153:
 2775              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2776              		.loc 1 351 9 view .LVU844
 2777 0c68 000053E3 		cmp	r3, #0	@ _12,
 2778              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2779              		.loc 1 351 16 view .LVU845
 2780 0c6c 0040A013 		movne	r4, #0	@ xx,
 2781              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2782              		.loc 1 351 9 view .LVU846
 2783 0c70 1600000A 		beq	.L162		@,
 2784              	.LVL200:
 2785              	.L154:
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2786              		.loc 1 352 13 is_stmt 1 discriminator 3 view .LVU847
 2787              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2788              		.loc 1 352 29 is_stmt 0 discriminator 3 view .LVU848
 2789 0c74 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2790              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2791              		.loc 1 355 13 discriminator 3 view .LVU849
 2792 0c78 0910A0E1 		mov	r1, r9	@, tmp156
 2793 0c7c 0700A0E1 		mov	r0, r7	@, fp
 2794              	@ armwave.c:352:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 352:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2795              		.loc 1 352 18 discriminator 3 view .LVU850
 2796 0c80 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2797              	.LVL201:
 2798              		.loc 1 355 13 is_stmt 1 discriminator 3 view .LVU851
 2799              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2800              		.loc 1 351 58 is_stmt 0 discriminator 3 view .LVU852
 2801 0c84 014084E2 		add	r4, r4, #1	@ xx, xx,
 2802              	.LVL202:
 2803              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2804              		.loc 1 355 81 discriminator 3 view .LVU853
 2805 0c88 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2806              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2807              		.loc 1 355 61 discriminator 3 view .LVU854
 2808 0c8c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2809              	@ armwave.c:355:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2810              		.loc 1 355 13 discriminator 3 view .LVU855
 2811 0c90 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2812 0c94 7330EFE6 		uxtb	r3, r3	@, tmp146
 2813 0c98 00C08DE5 		str	ip, [sp]	@ tmp151,
 2814 0c9c 7220EFE6 		uxtb	r2, r2	@, data
 2815              	.LVL203:
 2816              		.loc 1 355 13 discriminator 3 view .LVU856
 2817 0ca0 FEFFFFEB 		bl	fprintf		@
 2818              	.LVL204:
 2819              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2820              		.loc 1 351 41 discriminator 3 view .LVU857
 2821 0ca4 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 2822              	@ armwave.c:351:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 351:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2823              		.loc 1 351 9 discriminator 3 view .LVU858
 2824 0ca8 040053E1 		cmp	r3, r4	@ _12, xx
 2825 0cac F0FFFF8A 		bhi	.L154		@,
 2826 0cb0 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 2827              	.LVL205:
 2828              	.L155:
 2829              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2830              		.loc 1 350 55 discriminator 2 view .LVU859
 2831 0cb4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2832              	.LVL206:
 2833              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2834              		.loc 1 350 5 discriminator 2 view .LVU860
 2835 0cb8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2836 0cbc E9FFFF3A 		bcc	.L153		@,
 2837              	.LVL207:
 2838              	.L152:
 356:armwave.c     ****         }
 357:armwave.c     ****     }
 358:armwave.c     **** 
 359:armwave.c     ****     fclose(fp);
 2839              		.loc 1 359 5 is_stmt 1 view .LVU861
 2840 0cc0 0700A0E1 		mov	r0, r7	@, fp
 2841              	@ armwave.c:360: }
 360:armwave.c     **** }
 2842              		.loc 1 360 1 is_stmt 0 view .LVU862
 2843 0cc4 0CD08DE2 		add	sp, sp, #12	@,,
 2844              		.cfi_remember_state
 2845              		.cfi_def_cfa_offset 28
 2846              		@ sp needed	@
 2847 0cc8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2848              		.cfi_restore 14
 2849              		.cfi_restore 9
 2850              		.cfi_restore 8
 2851              		.cfi_restore 7
 2852              		.cfi_restore 6
 2853              		.cfi_restore 5
 2854              		.cfi_restore 4
 2855              		.cfi_def_cfa_offset 0
 2856              	.LVL208:
 2857              	@ armwave.c:359:     fclose(fp);
 359:armwave.c     **** }
 2858              		.loc 1 359 5 view .LVU863
 2859 0ccc FEFFFFEA 		b	fclose		@
 2860              	.LVL209:
 2861              	.L162:
 2862              		.cfi_restore_state
 2863              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2864              		.loc 1 350 55 view .LVU864
 2865 0cd0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2866              	.LVL210:
 2867              	@ armwave.c:350:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 350:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2868              		.loc 1 350 5 view .LVU865
 2869 0cd4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2870 0cd8 F5FFFF8A 		bhi	.L155		@,
 2871 0cdc F7FFFFEA 		b	.L152		@
 2872              	.L164:
 2873              		.align	2
 2874              	.L163:
 2875 0ce0 E8000000 		.word	.LC6
 2876 0ce4 00000000 		.word	g_armwave_state
 2877 0ce8 EC000000 		.word	.LC7
 2878 0cec F0000000 		.word	.LC8
 2879 0cf0 F8000000 		.word	.LC9
 2880 0cf4 00010000 		.word	.LC10
 2881              		.cfi_endproc
 2882              	.LFE65:
 2884              		.align	2
 2885              		.global	armwave_test_init
 2886              		.syntax unified
 2887              		.arm
 2888              		.fpu vfp
 2890              	armwave_test_init:
 2891              	.LVL211:
 2892              	.LFB66:
 361:armwave.c     **** 
 362:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 363:armwave.c     **** {
 2893              		.loc 1 363 1 is_stmt 1 view -0
 2894              		.cfi_startproc
 2895              		@ args = 0, pretend = 0, frame = 0
 2896              		@ frame_needed = 0, uses_anonymous_args = 0
 364:armwave.c     ****     mod_depth = mod;
 2897              		.loc 1 364 5 view .LVU867
 2898              	@ armwave.c:364:     mod_depth = mod;
 2899              		.loc 1 364 15 is_stmt 0 view .LVU868
 2900 0cf8 9C309FE5 		ldr	r3, .L169+20	@ tmp128,
 2901              	@ armwave.c:363: {
 363:armwave.c     ****     mod_depth = mod;
 2902              		.loc 1 363 1 view .LVU869
 2903 0cfc F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2904              		.cfi_def_cfa_offset 24
 2905              		.cfi_offset 4, -24
 2906              		.cfi_offset 5, -20
 2907              		.cfi_offset 6, -16
 2908              		.cfi_offset 7, -12
 2909              		.cfi_offset 8, -8
 2910              		.cfi_offset 14, -4
 2911 0d00 068B2DED 		vpush.64	{d8, d9, d10}	@
 2912              		.cfi_def_cfa_offset 48
 2913              		.cfi_offset 80, -48
 2914              		.cfi_offset 81, -44
 2915              		.cfi_offset 82, -40
 2916              		.cfi_offset 83, -36
 2917              		.cfi_offset 84, -32
 2918              		.cfi_offset 85, -28
 2919 0d04 94409FE5 		ldr	r4, .L169+24	@ ivtmp.106,
 2920              	.LBB6:
 2921              	.LBB7:
 2922              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2923              		.loc 1 87 32 view .LVU870
 2924 0d08 22AA9FED 		vldr.32	s20, .L169+16	@ tmp134,
 2925              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2926              		.loc 1 87 26 view .LVU871
 2927 0d0c 1D9B9FED 		vldr.64	d9, .L169	@ tmp143,
 2928              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2929              		.loc 1 87 49 view .LVU872
 2930 0d10 1E8B9FED 		vldr.64	d8, .L169+8	@ tmp137,
 2931              	.LBE7:
 2932              	.LBE6:
 2933              	@ armwave.c:364:     mod_depth = mod;
 2934              		.loc 1 364 15 view .LVU873
 2935 0d14 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 365:armwave.c     **** 
 366:armwave.c     ****     test_create_waveform();
 2936              		.loc 1 366 5 is_stmt 1 view .LVU874
 2937              	@ armwave.c:363: {
 363:armwave.c     ****     mod_depth = mod;
 2938              		.loc 1 363 1 is_stmt 0 view .LVU875
 2939 0d18 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2940 0d1c 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2941              	@ armwave.c:366:     test_create_waveform();
 2942              		.loc 1 366 5 view .LVU876
 2943 0d20 FEFFFFEB 		bl	test_create_waveform		@
 2944              	.LVL212:
 367:armwave.c     ****     test_create_gamma();
 2945              		.loc 1 367 5 is_stmt 1 view .LVU877
 2946              	.LBB9:
 2947              	.LBI6:
  81:armwave.c     **** {
 2948              		.loc 1 81 6 view .LVU878
  81:armwave.c     **** {
 2949              		.loc 1 81 6 is_stmt 0 view .LVU879
 2950 0d24 013084E2 		add	r3, r4, #1	@ _34, ivtmp.106,
 2951 0d28 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.106,
 2952 0d2c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2953              	.LVL213:
 2954              	.L166:
 2955              	.LBB8:
  87:armwave.c     ****     }
 2956              		.loc 1 87 9 is_stmt 1 view .LVU880
 2957              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2958              		.loc 1 87 32 is_stmt 0 view .LVU881
 2959 0d30 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.106
 2960              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2961              		.loc 1 87 26 view .LVU882
 2962 0d34 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2963              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2964              		.loc 1 87 32 view .LVU883
 2965 0d38 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2966 0d3c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2967 0d40 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2968              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2969              		.loc 1 87 26 view .LVU884
 2970 0d44 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2971 0d48 FEFFFFEB 		bl	pow		@
 2972              	.LVL214:
 2973              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2974              		.loc 1 87 49 view .LVU885
 2975 0d4c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2976              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2977              		.loc 1 87 24 view .LVU886
 2978 0d50 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2979 0d54 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2980 0d58 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2981              	.LVL215:
 2982              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2983              		.loc 1 86 5 view .LVU887
 2984 0d5c 080054E1 		cmp	r4, r8	@ ivtmp.106, _35
 2985 0d60 F2FFFF1A 		bne	.L166		@,
 2986              	.LVL216:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2987              		.loc 1 86 5 view .LVU888
 2988              	.LBE8:
 2989              	.LBE9:
 368:armwave.c     **** 
 369:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2990              		.loc 1 369 5 is_stmt 1 view .LVU889
 2991 0d64 0710A0E1 		mov	r1, r7	@, render_height
 2992 0d68 0600A0E1 		mov	r0, r6	@, render_width
 2993 0d6c A3FCFFEB 		bl	armwave_setup_render.constprop.0		@
 2994              	.LVL217:
 370:armwave.c     **** 
 371:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2995              		.loc 1 371 5 view .LVU890
 2996              	@ armwave.c:372: }
 372:armwave.c     **** }
 2997              		.loc 1 372 1 is_stmt 0 view .LVU891
 2998 0d70 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2999              		.cfi_restore 84
 3000              		.cfi_restore 85
 3001              		.cfi_restore 82
 3002              		.cfi_restore 83
 3003              		.cfi_restore 80
 3004              		.cfi_restore 81
 3005              		.cfi_def_cfa_offset 24
 3006              	@ armwave.c:371:     printf("armwave version: %s\n", ARMWAVE_VER);
 371:armwave.c     **** }
 3007              		.loc 1 371 5 view .LVU892
 3008 0d74 28109FE5 		ldr	r1, .L169+28	@,
 3009 0d78 28009FE5 		ldr	r0, .L169+32	@,
 3010              	@ armwave.c:372: }
 3011              		.loc 1 372 1 view .LVU893
 3012 0d7c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 3013              		.cfi_restore 14
 3014              		.cfi_restore 8
 3015              		.cfi_restore 7
 3016              		.cfi_restore 6
 3017              		.cfi_restore 5
 3018              		.cfi_restore 4
 3019              		.cfi_def_cfa_offset 0
 3020              	.LVL218:
 3021              	@ armwave.c:371:     printf("armwave version: %s\n", ARMWAVE_VER);
 371:armwave.c     **** }
 3022              		.loc 1 371 5 view .LVU894
 3023 0d80 FEFFFFEA 		b	printf		@
 3024              	.LVL219:
 3025              	.L170:
 3026 0d84 0000A0E1 		.align	3
 3027              	.L169:
 3028 0d88 000000C0 		.word	-1073741824
 3029 0d8c CCCCEC3F 		.word	1072483532
 3030 0d90 00000000 		.word	0
 3031 0d94 00E06F40 		.word	1081073664
 3032 0d98 00007F43 		.word	1132396544
 3033 0d9c 00000000 		.word	.LANCHOR1
 3034 0da0 FFFFFFFF 		.word	gamma_table-1
 3035 0da4 10010000 		.word	.LC11
 3036 0da8 18010000 		.word	.LC12
 3037              		.cfi_endproc
 3038              	.LFE66:
 3040              		.global	__aeabi_uidiv
 3041              		.align	2
 3042              		.global	armwave_test_generate
 3043              		.syntax unified
 3044              		.arm
 3045              		.fpu vfp
 3047              	armwave_test_generate:
 3048              	.LFB67:
 373:armwave.c     **** 
 374:armwave.c     **** void armwave_test_generate()
 375:armwave.c     **** {
 3049              		.loc 1 375 1 is_stmt 1 view -0
 3050              		.cfi_startproc
 3051              		@ args = 0, pretend = 0, frame = 8
 3052              		@ frame_needed = 0, uses_anonymous_args = 0
 376:armwave.c     ****     uint32_t yy;
 3053              		.loc 1 376 5 view .LVU896
 377:armwave.c     **** 
 378:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3054              		.loc 1 378 5 view .LVU897
 3055              	@ armwave.c:375: {
 375:armwave.c     ****     uint32_t yy;
 3056              		.loc 1 375 1 is_stmt 0 view .LVU898
 3057 0dac F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3058              		.cfi_def_cfa_offset 36
 3059              		.cfi_offset 4, -36
 3060              		.cfi_offset 5, -32
 3061              		.cfi_offset 6, -28
 3062              		.cfi_offset 7, -24
 3063              		.cfi_offset 8, -20
 3064              		.cfi_offset 9, -16
 3065              		.cfi_offset 10, -12
 3066              		.cfi_offset 11, -8
 3067              		.cfi_offset 14, -4
 3068              	@ armwave.c:378:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3069              		.loc 1 378 5 view .LVU899
 3070 0db0 0010A0E3 		mov	r1, #0	@,
 3071 0db4 44419FE5 		ldr	r4, .L189	@ tmp269,
 3072              	@ armwave.c:375: {
 375:armwave.c     ****     uint32_t yy;
 3073              		.loc 1 375 1 view .LVU900
 3074 0db8 0CD04DE2 		sub	sp, sp, #12	@,,
 3075              		.cfi_def_cfa_offset 48
 3076              	@ armwave.c:378:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 3077              		.loc 1 378 5 view .LVU901
 3078 0dbc 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 3079 0dc0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3080 0dc4 FEFFFFEB 		bl	memset		@
 3081              	.LVL220:
 379:armwave.c     **** 
 380:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3082              		.loc 1 380 5 is_stmt 1 view .LVU902
 3083              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3084              		.loc 1 380 45 is_stmt 0 view .LVU903
 3085 0dc8 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3086              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3087              		.loc 1 380 5 view .LVU904
 3088 0dcc 020B55E3 		cmp	r5, #2048	@ _72,
 3089 0dd0 4800008A 		bhi	.L171		@,
 3090 0dd4 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3091              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3092              		.loc 1 380 12 view .LVU905
 3093 0dd8 00A0A0E3 		mov	r10, #0	@ yy,
 3094              	.LVL221:
 3095              	.L177:
 381:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3096              		.loc 1 381 9 is_stmt 1 discriminator 3 view .LVU906
 3097 0ddc 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 3098              	.LBB12:
 3099              	.LBB13:
 3100              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3101              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU907
 3102 0de0 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3103              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3104              		.loc 1 109 5 discriminator 3 view .LVU908
 3105 0de4 000056E3 		cmp	r6, #0	@ prephitmp_171,
 3106              	.LBE13:
 3107              	.LBE12:
 3108              	@ armwave.c:381:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3109              		.loc 1 381 9 discriminator 3 view .LVU909
 3110 0de8 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 3111              	.LVL222:
 3112              	.LBB15:
 3113              	.LBI12:
  98:armwave.c     **** {
 3114              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU910
 3115              	.LBB14:
 100:armwave.c     ****     uint32_t value, word;
 3116              		.loc 1 100 5 discriminator 3 view .LVU911
 101:armwave.c     ****     uint8_t *wave_base;
 3117              		.loc 1 101 5 discriminator 3 view .LVU912
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3118              		.loc 1 102 5 discriminator 3 view .LVU913
 103:armwave.c     ****     uint8_t *write_buffer;
 3119              		.loc 1 103 5 discriminator 3 view .LVU914
 104:armwave.c     ****     
 3120              		.loc 1 104 5 discriminator 3 view .LVU915
 106:armwave.c     **** 
 3121              		.loc 1 106 5 discriminator 3 view .LVU916
 3122              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3123              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU917
 3124 0dec 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 3125              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3126              		.loc 1 106 40 discriminator 3 view .LVU918
 3127 0df0 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 3128              	.LVL223:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3129              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU919
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3130              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU920
 3131 0df4 3900000A 		beq	.L173		@,
 3132              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3133              		.loc 1 109 11 view .LVU921
 3134 0df8 0080A0E3 		mov	r8, #0	@ w,
 3135 0dfc 043043E2 		sub	r3, r3, #4	@ _77, _3,
 3136              	.LVL224:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3137              		.loc 1 109 11 view .LVU922
 3138 0e00 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 3139              	.LVL225:
 3140              	.L176:
 110:armwave.c     **** 
 3141              		.loc 1 110 9 is_stmt 1 view .LVU923
 3142              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3143              		.loc 1 110 64 is_stmt 0 view .LVU924
 3144 0e04 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3145              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3146              		.loc 1 120 9 view .LVU925
 3147 0e08 000059E3 		cmp	r9, #0	@ _4,
 3148              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3149              		.loc 1 110 36 view .LVU926
 3150 0e0c 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 3151              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3152              		.loc 1 110 64 view .LVU927
 3153 0e10 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 3154              	.LVL226:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3155              		.loc 1 120 9 is_stmt 1 view .LVU928
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3156              		.loc 1 120 9 is_stmt 0 view .LVU929
 3157 0e14 2D00000A 		beq	.L174		@,
 3158 0e18 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 3159 0e1c 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 3160              	.LVL227:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3161              		.loc 1 120 9 view .LVU930
 3162 0e20 03E08EE0 		add	lr, lr, r3	@ ivtmp.112, _16, tmp205
 3163              	.LVL228:
 3164              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3165              		.loc 1 120 16 view .LVU931
 3166 0e24 0010A0E3 		mov	r1, #0	@ yy,
 3167              	.LVL229:
 3168              	.L175:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3169              		.loc 1 135 13 is_stmt 1 view .LVU932
 3170              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3171              		.loc 1 135 18 is_stmt 0 view .LVU933
 3172 0e28 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 3173              	.LVL230:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3174              		.loc 1 139 13 is_stmt 1 view .LVU934
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3175              		.loc 1 140 17 view .LVU935
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3176              		.loc 1 141 17 view .LVU936
 142:armwave.c     ****                 word >>= 8;
 3177              		.loc 1 142 17 view .LVU937
 3178              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3179              		.loc 1 140 45 is_stmt 0 view .LVU938
 3180 0e2c 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3181              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3182              		.loc 1 141 63 view .LVU939
 3183 0e30 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3184              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3185              		.loc 1 140 37 view .LVU940
 3186 0e34 73C0EFE6 		uxtb	ip, r3	@ word, word
 3187              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3188              		.loc 1 143 22 view .LVU941
 3189 0e38 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 3190              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3191              		.loc 1 142 47 view .LVU942
 3192 0e3c 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 3193              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3194              		.loc 1 140 37 view .LVU943
 3195 0e40 7550EFE6 		uxtb	r5, r5	@ word, word
 3196              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3197              		.loc 1 142 47 view .LVU944
 3198 0e44 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 3199              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3200              		.loc 1 141 63 view .LVU945
 3201 0e48 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 3202              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3203              		.loc 1 143 22 view .LVU946
 3204 0e4c 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3205              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3206              		.loc 1 142 47 view .LVU947
 3207 0e50 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 3208              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3209              		.loc 1 140 37 view .LVU948
 3210 0e54 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3211              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3212              		.loc 1 143 22 view .LVU949
 3213 0e58 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3214              	.LVL231:
 3215              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3216              		.loc 1 142 47 view .LVU950
 3217 0e5c 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 3218 0e60 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 3219              	.LVL232:
 143:armwave.c     ****             }
 3220              		.loc 1 143 17 is_stmt 1 view .LVU951
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3221              		.loc 1 140 17 view .LVU952
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3222              		.loc 1 141 17 view .LVU953
 142:armwave.c     ****                 word >>= 8;
 3223              		.loc 1 142 17 view .LVU954
 3224              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3225              		.loc 1 140 45 is_stmt 0 view .LVU955
 3226 0e64 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3227              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3228              		.loc 1 141 63 view .LVU956
 3229 0e68 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 3230              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3231              		.loc 1 142 47 view .LVU957
 3232 0e6c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 3233              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3234              		.loc 1 141 63 view .LVU958
 3235 0e70 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3236              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3237              		.loc 1 142 47 view .LVU959
 3238 0e74 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 3239              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3240              		.loc 1 141 63 view .LVU960
 3241 0e78 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 3242              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3243              		.loc 1 120 37 view .LVU961
 3244 0e7c 041081E2 		add	r1, r1, #4	@ yy, yy,
 3245              	.LVL233:
 3246              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3247              		.loc 1 142 47 view .LVU962
 3248 0e80 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 3249              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3250              		.loc 1 120 9 view .LVU963
 3251 0e84 010059E1 		cmp	r9, r1	@ _4, yy
 3252              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3253              		.loc 1 142 47 view .LVU964
 3254 0e88 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 3255 0e8c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 3256              	.LVL234:
 143:armwave.c     ****             }
 3257              		.loc 1 143 17 is_stmt 1 view .LVU965
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3258              		.loc 1 140 17 view .LVU966
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3259              		.loc 1 141 17 view .LVU967
 142:armwave.c     ****                 word >>= 8;
 3260              		.loc 1 142 17 view .LVU968
 3261              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3262              		.loc 1 140 45 is_stmt 0 view .LVU969
 3263 0e90 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3264              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3265              		.loc 1 141 63 view .LVU970
 3266 0e94 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3267              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3268              		.loc 1 142 47 view .LVU971
 3269 0e98 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 3270 0e9c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 3271 0ea0 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 3272 0ea4 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 3273 0ea8 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 143:armwave.c     ****             }
 3274              		.loc 1 143 17 is_stmt 1 view .LVU972
 3275              	.LVL235:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3276              		.loc 1 140 17 view .LVU973
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3277              		.loc 1 141 17 view .LVU974
 142:armwave.c     ****                 word >>= 8;
 3278              		.loc 1 142 17 view .LVU975
 3279              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3280              		.loc 1 140 45 is_stmt 0 view .LVU976
 3281 0eac 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3282              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3283              		.loc 1 141 63 view .LVU977
 3284 0eb0 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3285              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3286              		.loc 1 142 47 view .LVU978
 3287 0eb4 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 3288 0eb8 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 3289 0ebc 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 3290 0ec0 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 3291 0ec4 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 143:armwave.c     ****             }
 3292              		.loc 1 143 17 is_stmt 1 view .LVU979
 3293              	.LVL236:
 3294              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3295              		.loc 1 120 9 is_stmt 0 view .LVU980
 3296 0ec8 D6FFFF8A 		bhi	.L175		@,
 3297 0ecc 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 3298              	.LVL237:
 3299              	.L174:
 3300              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3301              		.loc 1 109 44 view .LVU981
 3302 0ed0 018088E2 		add	r8, r8, #1	@ w, w,
 3303              	.LVL238:
 3304              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3305              		.loc 1 109 5 view .LVU982
 3306 0ed4 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 3307 0ed8 C9FFFF3A 		bcc	.L176		@,
 3308 0edc 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 3309              	.LVL239:
 3310              	.L173:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3311              		.loc 1 109 5 view .LVU983
 3312              	.LBE14:
 3313              	.LBE15:
 3314              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3315              		.loc 1 380 28 discriminator 3 view .LVU984
 3316 0ee0 0510A0E1 		mov	r1, r5	@, _72
 3317 0ee4 020BA0E3 		mov	r0, #2048	@,
 3318              	.LVL240:
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3319              		.loc 1 380 28 discriminator 3 view .LVU985
 3320 0ee8 FEFFFFEB 		bl	__aeabi_uidiv		@
 3321              	.LVL241:
 3322              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3323              		.loc 1 380 63 discriminator 3 view .LVU986
 3324 0eec 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 3325              	.LVL242:
 3326              	@ armwave.c:380:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 380:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3327              		.loc 1 380 5 discriminator 3 view .LVU987
 3328 0ef0 0A0050E1 		cmp	r0, r10	@, yy
 3329 0ef4 B8FFFF8A 		bhi	.L177		@,
 3330              	.LVL243:
 3331              	.L171:
 3332              	@ armwave.c:383: }
 382:armwave.c     ****     }
 383:armwave.c     **** }
 3333              		.loc 1 383 1 view .LVU988
 3334 0ef8 0CD08DE2 		add	sp, sp, #12	@,,
 3335              		.cfi_def_cfa_offset 36
 3336              		@ sp needed	@
 3337 0efc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3338              	.L190:
 3339              		.align	2
 3340              	.L189:
 3341 0f00 00000000 		.word	g_armwave_state
 3342              		.cfi_endproc
 3343              	.LFE67:
 3345              		.align	2
 3346              		.global	armwave_test_get_buffer
 3347              		.syntax unified
 3348              		.arm
 3349              		.fpu vfp
 3351              	armwave_test_get_buffer:
 3352              	.LFB68:
 384:armwave.c     **** 
 385:armwave.c     **** PyObject *armwave_test_get_buffer()
 386:armwave.c     **** {
 3353              		.loc 1 386 1 is_stmt 1 view -0
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 0
 3356              		@ frame_needed = 0, uses_anonymous_args = 0
 387:armwave.c     ****     PyObject *mv;
 3357              		.loc 1 387 5 view .LVU990
 388:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3358              		.loc 1 388 5 view .LVU991
 3359              	@ armwave.c:386: {
 386:armwave.c     ****     PyObject *mv;
 3360              		.loc 1 386 1 is_stmt 0 view .LVU992
 3361 0f04 30402DE9 		push	{r4, r5, lr}	@
 3362              		.cfi_def_cfa_offset 12
 3363              		.cfi_offset 4, -12
 3364              		.cfi_offset 5, -8
 3365              		.cfi_offset 14, -4
 3366              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3367              		.loc 1 388 22 view .LVU993
 3368 0f08 2C00A0E3 		mov	r0, #44	@,
 3369              	@ armwave.c:386: {
 386:armwave.c     ****     PyObject *mv;
 3370              		.loc 1 386 1 view .LVU994
 3371 0f0c 0CD04DE2 		sub	sp, sp, #12	@,,
 3372              		.cfi_def_cfa_offset 24
 3373              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3374              		.loc 1 388 22 view .LVU995
 3375 0f10 FEFFFFEB 		bl	malloc		@
 3376              	.LVL244:
 3377 0f14 54409FE5 		ldr	r4, .L196	@ tmp129,
 3378              	@ armwave.c:390:     if(g_armwave_state.target_height == 256) {
 389:armwave.c     ****     
 390:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 3379              		.loc 1 390 7 view .LVU996
 3380 0f18 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3381 0f1c 010C53E3 		cmp	r3, #256	@ g_armwave_state.target_height,
 3382              	@ armwave.c:388:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 388:armwave.c     ****     
 3383              		.loc 1 388 22 view .LVU997
 3384 0f20 0050A0E1 		mov	r5, r0	@ buf,
 3385              	.LVL245:
 3386              		.loc 1 390 5 is_stmt 1 view .LVU998
 3387 0f24 440094E5 		ldr	r0, [r4, #68]	@ pretmp_20, g_armwave_state.out_pixbuf
 3388              	.LVL246:
 3389              	@ armwave.c:390:     if(g_armwave_state.target_height == 256) {
 3390              		.loc 1 390 7 is_stmt 0 view .LVU999
 3391 0f28 0E00000A 		beq	.L195		@,
 391:armwave.c     ****  	   armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 392:armwave.c     ****     } else {
 393:armwave.c     ****  	   armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3392              		.loc 1 393 6 is_stmt 1 view .LVU1000
 3393 0f2c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3394              	.LVL247:
 3395              	.L193:
 394:armwave.c     **** 	}
 395:armwave.c     **** 
 396:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3396              		.loc 1 396 5 view .LVU1001
 3397              	@ armwave.c:396:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3398              		.loc 1 396 79 is_stmt 0 view .LVU1002
 3399 0f30 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 3400              	@ armwave.c:396:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3401              		.loc 1 396 5 view .LVU1003
 3402 0f34 0800A0E3 		mov	r0, #8	@ tmp127,
 3403 0f38 0110A0E3 		mov	r1, #1	@ tmp128,
 3404 0f3c 04008DE5 		str	r0, [sp, #4]	@ tmp127,
 3405 0f40 00108DE5 		str	r1, [sp]	@ tmp128,
 3406 0f44 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3407 0f48 442094E5 		ldr	r2, [r4, #68]	@, g_armwave_state.out_pixbuf
 3408 0f4c 0010A0E3 		mov	r1, #0	@,
 3409 0f50 0500A0E1 		mov	r0, r5	@, buf
 3410 0f54 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3411              	.LVL248:
 397:armwave.c     **** 
 398:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3412              		.loc 1 398 5 is_stmt 1 view .LVU1004
 3413              	@ armwave.c:398:     mv = PyMemoryView_FromBuffer(buf);
 3414              		.loc 1 398 10 is_stmt 0 view .LVU1005
 3415 0f58 0500A0E1 		mov	r0, r5	@, buf
 3416              	@ armwave.c:399: }
 399:armwave.c     **** }
 3417              		.loc 1 399 1 view .LVU1006
 3418 0f5c 0CD08DE2 		add	sp, sp, #12	@,,
 3419              		.cfi_remember_state
 3420              		.cfi_def_cfa_offset 12
 3421              		@ sp needed	@
 3422 0f60 3040BDE8 		pop	{r4, r5, lr}	@
 3423              		.cfi_restore 14
 3424              		.cfi_restore 5
 3425              		.cfi_restore 4
 3426              		.cfi_def_cfa_offset 0
 3427              	.LVL249:
 3428              	@ armwave.c:398:     mv = PyMemoryView_FromBuffer(buf);
 398:armwave.c     **** }
 3429              		.loc 1 398 10 view .LVU1007
 3430 0f64 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3431              	.LVL250:
 3432              	.L195:
 3433              		.cfi_restore_state
 391:armwave.c     ****     } else {
 3434              		.loc 1 391 6 is_stmt 1 view .LVU1008
 3435 0f68 FEFFFFEB 		bl	armwave_fill_pixbuf_256		@
 3436              	.LVL251:
 3437 0f6c EFFFFFEA 		b	.L193		@
 3438              	.L197:
 3439              		.align	2
 3440              	.L196:
 3441 0f70 00000000 		.word	g_armwave_state
 3442              		.cfi_endproc
 3443              	.LFE68:
 3445              		.align	2
 3446              		.global	armwave_test_dump_buffer_to_ppm
 3447              		.syntax unified
 3448              		.arm
 3449              		.fpu vfp
 3451              	armwave_test_dump_buffer_to_ppm:
 3452              	.LVL252:
 3453              	.LFB69:
 400:armwave.c     **** 
 401:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 402:armwave.c     **** {
 3454              		.loc 1 402 1 view -0
 3455              		.cfi_startproc
 3456              		@ args = 0, pretend = 0, frame = 0
 3457              		@ frame_needed = 0, uses_anonymous_args = 0
 3458              		@ link register save eliminated.
 403:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3459              		.loc 1 403 5 view .LVU1010
 3460 0f74 08309FE5 		ldr	r3, .L199	@ tmp112,
 3461 0f78 0010A0E1 		mov	r1, r0	@, fn
 3462 0f7c 440093E5 		ldr	r0, [r3, #68]	@, g_armwave_state.out_pixbuf
 3463              	.LVL253:
 3464              		.loc 1 403 5 is_stmt 0 view .LVU1011
 3465 0f80 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3466              	.LVL254:
 3467              	.L200:
 3468              		.loc 1 403 5 view .LVU1012
 3469              		.align	2
 3470              	.L199:
 3471 0f84 00000000 		.word	g_armwave_state
 3472              		.cfi_endproc
 3473              	.LFE69:
 3475              		.align	2
 3476              		.global	armwave_cleanup
 3477              		.syntax unified
 3478              		.arm
 3479              		.fpu vfp
 3481              	armwave_cleanup:
 3482              	.LFB70:
 404:armwave.c     **** }
 405:armwave.c     **** 
 406:armwave.c     **** void armwave_cleanup()
 407:armwave.c     **** {
 3483              		.loc 1 407 1 is_stmt 1 view -0
 3484              		.cfi_startproc
 3485              		@ args = 0, pretend = 0, frame = 0
 3486              		@ frame_needed = 0, uses_anonymous_args = 0
 408:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3487              		.loc 1 408 5 view .LVU1014
 3488              	@ armwave.c:407: {
 407:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3489              		.loc 1 407 1 is_stmt 0 view .LVU1015
 3490 0f88 10402DE9 		push	{r4, lr}	@
 3491              		.cfi_def_cfa_offset 8
 3492              		.cfi_offset 4, -8
 3493              		.cfi_offset 14, -4
 3494              	@ armwave.c:408:     free(g_armwave_state.out_pixbuf);
 3495              		.loc 1 408 25 view .LVU1016
 3496 0f8c 28409FE5 		ldr	r4, .L203	@ tmp113,
 3497              	@ armwave.c:408:     free(g_armwave_state.out_pixbuf);
 3498              		.loc 1 408 5 view .LVU1017
 3499 0f90 440094E5 		ldr	r0, [r4, #68]	@, g_armwave_state.out_pixbuf
 3500 0f94 FEFFFFEB 		bl	free		@
 3501              	.LVL255:
 409:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3502              		.loc 1 409 5 is_stmt 1 view .LVU1018
 3503 0f98 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3504 0f9c FEFFFFEB 		bl	free		@
 3505              	.LVL256:
 410:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3506              		.loc 1 410 5 view .LVU1019
 3507 0fa0 600094E5 		ldr	r0, [r4, #96]	@, g_armwave_state.xcoord_to_xpixel
 3508 0fa4 FEFFFFEB 		bl	free		@
 3509              	.LVL257:
 411:armwave.c     **** 
 412:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3510              		.loc 1 412 5 view .LVU1020
 3511              	@ armwave.c:412:     g_armwave_state.out_pixbuf = NULL;
 3512              		.loc 1 412 32 is_stmt 0 view .LVU1021
 3513 0fa8 0030A0E3 		mov	r3, #0	@ tmp120,
 3514 0fac 443084E5 		str	r3, [r4, #68]	@ tmp120, g_armwave_state.out_pixbuf
 413:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3515              		.loc 1 413 5 is_stmt 1 view .LVU1022
 3516              	@ armwave.c:413:     g_armwave_state.ch1_buffer = NULL;
 3517              		.loc 1 413 32 is_stmt 0 view .LVU1023
 3518 0fb0 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 414:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3519              		.loc 1 414 5 is_stmt 1 view .LVU1024
 3520              	@ armwave.c:414:     g_armwave_state.xcoord_to_xpixel = NULL;
 3521              		.loc 1 414 38 is_stmt 0 view .LVU1025
 3522 0fb4 603084E5 		str	r3, [r4, #96]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3523              	@ armwave.c:415: }
 415:armwave.c     **** }
 3524              		.loc 1 415 1 view .LVU1026
 3525 0fb8 1080BDE8 		pop	{r4, pc}	@
 3526              	.L204:
 3527              		.align	2
 3528              	.L203:
 3529 0fbc 00000000 		.word	g_armwave_state
 3530              		.cfi_endproc
 3531              	.LFE70:
 3533              		.section	.text.startup,"ax",%progbits
 3534              		.align	2
 3535              		.global	main
 3536              		.syntax unified
 3537              		.arm
 3538              		.fpu vfp
 3540              	main:
 3541              	.LVL258:
 3542              	.LFB71:
 416:armwave.c     **** 
 417:armwave.c     **** int main(int argc, char *argv[])
 418:armwave.c     **** {
 3543              		.loc 1 418 1 is_stmt 1 view -0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 8
 3546              		@ frame_needed = 0, uses_anonymous_args = 0
 419:armwave.c     ****     uint32_t *out_buffer;
 3547              		.loc 1 419 5 view .LVU1028
 420:armwave.c     ****     uint32_t xx, yy, n;
 3548              		.loc 1 420 5 view .LVU1029
 421:armwave.c     **** 
 422:armwave.c     ****     //printf("Starting armwave...\n");
 423:armwave.c     ****     armwave_init();
 3549              		.loc 1 423 5 view .LVU1030
 3550              	.LBB20:
 3551              	.LBI20:
 151:armwave.c     **** {
 3552              		.loc 1 151 6 view .LVU1031
 3553              	.LBB21:
 153:armwave.c     **** }
 3554              		.loc 1 153 5 view .LVU1032
 3555              	.LBE21:
 3556              	.LBE20:
 3557              	@ armwave.c:418: {
 418:armwave.c     ****     uint32_t *out_buffer;
 3558              		.loc 1 418 1 is_stmt 0 view .LVU1033
 3559 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3560              		.cfi_def_cfa_offset 36
 3561              		.cfi_offset 4, -36
 3562              		.cfi_offset 5, -32
 3563              		.cfi_offset 6, -28
 3564              		.cfi_offset 7, -24
 3565              		.cfi_offset 8, -20
 3566              		.cfi_offset 9, -16
 3567              		.cfi_offset 10, -12
 3568              		.cfi_offset 11, -8
 3569              		.cfi_offset 14, -4
 3570 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 3571              		.cfi_def_cfa_offset 48
 3572              	.LBB25:
 3573              	.LBB22:
 3574              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3575              		.loc 1 153 27 view .LVU1034
 3576 0008 70919FE5 		ldr	r9, .L225	@ tmp267,
 3577              	.LBE22:
 3578              	.LBE25:
 3579              	@ armwave.c:432:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 424:armwave.c     **** 
 425:armwave.c     ****     //printf("Creating test waveform...\n");
 426:armwave.c     ****     test_create_waveform();
 427:armwave.c     **** 
 428:armwave.c     ****     //printf("Creating gamma LUT...\n");
 429:armwave.c     ****     test_create_gamma();
 430:armwave.c     **** 
 431:armwave.c     ****     //printf("Setting up render...\n");
 432:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3580              		.loc 1 432 5 view .LVU1035
 3581 000c 70219FE5 		ldr	r2, .L225+4	@ ivtmp_191,
 3582              	.LBB26:
 3583              	.LBB23:
 3584              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3585              		.loc 1 153 27 view .LVU1036
 3586 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 3587              	.LBE23:
 3588              	.LBE26:
 3589              	@ armwave.c:432:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 3590              		.loc 1 432 5 view .LVU1037
 3591 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 3592              	.LBB27:
 3593              	.LBB24:
 3594              	@ armwave.c:153:     g_armwave_state.flags = 0;
 153:armwave.c     **** }
 3595              		.loc 1 153 27 view .LVU1038
 3596 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 3597              	.LBE24:
 3598              	.LBE27:
 426:armwave.c     **** 
 3599              		.loc 1 426 5 is_stmt 1 view .LVU1039
 3600 001c FEFFFFEB 		bl	test_create_waveform		@
 3601              	.LVL259:
 429:armwave.c     **** 
 3602              		.loc 1 429 5 view .LVU1040
 3603 0020 FEFFFFEB 		bl	test_create_gamma		@
 3604              	.LVL260:
 3605              		.loc 1 432 5 view .LVU1041
 3606 0024 011CA0E3 		mov	r1, #256	@,
 3607 0028 020BA0E3 		mov	r0, #2048	@,
 3608 002c FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3609              	.LVL261:
 433:armwave.c     **** 
 434:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 435:armwave.c     **** 
 436:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3610              		.loc 1 436 5 view .LVU1042
 3611              		.loc 1 436 5 is_stmt 0 view .LVU1043
 3612 0030 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3613              	.LVL262:
 3614              	.L206:
 3615              	@ armwave.c:437:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 437:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3616              		.loc 1 437 9 view .LVU1044
 3617 0034 020B55E3 		cmp	r5, #2048	@ _61,
 3618 0038 4900008A 		bhi	.L214		@,
 3619 003c 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3620              	@ armwave.c:437:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3621              		.loc 1 437 16 view .LVU1045
 3622 0040 0080A0E3 		mov	r8, #0	@ yy,
 3623 0044 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 3624              	.LVL263:
 3625              	.L211:
 438:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 439:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3626              		.loc 1 439 13 is_stmt 1 discriminator 3 view .LVU1046
 3627 0048 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 3628              	.LBB28:
 3629              	.LBB29:
 3630              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3631              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1047
 3632 004c 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3633              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3634              		.loc 1 109 5 discriminator 3 view .LVU1048
 3635 0050 000056E3 		cmp	r6, #0	@ prephitmp_178,
 3636              	.LBE29:
 3637              	.LBE28:
 3638              	@ armwave.c:439:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 3639              		.loc 1 439 13 discriminator 3 view .LVU1049
 3640 0054 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 3641              	.LVL264:
 3642              	.LBB31:
 3643              	.LBI28:
  98:armwave.c     **** {
 3644              		.loc 1 98 6 is_stmt 1 discriminator 3 view .LVU1050
 3645              	.LBB30:
 100:armwave.c     ****     uint32_t value, word;
 3646              		.loc 1 100 5 discriminator 3 view .LVU1051
 101:armwave.c     ****     uint8_t *wave_base;
 3647              		.loc 1 101 5 discriminator 3 view .LVU1052
 102:armwave.c     ****     uint8_t *write_buffer_base;
 3648              		.loc 1 102 5 discriminator 3 view .LVU1053
 103:armwave.c     ****     uint8_t *write_buffer;
 3649              		.loc 1 103 5 discriminator 3 view .LVU1054
 104:armwave.c     ****     
 3650              		.loc 1 104 5 discriminator 3 view .LVU1055
 106:armwave.c     **** 
 3651              		.loc 1 106 5 discriminator 3 view .LVU1056
 3652              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3653              		.loc 1 106 63 is_stmt 0 discriminator 3 view .LVU1057
 3654 0058 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 3655              	@ armwave.c:106:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 106:armwave.c     **** 
 3656              		.loc 1 106 40 discriminator 3 view .LVU1058
 3657 005c 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 3658              	.LVL265:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3659              		.loc 1 109 5 is_stmt 1 discriminator 3 view .LVU1059
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3660              		.loc 1 109 5 is_stmt 0 discriminator 3 view .LVU1060
 3661 0060 3900000A 		beq	.L207		@,
 3662              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3663              		.loc 1 109 11 view .LVU1061
 3664 0064 0070A0E3 		mov	r7, #0	@ w,
 3665 0068 043043E2 		sub	r3, r3, #4	@ _81, _1,
 3666              	.LVL266:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3667              		.loc 1 109 11 view .LVU1062
 3668 006c 00308DE5 		str	r3, [sp]	@ _81, %sfp
 3669              	.LVL267:
 3670              	.L210:
 110:armwave.c     **** 
 3671              		.loc 1 110 9 is_stmt 1 view .LVU1063
 3672              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3673              		.loc 1 110 64 is_stmt 0 view .LVU1064
 3674 0070 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3675              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3676              		.loc 1 120 9 view .LVU1065
 3677 0074 00005AE3 		cmp	r10, #0	@ _2,
 3678              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3679              		.loc 1 110 36 view .LVU1066
 3680 0078 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 3681              	@ armwave.c:110:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 110:armwave.c     **** 
 3682              		.loc 1 110 64 view .LVU1067
 3683 007c 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 3684              	.LVL268:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3685              		.loc 1 120 9 is_stmt 1 view .LVU1068
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3686              		.loc 1 120 9 is_stmt 0 view .LVU1069
 3687 0080 2D00000A 		beq	.L208		@,
 3688 0084 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 3689 0088 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 3690              	.LVL269:
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3691              		.loc 1 120 9 view .LVU1070
 3692 008c 03E08EE0 		add	lr, lr, r3	@ ivtmp.125, _20, tmp202
 3693              	.LVL270:
 3694              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3695              		.loc 1 120 16 view .LVU1071
 3696 0090 0010A0E3 		mov	r1, #0	@ yy,
 3697              	.LVL271:
 3698              	.L209:
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3699              		.loc 1 135 13 is_stmt 1 view .LVU1072
 3700              	@ armwave.c:135:             word = *(uint32_t*)(wave_base + yy);
 135:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 3701              		.loc 1 135 18 is_stmt 0 view .LVU1073
 3702 0094 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 3703              	.LVL272:
 139:armwave.c     ****                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 3704              		.loc 1 139 13 is_stmt 1 view .LVU1074
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3705              		.loc 1 140 17 view .LVU1075
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3706              		.loc 1 141 17 view .LVU1076
 142:armwave.c     ****                 word >>= 8;
 3707              		.loc 1 142 17 view .LVU1077
 3708              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3709              		.loc 1 140 45 is_stmt 0 view .LVU1078
 3710 0098 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3711              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3712              		.loc 1 141 63 view .LVU1079
 3713 009c 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3714              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3715              		.loc 1 140 37 view .LVU1080
 3716 00a0 73C0EFE6 		uxtb	ip, r3	@ word, word
 3717              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3718              		.loc 1 143 22 view .LVU1081
 3719 00a4 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3720              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3721              		.loc 1 142 47 view .LVU1082
 3722 00a8 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 3723              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3724              		.loc 1 140 37 view .LVU1083
 3725 00ac 7440EFE6 		uxtb	r4, r4	@ word, word
 3726              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3727              		.loc 1 142 47 view .LVU1084
 3728 00b0 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 3729              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3730              		.loc 1 141 63 view .LVU1085
 3731 00b4 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 3732              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3733              		.loc 1 143 22 view .LVU1086
 3734 00b8 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 3735              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3736              		.loc 1 142 47 view .LVU1087
 3737 00bc 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 3738              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3739              		.loc 1 140 37 view .LVU1088
 3740 00c0 7CC0EFE6 		uxtb	ip, ip	@ word, word
 3741              	@ armwave.c:143:                 word >>= 8;
 143:armwave.c     ****             }
 3742              		.loc 1 143 22 view .LVU1089
 3743 00c4 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 3744              	.LVL273:
 3745              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3746              		.loc 1 142 47 view .LVU1090
 3747 00c8 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 3748 00cc 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 3749              	.LVL274:
 143:armwave.c     ****             }
 3750              		.loc 1 143 17 is_stmt 1 view .LVU1091
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3751              		.loc 1 140 17 view .LVU1092
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3752              		.loc 1 141 17 view .LVU1093
 142:armwave.c     ****                 word >>= 8;
 3753              		.loc 1 142 17 view .LVU1094
 3754              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3755              		.loc 1 140 45 is_stmt 0 view .LVU1095
 3756 00d0 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3757              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3758              		.loc 1 141 63 view .LVU1096
 3759 00d4 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 3760              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3761              		.loc 1 142 47 view .LVU1097
 3762 00d8 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 3763              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3764              		.loc 1 141 63 view .LVU1098
 3765 00dc 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3766              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3767              		.loc 1 142 47 view .LVU1099
 3768 00e0 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 3769              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3770              		.loc 1 141 63 view .LVU1100
 3771 00e4 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 3772              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3773              		.loc 1 120 37 view .LVU1101
 3774 00e8 041081E2 		add	r1, r1, #4	@ yy, yy,
 3775              	.LVL275:
 3776              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3777              		.loc 1 142 47 view .LVU1102
 3778 00ec 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 3779              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3780              		.loc 1 120 9 view .LVU1103
 3781 00f0 01005AE1 		cmp	r10, r1	@ _2, yy
 3782              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3783              		.loc 1 142 47 view .LVU1104
 3784 00f4 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 3785 00f8 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 3786              	.LVL276:
 143:armwave.c     ****             }
 3787              		.loc 1 143 17 is_stmt 1 view .LVU1105
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3788              		.loc 1 140 17 view .LVU1106
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3789              		.loc 1 141 17 view .LVU1107
 142:armwave.c     ****                 word >>= 8;
 3790              		.loc 1 142 17 view .LVU1108
 3791              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3792              		.loc 1 140 45 is_stmt 0 view .LVU1109
 3793 00fc 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3794              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3795              		.loc 1 141 63 view .LVU1110
 3796 0100 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3797              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3798              		.loc 1 142 47 view .LVU1111
 3799 0104 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 3800 0108 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 3801 010c 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 3802 0110 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 3803 0114 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 143:armwave.c     ****             }
 3804              		.loc 1 143 17 is_stmt 1 view .LVU1112
 3805              	.LVL277:
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3806              		.loc 1 140 17 view .LVU1113
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3807              		.loc 1 141 17 view .LVU1114
 142:armwave.c     ****                 word >>= 8;
 3808              		.loc 1 142 17 view .LVU1115
 3809              	@ armwave.c:140:                 scale_value = (word & 0xff) * g_armwave_state.vscale;
 140:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 3810              		.loc 1 140 45 is_stmt 0 view .LVU1116
 3811 0118 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 3812              	@ armwave.c:141:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.ta
 141:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3813              		.loc 1 141 63 view .LVU1117
 3814 011c 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 3815              	@ armwave.c:142:                 *(write_buffer + scale_value) += 1;
 142:armwave.c     ****                 word >>= 8;
 3816              		.loc 1 142 47 view .LVU1118
 3817 0120 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 3818 0124 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 3819 0128 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 3820 012c 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 3821 0130 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 143:armwave.c     ****             }
 3822              		.loc 1 143 17 is_stmt 1 view .LVU1119
 3823              	.LVL278:
 3824              	@ armwave.c:120:         for(yy = 0; yy < height; yy += 4) {
 120:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 3825              		.loc 1 120 9 is_stmt 0 view .LVU1120
 3826 0134 D6FFFF8A 		bhi	.L209		@,
 3827 0138 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 3828              	.LVL279:
 3829              	.L208:
 3830              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3831              		.loc 1 109 44 view .LVU1121
 3832 013c 017087E2 		add	r7, r7, #1	@ w, w,
 3833              	.LVL280:
 3834              	@ armwave.c:109:     for(w = 0; w < g_armwave_state.waves; w++) {
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3835              		.loc 1 109 5 view .LVU1122
 3836 0140 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 3837 0144 C9FFFF3A 		bcc	.L210		@,
 3838 0148 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 3839              	.LVL281:
 3840              	.L207:
 109:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3841              		.loc 1 109 5 view .LVU1123
 3842              	.LBE30:
 3843              	.LBE31:
 3844              	@ armwave.c:437:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 437:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3845              		.loc 1 437 32 discriminator 3 view .LVU1124
 3846 014c 0510A0E1 		mov	r1, r5	@, _61
 3847 0150 020BA0E3 		mov	r0, #2048	@,
 3848              	.LVL282:
 437:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3849              		.loc 1 437 32 discriminator 3 view .LVU1125
 3850 0154 FEFFFFEB 		bl	__aeabi_uidiv		@
 3851              	.LVL283:
 3852              	@ armwave.c:437:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 437:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3853              		.loc 1 437 67 discriminator 3 view .LVU1126
 3854 0158 018088E2 		add	r8, r8, #1	@ yy, yy,
 3855              	.LVL284:
 3856              	@ armwave.c:437:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 437:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 3857              		.loc 1 437 9 discriminator 3 view .LVU1127
 3858 015c 080050E1 		cmp	r0, r8	@, yy
 3859 0160 B8FFFF8A 		bhi	.L211		@,
 3860              	.LVL285:
 3861              	.L214:
 3862              	@ armwave.c:436:     for(n = 0; n < 5000; n++) {
 436:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3863              		.loc 1 436 5 discriminator 2 view .LVU1128
 3864 0164 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 3865 0168 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 3866 016c 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 3867 0170 AFFFFF1A 		bne	.L206		@,
 3868 0174 0300A0E1 		mov	r0, r3	@, ivtmp_191
 440:armwave.c     ****         }
 441:armwave.c     ****     }
 442:armwave.c     **** 
 443:armwave.c     ****     /*
 444:armwave.c     ****     printf("Creating pixbuf\n");
 445:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 446:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 447:armwave.c     **** 
 448:armwave.c     ****     printf("Dumping pixbuf\n");
 449:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 450:armwave.c     ****     */
 451:armwave.c     **** 
 452:armwave.c     ****     return 0;
 3869              		.loc 1 452 5 is_stmt 1 view .LVU1129
 3870              	@ armwave.c:453: }
 453:armwave.c     **** }...
 3871              		.loc 1 453 1 is_stmt 0 view .LVU1130
 3872 0178 0CD08DE2 		add	sp, sp, #12	@,,
 3873              		.cfi_def_cfa_offset 36
 3874              		@ sp needed	@
 3875 017c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3876              	.L226:
 3877              		.align	2
 3878              	.L225:
 3879 0180 00000000 		.word	g_armwave_state
 3880 0184 88130000 		.word	5000
 3881              		.cfi_endproc
 3882              	.LFE71:
 3884              		.global	mod_depth
 3885              		.global	overall_scale
 3886              		.comm	gamma_table,256,4
 3887              		.comm	test_wave_buffer,131072,4
 3888              		.comm	g_armwave_state,100,4
 3889              		.section	.rodata
 3890              		.align	2
 3891              		.set	.LANCHOR0,. + 0
 3894              	__PRETTY_FUNCTION__.17001:
 3895 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3895      6176655F 
 3895      73657475 
 3895      705F7265 
 3895      6E646572 
 3896 0015 000000   		.space	3
 3899              	__PRETTY_FUNCTION__.17029:
 3900 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3900      6176655F 
 3900      66696C6C 
 3900      5F706978 
 3900      6275665F 
 3903              	__PRETTY_FUNCTION__.17059:
 3904 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3904      6176655F 
 3904      66696C6C 
 3904      5F706978 
 3904      6275665F 
 3905 004b 00       		.space	1
 3908              	overall_scale:
 3909 004c 00002041 		.word	1092616192
 3910              		.bss
 3911              		.align	2
 3912              		.set	.LANCHOR1,. + 0
 3915              	mod_depth:
 3916 0000 00000000 		.space	4
 3917              		.section	.rodata.str1.4,"aMS",%progbits,1
 3918              		.align	2
 3919              	.LC0:
 3920 0000 61726D77 		.ascii	"armwave.c\000"
 3920      6176652E 
 3920      6300
 3921 000a 0000     		.space	2
 3922              	.LC1:
 3923 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3923      65745F68 
 3923      65696768 
 3923      74203D3D 
 3923      20323536 
 3924 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3924      68656967 
 3924      6874203D 
 3924      3D203130 
 3924      3234207C 
 3925 006b 00       		.space	1
 3926              	.LC2:
 3927 006c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3927      6D776176 
 3927      655F7374 
 3927      6174652E 
 3927      6368315F 
 3928 008f 00       		.space	1
 3929              	.LC3:
 3930 0090 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3930      6D776176 
 3930      655F7374 
 3930      6174652E 
 3930      78636F6F 
 3931 00b9 000000   		.space	3
 3932              	.LC4:
 3933 00bc 73746172 		.ascii	"start_point < end_point\000"
 3933      745F706F 
 3933      696E7420 
 3933      3C20656E 
 3933      645F706F 
 3934              	.LC5:
 3935 00d4 6F75745F 		.ascii	"out_buffer != NULL\000"
 3935      62756666 
 3935      65722021 
 3935      3D204E55 
 3935      4C4C00
 3936 00e7 00       		.space	1
 3937              	.LC6:
 3938 00e8 776200   		.ascii	"wb\000"
 3939 00eb 00       		.space	1
 3940              	.LC7:
 3941 00ec 50330A00 		.ascii	"P3\012\000"
 3942              	.LC8:
 3943 00f0 25642025 		.ascii	"%d %d\012\000"
 3943      640A00
 3944 00f7 00       		.space	1
 3945              	.LC9:
 3946 00f8 3235350A 		.ascii	"255\012\000"
 3946      00
 3947 00fd 000000   		.space	3
 3948              	.LC10:
 3949 0100 25336420 		.ascii	"%3d %3d %3d\012\000"
 3949      25336420 
 3949      2533640A 
 3949      00
 3950 010d 000000   		.space	3
 3951              	.LC11:
 3952 0110 76302E30 		.ascii	"v0.0.1\000"
 3952      2E3100
 3953 0117 00       		.space	1
 3954              	.LC12:
 3955 0118 61726D77 		.ascii	"armwave version: %s\012\000"
 3955      61766520 
 3955      76657273 
 3955      696F6E3A 
 3955      2025730A 
 3956              		.text
 3957              	.Letext0:
 3958              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3959              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3960              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3961              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3962              		.file 6 "/usr/include/stdio.h"
 3963              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3964              		.file 8 "/usr/include/errno.h"
 3965              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3966              		.file 10 "/usr/include/unistd.h"
 3967              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3968              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3969              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3970              		.file 14 "/usr/include/math.h"
 3971              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3972              		.file 16 "/usr/include/time.h"
 3973              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3974              		.file 18 "/usr/local/include/python3.8/object.h"
 3975              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3976              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3977              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3978              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3979              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3980              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3981              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3982              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3983              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3984              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3985              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3986              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3987              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3988              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3989              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3990              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3991              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3992              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3993              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3994              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3995              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3996              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3997              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3998              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3999              		.file 43 "/usr/local/include/python3.8/classobject.h"
 4000              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 4001              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 4002              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 4003              		.file 47 "/usr/local/include/python3.8/traceback.h"
 4004              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 4005              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 4006              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 4007              		.file 51 "/usr/local/include/python3.8/pystate.h"
 4008              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 4009              		.file 53 "/usr/local/include/python3.8/genobject.h"
 4010              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 4011              		.file 55 "/usr/local/include/python3.8/structseq.h"
 4012              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 4013              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 4014              		.file 58 "/usr/local/include/python3.8/codecs.h"
 4015              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 4016              		.file 60 "/usr/local/include/python3.8/context.h"
 4017              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 4018              		.file 62 "/usr/local/include/python3.8/code.h"
 4019              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 4020              		.file 64 "/usr/local/include/python3.8/ceval.h"
 4021              		.file 65 "/usr/local/include/python3.8/import.h"
 4022              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 4023              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 4024              		.file 68 "armwave.h"
 4025              		.file 69 "/usr/include/stdlib.h"
 4026              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 4027              		.file 71 "<built-in>"
 4028              		.file 72 "/usr/include/assert.h"
 4029              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
