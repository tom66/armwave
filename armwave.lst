   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.1:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** struct armwave_state_t g_armwave_state;
  35:armwave.c     **** 
  36:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  37:armwave.c     **** uint8_t gamma_table[256];
  38:armwave.c     **** 
  39:armwave.c     **** // for now...
  40:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  41:armwave.c     **** 
  42:armwave.c     **** float mod_depth = 0.0f;
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Make a test AM waveform for render tests.
  46:armwave.c     ****  */
  47:armwave.c     **** void test_create_waveform()
  48:armwave.c     **** {
  49:armwave.c     ****     float v, mod, noise, xnoise;
  50:armwave.c     ****     int w, x;
  51:armwave.c     **** 
  52:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  53:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  54:armwave.c     ****         //mod = 1.0f;
  55:armwave.c     **** 
  56:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  57:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  58:armwave.c     ****             noise *= noise;
  59:armwave.c     ****             noise *= noise;
  60:armwave.c     ****             noise *= noise;
  61:armwave.c     **** 
  62:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  63:armwave.c     ****                 noise = -noise;
  64:armwave.c     **** 
  65:armwave.c     ****             noise += 1.0f;
  66:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  67:armwave.c     **** 
  68:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  69:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  70:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  71:armwave.c     ****         }
  72:armwave.c     ****     }
  73:armwave.c     **** }
  74:armwave.c     **** 
  75:armwave.c     **** /*
  76:armwave.c     ****  * Create a gamma table.
  77:armwave.c     ****  */
  78:armwave.c     **** void test_create_gamma()
  79:armwave.c     **** {
  80:armwave.c     ****     int i;
  81:armwave.c     ****     float gamma = 0.90f;
  82:armwave.c     **** 
  83:armwave.c     ****     for(i = 0; i < 256; i++) {
  84:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  85:armwave.c     ****     }
  86:armwave.c     **** }
  87:armwave.c     **** 
  88:armwave.c     **** /*
  89:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  90:armwave.c     ****  * pre-computed.
  91:armwave.c     ****  *
  92:armwave.c     ****  * @param    slice_y        Slice to render at
  93:armwave.c     ****  * @param    height         Number of wave points to render
  94:armwave.c     ****  */
  95:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  96:armwave.c     **** {
  97:armwave.c     ****     int yy, ys, w, scale_value;
  98:armwave.c     ****     uint32_t value, word;
  99:armwave.c     ****     uint8_t *wave_base;
 100:armwave.c     ****     uint8_t *write_buffer_base;
 101:armwave.c     ****     uint8_t *write_buffer;
 102:armwave.c     ****     
 103:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 104:armwave.c     **** 
 105:armwave.c     ****     // roll through each waveform
 106:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 107:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 111:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 112:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 113:armwave.c     **** #endif
 114:armwave.c     **** 
 115:armwave.c     ****         // roll through y and render the slice into the out buffer
 116:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 117:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 118:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 119:armwave.c     **** 
 120:armwave.c     **** #if 0
 121:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 122:armwave.c     **** 
 123:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 124:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 125:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 126:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 127:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 128:armwave.c     ****                    wave_base + yy);
 129:armwave.c     **** #endif
 130:armwave.c     **** 
 131:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 132:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 133:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 134:armwave.c     ****             //*(write_buffer + value) = 0xff;
 135:armwave.c     **** 
 136:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 137:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 138:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 139:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 140:armwave.c     ****             	word >>= 8;
 141:armwave.c     ****     		}
 142:armwave.c     **** 
 143:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 144:armwave.c     ****         }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 147:armwave.c     **** 
 148:armwave.c     **** void armwave_init()
 149:armwave.c     **** {
 150:armwave.c     ****     g_armwave_state.flags = 0;
 151:armwave.c     **** }
 152:armwave.c     **** 
 153:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 153 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 154:armwave.c     **** {
 155:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 155 5 view .LVU1
 156:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 156 5 view .LVU2
 157:armwave.c     **** 
 158:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 158 5 view .LVU3
 159:armwave.c     **** 
 160:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 161:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 161 5 view .LVU4
  93              	@ armwave.c:153: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 153:armwave.c     **** {
  94              		.loc 1 153 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 162:armwave.c     **** 
 163:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 164:armwave.c     ****     assert((target_height % 256) == 0);
 165:armwave.c     **** 
 166:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 167:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 167 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 105              		.loc 1 161 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp171,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 169:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 169 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 170:armwave.c     ****     g_armwave_state.waves = waves;
 171:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 172:armwave.c     ****     g_armwave_state.target_width = target_width;
 173:armwave.c     ****     g_armwave_state.target_height = target_height;
 174:armwave.c     **** 
 175:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 176:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 178:armwave.c     ****     g_armwave_state.slice_height = 64;  
 179:armwave.c     **** 
 180:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 180 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 168 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 118              		.loc 1 161 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 120              		.loc 1 164 5 is_stmt 1 view .LVU12
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 167 5 view .LVU13
 122              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 171 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 170 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 180 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 168 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 167 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 168 5 is_stmt 1 view .LVU19
 169:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 169 5 view .LVU20
 139              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 140              		.loc 1 173 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 169 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 170 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 172 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 170 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 171 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 154              		.loc 1 178 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 171 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 172 5 is_stmt 1 view .LVU29
 173:armwave.c     **** 
 160              		.loc 1 173 5 view .LVU30
 178:armwave.c     **** 
 161              		.loc 1 178 5 view .LVU31
 162              		.loc 1 180 5 view .LVU32
 163              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 180 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 181:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 181 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 182:armwave.c     **** 
 183:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 183 5 view .LVU35
 172              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 183 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 184 33 view .LVU37
 180 0064 A0209FE5 		ldr	r2, .L12+8	@ tmp149,
 181              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 186:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 186 33 view .LVU38
 183 0068 FA30A0E3 		mov	r3, #250	@ tmp152,
 184              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 184 33 view .LVU39
 186 006c 402084E5 		str	r2, [r4, #64]	@ tmp149, MEM[(short int *)&g_armwave_state + 64B]
 187              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 186 33 view .LVU40
 189 0070 B434C4E1 		strh	r3, [r4, #68]	@ movhi	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 188:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 188 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 183 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 184 5 is_stmt 1 view .LVU43
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 185 5 view .LVU44
 186:armwave.c     **** 
 198              		.loc 1 186 5 view .LVU45
 199              		.loc 1 188 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 189:armwave.c     **** 
 190:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 191:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 191 5 view .LVU47
 202              	.LVL3:
 192:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 192 5 view .LVU48
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 193 5 view .LVU49
 205              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 193 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp173, g_armwave_state.slice_height
 208              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 194 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 193 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp158, tmp173
 214              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 193 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp160, tmp158
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp160, g_armwave_state.slice_record_height
 218              		.loc 1 194 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 194 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 196:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 196 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp161,
 226              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 194 38 view .LVU57
 228 009c 580084E5 		str	r0, [r4, #88]	@ tmp161, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 196 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     **** 
 198:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 198 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.23, tmp161,
 234              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 235              		.loc 1 196 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 199:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 199 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 199 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 198 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 198 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 199 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, xx
 253              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 199 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp167, tmp166
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp167, tmp167
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp167, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 198 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 200:armwave.c     **** 
 201:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 202:armwave.c     ****     }
 203:armwave.c     **** 
 204:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 204 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 204 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 204 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:205: }
 205:armwave.c     **** }
 271              		.loc 1 205 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 188:armwave.c     **** 
 275              		.loc 1 188 5 is_stmt 1 view .LVU72
 276 00dc 2C309FE5 		ldr	r3, .L12+12	@,
 277 00e0 BC20A0E3 		mov	r2, #188	@,
 278 00e4 28109FE5 		ldr	r1, .L12+16	@,
 279 00e8 28009FE5 		ldr	r0, .L12+20	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 196:armwave.c     **** 
 283              		.loc 1 196 5 view .LVU73
 284 00f0 18309FE5 		ldr	r3, .L12+12	@,
 285 00f4 C420A0E3 		mov	r2, #196	@,
 286 00f8 14109FE5 		ldr	r1, .L12+16	@,
 287 00fc 18009FE5 		ldr	r0, .L12+24	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c F609F406 		.word	116656630
 296 0110 00000000 		.word	.LANCHOR0
 297 0114 00000000 		.word	.LC0
 298 0118 0C000000 		.word	.LC1
 299 011c 30000000 		.word	.LC2
 300              		.cfi_endproc
 301              	.LFE72:
 303              		.align	2
 304              		.global	test_create_waveform
 305              		.syntax unified
 306              		.arm
 307              		.fpu vfp
 309              	test_create_waveform:
 310              	.LFB57:
  48:armwave.c     ****     float v, mod, noise, xnoise;
 311              		.loc 1 48 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 0, uses_anonymous_args = 0
  49:armwave.c     ****     int w, x;
 315              		.loc 1 49 5 view .LVU75
  50:armwave.c     **** 
 316              		.loc 1 50 5 view .LVU76
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 317              		.loc 1 52 5 view .LVU77
 318              	.LVL11:
 319              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 320              		.loc 1 48 1 is_stmt 0 view .LVU78
 321 0120 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 322              		.cfi_def_cfa_offset 36
 323              		.cfi_offset 4, -36
 324              		.cfi_offset 5, -32
 325              		.cfi_offset 6, -28
 326              		.cfi_offset 7, -24
 327              		.cfi_offset 8, -20
 328              		.cfi_offset 9, -16
 329              		.cfi_offset 10, -12
 330              		.cfi_offset 11, -8
 331              		.cfi_offset 14, -4
 332 0124 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 333              		.cfi_def_cfa_offset 84
 334              		.cfi_offset 80, -84
 335              		.cfi_offset 81, -80
 336              		.cfi_offset 82, -76
 337              		.cfi_offset 83, -72
 338              		.cfi_offset 84, -68
 339              		.cfi_offset 85, -64
 340              		.cfi_offset 86, -60
 341              		.cfi_offset 87, -56
 342              		.cfi_offset 88, -52
 343              		.cfi_offset 89, -48
 344              		.cfi_offset 90, -44
 345              		.cfi_offset 91, -40
 346 0128 5C819FE5 		ldr	r8, .L33+40	@ _75,
 347              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 348              		.loc 1 53 33 view .LVU79
 349 012c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 350 0130 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.39, _75,
 351              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 352              		.loc 1 53 13 view .LVU80
 353 0134 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 354              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 355              		.loc 1 57 20 view .LVU81
 356 0138 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 357              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 358              		.loc 1 68 29 view .LVU82
 359 013c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 360              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 361              		.loc 1 68 33 view .LVU83
 362 0140 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 363              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 364              		.loc 1 66 20 view .LVU84
 365 0144 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 366 0148 02B886E2 		add	fp, r6, #131072	@ _81,,
 367 014c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 368              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 369              		.loc 1 48 1 view .LVU85
 370 0150 0CD04DE2 		sub	sp, sp, #12	@,,
 371              		.cfi_def_cfa_offset 96
 372 0154 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 373 0158 0F6086E2 		add	r6, r6, #15	@ ivtmp.39, ivtmp.39,
 374 015c 008068E2 		rsb	r8, r8, #0	@ ivtmp.42, _75
 375              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 376              		.loc 1 52 11 view .LVU86
 377 0160 0090A0E3 		mov	r9, #0	@ w,
 378              	.LVL12:
 379              	.L20:
  53:armwave.c     ****         //mod = 1.0f;
 380              		.loc 1 53 9 is_stmt 1 view .LVU87
 381              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 382              		.loc 1 53 24 is_stmt 0 view .LVU88
 383 0164 909A07EE 		vmov	s15, r9	@ int	@ w, w
 384              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 53 48 view .LVU89
 386 0168 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 387              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 388              		.loc 1 53 13 view .LVU90
 389 016c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 390              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 391              		.loc 1 65 19 view .LVU91
 392 0170 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 393              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 394              		.loc 1 53 24 view .LVU92
 395 0174 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 396              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 397              		.loc 1 70 58 view .LVU93
 398 0178 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 399 017c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.32, ivtmp.39,
 400 0180 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.42,
 401              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 402              		.loc 1 53 33 view .LVU94
 403 0184 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 404              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 405              		.loc 1 53 13 view .LVU95
 406 0188 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 407              	.LVL13:
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 56 9 is_stmt 1 view .LVU96
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 409              		.loc 1 56 9 is_stmt 0 view .LVU97
 410 018c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 411              	.LVL14:
 412              	.L19:
 413              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 414              		.loc 1 57 24 view .LVU98
 415 0190 FEFFFFEB 		bl	rand		@
 416              	.LVL15:
 417 0194 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.32
 418              	.LVL16:
  57:armwave.c     ****             noise *= noise;
 419              		.loc 1 57 13 is_stmt 1 view .LVU99
 420              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 421              		.loc 1 57 31 is_stmt 0 view .LVU100
 422 0198 7000FFE6 		uxth	r0, r0	@ tmp163,
 423              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 424              		.loc 1 57 41 view .LVU101
 425 019c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 426 01a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 427              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 428              		.loc 1 57 20 view .LVU102
 429 01a4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 430              	.LVL17:
  58:armwave.c     ****             noise *= noise;
 431              		.loc 1 58 13 is_stmt 1 view .LVU103
 432              	@ armwave.c:58:             noise *= noise;
  58:armwave.c     ****             noise *= noise;
 433              		.loc 1 58 19 is_stmt 0 view .LVU104
 434 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 435              	.LVL18:
  59:armwave.c     ****             noise *= noise;
 436              		.loc 1 59 13 is_stmt 1 view .LVU105
 437              	@ armwave.c:59:             noise *= noise;
  59:armwave.c     ****             noise *= noise;
 438              		.loc 1 59 19 is_stmt 0 view .LVU106
 439 01ac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL19:
  60:armwave.c     **** 
 441              		.loc 1 60 13 is_stmt 1 view .LVU107
 442              	@ armwave.c:60:             noise *= noise;
  60:armwave.c     **** 
 443              		.loc 1 60 19 is_stmt 0 view .LVU108
 444 01b0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 445              	.LVL20:
  62:armwave.c     ****                 noise = -noise;
 446              		.loc 1 62 13 is_stmt 1 view .LVU109
 447              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 448              		.loc 1 62 17 is_stmt 0 view .LVU110
 449 01b4 FEFFFFEB 		bl	rand		@
 450              	.LVL21:
  63:armwave.c     **** 
 451              		.loc 1 63 17 is_stmt 1 view .LVU111
 452              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 453              		.loc 1 62 15 is_stmt 0 view .LVU112
 454 01b8 020910E3 		tst	r0, #32768	@,
 455              	@ armwave.c:63:                 noise = -noise;
  63:armwave.c     **** 
 456              		.loc 1 63 23 view .LVU113
 457 01bc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 458              	.LVL22:
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 459              		.loc 1 65 13 is_stmt 1 view .LVU114
  66:armwave.c     **** 
 460              		.loc 1 66 13 view .LVU115
 461              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 462              		.loc 1 66 23 is_stmt 0 view .LVU116
 463 01c0 FEFFFFEB 		bl	rand		@
 464              	.LVL23:
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 465              		.loc 1 68 13 is_stmt 1 view .LVU117
 466              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 467              		.loc 1 68 29 is_stmt 0 view .LVU118
 468 01c4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 469 01c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 470 01cc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 471              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 472              		.loc 1 66 30 view .LVU119
 473 01d0 7000FFE6 		uxth	r0, r0	@ tmp173,
 474              	.LVL24:
 475              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 476              		.loc 1 66 40 view .LVU120
 477 01d4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 478 01d8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 479              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 480              		.loc 1 66 20 view .LVU121
 481 01dc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 482              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 483              		.loc 1 68 60 view .LVU122
 484 01e0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 485              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 486              		.loc 1 68 18 view .LVU123
 487 01e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 488 01e8 FEFFFFEB 		bl	sin		@
 489              	.LVL25:
  70:armwave.c     ****         }
 490              		.loc 1 70 13 is_stmt 1 view .LVU124
 491              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 492              		.loc 1 65 19 is_stmt 0 view .LVU125
 493 01ec 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 494              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 495              		.loc 1 70 58 view .LVU126
 496 01f0 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 497              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 498              		.loc 1 70 56 view .LVU127
 499 01f4 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 500 01f8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 501              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 502              		.loc 1 68 77 view .LVU128
 503 01fc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 504              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505              		.loc 1 68 70 view .LVU129
 506 0200 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 507              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 508              		.loc 1 68 77 view .LVU130
 509 0204 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 510              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 511              		.loc 1 68 15 view .LVU131
 512 0208 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 513              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 514              		.loc 1 70 58 view .LVU132
 515 020c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 516 0210 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 517 0214 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 518 0218 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 519 021c 050000DA 		ble	.L16		@,
 520              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 521              		.loc 1 70 56 discriminator 1 view .LVU133
 522 0220 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 523 0224 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 524 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 525 022c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 526 0230 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 527 0234 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 528              	.L16:
 529              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 530              		.loc 1 70 56 discriminator 12 view .LVU134
 531 0238 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 532              	.LVL26:
 533              	@ armwave.c:56:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 534              		.loc 1 56 9 discriminator 12 view .LVU135
 535 023c 060055E1 		cmp	r5, r6	@ ivtmp.32, ivtmp.39
 536 0240 D2FFFF1A 		bne	.L19		@,
 537 0244 026B85E2 		add	r6, r5, #2048	@ ivtmp.39, ivtmp.32,
 538              	.LVL27:
 539              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 540              		.loc 1 52 5 discriminator 2 view .LVU136
 541 0248 0B0056E1 		cmp	r6, fp	@ ivtmp.39, _81
 542              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 543              		.loc 1 52 34 discriminator 2 view .LVU137
 544 024c 019089E2 		add	r9, r9, #1	@ w, w,
 545              	.LVL28:
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 546              		.loc 1 52 34 discriminator 2 view .LVU138
 547 0250 028B48E2 		sub	r8, r8, #2048	@ ivtmp.42, ivtmp.42,
 548              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 549              		.loc 1 52 5 discriminator 2 view .LVU139
 550 0254 C2FFFF1A 		bne	.L20		@,
 551              	@ armwave.c:73: }
  73:armwave.c     **** 
 552              		.loc 1 73 1 view .LVU140
 553 0258 0CD08DE2 		add	sp, sp, #12	@,,
 554              		.cfi_def_cfa_offset 84
 555              		@ sp needed	@
 556 025c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 557              		.cfi_restore 90
 558              		.cfi_restore 91
 559              		.cfi_restore 88
 560              		.cfi_restore 89
 561              		.cfi_restore 86
 562              		.cfi_restore 87
 563              		.cfi_restore 84
 564              		.cfi_restore 85
 565              		.cfi_restore 82
 566              		.cfi_restore 83
 567              		.cfi_restore 80
 568              		.cfi_restore 81
 569              		.cfi_def_cfa_offset 36
 570              	.LVL29:
  73:armwave.c     **** 
 571              		.loc 1 73 1 view .LVU141
 572 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 573              	.LVL30:
 574              	.L34:
  73:armwave.c     **** 
 575              		.loc 1 73 1 view .LVU142
 576              		.align	2
 577              	.L33:
 578 0264 0000803C 		.word	1015021568
 579 0268 0000003F 		.word	1056964608
 580 026c 0050C347 		.word	1203982336
 581 0270 C3F5C840 		.word	1086911939
 582 0274 0000003A 		.word	973078528
 583 0278 38FFC74A 		.word	1254620984
 584 027c 0000803F 		.word	1065353216
 585 0280 0000FE42 		.word	1123942400
 586 0284 00000043 		.word	1124073472
 587 0288 00007F43 		.word	1132396544
 588 028c 00000000 		.word	test_wave_buffer
 589 0290 00000000 		.word	.LANCHOR1
 590              		.cfi_endproc
 591              	.LFE57:
 593              		.align	2
 594              		.global	test_create_gamma
 595              		.syntax unified
 596              		.arm
 597              		.fpu vfp
 599              	test_create_gamma:
 600              	.LFB58:
  79:armwave.c     ****     int i;
 601              		.loc 1 79 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
  80:armwave.c     ****     float gamma = 0.90f;
 605              		.loc 1 80 5 view .LVU144
  81:armwave.c     **** 
 606              		.loc 1 81 5 view .LVU145
 607              	.LVL31:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 608              		.loc 1 83 5 view .LVU146
 609              	@ armwave.c:79: {
  79:armwave.c     ****     int i;
 610              		.loc 1 79 1 is_stmt 0 view .LVU147
 611 0294 70402DE9 		push	{r4, r5, r6, lr}	@
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0298 068B2DED 		vpush.64	{d8, d9, d10}	@
 618              		.cfi_def_cfa_offset 40
 619              		.cfi_offset 80, -40
 620              		.cfi_offset 81, -36
 621              		.cfi_offset 82, -32
 622              		.cfi_offset 83, -28
 623              		.cfi_offset 84, -24
 624              		.cfi_offset 85, -20
 625 029c 68409FE5 		ldr	r4, .L39+20	@ ivtmp.50,
 626              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 627              		.loc 1 84 32 view .LVU148
 628 02a0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 629              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 630              		.loc 1 84 26 view .LVU149
 631 02a4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 632              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 633              		.loc 1 84 49 view .LVU150
 634 02a8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 635 02ac 015084E2 		add	r5, r4, #1	@ _25, ivtmp.50,
 636 02b0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.50,
 637 02b4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 638              	.LVL32:
 639              	.L36:
  84:armwave.c     ****     }
 640              		.loc 1 84 9 is_stmt 1 discriminator 3 view .LVU151
 641              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 642              		.loc 1 84 32 is_stmt 0 discriminator 3 view .LVU152
 643 02b8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.50
 644              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 645              		.loc 1 84 26 discriminator 3 view .LVU153
 646 02bc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 647              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 648              		.loc 1 84 32 discriminator 3 view .LVU154
 649 02c0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 650 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 651 02c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 652              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 653              		.loc 1 84 26 discriminator 3 view .LVU155
 654 02cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 655 02d0 FEFFFFEB 		bl	pow		@
 656              	.LVL33:
 657              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 658              		.loc 1 84 49 discriminator 3 view .LVU156
 659 02d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 660              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 661              		.loc 1 84 24 discriminator 3 view .LVU157
 662 02d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 663 02dc 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 664 02e0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 665              	.LVL34:
 666              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 667              		.loc 1 83 5 discriminator 3 view .LVU158
 668 02e4 060054E1 		cmp	r4, r6	@ ivtmp.50, _26
 669 02e8 F2FFFF1A 		bne	.L36		@,
 670              	@ armwave.c:86: }
  86:armwave.c     **** 
 671              		.loc 1 86 1 view .LVU159
 672 02ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 16
 680 02f0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 681              	.LVL35:
 682              	.L40:
  86:armwave.c     **** 
 683              		.loc 1 86 1 view .LVU160
 684 02f4 0000A0E1 		.align	3
 685              	.L39:
 686 02f8 000000C0 		.word	-1073741824
 687 02fc CCCCEC3F 		.word	1072483532
 688 0300 00000000 		.word	0
 689 0304 00E06F40 		.word	1081073664
 690 0308 00007F43 		.word	1132396544
 691 030c FFFFFFFF 		.word	gamma_table-1
 692              		.cfi_endproc
 693              	.LFE58:
 695              		.align	2
 696              		.global	render_nonaa_to_buffer_1ch_slice
 697              		.syntax unified
 698              		.arm
 699              		.fpu vfp
 701              	render_nonaa_to_buffer_1ch_slice:
 702              	.LVL36:
 703              	.LFB59:
  96:armwave.c     ****     int yy, ys, w, scale_value;
 704              		.loc 1 96 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
  97:armwave.c     ****     uint32_t value, word;
 708              		.loc 1 97 5 view .LVU162
  98:armwave.c     ****     uint8_t *wave_base;
 709              		.loc 1 98 5 view .LVU163
  99:armwave.c     ****     uint8_t *write_buffer_base;
 710              		.loc 1 99 5 view .LVU164
 100:armwave.c     ****     uint8_t *write_buffer;
 711              		.loc 1 100 5 view .LVU165
 101:armwave.c     ****     
 712              		.loc 1 101 5 view .LVU166
 103:armwave.c     **** 
 713              		.loc 1 103 5 view .LVU167
 714              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 715              		.loc 1 103 40 is_stmt 0 view .LVU168
 716 0310 F4209FE5 		ldr	r2, .L53	@ tmp257,
 717              	@ armwave.c:96: {
  96:armwave.c     ****     int yy, ys, w, scale_value;
 718              		.loc 1 96 1 view .LVU169
 719 0314 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 720              		.cfi_def_cfa_offset 36
 721              		.cfi_offset 4, -36
 722              		.cfi_offset 5, -32
 723              		.cfi_offset 6, -28
 724              		.cfi_offset 7, -24
 725              		.cfi_offset 8, -20
 726              		.cfi_offset 9, -16
 727              		.cfi_offset 10, -12
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
 730              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 731              		.loc 1 106 5 view .LVU170
 732 0318 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 733              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 734              		.loc 1 103 63 view .LVU171
 735 031c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 736              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 737              		.loc 1 106 5 view .LVU172
 738 0320 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 739              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 740              		.loc 1 103 40 view .LVU173
 741 0324 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 742              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 743              		.loc 1 103 63 view .LVU174
 744 0328 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 745              	.LVL37:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 106 5 is_stmt 1 view .LVU175
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 747              		.loc 1 106 5 is_stmt 0 view .LVU176
 748 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 749 0330 000051E3 		cmp	r1, #0	@ height,
 750 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 751 0338 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 752              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 753              		.loc 1 106 11 view .LVU177
 754 033c 0080A0E3 		mov	r8, #0	@ w,
 755              	.LVL38:
 756              	.L45:
 107:armwave.c     **** 
 757              		.loc 1 107 9 is_stmt 1 view .LVU178
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 758              		.loc 1 117 9 view .LVU179
 759              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 760              		.loc 1 107 64 is_stmt 0 view .LVU180
 761 0340 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 762 0344 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 763              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 764              		.loc 1 117 16 view .LVU181
 765 0348 0000A0E3 		mov	r0, #0	@ yy,
 766 034c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 767 0350 037087E0 		add	r7, r7, r3	@ ivtmp.56, g_armwave_state.wave_buffer, tmp195
 768              	.LVL39:
 769              	.L44:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 770              		.loc 1 132 13 is_stmt 1 view .LVU182
 771              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 772              		.loc 1 132 18 is_stmt 0 view .LVU183
 773 0354 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 774              	.LVL40:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 775              		.loc 1 136 13 is_stmt 1 view .LVU184
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 776              		.loc 1 137 14 view .LVU185
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 777              		.loc 1 138 14 view .LVU186
 139:armwave.c     ****             	word >>= 8;
 778              		.loc 1 139 14 view .LVU187
 779              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 780              		.loc 1 137 42 is_stmt 0 view .LVU188
 781 0358 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 782              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 783              		.loc 1 138 60 view .LVU189
 784 035c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 785              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 786              		.loc 1 137 34 view .LVU190
 787 0360 73E0EFE6 		uxtb	lr, r3	@ word, word
 788              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 789              		.loc 1 140 19 view .LVU191
 790 0364 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 791              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 792              		.loc 1 139 44 view .LVU192
 793 0368 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 794              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 137 34 view .LVU193
 796 036c 7440EFE6 		uxtb	r4, r4	@ word, word
 797              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 798              		.loc 1 139 44 view .LVU194
 799 0370 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 800              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 801              		.loc 1 138 60 view .LVU195
 802 0374 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 803              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 804              		.loc 1 140 19 view .LVU196
 805 0378 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 806              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 807              		.loc 1 139 44 view .LVU197
 808 037c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 809              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 137 34 view .LVU198
 811 0380 7EE0EFE6 		uxtb	lr, lr	@ word, word
 812              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 813              		.loc 1 140 19 view .LVU199
 814 0384 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 815              	.LVL41:
 816              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 817              		.loc 1 139 44 view .LVU200
 818 0388 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 819 038c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 820              	.LVL42:
 140:armwave.c     ****     		}
 821              		.loc 1 140 14 is_stmt 1 view .LVU201
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 822              		.loc 1 137 14 view .LVU202
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 823              		.loc 1 138 14 view .LVU203
 139:armwave.c     ****             	word >>= 8;
 824              		.loc 1 139 14 view .LVU204
 825              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 826              		.loc 1 137 42 is_stmt 0 view .LVU205
 827 0390 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 828              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 829              		.loc 1 138 60 view .LVU206
 830 0394 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 831              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 832              		.loc 1 139 44 view .LVU207
 833 0398 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 834              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 835              		.loc 1 138 60 view .LVU208
 836 039c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 837              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 838              		.loc 1 139 44 view .LVU209
 839 03a0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 840              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 841              		.loc 1 138 60 view .LVU210
 842 03a4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 843              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 844              		.loc 1 117 37 view .LVU211
 845 03a8 040080E2 		add	r0, r0, #4	@ yy, yy,
 846              	.LVL43:
 847              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 848              		.loc 1 139 44 view .LVU212
 849 03ac 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 850              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 851              		.loc 1 117 9 view .LVU213
 852 03b0 000051E1 		cmp	r1, r0	@ height, yy
 853              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 854              		.loc 1 139 44 view .LVU214
 855 03b4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 856 03b8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 857              	.LVL44:
 140:armwave.c     ****     		}
 858              		.loc 1 140 14 is_stmt 1 view .LVU215
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 859              		.loc 1 137 14 view .LVU216
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 860              		.loc 1 138 14 view .LVU217
 139:armwave.c     ****             	word >>= 8;
 861              		.loc 1 139 14 view .LVU218
 862              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 863              		.loc 1 137 42 is_stmt 0 view .LVU219
 864 03bc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 865              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 866              		.loc 1 138 60 view .LVU220
 867 03c0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 868              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 869              		.loc 1 139 44 view .LVU221
 870 03c4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 871 03c8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 872 03cc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 873 03d0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 874 03d4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 140:armwave.c     ****     		}
 875              		.loc 1 140 14 is_stmt 1 view .LVU222
 876              	.LVL45:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 877              		.loc 1 137 14 view .LVU223
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 878              		.loc 1 138 14 view .LVU224
 139:armwave.c     ****             	word >>= 8;
 879              		.loc 1 139 14 view .LVU225
 880              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 881              		.loc 1 137 42 is_stmt 0 view .LVU226
 882 03d8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 883              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 884              		.loc 1 138 60 view .LVU227
 885 03dc 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 887              		.loc 1 139 44 view .LVU228
 888 03e0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 889 03e4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 890 03e8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 891 03ec 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 892 03f0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 140:armwave.c     ****     		}
 893              		.loc 1 140 14 is_stmt 1 view .LVU229
 894              	.LVL46:
 895              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 896              		.loc 1 117 9 is_stmt 0 view .LVU230
 897 03f4 D6FFFF8A 		bhi	.L44		@,
 898              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 899              		.loc 1 106 5 view .LVU231
 900 03f8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 901              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 106 44 view .LVU232
 903 03fc 018088E2 		add	r8, r8, #1	@ w, w,
 904              	.LVL47:
 905              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 106 5 view .LVU233
 907 0400 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 908 0404 CDFFFF3A 		bcc	.L45		@,
 909 0408 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 040c 00000000 		.word	g_armwave_state
 914              		.cfi_endproc
 915              	.LFE59:
 917              		.align	2
 918              		.global	armwave_init
 919              		.syntax unified
 920              		.arm
 921              		.fpu vfp
 923              	armwave_init:
 924              	.LFB60:
 149:armwave.c     ****     g_armwave_state.flags = 0;
 925              		.loc 1 149 1 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 150:armwave.c     **** }
 930              		.loc 1 150 5 view .LVU235
 931              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 932              		.loc 1 150 27 is_stmt 0 view .LVU236
 933 0410 08309FE5 		ldr	r3, .L56	@ tmp110,
 934 0414 0020A0E3 		mov	r2, #0	@ tmp111,
 935 0418 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 936              	@ armwave.c:151: }
 151:armwave.c     **** 
 937              		.loc 1 151 1 view .LVU237
 938 041c 1EFF2FE1 		bx	lr	@
 939              	.L57:
 940              		.align	2
 941              	.L56:
 942 0420 00000000 		.word	g_armwave_state
 943              		.cfi_endproc
 944              	.LFE60:
 946              		.align	2
 947              		.global	armwave_setup_render
 948              		.syntax unified
 949              		.arm
 950              		.fpu vfp
 952              	armwave_setup_render:
 953              	.LVL48:
 954              	.LFB61:
 154:armwave.c     ****     uint32_t length, xx;
 955              		.loc 1 154 1 is_stmt 1 view -0
 956              		.cfi_startproc
 957              		@ args = 16, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 155:armwave.c     ****     float points_per_pixel;
 959              		.loc 1 155 5 view .LVU239
 156:armwave.c     **** 
 960              		.loc 1 156 5 view .LVU240
 158:armwave.c     **** 
 961              		.loc 1 158 5 view .LVU241
 962              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 963              		.loc 1 154 1 is_stmt 0 view .LVU242
 964 0424 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 965              		.cfi_def_cfa_offset 32
 966              		.cfi_offset 4, -32
 967              		.cfi_offset 5, -28
 968              		.cfi_offset 6, -24
 969              		.cfi_offset 7, -20
 970              		.cfi_offset 8, -16
 971              		.cfi_offset 9, -12
 972              		.cfi_offset 10, -8
 973              		.cfi_offset 14, -4
 974              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 975              		.loc 1 158 5 view .LVU243
 976 0428 020051E1 		cmp	r1, r2	@ start_point, end_point
 977              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 154 1 view .LVU244
 979 042c 028B2DED 		vpush.64	{d8}	@
 980              		.cfi_def_cfa_offset 40
 981              		.cfi_offset 80, -40
 982              		.cfi_offset 81, -36
 983              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 984              		.loc 1 154 1 view .LVU245
 985 0430 0190A0E1 		mov	r9, r1	@ start_point, start_point
 986 0434 0260A0E1 		mov	r6, r2	@ end_point, end_point
 987 0438 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 988              	.LVL49:
 154:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 154 1 view .LVU246
 990 043c 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 991 0440 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 992              	.LVL50:
 993              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 994              		.loc 1 158 5 view .LVU247
 995 0444 3E00002A 		bcs	.L70		@,
 161:armwave.c     **** 
 996              		.loc 1 161 5 is_stmt 1 view .LVU248
 997              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 998              		.loc 1 161 33 is_stmt 0 view .LVU249
 999 0448 48519FE5 		ldr	r5, .L74+4	@ tmp193,
 1000              	@ armwave.c:164:     assert((target_height % 256) == 0);
 164:armwave.c     **** 
 1001              		.loc 1 164 5 view .LVU250
 1002 044c FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1003              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 1004              		.loc 1 161 33 view .LVU251
 1005 0450 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 1006              		.loc 1 164 5 is_stmt 1 view .LVU252
 1007 0454 4900001A 		bne	.L71		@,
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1008              		.loc 1 167 5 view .LVU253
 1009              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1010              		.loc 1 171 42 is_stmt 0 view .LVU254
 1011 0458 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1012              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1013              		.loc 1 180 23 view .LVU255
 1014 045c 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1015              	.LVL51:
 1016              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1017              		.loc 1 169 33 view .LVU256
 1018 0460 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1019              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1020              		.loc 1 170 27 view .LVU257
 1021 0464 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1022              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1023              		.loc 1 168 44 view .LVU258
 1024 0468 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1025              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1026              		.loc 1 178 34 view .LVU259
 1027 046c 4030A0E3 		mov	r3, #64	@ tmp159,
 1028              	.LVL52:
 1029              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1030              		.loc 1 180 7 view .LVU260
 1031 0470 000050E3 		cmp	r0, #0	@ _4,
 1032              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1033              		.loc 1 167 29 view .LVU261
 1034 0474 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1035              		.loc 1 168 5 is_stmt 1 view .LVU262
 1036              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1037              		.loc 1 172 34 is_stmt 0 view .LVU263
 1038 0478 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1039              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 1040              		.loc 1 173 35 view .LVU264
 1041 047c 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1042              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1043              		.loc 1 171 26 view .LVU265
 1044 0480 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1045              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1046              		.loc 1 168 28 view .LVU266
 1047 0484 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1048              		.loc 1 169 5 is_stmt 1 view .LVU267
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1049              		.loc 1 170 5 view .LVU268
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1050              		.loc 1 171 5 view .LVU269
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1051              		.loc 1 172 5 view .LVU270
 173:armwave.c     **** 
 1052              		.loc 1 173 5 view .LVU271
 178:armwave.c     **** 
 1053              		.loc 1 178 5 view .LVU272
 1054              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1055              		.loc 1 178 34 is_stmt 0 view .LVU273
 1056 0488 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 180 5 is_stmt 1 view .LVU274
 1058              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 180 7 is_stmt 0 view .LVU275
 1060 048c 0100000A 		beq	.L61		@,
 181:armwave.c     **** 
 1061              		.loc 1 181 9 is_stmt 1 view .LVU276
 1062 0490 FEFFFFEB 		bl	free		@
 1063              	.LVL53:
 181:armwave.c     **** 
 1064              		.loc 1 181 9 is_stmt 0 view .LVU277
 1065 0494 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1066              	.L61:
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1067              		.loc 1 183 5 is_stmt 1 view .LVU278
 1068              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1069              		.loc 1 183 34 is_stmt 0 view .LVU279
 1070 0498 0110A0E3 		mov	r1, #1	@,
 1071 049c 0700A0E1 		mov	r0, r7	@, _3
 1072 04a0 FEFFFFEB 		bl	calloc		@
 1073              	.LVL54:
 1074              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1075              		.loc 1 184 33 view .LVU280
 1076 04a4 F0209FE5 		ldr	r2, .L74+8	@ tmp165,
 1077              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1078              		.loc 1 186 33 view .LVU281
 1079 04a8 FA30A0E3 		mov	r3, #250	@ tmp168,
 1080              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1081              		.loc 1 184 33 view .LVU282
 1082 04ac 402085E5 		str	r2, [r5, #64]	@ tmp165, MEM[(short int *)&g_armwave_state + 64B]
 1083              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1084              		.loc 1 186 33 view .LVU283
 1085 04b0 B434C5E1 		strh	r3, [r5, #68]	@ movhi	@ tmp168, g_armwave_state.ch1_color.b
 1086              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 188:armwave.c     **** 
 1087              		.loc 1 188 5 view .LVU284
 1088 04b4 000050E3 		cmp	r0, #0	@ tmp162,
 1089              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1090              		.loc 1 183 32 view .LVU285
 1091 04b8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1092              		.loc 1 184 5 is_stmt 1 view .LVU286
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1093              		.loc 1 185 5 view .LVU287
 186:armwave.c     **** 
 1094              		.loc 1 186 5 view .LVU288
 188:armwave.c     **** 
 1095              		.loc 1 188 5 view .LVU289
 1096 04bc 2A00000A 		beq	.L72		@,
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1097              		.loc 1 191 5 view .LVU290
 1098              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1099              		.loc 1 192 34 is_stmt 0 view .LVU291
 1100 04c0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1101              	@ armwave.c:191:     length = end_point - start_point;
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 191 12 view .LVU292
 1103 04c4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1104              	.LVL55:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1105              		.loc 1 192 5 is_stmt 1 view .LVU293
 1106              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1107              		.loc 1 194 40 is_stmt 0 view .LVU294
 1108 04c8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1109              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 192 34 view .LVU295
 1111 04cc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp173, target_width
 1112              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 192 31 view .LVU296
 1114 04d0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1115 04d4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp172, length
 1116              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 193 60 view .LVU297
 1118 04d8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp197, g_armwave_state.slice_height
 1119 04dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp176, tmp197
 1120              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 192 22 view .LVU298
 1122 04e0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp172, tmp173
 1123              	.LVL56:
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 193 5 is_stmt 1 view .LVU299
 1125              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1126              		.loc 1 193 60 is_stmt 0 view .LVU300
 1127 04e4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp178, tmp176, points_per_pixel
 1128              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1129              		.loc 1 193 41 view .LVU301
 1130 04e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 1131 04ec 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp179, g_armwave_state.slice_record_height
 194:armwave.c     **** 
 1132              		.loc 1 194 5 is_stmt 1 view .LVU302
 1133              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1134              		.loc 1 194 40 is_stmt 0 view .LVU303
 1135 04f0 FEFFFFEB 		bl	malloc		@
 1136              	.LVL57:
 1137              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 1138              		.loc 1 196 5 view .LVU304
 1139 04f4 000050E3 		cmp	r0, #0	@ tmp181,
 1140              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1141              		.loc 1 194 38 view .LVU305
 1142 04f8 580085E5 		str	r0, [r5, #88]	@ tmp181, g_armwave_state.xcoord_to_xpixel
 196:armwave.c     **** 
 1143              		.loc 1 196 5 is_stmt 1 view .LVU306
 1144 04fc 1500000A 		beq	.L73		@,
 1145              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1146              		.loc 1 199 54 is_stmt 0 view .LVU307
 1147 0500 237ADFED 		vldr.32	s15, .L74	@ tmp186,
 1148 0504 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp181,
 1149 0508 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp186, points_per_pixel
 1150              	.L64:
 1151              	.LVL58:
 199:armwave.c     **** 
 1152              		.loc 1 199 9 is_stmt 1 discriminator 3 view .LVU308
 1153              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1154              		.loc 1 199 74 is_stmt 0 discriminator 3 view .LVU309
 1155 050c 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1156              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1157              		.loc 1 198 32 discriminator 3 view .LVU310
 1158 0510 014084E2 		add	r4, r4, #1	@ xx, xx,
 1159              	.LVL59:
 1160              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 198 5 discriminator 3 view .LVU311
 1162 0514 040056E1 		cmp	r6, r4	@ length, xx
 1163              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1164              		.loc 1 199 74 discriminator 3 view .LVU312
 1165 0518 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp187, xx
 1166 051c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp188, tmp187, _15
 1167              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1168              		.loc 1 199 46 discriminator 3 view .LVU313
 1169 0520 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp189, tmp188
 1170 0524 903A17EE 		vmov	r3, s15	@ int	@ tmp189, tmp189
 1171 0528 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp189, MEM[base: _64, offset: 0B]
 1172              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1173              		.loc 1 198 5 discriminator 3 view .LVU314
 1174 052c F6FFFF1A 		bne	.L64		@,
 204:armwave.c     **** }
 1175              		.loc 1 204 5 is_stmt 1 view .LVU315
 1176              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1177              		.loc 1 204 34 is_stmt 0 view .LVU316
 1178 0530 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1179 0534 FEFFFFEB 		bl	malloc		@
 1180              	.LVL60:
 1181              	@ armwave.c:205: }
 1182              		.loc 1 205 1 view .LVU317
 1183 0538 028BBDEC 		vldm	sp!, {d8}	@
 1184              		.cfi_remember_state
 1185              		.cfi_restore 80
 1186              		.cfi_restore 81
 1187              		.cfi_def_cfa_offset 32
 1188              	.LVL61:
 1189              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1190              		.loc 1 204 32 view .LVU318
 1191 053c 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1192              	@ armwave.c:205: }
 1193              		.loc 1 205 1 view .LVU319
 1194 0540 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1195              	.LVL62:
 1196              	.L70:
 1197              		.cfi_restore_state
 158:armwave.c     **** 
 1198              		.loc 1 158 5 is_stmt 1 discriminator 1 view .LVU320
 1199 0544 54309FE5 		ldr	r3, .L74+12	@,
 1200              	.LVL63:
 158:armwave.c     **** 
 1201              		.loc 1 158 5 is_stmt 0 discriminator 1 view .LVU321
 1202 0548 9E20A0E3 		mov	r2, #158	@,
 1203 054c 50109FE5 		ldr	r1, .L74+16	@,
 1204 0550 50009FE5 		ldr	r0, .L74+20	@,
 1205              	.LVL64:
 158:armwave.c     **** 
 1206              		.loc 1 158 5 discriminator 1 view .LVU322
 1207 0554 FEFFFFEB 		bl	__assert_fail		@
 1208              	.LVL65:
 1209              	.L73:
 196:armwave.c     **** 
 1210              		.loc 1 196 5 is_stmt 1 discriminator 1 view .LVU323
 1211 0558 40309FE5 		ldr	r3, .L74+12	@,
 1212 055c C420A0E3 		mov	r2, #196	@,
 1213 0560 3C109FE5 		ldr	r1, .L74+16	@,
 1214 0564 40009FE5 		ldr	r0, .L74+24	@,
 1215 0568 FEFFFFEB 		bl	__assert_fail		@
 1216              	.LVL66:
 1217              	.L72:
 188:armwave.c     **** 
 1218              		.loc 1 188 5 discriminator 1 view .LVU324
 1219 056c 2C309FE5 		ldr	r3, .L74+12	@,
 1220 0570 BC20A0E3 		mov	r2, #188	@,
 1221 0574 28109FE5 		ldr	r1, .L74+16	@,
 1222 0578 30009FE5 		ldr	r0, .L74+28	@,
 1223 057c FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL67:
 1225              	.L71:
 164:armwave.c     **** 
 1226              		.loc 1 164 5 discriminator 1 view .LVU325
 1227 0580 18309FE5 		ldr	r3, .L74+12	@,
 1228              	.LVL68:
 164:armwave.c     **** 
 1229              		.loc 1 164 5 is_stmt 0 discriminator 1 view .LVU326
 1230 0584 A420A0E3 		mov	r2, #164	@,
 1231 0588 14109FE5 		ldr	r1, .L74+16	@,
 1232 058c 20009FE5 		ldr	r0, .L74+32	@,
 1233              	.LVL69:
 164:armwave.c     **** 
 1234              		.loc 1 164 5 discriminator 1 view .LVU327
 1235 0590 FEFFFFEB 		bl	__assert_fail		@
 1236              	.LVL70:
 1237              	.L75:
 164:armwave.c     **** 
 1238              		.loc 1 164 5 discriminator 1 view .LVU328
 1239              		.align	2
 1240              	.L74:
 1241 0594 0000803F 		.word	1065353216
 1242 0598 00000000 		.word	g_armwave_state
 1243 059c F609F406 		.word	116656630
 1244 05a0 00000000 		.word	.LANCHOR0
 1245 05a4 00000000 		.word	.LC0
 1246 05a8 5C000000 		.word	.LC3
 1247 05ac 30000000 		.word	.LC2
 1248 05b0 0C000000 		.word	.LC1
 1249 05b4 74000000 		.word	.LC4
 1250              		.cfi_endproc
 1251              	.LFE61:
 1253              		.align	2
 1254              		.global	armwave_clear_buffer
 1255              		.syntax unified
 1256              		.arm
 1257              		.fpu vfp
 1259              	armwave_clear_buffer:
 1260              	.LVL71:
 1261              	.LFB62:
 206:armwave.c     **** 
 207:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 208:armwave.c     **** {
 1262              		.loc 1 208 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 209:armwave.c     ****     // Flags ignored, only one buffer cleared
 210:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1267              		.loc 1 210 5 view .LVU330
 1268 05b8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1269 05bc 0010A0E3 		mov	r1, #0	@,
 1270 05c0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1271 05c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1272              	.LVL72:
 1273              		.loc 1 210 5 is_stmt 0 view .LVU331
 1274 05c8 FEFFFFEA 		b	memset		@
 1275              	.LVL73:
 1276              	.L78:
 1277              		.align	2
 1278              	.L77:
 1279 05cc 00000000 		.word	g_armwave_state
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.align	2
 1284              		.global	armwave_fill_pixbuf2
 1285              		.syntax unified
 1286              		.arm
 1287              		.fpu vfp
 1289              	armwave_fill_pixbuf2:
 1290              	.LVL74:
 1291              	.LFB63:
 211:armwave.c     **** }
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 215:armwave.c     **** {
 216:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 217:armwave.c     ****     int rr, gg, bb;
 218:armwave.c     ****     uint8_t r, g, b;
 219:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 221:armwave.c     **** 
 222:armwave.c     ****     assert(out_buffer != NULL);
 223:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 224:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 225:armwave.c     **** 
 226:armwave.c     **** #if 0
 227:armwave.c     ****     // Pixbuf tests
 228:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 229:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 230:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 231:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 232:armwave.c     ****         }
 233:armwave.c     ****     }
 234:armwave.c     **** #endif
 235:armwave.c     **** 
 236:armwave.c     **** #if 1
 237:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 238:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 239:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 240:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 241:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 242:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 243:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 244:armwave.c     **** 
 245:armwave.c     **** #if 0
 246:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 247:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 248:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 249:armwave.c     **** 
 250:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 251:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 252:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 253:armwave.c     **** #endif
 254:armwave.c     **** 
 255:armwave.c     ****             if(value != 0) {
 256:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 257:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 258:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 259:armwave.c     **** 
 260:armwave.c     **** 	            r = MIN(rr, 255);
 261:armwave.c     **** 	            g = MIN(gg, 255);
 262:armwave.c     **** 	            b = MIN(bb, 255);
 263:armwave.c     **** 
 264:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 265:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 266:armwave.c     **** 
 267:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 268:armwave.c     **** 
 269:armwave.c     **** 	            *out_buffer++ = word;
 270:armwave.c     **** 	        }
 271:armwave.c     ****         }
 272:armwave.c     ****     }
 273:armwave.c     **** #endif
 274:armwave.c     **** }
 275:armwave.c     **** */
 276:armwave.c     **** 
 277:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 278:armwave.c     **** {
 1292              		.loc 1 278 1 is_stmt 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 279:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1296              		.loc 1 279 5 view .LVU333
 280:armwave.c     ****     int rr, gg, bb;
 1297              		.loc 1 280 5 view .LVU334
 281:armwave.c     ****     uint8_t r, g, b;
 1298              		.loc 1 281 5 view .LVU335
 282:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1299              		.loc 1 282 5 view .LVU336
 1300              	@ armwave.c:278: {
 278:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1301              		.loc 1 278 1 is_stmt 0 view .LVU337
 1302 05d0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1303              		.cfi_def_cfa_offset 32
 1304              		.cfi_offset 4, -32
 1305              		.cfi_offset 5, -28
 1306              		.cfi_offset 6, -24
 1307              		.cfi_offset 7, -20
 1308              		.cfi_offset 8, -16
 1309              		.cfi_offset 9, -12
 1310              		.cfi_offset 10, -8
 1311              		.cfi_offset 14, -4
 1312              	@ armwave.c:285:     assert(out_buffer != NULL);
 283:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 284:armwave.c     **** 
 285:armwave.c     ****     assert(out_buffer != NULL);
 1313              		.loc 1 285 5 view .LVU338
 1314 05d4 000050E3 		cmp	r0, #0	@ out_buffer
 1315              	@ armwave.c:282:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 282:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1316              		.loc 1 282 14 view .LVU339
 1317 05d8 B4E09FE5 		ldr	lr, .L91	@ tmp173,
 1318 05dc 04409EE5 		ldr	r4, [lr, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1319              	.LVL75:
 283:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1320              		.loc 1 283 5 is_stmt 1 view .LVU340
 1321              		.loc 1 285 5 view .LVU341
 1322 05e0 2600000A 		beq	.L80		@,
 1323              	.LVL76:
 1324              	@ armwave.c:288:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 286:armwave.c     **** 
 287:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 288:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1325              		.loc 1 288 37 is_stmt 0 view .LVU342
 1326 05e4 38209EE5 		ldr	r2, [lr, #56]	@ prephitmp_102, g_armwave_state.target_height
 1327              	@ armwave.c:288:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1328              		.loc 1 288 5 view .LVU343
 1329 05e8 000052E3 		cmp	r2, #0	@ prephitmp_102,
 1330 05ec F087BD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1331              	@ armwave.c:293:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 289:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 290:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 291:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 292:armwave.c     **** 
 293:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1332              		.loc 1 293 44 view .LVU344
 1333 05f0 F074DEE1 		ldrsh	r7, [lr, #64]	@ _6, g_armwave_state.ch1_color.r
 1334              	@ armwave.c:294:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 294:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1335              		.loc 1 294 44 view .LVU345
 1336 05f4 F264DEE1 		ldrsh	r6, [lr, #66]	@ _10, g_armwave_state.ch1_color.g
 1337              	@ armwave.c:295:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 295:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1338              		.loc 1 295 44 view .LVU346
 1339 05f8 F454DEE1 		ldrsh	r5, [lr, #68]	@ _14, g_armwave_state.ch1_color.b
 1340 05fc 34309EE5 		ldr	r3, [lr, #52]	@ _28, g_armwave_state.target_width
 1341              	@ armwave.c:288:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 288:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1342              		.loc 1 288 12 view .LVU347
 1343 0600 00C0A0E3 		mov	ip, #0	@ yy,
 1344              	.LVL77:
 1345              	.L82:
 1346              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1347              		.loc 1 289 9 view .LVU348
 1348 0604 000053E3 		cmp	r3, #0	@ _28,
 1349              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1350              		.loc 1 289 16 view .LVU349
 1351 0608 0010A013 		movne	r1, #0	@ xx,
 1352              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1353              		.loc 1 289 9 view .LVU350
 1354 060c 1700000A 		beq	.L84		@,
 1355              	.LVL78:
 1356              	.L83:
 291:armwave.c     **** 
 1357              		.loc 1 291 13 is_stmt 1 discriminator 3 view .LVU351
 1358              	@ armwave.c:291:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 291:armwave.c     **** 
 1359              		.loc 1 291 21 is_stmt 0 discriminator 3 view .LVU352
 1360 0610 9C4323E0 		mla	r3, ip, r3, r4	@ tmp158, yy, _28, base_ptr
 1361 0614 0180D3E7 		ldrb	r8, [r3, r1]	@ zero_extendqisi2	@ _5, *_4
 1362              	.LVL79:
 293:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1363              		.loc 1 293 13 is_stmt 1 discriminator 3 view .LVU353
 294:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1364              		.loc 1 294 13 discriminator 3 view .LVU354
 1365              		.loc 1 295 13 discriminator 3 view .LVU355
 296:armwave.c     **** 
 297:armwave.c     ****             r = MIN(rr, 255);
 1366              		.loc 1 297 13 discriminator 3 view .LVU356
 298:armwave.c     ****             g = MIN(gg, 255);
 1367              		.loc 1 298 13 discriminator 3 view .LVU357
 299:armwave.c     ****             b = MIN(bb, 255);
 1368              		.loc 1 299 13 discriminator 3 view .LVU358
 300:armwave.c     **** 
 301:armwave.c     ****             //r = CLAMP(rr * overall_scale, 0, 255);
 302:armwave.c     ****             //g = CLAMP(gg * overall_scale, 0, 255);
 303:armwave.c     ****             //b = CLAMP(bb * overall_scale, 0, 255);
 304:armwave.c     **** 
 305:armwave.c     ****             // ensure 100% alpha channel, if it is used
 306:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1369              		.loc 1 306 13 discriminator 3 view .LVU359
 307:armwave.c     **** 
 308:armwave.c     ****             *out_buffer++ = word;
 1370              		.loc 1 308 13 discriminator 3 view .LVU360
 1371              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1372              		.loc 1 289 58 is_stmt 0 discriminator 3 view .LVU361
 1373 0618 011081E2 		add	r1, r1, #1	@ xx, xx,
 1374              	.LVL80:
 1375              	@ armwave.c:295:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 295:armwave.c     **** 
 1376              		.loc 1 295 47 discriminator 3 view .LVU362
 1377 061c 880563E1 		smulbb	r3, r8, r5	@ tmp161, _5, _14
 1378              	@ armwave.c:294:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 294:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1379              		.loc 1 294 47 discriminator 3 view .LVU363
 1380 0620 880662E1 		smulbb	r2, r8, r6	@ tmp164, _5, _10
 1381              	@ armwave.c:293:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 293:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1382              		.loc 1 293 47 discriminator 3 view .LVU364
 1383 0624 880768E1 		smulbb	r8, r8, r7	@ tmp168, _5, _6
 1384              	.LVL81:
 1385              	@ armwave.c:295:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 295:armwave.c     **** 
 1386              		.loc 1 295 56 discriminator 3 view .LVU365
 1387 0628 2394A0E1 		lsr	r9, r3, #8	@ bb, tmp161,
 1388              	@ armwave.c:299:             b = MIN(bb, 255);
 299:armwave.c     **** 
 1389              		.loc 1 299 17 discriminator 3 view .LVU366
 1390 062c FF0059E3 		cmp	r9, #255	@ bb,
 1391              	@ armwave.c:294:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 294:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1392              		.loc 1 294 56 discriminator 3 view .LVU367
 1393 0630 2234A0E1 		lsr	r3, r2, #8	@ gg, tmp164,
 1394              	@ armwave.c:299:             b = MIN(bb, 255);
 299:armwave.c     **** 
 1395              		.loc 1 299 17 discriminator 3 view .LVU368
 1396 0634 FF90A0A3 		movge	r9, #255	@ bb,
 1397              	@ armwave.c:298:             g = MIN(gg, 255);
 298:armwave.c     ****             b = MIN(bb, 255);
 1398              		.loc 1 298 17 discriminator 3 view .LVU369
 1399 0638 FF0053E3 		cmp	r3, #255	@ gg,
 1400 063c FF30A0A3 		movge	r3, #255	@ gg,
 1401              	@ armwave.c:293:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 293:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1402              		.loc 1 293 56 discriminator 3 view .LVU370
 1403 0640 2884A0E1 		lsr	r8, r8, #8	@ rr, tmp168,
 1404              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     **** 
 1405              		.loc 1 306 43 discriminator 3 view .LVU371
 1406 0644 0334A0E1 		lsl	r3, r3, #8	@ tmp165, gg,
 1407 0648 093883E1 		orr	r3, r3, r9, lsl #16	@ tmp166, tmp165, bb,
 1408              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     **** 
 1409              		.loc 1 306 54 discriminator 3 view .LVU372
 1410 064c FF0058E3 		cmp	r8, #255	@ rr,
 1411 0650 083083D1 		orrle	r3, r3, r8	@,, tmp169, tmp166, rr
 1412 0654 FF3083C3 		orrgt	r3, r3, #255	@,, tmp169, tmp166,
 1413              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     **** 
 1414              		.loc 1 306 18 discriminator 3 view .LVU373
 1415 0658 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp169,
 1416              	@ armwave.c:308:             *out_buffer++ = word;
 1417              		.loc 1 308 27 discriminator 3 view .LVU374
 1418 065c 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_46, offset: 4294967292B]
 1419              	.LVL82:
 1420              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1421              		.loc 1 289 41 discriminator 3 view .LVU375
 1422 0660 34309EE5 		ldr	r3, [lr, #52]	@ _28, g_armwave_state.target_width
 1423              	@ armwave.c:289:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 289:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1424              		.loc 1 289 9 discriminator 3 view .LVU376
 1425 0664 010053E1 		cmp	r3, r1	@ _28, xx
 1426 0668 E8FFFF8A 		bhi	.L83		@,
 1427 066c 38209EE5 		ldr	r2, [lr, #56]	@ prephitmp_102, g_armwave_state.target_height
 1428              	.LVL83:
 1429              	.L84:
 1430              	@ armwave.c:288:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 288:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1431              		.loc 1 288 55 discriminator 2 view .LVU377
 1432 0670 01C08CE2 		add	ip, ip, #1	@ yy, yy,
 1433              	.LVL84:
 1434              	@ armwave.c:288:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 288:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1435              		.loc 1 288 5 discriminator 2 view .LVU378
 1436 0674 02005CE1 		cmp	ip, r2	@ yy, prephitmp_102
 1437 0678 E1FFFF3A 		bcc	.L82		@,
 288:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1438              		.loc 1 288 5 discriminator 2 view .LVU379
 1439 067c F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1440              	.LVL85:
 1441              	.L80:
 1442              	.LBB6:
 1443              	.LBI6:
 277:armwave.c     **** {
 1444              		.loc 1 277 6 is_stmt 1 view .LVU380
 1445              	.LBB7:
 285:armwave.c     **** 
 1446              		.loc 1 285 5 view .LVU381
 1447 0680 10309FE5 		ldr	r3, .L91+4	@,
 1448 0684 10209FE5 		ldr	r2, .L91+8	@,
 1449 0688 10109FE5 		ldr	r1, .L91+12	@,
 1450 068c 10009FE5 		ldr	r0, .L91+16	@,
 1451              	.LVL86:
 285:armwave.c     **** 
 1452              		.loc 1 285 5 is_stmt 0 view .LVU382
 1453 0690 FEFFFFEB 		bl	__assert_fail		@
 1454              	.LVL87:
 1455              	.L92:
 1456              		.align	2
 1457              	.L91:
 1458 0694 00000000 		.word	g_armwave_state
 1459 0698 18000000 		.word	.LANCHOR0+24
 1460 069c 1D010000 		.word	285
 1461 06a0 00000000 		.word	.LC0
 1462 06a4 90000000 		.word	.LC5
 1463              	.LBE7:
 1464              	.LBE6:
 1465              		.cfi_endproc
 1466              	.LFE63:
 1468              		.align	2
 1469              		.global	armwave_dump_ppm_debug
 1470              		.syntax unified
 1471              		.arm
 1472              		.fpu vfp
 1474              	armwave_dump_ppm_debug:
 1475              	.LVL88:
 1476              	.LFB64:
 309:armwave.c     ****         }
 310:armwave.c     ****     }
 311:armwave.c     **** }
 312:armwave.c     **** 
 313:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 314:armwave.c     **** {
 1477              		.loc 1 314 1 is_stmt 1 view -0
 1478              		.cfi_startproc
 1479              		@ args = 0, pretend = 0, frame = 0
 1480              		@ frame_needed = 0, uses_anonymous_args = 0
 315:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1481              		.loc 1 315 5 view .LVU384
 1482              	@ armwave.c:314: {
 314:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1483              		.loc 1 314 1 is_stmt 0 view .LVU385
 1484 06a8 0130A0E1 		mov	r3, r1	@ fn, fn
 1485 06ac F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1486              		.cfi_def_cfa_offset 28
 1487              		.cfi_offset 4, -28
 1488              		.cfi_offset 5, -24
 1489              		.cfi_offset 6, -20
 1490              		.cfi_offset 7, -16
 1491              		.cfi_offset 8, -12
 1492              		.cfi_offset 9, -8
 1493              		.cfi_offset 14, -4
 1494 06b0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1495 06b4 0CD04DE2 		sub	sp, sp, #12	@,,
 1496              		.cfi_def_cfa_offset 40
 1497              	@ armwave.c:315:     FILE *fp = fopen(fn, "wb");
 1498              		.loc 1 315 16 view .LVU386
 1499 06b8 D8109FE5 		ldr	r1, .L105	@,
 1500              	.LVL89:
 1501              		.loc 1 315 16 view .LVU387
 1502 06bc 0300A0E1 		mov	r0, r3	@, fn
 1503              	.LVL90:
 1504              		.loc 1 315 16 view .LVU388
 1505 06c0 FEFFFFEB 		bl	fopen64		@
 1506              	.LVL91:
 1507              	@ armwave.c:322:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 316:armwave.c     ****     uint32_t data;
 317:armwave.c     ****     int xx, yy;
 318:armwave.c     **** 
 319:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 320:armwave.c     **** 
 321:armwave.c     ****     fputs("P3\n", fp);
 322:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1508              		.loc 1 322 5 view .LVU389
 1509 06c4 D0609FE5 		ldr	r6, .L105+4	@ tmp154,
 1510              	@ armwave.c:321:     fputs("P3\n", fp);
 321:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1511              		.loc 1 321 5 view .LVU390
 1512 06c8 0320A0E3 		mov	r2, #3	@,
 1513 06cc 0110A0E3 		mov	r1, #1	@,
 1514              	@ armwave.c:315:     FILE *fp = fopen(fn, "wb");
 315:armwave.c     ****     uint32_t data;
 1515              		.loc 1 315 16 view .LVU391
 1516 06d0 0070A0E1 		mov	r7, r0	@ fp,
 1517              	.LVL92:
 316:armwave.c     ****     uint32_t data;
 1518              		.loc 1 316 5 is_stmt 1 view .LVU392
 317:armwave.c     **** 
 1519              		.loc 1 317 5 view .LVU393
 321:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1520              		.loc 1 321 5 view .LVU394
 1521 06d4 0030A0E1 		mov	r3, r0	@, fp
 1522 06d8 C0009FE5 		ldr	r0, .L105+8	@,
 1523              	.LVL93:
 321:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1524              		.loc 1 321 5 is_stmt 0 view .LVU395
 1525 06dc FEFFFFEB 		bl	fwrite		@
 1526              	.LVL94:
 1527              		.loc 1 322 5 is_stmt 1 view .LVU396
 1528 06e0 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1529 06e4 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1530 06e8 B4109FE5 		ldr	r1, .L105+12	@,
 1531 06ec 0700A0E1 		mov	r0, r7	@, fp
 1532 06f0 FEFFFFEB 		bl	fprintf		@
 1533              	.LVL95:
 323:armwave.c     ****     fputs("255\n", fp);
 1534              		.loc 1 323 5 view .LVU397
 1535 06f4 0420A0E3 		mov	r2, #4	@,
 1536 06f8 0730A0E1 		mov	r3, r7	@, fp
 1537 06fc 0110A0E3 		mov	r1, #1	@,
 1538 0700 A0009FE5 		ldr	r0, .L105+16	@,
 1539 0704 FEFFFFEB 		bl	fwrite		@
 1540              	.LVL96:
 324:armwave.c     **** 
 325:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1541              		.loc 1 325 5 view .LVU398
 1542              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1543              		.loc 1 325 37 is_stmt 0 view .LVU399
 1544 0708 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1545              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1546              		.loc 1 325 5 view .LVU400
 1547 070c 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1548 0710 1800000A 		beq	.L94		@,
 1549 0714 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1550              	@ armwave.c:330:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 327:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 328:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 329:armwave.c     **** 
 330:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1551              		.loc 1 330 13 view .LVU401
 1552 0718 8C909FE5 		ldr	r9, .L105+20	@ tmp156,
 1553              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 325:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1554              		.loc 1 325 12 view .LVU402
 1555 071c 0050A0E3 		mov	r5, #0	@ yy,
 1556              	.LVL97:
 1557              	.L95:
 1558              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1559              		.loc 1 326 9 view .LVU403
 1560 0720 000053E3 		cmp	r3, #0	@ _12,
 1561              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1562              		.loc 1 326 16 view .LVU404
 1563 0724 0040A013 		movne	r4, #0	@ xx,
 1564              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1565              		.loc 1 326 9 view .LVU405
 1566 0728 1600000A 		beq	.L104		@,
 1567              	.LVL98:
 1568              	.L96:
 327:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1569              		.loc 1 327 13 is_stmt 1 discriminator 3 view .LVU406
 1570              	@ armwave.c:327:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 327:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1571              		.loc 1 327 29 is_stmt 0 discriminator 3 view .LVU407
 1572 072c 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1573              	@ armwave.c:330:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1574              		.loc 1 330 13 discriminator 3 view .LVU408
 1575 0730 0910A0E1 		mov	r1, r9	@, tmp156
 1576 0734 0700A0E1 		mov	r0, r7	@, fp
 1577              	@ armwave.c:327:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 327:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1578              		.loc 1 327 18 discriminator 3 view .LVU409
 1579 0738 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1580              	.LVL99:
 1581              		.loc 1 330 13 is_stmt 1 discriminator 3 view .LVU410
 1582              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1583              		.loc 1 326 58 is_stmt 0 discriminator 3 view .LVU411
 1584 073c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1585              	.LVL100:
 1586              	@ armwave.c:330:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1587              		.loc 1 330 81 discriminator 3 view .LVU412
 1588 0740 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1589              	@ armwave.c:330:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1590              		.loc 1 330 61 discriminator 3 view .LVU413
 1591 0744 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1592              	@ armwave.c:330:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1593              		.loc 1 330 13 discriminator 3 view .LVU414
 1594 0748 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1595 074c 7330EFE6 		uxtb	r3, r3	@, tmp146
 1596 0750 00C08DE5 		str	ip, [sp]	@ tmp151,
 1597 0754 7220EFE6 		uxtb	r2, r2	@, data
 1598              	.LVL101:
 1599              		.loc 1 330 13 discriminator 3 view .LVU415
 1600 0758 FEFFFFEB 		bl	fprintf		@
 1601              	.LVL102:
 1602              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1603              		.loc 1 326 41 discriminator 3 view .LVU416
 1604 075c 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1605              	@ armwave.c:326:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 326:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1606              		.loc 1 326 9 discriminator 3 view .LVU417
 1607 0760 040053E1 		cmp	r3, r4	@ _12, xx
 1608 0764 F0FFFF8A 		bhi	.L96		@,
 1609 0768 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1610              	.LVL103:
 1611              	.L97:
 1612              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 325:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1613              		.loc 1 325 55 discriminator 2 view .LVU418
 1614 076c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1615              	.LVL104:
 1616              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 325:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1617              		.loc 1 325 5 discriminator 2 view .LVU419
 1618 0770 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1619 0774 E9FFFF3A 		bcc	.L95		@,
 1620              	.LVL105:
 1621              	.L94:
 331:armwave.c     ****         }
 332:armwave.c     ****     }
 333:armwave.c     **** 
 334:armwave.c     ****     fclose(fp);
 1622              		.loc 1 334 5 is_stmt 1 view .LVU420
 1623 0778 0700A0E1 		mov	r0, r7	@, fp
 1624              	@ armwave.c:335: }
 335:armwave.c     **** }
 1625              		.loc 1 335 1 is_stmt 0 view .LVU421
 1626 077c 0CD08DE2 		add	sp, sp, #12	@,,
 1627              		.cfi_remember_state
 1628              		.cfi_def_cfa_offset 28
 1629              		@ sp needed	@
 1630 0780 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1631              		.cfi_restore 14
 1632              		.cfi_restore 9
 1633              		.cfi_restore 8
 1634              		.cfi_restore 7
 1635              		.cfi_restore 6
 1636              		.cfi_restore 5
 1637              		.cfi_restore 4
 1638              		.cfi_def_cfa_offset 0
 1639              	.LVL106:
 1640              	@ armwave.c:334:     fclose(fp);
 334:armwave.c     **** }
 1641              		.loc 1 334 5 view .LVU422
 1642 0784 FEFFFFEA 		b	fclose		@
 1643              	.LVL107:
 1644              	.L104:
 1645              		.cfi_restore_state
 1646              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 325:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1647              		.loc 1 325 55 view .LVU423
 1648 0788 015085E2 		add	r5, r5, #1	@ yy, yy,
 1649              	.LVL108:
 1650              	@ armwave.c:325:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 325:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1651              		.loc 1 325 5 view .LVU424
 1652 078c 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1653 0790 F5FFFF8A 		bhi	.L97		@,
 1654 0794 F7FFFFEA 		b	.L94		@
 1655              	.L106:
 1656              		.align	2
 1657              	.L105:
 1658 0798 A4000000 		.word	.LC6
 1659 079c 00000000 		.word	g_armwave_state
 1660 07a0 A8000000 		.word	.LC7
 1661 07a4 AC000000 		.word	.LC8
 1662 07a8 B4000000 		.word	.LC9
 1663 07ac BC000000 		.word	.LC10
 1664              		.cfi_endproc
 1665              	.LFE64:
 1667              		.align	2
 1668              		.global	armwave_test_init
 1669              		.syntax unified
 1670              		.arm
 1671              		.fpu vfp
 1673              	armwave_test_init:
 1674              	.LVL109:
 1675              	.LFB65:
 336:armwave.c     **** 
 337:armwave.c     **** void armwave_test_init(float mod)
 338:armwave.c     **** {
 1676              		.loc 1 338 1 is_stmt 1 view -0
 1677              		.cfi_startproc
 1678              		@ args = 0, pretend = 0, frame = 0
 1679              		@ frame_needed = 0, uses_anonymous_args = 0
 339:armwave.c     **** 	mod_depth = mod;
 1680              		.loc 1 339 2 view .LVU426
 1681              	@ armwave.c:339: 	mod_depth = mod;
 1682              		.loc 1 339 12 is_stmt 0 view .LVU427
 1683 07b0 8C309FE5 		ldr	r3, .L111+20	@ tmp124,
 1684              	@ armwave.c:338: {
 338:armwave.c     **** 	mod_depth = mod;
 1685              		.loc 1 338 1 view .LVU428
 1686 07b4 70402DE9 		push	{r4, r5, r6, lr}	@
 1687              		.cfi_def_cfa_offset 16
 1688              		.cfi_offset 4, -16
 1689              		.cfi_offset 5, -12
 1690              		.cfi_offset 6, -8
 1691              		.cfi_offset 14, -4
 1692 07b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1693              		.cfi_def_cfa_offset 40
 1694              		.cfi_offset 80, -40
 1695              		.cfi_offset 81, -36
 1696              		.cfi_offset 82, -32
 1697              		.cfi_offset 83, -28
 1698              		.cfi_offset 84, -24
 1699              		.cfi_offset 85, -20
 1700 07bc 84409FE5 		ldr	r4, .L111+24	@ ivtmp.89,
 1701              	.LBB10:
 1702              	.LBB11:
 1703              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1704              		.loc 1 84 32 view .LVU429
 1705 07c0 1EAA9FED 		vldr.32	s20, .L111+16	@ tmp130,
 1706              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1707              		.loc 1 84 26 view .LVU430
 1708 07c4 199B9FED 		vldr.64	d9, .L111	@ tmp139,
 1709              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1710              		.loc 1 84 49 view .LVU431
 1711 07c8 1A8B9FED 		vldr.64	d8, .L111+8	@ tmp133,
 1712              	.LBE11:
 1713              	.LBE10:
 1714              	@ armwave.c:339: 	mod_depth = mod;
 1715              		.loc 1 339 12 view .LVU432
 1716 07cc 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 340:armwave.c     **** 
 341:armwave.c     ****     test_create_waveform();
 1717              		.loc 1 341 5 is_stmt 1 view .LVU433
 1718 07d0 FEFFFFEB 		bl	test_create_waveform		@
 1719              	.LVL110:
 342:armwave.c     ****     test_create_gamma();
 1720              		.loc 1 342 5 view .LVU434
 1721              	.LBB13:
 1722              	.LBI10:
  78:armwave.c     **** {
 1723              		.loc 1 78 6 view .LVU435
  78:armwave.c     **** {
 1724              		.loc 1 78 6 is_stmt 0 view .LVU436
 1725 07d4 013084E2 		add	r3, r4, #1	@ _30, ivtmp.89,
 1726 07d8 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.89,
 1727 07dc 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1728              	.LVL111:
 1729              	.L108:
 1730              	.LBB12:
  84:armwave.c     ****     }
 1731              		.loc 1 84 9 is_stmt 1 view .LVU437
 1732              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1733              		.loc 1 84 32 is_stmt 0 view .LVU438
 1734 07e0 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.89
 1735              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1736              		.loc 1 84 26 view .LVU439
 1737 07e4 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1738              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1739              		.loc 1 84 32 view .LVU440
 1740 07e8 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1741 07ec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1742 07f0 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1743              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1744              		.loc 1 84 26 view .LVU441
 1745 07f4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1746 07f8 FEFFFFEB 		bl	pow		@
 1747              	.LVL112:
 1748              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1749              		.loc 1 84 49 view .LVU442
 1750 07fc 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1751              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1752              		.loc 1 84 24 view .LVU443
 1753 0800 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1754 0804 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1755 0808 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1756              	.LVL113:
 1757              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1758              		.loc 1 83 5 view .LVU444
 1759 080c 060054E1 		cmp	r4, r6	@ ivtmp.89, _31
 1760 0810 F2FFFF1A 		bne	.L108		@,
 1761              	.LVL114:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1762              		.loc 1 83 5 view .LVU445
 1763              	.LBE12:
 1764              	.LBE13:
 343:armwave.c     **** 
 344:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1765              		.loc 1 344 5 is_stmt 1 view .LVU446
 1766 0814 F9FDFFEB 		bl	armwave_setup_render.constprop.1		@
 1767              	.LVL115:
 345:armwave.c     **** 
 346:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1768              		.loc 1 346 5 view .LVU447
 1769              	@ armwave.c:347: }
 347:armwave.c     **** }
 1770              		.loc 1 347 1 is_stmt 0 view .LVU448
 1771 0818 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1772              		.cfi_restore 84
 1773              		.cfi_restore 85
 1774              		.cfi_restore 82
 1775              		.cfi_restore 83
 1776              		.cfi_restore 80
 1777              		.cfi_restore 81
 1778              		.cfi_def_cfa_offset 16
 1779              	@ armwave.c:346:     printf("armwave version: %s\n", ARMWAVE_VER);
 346:armwave.c     **** }
 1780              		.loc 1 346 5 view .LVU449
 1781 081c 28109FE5 		ldr	r1, .L111+28	@,
 1782 0820 28009FE5 		ldr	r0, .L111+32	@,
 1783              	@ armwave.c:347: }
 1784              		.loc 1 347 1 view .LVU450
 1785 0824 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1786              		.cfi_restore 14
 1787              		.cfi_restore 6
 1788              		.cfi_restore 5
 1789              		.cfi_restore 4
 1790              		.cfi_def_cfa_offset 0
 1791              	@ armwave.c:346:     printf("armwave version: %s\n", ARMWAVE_VER);
 346:armwave.c     **** }
 1792              		.loc 1 346 5 view .LVU451
 1793 0828 FEFFFFEA 		b	printf		@
 1794              	.LVL116:
 1795              	.L112:
 1796 082c 0000A0E1 		.align	3
 1797              	.L111:
 1798 0830 000000C0 		.word	-1073741824
 1799 0834 CCCCEC3F 		.word	1072483532
 1800 0838 00000000 		.word	0
 1801 083c 00E06F40 		.word	1081073664
 1802 0840 00007F43 		.word	1132396544
 1803 0844 00000000 		.word	.LANCHOR1
 1804 0848 FFFFFFFF 		.word	gamma_table-1
 1805 084c CC000000 		.word	.LC11
 1806 0850 D4000000 		.word	.LC12
 1807              		.cfi_endproc
 1808              	.LFE65:
 1810              		.global	__aeabi_uidiv
 1811              		.align	2
 1812              		.global	armwave_test_generate
 1813              		.syntax unified
 1814              		.arm
 1815              		.fpu vfp
 1817              	armwave_test_generate:
 1818              	.LFB66:
 348:armwave.c     **** 
 349:armwave.c     **** void armwave_test_generate()
 350:armwave.c     **** {
 1819              		.loc 1 350 1 is_stmt 1 view -0
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 8
 1822              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     **** 	uint32_t yy;
 1823              		.loc 1 351 2 view .LVU453
 352:armwave.c     **** 
 353:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1824              		.loc 1 353 5 view .LVU454
 1825              	@ armwave.c:350: {
 350:armwave.c     **** 	uint32_t yy;
 1826              		.loc 1 350 1 is_stmt 0 view .LVU455
 1827 0854 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1828              		.cfi_def_cfa_offset 36
 1829              		.cfi_offset 4, -36
 1830              		.cfi_offset 5, -32
 1831              		.cfi_offset 6, -28
 1832              		.cfi_offset 7, -24
 1833              		.cfi_offset 8, -20
 1834              		.cfi_offset 9, -16
 1835              		.cfi_offset 10, -12
 1836              		.cfi_offset 11, -8
 1837              		.cfi_offset 14, -4
 1838              	@ armwave.c:353:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1839              		.loc 1 353 5 view .LVU456
 1840 0858 0010A0E3 		mov	r1, #0	@,
 1841 085c 44419FE5 		ldr	r4, .L131	@ tmp269,
 1842              	@ armwave.c:350: {
 350:armwave.c     **** 	uint32_t yy;
 1843              		.loc 1 350 1 view .LVU457
 1844 0860 0CD04DE2 		sub	sp, sp, #12	@,,
 1845              		.cfi_def_cfa_offset 48
 1846              	@ armwave.c:353:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1847              		.loc 1 353 5 view .LVU458
 1848 0864 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 1849 0868 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1850 086c FEFFFFEB 		bl	memset		@
 1851              	.LVL117:
 354:armwave.c     **** 
 355:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1852              		.loc 1 355 5 is_stmt 1 view .LVU459
 1853              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1854              		.loc 1 355 45 is_stmt 0 view .LVU460
 1855 0870 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 1856              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1857              		.loc 1 355 5 view .LVU461
 1858 0874 020B55E3 		cmp	r5, #2048	@ _72,
 1859 0878 4800008A 		bhi	.L113		@,
 1860 087c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 1861              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1862              		.loc 1 355 12 view .LVU462
 1863 0880 00A0A0E3 		mov	r10, #0	@ yy,
 1864              	.LVL118:
 1865              	.L119:
 356:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1866              		.loc 1 356 9 is_stmt 1 discriminator 3 view .LVU463
 1867 0884 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 1868              	.LBB16:
 1869              	.LBB17:
 1870              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1871              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU464
 1872 0888 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1873              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1874              		.loc 1 106 5 discriminator 3 view .LVU465
 1875 088c 000056E3 		cmp	r6, #0	@ prephitmp_171,
 1876              	.LBE17:
 1877              	.LBE16:
 1878              	@ armwave.c:356:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1879              		.loc 1 356 9 discriminator 3 view .LVU466
 1880 0890 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 1881              	.LVL119:
 1882              	.LBB19:
 1883              	.LBI16:
  95:armwave.c     **** {
 1884              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU467
 1885              	.LBB18:
  97:armwave.c     ****     uint32_t value, word;
 1886              		.loc 1 97 5 discriminator 3 view .LVU468
  98:armwave.c     ****     uint8_t *wave_base;
 1887              		.loc 1 98 5 discriminator 3 view .LVU469
  99:armwave.c     ****     uint8_t *write_buffer_base;
 1888              		.loc 1 99 5 discriminator 3 view .LVU470
 100:armwave.c     ****     uint8_t *write_buffer;
 1889              		.loc 1 100 5 discriminator 3 view .LVU471
 101:armwave.c     ****     
 1890              		.loc 1 101 5 discriminator 3 view .LVU472
 103:armwave.c     **** 
 1891              		.loc 1 103 5 discriminator 3 view .LVU473
 1892              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1893              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU474
 1894 0894 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 1895              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1896              		.loc 1 103 40 discriminator 3 view .LVU475
 1897 0898 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 1898              	.LVL120:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1899              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU476
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1900              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU477
 1901 089c 3900000A 		beq	.L115		@,
 1902              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1903              		.loc 1 106 11 view .LVU478
 1904 08a0 0080A0E3 		mov	r8, #0	@ w,
 1905 08a4 043043E2 		sub	r3, r3, #4	@ _77, _3,
 1906              	.LVL121:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1907              		.loc 1 106 11 view .LVU479
 1908 08a8 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 1909              	.LVL122:
 1910              	.L118:
 107:armwave.c     **** 
 1911              		.loc 1 107 9 is_stmt 1 view .LVU480
 1912              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1913              		.loc 1 107 64 is_stmt 0 view .LVU481
 1914 08ac 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1915              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1916              		.loc 1 117 9 view .LVU482
 1917 08b0 000059E3 		cmp	r9, #0	@ _4,
 1918              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1919              		.loc 1 107 36 view .LVU483
 1920 08b4 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 1921              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1922              		.loc 1 107 64 view .LVU484
 1923 08b8 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 1924              	.LVL123:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1925              		.loc 1 117 9 is_stmt 1 view .LVU485
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1926              		.loc 1 117 9 is_stmt 0 view .LVU486
 1927 08bc 2D00000A 		beq	.L116		@,
 1928 08c0 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 1929 08c4 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 1930              	.LVL124:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1931              		.loc 1 117 9 view .LVU487
 1932 08c8 03E08EE0 		add	lr, lr, r3	@ ivtmp.95, _16, tmp205
 1933              	.LVL125:
 1934              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1935              		.loc 1 117 16 view .LVU488
 1936 08cc 0010A0E3 		mov	r1, #0	@ yy,
 1937              	.LVL126:
 1938              	.L117:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1939              		.loc 1 132 13 is_stmt 1 view .LVU489
 1940              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1941              		.loc 1 132 18 is_stmt 0 view .LVU490
 1942 08d0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 1943              	.LVL127:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 1944              		.loc 1 136 13 is_stmt 1 view .LVU491
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1945              		.loc 1 137 14 view .LVU492
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1946              		.loc 1 138 14 view .LVU493
 139:armwave.c     ****             	word >>= 8;
 1947              		.loc 1 139 14 view .LVU494
 1948              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1949              		.loc 1 137 42 is_stmt 0 view .LVU495
 1950 08d4 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1951              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1952              		.loc 1 138 60 view .LVU496
 1953 08d8 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1954              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1955              		.loc 1 137 34 view .LVU497
 1956 08dc 73C0EFE6 		uxtb	ip, r3	@ word, word
 1957              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1958              		.loc 1 140 19 view .LVU498
 1959 08e0 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 1960              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1961              		.loc 1 139 44 view .LVU499
 1962 08e4 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 1963              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1964              		.loc 1 137 34 view .LVU500
 1965 08e8 7550EFE6 		uxtb	r5, r5	@ word, word
 1966              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1967              		.loc 1 139 44 view .LVU501
 1968 08ec 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 1969              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1970              		.loc 1 138 60 view .LVU502
 1971 08f0 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 1972              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1973              		.loc 1 140 19 view .LVU503
 1974 08f4 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 1975              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1976              		.loc 1 139 44 view .LVU504
 1977 08f8 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 1978              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1979              		.loc 1 137 34 view .LVU505
 1980 08fc 7CC0EFE6 		uxtb	ip, ip	@ word, word
 1981              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1982              		.loc 1 140 19 view .LVU506
 1983 0900 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1984              	.LVL128:
 1985              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1986              		.loc 1 139 44 view .LVU507
 1987 0904 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 1988 0908 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 1989              	.LVL129:
 140:armwave.c     ****     		}
 1990              		.loc 1 140 14 is_stmt 1 view .LVU508
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1991              		.loc 1 137 14 view .LVU509
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1992              		.loc 1 138 14 view .LVU510
 139:armwave.c     ****             	word >>= 8;
 1993              		.loc 1 139 14 view .LVU511
 1994              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1995              		.loc 1 137 42 is_stmt 0 view .LVU512
 1996 090c 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1997              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1998              		.loc 1 138 60 view .LVU513
 1999 0910 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2000              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2001              		.loc 1 139 44 view .LVU514
 2002 0914 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2003              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2004              		.loc 1 138 60 view .LVU515
 2005 0918 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2006              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2007              		.loc 1 139 44 view .LVU516
 2008 091c 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2009              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2010              		.loc 1 138 60 view .LVU517
 2011 0920 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2012              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2013              		.loc 1 117 37 view .LVU518
 2014 0924 041081E2 		add	r1, r1, #4	@ yy, yy,
 2015              	.LVL130:
 2016              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2017              		.loc 1 139 44 view .LVU519
 2018 0928 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2019              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2020              		.loc 1 117 9 view .LVU520
 2021 092c 010059E1 		cmp	r9, r1	@ _4, yy
 2022              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2023              		.loc 1 139 44 view .LVU521
 2024 0930 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2025 0934 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2026              	.LVL131:
 140:armwave.c     ****     		}
 2027              		.loc 1 140 14 is_stmt 1 view .LVU522
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2028              		.loc 1 137 14 view .LVU523
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2029              		.loc 1 138 14 view .LVU524
 139:armwave.c     ****             	word >>= 8;
 2030              		.loc 1 139 14 view .LVU525
 2031              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2032              		.loc 1 137 42 is_stmt 0 view .LVU526
 2033 0938 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2034              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2035              		.loc 1 138 60 view .LVU527
 2036 093c 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2037              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2038              		.loc 1 139 44 view .LVU528
 2039 0940 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2040 0944 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2041 0948 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2042 094c 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2043 0950 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 140:armwave.c     ****     		}
 2044              		.loc 1 140 14 is_stmt 1 view .LVU529
 2045              	.LVL132:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2046              		.loc 1 137 14 view .LVU530
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2047              		.loc 1 138 14 view .LVU531
 139:armwave.c     ****             	word >>= 8;
 2048              		.loc 1 139 14 view .LVU532
 2049              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2050              		.loc 1 137 42 is_stmt 0 view .LVU533
 2051 0954 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2052              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2053              		.loc 1 138 60 view .LVU534
 2054 0958 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2055              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2056              		.loc 1 139 44 view .LVU535
 2057 095c 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2058 0960 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2059 0964 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2060 0968 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2061 096c 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 140:armwave.c     ****     		}
 2062              		.loc 1 140 14 is_stmt 1 view .LVU536
 2063              	.LVL133:
 2064              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2065              		.loc 1 117 9 is_stmt 0 view .LVU537
 2066 0970 D6FFFF8A 		bhi	.L117		@,
 2067 0974 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2068              	.LVL134:
 2069              	.L116:
 2070              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2071              		.loc 1 106 44 view .LVU538
 2072 0978 018088E2 		add	r8, r8, #1	@ w, w,
 2073              	.LVL135:
 2074              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2075              		.loc 1 106 5 view .LVU539
 2076 097c 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2077 0980 C9FFFF3A 		bcc	.L118		@,
 2078 0984 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2079              	.LVL136:
 2080              	.L115:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2081              		.loc 1 106 5 view .LVU540
 2082              	.LBE18:
 2083              	.LBE19:
 2084              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 355:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2085              		.loc 1 355 28 discriminator 3 view .LVU541
 2086 0988 0510A0E1 		mov	r1, r5	@, _72
 2087 098c 020BA0E3 		mov	r0, #2048	@,
 2088              	.LVL137:
 355:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2089              		.loc 1 355 28 discriminator 3 view .LVU542
 2090 0990 FEFFFFEB 		bl	__aeabi_uidiv		@
 2091              	.LVL138:
 2092              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 355:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2093              		.loc 1 355 63 discriminator 3 view .LVU543
 2094 0994 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2095              	.LVL139:
 2096              	@ armwave.c:355:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 355:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2097              		.loc 1 355 5 discriminator 3 view .LVU544
 2098 0998 0A0050E1 		cmp	r0, r10	@, yy
 2099 099c B8FFFF8A 		bhi	.L119		@,
 2100              	.LVL140:
 2101              	.L113:
 2102              	@ armwave.c:358: }
 357:armwave.c     ****     }
 358:armwave.c     **** }
 2103              		.loc 1 358 1 view .LVU545
 2104 09a0 0CD08DE2 		add	sp, sp, #12	@,,
 2105              		.cfi_def_cfa_offset 36
 2106              		@ sp needed	@
 2107 09a4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2108              	.L132:
 2109              		.align	2
 2110              	.L131:
 2111 09a8 00000000 		.word	g_armwave_state
 2112              		.cfi_endproc
 2113              	.LFE66:
 2115              		.align	2
 2116              		.global	armwave_test_get_buffer
 2117              		.syntax unified
 2118              		.arm
 2119              		.fpu vfp
 2121              	armwave_test_get_buffer:
 2122              	.LFB67:
 359:armwave.c     **** 
 360:armwave.c     **** PyObject *armwave_test_get_buffer()
 361:armwave.c     **** {
 2123              		.loc 1 361 1 is_stmt 1 view -0
 2124              		.cfi_startproc
 2125              		@ args = 0, pretend = 0, frame = 0
 2126              		@ frame_needed = 0, uses_anonymous_args = 0
 362:armwave.c     ****     PyObject *mv;
 2127              		.loc 1 362 5 view .LVU547
 363:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2128              		.loc 1 363 5 view .LVU548
 2129              	@ armwave.c:361: {
 361:armwave.c     ****     PyObject *mv;
 2130              		.loc 1 361 1 is_stmt 0 view .LVU549
 2131 09ac 30402DE9 		push	{r4, r5, lr}	@
 2132              		.cfi_def_cfa_offset 12
 2133              		.cfi_offset 4, -12
 2134              		.cfi_offset 5, -8
 2135              		.cfi_offset 14, -4
 2136              	@ armwave.c:363:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2137              		.loc 1 363 22 view .LVU550
 2138 09b0 2C00A0E3 		mov	r0, #44	@,
 2139              	@ armwave.c:361: {
 361:armwave.c     ****     PyObject *mv;
 2140              		.loc 1 361 1 view .LVU551
 2141 09b4 0CD04DE2 		sub	sp, sp, #12	@,,
 2142              		.cfi_def_cfa_offset 24
 2143              	@ armwave.c:363:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2144              		.loc 1 363 22 view .LVU552
 2145 09b8 FEFFFFEB 		bl	malloc		@
 2146              	.LVL141:
 2147              	@ armwave.c:365:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 364:armwave.c     ****     
 365:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2148              		.loc 1 365 5 view .LVU553
 2149 09bc 3C409FE5 		ldr	r4, .L135	@ tmp118,
 2150              	@ armwave.c:363:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 363:armwave.c     ****     
 2151              		.loc 1 363 22 view .LVU554
 2152 09c0 0050A0E1 		mov	r5, r0	@ tmp117,
 2153              	.LVL142:
 2154              		.loc 1 365 5 is_stmt 1 view .LVU555
 2155 09c4 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2156              	.LVL143:
 2157              		.loc 1 365 5 is_stmt 0 view .LVU556
 2158 09c8 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2159              	.LVL144:
 366:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2160              		.loc 1 366 5 is_stmt 1 view .LVU557
 2161              	@ armwave.c:366:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2162              		.loc 1 366 79 is_stmt 0 view .LVU558
 2163 09cc 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2164              	@ armwave.c:366:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2165              		.loc 1 366 5 view .LVU559
 2166 09d0 08C0A0E3 		mov	ip, #8	@ tmp125,
 2167 09d4 0110A0E3 		mov	r1, #1	@ tmp126,
 2168 09d8 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2169 09dc 02108DE8 		stm	sp, {r1, ip}	@,,
 2170 09e0 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2171 09e4 0500A0E1 		mov	r0, r5	@, tmp117
 2172 09e8 0010A0E3 		mov	r1, #0	@,
 2173 09ec FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2174              	.LVL145:
 367:armwave.c     **** 
 368:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2175              		.loc 1 368 2 is_stmt 1 view .LVU560
 2176              	@ armwave.c:368: 	mv = PyMemoryView_FromBuffer(buf);
 2177              		.loc 1 368 7 is_stmt 0 view .LVU561
 2178 09f0 0500A0E1 		mov	r0, r5	@, tmp117
 2179              	@ armwave.c:369: }
 369:armwave.c     **** }
 2180              		.loc 1 369 1 view .LVU562
 2181 09f4 0CD08DE2 		add	sp, sp, #12	@,,
 2182              		.cfi_def_cfa_offset 12
 2183              		@ sp needed	@
 2184 09f8 3040BDE8 		pop	{r4, r5, lr}	@
 2185              		.cfi_restore 14
 2186              		.cfi_restore 5
 2187              		.cfi_restore 4
 2188              		.cfi_def_cfa_offset 0
 2189              	.LVL146:
 2190              	@ armwave.c:368: 	mv = PyMemoryView_FromBuffer(buf);
 368:armwave.c     **** }
 2191              		.loc 1 368 7 view .LVU563
 2192 09fc FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2193              	.LVL147:
 2194              	.L136:
 368:armwave.c     **** }
 2195              		.loc 1 368 7 view .LVU564
 2196              		.align	2
 2197              	.L135:
 2198 0a00 00000000 		.word	g_armwave_state
 2199              		.cfi_endproc
 2200              	.LFE67:
 2202              		.align	2
 2203              		.global	armwave_test_dump_buffer_to_ppm
 2204              		.syntax unified
 2205              		.arm
 2206              		.fpu vfp
 2208              	armwave_test_dump_buffer_to_ppm:
 2209              	.LVL148:
 2210              	.LFB68:
 370:armwave.c     **** 
 371:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 372:armwave.c     **** {
 2211              		.loc 1 372 1 is_stmt 1 view -0
 2212              		.cfi_startproc
 2213              		@ args = 0, pretend = 0, frame = 0
 2214              		@ frame_needed = 0, uses_anonymous_args = 0
 2215              		@ link register save eliminated.
 373:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2216              		.loc 1 373 2 view .LVU566
 2217 0a04 08309FE5 		ldr	r3, .L138	@ tmp112,
 2218 0a08 0010A0E1 		mov	r1, r0	@, fn
 2219 0a0c 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2220              	.LVL149:
 2221              		.loc 1 373 2 is_stmt 0 view .LVU567
 2222 0a10 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2223              	.LVL150:
 2224              	.L139:
 2225              		.loc 1 373 2 view .LVU568
 2226              		.align	2
 2227              	.L138:
 2228 0a14 00000000 		.word	g_armwave_state
 2229              		.cfi_endproc
 2230              	.LFE68:
 2232              		.align	2
 2233              		.global	armwave_cleanup
 2234              		.syntax unified
 2235              		.arm
 2236              		.fpu vfp
 2238              	armwave_cleanup:
 2239              	.LFB69:
 374:armwave.c     **** }
 375:armwave.c     **** 
 376:armwave.c     **** void armwave_cleanup()
 377:armwave.c     **** {
 2240              		.loc 1 377 1 is_stmt 1 view -0
 2241              		.cfi_startproc
 2242              		@ args = 0, pretend = 0, frame = 0
 2243              		@ frame_needed = 0, uses_anonymous_args = 0
 378:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2244              		.loc 1 378 2 view .LVU570
 2245              	@ armwave.c:377: {
 377:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2246              		.loc 1 377 1 is_stmt 0 view .LVU571
 2247 0a18 10402DE9 		push	{r4, lr}	@
 2248              		.cfi_def_cfa_offset 8
 2249              		.cfi_offset 4, -8
 2250              		.cfi_offset 14, -4
 2251              	@ armwave.c:378: 	free(g_armwave_state.out_pixbuf);
 2252              		.loc 1 378 22 view .LVU572
 2253 0a1c 28409FE5 		ldr	r4, .L142	@ tmp113,
 2254              	@ armwave.c:378: 	free(g_armwave_state.out_pixbuf);
 2255              		.loc 1 378 2 view .LVU573
 2256 0a20 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2257 0a24 FEFFFFEB 		bl	free		@
 2258              	.LVL151:
 379:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2259              		.loc 1 379 2 is_stmt 1 view .LVU574
 2260 0a28 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2261 0a2c FEFFFFEB 		bl	free		@
 2262              	.LVL152:
 380:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2263              		.loc 1 380 2 view .LVU575
 2264 0a30 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.xcoord_to_xpixel
 2265 0a34 FEFFFFEB 		bl	free		@
 2266              	.LVL153:
 381:armwave.c     **** 
 382:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2267              		.loc 1 382 2 view .LVU576
 2268              	@ armwave.c:382: 	g_armwave_state.out_pixbuf = NULL;
 2269              		.loc 1 382 29 is_stmt 0 view .LVU577
 2270 0a38 0030A0E3 		mov	r3, #0	@ tmp120,
 2271 0a3c 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 383:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2272              		.loc 1 383 2 is_stmt 1 view .LVU578
 2273              	@ armwave.c:383: 	g_armwave_state.ch1_buffer = NULL;
 2274              		.loc 1 383 29 is_stmt 0 view .LVU579
 2275 0a40 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 384:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2276              		.loc 1 384 2 is_stmt 1 view .LVU580
 2277              	@ armwave.c:384: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2278              		.loc 1 384 35 is_stmt 0 view .LVU581
 2279 0a44 583084E5 		str	r3, [r4, #88]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2280              	@ armwave.c:385: }
 385:armwave.c     **** }
 2281              		.loc 1 385 1 view .LVU582
 2282 0a48 1080BDE8 		pop	{r4, pc}	@
 2283              	.L143:
 2284              		.align	2
 2285              	.L142:
 2286 0a4c 00000000 		.word	g_armwave_state
 2287              		.cfi_endproc
 2288              	.LFE69:
 2290              		.section	.text.startup,"ax",%progbits
 2291              		.align	2
 2292              		.global	main
 2293              		.syntax unified
 2294              		.arm
 2295              		.fpu vfp
 2297              	main:
 2298              	.LVL154:
 2299              	.LFB70:
 386:armwave.c     **** 
 387:armwave.c     **** int main(int argc, char *argv[])
 388:armwave.c     **** {
 2300              		.loc 1 388 1 is_stmt 1 view -0
 2301              		.cfi_startproc
 2302              		@ args = 0, pretend = 0, frame = 8
 2303              		@ frame_needed = 0, uses_anonymous_args = 0
 389:armwave.c     ****     uint32_t *out_buffer;
 2304              		.loc 1 389 5 view .LVU584
 390:armwave.c     ****     uint32_t xx, yy, n;
 2305              		.loc 1 390 5 view .LVU585
 391:armwave.c     **** 
 392:armwave.c     ****     //printf("Starting armwave...\n");
 393:armwave.c     ****     armwave_init();
 2306              		.loc 1 393 5 view .LVU586
 2307              	.LBB24:
 2308              	.LBI24:
 148:armwave.c     **** {
 2309              		.loc 1 148 6 view .LVU587
 2310              	.LBB25:
 150:armwave.c     **** }
 2311              		.loc 1 150 5 view .LVU588
 2312              	.LBE25:
 2313              	.LBE24:
 2314              	@ armwave.c:388: {
 388:armwave.c     ****     uint32_t *out_buffer;
 2315              		.loc 1 388 1 is_stmt 0 view .LVU589
 2316 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2317              		.cfi_def_cfa_offset 36
 2318              		.cfi_offset 4, -36
 2319              		.cfi_offset 5, -32
 2320              		.cfi_offset 6, -28
 2321              		.cfi_offset 7, -24
 2322              		.cfi_offset 8, -20
 2323              		.cfi_offset 9, -16
 2324              		.cfi_offset 10, -12
 2325              		.cfi_offset 11, -8
 2326              		.cfi_offset 14, -4
 2327 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2328              		.cfi_def_cfa_offset 48
 2329              	.LBB29:
 2330              	.LBB26:
 2331              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2332              		.loc 1 150 27 view .LVU590
 2333 0008 68919FE5 		ldr	r9, .L164	@ tmp267,
 2334              	.LBE26:
 2335              	.LBE29:
 2336              	@ armwave.c:402:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 394:armwave.c     **** 
 395:armwave.c     ****     //printf("Creating test waveform...\n");
 396:armwave.c     ****     test_create_waveform();
 397:armwave.c     **** 
 398:armwave.c     ****     //printf("Creating gamma LUT...\n");
 399:armwave.c     ****     test_create_gamma();
 400:armwave.c     **** 
 401:armwave.c     ****     //printf("Setting up render...\n");
 402:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2337              		.loc 1 402 5 view .LVU591
 2338 000c 68219FE5 		ldr	r2, .L164+4	@ ivtmp_191,
 2339              	.LBB30:
 2340              	.LBB27:
 2341              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2342              		.loc 1 150 27 view .LVU592
 2343 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2344              	.LBE27:
 2345              	.LBE30:
 2346              	@ armwave.c:402:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2347              		.loc 1 402 5 view .LVU593
 2348 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2349              	.LBB31:
 2350              	.LBB28:
 2351              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2352              		.loc 1 150 27 view .LVU594
 2353 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2354              	.LBE28:
 2355              	.LBE31:
 396:armwave.c     **** 
 2356              		.loc 1 396 5 is_stmt 1 view .LVU595
 2357 001c FEFFFFEB 		bl	test_create_waveform		@
 2358              	.LVL155:
 399:armwave.c     **** 
 2359              		.loc 1 399 5 view .LVU596
 2360 0020 FEFFFFEB 		bl	test_create_gamma		@
 2361              	.LVL156:
 2362              		.loc 1 402 5 view .LVU597
 2363 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.1		@
 2364              	.LVL157:
 403:armwave.c     **** 
 404:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 405:armwave.c     **** 
 406:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2365              		.loc 1 406 5 view .LVU598
 2366              		.loc 1 406 5 is_stmt 0 view .LVU599
 2367 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2368              	.LVL158:
 2369              	.L145:
 2370              	@ armwave.c:407:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 407:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2371              		.loc 1 407 9 view .LVU600
 2372 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2373 0030 4900008A 		bhi	.L153		@,
 2374 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2375              	@ armwave.c:407:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2376              		.loc 1 407 16 view .LVU601
 2377 0038 0080A0E3 		mov	r8, #0	@ yy,
 2378 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2379              	.LVL159:
 2380              	.L150:
 408:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 409:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2381              		.loc 1 409 13 is_stmt 1 discriminator 3 view .LVU602
 2382 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2383              	.LBB32:
 2384              	.LBB33:
 2385              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2386              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU603
 2387 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2388              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2389              		.loc 1 106 5 discriminator 3 view .LVU604
 2390 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2391              	.LBE33:
 2392              	.LBE32:
 2393              	@ armwave.c:409:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2394              		.loc 1 409 13 discriminator 3 view .LVU605
 2395 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2396              	.LVL160:
 2397              	.LBB35:
 2398              	.LBI32:
  95:armwave.c     **** {
 2399              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU606
 2400              	.LBB34:
  97:armwave.c     ****     uint32_t value, word;
 2401              		.loc 1 97 5 discriminator 3 view .LVU607
  98:armwave.c     ****     uint8_t *wave_base;
 2402              		.loc 1 98 5 discriminator 3 view .LVU608
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2403              		.loc 1 99 5 discriminator 3 view .LVU609
 100:armwave.c     ****     uint8_t *write_buffer;
 2404              		.loc 1 100 5 discriminator 3 view .LVU610
 101:armwave.c     ****     
 2405              		.loc 1 101 5 discriminator 3 view .LVU611
 103:armwave.c     **** 
 2406              		.loc 1 103 5 discriminator 3 view .LVU612
 2407              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2408              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU613
 2409 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2410              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2411              		.loc 1 103 40 discriminator 3 view .LVU614
 2412 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2413              	.LVL161:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2414              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU615
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2415              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU616
 2416 0058 3900000A 		beq	.L146		@,
 2417              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2418              		.loc 1 106 11 view .LVU617
 2419 005c 0070A0E3 		mov	r7, #0	@ w,
 2420 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2421              	.LVL162:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2422              		.loc 1 106 11 view .LVU618
 2423 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2424              	.LVL163:
 2425              	.L149:
 107:armwave.c     **** 
 2426              		.loc 1 107 9 is_stmt 1 view .LVU619
 2427              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2428              		.loc 1 107 64 is_stmt 0 view .LVU620
 2429 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2430              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2431              		.loc 1 117 9 view .LVU621
 2432 006c 00005AE3 		cmp	r10, #0	@ _2,
 2433              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2434              		.loc 1 107 36 view .LVU622
 2435 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2436              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2437              		.loc 1 107 64 view .LVU623
 2438 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2439              	.LVL164:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2440              		.loc 1 117 9 is_stmt 1 view .LVU624
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2441              		.loc 1 117 9 is_stmt 0 view .LVU625
 2442 0078 2D00000A 		beq	.L147		@,
 2443 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2444 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2445              	.LVL165:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2446              		.loc 1 117 9 view .LVU626
 2447 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.108, _20, tmp202
 2448              	.LVL166:
 2449              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2450              		.loc 1 117 16 view .LVU627
 2451 0088 0010A0E3 		mov	r1, #0	@ yy,
 2452              	.LVL167:
 2453              	.L148:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2454              		.loc 1 132 13 is_stmt 1 view .LVU628
 2455              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2456              		.loc 1 132 18 is_stmt 0 view .LVU629
 2457 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2458              	.LVL168:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2459              		.loc 1 136 13 is_stmt 1 view .LVU630
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2460              		.loc 1 137 14 view .LVU631
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2461              		.loc 1 138 14 view .LVU632
 139:armwave.c     ****             	word >>= 8;
 2462              		.loc 1 139 14 view .LVU633
 2463              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2464              		.loc 1 137 42 is_stmt 0 view .LVU634
 2465 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2466              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2467              		.loc 1 138 60 view .LVU635
 2468 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2469              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2470              		.loc 1 137 34 view .LVU636
 2471 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2472              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2473              		.loc 1 140 19 view .LVU637
 2474 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2475              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2476              		.loc 1 139 44 view .LVU638
 2477 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2478              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2479              		.loc 1 137 34 view .LVU639
 2480 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2481              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2482              		.loc 1 139 44 view .LVU640
 2483 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2484              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2485              		.loc 1 138 60 view .LVU641
 2486 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2487              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2488              		.loc 1 140 19 view .LVU642
 2489 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2490              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2491              		.loc 1 139 44 view .LVU643
 2492 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2493              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2494              		.loc 1 137 34 view .LVU644
 2495 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2496              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2497              		.loc 1 140 19 view .LVU645
 2498 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2499              	.LVL169:
 2500              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2501              		.loc 1 139 44 view .LVU646
 2502 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2503 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2504              	.LVL170:
 140:armwave.c     ****     		}
 2505              		.loc 1 140 14 is_stmt 1 view .LVU647
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2506              		.loc 1 137 14 view .LVU648
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2507              		.loc 1 138 14 view .LVU649
 139:armwave.c     ****             	word >>= 8;
 2508              		.loc 1 139 14 view .LVU650
 2509              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2510              		.loc 1 137 42 is_stmt 0 view .LVU651
 2511 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2512              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2513              		.loc 1 138 60 view .LVU652
 2514 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2515              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2516              		.loc 1 139 44 view .LVU653
 2517 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2518              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2519              		.loc 1 138 60 view .LVU654
 2520 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2521              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2522              		.loc 1 139 44 view .LVU655
 2523 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2524              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2525              		.loc 1 138 60 view .LVU656
 2526 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2527              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2528              		.loc 1 117 37 view .LVU657
 2529 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2530              	.LVL171:
 2531              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2532              		.loc 1 139 44 view .LVU658
 2533 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2534              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2535              		.loc 1 117 9 view .LVU659
 2536 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2537              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2538              		.loc 1 139 44 view .LVU660
 2539 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2540 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2541              	.LVL172:
 140:armwave.c     ****     		}
 2542              		.loc 1 140 14 is_stmt 1 view .LVU661
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2543              		.loc 1 137 14 view .LVU662
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2544              		.loc 1 138 14 view .LVU663
 139:armwave.c     ****             	word >>= 8;
 2545              		.loc 1 139 14 view .LVU664
 2546              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2547              		.loc 1 137 42 is_stmt 0 view .LVU665
 2548 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2549              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2550              		.loc 1 138 60 view .LVU666
 2551 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2552              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2553              		.loc 1 139 44 view .LVU667
 2554 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2555 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2556 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2557 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2558 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 140:armwave.c     ****     		}
 2559              		.loc 1 140 14 is_stmt 1 view .LVU668
 2560              	.LVL173:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2561              		.loc 1 137 14 view .LVU669
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2562              		.loc 1 138 14 view .LVU670
 139:armwave.c     ****             	word >>= 8;
 2563              		.loc 1 139 14 view .LVU671
 2564              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2565              		.loc 1 137 42 is_stmt 0 view .LVU672
 2566 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2567              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2568              		.loc 1 138 60 view .LVU673
 2569 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2570              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2571              		.loc 1 139 44 view .LVU674
 2572 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2573 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2574 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2575 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2576 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 140:armwave.c     ****     		}
 2577              		.loc 1 140 14 is_stmt 1 view .LVU675
 2578              	.LVL174:
 2579              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2580              		.loc 1 117 9 is_stmt 0 view .LVU676
 2581 012c D6FFFF8A 		bhi	.L148		@,
 2582 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2583              	.LVL175:
 2584              	.L147:
 2585              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2586              		.loc 1 106 44 view .LVU677
 2587 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2588              	.LVL176:
 2589              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2590              		.loc 1 106 5 view .LVU678
 2591 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2592 013c C9FFFF3A 		bcc	.L149		@,
 2593 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2594              	.LVL177:
 2595              	.L146:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2596              		.loc 1 106 5 view .LVU679
 2597              	.LBE34:
 2598              	.LBE35:
 2599              	@ armwave.c:407:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 407:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2600              		.loc 1 407 32 discriminator 3 view .LVU680
 2601 0144 0510A0E1 		mov	r1, r5	@, _61
 2602 0148 020BA0E3 		mov	r0, #2048	@,
 2603              	.LVL178:
 407:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2604              		.loc 1 407 32 discriminator 3 view .LVU681
 2605 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2606              	.LVL179:
 2607              	@ armwave.c:407:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 407:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2608              		.loc 1 407 67 discriminator 3 view .LVU682
 2609 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2610              	.LVL180:
 2611              	@ armwave.c:407:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 407:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2612              		.loc 1 407 9 discriminator 3 view .LVU683
 2613 0154 080050E1 		cmp	r0, r8	@, yy
 2614 0158 B8FFFF8A 		bhi	.L150		@,
 2615              	.LVL181:
 2616              	.L153:
 2617              	@ armwave.c:406:     for(n = 0; n < 5000; n++) {
 406:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2618              		.loc 1 406 5 discriminator 2 view .LVU684
 2619 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2620 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2621 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2622 0168 AFFFFF1A 		bne	.L145		@,
 2623 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 410:armwave.c     ****         }
 411:armwave.c     ****     }
 412:armwave.c     **** 
 413:armwave.c     ****     /*
 414:armwave.c     ****     printf("Creating pixbuf\n");
 415:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 416:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 417:armwave.c     **** 
 418:armwave.c     ****     printf("Dumping pixbuf\n");
 419:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 420:armwave.c     ****     */
 421:armwave.c     **** 
 422:armwave.c     ****     return 0;
 2624              		.loc 1 422 5 is_stmt 1 view .LVU685
 2625              	@ armwave.c:423: }
 423:armwave.c     **** }...
 2626              		.loc 1 423 1 is_stmt 0 view .LVU686
 2627 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2628              		.cfi_def_cfa_offset 36
 2629              		@ sp needed	@
 2630 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2631              	.L165:
 2632              		.align	2
 2633              	.L164:
 2634 0178 00000000 		.word	g_armwave_state
 2635 017c 88130000 		.word	5000
 2636              		.cfi_endproc
 2637              	.LFE70:
 2639              		.global	mod_depth
 2640              		.global	overall_scale
 2641              		.comm	gamma_table,256,4
 2642              		.comm	test_wave_buffer,131072,4
 2643              		.comm	g_armwave_state,92,4
 2644              		.section	.rodata
 2645              		.align	2
 2646              		.set	.LANCHOR0,. + 0
 2649              	__PRETTY_FUNCTION__.16995:
 2650 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2650      6176655F 
 2650      73657475 
 2650      705F7265 
 2650      6E646572 
 2651 0015 000000   		.space	3
 2654              	__PRETTY_FUNCTION__.17018:
 2655 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2655      6176655F 
 2655      66696C6C 
 2655      5F706978 
 2655      62756632 
 2656 002d 000000   		.space	3
 2659              	overall_scale:
 2660 0030 00002041 		.word	1092616192
 2661              		.bss
 2662              		.align	2
 2663              		.set	.LANCHOR1,. + 0
 2666              	mod_depth:
 2667 0000 00000000 		.space	4
 2668              		.section	.rodata.str1.4,"aMS",%progbits,1
 2669              		.align	2
 2670              	.LC0:
 2671 0000 61726D77 		.ascii	"armwave.c\000"
 2671      6176652E 
 2671      6300
 2672 000a 0000     		.space	2
 2673              	.LC1:
 2674 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2674      6D776176 
 2674      655F7374 
 2674      6174652E 
 2674      6368315F 
 2675 002f 00       		.space	1
 2676              	.LC2:
 2677 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2677      6D776176 
 2677      655F7374 
 2677      6174652E 
 2677      78636F6F 
 2678 0059 000000   		.space	3
 2679              	.LC3:
 2680 005c 73746172 		.ascii	"start_point < end_point\000"
 2680      745F706F 
 2680      696E7420 
 2680      3C20656E 
 2680      645F706F 
 2681              	.LC4:
 2682 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2682      6765745F 
 2682      68656967 
 2682      68742025 
 2682      20323536 
 2683 008f 00       		.space	1
 2684              	.LC5:
 2685 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2685      62756666 
 2685      65722021 
 2685      3D204E55 
 2685      4C4C00
 2686 00a3 00       		.space	1
 2687              	.LC6:
 2688 00a4 776200   		.ascii	"wb\000"
 2689 00a7 00       		.space	1
 2690              	.LC7:
 2691 00a8 50330A00 		.ascii	"P3\012\000"
 2692              	.LC8:
 2693 00ac 25642025 		.ascii	"%d %d\012\000"
 2693      640A00
 2694 00b3 00       		.space	1
 2695              	.LC9:
 2696 00b4 3235350A 		.ascii	"255\012\000"
 2696      00
 2697 00b9 000000   		.space	3
 2698              	.LC10:
 2699 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2699      25336420 
 2699      2533640A 
 2699      00
 2700 00c9 000000   		.space	3
 2701              	.LC11:
 2702 00cc 76302E30 		.ascii	"v0.0.1\000"
 2702      2E3100
 2703 00d3 00       		.space	1
 2704              	.LC12:
 2705 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 2705      61766520 
 2705      76657273 
 2705      696F6E3A 
 2705      2025730A 
 2706              		.text
 2707              	.Letext0:
 2708              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2709              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2710              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2711              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2712              		.file 6 "/usr/include/stdio.h"
 2713              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2714              		.file 8 "/usr/include/errno.h"
 2715              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2716              		.file 10 "/usr/include/unistd.h"
 2717              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2718              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2719              		.file 13 "/usr/local/include/python3.8/pyport.h"
 2720              		.file 14 "/usr/include/math.h"
 2721              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2722              		.file 16 "/usr/include/time.h"
 2723              		.file 17 "/usr/local/include/python3.8/pymem.h"
 2724              		.file 18 "/usr/local/include/python3.8/object.h"
 2725              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2726              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2727              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2728              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2729              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2730              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2731              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2732              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2733              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2734              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2735              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2736              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2737              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2738              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2739              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2740              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2741              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2742              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2743              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2744              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2745              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2746              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2747              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2748              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2749              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2750              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2751              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2752              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2753              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2754              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2755              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2756              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2757              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2758              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2759              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2760              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2761              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2762              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2763              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2764              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2765              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2766              		.file 60 "/usr/local/include/python3.8/context.h"
 2767              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2768              		.file 62 "/usr/local/include/python3.8/code.h"
 2769              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2770              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2771              		.file 65 "/usr/local/include/python3.8/import.h"
 2772              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2773              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2774              		.file 68 "armwave.h"
 2775              		.file 69 "/usr/include/stdlib.h"
 2776              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 2777              		.file 71 "<built-in>"
 2778              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2779              		.file 73 "/usr/include/assert.h"
