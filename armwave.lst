   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cmp_x_bitdepth_sca
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
 250              		.loc 1 71 40 view .LVU32
 251 00a4 84519FE5 		ldr	r5, .L27	@ tmp283,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 0CD04DE2 		sub	sp, sp, #12	@,,
 255              		.cfi_def_cfa_offset 48
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0160A0E1 		mov	r6, r1	@ height, height
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
 260              		.loc 1 71 64 view .LVU35
 261 00b0 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
 263              		.loc 1 71 40 view .LVU36
 264 00b4 044095E5 		ldr	r4, [r5, #4]	@ _1, g_armwave_state.ch1_buffer
 265              	@ armwave.c:73:     printf("0x%08x 0x%08x %d\n", write_buffer_base, g_armwave_state.ch1_buffer, wri
  72:armwave.c     **** 
  73:armwave.c     ****     printf("0x%08x 0x%08x %d\n", write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base -
 266              		.loc 1 73 5 view .LVU37
 267 00b8 74019FE5 		ldr	r0, .L27+4	@,
 268              	.LVL7:
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 270              		.loc 1 71 64 view .LVU38
 271 00bc 930703E0 		mul	r3, r3, r7	@ tmp199, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("0x%08x 0x%08x %d\n", write_buffer_base, g_armwave_state.ch1_buffer, wri
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0420A0E1 		mov	r2, r4	@, _1
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 276              		.loc 1 71 104 view .LVU40
 277 00c4 2334A0E1 		lsr	r3, r3, #8	@ _4, tmp199,
 278              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 279              		.loc 1 71 23 view .LVU41
 280 00c8 034084E0 		add	r4, r4, r3	@ write_buffer_base, _1, _4
 281              	.LVL8:
 282              		.loc 1 73 5 is_stmt 1 view .LVU42
 283 00cc 0410A0E1 		mov	r1, r4	@, write_buffer_base
 284              	.LVL9:
 285              		.loc 1 73 5 is_stmt 0 view .LVU43
 286 00d0 FEFFFFEB 		bl	printf		@
 287              	.LVL10:
  74:armwave.c     **** 
  75:armwave.c     ****     // roll through each waveform
  76:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 288              		.loc 1 76 5 is_stmt 1 view .LVU44
 289              		.loc 1 76 5 is_stmt 0 view .LVU45
 290 00d4 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 291 00d8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 292 00dc 510000DA 		ble	.L11		@,
 293 00e0 000056E3 		cmp	r6, #0	@ height,
 294 00e4 4F00000A 		beq	.L11		@,
 295 00e8 043047E2 		sub	r3, r7, #4	@ tmp282, slice_y,
 296 00ec 04308DE5 		str	r3, [sp, #4]	@ tmp282, %sfp
 297              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 76 11 view .LVU46
 299 00f0 0030A0E3 		mov	r3, #0	@ w,
 300 00f4 00308DE5 		str	r3, [sp]	@ w, %sfp
 301              	.LVL11:
 302              	.L18:
  77:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 77 9 is_stmt 1 view .LVU47
  78:armwave.c     **** 
  79:armwave.c     ****         // roll through y and render the slice into the out buffer
  80:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  81:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 304              		.loc 1 81 9 view .LVU48
 305              	@ armwave.c:77:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  77:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 77 64 is_stmt 0 view .LVU49
 307 00f8 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 308 00fc 00209DE5 		ldr	r2, [sp]	@ w, %sfp
 309 0100 04109DE5 		ldr	r1, [sp, #4]	@ tmp282, %sfp
 310 0104 148095E5 		ldr	r8, [r5, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 311 0108 931223E0 		mla	r3, r3, r2, r1	@ tmp209, g_armwave_state.wave_stride, w, tmp282
 312              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
 313              		.loc 1 81 16 view .LVU50
 314 010c 0000A0E3 		mov	r0, #0	@ yy,
 315 0110 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp209
 316              	.LVL12:
 317              	.L17:
  82:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 318              		.loc 1 82 13 is_stmt 1 view .LVU51
  83:armwave.c     **** 
  84:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  85:armwave.c     ****                 scale_value = word & 0xff;
  86:armwave.c     ****                 
  87:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  88:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  89:armwave.c     ****                     continue;
  90:armwave.c     **** 
  91:armwave.c     ****                 // Keep math in integer where possible using the compound X multiplier and a shift 
  92:armwave.c     ****                 // of X to 1/256 but this should not be an ultimate issue.
  93:armwave.c     ****                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_sca
 319              		.loc 1 93 17 view .LVU52
  94:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 320              		.loc 1 94 17 view .LVU53
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 321              		.loc 1 93 17 view .LVU54
 322              		.loc 1 94 17 view .LVU55
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 323              		.loc 1 93 17 view .LVU56
 324              		.loc 1 94 17 view .LVU57
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 325              		.loc 1 93 17 view .LVU58
 326              		.loc 1 94 17 view .LVU59
 327              	@ armwave.c:82:             word = *(uint32_t*)(wave_base + yy);
  82:armwave.c     **** 
 328              		.loc 1 82 18 is_stmt 0 view .LVU60
 329 0114 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _162, offset: 0B]
 330              	.LVL13:
  84:armwave.c     ****                 scale_value = word & 0xff;
 331              		.loc 1 84 13 is_stmt 1 view .LVU61
  85:armwave.c     ****                 
 332              		.loc 1 85 17 view .LVU62
  88:armwave.c     ****                     continue;
 333              		.loc 1 88 17 view .LVU63
 334              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 335              		.loc 1 93 64 is_stmt 0 view .LVU64
 336 0118 019080E2 		add	r9, r0, #1	@ tmp236, yy,
 337              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 338              		.loc 1 88 20 view .LVU65
 339 011c FF1013E2 		ands	r1, r3, #255	@ scale_value, word,
 340 0120 01A0A003 		moveq	r10, #1	@ tmp212,
 341 0124 00A0A013 		movne	r10, #0	@ tmp212,
 342              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 343              		.loc 1 88 19 view .LVU66
 344 0128 FF0051E3 		cmp	r1, #255	@ scale_value,
 345 012c 01A08A03 		orreq	r10, r10, #1	@,, tmp217, tmp212
 346 0130 00005AE3 		cmp	r10, #0	@ tmp217,
 347              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 348              		.loc 1 93 64 view .LVU67
 349 0134 027080E2 		add	r7, r0, #2	@ tmp254, yy,
 350 0138 03E080E2 		add	lr, r0, #3	@ tmp270, yy,
 351              	@ armwave.c:95:                 word >>= 8;
  95:armwave.c     ****                 word >>= 8;
 352              		.loc 1 95 22 view .LVU68
 353 013c 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 354 0140 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 355              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 356              		.loc 1 88 19 view .LVU69
 357 0144 2E00001A 		bne	.L20		@,
 358              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 93 64 view .LVU70
 360 0148 24A095E5 		ldr	r10, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 361              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 362              		.loc 1 88 20 view .LVU71
 363 014c FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 364 0150 01B0A003 		moveq	fp, #1	@ tmp229,
 365              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 93 64 view .LVU72
 367 0154 9A000AE0 		mul	r10, r10, r0	@ tmp219, g_armwave_state.cmp_x_bitdepth_scale, yy
 368              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 369              		.loc 1 88 20 view .LVU73
 370 0158 00B0A013 		movne	fp, #0	@ tmp229,
 371              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 372              		.loc 1 88 19 view .LVU74
 373 015c FF005CE3 		cmp	ip, #255	@ scale_value,
 374 0160 01B08B03 		orreq	fp, fp, #1	@,, tmp234, tmp229
 375              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 376              		.loc 1 94 47 view .LVU75
 377 0164 2A1481E0 		add	r1, r1, r10, lsr #8	@ tmp222, scale_value, tmp219,
 378              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 379              		.loc 1 88 19 view .LVU76
 380 0168 00005BE3 		cmp	fp, #0	@ tmp234,
 381              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 382              		.loc 1 94 47 view .LVU77
 383 016c 01A0D4E7 		ldrb	r10, [r4, r1]	@ zero_extendqisi2	@ *_71, *_71
 384 0170 01A08AE2 		add	r10, r10, #1	@ tmp225, *_71,
 385 0174 01A0C4E7 		strb	r10, [r4, r1]	@ tmp225, *_71
 386              	.LVL14:
 387              		.loc 1 95 17 is_stmt 1 view .LVU78
  85:armwave.c     ****                 
 388              		.loc 1 85 17 view .LVU79
  88:armwave.c     ****                     continue;
 389              		.loc 1 88 17 view .LVU80
 390              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 391              		.loc 1 88 19 is_stmt 0 view .LVU81
 392 0178 2100001A 		bne	.L20		@,
 393              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 394              		.loc 1 93 64 view .LVU82
 395 017c 241095E5 		ldr	r1, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 396              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 397              		.loc 1 88 20 view .LVU83
 398 0180 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 399 0184 01A0A003 		moveq	r10, #1	@ tmp247,
 400              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 401              		.loc 1 93 64 view .LVU84
 402 0188 910901E0 		mul	r1, r1, r9	@ tmp237, g_armwave_state.cmp_x_bitdepth_scale, tmp236
 403              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 404              		.loc 1 88 20 view .LVU85
 405 018c 00A0A013 		movne	r10, #0	@ tmp247,
 406              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 407              		.loc 1 88 19 view .LVU86
 408 0190 FF0052E3 		cmp	r2, #255	@ scale_value,
 409 0194 0A90A011 		movne	r9, r10	@, tmp252, tmp247
 410 0198 01908A03 		orreq	r9, r10, #1	@,, tmp252, tmp247
 411              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 412              		.loc 1 94 47 view .LVU87
 413 019c 21148CE0 		add	r1, ip, r1, lsr #8	@ tmp240, scale_value, tmp237,
 414              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 415              		.loc 1 88 19 view .LVU88
 416 01a0 000059E3 		cmp	r9, #0	@ tmp252,
 417              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 418              		.loc 1 94 47 view .LVU89
 419 01a4 01C0D4E7 		ldrb	ip, [r4, r1]	@ zero_extendqisi2	@ *_98, *_98
 420 01a8 01C08CE2 		add	ip, ip, #1	@ tmp243, *_98,
 421 01ac 01C0C4E7 		strb	ip, [r4, r1]	@ tmp243, *_98
 422              		.loc 1 95 17 is_stmt 1 view .LVU90
 423              	.LVL15:
  85:armwave.c     ****                 
 424              		.loc 1 85 17 view .LVU91
  88:armwave.c     ****                     continue;
 425              		.loc 1 88 17 view .LVU92
 426              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 427              		.loc 1 88 19 is_stmt 0 view .LVU93
 428 01b0 1300001A 		bne	.L20		@,
 429              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 430              		.loc 1 93 64 view .LVU94
 431 01b4 241095E5 		ldr	r1, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 432              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 433              		.loc 1 88 20 view .LVU95
 434 01b8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 435              	.LVL16:
  88:armwave.c     ****                     continue;
 436              		.loc 1 88 20 view .LVU96
 437 01bc 01C0A003 		moveq	ip, #1	@ tmp264,
 438              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 439              		.loc 1 93 64 view .LVU97
 440 01c0 910707E0 		mul	r7, r1, r7	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, tmp254
 441              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 442              		.loc 1 88 20 view .LVU98
 443 01c4 00C0A013 		movne	ip, #0	@ tmp264,
 444              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 445              		.loc 1 88 19 view .LVU99
 446 01c8 FF0053E3 		cmp	r3, #255	@ word,
 447 01cc 0C10A011 		movne	r1, ip	@, tmp269, tmp264
 448 01d0 01108C03 		orreq	r1, ip, #1	@,, tmp269, tmp264
 449              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 450              		.loc 1 94 47 view .LVU100
 451 01d4 272482E0 		add	r2, r2, r7, lsr #8	@ tmp258, scale_value, tmp255,
 452              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 453              		.loc 1 88 19 view .LVU101
 454 01d8 000051E3 		cmp	r1, #0	@ tmp269,
 455              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 456              		.loc 1 94 47 view .LVU102
 457 01dc 0210D4E7 		ldrb	r1, [r4, r2]	@ zero_extendqisi2	@ *_125, *_125
 458 01e0 011081E2 		add	r1, r1, #1	@ tmp261, *_125,
 459 01e4 0210C4E7 		strb	r1, [r4, r2]	@ tmp261, *_125
 460              		.loc 1 95 17 is_stmt 1 view .LVU103
 461              	.LVL17:
  85:armwave.c     ****                 
 462              		.loc 1 85 17 view .LVU104
  88:armwave.c     ****                     continue;
 463              		.loc 1 88 17 view .LVU105
 464              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 465              		.loc 1 88 19 is_stmt 0 view .LVU106
 466 01e8 0500001A 		bne	.L20		@,
 467              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 468              		.loc 1 93 64 view .LVU107
 469 01ec 242095E5 		ldr	r2, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 470 01f0 920E0EE0 		mul	lr, r2, lr	@ tmp272, g_armwave_state.cmp_x_bitdepth_scale, tmp270
 471              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 472              		.loc 1 94 47 view .LVU108
 473 01f4 2E3483E0 		add	r3, r3, lr, lsr #8	@ tmp275, word, tmp272,
 474 01f8 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_152, *_152
 475 01fc 012082E2 		add	r2, r2, #1	@ tmp278, *_152,
 476 0200 0320C4E7 		strb	r2, [r4, r3]	@ tmp278, *_152
 477              		.loc 1 95 17 is_stmt 1 view .LVU109
 478              	.LVL18:
 479              	.L20:
 480              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 481              		.loc 1 81 37 is_stmt 0 view .LVU110
 482 0204 040080E2 		add	r0, r0, #4	@ yy, yy,
 483              	.LVL19:
 484              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 485              		.loc 1 81 9 view .LVU111
 486 0208 000056E1 		cmp	r6, r0	@ height, yy
 487 020c C0FFFF8A 		bhi	.L17		@,
 488              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 76 44 view .LVU112
 490 0210 00209DE5 		ldr	r2, [sp]	@ w, %sfp
 491              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 492              		.loc 1 76 5 view .LVU113
 493 0214 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 494              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 495              		.loc 1 76 44 view .LVU114
 496 0218 012082E2 		add	r2, r2, #1	@ w, w,
 497              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 498              		.loc 1 76 5 view .LVU115
 499 021c 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 500              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 501              		.loc 1 76 44 view .LVU116
 502 0220 00208DE5 		str	r2, [sp]	@ w, %sfp
 503              	.LVL20:
 504              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 505              		.loc 1 76 5 view .LVU117
 506 0224 B3FFFFBA 		blt	.L18		@,
 507              	.LVL21:
 508              	.L11:
 509              	@ armwave.c:99: }
  96:armwave.c     ****             }
  97:armwave.c     ****         }
  98:armwave.c     ****     }
  99:armwave.c     **** }
 510              		.loc 1 99 1 view .LVU118
 511 0228 0CD08DE2 		add	sp, sp, #12	@,,
 512              		.cfi_def_cfa_offset 36
 513              		@ sp needed	@
 514 022c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 515              	.LVL22:
 516              	.L28:
 517              		.loc 1 99 1 view .LVU119
 518              		.align	2
 519              	.L27:
 520 0230 00000000 		.word	g_armwave_state
 521 0234 20000000 		.word	.LC2
 522              		.cfi_endproc
 523              	.LFE59:
 525              		.align	2
 526              		.global	armwave_fill_pixbuf_scaled
 527              		.syntax unified
 528              		.arm
 529              		.fpu vfp
 531              	armwave_fill_pixbuf_scaled:
 532              	.LVL23:
 533              	.LFB60:
 100:armwave.c     **** 
 101:armwave.c     **** #if 0
 102:armwave.c     **** /*
 103:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 104:armwave.c     ****  */
 105:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 106:armwave.c     **** {
 107:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 108:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 109:armwave.c     ****     uint8_t r, g, b, value;
 110:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 111:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 112:armwave.c     ****     uint32_t offset;
 113:armwave.c     **** 
 114:armwave.c     ****     assert(out_buffer != NULL);
 115:armwave.c     **** 
 116:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 117:armwave.c     **** 
 118:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 119:armwave.c     **** 
 120:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 121:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 122:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 123:armwave.c     ****         // most normal waveforms.
 124:armwave.c     ****         wave_word = *base_32ptr++;
 125:armwave.c     **** 
 126:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 127:armwave.c     ****             for(i = 0; i < 4; i++) {
 128:armwave.c     ****                 value = wave_word & 0xff;
 129:armwave.c     ****                 wave_word >>= 8;
 130:armwave.c     **** 
 131:armwave.c     ****                 if(value != 0) {
 132:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 133:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 134:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 135:armwave.c     **** 
 136:armwave.c     ****                     r = MIN(rr, 255);
 137:armwave.c     ****                     g = MIN(gg, 255);
 138:armwave.c     ****                     b = MIN(bb, 255);
 139:armwave.c     **** 
 140:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 141:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 142:armwave.c     **** 
 143:armwave.c     ****                     // Is there a better way?
 144:armwave.c     ****                     nsub = n + i;
 145:armwave.c     ****                     xx = nsub & 0xff;
 146:armwave.c     ****                     yy = nsub >> 8;
 147:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 148:armwave.c     ****                     *(out_buffer_base + offset) = word;
 149:armwave.c     ****                 }
 150:armwave.c     ****             }
 151:armwave.c     ****         } 
 152:armwave.c     ****     }
 153:armwave.c     **** }
 154:armwave.c     **** #endif
 155:armwave.c     **** 
 156:armwave.c     **** /*
 157:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 158:armwave.c     ****  * Rows are repeated as necessary.
 159:armwave.c     ****  */
 160:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 161:armwave.c     **** {
 534              		.loc 1 161 1 is_stmt 1 view -0
 535              		.cfi_startproc
 536              		@ args = 0, pretend = 0, frame = 8
 537              		@ frame_needed = 0, uses_anonymous_args = 0
 162:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 538              		.loc 1 162 5 view .LVU121
 163:armwave.c     ****     // uint32_t ysub;
 164:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 539              		.loc 1 164 5 view .LVU122
 165:armwave.c     ****     uint8_t r, g, b, value; 
 540              		.loc 1 165 5 view .LVU123
 166:armwave.c     ****     // uint8_t row;
 167:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 541              		.loc 1 167 5 view .LVU124
 542              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 543              		.loc 1 161 1 is_stmt 0 view .LVU125
 544 0238 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 545              		.cfi_def_cfa_offset 36
 546              		.cfi_offset 4, -36
 547              		.cfi_offset 5, -32
 548              		.cfi_offset 6, -28
 549              		.cfi_offset 7, -24
 550              		.cfi_offset 8, -20
 551              		.cfi_offset 9, -16
 552              		.cfi_offset 10, -12
 553              		.cfi_offset 11, -8
 554              		.cfi_offset 14, -4
 555              	@ armwave.c:171:     assert(out_buffer != NULL);
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 169:armwave.c     ****     uint32_t offset;
 170:armwave.c     **** 
 171:armwave.c     ****     assert(out_buffer != NULL);
 556              		.loc 1 171 5 view .LVU126
 557 023c 000050E3 		cmp	r0, #0	@ out_buffer
 558              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 559              		.loc 1 167 15 view .LVU127
 560 0240 44619FE5 		ldr	r6, .L51	@ tmp203,
 561              	@ armwave.c:161: {
 161:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 562              		.loc 1 161 1 view .LVU128
 563 0244 0CD04DE2 		sub	sp, sp, #12	@,,
 564              		.cfi_def_cfa_offset 48
 565              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 566              		.loc 1 167 15 view .LVU129
 567 0248 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 568              	.LVL24:
 168:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 569              		.loc 1 168 5 is_stmt 1 view .LVU130
 169:armwave.c     **** 
 570              		.loc 1 169 5 view .LVU131
 571              		.loc 1 171 5 view .LVU132
 572 024c 4900000A 		beq	.L48		@,
 172:armwave.c     **** 
 173:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 573              		.loc 1 173 5 view .LVU133
 574              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 575              		.loc 1 173 10 is_stmt 0 view .LVU134
 576 0250 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 577 0254 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 578              	.LVL25:
 174:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 579              		.loc 1 176 5 is_stmt 1 view .LVU135
 580              		.loc 1 176 5 is_stmt 0 view .LVU136
 581 0258 000058E3 		cmp	r8, #0	@ npix,
 582 025c 0C0000DA 		ble	.L29		@,
 583              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 177:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 178:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 179:armwave.c     ****         // most normal waveforms.
 180:armwave.c     ****         wave_word = *base_32ptr++;
 181:armwave.c     **** 
 182:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 183:armwave.c     ****             for(w = 0; w < 4; w++) {
 184:armwave.c     ****                 value = wave_word & 0xff;
 185:armwave.c     ****                 wave_word >>= 8;
 186:armwave.c     **** 
 187:armwave.c     ****                 if(value != 0) {
 188:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 189:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 584              		.loc 1 189 52 view .LVU137
 585 0260 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 586              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 587              		.loc 1 188 52 view .LVU138
 588 0264 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 589              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****                     r = MIN(rr, 255);
 193:armwave.c     ****                     g = MIN(gg, 255);
 194:armwave.c     ****                     b = MIN(bb, 255);
 195:armwave.c     **** 
 196:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 197:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 198:armwave.c     **** 
 199:armwave.c     ****                     // Do line scaling as necessary.
 200:armwave.c     ****                     /*
 201:armwave.c     ****                     nsub = n + w;
 202:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 203:armwave.c     ****                     xx = (nsub >> 8);
 204:armwave.c     **** 
 205:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 206:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 207:armwave.c     ****                         *(out_buffer_base + offset) = word;
 208:armwave.c     ****                     }
 209:armwave.c     ****                     */
 210:armwave.c     **** 
 211:armwave.c     ****                     nsub = n + w;
 212:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 590              		.loc 1 212 57 view .LVU139
 591 0268 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 592              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 593              		.loc 1 189 52 view .LVU140
 594 026c 00308DE5 		str	r3, [sp]	@ _10, %sfp
 595              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 596              		.loc 1 190 52 view .LVU141
 597 0270 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 598              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 599              		.loc 1 176 11 view .LVU142
 600 0274 0010A0E3 		mov	r1, #0	@ n,
 601              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 602              		.loc 1 190 52 view .LVU143
 603 0278 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 604              	.LVL26:
 605              	.L36:
 180:armwave.c     **** 
 606              		.loc 1 180 9 is_stmt 1 view .LVU144
 607              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 608              		.loc 1 180 19 is_stmt 0 view .LVU145
 609 027c 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 610              	.LVL27:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 611              		.loc 1 182 9 is_stmt 1 view .LVU146
 612              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 613              		.loc 1 182 11 is_stmt 0 view .LVU147
 614 0280 000053E3 		cmp	r3, #0	@ wave_word,
 615 0284 0400001A 		bne	.L49		@,
 616              	.L32:
 617              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 618              		.loc 1 176 28 view .LVU148
 619 0288 041081E2 		add	r1, r1, #4	@ n, n,
 620              	.LVL28:
 621              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 622              		.loc 1 176 5 view .LVU149
 623 028c 010058E1 		cmp	r8, r1	@ npix, n
 624 0290 F9FFFFCA 		bgt	.L36		@,
 625              	.LVL29:
 626              	.L29:
 627              	@ armwave.c:224: }
 213:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 214:armwave.c     ****                     xx = (nsub >> 8);
 215:armwave.c     **** 
 216:armwave.c     ****                     for(y = yy; y < ye; y++) {
 217:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 218:armwave.c     ****                         *(out_buffer_base + offset) = word;
 219:armwave.c     ****                     }
 220:armwave.c     ****                 }
 221:armwave.c     ****             }
 222:armwave.c     ****         }
 223:armwave.c     ****     }
 224:armwave.c     **** }
 628              		.loc 1 224 1 view .LVU150
 629 0294 0CD08DE2 		add	sp, sp, #12	@,,
 630              		.cfi_remember_state
 631              		.cfi_def_cfa_offset 36
 632              		@ sp needed	@
 633 0298 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 634              	.LVL30:
 635              	.L49:
 636              		.cfi_restore_state
 637              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 638              		.loc 1 187 19 view .LVU151
 639 029c FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 640              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 641              		.loc 1 183 19 view .LVU152
 642 02a0 0070A0E3 		mov	r7, #0	@ w,
 643              	.LVL31:
 184:armwave.c     ****                 wave_word >>= 8;
 644              		.loc 1 184 17 is_stmt 1 view .LVU153
 185:armwave.c     **** 
 645              		.loc 1 185 17 view .LVU154
 646              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 647              		.loc 1 185 27 is_stmt 0 view .LVU155
 648 02a4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 649              	.LVL32:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 650              		.loc 1 187 17 is_stmt 1 view .LVU156
 651              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 652              		.loc 1 187 19 is_stmt 0 view .LVU157
 653 02a8 0500001A 		bne	.L50		@,
 654              	.L33:
 655              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 656              		.loc 1 183 32 view .LVU158
 657 02ac 017087E2 		add	r7, r7, #1	@ w, w,
 658              	.LVL33:
 659              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 660              		.loc 1 183 13 view .LVU159
 661 02b0 040057E3 		cmp	r7, #4	@ w,
 662 02b4 F3FFFF0A 		beq	.L32		@,
 184:armwave.c     ****                 wave_word >>= 8;
 663              		.loc 1 184 17 is_stmt 1 view .LVU160
 664              	.LVL34:
 185:armwave.c     **** 
 665              		.loc 1 185 17 view .LVU161
 666              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 667              		.loc 1 187 19 is_stmt 0 view .LVU162
 668 02b8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 669              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 670              		.loc 1 185 27 view .LVU163
 671 02bc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 672              	.LVL35:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 673              		.loc 1 187 17 is_stmt 1 view .LVU164
 674              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 187 19 is_stmt 0 view .LVU165
 676 02c0 F9FFFF0A 		beq	.L33		@,
 677              	.L50:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 678              		.loc 1 188 21 is_stmt 1 view .LVU166
 679              	.LVL36:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 680              		.loc 1 189 21 view .LVU167
 190:armwave.c     **** 
 681              		.loc 1 190 21 view .LVU168
 192:armwave.c     ****                     g = MIN(gg, 255);
 682              		.loc 1 192 21 view .LVU169
 193:armwave.c     ****                     b = MIN(bb, 255);
 683              		.loc 1 193 21 view .LVU170
 194:armwave.c     **** 
 684              		.loc 1 194 21 view .LVU171
 197:armwave.c     **** 
 685              		.loc 1 197 21 view .LVU172
 686              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 687              		.loc 1 190 55 is_stmt 0 view .LVU173
 688 02c4 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 689 02c8 075081E0 		add	r5, r1, r7	@ _120, n, w
 690 02cc 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 691              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 692              		.loc 1 212 32 view .LVU174
 693 02d0 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 694              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 695              		.loc 1 213 41 view .LVU175
 696 02d4 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 697              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 698              		.loc 1 212 40 view .LVU176
 699 02d8 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 700              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 701              		.loc 1 213 41 view .LVU177
 702 02dc 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 703              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 704              		.loc 1 189 55 view .LVU178
 705 02e0 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 706              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 707              		.loc 1 190 24 view .LVU179
 708 02e4 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 709              	.LVL37:
 710              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 711              		.loc 1 212 40 view .LVU180
 712 02e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 713              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 714              		.loc 1 213 46 view .LVU181
 715 02ec C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 716              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 717              		.loc 1 189 55 view .LVU182
 718 02f0 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 719              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 720              		.loc 1 188 55 view .LVU183
 721 02f4 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 722              	.LVL38:
 723              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 724              		.loc 1 194 25 view .LVU184
 725 02f8 FF005AE3 		cmp	r10, #255	@ bb,
 726              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 189 24 view .LVU185
 728 02fc 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 729              	.LVL39:
 730              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 731              		.loc 1 212 40 view .LVU186
 732 0300 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 733              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 734              		.loc 1 213 46 view .LVU187
 735 0304 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 736              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 737              		.loc 1 188 24 view .LVU188
 738 0308 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 739              	.LVL40:
 740              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 741              		.loc 1 194 25 view .LVU189
 742 030c FFA0A0A3 		movge	r10, #255	@ bb,
 743              	.LVL41:
 744              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 745              		.loc 1 193 25 view .LVU190
 746 0310 FF0054E3 		cmp	r4, #255	@ gg,
 747 0314 FF40A0A3 		movge	r4, #255	@ gg,
 748              	.LVL42:
 749              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 750              		.loc 1 192 25 view .LVU191
 751 0318 FF005CE3 		cmp	ip, #255	@ rr,
 752              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 753              		.loc 1 197 56 view .LVU192
 754 031c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 755              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 756              		.loc 1 212 24 view .LVU193
 757 0320 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 758              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 759              		.loc 1 192 25 view .LVU194
 760 0324 FFC0A0A3 		movge	ip, #255	@ rr,
 761              	.LVL43:
 762              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 763              		.loc 1 197 44 view .LVU195
 764 0328 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 765 032c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 766              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 767              		.loc 1 197 56 view .LVU196
 768 0330 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 769              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 770              		.loc 1 197 51 view .LVU197
 771 0334 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 772              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 773              		.loc 1 197 62 view .LVU198
 774 0338 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 775 033c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 776              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 777              		.loc 1 212 24 view .LVU199
 778 0340 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 779              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 780              		.loc 1 213 24 view .LVU200
 781 0344 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 782              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 783              		.loc 1 197 26 view .LVU201
 784 0348 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 785              	.LVL44:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 786              		.loc 1 211 21 is_stmt 1 view .LVU202
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 787              		.loc 1 212 21 view .LVU203
 213:armwave.c     ****                     xx = (nsub >> 8);
 788              		.loc 1 213 21 view .LVU204
 789              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 790              		.loc 1 214 32 is_stmt 0 view .LVU205
 791 034c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 792              	.LVL45:
 793              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 794              		.loc 1 213 24 view .LVU206
 795 0350 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 796              	.LVL46:
 214:armwave.c     **** 
 797              		.loc 1 214 21 is_stmt 1 view .LVU207
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 798              		.loc 1 216 21 view .LVU208
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 799              		.loc 1 216 21 is_stmt 0 view .LVU209
 800 0354 090052E1 		cmp	r2, r9	@ yy, ye
 801 0358 D3FFFF2A 		bcs	.L33		@,
 802              	.LVL47:
 803              	.L34:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 804              		.loc 1 217 25 is_stmt 1 discriminator 3 view .LVU210
 218:armwave.c     ****                     }
 805              		.loc 1 218 25 discriminator 3 view .LVU211
 806              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 807              		.loc 1 217 43 is_stmt 0 discriminator 3 view .LVU212
 808 035c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 809              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 810              		.loc 1 218 43 discriminator 3 view .LVU213
 811 0360 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 812              	.LVL48:
 813              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 814              		.loc 1 216 42 discriminator 3 view .LVU214
 815 0364 012082E2 		add	r2, r2, #1	@ yy, yy,
 816              	.LVL49:
 817              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 818              		.loc 1 216 21 discriminator 3 view .LVU215
 819 0368 020059E1 		cmp	r9, r2	@ ye, yy
 820              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 821              		.loc 1 218 53 discriminator 3 view .LVU216
 822 036c 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 823              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 824              		.loc 1 216 21 discriminator 3 view .LVU217
 825 0370 F9FFFF1A 		bne	.L34		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 826              		.loc 1 216 21 discriminator 3 view .LVU218
 827 0374 CCFFFFEA 		b	.L33		@
 828              	.LVL50:
 829              	.L48:
 171:armwave.c     **** 
 830              		.loc 1 171 5 is_stmt 1 discriminator 1 view .LVU219
 831 0378 10309FE5 		ldr	r3, .L51+4	@,
 832 037c AB20A0E3 		mov	r2, #171	@,
 833 0380 0C109FE5 		ldr	r1, .L51+8	@,
 834 0384 0C009FE5 		ldr	r0, .L51+12	@,
 835              	.LVL51:
 171:armwave.c     **** 
 836              		.loc 1 171 5 is_stmt 0 discriminator 1 view .LVU220
 837 0388 FEFFFFEB 		bl	__assert_fail		@
 838              	.LVL52:
 839              	.L52:
 171:armwave.c     **** 
 840              		.loc 1 171 5 discriminator 1 view .LVU221
 841              		.align	2
 842              	.L51:
 843 038c 00000000 		.word	g_armwave_state
 844 0390 00000000 		.word	.LANCHOR0
 845 0394 34000000 		.word	.LC3
 846 0398 40000000 		.word	.LC4
 847              		.cfi_endproc
 848              	.LFE60:
 850              		.align	2
 851              		.global	armwave_setup_render
 852              		.syntax unified
 853              		.arm
 854              		.fpu vfp
 856              	armwave_setup_render:
 857              	.LVL53:
 858              	.LFB61:
 225:armwave.c     **** 
 226:armwave.c     **** /*
 227:armwave.c     ****  * Setup the renderer with passed parameters.
 228:armwave.c     ****  */
 229:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 230:armwave.c     **** {
 859              		.loc 1 230 1 is_stmt 1 view -0
 860              		.cfi_startproc
 861              		@ args = 12, pretend = 0, frame = 0
 862              		@ frame_needed = 0, uses_anonymous_args = 0
 231:armwave.c     ****     uint32_t length, xx;
 863              		.loc 1 231 5 view .LVU223
 232:armwave.c     ****     float points_per_pixel;
 864              		.loc 1 232 5 view .LVU224
 233:armwave.c     **** 
 234:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 865              		.loc 1 234 5 view .LVU225
 866              	@ armwave.c:230: {
 230:armwave.c     ****     uint32_t length, xx;
 867              		.loc 1 230 1 is_stmt 0 view .LVU226
 868 039c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 869              		.cfi_def_cfa_offset 28
 870              		.cfi_offset 4, -28
 871              		.cfi_offset 5, -24
 872              		.cfi_offset 6, -20
 873              		.cfi_offset 7, -16
 874              		.cfi_offset 8, -12
 875              		.cfi_offset 9, -8
 876              		.cfi_offset 14, -4
 877 03a0 028B2DED 		vpush.64	{d8}	@
 878              		.cfi_def_cfa_offset 36
 879              		.cfi_offset 80, -36
 880              		.cfi_offset 81, -32
 881 03a4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 882 03a8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 883 03ac 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 884 03b0 14D04DE2 		sub	sp, sp, #20	@,,
 885              		.cfi_def_cfa_offset 56
 886              	@ armwave.c:230: {
 230:armwave.c     ****     uint32_t length, xx;
 887              		.loc 1 230 1 view .LVU227
 888 03b4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 889 03b8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 890 03bc 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 891              	@ armwave.c:234:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 892              		.loc 1 234 5 view .LVU228
 893 03c0 00308DE5 		str	r3, [sp]	@ wave_stride,
 894 03c4 F460CDE1 		strd	r6, [sp, #4]	@,,
 895 03c8 0230A0E1 		mov	r3, r2	@, waves_max
 896              	.LVL54:
 897              		.loc 1 234 5 view .LVU229
 898 03cc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 899 03d0 0120A0E1 		mov	r2, r1	@, end_point
 900              	.LVL55:
 901              		.loc 1 234 5 view .LVU230
 902 03d4 0010A0E1 		mov	r1, r0	@, start_point
 903              	.LVL56:
 904              		.loc 1 234 5 view .LVU231
 905 03d8 CC019FE5 		ldr	r0, .L67+12	@,
 906              	.LVL57:
 907              		.loc 1 234 5 view .LVU232
 908 03dc FEFFFFEB 		bl	printf		@
 909              	.LVL58:
 235:armwave.c     **** 
 236:armwave.c     ****     // TODO these asserts should instead raise PyExc
 237:armwave.c     ****     assert(start_point < end_point);
 910              		.loc 1 237 5 is_stmt 1 view .LVU233
 911 03e0 050054E1 		cmp	r4, r5	@ start_point, end_point
 912 03e4 5E00002A 		bcs	.L64		@,
 238:armwave.c     **** 
 239:armwave.c     ****     /*
 240:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 241:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 242:armwave.c     **** 
 243:armwave.c     ****     if(target_height == 256) {
 244:armwave.c     ****         g_armwave_state.row_shift = 8;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 246:armwave.c     ****     } else if(target_height == 512) {
 247:armwave.c     ****         g_armwave_state.row_shift = 9;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 249:armwave.c     ****     } else if(target_height == 1024) {
 250:armwave.c     ****         g_armwave_state.row_shift = 10;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 252:armwave.c     ****     } else if(target_height == 2048) {
 253:armwave.c     ****         g_armwave_state.row_shift = 11;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 255:armwave.c     ****     }
 256:armwave.c     ****     */
 257:armwave.c     **** 
 258:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 259:armwave.c     ****     g_armwave_state.xstride = target_height;
 913              		.loc 1 259 5 view .LVU234
 914              	@ armwave.c:270:     g_armwave_state.wave_length = end_point - start_point;
 260:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 262:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 263:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 264:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 265:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 267:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 269:armwave.c     ****     g_armwave_state.target_height = target_height;
 270:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 915              		.loc 1 270 45 is_stmt 0 view .LVU235
 916 03e8 045045E0 		sub	r5, r5, r4	@ _12, end_point, start_point
 917              	.LVL59:
 918              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 271:armwave.c     **** 
 272:armwave.c     ****     // Calculate compound scaler
 273:armwave.c     ****     //g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT
 274:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 275:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 919              		.loc 1 275 46 view .LVU236
 920 03ec 6B6ADFED 		vldr.32	s13, .L67	@ tmp193,
 921              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 922              		.loc 1 275 87 view .LVU237
 923 03f0 905A07EE 		vmov	s15, r5	@ int	@ _12, _12
 924              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 255.0f;
 260:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 925              		.loc 1 260 49 view .LVU238
 926 03f4 6A6A9FED 		vldr.32	s12, .L67+4	@ tmp174,
 927              	@ armwave.c:259:     g_armwave_state.xstride = target_height;
 259:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 928              		.loc 1 259 29 view .LVU239
 929 03f8 B0419FE5 		ldr	r4, .L67+16	@ tmp238,
 930              	.LVL60:
 931              	@ armwave.c:265:     g_armwave_state.size = target_height * target_width;
 265:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 932              		.loc 1 265 42 view .LVU240
 933 03fc 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 934              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 935              		.loc 1 275 87 view .LVU241
 936 0400 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp190, _12
 937              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 255.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 938              		.loc 1 260 49 view .LVU242
 939 0404 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 940              	@ armwave.c:267:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 267:armwave.c     ****     g_armwave_state.target_width = target_width;
 941              		.loc 1 267 68 view .LVU243
 942 0408 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 943              	@ armwave.c:266:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 266:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 944              		.loc 1 266 37 view .LVU244
 945 040c 012CA0E3 		mov	r2, #256	@ tmp184,
 946              	@ armwave.c:265:     g_armwave_state.size = target_height * target_width;
 265:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 947              		.loc 1 265 26 view .LVU245
 948 0410 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 949              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 255.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 950              		.loc 1 260 49 view .LVU246
 951 0414 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 952              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 953              		.loc 1 275 87 view .LVU247
 954 0418 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 955              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 276:armwave.c     **** 
 277:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 956              		.loc 1 277 5 view .LVU248
 957 041c 0310A0E1 		mov	r1, r3	@, _10
 958              	@ armwave.c:266:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 266:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 959              		.loc 1 266 37 view .LVU249
 960 0420 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 961              	@ armwave.c:267:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 267:armwave.c     ****     g_armwave_state.target_width = target_width;
 962              		.loc 1 267 34 view .LVU250
 963 0424 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 964              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 275:armwave.c     **** 
 965              		.loc 1 275 87 view .LVU251
 966 0428 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp189, target_width
 967              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 968              		.loc 1 277 5 view .LVU252
 969 042c 80019FE5 		ldr	r0, .L67+20	@,
 970              	@ armwave.c:259:     g_armwave_state.xstride = target_height;
 259:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 971              		.loc 1 259 29 view .LVU253
 972 0430 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 973              		.loc 1 260 5 is_stmt 1 view .LVU254
 974              	@ armwave.c:262:     g_armwave_state.wave_stride = wave_stride;
 262:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 975              		.loc 1 262 33 is_stmt 0 view .LVU255
 976 0434 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 977              	@ armwave.c:263:     g_armwave_state.waves_max = waves_max;
 263:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 978              		.loc 1 263 31 view .LVU256
 979 0438 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 980              	@ armwave.c:264:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 264:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 981              		.loc 1 264 27 view .LVU257
 982 043c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 983              	@ armwave.c:269:     g_armwave_state.target_height = target_height;
 269:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 984              		.loc 1 269 35 view .LVU258
 985 0440 F865C4E1 		strd	r6, [r4, #88]	@, tmp238,
 986              	@ armwave.c:270:     g_armwave_state.wave_length = end_point - start_point;
 270:armwave.c     **** 
 987              		.loc 1 270 33 view .LVU259
 988 0444 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 989              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 275:armwave.c     **** 
 990              		.loc 1 275 87 view .LVU260
 991 0448 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp191, tmp189, tmp190
 992              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 255.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 993              		.loc 1 260 49 view .LVU261
 994 044c 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 995              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 275:armwave.c     **** 
 996              		.loc 1 275 46 view .LVU262
 997 0450 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp192, tmp191, tmp193
 998              	@ armwave.c:275:         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_wid
 275:armwave.c     **** 
 999              		.loc 1 275 118 view .LVU263
 1000 0454 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp194, tmp192, tmp193
 1001              	@ armwave.c:261:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1002              		.loc 1 261 30 view .LVU264
 1003 0458 C76AFDEE 		vcvt.s32.f32	s13, s14	@ tmp177, _3
 1004              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1005              		.loc 1 274 42 view .LVU265
 1006 045c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp194
 1007              	@ armwave.c:260:     g_armwave_state.vscale_frac = target_height / 255.0f;
 260:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1008              		.loc 1 260 33 view .LVU266
 1009 0460 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1010              		.loc 1 261 5 is_stmt 1 view .LVU267
 1011              	@ armwave.c:261:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 261:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1012              		.loc 1 261 30 is_stmt 0 view .LVU268
 1013 0464 0C6AC4ED 		vstr.32	s13, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 262:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1014              		.loc 1 262 5 is_stmt 1 view .LVU269
 263:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1015              		.loc 1 263 5 view .LVU270
 264:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1016              		.loc 1 264 5 view .LVU271
 265:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1017              		.loc 1 265 5 view .LVU272
 266:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1018              		.loc 1 266 5 view .LVU273
 267:armwave.c     ****     g_armwave_state.target_width = target_width;
 1019              		.loc 1 267 5 view .LVU274
 268:armwave.c     ****     g_armwave_state.target_height = target_height;
 1020              		.loc 1 268 5 view .LVU275
 269:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1021              		.loc 1 269 5 view .LVU276
 270:armwave.c     **** 
 1022              		.loc 1 270 5 view .LVU277
 274:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1023              		.loc 1 274 5 view .LVU278
 1024              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1025              		.loc 1 274 42 is_stmt 0 view .LVU279
 1026 0468 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1027              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1028              		.loc 1 277 5 view .LVU280
 1029 046c 903A17EE 		vmov	r3, s15	@ int	@, _19
 1030              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         (int)g_armwave_state.bitdepth_height * ((float)(g_armwave_state.target_width) / g_armwave_s
 1031              		.loc 1 274 42 view .LVU281
 1032 0470 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1033              		.loc 1 277 5 is_stmt 1 view .LVU282
 1034 0474 0C20A0E1 		mov	r2, ip	@, tmp3
 1035 0478 FEFFFFEB 		bl	printf		@
 1036              	.LVL61:
 278:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 279:armwave.c     **** 
 280:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 281:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 283:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1037              		.loc 1 283 5 view .LVU283
 1038              	@ armwave.c:285:     if(g_armwave_state.ch1_buffer != NULL)
 284:armwave.c     **** 
 285:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1039              		.loc 1 285 23 is_stmt 0 view .LVU284
 1040 047c 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1041              	@ armwave.c:283:     g_armwave_state.slice_height = 64;  
 283:armwave.c     **** 
 1042              		.loc 1 283 34 view .LVU285
 1043 0480 4030A0E3 		mov	r3, #64	@ tmp199,
 1044              	@ armwave.c:285:     if(g_armwave_state.ch1_buffer != NULL)
 1045              		.loc 1 285 7 view .LVU286
 1046 0484 000050E3 		cmp	r0, #0	@ _20,
 1047              	@ armwave.c:283:     g_armwave_state.slice_height = 64;  
 283:armwave.c     **** 
 1048              		.loc 1 283 34 view .LVU287
 1049 0488 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1050              		.loc 1 285 5 is_stmt 1 view .LVU288
 1051              	@ armwave.c:285:     if(g_armwave_state.ch1_buffer != NULL)
 1052              		.loc 1 285 7 is_stmt 0 view .LVU289
 1053 048c 0000000A 		beq	.L55		@,
 286:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1054              		.loc 1 286 9 is_stmt 1 view .LVU290
 1055 0490 FEFFFFEB 		bl	free		@
 1056              	.LVL62:
 1057              	.L55:
 287:armwave.c     **** 
 288:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1058              		.loc 1 288 5 view .LVU291
 1059              	@ armwave.c:288:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1060              		.loc 1 288 34 is_stmt 0 view .LVU292
 1061 0494 0110A0E3 		mov	r1, #1	@,
 1062 0498 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1063 049c FEFFFFEB 		bl	calloc		@
 1064              	.LVL63:
 1065              	@ armwave.c:290:     assert(g_armwave_state.ch1_buffer != NULL);
 289:armwave.c     **** 
 290:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1066              		.loc 1 290 5 view .LVU293
 1067 04a0 000050E3 		cmp	r0, #0	@ _23,
 1068              	@ armwave.c:288:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 288:armwave.c     **** 
 1069              		.loc 1 288 34 view .LVU294
 1070 04a4 0070A0E1 		mov	r7, r0	@ _23,
 1071              	@ armwave.c:288:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 288:armwave.c     **** 
 1072              		.loc 1 288 32 view .LVU295
 1073 04a8 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1074              		.loc 1 290 5 is_stmt 1 view .LVU296
 1075 04ac 3600000A 		beq	.L65		@,
 291:armwave.c     **** 
 292:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 293:armwave.c     ****     length = end_point - start_point;
 1076              		.loc 1 293 5 view .LVU297
 1077              	.LVL64:
 294:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1078              		.loc 1 294 5 view .LVU298
 1079              	@ armwave.c:294:     points_per_pixel = length / ((float)(target_width));
 1080              		.loc 1 294 34 is_stmt 0 view .LVU299
 1081 04b0 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1082              	@ armwave.c:294:     points_per_pixel = length / ((float)(target_width));
 1083              		.loc 1 294 22 view .LVU300
 1084 04b4 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 1085              	@ armwave.c:295:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1086              		.loc 1 295 60 view .LVU301
 1087 04b8 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp248, g_armwave_state.slice_height
 1088              	@ armwave.c:296:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 296:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1089              		.loc 1 296 40 view .LVU302
 1090 04bc 8500A0E1 		lsl	r0, r5, #1	@, _12,
 1091              	@ armwave.c:294:     points_per_pixel = length / ((float)(target_width));
 294:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1092              		.loc 1 294 34 view .LVU303
 1093 04c0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp211, target_width
 1094              	@ armwave.c:294:     points_per_pixel = length / ((float)(target_width));
 294:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1095              		.loc 1 294 22 view .LVU304
 1096 04c4 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp210, _12
 1097              	@ armwave.c:295:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1098              		.loc 1 295 60 view .LVU305
 1099 04c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp214, tmp248
 1100              	@ armwave.c:294:     points_per_pixel = length / ((float)(target_width));
 294:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1101              		.loc 1 294 22 view .LVU306
 1102 04cc A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp210, tmp211
 1103              	.LVL65:
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1104              		.loc 1 295 5 is_stmt 1 view .LVU307
 1105              	@ armwave.c:295:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1106              		.loc 1 295 60 is_stmt 0 view .LVU308
 1107 04d0 087A67EE 		vmul.f32	s15, s14, s16	@ tmp216, tmp214, points_per_pixel
 1108              	@ armwave.c:295:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1109              		.loc 1 295 41 view .LVU309
 1110 04d4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp217, tmp216
 1111 04d8 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp217, g_armwave_state.slice_record_height
 1112              		.loc 1 296 5 is_stmt 1 view .LVU310
 1113              	@ armwave.c:296:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1114              		.loc 1 296 40 is_stmt 0 view .LVU311
 1115 04dc FEFFFFEB 		bl	malloc		@
 1116              	.LVL66:
 1117              	@ armwave.c:298:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 297:armwave.c     **** 
 298:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1118              		.loc 1 298 5 view .LVU312
 1119 04e0 000050E3 		cmp	r0, #0	@ _31,
 1120              	@ armwave.c:296:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 296:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1121              		.loc 1 296 40 view .LVU313
 1122 04e4 0060A0E1 		mov	r6, r0	@ _31,
 1123              	@ armwave.c:296:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 296:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 296 38 view .LVU314
 1125 04e8 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1126              		.loc 1 298 5 is_stmt 1 view .LVU315
 1127 04ec 2100000A 		beq	.L66		@,
 1128              	@ armwave.c:301:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 299:armwave.c     **** 
 300:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 301:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1129              		.loc 1 301 54 is_stmt 0 view .LVU316
 1130 04f0 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp226,
 1131 04f4 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1132              	@ armwave.c:300:     for(xx = 0; xx < length; xx++) {
 300:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1133              		.loc 1 300 12 view .LVU317
 1134 04f8 0030A0E3 		mov	r3, #0	@ xx,
 1135              	@ armwave.c:301:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1136              		.loc 1 301 54 view .LVU318
 1137 04fc 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp226, points_per_pixel
 1138              	.L58:
 1139              	.LVL67:
 1140              		.loc 1 301 9 is_stmt 1 discriminator 3 view .LVU319
 1141              	@ armwave.c:301:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1142              		.loc 1 301 74 is_stmt 0 discriminator 3 view .LVU320
 1143 0500 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1144              	@ armwave.c:300:     for(xx = 0; xx < length; xx++) {
 300:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1145              		.loc 1 300 32 discriminator 3 view .LVU321
 1146 0504 013083E2 		add	r3, r3, #1	@ xx, xx,
 1147              	.LVL68:
 1148              	@ armwave.c:300:     for(xx = 0; xx < length; xx++) {
 300:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1149              		.loc 1 300 5 discriminator 3 view .LVU322
 1150 0508 030055E1 		cmp	r5, r3	@ _12, xx
 1151              	@ armwave.c:301:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1152              		.loc 1 301 74 discriminator 3 view .LVU323
 1153 050c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp227, xx
 1154 0510 877A67EE 		vmul.f32	s15, s15, s14	@ tmp228, tmp227, _32
 1155              	@ armwave.c:301:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1156              		.loc 1 301 46 discriminator 3 view .LVU324
 1157 0514 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp229, tmp228
 1158 0518 902A17EE 		vmov	r2, s15	@ int	@ tmp229, tmp229
 1159 051c B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp229, MEM[base: _101, offset: 0B]
 1160              	@ armwave.c:300:     for(xx = 0; xx < length; xx++) {
 300:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 300 5 discriminator 3 view .LVU325
 1162 0520 F6FFFF1A 		bne	.L58		@,
 302:armwave.c     **** 
 303:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 304:armwave.c     ****     }
 305:armwave.c     **** 
 306:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1163              		.loc 1 306 5 is_stmt 1 view .LVU326
 1164              	@ armwave.c:306:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1165              		.loc 1 306 34 is_stmt 0 view .LVU327
 1166 0524 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1167 0528 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1168 052c FEFFFFEB 		bl	malloc		@
 1169              	.LVL69:
 1170              	@ armwave.c:308:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 307:armwave.c     **** 
 308:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1171              		.loc 1 308 5 view .LVU328
 1172 0530 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1173 0534 0620A0E1 		mov	r2, r6	@, _31
 1174 0538 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1175 053c 0710A0E1 		mov	r1, r7	@, _23
 1176              	@ armwave.c:306:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 306:armwave.c     **** 
 1177              		.loc 1 306 34 view .LVU329
 1178 0540 00C0A0E1 		mov	ip, r0	@ tmp233,
 1179              	@ armwave.c:308:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1180              		.loc 1 308 5 view .LVU330
 1181 0544 0030A0E1 		mov	r3, r0	@, tmp233
 1182              	@ armwave.c:306:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 306:armwave.c     **** 
 1183              		.loc 1 306 32 view .LVU331
 1184 0548 68C084E5 		str	ip, [r4, #104]	@ tmp233, g_armwave_state.out_pixbuf
 1185              		.loc 1 308 5 is_stmt 1 view .LVU332
 1186 054c 64009FE5 		ldr	r0, .L67+24	@,
 1187 0550 FEFFFFEB 		bl	printf		@
 1188              	.LVL70:
 309:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 310:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 311:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 313:armwave.c     **** 
 314:armwave.c     ****     malloc_stats();
 1189              		.loc 1 314 5 view .LVU333
 1190              	@ armwave.c:315: }
 315:armwave.c     **** }
 1191              		.loc 1 315 1 is_stmt 0 view .LVU334
 1192 0554 14D08DE2 		add	sp, sp, #20	@,,
 1193              		.cfi_remember_state
 1194              		.cfi_def_cfa_offset 36
 1195              		@ sp needed	@
 1196 0558 028BBDEC 		vldm	sp!, {d8}	@
 1197              		.cfi_restore 80
 1198              		.cfi_restore 81
 1199              		.cfi_def_cfa_offset 28
 1200              	.LVL71:
 1201              		.loc 1 315 1 view .LVU335
 1202 055c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1203              		.cfi_restore 14
 1204              		.cfi_restore 9
 1205              		.cfi_restore 8
 1206              		.cfi_restore 7
 1207              		.cfi_restore 6
 1208              		.cfi_restore 5
 1209              		.cfi_restore 4
 1210              		.cfi_def_cfa_offset 0
 1211              	.LVL72:
 1212              	@ armwave.c:314:     malloc_stats();
 314:armwave.c     **** }
 1213              		.loc 1 314 5 view .LVU336
 1214 0560 FEFFFFEA 		b	malloc_stats		@
 1215              	.LVL73:
 1216              	.L64:
 1217              		.cfi_restore_state
 237:armwave.c     **** 
 1218              		.loc 1 237 5 is_stmt 1 discriminator 1 view .LVU337
 1219 0564 50309FE5 		ldr	r3, .L67+28	@,
 1220 0568 ED20A0E3 		mov	r2, #237	@,
 1221 056c 4C109FE5 		ldr	r1, .L67+32	@,
 1222 0570 4C009FE5 		ldr	r0, .L67+36	@,
 1223 0574 FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL74:
 1225              	.L66:
 298:armwave.c     **** 
 1226              		.loc 1 298 5 discriminator 1 view .LVU338
 1227 0578 3C309FE5 		ldr	r3, .L67+28	@,
 1228 057c 44209FE5 		ldr	r2, .L67+40	@,
 1229 0580 38109FE5 		ldr	r1, .L67+32	@,
 1230 0584 40009FE5 		ldr	r0, .L67+44	@,
 1231 0588 FEFFFFEB 		bl	__assert_fail		@
 1232              	.LVL75:
 1233              	.L65:
 290:armwave.c     **** 
 1234              		.loc 1 290 5 discriminator 1 view .LVU339
 1235 058c 28309FE5 		ldr	r3, .L67+28	@,
 1236 0590 38209FE5 		ldr	r2, .L67+48	@,
 1237 0594 24109FE5 		ldr	r1, .L67+32	@,
 1238 0598 34009FE5 		ldr	r0, .L67+52	@,
 1239 059c FEFFFFEB 		bl	__assert_fail		@
 1240              	.LVL76:
 1241              	.L68:
 1242              		.align	2
 1243              	.L67:
 1244 05a0 00008043 		.word	1132462080
 1245 05a4 00007F43 		.word	1132396544
 1246 05a8 0000803F 		.word	1065353216
 1247 05ac 54000000 		.word	.LC5
 1248 05b0 00000000 		.word	g_armwave_state
 1249 05b4 98000000 		.word	.LC7
 1250 05b8 1C010000 		.word	.LC10
 1251 05bc 1C000000 		.word	.LANCHOR0+28
 1252 05c0 34000000 		.word	.LC3
 1253 05c4 80000000 		.word	.LC6
 1254 05c8 2A010000 		.word	298
 1255 05cc F0000000 		.word	.LC9
 1256 05d0 22010000 		.word	290
 1257 05d4 CC000000 		.word	.LC8
 1258              		.cfi_endproc
 1259              	.LFE61:
 1261              		.align	2
 1262              		.global	armwave_set_wave_pointer
 1263              		.syntax unified
 1264              		.arm
 1265              		.fpu vfp
 1267              	armwave_set_wave_pointer:
 1268              	.LVL77:
 1269              	.LFB62:
 316:armwave.c     **** 
 317:armwave.c     **** /*
 318:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 319:armwave.c     ****  * in the future.
 320:armwave.c     ****  */
 321:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 322:armwave.c     **** {
 1270              		.loc 1 322 1 view -0
 1271              		.cfi_startproc
 1272              		@ args = 0, pretend = 0, frame = 0
 1273              		@ frame_needed = 0, uses_anonymous_args = 0
 323:armwave.c     ****     assert(wave_buffer != NULL);
 1274              		.loc 1 323 5 view .LVU341
 1275 05d8 000050E3 		cmp	r0, #0	@ wave_buffer
 1276              		.loc 1 323 5 is_stmt 0 view .LVU342
 1277 05dc 0200000A 		beq	.L74		@,
 324:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1278              		.loc 1 324 5 is_stmt 1 view .LVU343
 1279              	@ armwave.c:324:     g_armwave_state.wave_buffer = wave_buffer;
 1280              		.loc 1 324 33 is_stmt 0 view .LVU344
 1281 05e0 1C309FE5 		ldr	r3, .L75	@ tmp116,
 1282 05e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1283 05e8 1EFF2FE1 		bx	lr	@
 1284              	.L74:
 323:armwave.c     ****     assert(wave_buffer != NULL);
 1285              		.loc 1 323 5 is_stmt 1 discriminator 1 view .LVU345
 1286              	@ armwave.c:322: {
 322:armwave.c     ****     assert(wave_buffer != NULL);
 1287              		.loc 1 322 1 is_stmt 0 discriminator 1 view .LVU346
 1288 05ec 10402DE9 		push	{r4, lr}	@
 1289              		.cfi_def_cfa_offset 8
 1290              		.cfi_offset 4, -8
 1291              		.cfi_offset 14, -4
 1292              	@ armwave.c:323:     assert(wave_buffer != NULL);
 323:armwave.c     ****     assert(wave_buffer != NULL);
 1293              		.loc 1 323 5 discriminator 1 view .LVU347
 1294 05f0 10309FE5 		ldr	r3, .L75+4	@,
 1295 05f4 10209FE5 		ldr	r2, .L75+8	@,
 1296 05f8 10109FE5 		ldr	r1, .L75+12	@,
 1297 05fc 10009FE5 		ldr	r0, .L75+16	@,
 1298              	.LVL78:
 323:armwave.c     ****     assert(wave_buffer != NULL);
 1299              		.loc 1 323 5 discriminator 1 view .LVU348
 1300 0600 FEFFFFEB 		bl	__assert_fail		@
 1301              	.LVL79:
 1302              	.L76:
 1303              		.align	2
 1304              	.L75:
 1305 0604 00000000 		.word	g_armwave_state
 1306 0608 34000000 		.word	.LANCHOR0+52
 1307 060c 43010000 		.word	323
 1308 0610 34000000 		.word	.LC3
 1309 0614 40010000 		.word	.LC11
 1310              		.cfi_endproc
 1311              	.LFE62:
 1313              		.align	2
 1314              		.global	armwave_set_wave_pointer_as_testbuf
 1315              		.syntax unified
 1316              		.arm
 1317              		.fpu vfp
 1319              	armwave_set_wave_pointer_as_testbuf:
 1320              	.LVL80:
 1321              	.LFB63:
 325:armwave.c     **** }
 326:armwave.c     **** 
 327:armwave.c     **** /*
 328:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 329:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 330:armwave.c     ****  */
 331:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 332:armwave.c     **** {
 1322              		.loc 1 332 1 is_stmt 1 view -0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 1326              		@ link register save eliminated.
 333:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1327              		.loc 1 333 5 view .LVU350
 1328              	@ armwave.c:333:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1329              		.loc 1 333 29 is_stmt 0 view .LVU351
 1330 0618 24309FE5 		ldr	r3, .L80	@ tmp117,
 1331              	@ armwave.c:333:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1332              		.loc 1 333 7 view .LVU352
 1333 061c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1334 0620 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1335 0624 0400003A 		bcc	.L79		@,
 334:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 335:armwave.c     ****         return;
 336:armwave.c     ****     }
 337:armwave.c     **** 
 338:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1336              		.loc 1 338 5 is_stmt 1 view .LVU353
 1337              	@ armwave.c:338:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1338              		.loc 1 338 111 is_stmt 0 view .LVU354
 1339 0628 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1340              	@ armwave.c:338:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1341              		.loc 1 338 68 view .LVU355
 1342 062c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1343 0630 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1344              	.LVL81:
 1345              	@ armwave.c:338:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1346              		.loc 1 338 33 view .LVU356
 1347 0634 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1348              	@ armwave.c:339: }
 339:armwave.c     **** }
 1349              		.loc 1 339 1 view .LVU357
 1350 0638 1EFF2FE1 		bx	lr	@
 1351              	.LVL82:
 1352              	.L79:
 334:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1353              		.loc 1 334 9 is_stmt 1 view .LVU358
 1354 063c 04009FE5 		ldr	r0, .L80+4	@,
 1355              	.LVL83:
 334:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1356              		.loc 1 334 9 is_stmt 0 view .LVU359
 1357 0640 FEFFFFEA 		b	puts		@
 1358              	.LVL84:
 1359              	.L81:
 1360              		.align	2
 1361              	.L80:
 1362 0644 00000000 		.word	g_armwave_state
 1363 0648 54010000 		.word	.LC12
 1364              		.cfi_endproc
 1365              	.LFE63:
 1367              		.align	2
 1368              		.global	armwave_set_wave_pointer_u32
 1369              		.syntax unified
 1370              		.arm
 1371              		.fpu vfp
 1373              	armwave_set_wave_pointer_u32:
 1374              	.LVL85:
 1375              	.LFB64:
 340:armwave.c     **** 
 341:armwave.c     **** /*
 342:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 343:armwave.c     ****  * disjointed buffers in the future.
 344:armwave.c     ****  */
 345:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 346:armwave.c     **** {
 1376              		.loc 1 346 1 is_stmt 1 view -0
 1377              		.cfi_startproc
 1378              		@ args = 0, pretend = 0, frame = 0
 1379              		@ frame_needed = 0, uses_anonymous_args = 0
 347:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1380              		.loc 1 347 5 view .LVU361
 1381 064c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1382              		.loc 1 347 5 is_stmt 0 view .LVU362
 1383 0650 0200000A 		beq	.L87		@,
 348:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1384              		.loc 1 348 5 is_stmt 1 view .LVU363
 1385              	@ armwave.c:348:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1386              		.loc 1 348 33 is_stmt 0 view .LVU364
 1387 0654 1C309FE5 		ldr	r3, .L88	@ tmp117,
 1388 0658 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1389 065c 1EFF2FE1 		bx	lr	@
 1390              	.L87:
 347:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1391              		.loc 1 347 5 is_stmt 1 discriminator 1 view .LVU365
 1392              	@ armwave.c:346: {
 346:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1393              		.loc 1 346 1 is_stmt 0 discriminator 1 view .LVU366
 1394 0660 10402DE9 		push	{r4, lr}	@
 1395              		.cfi_def_cfa_offset 8
 1396              		.cfi_offset 4, -8
 1397              		.cfi_offset 14, -4
 1398              	@ armwave.c:347:     assert(wave_buffer_ptr != 0);
 347:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1399              		.loc 1 347 5 discriminator 1 view .LVU367
 1400 0664 10309FE5 		ldr	r3, .L88+4	@,
 1401 0668 10209FE5 		ldr	r2, .L88+8	@,
 1402 066c 10109FE5 		ldr	r1, .L88+12	@,
 1403 0670 10009FE5 		ldr	r0, .L88+16	@,
 1404              	.LVL86:
 347:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1405              		.loc 1 347 5 discriminator 1 view .LVU368
 1406 0674 FEFFFFEB 		bl	__assert_fail		@
 1407              	.LVL87:
 1408              	.L89:
 1409              		.align	2
 1410              	.L88:
 1411 0678 00000000 		.word	g_armwave_state
 1412 067c 50000000 		.word	.LANCHOR0+80
 1413 0680 5B010000 		.word	347
 1414 0684 34000000 		.word	.LC3
 1415 0688 90010000 		.word	.LC13
 1416              		.cfi_endproc
 1417              	.LFE64:
 1419              		.align	2
 1420              		.global	armwave_clear_buffer
 1421              		.syntax unified
 1422              		.arm
 1423              		.fpu vfp
 1425              	armwave_clear_buffer:
 1426              	.LVL88:
 1427              	.LFB65:
 349:armwave.c     **** }
 350:armwave.c     **** 
 351:armwave.c     **** /*
 352:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 353:armwave.c     ****  */
 354:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 355:armwave.c     **** {
 1428              		.loc 1 355 1 is_stmt 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432              		@ link register save eliminated.
 356:armwave.c     ****     // Flags ignored, only one buffer cleared
 357:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1433              		.loc 1 357 5 view .LVU370
 1434              	@ armwave.c:357:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1435              		.loc 1 357 58 is_stmt 0 view .LVU371
 1436 068c 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1437              	@ armwave.c:357:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1438              		.loc 1 357 5 view .LVU372
 1439 0690 0010A0E3 		mov	r1, #0	@,
 1440 0694 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1441 0698 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1442              	.LVL89:
 1443              		.loc 1 357 5 view .LVU373
 1444 069c FEFFFFEA 		b	memset		@
 1445              	.LVL90:
 1446              	.L92:
 1447              		.align	2
 1448              	.L91:
 1449 06a0 00000000 		.word	g_armwave_state
 1450              		.cfi_endproc
 1451              	.LFE65:
 1453              		.align	2
 1454              		.global	armwave_set_channel_colour
 1455              		.syntax unified
 1456              		.arm
 1457              		.fpu vfp
 1459              	armwave_set_channel_colour:
 1460              	.LVL91:
 1461              	.LFB66:
 358:armwave.c     **** }
 359:armwave.c     **** 
 360:armwave.c     **** /*
 361:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 362:armwave.c     ****  */
 363:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 364:armwave.c     **** {
 1462              		.loc 1 364 1 is_stmt 1 view -0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 365:armwave.c     ****     // Only 1ch supported for now
 366:armwave.c     ****     switch(ch) {
 1467              		.loc 1 366 5 view .LVU375
 1468 06a4 010050E3 		cmp	r0, #1	@ ch,
 367:armwave.c     ****         case 1:
 368:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1469              		.loc 1 368 13 view .LVU376
 1470              	@ armwave.c:368:             g_armwave_state.ch1_color.r = r;
 1471              		.loc 1 368 41 is_stmt 0 view .LVU377
 1472 06a8 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1473              	.LVL92:
 1474              		.loc 1 368 41 view .LVU378
 1475 06ac BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 369:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1476              		.loc 1 369 13 is_stmt 1 view .LVU379
 1477              	@ armwave.c:369:             g_armwave_state.ch1_color.g = g;
 1478              		.loc 1 369 41 is_stmt 0 view .LVU380
 1479 06b0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 370:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1480              		.loc 1 370 13 is_stmt 1 view .LVU381
 1481              	@ armwave.c:370:             g_armwave_state.ch1_color.b = b;
 1482              		.loc 1 370 41 is_stmt 0 view .LVU382
 1483 06b4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 371:armwave.c     ****             break;
 1484              		.loc 1 371 13 is_stmt 1 view .LVU383
 1485              	@ armwave.c:373: }
 372:armwave.c     ****     }
 373:armwave.c     **** }
 1486              		.loc 1 373 1 is_stmt 0 view .LVU384
 1487 06b8 1EFF2FE1 		bx	lr	@
 1488              	.L96:
 1489              		.align	2
 1490              	.L95:
 1491 06bc 00000000 		.word	g_armwave_state
 1492              		.cfi_endproc
 1493              	.LFE66:
 1495              		.align	2
 1496              		.global	armwave_dump_ppm_debug
 1497              		.syntax unified
 1498              		.arm
 1499              		.fpu vfp
 1501              	armwave_dump_ppm_debug:
 1502              	.LVL93:
 1503              	.LFB67:
 374:armwave.c     **** 
 375:armwave.c     **** /*
 376:armwave.c     ****  * Dump a ppm of a buffer to a file.
 377:armwave.c     ****  */
 378:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 379:armwave.c     **** {
 1504              		.loc 1 379 1 is_stmt 1 view -0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 0
 1507              		@ frame_needed = 0, uses_anonymous_args = 0
 380:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1508              		.loc 1 380 5 view .LVU386
 1509              	@ armwave.c:379: {
 379:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1510              		.loc 1 379 1 is_stmt 0 view .LVU387
 1511 06c0 0130A0E1 		mov	r3, r1	@ fn, fn
 1512 06c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1513              		.cfi_def_cfa_offset 28
 1514              		.cfi_offset 4, -28
 1515              		.cfi_offset 5, -24
 1516              		.cfi_offset 6, -20
 1517              		.cfi_offset 7, -16
 1518              		.cfi_offset 8, -12
 1519              		.cfi_offset 9, -8
 1520              		.cfi_offset 14, -4
 1521 06c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1522 06cc 0CD04DE2 		sub	sp, sp, #12	@,,
 1523              		.cfi_def_cfa_offset 40
 1524              	@ armwave.c:380:     FILE *fp = fopen(fn, "wb");
 1525              		.loc 1 380 16 view .LVU388
 1526 06d0 C4109FE5 		ldr	r1, .L105	@,
 1527              	.LVL94:
 1528              		.loc 1 380 16 view .LVU389
 1529 06d4 0300A0E1 		mov	r0, r3	@, fn
 1530              	.LVL95:
 1531              		.loc 1 380 16 view .LVU390
 1532 06d8 FEFFFFEB 		bl	fopen64		@
 1533              	.LVL96:
 1534              	@ armwave.c:387:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 381:armwave.c     ****     uint32_t data;
 382:armwave.c     ****     int xx, yy;
 383:armwave.c     **** 
 384:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 385:armwave.c     **** 
 386:armwave.c     ****     fputs("P3\n", fp);
 387:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1535              		.loc 1 387 5 view .LVU391
 1536 06dc BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1537              	@ armwave.c:386:     fputs("P3\n", fp);
 386:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1538              		.loc 1 386 5 view .LVU392
 1539 06e0 0320A0E3 		mov	r2, #3	@,
 1540 06e4 0110A0E3 		mov	r1, #1	@,
 1541              	@ armwave.c:380:     FILE *fp = fopen(fn, "wb");
 380:armwave.c     ****     uint32_t data;
 1542              		.loc 1 380 16 view .LVU393
 1543 06e8 0070A0E1 		mov	r7, r0	@ fp,
 1544              	.LVL97:
 381:armwave.c     ****     uint32_t data;
 1545              		.loc 1 381 5 is_stmt 1 view .LVU394
 382:armwave.c     **** 
 1546              		.loc 1 382 5 view .LVU395
 386:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1547              		.loc 1 386 5 view .LVU396
 1548 06ec 0030A0E1 		mov	r3, r0	@, fp
 1549 06f0 AC009FE5 		ldr	r0, .L105+8	@,
 1550              	.LVL98:
 386:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1551              		.loc 1 386 5 is_stmt 0 view .LVU397
 1552 06f4 FEFFFFEB 		bl	fwrite		@
 1553              	.LVL99:
 1554              		.loc 1 387 5 is_stmt 1 view .LVU398
 1555 06f8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1556 06fc A4109FE5 		ldr	r1, .L105+12	@,
 1557 0700 0700A0E1 		mov	r0, r7	@, fp
 1558 0704 FEFFFFEB 		bl	fprintf		@
 1559              	.LVL100:
 388:armwave.c     ****     fputs("255\n", fp);
 1560              		.loc 1 388 5 view .LVU399
 1561 0708 0420A0E3 		mov	r2, #4	@,
 1562 070c 0730A0E1 		mov	r3, r7	@, fp
 1563 0710 0110A0E3 		mov	r1, #1	@,
 1564 0714 90009FE5 		ldr	r0, .L105+16	@,
 1565 0718 FEFFFFEB 		bl	fwrite		@
 1566              	.LVL101:
 389:armwave.c     **** 
 390:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1567              		.loc 1 390 5 view .LVU400
 1568              	@ armwave.c:390:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1569              		.loc 1 390 37 is_stmt 0 view .LVU401
 1570 071c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1571              	@ armwave.c:390:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1572              		.loc 1 390 5 view .LVU402
 1573 0720 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1574 0724 180000DA 		ble	.L98		@,
 1575 0728 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1576              	@ armwave.c:395:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 392:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 393:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 394:armwave.c     **** 
 395:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1577              		.loc 1 395 13 view .LVU403
 1578 072c 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1579              	@ armwave.c:390:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 390:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1580              		.loc 1 390 12 view .LVU404
 1581 0730 0050A0E3 		mov	r5, #0	@ yy,
 1582              	.LVL102:
 1583              	.L99:
 1584              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1585              		.loc 1 391 9 view .LVU405
 1586 0734 000053E3 		cmp	r3, #0	@ _13,
 1587              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1588              		.loc 1 391 16 view .LVU406
 1589 0738 0040A0C3 		movgt	r4, #0	@ xx,
 1590              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1591              		.loc 1 391 9 view .LVU407
 1592 073c 0F0000DA 		ble	.L101		@,
 1593              	.LVL103:
 1594              	.L100:
 392:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1595              		.loc 1 392 13 is_stmt 1 discriminator 3 view .LVU408
 1596              	@ armwave.c:392:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 392:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1597              		.loc 1 392 29 is_stmt 0 discriminator 3 view .LVU409
 1598 0740 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1599              	@ armwave.c:395:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1600              		.loc 1 395 13 discriminator 3 view .LVU410
 1601 0744 0910A0E1 		mov	r1, r9	@, tmp152
 1602 0748 0700A0E1 		mov	r0, r7	@, fp
 1603              	@ armwave.c:392:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 392:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1604              		.loc 1 392 18 discriminator 3 view .LVU411
 1605 074c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1606              	.LVL104:
 1607              		.loc 1 395 13 is_stmt 1 discriminator 3 view .LVU412
 1608              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1609              		.loc 1 391 58 is_stmt 0 discriminator 3 view .LVU413
 1610 0750 014084E2 		add	r4, r4, #1	@ xx, xx,
 1611              	.LVL105:
 1612              	@ armwave.c:395:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1613              		.loc 1 395 81 discriminator 3 view .LVU414
 1614 0754 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1615              	@ armwave.c:395:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1616              		.loc 1 395 61 discriminator 3 view .LVU415
 1617 0758 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1618              	@ armwave.c:395:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1619              		.loc 1 395 13 discriminator 3 view .LVU416
 1620 075c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1621 0760 7330EFE6 		uxtb	r3, r3	@, tmp142
 1622 0764 00C08DE5 		str	ip, [sp]	@ tmp147,
 1623 0768 7220EFE6 		uxtb	r2, r2	@, data
 1624              	.LVL106:
 1625              		.loc 1 395 13 discriminator 3 view .LVU417
 1626 076c FEFFFFEB 		bl	fprintf		@
 1627              	.LVL107:
 1628              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1629              		.loc 1 391 41 discriminator 3 view .LVU418
 1630 0770 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1631              	@ armwave.c:391:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 391:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1632              		.loc 1 391 9 discriminator 3 view .LVU419
 1633 0774 040053E1 		cmp	r3, r4	@ _13, xx
 1634 0778 F0FFFFCA 		bgt	.L100		@,
 1635 077c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1636              	.LVL108:
 1637              	.L101:
 1638              	@ armwave.c:390:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 390:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1639              		.loc 1 390 55 discriminator 2 view .LVU420
 1640 0780 015085E2 		add	r5, r5, #1	@ yy, yy,
 1641              	.LVL109:
 1642              	@ armwave.c:390:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 390:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1643              		.loc 1 390 5 discriminator 2 view .LVU421
 1644 0784 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1645 0788 E9FFFFBA 		blt	.L99		@,
 1646              	.LVL110:
 1647              	.L98:
 396:armwave.c     ****         }
 397:armwave.c     ****     }
 398:armwave.c     **** 
 399:armwave.c     ****     fclose(fp);
 1648              		.loc 1 399 5 is_stmt 1 view .LVU422
 1649 078c 0700A0E1 		mov	r0, r7	@, fp
 1650              	@ armwave.c:400: }
 400:armwave.c     **** }
 1651              		.loc 1 400 1 is_stmt 0 view .LVU423
 1652 0790 0CD08DE2 		add	sp, sp, #12	@,,
 1653              		.cfi_def_cfa_offset 28
 1654              		@ sp needed	@
 1655 0794 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1656              		.cfi_restore 14
 1657              		.cfi_restore 9
 1658              		.cfi_restore 8
 1659              		.cfi_restore 7
 1660              		.cfi_restore 6
 1661              		.cfi_restore 5
 1662              		.cfi_restore 4
 1663              		.cfi_def_cfa_offset 0
 1664              	.LVL111:
 1665              	@ armwave.c:399:     fclose(fp);
 399:armwave.c     **** }
 1666              		.loc 1 399 5 view .LVU424
 1667 0798 FEFFFFEA 		b	fclose		@
 1668              	.LVL112:
 1669              	.L106:
 399:armwave.c     **** }
 1670              		.loc 1 399 5 view .LVU425
 1671              		.align	2
 1672              	.L105:
 1673 079c A8010000 		.word	.LC14
 1674 07a0 00000000 		.word	g_armwave_state
 1675 07a4 AC010000 		.word	.LC15
 1676 07a8 B0010000 		.word	.LC16
 1677 07ac B8010000 		.word	.LC17
 1678 07b0 C0010000 		.word	.LC18
 1679              		.cfi_endproc
 1680              	.LFE67:
 1682              		.align	2
 1683              		.global	armwave_test_init
 1684              		.syntax unified
 1685              		.arm
 1686              		.fpu vfp
 1688              	armwave_test_init:
 1689              	.LVL113:
 1690              	.LFB68:
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Initialise some test functionry.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 406:armwave.c     **** {
 1691              		.loc 1 406 1 is_stmt 1 view -0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     test_create_gamma();
 1695              		.loc 1 407 5 view .LVU427
 1696              	.LBB12:
 1697              	.LBI12:
  34:armwave.c     **** {
 1698              		.loc 1 34 6 view .LVU428
  34:armwave.c     **** {
 1699              		.loc 1 34 6 is_stmt 0 view .LVU429
 1700              	.LBE12:
 1701              	@ armwave.c:406: {
 406:armwave.c     ****     test_create_gamma();
 1702              		.loc 1 406 1 view .LVU430
 1703 07b4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1704              		.cfi_def_cfa_offset 32
 1705              		.cfi_offset 4, -32
 1706              		.cfi_offset 5, -28
 1707              		.cfi_offset 6, -24
 1708              		.cfi_offset 7, -20
 1709              		.cfi_offset 8, -16
 1710              		.cfi_offset 9, -12
 1711              		.cfi_offset 10, -8
 1712              		.cfi_offset 14, -4
 1713 07b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 1714              		.cfi_def_cfa_offset 56
 1715              		.cfi_offset 80, -56
 1716              		.cfi_offset 81, -52
 1717              		.cfi_offset 82, -48
 1718              		.cfi_offset 83, -44
 1719              		.cfi_offset 84, -40
 1720              		.cfi_offset 85, -36
 1721 07bc C0409FE5 		ldr	r4, .L111+20	@ ivtmp.79,
 1722              	.LBB15:
 1723              	.LBB13:
 1724              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1725              		.loc 1 40 32 view .LVU431
 1726 07c0 2EAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1727              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1728              		.loc 1 40 26 view .LVU432
 1729 07c4 299B9FED 		vldr.64	d9, .L111	@ tmp151,
 1730              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1731              		.loc 1 40 49 view .LVU433
 1732 07c8 2A8B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1733 07cc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1734              	.LBE13:
 1735              	.LBE15:
 1736              	@ armwave.c:406: {
 406:armwave.c     ****     test_create_gamma();
 1737              		.loc 1 406 1 view .LVU434
 1738 07d0 10D04DE2 		sub	sp, sp, #16	@,,
 1739              		.cfi_def_cfa_offset 72
 1740              	@ armwave.c:406: {
 406:armwave.c     ****     test_create_gamma();
 1741              		.loc 1 406 1 view .LVU435
 1742 07d4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1743 07d8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1744 07dc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1745 07e0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1746 07e4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1747 07e8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1748              	.LVL114:
 1749              	.L108:
 1750              	.LBB16:
 1751              	.LBB14:
  40:armwave.c     ****     }
 1752              		.loc 1 40 9 is_stmt 1 view .LVU436
 1753              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1754              		.loc 1 40 32 is_stmt 0 view .LVU437
 1755 07ec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1756              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1757              		.loc 1 40 26 view .LVU438
 1758 07f0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1759              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1760              		.loc 1 40 32 view .LVU439
 1761 07f4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1762 07f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1763 07fc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1764              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1765              		.loc 1 40 26 view .LVU440
 1766 0800 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1767 0804 FEFFFFEB 		bl	pow		@
 1768              	.LVL115:
 1769              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1770              		.loc 1 40 49 view .LVU441
 1771 0808 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1772              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1773              		.loc 1 40 24 view .LVU442
 1774 080c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1775 0810 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1776 0814 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1777              	.LVL116:
 1778              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1779              		.loc 1 39 5 view .LVU443
 1780 0818 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1781 081c F2FFFF1A 		bne	.L108		@,
 1782              	.LVL117:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1783              		.loc 1 39 5 view .LVU444
 1784              	.LBE14:
 1785              	.LBE16:
 408:armwave.c     **** 
 409:armwave.c     ****     // make ch1 yellowish by default
 410:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1786              		.loc 1 410 5 is_stmt 1 view .LVU445
 1787              	.LBB17:
 1788              	.LBI17:
 363:armwave.c     **** {
 1789              		.loc 1 363 6 view .LVU446
 1790              	.LBB18:
 366:armwave.c     ****         case 1:
 1791              		.loc 1 366 5 view .LVU447
 368:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1792              		.loc 1 368 13 view .LVU448
 369:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1793              		.loc 1 369 13 view .LVU449
 1794              	@ armwave.c:368:             g_armwave_state.ch1_color.r = r;
 368:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1795              		.loc 1 368 41 is_stmt 0 view .LVU450
 1796 0820 60C09FE5 		ldr	ip, .L111+24	@ tmp142,
 1797 0824 60409FE5 		ldr	r4, .L111+28	@ tmp143,
 1798              	.LBE18:
 1799              	.LBE17:
 1800              	@ armwave.c:412:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 411:armwave.c     **** 
 412:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1801              		.loc 1 412 5 view .LVU451
 1802 0828 0000A0E3 		mov	r0, #0	@ tmp147,
 1803              	.LBB22:
 1804              	.LBB19:
 1805              	@ armwave.c:370:             g_armwave_state.ch1_color.b = b;
 370:armwave.c     ****             break;
 1806              		.loc 1 370 41 view .LVU452
 1807 082c FAE0A0E3 		mov	lr, #250	@ tmp146,
 1808              	.LBE19:
 1809              	.LBE22:
 1810              	@ armwave.c:412:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1811              		.loc 1 412 5 view .LVU453
 1812 0830 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1813 0834 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1814 0838 00808DE5 		str	r8, [sp]	@ render_width,
 1815 083c 0610A0E1 		mov	r1, r6	@, tmp3
 1816 0840 0720A0E1 		mov	r2, r7	@, nwaves
 1817              	.LBB23:
 1818              	.LBB20:
 1819              	@ armwave.c:368:             g_armwave_state.ch1_color.r = r;
 368:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1820              		.loc 1 368 41 view .LVU454
 1821 0844 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 370:armwave.c     ****             break;
 1822              		.loc 1 370 13 is_stmt 1 view .LVU455
 1823              	.LBE20:
 1824              	.LBE23:
 1825              	@ armwave.c:412:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1826              		.loc 1 412 5 is_stmt 0 view .LVU456
 1827 0848 0630A0E1 		mov	r3, r6	@, wave_size
 1828              	.LBB24:
 1829              	.LBB21:
 1830              	@ armwave.c:370:             g_armwave_state.ch1_color.b = b;
 370:armwave.c     ****             break;
 1831              		.loc 1 370 41 view .LVU457
 1832 084c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 371:armwave.c     ****     }
 1833              		.loc 1 371 13 is_stmt 1 view .LVU458
 1834              	.LVL118:
 371:armwave.c     ****     }
 1835              		.loc 1 371 13 is_stmt 0 view .LVU459
 1836              	.LBE21:
 1837              	.LBE24:
 1838              		.loc 1 412 5 is_stmt 1 view .LVU460
 1839 0850 FEFFFFEB 		bl	armwave_setup_render		@
 1840              	.LVL119:
 413:armwave.c     **** 
 414:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1841              		.loc 1 414 5 view .LVU461
 1842 0854 34109FE5 		ldr	r1, .L111+32	@,
 1843 0858 34009FE5 		ldr	r0, .L111+36	@,
 1844              	@ armwave.c:415: }
 415:armwave.c     **** }
 1845              		.loc 1 415 1 is_stmt 0 view .LVU462
 1846 085c 10D08DE2 		add	sp, sp, #16	@,,
 1847              		.cfi_def_cfa_offset 56
 1848              		@ sp needed	@
 1849 0860 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1850              		.cfi_restore 84
 1851              		.cfi_restore 85
 1852              		.cfi_restore 82
 1853              		.cfi_restore 83
 1854              		.cfi_restore 80
 1855              		.cfi_restore 81
 1856              		.cfi_def_cfa_offset 32
 1857 0864 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1858              		.cfi_restore 14
 1859              		.cfi_restore 10
 1860              		.cfi_restore 9
 1861              		.cfi_restore 8
 1862              		.cfi_restore 7
 1863              		.cfi_restore 6
 1864              		.cfi_restore 5
 1865              		.cfi_restore 4
 1866              		.cfi_def_cfa_offset 0
 1867              	.LVL120:
 1868              	@ armwave.c:414:     printf("armwave version: %s\n", ARMWAVE_VER);
 414:armwave.c     **** }
 1869              		.loc 1 414 5 view .LVU463
 1870 0868 FEFFFFEA 		b	printf		@
 1871              	.LVL121:
 1872              	.L112:
 1873 086c 0000A0E1 		.align	3
 1874              	.L111:
 1875 0870 000000C0 		.word	-1073741824
 1876 0874 CCCCEC3F 		.word	1072483532
 1877 0878 00000000 		.word	0
 1878 087c 00E06F40 		.word	1081073664
 1879 0880 00007F43 		.word	1132396544
 1880 0884 FFFFFFFF 		.word	gamma_table-1
 1881 0888 00000000 		.word	g_armwave_state
 1882 088c F609F406 		.word	116656630
 1883 0890 00000000 		.word	.LC0
 1884 0894 08000000 		.word	.LC1
 1885              		.cfi_endproc
 1886              	.LFE68:
 1888              		.global	__aeabi_idiv
 1889              		.align	2
 1890              		.global	armwave_test_generate
 1891              		.syntax unified
 1892              		.arm
 1893              		.fpu vfp
 1895              	armwave_test_generate:
 1896              	.LFB69:
 416:armwave.c     **** 
 417:armwave.c     **** /*
 418:armwave.c     ****  * Fill buffers with test funtionry.
 419:armwave.c     ****  */
 420:armwave.c     **** void armwave_test_generate()
 421:armwave.c     **** {
 1897              		.loc 1 421 1 is_stmt 1 view -0
 1898              		.cfi_startproc
 1899              		@ args = 0, pretend = 0, frame = 24
 1900              		@ frame_needed = 0, uses_anonymous_args = 0
 422:armwave.c     ****     uint32_t yy;
 1901              		.loc 1 422 5 view .LVU465
 423:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1902              		.loc 1 423 5 view .LVU466
 1903              	@ armwave.c:421: {
 421:armwave.c     ****     uint32_t yy;
 1904              		.loc 1 421 1 is_stmt 0 view .LVU467
 1905 0898 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1906              		.cfi_def_cfa_offset 36
 1907              		.cfi_offset 4, -36
 1908              		.cfi_offset 5, -32
 1909              		.cfi_offset 6, -28
 1910              		.cfi_offset 7, -24
 1911              		.cfi_offset 8, -20
 1912              		.cfi_offset 9, -16
 1913              		.cfi_offset 10, -12
 1914              		.cfi_offset 11, -8
 1915              		.cfi_offset 14, -4
 1916 089c 1CD04DE2 		sub	sp, sp, #28	@,,
 1917              		.cfi_def_cfa_offset 64
 1918              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1919              		.loc 1 423 38 view .LVU468
 1920 08a0 10529FE5 		ldr	r5, .L133	@ tmp319,
 1921              	@ armwave.c:425:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 424:armwave.c     **** 
 425:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1922              		.loc 1 425 5 view .LVU469
 1923 08a4 0010A0E3 		mov	r1, #0	@,
 1924              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 423:armwave.c     **** 
 1925              		.loc 1 423 14 view .LVU470
 1926 08a8 583095E5 		ldr	r3, [r5, #88]	@ xx_rem, g_armwave_state.target_width
 1927              	@ armwave.c:425:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1928              		.loc 1 425 5 view .LVU471
 1929 08ac 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1930 08b0 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1931              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 423:armwave.c     **** 
 1932              		.loc 1 423 14 view .LVU472
 1933 08b4 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 1934              	.LVL122:
 1935              		.loc 1 425 5 is_stmt 1 view .LVU473
 1936 08b8 FEFFFFEB 		bl	memset		@
 1937              	.LVL123:
 426:armwave.c     **** 
 427:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1938              		.loc 1 427 5 view .LVU474
 1939              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1940              		.loc 1 427 69 is_stmt 0 view .LVU475
 1941 08bc 446095E5 		ldr	r6, [r5, #68]	@ _10, g_armwave_state.slice_height
 1942              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1943              		.loc 1 427 52 view .LVU476
 1944 08c0 580095E5 		ldr	r0, [r5, #88]	@, g_armwave_state.target_width
 1945 08c4 0610A0E1 		mov	r1, r6	@, _10
 1946 08c8 FEFFFFEB 		bl	__aeabi_idiv		@
 1947              	.LVL124:
 1948              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1949              		.loc 1 427 5 view .LVU477
 1950 08cc 000050E3 		cmp	r0, #0	@ tmp226
 1951 08d0 7300000A 		beq	.L125		@,
 1952              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 423:armwave.c     **** 
 1953              		.loc 1 423 53 view .LVU478
 1954 08d4 0030A0E3 		mov	r3, #0	@ ypos,
 1955              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1956              		.loc 1 427 12 view .LVU479
 1957 08d8 03B0A0E1 		mov	fp, r3	@ yy, ypos
 1958              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 423:armwave.c     **** 
 1959              		.loc 1 423 53 view .LVU480
 1960 08dc 0C308DE5 		str	r3, [sp, #12]	@ ypos, %sfp
 1961              	.LVL125:
 1962              	.L116:
 428:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 429:armwave.c     **** 
 430:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1963              		.loc 1 430 9 is_stmt 1 discriminator 3 view .LVU481
 1964 08e0 9B0606E0 		mul	r6, fp, r6	@ _7, yy, _10
 1965              	.LBB27:
 1966              	.LBB28:
 1967              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1968              		.loc 1 71 64 is_stmt 0 discriminator 3 view .LVU482
 1969 08e4 243095E5 		ldr	r3, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1970              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1971              		.loc 1 71 40 discriminator 3 view .LVU483
 1972 08e8 044095E5 		ldr	r4, [r5, #4]	@ _29, g_armwave_state.ch1_buffer
 1973              	.LBE28:
 1974              	.LBE27:
 1975              	@ armwave.c:430:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1976              		.loc 1 430 9 discriminator 3 view .LVU484
 1977 08ec 481095E5 		ldr	r1, [r5, #72]	@ _9, g_armwave_state.slice_record_height
 1978              	.LBB31:
 1979              	.LBB29:
 1980              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 1981              		.loc 1 71 64 discriminator 3 view .LVU485
 1982 08f0 930603E0 		mul	r3, r3, r6	@ tmp230, g_armwave_state.cmp_x_bitdepth_scale, _7
 1983              	@ armwave.c:73:     printf("0x%08x 0x%08x %d\n", write_buffer_base, g_armwave_state.ch1_buffer, wri
  73:armwave.c     **** 
 1984              		.loc 1 73 5 discriminator 3 view .LVU486
 1985 08f4 0420A0E1 		mov	r2, r4	@, _29
 1986              	.LBE29:
 1987              	.LBE31:
 1988              	@ armwave.c:430:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1989              		.loc 1 430 9 discriminator 3 view .LVU487
 1990 08f8 04108DE5 		str	r1, [sp, #4]	@ _9, %sfp
 1991              	.LVL126:
 1992              	.LBB32:
 1993              	.LBI27:
  62:armwave.c     **** {
 1994              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU488
 1995              	.LBB30:
  64:armwave.c     ****     uint32_t value, word;
 1996              		.loc 1 64 5 discriminator 3 view .LVU489
  65:armwave.c     ****     uint8_t *wave_base;
 1997              		.loc 1 65 5 discriminator 3 view .LVU490
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1998              		.loc 1 66 5 discriminator 3 view .LVU491
  67:armwave.c     ****     uint8_t *write_buffer;
 1999              		.loc 1 67 5 discriminator 3 view .LVU492
  68:armwave.c     **** 
 2000              		.loc 1 68 5 discriminator 3 view .LVU493
  71:armwave.c     **** 
 2001              		.loc 1 71 5 discriminator 3 view .LVU494
 2002              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 2003              		.loc 1 71 104 is_stmt 0 discriminator 3 view .LVU495
 2004 08fc 2334A0E1 		lsr	r3, r3, #8	@ _32, tmp230,
 2005              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + ((slice_y * g_armwave_state.cm
  71:armwave.c     **** 
 2006              		.loc 1 71 23 discriminator 3 view .LVU496
 2007 0900 034084E0 		add	r4, r4, r3	@ write_buffer_base, _29, _32
 2008              	.LVL127:
  73:armwave.c     **** 
 2009              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU497
 2010 0904 B0019FE5 		ldr	r0, .L133+4	@,
 2011 0908 0410A0E1 		mov	r1, r4	@, write_buffer_base
 2012              	.LVL128:
  73:armwave.c     **** 
 2013              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU498
 2014 090c FEFFFFEB 		bl	printf		@
 2015              	.LVL129:
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2016              		.loc 1 76 5 is_stmt 1 discriminator 3 view .LVU499
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2017              		.loc 1 76 5 is_stmt 0 discriminator 3 view .LVU500
 2018 0910 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2019 0914 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 2020 0918 4F0000DA 		ble	.L123		@,
 2021 091c 04309DE5 		ldr	r3, [sp, #4]	@ _9, %sfp
 2022 0920 000053E3 		cmp	r3, #0	@ _9,
 2023 0924 4C00000A 		beq	.L123		@,
 2024              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2025              		.loc 1 76 11 view .LVU501
 2026 0928 0080A0E3 		mov	r8, #0	@ w,
 2027 092c 043046E2 		sub	r3, r6, #4	@ tmp320, _7,
 2028 0930 10308DE5 		str	r3, [sp, #16]	@ tmp320, %sfp
 2029 0934 14B08DE5 		str	fp, [sp, #20]	@ yy, %sfp
 2030              	.LVL130:
 2031              	.L122:
  77:armwave.c     **** 
 2032              		.loc 1 77 9 is_stmt 1 view .LVU502
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2033              		.loc 1 81 9 view .LVU503
 2034              	@ armwave.c:77:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  77:armwave.c     **** 
 2035              		.loc 1 77 64 is_stmt 0 view .LVU504
 2036 0938 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2037 093c 10209DE5 		ldr	r2, [sp, #16]	@ tmp320, %sfp
 2038 0940 14E095E5 		ldr	lr, [r5, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 2039 0944 932823E0 		mla	r3, r3, r8, r2	@ tmp246, g_armwave_state.wave_stride, w, tmp320
 2040              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2041              		.loc 1 81 16 view .LVU505
 2042 0948 0010A0E3 		mov	r1, #0	@ yy,
 2043 094c 03E08EE0 		add	lr, lr, r3	@ ivtmp.85, g_armwave_state.wave_buffer, tmp246
 2044              	.LVL131:
 2045              	.L121:
  82:armwave.c     **** 
 2046              		.loc 1 82 13 is_stmt 1 view .LVU506
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2047              		.loc 1 93 17 view .LVU507
  94:armwave.c     ****                 word >>= 8;
 2048              		.loc 1 94 17 view .LVU508
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2049              		.loc 1 93 17 view .LVU509
  94:armwave.c     ****                 word >>= 8;
 2050              		.loc 1 94 17 view .LVU510
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2051              		.loc 1 93 17 view .LVU511
  94:armwave.c     ****                 word >>= 8;
 2052              		.loc 1 94 17 view .LVU512
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2053              		.loc 1 93 17 view .LVU513
  94:armwave.c     ****                 word >>= 8;
 2054              		.loc 1 94 17 view .LVU514
 2055              	@ armwave.c:82:             word = *(uint32_t*)(wave_base + yy);
  82:armwave.c     **** 
 2056              		.loc 1 82 18 is_stmt 0 view .LVU515
 2057 0950 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _263, offset: 0B]
 2058              	.LVL132:
  84:armwave.c     ****                 scale_value = word & 0xff;
 2059              		.loc 1 84 13 is_stmt 1 view .LVU516
  85:armwave.c     ****                 
 2060              		.loc 1 85 17 view .LVU517
  88:armwave.c     ****                     continue;
 2061              		.loc 1 88 17 view .LVU518
 2062              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2063              		.loc 1 93 64 is_stmt 0 view .LVU519
 2064 0954 01A081E2 		add	r10, r1, #1	@ tmp273, yy,
 2065              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2066              		.loc 1 88 20 view .LVU520
 2067 0958 FFC013E2 		ands	ip, r3, #255	@ scale_value, word,
 2068 095c 0190A003 		moveq	r9, #1	@ tmp249,
 2069 0960 0090A013 		movne	r9, #0	@ tmp249,
 2070              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2071              		.loc 1 88 19 view .LVU521
 2072 0964 FF005CE3 		cmp	ip, #255	@ scale_value,
 2073 0968 01908903 		orreq	r9, r9, #1	@,, tmp254, tmp249
 2074 096c 000059E3 		cmp	r9, #0	@ tmp254,
 2075              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2076              		.loc 1 93 64 view .LVU522
 2077 0970 027081E2 		add	r7, r1, #2	@ tmp291, yy,
 2078 0974 036081E2 		add	r6, r1, #3	@ tmp308, yy,
 2079              	@ armwave.c:95:                 word >>= 8;
  95:armwave.c     ****             }
 2080              		.loc 1 95 22 view .LVU523
 2081 0978 2304A0E1 		lsr	r0, r3, #8	@ word, word,
 2082 097c 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 2083              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2084              		.loc 1 88 19 view .LVU524
 2085 0980 2C00001A 		bne	.L124		@,
 2086              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2087              		.loc 1 93 64 view .LVU525
 2088 0984 249095E5 		ldr	r9, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2089              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2090              		.loc 1 88 20 view .LVU526
 2091 0988 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 2092 098c 01B0A003 		moveq	fp, #1	@ tmp266,
 2093              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2094              		.loc 1 93 64 view .LVU527
 2095 0990 990109E0 		mul	r9, r9, r1	@ tmp256, g_armwave_state.cmp_x_bitdepth_scale, yy
 2096              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2097              		.loc 1 88 20 view .LVU528
 2098 0994 00B0A013 		movne	fp, #0	@ tmp266,
 2099              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2100              		.loc 1 88 19 view .LVU529
 2101 0998 FF0050E3 		cmp	r0, #255	@ scale_value,
 2102 099c 01B08B03 		orreq	fp, fp, #1	@,, tmp271, tmp266
 2103              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2104              		.loc 1 94 47 view .LVU530
 2105 09a0 29C48CE0 		add	ip, ip, r9, lsr #8	@ tmp259, scale_value, tmp256,
 2106              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2107              		.loc 1 88 19 view .LVU531
 2108 09a4 00005BE3 		cmp	fp, #0	@ tmp271,
 2109              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2110              		.loc 1 94 47 view .LVU532
 2111 09a8 0C90D4E7 		ldrb	r9, [r4, ip]	@ zero_extendqisi2	@ *_95, *_95
 2112 09ac 019089E2 		add	r9, r9, #1	@ tmp262, *_95,
 2113 09b0 0C90C4E7 		strb	r9, [r4, ip]	@ tmp262, *_95
 2114              	.LVL133:
  95:armwave.c     ****             }
 2115              		.loc 1 95 17 is_stmt 1 view .LVU533
  85:armwave.c     ****                 
 2116              		.loc 1 85 17 view .LVU534
  88:armwave.c     ****                     continue;
 2117              		.loc 1 88 17 view .LVU535
 2118              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2119              		.loc 1 88 19 is_stmt 0 view .LVU536
 2120 09b4 1F00001A 		bne	.L124		@,
 2121              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2122              		.loc 1 93 64 view .LVU537
 2123 09b8 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2124              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2125              		.loc 1 88 20 view .LVU538
 2126 09bc FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 2127 09c0 0190A003 		moveq	r9, #1	@ tmp284,
 2128              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2129              		.loc 1 93 64 view .LVU539
 2130 09c4 9C0A0CE0 		mul	ip, ip, r10	@ tmp274, g_armwave_state.cmp_x_bitdepth_scale, tmp273
 2131              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2132              		.loc 1 88 20 view .LVU540
 2133 09c8 0090A013 		movne	r9, #0	@ tmp284,
 2134              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2135              		.loc 1 88 19 view .LVU541
 2136 09cc FF0052E3 		cmp	r2, #255	@ scale_value,
 2137 09d0 01908903 		orreq	r9, r9, #1	@,, tmp289, tmp284
 2138              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2139              		.loc 1 94 47 view .LVU542
 2140 09d4 2C0480E0 		add	r0, r0, ip, lsr #8	@ tmp277, scale_value, tmp274,
 2141              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2142              		.loc 1 88 19 view .LVU543
 2143 09d8 000059E3 		cmp	r9, #0	@ tmp289,
 2144              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2145              		.loc 1 94 47 view .LVU544
 2146 09dc 00C0D4E7 		ldrb	ip, [r4, r0]	@ zero_extendqisi2	@ *_122, *_122
 2147 09e0 01C08CE2 		add	ip, ip, #1	@ tmp280, *_122,
 2148 09e4 00C0C4E7 		strb	ip, [r4, r0]	@ tmp280, *_122
  95:armwave.c     ****             }
 2149              		.loc 1 95 17 is_stmt 1 view .LVU545
 2150              	.LVL134:
  85:armwave.c     ****                 
 2151              		.loc 1 85 17 view .LVU546
  88:armwave.c     ****                     continue;
 2152              		.loc 1 88 17 view .LVU547
 2153              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2154              		.loc 1 88 19 is_stmt 0 view .LVU548
 2155 09e8 1200001A 		bne	.L124		@,
 2156              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2157              		.loc 1 93 64 view .LVU549
 2158 09ec 240095E5 		ldr	r0, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2159              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2160              		.loc 1 88 20 view .LVU550
 2161 09f0 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 2162              	.LVL135:
  88:armwave.c     ****                     continue;
 2163              		.loc 1 88 20 view .LVU551
 2164 09f4 01C0A003 		moveq	ip, #1	@ tmp301,
 2165              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2166              		.loc 1 93 64 view .LVU552
 2167 09f8 900700E0 		mul	r0, r0, r7	@ tmp292, g_armwave_state.cmp_x_bitdepth_scale, tmp291
 2168              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2169              		.loc 1 88 20 view .LVU553
 2170 09fc 00C0A013 		movne	ip, #0	@ tmp301,
 2171              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2172              		.loc 1 88 19 view .LVU554
 2173 0a00 FF0053E3 		cmp	r3, #255	@ word,
 2174 0a04 01C08C03 		orreq	ip, ip, #1	@,, tmp306, tmp301
 2175              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2176              		.loc 1 94 47 view .LVU555
 2177 0a08 202482E0 		add	r2, r2, r0, lsr #8	@ tmp295, scale_value, tmp292,
 2178              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2179              		.loc 1 88 19 view .LVU556
 2180 0a0c 00005CE3 		cmp	ip, #0	@ tmp306,
 2181              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2182              		.loc 1 94 47 view .LVU557
 2183 0a10 0200D4E7 		ldrb	r0, [r4, r2]	@ zero_extendqisi2	@ *_149, *_149
 2184 0a14 010080E2 		add	r0, r0, #1	@ tmp298, *_149,
 2185 0a18 0200C4E7 		strb	r0, [r4, r2]	@ tmp298, *_149
  95:armwave.c     ****             }
 2186              		.loc 1 95 17 is_stmt 1 view .LVU558
 2187              	.LVL136:
  85:armwave.c     ****                 
 2188              		.loc 1 85 17 view .LVU559
  88:armwave.c     ****                     continue;
 2189              		.loc 1 88 17 view .LVU560
 2190              	@ armwave.c:88:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  88:armwave.c     ****                     continue;
 2191              		.loc 1 88 19 is_stmt 0 view .LVU561
 2192 0a1c 0500001A 		bne	.L124		@,
 2193              	@ armwave.c:93:                 write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cm
  93:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 2194              		.loc 1 93 64 view .LVU562
 2195 0a20 242095E5 		ldr	r2, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 2196 0a24 920602E0 		mul	r2, r2, r6	@ tmp309, g_armwave_state.cmp_x_bitdepth_scale, tmp308
 2197              	@ armwave.c:94:                 *(write_buffer + scale_value) += 1;
  94:armwave.c     ****                 word >>= 8;
 2198              		.loc 1 94 47 view .LVU563
 2199 0a28 223483E0 		add	r3, r3, r2, lsr #8	@ tmp312, word, tmp309,
 2200 0a2c 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_176, *_176
 2201 0a30 012082E2 		add	r2, r2, #1	@ tmp315, *_176,
 2202 0a34 0320C4E7 		strb	r2, [r4, r3]	@ tmp315, *_176
  95:armwave.c     ****             }
 2203              		.loc 1 95 17 is_stmt 1 view .LVU564
 2204              	.LVL137:
 2205              	.L124:
 2206              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2207              		.loc 1 81 9 is_stmt 0 view .LVU565
 2208 0a38 04309DE5 		ldr	r3, [sp, #4]	@ _9, %sfp
 2209              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2210              		.loc 1 81 37 view .LVU566
 2211 0a3c 041081E2 		add	r1, r1, #4	@ yy, yy,
 2212              	.LVL138:
 2213              	@ armwave.c:81:         for(yy = 0; yy < height; yy += 4) {
  81:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 2214              		.loc 1 81 9 view .LVU567
 2215 0a40 010053E1 		cmp	r3, r1	@ _9, yy
 2216 0a44 C1FFFF8A 		bhi	.L121		@,
 2217              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2218              		.loc 1 76 5 view .LVU568
 2219 0a48 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 2220              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2221              		.loc 1 76 44 view .LVU569
 2222 0a4c 018088E2 		add	r8, r8, #1	@ w, w,
 2223              	.LVL139:
 2224              	@ armwave.c:76:     for(w = 0; w < g_armwave_state.waves; w++) {
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2225              		.loc 1 76 5 view .LVU570
 2226 0a50 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 2227 0a54 B7FFFFBA 		blt	.L122		@,
 2228 0a58 14B09DE5 		ldr	fp, [sp, #20]	@ yy, %sfp
 2229              	.LVL140:
 2230              	.L123:
  76:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2231              		.loc 1 76 5 view .LVU571
 2232              	.LBE30:
 2233              	.LBE32:
 431:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2234              		.loc 1 431 9 is_stmt 1 view .LVU572
 2235              	@ armwave.c:431:         xx_rem -= g_armwave_state.slice_height;
 2236              		.loc 1 431 34 is_stmt 0 view .LVU573
 2237 0a5c 446095E5 		ldr	r6, [r5, #68]	@ _10, g_armwave_state.slice_height
 2238              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 427:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2239              		.loc 1 427 52 view .LVU574
 2240 0a60 580095E5 		ldr	r0, [r5, #88]	@, g_armwave_state.target_width
 2241 0a64 0610A0E1 		mov	r1, r6	@, _10
 2242 0a68 FEFFFFEB 		bl	__aeabi_idiv		@
 2243              	.LVL141:
 2244              	@ armwave.c:431:         xx_rem -= g_armwave_state.slice_height;
 2245              		.loc 1 431 16 view .LVU575
 2246 0a6c 08309DE5 		ldr	r3, [sp, #8]	@ xx_rem, %sfp
 2247              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 427:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2248              		.loc 1 427 87 view .LVU576
 2249 0a70 01B08BE2 		add	fp, fp, #1	@ yy, yy,
 2250              	@ armwave.c:431:         xx_rem -= g_armwave_state.slice_height;
 2251              		.loc 1 431 16 view .LVU577
 2252 0a74 063043E0 		sub	r3, r3, r6	@ xx_rem, xx_rem, _10
 2253 0a78 08308DE5 		str	r3, [sp, #8]	@ xx_rem, %sfp
 2254              	.LVL142:
 432:armwave.c     ****         ypos += g_armwave_state.slice_height;
 2255              		.loc 1 432 9 is_stmt 1 view .LVU578
 2256              	@ armwave.c:432:         ypos += g_armwave_state.slice_height;
 2257              		.loc 1 432 14 is_stmt 0 view .LVU579
 2258 0a7c 0C309DE5 		ldr	r3, [sp, #12]	@ ypos, %sfp
 2259              	.LVL143:
 2260              		.loc 1 432 14 view .LVU580
 2261 0a80 063083E0 		add	r3, r3, r6	@ ypos, ypos, _10
 2262 0a84 0C308DE5 		str	r3, [sp, #12]	@ ypos, %sfp
 2263              	.LVL144:
 2264              	@ armwave.c:427:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 427:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 2265              		.loc 1 427 5 view .LVU581
 2266 0a88 0B0050E1 		cmp	r0, fp	@, yy
 2267 0a8c 93FFFF8A 		bhi	.L116		@,
 2268 0a90 0300A0E1 		mov	r0, r3	@, ypos
 433:armwave.c     ****     }
 434:armwave.c     **** 
 435:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2269              		.loc 1 435 5 is_stmt 1 view .LVU582
 2270 0a94 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2271              	@ armwave.c:436: }
 436:armwave.c     **** }
 2272              		.loc 1 436 1 is_stmt 0 view .LVU583
 2273 0a98 1CD08DE2 		add	sp, sp, #28	@,,
 2274              		.cfi_remember_state
 2275              		.cfi_def_cfa_offset 36
 2276              		@ sp needed	@
 2277 0a9c F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2278              		.cfi_restore 14
 2279              		.cfi_restore 11
 2280              		.cfi_restore 10
 2281              		.cfi_restore 9
 2282              		.cfi_restore 8
 2283              		.cfi_restore 7
 2284              		.cfi_restore 6
 2285              		.cfi_restore 5
 2286              		.cfi_restore 4
 2287              		.cfi_def_cfa_offset 0
 2288              	.LVL145:
 2289              	@ armwave.c:435:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 435:armwave.c     **** }
 2290              		.loc 1 435 5 view .LVU584
 2291 0aa0 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2292              	.LVL146:
 2293              	.L125:
 2294              		.cfi_restore_state
 2295              	@ armwave.c:423:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 423:armwave.c     **** 
 2296              		.loc 1 423 53 view .LVU585
 2297 0aa4 0C008DE5 		str	r0, [sp, #12]	@ tmp226, %sfp
 435:armwave.c     **** }
 2298              		.loc 1 435 5 is_stmt 1 view .LVU586
 2299 0aa8 08109DE5 		ldr	r1, [sp, #8]	@, %sfp
 2300              	@ armwave.c:436: }
 2301              		.loc 1 436 1 is_stmt 0 view .LVU587
 2302 0aac 1CD08DE2 		add	sp, sp, #28	@,,
 2303              		.cfi_def_cfa_offset 36
 2304              		@ sp needed	@
 2305 0ab0 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2306              		.cfi_restore 14
 2307              		.cfi_restore 11
 2308              		.cfi_restore 10
 2309              		.cfi_restore 9
 2310              		.cfi_restore 8
 2311              		.cfi_restore 7
 2312              		.cfi_restore 6
 2313              		.cfi_restore 5
 2314              		.cfi_restore 4
 2315              		.cfi_def_cfa_offset 0
 2316              	@ armwave.c:435:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 435:armwave.c     **** }
 2317              		.loc 1 435 5 view .LVU588
 2318 0ab4 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2319              	.LVL147:
 2320              	.L134:
 2321              		.align	2
 2322              	.L133:
 2323 0ab8 00000000 		.word	g_armwave_state
 2324 0abc 20000000 		.word	.LC2
 2325              		.cfi_endproc
 2326              	.LFE69:
 2328              		.align	2
 2329              		.global	armwave_test_fill_outbuf
 2330              		.syntax unified
 2331              		.arm
 2332              		.fpu vfp
 2334              	armwave_test_fill_outbuf:
 2335              	.LFB70:
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render image to the local allocated buffer.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_outbuf()
 442:armwave.c     **** {
 2336              		.loc 1 442 1 is_stmt 1 view -0
 2337              		.cfi_startproc
 2338              		@ args = 0, pretend = 0, frame = 8
 2339              		@ frame_needed = 0, uses_anonymous_args = 0
 443:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2340              		.loc 1 443 5 view .LVU590
 2341 0ac0 50C19FE5 		ldr	ip, .L156	@ tmp204,
 2342              	@ armwave.c:442: {
 442:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2343              		.loc 1 442 1 is_stmt 0 view .LVU591
 2344 0ac4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2345              		.cfi_def_cfa_offset 36
 2346              		.cfi_offset 4, -36
 2347              		.cfi_offset 5, -32
 2348              		.cfi_offset 6, -28
 2349              		.cfi_offset 7, -24
 2350              		.cfi_offset 8, -20
 2351              		.cfi_offset 9, -16
 2352              		.cfi_offset 10, -12
 2353              		.cfi_offset 11, -8
 2354              		.cfi_offset 14, -4
 2355 0ac8 0CD04DE2 		sub	sp, sp, #12	@,,
 2356              		.cfi_def_cfa_offset 48
 2357              	@ armwave.c:443:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2358              		.loc 1 443 5 view .LVU592
 2359 0acc 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 2360              	.LVL148:
 2361              	.LBB35:
 2362              	.LBI35:
 160:armwave.c     **** {
 2363              		.loc 1 160 6 is_stmt 1 view .LVU593
 2364              	.LBB36:
 162:armwave.c     ****     // uint32_t ysub;
 2365              		.loc 1 162 5 view .LVU594
 164:armwave.c     ****     uint8_t r, g, b, value; 
 2366              		.loc 1 164 5 view .LVU595
 165:armwave.c     ****     // uint8_t row;
 2367              		.loc 1 165 5 view .LVU596
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2368              		.loc 1 167 5 view .LVU597
 2369              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2370              		.loc 1 167 15 is_stmt 0 view .LVU598
 2371 0ad0 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2372              	.LVL149:
 168:armwave.c     ****     uint32_t offset;
 2373              		.loc 1 168 5 is_stmt 1 view .LVU599
 169:armwave.c     **** 
 2374              		.loc 1 169 5 view .LVU600
 171:armwave.c     **** 
 2375              		.loc 1 171 5 view .LVU601
 2376 0ad4 000058E3 		cmp	r8, #0	@ _1,
 2377 0ad8 4900000A 		beq	.L154		@,
 173:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2378              		.loc 1 173 5 view .LVU602
 2379              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2380              		.loc 1 173 10 is_stmt 0 view .LVU603
 2381 0adc 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2382 0ae0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2383              	.LVL150:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2384              		.loc 1 176 5 is_stmt 1 view .LVU604
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2385              		.loc 1 176 5 is_stmt 0 view .LVU605
 2386 0ae4 000057E3 		cmp	r7, #0	@ npix,
 2387 0ae8 0A0000DA 		ble	.L135		@,
 2388              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2389              		.loc 1 188 52 view .LVU606
 2390 0aec FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 2391              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2392              		.loc 1 189 52 view .LVU607
 2393 0af0 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 2394              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2395              		.loc 1 190 52 view .LVU608
 2396 0af4 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2397              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2398              		.loc 1 212 57 view .LVU609
 2399 0af8 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2400              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2401              		.loc 1 176 11 view .LVU610
 2402 0afc 00E0A0E3 		mov	lr, #0	@ n,
 2403              	.LVL151:
 2404              	.L142:
 180:armwave.c     **** 
 2405              		.loc 1 180 9 is_stmt 1 view .LVU611
 2406              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2407              		.loc 1 180 19 is_stmt 0 view .LVU612
 2408 0b00 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2409              	.LVL152:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2410              		.loc 1 182 9 is_stmt 1 view .LVU613
 2411              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2412              		.loc 1 182 11 is_stmt 0 view .LVU614
 2413 0b04 000050E3 		cmp	r0, #0	@ wave_word,
 2414 0b08 0400001A 		bne	.L151		@,
 2415 0b0c 04E08EE2 		add	lr, lr, #4	@ n, n,
 2416              	.L138:
 2417              	.LVL153:
 2418              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2419              		.loc 1 176 5 view .LVU615
 2420 0b10 0E0057E1 		cmp	r7, lr	@ npix, n
 2421 0b14 F9FFFFCA 		bgt	.L142		@,
 2422              	.LVL154:
 2423              	.L135:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2424              		.loc 1 176 5 view .LVU616
 2425              	.LBE36:
 2426              	.LBE35:
 2427              	@ armwave.c:444: }
 444:armwave.c     **** }
 2428              		.loc 1 444 1 view .LVU617
 2429 0b18 0CD08DE2 		add	sp, sp, #12	@,,
 2430              		.cfi_remember_state
 2431              		.cfi_def_cfa_offset 36
 2432              		@ sp needed	@
 2433 0b1c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2434              	.LVL155:
 2435              	.L151:
 2436              		.cfi_restore_state
 2437              	.LBB38:
 2438              	.LBB37:
 2439              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2440              		.loc 1 187 19 view .LVU618
 2441 0b20 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2442              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2443              		.loc 1 182 11 view .LVU619
 2444 0b24 0E60A0E1 		mov	r6, lr	@ ivtmp.102, n
 2445              	.LVL156:
 184:armwave.c     ****                 wave_word >>= 8;
 2446              		.loc 1 184 17 is_stmt 1 view .LVU620
 185:armwave.c     **** 
 2447              		.loc 1 185 17 view .LVU621
 2448              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2449              		.loc 1 185 27 is_stmt 0 view .LVU622
 2450 0b28 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2451              	.LVL157:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2452              		.loc 1 187 17 is_stmt 1 view .LVU623
 2453 0b2c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.102,
 2454              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2455              		.loc 1 187 19 is_stmt 0 view .LVU624
 2456 0b30 0500001A 		bne	.L155		@,
 2457              	.LVL158:
 2458              	.L139:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2459              		.loc 1 187 19 view .LVU625
 2460 0b34 016086E2 		add	r6, r6, #1	@ ivtmp.102, ivtmp.102,
 2461              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2462              		.loc 1 183 13 view .LVU626
 2463 0b38 06005EE1 		cmp	lr, r6	@ n, ivtmp.102
 2464 0b3c F3FFFF0A 		beq	.L138		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2465              		.loc 1 184 17 is_stmt 1 view .LVU627
 2466              	.LVL159:
 185:armwave.c     **** 
 2467              		.loc 1 185 17 view .LVU628
 2468              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2469              		.loc 1 187 19 is_stmt 0 view .LVU629
 2470 0b40 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2471              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2472              		.loc 1 185 27 view .LVU630
 2473 0b44 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2474              	.LVL160:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2475              		.loc 1 187 17 is_stmt 1 view .LVU631
 2476              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2477              		.loc 1 187 19 is_stmt 0 view .LVU632
 2478 0b48 F9FFFF0A 		beq	.L139		@,
 2479              	.L155:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2480              		.loc 1 188 21 is_stmt 1 view .LVU633
 2481              	.LVL161:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2482              		.loc 1 189 21 view .LVU634
 190:armwave.c     **** 
 2483              		.loc 1 190 21 view .LVU635
 192:armwave.c     ****                     g = MIN(gg, 255);
 2484              		.loc 1 192 21 view .LVU636
 193:armwave.c     ****                     b = MIN(bb, 255);
 2485              		.loc 1 193 21 view .LVU637
 194:armwave.c     **** 
 2486              		.loc 1 194 21 view .LVU638
 197:armwave.c     **** 
 2487              		.loc 1 197 21 view .LVU639
 2488              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2489              		.loc 1 212 32 is_stmt 0 view .LVU640
 2490 0b4c 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.102
 2491              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2492              		.loc 1 213 41 view .LVU641
 2493 0b50 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2494              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2495              		.loc 1 212 40 view .LVU642
 2496 0b54 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2497              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2498              		.loc 1 213 41 view .LVU643
 2499 0b58 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2500              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2501              		.loc 1 190 55 view .LVU644
 2502 0b5c 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2503              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2504              		.loc 1 212 40 view .LVU645
 2505 0b60 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2506              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2507              		.loc 1 213 46 view .LVU646
 2508 0b64 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2509              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2510              		.loc 1 189 55 view .LVU647
 2511 0b68 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2512              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2513              		.loc 1 190 24 view .LVU648
 2514 0b6c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2515              	.LVL162:
 2516              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2517              		.loc 1 194 25 view .LVU649
 2518 0b70 FF0053E3 		cmp	r3, #255	@ bb,
 2519              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2520              		.loc 1 189 24 view .LVU650
 2521 0b74 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2522              	.LVL163:
 2523              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2524              		.loc 1 194 25 view .LVU651
 2525 0b78 FF30A0A3 		movge	r3, #255	@ bb,
 2526              	.LVL164:
 2527              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2528              		.loc 1 212 40 view .LVU652
 2529 0b7c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2530              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2531              		.loc 1 213 46 view .LVU653
 2532 0b80 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2533              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 2534              		.loc 1 193 25 view .LVU654
 2535 0b84 FF0052E3 		cmp	r2, #255	@ gg,
 2536 0b88 FF20A0A3 		movge	r2, #255	@ gg,
 2537              	.LVL165:
 2538              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2539              		.loc 1 188 55 view .LVU655
 2540 0b8c 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2541              	.LVL166:
 2542              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2543              		.loc 1 197 56 view .LVU656
 2544 0b90 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2545              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2546              		.loc 1 197 44 view .LVU657
 2547 0b94 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2548              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2549              		.loc 1 212 24 view .LVU658
 2550 0b98 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2551              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2552              		.loc 1 188 24 view .LVU659
 2553 0b9c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2554              	.LVL167:
 2555              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2556              		.loc 1 197 56 view .LVU660
 2557 0ba0 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2558              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2559              		.loc 1 197 44 view .LVU661
 2560 0ba4 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2561              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2562              		.loc 1 192 25 view .LVU662
 2563 0ba8 FF0051E3 		cmp	r1, #255	@ rr,
 2564              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2565              		.loc 1 197 51 view .LVU663
 2566 0bac 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2567              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2568              		.loc 1 192 25 view .LVU664
 2569 0bb0 FF10A0A3 		movge	r1, #255	@ rr,
 2570              	.LVL168:
 2571              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2572              		.loc 1 212 24 view .LVU665
 2573 0bb4 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2574              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2575              		.loc 1 213 24 view .LVU666
 2576 0bb8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2577              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2578              		.loc 1 197 62 view .LVU667
 2579 0bbc 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2580 0bc0 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2581              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2582              		.loc 1 197 26 view .LVU668
 2583 0bc4 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2584              	.LVL169:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2585              		.loc 1 211 21 is_stmt 1 view .LVU669
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2586              		.loc 1 212 21 view .LVU670
 213:armwave.c     ****                     xx = (nsub >> 8);
 2587              		.loc 1 213 21 view .LVU671
 214:armwave.c     **** 
 2588              		.loc 1 214 21 view .LVU672
 2589              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 2590              		.loc 1 214 32 is_stmt 0 view .LVU673
 2591 0bc8 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.102,
 2592              	.LVL170:
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2593              		.loc 1 216 21 is_stmt 1 view .LVU674
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2594              		.loc 1 216 21 is_stmt 0 view .LVU675
 2595 0bcc 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2596              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2597              		.loc 1 213 24 view .LVU676
 2598 0bd0 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2599              	.LVL171:
 2600              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2601              		.loc 1 216 21 view .LVU677
 2602 0bd4 020054E1 		cmp	r4, r2	@ yy, ye
 2603 0bd8 D5FFFF2A 		bcs	.L139		@,
 2604 0bdc 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2605              	.LVL172:
 2606              	.L140:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2607              		.loc 1 217 25 is_stmt 1 view .LVU678
 218:armwave.c     ****                     }
 2608              		.loc 1 218 25 view .LVU679
 2609              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2610              		.loc 1 217 43 is_stmt 0 view .LVU680
 2611 0be0 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2612              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2613              		.loc 1 216 21 view .LVU681
 2614 0be4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2615              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 2616              		.loc 1 218 43 view .LVU682
 2617 0be8 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2618              	.LVL173:
 2619              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2620              		.loc 1 216 42 view .LVU683
 2621 0bec 014084E2 		add	r4, r4, #1	@ yy, yy,
 2622              	.LVL174:
 2623              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2624              		.loc 1 216 21 view .LVU684
 2625 0bf0 040050E1 		cmp	r0, r4	@ ye, yy
 2626              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 2627              		.loc 1 218 53 view .LVU685
 2628 0bf4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2629              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2630              		.loc 1 216 21 view .LVU686
 2631 0bf8 F8FFFF1A 		bne	.L140		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2632              		.loc 1 216 21 view .LVU687
 2633 0bfc 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2634 0c00 CBFFFFEA 		b	.L139		@
 2635              	.LVL175:
 2636              	.L154:
 171:armwave.c     **** 
 2637              		.loc 1 171 5 is_stmt 1 view .LVU688
 2638 0c04 10309FE5 		ldr	r3, .L156+4	@,
 2639 0c08 AB20A0E3 		mov	r2, #171	@,
 2640 0c0c 0C109FE5 		ldr	r1, .L156+8	@,
 2641 0c10 0C009FE5 		ldr	r0, .L156+12	@,
 2642 0c14 FEFFFFEB 		bl	__assert_fail		@
 2643              	.LVL176:
 2644              	.L157:
 2645              		.align	2
 2646              	.L156:
 2647 0c18 00000000 		.word	g_armwave_state
 2648 0c1c 00000000 		.word	.LANCHOR0
 2649 0c20 34000000 		.word	.LC3
 2650 0c24 40000000 		.word	.LC4
 2651              	.LBE37:
 2652              	.LBE38:
 2653              		.cfi_endproc
 2654              	.LFE70:
 2656              		.align	2
 2657              		.global	armwave_test_dump_buffer_to_ppm
 2658              		.syntax unified
 2659              		.arm
 2660              		.fpu vfp
 2662              	armwave_test_dump_buffer_to_ppm:
 2663              	.LVL177:
 2664              	.LFB71:
 445:armwave.c     **** 
 446:armwave.c     **** /*
 447:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 448:armwave.c     ****  */
 449:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 450:armwave.c     **** {
 2665              		.loc 1 450 1 view -0
 2666              		.cfi_startproc
 2667              		@ args = 0, pretend = 0, frame = 0
 2668              		@ frame_needed = 0, uses_anonymous_args = 0
 2669              		@ link register save eliminated.
 451:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2670              		.loc 1 451 5 view .LVU690
 2671 0c28 08309FE5 		ldr	r3, .L159	@ tmp112,
 2672 0c2c 0010A0E1 		mov	r1, r0	@, fn
 2673 0c30 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2674              	.LVL178:
 2675              		.loc 1 451 5 is_stmt 0 view .LVU691
 2676 0c34 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2677              	.LVL179:
 2678              	.L160:
 2679              		.loc 1 451 5 view .LVU692
 2680              		.align	2
 2681              	.L159:
 2682 0c38 00000000 		.word	g_armwave_state
 2683              		.cfi_endproc
 2684              	.LFE71:
 2686              		.align	2
 2687              		.global	armwave_test_fill_gdkbuf
 2688              		.syntax unified
 2689              		.arm
 2690              		.fpu vfp
 2692              	armwave_test_fill_gdkbuf:
 2693              	.LVL180:
 2694              	.LFB72:
 452:armwave.c     **** }
 453:armwave.c     **** 
 454:armwave.c     **** /*
 455:armwave.c     ****  * Render GDK buffer with test funtionry.
 456:armwave.c     ****  */
 457:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 458:armwave.c     **** {
 2695              		.loc 1 458 1 is_stmt 1 view -0
 2696              		.cfi_startproc
 2697              		@ args = 0, pretend = 0, frame = 8
 2698              		@ frame_needed = 0, uses_anonymous_args = 0
 459:armwave.c     ****     //PyObject *mv;
 460:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 461:armwave.c     **** 
 462:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 463:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2699              		.loc 1 463 5 view .LVU694
 2700              	@ armwave.c:463:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2701              		.loc 1 463 11 is_stmt 0 view .LVU695
 2702 0c3c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2703              	@ armwave.c:458: {
 458:armwave.c     ****     //PyObject *mv;
 2704              		.loc 1 458 1 view .LVU696
 2705 0c40 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2706              		.cfi_def_cfa_offset 36
 2707              		.cfi_offset 4, -36
 2708              		.cfi_offset 5, -32
 2709              		.cfi_offset 6, -28
 2710              		.cfi_offset 7, -24
 2711              		.cfi_offset 8, -20
 2712              		.cfi_offset 9, -16
 2713              		.cfi_offset 10, -12
 2714              		.cfi_offset 11, -8
 2715              		.cfi_offset 14, -4
 2716 0c44 0CD04DE2 		sub	sp, sp, #12	@,,
 2717              		.cfi_def_cfa_offset 48
 2718              	.LBB41:
 2719              	.LBB42:
 2720              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2721              		.loc 1 167 15 view .LVU697
 2722 0c48 48519FE5 		ldr	r5, .L182	@ tmp206,
 2723              	.LBE42:
 2724              	.LBE41:
 2725              	@ armwave.c:463:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2726              		.loc 1 463 11 view .LVU698
 2727 0c4c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2728              	.LVL181:
 464:armwave.c     ****     
 465:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 466:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2729              		.loc 1 466 5 is_stmt 1 view .LVU699
 2730              	.LBB45:
 2731              	.LBI41:
 160:armwave.c     **** {
 2732              		.loc 1 160 6 view .LVU700
 2733              	.LBB43:
 162:armwave.c     ****     // uint32_t ysub;
 2734              		.loc 1 162 5 view .LVU701
 164:armwave.c     ****     uint8_t r, g, b, value; 
 2735              		.loc 1 164 5 view .LVU702
 165:armwave.c     ****     // uint8_t row;
 2736              		.loc 1 165 5 view .LVU703
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2737              		.loc 1 167 5 view .LVU704
 2738              	@ armwave.c:171:     assert(out_buffer != NULL);
 171:armwave.c     **** 
 2739              		.loc 1 171 5 is_stmt 0 view .LVU705
 2740 0c50 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2741              	@ armwave.c:167:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 167:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2742              		.loc 1 167 15 view .LVU706
 2743 0c54 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2744              	.LVL182:
 168:armwave.c     ****     uint32_t offset;
 2745              		.loc 1 168 5 is_stmt 1 view .LVU707
 169:armwave.c     **** 
 2746              		.loc 1 169 5 view .LVU708
 171:armwave.c     **** 
 2747              		.loc 1 171 5 view .LVU709
 2748 0c58 4900000A 		beq	.L180		@,
 173:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2749              		.loc 1 173 5 view .LVU710
 2750              	@ armwave.c:173:     npix = g_armwave_state.target_width * 256; 
 173:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2751              		.loc 1 173 10 is_stmt 0 view .LVU711
 2752 0c5c 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2753 0c60 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2754              	.LVL183:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2755              		.loc 1 176 5 is_stmt 1 view .LVU712
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2756              		.loc 1 176 5 is_stmt 0 view .LVU713
 2757 0c64 000057E3 		cmp	r7, #0	@ npix,
 2758 0c68 0A0000DA 		ble	.L161		@,
 2759              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2760              		.loc 1 188 52 view .LVU714
 2761 0c6c FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2762              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2763              		.loc 1 189 52 view .LVU715
 2764 0c70 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2765              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2766              		.loc 1 190 52 view .LVU716
 2767 0c74 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2768              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2769              		.loc 1 212 57 view .LVU717
 2770 0c78 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2771              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2772              		.loc 1 176 11 view .LVU718
 2773 0c7c 00C0A0E3 		mov	ip, #0	@ n,
 2774              	.LVL184:
 2775              	.L168:
 180:armwave.c     **** 
 2776              		.loc 1 180 9 is_stmt 1 view .LVU719
 2777              	@ armwave.c:180:         wave_word = *base_32ptr++;
 180:armwave.c     **** 
 2778              		.loc 1 180 19 is_stmt 0 view .LVU720
 2779 0c80 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2780              	.LVL185:
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2781              		.loc 1 182 9 is_stmt 1 view .LVU721
 2782              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2783              		.loc 1 182 11 is_stmt 0 view .LVU722
 2784 0c84 000050E3 		cmp	r0, #0	@ wave_word,
 2785 0c88 0400001A 		bne	.L177		@,
 2786 0c8c 04C08CE2 		add	ip, ip, #4	@ n, n,
 2787              	.L164:
 2788              	.LVL186:
 2789              	@ armwave.c:176:     for(n = 0; n < npix; n += 4) {
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2790              		.loc 1 176 5 view .LVU723
 2791 0c90 0C0057E1 		cmp	r7, ip	@ npix, n
 2792 0c94 F9FFFFCA 		bgt	.L168		@,
 2793              	.LVL187:
 2794              	.L161:
 176:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2795              		.loc 1 176 5 view .LVU724
 2796              	.LBE43:
 2797              	.LBE45:
 2798              	@ armwave.c:467: }
 467:armwave.c     **** }
 2799              		.loc 1 467 1 view .LVU725
 2800 0c98 0CD08DE2 		add	sp, sp, #12	@,,
 2801              		.cfi_remember_state
 2802              		.cfi_def_cfa_offset 36
 2803              		@ sp needed	@
 2804 0c9c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2805              	.LVL188:
 2806              	.L177:
 2807              		.cfi_restore_state
 2808              	.LBB46:
 2809              	.LBB44:
 2810              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2811              		.loc 1 187 19 view .LVU726
 2812 0ca0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2813              	@ armwave.c:182:         if(COND_UNLIKELY(wave_word != 0)) {
 182:armwave.c     ****             for(w = 0; w < 4; w++) {
 2814              		.loc 1 182 11 view .LVU727
 2815 0ca4 0C60A0E1 		mov	r6, ip	@ ivtmp.118, n
 2816              	.LVL189:
 184:armwave.c     ****                 wave_word >>= 8;
 2817              		.loc 1 184 17 is_stmt 1 view .LVU728
 185:armwave.c     **** 
 2818              		.loc 1 185 17 view .LVU729
 2819              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2820              		.loc 1 185 27 is_stmt 0 view .LVU730
 2821 0ca8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2822              	.LVL190:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2823              		.loc 1 187 17 is_stmt 1 view .LVU731
 2824 0cac 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.118,
 2825              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2826              		.loc 1 187 19 is_stmt 0 view .LVU732
 2827 0cb0 0500001A 		bne	.L181		@,
 2828              	.LVL191:
 2829              	.L165:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2830              		.loc 1 187 19 view .LVU733
 2831 0cb4 016086E2 		add	r6, r6, #1	@ ivtmp.118, ivtmp.118,
 2832              	@ armwave.c:183:             for(w = 0; w < 4; w++) {
 183:armwave.c     ****                 value = wave_word & 0xff;
 2833              		.loc 1 183 13 view .LVU734
 2834 0cb8 06005CE1 		cmp	ip, r6	@ n, ivtmp.118
 2835 0cbc F3FFFF0A 		beq	.L164		@,
 184:armwave.c     ****                 wave_word >>= 8;
 2836              		.loc 1 184 17 is_stmt 1 view .LVU735
 2837              	.LVL192:
 185:armwave.c     **** 
 2838              		.loc 1 185 17 view .LVU736
 2839              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2840              		.loc 1 187 19 is_stmt 0 view .LVU737
 2841 0cc0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2842              	@ armwave.c:185:                 wave_word >>= 8;
 185:armwave.c     **** 
 2843              		.loc 1 185 27 view .LVU738
 2844 0cc4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2845              	.LVL193:
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2846              		.loc 1 187 17 is_stmt 1 view .LVU739
 2847              	@ armwave.c:187:                 if(value != 0) {
 187:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2848              		.loc 1 187 19 is_stmt 0 view .LVU740
 2849 0cc8 F9FFFF0A 		beq	.L165		@,
 2850              	.L181:
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2851              		.loc 1 188 21 is_stmt 1 view .LVU741
 2852              	.LVL194:
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2853              		.loc 1 189 21 view .LVU742
 190:armwave.c     **** 
 2854              		.loc 1 190 21 view .LVU743
 192:armwave.c     ****                     g = MIN(gg, 255);
 2855              		.loc 1 192 21 view .LVU744
 193:armwave.c     ****                     b = MIN(bb, 255);
 2856              		.loc 1 193 21 view .LVU745
 194:armwave.c     **** 
 2857              		.loc 1 194 21 view .LVU746
 197:armwave.c     **** 
 2858              		.loc 1 197 21 view .LVU747
 2859              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2860              		.loc 1 212 32 is_stmt 0 view .LVU748
 2861 0ccc 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.118
 2862              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2863              		.loc 1 213 41 view .LVU749
 2864 0cd0 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2865              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2866              		.loc 1 212 40 view .LVU750
 2867 0cd4 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2868              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2869              		.loc 1 213 41 view .LVU751
 2870 0cd8 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2871              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2872              		.loc 1 190 55 view .LVU752
 2873 0cdc 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2874              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2875              		.loc 1 212 40 view .LVU753
 2876 0ce0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2877              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2878              		.loc 1 213 46 view .LVU754
 2879 0ce4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2880              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2881              		.loc 1 189 55 view .LVU755
 2882 0ce8 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2883              	@ armwave.c:190:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 190:armwave.c     **** 
 2884              		.loc 1 190 24 view .LVU756
 2885 0cec 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2886              	.LVL195:
 2887              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2888              		.loc 1 194 25 view .LVU757
 2889 0cf0 FF0053E3 		cmp	r3, #255	@ bb,
 2890              	@ armwave.c:189:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 189:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2891              		.loc 1 189 24 view .LVU758
 2892 0cf4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2893              	.LVL196:
 2894              	@ armwave.c:194:                     b = MIN(bb, 255);
 194:armwave.c     **** 
 2895              		.loc 1 194 25 view .LVU759
 2896 0cf8 FF30A0A3 		movge	r3, #255	@ bb,
 2897              	.LVL197:
 2898              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2899              		.loc 1 212 40 view .LVU760
 2900 0cfc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2901              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2902              		.loc 1 213 46 view .LVU761
 2903 0d00 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2904              	@ armwave.c:193:                     g = MIN(gg, 255);
 193:armwave.c     ****                     b = MIN(bb, 255);
 2905              		.loc 1 193 25 view .LVU762
 2906 0d04 FF0052E3 		cmp	r2, #255	@ gg,
 2907 0d08 FF20A0A3 		movge	r2, #255	@ gg,
 2908              	.LVL198:
 2909              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2910              		.loc 1 188 55 view .LVU763
 2911 0d0c 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2912              	.LVL199:
 2913              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2914              		.loc 1 197 56 view .LVU764
 2915 0d10 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2916              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2917              		.loc 1 197 44 view .LVU765
 2918 0d14 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2919              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2920              		.loc 1 212 24 view .LVU766
 2921 0d18 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2922              	@ armwave.c:188:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 188:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2923              		.loc 1 188 24 view .LVU767
 2924 0d1c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2925              	.LVL200:
 2926              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2927              		.loc 1 197 56 view .LVU768
 2928 0d20 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2929              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2930              		.loc 1 197 44 view .LVU769
 2931 0d24 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2932              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2933              		.loc 1 192 25 view .LVU770
 2934 0d28 FF0051E3 		cmp	r1, #255	@ rr,
 2935              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2936              		.loc 1 197 51 view .LVU771
 2937 0d2c 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2938              	@ armwave.c:192:                     r = MIN(rr, 255);
 192:armwave.c     ****                     g = MIN(gg, 255);
 2939              		.loc 1 192 25 view .LVU772
 2940 0d30 FF10A0A3 		movge	r1, #255	@ rr,
 2941              	.LVL201:
 2942              	@ armwave.c:212:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2943              		.loc 1 212 24 view .LVU773
 2944 0d34 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2945              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2946              		.loc 1 213 24 view .LVU774
 2947 0d38 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2948              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2949              		.loc 1 197 62 view .LVU775
 2950 0d3c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2951 0d40 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2952              	@ armwave.c:197:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 197:armwave.c     **** 
 2953              		.loc 1 197 26 view .LVU776
 2954 0d44 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2955              	.LVL202:
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2956              		.loc 1 211 21 is_stmt 1 view .LVU777
 212:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2957              		.loc 1 212 21 view .LVU778
 213:armwave.c     ****                     xx = (nsub >> 8);
 2958              		.loc 1 213 21 view .LVU779
 214:armwave.c     **** 
 2959              		.loc 1 214 21 view .LVU780
 2960              	@ armwave.c:214:                     xx = (nsub >> 8);
 214:armwave.c     **** 
 2961              		.loc 1 214 32 is_stmt 0 view .LVU781
 2962 0d48 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.118,
 2963              	.LVL203:
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2964              		.loc 1 216 21 is_stmt 1 view .LVU782
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2965              		.loc 1 216 21 is_stmt 0 view .LVU783
 2966 0d4c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2967              	@ armwave.c:213:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 213:armwave.c     ****                     xx = (nsub >> 8);
 2968              		.loc 1 213 24 view .LVU784
 2969 0d50 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2970              	.LVL204:
 2971              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2972              		.loc 1 216 21 view .LVU785
 2973 0d54 02005EE1 		cmp	lr, r2	@ yy, ye
 2974 0d58 D5FFFF2A 		bcs	.L165		@,
 2975 0d5c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2976              	.LVL205:
 2977              	.L166:
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2978              		.loc 1 217 25 is_stmt 1 view .LVU786
 218:armwave.c     ****                     }
 2979              		.loc 1 218 25 view .LVU787
 2980              	@ armwave.c:217:                         offset = (xx + (y * g_armwave_state.target_width)); 
 217:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2981              		.loc 1 217 43 is_stmt 0 view .LVU788
 2982 0d60 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2983              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2984              		.loc 1 216 21 view .LVU789
 2985 0d64 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2986              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 2987              		.loc 1 218 43 view .LVU790
 2988 0d68 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2989              	.LVL206:
 2990              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2991              		.loc 1 216 42 view .LVU791
 2992 0d6c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2993              	.LVL207:
 2994              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2995              		.loc 1 216 21 view .LVU792
 2996 0d70 0E0050E1 		cmp	r0, lr	@ ye, yy
 2997              	@ armwave.c:218:                         *(out_buffer_base + offset) = word;
 218:armwave.c     ****                     }
 2998              		.loc 1 218 53 view .LVU793
 2999 0d74 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 3000              	@ armwave.c:216:                     for(y = yy; y < ye; y++) {
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3001              		.loc 1 216 21 view .LVU794
 3002 0d78 F8FFFF1A 		bne	.L166		@,
 216:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 3003              		.loc 1 216 21 view .LVU795
 3004 0d7c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 3005 0d80 CBFFFFEA 		b	.L165		@
 3006              	.LVL208:
 3007              	.L180:
 171:armwave.c     **** 
 3008              		.loc 1 171 5 is_stmt 1 view .LVU796
 3009 0d84 10309FE5 		ldr	r3, .L182+4	@,
 3010 0d88 AB20A0E3 		mov	r2, #171	@,
 3011 0d8c 0C109FE5 		ldr	r1, .L182+8	@,
 3012 0d90 0C009FE5 		ldr	r0, .L182+12	@,
 3013              	.LVL209:
 171:armwave.c     **** 
 3014              		.loc 1 171 5 is_stmt 0 view .LVU797
 3015 0d94 FEFFFFEB 		bl	__assert_fail		@
 3016              	.LVL210:
 3017              	.L183:
 3018              		.align	2
 3019              	.L182:
 3020 0d98 00000000 		.word	g_armwave_state
 3021 0d9c 00000000 		.word	.LANCHOR0
 3022 0da0 34000000 		.word	.LC3
 3023 0da4 40000000 		.word	.LC4
 3024              	.LBE44:
 3025              	.LBE46:
 3026              		.cfi_endproc
 3027              	.LFE72:
 3029              		.align	2
 3030              		.global	armwave_test_buffer_alloc
 3031              		.syntax unified
 3032              		.arm
 3033              		.fpu vfp
 3035              	armwave_test_buffer_alloc:
 3036              	.LVL211:
 3037              	.LFB73:
 468:armwave.c     **** 
 469:armwave.c     **** /*
 470:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 471:armwave.c     ****  */
 472:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 473:armwave.c     **** {
 3038              		.loc 1 473 1 is_stmt 1 view -0
 3039              		.cfi_startproc
 3040              		@ args = 0, pretend = 0, frame = 0
 3041              		@ frame_needed = 0, uses_anonymous_args = 0
 474:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3042              		.loc 1 474 5 view .LVU799
 3043              	@ armwave.c:473: {
 473:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3044              		.loc 1 473 1 is_stmt 0 view .LVU800
 3045 0da8 70402DE9 		push	{r4, r5, r6, lr}	@
 3046              		.cfi_def_cfa_offset 16
 3047              		.cfi_offset 4, -16
 3048              		.cfi_offset 5, -12
 3049              		.cfi_offset 6, -8
 3050              		.cfi_offset 14, -4
 3051              	@ armwave.c:473: {
 473:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3052              		.loc 1 473 1 view .LVU801
 3053 0dac 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3054              	@ armwave.c:474:     if(g_armwave_state.test_wave_buffer != NULL) {
 3055              		.loc 1 474 23 view .LVU802
 3056 0db0 44409FE5 		ldr	r4, .L191	@ tmp128,
 3057 0db4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3058              	.LVL212:
 3059              	@ armwave.c:474:     if(g_armwave_state.test_wave_buffer != NULL) {
 3060              		.loc 1 474 7 view .LVU803
 3061 0db8 000050E3 		cmp	r0, #0	@ _1,
 3062 0dbc 0000000A 		beq	.L185		@,
 475:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3063              		.loc 1 475 9 is_stmt 1 view .LVU804
 3064 0dc0 FEFFFFEB 		bl	free		@
 3065              	.LVL213:
 3066              	.L185:
 476:armwave.c     ****     }
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 479:armwave.c     **** 
 480:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3067              		.loc 1 480 5 view .LVU805
 3068              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3069              		.loc 1 480 75 is_stmt 0 view .LVU806
 3070 0dc4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3071 0dc8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3072              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3073              		.loc 1 480 40 view .LVU807
 3074 0dcc 0610A0E1 		mov	r1, r6	@, nsets
 3075              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3076              		.loc 1 480 75 view .LVU808
 3077 0dd0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3078              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3079              		.loc 1 480 40 view .LVU809
 3080 0dd4 0500A0E1 		mov	r0, r5	@, _4
 3081 0dd8 FEFFFFEB 		bl	calloc		@
 3082              	.LVL214:
 3083              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer == NULL) {
 481:armwave.c     **** 
 482:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3084              		.loc 1 482 7 view .LVU810
 3085 0ddc 000050E3 		cmp	r0, #0	@ tmp124,
 3086              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3087              		.loc 1 480 38 view .LVU811
 3088 0de0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3089              		.loc 1 482 5 is_stmt 1 view .LVU812
 3090              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer == NULL) {
 3091              		.loc 1 482 7 is_stmt 0 view .LVU813
 3092 0de4 7080BD18 		popne	{r4, r5, r6, pc}	@
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3093              		.loc 1 483 9 is_stmt 1 view .LVU814
 3094 0de8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3095 0dec 0620A0E1 		mov	r2, r6	@, nsets
 3096 0df0 08009FE5 		ldr	r0, .L191+4	@,
 3097              	@ armwave.c:487: }
 484:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 485:armwave.c     ****         return;
 486:armwave.c     ****     }
 487:armwave.c     **** }
 3098              		.loc 1 487 1 is_stmt 0 view .LVU815
 3099 0df4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3100              		.cfi_restore 14
 3101              		.cfi_restore 6
 3102              		.cfi_restore 5
 3103              		.cfi_restore 4
 3104              		.cfi_def_cfa_offset 0
 3105              	.LVL215:
 3106              	@ armwave.c:483:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3107              		.loc 1 483 9 view .LVU816
 3108 0df8 FEFFFFEA 		b	printf		@
 3109              	.LVL216:
 3110              	.L192:
 483:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3111              		.loc 1 483 9 view .LVU817
 3112              		.align	2
 3113              	.L191:
 3114 0dfc 00000000 		.word	g_armwave_state
 3115 0e00 D0010000 		.word	.LC19
 3116              		.cfi_endproc
 3117              	.LFE73:
 3119              		.align	2
 3120              		.global	armwave_fill_pixbuf_into_pybuffer
 3121              		.syntax unified
 3122              		.arm
 3123              		.fpu vfp
 3125              	armwave_fill_pixbuf_into_pybuffer:
 3126              	.LVL217:
 3127              	.LFB74:
 488:armwave.c     **** 
 489:armwave.c     **** /*
 490:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 491:armwave.c     ****  */
 492:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 493:armwave.c     **** {
 3128              		.loc 1 493 1 is_stmt 1 view -0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 48
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 494:armwave.c     ****     Py_buffer buffer;
 3132              		.loc 1 494 5 view .LVU819
 495:armwave.c     ****     int ret;
 3133              		.loc 1 495 5 view .LVU820
 496:armwave.c     **** 
 497:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 498:armwave.c     **** 
 499:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3134              		.loc 1 499 5 view .LVU821
 3135              	@ armwave.c:493: {
 493:armwave.c     ****     Py_buffer buffer;
 3136              		.loc 1 493 1 is_stmt 0 view .LVU822
 3137 0e04 04E02DE5 		str	lr, [sp, #-4]!	@,
 3138              		.cfi_def_cfa_offset 4
 3139              		.cfi_offset 14, -4
 3140 0e08 34D04DE2 		sub	sp, sp, #52	@,,
 3141              		.cfi_def_cfa_offset 56
 3142              	@ armwave.c:499:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 3143              		.loc 1 499 11 view .LVU823
 3144 0e0c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 3145 0e10 0120A0E3 		mov	r2, #1	@,
 3146 0e14 FEFFFFEB 		bl	PyObject_GetBuffer		@
 3147              	.LVL218:
 500:armwave.c     **** 
 501:armwave.c     ****     if(ret != 0) {
 3148              		.loc 1 501 5 is_stmt 1 view .LVU824
 3149              	@ armwave.c:501:     if(ret != 0) {
 3150              		.loc 1 501 7 is_stmt 0 view .LVU825
 3151 0e18 000050E3 		cmp	r0, #0	@,
 3152 0e1c 0A00001A 		bne	.L197		@,
 502:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 503:armwave.c     ****         Py_RETURN_FALSE;
 504:armwave.c     ****     }
 505:armwave.c     **** 
 506:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 507:armwave.c     **** 
 508:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 3153              		.loc 1 508 5 is_stmt 1 view .LVU826
 3154 0e20 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 3155              	.LVL219:
 3156              		.loc 1 508 5 is_stmt 0 view .LVU827
 3157 0e24 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3158              	.LVL220:
 509:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 510:armwave.c     **** 
 511:armwave.c     ****     PyBuffer_Release(&buffer);
 3159              		.loc 1 511 5 is_stmt 1 view .LVU828
 3160 0e28 04008DE2 		add	r0, sp, #4	@ tmp132,,
 3161 0e2c FEFFFFEB 		bl	PyBuffer_Release		@
 3162              	.LVL221:
 512:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 513:armwave.c     **** 
 514:armwave.c     ****     Py_RETURN_TRUE;
 3163              		.loc 1 514 5 view .LVU829
 3164              	.LBB47:
 3165              	.LBI47:
 3166              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 3167              		.loc 2 456 20 view .LVU830
 3168              	.LBB48:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 3169              		.loc 2 458 21 view .LVU831
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3170              		.loc 2 459 5 view .LVU832
 3171              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3172              		.loc 2 459 18 is_stmt 0 view .LVU833
 3173 0e30 38309FE5 		ldr	r3, .L198	@ tmp126,
 3174              	.LBE48:
 3175              	.LBE47:
 3176              	@ armwave.c:514:     Py_RETURN_TRUE;
 3177              		.loc 1 514 5 view .LVU834
 3178 0e34 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 3179              	.LBB50:
 3180              	.LBB49:
 3181              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3182              		.loc 2 459 18 view .LVU835
 3183 0e38 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3184 0e3c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 3185 0e40 002083E5 		str	r2, [r3]	@ tmp128,
 3186              	.LBE49:
 3187              	.LBE50:
 3188              	@ armwave.c:515: }
 515:armwave.c     **** }
 3189              		.loc 1 515 1 view .LVU836
 3190 0e44 34D08DE2 		add	sp, sp, #52	@,,
 3191              		.cfi_remember_state
 3192              		.cfi_def_cfa_offset 4
 3193              		@ sp needed	@
 3194 0e48 04F09DE4 		ldr	pc, [sp], #4	@
 3195              	.LVL222:
 3196              	.L197:
 3197              		.cfi_restore_state
 502:armwave.c     ****         Py_RETURN_FALSE;
 3198              		.loc 1 502 9 is_stmt 1 view .LVU837
 3199 0e4c 20009FE5 		ldr	r0, .L198+4	@,
 3200              	.LVL223:
 502:armwave.c     ****         Py_RETURN_FALSE;
 3201              		.loc 1 502 9 is_stmt 0 view .LVU838
 3202 0e50 FEFFFFEB 		bl	puts		@
 3203              	.LVL224:
 503:armwave.c     ****     }
 3204              		.loc 1 503 9 is_stmt 1 view .LVU839
 3205              	.LBB51:
 3206              	.LBI51:
 456:/usr/local/include/python3.8/object.h **** {
 3207              		.loc 2 456 20 view .LVU840
 3208              	.LBB52:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 3209              		.loc 2 458 21 view .LVU841
 3210              		.loc 2 459 5 view .LVU842
 3211              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3212              		.loc 2 459 18 is_stmt 0 view .LVU843
 3213 0e54 1C309FE5 		ldr	r3, .L198+8	@ tmp120,
 3214              	.LBE52:
 3215              	.LBE51:
 3216              	@ armwave.c:503:         Py_RETURN_FALSE;
 503:armwave.c     ****     }
 3217              		.loc 1 503 9 view .LVU844
 3218 0e58 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 3219              	.LBB54:
 3220              	.LBB53:
 3221              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 3222              		.loc 2 459 18 view .LVU845
 3223 0e5c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3224 0e60 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 3225 0e64 002083E5 		str	r2, [r3]	@ tmp122,
 3226              	.LBE53:
 3227              	.LBE54:
 3228              	@ armwave.c:515: }
 3229              		.loc 1 515 1 view .LVU846
 3230 0e68 34D08DE2 		add	sp, sp, #52	@,,
 3231              		.cfi_def_cfa_offset 4
 3232              		@ sp needed	@
 3233 0e6c 04F09DE4 		ldr	pc, [sp], #4	@
 3234              	.L199:
 3235              		.align	2
 3236              	.L198:
 3237 0e70 00000000 		.word	_Py_TrueStruct
 3238 0e74 24020000 		.word	.LC20
 3239 0e78 00000000 		.word	_Py_FalseStruct
 3240              		.cfi_endproc
 3241              	.LFE74:
 3243              		.align	2
 3244              		.global	armwave_test_create_am_sine
 3245              		.syntax unified
 3246              		.arm
 3247              		.fpu vfp
 3249              	armwave_test_create_am_sine:
 3250              	.LVL225:
 3251              	.LFB75:
 516:armwave.c     **** 
 517:armwave.c     **** /*
 518:armwave.c     ****  * Make a test AM waveform for render tests.
 519:armwave.c     ****  *
 520:armwave.c     ****  * @param   mod                     modulation depth
 521:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 522:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 523:armwave.c     ****  */
 524:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 525:armwave.c     **** {
 3252              		.loc 1 525 1 is_stmt 1 view -0
 3253              		.cfi_startproc
 3254              		@ args = 0, pretend = 0, frame = 8
 3255              		@ frame_needed = 0, uses_anonymous_args = 0
 526:armwave.c     ****     float v, noise, xnoise, mod_val;
 3256              		.loc 1 526 5 view .LVU848
 527:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3257              		.loc 1 527 5 view .LVU849
 3258              	@ armwave.c:525: {
 525:armwave.c     ****     float v, noise, xnoise, mod_val;
 3259              		.loc 1 525 1 is_stmt 0 view .LVU850
 3260 0e7c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3261              		.cfi_def_cfa_offset 32
 3262              		.cfi_offset 4, -32
 3263              		.cfi_offset 5, -28
 3264              		.cfi_offset 6, -24
 3265              		.cfi_offset 7, -20
 3266              		.cfi_offset 8, -16
 3267              		.cfi_offset 9, -12
 3268              		.cfi_offset 10, -8
 3269              		.cfi_offset 14, -4
 3270              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3271              		.loc 1 527 38 view .LVU851
 3272 0e80 7A7A9FED 		vldr.32	s14, .L231	@ tmp180,
 3273              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3274              		.loc 1 527 55 view .LVU852
 3275 0e84 00529FE5 		ldr	r5, .L231+28	@ tmp250,
 3276              	@ armwave.c:525: {
 525:armwave.c     ****     float v, noise, xnoise, mod_val;
 3277              		.loc 1 525 1 view .LVU853
 3278 0e88 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 3279              		.cfi_def_cfa_offset 80
 3280              		.cfi_offset 80, -80
 3281              		.cfi_offset 81, -76
 3282              		.cfi_offset 82, -72
 3283              		.cfi_offset 83, -68
 3284              		.cfi_offset 84, -64
 3285              		.cfi_offset 85, -60
 3286              		.cfi_offset 86, -56
 3287              		.cfi_offset 87, -52
 3288              		.cfi_offset 88, -48
 3289              		.cfi_offset 89, -44
 3290              		.cfi_offset 90, -40
 3291              		.cfi_offset 91, -36
 3292 0e8c 0090A0E1 		mov	r9, r0	@ sets, sets
 3293              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3294              		.loc 1 527 38 view .LVU854
 3295 0e90 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3296              	@ armwave.c:531:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 528:armwave.c     ****     int s, set_offset = 0;
 529:armwave.c     ****     int w, x;
 530:armwave.c     **** 
 531:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3297              		.loc 1 531 70 view .LVU855
 3298 0e94 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3299 0e98 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3300              	.LBB57:
 3301              	.LBB58:
 3302              	@ armwave.c:474:     if(g_armwave_state.test_wave_buffer != NULL) {
 474:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3303              		.loc 1 474 23 view .LVU856
 3304 0e9c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3305              	.LVL226:
 474:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3306              		.loc 1 474 23 view .LVU857
 3307              	.LBE58:
 3308              	.LBE57:
 3309              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 527:armwave.c     ****     int s, set_offset = 0;
 3310              		.loc 1 527 38 view .LVU858
 3311 0ea0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3312              	@ armwave.c:531:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3313              		.loc 1 531 70 view .LVU859
 3314 0ea4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3315              	@ armwave.c:525: {
 525:armwave.c     ****     float v, noise, xnoise, mod_val;
 3316              		.loc 1 525 1 view .LVU860
 3317 0ea8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3318              	.LBB62:
 3319              	.LBB59:
 3320              	@ armwave.c:474:     if(g_armwave_state.test_wave_buffer != NULL) {
 474:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3321              		.loc 1 474 7 view .LVU861
 3322 0eac 000050E3 		cmp	r0, #0	@ _82,
 3323              	.LBE59:
 3324              	.LBE62:
 3325              	@ armwave.c:525: {
 525:armwave.c     ****     float v, noise, xnoise, mod_val;
 3326              		.loc 1 525 1 view .LVU862
 3327 0eb0 08D04DE2 		sub	sp, sp, #8	@,,
 3328              		.cfi_def_cfa_offset 88
 3329              	@ armwave.c:532:     g_armwave_state.test_wave_buffer_nsets = sets;
 532:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3330              		.loc 1 532 44 view .LVU863
 3331 0eb4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3332              	@ armwave.c:531:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 531:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3333              		.loc 1 531 45 view .LVU864
 3334 0eb8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3335              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 527:armwave.c     ****     int s, set_offset = 0;
 3336              		.loc 1 527 38 view .LVU865
 3337 0ebc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3338              	@ armwave.c:527:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 527:armwave.c     ****     int s, set_offset = 0;
 3339              		.loc 1 527 11 view .LVU866
 3340 0ec0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3341              	.LVL227:
 528:armwave.c     ****     int w, x;
 3342              		.loc 1 528 5 is_stmt 1 view .LVU867
 529:armwave.c     **** 
 3343              		.loc 1 529 5 view .LVU868
 531:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3344              		.loc 1 531 5 view .LVU869
 3345              		.loc 1 532 5 view .LVU870
 533:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3346              		.loc 1 533 5 view .LVU871
 3347              	.LBB63:
 3348              	.LBI57:
 472:armwave.c     **** {
 3349              		.loc 1 472 6 view .LVU872
 3350              	.LBB60:
 474:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3351              		.loc 1 474 5 view .LVU873
 3352              	@ armwave.c:474:     if(g_armwave_state.test_wave_buffer != NULL) {
 474:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3353              		.loc 1 474 7 is_stmt 0 view .LVU874
 3354 0ec4 0000000A 		beq	.L201		@,
 475:armwave.c     ****     }
 3355              		.loc 1 475 9 is_stmt 1 view .LVU875
 3356 0ec8 FEFFFFEB 		bl	free		@
 3357              	.LVL228:
 3358              	.L201:
 480:armwave.c     **** 
 3359              		.loc 1 480 5 view .LVU876
 3360              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3361              		.loc 1 480 75 is_stmt 0 view .LVU877
 3362 0ecc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3363 0ed0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3364              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3365              		.loc 1 480 40 view .LVU878
 3366 0ed4 0910A0E1 		mov	r1, r9	@, sets
 3367              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3368              		.loc 1 480 75 view .LVU879
 3369 0ed8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3370              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3371              		.loc 1 480 40 view .LVU880
 3372 0edc 0400A0E1 		mov	r0, r4	@, _85
 3373 0ee0 FEFFFFEB 		bl	calloc		@
 3374              	.LVL229:
 3375              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer == NULL) {
 482:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3376              		.loc 1 482 7 view .LVU881
 3377 0ee4 000050E3 		cmp	r0, #0	@ tmp191,
 3378              	@ armwave.c:480:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 480:armwave.c     **** 
 3379              		.loc 1 480 38 view .LVU882
 3380 0ee8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 482:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3381              		.loc 1 482 5 is_stmt 1 view .LVU883
 3382              	@ armwave.c:482:     if(g_armwave_state.test_wave_buffer == NULL) {
 482:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3383              		.loc 1 482 7 is_stmt 0 view .LVU884
 3384 0eec 5A00000A 		beq	.L230		@,
 3385              	.L202:
 3386              	.LVL230:
 482:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3387              		.loc 1 482 7 view .LVU885
 3388              	.LBE60:
 3389              	.LBE63:
 3390              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 534:armwave.c     **** 
 535:armwave.c     ****     for(s = 0; s < sets; s++) {
 3391              		.loc 1 535 5 discriminator 1 view .LVU886
 3392 0ef0 000059E3 		cmp	r9, #0	@ sets,
 3393 0ef4 550000DA 		ble	.L200		@,
 3394              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 537:armwave.c     ****     
 538:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 539:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 540:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 541:armwave.c     **** 
 542:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 543:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 544:armwave.c     ****                 noise *= noise;
 545:armwave.c     ****                 noise *= noise;
 546:armwave.c     ****                 noise *= noise;
 547:armwave.c     **** 
 548:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 549:armwave.c     ****                     noise = -noise;
 550:armwave.c     **** 
 551:armwave.c     ****                 noise += 1.0f;
 552:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 553:armwave.c     **** 
 554:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3395              		.loc 1 554 45 view .LVU887
 3396 0ef8 5C8A9FED 		vldr.32	s16, .L231	@ tmp258,
 3397              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 555:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 556:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 557:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3398              		.loc 1 557 104 view .LVU888
 3399 0efc 5CCA9FED 		vldr.32	s24, .L231+4	@ tmp259,
 3400              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 535:armwave.c     ****         printf("Calculating test set %d\n", s);
 3401              		.loc 1 535 5 view .LVU889
 3402 0f00 0070A0E3 		mov	r7, #0	@ set_offset,
 3403              	@ armwave.c:536:         printf("Calculating test set %d\n", s);
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 3404              		.loc 1 536 9 view .LVU890
 3405 0f04 84A19FE5 		ldr	r10, .L231+32	@ tmp257,
 3406              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 535:armwave.c     ****         printf("Calculating test set %d\n", s);
 3407              		.loc 1 535 5 view .LVU891
 3408 0f08 0780A0E1 		mov	r8, r7	@ s, set_offset
 3409              	.LVL231:
 3410              	.L203:
 536:armwave.c     ****         printf("Calculating test set %d\n", s);
 3411              		.loc 1 536 9 is_stmt 1 view .LVU892
 3412 0f0c 0810A0E1 		mov	r1, r8	@, s
 3413 0f10 0A00A0E1 		mov	r0, r10	@, tmp257
 3414 0f14 FEFFFFEB 		bl	printf		@
 3415              	.LVL232:
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3416              		.loc 1 538 9 view .LVU893
 3417              	@ armwave.c:538:         for(w = 0; w < g_armwave_state.waves; w++) {
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3418              		.loc 1 538 39 is_stmt 0 view .LVU894
 3419 0f18 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3420              	@ armwave.c:538:         for(w = 0; w < g_armwave_state.waves; w++) {
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3421              		.loc 1 538 9 view .LVU895
 3422 0f1c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3423 0f20 450000DA 		ble	.L204		@,
 3424              	@ armwave.c:540:             mod_val = 0.5f + (_1_waves_mod * w);
 540:armwave.c     **** 
 3425              		.loc 1 540 21 view .LVU896
 3426 0f24 53CADFED 		vldr.32	s25, .L231+8	@ tmp200,
 3427              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3428              		.loc 1 554 33 view .LVU897
 3429 0f28 53BA9FED 		vldr.32	s22, .L231+12	@ tmp253,
 3430              	@ armwave.c:552:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 552:armwave.c     **** 
 3431              		.loc 1 552 24 view .LVU898
 3432 0f2c 53AADFED 		vldr.32	s21, .L231+16	@ tmp254,
 3433 0f30 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3434              	@ armwave.c:538:         for(w = 0; w < g_armwave_state.waves; w++) {
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3435              		.loc 1 538 15 view .LVU899
 3436 0f34 0060A0E3 		mov	r6, #0	@ w,
 3437              	.LVL233:
 3438              	.L211:
 540:armwave.c     **** 
 3439              		.loc 1 540 13 is_stmt 1 view .LVU900
 3440              	@ armwave.c:540:             mod_val = 0.5f + (_1_waves_mod * w);
 540:armwave.c     **** 
 3441              		.loc 1 540 21 is_stmt 0 view .LVU901
 3442 0f38 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3443 0f3c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3444              	@ armwave.c:542:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3445              		.loc 1 542 13 view .LVU902
 3446 0f40 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3447              	@ armwave.c:540:             mod_val = 0.5f + (_1_waves_mod * w);
 540:armwave.c     **** 
 3448              		.loc 1 540 21 view .LVU903
 3449 0f44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3450 0f48 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3451              	.LVL234:
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3452              		.loc 1 542 13 is_stmt 1 view .LVU904
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3453              		.loc 1 542 13 is_stmt 0 view .LVU905
 3454 0f4c 370000DA 		ble	.L205		@,
 3455 0f50 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3456              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3457              		.loc 1 557 113 view .LVU906
 3458 0f54 4AAA9FED 		vldr.32	s20, .L231+20	@ tmp229,
 3459 0f58 4A8ADFED 		vldr.32	s17, .L231+24	@ tmp230,
 3460              	@ armwave.c:542:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3461              		.loc 1 542 19 view .LVU907
 3462 0f5c 0040A0E3 		mov	r4, #0	@ x,
 3463              	.LVL235:
 3464              	.L210:
 543:armwave.c     ****                 noise *= noise;
 3465              		.loc 1 543 17 is_stmt 1 view .LVU908
 3466              	@ armwave.c:543:                 noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****                 noise *= noise;
 3467              		.loc 1 543 28 is_stmt 0 view .LVU909
 3468 0f60 FEFFFFEB 		bl	rand		@
 3469              	.LVL236:
 3470              	@ armwave.c:543:                 noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****                 noise *= noise;
 3471              		.loc 1 543 35 view .LVU910
 3472 0f64 7000FFE6 		uxth	r0, r0	@ tmp201,
 3473              	@ armwave.c:543:                 noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****                 noise *= noise;
 3474              		.loc 1 543 45 view .LVU911
 3475 0f68 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3476 0f6c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3477              	@ armwave.c:543:                 noise  = ((rand() & 0xffff) * noise_fraction);
 543:armwave.c     ****                 noise *= noise;
 3478              		.loc 1 543 24 view .LVU912
 3479 0f70 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3480              	.LVL237:
 544:armwave.c     ****                 noise *= noise;
 3481              		.loc 1 544 17 is_stmt 1 view .LVU913
 3482              	@ armwave.c:544:                 noise *= noise;
 544:armwave.c     ****                 noise *= noise;
 3483              		.loc 1 544 23 is_stmt 0 view .LVU914
 3484 0f74 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3485              	.LVL238:
 545:armwave.c     ****                 noise *= noise;
 3486              		.loc 1 545 17 is_stmt 1 view .LVU915
 3487              	@ armwave.c:545:                 noise *= noise;
 545:armwave.c     ****                 noise *= noise;
 3488              		.loc 1 545 23 is_stmt 0 view .LVU916
 3489 0f78 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3490              	.LVL239:
 546:armwave.c     **** 
 3491              		.loc 1 546 17 is_stmt 1 view .LVU917
 3492              	@ armwave.c:546:                 noise *= noise;
 546:armwave.c     **** 
 3493              		.loc 1 546 23 is_stmt 0 view .LVU918
 3494 0f7c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3495              	.LVL240:
 548:armwave.c     ****                     noise = -noise;
 3496              		.loc 1 548 17 is_stmt 1 view .LVU919
 3497              	@ armwave.c:548:                 if((rand() & 0xffff) > 0x7fff)
 548:armwave.c     ****                     noise = -noise;
 3498              		.loc 1 548 21 is_stmt 0 view .LVU920
 3499 0f80 FEFFFFEB 		bl	rand		@
 3500              	.LVL241:
 549:armwave.c     **** 
 3501              		.loc 1 549 21 is_stmt 1 view .LVU921
 3502              	@ armwave.c:548:                 if((rand() & 0xffff) > 0x7fff)
 548:armwave.c     ****                     noise = -noise;
 3503              		.loc 1 548 19 is_stmt 0 view .LVU922
 3504 0f84 020910E3 		tst	r0, #32768	@,
 3505              	@ armwave.c:549:                     noise = -noise;
 549:armwave.c     **** 
 3506              		.loc 1 549 27 view .LVU923
 3507 0f88 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3508              	.LVL242:
 551:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3509              		.loc 1 551 17 is_stmt 1 view .LVU924
 552:armwave.c     **** 
 3510              		.loc 1 552 17 view .LVU925
 3511              	@ armwave.c:552:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 552:armwave.c     **** 
 3512              		.loc 1 552 27 is_stmt 0 view .LVU926
 3513 0f8c FEFFFFEB 		bl	rand		@
 3514              	.LVL243:
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3515              		.loc 1 554 17 is_stmt 1 view .LVU927
 3516              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3517              		.loc 1 554 45 is_stmt 0 view .LVU928
 3518 0f90 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3519              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3520              		.loc 1 554 33 view .LVU929
 3521 0f94 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3522              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3523              		.loc 1 554 45 view .LVU930
 3524 0f98 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3525              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3526              		.loc 1 554 33 view .LVU931
 3527 0f9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3528              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3529              		.loc 1 554 45 view .LVU932
 3530 0fa0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3531              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3532              		.loc 1 554 33 view .LVU933
 3533 0fa4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3534              	@ armwave.c:552:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 552:armwave.c     **** 
 3535              		.loc 1 552 34 view .LVU934
 3536 0fa8 7000FFE6 		uxth	r0, r0	@ tmp214,
 3537              	.LVL244:
 3538              	@ armwave.c:552:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 552:armwave.c     **** 
 3539              		.loc 1 552 44 view .LVU935
 3540 0fac 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3541 0fb0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3542              	@ armwave.c:552:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 552:armwave.c     **** 
 3543              		.loc 1 552 24 view .LVU936
 3544 0fb4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3545              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3546              		.loc 1 554 77 view .LVU937
 3547 0fb8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3548              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3549              		.loc 1 554 22 view .LVU938
 3550 0fbc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3551 0fc0 FEFFFFEB 		bl	sin		@
 3552              	.LVL245:
 3553              		.loc 1 557 17 is_stmt 1 view .LVU939
 3554              	@ armwave.c:551:                 noise += 1.0f;
 551:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3555              		.loc 1 551 23 is_stmt 0 view .LVU940
 3556 0fc4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3557              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3558              		.loc 1 557 104 view .LVU941
 3559 0fc8 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3560              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3561              		.loc 1 554 98 view .LVU942
 3562 0fcc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3563              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3564              		.loc 1 554 87 view .LVU943
 3565 0fd0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3566              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3567              		.loc 1 554 98 view .LVU944
 3568 0fd4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3569              	@ armwave.c:554:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 554:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3570              		.loc 1 554 19 view .LVU945
 3571 0fd8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3572              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3573              		.loc 1 557 113 view .LVU946
 3574 0fdc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3575 0fe0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3576 0fe4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3577 0fe8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3578 0fec 050000DA 		ble	.L207		@,
 3579              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3580              		.loc 1 557 104 discriminator 1 view .LVU947
 3581 0ff0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3582 0ff4 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3583 0ff8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3584 0ffc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3585 1000 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3586 1004 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3587              	.L207:
 3588              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3589              		.loc 1 557 57 discriminator 12 view .LVU948
 3590 1008 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3591              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3592              		.loc 1 557 102 discriminator 12 view .LVU949
 3593 100c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3594 1010 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3595 1014 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3596              	@ armwave.c:542:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3597              		.loc 1 542 58 discriminator 12 view .LVU950
 3598 1018 014084E2 		add	r4, r4, #1	@ x, x,
 3599              	.LVL246:
 3600              	@ armwave.c:557:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3601              		.loc 1 557 102 discriminator 12 view .LVU951
 3602 101c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3603              	@ armwave.c:542:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3604              		.loc 1 542 43 discriminator 12 view .LVU952
 3605 1020 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3606              	@ armwave.c:542:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 542:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3607              		.loc 1 542 13 discriminator 12 view .LVU953
 3608 1024 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3609 1028 CCFFFFCA 		bgt	.L210		@,
 3610 102c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3611              	.LVL247:
 3612              	.L205:
 3613              	@ armwave.c:538:         for(w = 0; w < g_armwave_state.waves; w++) {
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3614              		.loc 1 538 48 discriminator 2 view .LVU954
 3615 1030 016086E2 		add	r6, r6, #1	@ w, w,
 3616              	.LVL248:
 3617              	@ armwave.c:538:         for(w = 0; w < g_armwave_state.waves; w++) {
 538:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3618              		.loc 1 538 9 discriminator 2 view .LVU955
 3619 1034 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3620 1038 BEFFFFBA 		blt	.L211		@,
 3621              	.LVL249:
 3622              	.L204:
 558:armwave.c     ****             }
 559:armwave.c     ****         }
 560:armwave.c     **** 
 561:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3623              		.loc 1 561 9 is_stmt 1 discriminator 2 view .LVU956
 3624              	@ armwave.c:561:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3625              		.loc 1 561 46 is_stmt 0 discriminator 2 view .LVU957
 3626 103c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3627              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 535:armwave.c     ****         printf("Calculating test set %d\n", s);
 3628              		.loc 1 535 27 discriminator 2 view .LVU958
 3629 1040 018088E2 		add	r8, r8, #1	@ s, s,
 3630              	.LVL250:
 3631              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 535:armwave.c     ****         printf("Calculating test set %d\n", s);
 3632              		.loc 1 535 5 discriminator 2 view .LVU959
 3633 1044 080059E1 		cmp	r9, r8	@ sets, s
 3634              	@ armwave.c:561:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3635              		.loc 1 561 20 discriminator 2 view .LVU960
 3636 1048 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3637              	.LVL251:
 3638              	@ armwave.c:535:     for(s = 0; s < sets; s++) {
 535:armwave.c     ****         printf("Calculating test set %d\n", s);
 3639              		.loc 1 535 5 discriminator 2 view .LVU961
 3640 104c AEFFFF1A 		bne	.L203		@,
 3641              	.LVL252:
 3642              	.L200:
 3643              	@ armwave.c:563: }
 562:armwave.c     ****     }
 563:armwave.c     **** }
 3644              		.loc 1 563 1 view .LVU962
 3645 1050 08D08DE2 		add	sp, sp, #8	@,,
 3646              		.cfi_remember_state
 3647              		.cfi_def_cfa_offset 80
 3648              		@ sp needed	@
 3649 1054 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3650              		.cfi_restore 90
 3651              		.cfi_restore 91
 3652              		.cfi_restore 88
 3653              		.cfi_restore 89
 3654              		.cfi_restore 86
 3655              		.cfi_restore 87
 3656              		.cfi_restore 84
 3657              		.cfi_restore 85
 3658              		.cfi_restore 82
 3659              		.cfi_restore 83
 3660              		.cfi_restore 80
 3661              		.cfi_restore 81
 3662              		.cfi_def_cfa_offset 32
 3663              	.LVL253:
 3664              		.loc 1 563 1 view .LVU963
 3665 1058 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3666              	.LVL254:
 3667              	.L230:
 3668              		.cfi_restore_state
 3669              	.LBB64:
 3670              	.LBB61:
 483:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3671              		.loc 1 483 9 is_stmt 1 view .LVU964
 3672 105c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3673 1060 0920A0E1 		mov	r2, r9	@, sets
 3674 1064 28009FE5 		ldr	r0, .L231+36	@,
 3675 1068 FEFFFFEB 		bl	printf		@
 3676              	.LVL255:
 485:armwave.c     ****     }
 3677              		.loc 1 485 9 view .LVU965
 3678 106c 9FFFFFEA 		b	.L202		@
 3679              	.L232:
 3680              		.align	2
 3681              	.L231:
 3682 1070 0000803F 		.word	1065353216
 3683 1074 00007F43 		.word	1132396544
 3684 1078 0000003F 		.word	1056964608
 3685 107c C3F5C840 		.word	1086911939
 3686 1080 38FFC74A 		.word	1254620984
 3687 1084 0000FE42 		.word	1123942400
 3688 1088 00000043 		.word	1124073472
 3689 108c 00000000 		.word	g_armwave_state
 3690 1090 78020000 		.word	.LC21
 3691 1094 D0010000 		.word	.LC19
 3692              	.LBE61:
 3693              	.LBE64:
 3694              		.cfi_endproc
 3695              	.LFE75:
 3697              		.align	2
 3698              		.global	armwave_cleanup
 3699              		.syntax unified
 3700              		.arm
 3701              		.fpu vfp
 3703              	armwave_cleanup:
 3704              	.LFB76:
 564:armwave.c     **** 
 565:armwave.c     **** /*
 566:armwave.c     ****  * Make a test square waveform.
 567:armwave.c     ****  *
 568:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 569:armwave.c     ****  */
 570:armwave.c     **** #if 0
 571:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 572:armwave.c     **** {
 573:armwave.c     ****     uint8_t v;
 574:armwave.c     ****     float noise, xnoise;
 575:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 576:armwave.c     ****     int w, x;
 577:armwave.c     **** 
 578:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 579:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****             noise *= noise;
 582:armwave.c     ****             noise *= noise;
 583:armwave.c     ****             noise *= noise;
 584:armwave.c     **** 
 585:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 586:armwave.c     ****                 noise = -noise;
 587:armwave.c     **** 
 588:armwave.c     ****             //noise += 1.0f;
 589:armwave.c     **** 
 590:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 591:armwave.c     ****                 new_level = 0.2f;
 592:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 593:armwave.c     ****                 new_level = 0.8f;
 594:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 595:armwave.c     ****                 new_level = 0.2f;
 596:armwave.c     ****             } else {
 597:armwave.c     ****                 new_level = 0.8f;
 598:armwave.c     ****             }
 599:armwave.c     **** 
 600:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 601:armwave.c     **** 
 602:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 603:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 604:armwave.c     ****         }
 605:armwave.c     ****     }
 606:armwave.c     **** }
 607:armwave.c     **** #endif
 608:armwave.c     **** 
 609:armwave.c     **** /*
 610:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 611:armwave.c     ****  */
 612:armwave.c     **** void armwave_cleanup()
 613:armwave.c     **** {
 3705              		.loc 1 613 1 view -0
 3706              		.cfi_startproc
 3707              		@ args = 0, pretend = 0, frame = 0
 3708              		@ frame_needed = 0, uses_anonymous_args = 0
 614:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3709              		.loc 1 614 5 view .LVU967
 3710              	@ armwave.c:613: {
 613:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3711              		.loc 1 613 1 is_stmt 0 view .LVU968
 3712 1098 10402DE9 		push	{r4, lr}	@
 3713              		.cfi_def_cfa_offset 8
 3714              		.cfi_offset 4, -8
 3715              		.cfi_offset 14, -4
 3716              	@ armwave.c:614:     free(g_armwave_state.out_pixbuf);
 3717              		.loc 1 614 25 view .LVU969
 3718 109c 34409FE5 		ldr	r4, .L235	@ tmp114,
 3719              	@ armwave.c:614:     free(g_armwave_state.out_pixbuf);
 3720              		.loc 1 614 5 view .LVU970
 3721 10a0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3722 10a4 FEFFFFEB 		bl	free		@
 3723              	.LVL256:
 615:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3724              		.loc 1 615 5 is_stmt 1 view .LVU971
 3725 10a8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3726 10ac FEFFFFEB 		bl	free		@
 3727              	.LVL257:
 616:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3728              		.loc 1 616 5 view .LVU972
 3729 10b0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3730 10b4 FEFFFFEB 		bl	free		@
 3731              	.LVL258:
 617:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3732              		.loc 1 617 5 view .LVU973
 3733 10b8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3734 10bc FEFFFFEB 		bl	free		@
 3735              	.LVL259:
 618:armwave.c     **** 
 619:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3736              		.loc 1 619 5 view .LVU974
 3737              	@ armwave.c:619:     g_armwave_state.out_pixbuf = NULL;
 3738              		.loc 1 619 32 is_stmt 0 view .LVU975
 3739 10c0 0030A0E3 		mov	r3, #0	@ tmp123,
 3740 10c4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 620:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3741              		.loc 1 620 5 is_stmt 1 view .LVU976
 3742              	@ armwave.c:620:     g_armwave_state.ch1_buffer = NULL;
 3743              		.loc 1 620 32 is_stmt 0 view .LVU977
 3744 10c8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 621:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3745              		.loc 1 621 5 is_stmt 1 view .LVU978
 3746              	@ armwave.c:621:     g_armwave_state.xcoord_to_xpixel = NULL;
 3747              		.loc 1 621 38 is_stmt 0 view .LVU979
 3748 10cc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 622:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3749              		.loc 1 622 5 is_stmt 1 view .LVU980
 3750              	@ armwave.c:622:     g_armwave_state.test_wave_buffer = NULL;
 3751              		.loc 1 622 38 is_stmt 0 view .LVU981
 3752 10d0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3753              	@ armwave.c:623: }
 623:armwave.c     **** }
 3754              		.loc 1 623 1 view .LVU982
 3755 10d4 1080BDE8 		pop	{r4, pc}	@
 3756              	.L236:
 3757              		.align	2
 3758              	.L235:
 3759 10d8 00000000 		.word	g_armwave_state
 3760              		.cfi_endproc
 3761              	.LFE76:
 3763              		.comm	gamma_table,256,4
 3764              		.comm	g_armwave_state,136,4
 3765              		.section	.rodata
 3766              		.align	2
 3767              		.set	.LANCHOR0,. + 0
 3770              	__PRETTY_FUNCTION__.17095:
 3771 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3771      6176655F 
 3771      66696C6C 
 3771      5F706978 
 3771      6275665F 
 3772 001b 00       		.space	1
 3775              	__PRETTY_FUNCTION__.17117:
 3776 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3776      6176655F 
 3776      73657475 
 3776      705F7265 
 3776      6E646572 
 3777 0031 000000   		.space	3
 3780              	__PRETTY_FUNCTION__.17124:
 3781 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3781      6176655F 
 3781      7365745F 
 3781      77617665 
 3781      5F706F69 
 3782 004d 000000   		.space	3
 3785              	__PRETTY_FUNCTION__.17131:
 3786 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3786      6176655F 
 3786      7365745F 
 3786      77617665 
 3786      5F706F69 
 3787              		.section	.rodata.str1.4,"aMS",%progbits,1
 3788              		.align	2
 3789              	.LC0:
 3790 0000 76302E30 		.ascii	"v0.0.1\000"
 3790      2E3100
 3791 0007 00       		.space	1
 3792              	.LC1:
 3793 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3793      61766520 
 3793      76657273 
 3793      696F6E3A 
 3793      2025730A 
 3794 001d 000000   		.space	3
 3795              	.LC2:
 3796 0020 30782530 		.ascii	"0x%08x 0x%08x %d\012\000"
 3796      38782030 
 3796      78253038 
 3796      78202564 
 3796      0A00
 3797 0032 0000     		.space	2
 3798              	.LC3:
 3799 0034 61726D77 		.ascii	"armwave.c\000"
 3799      6176652E 
 3799      6300
 3800 003e 0000     		.space	2
 3801              	.LC4:
 3802 0040 6F75745F 		.ascii	"out_buffer != NULL\000"
 3802      62756666 
 3802      65722021 
 3802      3D204E55 
 3802      4C4C00
 3803 0053 00       		.space	1
 3804              	.LC5:
 3805 0054 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3805      20653D25 
 3805      6420773D 
 3805      25642077 
 3805      733D2564 
 3806              	.LC6:
 3807 0080 73746172 		.ascii	"start_point < end_point\000"
 3807      745F706F 
 3807      696E7420 
 3807      3C20656E 
 3807      645F706F 
 3808              	.LC7:
 3809 0098 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3809      7566665F 
 3809      73697A65 
 3809      3D25642C 
 3809      20636D70 
 3810 00ca 00       		.ascii	"\000"
 3811 00cb 00       		.space	1
 3812              	.LC8:
 3813 00cc 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3813      6D776176 
 3813      655F7374 
 3813      6174652E 
 3813      6368315F 
 3814 00ef 00       		.space	1
 3815              	.LC9:
 3816 00f0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3816      6D776176 
 3816      655F7374 
 3816      6174652E 
 3816      78636F6F 
 3817 0119 000000   		.space	3
 3818              	.LC10:
 3819 011c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3819      3A203078 
 3819      25303878 
 3819      20307825 
 3819      30387820 
 3820              	.LC11:
 3821 0140 77617665 		.ascii	"wave_buffer != NULL\000"
 3821      5F627566 
 3821      66657220 
 3821      213D204E 
 3821      554C4C00 
 3822              	.LC12:
 3823 0154 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3823      6176655F 
 3823      7365745F 
 3823      77617665 
 3823      5F706F69 
 3824 0187 78636565 		.ascii	"xceeded\000"
 3824      64656400 
 3825 018f 00       		.space	1
 3826              	.LC13:
 3827 0190 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3827      5F627566 
 3827      6665725F 
 3827      70747220 
 3827      213D2030 
 3828 01a5 000000   		.space	3
 3829              	.LC14:
 3830 01a8 776200   		.ascii	"wb\000"
 3831 01ab 00       		.space	1
 3832              	.LC15:
 3833 01ac 50330A00 		.ascii	"P3\012\000"
 3834              	.LC16:
 3835 01b0 25642025 		.ascii	"%d %d\012\000"
 3835      640A00
 3836 01b7 00       		.space	1
 3837              	.LC17:
 3838 01b8 3235350A 		.ascii	"255\012\000"
 3838      00
 3839 01bd 000000   		.space	3
 3840              	.LC18:
 3841 01c0 25336420 		.ascii	"%3d %3d %3d\012\000"
 3841      25336420 
 3841      2533640A 
 3841      00
 3842 01cd 000000   		.space	3
 3843              	.LC19:
 3844 01d0 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3844      6176655F 
 3844      74657374 
 3844      5F627566 
 3844      6665725F 
 3845 0203 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3845      20627566 
 3845      66657220 
 3845      28256420 
 3845      62797465 
 3846              	.LC20:
 3847 0224 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3847      6176655F 
 3847      66696C6C 
 3847      5F706978 
 3847      6275665F 
 3848 0257 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3848      20666169 
 3848      6C65642C 
 3848      20726574 
 3848      75726E69 
 3849 0276 0000     		.space	2
 3850              	.LC21:
 3851 0278 43616C63 		.ascii	"Calculating test set %d\012\000"
 3851      756C6174 
 3851      696E6720 
 3851      74657374 
 3851      20736574 
 3852              		.text
 3853              	.Letext0:
 3854              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3855              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3856              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3857              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3858              		.file 7 "/usr/include/stdio.h"
 3859              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3860              		.file 9 "/usr/include/errno.h"
 3861              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3862              		.file 11 "/usr/include/unistd.h"
 3863              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3864              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3865              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3866              		.file 15 "/usr/include/math.h"
 3867              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3868              		.file 17 "/usr/include/time.h"
 3869              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3870              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3871              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3872              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3873              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3874              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3875              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3876              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3877              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3878              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3879              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3880              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3881              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3882              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3883              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3884              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3885              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3886              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3887              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3888              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3889              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3890              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3891              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3892              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3893              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3894              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3895              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3896              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3897              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3898              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3899              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3900              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3901              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3902              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3903              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3904              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3905              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3906              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3907              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3908              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3909              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3910              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3911              		.file 60 "/usr/local/include/python3.8/context.h"
 3912              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3913              		.file 62 "/usr/local/include/python3.8/code.h"
 3914              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3915              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3916              		.file 65 "/usr/local/include/python3.8/import.h"
 3917              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3918              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3919              		.file 68 "/usr/include/malloc.h"
 3920              		.file 69 "armwave.h"
 3921              		.file 70 "/usr/include/stdlib.h"
 3922              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3923              		.file 72 "/usr/include/assert.h"
 3924              		.file 73 "<built-in>"
 3925              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
