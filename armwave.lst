   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 B8419FE5 		ldr	r4, .L27	@ tmp313,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 0160A0E1 		mov	r6, r1	@ height, height
 255 00ac 24D04DE2 		sub	sp, sp, #36	@,,
 256              		.cfi_def_cfa_offset 72
 257              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 258              		.loc 1 71 82 view .LVU34
 259 00b0 240094E5 		ldr	r0, [r4, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 260              	.LVL7:
 261              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 262              		.loc 1 71 147 view .LVU35
 263 00b4 401094E5 		ldr	r1, [r4, #64]	@ _5, g_armwave_state.bitdepth_height
 264              	.LVL8:
 265              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 266              		.loc 1 71 40 view .LVU36
 267 00b8 043094E5 		ldr	r3, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 268              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 269              		.loc 1 71 65 view .LVU37
 270 00bc 970002E0 		mul	r2, r7, r0	@ tmp216, slice_y, _2
 271              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 272              		.loc 1 73 5 view .LVU38
 273 00c0 0C008DE5 		str	r0, [sp, #12]	@ _2,
 274 00c4 10108DE5 		str	r1, [sp, #16]	@ _5,
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU39
 277 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp217, tmp216,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 279              		.loc 1 73 5 view .LVU40
 280 00cc 04708DE5 		str	r7, [sp, #4]	@ slice_y,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU41
 283 00d0 910202E0 		mul	r2, r1, r2	@ _7, _5, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 285              		.loc 1 73 5 view .LVU42
 286 00d4 08608DE5 		str	r6, [sp, #8]	@ height,
 287              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 288              		.loc 1 71 23 view .LVU43
 289 00d8 025083E0 		add	r5, r3, r2	@ write_buffer_base, _1, _7
 290              	.LVL9:
 291              		.loc 1 73 5 is_stmt 1 view .LVU44
 292 00dc 00208DE5 		str	r2, [sp]	@ _7,
 293 00e0 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 294 00e4 0520A0E1 		mov	r2, r5	@, write_buffer_base
 295 00e8 78019FE5 		ldr	r0, .L27+4	@,
 296 00ec FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 79 5 view .LVU45
 299              		.loc 1 79 5 is_stmt 0 view .LVU46
 300 00f0 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00f4 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f8 570000DA 		ble	.L11		@,
 303 00fc 000056E3 		cmp	r6, #0	@ height,
 304 0100 5500000A 		beq	.L11		@,
 305 0104 043047E2 		sub	r3, r7, #4	@ tmp314, slice_y,
 306 0108 1C308DE5 		str	r3, [sp, #28]	@ tmp314, %sfp
 307              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 79 11 view .LVU47
 309 010c 0030A0E3 		mov	r3, #0	@ w,
 310 0110 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 311              	.LVL11:
 312              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 313              		.loc 1 80 9 is_stmt 1 view .LVU48
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 84 9 view .LVU49
 315              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 316              		.loc 1 80 64 is_stmt 0 view .LVU50
 317 0114 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 318 0118 18109DE5 		ldr	r1, [sp, #24]	@ w, %sfp
 319 011c 1C009DE5 		ldr	r0, [sp, #28]	@ tmp314, %sfp
 320 0120 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 321 0124 930123E0 		mla	r3, r3, r1, r0	@ tmp228, g_armwave_state.wave_stride, w, tmp314
 322              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 323              		.loc 1 84 16 view .LVU51
 324 0128 0020A0E3 		mov	r2, #0	@ yy,
 325 012c 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 326              	.LVL12:
 327              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 338              		.loc 1 87 18 is_stmt 0 view .LVU61
 339 0130 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _184, offset: 0B]
 340              	.LVL13:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 89 13 is_stmt 1 view .LVU62
  91:armwave.c     ****                 
 342              		.loc 1 91 17 view .LVU63
  94:armwave.c     ****                     continue;
 343              		.loc 1 94 17 view .LVU64
 344              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 345              		.loc 1 102 34 is_stmt 0 view .LVU65
 346 0134 01B082E2 		add	fp, r2, #1	@ tmp258, yy,
 347              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 20 view .LVU66
 349 0138 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 013c 0110A003 		moveq	r1, #1	@ tmp231,
 351 0140 0010A013 		movne	r1, #0	@ tmp231,
 352              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 353              		.loc 1 94 19 view .LVU67
 354 0144 FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0148 01108103 		orreq	r1, r1, #1	@,, tmp236, tmp231
 356 014c 000051E3 		cmp	r1, #0	@ tmp236,
 357              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 358              		.loc 1 102 34 view .LVU68
 359 0150 02A082E2 		add	r10, r2, #2	@ tmp279, yy,
 360 0154 039082E2 		add	r9, r2, #3	@ tmp298, yy,
 361              	.LVL14:
 362              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 363              		.loc 1 107 22 view .LVU69
 364 0158 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 015c 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 19 view .LVU70
 368 0160 3400001A 		bne	.L20		@,
 369              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 370              		.loc 1 102 34 view .LVU71
 371 0164 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 373              		.loc 1 94 20 view .LVU72
 374 0168 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 016c 01E0A003 		moveq	lr, #1	@ tmp251,
 376              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 377              		.loc 1 102 34 view .LVU73
 378 0170 910201E0 		mul	r1, r1, r2	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 380              		.loc 1 94 20 view .LVU74
 381 0174 00E0A013 		movne	lr, #0	@ tmp251,
 382              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 383              		.loc 1 94 19 view .LVU75
 384 0178 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 017c 01E08E03 		orreq	lr, lr, #1	@,, tmp256, tmp251
 386 0180 00005EE3 		cmp	lr, #0	@ tmp256,
 387              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 388              		.loc 1 106 47 view .LVU76
 389 0184 40E094E5 		ldr	lr, [r4, #64]	@ tmp325, g_armwave_state.bitdepth_height
 390              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 391              		.loc 1 102 74 view .LVU77
 392 0188 2118A0E1 		lsr	r1, r1, #16	@ tmp240, tmp238,
 393              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 394              		.loc 1 106 47 view .LVU78
 395 018c 9E7121E0 		mla	r1, lr, r1, r7	@ tmp244, tmp325, tmp240, scale_value
 396 0190 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_81, *_81
 397 0194 01E08EE2 		add	lr, lr, #1	@ tmp247, *_81,
 398 0198 01E0C5E7 		strb	lr, [r5, r1]	@ tmp247, *_81
 399              	.LVL15:
 400              		.loc 1 107 17 is_stmt 1 view .LVU79
  91:armwave.c     ****                 
 401              		.loc 1 91 17 view .LVU80
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 17 view .LVU81
 403              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 404              		.loc 1 94 19 is_stmt 0 view .LVU82
 405 019c 2500001A 		bne	.L20		@,
 406              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 407              		.loc 1 102 34 view .LVU83
 408 01a0 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 410              		.loc 1 102 99 view .LVU84
 411 01a4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 20 view .LVU85
 414 01a8 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU86
 417 01ac 9E0B0BE0 		mul	fp, lr, fp	@ tmp259, g_armwave_state.cmp_x_bitdepth_scale, tmp258
 418              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 419              		.loc 1 94 20 view .LVU87
 420 01b0 01E0A003 		moveq	lr, #1	@ tmp272,
 421 01b4 00E0A013 		movne	lr, #0	@ tmp272,
 422              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 423              		.loc 1 102 74 view .LVU88
 424 01b8 2BB8A0E1 		lsr	fp, fp, #16	@ tmp261, tmp259,
 425              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 426              		.loc 1 94 19 view .LVU89
 427 01bc FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01c0 01E08E03 		orreq	lr, lr, #1	@,, tmp277, tmp272
 429              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 430              		.loc 1 106 47 view .LVU90
 431 01c4 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp265, g_armwave_state.bitdepth_height, tmp261, scale_value
 432              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 433              		.loc 1 94 19 view .LVU91
 434 01c8 00005EE3 		cmp	lr, #0	@ tmp277,
 435              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 436              		.loc 1 106 47 view .LVU92
 437 01cc 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_111, *_111
 438 01d0 011081E2 		add	r1, r1, #1	@ tmp268, *_111,
 439 01d4 0C10C5E7 		strb	r1, [r5, ip]	@ tmp268, *_111
 440              		.loc 1 107 17 is_stmt 1 view .LVU93
 441              	.LVL16:
  91:armwave.c     ****                 
 442              		.loc 1 91 17 view .LVU94
  94:armwave.c     ****                     continue;
 443              		.loc 1 94 17 view .LVU95
 444              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 445              		.loc 1 94 19 is_stmt 0 view .LVU96
 446 01d8 1600001A 		bne	.L20		@,
 447              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 448              		.loc 1 102 34 view .LVU97
 449 01dc 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 451              		.loc 1 102 99 view .LVU98
 452 01e0 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 20 view .LVU99
 455 01e4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL17:
 457              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 458              		.loc 1 102 34 view .LVU100
 459 01e8 910A0AE0 		mul	r10, r1, r10	@ tmp280, g_armwave_state.cmp_x_bitdepth_scale, tmp279
 460              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 461              		.loc 1 94 20 view .LVU101
 462 01ec 0110A003 		moveq	r1, #1	@ tmp292,
 463 01f0 0010A013 		movne	r1, #0	@ tmp292,
 464              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 465              		.loc 1 102 74 view .LVU102
 466 01f4 2AA8A0E1 		lsr	r10, r10, #16	@ tmp282, tmp280,
 467              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 468              		.loc 1 94 19 view .LVU103
 469 01f8 FF0053E3 		cmp	r3, #255	@ word,
 470 01fc 01108103 		orreq	r1, r1, #1	@,, tmp297, tmp292
 471              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 472              		.loc 1 106 47 view .LVU104
 473 0200 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp286, g_armwave_state.bitdepth_height, tmp282, scale_value
 474              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 475              		.loc 1 94 19 view .LVU105
 476 0204 000051E3 		cmp	r1, #0	@ tmp297,
 477              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 478              		.loc 1 106 47 view .LVU106
 479 0208 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_141, *_141
 480 020c 011081E2 		add	r1, r1, #1	@ tmp289, *_141,
 481 0210 0010C5E7 		strb	r1, [r5, r0]	@ tmp289, *_141
 482              		.loc 1 107 17 is_stmt 1 view .LVU107
 483              	.LVL18:
  91:armwave.c     ****                 
 484              		.loc 1 91 17 view .LVU108
  94:armwave.c     ****                     continue;
 485              		.loc 1 94 17 view .LVU109
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 19 is_stmt 0 view .LVU110
 488 0214 0700001A 		bne	.L20		@,
 489              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 490              		.loc 1 102 34 view .LVU111
 491 0218 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 493              		.loc 1 102 99 view .LVU112
 494 021c 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 496              		.loc 1 102 34 view .LVU113
 497 0220 910909E0 		mul	r9, r1, r9	@ tmp300, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 498              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 499              		.loc 1 102 74 view .LVU114
 500 0224 2998A0E1 		lsr	r9, r9, #16	@ tmp302, tmp300,
 501              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 502              		.loc 1 106 47 view .LVU115
 503 0228 903923E0 		mla	r3, r0, r9, r3	@ tmp306, g_armwave_state.bitdepth_height, tmp302, word
 504 022c 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_171, *_171
 505 0230 011081E2 		add	r1, r1, #1	@ tmp309, *_171,
 506 0234 0310C5E7 		strb	r1, [r5, r3]	@ tmp309, *_171
 507              		.loc 1 107 17 is_stmt 1 view .LVU116
 508              	.LVL19:
 509              	.L20:
 510              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 511              		.loc 1 84 37 is_stmt 0 view .LVU117
 512 0238 042082E2 		add	r2, r2, #4	@ yy, yy,
 513              	.LVL20:
 514              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 515              		.loc 1 84 9 view .LVU118
 516 023c 020056E1 		cmp	r6, r2	@ height, yy
 517 0240 BAFFFF8A 		bhi	.L17		@,
 518              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 79 44 view .LVU119
 520 0244 18209DE5 		ldr	r2, [sp, #24]	@ w, %sfp
 521              	.LVL21:
 522              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 79 5 view .LVU120
 524 0248 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 525              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 79 44 view .LVU121
 527 024c 012082E2 		add	r2, r2, #1	@ w, w,
 528              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 79 5 view .LVU122
 530 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 531              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 79 44 view .LVU123
 533 0254 18208DE5 		str	r2, [sp, #24]	@ w, %sfp
 534              	.LVL22:
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 5 view .LVU124
 537 0258 ADFFFFBA 		blt	.L18		@,
 538              	.LVL23:
 539              	.L11:
 540              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 541              		.loc 1 111 1 view .LVU125
 542 025c 24D08DE2 		add	sp, sp, #36	@,,
 543              		.cfi_def_cfa_offset 36
 544              		@ sp needed	@
 545 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 546              	.LVL24:
 547              	.L28:
 548              		.loc 1 111 1 view .LVU126
 549              		.align	2
 550              	.L27:
 551 0264 00000000 		.word	g_armwave_state
 552 0268 20000000 		.word	.LC2
 553              		.cfi_endproc
 554              	.LFE59:
 556              		.align	2
 557              		.global	armwave_fill_pixbuf_scaled
 558              		.syntax unified
 559              		.arm
 560              		.fpu vfp
 562              	armwave_fill_pixbuf_scaled:
 563              	.LVL25:
 564              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 565              		.loc 1 173 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 569              		.loc 1 174 5 view .LVU128
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 570              		.loc 1 176 5 view .LVU129
 177:armwave.c     ****     uint8_t r, g, b, value; 
 571              		.loc 1 177 5 view .LVU130
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 572              		.loc 1 179 5 view .LVU131
 573              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 173 1 is_stmt 0 view .LVU132
 575 026c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 576              		.cfi_def_cfa_offset 36
 577              		.cfi_offset 4, -36
 578              		.cfi_offset 5, -32
 579              		.cfi_offset 6, -28
 580              		.cfi_offset 7, -24
 581              		.cfi_offset 8, -20
 582              		.cfi_offset 9, -16
 583              		.cfi_offset 10, -12
 584              		.cfi_offset 11, -8
 585              		.cfi_offset 14, -4
 586              	@ armwave.c:183:     assert(out_buffer != NULL);
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 181:armwave.c     ****     uint32_t offset;
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 587              		.loc 1 183 5 view .LVU133
 588 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 589              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 590              		.loc 1 179 15 view .LVU134
 591 0274 5C519FE5 		ldr	r5, .L51	@ tmp221,
 592              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 593              		.loc 1 173 1 view .LVU135
 594 0278 0CD04DE2 		sub	sp, sp, #12	@,,
 595              		.cfi_def_cfa_offset 48
 596              	@ armwave.c:179:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 597              		.loc 1 179 15 view .LVU136
 598 027c 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 599              	.LVL26:
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 600              		.loc 1 180 5 is_stmt 1 view .LVU137
 181:armwave.c     **** 
 601              		.loc 1 181 5 view .LVU138
 602              		.loc 1 183 5 view .LVU139
 603 0280 4F00000A 		beq	.L48		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this
 186:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 604              		.loc 1 186 5 view .LVU140
 605              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 186 59 is_stmt 0 view .LVU141
 607 0284 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 608 0288 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 609              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 186 5 view .LVU142
 611 028c 0110A0E3 		mov	r1, #1	@,
 612              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 186 59 view .LVU143
 614 0290 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:186:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 186 5 view .LVU144
 617 0294 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 618 0298 FEFFFFEB 		bl	memset		@
 619              	.LVL27:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 620              		.loc 1 188 5 is_stmt 1 view .LVU145
 621              	@ armwave.c:188:     npix = g_armwave_state.target_width * 256; 
 622              		.loc 1 188 10 is_stmt 0 view .LVU146
 623 029c 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 02a0 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 625              	.LVL28:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 626              		.loc 1 191 5 is_stmt 1 view .LVU147
 627              		.loc 1 191 5 is_stmt 0 view .LVU148
 628 02a4 000058E3 		cmp	r8, #0	@ npix,
 629 02a8 0C0000DA 		ble	.L29		@,
 630              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 193:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 194:armwave.c     ****         // most normal waveforms.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 4; w++) {
 199:armwave.c     ****                 value = wave_word & 0xff;
 200:armwave.c     ****                 wave_word >>= 8;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 204 52 view .LVU149
 632 02ac FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 633              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 203 52 view .LVU150
 635 02b0 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 636              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // Do line scaling as necessary.
 215:armwave.c     ****                     /*
 216:armwave.c     ****                     nsub = n + w;
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 221:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                     */
 225:armwave.c     **** 
 226:armwave.c     ****                     nsub = n + w;
 227:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 637              		.loc 1 227 57 view .LVU151
 638 02b4 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 639              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 640              		.loc 1 204 52 view .LVU152
 641 02b8 00308DE5 		str	r3, [sp]	@ _15, %sfp
 642              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 205 52 view .LVU153
 644 02bc F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 645              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 191 11 view .LVU154
 647 02c0 0010A0E3 		mov	r1, #0	@ n,
 648              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 205 52 view .LVU155
 650 02c4 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 651              	.LVL29:
 652              	.L36:
 195:armwave.c     **** 
 653              		.loc 1 195 9 is_stmt 1 view .LVU156
 654              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 655              		.loc 1 195 19 is_stmt 0 view .LVU157
 656 02c8 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 657              	.LVL30:
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 658              		.loc 1 197 9 is_stmt 1 view .LVU158
 659              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 660              		.loc 1 197 11 is_stmt 0 view .LVU159
 661 02cc 000053E3 		cmp	r3, #0	@ wave_word,
 662 02d0 0400001A 		bne	.L49		@,
 663              	.L32:
 664              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 191 28 view .LVU160
 666 02d4 041081E2 		add	r1, r1, #4	@ n, n,
 667              	.LVL31:
 668              	@ armwave.c:191:     for(n = 0; n < npix; n += 4) {
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 191 5 view .LVU161
 670 02d8 010058E1 		cmp	r8, r1	@ npix, n
 671 02dc F9FFFFCA 		bgt	.L36		@,
 672              	.LVL32:
 673              	.L29:
 674              	@ armwave.c:239: }
 228:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 229:armwave.c     ****                     xx = (nsub >> 8);
 230:armwave.c     **** 
 231:armwave.c     ****                     for(y = yy; y < ye; y++) {
 232:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 233:armwave.c     ****                         *(out_buffer_base + offset) = word;
 234:armwave.c     ****                     }
 235:armwave.c     ****                 }
 236:armwave.c     ****             }
 237:armwave.c     ****         }
 238:armwave.c     ****     }
 239:armwave.c     **** }
 675              		.loc 1 239 1 view .LVU162
 676 02e0 0CD08DE2 		add	sp, sp, #12	@,,
 677              		.cfi_remember_state
 678              		.cfi_def_cfa_offset 36
 679              		@ sp needed	@
 680 02e4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 681              	.LVL33:
 682              	.L49:
 683              		.cfi_restore_state
 684              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 685              		.loc 1 202 19 view .LVU163
 686 02e8 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 687              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 198 19 view .LVU164
 689 02ec 0070A0E3 		mov	r7, #0	@ w,
 690              	.LVL34:
 199:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 199 17 is_stmt 1 view .LVU165
 200:armwave.c     **** 
 692              		.loc 1 200 17 view .LVU166
 693              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 694              		.loc 1 200 27 is_stmt 0 view .LVU167
 695 02f0 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 696              	.LVL35:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 202 17 is_stmt 1 view .LVU168
 698              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 699              		.loc 1 202 19 is_stmt 0 view .LVU169
 700 02f4 0500001A 		bne	.L50		@,
 701              	.L33:
 702              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 198 32 view .LVU170
 704 02f8 017087E2 		add	r7, r7, #1	@ w, w,
 705              	.LVL36:
 706              	@ armwave.c:198:             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 707              		.loc 1 198 13 view .LVU171
 708 02fc 040057E3 		cmp	r7, #4	@ w,
 709 0300 F3FFFF0A 		beq	.L32		@,
 199:armwave.c     ****                 wave_word >>= 8;
 710              		.loc 1 199 17 is_stmt 1 view .LVU172
 711              	.LVL37:
 200:armwave.c     **** 
 712              		.loc 1 200 17 view .LVU173
 713              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 202 19 is_stmt 0 view .LVU174
 715 0304 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 716              	@ armwave.c:200:                 wave_word >>= 8;
 200:armwave.c     **** 
 717              		.loc 1 200 27 view .LVU175
 718 0308 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 202 17 is_stmt 1 view .LVU176
 721              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 202 19 is_stmt 0 view .LVU177
 723 030c F9FFFF0A 		beq	.L33		@,
 724              	.L50:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 203 21 is_stmt 1 view .LVU178
 726              	.LVL39:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 204 21 view .LVU179
 205:armwave.c     **** 
 728              		.loc 1 205 21 view .LVU180
 207:armwave.c     ****                     g = MIN(gg, 255);
 729              		.loc 1 207 21 view .LVU181
 208:armwave.c     ****                     b = MIN(bb, 255);
 730              		.loc 1 208 21 view .LVU182
 209:armwave.c     **** 
 731              		.loc 1 209 21 view .LVU183
 212:armwave.c     **** 
 732              		.loc 1 212 21 view .LVU184
 733              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 734              		.loc 1 205 55 is_stmt 0 view .LVU185
 735 0310 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 736 0314 07E081E0 		add	lr, r1, r7	@ _126, n, w
 737 0318 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 738              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 227 32 view .LVU186
 740 031c 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 741              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 228 41 view .LVU187
 743 0320 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 744              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 227 40 view .LVU188
 746 0324 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 747              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 748              		.loc 1 228 41 view .LVU189
 749 0328 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 750              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 204 55 view .LVU190
 752 032c 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 753              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 754              		.loc 1 205 24 view .LVU191
 755 0330 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 756              	.LVL40:
 757              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 227 40 view .LVU192
 759 0334 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 760              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 228 46 view .LVU193
 762 0338 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 763              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 204 55 view .LVU194
 765 033c 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 766              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 203 55 view .LVU195
 768 0340 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 769              	.LVL41:
 770              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 771              		.loc 1 209 25 view .LVU196
 772 0344 FF005AE3 		cmp	r10, #255	@ bb,
 773              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 204 24 view .LVU197
 775 0348 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 776              	.LVL42:
 777              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 227 40 view .LVU198
 779 034c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 780              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 228 46 view .LVU199
 782 0350 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 783              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 784              		.loc 1 203 24 view .LVU200
 785 0354 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 786              	.LVL43:
 787              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 788              		.loc 1 209 25 view .LVU201
 789 0358 FFA0A0A3 		movge	r10, #255	@ bb,
 790              	.LVL44:
 791              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 208 25 view .LVU202
 793 035c FF005CE3 		cmp	ip, #255	@ gg,
 794 0360 FFC0A0A3 		movge	ip, #255	@ gg,
 795              	.LVL45:
 796              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 797              		.loc 1 207 25 view .LVU203
 798 0364 FF0050E3 		cmp	r0, #255	@ rr,
 799              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 800              		.loc 1 212 56 view .LVU204
 801 0368 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 802              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 227 24 view .LVU205
 804 036c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 805              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 806              		.loc 1 207 25 view .LVU206
 807 0370 FF00A0A3 		movge	r0, #255	@ rr,
 808              	.LVL46:
 809              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 810              		.loc 1 212 44 view .LVU207
 811 0374 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 812 0378 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 813              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 814              		.loc 1 212 56 view .LVU208
 815 037c 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 816              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 817              		.loc 1 212 51 view .LVU209
 818 0380 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 819              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 820              		.loc 1 212 62 view .LVU210
 821 0384 7000EFE6 		uxtb	r0, r0	@ rr, rr
 822 0388 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 823              	@ armwave.c:227:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 227 24 view .LVU211
 825 038c 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 826              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 827              		.loc 1 228 24 view .LVU212
 828 0390 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 829              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 830              		.loc 1 212 26 view .LVU213
 831 0394 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 832              	.LVL47:
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 833              		.loc 1 226 21 is_stmt 1 view .LVU214
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 834              		.loc 1 227 21 view .LVU215
 228:armwave.c     ****                     xx = (nsub >> 8);
 835              		.loc 1 228 21 view .LVU216
 836              	@ armwave.c:229:                     xx = (nsub >> 8);
 229:armwave.c     **** 
 837              		.loc 1 229 32 is_stmt 0 view .LVU217
 838 0398 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 839              	.LVL48:
 840              	@ armwave.c:228:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 841              		.loc 1 228 24 view .LVU218
 842 039c 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 843              	.LVL49:
 229:armwave.c     **** 
 844              		.loc 1 229 21 is_stmt 1 view .LVU219
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 231 21 view .LVU220
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 231 21 is_stmt 0 view .LVU221
 847 03a0 090052E1 		cmp	r2, r9	@ yy, ye
 848 03a4 D3FFFF2A 		bcs	.L33		@,
 849              	.LVL50:
 850              	.L34:
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 851              		.loc 1 232 25 is_stmt 1 discriminator 3 view .LVU222
 233:armwave.c     ****                     }
 852              		.loc 1 233 25 discriminator 3 view .LVU223
 853              	@ armwave.c:232:                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 854              		.loc 1 232 43 is_stmt 0 discriminator 3 view .LVU224
 855 03a8 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 856              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 857              		.loc 1 233 43 discriminator 3 view .LVU225
 858 03ac 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 859              	.LVL51:
 860              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 231 42 discriminator 3 view .LVU226
 862 03b0 012082E2 		add	r2, r2, #1	@ yy, yy,
 863              	.LVL52:
 864              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 231 21 discriminator 3 view .LVU227
 866 03b4 020059E1 		cmp	r9, r2	@ ye, yy
 867              	@ armwave.c:233:                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 868              		.loc 1 233 53 discriminator 3 view .LVU228
 869 03b8 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 870              	@ armwave.c:231:                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 231 21 discriminator 3 view .LVU229
 872 03bc F9FFFF1A 		bne	.L34		@,
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 231 21 discriminator 3 view .LVU230
 874 03c0 CCFFFFEA 		b	.L33		@
 875              	.LVL53:
 876              	.L48:
 183:armwave.c     **** 
 877              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU231
 878 03c4 10309FE5 		ldr	r3, .L51+4	@,
 879 03c8 B720A0E3 		mov	r2, #183	@,
 880 03cc 0C109FE5 		ldr	r1, .L51+8	@,
 881 03d0 0C009FE5 		ldr	r0, .L51+12	@,
 882              	.LVL54:
 183:armwave.c     **** 
 883              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU232
 884 03d4 FEFFFFEB 		bl	__assert_fail		@
 885              	.LVL55:
 886              	.L52:
 887              		.align	2
 888              	.L51:
 889 03d8 00000000 		.word	g_armwave_state
 890 03dc 00000000 		.word	.LANCHOR0
 891 03e0 78000000 		.word	.LC3
 892 03e4 84000000 		.word	.LC4
 893              		.cfi_endproc
 894              	.LFE60:
 896              		.align	2
 897              		.global	armwave_generate
 898              		.syntax unified
 899              		.arm
 900              		.fpu vfp
 902              	armwave_generate:
 903              	.LFB61:
 240:armwave.c     **** 
 241:armwave.c     **** /*
 242:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 243:armwave.c     ****  */
 244:armwave.c     **** void armwave_generate()
 245:armwave.c     **** {
 904              		.loc 1 245 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 246:armwave.c     ****     uint32_t yy;
 908              		.loc 1 246 5 view .LVU234
 247:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 909              		.loc 1 247 5 view .LVU235
 910              	.LVL56:
 248:armwave.c     **** 
 249:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 249 5 view .LVU236
 912              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 913              		.loc 1 245 1 is_stmt 0 view .LVU237
 914 03e8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 915              		.cfi_def_cfa_offset 36
 916              		.cfi_offset 4, -36
 917              		.cfi_offset 5, -32
 918              		.cfi_offset 6, -28
 919              		.cfi_offset 7, -24
 920              		.cfi_offset 8, -20
 921              		.cfi_offset 9, -16
 922              		.cfi_offset 10, -12
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 926              		.loc 1 249 5 view .LVU238
 927 03ec 0010A0E3 		mov	r1, #0	@,
 928              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 929              		.loc 1 249 58 view .LVU239
 930 03f0 E8919FE5 		ldr	r9, .L73	@ tmp330,
 931              	@ armwave.c:245: {
 245:armwave.c     ****     uint32_t yy;
 932              		.loc 1 245 1 view .LVU240
 933 03f4 2CD04DE2 		sub	sp, sp, #44	@,,
 934              		.cfi_def_cfa_offset 80
 935              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 250:armwave.c     **** 
 251:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 252:armwave.c     ****     for(yy = 0; yy < 10; yy++) {
 936              		.loc 1 252 12 view .LVU241
 937 03f8 00B0A0E3 		mov	fp, #0	@ yy,
 938              	@ armwave.c:249:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 249:armwave.c     **** 
 939              		.loc 1 249 5 view .LVU242
 940 03fc 502099E5 		ldr	r2, [r9, #80]	@, g_armwave_state.ch_buff_size
 941 0400 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 942 0404 FEFFFFEB 		bl	memset		@
 943              	.LVL57:
 944              		.loc 1 252 5 is_stmt 1 view .LVU243
 945              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 946              		.loc 1 252 12 is_stmt 0 view .LVU244
 947 0408 0B80A0E1 		mov	r8, fp	@ yy, yy
 948              	.LVL58:
 949              	.L55:
 253:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 254:armwave.c     **** 
 255:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 950              		.loc 1 255 9 is_stmt 1 discriminator 3 view .LVU245
 951 040c 445099E5 		ldr	r5, [r9, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 952              	.LBB10:
 953              	.LBB11:
 954              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 955              		.loc 1 71 82 is_stmt 0 discriminator 3 view .LVU246
 956 0410 241099E5 		ldr	r1, [r9, #36]	@ _16, g_armwave_state.cmp_x_bitdepth_scale
 957              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 958              		.loc 1 71 147 discriminator 3 view .LVU247
 959 0414 402099E5 		ldr	r2, [r9, #64]	@ _19, g_armwave_state.bitdepth_height
 960              	.LBE11:
 961              	.LBE10:
 962              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 963              		.loc 1 255 9 discriminator 3 view .LVU248
 964 0418 950805E0 		mul	r5, r5, r8	@ _6, g_armwave_state.slice_height, yy
 965              	.LBB15:
 966              	.LBB12:
 967              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 968              		.loc 1 73 5 discriminator 3 view .LVU249
 969 041c 10208DE5 		str	r2, [sp, #16]	@ _19,
 970              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 971              		.loc 1 71 40 discriminator 3 view .LVU250
 972 0420 044099E5 		ldr	r4, [r9, #4]	@ _15, g_armwave_state.ch1_buffer
 973              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 974              		.loc 1 71 65 discriminator 3 view .LVU251
 975 0424 910503E0 		mul	r3, r1, r5	@ tmp233, _16, _6
 976              	.LBE12:
 977              	.LBE15:
 978              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 979              		.loc 1 255 9 discriminator 3 view .LVU252
 980 0428 480099E5 		ldr	r0, [r9, #72]	@ _8, g_armwave_state.slice_record_height
 981              	.LBB16:
 982              	.LBB13:
 983              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 984              		.loc 1 73 5 discriminator 3 view .LVU253
 985 042c 0C108DE5 		str	r1, [sp, #12]	@ _16,
 986              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 987              		.loc 1 71 105 discriminator 3 view .LVU254
 988 0430 2338A0E1 		lsr	r3, r3, #16	@ tmp234, tmp233,
 989              	.LBE13:
 990              	.LBE16:
 991              	@ armwave.c:255:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 992              		.loc 1 255 9 discriminator 3 view .LVU255
 993 0434 1C008DE5 		str	r0, [sp, #28]	@ _8, %sfp
 994              	.LVL59:
 995              	.LBB17:
 996              	.LBI10:
  62:armwave.c     **** {
 997              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU256
 998              	.LBB14:
  64:armwave.c     ****     uint32_t value, word;
 999              		.loc 1 64 5 discriminator 3 view .LVU257
  65:armwave.c     ****     uint8_t *wave_base;
 1000              		.loc 1 65 5 discriminator 3 view .LVU258
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1001              		.loc 1 66 5 discriminator 3 view .LVU259
  67:armwave.c     ****     uint8_t *write_buffer;
 1002              		.loc 1 67 5 discriminator 3 view .LVU260
  68:armwave.c     **** 
 1003              		.loc 1 68 5 discriminator 3 view .LVU261
  71:armwave.c     **** 
 1004              		.loc 1 71 5 discriminator 3 view .LVU262
 1005              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1006              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU263
 1007 0438 920302E0 		mul	r2, r2, r3	@ _21, _19, tmp234
 1008              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1009              		.loc 1 73 5 discriminator 3 view .LVU264
 1010 043c 0430A0E1 		mov	r3, r4	@, _15
 1011              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1012              		.loc 1 71 23 discriminator 3 view .LVU265
 1013 0440 024084E0 		add	r4, r4, r2	@ write_buffer_base, _15, _21
 1014              	.LVL60:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1015              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU266
 1016 0444 00208DE5 		str	r2, [sp]	@ _21,
 1017 0448 08008DE5 		str	r0, [sp, #8]	@ _8,
 1018 044c 04508DE5 		str	r5, [sp, #4]	@ _6,
 1019 0450 0420A0E1 		mov	r2, r4	@, write_buffer_base
 1020 0454 141099E5 		ldr	r1, [r9, #20]	@, g_armwave_state.wave_buffer
 1021 0458 84019FE5 		ldr	r0, .L73+4	@,
 1022              	.LVL61:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1023              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU267
 1024 045c FEFFFFEB 		bl	printf		@
 1025              	.LVL62:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1026              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU268
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1027              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU269
 1028 0460 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1029 0464 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 1030 0468 570000DA 		ble	.L63		@,
 1031 046c 1C309DE5 		ldr	r3, [sp, #28]	@ _8, %sfp
 1032 0470 000053E3 		cmp	r3, #0	@ _8,
 1033 0474 5400000A 		beq	.L63		@,
 1034              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1035              		.loc 1 79 11 view .LVU270
 1036 0478 0060A0E3 		mov	r6, #0	@ w,
 1037 047c 043045E2 		sub	r3, r5, #4	@ tmp331, _6,
 1038 0480 20308DE5 		str	r3, [sp, #32]	@ tmp331, %sfp
 1039 0484 24808DE5 		str	r8, [sp, #36]	@ yy, %sfp
 1040              	.LVL63:
 1041              	.L62:
  80:armwave.c     **** 
 1042              		.loc 1 80 9 is_stmt 1 view .LVU271
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 84 9 view .LVU272
 1044              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1045              		.loc 1 80 64 is_stmt 0 view .LVU273
 1046 0488 343099E5 		ldr	r3, [r9, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1047 048c 20209DE5 		ldr	r2, [sp, #32]	@ tmp331, %sfp
 1048 0490 14E099E5 		ldr	lr, [r9, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1049 0494 932623E0 		mla	r3, r3, r6, r2	@ tmp245, g_armwave_state.wave_stride, w, tmp331
 1050              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1051              		.loc 1 84 16 view .LVU274
 1052 0498 0010A0E3 		mov	r1, #0	@ yy,
 1053 049c 03E08EE0 		add	lr, lr, r3	@ ivtmp.66, g_armwave_state.wave_buffer, tmp245
 1054              	.LVL64:
 1055              	.L61:
  87:armwave.c     **** 
 1056              		.loc 1 87 13 is_stmt 1 view .LVU275
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1057              		.loc 1 101 17 view .LVU276
 106:armwave.c     ****                 word >>= 8;
 1058              		.loc 1 106 17 view .LVU277
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1059              		.loc 1 101 17 view .LVU278
 106:armwave.c     ****                 word >>= 8;
 1060              		.loc 1 106 17 view .LVU279
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1061              		.loc 1 101 17 view .LVU280
 106:armwave.c     ****                 word >>= 8;
 1062              		.loc 1 106 17 view .LVU281
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1063              		.loc 1 101 17 view .LVU282
 106:armwave.c     ****                 word >>= 8;
 1064              		.loc 1 106 17 view .LVU283
 1065              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1066              		.loc 1 87 18 is_stmt 0 view .LVU284
 1067 04a0 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _251, offset: 0B]
 1068              	.LVL65:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1069              		.loc 1 89 13 is_stmt 1 view .LVU285
  91:armwave.c     ****                 
 1070              		.loc 1 91 17 view .LVU286
  94:armwave.c     ****                     continue;
 1071              		.loc 1 94 17 view .LVU287
 1072              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1073              		.loc 1 102 34 is_stmt 0 view .LVU288
 1074 04a4 01B081E2 		add	fp, r1, #1	@ tmp275, yy,
 1075              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1076              		.loc 1 94 20 view .LVU289
 1077 04a8 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 1078 04ac 0120A003 		moveq	r2, #1	@ tmp248,
 1079 04b0 0020A013 		movne	r2, #0	@ tmp248,
 1080              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1081              		.loc 1 94 19 view .LVU290
 1082 04b4 FF0057E3 		cmp	r7, #255	@ scale_value,
 1083 04b8 01208203 		orreq	r2, r2, #1	@,, tmp253, tmp248
 1084 04bc 000052E3 		cmp	r2, #0	@ tmp253,
 1085              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1086              		.loc 1 102 34 view .LVU291
 1087 04c0 02A081E2 		add	r10, r1, #2	@ tmp296, yy,
 1088 04c4 038081E2 		add	r8, r1, #3	@ tmp316, yy,
 1089              	.LVL66:
 1090              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1091              		.loc 1 107 22 view .LVU292
 1092 04c8 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 1093 04cc 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 1094              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1095              		.loc 1 94 19 view .LVU293
 1096 04d0 3400001A 		bne	.L64		@,
 1097              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1098              		.loc 1 102 34 view .LVU294
 1099 04d4 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1100              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 20 view .LVU295
 1102 04d8 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 1103 04dc 0150A003 		moveq	r5, #1	@ tmp268,
 1104              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1105              		.loc 1 102 34 view .LVU296
 1106 04e0 920102E0 		mul	r2, r2, r1	@ tmp255, g_armwave_state.cmp_x_bitdepth_scale, yy
 1107              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1108              		.loc 1 94 20 view .LVU297
 1109 04e4 0050A013 		movne	r5, #0	@ tmp268,
 1110              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1111              		.loc 1 94 19 view .LVU298
 1112 04e8 FF005CE3 		cmp	ip, #255	@ scale_value,
 1113 04ec 01508503 		orreq	r5, r5, #1	@,, tmp273, tmp268
 1114 04f0 000055E3 		cmp	r5, #0	@ tmp273,
 1115              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1116              		.loc 1 106 47 view .LVU299
 1117 04f4 405099E5 		ldr	r5, [r9, #64]	@ tmp346, g_armwave_state.bitdepth_height
 1118              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1119              		.loc 1 102 74 view .LVU300
 1120 04f8 2228A0E1 		lsr	r2, r2, #16	@ tmp257, tmp255,
 1121              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1122              		.loc 1 106 47 view .LVU301
 1123 04fc 957222E0 		mla	r2, r5, r2, r7	@ tmp261, tmp346, tmp257, scale_value
 1124 0500 0250D4E7 		ldrb	r5, [r4, r2]	@ zero_extendqisi2	@ *_91, *_91
 1125 0504 015085E2 		add	r5, r5, #1	@ tmp264, *_91,
 1126 0508 0250C4E7 		strb	r5, [r4, r2]	@ tmp264, *_91
 1127              	.LVL67:
 107:armwave.c     ****             }
 1128              		.loc 1 107 17 is_stmt 1 view .LVU302
  91:armwave.c     ****                 
 1129              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1130              		.loc 1 94 17 view .LVU304
 1131              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 19 is_stmt 0 view .LVU305
 1133 050c 2500001A 		bne	.L64		@,
 1134              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1135              		.loc 1 102 34 view .LVU306
 1136 0510 245099E5 		ldr	r5, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1137              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1138              		.loc 1 102 99 view .LVU307
 1139 0514 402099E5 		ldr	r2, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1140              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1141              		.loc 1 94 20 view .LVU308
 1142 0518 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 1143              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1144              		.loc 1 102 34 view .LVU309
 1145 051c 950B0BE0 		mul	fp, r5, fp	@ tmp276, g_armwave_state.cmp_x_bitdepth_scale, tmp275
 1146              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1147              		.loc 1 94 20 view .LVU310
 1148 0520 0150A003 		moveq	r5, #1	@ tmp289,
 1149 0524 0050A013 		movne	r5, #0	@ tmp289,
 1150              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1151              		.loc 1 102 74 view .LVU311
 1152 0528 2BB8A0E1 		lsr	fp, fp, #16	@ tmp278, tmp276,
 1153              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1154              		.loc 1 94 19 view .LVU312
 1155 052c FF0050E3 		cmp	r0, #255	@ scale_value,
 1156 0530 01508503 		orreq	r5, r5, #1	@,, tmp294, tmp289
 1157              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1158              		.loc 1 106 47 view .LVU313
 1159 0534 92CB2CE0 		mla	ip, r2, fp, ip	@ tmp282, g_armwave_state.bitdepth_height, tmp278, scale_value
 1160              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1161              		.loc 1 94 19 view .LVU314
 1162 0538 000055E3 		cmp	r5, #0	@ tmp294,
 1163              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1164              		.loc 1 106 47 view .LVU315
 1165 053c 0C20D4E7 		ldrb	r2, [r4, ip]	@ zero_extendqisi2	@ *_121, *_121
 1166 0540 012082E2 		add	r2, r2, #1	@ tmp285, *_121,
 1167 0544 0C20C4E7 		strb	r2, [r4, ip]	@ tmp285, *_121
 107:armwave.c     ****             }
 1168              		.loc 1 107 17 is_stmt 1 view .LVU316
 1169              	.LVL68:
  91:armwave.c     ****                 
 1170              		.loc 1 91 17 view .LVU317
  94:armwave.c     ****                     continue;
 1171              		.loc 1 94 17 view .LVU318
 1172              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1173              		.loc 1 94 19 is_stmt 0 view .LVU319
 1174 0548 1600001A 		bne	.L64		@,
 1175              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1176              		.loc 1 102 34 view .LVU320
 1177 054c 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1178              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1179              		.loc 1 102 99 view .LVU321
 1180 0550 40C099E5 		ldr	ip, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1181              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1182              		.loc 1 94 20 view .LVU322
 1183 0554 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1184              	.LVL69:
 1185              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1186              		.loc 1 102 34 view .LVU323
 1187 0558 920A0AE0 		mul	r10, r2, r10	@ tmp297, g_armwave_state.cmp_x_bitdepth_scale, tmp296
 1188              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1189              		.loc 1 94 20 view .LVU324
 1190 055c 0120A003 		moveq	r2, #1	@ tmp309,
 1191 0560 0020A013 		movne	r2, #0	@ tmp309,
 1192              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1193              		.loc 1 102 74 view .LVU325
 1194 0564 2AA8A0E1 		lsr	r10, r10, #16	@ tmp299, tmp297,
 1195              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1196              		.loc 1 94 19 view .LVU326
 1197 0568 FF0053E3 		cmp	r3, #255	@ word,
 1198 056c 01208203 		orreq	r2, r2, #1	@,, tmp314, tmp309
 1199              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1200              		.loc 1 106 47 view .LVU327
 1201 0570 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp303, g_armwave_state.bitdepth_height, tmp299, scale_value
 1202              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 19 view .LVU328
 1204 0574 000052E3 		cmp	r2, #0	@ tmp314,
 1205              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1206              		.loc 1 106 47 view .LVU329
 1207 0578 0020D4E7 		ldrb	r2, [r4, r0]	@ zero_extendqisi2	@ *_151, *_151
 1208 057c 012082E2 		add	r2, r2, #1	@ tmp306, *_151,
 1209 0580 0020C4E7 		strb	r2, [r4, r0]	@ tmp306, *_151
 107:armwave.c     ****             }
 1210              		.loc 1 107 17 is_stmt 1 view .LVU330
 1211              	.LVL70:
  91:armwave.c     ****                 
 1212              		.loc 1 91 17 view .LVU331
  94:armwave.c     ****                     continue;
 1213              		.loc 1 94 17 view .LVU332
 1214              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1215              		.loc 1 94 19 is_stmt 0 view .LVU333
 1216 0584 0700001A 		bne	.L64		@,
 1217              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1218              		.loc 1 102 34 view .LVU334
 1219 0588 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1220              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1221              		.loc 1 102 99 view .LVU335
 1222 058c 400099E5 		ldr	r0, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1223              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1224              		.loc 1 102 34 view .LVU336
 1225 0590 920808E0 		mul	r8, r2, r8	@ tmp317, g_armwave_state.cmp_x_bitdepth_scale, tmp316
 1226              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1227              		.loc 1 102 74 view .LVU337
 1228 0594 2888A0E1 		lsr	r8, r8, #16	@ tmp319, tmp317,
 1229              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1230              		.loc 1 106 47 view .LVU338
 1231 0598 903823E0 		mla	r3, r0, r8, r3	@ tmp323, g_armwave_state.bitdepth_height, tmp319, word
 1232 059c 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_181, *_181
 1233 05a0 012082E2 		add	r2, r2, #1	@ tmp326, *_181,
 1234 05a4 0320C4E7 		strb	r2, [r4, r3]	@ tmp326, *_181
 107:armwave.c     ****             }
 1235              		.loc 1 107 17 is_stmt 1 view .LVU339
 1236              	.LVL71:
 1237              	.L64:
 1238              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1239              		.loc 1 84 9 is_stmt 0 view .LVU340
 1240 05a8 1C309DE5 		ldr	r3, [sp, #28]	@ _8, %sfp
 1241              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1242              		.loc 1 84 37 view .LVU341
 1243 05ac 041081E2 		add	r1, r1, #4	@ yy, yy,
 1244              	.LVL72:
 1245              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1246              		.loc 1 84 9 view .LVU342
 1247 05b0 010053E1 		cmp	r3, r1	@ _8, yy
 1248 05b4 B9FFFF8A 		bhi	.L61		@,
 1249              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1250              		.loc 1 79 5 view .LVU343
 1251 05b8 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1252              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1253              		.loc 1 79 44 view .LVU344
 1254 05bc 016086E2 		add	r6, r6, #1	@ w, w,
 1255              	.LVL73:
 1256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1257              		.loc 1 79 5 view .LVU345
 1258 05c0 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 1259 05c4 AFFFFFBA 		blt	.L62		@,
 1260 05c8 24809DE5 		ldr	r8, [sp, #36]	@ yy, %sfp
 1261              	.LVL74:
 1262              	.L63:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1263              		.loc 1 79 5 view .LVU346
 1264              	.LBE14:
 1265              	.LBE17:
 256:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 1266              		.loc 1 256 9 is_stmt 1 view .LVU347
 257:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 1267              		.loc 1 257 9 view .LVU348
 1268              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1269              		.loc 1 252 28 is_stmt 0 view .LVU349
 1270 05cc 018088E2 		add	r8, r8, #1	@ yy, yy,
 1271              	.LVL75:
 1272              	@ armwave.c:252:     for(yy = 0; yy < 10; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1273              		.loc 1 252 5 view .LVU350
 1274 05d0 0A0058E3 		cmp	r8, #10	@ yy,
 1275 05d4 8CFFFF1A 		bne	.L55		@,
 1276              	@ armwave.c:261: }
 258:armwave.c     ****     }
 259:armwave.c     **** 
 260:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 261:armwave.c     **** }
 1277              		.loc 1 261 1 view .LVU351
 1278 05d8 2CD08DE2 		add	sp, sp, #44	@,,
 1279              		.cfi_def_cfa_offset 36
 1280              		@ sp needed	@
 1281 05dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1282              	.LVL76:
 1283              	.L74:
 1284              		.loc 1 261 1 view .LVU352
 1285              		.align	2
 1286              	.L73:
 1287 05e0 00000000 		.word	g_armwave_state
 1288 05e4 20000000 		.word	.LC2
 1289              		.cfi_endproc
 1290              	.LFE61:
 1292              		.align	2
 1293              		.global	armwave_setup_render
 1294              		.syntax unified
 1295              		.arm
 1296              		.fpu vfp
 1298              	armwave_setup_render:
 1299              	.LVL77:
 1300              	.LFB62:
 262:armwave.c     **** 
 263:armwave.c     **** /*
 264:armwave.c     ****  * Setup the renderer with passed parameters.
 265:armwave.c     ****  */
 266:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 267:armwave.c     **** {
 1301              		.loc 1 267 1 is_stmt 1 view -0
 1302              		.cfi_startproc
 1303              		@ args = 12, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 268:armwave.c     ****     uint32_t length, xx;
 1305              		.loc 1 268 5 view .LVU354
 269:armwave.c     ****     float points_per_pixel;
 1306              		.loc 1 269 5 view .LVU355
 270:armwave.c     **** 
 271:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1307              		.loc 1 271 5 view .LVU356
 1308              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1309              		.loc 1 267 1 is_stmt 0 view .LVU357
 1310 05e8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1311              		.cfi_def_cfa_offset 28
 1312              		.cfi_offset 4, -28
 1313              		.cfi_offset 5, -24
 1314              		.cfi_offset 6, -20
 1315              		.cfi_offset 7, -16
 1316              		.cfi_offset 8, -12
 1317              		.cfi_offset 9, -8
 1318              		.cfi_offset 14, -4
 1319 05ec 028B2DED 		vpush.64	{d8}	@
 1320              		.cfi_def_cfa_offset 36
 1321              		.cfi_offset 80, -36
 1322              		.cfi_offset 81, -32
 1323 05f0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1324 05f4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1325 05f8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1326 05fc 14D04DE2 		sub	sp, sp, #20	@,,
 1327              		.cfi_def_cfa_offset 56
 1328              	@ armwave.c:267: {
 267:armwave.c     ****     uint32_t length, xx;
 1329              		.loc 1 267 1 view .LVU358
 1330 0600 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1331 0604 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1332 0608 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1333              	@ armwave.c:271:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1334              		.loc 1 271 5 view .LVU359
 1335 060c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1336 0610 F460CDE1 		strd	r6, [sp, #4]	@,,
 1337 0614 0230A0E1 		mov	r3, r2	@, waves_max
 1338              	.LVL78:
 1339              		.loc 1 271 5 view .LVU360
 1340 0618 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1341 061c 0120A0E1 		mov	r2, r1	@, end_point
 1342              	.LVL79:
 1343              		.loc 1 271 5 view .LVU361
 1344 0620 0010A0E1 		mov	r1, r0	@, start_point
 1345              	.LVL80:
 1346              		.loc 1 271 5 view .LVU362
 1347 0624 CC019FE5 		ldr	r0, .L89+12	@,
 1348              	.LVL81:
 1349              		.loc 1 271 5 view .LVU363
 1350 0628 FEFFFFEB 		bl	printf		@
 1351              	.LVL82:
 272:armwave.c     **** 
 273:armwave.c     ****     // TODO these asserts should instead raise PyExc
 274:armwave.c     ****     assert(start_point < end_point);
 1352              		.loc 1 274 5 is_stmt 1 view .LVU364
 1353 062c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1354 0630 5E00002A 		bcs	.L86		@,
 275:armwave.c     **** 
 276:armwave.c     ****     /*
 277:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 278:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 279:armwave.c     **** 
 280:armwave.c     ****     if(target_height == 256) {
 281:armwave.c     ****         g_armwave_state.row_shift = 8;
 282:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 283:armwave.c     ****     } else if(target_height == 512) {
 284:armwave.c     ****         g_armwave_state.row_shift = 9;
 285:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 286:armwave.c     ****     } else if(target_height == 1024) {
 287:armwave.c     ****         g_armwave_state.row_shift = 10;
 288:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 289:armwave.c     ****     } else if(target_height == 2048) {
 290:armwave.c     ****         g_armwave_state.row_shift = 11;
 291:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 292:armwave.c     ****     }
 293:armwave.c     ****     */
 294:armwave.c     **** 
 295:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 296:armwave.c     ****     g_armwave_state.xstride = target_height;
 1355              		.loc 1 296 5 view .LVU365
 1356              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 298:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 299:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 300:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 301:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 302:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 303:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 304:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 305:armwave.c     ****     g_armwave_state.target_width = target_width;
 306:armwave.c     ****     g_armwave_state.target_height = target_height;
 307:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1357              		.loc 1 307 45 is_stmt 0 view .LVU366
 1358 0634 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1359              	.LVL83:
 1360              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1361              		.loc 1 297 49 view .LVU367
 1362 0638 6B6A9FED 		vldr.32	s12, .L89	@ tmp175,
 1363              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 308:armwave.c     **** 
 309:armwave.c     ****     // Calculate compound scaler
 310:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 311:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1364              		.loc 1 311 48 view .LVU368
 1365 063c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1366              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1367              		.loc 1 311 79 view .LVU369
 1368 0640 6A6ADFED 		vldr.32	s13, .L89+4	@ tmp199,
 1369              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1370              		.loc 1 304 90 view .LVU370
 1371 0644 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1372              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1373              		.loc 1 296 29 view .LVU371
 1374 0648 AC419FE5 		ldr	r4, .L89+16	@ tmp242,
 1375              	.LVL84:
 1376              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1377              		.loc 1 311 48 view .LVU372
 1378 064c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1379              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1380              		.loc 1 297 49 view .LVU373
 1381 0650 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1382              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1383              		.loc 1 302 42 view .LVU374
 1384 0654 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1385              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1386              		.loc 1 304 74 view .LVU375
 1387 0658 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1388              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1389              		.loc 1 297 49 view .LVU376
 1390 065c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1391              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1392              		.loc 1 311 48 view .LVU377
 1393 0660 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1394              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1395              		.loc 1 304 74 view .LVU378
 1396 0664 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1397              	@ armwave.c:296:     g_armwave_state.xstride = target_height;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1398              		.loc 1 296 29 view .LVU379
 1399 0668 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1400              		.loc 1 297 5 is_stmt 1 view .LVU380
 1401              	@ armwave.c:306:     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1402              		.loc 1 306 35 is_stmt 0 view .LVU381
 1403 066c F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1404              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1405              		.loc 1 311 48 view .LVU382
 1406 0670 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1407              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1408              		.loc 1 313 5 view .LVU383
 1409 0674 0310A0E1 		mov	r1, r3	@, tmp190
 1410              	@ armwave.c:302:     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1411              		.loc 1 302 26 view .LVU384
 1412 0678 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1413              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1414              		.loc 1 303 37 view .LVU385
 1415 067c 017CA0E3 		mov	r7, #256	@ tmp185,
 1416              	@ armwave.c:304:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1417              		.loc 1 304 34 view .LVU386
 1418 0680 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1419              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1420              		.loc 1 313 5 view .LVU387
 1421 0684 74019FE5 		ldr	r0, .L89+20	@,
 1422              	@ armwave.c:299:     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1423              		.loc 1 299 33 view .LVU388
 1424 0688 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1425              	@ armwave.c:300:     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1426              		.loc 1 300 31 view .LVU389
 1427 068c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1428              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1429              		.loc 1 311 48 view .LVU390
 1430 0690 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1431              	@ armwave.c:301:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1432              		.loc 1 301 27 view .LVU391
 1433 0694 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1434              	@ armwave.c:307:     g_armwave_state.wave_length = end_point - start_point;
 307:armwave.c     **** 
 1435              		.loc 1 307 33 view .LVU392
 1436 0698 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1437              	@ armwave.c:303:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1438              		.loc 1 303 37 view .LVU393
 1439 069c 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1440              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1441              		.loc 1 297 49 view .LVU394
 1442 06a0 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1443              	@ armwave.c:311:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 311:armwave.c     **** 
 1444              		.loc 1 311 79 view .LVU395
 1445 06a4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1446              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1447              		.loc 1 310 42 view .LVU396
 1448 06a8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1449              	@ armwave.c:297:     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1450              		.loc 1 297 33 view .LVU397
 1451 06ac 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1452              		.loc 1 298 5 is_stmt 1 view .LVU398
 1453              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1454              		.loc 1 310 42 is_stmt 0 view .LVU399
 1455 06b0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1456              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1457              		.loc 1 298 30 view .LVU400
 1458 06b4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1459              	@ armwave.c:313:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1460              		.loc 1 313 5 view .LVU401
 1461 06b8 0C30A0E1 		mov	r3, ip	@, _19
 1462 06bc 0C20A0E1 		mov	r2, ip	@, tmp3
 1463              	@ armwave.c:310:     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1464              		.loc 1 310 42 view .LVU402
 1465 06c0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1466              	@ armwave.c:298:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1467              		.loc 1 298 30 view .LVU403
 1468 06c4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1469              		.loc 1 299 5 is_stmt 1 view .LVU404
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1470              		.loc 1 300 5 view .LVU405
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1471              		.loc 1 301 5 view .LVU406
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1472              		.loc 1 302 5 view .LVU407
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1473              		.loc 1 303 5 view .LVU408
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 1474              		.loc 1 304 5 view .LVU409
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 1475              		.loc 1 305 5 view .LVU410
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1476              		.loc 1 306 5 view .LVU411
 307:armwave.c     **** 
 1477              		.loc 1 307 5 view .LVU412
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1478              		.loc 1 310 5 view .LVU413
 1479              		.loc 1 313 5 view .LVU414
 1480 06c8 FEFFFFEB 		bl	printf		@
 1481              	.LVL85:
 314:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 315:armwave.c     **** 
 316:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 317:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 319:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1482              		.loc 1 319 5 view .LVU415
 1483              	@ armwave.c:321:     if(g_armwave_state.ch1_buffer != NULL)
 320:armwave.c     **** 
 321:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1484              		.loc 1 321 23 is_stmt 0 view .LVU416
 1485 06cc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1486              	@ armwave.c:319:     g_armwave_state.slice_height = 256; // 64;  
 319:armwave.c     **** 
 1487              		.loc 1 319 34 view .LVU417
 1488 06d0 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1489              		.loc 1 321 5 is_stmt 1 view .LVU418
 1490              	@ armwave.c:321:     if(g_armwave_state.ch1_buffer != NULL)
 1491              		.loc 1 321 7 is_stmt 0 view .LVU419
 1492 06d4 000050E3 		cmp	r0, #0	@ _20,
 1493 06d8 0000000A 		beq	.L77		@,
 322:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1494              		.loc 1 322 9 is_stmt 1 view .LVU420
 1495 06dc FEFFFFEB 		bl	free		@
 1496              	.LVL86:
 1497              	.L77:
 323:armwave.c     **** 
 324:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1498              		.loc 1 324 5 view .LVU421
 1499              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1500              		.loc 1 324 34 is_stmt 0 view .LVU422
 1501 06e0 0110A0E3 		mov	r1, #1	@,
 1502 06e4 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1503 06e8 FEFFFFEB 		bl	calloc		@
 1504              	.LVL87:
 1505              	@ armwave.c:326:     assert(g_armwave_state.ch1_buffer != NULL);
 325:armwave.c     **** 
 326:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1506              		.loc 1 326 5 view .LVU423
 1507 06ec 000050E3 		cmp	r0, #0	@ _23,
 1508              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 324:armwave.c     **** 
 1509              		.loc 1 324 34 view .LVU424
 1510 06f0 0070A0E1 		mov	r7, r0	@ _23,
 1511              	@ armwave.c:324:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 324:armwave.c     **** 
 1512              		.loc 1 324 32 view .LVU425
 1513 06f4 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1514              		.loc 1 326 5 is_stmt 1 view .LVU426
 1515 06f8 3600000A 		beq	.L87		@,
 327:armwave.c     **** 
 328:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 329:armwave.c     ****     length = end_point - start_point;
 1516              		.loc 1 329 5 view .LVU427
 1517              	.LVL88:
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1518              		.loc 1 330 5 view .LVU428
 1519              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 1520              		.loc 1 330 34 is_stmt 0 view .LVU429
 1521 06fc 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1522              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 1523              		.loc 1 330 22 view .LVU430
 1524 0700 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1525              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1526              		.loc 1 331 60 view .LVU431
 1527 0704 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1528              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1529              		.loc 1 332 40 view .LVU432
 1530 0708 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1531              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1532              		.loc 1 330 34 view .LVU433
 1533 070c 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1534              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1535              		.loc 1 330 22 view .LVU434
 1536 0710 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1537              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1538              		.loc 1 331 60 view .LVU435
 1539 0714 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1540              	@ armwave.c:330:     points_per_pixel = length / ((float)(target_width));
 330:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1541              		.loc 1 330 22 view .LVU436
 1542 0718 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1543              	.LVL89:
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1544              		.loc 1 331 5 is_stmt 1 view .LVU437
 1545              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1546              		.loc 1 331 60 is_stmt 0 view .LVU438
 1547 071c 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1548              	@ armwave.c:331:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 331:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1549              		.loc 1 331 41 view .LVU439
 1550 0720 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1551 0724 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1552              		.loc 1 332 5 is_stmt 1 view .LVU440
 1553              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1554              		.loc 1 332 40 is_stmt 0 view .LVU441
 1555 0728 FEFFFFEB 		bl	malloc		@
 1556              	.LVL90:
 1557              	@ armwave.c:334:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 333:armwave.c     **** 
 334:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1558              		.loc 1 334 5 view .LVU442
 1559 072c 000050E3 		cmp	r0, #0	@ _31,
 1560              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1561              		.loc 1 332 40 view .LVU443
 1562 0730 0060A0E1 		mov	r6, r0	@ _31,
 1563              	@ armwave.c:332:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 332:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1564              		.loc 1 332 38 view .LVU444
 1565 0734 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1566              		.loc 1 334 5 is_stmt 1 view .LVU445
 1567 0738 2100000A 		beq	.L88		@,
 1568              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 335:armwave.c     **** 
 336:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 337:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1569              		.loc 1 337 54 is_stmt 0 view .LVU446
 1570 073c 2C7ADFED 		vldr.32	s15, .L89+8	@ tmp230,
 1571 0740 02C040E2 		sub	ip, r0, #2	@ ivtmp.81, _31,
 1572              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1573              		.loc 1 336 12 view .LVU447
 1574 0744 0030A0E3 		mov	r3, #0	@ xx,
 1575              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1576              		.loc 1 337 54 view .LVU448
 1577 0748 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1578              	.L80:
 1579              	.LVL91:
 1580              		.loc 1 337 9 is_stmt 1 discriminator 3 view .LVU449
 1581              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1582              		.loc 1 337 74 is_stmt 0 discriminator 3 view .LVU450
 1583 074c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1584              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1585              		.loc 1 336 32 discriminator 3 view .LVU451
 1586 0750 013083E2 		add	r3, r3, #1	@ xx, xx,
 1587              	.LVL92:
 1588              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1589              		.loc 1 336 5 discriminator 3 view .LVU452
 1590 0754 030055E1 		cmp	r5, r3	@ _13, xx
 1591              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1592              		.loc 1 337 74 discriminator 3 view .LVU453
 1593 0758 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1594 075c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1595              	@ armwave.c:337:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1596              		.loc 1 337 46 discriminator 3 view .LVU454
 1597 0760 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1598 0764 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1599 0768 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1600              	@ armwave.c:336:     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1601              		.loc 1 336 5 discriminator 3 view .LVU455
 1602 076c F6FFFF1A 		bne	.L80		@,
 338:armwave.c     **** 
 339:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1603              		.loc 1 342 5 is_stmt 1 view .LVU456
 1604              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1605              		.loc 1 342 34 is_stmt 0 view .LVU457
 1606 0770 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1607 0774 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1608 0778 FEFFFFEB 		bl	malloc		@
 1609              	.LVL93:
 1610              	@ armwave.c:344:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 343:armwave.c     **** 
 344:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1611              		.loc 1 344 5 view .LVU458
 1612 077c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1613 0780 0620A0E1 		mov	r2, r6	@, _31
 1614 0784 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1615 0788 0710A0E1 		mov	r1, r7	@, _23
 1616              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 342:armwave.c     **** 
 1617              		.loc 1 342 34 view .LVU459
 1618 078c 00C0A0E1 		mov	ip, r0	@ tmp237,
 1619              	@ armwave.c:344:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1620              		.loc 1 344 5 view .LVU460
 1621 0790 0030A0E1 		mov	r3, r0	@, tmp237
 1622              	@ armwave.c:342:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 342:armwave.c     **** 
 1623              		.loc 1 342 32 view .LVU461
 1624 0794 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1625              		.loc 1 344 5 is_stmt 1 view .LVU462
 1626 0798 64009FE5 		ldr	r0, .L89+24	@,
 1627 079c FEFFFFEB 		bl	printf		@
 1628              	.LVL94:
 345:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 348:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 349:armwave.c     **** 
 350:armwave.c     ****     malloc_stats();
 1629              		.loc 1 350 5 view .LVU463
 1630              	@ armwave.c:351: }
 351:armwave.c     **** }
 1631              		.loc 1 351 1 is_stmt 0 view .LVU464
 1632 07a0 14D08DE2 		add	sp, sp, #20	@,,
 1633              		.cfi_remember_state
 1634              		.cfi_def_cfa_offset 36
 1635              		@ sp needed	@
 1636 07a4 028BBDEC 		vldm	sp!, {d8}	@
 1637              		.cfi_restore 80
 1638              		.cfi_restore 81
 1639              		.cfi_def_cfa_offset 28
 1640              	.LVL95:
 1641              		.loc 1 351 1 view .LVU465
 1642 07a8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1643              		.cfi_restore 14
 1644              		.cfi_restore 9
 1645              		.cfi_restore 8
 1646              		.cfi_restore 7
 1647              		.cfi_restore 6
 1648              		.cfi_restore 5
 1649              		.cfi_restore 4
 1650              		.cfi_def_cfa_offset 0
 1651              	.LVL96:
 1652              	@ armwave.c:350:     malloc_stats();
 350:armwave.c     **** }
 1653              		.loc 1 350 5 view .LVU466
 1654 07ac FEFFFFEA 		b	malloc_stats		@
 1655              	.LVL97:
 1656              	.L86:
 1657              		.cfi_restore_state
 274:armwave.c     **** 
 1658              		.loc 1 274 5 is_stmt 1 discriminator 1 view .LVU467
 1659 07b0 50309FE5 		ldr	r3, .L89+28	@,
 1660 07b4 50209FE5 		ldr	r2, .L89+32	@,
 1661 07b8 50109FE5 		ldr	r1, .L89+36	@,
 1662 07bc 50009FE5 		ldr	r0, .L89+40	@,
 1663 07c0 FEFFFFEB 		bl	__assert_fail		@
 1664              	.LVL98:
 1665              	.L88:
 334:armwave.c     **** 
 1666              		.loc 1 334 5 discriminator 1 view .LVU468
 1667 07c4 3C309FE5 		ldr	r3, .L89+28	@,
 1668 07c8 48209FE5 		ldr	r2, .L89+44	@,
 1669 07cc 3C109FE5 		ldr	r1, .L89+36	@,
 1670 07d0 44009FE5 		ldr	r0, .L89+48	@,
 1671 07d4 FEFFFFEB 		bl	__assert_fail		@
 1672              	.LVL99:
 1673              	.L87:
 326:armwave.c     **** 
 1674              		.loc 1 326 5 discriminator 1 view .LVU469
 1675 07d8 28309FE5 		ldr	r3, .L89+28	@,
 1676 07dc 3C209FE5 		ldr	r2, .L89+52	@,
 1677 07e0 28109FE5 		ldr	r1, .L89+36	@,
 1678 07e4 38009FE5 		ldr	r0, .L89+56	@,
 1679 07e8 FEFFFFEB 		bl	__assert_fail		@
 1680              	.LVL100:
 1681              	.L90:
 1682              		.align	2
 1683              	.L89:
 1684 07ec 00007F43 		.word	1132396544
 1685 07f0 00008047 		.word	1199570944
 1686 07f4 0000803F 		.word	1065353216
 1687 07f8 98000000 		.word	.LC5
 1688 07fc 00000000 		.word	g_armwave_state
 1689 0800 DC000000 		.word	.LC7
 1690 0804 60010000 		.word	.LC10
 1691 0808 1C000000 		.word	.LANCHOR0+28
 1692 080c 12010000 		.word	274
 1693 0810 78000000 		.word	.LC3
 1694 0814 C4000000 		.word	.LC6
 1695 0818 4E010000 		.word	334
 1696 081c 34010000 		.word	.LC9
 1697 0820 46010000 		.word	326
 1698 0824 10010000 		.word	.LC8
 1699              		.cfi_endproc
 1700              	.LFE62:
 1702              		.align	2
 1703              		.global	armwave_set_wave_pointer
 1704              		.syntax unified
 1705              		.arm
 1706              		.fpu vfp
 1708              	armwave_set_wave_pointer:
 1709              	.LVL101:
 1710              	.LFB63:
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 355:armwave.c     ****  * in the future.
 356:armwave.c     ****  */
 357:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 358:armwave.c     **** {
 1711              		.loc 1 358 1 view -0
 1712              		.cfi_startproc
 1713              		@ args = 0, pretend = 0, frame = 0
 1714              		@ frame_needed = 0, uses_anonymous_args = 0
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1715              		.loc 1 359 5 view .LVU471
 1716 0828 000050E3 		cmp	r0, #0	@ wave_buffer
 1717              		.loc 1 359 5 is_stmt 0 view .LVU472
 1718 082c 0200000A 		beq	.L96		@,
 360:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1719              		.loc 1 360 5 is_stmt 1 view .LVU473
 1720              	@ armwave.c:360:     g_armwave_state.wave_buffer = wave_buffer;
 1721              		.loc 1 360 33 is_stmt 0 view .LVU474
 1722 0830 1C309FE5 		ldr	r3, .L97	@ tmp116,
 1723 0834 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1724 0838 1EFF2FE1 		bx	lr	@
 1725              	.L96:
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1726              		.loc 1 359 5 is_stmt 1 discriminator 1 view .LVU475
 1727              	@ armwave.c:358: {
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1728              		.loc 1 358 1 is_stmt 0 discriminator 1 view .LVU476
 1729 083c 10402DE9 		push	{r4, lr}	@
 1730              		.cfi_def_cfa_offset 8
 1731              		.cfi_offset 4, -8
 1732              		.cfi_offset 14, -4
 1733              	@ armwave.c:359:     assert(wave_buffer != NULL);
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1734              		.loc 1 359 5 discriminator 1 view .LVU477
 1735 0840 10309FE5 		ldr	r3, .L97+4	@,
 1736 0844 10209FE5 		ldr	r2, .L97+8	@,
 1737 0848 10109FE5 		ldr	r1, .L97+12	@,
 1738 084c 10009FE5 		ldr	r0, .L97+16	@,
 1739              	.LVL102:
 359:armwave.c     ****     assert(wave_buffer != NULL);
 1740              		.loc 1 359 5 discriminator 1 view .LVU478
 1741 0850 FEFFFFEB 		bl	__assert_fail		@
 1742              	.LVL103:
 1743              	.L98:
 1744              		.align	2
 1745              	.L97:
 1746 0854 00000000 		.word	g_armwave_state
 1747 0858 34000000 		.word	.LANCHOR0+52
 1748 085c 67010000 		.word	359
 1749 0860 78000000 		.word	.LC3
 1750 0864 84010000 		.word	.LC11
 1751              		.cfi_endproc
 1752              	.LFE63:
 1754              		.align	2
 1755              		.global	armwave_set_wave_pointer_as_testbuf
 1756              		.syntax unified
 1757              		.arm
 1758              		.fpu vfp
 1760              	armwave_set_wave_pointer_as_testbuf:
 1761              	.LVL104:
 1762              	.LFB64:
 361:armwave.c     **** }
 362:armwave.c     **** 
 363:armwave.c     **** /*
 364:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 365:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 368:armwave.c     **** {
 1763              		.loc 1 368 1 is_stmt 1 view -0
 1764              		.cfi_startproc
 1765              		@ args = 0, pretend = 0, frame = 0
 1766              		@ frame_needed = 0, uses_anonymous_args = 0
 1767              		@ link register save eliminated.
 369:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1768              		.loc 1 369 5 view .LVU480
 1769              	@ armwave.c:369:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1770              		.loc 1 369 29 is_stmt 0 view .LVU481
 1771 0868 24309FE5 		ldr	r3, .L102	@ tmp117,
 1772              	@ armwave.c:369:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1773              		.loc 1 369 7 view .LVU482
 1774 086c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1775 0870 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1776 0874 0400003A 		bcc	.L101		@,
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 371:armwave.c     ****         return;
 372:armwave.c     ****     }
 373:armwave.c     **** 
 374:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1777              		.loc 1 374 5 is_stmt 1 view .LVU483
 1778              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1779              		.loc 1 374 111 is_stmt 0 view .LVU484
 1780 0878 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1781              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1782              		.loc 1 374 68 view .LVU485
 1783 087c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1784 0880 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1785              	.LVL105:
 1786              	@ armwave.c:374:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1787              		.loc 1 374 33 view .LVU486
 1788 0884 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1789              	@ armwave.c:375: }
 375:armwave.c     **** }
 1790              		.loc 1 375 1 view .LVU487
 1791 0888 1EFF2FE1 		bx	lr	@
 1792              	.LVL106:
 1793              	.L101:
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1794              		.loc 1 370 9 is_stmt 1 view .LVU488
 1795 088c 04009FE5 		ldr	r0, .L102+4	@,
 1796              	.LVL107:
 370:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1797              		.loc 1 370 9 is_stmt 0 view .LVU489
 1798 0890 FEFFFFEA 		b	puts		@
 1799              	.LVL108:
 1800              	.L103:
 1801              		.align	2
 1802              	.L102:
 1803 0894 00000000 		.word	g_armwave_state
 1804 0898 98010000 		.word	.LC12
 1805              		.cfi_endproc
 1806              	.LFE64:
 1808              		.align	2
 1809              		.global	armwave_set_wave_pointer_u32
 1810              		.syntax unified
 1811              		.arm
 1812              		.fpu vfp
 1814              	armwave_set_wave_pointer_u32:
 1815              	.LVL109:
 1816              	.LFB65:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 379:armwave.c     ****  * disjointed buffers in the future.
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 382:armwave.c     **** {
 1817              		.loc 1 382 1 is_stmt 1 view -0
 1818              		.cfi_startproc
 1819              		@ args = 0, pretend = 0, frame = 0
 1820              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1821              		.loc 1 383 5 view .LVU491
 1822 089c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1823              		.loc 1 383 5 is_stmt 0 view .LVU492
 1824 08a0 0200000A 		beq	.L109		@,
 384:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1825              		.loc 1 384 5 is_stmt 1 view .LVU493
 1826              	@ armwave.c:384:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1827              		.loc 1 384 33 is_stmt 0 view .LVU494
 1828 08a4 1C309FE5 		ldr	r3, .L110	@ tmp117,
 1829 08a8 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1830 08ac 1EFF2FE1 		bx	lr	@
 1831              	.L109:
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1832              		.loc 1 383 5 is_stmt 1 discriminator 1 view .LVU495
 1833              	@ armwave.c:382: {
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1834              		.loc 1 382 1 is_stmt 0 discriminator 1 view .LVU496
 1835 08b0 10402DE9 		push	{r4, lr}	@
 1836              		.cfi_def_cfa_offset 8
 1837              		.cfi_offset 4, -8
 1838              		.cfi_offset 14, -4
 1839              	@ armwave.c:383:     assert(wave_buffer_ptr != 0);
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1840              		.loc 1 383 5 discriminator 1 view .LVU497
 1841 08b4 10309FE5 		ldr	r3, .L110+4	@,
 1842 08b8 10209FE5 		ldr	r2, .L110+8	@,
 1843 08bc 10109FE5 		ldr	r1, .L110+12	@,
 1844 08c0 10009FE5 		ldr	r0, .L110+16	@,
 1845              	.LVL110:
 383:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1846              		.loc 1 383 5 discriminator 1 view .LVU498
 1847 08c4 FEFFFFEB 		bl	__assert_fail		@
 1848              	.LVL111:
 1849              	.L111:
 1850              		.align	2
 1851              	.L110:
 1852 08c8 00000000 		.word	g_armwave_state
 1853 08cc 50000000 		.word	.LANCHOR0+80
 1854 08d0 7F010000 		.word	383
 1855 08d4 78000000 		.word	.LC3
 1856 08d8 D4010000 		.word	.LC13
 1857              		.cfi_endproc
 1858              	.LFE65:
 1860              		.align	2
 1861              		.global	armwave_clear_buffer
 1862              		.syntax unified
 1863              		.arm
 1864              		.fpu vfp
 1866              	armwave_clear_buffer:
 1867              	.LVL112:
 1868              	.LFB66:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 391:armwave.c     **** {
 1869              		.loc 1 391 1 is_stmt 1 view -0
 1870              		.cfi_startproc
 1871              		@ args = 0, pretend = 0, frame = 0
 1872              		@ frame_needed = 0, uses_anonymous_args = 0
 1873              		@ link register save eliminated.
 392:armwave.c     ****     // Flags ignored, only one buffer cleared
 393:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1874              		.loc 1 393 5 view .LVU500
 1875              	@ armwave.c:393:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1876              		.loc 1 393 58 is_stmt 0 view .LVU501
 1877 08dc 0C309FE5 		ldr	r3, .L113	@ tmp114,
 1878              	@ armwave.c:393:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1879              		.loc 1 393 5 view .LVU502
 1880 08e0 0010A0E3 		mov	r1, #0	@,
 1881 08e4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1882 08e8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1883              	.LVL113:
 1884              		.loc 1 393 5 view .LVU503
 1885 08ec FEFFFFEA 		b	memset		@
 1886              	.LVL114:
 1887              	.L114:
 1888              		.align	2
 1889              	.L113:
 1890 08f0 00000000 		.word	g_armwave_state
 1891              		.cfi_endproc
 1892              	.LFE66:
 1894              		.align	2
 1895              		.global	armwave_set_channel_colour
 1896              		.syntax unified
 1897              		.arm
 1898              		.fpu vfp
 1900              	armwave_set_channel_colour:
 1901              	.LVL115:
 1902              	.LFB67:
 394:armwave.c     **** }
 395:armwave.c     **** 
 396:armwave.c     **** /*
 397:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 398:armwave.c     ****  */
 399:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 400:armwave.c     **** {
 1903              		.loc 1 400 1 is_stmt 1 view -0
 1904              		.cfi_startproc
 1905              		@ args = 0, pretend = 0, frame = 0
 1906              		@ frame_needed = 0, uses_anonymous_args = 0
 1907              		@ link register save eliminated.
 401:armwave.c     ****     // Only 1ch supported for now
 402:armwave.c     ****     switch(ch) {
 1908              		.loc 1 402 5 view .LVU505
 1909 08f4 010050E3 		cmp	r0, #1	@ ch,
 403:armwave.c     ****         case 1:
 404:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1910              		.loc 1 404 13 view .LVU506
 1911              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 1912              		.loc 1 404 41 is_stmt 0 view .LVU507
 1913 08f8 0C009F05 		ldreq	r0, .L117	@ tmp117,
 1914              	.LVL116:
 1915              		.loc 1 404 41 view .LVU508
 1916 08fc BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 405:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1917              		.loc 1 405 13 is_stmt 1 view .LVU509
 1918              	@ armwave.c:405:             g_armwave_state.ch1_color.g = g;
 1919              		.loc 1 405 41 is_stmt 0 view .LVU510
 1920 0900 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 406:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1921              		.loc 1 406 13 is_stmt 1 view .LVU511
 1922              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 1923              		.loc 1 406 41 is_stmt 0 view .LVU512
 1924 0904 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 407:armwave.c     ****             break;
 1925              		.loc 1 407 13 is_stmt 1 view .LVU513
 1926              	@ armwave.c:409: }
 408:armwave.c     ****     }
 409:armwave.c     **** }
 1927              		.loc 1 409 1 is_stmt 0 view .LVU514
 1928 0908 1EFF2FE1 		bx	lr	@
 1929              	.L118:
 1930              		.align	2
 1931              	.L117:
 1932 090c 00000000 		.word	g_armwave_state
 1933              		.cfi_endproc
 1934              	.LFE67:
 1936              		.align	2
 1937              		.global	armwave_dump_ppm_debug
 1938              		.syntax unified
 1939              		.arm
 1940              		.fpu vfp
 1942              	armwave_dump_ppm_debug:
 1943              	.LVL117:
 1944              	.LFB68:
 410:armwave.c     **** 
 411:armwave.c     **** /*
 412:armwave.c     ****  * Dump a ppm of a buffer to a file.
 413:armwave.c     ****  */
 414:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 415:armwave.c     **** {
 1945              		.loc 1 415 1 is_stmt 1 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 416:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1949              		.loc 1 416 5 view .LVU516
 1950              	@ armwave.c:415: {
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1951              		.loc 1 415 1 is_stmt 0 view .LVU517
 1952 0910 0130A0E1 		mov	r3, r1	@ fn, fn
 1953 0914 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1954              		.cfi_def_cfa_offset 28
 1955              		.cfi_offset 4, -28
 1956              		.cfi_offset 5, -24
 1957              		.cfi_offset 6, -20
 1958              		.cfi_offset 7, -16
 1959              		.cfi_offset 8, -12
 1960              		.cfi_offset 9, -8
 1961              		.cfi_offset 14, -4
 1962 0918 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1963 091c 0CD04DE2 		sub	sp, sp, #12	@,,
 1964              		.cfi_def_cfa_offset 40
 1965              	@ armwave.c:416:     FILE *fp = fopen(fn, "wb");
 1966              		.loc 1 416 16 view .LVU518
 1967 0920 C4109FE5 		ldr	r1, .L127	@,
 1968              	.LVL118:
 1969              		.loc 1 416 16 view .LVU519
 1970 0924 0300A0E1 		mov	r0, r3	@, fn
 1971              	.LVL119:
 1972              		.loc 1 416 16 view .LVU520
 1973 0928 FEFFFFEB 		bl	fopen64		@
 1974              	.LVL120:
 1975              	@ armwave.c:423:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 417:armwave.c     ****     uint32_t data;
 418:armwave.c     ****     int xx, yy;
 419:armwave.c     **** 
 420:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 421:armwave.c     **** 
 422:armwave.c     ****     fputs("P3\n", fp);
 423:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1976              		.loc 1 423 5 view .LVU521
 1977 092c BC609FE5 		ldr	r6, .L127+4	@ tmp150,
 1978              	@ armwave.c:422:     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1979              		.loc 1 422 5 view .LVU522
 1980 0930 0320A0E3 		mov	r2, #3	@,
 1981 0934 0110A0E3 		mov	r1, #1	@,
 1982              	@ armwave.c:416:     FILE *fp = fopen(fn, "wb");
 416:armwave.c     ****     uint32_t data;
 1983              		.loc 1 416 16 view .LVU523
 1984 0938 0070A0E1 		mov	r7, r0	@ fp,
 1985              	.LVL121:
 417:armwave.c     ****     uint32_t data;
 1986              		.loc 1 417 5 is_stmt 1 view .LVU524
 418:armwave.c     **** 
 1987              		.loc 1 418 5 view .LVU525
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1988              		.loc 1 422 5 view .LVU526
 1989 093c 0030A0E1 		mov	r3, r0	@, fp
 1990 0940 AC009FE5 		ldr	r0, .L127+8	@,
 1991              	.LVL122:
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1992              		.loc 1 422 5 is_stmt 0 view .LVU527
 1993 0944 FEFFFFEB 		bl	fwrite		@
 1994              	.LVL123:
 1995              		.loc 1 423 5 is_stmt 1 view .LVU528
 1996 0948 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1997 094c A4109FE5 		ldr	r1, .L127+12	@,
 1998 0950 0700A0E1 		mov	r0, r7	@, fp
 1999 0954 FEFFFFEB 		bl	fprintf		@
 2000              	.LVL124:
 424:armwave.c     ****     fputs("255\n", fp);
 2001              		.loc 1 424 5 view .LVU529
 2002 0958 0420A0E3 		mov	r2, #4	@,
 2003 095c 0730A0E1 		mov	r3, r7	@, fp
 2004 0960 0110A0E3 		mov	r1, #1	@,
 2005 0964 90009FE5 		ldr	r0, .L127+16	@,
 2006 0968 FEFFFFEB 		bl	fwrite		@
 2007              	.LVL125:
 425:armwave.c     **** 
 426:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2008              		.loc 1 426 5 view .LVU530
 2009              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2010              		.loc 1 426 37 is_stmt 0 view .LVU531
 2011 096c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2012              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2013              		.loc 1 426 5 view .LVU532
 2014 0970 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2015 0974 180000DA 		ble	.L120		@,
 2016 0978 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2017              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 428:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 429:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 430:armwave.c     **** 
 431:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2018              		.loc 1 431 13 view .LVU533
 2019 097c 7C909FE5 		ldr	r9, .L127+20	@ tmp152,
 2020              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2021              		.loc 1 426 12 view .LVU534
 2022 0980 0050A0E3 		mov	r5, #0	@ yy,
 2023              	.LVL126:
 2024              	.L121:
 2025              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2026              		.loc 1 427 9 view .LVU535
 2027 0984 000053E3 		cmp	r3, #0	@ _13,
 2028              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2029              		.loc 1 427 16 view .LVU536
 2030 0988 0040A0C3 		movgt	r4, #0	@ xx,
 2031              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2032              		.loc 1 427 9 view .LVU537
 2033 098c 0F0000DA 		ble	.L123		@,
 2034              	.LVL127:
 2035              	.L122:
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2036              		.loc 1 428 13 is_stmt 1 discriminator 3 view .LVU538
 2037              	@ armwave.c:428:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2038              		.loc 1 428 29 is_stmt 0 discriminator 3 view .LVU539
 2039 0990 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2040              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2041              		.loc 1 431 13 discriminator 3 view .LVU540
 2042 0994 0910A0E1 		mov	r1, r9	@, tmp152
 2043 0998 0700A0E1 		mov	r0, r7	@, fp
 2044              	@ armwave.c:428:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2045              		.loc 1 428 18 discriminator 3 view .LVU541
 2046 099c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2047              	.LVL128:
 2048              		.loc 1 431 13 is_stmt 1 discriminator 3 view .LVU542
 2049              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2050              		.loc 1 427 58 is_stmt 0 discriminator 3 view .LVU543
 2051 09a0 014084E2 		add	r4, r4, #1	@ xx, xx,
 2052              	.LVL129:
 2053              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2054              		.loc 1 431 81 discriminator 3 view .LVU544
 2055 09a4 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2056              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2057              		.loc 1 431 61 discriminator 3 view .LVU545
 2058 09a8 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2059              	@ armwave.c:431:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2060              		.loc 1 431 13 discriminator 3 view .LVU546
 2061 09ac 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2062 09b0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2063 09b4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2064 09b8 7220EFE6 		uxtb	r2, r2	@, data
 2065              	.LVL130:
 2066              		.loc 1 431 13 discriminator 3 view .LVU547
 2067 09bc FEFFFFEB 		bl	fprintf		@
 2068              	.LVL131:
 2069              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2070              		.loc 1 427 41 discriminator 3 view .LVU548
 2071 09c0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2072              	@ armwave.c:427:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2073              		.loc 1 427 9 discriminator 3 view .LVU549
 2074 09c4 040053E1 		cmp	r3, r4	@ _13, xx
 2075 09c8 F0FFFFCA 		bgt	.L122		@,
 2076 09cc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2077              	.LVL132:
 2078              	.L123:
 2079              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2080              		.loc 1 426 55 discriminator 2 view .LVU550
 2081 09d0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2082              	.LVL133:
 2083              	@ armwave.c:426:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2084              		.loc 1 426 5 discriminator 2 view .LVU551
 2085 09d4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2086 09d8 E9FFFFBA 		blt	.L121		@,
 2087              	.LVL134:
 2088              	.L120:
 432:armwave.c     ****         }
 433:armwave.c     ****     }
 434:armwave.c     **** 
 435:armwave.c     ****     fclose(fp);
 2089              		.loc 1 435 5 is_stmt 1 view .LVU552
 2090 09dc 0700A0E1 		mov	r0, r7	@, fp
 2091              	@ armwave.c:436: }
 436:armwave.c     **** }
 2092              		.loc 1 436 1 is_stmt 0 view .LVU553
 2093 09e0 0CD08DE2 		add	sp, sp, #12	@,,
 2094              		.cfi_def_cfa_offset 28
 2095              		@ sp needed	@
 2096 09e4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2097              		.cfi_restore 14
 2098              		.cfi_restore 9
 2099              		.cfi_restore 8
 2100              		.cfi_restore 7
 2101              		.cfi_restore 6
 2102              		.cfi_restore 5
 2103              		.cfi_restore 4
 2104              		.cfi_def_cfa_offset 0
 2105              	.LVL135:
 2106              	@ armwave.c:435:     fclose(fp);
 435:armwave.c     **** }
 2107              		.loc 1 435 5 view .LVU554
 2108 09e8 FEFFFFEA 		b	fclose		@
 2109              	.LVL136:
 2110              	.L128:
 435:armwave.c     **** }
 2111              		.loc 1 435 5 view .LVU555
 2112              		.align	2
 2113              	.L127:
 2114 09ec EC010000 		.word	.LC14
 2115 09f0 00000000 		.word	g_armwave_state
 2116 09f4 F0010000 		.word	.LC15
 2117 09f8 F4010000 		.word	.LC16
 2118 09fc FC010000 		.word	.LC17
 2119 0a00 04020000 		.word	.LC18
 2120              		.cfi_endproc
 2121              	.LFE68:
 2123              		.align	2
 2124              		.global	armwave_test_init
 2125              		.syntax unified
 2126              		.arm
 2127              		.fpu vfp
 2129              	armwave_test_init:
 2130              	.LVL137:
 2131              	.LFB69:
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Initialise some test functionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 442:armwave.c     **** {
 2132              		.loc 1 442 1 is_stmt 1 view -0
 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 0
 2135              		@ frame_needed = 0, uses_anonymous_args = 0
 443:armwave.c     ****     test_create_gamma();
 2136              		.loc 1 443 5 view .LVU557
 2137              	.LBB22:
 2138              	.LBI22:
  34:armwave.c     **** {
 2139              		.loc 1 34 6 view .LVU558
  34:armwave.c     **** {
 2140              		.loc 1 34 6 is_stmt 0 view .LVU559
 2141              	.LBE22:
 2142              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2143              		.loc 1 442 1 view .LVU560
 2144 0a04 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2145              		.cfi_def_cfa_offset 32
 2146              		.cfi_offset 4, -32
 2147              		.cfi_offset 5, -28
 2148              		.cfi_offset 6, -24
 2149              		.cfi_offset 7, -20
 2150              		.cfi_offset 8, -16
 2151              		.cfi_offset 9, -12
 2152              		.cfi_offset 10, -8
 2153              		.cfi_offset 14, -4
 2154 0a08 068B2DED 		vpush.64	{d8, d9, d10}	@
 2155              		.cfi_def_cfa_offset 56
 2156              		.cfi_offset 80, -56
 2157              		.cfi_offset 81, -52
 2158              		.cfi_offset 82, -48
 2159              		.cfi_offset 83, -44
 2160              		.cfi_offset 84, -40
 2161              		.cfi_offset 85, -36
 2162 0a0c C0409FE5 		ldr	r4, .L133+20	@ ivtmp.95,
 2163              	.LBB25:
 2164              	.LBB23:
 2165              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2166              		.loc 1 40 32 view .LVU561
 2167 0a10 2EAA9FED 		vldr.32	s20, .L133+16	@ tmp136,
 2168              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2169              		.loc 1 40 26 view .LVU562
 2170 0a14 299B9FED 		vldr.64	d9, .L133	@ tmp151,
 2171              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2172              		.loc 1 40 49 view .LVU563
 2173 0a18 2A8B9FED 		vldr.64	d8, .L133+8	@ tmp139,
 2174 0a1c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.95,
 2175              	.LBE23:
 2176              	.LBE25:
 2177              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2178              		.loc 1 442 1 view .LVU564
 2179 0a20 10D04DE2 		sub	sp, sp, #16	@,,
 2180              		.cfi_def_cfa_offset 72
 2181              	@ armwave.c:442: {
 442:armwave.c     ****     test_create_gamma();
 2182              		.loc 1 442 1 view .LVU565
 2183 0a24 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2184 0a28 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2185 0a2c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2186 0a30 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2187 0a34 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.95,
 2188 0a38 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2189              	.LVL138:
 2190              	.L130:
 2191              	.LBB26:
 2192              	.LBB24:
  40:armwave.c     ****     }
 2193              		.loc 1 40 9 is_stmt 1 view .LVU566
 2194              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2195              		.loc 1 40 32 is_stmt 0 view .LVU567
 2196 0a3c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.95
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 26 view .LVU568
 2199 0a40 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2200              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2201              		.loc 1 40 32 view .LVU569
 2202 0a44 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2203 0a48 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2204 0a4c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 26 view .LVU570
 2207 0a50 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2208 0a54 FEFFFFEB 		bl	pow		@
 2209              	.LVL139:
 2210              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2211              		.loc 1 40 49 view .LVU571
 2212 0a58 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2213              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2214              		.loc 1 40 24 view .LVU572
 2215 0a5c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2216 0a60 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2217 0a64 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2218              	.LVL140:
 2219              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2220              		.loc 1 39 5 view .LVU573
 2221 0a68 0A0054E1 		cmp	r4, r10	@ ivtmp.95, _39
 2222 0a6c F2FFFF1A 		bne	.L130		@,
 2223              	.LVL141:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2224              		.loc 1 39 5 view .LVU574
 2225              	.LBE24:
 2226              	.LBE26:
 444:armwave.c     **** 
 445:armwave.c     ****     // make ch1 yellowish by default
 446:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2227              		.loc 1 446 5 is_stmt 1 view .LVU575
 2228              	.LBB27:
 2229              	.LBI27:
 399:armwave.c     **** {
 2230              		.loc 1 399 6 view .LVU576
 2231              	.LBB28:
 402:armwave.c     ****         case 1:
 2232              		.loc 1 402 5 view .LVU577
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2233              		.loc 1 404 13 view .LVU578
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2234              		.loc 1 405 13 view .LVU579
 2235              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2236              		.loc 1 404 41 is_stmt 0 view .LVU580
 2237 0a70 60C09FE5 		ldr	ip, .L133+24	@ tmp142,
 2238 0a74 60409FE5 		ldr	r4, .L133+28	@ tmp143,
 2239              	.LBE28:
 2240              	.LBE27:
 2241              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 447:armwave.c     **** 
 448:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2242              		.loc 1 448 5 view .LVU581
 2243 0a78 0000A0E3 		mov	r0, #0	@ tmp147,
 2244              	.LBB32:
 2245              	.LBB29:
 2246              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 406:armwave.c     ****             break;
 2247              		.loc 1 406 41 view .LVU582
 2248 0a7c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2249              	.LBE29:
 2250              	.LBE32:
 2251              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2252              		.loc 1 448 5 view .LVU583
 2253 0a80 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2254 0a84 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2255 0a88 00808DE5 		str	r8, [sp]	@ render_width,
 2256 0a8c 0610A0E1 		mov	r1, r6	@, tmp3
 2257 0a90 0720A0E1 		mov	r2, r7	@, nwaves
 2258              	.LBB33:
 2259              	.LBB30:
 2260              	@ armwave.c:404:             g_armwave_state.ch1_color.r = r;
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2261              		.loc 1 404 41 view .LVU584
 2262 0a94 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 406:armwave.c     ****             break;
 2263              		.loc 1 406 13 is_stmt 1 view .LVU585
 2264              	.LBE30:
 2265              	.LBE33:
 2266              	@ armwave.c:448:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2267              		.loc 1 448 5 is_stmt 0 view .LVU586
 2268 0a98 0630A0E1 		mov	r3, r6	@, wave_size
 2269              	.LBB34:
 2270              	.LBB31:
 2271              	@ armwave.c:406:             g_armwave_state.ch1_color.b = b;
 406:armwave.c     ****             break;
 2272              		.loc 1 406 41 view .LVU587
 2273 0a9c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 407:armwave.c     ****     }
 2274              		.loc 1 407 13 is_stmt 1 view .LVU588
 2275              	.LVL142:
 407:armwave.c     ****     }
 2276              		.loc 1 407 13 is_stmt 0 view .LVU589
 2277              	.LBE31:
 2278              	.LBE34:
 2279              		.loc 1 448 5 is_stmt 1 view .LVU590
 2280 0aa0 FEFFFFEB 		bl	armwave_setup_render		@
 2281              	.LVL143:
 449:armwave.c     **** 
 450:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2282              		.loc 1 450 5 view .LVU591
 2283 0aa4 34109FE5 		ldr	r1, .L133+32	@,
 2284 0aa8 34009FE5 		ldr	r0, .L133+36	@,
 2285              	@ armwave.c:451: }
 451:armwave.c     **** }
 2286              		.loc 1 451 1 is_stmt 0 view .LVU592
 2287 0aac 10D08DE2 		add	sp, sp, #16	@,,
 2288              		.cfi_def_cfa_offset 56
 2289              		@ sp needed	@
 2290 0ab0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2291              		.cfi_restore 84
 2292              		.cfi_restore 85
 2293              		.cfi_restore 82
 2294              		.cfi_restore 83
 2295              		.cfi_restore 80
 2296              		.cfi_restore 81
 2297              		.cfi_def_cfa_offset 32
 2298 0ab4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2299              		.cfi_restore 14
 2300              		.cfi_restore 10
 2301              		.cfi_restore 9
 2302              		.cfi_restore 8
 2303              		.cfi_restore 7
 2304              		.cfi_restore 6
 2305              		.cfi_restore 5
 2306              		.cfi_restore 4
 2307              		.cfi_def_cfa_offset 0
 2308              	.LVL144:
 2309              	@ armwave.c:450:     printf("armwave version: %s\n", ARMWAVE_VER);
 450:armwave.c     **** }
 2310              		.loc 1 450 5 view .LVU593
 2311 0ab8 FEFFFFEA 		b	printf		@
 2312              	.LVL145:
 2313              	.L134:
 2314 0abc 0000A0E1 		.align	3
 2315              	.L133:
 2316 0ac0 000000C0 		.word	-1073741824
 2317 0ac4 CCCCEC3F 		.word	1072483532
 2318 0ac8 00000000 		.word	0
 2319 0acc 00E06F40 		.word	1081073664
 2320 0ad0 00007F43 		.word	1132396544
 2321 0ad4 FFFFFFFF 		.word	gamma_table-1
 2322 0ad8 00000000 		.word	g_armwave_state
 2323 0adc F609F406 		.word	116656630
 2324 0ae0 00000000 		.word	.LC0
 2325 0ae4 08000000 		.word	.LC1
 2326              		.cfi_endproc
 2327              	.LFE69:
 2329              		.align	2
 2330              		.global	armwave_test_fill_outbuf
 2331              		.syntax unified
 2332              		.arm
 2333              		.fpu vfp
 2335              	armwave_test_fill_outbuf:
 2336              	.LFB70:
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Render image to the local allocated buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_fill_outbuf()
 457:armwave.c     **** {
 2337              		.loc 1 457 1 is_stmt 1 view -0
 2338              		.cfi_startproc
 2339              		@ args = 0, pretend = 0, frame = 0
 2340              		@ frame_needed = 0, uses_anonymous_args = 0
 2341              		@ link register save eliminated.
 458:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2342              		.loc 1 458 5 view .LVU595
 2343 0ae8 04309FE5 		ldr	r3, .L136	@ tmp111,
 2344 0aec 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2345 0af0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2346              	.LVL146:
 2347              	.L137:
 2348              		.align	2
 2349              	.L136:
 2350 0af4 00000000 		.word	g_armwave_state
 2351              		.cfi_endproc
 2352              	.LFE70:
 2354              		.align	2
 2355              		.global	armwave_test_dump_buffer_to_ppm
 2356              		.syntax unified
 2357              		.arm
 2358              		.fpu vfp
 2360              	armwave_test_dump_buffer_to_ppm:
 2361              	.LVL147:
 2362              	.LFB71:
 459:armwave.c     **** }
 460:armwave.c     **** 
 461:armwave.c     **** /*
 462:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 463:armwave.c     ****  */
 464:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 465:armwave.c     **** {
 2363              		.loc 1 465 1 view -0
 2364              		.cfi_startproc
 2365              		@ args = 0, pretend = 0, frame = 0
 2366              		@ frame_needed = 0, uses_anonymous_args = 0
 2367              		@ link register save eliminated.
 466:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2368              		.loc 1 466 5 view .LVU597
 2369 0af8 08309FE5 		ldr	r3, .L139	@ tmp112,
 2370 0afc 0010A0E1 		mov	r1, r0	@, fn
 2371 0b00 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2372              	.LVL148:
 2373              		.loc 1 466 5 is_stmt 0 view .LVU598
 2374 0b04 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2375              	.LVL149:
 2376              	.L140:
 2377              		.loc 1 466 5 view .LVU599
 2378              		.align	2
 2379              	.L139:
 2380 0b08 00000000 		.word	g_armwave_state
 2381              		.cfi_endproc
 2382              	.LFE71:
 2384              		.align	2
 2385              		.global	armwave_test_fill_gdkbuf
 2386              		.syntax unified
 2387              		.arm
 2388              		.fpu vfp
 2390              	armwave_test_fill_gdkbuf:
 2391              	.LVL150:
 2392              	.LFB72:
 467:armwave.c     **** }
 468:armwave.c     **** 
 469:armwave.c     **** /*
 470:armwave.c     ****  * Render GDK buffer with test funtionry.
 471:armwave.c     ****  */
 472:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 473:armwave.c     **** {
 2393              		.loc 1 473 1 is_stmt 1 view -0
 2394              		.cfi_startproc
 2395              		@ args = 0, pretend = 0, frame = 0
 2396              		@ frame_needed = 0, uses_anonymous_args = 0
 2397              		@ link register save eliminated.
 474:armwave.c     ****     //PyObject *mv;
 475:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 476:armwave.c     **** 
 477:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 478:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2398              		.loc 1 478 5 view .LVU601
 479:armwave.c     ****     
 480:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 481:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2399              		.loc 1 481 5 view .LVU602
 2400              	@ armwave.c:478:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 478:armwave.c     ****     
 2401              		.loc 1 478 11 is_stmt 0 view .LVU603
 2402 0b0c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2403              	@ armwave.c:481:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2404              		.loc 1 481 5 view .LVU604
 2405 0b10 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2406              	.LVL151:
 2407              		.loc 1 481 5 view .LVU605
 2408 0b14 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2409              	.LVL152:
 2410              		.loc 1 481 5 view .LVU606
 2411              		.cfi_endproc
 2412              	.LFE72:
 2414              		.align	2
 2415              		.global	armwave_test_buffer_alloc
 2416              		.syntax unified
 2417              		.arm
 2418              		.fpu vfp
 2420              	armwave_test_buffer_alloc:
 2421              	.LVL153:
 2422              	.LFB73:
 482:armwave.c     **** }
 483:armwave.c     **** 
 484:armwave.c     **** /*
 485:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 486:armwave.c     ****  */
 487:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 488:armwave.c     **** {
 2423              		.loc 1 488 1 is_stmt 1 view -0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 489:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2427              		.loc 1 489 5 view .LVU608
 2428              	@ armwave.c:488: {
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2429              		.loc 1 488 1 is_stmt 0 view .LVU609
 2430 0b18 70402DE9 		push	{r4, r5, r6, lr}	@
 2431              		.cfi_def_cfa_offset 16
 2432              		.cfi_offset 4, -16
 2433              		.cfi_offset 5, -12
 2434              		.cfi_offset 6, -8
 2435              		.cfi_offset 14, -4
 2436              	@ armwave.c:488: {
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2437              		.loc 1 488 1 view .LVU610
 2438 0b1c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2439              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 2440              		.loc 1 489 23 view .LVU611
 2441 0b20 44409FE5 		ldr	r4, .L149	@ tmp128,
 2442 0b24 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2443              	.LVL154:
 2444              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 2445              		.loc 1 489 7 view .LVU612
 2446 0b28 000050E3 		cmp	r0, #0	@ _1,
 2447 0b2c 0000000A 		beq	.L143		@,
 490:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2448              		.loc 1 490 9 is_stmt 1 view .LVU613
 2449 0b30 FEFFFFEB 		bl	free		@
 2450              	.LVL155:
 2451              	.L143:
 491:armwave.c     ****     }
 492:armwave.c     **** 
 493:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 494:armwave.c     **** 
 495:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2452              		.loc 1 495 5 view .LVU614
 2453              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2454              		.loc 1 495 75 is_stmt 0 view .LVU615
 2455 0b34 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2456 0b38 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2457              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2458              		.loc 1 495 40 view .LVU616
 2459 0b3c 0610A0E1 		mov	r1, r6	@, nsets
 2460              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2461              		.loc 1 495 75 view .LVU617
 2462 0b40 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2463              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2464              		.loc 1 495 40 view .LVU618
 2465 0b44 0500A0E1 		mov	r0, r5	@, _4
 2466 0b48 FEFFFFEB 		bl	calloc		@
 2467              	.LVL156:
 2468              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     **** 
 497:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2469              		.loc 1 497 7 view .LVU619
 2470 0b4c 000050E3 		cmp	r0, #0	@ tmp124,
 2471              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2472              		.loc 1 495 38 view .LVU620
 2473 0b50 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2474              		.loc 1 497 5 is_stmt 1 view .LVU621
 2475              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 2476              		.loc 1 497 7 is_stmt 0 view .LVU622
 2477 0b54 7080BD18 		popne	{r4, r5, r6, pc}	@
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2478              		.loc 1 498 9 is_stmt 1 view .LVU623
 2479 0b58 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2480 0b5c 0620A0E1 		mov	r2, r6	@, nsets
 2481 0b60 08009FE5 		ldr	r0, .L149+4	@,
 2482              	@ armwave.c:502: }
 499:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 500:armwave.c     ****         return;
 501:armwave.c     ****     }
 502:armwave.c     **** }
 2483              		.loc 1 502 1 is_stmt 0 view .LVU624
 2484 0b64 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2485              		.cfi_restore 14
 2486              		.cfi_restore 6
 2487              		.cfi_restore 5
 2488              		.cfi_restore 4
 2489              		.cfi_def_cfa_offset 0
 2490              	.LVL157:
 2491              	@ armwave.c:498:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2492              		.loc 1 498 9 view .LVU625
 2493 0b68 FEFFFFEA 		b	printf		@
 2494              	.LVL158:
 2495              	.L150:
 498:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2496              		.loc 1 498 9 view .LVU626
 2497              		.align	2
 2498              	.L149:
 2499 0b6c 00000000 		.word	g_armwave_state
 2500 0b70 14020000 		.word	.LC19
 2501              		.cfi_endproc
 2502              	.LFE73:
 2504              		.align	2
 2505              		.global	armwave_fill_pixbuf_into_pybuffer
 2506              		.syntax unified
 2507              		.arm
 2508              		.fpu vfp
 2510              	armwave_fill_pixbuf_into_pybuffer:
 2511              	.LVL159:
 2512              	.LFB74:
 503:armwave.c     **** 
 504:armwave.c     **** /*
 505:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 506:armwave.c     ****  */
 507:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 508:armwave.c     **** {
 2513              		.loc 1 508 1 is_stmt 1 view -0
 2514              		.cfi_startproc
 2515              		@ args = 0, pretend = 0, frame = 48
 2516              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     Py_buffer buffer;
 2517              		.loc 1 509 5 view .LVU628
 510:armwave.c     ****     int ret;
 2518              		.loc 1 510 5 view .LVU629
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 513:armwave.c     **** 
 514:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2519              		.loc 1 514 5 view .LVU630
 2520              	@ armwave.c:508: {
 508:armwave.c     ****     Py_buffer buffer;
 2521              		.loc 1 508 1 is_stmt 0 view .LVU631
 2522 0b74 04E02DE5 		str	lr, [sp, #-4]!	@,
 2523              		.cfi_def_cfa_offset 4
 2524              		.cfi_offset 14, -4
 2525 0b78 34D04DE2 		sub	sp, sp, #52	@,,
 2526              		.cfi_def_cfa_offset 56
 2527              	@ armwave.c:514:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2528              		.loc 1 514 11 view .LVU632
 2529 0b7c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2530 0b80 0120A0E3 		mov	r2, #1	@,
 2531 0b84 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2532              	.LVL160:
 515:armwave.c     **** 
 516:armwave.c     ****     if(ret != 0) {
 2533              		.loc 1 516 5 is_stmt 1 view .LVU633
 2534              	@ armwave.c:516:     if(ret != 0) {
 2535              		.loc 1 516 7 is_stmt 0 view .LVU634
 2536 0b88 000050E3 		cmp	r0, #0	@,
 2537 0b8c 0A00001A 		bne	.L155		@,
 517:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 518:armwave.c     ****         Py_RETURN_FALSE;
 519:armwave.c     ****     }
 520:armwave.c     **** 
 521:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 522:armwave.c     **** 
 523:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2538              		.loc 1 523 5 is_stmt 1 view .LVU635
 2539 0b90 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2540              	.LVL161:
 2541              		.loc 1 523 5 is_stmt 0 view .LVU636
 2542 0b94 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2543              	.LVL162:
 524:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 525:armwave.c     **** 
 526:armwave.c     ****     PyBuffer_Release(&buffer);
 2544              		.loc 1 526 5 is_stmt 1 view .LVU637
 2545 0b98 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2546 0b9c FEFFFFEB 		bl	PyBuffer_Release		@
 2547              	.LVL163:
 527:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 528:armwave.c     **** 
 529:armwave.c     ****     Py_RETURN_TRUE;
 2548              		.loc 1 529 5 view .LVU638
 2549              	.LBB35:
 2550              	.LBI35:
 2551              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2552              		.loc 2 456 20 view .LVU639
 2553              	.LBB36:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2554              		.loc 2 458 21 view .LVU640
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2555              		.loc 2 459 5 view .LVU641
 2556              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2557              		.loc 2 459 18 is_stmt 0 view .LVU642
 2558 0ba0 38309FE5 		ldr	r3, .L156	@ tmp126,
 2559              	.LBE36:
 2560              	.LBE35:
 2561              	@ armwave.c:529:     Py_RETURN_TRUE;
 2562              		.loc 1 529 5 view .LVU643
 2563 0ba4 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2564              	.LBB38:
 2565              	.LBB37:
 2566              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2567              		.loc 2 459 18 view .LVU644
 2568 0ba8 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2569 0bac 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2570 0bb0 002083E5 		str	r2, [r3]	@ tmp128,
 2571              	.LBE37:
 2572              	.LBE38:
 2573              	@ armwave.c:530: }
 530:armwave.c     **** }
 2574              		.loc 1 530 1 view .LVU645
 2575 0bb4 34D08DE2 		add	sp, sp, #52	@,,
 2576              		.cfi_remember_state
 2577              		.cfi_def_cfa_offset 4
 2578              		@ sp needed	@
 2579 0bb8 04F09DE4 		ldr	pc, [sp], #4	@
 2580              	.LVL164:
 2581              	.L155:
 2582              		.cfi_restore_state
 517:armwave.c     ****         Py_RETURN_FALSE;
 2583              		.loc 1 517 9 is_stmt 1 view .LVU646
 2584 0bbc 20009FE5 		ldr	r0, .L156+4	@,
 2585              	.LVL165:
 517:armwave.c     ****         Py_RETURN_FALSE;
 2586              		.loc 1 517 9 is_stmt 0 view .LVU647
 2587 0bc0 FEFFFFEB 		bl	puts		@
 2588              	.LVL166:
 518:armwave.c     ****     }
 2589              		.loc 1 518 9 is_stmt 1 view .LVU648
 2590              	.LBB39:
 2591              	.LBI39:
 456:/usr/local/include/python3.8/object.h **** {
 2592              		.loc 2 456 20 view .LVU649
 2593              	.LBB40:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2594              		.loc 2 458 21 view .LVU650
 2595              		.loc 2 459 5 view .LVU651
 2596              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2597              		.loc 2 459 18 is_stmt 0 view .LVU652
 2598 0bc4 1C309FE5 		ldr	r3, .L156+8	@ tmp120,
 2599              	.LBE40:
 2600              	.LBE39:
 2601              	@ armwave.c:518:         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 2602              		.loc 1 518 9 view .LVU653
 2603 0bc8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2604              	.LBB42:
 2605              	.LBB41:
 2606              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2607              		.loc 2 459 18 view .LVU654
 2608 0bcc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2609 0bd0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2610 0bd4 002083E5 		str	r2, [r3]	@ tmp122,
 2611              	.LBE41:
 2612              	.LBE42:
 2613              	@ armwave.c:530: }
 2614              		.loc 1 530 1 view .LVU655
 2615 0bd8 34D08DE2 		add	sp, sp, #52	@,,
 2616              		.cfi_def_cfa_offset 4
 2617              		@ sp needed	@
 2618 0bdc 04F09DE4 		ldr	pc, [sp], #4	@
 2619              	.L157:
 2620              		.align	2
 2621              	.L156:
 2622 0be0 00000000 		.word	_Py_TrueStruct
 2623 0be4 68020000 		.word	.LC20
 2624 0be8 00000000 		.word	_Py_FalseStruct
 2625              		.cfi_endproc
 2626              	.LFE74:
 2628              		.align	2
 2629              		.global	armwave_test_create_am_sine
 2630              		.syntax unified
 2631              		.arm
 2632              		.fpu vfp
 2634              	armwave_test_create_am_sine:
 2635              	.LVL167:
 2636              	.LFB75:
 531:armwave.c     **** 
 532:armwave.c     **** /*
 533:armwave.c     ****  * Make a test AM waveform for render tests.
 534:armwave.c     ****  *
 535:armwave.c     ****  * @param   mod                     modulation depth
 536:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 537:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 538:armwave.c     ****  */
 539:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 540:armwave.c     **** {
 2637              		.loc 1 540 1 is_stmt 1 view -0
 2638              		.cfi_startproc
 2639              		@ args = 0, pretend = 0, frame = 8
 2640              		@ frame_needed = 0, uses_anonymous_args = 0
 541:armwave.c     ****     float v, noise, xnoise, mod_val;
 2641              		.loc 1 541 5 view .LVU657
 542:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2642              		.loc 1 542 5 view .LVU658
 2643              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2644              		.loc 1 540 1 is_stmt 0 view .LVU659
 2645 0bec F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2646              		.cfi_def_cfa_offset 32
 2647              		.cfi_offset 4, -32
 2648              		.cfi_offset 5, -28
 2649              		.cfi_offset 6, -24
 2650              		.cfi_offset 7, -20
 2651              		.cfi_offset 8, -16
 2652              		.cfi_offset 9, -12
 2653              		.cfi_offset 10, -8
 2654              		.cfi_offset 14, -4
 2655              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2656              		.loc 1 542 38 view .LVU660
 2657 0bf0 7A7A9FED 		vldr.32	s14, .L189	@ tmp180,
 2658              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2659              		.loc 1 542 55 view .LVU661
 2660 0bf4 00529FE5 		ldr	r5, .L189+28	@ tmp250,
 2661              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2662              		.loc 1 540 1 view .LVU662
 2663 0bf8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2664              		.cfi_def_cfa_offset 80
 2665              		.cfi_offset 80, -80
 2666              		.cfi_offset 81, -76
 2667              		.cfi_offset 82, -72
 2668              		.cfi_offset 83, -68
 2669              		.cfi_offset 84, -64
 2670              		.cfi_offset 85, -60
 2671              		.cfi_offset 86, -56
 2672              		.cfi_offset 87, -52
 2673              		.cfi_offset 88, -48
 2674              		.cfi_offset 89, -44
 2675              		.cfi_offset 90, -40
 2676              		.cfi_offset 91, -36
 2677 0bfc 0090A0E1 		mov	r9, r0	@ sets, sets
 2678              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2679              		.loc 1 542 38 view .LVU663
 2680 0c00 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2681              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 543:armwave.c     ****     int s, set_offset = 0;
 544:armwave.c     ****     int w, x;
 545:armwave.c     **** 
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2682              		.loc 1 546 70 view .LVU664
 2683 0c04 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2684 0c08 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2685              	.LBB45:
 2686              	.LBB46:
 2687              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2688              		.loc 1 489 23 view .LVU665
 2689 0c0c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2690              	.LVL168:
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2691              		.loc 1 489 23 view .LVU666
 2692              	.LBE46:
 2693              	.LBE45:
 2694              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2695              		.loc 1 542 38 view .LVU667
 2696 0c10 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2697              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2698              		.loc 1 546 70 view .LVU668
 2699 0c14 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2700              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2701              		.loc 1 540 1 view .LVU669
 2702 0c18 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2703              	.LBB50:
 2704              	.LBB47:
 2705              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2706              		.loc 1 489 7 view .LVU670
 2707 0c1c 000050E3 		cmp	r0, #0	@ _82,
 2708              	.LBE47:
 2709              	.LBE50:
 2710              	@ armwave.c:540: {
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2711              		.loc 1 540 1 view .LVU671
 2712 0c20 08D04DE2 		sub	sp, sp, #8	@,,
 2713              		.cfi_def_cfa_offset 88
 2714              	@ armwave.c:547:     g_armwave_state.test_wave_buffer_nsets = sets;
 547:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2715              		.loc 1 547 44 view .LVU672
 2716 0c24 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2717              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2718              		.loc 1 546 45 view .LVU673
 2719 0c28 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2720              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2721              		.loc 1 542 38 view .LVU674
 2722 0c2c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2723              	@ armwave.c:542:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 542:armwave.c     ****     int s, set_offset = 0;
 2724              		.loc 1 542 11 view .LVU675
 2725 0c30 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2726              	.LVL169:
 543:armwave.c     ****     int w, x;
 2727              		.loc 1 543 5 is_stmt 1 view .LVU676
 544:armwave.c     **** 
 2728              		.loc 1 544 5 view .LVU677
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2729              		.loc 1 546 5 view .LVU678
 2730              		.loc 1 547 5 view .LVU679
 548:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2731              		.loc 1 548 5 view .LVU680
 2732              	.LBB51:
 2733              	.LBI45:
 487:armwave.c     **** {
 2734              		.loc 1 487 6 view .LVU681
 2735              	.LBB48:
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2736              		.loc 1 489 5 view .LVU682
 2737              	@ armwave.c:489:     if(g_armwave_state.test_wave_buffer != NULL) {
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2738              		.loc 1 489 7 is_stmt 0 view .LVU683
 2739 0c34 0000000A 		beq	.L159		@,
 490:armwave.c     ****     }
 2740              		.loc 1 490 9 is_stmt 1 view .LVU684
 2741 0c38 FEFFFFEB 		bl	free		@
 2742              	.LVL170:
 2743              	.L159:
 495:armwave.c     **** 
 2744              		.loc 1 495 5 view .LVU685
 2745              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2746              		.loc 1 495 75 is_stmt 0 view .LVU686
 2747 0c3c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2748 0c40 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2749              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2750              		.loc 1 495 40 view .LVU687
 2751 0c44 0910A0E1 		mov	r1, r9	@, sets
 2752              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2753              		.loc 1 495 75 view .LVU688
 2754 0c48 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2755              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2756              		.loc 1 495 40 view .LVU689
 2757 0c4c 0400A0E1 		mov	r0, r4	@, _85
 2758 0c50 FEFFFFEB 		bl	calloc		@
 2759              	.LVL171:
 2760              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2761              		.loc 1 497 7 view .LVU690
 2762 0c54 000050E3 		cmp	r0, #0	@ tmp191,
 2763              	@ armwave.c:495:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 495:armwave.c     **** 
 2764              		.loc 1 495 38 view .LVU691
 2765 0c58 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2766              		.loc 1 497 5 is_stmt 1 view .LVU692
 2767              	@ armwave.c:497:     if(g_armwave_state.test_wave_buffer == NULL) {
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2768              		.loc 1 497 7 is_stmt 0 view .LVU693
 2769 0c5c 5A00000A 		beq	.L188		@,
 2770              	.L160:
 2771              	.LVL172:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2772              		.loc 1 497 7 view .LVU694
 2773              	.LBE48:
 2774              	.LBE51:
 2775              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 549:armwave.c     **** 
 550:armwave.c     ****     for(s = 0; s < sets; s++) {
 2776              		.loc 1 550 5 discriminator 1 view .LVU695
 2777 0c60 000059E3 		cmp	r9, #0	@ sets,
 2778 0c64 550000DA 		ble	.L158		@,
 2779              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 552:armwave.c     ****     
 553:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 554:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 555:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 556:armwave.c     **** 
 557:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 558:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     ****                 noise *= noise;
 562:armwave.c     **** 
 563:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 564:armwave.c     ****                     noise = -noise;
 565:armwave.c     **** 
 566:armwave.c     ****                 noise += 1.0f;
 567:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 568:armwave.c     **** 
 569:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2780              		.loc 1 569 45 view .LVU696
 2781 0c68 5C8A9FED 		vldr.32	s16, .L189	@ tmp258,
 2782              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 570:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 571:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 572:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2783              		.loc 1 572 104 view .LVU697
 2784 0c6c 5CCA9FED 		vldr.32	s24, .L189+4	@ tmp259,
 2785              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2786              		.loc 1 550 5 view .LVU698
 2787 0c70 0070A0E3 		mov	r7, #0	@ set_offset,
 2788              	@ armwave.c:551:         printf("Calculating test set %d\n", s);
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2789              		.loc 1 551 9 view .LVU699
 2790 0c74 84A19FE5 		ldr	r10, .L189+32	@ tmp257,
 2791              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2792              		.loc 1 550 5 view .LVU700
 2793 0c78 0780A0E1 		mov	r8, r7	@ s, set_offset
 2794              	.LVL173:
 2795              	.L161:
 551:armwave.c     ****         printf("Calculating test set %d\n", s);
 2796              		.loc 1 551 9 is_stmt 1 view .LVU701
 2797 0c7c 0810A0E1 		mov	r1, r8	@, s
 2798 0c80 0A00A0E1 		mov	r0, r10	@, tmp257
 2799 0c84 FEFFFFEB 		bl	printf		@
 2800              	.LVL174:
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2801              		.loc 1 553 9 view .LVU702
 2802              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2803              		.loc 1 553 39 is_stmt 0 view .LVU703
 2804 0c88 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2805              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2806              		.loc 1 553 9 view .LVU704
 2807 0c8c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2808 0c90 450000DA 		ble	.L162		@,
 2809              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2810              		.loc 1 555 21 view .LVU705
 2811 0c94 53CADFED 		vldr.32	s25, .L189+8	@ tmp200,
 2812              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2813              		.loc 1 569 33 view .LVU706
 2814 0c98 53BA9FED 		vldr.32	s22, .L189+12	@ tmp253,
 2815              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2816              		.loc 1 567 24 view .LVU707
 2817 0c9c 53AADFED 		vldr.32	s21, .L189+16	@ tmp254,
 2818 0ca0 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2819              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2820              		.loc 1 553 15 view .LVU708
 2821 0ca4 0060A0E3 		mov	r6, #0	@ w,
 2822              	.LVL175:
 2823              	.L169:
 555:armwave.c     **** 
 2824              		.loc 1 555 13 is_stmt 1 view .LVU709
 2825              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2826              		.loc 1 555 21 is_stmt 0 view .LVU710
 2827 0ca8 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2828 0cac 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2829              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2830              		.loc 1 557 13 view .LVU711
 2831 0cb0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2832              	@ armwave.c:555:             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 2833              		.loc 1 555 21 view .LVU712
 2834 0cb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2835 0cb8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2836              	.LVL176:
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2837              		.loc 1 557 13 is_stmt 1 view .LVU713
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2838              		.loc 1 557 13 is_stmt 0 view .LVU714
 2839 0cbc 370000DA 		ble	.L163		@,
 2840 0cc0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2841              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2842              		.loc 1 572 113 view .LVU715
 2843 0cc4 4AAA9FED 		vldr.32	s20, .L189+20	@ tmp229,
 2844 0cc8 4A8ADFED 		vldr.32	s17, .L189+24	@ tmp230,
 2845              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2846              		.loc 1 557 19 view .LVU716
 2847 0ccc 0040A0E3 		mov	r4, #0	@ x,
 2848              	.LVL177:
 2849              	.L168:
 558:armwave.c     ****                 noise *= noise;
 2850              		.loc 1 558 17 is_stmt 1 view .LVU717
 2851              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2852              		.loc 1 558 28 is_stmt 0 view .LVU718
 2853 0cd0 FEFFFFEB 		bl	rand		@
 2854              	.LVL178:
 2855              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2856              		.loc 1 558 35 view .LVU719
 2857 0cd4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2858              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2859              		.loc 1 558 45 view .LVU720
 2860 0cd8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2861 0cdc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2862              	@ armwave.c:558:                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 2863              		.loc 1 558 24 view .LVU721
 2864 0ce0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2865              	.LVL179:
 559:armwave.c     ****                 noise *= noise;
 2866              		.loc 1 559 17 is_stmt 1 view .LVU722
 2867              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2868              		.loc 1 559 23 is_stmt 0 view .LVU723
 2869 0ce4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2870              	.LVL180:
 560:armwave.c     ****                 noise *= noise;
 2871              		.loc 1 560 17 is_stmt 1 view .LVU724
 2872              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 2873              		.loc 1 560 23 is_stmt 0 view .LVU725
 2874 0ce8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2875              	.LVL181:
 561:armwave.c     **** 
 2876              		.loc 1 561 17 is_stmt 1 view .LVU726
 2877              	@ armwave.c:561:                 noise *= noise;
 561:armwave.c     **** 
 2878              		.loc 1 561 23 is_stmt 0 view .LVU727
 2879 0cec A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2880              	.LVL182:
 563:armwave.c     ****                     noise = -noise;
 2881              		.loc 1 563 17 is_stmt 1 view .LVU728
 2882              	@ armwave.c:563:                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 2883              		.loc 1 563 21 is_stmt 0 view .LVU729
 2884 0cf0 FEFFFFEB 		bl	rand		@
 2885              	.LVL183:
 564:armwave.c     **** 
 2886              		.loc 1 564 21 is_stmt 1 view .LVU730
 2887              	@ armwave.c:563:                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 2888              		.loc 1 563 19 is_stmt 0 view .LVU731
 2889 0cf4 020910E3 		tst	r0, #32768	@,
 2890              	@ armwave.c:564:                     noise = -noise;
 564:armwave.c     **** 
 2891              		.loc 1 564 27 view .LVU732
 2892 0cf8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2893              	.LVL184:
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2894              		.loc 1 566 17 is_stmt 1 view .LVU733
 567:armwave.c     **** 
 2895              		.loc 1 567 17 view .LVU734
 2896              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2897              		.loc 1 567 27 is_stmt 0 view .LVU735
 2898 0cfc FEFFFFEB 		bl	rand		@
 2899              	.LVL185:
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2900              		.loc 1 569 17 is_stmt 1 view .LVU736
 2901              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2902              		.loc 1 569 45 is_stmt 0 view .LVU737
 2903 0d00 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2904              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2905              		.loc 1 569 33 view .LVU738
 2906 0d04 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2907              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2908              		.loc 1 569 45 view .LVU739
 2909 0d08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2910              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2911              		.loc 1 569 33 view .LVU740
 2912 0d0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2913              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2914              		.loc 1 569 45 view .LVU741
 2915 0d10 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2916              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2917              		.loc 1 569 33 view .LVU742
 2918 0d14 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2919              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2920              		.loc 1 567 34 view .LVU743
 2921 0d18 7000FFE6 		uxth	r0, r0	@ tmp214,
 2922              	.LVL186:
 2923              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2924              		.loc 1 567 44 view .LVU744
 2925 0d1c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2926 0d20 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2927              	@ armwave.c:567:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 2928              		.loc 1 567 24 view .LVU745
 2929 0d24 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2930              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2931              		.loc 1 569 77 view .LVU746
 2932 0d28 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2933              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2934              		.loc 1 569 22 view .LVU747
 2935 0d2c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2936 0d30 FEFFFFEB 		bl	sin		@
 2937              	.LVL187:
 2938              		.loc 1 572 17 is_stmt 1 view .LVU748
 2939              	@ armwave.c:566:                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2940              		.loc 1 566 23 is_stmt 0 view .LVU749
 2941 0d34 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2942              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2943              		.loc 1 572 104 view .LVU750
 2944 0d38 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2945              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2946              		.loc 1 569 98 view .LVU751
 2947 0d3c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2948              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2949              		.loc 1 569 87 view .LVU752
 2950 0d40 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2951              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2952              		.loc 1 569 98 view .LVU753
 2953 0d44 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2954              	@ armwave.c:569:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2955              		.loc 1 569 19 view .LVU754
 2956 0d48 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2957              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2958              		.loc 1 572 113 view .LVU755
 2959 0d4c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2960 0d50 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2961 0d54 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2962 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2963 0d5c 050000DA 		ble	.L165		@,
 2964              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2965              		.loc 1 572 104 discriminator 1 view .LVU756
 2966 0d60 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2967 0d64 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2968 0d68 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2969 0d6c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2970 0d70 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2971 0d74 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2972              	.L165:
 2973              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2974              		.loc 1 572 57 discriminator 12 view .LVU757
 2975 0d78 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2976              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2977              		.loc 1 572 102 discriminator 12 view .LVU758
 2978 0d7c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2979 0d80 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2980 0d84 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2981              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2982              		.loc 1 557 58 discriminator 12 view .LVU759
 2983 0d88 014084E2 		add	r4, r4, #1	@ x, x,
 2984              	.LVL188:
 2985              	@ armwave.c:572:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2986              		.loc 1 572 102 discriminator 12 view .LVU760
 2987 0d8c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2988              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2989              		.loc 1 557 43 discriminator 12 view .LVU761
 2990 0d90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2991              	@ armwave.c:557:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2992              		.loc 1 557 13 discriminator 12 view .LVU762
 2993 0d94 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2994 0d98 CCFFFFCA 		bgt	.L168		@,
 2995 0d9c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2996              	.LVL189:
 2997              	.L163:
 2998              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2999              		.loc 1 553 48 discriminator 2 view .LVU763
 3000 0da0 016086E2 		add	r6, r6, #1	@ w, w,
 3001              	.LVL190:
 3002              	@ armwave.c:553:         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3003              		.loc 1 553 9 discriminator 2 view .LVU764
 3004 0da4 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3005 0da8 BEFFFFBA 		blt	.L169		@,
 3006              	.LVL191:
 3007              	.L162:
 573:armwave.c     ****             }
 574:armwave.c     ****         }
 575:armwave.c     **** 
 576:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3008              		.loc 1 576 9 is_stmt 1 discriminator 2 view .LVU765
 3009              	@ armwave.c:576:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3010              		.loc 1 576 46 is_stmt 0 discriminator 2 view .LVU766
 3011 0dac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3012              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3013              		.loc 1 550 27 discriminator 2 view .LVU767
 3014 0db0 018088E2 		add	r8, r8, #1	@ s, s,
 3015              	.LVL192:
 3016              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3017              		.loc 1 550 5 discriminator 2 view .LVU768
 3018 0db4 080059E1 		cmp	r9, r8	@ sets, s
 3019              	@ armwave.c:576:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3020              		.loc 1 576 20 discriminator 2 view .LVU769
 3021 0db8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3022              	.LVL193:
 3023              	@ armwave.c:550:     for(s = 0; s < sets; s++) {
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 3024              		.loc 1 550 5 discriminator 2 view .LVU770
 3025 0dbc AEFFFF1A 		bne	.L161		@,
 3026              	.LVL194:
 3027              	.L158:
 3028              	@ armwave.c:578: }
 577:armwave.c     ****     }
 578:armwave.c     **** }
 3029              		.loc 1 578 1 view .LVU771
 3030 0dc0 08D08DE2 		add	sp, sp, #8	@,,
 3031              		.cfi_remember_state
 3032              		.cfi_def_cfa_offset 80
 3033              		@ sp needed	@
 3034 0dc4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3035              		.cfi_restore 90
 3036              		.cfi_restore 91
 3037              		.cfi_restore 88
 3038              		.cfi_restore 89
 3039              		.cfi_restore 86
 3040              		.cfi_restore 87
 3041              		.cfi_restore 84
 3042              		.cfi_restore 85
 3043              		.cfi_restore 82
 3044              		.cfi_restore 83
 3045              		.cfi_restore 80
 3046              		.cfi_restore 81
 3047              		.cfi_def_cfa_offset 32
 3048              	.LVL195:
 3049              		.loc 1 578 1 view .LVU772
 3050 0dc8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3051              	.LVL196:
 3052              	.L188:
 3053              		.cfi_restore_state
 3054              	.LBB52:
 3055              	.LBB49:
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3056              		.loc 1 498 9 is_stmt 1 view .LVU773
 3057 0dcc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3058 0dd0 0920A0E1 		mov	r2, r9	@, sets
 3059 0dd4 28009FE5 		ldr	r0, .L189+36	@,
 3060 0dd8 FEFFFFEB 		bl	printf		@
 3061              	.LVL197:
 500:armwave.c     ****     }
 3062              		.loc 1 500 9 view .LVU774
 3063 0ddc 9FFFFFEA 		b	.L160		@
 3064              	.L190:
 3065              		.align	2
 3066              	.L189:
 3067 0de0 0000803F 		.word	1065353216
 3068 0de4 00007F43 		.word	1132396544
 3069 0de8 0000003F 		.word	1056964608
 3070 0dec C3F5C840 		.word	1086911939
 3071 0df0 38FFC74A 		.word	1254620984
 3072 0df4 0000FE42 		.word	1123942400
 3073 0df8 00000043 		.word	1124073472
 3074 0dfc 00000000 		.word	g_armwave_state
 3075 0e00 BC020000 		.word	.LC21
 3076 0e04 14020000 		.word	.LC19
 3077              	.LBE49:
 3078              	.LBE52:
 3079              		.cfi_endproc
 3080              	.LFE75:
 3082              		.align	2
 3083              		.global	armwave_cleanup
 3084              		.syntax unified
 3085              		.arm
 3086              		.fpu vfp
 3088              	armwave_cleanup:
 3089              	.LFB76:
 579:armwave.c     **** 
 580:armwave.c     **** /*
 581:armwave.c     ****  * Make a test square waveform.
 582:armwave.c     ****  *
 583:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 584:armwave.c     ****  */
 585:armwave.c     **** #if 0
 586:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 587:armwave.c     **** {
 588:armwave.c     ****     uint8_t v;
 589:armwave.c     ****     float noise, xnoise;
 590:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 591:armwave.c     ****     int w, x;
 592:armwave.c     **** 
 593:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 594:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 595:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     ****             noise *= noise;
 599:armwave.c     **** 
 600:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 601:armwave.c     ****                 noise = -noise;
 602:armwave.c     **** 
 603:armwave.c     ****             //noise += 1.0f;
 604:armwave.c     **** 
 605:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 606:armwave.c     ****                 new_level = 0.2f;
 607:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 608:armwave.c     ****                 new_level = 0.8f;
 609:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 610:armwave.c     ****                 new_level = 0.2f;
 611:armwave.c     ****             } else {
 612:armwave.c     ****                 new_level = 0.8f;
 613:armwave.c     ****             }
 614:armwave.c     **** 
 615:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 616:armwave.c     **** 
 617:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 618:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 619:armwave.c     ****         }
 620:armwave.c     ****     }
 621:armwave.c     **** }
 622:armwave.c     **** #endif
 623:armwave.c     **** 
 624:armwave.c     **** /*
 625:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 626:armwave.c     ****  */
 627:armwave.c     **** void armwave_cleanup()
 628:armwave.c     **** {
 3090              		.loc 1 628 1 view -0
 3091              		.cfi_startproc
 3092              		@ args = 0, pretend = 0, frame = 0
 3093              		@ frame_needed = 0, uses_anonymous_args = 0
 629:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3094              		.loc 1 629 5 view .LVU776
 3095              	@ armwave.c:628: {
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3096              		.loc 1 628 1 is_stmt 0 view .LVU777
 3097 0e08 10402DE9 		push	{r4, lr}	@
 3098              		.cfi_def_cfa_offset 8
 3099              		.cfi_offset 4, -8
 3100              		.cfi_offset 14, -4
 3101              	@ armwave.c:629:     free(g_armwave_state.out_pixbuf);
 3102              		.loc 1 629 25 view .LVU778
 3103 0e0c 34409FE5 		ldr	r4, .L193	@ tmp114,
 3104              	@ armwave.c:629:     free(g_armwave_state.out_pixbuf);
 3105              		.loc 1 629 5 view .LVU779
 3106 0e10 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3107 0e14 FEFFFFEB 		bl	free		@
 3108              	.LVL198:
 630:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3109              		.loc 1 630 5 is_stmt 1 view .LVU780
 3110 0e18 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3111 0e1c FEFFFFEB 		bl	free		@
 3112              	.LVL199:
 631:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3113              		.loc 1 631 5 view .LVU781
 3114 0e20 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3115 0e24 FEFFFFEB 		bl	free		@
 3116              	.LVL200:
 632:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3117              		.loc 1 632 5 view .LVU782
 3118 0e28 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3119 0e2c FEFFFFEB 		bl	free		@
 3120              	.LVL201:
 633:armwave.c     **** 
 634:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3121              		.loc 1 634 5 view .LVU783
 3122              	@ armwave.c:634:     g_armwave_state.out_pixbuf = NULL;
 3123              		.loc 1 634 32 is_stmt 0 view .LVU784
 3124 0e30 0030A0E3 		mov	r3, #0	@ tmp123,
 3125 0e34 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 635:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3126              		.loc 1 635 5 is_stmt 1 view .LVU785
 3127              	@ armwave.c:635:     g_armwave_state.ch1_buffer = NULL;
 3128              		.loc 1 635 32 is_stmt 0 view .LVU786
 3129 0e38 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 636:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3130              		.loc 1 636 5 is_stmt 1 view .LVU787
 3131              	@ armwave.c:636:     g_armwave_state.xcoord_to_xpixel = NULL;
 3132              		.loc 1 636 38 is_stmt 0 view .LVU788
 3133 0e3c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 637:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3134              		.loc 1 637 5 is_stmt 1 view .LVU789
 3135              	@ armwave.c:637:     g_armwave_state.test_wave_buffer = NULL;
 3136              		.loc 1 637 38 is_stmt 0 view .LVU790
 3137 0e40 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3138              	@ armwave.c:638: }
 638:armwave.c     **** }
 3139              		.loc 1 638 1 view .LVU791
 3140 0e44 1080BDE8 		pop	{r4, pc}	@
 3141              	.L194:
 3142              		.align	2
 3143              	.L193:
 3144 0e48 00000000 		.word	g_armwave_state
 3145              		.cfi_endproc
 3146              	.LFE76:
 3148              		.comm	gamma_table,256,4
 3149              		.comm	g_armwave_state,136,4
 3150              		.section	.rodata
 3151              		.align	2
 3152              		.set	.LANCHOR0,. + 0
 3155              	__PRETTY_FUNCTION__.17095:
 3156 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3156      6176655F 
 3156      66696C6C 
 3156      5F706978 
 3156      6275665F 
 3157 001b 00       		.space	1
 3160              	__PRETTY_FUNCTION__.17125:
 3161 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3161      6176655F 
 3161      73657475 
 3161      705F7265 
 3161      6E646572 
 3162 0031 000000   		.space	3
 3165              	__PRETTY_FUNCTION__.17132:
 3166 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3166      6176655F 
 3166      7365745F 
 3166      77617665 
 3166      5F706F69 
 3167 004d 000000   		.space	3
 3170              	__PRETTY_FUNCTION__.17139:
 3171 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3171      6176655F 
 3171      7365745F 
 3171      77617665 
 3171      5F706F69 
 3172              		.section	.rodata.str1.4,"aMS",%progbits,1
 3173              		.align	2
 3174              	.LC0:
 3175 0000 76302E30 		.ascii	"v0.0.1\000"
 3175      2E3100
 3176 0007 00       		.space	1
 3177              	.LC1:
 3178 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3178      61766520 
 3178      76657273 
 3178      696F6E3A 
 3178      2025730A 
 3179 001d 000000   		.space	3
 3180              	.LC2:
 3181 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3181      78253038 
 3181      7820623D 
 3181      30782530 
 3181      38782063 
 3182 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 3182      25642073 
 3182      63616C65 
 3182      3D256420 
 3182      62697464 
 3183 0077 00       		.space	1
 3184              	.LC3:
 3185 0078 61726D77 		.ascii	"armwave.c\000"
 3185      6176652E 
 3185      6300
 3186 0082 0000     		.space	2
 3187              	.LC4:
 3188 0084 6F75745F 		.ascii	"out_buffer != NULL\000"
 3188      62756666 
 3188      65722021 
 3188      3D204E55 
 3188      4C4C00
 3189 0097 00       		.space	1
 3190              	.LC5:
 3191 0098 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3191      20653D25 
 3191      6420773D 
 3191      25642077 
 3191      733D2564 
 3192              	.LC6:
 3193 00c4 73746172 		.ascii	"start_point < end_point\000"
 3193      745F706F 
 3193      696E7420 
 3193      3C20656E 
 3193      645F706F 
 3194              	.LC7:
 3195 00dc 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3195      7566665F 
 3195      73697A65 
 3195      3D25642C 
 3195      20636D70 
 3196 010e 00       		.ascii	"\000"
 3197 010f 00       		.space	1
 3198              	.LC8:
 3199 0110 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3199      6D776176 
 3199      655F7374 
 3199      6174652E 
 3199      6368315F 
 3200 0133 00       		.space	1
 3201              	.LC9:
 3202 0134 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3202      6D776176 
 3202      655F7374 
 3202      6174652E 
 3202      78636F6F 
 3203 015d 000000   		.space	3
 3204              	.LC10:
 3205 0160 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3205      3A203078 
 3205      25303878 
 3205      20307825 
 3205      30387820 
 3206              	.LC11:
 3207 0184 77617665 		.ascii	"wave_buffer != NULL\000"
 3207      5F627566 
 3207      66657220 
 3207      213D204E 
 3207      554C4C00 
 3208              	.LC12:
 3209 0198 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3209      6176655F 
 3209      7365745F 
 3209      77617665 
 3209      5F706F69 
 3210 01cb 78636565 		.ascii	"xceeded\000"
 3210      64656400 
 3211 01d3 00       		.space	1
 3212              	.LC13:
 3213 01d4 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3213      5F627566 
 3213      6665725F 
 3213      70747220 
 3213      213D2030 
 3214 01e9 000000   		.space	3
 3215              	.LC14:
 3216 01ec 776200   		.ascii	"wb\000"
 3217 01ef 00       		.space	1
 3218              	.LC15:
 3219 01f0 50330A00 		.ascii	"P3\012\000"
 3220              	.LC16:
 3221 01f4 25642025 		.ascii	"%d %d\012\000"
 3221      640A00
 3222 01fb 00       		.space	1
 3223              	.LC17:
 3224 01fc 3235350A 		.ascii	"255\012\000"
 3224      00
 3225 0201 000000   		.space	3
 3226              	.LC18:
 3227 0204 25336420 		.ascii	"%3d %3d %3d\012\000"
 3227      25336420 
 3227      2533640A 
 3227      00
 3228 0211 000000   		.space	3
 3229              	.LC19:
 3230 0214 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3230      6176655F 
 3230      74657374 
 3230      5F627566 
 3230      6665725F 
 3231 0247 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3231      20627566 
 3231      66657220 
 3231      28256420 
 3231      62797465 
 3232              	.LC20:
 3233 0268 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3233      6176655F 
 3233      66696C6C 
 3233      5F706978 
 3233      6275665F 
 3234 029b 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3234      20666169 
 3234      6C65642C 
 3234      20726574 
 3234      75726E69 
 3235 02ba 0000     		.space	2
 3236              	.LC21:
 3237 02bc 43616C63 		.ascii	"Calculating test set %d\012\000"
 3237      756C6174 
 3237      696E6720 
 3237      74657374 
 3237      20736574 
 3238              		.text
 3239              	.Letext0:
 3240              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3241              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3242              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3243              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3244              		.file 7 "/usr/include/stdio.h"
 3245              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3246              		.file 9 "/usr/include/errno.h"
 3247              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3248              		.file 11 "/usr/include/unistd.h"
 3249              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3250              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3251              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3252              		.file 15 "/usr/include/math.h"
 3253              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3254              		.file 17 "/usr/include/time.h"
 3255              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3256              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3257              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3258              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3259              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3260              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3261              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3262              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3263              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3264              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3265              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3266              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3267              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3268              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3269              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3270              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3271              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3272              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3273              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3274              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3275              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3276              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3277              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3278              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3279              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3280              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3281              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3282              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3283              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3284              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3285              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3286              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3287              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3288              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3289              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3290              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3291              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3292              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3293              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3294              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3295              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3296              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3297              		.file 60 "/usr/local/include/python3.8/context.h"
 3298              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3299              		.file 62 "/usr/local/include/python3.8/code.h"
 3300              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3301              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3302              		.file 65 "/usr/local/include/python3.8/import.h"
 3303              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3304              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3305              		.file 68 "/usr/include/malloc.h"
 3306              		.file 69 "armwave.h"
 3307              		.file 70 "/usr/include/stdlib.h"
 3308              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3309              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3310              		.file 73 "<built-in>"
 3311              		.file 74 "/usr/include/assert.h"
 3312              		.file 75 "/usr/include/string.h"
