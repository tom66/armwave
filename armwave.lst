   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 C0419FE5 		ldr	r4, .L25	@ tmp314,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 65 view .LVU34
 258 00ac 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 130 view .LVU35
 261 00b0 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 40 view .LVU36
 265 00b4 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 65 view .LVU37
 268 00b8 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 269              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 270              		.loc 1 73 5 view .LVU38
 271 00bc 0530A0E1 		mov	r3, r5	@, _1
 272              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 273              		.loc 1 63 1 view .LVU39
 274 00c0 14008DE5 		str	r0, [sp, #20]	@ slice_y, %sfp
 275              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 276              		.loc 1 71 105 view .LVU40
 277 00c4 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 278              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 279              		.loc 1 73 5 view .LVU41
 280 00c8 41008DE9 		stmib	sp, {r0, r6}	@,,
 281              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 282              		.loc 1 71 130 view .LVU42
 283 00cc 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 284              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 285              		.loc 1 73 5 view .LVU43
 286 00d0 98019FE5 		ldr	r0, .L25+4	@,
 287              	.LVL8:
 288              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 289              		.loc 1 71 23 view .LVU44
 290 00d4 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 291              	.LVL9:
 292              		.loc 1 73 5 is_stmt 1 view .LVU45
 293 00d8 00208DE5 		str	r2, [sp]	@ _7,
 294 00dc 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 5B0000DA 		ble	.L11		@,
 303              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 78 11 view .LVU48
 305 00f4 0030A0E3 		mov	r3, #0	@ w,
 306 00f8 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 307              	.LVL11:
 308              	.L12:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 309              		.loc 1 79 9 is_stmt 1 view .LVU49
 310              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 311              		.loc 1 79 59 is_stmt 0 view .LVU50
 312 00fc 10009DE5 		ldr	r0, [sp, #16]	@ w, %sfp
 313              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 314              		.loc 1 79 81 view .LVU51
 315 0100 341094E5 		ldr	r1, [r4, #52]	@ _12, g_armwave_state.wave_stride
 316              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 317              		.loc 1 79 59 view .LVU52
 318 0104 14309DE5 		ldr	r3, [sp, #20]	@ slice_y, %sfp
 319              	@ armwave.c:81:         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_
  80:armwave.c     **** 
  81:armwave.c     ****         printf("w=%d stride=%d sly=%d wave_base=0x%08x\n", w, g_armwave_state.wave_stride, slice_y,
 320              		.loc 1 81 9 view .LVU53
 321 0108 0120A0E1 		mov	r2, r1	@, _12
 322              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 323              		.loc 1 79 59 view .LVU54
 324 010c 903121E0 		mla	r1, r0, r1, r3	@ tmp228, w, _12, slice_y
 325              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 326              		.loc 1 79 19 view .LVU55
 327 0110 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 328 0114 018088E0 		add	r8, r8, r1	@ wave_base, g_armwave_state.wave_buffer, tmp228
 329              	.LVL12:
 330              		.loc 1 81 9 is_stmt 1 view .LVU56
 331 0118 00808DE5 		str	r8, [sp]	@ wave_base,
 332 011c 0010A0E1 		mov	r1, r0	@, w
 333 0120 4C019FE5 		ldr	r0, .L25+8	@,
 334 0124 FEFFFFEB 		bl	printf		@
 335              	.LVL13:
  82:armwave.c     **** 
  83:armwave.c     ****         // roll through y and render the slice into the out buffer
  84:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  85:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 336              		.loc 1 85 9 view .LVU57
 337              		.loc 1 85 9 is_stmt 0 view .LVU58
 338 0128 000056E3 		cmp	r6, #0	@ height,
 339 012c 04804812 		subne	r8, r8, #4	@ ivtmp.39, wave_base,
 340              	.LVL14:
 341              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 342              		.loc 1 85 16 view .LVU59
 343 0130 0020A013 		movne	r2, #0	@ yy,
 344              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
 345              		.loc 1 85 9 view .LVU60
 346 0134 4400000A 		beq	.L19		@,
 347              	.LVL15:
 348              	.L18:
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 349              		.loc 1 86 13 is_stmt 1 view .LVU61
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 350              		.loc 1 100 17 view .LVU62
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 351              		.loc 1 102 17 view .LVU63
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 100 17 view .LVU64
 353              		.loc 1 102 17 view .LVU65
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 354              		.loc 1 100 17 view .LVU66
 355              		.loc 1 102 17 view .LVU67
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 356              		.loc 1 100 17 view .LVU68
 357              		.loc 1 102 17 view .LVU69
 358              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 359              		.loc 1 86 18 is_stmt 0 view .LVU70
 360 0138 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _161, offset: 0B]
 361              	.LVL16:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 362              		.loc 1 88 13 is_stmt 1 view .LVU71
  90:armwave.c     ****                 
 363              		.loc 1 90 17 view .LVU72
  93:armwave.c     ****                     continue;
 364              		.loc 1 93 17 view .LVU73
 365              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 101 34 is_stmt 0 view .LVU74
 367 013c 01B082E2 		add	fp, r2, #1	@ tmp261, yy,
 368              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 369              		.loc 1 93 20 view .LVU75
 370 0140 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 371 0144 0110A003 		moveq	r1, #1	@ tmp234,
 372 0148 0010A013 		movne	r1, #0	@ tmp234,
 373              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 374              		.loc 1 93 19 view .LVU76
 375 014c FF0057E3 		cmp	r7, #255	@ scale_value,
 376 0150 01108103 		orreq	r1, r1, #1	@,, tmp239, tmp234
 377 0154 000051E3 		cmp	r1, #0	@ tmp239,
 378              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 379              		.loc 1 101 34 view .LVU77
 380 0158 02A082E2 		add	r10, r2, #2	@ tmp282, yy,
 381 015c 039082E2 		add	r9, r2, #3	@ tmp302, yy,
 382              	.LVL17:
 383              	@ armwave.c:103:                 word >>= 8;
 103:armwave.c     ****                 word >>= 8;
 384              		.loc 1 103 22 view .LVU78
 385 0160 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 386 0164 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 387              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 388              		.loc 1 93 19 view .LVU79
 389 0168 3400001A 		bne	.L20		@,
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 101 34 view .LVU80
 392 016c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 393              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 394              		.loc 1 93 20 view .LVU81
 395 0170 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 396 0174 01E0A003 		moveq	lr, #1	@ tmp254,
 397              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 398              		.loc 1 101 34 view .LVU82
 399 0178 910201E0 		mul	r1, r1, r2	@ tmp241, g_armwave_state.cmp_x_bitdepth_scale, yy
 400              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 401              		.loc 1 93 20 view .LVU83
 402 017c 00E0A013 		movne	lr, #0	@ tmp254,
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 view .LVU84
 405 0180 FF005CE3 		cmp	ip, #255	@ scale_value,
 406 0184 01E08E03 		orreq	lr, lr, #1	@,, tmp259, tmp254
 407 0188 00005EE3 		cmp	lr, #0	@ tmp259,
 408              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 409              		.loc 1 102 47 view .LVU85
 410 018c 40E094E5 		ldr	lr, [r4, #64]	@ tmp330, g_armwave_state.bitdepth_height
 411              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 412              		.loc 1 101 74 view .LVU86
 413 0190 2114A0E1 		lsr	r1, r1, #8	@ tmp243, tmp241,
 414              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 415              		.loc 1 102 47 view .LVU87
 416 0194 9E7121E0 		mla	r1, lr, r1, r7	@ tmp247, tmp330, tmp243, scale_value
 417 0198 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_82, *_82
 418 019c 01E08EE2 		add	lr, lr, #1	@ tmp250, *_82,
 419 01a0 01E0C5E7 		strb	lr, [r5, r1]	@ tmp250, *_82
 420              	.LVL18:
 421              		.loc 1 103 17 is_stmt 1 view .LVU88
  90:armwave.c     ****                 
 422              		.loc 1 90 17 view .LVU89
  93:armwave.c     ****                     continue;
 423              		.loc 1 93 17 view .LVU90
 424              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 425              		.loc 1 93 19 is_stmt 0 view .LVU91
 426 01a4 2500001A 		bne	.L20		@,
 427              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 428              		.loc 1 101 34 view .LVU92
 429 01a8 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 430              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 431              		.loc 1 101 99 view .LVU93
 432 01ac 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 433              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 434              		.loc 1 93 20 view .LVU94
 435 01b0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 436              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 437              		.loc 1 101 34 view .LVU95
 438 01b4 9E0B0BE0 		mul	fp, lr, fp	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 439              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 440              		.loc 1 93 20 view .LVU96
 441 01b8 01E0A003 		moveq	lr, #1	@ tmp275,
 442 01bc 00E0A013 		movne	lr, #0	@ tmp275,
 443              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 444              		.loc 1 101 74 view .LVU97
 445 01c0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp264, tmp262,
 446              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 447              		.loc 1 93 19 view .LVU98
 448 01c4 FF0050E3 		cmp	r0, #255	@ scale_value,
 449 01c8 01E08E03 		orreq	lr, lr, #1	@,, tmp280, tmp275
 450              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 451              		.loc 1 102 47 view .LVU99
 452 01cc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp268, g_armwave_state.bitdepth_height, tmp264, scale_value
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 19 view .LVU100
 455 01d0 00005EE3 		cmp	lr, #0	@ tmp280,
 456              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 457              		.loc 1 102 47 view .LVU101
 458 01d4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_112, *_112
 459 01d8 011081E2 		add	r1, r1, #1	@ tmp271, *_112,
 460 01dc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp271, *_112
 461              		.loc 1 103 17 is_stmt 1 view .LVU102
 462              	.LVL19:
  90:armwave.c     ****                 
 463              		.loc 1 90 17 view .LVU103
  93:armwave.c     ****                     continue;
 464              		.loc 1 93 17 view .LVU104
 465              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 466              		.loc 1 93 19 is_stmt 0 view .LVU105
 467 01e0 1600001A 		bne	.L20		@,
 468              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 469              		.loc 1 101 34 view .LVU106
 470 01e4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 471              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 472              		.loc 1 101 99 view .LVU107
 473 01e8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 20 view .LVU108
 476 01ec 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 477              	.LVL20:
 478              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 479              		.loc 1 101 34 view .LVU109
 480 01f0 910A0AE0 		mul	r10, r1, r10	@ tmp283, g_armwave_state.cmp_x_bitdepth_scale, tmp282
 481              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 482              		.loc 1 93 20 view .LVU110
 483 01f4 0110A003 		moveq	r1, #1	@ tmp295,
 484 01f8 0010A013 		movne	r1, #0	@ tmp295,
 485              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 486              		.loc 1 101 74 view .LVU111
 487 01fc 2AA4A0E1 		lsr	r10, r10, #8	@ tmp285, tmp283,
 488              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 489              		.loc 1 93 19 view .LVU112
 490 0200 FF0053E3 		cmp	r3, #255	@ word,
 491 0204 01108103 		orreq	r1, r1, #1	@,, tmp300, tmp295
 492              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 493              		.loc 1 102 47 view .LVU113
 494 0208 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp289, g_armwave_state.bitdepth_height, tmp285, scale_value
 495              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 496              		.loc 1 93 19 view .LVU114
 497 020c 000051E3 		cmp	r1, #0	@ tmp300,
 498              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 499              		.loc 1 102 47 view .LVU115
 500 0210 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_142, *_142
 501 0214 011081E2 		add	r1, r1, #1	@ tmp292, *_142,
 502 0218 0010C5E7 		strb	r1, [r5, r0]	@ tmp292, *_142
 503              		.loc 1 103 17 is_stmt 1 view .LVU116
 504              	.LVL21:
  90:armwave.c     ****                 
 505              		.loc 1 90 17 view .LVU117
  93:armwave.c     ****                     continue;
 506              		.loc 1 93 17 view .LVU118
 507              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 508              		.loc 1 93 19 is_stmt 0 view .LVU119
 509 021c 0700001A 		bne	.L20		@,
 510              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 511              		.loc 1 101 34 view .LVU120
 512 0220 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 513              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 514              		.loc 1 101 99 view .LVU121
 515 0224 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 516              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 517              		.loc 1 101 34 view .LVU122
 518 0228 910909E0 		mul	r9, r1, r9	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp302
 519              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 520              		.loc 1 101 74 view .LVU123
 521 022c 2994A0E1 		lsr	r9, r9, #8	@ tmp305, tmp303,
 522              	@ armwave.c:102:                 *(write_buffer + scale_value) += 1;
 102:armwave.c     ****                 word >>= 8;
 523              		.loc 1 102 47 view .LVU124
 524 0230 903923E0 		mla	r3, r0, r9, r3	@ tmp309, g_armwave_state.bitdepth_height, tmp305, word
 525 0234 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_172, *_172
 526 0238 011081E2 		add	r1, r1, #1	@ tmp312, *_172,
 527 023c 0310C5E7 		strb	r1, [r5, r3]	@ tmp312, *_172
 528              		.loc 1 103 17 is_stmt 1 view .LVU125
 529              	.LVL22:
 530              	.L20:
 531              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 532              		.loc 1 85 37 is_stmt 0 view .LVU126
 533 0240 042082E2 		add	r2, r2, #4	@ yy, yy,
 534              	.LVL23:
 535              	@ armwave.c:85:         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 536              		.loc 1 85 9 view .LVU127
 537 0244 020056E1 		cmp	r6, r2	@ height, yy
 538 0248 BAFFFF8A 		bhi	.L18		@,
 539              	.LVL24:
 540              	.L19:
 541              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 78 44 view .LVU128
 543 024c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 544              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 78 5 view .LVU129
 546 0250 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 547              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 78 44 view .LVU130
 549 0254 012082E2 		add	r2, r2, #1	@ w, w,
 550              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 551              		.loc 1 78 5 view .LVU131
 552 0258 020053E1 		cmp	r3, r2	@ g_armwave_state.waves, w
 553              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 554              		.loc 1 78 44 view .LVU132
 555 025c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 556              	.LVL25:
 557              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 558              		.loc 1 78 5 view .LVU133
 559 0260 A5FFFFCA 		bgt	.L12		@,
 560              	.LVL26:
 561              	.L11:
 562              	@ armwave.c:107: }
 104:armwave.c     ****             }
 105:armwave.c     ****         }
 106:armwave.c     ****     }
 107:armwave.c     **** }
 563              		.loc 1 107 1 view .LVU134
 564 0264 1CD08DE2 		add	sp, sp, #28	@,,
 565              		.cfi_def_cfa_offset 36
 566              		@ sp needed	@
 567 0268 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 568              	.LVL27:
 569              	.L26:
 570              		.loc 1 107 1 view .LVU135
 571              		.align	2
 572              	.L25:
 573 026c 00000000 		.word	g_armwave_state
 574 0270 20000000 		.word	.LC2
 575 0274 5C000000 		.word	.LC3
 576              		.cfi_endproc
 577              	.LFE59:
 579              		.align	2
 580              		.global	armwave_fill_pixbuf_scaled
 581              		.syntax unified
 582              		.arm
 583              		.fpu vfp
 585              	armwave_fill_pixbuf_scaled:
 586              	.LVL28:
 587              	.LFB60:
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     **** /*
 111:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 112:armwave.c     ****  */
 113:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 114:armwave.c     **** {
 115:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 116:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 117:armwave.c     ****     uint8_t r, g, b, value;
 118:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 119:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 120:armwave.c     ****     uint32_t offset;
 121:armwave.c     **** 
 122:armwave.c     ****     assert(out_buffer != NULL);
 123:armwave.c     **** 
 124:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 125:armwave.c     **** 
 126:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 127:armwave.c     **** 
 128:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 129:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 130:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 131:armwave.c     ****         // most normal waveforms.
 132:armwave.c     ****         wave_word = *base_32ptr++;
 133:armwave.c     **** 
 134:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 135:armwave.c     ****             for(i = 0; i < 4; i++) {
 136:armwave.c     ****                 value = wave_word & 0xff;
 137:armwave.c     ****                 wave_word >>= 8;
 138:armwave.c     **** 
 139:armwave.c     ****                 if(value != 0) {
 140:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 141:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 142:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 143:armwave.c     **** 
 144:armwave.c     ****                     r = MIN(rr, 255);
 145:armwave.c     ****                     g = MIN(gg, 255);
 146:armwave.c     ****                     b = MIN(bb, 255);
 147:armwave.c     **** 
 148:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 149:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 150:armwave.c     **** 
 151:armwave.c     ****                     // Is there a better way?
 152:armwave.c     ****                     nsub = n + i;
 153:armwave.c     ****                     xx = nsub & 0xff;
 154:armwave.c     ****                     yy = nsub >> 8;
 155:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 156:armwave.c     ****                     *(out_buffer_base + offset) = word;
 157:armwave.c     ****                 }
 158:armwave.c     ****             }
 159:armwave.c     ****         } 
 160:armwave.c     ****     }
 161:armwave.c     **** }
 162:armwave.c     **** #endif
 163:armwave.c     **** 
 164:armwave.c     **** /*
 165:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 166:armwave.c     ****  * Rows are repeated as necessary.
 167:armwave.c     ****  */
 168:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 169:armwave.c     **** {
 588              		.loc 1 169 1 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 592              		.loc 1 170 5 view .LVU137
 171:armwave.c     ****     // uint32_t ysub;
 172:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 593              		.loc 1 172 5 view .LVU138
 173:armwave.c     ****     uint8_t r, g, b, value; 
 594              		.loc 1 173 5 view .LVU139
 174:armwave.c     ****     // uint8_t row;
 175:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 595              		.loc 1 175 5 view .LVU140
 596              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 597              		.loc 1 169 1 is_stmt 0 view .LVU141
 598 0278 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 599              		.cfi_def_cfa_offset 36
 600              		.cfi_offset 4, -36
 601              		.cfi_offset 5, -32
 602              		.cfi_offset 6, -28
 603              		.cfi_offset 7, -24
 604              		.cfi_offset 8, -20
 605              		.cfi_offset 9, -16
 606              		.cfi_offset 10, -12
 607              		.cfi_offset 11, -8
 608              		.cfi_offset 14, -4
 609              	@ armwave.c:179:     assert(out_buffer != NULL);
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 177:armwave.c     ****     uint32_t offset;
 178:armwave.c     **** 
 179:armwave.c     ****     assert(out_buffer != NULL);
 610              		.loc 1 179 5 view .LVU142
 611 027c 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 612              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 613              		.loc 1 175 15 view .LVU143
 614 0280 5C519FE5 		ldr	r5, .L49	@ tmp221,
 615              	@ armwave.c:169: {
 169:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 616              		.loc 1 169 1 view .LVU144
 617 0284 0CD04DE2 		sub	sp, sp, #12	@,,
 618              		.cfi_def_cfa_offset 48
 619              	@ armwave.c:175:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 175:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 620              		.loc 1 175 15 view .LVU145
 621 0288 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 622              	.LVL29:
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 623              		.loc 1 176 5 is_stmt 1 view .LVU146
 177:armwave.c     **** 
 624              		.loc 1 177 5 view .LVU147
 625              		.loc 1 179 5 view .LVU148
 626 028c 4F00000A 		beq	.L46		@,
 180:armwave.c     **** 
 181:armwave.c     ****     // we don't really want to be doing this
 182:armwave.c     ****     memset(out_buffer, 0x55, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 627              		.loc 1 182 5 view .LVU149
 628              	@ armwave.c:182:     memset(out_buffer, 0x55, g_armwave_state.target_width * g_armwave_state.target
 629              		.loc 1 182 59 is_stmt 0 view .LVU150
 630 0290 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 631 0294 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 632              	@ armwave.c:182:     memset(out_buffer, 0x55, g_armwave_state.target_width * g_armwave_state.target
 633              		.loc 1 182 5 view .LVU151
 634 0298 5510A0E3 		mov	r1, #85	@,
 635              	@ armwave.c:182:     memset(out_buffer, 0x55, g_armwave_state.target_width * g_armwave_state.target
 636              		.loc 1 182 59 view .LVU152
 637 029c 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 638              	@ armwave.c:182:     memset(out_buffer, 0x55, g_armwave_state.target_width * g_armwave_state.target
 639              		.loc 1 182 5 view .LVU153
 640 02a0 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 641 02a4 FEFFFFEB 		bl	memset		@
 642              	.LVL30:
 183:armwave.c     **** 
 184:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 643              		.loc 1 184 5 is_stmt 1 view .LVU154
 644              	@ armwave.c:184:     npix = g_armwave_state.target_width * 256; 
 645              		.loc 1 184 10 is_stmt 0 view .LVU155
 646 02a8 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 647 02ac 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 648              	.LVL31:
 185:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 186:armwave.c     **** 
 187:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 649              		.loc 1 187 5 is_stmt 1 view .LVU156
 650              		.loc 1 187 5 is_stmt 0 view .LVU157
 651 02b0 000058E3 		cmp	r8, #0	@ npix,
 652 02b4 0C0000DA 		ble	.L27		@,
 653              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 188:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 189:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 190:armwave.c     ****         // most normal waveforms.
 191:armwave.c     ****         wave_word = *base_32ptr++;
 192:armwave.c     **** 
 193:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 194:armwave.c     ****             for(w = 0; w < 4; w++) {
 195:armwave.c     ****                 value = wave_word & 0xff;
 196:armwave.c     ****                 wave_word >>= 8;
 197:armwave.c     **** 
 198:armwave.c     ****                 if(value != 0) {
 199:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 200:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 654              		.loc 1 200 52 view .LVU158
 655 02b8 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 656              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 657              		.loc 1 199 52 view .LVU159
 658 02bc FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 659              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 202:armwave.c     **** 
 203:armwave.c     ****                     r = MIN(rr, 255);
 204:armwave.c     ****                     g = MIN(gg, 255);
 205:armwave.c     ****                     b = MIN(bb, 255);
 206:armwave.c     **** 
 207:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 208:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 209:armwave.c     **** 
 210:armwave.c     ****                     // Do line scaling as necessary.
 211:armwave.c     ****                     /*
 212:armwave.c     ****                     nsub = n + w;
 213:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 214:armwave.c     ****                     xx = (nsub >> 8);
 215:armwave.c     **** 
 216:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 217:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 218:armwave.c     ****                         *(out_buffer_base + offset) = word;
 219:armwave.c     ****                     }
 220:armwave.c     ****                     */
 221:armwave.c     **** 
 222:armwave.c     ****                     nsub = n + w;
 223:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 660              		.loc 1 223 57 view .LVU160
 661 02c0 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 662              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 200 52 view .LVU161
 664 02c4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 665              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 666              		.loc 1 201 52 view .LVU162
 667 02c8 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 668              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 187 11 view .LVU163
 670 02cc 0010A0E3 		mov	r1, #0	@ n,
 671              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 672              		.loc 1 201 52 view .LVU164
 673 02d0 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 674              	.LVL32:
 675              	.L34:
 191:armwave.c     **** 
 676              		.loc 1 191 9 is_stmt 1 view .LVU165
 677              	@ armwave.c:191:         wave_word = *base_32ptr++;
 191:armwave.c     **** 
 678              		.loc 1 191 19 is_stmt 0 view .LVU166
 679 02d4 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 680              	.LVL33:
 193:armwave.c     ****             for(w = 0; w < 4; w++) {
 681              		.loc 1 193 9 is_stmt 1 view .LVU167
 682              	@ armwave.c:193:         if(COND_UNLIKELY(wave_word != 0)) {
 193:armwave.c     ****             for(w = 0; w < 4; w++) {
 683              		.loc 1 193 11 is_stmt 0 view .LVU168
 684 02d8 000053E3 		cmp	r3, #0	@ wave_word,
 685 02dc 0400001A 		bne	.L47		@,
 686              	.L30:
 687              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 688              		.loc 1 187 28 view .LVU169
 689 02e0 041081E2 		add	r1, r1, #4	@ n, n,
 690              	.LVL34:
 691              	@ armwave.c:187:     for(n = 0; n < npix; n += 4) {
 187:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 692              		.loc 1 187 5 view .LVU170
 693 02e4 010058E1 		cmp	r8, r1	@ npix, n
 694 02e8 F9FFFFCA 		bgt	.L34		@,
 695              	.LVL35:
 696              	.L27:
 697              	@ armwave.c:235: }
 224:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 225:armwave.c     ****                     xx = (nsub >> 8);
 226:armwave.c     **** 
 227:armwave.c     ****                     for(y = yy; y < ye; y++) {
 228:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 229:armwave.c     ****                         *(out_buffer_base + offset) = word;
 230:armwave.c     ****                     }
 231:armwave.c     ****                 }
 232:armwave.c     ****             }
 233:armwave.c     ****         }
 234:armwave.c     ****     }
 235:armwave.c     **** }
 698              		.loc 1 235 1 view .LVU171
 699 02ec 0CD08DE2 		add	sp, sp, #12	@,,
 700              		.cfi_remember_state
 701              		.cfi_def_cfa_offset 36
 702              		@ sp needed	@
 703 02f0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 704              	.LVL36:
 705              	.L47:
 706              		.cfi_restore_state
 707              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 708              		.loc 1 198 19 view .LVU172
 709 02f4 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 710              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 711              		.loc 1 194 19 view .LVU173
 712 02f8 0070A0E3 		mov	r7, #0	@ w,
 713              	.LVL37:
 195:armwave.c     ****                 wave_word >>= 8;
 714              		.loc 1 195 17 is_stmt 1 view .LVU174
 196:armwave.c     **** 
 715              		.loc 1 196 17 view .LVU175
 716              	@ armwave.c:196:                 wave_word >>= 8;
 196:armwave.c     **** 
 717              		.loc 1 196 27 is_stmt 0 view .LVU176
 718 02fc 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 198 17 is_stmt 1 view .LVU177
 721              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 198 19 is_stmt 0 view .LVU178
 723 0300 0500001A 		bne	.L48		@,
 724              	.L31:
 725              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 726              		.loc 1 194 32 view .LVU179
 727 0304 017087E2 		add	r7, r7, #1	@ w, w,
 728              	.LVL39:
 729              	@ armwave.c:194:             for(w = 0; w < 4; w++) {
 194:armwave.c     ****                 value = wave_word & 0xff;
 730              		.loc 1 194 13 view .LVU180
 731 0308 040057E3 		cmp	r7, #4	@ w,
 732 030c F3FFFF0A 		beq	.L30		@,
 195:armwave.c     ****                 wave_word >>= 8;
 733              		.loc 1 195 17 is_stmt 1 view .LVU181
 734              	.LVL40:
 196:armwave.c     **** 
 735              		.loc 1 196 17 view .LVU182
 736              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 737              		.loc 1 198 19 is_stmt 0 view .LVU183
 738 0310 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 739              	@ armwave.c:196:                 wave_word >>= 8;
 196:armwave.c     **** 
 740              		.loc 1 196 27 view .LVU184
 741 0314 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 742              	.LVL41:
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 743              		.loc 1 198 17 is_stmt 1 view .LVU185
 744              	@ armwave.c:198:                 if(value != 0) {
 198:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 745              		.loc 1 198 19 is_stmt 0 view .LVU186
 746 0318 F9FFFF0A 		beq	.L31		@,
 747              	.L48:
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 748              		.loc 1 199 21 is_stmt 1 view .LVU187
 749              	.LVL42:
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 750              		.loc 1 200 21 view .LVU188
 201:armwave.c     **** 
 751              		.loc 1 201 21 view .LVU189
 203:armwave.c     ****                     g = MIN(gg, 255);
 752              		.loc 1 203 21 view .LVU190
 204:armwave.c     ****                     b = MIN(bb, 255);
 753              		.loc 1 204 21 view .LVU191
 205:armwave.c     **** 
 754              		.loc 1 205 21 view .LVU192
 208:armwave.c     **** 
 755              		.loc 1 208 21 view .LVU193
 756              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     **** 
 757              		.loc 1 201 55 is_stmt 0 view .LVU194
 758 031c 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 759 0320 07E081E0 		add	lr, r1, r7	@ _126, n, w
 760 0324 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 761              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 762              		.loc 1 223 32 view .LVU195
 763 0328 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 764              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 765              		.loc 1 224 41 view .LVU196
 766 032c 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 767              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 768              		.loc 1 223 40 view .LVU197
 769 0330 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 770              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 771              		.loc 1 224 41 view .LVU198
 772 0334 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 773              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 200 55 view .LVU199
 775 0338 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 776              	@ armwave.c:201:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 201:armwave.c     **** 
 777              		.loc 1 201 24 view .LVU200
 778 033c 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 779              	.LVL43:
 780              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 781              		.loc 1 223 40 view .LVU201
 782 0340 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 783              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 784              		.loc 1 224 46 view .LVU202
 785 0344 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 786              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 787              		.loc 1 200 55 view .LVU203
 788 0348 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 789              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 790              		.loc 1 199 55 view .LVU204
 791 034c 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 792              	.LVL44:
 793              	@ armwave.c:205:                     b = MIN(bb, 255);
 205:armwave.c     **** 
 794              		.loc 1 205 25 view .LVU205
 795 0350 FF005AE3 		cmp	r10, #255	@ bb,
 796              	@ armwave.c:200:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 200:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 797              		.loc 1 200 24 view .LVU206
 798 0354 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 799              	.LVL45:
 800              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 801              		.loc 1 223 40 view .LVU207
 802 0358 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 803              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 804              		.loc 1 224 46 view .LVU208
 805 035c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 806              	@ armwave.c:199:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 199:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 807              		.loc 1 199 24 view .LVU209
 808 0360 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 809              	.LVL46:
 810              	@ armwave.c:205:                     b = MIN(bb, 255);
 205:armwave.c     **** 
 811              		.loc 1 205 25 view .LVU210
 812 0364 FFA0A0A3 		movge	r10, #255	@ bb,
 813              	.LVL47:
 814              	@ armwave.c:204:                     g = MIN(gg, 255);
 204:armwave.c     ****                     b = MIN(bb, 255);
 815              		.loc 1 204 25 view .LVU211
 816 0368 FF005CE3 		cmp	ip, #255	@ gg,
 817 036c FFC0A0A3 		movge	ip, #255	@ gg,
 818              	.LVL48:
 819              	@ armwave.c:203:                     r = MIN(rr, 255);
 203:armwave.c     ****                     g = MIN(gg, 255);
 820              		.loc 1 203 25 view .LVU212
 821 0370 FF0050E3 		cmp	r0, #255	@ rr,
 822              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 823              		.loc 1 208 56 view .LVU213
 824 0374 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 825              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 826              		.loc 1 223 24 view .LVU214
 827 0378 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 828              	@ armwave.c:203:                     r = MIN(rr, 255);
 203:armwave.c     ****                     g = MIN(gg, 255);
 829              		.loc 1 203 25 view .LVU215
 830 037c FF00A0A3 		movge	r0, #255	@ rr,
 831              	.LVL49:
 832              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 833              		.loc 1 208 44 view .LVU216
 834 0380 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 835 0384 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 836              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 837              		.loc 1 208 56 view .LVU217
 838 0388 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 839              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 840              		.loc 1 208 51 view .LVU218
 841 038c 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 842              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 843              		.loc 1 208 62 view .LVU219
 844 0390 7000EFE6 		uxtb	r0, r0	@ rr, rr
 845 0394 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 846              	@ armwave.c:223:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 847              		.loc 1 223 24 view .LVU220
 848 0398 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 849              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 850              		.loc 1 224 24 view .LVU221
 851 039c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 852              	@ armwave.c:208:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 208:armwave.c     **** 
 853              		.loc 1 208 26 view .LVU222
 854 03a0 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 855              	.LVL50:
 222:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 856              		.loc 1 222 21 is_stmt 1 view .LVU223
 223:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 857              		.loc 1 223 21 view .LVU224
 224:armwave.c     ****                     xx = (nsub >> 8);
 858              		.loc 1 224 21 view .LVU225
 859              	@ armwave.c:225:                     xx = (nsub >> 8);
 225:armwave.c     **** 
 860              		.loc 1 225 32 is_stmt 0 view .LVU226
 861 03a4 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 862              	.LVL51:
 863              	@ armwave.c:224:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 224:armwave.c     ****                     xx = (nsub >> 8);
 864              		.loc 1 224 24 view .LVU227
 865 03a8 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 866              	.LVL52:
 225:armwave.c     **** 
 867              		.loc 1 225 21 is_stmt 1 view .LVU228
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 868              		.loc 1 227 21 view .LVU229
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 869              		.loc 1 227 21 is_stmt 0 view .LVU230
 870 03ac 090052E1 		cmp	r2, r9	@ yy, ye
 871 03b0 D3FFFF2A 		bcs	.L31		@,
 872              	.LVL53:
 873              	.L32:
 228:armwave.c     ****                         *(out_buffer_base + offset) = word;
 874              		.loc 1 228 25 is_stmt 1 discriminator 3 view .LVU231
 229:armwave.c     ****                     }
 875              		.loc 1 229 25 discriminator 3 view .LVU232
 876              	@ armwave.c:228:                         offset = (xx + (y * g_armwave_state.target_width)); 
 228:armwave.c     ****                         *(out_buffer_base + offset) = word;
 877              		.loc 1 228 43 is_stmt 0 discriminator 3 view .LVU233
 878 03b4 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 879              	@ armwave.c:229:                         *(out_buffer_base + offset) = word;
 229:armwave.c     ****                     }
 880              		.loc 1 229 43 discriminator 3 view .LVU234
 881 03b8 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 882              	.LVL54:
 883              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 884              		.loc 1 227 42 discriminator 3 view .LVU235
 885 03bc 012082E2 		add	r2, r2, #1	@ yy, yy,
 886              	.LVL55:
 887              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 888              		.loc 1 227 21 discriminator 3 view .LVU236
 889 03c0 020059E1 		cmp	r9, r2	@ ye, yy
 890              	@ armwave.c:229:                         *(out_buffer_base + offset) = word;
 229:armwave.c     ****                     }
 891              		.loc 1 229 53 discriminator 3 view .LVU237
 892 03c4 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 893              	@ armwave.c:227:                     for(y = yy; y < ye; y++) {
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 894              		.loc 1 227 21 discriminator 3 view .LVU238
 895 03c8 F9FFFF1A 		bne	.L32		@,
 227:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 896              		.loc 1 227 21 discriminator 3 view .LVU239
 897 03cc CCFFFFEA 		b	.L31		@
 898              	.LVL56:
 899              	.L46:
 179:armwave.c     **** 
 900              		.loc 1 179 5 is_stmt 1 discriminator 1 view .LVU240
 901 03d0 10309FE5 		ldr	r3, .L49+4	@,
 902 03d4 B320A0E3 		mov	r2, #179	@,
 903 03d8 0C109FE5 		ldr	r1, .L49+8	@,
 904 03dc 0C009FE5 		ldr	r0, .L49+12	@,
 905              	.LVL57:
 179:armwave.c     **** 
 906              		.loc 1 179 5 is_stmt 0 discriminator 1 view .LVU241
 907 03e0 FEFFFFEB 		bl	__assert_fail		@
 908              	.LVL58:
 909              	.L50:
 910              		.align	2
 911              	.L49:
 912 03e4 00000000 		.word	g_armwave_state
 913 03e8 00000000 		.word	.LANCHOR0
 914 03ec 84000000 		.word	.LC4
 915 03f0 90000000 		.word	.LC5
 916              		.cfi_endproc
 917              	.LFE60:
 919              		.align	2
 920              		.global	armwave_generate
 921              		.syntax unified
 922              		.arm
 923              		.fpu vfp
 925              	armwave_generate:
 926              	.LFB61:
 236:armwave.c     **** 
 237:armwave.c     **** /*
 238:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 239:armwave.c     ****  */
 240:armwave.c     **** void armwave_generate()
 241:armwave.c     **** {
 927              		.loc 1 241 1 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 242:armwave.c     ****     uint32_t yy;
 931              		.loc 1 242 5 view .LVU243
 243:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 932              		.loc 1 243 5 view .LVU244
 933              	.LVL59:
 244:armwave.c     **** 
 245:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 934              		.loc 1 245 5 view .LVU245
 935              	@ armwave.c:241: {
 241:armwave.c     ****     uint32_t yy;
 936              		.loc 1 241 1 is_stmt 0 view .LVU246
 937 03f4 10402DE9 		push	{r4, lr}	@
 938              		.cfi_def_cfa_offset 8
 939              		.cfi_offset 4, -8
 940              		.cfi_offset 14, -4
 941              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 942              		.loc 1 245 5 view .LVU247
 943 03f8 0010A0E3 		mov	r1, #0	@,
 944              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 945              		.loc 1 245 58 view .LVU248
 946 03fc 18409FE5 		ldr	r4, .L53	@ tmp115,
 947              	@ armwave.c:245:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 948              		.loc 1 245 5 view .LVU249
 949 0400 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 950 0404 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 951 0408 FEFFFFEB 		bl	memset		@
 952              	.LVL60:
 246:armwave.c     **** 
 247:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 248:armwave.c     ****     for(yy = 0; yy < 1; yy++) {
 953              		.loc 1 248 5 is_stmt 1 view .LVU250
 249:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 250:armwave.c     **** 
 251:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 954              		.loc 1 251 9 view .LVU251
 955 040c 481094E5 		ldr	r1, [r4, #72]	@, g_armwave_state.slice_record_height
 956 0410 0000A0E3 		mov	r0, #0	@,
 957              	@ armwave.c:257: }
 252:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 253:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 254:armwave.c     ****     }
 255:armwave.c     **** 
 256:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 257:armwave.c     **** }
 958              		.loc 1 257 1 is_stmt 0 view .LVU252
 959 0414 1040BDE8 		pop	{r4, lr}	@
 960              		.cfi_restore 14
 961              		.cfi_restore 4
 962              		.cfi_def_cfa_offset 0
 963              	@ armwave.c:251:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 251:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 964              		.loc 1 251 9 view .LVU253
 965 0418 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 966              	.LVL61:
 967              	.L54:
 968              		.align	2
 969              	.L53:
 970 041c 00000000 		.word	g_armwave_state
 971              		.cfi_endproc
 972              	.LFE61:
 974              		.align	2
 975              		.global	armwave_setup_render
 976              		.syntax unified
 977              		.arm
 978              		.fpu vfp
 980              	armwave_setup_render:
 981              	.LVL62:
 982              	.LFB62:
 258:armwave.c     **** 
 259:armwave.c     **** /*
 260:armwave.c     ****  * Setup the renderer with passed parameters.
 261:armwave.c     ****  */
 262:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 263:armwave.c     **** {
 983              		.loc 1 263 1 is_stmt 1 view -0
 984              		.cfi_startproc
 985              		@ args = 12, pretend = 0, frame = 0
 986              		@ frame_needed = 0, uses_anonymous_args = 0
 264:armwave.c     ****     uint32_t length, xx;
 987              		.loc 1 264 5 view .LVU255
 265:armwave.c     ****     float points_per_pixel;
 988              		.loc 1 265 5 view .LVU256
 266:armwave.c     **** 
 267:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 989              		.loc 1 267 5 view .LVU257
 990              	@ armwave.c:263: {
 263:armwave.c     ****     uint32_t length, xx;
 991              		.loc 1 263 1 is_stmt 0 view .LVU258
 992 0420 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 993              		.cfi_def_cfa_offset 28
 994              		.cfi_offset 4, -28
 995              		.cfi_offset 5, -24
 996              		.cfi_offset 6, -20
 997              		.cfi_offset 7, -16
 998              		.cfi_offset 8, -12
 999              		.cfi_offset 9, -8
 1000              		.cfi_offset 14, -4
 1001 0424 028B2DED 		vpush.64	{d8}	@
 1002              		.cfi_def_cfa_offset 36
 1003              		.cfi_offset 80, -36
 1004              		.cfi_offset 81, -32
 1005 0428 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1006 042c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1007 0430 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1008 0434 14D04DE2 		sub	sp, sp, #20	@,,
 1009              		.cfi_def_cfa_offset 56
 1010              	@ armwave.c:263: {
 263:armwave.c     ****     uint32_t length, xx;
 1011              		.loc 1 263 1 view .LVU259
 1012 0438 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1013 043c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1014 0440 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1015              	@ armwave.c:267:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1016              		.loc 1 267 5 view .LVU260
 1017 0444 00308DE5 		str	r3, [sp]	@ wave_stride,
 1018 0448 F460CDE1 		strd	r6, [sp, #4]	@,,
 1019 044c 0230A0E1 		mov	r3, r2	@, waves_max
 1020              	.LVL63:
 1021              		.loc 1 267 5 view .LVU261
 1022 0450 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1023 0454 0120A0E1 		mov	r2, r1	@, end_point
 1024              	.LVL64:
 1025              		.loc 1 267 5 view .LVU262
 1026 0458 0010A0E1 		mov	r1, r0	@, start_point
 1027              	.LVL65:
 1028              		.loc 1 267 5 view .LVU263
 1029 045c D0019FE5 		ldr	r0, .L69+12	@,
 1030              	.LVL66:
 1031              		.loc 1 267 5 view .LVU264
 1032 0460 FEFFFFEB 		bl	printf		@
 1033              	.LVL67:
 268:armwave.c     **** 
 269:armwave.c     ****     // TODO these asserts should instead raise PyExc
 270:armwave.c     ****     assert(start_point < end_point);
 1034              		.loc 1 270 5 is_stmt 1 view .LVU265
 1035 0464 050054E1 		cmp	r4, r5	@ start_point, end_point
 1036 0468 5F00002A 		bcs	.L66		@,
 271:armwave.c     **** 
 272:armwave.c     ****     /*
 273:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 274:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 275:armwave.c     **** 
 276:armwave.c     ****     if(target_height == 256) {
 277:armwave.c     ****         g_armwave_state.row_shift = 8;
 278:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 279:armwave.c     ****     } else if(target_height == 512) {
 280:armwave.c     ****         g_armwave_state.row_shift = 9;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 282:armwave.c     ****     } else if(target_height == 1024) {
 283:armwave.c     ****         g_armwave_state.row_shift = 10;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 285:armwave.c     ****     } else if(target_height == 2048) {
 286:armwave.c     ****         g_armwave_state.row_shift = 11;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 288:armwave.c     ****     }
 289:armwave.c     ****     */
 290:armwave.c     **** 
 291:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 292:armwave.c     ****     g_armwave_state.xstride = target_height;
 1037              		.loc 1 292 5 view .LVU266
 1038              	@ armwave.c:303:     g_armwave_state.wave_length = end_point - start_point;
 293:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 294:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 295:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 296:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 297:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 298:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 299:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 300:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 301:armwave.c     ****     g_armwave_state.target_width = target_width;
 302:armwave.c     ****     g_armwave_state.target_height = target_height;
 303:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1039              		.loc 1 303 45 is_stmt 0 view .LVU267
 1040 046c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1041              	.LVL68:
 1042              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1043              		.loc 1 293 49 view .LVU268
 1044 0470 6C6A9FED 		vldr.32	s12, .L69	@ tmp175,
 1045              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 304:armwave.c     **** 
 305:armwave.c     ****     // Calculate compound scaler
 306:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 307:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1046              		.loc 1 307 48 view .LVU269
 1047 0474 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1048              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1049              		.loc 1 307 79 view .LVU270
 1050 0478 6B6ADFED 		vldr.32	s13, .L69+4	@ tmp199,
 1051              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1052              		.loc 1 300 90 view .LVU271
 1053 047c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1054              	@ armwave.c:292:     g_armwave_state.xstride = target_height;
 292:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1055              		.loc 1 292 29 view .LVU272
 1056 0480 B0419FE5 		ldr	r4, .L69+16	@ tmp242,
 1057              	.LVL69:
 1058              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1059              		.loc 1 307 48 view .LVU273
 1060 0484 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1061              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1062              		.loc 1 293 49 view .LVU274
 1063 0488 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1064              	@ armwave.c:298:     g_armwave_state.size = target_height * target_width;
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1065              		.loc 1 298 42 view .LVU275
 1066 048c 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1067              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1068              		.loc 1 300 74 view .LVU276
 1069 0490 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1070              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1071              		.loc 1 293 49 view .LVU277
 1072 0494 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1073              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1074              		.loc 1 307 48 view .LVU278
 1075 0498 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1076              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1077              		.loc 1 300 74 view .LVU279
 1078 049c 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1079              	@ armwave.c:299:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1080              		.loc 1 299 37 view .LVU280
 1081 04a0 012CA0E3 		mov	r2, #256	@ tmp185,
 1082              	@ armwave.c:298:     g_armwave_state.size = target_height * target_width;
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1083              		.loc 1 298 26 view .LVU281
 1084 04a4 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1085              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1086              		.loc 1 307 48 view .LVU282
 1087 04a8 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1088              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 308:armwave.c     **** 
 309:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1089              		.loc 1 309 5 view .LVU283
 1090 04ac 0310A0E1 		mov	r1, r3	@, tmp190
 1091              	@ armwave.c:299:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1092              		.loc 1 299 37 view .LVU284
 1093 04b0 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1094              	@ armwave.c:300:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1095              		.loc 1 300 34 view .LVU285
 1096 04b4 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1097              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1098              		.loc 1 309 5 view .LVU286
 1099 04b8 7C019FE5 		ldr	r0, .L69+20	@,
 1100              	@ armwave.c:292:     g_armwave_state.xstride = target_height;
 292:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1101              		.loc 1 292 29 view .LVU287
 1102 04bc 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1103              		.loc 1 293 5 is_stmt 1 view .LVU288
 1104              	@ armwave.c:295:     g_armwave_state.wave_stride = wave_stride;
 295:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1105              		.loc 1 295 33 is_stmt 0 view .LVU289
 1106 04c0 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1107              	@ armwave.c:296:     g_armwave_state.waves_max = waves_max;
 296:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1108              		.loc 1 296 31 view .LVU290
 1109 04c4 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1110              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 1111              		.loc 1 307 48 view .LVU291
 1112 04c8 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1113              	@ armwave.c:297:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 297:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1114              		.loc 1 297 27 view .LVU292
 1115 04cc 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1116              	@ armwave.c:302:     g_armwave_state.target_height = target_height;
 302:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1117              		.loc 1 302 35 view .LVU293
 1118 04d0 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1119              	@ armwave.c:303:     g_armwave_state.wave_length = end_point - start_point;
 303:armwave.c     **** 
 1120              		.loc 1 303 33 view .LVU294
 1121 04d4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1122              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1123              		.loc 1 293 49 view .LVU295
 1124 04d8 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1125              	@ armwave.c:307:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 1126              		.loc 1 307 79 view .LVU296
 1127 04dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1128              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1129              		.loc 1 306 42 view .LVU297
 1130 04e0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1131              	@ armwave.c:293:     g_armwave_state.vscale_frac = target_height / 255.0f;
 293:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1132              		.loc 1 293 33 view .LVU298
 1133 04e4 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1134              		.loc 1 294 5 is_stmt 1 view .LVU299
 1135              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1136              		.loc 1 306 42 is_stmt 0 view .LVU300
 1137 04e8 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1138              	@ armwave.c:294:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1139              		.loc 1 294 30 view .LVU301
 1140 04ec C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1141              	@ armwave.c:309:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1142              		.loc 1 309 5 view .LVU302
 1143 04f0 0C30A0E1 		mov	r3, ip	@, _19
 1144 04f4 0C20A0E1 		mov	r2, ip	@, tmp3
 1145              	@ armwave.c:306:     g_armwave_state.cmp_x_bitdepth_scale = \
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1146              		.loc 1 306 42 view .LVU303
 1147 04f8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1148              	@ armwave.c:294:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 294:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1149              		.loc 1 294 30 view .LVU304
 1150 04fc 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 295:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1151              		.loc 1 295 5 is_stmt 1 view .LVU305
 296:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1152              		.loc 1 296 5 view .LVU306
 297:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1153              		.loc 1 297 5 view .LVU307
 298:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1154              		.loc 1 298 5 view .LVU308
 299:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1155              		.loc 1 299 5 view .LVU309
 300:armwave.c     ****     g_armwave_state.target_width = target_width;
 1156              		.loc 1 300 5 view .LVU310
 301:armwave.c     ****     g_armwave_state.target_height = target_height;
 1157              		.loc 1 301 5 view .LVU311
 302:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1158              		.loc 1 302 5 view .LVU312
 303:armwave.c     **** 
 1159              		.loc 1 303 5 view .LVU313
 306:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1160              		.loc 1 306 5 view .LVU314
 1161              		.loc 1 309 5 view .LVU315
 1162 0500 FEFFFFEB 		bl	printf		@
 1163              	.LVL70:
 310:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 311:armwave.c     **** 
 312:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 313:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 314:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 315:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1164              		.loc 1 315 5 view .LVU316
 1165              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 316:armwave.c     **** 
 317:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1166              		.loc 1 317 23 is_stmt 0 view .LVU317
 1167 0504 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1168              	@ armwave.c:315:     g_armwave_state.slice_height = 64;  
 315:armwave.c     **** 
 1169              		.loc 1 315 34 view .LVU318
 1170 0508 4030A0E3 		mov	r3, #64	@ tmp203,
 1171              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 1172              		.loc 1 317 7 view .LVU319
 1173 050c 000050E3 		cmp	r0, #0	@ _20,
 1174              	@ armwave.c:315:     g_armwave_state.slice_height = 64;  
 315:armwave.c     **** 
 1175              		.loc 1 315 34 view .LVU320
 1176 0510 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1177              		.loc 1 317 5 is_stmt 1 view .LVU321
 1178              	@ armwave.c:317:     if(g_armwave_state.ch1_buffer != NULL)
 1179              		.loc 1 317 7 is_stmt 0 view .LVU322
 1180 0514 0000000A 		beq	.L57		@,
 318:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1181              		.loc 1 318 9 is_stmt 1 view .LVU323
 1182 0518 FEFFFFEB 		bl	free		@
 1183              	.LVL71:
 1184              	.L57:
 319:armwave.c     **** 
 320:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1185              		.loc 1 320 5 view .LVU324
 1186              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1187              		.loc 1 320 34 is_stmt 0 view .LVU325
 1188 051c 0110A0E3 		mov	r1, #1	@,
 1189 0520 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1190 0524 FEFFFFEB 		bl	calloc		@
 1191              	.LVL72:
 1192              	@ armwave.c:322:     assert(g_armwave_state.ch1_buffer != NULL);
 321:armwave.c     **** 
 322:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1193              		.loc 1 322 5 view .LVU326
 1194 0528 000050E3 		cmp	r0, #0	@ _23,
 1195              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 320:armwave.c     **** 
 1196              		.loc 1 320 34 view .LVU327
 1197 052c 0070A0E1 		mov	r7, r0	@ _23,
 1198              	@ armwave.c:320:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 320:armwave.c     **** 
 1199              		.loc 1 320 32 view .LVU328
 1200 0530 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1201              		.loc 1 322 5 is_stmt 1 view .LVU329
 1202 0534 3600000A 		beq	.L67		@,
 323:armwave.c     **** 
 324:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 325:armwave.c     ****     length = end_point - start_point;
 1203              		.loc 1 325 5 view .LVU330
 1204              	.LVL73:
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1205              		.loc 1 326 5 view .LVU331
 1206              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 1207              		.loc 1 326 34 is_stmt 0 view .LVU332
 1208 0538 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1209              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 1210              		.loc 1 326 22 view .LVU333
 1211 053c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1212              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1213              		.loc 1 327 60 view .LVU334
 1214 0540 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1215              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1216              		.loc 1 328 40 view .LVU335
 1217 0544 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1218              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1219              		.loc 1 326 34 view .LVU336
 1220 0548 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1221              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1222              		.loc 1 326 22 view .LVU337
 1223 054c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1224              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1225              		.loc 1 327 60 view .LVU338
 1226 0550 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1227              	@ armwave.c:326:     points_per_pixel = length / ((float)(target_width));
 326:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1228              		.loc 1 326 22 view .LVU339
 1229 0554 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1230              	.LVL74:
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1231              		.loc 1 327 5 is_stmt 1 view .LVU340
 1232              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1233              		.loc 1 327 60 is_stmt 0 view .LVU341
 1234 0558 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1235              	@ armwave.c:327:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 327:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1236              		.loc 1 327 41 view .LVU342
 1237 055c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1238 0560 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1239              		.loc 1 328 5 is_stmt 1 view .LVU343
 1240              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1241              		.loc 1 328 40 is_stmt 0 view .LVU344
 1242 0564 FEFFFFEB 		bl	malloc		@
 1243              	.LVL75:
 1244              	@ armwave.c:330:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 329:armwave.c     **** 
 330:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1245              		.loc 1 330 5 view .LVU345
 1246 0568 000050E3 		cmp	r0, #0	@ _31,
 1247              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1248              		.loc 1 328 40 view .LVU346
 1249 056c 0060A0E1 		mov	r6, r0	@ _31,
 1250              	@ armwave.c:328:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 328:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1251              		.loc 1 328 38 view .LVU347
 1252 0570 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1253              		.loc 1 330 5 is_stmt 1 view .LVU348
 1254 0574 2100000A 		beq	.L68		@,
 1255              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 331:armwave.c     **** 
 332:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 333:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1256              		.loc 1 333 54 is_stmt 0 view .LVU349
 1257 0578 2C7ADFED 		vldr.32	s15, .L69+8	@ tmp230,
 1258 057c 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1259              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1260              		.loc 1 332 12 view .LVU350
 1261 0580 0030A0E3 		mov	r3, #0	@ xx,
 1262              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1263              		.loc 1 333 54 view .LVU351
 1264 0584 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1265              	.L60:
 1266              	.LVL76:
 1267              		.loc 1 333 9 is_stmt 1 discriminator 3 view .LVU352
 1268              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1269              		.loc 1 333 74 is_stmt 0 discriminator 3 view .LVU353
 1270 0588 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1271              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1272              		.loc 1 332 32 discriminator 3 view .LVU354
 1273 058c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1274              	.LVL77:
 1275              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1276              		.loc 1 332 5 discriminator 3 view .LVU355
 1277 0590 030055E1 		cmp	r5, r3	@ _13, xx
 1278              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1279              		.loc 1 333 74 discriminator 3 view .LVU356
 1280 0594 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1281 0598 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1282              	@ armwave.c:333:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1283              		.loc 1 333 46 discriminator 3 view .LVU357
 1284 059c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1285 05a0 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1286 05a4 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1287              	@ armwave.c:332:     for(xx = 0; xx < length; xx++) {
 332:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1288              		.loc 1 332 5 discriminator 3 view .LVU358
 1289 05a8 F6FFFF1A 		bne	.L60		@,
 334:armwave.c     **** 
 335:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 336:armwave.c     ****     }
 337:armwave.c     **** 
 338:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1290              		.loc 1 338 5 is_stmt 1 view .LVU359
 1291              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1292              		.loc 1 338 34 is_stmt 0 view .LVU360
 1293 05ac 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1294 05b0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1295 05b4 FEFFFFEB 		bl	malloc		@
 1296              	.LVL78:
 1297              	@ armwave.c:340:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 339:armwave.c     **** 
 340:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1298              		.loc 1 340 5 view .LVU361
 1299 05b8 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1300 05bc 0620A0E1 		mov	r2, r6	@, _31
 1301 05c0 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1302 05c4 0710A0E1 		mov	r1, r7	@, _23
 1303              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338:armwave.c     **** 
 1304              		.loc 1 338 34 view .LVU362
 1305 05c8 00C0A0E1 		mov	ip, r0	@ tmp237,
 1306              	@ armwave.c:340:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1307              		.loc 1 340 5 view .LVU363
 1308 05cc 0030A0E1 		mov	r3, r0	@, tmp237
 1309              	@ armwave.c:338:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338:armwave.c     **** 
 1310              		.loc 1 338 32 view .LVU364
 1311 05d0 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1312              		.loc 1 340 5 is_stmt 1 view .LVU365
 1313 05d4 64009FE5 		ldr	r0, .L69+24	@,
 1314 05d8 FEFFFFEB 		bl	printf		@
 1315              	.LVL79:
 341:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 342:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 343:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 344:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 345:armwave.c     **** 
 346:armwave.c     ****     malloc_stats();
 1316              		.loc 1 346 5 view .LVU366
 1317              	@ armwave.c:347: }
 347:armwave.c     **** }
 1318              		.loc 1 347 1 is_stmt 0 view .LVU367
 1319 05dc 14D08DE2 		add	sp, sp, #20	@,,
 1320              		.cfi_remember_state
 1321              		.cfi_def_cfa_offset 36
 1322              		@ sp needed	@
 1323 05e0 028BBDEC 		vldm	sp!, {d8}	@
 1324              		.cfi_restore 80
 1325              		.cfi_restore 81
 1326              		.cfi_def_cfa_offset 28
 1327              	.LVL80:
 1328              		.loc 1 347 1 view .LVU368
 1329 05e4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1330              		.cfi_restore 14
 1331              		.cfi_restore 9
 1332              		.cfi_restore 8
 1333              		.cfi_restore 7
 1334              		.cfi_restore 6
 1335              		.cfi_restore 5
 1336              		.cfi_restore 4
 1337              		.cfi_def_cfa_offset 0
 1338              	.LVL81:
 1339              	@ armwave.c:346:     malloc_stats();
 346:armwave.c     **** }
 1340              		.loc 1 346 5 view .LVU369
 1341 05e8 FEFFFFEA 		b	malloc_stats		@
 1342              	.LVL82:
 1343              	.L66:
 1344              		.cfi_restore_state
 270:armwave.c     **** 
 1345              		.loc 1 270 5 is_stmt 1 discriminator 1 view .LVU370
 1346 05ec 50309FE5 		ldr	r3, .L69+28	@,
 1347 05f0 50209FE5 		ldr	r2, .L69+32	@,
 1348 05f4 50109FE5 		ldr	r1, .L69+36	@,
 1349 05f8 50009FE5 		ldr	r0, .L69+40	@,
 1350 05fc FEFFFFEB 		bl	__assert_fail		@
 1351              	.LVL83:
 1352              	.L68:
 330:armwave.c     **** 
 1353              		.loc 1 330 5 discriminator 1 view .LVU371
 1354 0600 3C309FE5 		ldr	r3, .L69+28	@,
 1355 0604 48209FE5 		ldr	r2, .L69+44	@,
 1356 0608 3C109FE5 		ldr	r1, .L69+36	@,
 1357 060c 44009FE5 		ldr	r0, .L69+48	@,
 1358 0610 FEFFFFEB 		bl	__assert_fail		@
 1359              	.LVL84:
 1360              	.L67:
 322:armwave.c     **** 
 1361              		.loc 1 322 5 discriminator 1 view .LVU372
 1362 0614 28309FE5 		ldr	r3, .L69+28	@,
 1363 0618 3C209FE5 		ldr	r2, .L69+52	@,
 1364 061c 28109FE5 		ldr	r1, .L69+36	@,
 1365 0620 38009FE5 		ldr	r0, .L69+56	@,
 1366 0624 FEFFFFEB 		bl	__assert_fail		@
 1367              	.LVL85:
 1368              	.L70:
 1369              		.align	2
 1370              	.L69:
 1371 0628 00007F43 		.word	1132396544
 1372 062c 00008043 		.word	1132462080
 1373 0630 0000803F 		.word	1065353216
 1374 0634 A4000000 		.word	.LC6
 1375 0638 00000000 		.word	g_armwave_state
 1376 063c E8000000 		.word	.LC8
 1377 0640 6C010000 		.word	.LC11
 1378 0644 1C000000 		.word	.LANCHOR0+28
 1379 0648 0E010000 		.word	270
 1380 064c 84000000 		.word	.LC4
 1381 0650 D0000000 		.word	.LC7
 1382 0654 4A010000 		.word	330
 1383 0658 40010000 		.word	.LC10
 1384 065c 42010000 		.word	322
 1385 0660 1C010000 		.word	.LC9
 1386              		.cfi_endproc
 1387              	.LFE62:
 1389              		.align	2
 1390              		.global	armwave_set_wave_pointer
 1391              		.syntax unified
 1392              		.arm
 1393              		.fpu vfp
 1395              	armwave_set_wave_pointer:
 1396              	.LVL86:
 1397              	.LFB63:
 348:armwave.c     **** 
 349:armwave.c     **** /*
 350:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 351:armwave.c     ****  * in the future.
 352:armwave.c     ****  */
 353:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 354:armwave.c     **** {
 1398              		.loc 1 354 1 view -0
 1399              		.cfi_startproc
 1400              		@ args = 0, pretend = 0, frame = 0
 1401              		@ frame_needed = 0, uses_anonymous_args = 0
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1402              		.loc 1 355 5 view .LVU374
 1403 0664 000050E3 		cmp	r0, #0	@ wave_buffer
 1404              		.loc 1 355 5 is_stmt 0 view .LVU375
 1405 0668 0200000A 		beq	.L76		@,
 356:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1406              		.loc 1 356 5 is_stmt 1 view .LVU376
 1407              	@ armwave.c:356:     g_armwave_state.wave_buffer = wave_buffer;
 1408              		.loc 1 356 33 is_stmt 0 view .LVU377
 1409 066c 1C309FE5 		ldr	r3, .L77	@ tmp116,
 1410 0670 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1411 0674 1EFF2FE1 		bx	lr	@
 1412              	.L76:
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1413              		.loc 1 355 5 is_stmt 1 discriminator 1 view .LVU378
 1414              	@ armwave.c:354: {
 354:armwave.c     ****     assert(wave_buffer != NULL);
 1415              		.loc 1 354 1 is_stmt 0 discriminator 1 view .LVU379
 1416 0678 10402DE9 		push	{r4, lr}	@
 1417              		.cfi_def_cfa_offset 8
 1418              		.cfi_offset 4, -8
 1419              		.cfi_offset 14, -4
 1420              	@ armwave.c:355:     assert(wave_buffer != NULL);
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1421              		.loc 1 355 5 discriminator 1 view .LVU380
 1422 067c 10309FE5 		ldr	r3, .L77+4	@,
 1423 0680 10209FE5 		ldr	r2, .L77+8	@,
 1424 0684 10109FE5 		ldr	r1, .L77+12	@,
 1425 0688 10009FE5 		ldr	r0, .L77+16	@,
 1426              	.LVL87:
 355:armwave.c     ****     assert(wave_buffer != NULL);
 1427              		.loc 1 355 5 discriminator 1 view .LVU381
 1428 068c FEFFFFEB 		bl	__assert_fail		@
 1429              	.LVL88:
 1430              	.L78:
 1431              		.align	2
 1432              	.L77:
 1433 0690 00000000 		.word	g_armwave_state
 1434 0694 34000000 		.word	.LANCHOR0+52
 1435 0698 63010000 		.word	355
 1436 069c 84000000 		.word	.LC4
 1437 06a0 90010000 		.word	.LC12
 1438              		.cfi_endproc
 1439              	.LFE63:
 1441              		.align	2
 1442              		.global	armwave_set_wave_pointer_as_testbuf
 1443              		.syntax unified
 1444              		.arm
 1445              		.fpu vfp
 1447              	armwave_set_wave_pointer_as_testbuf:
 1448              	.LVL89:
 1449              	.LFB64:
 357:armwave.c     **** }
 358:armwave.c     **** 
 359:armwave.c     **** /*
 360:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 361:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 362:armwave.c     ****  */
 363:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 364:armwave.c     **** {
 1450              		.loc 1 364 1 is_stmt 1 view -0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 365:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1455              		.loc 1 365 5 view .LVU383
 1456              	@ armwave.c:365:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1457              		.loc 1 365 29 is_stmt 0 view .LVU384
 1458 06a4 24309FE5 		ldr	r3, .L82	@ tmp117,
 1459              	@ armwave.c:365:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1460              		.loc 1 365 7 view .LVU385
 1461 06a8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1462 06ac 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1463 06b0 0400003A 		bcc	.L81		@,
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 367:armwave.c     ****         return;
 368:armwave.c     ****     }
 369:armwave.c     **** 
 370:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1464              		.loc 1 370 5 is_stmt 1 view .LVU386
 1465              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1466              		.loc 1 370 111 is_stmt 0 view .LVU387
 1467 06b4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1468              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1469              		.loc 1 370 68 view .LVU388
 1470 06b8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1471 06bc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1472              	.LVL90:
 1473              	@ armwave.c:370:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1474              		.loc 1 370 33 view .LVU389
 1475 06c0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1476              	@ armwave.c:371: }
 371:armwave.c     **** }
 1477              		.loc 1 371 1 view .LVU390
 1478 06c4 1EFF2FE1 		bx	lr	@
 1479              	.LVL91:
 1480              	.L81:
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1481              		.loc 1 366 9 is_stmt 1 view .LVU391
 1482 06c8 04009FE5 		ldr	r0, .L82+4	@,
 1483              	.LVL92:
 366:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1484              		.loc 1 366 9 is_stmt 0 view .LVU392
 1485 06cc FEFFFFEA 		b	puts		@
 1486              	.LVL93:
 1487              	.L83:
 1488              		.align	2
 1489              	.L82:
 1490 06d0 00000000 		.word	g_armwave_state
 1491 06d4 A4010000 		.word	.LC13
 1492              		.cfi_endproc
 1493              	.LFE64:
 1495              		.align	2
 1496              		.global	armwave_set_wave_pointer_u32
 1497              		.syntax unified
 1498              		.arm
 1499              		.fpu vfp
 1501              	armwave_set_wave_pointer_u32:
 1502              	.LVL94:
 1503              	.LFB65:
 372:armwave.c     **** 
 373:armwave.c     **** /*
 374:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 375:armwave.c     ****  * disjointed buffers in the future.
 376:armwave.c     ****  */
 377:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 378:armwave.c     **** {
 1504              		.loc 1 378 1 is_stmt 1 view -0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 0
 1507              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1508              		.loc 1 379 5 view .LVU394
 1509 06d8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1510              		.loc 1 379 5 is_stmt 0 view .LVU395
 1511 06dc 0200000A 		beq	.L89		@,
 380:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1512              		.loc 1 380 5 is_stmt 1 view .LVU396
 1513              	@ armwave.c:380:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1514              		.loc 1 380 33 is_stmt 0 view .LVU397
 1515 06e0 1C309FE5 		ldr	r3, .L90	@ tmp117,
 1516 06e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1517 06e8 1EFF2FE1 		bx	lr	@
 1518              	.L89:
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1519              		.loc 1 379 5 is_stmt 1 discriminator 1 view .LVU398
 1520              	@ armwave.c:378: {
 378:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1521              		.loc 1 378 1 is_stmt 0 discriminator 1 view .LVU399
 1522 06ec 10402DE9 		push	{r4, lr}	@
 1523              		.cfi_def_cfa_offset 8
 1524              		.cfi_offset 4, -8
 1525              		.cfi_offset 14, -4
 1526              	@ armwave.c:379:     assert(wave_buffer_ptr != 0);
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1527              		.loc 1 379 5 discriminator 1 view .LVU400
 1528 06f0 10309FE5 		ldr	r3, .L90+4	@,
 1529 06f4 10209FE5 		ldr	r2, .L90+8	@,
 1530 06f8 10109FE5 		ldr	r1, .L90+12	@,
 1531 06fc 10009FE5 		ldr	r0, .L90+16	@,
 1532              	.LVL95:
 379:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1533              		.loc 1 379 5 discriminator 1 view .LVU401
 1534 0700 FEFFFFEB 		bl	__assert_fail		@
 1535              	.LVL96:
 1536              	.L91:
 1537              		.align	2
 1538              	.L90:
 1539 0704 00000000 		.word	g_armwave_state
 1540 0708 50000000 		.word	.LANCHOR0+80
 1541 070c 7B010000 		.word	379
 1542 0710 84000000 		.word	.LC4
 1543 0714 E0010000 		.word	.LC14
 1544              		.cfi_endproc
 1545              	.LFE65:
 1547              		.align	2
 1548              		.global	armwave_clear_buffer
 1549              		.syntax unified
 1550              		.arm
 1551              		.fpu vfp
 1553              	armwave_clear_buffer:
 1554              	.LVL97:
 1555              	.LFB66:
 381:armwave.c     **** }
 382:armwave.c     **** 
 383:armwave.c     **** /*
 384:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 385:armwave.c     ****  */
 386:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 387:armwave.c     **** {
 1556              		.loc 1 387 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              		@ link register save eliminated.
 388:armwave.c     ****     // Flags ignored, only one buffer cleared
 389:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1561              		.loc 1 389 5 view .LVU403
 1562              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1563              		.loc 1 389 58 is_stmt 0 view .LVU404
 1564 0718 0C309FE5 		ldr	r3, .L93	@ tmp114,
 1565              	@ armwave.c:389:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1566              		.loc 1 389 5 view .LVU405
 1567 071c 0010A0E3 		mov	r1, #0	@,
 1568 0720 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1569 0724 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1570              	.LVL98:
 1571              		.loc 1 389 5 view .LVU406
 1572 0728 FEFFFFEA 		b	memset		@
 1573              	.LVL99:
 1574              	.L94:
 1575              		.align	2
 1576              	.L93:
 1577 072c 00000000 		.word	g_armwave_state
 1578              		.cfi_endproc
 1579              	.LFE66:
 1581              		.align	2
 1582              		.global	armwave_set_channel_colour
 1583              		.syntax unified
 1584              		.arm
 1585              		.fpu vfp
 1587              	armwave_set_channel_colour:
 1588              	.LVL100:
 1589              	.LFB67:
 390:armwave.c     **** }
 391:armwave.c     **** 
 392:armwave.c     **** /*
 393:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 394:armwave.c     ****  */
 395:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 396:armwave.c     **** {
 1590              		.loc 1 396 1 is_stmt 1 view -0
 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		@ link register save eliminated.
 397:armwave.c     ****     // Only 1ch supported for now
 398:armwave.c     ****     switch(ch) {
 1595              		.loc 1 398 5 view .LVU408
 1596 0730 010050E3 		cmp	r0, #1	@ ch,
 399:armwave.c     ****         case 1:
 400:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1597              		.loc 1 400 13 view .LVU409
 1598              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 1599              		.loc 1 400 41 is_stmt 0 view .LVU410
 1600 0734 0C009F05 		ldreq	r0, .L97	@ tmp117,
 1601              	.LVL101:
 1602              		.loc 1 400 41 view .LVU411
 1603 0738 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 401:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1604              		.loc 1 401 13 is_stmt 1 view .LVU412
 1605              	@ armwave.c:401:             g_armwave_state.ch1_color.g = g;
 1606              		.loc 1 401 41 is_stmt 0 view .LVU413
 1607 073c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 402:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1608              		.loc 1 402 13 is_stmt 1 view .LVU414
 1609              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 1610              		.loc 1 402 41 is_stmt 0 view .LVU415
 1611 0740 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 403:armwave.c     ****             break;
 1612              		.loc 1 403 13 is_stmt 1 view .LVU416
 1613              	@ armwave.c:405: }
 404:armwave.c     ****     }
 405:armwave.c     **** }
 1614              		.loc 1 405 1 is_stmt 0 view .LVU417
 1615 0744 1EFF2FE1 		bx	lr	@
 1616              	.L98:
 1617              		.align	2
 1618              	.L97:
 1619 0748 00000000 		.word	g_armwave_state
 1620              		.cfi_endproc
 1621              	.LFE67:
 1623              		.align	2
 1624              		.global	armwave_dump_ppm_debug
 1625              		.syntax unified
 1626              		.arm
 1627              		.fpu vfp
 1629              	armwave_dump_ppm_debug:
 1630              	.LVL102:
 1631              	.LFB68:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Dump a ppm of a buffer to a file.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 411:armwave.c     **** {
 1632              		.loc 1 411 1 is_stmt 1 view -0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1636              		.loc 1 412 5 view .LVU419
 1637              	@ armwave.c:411: {
 411:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1638              		.loc 1 411 1 is_stmt 0 view .LVU420
 1639 074c 0130A0E1 		mov	r3, r1	@ fn, fn
 1640 0750 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1641              		.cfi_def_cfa_offset 28
 1642              		.cfi_offset 4, -28
 1643              		.cfi_offset 5, -24
 1644              		.cfi_offset 6, -20
 1645              		.cfi_offset 7, -16
 1646              		.cfi_offset 8, -12
 1647              		.cfi_offset 9, -8
 1648              		.cfi_offset 14, -4
 1649 0754 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1650 0758 0CD04DE2 		sub	sp, sp, #12	@,,
 1651              		.cfi_def_cfa_offset 40
 1652              	@ armwave.c:412:     FILE *fp = fopen(fn, "wb");
 1653              		.loc 1 412 16 view .LVU421
 1654 075c C4109FE5 		ldr	r1, .L107	@,
 1655              	.LVL103:
 1656              		.loc 1 412 16 view .LVU422
 1657 0760 0300A0E1 		mov	r0, r3	@, fn
 1658              	.LVL104:
 1659              		.loc 1 412 16 view .LVU423
 1660 0764 FEFFFFEB 		bl	fopen64		@
 1661              	.LVL105:
 1662              	@ armwave.c:419:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 413:armwave.c     ****     uint32_t data;
 414:armwave.c     ****     int xx, yy;
 415:armwave.c     **** 
 416:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 417:armwave.c     **** 
 418:armwave.c     ****     fputs("P3\n", fp);
 419:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1663              		.loc 1 419 5 view .LVU424
 1664 0768 BC609FE5 		ldr	r6, .L107+4	@ tmp150,
 1665              	@ armwave.c:418:     fputs("P3\n", fp);
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1666              		.loc 1 418 5 view .LVU425
 1667 076c 0320A0E3 		mov	r2, #3	@,
 1668 0770 0110A0E3 		mov	r1, #1	@,
 1669              	@ armwave.c:412:     FILE *fp = fopen(fn, "wb");
 412:armwave.c     ****     uint32_t data;
 1670              		.loc 1 412 16 view .LVU426
 1671 0774 0070A0E1 		mov	r7, r0	@ fp,
 1672              	.LVL106:
 413:armwave.c     ****     uint32_t data;
 1673              		.loc 1 413 5 is_stmt 1 view .LVU427
 414:armwave.c     **** 
 1674              		.loc 1 414 5 view .LVU428
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1675              		.loc 1 418 5 view .LVU429
 1676 0778 0030A0E1 		mov	r3, r0	@, fp
 1677 077c AC009FE5 		ldr	r0, .L107+8	@,
 1678              	.LVL107:
 418:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1679              		.loc 1 418 5 is_stmt 0 view .LVU430
 1680 0780 FEFFFFEB 		bl	fwrite		@
 1681              	.LVL108:
 1682              		.loc 1 419 5 is_stmt 1 view .LVU431
 1683 0784 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1684 0788 A4109FE5 		ldr	r1, .L107+12	@,
 1685 078c 0700A0E1 		mov	r0, r7	@, fp
 1686 0790 FEFFFFEB 		bl	fprintf		@
 1687              	.LVL109:
 420:armwave.c     ****     fputs("255\n", fp);
 1688              		.loc 1 420 5 view .LVU432
 1689 0794 0420A0E3 		mov	r2, #4	@,
 1690 0798 0730A0E1 		mov	r3, r7	@, fp
 1691 079c 0110A0E3 		mov	r1, #1	@,
 1692 07a0 90009FE5 		ldr	r0, .L107+16	@,
 1693 07a4 FEFFFFEB 		bl	fwrite		@
 1694              	.LVL110:
 421:armwave.c     **** 
 422:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1695              		.loc 1 422 5 view .LVU433
 1696              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1697              		.loc 1 422 37 is_stmt 0 view .LVU434
 1698 07a8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1699              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1700              		.loc 1 422 5 view .LVU435
 1701 07ac 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1702 07b0 180000DA 		ble	.L100		@,
 1703 07b4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1704              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 424:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 425:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 426:armwave.c     **** 
 427:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1705              		.loc 1 427 13 view .LVU436
 1706 07b8 7C909FE5 		ldr	r9, .L107+20	@ tmp152,
 1707              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1708              		.loc 1 422 12 view .LVU437
 1709 07bc 0050A0E3 		mov	r5, #0	@ yy,
 1710              	.LVL111:
 1711              	.L101:
 1712              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1713              		.loc 1 423 9 view .LVU438
 1714 07c0 000053E3 		cmp	r3, #0	@ _13,
 1715              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1716              		.loc 1 423 16 view .LVU439
 1717 07c4 0040A0C3 		movgt	r4, #0	@ xx,
 1718              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1719              		.loc 1 423 9 view .LVU440
 1720 07c8 0F0000DA 		ble	.L103		@,
 1721              	.LVL112:
 1722              	.L102:
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1723              		.loc 1 424 13 is_stmt 1 discriminator 3 view .LVU441
 1724              	@ armwave.c:424:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1725              		.loc 1 424 29 is_stmt 0 discriminator 3 view .LVU442
 1726 07cc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1727              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1728              		.loc 1 427 13 discriminator 3 view .LVU443
 1729 07d0 0910A0E1 		mov	r1, r9	@, tmp152
 1730 07d4 0700A0E1 		mov	r0, r7	@, fp
 1731              	@ armwave.c:424:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 424:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1732              		.loc 1 424 18 discriminator 3 view .LVU444
 1733 07d8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1734              	.LVL113:
 1735              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU445
 1736              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1737              		.loc 1 423 58 is_stmt 0 discriminator 3 view .LVU446
 1738 07dc 014084E2 		add	r4, r4, #1	@ xx, xx,
 1739              	.LVL114:
 1740              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1741              		.loc 1 427 81 discriminator 3 view .LVU447
 1742 07e0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1743              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1744              		.loc 1 427 61 discriminator 3 view .LVU448
 1745 07e4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1746              	@ armwave.c:427:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1747              		.loc 1 427 13 discriminator 3 view .LVU449
 1748 07e8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1749 07ec 7330EFE6 		uxtb	r3, r3	@, tmp142
 1750 07f0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1751 07f4 7220EFE6 		uxtb	r2, r2	@, data
 1752              	.LVL115:
 1753              		.loc 1 427 13 discriminator 3 view .LVU450
 1754 07f8 FEFFFFEB 		bl	fprintf		@
 1755              	.LVL116:
 1756              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1757              		.loc 1 423 41 discriminator 3 view .LVU451
 1758 07fc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1759              	@ armwave.c:423:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 423:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1760              		.loc 1 423 9 discriminator 3 view .LVU452
 1761 0800 040053E1 		cmp	r3, r4	@ _13, xx
 1762 0804 F0FFFFCA 		bgt	.L102		@,
 1763 0808 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1764              	.LVL117:
 1765              	.L103:
 1766              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1767              		.loc 1 422 55 discriminator 2 view .LVU453
 1768 080c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1769              	.LVL118:
 1770              	@ armwave.c:422:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 422:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1771              		.loc 1 422 5 discriminator 2 view .LVU454
 1772 0810 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1773 0814 E9FFFFBA 		blt	.L101		@,
 1774              	.LVL119:
 1775              	.L100:
 428:armwave.c     ****         }
 429:armwave.c     ****     }
 430:armwave.c     **** 
 431:armwave.c     ****     fclose(fp);
 1776              		.loc 1 431 5 is_stmt 1 view .LVU455
 1777 0818 0700A0E1 		mov	r0, r7	@, fp
 1778              	@ armwave.c:432: }
 432:armwave.c     **** }
 1779              		.loc 1 432 1 is_stmt 0 view .LVU456
 1780 081c 0CD08DE2 		add	sp, sp, #12	@,,
 1781              		.cfi_def_cfa_offset 28
 1782              		@ sp needed	@
 1783 0820 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1784              		.cfi_restore 14
 1785              		.cfi_restore 9
 1786              		.cfi_restore 8
 1787              		.cfi_restore 7
 1788              		.cfi_restore 6
 1789              		.cfi_restore 5
 1790              		.cfi_restore 4
 1791              		.cfi_def_cfa_offset 0
 1792              	.LVL120:
 1793              	@ armwave.c:431:     fclose(fp);
 431:armwave.c     **** }
 1794              		.loc 1 431 5 view .LVU457
 1795 0824 FEFFFFEA 		b	fclose		@
 1796              	.LVL121:
 1797              	.L108:
 431:armwave.c     **** }
 1798              		.loc 1 431 5 view .LVU458
 1799              		.align	2
 1800              	.L107:
 1801 0828 F8010000 		.word	.LC15
 1802 082c 00000000 		.word	g_armwave_state
 1803 0830 FC010000 		.word	.LC16
 1804 0834 00020000 		.word	.LC17
 1805 0838 08020000 		.word	.LC18
 1806 083c 10020000 		.word	.LC19
 1807              		.cfi_endproc
 1808              	.LFE68:
 1810              		.align	2
 1811              		.global	armwave_test_init
 1812              		.syntax unified
 1813              		.arm
 1814              		.fpu vfp
 1816              	armwave_test_init:
 1817              	.LVL122:
 1818              	.LFB69:
 433:armwave.c     **** 
 434:armwave.c     **** /*
 435:armwave.c     ****  * Initialise some test functionry.
 436:armwave.c     ****  */
 437:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 438:armwave.c     **** {
 1819              		.loc 1 438 1 is_stmt 1 view -0
 1820              		.cfi_startproc
 1821              		@ args = 0, pretend = 0, frame = 0
 1822              		@ frame_needed = 0, uses_anonymous_args = 0
 439:armwave.c     ****     test_create_gamma();
 1823              		.loc 1 439 5 view .LVU460
 1824              	.LBB12:
 1825              	.LBI12:
  34:armwave.c     **** {
 1826              		.loc 1 34 6 view .LVU461
  34:armwave.c     **** {
 1827              		.loc 1 34 6 is_stmt 0 view .LVU462
 1828              	.LBE12:
 1829              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 1830              		.loc 1 438 1 view .LVU463
 1831 0840 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1832              		.cfi_def_cfa_offset 32
 1833              		.cfi_offset 4, -32
 1834              		.cfi_offset 5, -28
 1835              		.cfi_offset 6, -24
 1836              		.cfi_offset 7, -20
 1837              		.cfi_offset 8, -16
 1838              		.cfi_offset 9, -12
 1839              		.cfi_offset 10, -8
 1840              		.cfi_offset 14, -4
 1841 0844 068B2DED 		vpush.64	{d8, d9, d10}	@
 1842              		.cfi_def_cfa_offset 56
 1843              		.cfi_offset 80, -56
 1844              		.cfi_offset 81, -52
 1845              		.cfi_offset 82, -48
 1846              		.cfi_offset 83, -44
 1847              		.cfi_offset 84, -40
 1848              		.cfi_offset 85, -36
 1849 0848 BC409FE5 		ldr	r4, .L113+20	@ ivtmp.79,
 1850              	.LBB15:
 1851              	.LBB13:
 1852              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1853              		.loc 1 40 32 view .LVU464
 1854 084c 2DAA9FED 		vldr.32	s20, .L113+16	@ tmp136,
 1855              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1856              		.loc 1 40 26 view .LVU465
 1857 0850 289B9FED 		vldr.64	d9, .L113	@ tmp151,
 1858              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1859              		.loc 1 40 49 view .LVU466
 1860 0854 298B9FED 		vldr.64	d8, .L113+8	@ tmp139,
 1861 0858 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1862              	.LBE13:
 1863              	.LBE15:
 1864              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 1865              		.loc 1 438 1 view .LVU467
 1866 085c 10D04DE2 		sub	sp, sp, #16	@,,
 1867              		.cfi_def_cfa_offset 72
 1868              	@ armwave.c:438: {
 438:armwave.c     ****     test_create_gamma();
 1869              		.loc 1 438 1 view .LVU468
 1870 0860 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1871 0864 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1872 0868 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1873 086c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1874 0870 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1875 0874 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1876              	.LVL123:
 1877              	.L110:
 1878              	.LBB16:
 1879              	.LBB14:
  40:armwave.c     ****     }
 1880              		.loc 1 40 9 is_stmt 1 view .LVU469
 1881              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1882              		.loc 1 40 32 is_stmt 0 view .LVU470
 1883 0878 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1884              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1885              		.loc 1 40 26 view .LVU471
 1886 087c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1887              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1888              		.loc 1 40 32 view .LVU472
 1889 0880 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1890 0884 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1891 0888 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1892              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1893              		.loc 1 40 26 view .LVU473
 1894 088c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1895 0890 FEFFFFEB 		bl	pow		@
 1896              	.LVL124:
 1897              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1898              		.loc 1 40 49 view .LVU474
 1899 0894 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1900              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1901              		.loc 1 40 24 view .LVU475
 1902 0898 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1903 089c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1904 08a0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1905              	.LVL125:
 1906              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1907              		.loc 1 39 5 view .LVU476
 1908 08a4 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1909 08a8 F2FFFF1A 		bne	.L110		@,
 1910              	.LVL126:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1911              		.loc 1 39 5 view .LVU477
 1912              	.LBE14:
 1913              	.LBE16:
 440:armwave.c     **** 
 441:armwave.c     ****     // make ch1 yellowish by default
 442:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1914              		.loc 1 442 5 is_stmt 1 view .LVU478
 1915              	.LBB17:
 1916              	.LBI17:
 395:armwave.c     **** {
 1917              		.loc 1 395 6 view .LVU479
 1918              	.LBB18:
 398:armwave.c     ****         case 1:
 1919              		.loc 1 398 5 view .LVU480
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1920              		.loc 1 400 13 view .LVU481
 401:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1921              		.loc 1 401 13 view .LVU482
 1922              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1923              		.loc 1 400 41 is_stmt 0 view .LVU483
 1924 08ac 5CC09FE5 		ldr	ip, .L113+24	@ tmp142,
 1925 08b0 5C409FE5 		ldr	r4, .L113+28	@ tmp143,
 1926              	.LBE18:
 1927              	.LBE17:
 1928              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 443:armwave.c     **** 
 444:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1929              		.loc 1 444 5 view .LVU484
 1930 08b4 0000A0E3 		mov	r0, #0	@ tmp147,
 1931              	.LBB22:
 1932              	.LBB19:
 1933              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 402:armwave.c     ****             break;
 1934              		.loc 1 402 41 view .LVU485
 1935 08b8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1936              	.LBE19:
 1937              	.LBE22:
 1938              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1939              		.loc 1 444 5 view .LVU486
 1940 08bc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1941 08c0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1942 08c4 00808DE5 		str	r8, [sp]	@ render_width,
 1943 08c8 0610A0E1 		mov	r1, r6	@, tmp3
 1944 08cc 0720A0E1 		mov	r2, r7	@, nwaves
 1945              	.LBB23:
 1946              	.LBB20:
 1947              	@ armwave.c:400:             g_armwave_state.ch1_color.r = r;
 400:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1948              		.loc 1 400 41 view .LVU487
 1949 08d0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 402:armwave.c     ****             break;
 1950              		.loc 1 402 13 is_stmt 1 view .LVU488
 1951              	.LBE20:
 1952              	.LBE23:
 1953              	@ armwave.c:444:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1954              		.loc 1 444 5 is_stmt 0 view .LVU489
 1955 08d4 0630A0E1 		mov	r3, r6	@, wave_size
 1956              	.LBB24:
 1957              	.LBB21:
 1958              	@ armwave.c:402:             g_armwave_state.ch1_color.b = b;
 402:armwave.c     ****             break;
 1959              		.loc 1 402 41 view .LVU490
 1960 08d8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 403:armwave.c     ****     }
 1961              		.loc 1 403 13 is_stmt 1 view .LVU491
 1962              	.LVL127:
 403:armwave.c     ****     }
 1963              		.loc 1 403 13 is_stmt 0 view .LVU492
 1964              	.LBE21:
 1965              	.LBE24:
 1966              		.loc 1 444 5 is_stmt 1 view .LVU493
 1967 08dc FEFFFFEB 		bl	armwave_setup_render		@
 1968              	.LVL128:
 445:armwave.c     **** 
 446:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1969              		.loc 1 446 5 view .LVU494
 1970 08e0 30109FE5 		ldr	r1, .L113+32	@,
 1971 08e4 30009FE5 		ldr	r0, .L113+36	@,
 1972              	@ armwave.c:447: }
 447:armwave.c     **** }
 1973              		.loc 1 447 1 is_stmt 0 view .LVU495
 1974 08e8 10D08DE2 		add	sp, sp, #16	@,,
 1975              		.cfi_def_cfa_offset 56
 1976              		@ sp needed	@
 1977 08ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1978              		.cfi_restore 84
 1979              		.cfi_restore 85
 1980              		.cfi_restore 82
 1981              		.cfi_restore 83
 1982              		.cfi_restore 80
 1983              		.cfi_restore 81
 1984              		.cfi_def_cfa_offset 32
 1985 08f0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1986              		.cfi_restore 14
 1987              		.cfi_restore 10
 1988              		.cfi_restore 9
 1989              		.cfi_restore 8
 1990              		.cfi_restore 7
 1991              		.cfi_restore 6
 1992              		.cfi_restore 5
 1993              		.cfi_restore 4
 1994              		.cfi_def_cfa_offset 0
 1995              	.LVL129:
 1996              	@ armwave.c:446:     printf("armwave version: %s\n", ARMWAVE_VER);
 446:armwave.c     **** }
 1997              		.loc 1 446 5 view .LVU496
 1998 08f4 FEFFFFEA 		b	printf		@
 1999              	.LVL130:
 2000              	.L114:
 2001              		.align	3
 2002              	.L113:
 2003 08f8 000000C0 		.word	-1073741824
 2004 08fc CCCCEC3F 		.word	1072483532
 2005 0900 00000000 		.word	0
 2006 0904 00E06F40 		.word	1081073664
 2007 0908 00007F43 		.word	1132396544
 2008 090c FFFFFFFF 		.word	gamma_table-1
 2009 0910 00000000 		.word	g_armwave_state
 2010 0914 F609F406 		.word	116656630
 2011 0918 00000000 		.word	.LC0
 2012 091c 08000000 		.word	.LC1
 2013              		.cfi_endproc
 2014              	.LFE69:
 2016              		.align	2
 2017              		.global	armwave_test_fill_outbuf
 2018              		.syntax unified
 2019              		.arm
 2020              		.fpu vfp
 2022              	armwave_test_fill_outbuf:
 2023              	.LFB70:
 448:armwave.c     **** 
 449:armwave.c     **** /*
 450:armwave.c     ****  * Render image to the local allocated buffer.
 451:armwave.c     ****  */
 452:armwave.c     **** void armwave_test_fill_outbuf()
 453:armwave.c     **** {
 2024              		.loc 1 453 1 is_stmt 1 view -0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 0
 2027              		@ frame_needed = 0, uses_anonymous_args = 0
 2028              		@ link register save eliminated.
 454:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2029              		.loc 1 454 5 view .LVU498
 2030 0920 04309FE5 		ldr	r3, .L116	@ tmp111,
 2031 0924 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2032 0928 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2033              	.LVL131:
 2034              	.L117:
 2035              		.align	2
 2036              	.L116:
 2037 092c 00000000 		.word	g_armwave_state
 2038              		.cfi_endproc
 2039              	.LFE70:
 2041              		.align	2
 2042              		.global	armwave_test_dump_buffer_to_ppm
 2043              		.syntax unified
 2044              		.arm
 2045              		.fpu vfp
 2047              	armwave_test_dump_buffer_to_ppm:
 2048              	.LVL132:
 2049              	.LFB71:
 455:armwave.c     **** }
 456:armwave.c     **** 
 457:armwave.c     **** /*
 458:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 459:armwave.c     ****  */
 460:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 461:armwave.c     **** {
 2050              		.loc 1 461 1 view -0
 2051              		.cfi_startproc
 2052              		@ args = 0, pretend = 0, frame = 0
 2053              		@ frame_needed = 0, uses_anonymous_args = 0
 2054              		@ link register save eliminated.
 462:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2055              		.loc 1 462 5 view .LVU500
 2056 0930 08309FE5 		ldr	r3, .L119	@ tmp112,
 2057 0934 0010A0E1 		mov	r1, r0	@, fn
 2058 0938 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2059              	.LVL133:
 2060              		.loc 1 462 5 is_stmt 0 view .LVU501
 2061 093c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2062              	.LVL134:
 2063              	.L120:
 2064              		.loc 1 462 5 view .LVU502
 2065              		.align	2
 2066              	.L119:
 2067 0940 00000000 		.word	g_armwave_state
 2068              		.cfi_endproc
 2069              	.LFE71:
 2071              		.align	2
 2072              		.global	armwave_test_fill_gdkbuf
 2073              		.syntax unified
 2074              		.arm
 2075              		.fpu vfp
 2077              	armwave_test_fill_gdkbuf:
 2078              	.LVL135:
 2079              	.LFB72:
 463:armwave.c     **** }
 464:armwave.c     **** 
 465:armwave.c     **** /*
 466:armwave.c     ****  * Render GDK buffer with test funtionry.
 467:armwave.c     ****  */
 468:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 469:armwave.c     **** {
 2080              		.loc 1 469 1 is_stmt 1 view -0
 2081              		.cfi_startproc
 2082              		@ args = 0, pretend = 0, frame = 0
 2083              		@ frame_needed = 0, uses_anonymous_args = 0
 2084              		@ link register save eliminated.
 470:armwave.c     ****     //PyObject *mv;
 471:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 472:armwave.c     **** 
 473:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 474:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2085              		.loc 1 474 5 view .LVU504
 475:armwave.c     ****     
 476:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 477:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2086              		.loc 1 477 5 view .LVU505
 2087              	@ armwave.c:474:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 474:armwave.c     ****     
 2088              		.loc 1 474 11 is_stmt 0 view .LVU506
 2089 0944 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2090              	@ armwave.c:477:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2091              		.loc 1 477 5 view .LVU507
 2092 0948 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2093              	.LVL136:
 2094              		.loc 1 477 5 view .LVU508
 2095 094c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2096              	.LVL137:
 2097              		.loc 1 477 5 view .LVU509
 2098              		.cfi_endproc
 2099              	.LFE72:
 2101              		.align	2
 2102              		.global	armwave_test_buffer_alloc
 2103              		.syntax unified
 2104              		.arm
 2105              		.fpu vfp
 2107              	armwave_test_buffer_alloc:
 2108              	.LVL138:
 2109              	.LFB73:
 478:armwave.c     **** }
 479:armwave.c     **** 
 480:armwave.c     **** /*
 481:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 482:armwave.c     ****  */
 483:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 484:armwave.c     **** {
 2110              		.loc 1 484 1 is_stmt 1 view -0
 2111              		.cfi_startproc
 2112              		@ args = 0, pretend = 0, frame = 0
 2113              		@ frame_needed = 0, uses_anonymous_args = 0
 485:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2114              		.loc 1 485 5 view .LVU511
 2115              	@ armwave.c:484: {
 484:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2116              		.loc 1 484 1 is_stmt 0 view .LVU512
 2117 0950 70402DE9 		push	{r4, r5, r6, lr}	@
 2118              		.cfi_def_cfa_offset 16
 2119              		.cfi_offset 4, -16
 2120              		.cfi_offset 5, -12
 2121              		.cfi_offset 6, -8
 2122              		.cfi_offset 14, -4
 2123              	@ armwave.c:484: {
 484:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2124              		.loc 1 484 1 view .LVU513
 2125 0954 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2126              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 2127              		.loc 1 485 23 view .LVU514
 2128 0958 44409FE5 		ldr	r4, .L129	@ tmp128,
 2129 095c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2130              	.LVL139:
 2131              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 2132              		.loc 1 485 7 view .LVU515
 2133 0960 000050E3 		cmp	r0, #0	@ _1,
 2134 0964 0000000A 		beq	.L123		@,
 486:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2135              		.loc 1 486 9 is_stmt 1 view .LVU516
 2136 0968 FEFFFFEB 		bl	free		@
 2137              	.LVL140:
 2138              	.L123:
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 490:armwave.c     **** 
 491:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2139              		.loc 1 491 5 view .LVU517
 2140              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2141              		.loc 1 491 75 is_stmt 0 view .LVU518
 2142 096c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2143 0970 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2144              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2145              		.loc 1 491 40 view .LVU519
 2146 0974 0610A0E1 		mov	r1, r6	@, nsets
 2147              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2148              		.loc 1 491 75 view .LVU520
 2149 0978 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2150              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2151              		.loc 1 491 40 view .LVU521
 2152 097c 0500A0E1 		mov	r0, r5	@, _4
 2153 0980 FEFFFFEB 		bl	calloc		@
 2154              	.LVL141:
 2155              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 492:armwave.c     **** 
 493:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2156              		.loc 1 493 7 view .LVU522
 2157 0984 000050E3 		cmp	r0, #0	@ tmp124,
 2158              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2159              		.loc 1 491 38 view .LVU523
 2160 0988 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2161              		.loc 1 493 5 is_stmt 1 view .LVU524
 2162              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 2163              		.loc 1 493 7 is_stmt 0 view .LVU525
 2164 098c 7080BD18 		popne	{r4, r5, r6, pc}	@
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2165              		.loc 1 494 9 is_stmt 1 view .LVU526
 2166 0990 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2167 0994 0620A0E1 		mov	r2, r6	@, nsets
 2168 0998 08009FE5 		ldr	r0, .L129+4	@,
 2169              	@ armwave.c:498: }
 495:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 496:armwave.c     ****         return;
 497:armwave.c     ****     }
 498:armwave.c     **** }
 2170              		.loc 1 498 1 is_stmt 0 view .LVU527
 2171 099c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2172              		.cfi_restore 14
 2173              		.cfi_restore 6
 2174              		.cfi_restore 5
 2175              		.cfi_restore 4
 2176              		.cfi_def_cfa_offset 0
 2177              	.LVL142:
 2178              	@ armwave.c:494:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2179              		.loc 1 494 9 view .LVU528
 2180 09a0 FEFFFFEA 		b	printf		@
 2181              	.LVL143:
 2182              	.L130:
 494:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2183              		.loc 1 494 9 view .LVU529
 2184              		.align	2
 2185              	.L129:
 2186 09a4 00000000 		.word	g_armwave_state
 2187 09a8 20020000 		.word	.LC20
 2188              		.cfi_endproc
 2189              	.LFE73:
 2191              		.align	2
 2192              		.global	armwave_fill_pixbuf_into_pybuffer
 2193              		.syntax unified
 2194              		.arm
 2195              		.fpu vfp
 2197              	armwave_fill_pixbuf_into_pybuffer:
 2198              	.LVL144:
 2199              	.LFB74:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 502:armwave.c     ****  */
 503:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 504:armwave.c     **** {
 2200              		.loc 1 504 1 is_stmt 1 view -0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 48
 2203              		@ frame_needed = 0, uses_anonymous_args = 0
 505:armwave.c     ****     Py_buffer buffer;
 2204              		.loc 1 505 5 view .LVU531
 506:armwave.c     ****     int ret;
 2205              		.loc 1 506 5 view .LVU532
 507:armwave.c     **** 
 508:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 509:armwave.c     **** 
 510:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2206              		.loc 1 510 5 view .LVU533
 2207              	@ armwave.c:504: {
 504:armwave.c     ****     Py_buffer buffer;
 2208              		.loc 1 504 1 is_stmt 0 view .LVU534
 2209 09ac 04E02DE5 		str	lr, [sp, #-4]!	@,
 2210              		.cfi_def_cfa_offset 4
 2211              		.cfi_offset 14, -4
 2212 09b0 34D04DE2 		sub	sp, sp, #52	@,,
 2213              		.cfi_def_cfa_offset 56
 2214              	@ armwave.c:510:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2215              		.loc 1 510 11 view .LVU535
 2216 09b4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2217 09b8 0120A0E3 		mov	r2, #1	@,
 2218 09bc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2219              	.LVL145:
 511:armwave.c     **** 
 512:armwave.c     ****     if(ret != 0) {
 2220              		.loc 1 512 5 is_stmt 1 view .LVU536
 2221              	@ armwave.c:512:     if(ret != 0) {
 2222              		.loc 1 512 7 is_stmt 0 view .LVU537
 2223 09c0 000050E3 		cmp	r0, #0	@,
 2224 09c4 0A00001A 		bne	.L135		@,
 513:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 514:armwave.c     ****         Py_RETURN_FALSE;
 515:armwave.c     ****     }
 516:armwave.c     **** 
 517:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 518:armwave.c     **** 
 519:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2225              		.loc 1 519 5 is_stmt 1 view .LVU538
 2226 09c8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2227              	.LVL146:
 2228              		.loc 1 519 5 is_stmt 0 view .LVU539
 2229 09cc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2230              	.LVL147:
 520:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 521:armwave.c     **** 
 522:armwave.c     ****     PyBuffer_Release(&buffer);
 2231              		.loc 1 522 5 is_stmt 1 view .LVU540
 2232 09d0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2233 09d4 FEFFFFEB 		bl	PyBuffer_Release		@
 2234              	.LVL148:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     Py_RETURN_TRUE;
 2235              		.loc 1 525 5 view .LVU541
 2236              	.LBB25:
 2237              	.LBI25:
 2238              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2239              		.loc 2 456 20 view .LVU542
 2240              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2241              		.loc 2 458 21 view .LVU543
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2242              		.loc 2 459 5 view .LVU544
 2243              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2244              		.loc 2 459 18 is_stmt 0 view .LVU545
 2245 09d8 38309FE5 		ldr	r3, .L136	@ tmp126,
 2246              	.LBE26:
 2247              	.LBE25:
 2248              	@ armwave.c:525:     Py_RETURN_TRUE;
 2249              		.loc 1 525 5 view .LVU546
 2250 09dc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2251              	.LBB28:
 2252              	.LBB27:
 2253              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2254              		.loc 2 459 18 view .LVU547
 2255 09e0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2256 09e4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2257 09e8 002083E5 		str	r2, [r3]	@ tmp128,
 2258              	.LBE27:
 2259              	.LBE28:
 2260              	@ armwave.c:526: }
 526:armwave.c     **** }
 2261              		.loc 1 526 1 view .LVU548
 2262 09ec 34D08DE2 		add	sp, sp, #52	@,,
 2263              		.cfi_remember_state
 2264              		.cfi_def_cfa_offset 4
 2265              		@ sp needed	@
 2266 09f0 04F09DE4 		ldr	pc, [sp], #4	@
 2267              	.LVL149:
 2268              	.L135:
 2269              		.cfi_restore_state
 513:armwave.c     ****         Py_RETURN_FALSE;
 2270              		.loc 1 513 9 is_stmt 1 view .LVU549
 2271 09f4 20009FE5 		ldr	r0, .L136+4	@,
 2272              	.LVL150:
 513:armwave.c     ****         Py_RETURN_FALSE;
 2273              		.loc 1 513 9 is_stmt 0 view .LVU550
 2274 09f8 FEFFFFEB 		bl	puts		@
 2275              	.LVL151:
 514:armwave.c     ****     }
 2276              		.loc 1 514 9 is_stmt 1 view .LVU551
 2277              	.LBB29:
 2278              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2279              		.loc 2 456 20 view .LVU552
 2280              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2281              		.loc 2 458 21 view .LVU553
 2282              		.loc 2 459 5 view .LVU554
 2283              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2284              		.loc 2 459 18 is_stmt 0 view .LVU555
 2285 09fc 1C309FE5 		ldr	r3, .L136+8	@ tmp120,
 2286              	.LBE30:
 2287              	.LBE29:
 2288              	@ armwave.c:514:         Py_RETURN_FALSE;
 514:armwave.c     ****     }
 2289              		.loc 1 514 9 view .LVU556
 2290 0a00 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2291              	.LBB32:
 2292              	.LBB31:
 2293              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2294              		.loc 2 459 18 view .LVU557
 2295 0a04 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2296 0a08 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2297 0a0c 002083E5 		str	r2, [r3]	@ tmp122,
 2298              	.LBE31:
 2299              	.LBE32:
 2300              	@ armwave.c:526: }
 2301              		.loc 1 526 1 view .LVU558
 2302 0a10 34D08DE2 		add	sp, sp, #52	@,,
 2303              		.cfi_def_cfa_offset 4
 2304              		@ sp needed	@
 2305 0a14 04F09DE4 		ldr	pc, [sp], #4	@
 2306              	.L137:
 2307              		.align	2
 2308              	.L136:
 2309 0a18 00000000 		.word	_Py_TrueStruct
 2310 0a1c 74020000 		.word	.LC21
 2311 0a20 00000000 		.word	_Py_FalseStruct
 2312              		.cfi_endproc
 2313              	.LFE74:
 2315              		.align	2
 2316              		.global	armwave_test_create_am_sine
 2317              		.syntax unified
 2318              		.arm
 2319              		.fpu vfp
 2321              	armwave_test_create_am_sine:
 2322              	.LVL152:
 2323              	.LFB75:
 527:armwave.c     **** 
 528:armwave.c     **** /*
 529:armwave.c     ****  * Make a test AM waveform for render tests.
 530:armwave.c     ****  *
 531:armwave.c     ****  * @param   mod                     modulation depth
 532:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 533:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 534:armwave.c     ****  */
 535:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 536:armwave.c     **** {
 2324              		.loc 1 536 1 is_stmt 1 view -0
 2325              		.cfi_startproc
 2326              		@ args = 0, pretend = 0, frame = 8
 2327              		@ frame_needed = 0, uses_anonymous_args = 0
 537:armwave.c     ****     float v, noise, xnoise, mod_val;
 2328              		.loc 1 537 5 view .LVU560
 538:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2329              		.loc 1 538 5 view .LVU561
 2330              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2331              		.loc 1 536 1 is_stmt 0 view .LVU562
 2332 0a24 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2333              		.cfi_def_cfa_offset 32
 2334              		.cfi_offset 4, -32
 2335              		.cfi_offset 5, -28
 2336              		.cfi_offset 6, -24
 2337              		.cfi_offset 7, -20
 2338              		.cfi_offset 8, -16
 2339              		.cfi_offset 9, -12
 2340              		.cfi_offset 10, -8
 2341              		.cfi_offset 14, -4
 2342              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2343              		.loc 1 538 38 view .LVU563
 2344 0a28 7A7A9FED 		vldr.32	s14, .L169	@ tmp180,
 2345              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2346              		.loc 1 538 55 view .LVU564
 2347 0a2c 00529FE5 		ldr	r5, .L169+28	@ tmp250,
 2348              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2349              		.loc 1 536 1 view .LVU565
 2350 0a30 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2351              		.cfi_def_cfa_offset 80
 2352              		.cfi_offset 80, -80
 2353              		.cfi_offset 81, -76
 2354              		.cfi_offset 82, -72
 2355              		.cfi_offset 83, -68
 2356              		.cfi_offset 84, -64
 2357              		.cfi_offset 85, -60
 2358              		.cfi_offset 86, -56
 2359              		.cfi_offset 87, -52
 2360              		.cfi_offset 88, -48
 2361              		.cfi_offset 89, -44
 2362              		.cfi_offset 90, -40
 2363              		.cfi_offset 91, -36
 2364 0a34 0090A0E1 		mov	r9, r0	@ sets, sets
 2365              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2366              		.loc 1 538 38 view .LVU566
 2367 0a38 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2368              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 539:armwave.c     ****     int s, set_offset = 0;
 540:armwave.c     ****     int w, x;
 541:armwave.c     **** 
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2369              		.loc 1 542 70 view .LVU567
 2370 0a3c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2371 0a40 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2372              	.LBB35:
 2373              	.LBB36:
 2374              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2375              		.loc 1 485 23 view .LVU568
 2376 0a44 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2377              	.LVL153:
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2378              		.loc 1 485 23 view .LVU569
 2379              	.LBE36:
 2380              	.LBE35:
 2381              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2382              		.loc 1 538 38 view .LVU570
 2383 0a48 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2384              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2385              		.loc 1 542 70 view .LVU571
 2386 0a4c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2387              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2388              		.loc 1 536 1 view .LVU572
 2389 0a50 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2390              	.LBB40:
 2391              	.LBB37:
 2392              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2393              		.loc 1 485 7 view .LVU573
 2394 0a54 000050E3 		cmp	r0, #0	@ _82,
 2395              	.LBE37:
 2396              	.LBE40:
 2397              	@ armwave.c:536: {
 536:armwave.c     ****     float v, noise, xnoise, mod_val;
 2398              		.loc 1 536 1 view .LVU574
 2399 0a58 08D04DE2 		sub	sp, sp, #8	@,,
 2400              		.cfi_def_cfa_offset 88
 2401              	@ armwave.c:543:     g_armwave_state.test_wave_buffer_nsets = sets;
 543:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2402              		.loc 1 543 44 view .LVU575
 2403 0a5c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2404              	@ armwave.c:542:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2405              		.loc 1 542 45 view .LVU576
 2406 0a60 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2407              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2408              		.loc 1 538 38 view .LVU577
 2409 0a64 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2410              	@ armwave.c:538:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 538:armwave.c     ****     int s, set_offset = 0;
 2411              		.loc 1 538 11 view .LVU578
 2412 0a68 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2413              	.LVL154:
 539:armwave.c     ****     int w, x;
 2414              		.loc 1 539 5 is_stmt 1 view .LVU579
 540:armwave.c     **** 
 2415              		.loc 1 540 5 view .LVU580
 542:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2416              		.loc 1 542 5 view .LVU581
 2417              		.loc 1 543 5 view .LVU582
 544:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2418              		.loc 1 544 5 view .LVU583
 2419              	.LBB41:
 2420              	.LBI35:
 483:armwave.c     **** {
 2421              		.loc 1 483 6 view .LVU584
 2422              	.LBB38:
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2423              		.loc 1 485 5 view .LVU585
 2424              	@ armwave.c:485:     if(g_armwave_state.test_wave_buffer != NULL) {
 485:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2425              		.loc 1 485 7 is_stmt 0 view .LVU586
 2426 0a6c 0000000A 		beq	.L139		@,
 486:armwave.c     ****     }
 2427              		.loc 1 486 9 is_stmt 1 view .LVU587
 2428 0a70 FEFFFFEB 		bl	free		@
 2429              	.LVL155:
 2430              	.L139:
 491:armwave.c     **** 
 2431              		.loc 1 491 5 view .LVU588
 2432              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2433              		.loc 1 491 75 is_stmt 0 view .LVU589
 2434 0a74 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2435 0a78 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2436              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2437              		.loc 1 491 40 view .LVU590
 2438 0a7c 0910A0E1 		mov	r1, r9	@, sets
 2439              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2440              		.loc 1 491 75 view .LVU591
 2441 0a80 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2442              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2443              		.loc 1 491 40 view .LVU592
 2444 0a84 0400A0E1 		mov	r0, r4	@, _85
 2445 0a88 FEFFFFEB 		bl	calloc		@
 2446              	.LVL156:
 2447              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2448              		.loc 1 493 7 view .LVU593
 2449 0a8c 000050E3 		cmp	r0, #0	@ tmp191,
 2450              	@ armwave.c:491:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 491:armwave.c     **** 
 2451              		.loc 1 491 38 view .LVU594
 2452 0a90 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2453              		.loc 1 493 5 is_stmt 1 view .LVU595
 2454              	@ armwave.c:493:     if(g_armwave_state.test_wave_buffer == NULL) {
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2455              		.loc 1 493 7 is_stmt 0 view .LVU596
 2456 0a94 5A00000A 		beq	.L168		@,
 2457              	.L140:
 2458              	.LVL157:
 493:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2459              		.loc 1 493 7 view .LVU597
 2460              	.LBE38:
 2461              	.LBE41:
 2462              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 545:armwave.c     **** 
 546:armwave.c     ****     for(s = 0; s < sets; s++) {
 2463              		.loc 1 546 5 discriminator 1 view .LVU598
 2464 0a98 000059E3 		cmp	r9, #0	@ sets,
 2465 0a9c 550000DA 		ble	.L138		@,
 2466              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 548:armwave.c     ****     
 549:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 550:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 551:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 552:armwave.c     **** 
 553:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 554:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 555:armwave.c     ****                 noise *= noise;
 556:armwave.c     ****                 noise *= noise;
 557:armwave.c     ****                 noise *= noise;
 558:armwave.c     **** 
 559:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 560:armwave.c     ****                     noise = -noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 noise += 1.0f;
 563:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 564:armwave.c     **** 
 565:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2467              		.loc 1 565 45 view .LVU599
 2468 0aa0 5C8A9FED 		vldr.32	s16, .L169	@ tmp258,
 2469              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 566:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 567:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 568:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2470              		.loc 1 568 104 view .LVU600
 2471 0aa4 5CCA9FED 		vldr.32	s24, .L169+4	@ tmp259,
 2472              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2473              		.loc 1 546 5 view .LVU601
 2474 0aa8 0070A0E3 		mov	r7, #0	@ set_offset,
 2475              	@ armwave.c:547:         printf("Calculating test set %d\n", s);
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 2476              		.loc 1 547 9 view .LVU602
 2477 0aac 84A19FE5 		ldr	r10, .L169+32	@ tmp257,
 2478              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2479              		.loc 1 546 5 view .LVU603
 2480 0ab0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2481              	.LVL158:
 2482              	.L141:
 547:armwave.c     ****         printf("Calculating test set %d\n", s);
 2483              		.loc 1 547 9 is_stmt 1 view .LVU604
 2484 0ab4 0810A0E1 		mov	r1, r8	@, s
 2485 0ab8 0A00A0E1 		mov	r0, r10	@, tmp257
 2486 0abc FEFFFFEB 		bl	printf		@
 2487              	.LVL159:
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2488              		.loc 1 549 9 view .LVU605
 2489              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2490              		.loc 1 549 39 is_stmt 0 view .LVU606
 2491 0ac0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2492              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2493              		.loc 1 549 9 view .LVU607
 2494 0ac4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2495 0ac8 450000DA 		ble	.L142		@,
 2496              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2497              		.loc 1 551 21 view .LVU608
 2498 0acc 53CADFED 		vldr.32	s25, .L169+8	@ tmp200,
 2499              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2500              		.loc 1 565 33 view .LVU609
 2501 0ad0 53BA9FED 		vldr.32	s22, .L169+12	@ tmp253,
 2502              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2503              		.loc 1 563 24 view .LVU610
 2504 0ad4 53AADFED 		vldr.32	s21, .L169+16	@ tmp254,
 2505 0ad8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2506              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2507              		.loc 1 549 15 view .LVU611
 2508 0adc 0060A0E3 		mov	r6, #0	@ w,
 2509              	.LVL160:
 2510              	.L149:
 551:armwave.c     **** 
 2511              		.loc 1 551 13 is_stmt 1 view .LVU612
 2512              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2513              		.loc 1 551 21 is_stmt 0 view .LVU613
 2514 0ae0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2515 0ae4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2516              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2517              		.loc 1 553 13 view .LVU614
 2518 0ae8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2519              	@ armwave.c:551:             mod_val = 0.5f + (_1_waves_mod * w);
 551:armwave.c     **** 
 2520              		.loc 1 551 21 view .LVU615
 2521 0aec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2522 0af0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2523              	.LVL161:
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2524              		.loc 1 553 13 is_stmt 1 view .LVU616
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2525              		.loc 1 553 13 is_stmt 0 view .LVU617
 2526 0af4 370000DA 		ble	.L143		@,
 2527 0af8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2528              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2529              		.loc 1 568 113 view .LVU618
 2530 0afc 4AAA9FED 		vldr.32	s20, .L169+20	@ tmp229,
 2531 0b00 4A8ADFED 		vldr.32	s17, .L169+24	@ tmp230,
 2532              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2533              		.loc 1 553 19 view .LVU619
 2534 0b04 0040A0E3 		mov	r4, #0	@ x,
 2535              	.LVL162:
 2536              	.L148:
 554:armwave.c     ****                 noise *= noise;
 2537              		.loc 1 554 17 is_stmt 1 view .LVU620
 2538              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2539              		.loc 1 554 28 is_stmt 0 view .LVU621
 2540 0b08 FEFFFFEB 		bl	rand		@
 2541              	.LVL163:
 2542              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2543              		.loc 1 554 35 view .LVU622
 2544 0b0c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2545              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2546              		.loc 1 554 45 view .LVU623
 2547 0b10 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2548 0b14 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2549              	@ armwave.c:554:                 noise  = ((rand() & 0xffff) * noise_fraction);
 554:armwave.c     ****                 noise *= noise;
 2550              		.loc 1 554 24 view .LVU624
 2551 0b18 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2552              	.LVL164:
 555:armwave.c     ****                 noise *= noise;
 2553              		.loc 1 555 17 is_stmt 1 view .LVU625
 2554              	@ armwave.c:555:                 noise *= noise;
 555:armwave.c     ****                 noise *= noise;
 2555              		.loc 1 555 23 is_stmt 0 view .LVU626
 2556 0b1c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2557              	.LVL165:
 556:armwave.c     ****                 noise *= noise;
 2558              		.loc 1 556 17 is_stmt 1 view .LVU627
 2559              	@ armwave.c:556:                 noise *= noise;
 556:armwave.c     ****                 noise *= noise;
 2560              		.loc 1 556 23 is_stmt 0 view .LVU628
 2561 0b20 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2562              	.LVL166:
 557:armwave.c     **** 
 2563              		.loc 1 557 17 is_stmt 1 view .LVU629
 2564              	@ armwave.c:557:                 noise *= noise;
 557:armwave.c     **** 
 2565              		.loc 1 557 23 is_stmt 0 view .LVU630
 2566 0b24 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2567              	.LVL167:
 559:armwave.c     ****                     noise = -noise;
 2568              		.loc 1 559 17 is_stmt 1 view .LVU631
 2569              	@ armwave.c:559:                 if((rand() & 0xffff) > 0x7fff)
 559:armwave.c     ****                     noise = -noise;
 2570              		.loc 1 559 21 is_stmt 0 view .LVU632
 2571 0b28 FEFFFFEB 		bl	rand		@
 2572              	.LVL168:
 560:armwave.c     **** 
 2573              		.loc 1 560 21 is_stmt 1 view .LVU633
 2574              	@ armwave.c:559:                 if((rand() & 0xffff) > 0x7fff)
 559:armwave.c     ****                     noise = -noise;
 2575              		.loc 1 559 19 is_stmt 0 view .LVU634
 2576 0b2c 020910E3 		tst	r0, #32768	@,
 2577              	@ armwave.c:560:                     noise = -noise;
 560:armwave.c     **** 
 2578              		.loc 1 560 27 view .LVU635
 2579 0b30 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2580              	.LVL169:
 562:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2581              		.loc 1 562 17 is_stmt 1 view .LVU636
 563:armwave.c     **** 
 2582              		.loc 1 563 17 view .LVU637
 2583              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2584              		.loc 1 563 27 is_stmt 0 view .LVU638
 2585 0b34 FEFFFFEB 		bl	rand		@
 2586              	.LVL170:
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2587              		.loc 1 565 17 is_stmt 1 view .LVU639
 2588              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2589              		.loc 1 565 45 is_stmt 0 view .LVU640
 2590 0b38 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2591              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2592              		.loc 1 565 33 view .LVU641
 2593 0b3c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2594              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2595              		.loc 1 565 45 view .LVU642
 2596 0b40 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2597              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2598              		.loc 1 565 33 view .LVU643
 2599 0b44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2600              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2601              		.loc 1 565 45 view .LVU644
 2602 0b48 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2603              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2604              		.loc 1 565 33 view .LVU645
 2605 0b4c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2606              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2607              		.loc 1 563 34 view .LVU646
 2608 0b50 7000FFE6 		uxth	r0, r0	@ tmp214,
 2609              	.LVL171:
 2610              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2611              		.loc 1 563 44 view .LVU647
 2612 0b54 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2613 0b58 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2614              	@ armwave.c:563:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 563:armwave.c     **** 
 2615              		.loc 1 563 24 view .LVU648
 2616 0b5c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2617              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2618              		.loc 1 565 77 view .LVU649
 2619 0b60 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2620              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2621              		.loc 1 565 22 view .LVU650
 2622 0b64 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2623 0b68 FEFFFFEB 		bl	sin		@
 2624              	.LVL172:
 2625              		.loc 1 568 17 is_stmt 1 view .LVU651
 2626              	@ armwave.c:562:                 noise += 1.0f;
 562:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2627              		.loc 1 562 23 is_stmt 0 view .LVU652
 2628 0b6c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2629              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2630              		.loc 1 568 104 view .LVU653
 2631 0b70 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2632              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2633              		.loc 1 565 98 view .LVU654
 2634 0b74 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2635              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2636              		.loc 1 565 87 view .LVU655
 2637 0b78 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2638              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2639              		.loc 1 565 98 view .LVU656
 2640 0b7c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2641              	@ armwave.c:565:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 565:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2642              		.loc 1 565 19 view .LVU657
 2643 0b80 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2644              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2645              		.loc 1 568 113 view .LVU658
 2646 0b84 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2647 0b88 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2648 0b8c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2649 0b90 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2650 0b94 050000DA 		ble	.L145		@,
 2651              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2652              		.loc 1 568 104 discriminator 1 view .LVU659
 2653 0b98 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2654 0b9c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2655 0ba0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2656 0ba4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2657 0ba8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2658 0bac 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2659              	.L145:
 2660              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2661              		.loc 1 568 57 discriminator 12 view .LVU660
 2662 0bb0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2663              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2664              		.loc 1 568 102 discriminator 12 view .LVU661
 2665 0bb4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2666 0bb8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2667 0bbc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2668              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2669              		.loc 1 553 58 discriminator 12 view .LVU662
 2670 0bc0 014084E2 		add	r4, r4, #1	@ x, x,
 2671              	.LVL173:
 2672              	@ armwave.c:568:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2673              		.loc 1 568 102 discriminator 12 view .LVU663
 2674 0bc4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2675              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2676              		.loc 1 553 43 discriminator 12 view .LVU664
 2677 0bc8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2678              	@ armwave.c:553:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 553:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2679              		.loc 1 553 13 discriminator 12 view .LVU665
 2680 0bcc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2681 0bd0 CCFFFFCA 		bgt	.L148		@,
 2682 0bd4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2683              	.LVL174:
 2684              	.L143:
 2685              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2686              		.loc 1 549 48 discriminator 2 view .LVU666
 2687 0bd8 016086E2 		add	r6, r6, #1	@ w, w,
 2688              	.LVL175:
 2689              	@ armwave.c:549:         for(w = 0; w < g_armwave_state.waves; w++) {
 549:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2690              		.loc 1 549 9 discriminator 2 view .LVU667
 2691 0bdc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2692 0be0 BEFFFFBA 		blt	.L149		@,
 2693              	.LVL176:
 2694              	.L142:
 569:armwave.c     ****             }
 570:armwave.c     ****         }
 571:armwave.c     **** 
 572:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2695              		.loc 1 572 9 is_stmt 1 discriminator 2 view .LVU668
 2696              	@ armwave.c:572:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2697              		.loc 1 572 46 is_stmt 0 discriminator 2 view .LVU669
 2698 0be4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2699              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2700              		.loc 1 546 27 discriminator 2 view .LVU670
 2701 0be8 018088E2 		add	r8, r8, #1	@ s, s,
 2702              	.LVL177:
 2703              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2704              		.loc 1 546 5 discriminator 2 view .LVU671
 2705 0bec 080059E1 		cmp	r9, r8	@ sets, s
 2706              	@ armwave.c:572:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2707              		.loc 1 572 20 discriminator 2 view .LVU672
 2708 0bf0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2709              	.LVL178:
 2710              	@ armwave.c:546:     for(s = 0; s < sets; s++) {
 546:armwave.c     ****         printf("Calculating test set %d\n", s);
 2711              		.loc 1 546 5 discriminator 2 view .LVU673
 2712 0bf4 AEFFFF1A 		bne	.L141		@,
 2713              	.LVL179:
 2714              	.L138:
 2715              	@ armwave.c:574: }
 573:armwave.c     ****     }
 574:armwave.c     **** }
 2716              		.loc 1 574 1 view .LVU674
 2717 0bf8 08D08DE2 		add	sp, sp, #8	@,,
 2718              		.cfi_remember_state
 2719              		.cfi_def_cfa_offset 80
 2720              		@ sp needed	@
 2721 0bfc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2722              		.cfi_restore 90
 2723              		.cfi_restore 91
 2724              		.cfi_restore 88
 2725              		.cfi_restore 89
 2726              		.cfi_restore 86
 2727              		.cfi_restore 87
 2728              		.cfi_restore 84
 2729              		.cfi_restore 85
 2730              		.cfi_restore 82
 2731              		.cfi_restore 83
 2732              		.cfi_restore 80
 2733              		.cfi_restore 81
 2734              		.cfi_def_cfa_offset 32
 2735              	.LVL180:
 2736              		.loc 1 574 1 view .LVU675
 2737 0c00 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2738              	.LVL181:
 2739              	.L168:
 2740              		.cfi_restore_state
 2741              	.LBB42:
 2742              	.LBB39:
 494:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2743              		.loc 1 494 9 is_stmt 1 view .LVU676
 2744 0c04 940901E0 		mul	r1, r4, r9	@, _85, sets
 2745 0c08 0920A0E1 		mov	r2, r9	@, sets
 2746 0c0c 28009FE5 		ldr	r0, .L169+36	@,
 2747 0c10 FEFFFFEB 		bl	printf		@
 2748              	.LVL182:
 496:armwave.c     ****     }
 2749              		.loc 1 496 9 view .LVU677
 2750 0c14 9FFFFFEA 		b	.L140		@
 2751              	.L170:
 2752              		.align	2
 2753              	.L169:
 2754 0c18 0000803F 		.word	1065353216
 2755 0c1c 00007F43 		.word	1132396544
 2756 0c20 0000003F 		.word	1056964608
 2757 0c24 C3F5C840 		.word	1086911939
 2758 0c28 38FFC74A 		.word	1254620984
 2759 0c2c 0000FE42 		.word	1123942400
 2760 0c30 00000043 		.word	1124073472
 2761 0c34 00000000 		.word	g_armwave_state
 2762 0c38 C8020000 		.word	.LC22
 2763 0c3c 20020000 		.word	.LC20
 2764              	.LBE39:
 2765              	.LBE42:
 2766              		.cfi_endproc
 2767              	.LFE75:
 2769              		.align	2
 2770              		.global	armwave_cleanup
 2771              		.syntax unified
 2772              		.arm
 2773              		.fpu vfp
 2775              	armwave_cleanup:
 2776              	.LFB76:
 575:armwave.c     **** 
 576:armwave.c     **** /*
 577:armwave.c     ****  * Make a test square waveform.
 578:armwave.c     ****  *
 579:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 580:armwave.c     ****  */
 581:armwave.c     **** #if 0
 582:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 583:armwave.c     **** {
 584:armwave.c     ****     uint8_t v;
 585:armwave.c     ****     float noise, xnoise;
 586:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 587:armwave.c     ****     int w, x;
 588:armwave.c     **** 
 589:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 590:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 591:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 592:armwave.c     ****             noise *= noise;
 593:armwave.c     ****             noise *= noise;
 594:armwave.c     ****             noise *= noise;
 595:armwave.c     **** 
 596:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 597:armwave.c     ****                 noise = -noise;
 598:armwave.c     **** 
 599:armwave.c     ****             //noise += 1.0f;
 600:armwave.c     **** 
 601:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 602:armwave.c     ****                 new_level = 0.2f;
 603:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 604:armwave.c     ****                 new_level = 0.8f;
 605:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 606:armwave.c     ****                 new_level = 0.2f;
 607:armwave.c     ****             } else {
 608:armwave.c     ****                 new_level = 0.8f;
 609:armwave.c     ****             }
 610:armwave.c     **** 
 611:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 612:armwave.c     **** 
 613:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 614:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 615:armwave.c     ****         }
 616:armwave.c     ****     }
 617:armwave.c     **** }
 618:armwave.c     **** #endif
 619:armwave.c     **** 
 620:armwave.c     **** /*
 621:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 622:armwave.c     ****  */
 623:armwave.c     **** void armwave_cleanup()
 624:armwave.c     **** {
 2777              		.loc 1 624 1 view -0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 0
 2780              		@ frame_needed = 0, uses_anonymous_args = 0
 625:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2781              		.loc 1 625 5 view .LVU679
 2782              	@ armwave.c:624: {
 624:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2783              		.loc 1 624 1 is_stmt 0 view .LVU680
 2784 0c40 10402DE9 		push	{r4, lr}	@
 2785              		.cfi_def_cfa_offset 8
 2786              		.cfi_offset 4, -8
 2787              		.cfi_offset 14, -4
 2788              	@ armwave.c:625:     free(g_armwave_state.out_pixbuf);
 2789              		.loc 1 625 25 view .LVU681
 2790 0c44 34409FE5 		ldr	r4, .L173	@ tmp114,
 2791              	@ armwave.c:625:     free(g_armwave_state.out_pixbuf);
 2792              		.loc 1 625 5 view .LVU682
 2793 0c48 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2794 0c4c FEFFFFEB 		bl	free		@
 2795              	.LVL183:
 626:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2796              		.loc 1 626 5 is_stmt 1 view .LVU683
 2797 0c50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2798 0c54 FEFFFFEB 		bl	free		@
 2799              	.LVL184:
 627:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2800              		.loc 1 627 5 view .LVU684
 2801 0c58 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2802 0c5c FEFFFFEB 		bl	free		@
 2803              	.LVL185:
 628:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2804              		.loc 1 628 5 view .LVU685
 2805 0c60 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2806 0c64 FEFFFFEB 		bl	free		@
 2807              	.LVL186:
 629:armwave.c     **** 
 630:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2808              		.loc 1 630 5 view .LVU686
 2809              	@ armwave.c:630:     g_armwave_state.out_pixbuf = NULL;
 2810              		.loc 1 630 32 is_stmt 0 view .LVU687
 2811 0c68 0030A0E3 		mov	r3, #0	@ tmp123,
 2812 0c6c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 631:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2813              		.loc 1 631 5 is_stmt 1 view .LVU688
 2814              	@ armwave.c:631:     g_armwave_state.ch1_buffer = NULL;
 2815              		.loc 1 631 32 is_stmt 0 view .LVU689
 2816 0c70 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 632:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2817              		.loc 1 632 5 is_stmt 1 view .LVU690
 2818              	@ armwave.c:632:     g_armwave_state.xcoord_to_xpixel = NULL;
 2819              		.loc 1 632 38 is_stmt 0 view .LVU691
 2820 0c74 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 633:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2821              		.loc 1 633 5 is_stmt 1 view .LVU692
 2822              	@ armwave.c:633:     g_armwave_state.test_wave_buffer = NULL;
 2823              		.loc 1 633 38 is_stmt 0 view .LVU693
 2824 0c78 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2825              	@ armwave.c:634: }
 634:armwave.c     **** }
 2826              		.loc 1 634 1 view .LVU694
 2827 0c7c 1080BDE8 		pop	{r4, pc}	@
 2828              	.L174:
 2829              		.align	2
 2830              	.L173:
 2831 0c80 00000000 		.word	g_armwave_state
 2832              		.cfi_endproc
 2833              	.LFE76:
 2835              		.comm	gamma_table,256,4
 2836              		.comm	g_armwave_state,136,4
 2837              		.section	.rodata
 2838              		.align	2
 2839              		.set	.LANCHOR0,. + 0
 2842              	__PRETTY_FUNCTION__.17095:
 2843 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 2843      6176655F 
 2843      66696C6C 
 2843      5F706978 
 2843      6275665F 
 2844 001b 00       		.space	1
 2847              	__PRETTY_FUNCTION__.17125:
 2848 001c 61726D77 		.ascii	"armwave_setup_render\000"
 2848      6176655F 
 2848      73657475 
 2848      705F7265 
 2848      6E646572 
 2849 0031 000000   		.space	3
 2852              	__PRETTY_FUNCTION__.17132:
 2853 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2853      6176655F 
 2853      7365745F 
 2853      77617665 
 2853      5F706F69 
 2854 004d 000000   		.space	3
 2857              	__PRETTY_FUNCTION__.17139:
 2858 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2858      6176655F 
 2858      7365745F 
 2858      77617665 
 2858      5F706F69 
 2859              		.section	.rodata.str1.4,"aMS",%progbits,1
 2860              		.align	2
 2861              	.LC0:
 2862 0000 76302E30 		.ascii	"v0.0.1\000"
 2862      2E3100
 2863 0007 00       		.space	1
 2864              	.LC1:
 2865 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2865      61766520 
 2865      76657273 
 2865      696F6E3A 
 2865      2025730A 
 2866 001d 000000   		.space	3
 2867              	.LC2:
 2868 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2868      78253038 
 2868      7820623D 
 2868      30782530 
 2868      38782063 
 2869 0053 6768743D 		.ascii	"ght=%d\012\000"
 2869      25640A00 
 2870 005b 00       		.space	1
 2871              	.LC3:
 2872 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x\012\000"
 2872      20737472 
 2872      6964653D 
 2872      25642073 
 2872      6C793D25 
 2873              	.LC4:
 2874 0084 61726D77 		.ascii	"armwave.c\000"
 2874      6176652E 
 2874      6300
 2875 008e 0000     		.space	2
 2876              	.LC5:
 2877 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2877      62756666 
 2877      65722021 
 2877      3D204E55 
 2877      4C4C00
 2878 00a3 00       		.space	1
 2879              	.LC6:
 2880 00a4 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2880      20653D25 
 2880      6420773D 
 2880      25642077 
 2880      733D2564 
 2881              	.LC7:
 2882 00d0 73746172 		.ascii	"start_point < end_point\000"
 2882      745F706F 
 2882      696E7420 
 2882      3C20656E 
 2882      645F706F 
 2883              	.LC8:
 2884 00e8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 2884      7566665F 
 2884      73697A65 
 2884      3D25642C 
 2884      20636D70 
 2885 011a 00       		.ascii	"\000"
 2886 011b 00       		.space	1
 2887              	.LC9:
 2888 011c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2888      6D776176 
 2888      655F7374 
 2888      6174652E 
 2888      6368315F 
 2889 013f 00       		.space	1
 2890              	.LC10:
 2891 0140 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2891      6D776176 
 2891      655F7374 
 2891      6174652E 
 2891      78636F6F 
 2892 0169 000000   		.space	3
 2893              	.LC11:
 2894 016c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2894      3A203078 
 2894      25303878 
 2894      20307825 
 2894      30387820 
 2895              	.LC12:
 2896 0190 77617665 		.ascii	"wave_buffer != NULL\000"
 2896      5F627566 
 2896      66657220 
 2896      213D204E 
 2896      554C4C00 
 2897              	.LC13:
 2898 01a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2898      6176655F 
 2898      7365745F 
 2898      77617665 
 2898      5F706F69 
 2899 01d7 78636565 		.ascii	"xceeded\000"
 2899      64656400 
 2900 01df 00       		.space	1
 2901              	.LC14:
 2902 01e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2902      5F627566 
 2902      6665725F 
 2902      70747220 
 2902      213D2030 
 2903 01f5 000000   		.space	3
 2904              	.LC15:
 2905 01f8 776200   		.ascii	"wb\000"
 2906 01fb 00       		.space	1
 2907              	.LC16:
 2908 01fc 50330A00 		.ascii	"P3\012\000"
 2909              	.LC17:
 2910 0200 25642025 		.ascii	"%d %d\012\000"
 2910      640A00
 2911 0207 00       		.space	1
 2912              	.LC18:
 2913 0208 3235350A 		.ascii	"255\012\000"
 2913      00
 2914 020d 000000   		.space	3
 2915              	.LC19:
 2916 0210 25336420 		.ascii	"%3d %3d %3d\012\000"
 2916      25336420 
 2916      2533640A 
 2916      00
 2917 021d 000000   		.space	3
 2918              	.LC20:
 2919 0220 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2919      6176655F 
 2919      74657374 
 2919      5F627566 
 2919      6665725F 
 2920 0253 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2920      20627566 
 2920      66657220 
 2920      28256420 
 2920      62797465 
 2921              	.LC21:
 2922 0274 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2922      6176655F 
 2922      66696C6C 
 2922      5F706978 
 2922      6275665F 
 2923 02a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2923      20666169 
 2923      6C65642C 
 2923      20726574 
 2923      75726E69 
 2924 02c6 0000     		.space	2
 2925              	.LC22:
 2926 02c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 2926      756C6174 
 2926      696E6720 
 2926      74657374 
 2926      20736574 
 2927              		.text
 2928              	.Letext0:
 2929              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2930              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2931              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2932              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2933              		.file 7 "/usr/include/stdio.h"
 2934              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2935              		.file 9 "/usr/include/errno.h"
 2936              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2937              		.file 11 "/usr/include/unistd.h"
 2938              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2939              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2940              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2941              		.file 15 "/usr/include/math.h"
 2942              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2943              		.file 17 "/usr/include/time.h"
 2944              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2945              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2946              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2947              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2948              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2949              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2950              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2951              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2952              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2953              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2954              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2955              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2956              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2957              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2958              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2959              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2960              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2961              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2962              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2963              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2964              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2965              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2966              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2967              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2968              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2969              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2970              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2971              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2972              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2973              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2974              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2975              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2976              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2977              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2978              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2979              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2980              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2981              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2982              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2983              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2984              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2985              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2986              		.file 60 "/usr/local/include/python3.8/context.h"
 2987              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2988              		.file 62 "/usr/local/include/python3.8/code.h"
 2989              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2990              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2991              		.file 65 "/usr/local/include/python3.8/import.h"
 2992              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2993              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2994              		.file 68 "/usr/include/malloc.h"
 2995              		.file 69 "armwave.h"
 2996              		.file 70 "/usr/include/stdlib.h"
 2997              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 2998              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2999              		.file 73 "<built-in>"
 3000              		.file 74 "/usr/include/assert.h"
 3001              		.file 75 "/usr/include/string.h"
