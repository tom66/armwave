   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.34,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.34,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.34,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.34
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.34, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.49, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.43, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.43, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.49, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.44, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.43, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.50, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 85 13 is_stmt 1 view .LVU52
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.43,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.44, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 351              		.loc 1 85 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 scale_value = word & 0xff;
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  90:armwave.c     ****                 
 355              		.loc 1 90 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.43, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.44,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.49, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.43, ivtmp.43, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.42, ivtmp.49
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  90:armwave.c     ****                 
 435              		.loc 1 90 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  90:armwave.c     ****                 
 470              		.loc 1 90 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  90:armwave.c     ****                 
 506              		.loc 1 90 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.44, ivtmp.44, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.49, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.49, ivtmp.49, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.49, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.50, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.50, ivtmp.50, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.50, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:113: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 555              		.loc 1 113 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 113 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 578              		.loc 1 120 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 582              		.loc 1 121 5 view .LVU129
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 123 5 view .LVU130
 124:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 124 5 view .LVU131
 125:armwave.c     ****     int value; 
 585              		.loc 1 125 5 view .LVU132
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 127 5 view .LVU133
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 587              		.loc 1 128 5 view .LVU134
 129:armwave.c     ****     uint32_t offset;
 588              		.loc 1 129 5 view .LVU135
 130:armwave.c     **** 
 131:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 589              		.loc 1 133 5 view .LVU136
 590              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 591              		.loc 1 120 1 is_stmt 0 view .LVU137
 592 02a8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 593              		.cfi_def_cfa_offset 36
 594              		.cfi_offset 4, -36
 595              		.cfi_offset 5, -32
 596              		.cfi_offset 6, -28
 597              		.cfi_offset 7, -24
 598              		.cfi_offset 8, -20
 599              		.cfi_offset 9, -16
 600              		.cfi_offset 10, -12
 601              		.cfi_offset 11, -8
 602              		.cfi_offset 14, -4
 603              	@ armwave.c:133:     if(out_buffer == NULL)
 604              		.loc 1 133 7 view .LVU138
 605 02ac 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 606              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 607              		.loc 1 120 1 view .LVU139
 608 02b0 0CD04DE2 		sub	sp, sp, #12	@,,
 609              		.cfi_def_cfa_offset 48
 610              	@ armwave.c:133:     if(out_buffer == NULL)
 611              		.loc 1 133 7 view .LVU140
 612 02b4 1900000A 		beq	.L29		@,
 613              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 614              		.loc 1 127 15 view .LVU141
 615 02b8 50619FE5 		ldr	r6, .L50	@ tmp217,
 616              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 138:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 617              		.loc 1 143 5 view .LVU142
 618 02bc 0010A0E3 		mov	r1, #0	@,
 619              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 620              		.loc 1 136 27 view .LVU143
 621 02c0 583096E5 		ldr	r3, [r6, #88]	@ _1, g_armwave_state.target_width
 622              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 623              		.loc 1 143 59 view .LVU144
 624 02c4 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 625              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 626              		.loc 1 136 10 view .LVU145
 627 02c8 405096E5 		ldr	r5, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 628              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 629              		.loc 1 127 15 view .LVU146
 630 02cc 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 136:armwave.c     ****     
 631              		.loc 1 136 5 is_stmt 1 view .LVU147
 632              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 633              		.loc 1 143 59 is_stmt 0 view .LVU148
 634 02d0 920302E0 		mul	r2, r2, r3	@ tmp178, g_armwave_state.target_height, _1
 635              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 636              		.loc 1 136 10 view .LVU149
 637 02d4 950305E0 		mul	r5, r5, r3	@ npix, g_armwave_state.bitdepth_height, _1
 638              	.LVL24:
 639              		.loc 1 143 5 is_stmt 1 view .LVU150
 640 02d8 0221A0E1 		lsl	r2, r2, #2	@, tmp178,
 641 02dc FEFFFFEB 		bl	memset		@
 642              	.LVL25:
 144:armwave.c     **** 
 145:armwave.c     ****     //printf("iter...\n");
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 643              		.loc 1 147 5 view .LVU151
 644              		.loc 1 147 5 is_stmt 0 view .LVU152
 645 02e0 000055E3 		cmp	r5, #0	@ npix,
 646 02e4 0D0000DA 		ble	.L29		@,
 647              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 165 52 view .LVU153
 649 02e8 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _15, g_armwave_state.ch1_color.g
 650              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 651              		.loc 1 164 52 view .LVU154
 652 02ec FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _12, g_armwave_state.ch1_color.r
 653              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 654              		.loc 1 177 57 view .LVU155
 655 02f0 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _32, g_armwave_state.vscale_frac
 656              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 657              		.loc 1 165 52 view .LVU156
 658 02f4 00308DE5 		str	r3, [sp]	@ _15, %sfp
 659              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 660              		.loc 1 166 52 view .LVU157
 661 02f8 F037D6E1 		ldrsh	r3, [r6, #112]	@ _18, g_armwave_state.ch1_color.b
 662 02fc 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 663              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 664              		.loc 1 147 11 view .LVU158
 665 0300 0030A0E3 		mov	r3, #0	@ n,
 666              	.LVL26:
 667              	.L35:
 150:armwave.c     **** 
 668              		.loc 1 150 9 is_stmt 1 view .LVU159
 669              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 670              		.loc 1 150 19 is_stmt 0 view .LVU160
 671 0304 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 672              	.LVL27:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 673              		.loc 1 158 9 is_stmt 1 view .LVU161
 674              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 675              		.loc 1 158 11 is_stmt 0 view .LVU162
 676 0308 000052E3 		cmp	r2, #0	@ wave_word,
 677              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 678              		.loc 1 159 19 view .LVU163
 679 030c 0080A013 		movne	r8, #0	@ w,
 680              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 681              		.loc 1 158 11 view .LVU164
 682 0310 0400001A 		bne	.L34		@,
 683              	.L31:
 684              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 147 28 view .LVU165
 686 0314 023083E2 		add	r3, r3, #2	@ n, n,
 687              	.LVL28:
 688              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 689              		.loc 1 147 5 view .LVU166
 690 0318 030055E1 		cmp	r5, r3	@ npix, n
 691 031c F8FFFFCA 		bgt	.L35		@,
 692              	.LVL29:
 693              	.L29:
 694              	@ armwave.c:193: }
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 193:armwave.c     **** }
 695              		.loc 1 193 1 view .LVU167
 696 0320 0CD08DE2 		add	sp, sp, #12	@,,
 697              		.cfi_remember_state
 698              		.cfi_def_cfa_offset 36
 699              		@ sp needed	@
 700 0324 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 701              	.LVL30:
 702              	.L34:
 703              		.cfi_restore_state
 160:armwave.c     ****                 wave_word >>= 16;
 704              		.loc 1 160 17 is_stmt 1 view .LVU168
 705              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 706              		.loc 1 160 23 is_stmt 0 view .LVU169
 707 0328 7290FFE6 		uxth	r9, r2	@ value, wave_word
 708              	.LVL31:
 161:armwave.c     **** 
 709              		.loc 1 161 17 is_stmt 1 view .LVU170
 710              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 711              		.loc 1 163 19 is_stmt 0 view .LVU171
 712 032c 000059E3 		cmp	r9, #0	@ value,
 713              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 714              		.loc 1 161 27 view .LVU172
 715 0330 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 716              	.LVL32:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 717              		.loc 1 163 17 is_stmt 1 view .LVU173
 718              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 719              		.loc 1 163 19 is_stmt 0 view .LVU174
 720 0334 0600001A 		bne	.L49		@,
 721              	.LVL33:
 722              	.L32:
 723              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 724              		.loc 1 159 13 view .LVU175
 725 0338 010058E3 		cmp	r8, #1	@ w,
 726 033c F4FFFF0A 		beq	.L31		@,
 727              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 728              		.loc 1 160 23 view .LVU176
 729 0340 7290FFE6 		uxth	r9, r2	@ value, wave_word
 730              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 731              		.loc 1 163 19 view .LVU177
 732 0344 000059E3 		cmp	r9, #0	@ value,
 733 0348 0180A0E3 		mov	r8, #1	@ w,
 734              	.LVL34:
 160:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 160 17 is_stmt 1 view .LVU178
 161:armwave.c     **** 
 736              		.loc 1 161 17 view .LVU179
 737              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 738              		.loc 1 161 27 is_stmt 0 view .LVU180
 739 034c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 740              	.LVL35:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 163 17 is_stmt 1 view .LVU181
 742              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 743              		.loc 1 163 19 is_stmt 0 view .LVU182
 744 0350 F8FFFF0A 		beq	.L32		@,
 745              	.L49:
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 746              		.loc 1 164 21 is_stmt 1 view .LVU183
 747              	.LVL36:
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 748              		.loc 1 165 21 view .LVU184
 166:armwave.c     **** 
 749              		.loc 1 166 21 view .LVU185
 168:armwave.c     ****                     g = MIN(gg, 255);
 750              		.loc 1 168 21 view .LVU186
 169:armwave.c     ****                     b = MIN(bb, 255);
 751              		.loc 1 169 21 view .LVU187
 170:armwave.c     **** 
 752              		.loc 1 170 21 view .LVU188
 173:armwave.c     **** 
 753              		.loc 1 173 21 view .LVU189
 754              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 755              		.loc 1 166 55 is_stmt 0 view .LVU190
 756 0354 04109DE5 		ldr	r1, [sp, #4]	@ _18, %sfp
 757 0358 08C083E0 		add	ip, r3, r8	@ _130, n, w
 758 035c 990100E0 		mul	r0, r9, r1	@ tmp191, value, _18
 759              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 760              		.loc 1 177 32 view .LVU191
 761 0360 7C10EFE6 		uxtb	r1, ip	@ _30, _130
 762              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 763              		.loc 1 178 41 view .LVU192
 764 0364 01E081E2 		add	lr, r1, #1	@ tmp206, _30,
 765              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 766              		.loc 1 177 40 view .LVU193
 767 0368 901A07EE 		vmov	s15, r1	@ int	@ _30, _30
 768              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 769              		.loc 1 178 41 view .LVU194
 770 036c 10EA07EE 		vmov	s14, lr	@ int	@ tmp206, tmp206
 771              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 772              		.loc 1 165 55 view .LVU195
 773 0370 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 774              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 775              		.loc 1 166 24 view .LVU196
 776 0374 4004A0E1 		asr	r0, r0, #8	@ bb, tmp191,
 777              	.LVL37:
 778              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 779              		.loc 1 177 40 view .LVU197
 780 0378 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp204, _30
 781              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 782              		.loc 1 178 46 view .LVU198
 783 037c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp207, tmp206
 784              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 785              		.loc 1 165 55 view .LVU199
 786 0380 99010AE0 		mul	r10, r9, r1	@ tmp195, value, _15
 787              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 788              		.loc 1 164 55 view .LVU200
 789 0384 990B09E0 		mul	r9, r9, fp	@ tmp201, value, _12
 790              	.LVL38:
 791              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 792              		.loc 1 170 25 view .LVU201
 793 0388 FF0050E3 		cmp	r0, #255	@ bb,
 794              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 795              		.loc 1 165 24 view .LVU202
 796 038c 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp195,
 797              	.LVL39:
 798              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 177 40 view .LVU203
 800 0390 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp205, tmp204, _32
 801              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 802              		.loc 1 178 46 view .LVU204
 803 0394 267A27EE 		vmul.f32	s14, s14, s13	@ tmp208, tmp207, _32
 804              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 805              		.loc 1 170 25 view .LVU205
 806 0398 FF00A0A3 		movge	r0, #255	@ bb,
 807              	.LVL40:
 808              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 809              		.loc 1 169 25 view .LVU206
 810 039c FF005AE3 		cmp	r10, #255	@ gg,
 811 03a0 FFA0A0A3 		movge	r10, #255	@ gg,
 812              	.LVL41:
 813              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 814              		.loc 1 164 24 view .LVU207
 815 03a4 4994A0E1 		asr	r9, r9, #8	@ rr, tmp201,
 816              	.LVL42:
 817              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 818              		.loc 1 168 25 view .LVU208
 819 03a8 FF0059E3 		cmp	r9, #255	@ rr,
 820              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 821              		.loc 1 173 56 view .LVU209
 822 03ac 0AA4A0E1 		lsl	r10, r10, #8	@ tmp196, gg,
 823              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 177 24 view .LVU210
 825 03b0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp205
 826              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 827              		.loc 1 168 25 view .LVU211
 828 03b4 FF90A0A3 		movge	r9, #255	@ rr,
 829              	.LVL43:
 830              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 831              		.loc 1 179 32 view .LVU212
 832 03b8 4CC4A0E1 		asr	ip, ip, #8	@ tmp209, _130,
 833              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 834              		.loc 1 173 44 view .LVU213
 835 03bc 0008A0E1 		lsl	r0, r0, #16	@ tmp192, bb,
 836              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 837              		.loc 1 173 56 view .LVU214
 838 03c0 7AA0FFE6 		uxth	r10, r10	@ tmp197, tmp196
 839              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 840              		.loc 1 173 44 view .LVU215
 841 03c4 FF0800E2 		and	r0, r0, #16711680	@ tmp193, tmp192,
 842              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 843              		.loc 1 173 51 view .LVU216
 844 03c8 0A0080E1 		orr	r0, r0, r10	@ tmp199, tmp193, tmp197
 845              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 846              		.loc 1 173 62 view .LVU217
 847 03cc 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 848              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 849              		.loc 1 177 24 view .LVU218
 850 03d0 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 851              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 852              		.loc 1 178 24 view .LVU219
 853 03d4 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp208
 854              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 855              		.loc 1 179 38 view .LVU220
 856 03d8 AC9F8CE0 		add	r9, ip, ip, lsr #31	@ tmp211, tmp209, tmp209,
 857              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 858              		.loc 1 173 62 view .LVU221
 859 03dc 0A0080E1 		orr	r0, r0, r10	@ tmp203, tmp199, rr
 860              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 861              		.loc 1 173 26 view .LVU222
 862 03e0 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp203,
 863              	.LVL44:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 864              		.loc 1 176 21 is_stmt 1 view .LVU223
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 865              		.loc 1 177 21 view .LVU224
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 866              		.loc 1 178 21 view .LVU225
 867              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 868              		.loc 1 179 38 is_stmt 0 view .LVU226
 869 03e4 C990A0E1 		asr	r9, r9, #1	@ xx, tmp211,
 870              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 871              		.loc 1 178 24 view .LVU227
 872 03e8 90EA17EE 		vmov	lr, s15	@ int	@ ye, ye
 873              	.LVL45:
 179:armwave.c     **** 
 874              		.loc 1 179 21 is_stmt 1 view .LVU228
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 875              		.loc 1 181 21 view .LVU229
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 876              		.loc 1 181 21 is_stmt 0 view .LVU230
 877 03ec 0E0051E1 		cmp	r1, lr	@ yy, ye
 878 03f0 D0FFFF2A 		bcs	.L32		@,
 879              	.LVL46:
 880              	.L33:
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 881              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU231
 184:armwave.c     ****                         painted++;
 882              		.loc 1 184 25 discriminator 3 view .LVU232
 883              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 884              		.loc 1 182 43 is_stmt 0 discriminator 3 view .LVU233
 885 03f4 580096E5 		ldr	r0, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 886              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 887              		.loc 1 184 43 discriminator 3 view .LVU234
 888 03f8 909120E0 		mla	r0, r0, r1, r9	@ tmp216, g_armwave_state.target_width, yy, xx
 889              	.LVL47:
 890              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 891              		.loc 1 181 42 discriminator 3 view .LVU235
 892 03fc 011081E2 		add	r1, r1, #1	@ yy, yy,
 893              	.LVL48:
 894              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 895              		.loc 1 181 21 discriminator 3 view .LVU236
 896 0400 01005EE1 		cmp	lr, r1	@ ye, yy
 897              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 898              		.loc 1 184 53 discriminator 3 view .LVU237
 899 0404 00C187E7 		str	ip, [r7, r0, lsl #2]	@ word, *_43
 185:armwave.c     ****                     }
 900              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU238
 901              	.LVL49:
 902              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 903              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU239
 904 0408 F9FFFF1A 		bne	.L33		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 905              		.loc 1 181 21 discriminator 3 view .LVU240
 906 040c C9FFFFEA 		b	.L32		@
 907              	.L51:
 908              		.align	2
 909              	.L50:
 910 0410 00000000 		.word	g_armwave_state
 911              		.cfi_endproc
 912              	.LFE60:
 914              		.global	__aeabi_idiv
 915              		.align	2
 916              		.global	armwave_generate
 917              		.syntax unified
 918              		.arm
 919              		.fpu vfp
 921              	armwave_generate:
 922              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 923              		.loc 1 199 1 is_stmt 1 view -0
 924              		.cfi_startproc
 925              		@ args = 0, pretend = 0, frame = 72
 926              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 927              		.loc 1 200 5 view .LVU242
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 928              		.loc 1 201 5 view .LVU243
 929              	.LVL50:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 930              		.loc 1 203 5 view .LVU244
 931              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 932              		.loc 1 199 1 is_stmt 0 view .LVU245
 933 0414 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 934              		.cfi_def_cfa_offset 36
 935              		.cfi_offset 4, -36
 936              		.cfi_offset 5, -32
 937              		.cfi_offset 6, -28
 938              		.cfi_offset 7, -24
 939              		.cfi_offset 8, -20
 940              		.cfi_offset 9, -16
 941              		.cfi_offset 10, -12
 942              		.cfi_offset 11, -8
 943              		.cfi_offset 14, -4
 944              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 945              		.loc 1 203 5 view .LVU246
 946 0418 0010A0E3 		mov	r1, #0	@,
 947              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 948              		.loc 1 203 58 view .LVU247
 949 041c 90429FE5 		ldr	r4, .L72	@ tmp212,
 950              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 951              		.loc 1 199 1 view .LVU248
 952 0420 4CD04DE2 		sub	sp, sp, #76	@,,
 953              		.cfi_def_cfa_offset 112
 954              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 955              		.loc 1 203 5 view .LVU249
 956 0424 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 957 0428 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 958 042c FEFFFFEB 		bl	memset		@
 959              	.LVL51:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 960              		.loc 1 205 5 is_stmt 1 view .LVU250
 961              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 962              		.loc 1 205 68 is_stmt 0 view .LVU251
 963 0430 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 964              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 965              		.loc 1 205 51 view .LVU252
 966 0434 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 967 0438 0510A0E1 		mov	r1, r5	@, _133
 968              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 969              		.loc 1 205 68 view .LVU253
 970 043c 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 971              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 972              		.loc 1 205 51 view .LVU254
 973 0440 FEFFFFEB 		bl	__aeabi_idiv		@
 974              	.LVL52:
 975              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 976              		.loc 1 205 5 view .LVU255
 977 0444 003050E2 		subs	r3, r0, #0	@ _179,
 978 0448 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 979 044c 9600000A 		beq	.L52		@,
 980              	.LBB10:
 981              	.LBB11:
 982              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 983              		.loc 1 79 35 view .LVU256
 984 0450 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 985              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 986              		.loc 1 80 81 view .LVU257
 987 0454 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 988 0458 000053E3 		cmp	r3, #0	@ _38,
 989              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 990              		.loc 1 79 35 view .LVU258
 991 045c 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 992              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 993              		.loc 1 71 40 view .LVU259
 994 0460 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 995              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 996              		.loc 1 71 82 view .LVU260
 997 0464 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 998              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 999              		.loc 1 71 147 view .LVU261
 1000 0468 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 1001              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1002              		.loc 1 80 36 view .LVU262
 1003 046c 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 1004              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1005              		.loc 1 80 81 view .LVU263
 1006 0470 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 1007 0474 8C0000DA 		ble	.L52		@,
 1008 0478 000055E3 		cmp	r5, #0	@ _133,
 1009 047c 8A00000A 		beq	.L52		@,
 1010 0480 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 1011 0484 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 1012 0488 10208DE5 		str	r2, [sp, #16]	@ ivtmp.86, %sfp
 1013 048c 002062E2 		rsb	r2, r2, #0	@ ivtmp.85, ivtmp.86
 1014 0490 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 1015 0494 14208DE5 		str	r2, [sp, #20]	@ ivtmp.85, %sfp
 1016 0498 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 1017 049c 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 1018 04a0 09B0A0E1 		mov	fp, r9	@ _21, _21
 1019 04a4 00C0A0E3 		mov	ip, #0	@ ivtmp.84,
 1020 04a8 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 1021 04ac 032080E0 		add	r2, r0, r3	@ ivtmp.74, tmp231, _17
 1022 04b0 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 1023 04b4 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 1024 04b8 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.84, %sfp
 1025 04bc 34208DE5 		str	r2, [sp, #52]	@ ivtmp.74, %sfp
 1026              	.LBE11:
 1027              	.LBE10:
 1028              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1029              		.loc 1 205 12 view .LVU264
 1030 04c0 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.84, %sfp
 1031 04c4 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 1032              	.LVL53:
 1033              	.L58:
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, \
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1034              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU265
 1035              	.LBB13:
 1036              	.LBI10:
  62:armwave.c     **** {
 1037              		.loc 1 62 6 discriminator 3 view .LVU266
 1038              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1039              		.loc 1 64 5 discriminator 3 view .LVU267
  65:armwave.c     ****     uint8_t *wave_base;
 1040              		.loc 1 65 5 discriminator 3 view .LVU268
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1041              		.loc 1 66 5 discriminator 3 view .LVU269
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1042              		.loc 1 67 5 discriminator 3 view .LVU270
  68:armwave.c     **** 
 1043              		.loc 1 68 5 discriminator 3 view .LVU271
  71:armwave.c     **** 
 1044              		.loc 1 71 5 discriminator 3 view .LVU272
 1045              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1046              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU273
 1047 04c8 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.84, %sfp
 1048              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1049              		.loc 1 71 130 discriminator 3 view .LVU274
 1050 04cc 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.86, %sfp
 1051              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1052              		.loc 1 71 105 discriminator 3 view .LVU275
 1053 04d0 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.84,
 1054              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1055              		.loc 1 71 130 discriminator 3 view .LVU276
 1056 04d4 00208DE5 		str	r2, [sp]	@ ivtmp.86, %sfp
 1057 04d8 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 1058              	.LVL54:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1059              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU277
 1060              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1061              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU278
 1062 04dc 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.85, %sfp
 1063 04e0 04308DE5 		str	r3, [sp, #4]	@ ivtmp.85, %sfp
 1064              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1065              		.loc 1 79 11 discriminator 3 view .LVU279
 1066 04e4 0030A0E3 		mov	r3, #0	@ w,
 1067 04e8 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1068              	.LVL55:
 1069              	.L55:
  80:armwave.c     **** 
 1070              		.loc 1 80 9 is_stmt 1 view .LVU280
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1071              		.loc 1 84 9 view .LVU281
 1072              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1073              		.loc 1 79 11 is_stmt 0 view .LVU282
 1074 04ec 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.75, %sfp
 1075 04f0 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.74, %sfp
 1076 04f4 00309DE5 		ldr	r3, [sp]	@ ivtmp.81, %sfp
 1077 04f8 08308DE5 		str	r3, [sp, #8]	@ ivtmp.81, %sfp
 1078              	.LVL56:
 1079              	.L57:
  85:armwave.c     **** 
 1080              		.loc 1 85 13 is_stmt 1 view .LVU283
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1081              		.loc 1 101 17 view .LVU284
 106:armwave.c     ****                 word >>= 8;
 1082              		.loc 1 106 17 view .LVU285
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1083              		.loc 1 101 17 view .LVU286
 106:armwave.c     ****                 word >>= 8;
 1084              		.loc 1 106 17 view .LVU287
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1085              		.loc 1 101 17 view .LVU288
 106:armwave.c     ****                 word >>= 8;
 1086              		.loc 1 106 17 view .LVU289
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1087              		.loc 1 101 17 view .LVU290
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 17 view .LVU291
 1089              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1090              		.loc 1 102 34 is_stmt 0 view .LVU292
 1091 04fc 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 1092              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1093              		.loc 1 85 18 view .LVU293
 1094 0500 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.73, %sfp
 1095              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1096              		.loc 1 102 34 view .LVU294
 1097 0504 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.75
 1098 0508 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.74
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 74 view .LVU295
 1101 050c 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 1102              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1103              		.loc 1 85 18 view .LVU296
 1104 0510 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1105              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1106              		.loc 1 106 47 view .LVU297
 1107 0514 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1108              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1109              		.loc 1 94 20 view .LVU298
 1110 0518 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1111              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1112              		.loc 1 107 22 view .LVU299
 1113 051c 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1114              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1115              		.loc 1 94 20 view .LVU300
 1116 0520 0160A003 		moveq	r6, #1	@ tmp239,
 1117 0524 0060A013 		movne	r6, #0	@ tmp239,
 1118              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1119              		.loc 1 106 47 view .LVU301
 1120 0528 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1121              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1122              		.loc 1 94 19 view .LVU302
 1123 052c FF0059E3 		cmp	r9, #255	@ scale_value,
 1124 0530 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1125              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1126              		.loc 1 85 18 view .LVU303
 1127 0534 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.73, %sfp
 1128              	.LVL57:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1129              		.loc 1 89 13 is_stmt 1 view .LVU304
  90:armwave.c     ****                 
 1130              		.loc 1 90 17 view .LVU305
  94:armwave.c     ****                     continue;
 1131              		.loc 1 94 17 view .LVU306
 1132              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1133              		.loc 1 84 9 is_stmt 0 view .LVU307
 1134 0538 0E90A0E1 		mov	r9, lr	@ ivtmp.73, ivtmp.73
 1135 053c 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.80, %sfp
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1136              		.loc 1 84 9 view .LVU308
 1137 0540 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1138              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1139              		.loc 1 102 74 view .LVU309
 1140 0544 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.75,
 1141 0548 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1142              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1143              		.loc 1 84 9 view .LVU310
 1144 054c 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.73, ivtmp.80
 1145              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1146              		.loc 1 94 19 view .LVU311
 1147 0550 000056E3 		cmp	r6, #0	@ tmp244,
 1148              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1149              		.loc 1 102 74 view .LVU312
 1150 0554 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.74,
 1151              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1152              		.loc 1 106 47 view .LVU313
 1153 0558 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1154 055c 04A08AE0 		add	r10, r10, r4	@ ivtmp.74, ivtmp.74, _208
 1155              	.LVL58:
 106:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 106 47 view .LVU314
 1157 0560 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1158              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1159              		.loc 1 107 22 view .LVU315
 1160 0564 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1161              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 106 47 view .LVU316
 1163 0568 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1164              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1165              		.loc 1 84 9 view .LVU317
 1166 056c 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1167              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1168              		.loc 1 94 19 view .LVU318
 1169 0570 2A00001A 		bne	.L63		@,
 1170              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1171              		.loc 1 94 20 view .LVU319
 1172 0574 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1173              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1174              		.loc 1 106 47 view .LVU320
 1175 0578 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1176              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1177              		.loc 1 94 20 view .LVU321
 1178 057c 0190A003 		moveq	r9, #1	@ tmp256,
 1179 0580 0090A013 		movne	r9, #0	@ tmp256,
 1180              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1181              		.loc 1 106 47 view .LVU322
 1182 0584 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1183              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1184              		.loc 1 94 19 view .LVU323
 1185 0588 FF0054E3 		cmp	r4, #255	@ scale_value,
 1186 058c 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1187 0590 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1188              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1189              		.loc 1 106 47 view .LVU324
 1190 0594 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1191              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1192              		.loc 1 94 19 view .LVU325
 1193 0598 000054E3 		cmp	r4, #0	@ tmp261,
 1194              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1195              		.loc 1 106 47 view .LVU326
 1196 059c 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1197 05a0 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1198              		.loc 1 107 17 is_stmt 1 view .LVU327
 1199              	.LVL59:
  90:armwave.c     ****                 
 1200              		.loc 1 90 17 view .LVU328
  94:armwave.c     ****                     continue;
 1201              		.loc 1 94 17 view .LVU329
 1202              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1203              		.loc 1 94 19 is_stmt 0 view .LVU330
 1204 05a4 1D00001A 		bne	.L63		@,
 1205              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1206              		.loc 1 94 20 view .LVU331
 1207 05a8 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1208 05ac FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1209              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1210              		.loc 1 106 47 view .LVU332
 1211 05b0 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1212              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1213              		.loc 1 94 20 view .LVU333
 1214 05b4 0140A003 		moveq	r4, #1	@ tmp273,
 1215 05b8 0040A013 		movne	r4, #0	@ tmp273,
 1216              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1217              		.loc 1 106 47 view .LVU334
 1218 05bc 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1219              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1220              		.loc 1 94 19 view .LVU335
 1221 05c0 FF005EE3 		cmp	lr, #255	@ scale_value,
 1222 05c4 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1223 05c8 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1224              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1225              		.loc 1 106 47 view .LVU336
 1226 05cc 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1227              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1228              		.loc 1 94 19 view .LVU337
 1229 05d0 00005EE3 		cmp	lr, #0	@ tmp278,
 1230              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1231              		.loc 1 106 47 view .LVU338
 1232 05d4 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1233 05d8 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1234              		.loc 1 107 17 is_stmt 1 view .LVU339
 1235              	.LVL60:
  90:armwave.c     ****                 
 1236              		.loc 1 90 17 view .LVU340
  94:armwave.c     ****                     continue;
 1237              		.loc 1 94 17 view .LVU341
 1238              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1239              		.loc 1 94 19 is_stmt 0 view .LVU342
 1240 05dc 0F00001A 		bne	.L63		@,
 1241              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1242              		.loc 1 94 20 view .LVU343
 1243 05e0 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1244              	.LVL61:
 1245              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1246              		.loc 1 106 47 view .LVU344
 1247 05e4 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1248 05e8 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1249              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1250              		.loc 1 94 20 view .LVU345
 1251 05ec 0110A003 		moveq	r1, #1	@ tmp288,
 1252 05f0 0010A013 		movne	r1, #0	@ tmp288,
 1253              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1254              		.loc 1 106 47 view .LVU346
 1255 05f4 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1256              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1257              		.loc 1 94 19 view .LVU347
 1258 05f8 FF0050E3 		cmp	r0, #255	@ word,
 1259 05fc 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1260 0600 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1261 0604 000050E3 		cmp	r0, #0	@ tmp293,
 1262              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1263              		.loc 1 106 47 view .LVU348
 1264 0608 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1265 060c 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1266 0610 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1267              		.loc 1 107 17 is_stmt 1 view .LVU349
 1268              	.LVL62:
  90:armwave.c     ****                 
 1269              		.loc 1 90 17 view .LVU350
  94:armwave.c     ****                     continue;
 1270              		.loc 1 94 17 view .LVU351
 1271              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1272              		.loc 1 106 47 is_stmt 0 view .LVU352
 1273 0614 BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1274 0618 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1275 061c BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1276              		.loc 1 107 17 is_stmt 1 view .LVU353
 1277              	.LVL63:
 1278              	.L63:
 1279              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1280              		.loc 1 84 9 is_stmt 0 view .LVU354
 1281 0620 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1282 0624 020053E1 		cmp	r3, r2	@ _133, tmp302
 1283 0628 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1284 062c 035085E0 		add	r5, r5, r3	@ ivtmp.75, ivtmp.75, _208
 1285 0630 B1FFFF8A 		bhi	.L57		@,
 1286              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1287              		.loc 1 79 44 view .LVU355
 1288 0634 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1289              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1290              		.loc 1 79 5 view .LVU356
 1291 0638 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1292              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1293              		.loc 1 79 44 view .LVU357
 1294 063c 013083E2 		add	r3, r3, #1	@ w, w,
 1295              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1296              		.loc 1 79 5 view .LVU358
 1297 0640 030052E1 		cmp	r2, r3	@ _38, w
 1298              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1299              		.loc 1 79 44 view .LVU359
 1300 0644 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1301              	.LVL64:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1302              		.loc 1 79 44 view .LVU360
 1303 0648 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.80, %sfp
 1304 064c 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1305              	.LVL65:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1306              		.loc 1 79 44 view .LVU361
 1307 0650 032042E0 		sub	r2, r2, r3	@ ivtmp.80, ivtmp.80, _24
 1308 0654 04208DE5 		str	r2, [sp, #4]	@ ivtmp.80, %sfp
 1309 0658 00209DE5 		ldr	r2, [sp]	@ ivtmp.81, %sfp
 1310 065c 033082E0 		add	r3, r2, r3	@ ivtmp.81, ivtmp.81, _24
 1311 0660 00308DE5 		str	r3, [sp]	@ ivtmp.81, %sfp
 1312              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1313              		.loc 1 79 5 view .LVU362
 1314 0664 A0FFFF1A 		bne	.L55		@,
 1315              	.LVL66:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1316              		.loc 1 79 5 view .LVU363
 1317              	.LBE12:
 1318              	.LBE13:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1319              		.loc 1 212 9 is_stmt 1 view .LVU364
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1320              		.loc 1 213 9 view .LVU365
 1321              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1322              		.loc 1 205 86 is_stmt 0 view .LVU366
 1323 0668 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1324              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1325              		.loc 1 205 5 view .LVU367
 1326 066c 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1327              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1328              		.loc 1 205 86 view .LVU368
 1329 0670 013083E2 		add	r3, r3, #1	@ yy, yy,
 1330              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1331              		.loc 1 205 5 view .LVU369
 1332 0674 020053E1 		cmp	r3, r2	@ yy, _179
 1333              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1334              		.loc 1 205 86 view .LVU370
 1335 0678 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1336              	.LVL67:
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1337              		.loc 1 205 86 view .LVU371
 1338 067c 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1339 0680 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.84, %sfp
 1340              	.LVL68:
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1341              		.loc 1 205 86 view .LVU372
 1342 0684 023083E0 		add	r3, r3, r2	@ ivtmp.84, ivtmp.84, _185
 1343 0688 18308DE5 		str	r3, [sp, #24]	@ ivtmp.84, %sfp
 1344 068c 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.85, %sfp
 1345 0690 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1346 0694 032042E0 		sub	r2, r2, r3	@ ivtmp.85, ivtmp.85, _133
 1347 0698 14208DE5 		str	r2, [sp, #20]	@ ivtmp.85, %sfp
 1348 069c 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.86, %sfp
 1349 06a0 033082E0 		add	r3, r2, r3	@ ivtmp.86, ivtmp.86, _133
 1350 06a4 10308DE5 		str	r3, [sp, #16]	@ ivtmp.86, %sfp
 1351              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1352              		.loc 1 205 5 view .LVU373
 1353 06a8 86FFFF1A 		bne	.L58		@,
 1354              	.LVL69:
 1355              	.L52:
 1356              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1357              		.loc 1 222 1 view .LVU374
 1358 06ac 4CD08DE2 		add	sp, sp, #76	@,,
 1359              		.cfi_def_cfa_offset 36
 1360              		@ sp needed	@
 1361 06b0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1362              	.L73:
 1363              		.align	2
 1364              	.L72:
 1365 06b4 00000000 		.word	g_armwave_state
 1366              		.cfi_endproc
 1367              	.LFE61:
 1369              		.align	2
 1370              		.global	armwave_setup_render
 1371              		.syntax unified
 1372              		.arm
 1373              		.fpu vfp
 1375              	armwave_setup_render:
 1376              	.LVL70:
 1377              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1378              		.loc 1 228 1 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 12, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1382              		.loc 1 229 5 view .LVU376
 230:armwave.c     ****     float points_per_pixel;
 1383              		.loc 1 230 5 view .LVU377
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1384              		.loc 1 232 5 view .LVU378
 1385              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1386              		.loc 1 228 1 is_stmt 0 view .LVU379
 1387 06b8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1388              		.cfi_def_cfa_offset 28
 1389              		.cfi_offset 4, -28
 1390              		.cfi_offset 5, -24
 1391              		.cfi_offset 6, -20
 1392              		.cfi_offset 7, -16
 1393              		.cfi_offset 8, -12
 1394              		.cfi_offset 9, -8
 1395              		.cfi_offset 14, -4
 1396 06bc 14D04DE2 		sub	sp, sp, #20	@,,
 1397              		.cfi_def_cfa_offset 48
 1398              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1399              		.loc 1 228 1 view .LVU380
 1400 06c0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1401 06c4 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1402 06c8 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1403 06cc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1404              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1405              		.loc 1 232 5 view .LVU381
 1406 06d0 00308DE5 		str	r3, [sp]	@ wave_stride,
 1407              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1408              		.loc 1 228 1 view .LVU382
 1409 06d4 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1410 06d8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1411              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1412              		.loc 1 232 5 view .LVU383
 1413 06dc F460CDE1 		strd	r6, [sp, #4]	@,,
 1414 06e0 0230A0E1 		mov	r3, r2	@, waves_max
 1415              	.LVL71:
 1416              		.loc 1 232 5 view .LVU384
 1417 06e4 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1418 06e8 0120A0E1 		mov	r2, r1	@, end_point
 1419              	.LVL72:
 1420              		.loc 1 232 5 view .LVU385
 1421 06ec 0010A0E1 		mov	r1, r0	@, start_point
 1422              	.LVL73:
 1423              		.loc 1 232 5 view .LVU386
 1424 06f0 8C019FE5 		ldr	r0, .L84+12	@,
 1425              	.LVL74:
 1426              		.loc 1 232 5 view .LVU387
 1427 06f4 FEFFFFEB 		bl	printf		@
 1428              	.LVL75:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1429              		.loc 1 235 5 is_stmt 1 view .LVU388
 1430 06f8 050054E1 		cmp	r4, r5	@ start_point, end_point
 1431 06fc 5100002A 		bcs	.L82		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1432              		.loc 1 256 5 view .LVU389
 1433              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1434              		.loc 1 267 45 is_stmt 0 view .LVU390
 1435 0700 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1436              	.LVL76:
 1437              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1438              		.loc 1 271 48 view .LVU391
 1439 0704 5B5A9FED 		vldr.32	s10, .L84	@ tmp187,
 1440 0708 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1441              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1442              		.loc 1 257 49 view .LVU392
 1443 070c 5A7A9FED 		vldr.32	s14, .L84+4	@ tmp165,
 1444              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1445              		.loc 1 271 81 view .LVU393
 1446 0710 5A6A9FED 		vldr.32	s12, .L84+8	@ tmp191,
 1447              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1448              		.loc 1 264 90 view .LVU394
 1449 0714 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1450              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1451              		.loc 1 271 48 view .LVU395
 1452 0718 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1453              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1454              		.loc 1 257 49 view .LVU396
 1455 071c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1456              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1457              		.loc 1 256 29 view .LVU397
 1458 0720 60419FE5 		ldr	r4, .L84+16	@ tmp222,
 1459              	.LVL77:
 1460              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1461              		.loc 1 262 42 view .LVU398
 1462 0724 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1463              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1464              		.loc 1 257 49 view .LVU399
 1465 0728 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1466              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1467              		.loc 1 264 95 view .LVU400
 1468 072c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1469              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1470              		.loc 1 273 5 view .LVU401
 1471 0730 0128A0E3 		mov	r2, #65536	@ tmp194,
 1472              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1473              		.loc 1 271 48 view .LVU402
 1474 0734 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1475              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1476              		.loc 1 273 5 view .LVU403
 1477 0738 04508DE5 		str	r5, [sp, #4]	@ _13,
 1478 073c 00608DE5 		str	r6, [sp]	@ target_width,
 1479              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1480              		.loc 1 264 95 view .LVU404
 1481 0740 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1482              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1483              		.loc 1 256 29 view .LVU405
 1484 0744 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1485              		.loc 1 257 5 is_stmt 1 view .LVU406
 1486              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1487              		.loc 1 259 33 is_stmt 0 view .LVU407
 1488 0748 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1489              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1490              		.loc 1 260 31 view .LVU408
 1491 074c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1492              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1493              		.loc 1 261 27 view .LVU409
 1494 0750 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1495              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1496              		.loc 1 266 35 view .LVU410
 1497 0754 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1498              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1499              		.loc 1 273 5 view .LVU411
 1500 0758 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1501              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1502              		.loc 1 263 37 view .LVU412
 1503 075c 022CA0E3 		mov	r2, #512	@ tmp175,
 1504              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1505              		.loc 1 262 26 view .LVU413
 1506 0760 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1507              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1508              		.loc 1 263 37 view .LVU414
 1509 0764 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1510              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1511              		.loc 1 273 5 view .LVU415
 1512 0768 0310A0E1 		mov	r1, r3	@, tmp180
 1513              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1514              		.loc 1 264 34 view .LVU416
 1515 076c 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1516              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1517              		.loc 1 257 49 view .LVU417
 1518 0770 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1519              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1520              		.loc 1 271 40 view .LVU418
 1521 0774 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1522              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1523              		.loc 1 267 33 view .LVU419
 1524 0778 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1525              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1526              		.loc 1 273 5 view .LVU420
 1527 077c 08019FE5 		ldr	r0, .L84+20	@,
 1528              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1529              		.loc 1 271 40 view .LVU421
 1530 0780 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1531 0784 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1532              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1533              		.loc 1 258 30 view .LVU422
 1534 0788 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1535              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1536              		.loc 1 257 33 view .LVU423
 1537 078c 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1538              		.loc 1 258 5 is_stmt 1 view .LVU424
 1539              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1540              		.loc 1 271 81 is_stmt 0 view .LVU425
 1541 0790 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1542              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1543              		.loc 1 258 30 view .LVU426
 1544 0794 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1545              		.loc 1 259 5 is_stmt 1 view .LVU427
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1546              		.loc 1 260 5 view .LVU428
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1547              		.loc 1 261 5 view .LVU429
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1548              		.loc 1 262 5 view .LVU430
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1549              		.loc 1 263 5 view .LVU431
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1550              		.loc 1 264 5 view .LVU432
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1551              		.loc 1 265 5 view .LVU433
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1552              		.loc 1 266 5 view .LVU434
 267:armwave.c     **** 
 1553              		.loc 1 267 5 view .LVU435
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1554              		.loc 1 270 5 view .LVU436
 1555              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1556              		.loc 1 270 42 is_stmt 0 view .LVU437
 1557 0798 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1558 079c 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1559              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1560              		.loc 1 273 5 view .LVU438
 1561 07a0 903A17EE 		vmov	r3, s15	@ int	@, _20
 1562              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1563              		.loc 1 270 42 view .LVU439
 1564 07a4 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1565              		.loc 1 273 5 is_stmt 1 view .LVU440
 1566 07a8 0C20A0E1 		mov	r2, ip	@, tmp3
 1567 07ac FEFFFFEB 		bl	printf		@
 1568              	.LVL78:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1569              		.loc 1 281 5 view .LVU441
 1570              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1571              		.loc 1 283 23 is_stmt 0 view .LVU442
 1572 07b0 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1573              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1574              		.loc 1 281 34 view .LVU443
 1575 07b4 4030A0E3 		mov	r3, #64	@ tmp196,
 1576              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1577              		.loc 1 283 7 view .LVU444
 1578 07b8 000050E3 		cmp	r0, #0	@ _21,
 1579              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1580              		.loc 1 281 34 view .LVU445
 1581 07bc 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1582              		.loc 1 283 5 is_stmt 1 view .LVU446
 1583              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1584              		.loc 1 283 7 is_stmt 0 view .LVU447
 1585 07c0 0000000A 		beq	.L76		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1586              		.loc 1 284 9 is_stmt 1 view .LVU448
 1587 07c4 FEFFFFEB 		bl	free		@
 1588              	.LVL79:
 1589              	.L76:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1590              		.loc 1 286 5 view .LVU449
 1591              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1592              		.loc 1 286 56 is_stmt 0 view .LVU450
 1593 07c8 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1594              	.LVL80:
 1595              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1596              		.loc 1 286 34 view .LVU451
 1597 07cc 0110A0E3 		mov	r1, #1	@,
 1598 07d0 0800A0E1 		mov	r0, r8	@, _22
 1599 07d4 FEFFFFEB 		bl	calloc		@
 1600              	.LVL81:
 1601              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1602              		.loc 1 288 7 view .LVU452
 1603 07d8 000050E3 		cmp	r0, #0	@ tmp199,
 1604              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1605              		.loc 1 286 34 view .LVU453
 1606 07dc 0070A0E1 		mov	r7, r0	@ tmp199,
 1607              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1608              		.loc 1 286 32 view .LVU454
 1609 07e0 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1610              		.loc 1 288 5 is_stmt 1 view .LVU455
 1611              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1612              		.loc 1 288 7 is_stmt 0 view .LVU456
 1613 07e4 1C00000A 		beq	.L83		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1614              		.loc 1 294 5 is_stmt 1 view .LVU457
 1615              	.LVL82:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1616              		.loc 1 295 5 view .LVU458
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1617              		.loc 1 296 5 view .LVU459
 1618              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1619              		.loc 1 295 31 is_stmt 0 view .LVU460
 1620 07e8 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1621              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1622              		.loc 1 295 34 view .LVU461
 1623 07ec 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1624              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1625              		.loc 1 296 60 view .LVU462
 1626 07f0 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1627              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1628              		.loc 1 310 34 view .LVU463
 1629 07f4 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1630              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1631              		.loc 1 295 31 view .LVU464
 1632 07f8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1633              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1634              		.loc 1 295 34 view .LVU465
 1635 07fc 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1636              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1637              		.loc 1 296 60 view .LVU466
 1638 0800 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1639              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1640              		.loc 1 310 34 view .LVU467
 1641 0804 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1642              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1643              		.loc 1 295 22 view .LVU468
 1644 0808 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1645              	.LVL83:
 1646              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1647              		.loc 1 296 60 view .LVU469
 1648 080c 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1649              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1650              		.loc 1 296 41 view .LVU470
 1651 0810 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1652 0814 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1653              		.loc 1 310 5 is_stmt 1 view .LVU471
 1654              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1655              		.loc 1 310 34 is_stmt 0 view .LVU472
 1656 0818 FEFFFFEB 		bl	malloc		@
 1657              	.LVL84:
 1658              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1659              		.loc 1 312 5 view .LVU473
 1660 081c 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1661 0820 0710A0E1 		mov	r1, r7	@, tmp199
 1662 0824 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1663 0828 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1664              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1665              		.loc 1 310 34 view .LVU474
 1666 082c 00C0A0E1 		mov	ip, r0	@ tmp215,
 1667              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1668              		.loc 1 312 5 view .LVU475
 1669 0830 0030A0E1 		mov	r3, r0	@, tmp215
 1670              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1671              		.loc 1 310 32 view .LVU476
 1672 0834 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1673              		.loc 1 312 5 is_stmt 1 view .LVU477
 1674 0838 50009FE5 		ldr	r0, .L84+24	@,
 1675              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1676              		.loc 1 319 1 is_stmt 0 view .LVU478
 1677 083c 14D08DE2 		add	sp, sp, #20	@,,
 1678              		.cfi_remember_state
 1679              		.cfi_def_cfa_offset 28
 1680              		@ sp needed	@
 1681 0840 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1682              		.cfi_restore 14
 1683              		.cfi_restore 9
 1684              		.cfi_restore 8
 1685              		.cfi_restore 7
 1686              		.cfi_restore 6
 1687              		.cfi_restore 5
 1688              		.cfi_restore 4
 1689              		.cfi_def_cfa_offset 0
 1690              	.LVL85:
 1691              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1692              		.loc 1 312 5 view .LVU479
 1693 0844 FEFFFFEA 		b	printf		@
 1694              	.LVL86:
 1695              	.L82:
 1696              		.cfi_restore_state
 235:armwave.c     **** 
 1697              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU480
 1698 0848 44309FE5 		ldr	r3, .L84+28	@,
 1699 084c EB20A0E3 		mov	r2, #235	@,
 1700 0850 40109FE5 		ldr	r1, .L84+32	@,
 1701 0854 40009FE5 		ldr	r0, .L84+36	@,
 1702 0858 FEFFFFEB 		bl	__assert_fail		@
 1703              	.LVL87:
 1704              	.L83:
 289:armwave.c     ****         exit(-1);
 1705              		.loc 1 289 9 view .LVU481
 1706 085c 3C309FE5 		ldr	r3, .L84+40	@ tmp202,
 1707 0860 0820A0E1 		mov	r2, r8	@, _22
 1708 0864 38109FE5 		ldr	r1, .L84+44	@,
 1709 0868 000093E5 		ldr	r0, [r3]	@, stderr
 1710 086c FEFFFFEB 		bl	fprintf		@
 1711              	.LVL88:
 290:armwave.c     ****     }
 1712              		.loc 1 290 9 view .LVU482
 1713 0870 0000E0E3 		mvn	r0, #0	@,
 1714 0874 FEFFFFEB 		bl	exit		@
 1715              	.LVL89:
 1716              	.L85:
 1717              		.align	2
 1718              	.L84:
 1719 0878 0000803F 		.word	1065353216
 1720 087c 00007F43 		.word	1132396544
 1721 0880 00008047 		.word	1199570944
 1722 0884 20000000 		.word	.LC2
 1723 0888 00000000 		.word	g_armwave_state
 1724 088c 70000000 		.word	.LC5
 1725 0890 14010000 		.word	.LC7
 1726 0894 00000000 		.word	.LANCHOR0
 1727 0898 4C000000 		.word	.LC3
 1728 089c 58000000 		.word	.LC4
 1729 08a0 00000000 		.word	stderr
 1730 08a4 D0000000 		.word	.LC6
 1731              		.cfi_endproc
 1732              	.LFE62:
 1734              		.align	2
 1735              		.global	armwave_set_wave_pointer
 1736              		.syntax unified
 1737              		.arm
 1738              		.fpu vfp
 1740              	armwave_set_wave_pointer:
 1741              	.LVL90:
 1742              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1743              		.loc 1 326 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1747              		.loc 1 327 5 view .LVU484
 1748 08a8 000050E3 		cmp	r0, #0	@ wave_buffer
 1749              		.loc 1 327 5 is_stmt 0 view .LVU485
 1750 08ac 0200000A 		beq	.L91		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1751              		.loc 1 328 5 is_stmt 1 view .LVU486
 1752              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1753              		.loc 1 328 33 is_stmt 0 view .LVU487
 1754 08b0 1C309FE5 		ldr	r3, .L92	@ tmp116,
 1755 08b4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1756 08b8 1EFF2FE1 		bx	lr	@
 1757              	.L91:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1758              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU488
 1759              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1760              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU489
 1761 08bc 10402DE9 		push	{r4, lr}	@
 1762              		.cfi_def_cfa_offset 8
 1763              		.cfi_offset 4, -8
 1764              		.cfi_offset 14, -4
 1765              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1766              		.loc 1 327 5 discriminator 1 view .LVU490
 1767 08c0 10309FE5 		ldr	r3, .L92+4	@,
 1768 08c4 10209FE5 		ldr	r2, .L92+8	@,
 1769 08c8 10109FE5 		ldr	r1, .L92+12	@,
 1770 08cc 10009FE5 		ldr	r0, .L92+16	@,
 1771              	.LVL91:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1772              		.loc 1 327 5 discriminator 1 view .LVU491
 1773 08d0 FEFFFFEB 		bl	__assert_fail		@
 1774              	.LVL92:
 1775              	.L93:
 1776              		.align	2
 1777              	.L92:
 1778 08d4 00000000 		.word	g_armwave_state
 1779 08d8 18000000 		.word	.LANCHOR0+24
 1780 08dc 47010000 		.word	327
 1781 08e0 4C000000 		.word	.LC3
 1782 08e4 38010000 		.word	.LC8
 1783              		.cfi_endproc
 1784              	.LFE63:
 1786              		.align	2
 1787              		.global	armwave_set_wave_pointer_as_testbuf
 1788              		.syntax unified
 1789              		.arm
 1790              		.fpu vfp
 1792              	armwave_set_wave_pointer_as_testbuf:
 1793              	.LVL93:
 1794              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1795              		.loc 1 336 1 is_stmt 1 view -0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 0
 1798              		@ frame_needed = 0, uses_anonymous_args = 0
 1799              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1800              		.loc 1 337 5 view .LVU493
 1801              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1802              		.loc 1 337 29 is_stmt 0 view .LVU494
 1803 08e8 24309FE5 		ldr	r3, .L97	@ tmp117,
 1804              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1805              		.loc 1 337 7 view .LVU495
 1806 08ec 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1807 08f0 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1808 08f4 0400003A 		bcc	.L96		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1809              		.loc 1 342 5 is_stmt 1 view .LVU496
 1810              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1811              		.loc 1 342 111 is_stmt 0 view .LVU497
 1812 08f8 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1813              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1814              		.loc 1 342 68 view .LVU498
 1815 08fc 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1816 0900 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1817              	.LVL94:
 1818              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1819              		.loc 1 342 33 view .LVU499
 1820 0904 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1821              	@ armwave.c:343: }
 343:armwave.c     **** }
 1822              		.loc 1 343 1 view .LVU500
 1823 0908 1EFF2FE1 		bx	lr	@
 1824              	.LVL95:
 1825              	.L96:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1826              		.loc 1 338 9 is_stmt 1 view .LVU501
 1827 090c 04009FE5 		ldr	r0, .L97+4	@,
 1828              	.LVL96:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1829              		.loc 1 338 9 is_stmt 0 view .LVU502
 1830 0910 FEFFFFEA 		b	puts		@
 1831              	.LVL97:
 1832              	.L98:
 1833              		.align	2
 1834              	.L97:
 1835 0914 00000000 		.word	g_armwave_state
 1836 0918 4C010000 		.word	.LC9
 1837              		.cfi_endproc
 1838              	.LFE64:
 1840              		.align	2
 1841              		.global	armwave_set_wave_pointer_u32
 1842              		.syntax unified
 1843              		.arm
 1844              		.fpu vfp
 1846              	armwave_set_wave_pointer_u32:
 1847              	.LVL98:
 1848              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1849              		.loc 1 350 1 is_stmt 1 view -0
 1850              		.cfi_startproc
 1851              		@ args = 0, pretend = 0, frame = 0
 1852              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1853              		.loc 1 351 5 view .LVU504
 1854 091c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1855              		.loc 1 351 5 is_stmt 0 view .LVU505
 1856 0920 0200000A 		beq	.L104		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1857              		.loc 1 352 5 is_stmt 1 view .LVU506
 1858              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1859              		.loc 1 352 33 is_stmt 0 view .LVU507
 1860 0924 1C309FE5 		ldr	r3, .L105	@ tmp117,
 1861 0928 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1862 092c 1EFF2FE1 		bx	lr	@
 1863              	.L104:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1864              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU508
 1865              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1866              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU509
 1867 0930 10402DE9 		push	{r4, lr}	@
 1868              		.cfi_def_cfa_offset 8
 1869              		.cfi_offset 4, -8
 1870              		.cfi_offset 14, -4
 1871              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1872              		.loc 1 351 5 discriminator 1 view .LVU510
 1873 0934 10309FE5 		ldr	r3, .L105+4	@,
 1874 0938 10209FE5 		ldr	r2, .L105+8	@,
 1875 093c 10109FE5 		ldr	r1, .L105+12	@,
 1876 0940 10009FE5 		ldr	r0, .L105+16	@,
 1877              	.LVL99:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1878              		.loc 1 351 5 discriminator 1 view .LVU511
 1879 0944 FEFFFFEB 		bl	__assert_fail		@
 1880              	.LVL100:
 1881              	.L106:
 1882              		.align	2
 1883              	.L105:
 1884 0948 00000000 		.word	g_armwave_state
 1885 094c 34000000 		.word	.LANCHOR0+52
 1886 0950 5F010000 		.word	351
 1887 0954 4C000000 		.word	.LC3
 1888 0958 88010000 		.word	.LC10
 1889              		.cfi_endproc
 1890              	.LFE65:
 1892              		.align	2
 1893              		.global	armwave_clear_buffer
 1894              		.syntax unified
 1895              		.arm
 1896              		.fpu vfp
 1898              	armwave_clear_buffer:
 1899              	.LVL101:
 1900              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1901              		.loc 1 359 1 is_stmt 1 view -0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1906              		.loc 1 361 5 view .LVU513
 1907              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1908              		.loc 1 361 58 is_stmt 0 view .LVU514
 1909 095c 0C309FE5 		ldr	r3, .L108	@ tmp114,
 1910              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1911              		.loc 1 361 5 view .LVU515
 1912 0960 0010A0E3 		mov	r1, #0	@,
 1913 0964 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1914 0968 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1915              	.LVL102:
 1916              		.loc 1 361 5 view .LVU516
 1917 096c FEFFFFEA 		b	memset		@
 1918              	.LVL103:
 1919              	.L109:
 1920              		.align	2
 1921              	.L108:
 1922 0970 00000000 		.word	g_armwave_state
 1923              		.cfi_endproc
 1924              	.LFE66:
 1926              		.align	2
 1927              		.global	armwave_set_channel_colour
 1928              		.syntax unified
 1929              		.arm
 1930              		.fpu vfp
 1932              	armwave_set_channel_colour:
 1933              	.LVL104:
 1934              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 1935              		.loc 1 368 1 is_stmt 1 view -0
 1936              		.cfi_startproc
 1937              		@ args = 0, pretend = 0, frame = 0
 1938              		@ frame_needed = 0, uses_anonymous_args = 0
 1939              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 1940              		.loc 1 370 5 view .LVU518
 1941 0974 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1942              		.loc 1 372 13 view .LVU519
 1943              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 1944              		.loc 1 372 41 is_stmt 0 view .LVU520
 1945 0978 0C009F05 		ldreq	r0, .L112	@ tmp117,
 1946              	.LVL105:
 1947              		.loc 1 372 41 view .LVU521
 1948 097c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1949              		.loc 1 373 13 is_stmt 1 view .LVU522
 1950              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 1951              		.loc 1 373 41 is_stmt 0 view .LVU523
 1952 0980 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1953              		.loc 1 374 13 is_stmt 1 view .LVU524
 1954              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 1955              		.loc 1 374 41 is_stmt 0 view .LVU525
 1956 0984 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 1957              		.loc 1 375 13 is_stmt 1 view .LVU526
 1958              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 1959              		.loc 1 377 1 is_stmt 0 view .LVU527
 1960 0988 1EFF2FE1 		bx	lr	@
 1961              	.L113:
 1962              		.align	2
 1963              	.L112:
 1964 098c 00000000 		.word	g_armwave_state
 1965              		.cfi_endproc
 1966              	.LFE67:
 1968              		.align	2
 1969              		.global	armwave_dump_ppm_debug
 1970              		.syntax unified
 1971              		.arm
 1972              		.fpu vfp
 1974              	armwave_dump_ppm_debug:
 1975              	.LVL106:
 1976              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 1977              		.loc 1 383 1 is_stmt 1 view -0
 1978              		.cfi_startproc
 1979              		@ args = 0, pretend = 0, frame = 0
 1980              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1981              		.loc 1 384 5 view .LVU529
 1982              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1983              		.loc 1 383 1 is_stmt 0 view .LVU530
 1984 0990 0130A0E1 		mov	r3, r1	@ fn, fn
 1985 0994 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1986              		.cfi_def_cfa_offset 28
 1987              		.cfi_offset 4, -28
 1988              		.cfi_offset 5, -24
 1989              		.cfi_offset 6, -20
 1990              		.cfi_offset 7, -16
 1991              		.cfi_offset 8, -12
 1992              		.cfi_offset 9, -8
 1993              		.cfi_offset 14, -4
 1994 0998 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1995 099c 0CD04DE2 		sub	sp, sp, #12	@,,
 1996              		.cfi_def_cfa_offset 40
 1997              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 1998              		.loc 1 384 16 view .LVU531
 1999 09a0 C4109FE5 		ldr	r1, .L122	@,
 2000              	.LVL107:
 2001              		.loc 1 384 16 view .LVU532
 2002 09a4 0300A0E1 		mov	r0, r3	@, fn
 2003              	.LVL108:
 2004              		.loc 1 384 16 view .LVU533
 2005 09a8 FEFFFFEB 		bl	fopen64		@
 2006              	.LVL109:
 2007              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2008              		.loc 1 391 5 view .LVU534
 2009 09ac BC609FE5 		ldr	r6, .L122+4	@ tmp150,
 2010              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2011              		.loc 1 390 5 view .LVU535
 2012 09b0 0320A0E3 		mov	r2, #3	@,
 2013 09b4 0110A0E3 		mov	r1, #1	@,
 2014              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 2015              		.loc 1 384 16 view .LVU536
 2016 09b8 0070A0E1 		mov	r7, r0	@ fp,
 2017              	.LVL110:
 385:armwave.c     ****     uint32_t data;
 2018              		.loc 1 385 5 is_stmt 1 view .LVU537
 386:armwave.c     **** 
 2019              		.loc 1 386 5 view .LVU538
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2020              		.loc 1 390 5 view .LVU539
 2021 09bc 0030A0E1 		mov	r3, r0	@, fp
 2022 09c0 AC009FE5 		ldr	r0, .L122+8	@,
 2023              	.LVL111:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2024              		.loc 1 390 5 is_stmt 0 view .LVU540
 2025 09c4 FEFFFFEB 		bl	fwrite		@
 2026              	.LVL112:
 2027              		.loc 1 391 5 is_stmt 1 view .LVU541
 2028 09c8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2029 09cc A4109FE5 		ldr	r1, .L122+12	@,
 2030 09d0 0700A0E1 		mov	r0, r7	@, fp
 2031 09d4 FEFFFFEB 		bl	fprintf		@
 2032              	.LVL113:
 392:armwave.c     ****     fputs("255\n", fp);
 2033              		.loc 1 392 5 view .LVU542
 2034 09d8 0420A0E3 		mov	r2, #4	@,
 2035 09dc 0730A0E1 		mov	r3, r7	@, fp
 2036 09e0 0110A0E3 		mov	r1, #1	@,
 2037 09e4 90009FE5 		ldr	r0, .L122+16	@,
 2038 09e8 FEFFFFEB 		bl	fwrite		@
 2039              	.LVL114:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2040              		.loc 1 394 5 view .LVU543
 2041              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2042              		.loc 1 394 37 is_stmt 0 view .LVU544
 2043 09ec 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2044              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2045              		.loc 1 394 5 view .LVU545
 2046 09f0 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2047 09f4 180000DA 		ble	.L115		@,
 2048 09f8 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2049              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2050              		.loc 1 399 13 view .LVU546
 2051 09fc 7C909FE5 		ldr	r9, .L122+20	@ tmp152,
 2052              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2053              		.loc 1 394 12 view .LVU547
 2054 0a00 0050A0E3 		mov	r5, #0	@ yy,
 2055              	.LVL115:
 2056              	.L116:
 2057              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2058              		.loc 1 395 9 view .LVU548
 2059 0a04 000053E3 		cmp	r3, #0	@ _13,
 2060              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2061              		.loc 1 395 16 view .LVU549
 2062 0a08 0040A0C3 		movgt	r4, #0	@ xx,
 2063              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2064              		.loc 1 395 9 view .LVU550
 2065 0a0c 0F0000DA 		ble	.L118		@,
 2066              	.LVL116:
 2067              	.L117:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2068              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU551
 2069              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2070              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU552
 2071 0a10 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2072              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2073              		.loc 1 399 13 discriminator 3 view .LVU553
 2074 0a14 0910A0E1 		mov	r1, r9	@, tmp152
 2075 0a18 0700A0E1 		mov	r0, r7	@, fp
 2076              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2077              		.loc 1 396 18 discriminator 3 view .LVU554
 2078 0a1c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2079              	.LVL117:
 2080              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU555
 2081              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2082              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU556
 2083 0a20 014084E2 		add	r4, r4, #1	@ xx, xx,
 2084              	.LVL118:
 2085              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2086              		.loc 1 399 81 discriminator 3 view .LVU557
 2087 0a24 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2088              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2089              		.loc 1 399 61 discriminator 3 view .LVU558
 2090 0a28 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2091              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2092              		.loc 1 399 13 discriminator 3 view .LVU559
 2093 0a2c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2094 0a30 7330EFE6 		uxtb	r3, r3	@, tmp142
 2095 0a34 00C08DE5 		str	ip, [sp]	@ tmp147,
 2096 0a38 7220EFE6 		uxtb	r2, r2	@, data
 2097              	.LVL119:
 2098              		.loc 1 399 13 discriminator 3 view .LVU560
 2099 0a3c FEFFFFEB 		bl	fprintf		@
 2100              	.LVL120:
 2101              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2102              		.loc 1 395 41 discriminator 3 view .LVU561
 2103 0a40 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2104              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2105              		.loc 1 395 9 discriminator 3 view .LVU562
 2106 0a44 040053E1 		cmp	r3, r4	@ _13, xx
 2107 0a48 F0FFFFCA 		bgt	.L117		@,
 2108 0a4c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2109              	.LVL121:
 2110              	.L118:
 2111              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2112              		.loc 1 394 55 discriminator 2 view .LVU563
 2113 0a50 015085E2 		add	r5, r5, #1	@ yy, yy,
 2114              	.LVL122:
 2115              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2116              		.loc 1 394 5 discriminator 2 view .LVU564
 2117 0a54 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2118 0a58 E9FFFFBA 		blt	.L116		@,
 2119              	.LVL123:
 2120              	.L115:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2121              		.loc 1 403 5 is_stmt 1 view .LVU565
 2122 0a5c 0700A0E1 		mov	r0, r7	@, fp
 2123              	@ armwave.c:404: }
 404:armwave.c     **** }
 2124              		.loc 1 404 1 is_stmt 0 view .LVU566
 2125 0a60 0CD08DE2 		add	sp, sp, #12	@,,
 2126              		.cfi_def_cfa_offset 28
 2127              		@ sp needed	@
 2128 0a64 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2129              		.cfi_restore 14
 2130              		.cfi_restore 9
 2131              		.cfi_restore 8
 2132              		.cfi_restore 7
 2133              		.cfi_restore 6
 2134              		.cfi_restore 5
 2135              		.cfi_restore 4
 2136              		.cfi_def_cfa_offset 0
 2137              	.LVL124:
 2138              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2139              		.loc 1 403 5 view .LVU567
 2140 0a68 FEFFFFEA 		b	fclose		@
 2141              	.LVL125:
 2142              	.L123:
 403:armwave.c     **** }
 2143              		.loc 1 403 5 view .LVU568
 2144              		.align	2
 2145              	.L122:
 2146 0a6c A0010000 		.word	.LC11
 2147 0a70 00000000 		.word	g_armwave_state
 2148 0a74 A4010000 		.word	.LC12
 2149 0a78 A8010000 		.word	.LC13
 2150 0a7c B0010000 		.word	.LC14
 2151 0a80 B8010000 		.word	.LC15
 2152              		.cfi_endproc
 2153              	.LFE68:
 2155              		.align	2
 2156              		.global	armwave_test_init
 2157              		.syntax unified
 2158              		.arm
 2159              		.fpu vfp
 2161              	armwave_test_init:
 2162              	.LVL126:
 2163              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2164              		.loc 1 410 1 is_stmt 1 view -0
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 0
 2167              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2168              		.loc 1 411 5 view .LVU570
 2169              	.LBB18:
 2170              	.LBI18:
  34:armwave.c     **** {
 2171              		.loc 1 34 6 view .LVU571
  34:armwave.c     **** {
 2172              		.loc 1 34 6 is_stmt 0 view .LVU572
 2173              	.LBE18:
 2174              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2175              		.loc 1 410 1 view .LVU573
 2176 0a84 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2177              		.cfi_def_cfa_offset 32
 2178              		.cfi_offset 4, -32
 2179              		.cfi_offset 5, -28
 2180              		.cfi_offset 6, -24
 2181              		.cfi_offset 7, -20
 2182              		.cfi_offset 8, -16
 2183              		.cfi_offset 9, -12
 2184              		.cfi_offset 10, -8
 2185              		.cfi_offset 14, -4
 2186 0a88 068B2DED 		vpush.64	{d8, d9, d10}	@
 2187              		.cfi_def_cfa_offset 56
 2188              		.cfi_offset 80, -56
 2189              		.cfi_offset 81, -52
 2190              		.cfi_offset 82, -48
 2191              		.cfi_offset 83, -44
 2192              		.cfi_offset 84, -40
 2193              		.cfi_offset 85, -36
 2194 0a8c C0409FE5 		ldr	r4, .L128+20	@ ivtmp.99,
 2195              	.LBB21:
 2196              	.LBB19:
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 32 view .LVU574
 2199 0a90 2EAA9FED 		vldr.32	s20, .L128+16	@ tmp136,
 2200              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2201              		.loc 1 40 26 view .LVU575
 2202 0a94 299B9FED 		vldr.64	d9, .L128	@ tmp151,
 2203              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2204              		.loc 1 40 49 view .LVU576
 2205 0a98 2A8B9FED 		vldr.64	d8, .L128+8	@ tmp139,
 2206 0a9c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.99,
 2207              	.LBE19:
 2208              	.LBE21:
 2209              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2210              		.loc 1 410 1 view .LVU577
 2211 0aa0 10D04DE2 		sub	sp, sp, #16	@,,
 2212              		.cfi_def_cfa_offset 72
 2213              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2214              		.loc 1 410 1 view .LVU578
 2215 0aa4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2216 0aa8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2217 0aac 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2218 0ab0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2219 0ab4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.99,
 2220 0ab8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2221              	.LVL127:
 2222              	.L125:
 2223              	.LBB22:
 2224              	.LBB20:
  40:armwave.c     ****     }
 2225              		.loc 1 40 9 is_stmt 1 view .LVU579
 2226              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2227              		.loc 1 40 32 is_stmt 0 view .LVU580
 2228 0abc 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.99
 2229              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2230              		.loc 1 40 26 view .LVU581
 2231 0ac0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2232              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2233              		.loc 1 40 32 view .LVU582
 2234 0ac4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2235 0ac8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2236 0acc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2237              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2238              		.loc 1 40 26 view .LVU583
 2239 0ad0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2240 0ad4 FEFFFFEB 		bl	pow		@
 2241              	.LVL128:
 2242              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2243              		.loc 1 40 49 view .LVU584
 2244 0ad8 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2245              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2246              		.loc 1 40 24 view .LVU585
 2247 0adc C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2248 0ae0 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2249 0ae4 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2250              	.LVL129:
 2251              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2252              		.loc 1 39 5 view .LVU586
 2253 0ae8 0A0054E1 		cmp	r4, r10	@ ivtmp.99, _39
 2254 0aec F2FFFF1A 		bne	.L125		@,
 2255              	.LVL130:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2256              		.loc 1 39 5 view .LVU587
 2257              	.LBE20:
 2258              	.LBE22:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2259              		.loc 1 414 5 is_stmt 1 view .LVU588
 2260              	.LBB23:
 2261              	.LBI23:
 367:armwave.c     **** {
 2262              		.loc 1 367 6 view .LVU589
 2263              	.LBB24:
 370:armwave.c     ****         case 1:
 2264              		.loc 1 370 5 view .LVU590
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2265              		.loc 1 372 13 view .LVU591
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2266              		.loc 1 373 13 view .LVU592
 2267              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2268              		.loc 1 372 41 is_stmt 0 view .LVU593
 2269 0af0 60C09FE5 		ldr	ip, .L128+24	@ tmp142,
 2270 0af4 60409FE5 		ldr	r4, .L128+28	@ tmp143,
 2271              	.LBE24:
 2272              	.LBE23:
 2273              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2274              		.loc 1 416 5 view .LVU594
 2275 0af8 0000A0E3 		mov	r0, #0	@ tmp147,
 2276              	.LBB28:
 2277              	.LBB25:
 2278              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2279              		.loc 1 374 41 view .LVU595
 2280 0afc FAE0A0E3 		mov	lr, #250	@ tmp146,
 2281              	.LBE25:
 2282              	.LBE28:
 2283              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2284              		.loc 1 416 5 view .LVU596
 2285 0b00 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2286 0b04 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2287 0b08 00808DE5 		str	r8, [sp]	@ render_width,
 2288 0b0c 0610A0E1 		mov	r1, r6	@, tmp3
 2289 0b10 0720A0E1 		mov	r2, r7	@, nwaves
 2290              	.LBB29:
 2291              	.LBB26:
 2292              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2293              		.loc 1 372 41 view .LVU597
 2294 0b14 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2295              		.loc 1 374 13 is_stmt 1 view .LVU598
 2296              	.LBE26:
 2297              	.LBE29:
 2298              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2299              		.loc 1 416 5 is_stmt 0 view .LVU599
 2300 0b18 0630A0E1 		mov	r3, r6	@, wave_size
 2301              	.LBB30:
 2302              	.LBB27:
 2303              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2304              		.loc 1 374 41 view .LVU600
 2305 0b1c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2306              		.loc 1 375 13 is_stmt 1 view .LVU601
 2307              	.LVL131:
 375:armwave.c     ****     }
 2308              		.loc 1 375 13 is_stmt 0 view .LVU602
 2309              	.LBE27:
 2310              	.LBE30:
 2311              		.loc 1 416 5 is_stmt 1 view .LVU603
 2312 0b20 FEFFFFEB 		bl	armwave_setup_render		@
 2313              	.LVL132:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2314              		.loc 1 418 5 view .LVU604
 2315 0b24 34109FE5 		ldr	r1, .L128+32	@,
 2316 0b28 34009FE5 		ldr	r0, .L128+36	@,
 2317              	@ armwave.c:419: }
 419:armwave.c     **** }
 2318              		.loc 1 419 1 is_stmt 0 view .LVU605
 2319 0b2c 10D08DE2 		add	sp, sp, #16	@,,
 2320              		.cfi_def_cfa_offset 56
 2321              		@ sp needed	@
 2322 0b30 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2323              		.cfi_restore 84
 2324              		.cfi_restore 85
 2325              		.cfi_restore 82
 2326              		.cfi_restore 83
 2327              		.cfi_restore 80
 2328              		.cfi_restore 81
 2329              		.cfi_def_cfa_offset 32
 2330 0b34 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2331              		.cfi_restore 14
 2332              		.cfi_restore 10
 2333              		.cfi_restore 9
 2334              		.cfi_restore 8
 2335              		.cfi_restore 7
 2336              		.cfi_restore 6
 2337              		.cfi_restore 5
 2338              		.cfi_restore 4
 2339              		.cfi_def_cfa_offset 0
 2340              	.LVL133:
 2341              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2342              		.loc 1 418 5 view .LVU606
 2343 0b38 FEFFFFEA 		b	printf		@
 2344              	.LVL134:
 2345              	.L129:
 2346 0b3c 0000A0E1 		.align	3
 2347              	.L128:
 2348 0b40 000000C0 		.word	-1073741824
 2349 0b44 CCCCEC3F 		.word	1072483532
 2350 0b48 00000000 		.word	0
 2351 0b4c 00E06F40 		.word	1081073664
 2352 0b50 00007F43 		.word	1132396544
 2353 0b54 FFFFFFFF 		.word	gamma_table-1
 2354 0b58 00000000 		.word	g_armwave_state
 2355 0b5c F609F406 		.word	116656630
 2356 0b60 00000000 		.word	.LC0
 2357 0b64 08000000 		.word	.LC1
 2358              		.cfi_endproc
 2359              	.LFE69:
 2361              		.align	2
 2362              		.global	armwave_test_fill_outbuf
 2363              		.syntax unified
 2364              		.arm
 2365              		.fpu vfp
 2367              	armwave_test_fill_outbuf:
 2368              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2369              		.loc 1 425 1 is_stmt 1 view -0
 2370              		.cfi_startproc
 2371              		@ args = 0, pretend = 0, frame = 0
 2372              		@ frame_needed = 0, uses_anonymous_args = 0
 2373              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2374              		.loc 1 426 5 view .LVU608
 2375 0b68 04309FE5 		ldr	r3, .L131	@ tmp111,
 2376 0b6c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2377 0b70 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2378              	.LVL135:
 2379              	.L132:
 2380              		.align	2
 2381              	.L131:
 2382 0b74 00000000 		.word	g_armwave_state
 2383              		.cfi_endproc
 2384              	.LFE70:
 2386              		.align	2
 2387              		.global	armwave_test_dump_buffer_to_ppm
 2388              		.syntax unified
 2389              		.arm
 2390              		.fpu vfp
 2392              	armwave_test_dump_buffer_to_ppm:
 2393              	.LVL136:
 2394              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2395              		.loc 1 433 1 view -0
 2396              		.cfi_startproc
 2397              		@ args = 0, pretend = 0, frame = 0
 2398              		@ frame_needed = 0, uses_anonymous_args = 0
 2399              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2400              		.loc 1 434 5 view .LVU610
 2401 0b78 08309FE5 		ldr	r3, .L134	@ tmp112,
 2402 0b7c 0010A0E1 		mov	r1, r0	@, fn
 2403 0b80 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2404              	.LVL137:
 2405              		.loc 1 434 5 is_stmt 0 view .LVU611
 2406 0b84 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2407              	.LVL138:
 2408              	.L135:
 2409              		.loc 1 434 5 view .LVU612
 2410              		.align	2
 2411              	.L134:
 2412 0b88 00000000 		.word	g_armwave_state
 2413              		.cfi_endproc
 2414              	.LFE71:
 2416              		.align	2
 2417              		.global	armwave_test_fill_gdkbuf
 2418              		.syntax unified
 2419              		.arm
 2420              		.fpu vfp
 2422              	armwave_test_fill_gdkbuf:
 2423              	.LVL139:
 2424              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2425              		.loc 1 441 1 is_stmt 1 view -0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 0
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2430              		.loc 1 446 5 view .LVU614
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2431              		.loc 1 449 5 view .LVU615
 2432              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2433              		.loc 1 446 11 is_stmt 0 view .LVU616
 2434 0b8c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2435              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2436              		.loc 1 449 5 view .LVU617
 2437 0b90 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2438              	.LVL140:
 2439              		.loc 1 449 5 view .LVU618
 2440 0b94 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2441              	.LVL141:
 2442              		.loc 1 449 5 view .LVU619
 2443              		.cfi_endproc
 2444              	.LFE72:
 2446              		.align	2
 2447              		.global	armwave_test_buffer_alloc
 2448              		.syntax unified
 2449              		.arm
 2450              		.fpu vfp
 2452              	armwave_test_buffer_alloc:
 2453              	.LVL142:
 2454              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2455              		.loc 1 456 1 is_stmt 1 view -0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2459              		.loc 1 457 5 view .LVU621
 2460              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2461              		.loc 1 456 1 is_stmt 0 view .LVU622
 2462 0b98 70402DE9 		push	{r4, r5, r6, lr}	@
 2463              		.cfi_def_cfa_offset 16
 2464              		.cfi_offset 4, -16
 2465              		.cfi_offset 5, -12
 2466              		.cfi_offset 6, -8
 2467              		.cfi_offset 14, -4
 2468              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2469              		.loc 1 456 1 view .LVU623
 2470 0b9c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2471              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2472              		.loc 1 457 23 view .LVU624
 2473 0ba0 44409FE5 		ldr	r4, .L144	@ tmp128,
 2474 0ba4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2475              	.LVL143:
 2476              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2477              		.loc 1 457 7 view .LVU625
 2478 0ba8 000050E3 		cmp	r0, #0	@ _1,
 2479 0bac 0000000A 		beq	.L138		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2480              		.loc 1 458 9 is_stmt 1 view .LVU626
 2481 0bb0 FEFFFFEB 		bl	free		@
 2482              	.LVL144:
 2483              	.L138:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2484              		.loc 1 463 5 view .LVU627
 2485              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2486              		.loc 1 463 75 is_stmt 0 view .LVU628
 2487 0bb4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2488 0bb8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2489              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2490              		.loc 1 463 40 view .LVU629
 2491 0bbc 0610A0E1 		mov	r1, r6	@, nsets
 2492              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2493              		.loc 1 463 75 view .LVU630
 2494 0bc0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2495              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2496              		.loc 1 463 40 view .LVU631
 2497 0bc4 0500A0E1 		mov	r0, r5	@, _4
 2498 0bc8 FEFFFFEB 		bl	calloc		@
 2499              	.LVL145:
 2500              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2501              		.loc 1 465 7 view .LVU632
 2502 0bcc 000050E3 		cmp	r0, #0	@ tmp124,
 2503              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2504              		.loc 1 463 38 view .LVU633
 2505 0bd0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2506              		.loc 1 465 5 is_stmt 1 view .LVU634
 2507              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2508              		.loc 1 465 7 is_stmt 0 view .LVU635
 2509 0bd4 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2510              		.loc 1 466 9 is_stmt 1 view .LVU636
 2511 0bd8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2512 0bdc 0620A0E1 		mov	r2, r6	@, nsets
 2513 0be0 08009FE5 		ldr	r0, .L144+4	@,
 2514              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2515              		.loc 1 470 1 is_stmt 0 view .LVU637
 2516 0be4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2517              		.cfi_restore 14
 2518              		.cfi_restore 6
 2519              		.cfi_restore 5
 2520              		.cfi_restore 4
 2521              		.cfi_def_cfa_offset 0
 2522              	.LVL146:
 2523              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2524              		.loc 1 466 9 view .LVU638
 2525 0be8 FEFFFFEA 		b	printf		@
 2526              	.LVL147:
 2527              	.L145:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2528              		.loc 1 466 9 view .LVU639
 2529              		.align	2
 2530              	.L144:
 2531 0bec 00000000 		.word	g_armwave_state
 2532 0bf0 C8010000 		.word	.LC16
 2533              		.cfi_endproc
 2534              	.LFE73:
 2536              		.align	2
 2537              		.global	armwave_fill_pixbuf_into_pybuffer
 2538              		.syntax unified
 2539              		.arm
 2540              		.fpu vfp
 2542              	armwave_fill_pixbuf_into_pybuffer:
 2543              	.LVL148:
 2544              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2545              		.loc 1 476 1 is_stmt 1 view -0
 2546              		.cfi_startproc
 2547              		@ args = 0, pretend = 0, frame = 48
 2548              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2549              		.loc 1 477 5 view .LVU641
 478:armwave.c     ****     int ret;
 2550              		.loc 1 478 5 view .LVU642
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2551              		.loc 1 482 5 view .LVU643
 2552              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2553              		.loc 1 476 1 is_stmt 0 view .LVU644
 2554 0bf4 04E02DE5 		str	lr, [sp, #-4]!	@,
 2555              		.cfi_def_cfa_offset 4
 2556              		.cfi_offset 14, -4
 2557 0bf8 34D04DE2 		sub	sp, sp, #52	@,,
 2558              		.cfi_def_cfa_offset 56
 2559              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2560              		.loc 1 482 11 view .LVU645
 2561 0bfc 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2562 0c00 0120A0E3 		mov	r2, #1	@,
 2563 0c04 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2564              	.LVL149:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2565              		.loc 1 484 5 is_stmt 1 view .LVU646
 2566              	@ armwave.c:484:     if(ret != 0) {
 2567              		.loc 1 484 7 is_stmt 0 view .LVU647
 2568 0c08 000050E3 		cmp	r0, #0	@,
 2569 0c0c 0A00001A 		bne	.L150		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2570              		.loc 1 491 5 is_stmt 1 view .LVU648
 2571 0c10 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2572              	.LVL150:
 2573              		.loc 1 491 5 is_stmt 0 view .LVU649
 2574 0c14 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2575              	.LVL151:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2576              		.loc 1 494 5 is_stmt 1 view .LVU650
 2577 0c18 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2578 0c1c FEFFFFEB 		bl	PyBuffer_Release		@
 2579              	.LVL152:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2580              		.loc 1 497 5 view .LVU651
 2581              	.LBB31:
 2582              	.LBI31:
 2583              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2584              		.loc 2 456 20 view .LVU652
 2585              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2586              		.loc 2 458 21 view .LVU653
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2587              		.loc 2 459 5 view .LVU654
 2588              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2589              		.loc 2 459 18 is_stmt 0 view .LVU655
 2590 0c20 38309FE5 		ldr	r3, .L151	@ tmp126,
 2591              	.LBE32:
 2592              	.LBE31:
 2593              	@ armwave.c:497:     Py_RETURN_TRUE;
 2594              		.loc 1 497 5 view .LVU656
 2595 0c24 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2596              	.LBB34:
 2597              	.LBB33:
 2598              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2599              		.loc 2 459 18 view .LVU657
 2600 0c28 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2601 0c2c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2602 0c30 002083E5 		str	r2, [r3]	@ tmp128,
 2603              	.LBE33:
 2604              	.LBE34:
 2605              	@ armwave.c:498: }
 498:armwave.c     **** }
 2606              		.loc 1 498 1 view .LVU658
 2607 0c34 34D08DE2 		add	sp, sp, #52	@,,
 2608              		.cfi_remember_state
 2609              		.cfi_def_cfa_offset 4
 2610              		@ sp needed	@
 2611 0c38 04F09DE4 		ldr	pc, [sp], #4	@
 2612              	.LVL153:
 2613              	.L150:
 2614              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2615              		.loc 1 485 9 is_stmt 1 view .LVU659
 2616 0c3c 20009FE5 		ldr	r0, .L151+4	@,
 2617              	.LVL154:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2618              		.loc 1 485 9 is_stmt 0 view .LVU660
 2619 0c40 FEFFFFEB 		bl	puts		@
 2620              	.LVL155:
 486:armwave.c     ****     }
 2621              		.loc 1 486 9 is_stmt 1 view .LVU661
 2622              	.LBB35:
 2623              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2624              		.loc 2 456 20 view .LVU662
 2625              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2626              		.loc 2 458 21 view .LVU663
 2627              		.loc 2 459 5 view .LVU664
 2628              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2629              		.loc 2 459 18 is_stmt 0 view .LVU665
 2630 0c44 1C309FE5 		ldr	r3, .L151+8	@ tmp120,
 2631              	.LBE36:
 2632              	.LBE35:
 2633              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2634              		.loc 1 486 9 view .LVU666
 2635 0c48 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2636              	.LBB38:
 2637              	.LBB37:
 2638              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2639              		.loc 2 459 18 view .LVU667
 2640 0c4c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2641 0c50 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2642 0c54 002083E5 		str	r2, [r3]	@ tmp122,
 2643              	.LBE37:
 2644              	.LBE38:
 2645              	@ armwave.c:498: }
 2646              		.loc 1 498 1 view .LVU668
 2647 0c58 34D08DE2 		add	sp, sp, #52	@,,
 2648              		.cfi_def_cfa_offset 4
 2649              		@ sp needed	@
 2650 0c5c 04F09DE4 		ldr	pc, [sp], #4	@
 2651              	.L152:
 2652              		.align	2
 2653              	.L151:
 2654 0c60 00000000 		.word	_Py_TrueStruct
 2655 0c64 1C020000 		.word	.LC17
 2656 0c68 00000000 		.word	_Py_FalseStruct
 2657              		.cfi_endproc
 2658              	.LFE74:
 2660              		.align	2
 2661              		.global	armwave_test_create_am_sine
 2662              		.syntax unified
 2663              		.arm
 2664              		.fpu vfp
 2666              	armwave_test_create_am_sine:
 2667              	.LVL156:
 2668              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2669              		.loc 1 508 1 is_stmt 1 view -0
 2670              		.cfi_startproc
 2671              		@ args = 0, pretend = 0, frame = 8
 2672              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2673              		.loc 1 509 5 view .LVU670
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2674              		.loc 1 510 5 view .LVU671
 2675              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2676              		.loc 1 508 1 is_stmt 0 view .LVU672
 2677 0c6c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2678              		.cfi_def_cfa_offset 32
 2679              		.cfi_offset 4, -32
 2680              		.cfi_offset 5, -28
 2681              		.cfi_offset 6, -24
 2682              		.cfi_offset 7, -20
 2683              		.cfi_offset 8, -16
 2684              		.cfi_offset 9, -12
 2685              		.cfi_offset 10, -8
 2686              		.cfi_offset 14, -4
 2687              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2688              		.loc 1 510 38 view .LVU673
 2689 0c70 7A7A9FED 		vldr.32	s14, .L184	@ tmp180,
 2690              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2691              		.loc 1 510 55 view .LVU674
 2692 0c74 00529FE5 		ldr	r5, .L184+28	@ tmp250,
 2693              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2694              		.loc 1 508 1 view .LVU675
 2695 0c78 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2696              		.cfi_def_cfa_offset 80
 2697              		.cfi_offset 80, -80
 2698              		.cfi_offset 81, -76
 2699              		.cfi_offset 82, -72
 2700              		.cfi_offset 83, -68
 2701              		.cfi_offset 84, -64
 2702              		.cfi_offset 85, -60
 2703              		.cfi_offset 86, -56
 2704              		.cfi_offset 87, -52
 2705              		.cfi_offset 88, -48
 2706              		.cfi_offset 89, -44
 2707              		.cfi_offset 90, -40
 2708              		.cfi_offset 91, -36
 2709 0c7c 0090A0E1 		mov	r9, r0	@ sets, sets
 2710              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2711              		.loc 1 510 38 view .LVU676
 2712 0c80 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2713              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2714              		.loc 1 514 70 view .LVU677
 2715 0c84 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2716 0c88 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2717              	.LBB41:
 2718              	.LBB42:
 2719              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2720              		.loc 1 457 23 view .LVU678
 2721 0c8c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2722              	.LVL157:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2723              		.loc 1 457 23 view .LVU679
 2724              	.LBE42:
 2725              	.LBE41:
 2726              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2727              		.loc 1 510 38 view .LVU680
 2728 0c90 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2729              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2730              		.loc 1 514 70 view .LVU681
 2731 0c94 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2732              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2733              		.loc 1 508 1 view .LVU682
 2734 0c98 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2735              	.LBB46:
 2736              	.LBB43:
 2737              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2738              		.loc 1 457 7 view .LVU683
 2739 0c9c 000050E3 		cmp	r0, #0	@ _82,
 2740              	.LBE43:
 2741              	.LBE46:
 2742              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2743              		.loc 1 508 1 view .LVU684
 2744 0ca0 08D04DE2 		sub	sp, sp, #8	@,,
 2745              		.cfi_def_cfa_offset 88
 2746              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2747              		.loc 1 515 44 view .LVU685
 2748 0ca4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2749              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2750              		.loc 1 514 45 view .LVU686
 2751 0ca8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2752              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2753              		.loc 1 510 38 view .LVU687
 2754 0cac 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2755              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2756              		.loc 1 510 11 view .LVU688
 2757 0cb0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2758              	.LVL158:
 511:armwave.c     ****     int w, x;
 2759              		.loc 1 511 5 is_stmt 1 view .LVU689
 512:armwave.c     **** 
 2760              		.loc 1 512 5 view .LVU690
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2761              		.loc 1 514 5 view .LVU691
 2762              		.loc 1 515 5 view .LVU692
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2763              		.loc 1 516 5 view .LVU693
 2764              	.LBB47:
 2765              	.LBI41:
 455:armwave.c     **** {
 2766              		.loc 1 455 6 view .LVU694
 2767              	.LBB44:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2768              		.loc 1 457 5 view .LVU695
 2769              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2770              		.loc 1 457 7 is_stmt 0 view .LVU696
 2771 0cb4 0000000A 		beq	.L154		@,
 458:armwave.c     ****     }
 2772              		.loc 1 458 9 is_stmt 1 view .LVU697
 2773 0cb8 FEFFFFEB 		bl	free		@
 2774              	.LVL159:
 2775              	.L154:
 463:armwave.c     **** 
 2776              		.loc 1 463 5 view .LVU698
 2777              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2778              		.loc 1 463 75 is_stmt 0 view .LVU699
 2779 0cbc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2780 0cc0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2781              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2782              		.loc 1 463 40 view .LVU700
 2783 0cc4 0910A0E1 		mov	r1, r9	@, sets
 2784              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2785              		.loc 1 463 75 view .LVU701
 2786 0cc8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2787              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2788              		.loc 1 463 40 view .LVU702
 2789 0ccc 0400A0E1 		mov	r0, r4	@, _85
 2790 0cd0 FEFFFFEB 		bl	calloc		@
 2791              	.LVL160:
 2792              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2793              		.loc 1 465 7 view .LVU703
 2794 0cd4 000050E3 		cmp	r0, #0	@ tmp191,
 2795              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2796              		.loc 1 463 38 view .LVU704
 2797 0cd8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2798              		.loc 1 465 5 is_stmt 1 view .LVU705
 2799              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2800              		.loc 1 465 7 is_stmt 0 view .LVU706
 2801 0cdc 5A00000A 		beq	.L183		@,
 2802              	.L155:
 2803              	.LVL161:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2804              		.loc 1 465 7 view .LVU707
 2805              	.LBE44:
 2806              	.LBE47:
 2807              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2808              		.loc 1 518 5 discriminator 1 view .LVU708
 2809 0ce0 000059E3 		cmp	r9, #0	@ sets,
 2810 0ce4 550000DA 		ble	.L153		@,
 2811              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2812              		.loc 1 537 45 view .LVU709
 2813 0ce8 5C8A9FED 		vldr.32	s16, .L184	@ tmp258,
 2814              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2815              		.loc 1 540 104 view .LVU710
 2816 0cec 5CCA9FED 		vldr.32	s24, .L184+4	@ tmp259,
 2817              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2818              		.loc 1 518 5 view .LVU711
 2819 0cf0 0070A0E3 		mov	r7, #0	@ set_offset,
 2820              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2821              		.loc 1 519 9 view .LVU712
 2822 0cf4 84A19FE5 		ldr	r10, .L184+32	@ tmp257,
 2823              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2824              		.loc 1 518 5 view .LVU713
 2825 0cf8 0780A0E1 		mov	r8, r7	@ s, set_offset
 2826              	.LVL162:
 2827              	.L156:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2828              		.loc 1 519 9 is_stmt 1 view .LVU714
 2829 0cfc 0810A0E1 		mov	r1, r8	@, s
 2830 0d00 0A00A0E1 		mov	r0, r10	@, tmp257
 2831 0d04 FEFFFFEB 		bl	printf		@
 2832              	.LVL163:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2833              		.loc 1 521 9 view .LVU715
 2834              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2835              		.loc 1 521 39 is_stmt 0 view .LVU716
 2836 0d08 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2837              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2838              		.loc 1 521 9 view .LVU717
 2839 0d0c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2840 0d10 450000DA 		ble	.L157		@,
 2841              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2842              		.loc 1 523 21 view .LVU718
 2843 0d14 53CADFED 		vldr.32	s25, .L184+8	@ tmp200,
 2844              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2845              		.loc 1 537 33 view .LVU719
 2846 0d18 53BA9FED 		vldr.32	s22, .L184+12	@ tmp253,
 2847              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2848              		.loc 1 535 24 view .LVU720
 2849 0d1c 53AADFED 		vldr.32	s21, .L184+16	@ tmp254,
 2850 0d20 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2851              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2852              		.loc 1 521 15 view .LVU721
 2853 0d24 0060A0E3 		mov	r6, #0	@ w,
 2854              	.LVL164:
 2855              	.L164:
 523:armwave.c     **** 
 2856              		.loc 1 523 13 is_stmt 1 view .LVU722
 2857              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2858              		.loc 1 523 21 is_stmt 0 view .LVU723
 2859 0d28 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2860 0d2c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2861              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2862              		.loc 1 525 13 view .LVU724
 2863 0d30 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2864              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2865              		.loc 1 523 21 view .LVU725
 2866 0d34 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2867 0d38 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2868              	.LVL165:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2869              		.loc 1 525 13 is_stmt 1 view .LVU726
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2870              		.loc 1 525 13 is_stmt 0 view .LVU727
 2871 0d3c 370000DA 		ble	.L158		@,
 2872 0d40 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2873              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2874              		.loc 1 540 113 view .LVU728
 2875 0d44 4AAA9FED 		vldr.32	s20, .L184+20	@ tmp229,
 2876 0d48 4A8ADFED 		vldr.32	s17, .L184+24	@ tmp230,
 2877              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2878              		.loc 1 525 19 view .LVU729
 2879 0d4c 0040A0E3 		mov	r4, #0	@ x,
 2880              	.LVL166:
 2881              	.L163:
 526:armwave.c     ****                 noise *= noise;
 2882              		.loc 1 526 17 is_stmt 1 view .LVU730
 2883              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2884              		.loc 1 526 28 is_stmt 0 view .LVU731
 2885 0d50 FEFFFFEB 		bl	rand		@
 2886              	.LVL167:
 2887              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2888              		.loc 1 526 35 view .LVU732
 2889 0d54 7000FFE6 		uxth	r0, r0	@ tmp201,
 2890              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2891              		.loc 1 526 45 view .LVU733
 2892 0d58 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2893 0d5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2894              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2895              		.loc 1 526 24 view .LVU734
 2896 0d60 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2897              	.LVL168:
 527:armwave.c     ****                 noise *= noise;
 2898              		.loc 1 527 17 is_stmt 1 view .LVU735
 2899              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2900              		.loc 1 527 23 is_stmt 0 view .LVU736
 2901 0d64 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2902              	.LVL169:
 528:armwave.c     ****                 noise *= noise;
 2903              		.loc 1 528 17 is_stmt 1 view .LVU737
 2904              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2905              		.loc 1 528 23 is_stmt 0 view .LVU738
 2906 0d68 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2907              	.LVL170:
 529:armwave.c     **** 
 2908              		.loc 1 529 17 is_stmt 1 view .LVU739
 2909              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 2910              		.loc 1 529 23 is_stmt 0 view .LVU740
 2911 0d6c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2912              	.LVL171:
 531:armwave.c     ****                     noise = -noise;
 2913              		.loc 1 531 17 is_stmt 1 view .LVU741
 2914              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2915              		.loc 1 531 21 is_stmt 0 view .LVU742
 2916 0d70 FEFFFFEB 		bl	rand		@
 2917              	.LVL172:
 532:armwave.c     **** 
 2918              		.loc 1 532 21 is_stmt 1 view .LVU743
 2919              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 2920              		.loc 1 531 19 is_stmt 0 view .LVU744
 2921 0d74 020910E3 		tst	r0, #32768	@,
 2922              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 2923              		.loc 1 532 27 view .LVU745
 2924 0d78 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2925              	.LVL173:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2926              		.loc 1 534 17 is_stmt 1 view .LVU746
 535:armwave.c     **** 
 2927              		.loc 1 535 17 view .LVU747
 2928              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2929              		.loc 1 535 27 is_stmt 0 view .LVU748
 2930 0d7c FEFFFFEB 		bl	rand		@
 2931              	.LVL174:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2932              		.loc 1 537 17 is_stmt 1 view .LVU749
 2933              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2934              		.loc 1 537 45 is_stmt 0 view .LVU750
 2935 0d80 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2936              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2937              		.loc 1 537 33 view .LVU751
 2938 0d84 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2939              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2940              		.loc 1 537 45 view .LVU752
 2941 0d88 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2942              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2943              		.loc 1 537 33 view .LVU753
 2944 0d8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2945              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2946              		.loc 1 537 45 view .LVU754
 2947 0d90 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2948              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2949              		.loc 1 537 33 view .LVU755
 2950 0d94 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2951              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2952              		.loc 1 535 34 view .LVU756
 2953 0d98 7000FFE6 		uxth	r0, r0	@ tmp214,
 2954              	.LVL175:
 2955              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2956              		.loc 1 535 44 view .LVU757
 2957 0d9c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2958 0da0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2959              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2960              		.loc 1 535 24 view .LVU758
 2961 0da4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2962              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2963              		.loc 1 537 77 view .LVU759
 2964 0da8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2965              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2966              		.loc 1 537 22 view .LVU760
 2967 0dac C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2968 0db0 FEFFFFEB 		bl	sin		@
 2969              	.LVL176:
 2970              		.loc 1 540 17 is_stmt 1 view .LVU761
 2971              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2972              		.loc 1 534 23 is_stmt 0 view .LVU762
 2973 0db4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2974              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2975              		.loc 1 540 104 view .LVU763
 2976 0db8 0010A0E3 		mov	r1, #0	@ iftmp.24_50,
 2977              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2978              		.loc 1 537 98 view .LVU764
 2979 0dbc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2980              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2981              		.loc 1 537 87 view .LVU765
 2982 0dc0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2983              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2984              		.loc 1 537 98 view .LVU766
 2985 0dc4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2986              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2987              		.loc 1 537 19 view .LVU767
 2988 0dc8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2989              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2990              		.loc 1 540 113 view .LVU768
 2991 0dcc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2992 0dd0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2993 0dd4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2994 0dd8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2995 0ddc 050000DA 		ble	.L160		@,
 2996              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2997              		.loc 1 540 104 discriminator 1 view .LVU769
 2998 0de0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2999 0de4 FF10A0E3 		mov	r1, #255	@ iftmp.24_50,
 3000 0de8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3001 0dec E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3002 0df0 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3003 0df4 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.24_50, %sfp
 3004              	.L160:
 3005              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3006              		.loc 1 540 57 discriminator 12 view .LVU770
 3007 0df8 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3008              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3009              		.loc 1 540 102 discriminator 12 view .LVU771
 3010 0dfc 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3011 0e00 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3012 0e04 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3013              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3014              		.loc 1 525 58 discriminator 12 view .LVU772
 3015 0e08 014084E2 		add	r4, r4, #1	@ x, x,
 3016              	.LVL177:
 3017              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3018              		.loc 1 540 102 discriminator 12 view .LVU773
 3019 0e0c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.24_50, *_40
 3020              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3021              		.loc 1 525 43 discriminator 12 view .LVU774
 3022 0e10 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3023              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3024              		.loc 1 525 13 discriminator 12 view .LVU775
 3025 0e14 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3026 0e18 CCFFFFCA 		bgt	.L163		@,
 3027 0e1c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3028              	.LVL178:
 3029              	.L158:
 3030              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3031              		.loc 1 521 48 discriminator 2 view .LVU776
 3032 0e20 016086E2 		add	r6, r6, #1	@ w, w,
 3033              	.LVL179:
 3034              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3035              		.loc 1 521 9 discriminator 2 view .LVU777
 3036 0e24 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3037 0e28 BEFFFFBA 		blt	.L164		@,
 3038              	.LVL180:
 3039              	.L157:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3040              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU778
 3041              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3042              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU779
 3043 0e2c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3044              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3045              		.loc 1 518 27 discriminator 2 view .LVU780
 3046 0e30 018088E2 		add	r8, r8, #1	@ s, s,
 3047              	.LVL181:
 3048              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3049              		.loc 1 518 5 discriminator 2 view .LVU781
 3050 0e34 080059E1 		cmp	r9, r8	@ sets, s
 3051              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3052              		.loc 1 544 20 discriminator 2 view .LVU782
 3053 0e38 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3054              	.LVL182:
 3055              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3056              		.loc 1 518 5 discriminator 2 view .LVU783
 3057 0e3c AEFFFF1A 		bne	.L156		@,
 3058              	.LVL183:
 3059              	.L153:
 3060              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3061              		.loc 1 546 1 view .LVU784
 3062 0e40 08D08DE2 		add	sp, sp, #8	@,,
 3063              		.cfi_remember_state
 3064              		.cfi_def_cfa_offset 80
 3065              		@ sp needed	@
 3066 0e44 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3067              		.cfi_restore 90
 3068              		.cfi_restore 91
 3069              		.cfi_restore 88
 3070              		.cfi_restore 89
 3071              		.cfi_restore 86
 3072              		.cfi_restore 87
 3073              		.cfi_restore 84
 3074              		.cfi_restore 85
 3075              		.cfi_restore 82
 3076              		.cfi_restore 83
 3077              		.cfi_restore 80
 3078              		.cfi_restore 81
 3079              		.cfi_def_cfa_offset 32
 3080              	.LVL184:
 3081              		.loc 1 546 1 view .LVU785
 3082 0e48 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3083              	.LVL185:
 3084              	.L183:
 3085              		.cfi_restore_state
 3086              	.LBB48:
 3087              	.LBB45:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3088              		.loc 1 466 9 is_stmt 1 view .LVU786
 3089 0e4c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3090 0e50 0920A0E1 		mov	r2, r9	@, sets
 3091 0e54 28009FE5 		ldr	r0, .L184+36	@,
 3092 0e58 FEFFFFEB 		bl	printf		@
 3093              	.LVL186:
 468:armwave.c     ****     }
 3094              		.loc 1 468 9 view .LVU787
 3095 0e5c 9FFFFFEA 		b	.L155		@
 3096              	.L185:
 3097              		.align	2
 3098              	.L184:
 3099 0e60 0000803F 		.word	1065353216
 3100 0e64 00007F43 		.word	1132396544
 3101 0e68 0000003F 		.word	1056964608
 3102 0e6c C3F5C840 		.word	1086911939
 3103 0e70 38FFC74A 		.word	1254620984
 3104 0e74 0000FE42 		.word	1123942400
 3105 0e78 00000043 		.word	1124073472
 3106 0e7c 00000000 		.word	g_armwave_state
 3107 0e80 70020000 		.word	.LC18
 3108 0e84 C8010000 		.word	.LC16
 3109              	.LBE45:
 3110              	.LBE48:
 3111              		.cfi_endproc
 3112              	.LFE75:
 3114              		.align	2
 3115              		.global	armwave_cleanup
 3116              		.syntax unified
 3117              		.arm
 3118              		.fpu vfp
 3120              	armwave_cleanup:
 3121              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3122              		.loc 1 596 1 view -0
 3123              		.cfi_startproc
 3124              		@ args = 0, pretend = 0, frame = 0
 3125              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3126              		.loc 1 597 5 view .LVU789
 3127              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3128              		.loc 1 596 1 is_stmt 0 view .LVU790
 3129 0e88 10402DE9 		push	{r4, lr}	@
 3130              		.cfi_def_cfa_offset 8
 3131              		.cfi_offset 4, -8
 3132              		.cfi_offset 14, -4
 3133              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3134              		.loc 1 597 25 view .LVU791
 3135 0e8c 34409FE5 		ldr	r4, .L188	@ tmp114,
 3136              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3137              		.loc 1 597 5 view .LVU792
 3138 0e90 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3139 0e94 FEFFFFEB 		bl	free		@
 3140              	.LVL187:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3141              		.loc 1 598 5 is_stmt 1 view .LVU793
 3142 0e98 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3143 0e9c FEFFFFEB 		bl	free		@
 3144              	.LVL188:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3145              		.loc 1 599 5 view .LVU794
 3146 0ea0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3147 0ea4 FEFFFFEB 		bl	free		@
 3148              	.LVL189:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3149              		.loc 1 600 5 view .LVU795
 3150 0ea8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3151 0eac FEFFFFEB 		bl	free		@
 3152              	.LVL190:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3153              		.loc 1 602 5 view .LVU796
 3154              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3155              		.loc 1 602 32 is_stmt 0 view .LVU797
 3156 0eb0 0030A0E3 		mov	r3, #0	@ tmp123,
 3157 0eb4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3158              		.loc 1 603 5 is_stmt 1 view .LVU798
 3159              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3160              		.loc 1 603 32 is_stmt 0 view .LVU799
 3161 0eb8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3162              		.loc 1 604 5 is_stmt 1 view .LVU800
 3163              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3164              		.loc 1 604 38 is_stmt 0 view .LVU801
 3165 0ebc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3166              		.loc 1 605 5 is_stmt 1 view .LVU802
 3167              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3168              		.loc 1 605 38 is_stmt 0 view .LVU803
 3169 0ec0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3170              	@ armwave.c:606: }
 606:armwave.c     **** }
 3171              		.loc 1 606 1 view .LVU804
 3172 0ec4 1080BDE8 		pop	{r4, pc}	@
 3173              	.L189:
 3174              		.align	2
 3175              	.L188:
 3176 0ec8 00000000 		.word	g_armwave_state
 3177              		.cfi_endproc
 3178              	.LFE76:
 3180              		.comm	gamma_table,256,4
 3181              		.comm	g_armwave_state,136,4
 3182              		.section	.rodata
 3183              		.align	2
 3184              		.set	.LANCHOR0,. + 0
 3187              	__PRETTY_FUNCTION__.17126:
 3188 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3188      6176655F 
 3188      73657475 
 3188      705F7265 
 3188      6E646572 
 3189 0015 000000   		.space	3
 3192              	__PRETTY_FUNCTION__.17130:
 3193 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3193      6176655F 
 3193      7365745F 
 3193      77617665 
 3193      5F706F69 
 3194 0031 000000   		.space	3
 3197              	__PRETTY_FUNCTION__.17137:
 3198 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3198      6176655F 
 3198      7365745F 
 3198      77617665 
 3198      5F706F69 
 3199              		.section	.rodata.str1.4,"aMS",%progbits,1
 3200              		.align	2
 3201              	.LC0:
 3202 0000 76302E30 		.ascii	"v0.0.1\000"
 3202      2E3100
 3203 0007 00       		.space	1
 3204              	.LC1:
 3205 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3205      61766520 
 3205      76657273 
 3205      696F6E3A 
 3205      2025730A 
 3206 001d 000000   		.space	3
 3207              	.LC2:
 3208 0020 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3208      20653D25 
 3208      6420773D 
 3208      25642077 
 3208      733D2564 
 3209              	.LC3:
 3210 004c 61726D77 		.ascii	"armwave.c\000"
 3210      6176652E 
 3210      6300
 3211 0056 0000     		.space	2
 3212              	.LC4:
 3213 0058 73746172 		.ascii	"start_point < end_point\000"
 3213      745F706F 
 3213      696E7420 
 3213      3C20656E 
 3213      645F706F 
 3214              	.LC5:
 3215 0070 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3215      7566665F 
 3215      73697A65 
 3215      3D25642C 
 3215      20636D70 
 3216 00a3 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3216      5F776964 
 3216      74683D25 
 3216      642C2077 
 3216      6176655F 
 3217 00cd 000000   		.space	3
 3218              	.LC6:
 3219 00d0 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3219      6F632066 
 3219      61696C75 
 3219      72652061 
 3219      6C6C6F63 
 3220 0103 2E636831 		.ascii	".ch1_buffer)\012\000"
 3220      5F627566 
 3220      66657229 
 3220      0A00
 3221 0111 000000   		.space	3
 3222              	.LC7:
 3223 0114 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3223      3A203078 
 3223      25303878 
 3223      20307825 
 3223      30387820 
 3224              	.LC8:
 3225 0138 77617665 		.ascii	"wave_buffer != NULL\000"
 3225      5F627566 
 3225      66657220 
 3225      213D204E 
 3225      554C4C00 
 3226              	.LC9:
 3227 014c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3227      6176655F 
 3227      7365745F 
 3227      77617665 
 3227      5F706F69 
 3228 017f 78636565 		.ascii	"xceeded\000"
 3228      64656400 
 3229 0187 00       		.space	1
 3230              	.LC10:
 3231 0188 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3231      5F627566 
 3231      6665725F 
 3231      70747220 
 3231      213D2030 
 3232 019d 000000   		.space	3
 3233              	.LC11:
 3234 01a0 776200   		.ascii	"wb\000"
 3235 01a3 00       		.space	1
 3236              	.LC12:
 3237 01a4 50330A00 		.ascii	"P3\012\000"
 3238              	.LC13:
 3239 01a8 25642025 		.ascii	"%d %d\012\000"
 3239      640A00
 3240 01af 00       		.space	1
 3241              	.LC14:
 3242 01b0 3235350A 		.ascii	"255\012\000"
 3242      00
 3243 01b5 000000   		.space	3
 3244              	.LC15:
 3245 01b8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3245      25336420 
 3245      2533640A 
 3245      00
 3246 01c5 000000   		.space	3
 3247              	.LC16:
 3248 01c8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3248      6176655F 
 3248      74657374 
 3248      5F627566 
 3248      6665725F 
 3249 01fb 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3249      20627566 
 3249      66657220 
 3249      28256420 
 3249      62797465 
 3250              	.LC17:
 3251 021c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3251      6176655F 
 3251      66696C6C 
 3251      5F706978 
 3251      6275665F 
 3252 024f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3252      20666169 
 3252      6C65642C 
 3252      20726574 
 3252      75726E69 
 3253 026e 0000     		.space	2
 3254              	.LC18:
 3255 0270 43616C63 		.ascii	"Calculating test set %d\012\000"
 3255      756C6174 
 3255      696E6720 
 3255      74657374 
 3255      20736574 
 3256              		.text
 3257              	.Letext0:
 3258              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3259              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3260              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3261              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3262              		.file 7 "/usr/include/stdio.h"
 3263              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3264              		.file 9 "/usr/include/errno.h"
 3265              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3266              		.file 11 "/usr/include/unistd.h"
 3267              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3268              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3269              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3270              		.file 15 "/usr/include/math.h"
 3271              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3272              		.file 17 "/usr/include/time.h"
 3273              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3274              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3275              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3276              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3277              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3278              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3279              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3280              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3281              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3282              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3283              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3284              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3285              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3286              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3287              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3288              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3289              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3290              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3291              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3292              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3293              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3294              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3295              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3296              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3297              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3298              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3299              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3300              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3301              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3302              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3303              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3304              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3305              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3306              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3307              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3308              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3309              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3310              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3311              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3312              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3313              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3314              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3315              		.file 60 "/usr/local/include/python3.8/context.h"
 3316              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3317              		.file 62 "/usr/local/include/python3.8/code.h"
 3318              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3319              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3320              		.file 65 "/usr/local/include/python3.8/import.h"
 3321              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3322              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3323              		.file 68 "/usr/include/malloc.h"
 3324              		.file 69 "armwave.h"
 3325              		.file 70 "/usr/include/stdlib.h"
 3326              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3327              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3328              		.file 73 "<built-in>"
 3329              		.file 74 "/usr/include/assert.h"
