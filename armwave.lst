   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 8
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b;
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     uint16_t value; 
 585              		.loc 1 178 5 view .LVU139
 179:armwave.c     ****     // uint8_t row;
 180:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 586              		.loc 1 180 5 view .LVU140
 587              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 588              		.loc 1 173 1 is_stmt 0 view .LVU141
 589 026c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 590              		.cfi_def_cfa_offset 36
 591              		.cfi_offset 4, -36
 592              		.cfi_offset 5, -32
 593              		.cfi_offset 6, -28
 594              		.cfi_offset 7, -24
 595              		.cfi_offset 8, -20
 596              		.cfi_offset 9, -16
 597              		.cfi_offset 10, -12
 598              		.cfi_offset 11, -8
 599              		.cfi_offset 14, -4
 600              	@ armwave.c:184:     assert(out_buffer != NULL);
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 182:armwave.c     ****     uint32_t offset;
 183:armwave.c     **** 
 184:armwave.c     ****     assert(out_buffer != NULL);
 601              		.loc 1 184 5 view .LVU142
 602 0270 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 603              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 604              		.loc 1 180 15 view .LVU143
 605 0274 70519FE5 		ldr	r5, .L49	@ tmp222,
 606              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 607              		.loc 1 173 1 view .LVU144
 608 0278 0CD04DE2 		sub	sp, sp, #12	@,,
 609              		.cfi_def_cfa_offset 48
 610              	@ armwave.c:180:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 611              		.loc 1 180 15 view .LVU145
 612 027c 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 613              	.LVL22:
 181:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 614              		.loc 1 181 5 is_stmt 1 view .LVU146
 182:armwave.c     **** 
 615              		.loc 1 182 5 view .LVU147
 616              		.loc 1 184 5 view .LVU148
 617 0280 5400000A 		beq	.L47		@,
 185:armwave.c     **** 
 186:armwave.c     ****     // we don't really want to be doing this if possible
 187:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 618              		.loc 1 187 5 view .LVU149
 619              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 620              		.loc 1 187 59 is_stmt 0 view .LVU150
 621 0284 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 622 0288 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 623              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 624              		.loc 1 187 5 view .LVU151
 625 028c 0010A0E3 		mov	r1, #0	@,
 626              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 627              		.loc 1 187 59 view .LVU152
 628 0290 920302E0 		mul	r2, r2, r3	@ tmp181, g_armwave_state.target_height, g_armwave_state.target_width
 629              	@ armwave.c:187:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 630              		.loc 1 187 5 view .LVU153
 631 0294 0221A0E1 		lsl	r2, r2, #2	@, tmp181,
 632 0298 FEFFFFEB 		bl	memset		@
 633              	.LVL23:
 188:armwave.c     **** 
 189:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 634              		.loc 1 189 5 is_stmt 1 view .LVU154
 635              	@ armwave.c:189:     npix = g_armwave_state.target_width * 256; 
 636              		.loc 1 189 10 is_stmt 0 view .LVU155
 637 029c 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 638 02a0 0004A0E1 		lsl	r0, r0, #8	@ npix, g_armwave_state.target_width,
 639              	.LVL24:
 190:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 191:armwave.c     **** 
 192:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 640              		.loc 1 192 5 is_stmt 1 view .LVU156
 641              		.loc 1 192 5 is_stmt 0 view .LVU157
 642 02a4 000050E3 		cmp	r0, #0	@ npix,
 643 02a8 0D0000DA 		ble	.L29		@,
 644              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each 16-bit word within.
 195:armwave.c     ****         wave_word = *base_32ptr++;
 196:armwave.c     **** 
 197:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 198:armwave.c     ****             for(w = 0; w < 2; w++) {
 199:armwave.c     ****                 value = wave_word & 0xffff;
 200:armwave.c     ****                 wave_word >>= 16;
 201:armwave.c     **** 
 202:armwave.c     ****                 if(value != 0) {
 203:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 204:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 645              		.loc 1 204 52 view .LVU158
 646 02ac FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 647              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 648              		.loc 1 203 52 view .LVU159
 649 02b0 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 650              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 206:armwave.c     **** 
 207:armwave.c     ****                     r = MIN(rr, 255);
 208:armwave.c     ****                     g = MIN(gg, 255);
 209:armwave.c     ****                     b = MIN(bb, 255);
 210:armwave.c     **** 
 211:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 212:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 213:armwave.c     **** 
 214:armwave.c     ****                     // TODO: Replace this FP math with integer math: big performance hit converting
 215:armwave.c     ****                     nsub = (n + w) >> 1;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 651              		.loc 1 216 57 view .LVU160
 652 02b4 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 653              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 654              		.loc 1 204 52 view .LVU161
 655 02b8 00308DE5 		str	r3, [sp]	@ _15, %sfp
 656              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 657              		.loc 1 205 52 view .LVU162
 658 02bc F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 659              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 660              		.loc 1 192 11 view .LVU163
 661 02c0 0020A0E3 		mov	r2, #0	@ n,
 662              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 205 52 view .LVU164
 664 02c4 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 665              	.LVL25:
 666              	.L36:
 195:armwave.c     **** 
 667              		.loc 1 195 9 is_stmt 1 view .LVU165
 668              	@ armwave.c:195:         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 669              		.loc 1 195 19 is_stmt 0 view .LVU166
 670 02c8 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_61, offset: 4294967292B]
 671              	.LVL26:
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 672              		.loc 1 197 9 is_stmt 1 view .LVU167
 673              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 674              		.loc 1 197 11 is_stmt 0 view .LVU168
 675 02cc 000053E3 		cmp	r3, #0	@ wave_word,
 676              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 677              		.loc 1 198 19 view .LVU169
 678 02d0 00C0A013 		movne	ip, #0	@ w,
 679              	@ armwave.c:197:         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 2; w++) {
 680              		.loc 1 197 11 view .LVU170
 681 02d4 0400001A 		bne	.L35		@,
 682              	.L32:
 683              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 684              		.loc 1 192 28 view .LVU171
 685 02d8 022082E2 		add	r2, r2, #2	@ n, n,
 686              	.LVL27:
 687              	@ armwave.c:192:     for(n = 0; n < npix; n += 2) {
 192:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 688              		.loc 1 192 5 view .LVU172
 689 02dc 020050E1 		cmp	r0, r2	@ npix, n
 690 02e0 F8FFFFCA 		bgt	.L36		@,
 691              	.LVL28:
 692              	.L29:
 693              	@ armwave.c:228: }
 217:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     xx = (nsub >> 8);
 219:armwave.c     **** 
 220:armwave.c     ****                     for(y = yy; y < ye; y++) {
 221:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 222:armwave.c     ****                         *(out_buffer_base + offset) = word;
 223:armwave.c     ****                     }
 224:armwave.c     ****                 }
 225:armwave.c     ****             }
 226:armwave.c     ****         }
 227:armwave.c     ****     }
 228:armwave.c     **** }
 694              		.loc 1 228 1 view .LVU173
 695 02e4 0CD08DE2 		add	sp, sp, #12	@,,
 696              		.cfi_remember_state
 697              		.cfi_def_cfa_offset 36
 698              		@ sp needed	@
 699 02e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 700              	.LVL29:
 701              	.L35:
 702              		.cfi_restore_state
 199:armwave.c     ****                 wave_word >>= 16;
 703              		.loc 1 199 17 is_stmt 1 view .LVU174
 200:armwave.c     **** 
 704              		.loc 1 200 17 view .LVU175
 705              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 202 19 is_stmt 0 view .LVU176
 707 02ec 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 708 02f0 000051E3 		cmp	r1, #0	@ wave_word,
 709              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 710              		.loc 1 200 27 view .LVU177
 711 02f4 23E8A0E1 		lsr	lr, r3, #16	@ wave_word, wave_word,
 712              	.LVL30:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 713              		.loc 1 202 17 is_stmt 1 view .LVU178
 714              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 715              		.loc 1 202 19 is_stmt 0 view .LVU179
 716 02f8 0700001A 		bne	.L48		@,
 717              	.LVL31:
 718              	.L33:
 719              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 720              		.loc 1 198 13 view .LVU180
 721 02fc 01005CE3 		cmp	ip, #1	@ w,
 722              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 723              		.loc 1 200 27 view .LVU181
 724 0300 0E30A0E1 		mov	r3, lr	@ wave_word, wave_word
 725              	@ armwave.c:198:             for(w = 0; w < 2; w++) {
 198:armwave.c     ****                 value = wave_word & 0xffff;
 726              		.loc 1 198 13 view .LVU182
 727 0304 F3FFFF0A 		beq	.L32		@,
 728              	.LVL32:
 729              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 730              		.loc 1 202 19 view .LVU183
 731 0308 7310FFE6 		uxth	r1, r3	@ wave_word, wave_word
 732 030c 000051E3 		cmp	r1, #0	@ wave_word,
 733 0310 01C0A0E3 		mov	ip, #1	@ w,
 734              	.LVL33:
 199:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 199 17 is_stmt 1 view .LVU184
 200:armwave.c     **** 
 736              		.loc 1 200 17 view .LVU185
 737              	@ armwave.c:200:                 wave_word >>= 16;
 200:armwave.c     **** 
 738              		.loc 1 200 27 is_stmt 0 view .LVU186
 739 0314 23E8A0E1 		lsr	lr, r3, #16	@ wave_word, wave_word,
 740              	.LVL34:
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 741              		.loc 1 202 17 is_stmt 1 view .LVU187
 742              	@ armwave.c:202:                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 743              		.loc 1 202 19 is_stmt 0 view .LVU188
 744 0318 F7FFFF0A 		beq	.L33		@,
 745              	.L48:
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 746              		.loc 1 203 21 is_stmt 1 view .LVU189
 747 031c 0C9082E0 		add	r9, r2, ip	@ _128, n, w
 748              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 749              		.loc 1 203 55 is_stmt 0 view .LVU190
 750 0320 0130A0E1 		mov	r3, r1	@ _12, wave_word
 751              	.LVL35:
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 752              		.loc 1 204 21 is_stmt 1 view .LVU191
 205:armwave.c     **** 
 753              		.loc 1 205 21 view .LVU192
 207:armwave.c     ****                     g = MIN(gg, 255);
 754              		.loc 1 207 21 view .LVU193
 208:armwave.c     ****                     b = MIN(bb, 255);
 755              		.loc 1 208 21 view .LVU194
 209:armwave.c     **** 
 756              		.loc 1 209 21 view .LVU195
 212:armwave.c     **** 
 757              		.loc 1 212 21 view .LVU196
 758              	@ armwave.c:215:                     nsub = (n + w) >> 1;
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 759              		.loc 1 215 26 is_stmt 0 view .LVU197
 760 0324 C910A0E1 		asr	r1, r9, #1	@ nsub, _128,
 761              	.LVL36:
 762              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 763              		.loc 1 205 55 view .LVU198
 764 0328 04709DE5 		ldr	r7, [sp, #4]	@ _18, %sfp
 765              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 766              		.loc 1 216 32 view .LVU199
 767 032c 7110EFE6 		uxtb	r1, r1	@ _31, nsub
 768              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 769              		.loc 1 217 41 view .LVU200
 770 0330 018081E2 		add	r8, r1, #1	@ tmp215, _31,
 771              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 772              		.loc 1 216 40 view .LVU201
 773 0334 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 774              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 775              		.loc 1 217 41 view .LVU202
 776 0338 108A07EE 		vmov	s14, r8	@ int	@ tmp215, tmp215
 777              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 778              		.loc 1 204 55 view .LVU203
 779 033c 00109DE5 		ldr	r1, [sp]	@ _15, %sfp
 780              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 781              		.loc 1 205 55 view .LVU204
 782 0340 970307E0 		mul	r7, r7, r3	@ tmp199, _18, _12
 783              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 784              		.loc 1 216 40 view .LVU205
 785 0344 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp213, _31
 786              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 787              		.loc 1 217 46 view .LVU206
 788 0348 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp215
 789              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 790              		.loc 1 204 55 view .LVU207
 791 034c 91030AE0 		mul	r10, r1, r3	@ tmp203, _15, _12
 792              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 793              		.loc 1 203 55 view .LVU208
 794 0350 930B03E0 		mul	r3, r3, fp	@ tmp209, _12, _11
 795              	.LVL37:
 796              	@ armwave.c:205:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 797              		.loc 1 205 24 view .LVU209
 798 0354 4774A0E1 		asr	r7, r7, #8	@ bb, tmp199,
 799              	.LVL38:
 800              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 801              		.loc 1 209 25 view .LVU210
 802 0358 FF0057E3 		cmp	r7, #255	@ bb,
 803              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 804              		.loc 1 216 40 view .LVU211
 805 035c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp214, tmp213, _33
 806              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 807              		.loc 1 217 46 view .LVU212
 808 0360 267A27EE 		vmul.f32	s14, s14, s13	@ tmp217, tmp216, _33
 809              	@ armwave.c:203:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 810              		.loc 1 203 24 view .LVU213
 811 0364 4314A0E1 		asr	r1, r3, #8	@ rr, tmp209,
 812              	.LVL39:
 813              	@ armwave.c:204:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 814              		.loc 1 204 24 view .LVU214
 815 0368 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp203,
 816              	.LVL40:
 817              	@ armwave.c:209:                     b = MIN(bb, 255);
 209:armwave.c     **** 
 818              		.loc 1 209 25 view .LVU215
 819 036c FF70A0A3 		movge	r7, #255	@ bb,
 820              	.LVL41:
 821              	@ armwave.c:208:                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 822              		.loc 1 208 25 view .LVU216
 823 0370 FF005AE3 		cmp	r10, #255	@ gg,
 824 0374 FFA0A0A3 		movge	r10, #255	@ gg,
 825              	.LVL42:
 826              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 827              		.loc 1 207 25 view .LVU217
 828 0378 FF0051E3 		cmp	r1, #255	@ rr,
 829              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 830              		.loc 1 216 24 view .LVU218
 831 037c E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp214
 832              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 833              		.loc 1 212 56 view .LVU219
 834 0380 0AA4A0E1 		lsl	r10, r10, #8	@ tmp204, gg,
 835              	@ armwave.c:207:                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 836              		.loc 1 207 25 view .LVU220
 837 0384 FF10A0A3 		movge	r1, #255	@ rr,
 838              	.LVL43:
 839              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 840              		.loc 1 212 44 view .LVU221
 841 0388 0778A0E1 		lsl	r7, r7, #16	@ tmp200, bb,
 842 038c FF7807E2 		and	r7, r7, #16711680	@ tmp201, tmp200,
 843              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 844              		.loc 1 212 56 view .LVU222
 845 0390 7AA0FFE6 		uxth	r10, r10	@ tmp205, tmp204
 846              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 847              		.loc 1 212 51 view .LVU223
 848 0394 0A7087E1 		orr	r7, r7, r10	@ tmp207, tmp201, tmp205
 849              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 850              		.loc 1 212 62 view .LVU224
 851 0398 7110EFE6 		uxtb	r1, r1	@ rr, rr
 852              	@ armwave.c:216:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 853              		.loc 1 216 24 view .LVU225
 854 039c 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 855              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 856              		.loc 1 217 24 view .LVU226
 857 03a0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp217
 858              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 859              		.loc 1 212 62 view .LVU227
 860 03a4 011087E1 		orr	r1, r7, r1	@ tmp211, tmp207, rr
 861              	@ armwave.c:212:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 862              		.loc 1 212 26 view .LVU228
 863 03a8 FF7481E3 		orr	r7, r1, #-16777216	@ word, tmp211,
 864              	.LVL44:
 215:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 865              		.loc 1 215 21 is_stmt 1 view .LVU229
 216:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 866              		.loc 1 216 21 view .LVU230
 217:armwave.c     ****                     xx = (nsub >> 8);
 867              		.loc 1 217 21 view .LVU231
 868              	@ armwave.c:218:                     xx = (nsub >> 8);
 218:armwave.c     **** 
 869              		.loc 1 218 32 is_stmt 0 view .LVU232
 870 03ac C994A0E1 		asr	r9, r9, #9	@ xx, _128,
 871              	.LVL45:
 872              	@ armwave.c:217:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 217:armwave.c     ****                     xx = (nsub >> 8);
 873              		.loc 1 217 24 view .LVU233
 874 03b0 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 875              	.LVL46:
 218:armwave.c     **** 
 876              		.loc 1 218 21 is_stmt 1 view .LVU234
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 877              		.loc 1 220 21 view .LVU235
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 878              		.loc 1 220 21 is_stmt 0 view .LVU236
 879 03b4 080053E1 		cmp	r3, r8	@ yy, ye
 880 03b8 CFFFFF2A 		bcs	.L33		@,
 881              	.LVL47:
 882              	.L34:
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 883              		.loc 1 221 25 is_stmt 1 discriminator 3 view .LVU237
 222:armwave.c     ****                     }
 884              		.loc 1 222 25 discriminator 3 view .LVU238
 885              	@ armwave.c:221:                         offset = (xx + (y * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 886              		.loc 1 221 43 is_stmt 0 discriminator 3 view .LVU239
 887 03bc 581095E5 		ldr	r1, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 888              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 889              		.loc 1 222 43 discriminator 3 view .LVU240
 890 03c0 919321E0 		mla	r1, r1, r3, r9	@ tmp221, g_armwave_state.target_width, yy, xx
 891              	.LVL48:
 892              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 893              		.loc 1 220 42 discriminator 3 view .LVU241
 894 03c4 013083E2 		add	r3, r3, #1	@ yy, yy,
 895              	.LVL49:
 896              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 897              		.loc 1 220 21 discriminator 3 view .LVU242
 898 03c8 030058E1 		cmp	r8, r3	@ ye, yy
 899              	@ armwave.c:222:                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 900              		.loc 1 222 53 discriminator 3 view .LVU243
 901 03cc 017186E7 		str	r7, [r6, r1, lsl #2]	@ word, *_43
 902              	@ armwave.c:220:                     for(y = yy; y < ye; y++) {
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 903              		.loc 1 220 21 discriminator 3 view .LVU244
 904 03d0 F9FFFF1A 		bne	.L34		@,
 220:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 905              		.loc 1 220 21 discriminator 3 view .LVU245
 906 03d4 C8FFFFEA 		b	.L33		@
 907              	.LVL50:
 908              	.L47:
 184:armwave.c     **** 
 909              		.loc 1 184 5 is_stmt 1 discriminator 1 view .LVU246
 910 03d8 10309FE5 		ldr	r3, .L49+4	@,
 911 03dc B820A0E3 		mov	r2, #184	@,
 912 03e0 0C109FE5 		ldr	r1, .L49+8	@,
 913 03e4 0C009FE5 		ldr	r0, .L49+12	@,
 914              	.LVL51:
 184:armwave.c     **** 
 915              		.loc 1 184 5 is_stmt 0 discriminator 1 view .LVU247
 916 03e8 FEFFFFEB 		bl	__assert_fail		@
 917              	.LVL52:
 918              	.L50:
 919              		.align	2
 920              	.L49:
 921 03ec 00000000 		.word	g_armwave_state
 922 03f0 00000000 		.word	.LANCHOR0
 923 03f4 20000000 		.word	.LC2
 924 03f8 2C000000 		.word	.LC3
 925              		.cfi_endproc
 926              	.LFE60:
 928              		.global	__aeabi_idiv
 929              		.align	2
 930              		.global	armwave_generate
 931              		.syntax unified
 932              		.arm
 933              		.fpu vfp
 935              	armwave_generate:
 936              	.LFB61:
 229:armwave.c     **** 
 230:armwave.c     **** /*
 231:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 232:armwave.c     ****  */
 233:armwave.c     **** void armwave_generate()
 234:armwave.c     **** {
 937              		.loc 1 234 1 is_stmt 1 view -0
 938              		.cfi_startproc
 939              		@ args = 0, pretend = 0, frame = 16
 940              		@ frame_needed = 0, uses_anonymous_args = 0
 235:armwave.c     ****     uint32_t yy;
 941              		.loc 1 235 5 view .LVU249
 236:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 942              		.loc 1 236 5 view .LVU250
 943              	.LVL53:
 237:armwave.c     **** 
 238:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 944              		.loc 1 238 5 view .LVU251
 945              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 946              		.loc 1 234 1 is_stmt 0 view .LVU252
 947 03fc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 948              		.cfi_def_cfa_offset 36
 949              		.cfi_offset 4, -36
 950              		.cfi_offset 5, -32
 951              		.cfi_offset 6, -28
 952              		.cfi_offset 7, -24
 953              		.cfi_offset 8, -20
 954              		.cfi_offset 9, -16
 955              		.cfi_offset 10, -12
 956              		.cfi_offset 11, -8
 957              		.cfi_offset 14, -4
 958              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 959              		.loc 1 238 5 view .LVU253
 960 0400 0010A0E3 		mov	r1, #0	@,
 961              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 962              		.loc 1 238 58 view .LVU254
 963 0404 14829FE5 		ldr	r8, .L70	@ tmp342,
 964              	@ armwave.c:234: {
 234:armwave.c     ****     uint32_t yy;
 965              		.loc 1 234 1 view .LVU255
 966 0408 14D04DE2 		sub	sp, sp, #20	@,,
 967              		.cfi_def_cfa_offset 56
 968              	@ armwave.c:238:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 969              		.loc 1 238 5 view .LVU256
 970 040c 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 971 0410 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 972 0414 FEFFFFEB 		bl	memset		@
 973              	.LVL54:
 239:armwave.c     **** 
 240:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 974              		.loc 1 240 5 is_stmt 1 view .LVU257
 975              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 976              		.loc 1 240 68 is_stmt 0 view .LVU258
 977 0418 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 978              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 979              		.loc 1 240 38 view .LVU259
 980 041c 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 981              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 982              		.loc 1 240 51 view .LVU260
 983 0420 0310A0E1 		mov	r1, r3	@, _35
 984 0424 0500A0E1 		mov	r0, r5	@, prephitmp_229
 985              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 986              		.loc 1 240 68 view .LVU261
 987 0428 00308DE5 		str	r3, [sp]	@ _35, %sfp
 988              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 989              		.loc 1 240 51 view .LVU262
 990 042c FEFFFFEB 		bl	__aeabi_idiv		@
 991              	.LVL55:
 992              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 993              		.loc 1 240 5 view .LVU263
 994 0430 000050E3 		cmp	r0, #0	@,
 995 0434 7700000A 		beq	.L51		@,
 996 0438 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 997              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 998              		.loc 1 240 12 view .LVU264
 999 043c 0030A0E3 		mov	r3, #0	@ yy,
 1000 0440 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1001              	.LVL56:
 1002              	.L60:
 241:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 242:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 243:armwave.c     **** 
 244:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1003              		.loc 1 244 9 is_stmt 1 discriminator 3 view .LVU265
 1004 0444 D020CDE1 		ldrd	r2, [sp]	@, %sfp
 1005              	.LBB10:
 1006              	.LBB11:
 1007              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1008              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU266
 1009 0448 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1010              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1011              		.loc 1 79 5 discriminator 3 view .LVU267
 1012 044c 000054E3 		cmp	r4, #0	@ prephitmp_239,
 1013              	.LBE11:
 1014              	.LBE10:
 1015              	@ armwave.c:244:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1016              		.loc 1 244 9 discriminator 3 view .LVU268
 1017 0450 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 1018              	.LVL57:
 1019              	.LBB13:
 1020              	.LBI10:
  62:armwave.c     **** {
 1021              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU269
 1022              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 1023              		.loc 1 64 5 discriminator 3 view .LVU270
  65:armwave.c     ****     uint8_t *wave_base;
 1024              		.loc 1 65 5 discriminator 3 view .LVU271
  66:armwave.c     ****     uint8_t *write_buffer_base;
 1025              		.loc 1 66 5 discriminator 3 view .LVU272
  67:armwave.c     ****     uint8_t *write_buffer;
 1026              		.loc 1 67 5 discriminator 3 view .LVU273
  68:armwave.c     **** 
 1027              		.loc 1 68 5 discriminator 3 view .LVU274
  71:armwave.c     **** 
 1028              		.loc 1 71 5 discriminator 3 view .LVU275
 1029              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1030              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU276
 1031 0454 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1032              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1033              		.loc 1 71 40 discriminator 3 view .LVU277
 1034 0458 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 1035              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1036              		.loc 1 71 65 discriminator 3 view .LVU278
 1037 045c 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 1038              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1039              		.loc 1 71 105 discriminator 3 view .LVU279
 1040 0460 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 1041              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1042              		.loc 1 71 52 discriminator 3 view .LVU280
 1043 0464 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 1044 0468 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 1045              	.LVL58:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1046              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU281
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1047              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU282
 1048 046c 610000DA 		ble	.L53		@,
 1049              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1050              		.loc 1 79 11 view .LVU283
 1051 0470 0070A0E3 		mov	r7, #0	@ w,
 1052 0474 043042E2 		sub	r3, r2, #4	@ _32, _5,
 1053 0478 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 1054              	.LVL59:
 1055              	.L59:
  80:armwave.c     **** 
 1056              		.loc 1 80 9 is_stmt 1 view .LVU284
 1057              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1058              		.loc 1 84 9 is_stmt 0 view .LVU285
 1059 047c 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 1060              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1061              		.loc 1 80 64 view .LVU286
 1062 0480 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1063              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1064              		.loc 1 84 9 view .LVU287
 1065 0484 000052E3 		cmp	r2, #0	@ _35,
 1066              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1067              		.loc 1 80 36 view .LVU288
 1068 0488 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 1069              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1070              		.loc 1 80 64 view .LVU289
 1071 048c 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 1072              	.LVL60:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1073              		.loc 1 84 9 is_stmt 1 view .LVU290
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1074              		.loc 1 84 9 is_stmt 0 view .LVU291
 1075 0490 5200000A 		beq	.L54		@,
 1076 0494 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 1077 0498 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 1078              	.LVL61:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1079              		.loc 1 84 9 view .LVU292
 1080 049c 036082E0 		add	r6, r2, r3	@ ivtmp.67, _24, tmp248
 1081              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1082              		.loc 1 84 16 view .LVU293
 1083 04a0 00C0A0E3 		mov	ip, #0	@ yy,
 1084              	.LVL62:
 1085              	.L58:
  87:armwave.c     **** 
 1086              		.loc 1 87 13 is_stmt 1 view .LVU294
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1087              		.loc 1 101 17 view .LVU295
 106:armwave.c     ****                 word >>= 8;
 1088              		.loc 1 106 17 view .LVU296
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1089              		.loc 1 101 17 view .LVU297
 106:armwave.c     ****                 word >>= 8;
 1090              		.loc 1 106 17 view .LVU298
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1091              		.loc 1 101 17 view .LVU299
 106:armwave.c     ****                 word >>= 8;
 1092              		.loc 1 106 17 view .LVU300
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1093              		.loc 1 101 17 view .LVU301
 106:armwave.c     ****                 word >>= 8;
 1094              		.loc 1 106 17 view .LVU302
 1095              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1096              		.loc 1 87 18 is_stmt 0 view .LVU303
 1097 04a4 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 1098              	.LVL63:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1099              		.loc 1 89 13 is_stmt 1 view .LVU304
  91:armwave.c     ****                 
 1100              		.loc 1 91 17 view .LVU305
  94:armwave.c     ****                     continue;
 1101              		.loc 1 94 17 view .LVU306
 1102              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1103              		.loc 1 102 34 is_stmt 0 view .LVU307
 1104 04a8 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 1105              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1106              		.loc 1 94 20 view .LVU308
 1107 04ac FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 1108 04b0 0120A003 		moveq	r2, #1	@ tmp250,
 1109 04b4 0020A013 		movne	r2, #0	@ tmp250,
 1110              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1111              		.loc 1 94 19 view .LVU309
 1112 04b8 FF0059E3 		cmp	r9, #255	@ scale_value,
 1113 04bc 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1114              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1115              		.loc 1 107 22 view .LVU310
 1116 04c0 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1117              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1118              		.loc 1 94 19 view .LVU311
 1119 04c4 000052E3 		cmp	r2, #0	@ tmp255,
 1120              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1121              		.loc 1 102 34 view .LVU312
 1122 04c8 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 1123              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1124              		.loc 1 106 47 view .LVU313
 1125 04cc 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 1126              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1127              		.loc 1 107 22 view .LVU314
 1128 04d0 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 1129 04d4 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 1130              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1131              		.loc 1 94 19 view .LVU315
 1132 04d8 3B00001A 		bne	.L62		@,
 1133              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1134              		.loc 1 102 34 view .LVU316
 1135 04dc 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1136              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1137              		.loc 1 106 47 view .LVU317
 1138 04e0 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 1139              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1140              		.loc 1 94 20 view .LVU318
 1141 04e4 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1142              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1143              		.loc 1 102 34 view .LVU319
 1144 04e8 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1145              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1146              		.loc 1 106 47 view .LVU320
 1147 04ec 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1148              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1149              		.loc 1 102 74 view .LVU321
 1150 04f0 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1151              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1152              		.loc 1 106 47 view .LVU322
 1153 04f4 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1154              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1155              		.loc 1 94 20 view .LVU323
 1156 04f8 01B0A003 		moveq	fp, #1	@ tmp271,
 1157 04fc 00B0A013 		movne	fp, #0	@ tmp271,
 1158              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1159              		.loc 1 94 19 view .LVU324
 1160 0500 FF0054E3 		cmp	r4, #255	@ scale_value,
 1161 0504 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1162 0508 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1163              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1164              		.loc 1 106 47 view .LVU325
 1165 050c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1166              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1167              		.loc 1 94 19 view .LVU326
 1168 0510 000054E3 		cmp	r4, #0	@ tmp276,
 1169              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1170              		.loc 1 106 47 view .LVU327
 1171 0514 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1172 0518 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1173              	.LVL64:
 107:armwave.c     ****             }
 1174              		.loc 1 107 17 is_stmt 1 view .LVU328
  91:armwave.c     ****                 
 1175              		.loc 1 91 17 view .LVU329
  94:armwave.c     ****                     continue;
 1176              		.loc 1 94 17 view .LVU330
 1177              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1178              		.loc 1 94 19 is_stmt 0 view .LVU331
 1179 051c 2A00001A 		bne	.L62		@,
 1180              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1181              		.loc 1 102 34 view .LVU332
 1182 0520 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1183              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1184              		.loc 1 102 99 view .LVU333
 1185 0524 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1186              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1187              		.loc 1 94 20 view .LVU334
 1188 0528 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1189              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1190              		.loc 1 102 34 view .LVU335
 1191 052c 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1192              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1193              		.loc 1 94 20 view .LVU336
 1194 0530 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1195 0534 0120A003 		moveq	r2, #1	@ tmp293,
 1196              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1197              		.loc 1 102 74 view .LVU337
 1198 0538 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1199              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1200              		.loc 1 94 20 view .LVU338
 1201 053c 0020A013 		movne	r2, #0	@ tmp293,
 1202              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1203              		.loc 1 106 47 view .LVU339
 1204 0540 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1205 0544 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1206              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1207              		.loc 1 94 19 view .LVU340
 1208 0548 FF005EE3 		cmp	lr, #255	@ scale_value,
 1209 054c 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1210 0550 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1211              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1212              		.loc 1 106 47 view .LVU341
 1213 0554 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1214              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1215              		.loc 1 94 19 view .LVU342
 1216 0558 00005EE3 		cmp	lr, #0	@ tmp298,
 1217              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1218              		.loc 1 106 47 view .LVU343
 1219 055c 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1220 0560 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1221              		.loc 1 107 17 is_stmt 1 view .LVU344
 1222              	.LVL65:
  91:armwave.c     ****                 
 1223              		.loc 1 91 17 view .LVU345
  94:armwave.c     ****                     continue;
 1224              		.loc 1 94 17 view .LVU346
 1225              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1226              		.loc 1 94 19 is_stmt 0 view .LVU347
 1227 0564 1800001A 		bne	.L62		@,
 1228              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1229              		.loc 1 102 34 view .LVU348
 1230 0568 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1231              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1232              		.loc 1 94 20 view .LVU349
 1233 056c 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1234              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1235              		.loc 1 106 47 view .LVU350
 1236 0570 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1237              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1238              		.loc 1 102 34 view .LVU351
 1239 0574 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1240              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1241              		.loc 1 102 99 view .LVU352
 1242 0578 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1243              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1244              		.loc 1 102 74 view .LVU353
 1245 057c 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1246              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1247              		.loc 1 106 47 view .LVU354
 1248 0580 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1249              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1250              		.loc 1 94 20 view .LVU355
 1251 0584 01E0A003 		moveq	lr, #1	@ tmp314,
 1252 0588 00E0A013 		movne	lr, #0	@ tmp314,
 1253              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1254              		.loc 1 94 19 view .LVU356
 1255 058c FF0053E3 		cmp	r3, #255	@ word,
 1256 0590 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1257              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1258              		.loc 1 106 47 view .LVU357
 1259 0594 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1260              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1261              		.loc 1 94 19 view .LVU358
 1262 0598 00005EE3 		cmp	lr, #0	@ tmp319,
 1263              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1264              		.loc 1 106 47 view .LVU359
 1265 059c 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1266 05a0 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1267              		.loc 1 107 17 is_stmt 1 view .LVU360
 1268              	.LVL66:
  91:armwave.c     ****                 
 1269              		.loc 1 91 17 view .LVU361
  94:armwave.c     ****                     continue;
 1270              		.loc 1 94 17 view .LVU362
 1271              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1272              		.loc 1 94 19 is_stmt 0 view .LVU363
 1273 05a4 0800001A 		bne	.L62		@,
 1274              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1275              		.loc 1 102 34 view .LVU364
 1276 05a8 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1277 05ac 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1278              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1279              		.loc 1 102 99 view .LVU365
 1280 05b0 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1281              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1282              		.loc 1 102 34 view .LVU366
 1283 05b4 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1284              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1285              		.loc 1 102 74 view .LVU367
 1286 05b8 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1287              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1288              		.loc 1 106 47 view .LVU368
 1289 05bc 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1290 05c0 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1291 05c4 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1292 05c8 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1293              		.loc 1 107 17 is_stmt 1 view .LVU369
 1294              	.LVL67:
 1295              	.L62:
 1296              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1297              		.loc 1 84 9 is_stmt 0 view .LVU370
 1298 05cc 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1299              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1300              		.loc 1 84 37 view .LVU371
 1301 05d0 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1302              	.LVL68:
 1303              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1304              		.loc 1 84 9 view .LVU372
 1305 05d4 0C0053E1 		cmp	r3, ip	@ _35, yy
 1306 05d8 B1FFFF8A 		bhi	.L58		@,
 1307 05dc 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1308              	.LVL69:
 1309              	.L54:
 1310              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1311              		.loc 1 79 44 view .LVU373
 1312 05e0 017087E2 		add	r7, r7, #1	@ w, w,
 1313              	.LVL70:
 1314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1315              		.loc 1 79 5 view .LVU374
 1316 05e4 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1317 05e8 A3FFFFBA 		blt	.L59		@,
 1318 05ec 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1319 05f0 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1320 05f4 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1321              	.LVL71:
 1322              	.L53:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1323              		.loc 1 79 5 view .LVU375
 1324              	.LBE12:
 1325              	.LBE13:
 245:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1326              		.loc 1 245 9 is_stmt 1 discriminator 3 view .LVU376
 246:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1327              		.loc 1 246 9 discriminator 3 view .LVU377
 1328              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1329              		.loc 1 240 51 is_stmt 0 discriminator 3 view .LVU378
 1330 05f8 00109DE5 		ldr	r1, [sp]	@, %sfp
 1331              	.LVL72:
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1332              		.loc 1 240 51 discriminator 3 view .LVU379
 1333 05fc 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1334 0600 FEFFFFEB 		bl	__aeabi_idiv		@
 1335              	.LVL73:
 1336              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1337              		.loc 1 240 86 discriminator 3 view .LVU380
 1338 0604 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1339 0608 013083E2 		add	r3, r3, #1	@ yy, yy,
 1340 060c 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1341              	.LVL74:
 1342              	@ armwave.c:240:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 240:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1343              		.loc 1 240 5 discriminator 3 view .LVU381
 1344 0610 030050E1 		cmp	r0, r3	@, yy
 1345 0614 8AFFFF8A 		bhi	.L60		@,
 1346              	.LVL75:
 1347              	.L51:
 1348              	@ armwave.c:250: }
 247:armwave.c     ****     }
 248:armwave.c     **** 
 249:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 250:armwave.c     **** }
 1349              		.loc 1 250 1 view .LVU382
 1350 0618 14D08DE2 		add	sp, sp, #20	@,,
 1351              		.cfi_def_cfa_offset 36
 1352              		@ sp needed	@
 1353 061c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1354              	.L71:
 1355              		.align	2
 1356              	.L70:
 1357 0620 00000000 		.word	g_armwave_state
 1358              		.cfi_endproc
 1359              	.LFE61:
 1361              		.align	2
 1362              		.global	armwave_setup_render
 1363              		.syntax unified
 1364              		.arm
 1365              		.fpu vfp
 1367              	armwave_setup_render:
 1368              	.LVL76:
 1369              	.LFB62:
 251:armwave.c     **** 
 252:armwave.c     **** /*
 253:armwave.c     ****  * Setup the renderer with passed parameters.
 254:armwave.c     ****  */
 255:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 256:armwave.c     **** {
 1370              		.loc 1 256 1 is_stmt 1 view -0
 1371              		.cfi_startproc
 1372              		@ args = 12, pretend = 0, frame = 0
 1373              		@ frame_needed = 0, uses_anonymous_args = 0
 257:armwave.c     ****     uint32_t length, xx;
 1374              		.loc 1 257 5 view .LVU384
 258:armwave.c     ****     float points_per_pixel;
 1375              		.loc 1 258 5 view .LVU385
 259:armwave.c     **** 
 260:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1376              		.loc 1 260 5 view .LVU386
 1377              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1378              		.loc 1 256 1 is_stmt 0 view .LVU387
 1379 0624 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1380              		.cfi_def_cfa_offset 28
 1381              		.cfi_offset 4, -28
 1382              		.cfi_offset 5, -24
 1383              		.cfi_offset 6, -20
 1384              		.cfi_offset 7, -16
 1385              		.cfi_offset 8, -12
 1386              		.cfi_offset 9, -8
 1387              		.cfi_offset 14, -4
 1388 0628 028B2DED 		vpush.64	{d8}	@
 1389              		.cfi_def_cfa_offset 36
 1390              		.cfi_offset 80, -36
 1391              		.cfi_offset 81, -32
 1392 062c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1393 0630 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1394 0634 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1395 0638 14D04DE2 		sub	sp, sp, #20	@,,
 1396              		.cfi_def_cfa_offset 56
 1397              	@ armwave.c:256: {
 256:armwave.c     ****     uint32_t length, xx;
 1398              		.loc 1 256 1 view .LVU388
 1399 063c 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1400 0640 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1401 0644 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1402              	@ armwave.c:260:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1403              		.loc 1 260 5 view .LVU389
 1404 0648 00308DE5 		str	r3, [sp]	@ wave_stride,
 1405 064c F460CDE1 		strd	r6, [sp, #4]	@,,
 1406 0650 0230A0E1 		mov	r3, r2	@, waves_max
 1407              	.LVL77:
 1408              		.loc 1 260 5 view .LVU390
 1409 0654 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1410 0658 0120A0E1 		mov	r2, r1	@, end_point
 1411              	.LVL78:
 1412              		.loc 1 260 5 view .LVU391
 1413 065c 0010A0E1 		mov	r1, r0	@, start_point
 1414              	.LVL79:
 1415              		.loc 1 260 5 view .LVU392
 1416 0660 DC019FE5 		ldr	r0, .L86+12	@,
 1417              	.LVL80:
 1418              		.loc 1 260 5 view .LVU393
 1419 0664 FEFFFFEB 		bl	printf		@
 1420              	.LVL81:
 261:armwave.c     **** 
 262:armwave.c     ****     // TODO these asserts should instead raise PyExc
 263:armwave.c     ****     assert(start_point < end_point);
 1421              		.loc 1 263 5 is_stmt 1 view .LVU394
 1422 0668 050054E1 		cmp	r4, r5	@ start_point, end_point
 1423 066c 6200002A 		bcs	.L83		@,
 264:armwave.c     **** 
 265:armwave.c     ****     /*
 266:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 267:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 268:armwave.c     **** 
 269:armwave.c     ****     if(target_height == 256) {
 270:armwave.c     ****         g_armwave_state.row_shift = 8;
 271:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 272:armwave.c     ****     } else if(target_height == 512) {
 273:armwave.c     ****         g_armwave_state.row_shift = 9;
 274:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 275:armwave.c     ****     } else if(target_height == 1024) {
 276:armwave.c     ****         g_armwave_state.row_shift = 10;
 277:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 278:armwave.c     ****     } else if(target_height == 2048) {
 279:armwave.c     ****         g_armwave_state.row_shift = 11;
 280:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 281:armwave.c     ****     }
 282:armwave.c     ****     */
 283:armwave.c     **** 
 284:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 285:armwave.c     ****     g_armwave_state.xstride = target_height;
 1424              		.loc 1 285 5 view .LVU395
 1425              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 287:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 288:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 289:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 290:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 291:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 292:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 293:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 294:armwave.c     ****     g_armwave_state.target_width = target_width;
 295:armwave.c     ****     g_armwave_state.target_height = target_height;
 296:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1426              		.loc 1 296 45 is_stmt 0 view .LVU396
 1427 0670 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1428              	.LVL82:
 1429              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1430              		.loc 1 286 49 view .LVU397
 1431 0674 6F6A9FED 		vldr.32	s12, .L86	@ tmp175,
 1432              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 297:armwave.c     **** 
 298:armwave.c     ****     // Calculate compound scaler
 299:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 300:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1433              		.loc 1 300 48 view .LVU398
 1434 0678 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1435              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1436              		.loc 1 300 79 view .LVU399
 1437 067c 6E6ADFED 		vldr.32	s13, .L86+4	@ tmp199,
 1438              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1439              		.loc 1 293 90 view .LVU400
 1440 0680 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1441              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1442              		.loc 1 285 29 view .LVU401
 1443 0684 BC419FE5 		ldr	r4, .L86+16	@ tmp243,
 1444              	.LVL83:
 1445              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1446              		.loc 1 300 48 view .LVU402
 1447 0688 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1448              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1449              		.loc 1 286 49 view .LVU403
 1450 068c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1451              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1452              		.loc 1 291 42 view .LVU404
 1453 0690 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1454              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1455              		.loc 1 293 95 view .LVU405
 1456 0694 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1457              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1458              		.loc 1 286 49 view .LVU406
 1459 0698 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1460              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1461              		.loc 1 300 48 view .LVU407
 1462 069c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1463              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 301:armwave.c     **** 
 302:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1464              		.loc 1 302 5 view .LVU408
 1465 06a0 04508DE5 		str	r5, [sp, #4]	@ _13,
 1466 06a4 00608DE5 		str	r6, [sp]	@ target_width,
 1467              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1468              		.loc 1 293 95 view .LVU409
 1469 06a8 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1470              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1471              		.loc 1 300 48 view .LVU410
 1472 06ac E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1473              	@ armwave.c:285:     g_armwave_state.xstride = target_height;
 285:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1474              		.loc 1 285 29 view .LVU411
 1475 06b0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1476              		.loc 1 286 5 is_stmt 1 view .LVU412
 1477              	@ armwave.c:295:     g_armwave_state.target_height = target_height;
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1478              		.loc 1 295 35 is_stmt 0 view .LVU413
 1479 06b4 F865C4E1 		strd	r6, [r4, #88]	@, tmp243,
 1480              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1481              		.loc 1 302 5 view .LVU414
 1482 06b8 0118A0E3 		mov	r1, #65536	@ tmp202,
 1483              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1484              		.loc 1 292 37 view .LVU415
 1485 06bc 017CA0E3 		mov	r7, #256	@ tmp185,
 1486              	@ armwave.c:288:     g_armwave_state.wave_stride = wave_stride;
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1487              		.loc 1 288 33 view .LVU416
 1488 06c0 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1489              	@ armwave.c:289:     g_armwave_state.waves_max = waves_max;
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1490              		.loc 1 289 31 view .LVU417
 1491 06c4 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1492              	@ armwave.c:290:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1493              		.loc 1 290 27 view .LVU418
 1494 06c8 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1495              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1496              		.loc 1 300 48 view .LVU419
 1497 06cc 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1498              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1499              		.loc 1 302 5 view .LVU420
 1500 06d0 08108DE5 		str	r1, [sp, #8]	@ tmp202,
 1501 06d4 70019FE5 		ldr	r0, .L86+20	@,
 1502 06d8 0310A0E1 		mov	r1, r3	@, tmp190
 1503              	@ armwave.c:291:     g_armwave_state.size = target_height * target_width;
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1504              		.loc 1 291 26 view .LVU421
 1505 06dc 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1506              	@ armwave.c:293:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1507              		.loc 1 293 34 view .LVU422
 1508 06e0 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1509              	@ armwave.c:296:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     **** 
 1510              		.loc 1 296 33 view .LVU423
 1511 06e4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1512              	@ armwave.c:292:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1513              		.loc 1 292 37 view .LVU424
 1514 06e8 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1515              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1516              		.loc 1 286 49 view .LVU425
 1517 06ec 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1518              	@ armwave.c:300:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 300:armwave.c     **** 
 1519              		.loc 1 300 79 view .LVU426
 1520 06f0 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1521              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1522              		.loc 1 299 42 view .LVU427
 1523 06f4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1524              	@ armwave.c:286:     g_armwave_state.vscale_frac = target_height / 255.0f;
 286:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1525              		.loc 1 286 33 view .LVU428
 1526 06f8 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1527              		.loc 1 287 5 is_stmt 1 view .LVU429
 1528              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1529              		.loc 1 299 42 is_stmt 0 view .LVU430
 1530 06fc 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1531              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1532              		.loc 1 287 30 view .LVU431
 1533 0700 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1534              	@ armwave.c:302:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1535              		.loc 1 302 5 view .LVU432
 1536 0704 0C30A0E1 		mov	r3, ip	@, _19
 1537 0708 0C20A0E1 		mov	r2, ip	@, tmp3
 1538              	@ armwave.c:299:     g_armwave_state.cmp_x_bitdepth_scale = \
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1539              		.loc 1 299 42 view .LVU433
 1540 070c 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1541              	@ armwave.c:287:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 287:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1542              		.loc 1 287 30 view .LVU434
 1543 0710 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 288:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1544              		.loc 1 288 5 is_stmt 1 view .LVU435
 289:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1545              		.loc 1 289 5 view .LVU436
 290:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1546              		.loc 1 290 5 view .LVU437
 291:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1547              		.loc 1 291 5 view .LVU438
 292:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1548              		.loc 1 292 5 view .LVU439
 293:armwave.c     ****     g_armwave_state.target_width = target_width;
 1549              		.loc 1 293 5 view .LVU440
 294:armwave.c     ****     g_armwave_state.target_height = target_height;
 1550              		.loc 1 294 5 view .LVU441
 295:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1551              		.loc 1 295 5 view .LVU442
 296:armwave.c     **** 
 1552              		.loc 1 296 5 view .LVU443
 299:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1553              		.loc 1 299 5 view .LVU444
 1554              		.loc 1 302 5 view .LVU445
 1555 0714 FEFFFFEB 		bl	printf		@
 1556              	.LVL84:
 303:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 304:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 305:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 306:armwave.c     **** 
 307:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 308:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 309:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 310:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1557              		.loc 1 310 5 view .LVU446
 1558              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 311:armwave.c     **** 
 312:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1559              		.loc 1 312 23 is_stmt 0 view .LVU447
 1560 0718 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1561              	@ armwave.c:310:     g_armwave_state.slice_height = 256; // 64;  
 310:armwave.c     **** 
 1562              		.loc 1 310 34 view .LVU448
 1563 071c 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1564              		.loc 1 312 5 is_stmt 1 view .LVU449
 1565              	@ armwave.c:312:     if(g_armwave_state.ch1_buffer != NULL)
 1566              		.loc 1 312 7 is_stmt 0 view .LVU450
 1567 0720 000050E3 		cmp	r0, #0	@ _20,
 1568 0724 0000000A 		beq	.L74		@,
 313:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1569              		.loc 1 313 9 is_stmt 1 view .LVU451
 1570 0728 FEFFFFEB 		bl	free		@
 1571              	.LVL85:
 1572              	.L74:
 314:armwave.c     **** 
 315:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1573              		.loc 1 315 5 view .LVU452
 1574              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1575              		.loc 1 315 34 is_stmt 0 view .LVU453
 1576 072c 0110A0E3 		mov	r1, #1	@,
 1577 0730 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1578 0734 FEFFFFEB 		bl	calloc		@
 1579              	.LVL86:
 1580              	@ armwave.c:317:     assert(g_armwave_state.ch1_buffer != NULL);
 316:armwave.c     **** 
 317:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1581              		.loc 1 317 5 view .LVU454
 1582 0738 000050E3 		cmp	r0, #0	@ _23,
 1583              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1584              		.loc 1 315 34 view .LVU455
 1585 073c 0070A0E1 		mov	r7, r0	@ _23,
 1586              	@ armwave.c:315:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 315:armwave.c     **** 
 1587              		.loc 1 315 32 view .LVU456
 1588 0740 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1589              		.loc 1 317 5 is_stmt 1 view .LVU457
 1590 0744 3600000A 		beq	.L84		@,
 318:armwave.c     **** 
 319:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 320:armwave.c     ****     length = end_point - start_point;
 1591              		.loc 1 320 5 view .LVU458
 1592              	.LVL87:
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1593              		.loc 1 321 5 view .LVU459
 1594              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1595              		.loc 1 321 34 is_stmt 0 view .LVU460
 1596 0748 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1597              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 1598              		.loc 1 321 22 view .LVU461
 1599 074c 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1600              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1601              		.loc 1 322 60 view .LVU462
 1602 0750 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp254, g_armwave_state.slice_height
 1603              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1604              		.loc 1 323 40 view .LVU463
 1605 0754 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1606              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1607              		.loc 1 321 34 view .LVU464
 1608 0758 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 1609              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1610              		.loc 1 321 22 view .LVU465
 1611 075c 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp215, _13
 1612              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1613              		.loc 1 322 60 view .LVU466
 1614 0760 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp219, tmp254
 1615              	@ armwave.c:321:     points_per_pixel = length / ((float)(target_width));
 321:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1616              		.loc 1 321 22 view .LVU467
 1617 0764 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp215, tmp216
 1618              	.LVL88:
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1619              		.loc 1 322 5 is_stmt 1 view .LVU468
 1620              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1621              		.loc 1 322 60 is_stmt 0 view .LVU469
 1622 0768 087A67EE 		vmul.f32	s15, s14, s16	@ tmp221, tmp219, points_per_pixel
 1623              	@ armwave.c:322:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 322:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1624              		.loc 1 322 41 view .LVU470
 1625 076c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp222, tmp221
 1626 0770 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp222, g_armwave_state.slice_record_height
 1627              		.loc 1 323 5 is_stmt 1 view .LVU471
 1628              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1629              		.loc 1 323 40 is_stmt 0 view .LVU472
 1630 0774 FEFFFFEB 		bl	malloc		@
 1631              	.LVL89:
 1632              	@ armwave.c:325:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1633              		.loc 1 325 5 view .LVU473
 1634 0778 000050E3 		cmp	r0, #0	@ _31,
 1635              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1636              		.loc 1 323 40 view .LVU474
 1637 077c 0060A0E1 		mov	r6, r0	@ _31,
 1638              	@ armwave.c:323:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 323:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1639              		.loc 1 323 38 view .LVU475
 1640 0780 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1641              		.loc 1 325 5 is_stmt 1 view .LVU476
 1642 0784 2100000A 		beq	.L85		@,
 1643              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 326:armwave.c     **** 
 327:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 328:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1644              		.loc 1 328 54 is_stmt 0 view .LVU477
 1645 0788 2C7ADFED 		vldr.32	s15, .L86+8	@ tmp231,
 1646 078c 020040E2 		sub	r0, r0, #2	@ ivtmp.79, _31,
 1647              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1648              		.loc 1 327 12 view .LVU478
 1649 0790 0030A0E3 		mov	r3, #0	@ xx,
 1650              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1651              		.loc 1 328 54 view .LVU479
 1652 0794 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp231, points_per_pixel
 1653              	.L77:
 1654              	.LVL90:
 1655              		.loc 1 328 9 is_stmt 1 discriminator 3 view .LVU480
 1656              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1657              		.loc 1 328 74 is_stmt 0 discriminator 3 view .LVU481
 1658 0798 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1659              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1660              		.loc 1 327 32 discriminator 3 view .LVU482
 1661 079c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1662              	.LVL91:
 1663              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1664              		.loc 1 327 5 discriminator 3 view .LVU483
 1665 07a0 030055E1 		cmp	r5, r3	@ _13, xx
 1666              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1667              		.loc 1 328 74 discriminator 3 view .LVU484
 1668 07a4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp232, xx
 1669 07a8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp233, tmp232, _32
 1670              	@ armwave.c:328:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1671              		.loc 1 328 46 discriminator 3 view .LVU485
 1672 07ac E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp234, tmp233
 1673 07b0 902A17EE 		vmov	r2, s15	@ int	@ tmp234, tmp234
 1674 07b4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp234, MEM[base: _101, offset: 0B]
 1675              	@ armwave.c:327:     for(xx = 0; xx < length; xx++) {
 327:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1676              		.loc 1 327 5 discriminator 3 view .LVU486
 1677 07b8 F6FFFF1A 		bne	.L77		@,
 329:armwave.c     **** 
 330:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 331:armwave.c     ****     }
 332:armwave.c     **** 
 333:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1678              		.loc 1 333 5 is_stmt 1 view .LVU487
 1679              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1680              		.loc 1 333 34 is_stmt 0 view .LVU488
 1681 07bc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1682 07c0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1683 07c4 FEFFFFEB 		bl	malloc		@
 1684              	.LVL92:
 1685              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 334:armwave.c     **** 
 335:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1686              		.loc 1 335 5 view .LVU489
 1687 07c8 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1688 07cc 0620A0E1 		mov	r2, r6	@, _31
 1689 07d0 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1690 07d4 0710A0E1 		mov	r1, r7	@, _23
 1691              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1692              		.loc 1 333 34 view .LVU490
 1693 07d8 00C0A0E1 		mov	ip, r0	@ tmp238,
 1694              	@ armwave.c:335:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1695              		.loc 1 335 5 view .LVU491
 1696 07dc 0030A0E1 		mov	r3, r0	@, tmp238
 1697              	@ armwave.c:333:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 333:armwave.c     **** 
 1698              		.loc 1 333 32 view .LVU492
 1699 07e0 68C084E5 		str	ip, [r4, #104]	@ tmp238, g_armwave_state.out_pixbuf
 1700              		.loc 1 335 5 is_stmt 1 view .LVU493
 1701 07e4 64009FE5 		ldr	r0, .L86+24	@,
 1702 07e8 FEFFFFEB 		bl	printf		@
 1703              	.LVL93:
 336:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 337:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 338:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 339:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 340:armwave.c     **** 
 341:armwave.c     ****     malloc_stats();
 1704              		.loc 1 341 5 view .LVU494
 1705              	@ armwave.c:342: }
 342:armwave.c     **** }
 1706              		.loc 1 342 1 is_stmt 0 view .LVU495
 1707 07ec 14D08DE2 		add	sp, sp, #20	@,,
 1708              		.cfi_remember_state
 1709              		.cfi_def_cfa_offset 36
 1710              		@ sp needed	@
 1711 07f0 028BBDEC 		vldm	sp!, {d8}	@
 1712              		.cfi_restore 80
 1713              		.cfi_restore 81
 1714              		.cfi_def_cfa_offset 28
 1715              	.LVL94:
 1716              		.loc 1 342 1 view .LVU496
 1717 07f4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1718              		.cfi_restore 14
 1719              		.cfi_restore 9
 1720              		.cfi_restore 8
 1721              		.cfi_restore 7
 1722              		.cfi_restore 6
 1723              		.cfi_restore 5
 1724              		.cfi_restore 4
 1725              		.cfi_def_cfa_offset 0
 1726              	.LVL95:
 1727              	@ armwave.c:341:     malloc_stats();
 341:armwave.c     **** }
 1728              		.loc 1 341 5 view .LVU497
 1729 07f8 FEFFFFEA 		b	malloc_stats		@
 1730              	.LVL96:
 1731              	.L83:
 1732              		.cfi_restore_state
 263:armwave.c     **** 
 1733              		.loc 1 263 5 is_stmt 1 discriminator 1 view .LVU498
 1734 07fc 50309FE5 		ldr	r3, .L86+28	@,
 1735 0800 50209FE5 		ldr	r2, .L86+32	@,
 1736 0804 50109FE5 		ldr	r1, .L86+36	@,
 1737 0808 50009FE5 		ldr	r0, .L86+40	@,
 1738 080c FEFFFFEB 		bl	__assert_fail		@
 1739              	.LVL97:
 1740              	.L85:
 325:armwave.c     **** 
 1741              		.loc 1 325 5 discriminator 1 view .LVU499
 1742 0810 3C309FE5 		ldr	r3, .L86+28	@,
 1743 0814 48209FE5 		ldr	r2, .L86+44	@,
 1744 0818 3C109FE5 		ldr	r1, .L86+36	@,
 1745 081c 44009FE5 		ldr	r0, .L86+48	@,
 1746 0820 FEFFFFEB 		bl	__assert_fail		@
 1747              	.LVL98:
 1748              	.L84:
 317:armwave.c     **** 
 1749              		.loc 1 317 5 discriminator 1 view .LVU500
 1750 0824 28309FE5 		ldr	r3, .L86+28	@,
 1751 0828 3C209FE5 		ldr	r2, .L86+52	@,
 1752 082c 28109FE5 		ldr	r1, .L86+36	@,
 1753 0830 38009FE5 		ldr	r0, .L86+56	@,
 1754 0834 FEFFFFEB 		bl	__assert_fail		@
 1755              	.LVL99:
 1756              	.L87:
 1757              		.align	2
 1758              	.L86:
 1759 0838 00007F43 		.word	1132396544
 1760 083c 00008047 		.word	1199570944
 1761 0840 0000803F 		.word	1065353216
 1762 0844 40000000 		.word	.LC4
 1763 0848 00000000 		.word	g_armwave_state
 1764 084c 84000000 		.word	.LC6
 1765 0850 34010000 		.word	.LC9
 1766 0854 1C000000 		.word	.LANCHOR0+28
 1767 0858 07010000 		.word	263
 1768 085c 20000000 		.word	.LC2
 1769 0860 6C000000 		.word	.LC5
 1770 0864 45010000 		.word	325
 1771 0868 08010000 		.word	.LC8
 1772 086c 3D010000 		.word	317
 1773 0870 E4000000 		.word	.LC7
 1774              		.cfi_endproc
 1775              	.LFE62:
 1777              		.align	2
 1778              		.global	armwave_set_wave_pointer
 1779              		.syntax unified
 1780              		.arm
 1781              		.fpu vfp
 1783              	armwave_set_wave_pointer:
 1784              	.LVL100:
 1785              	.LFB63:
 343:armwave.c     **** 
 344:armwave.c     **** /*
 345:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 346:armwave.c     ****  * in the future.
 347:armwave.c     ****  */
 348:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 349:armwave.c     **** {
 1786              		.loc 1 349 1 view -0
 1787              		.cfi_startproc
 1788              		@ args = 0, pretend = 0, frame = 0
 1789              		@ frame_needed = 0, uses_anonymous_args = 0
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1790              		.loc 1 350 5 view .LVU502
 1791 0874 000050E3 		cmp	r0, #0	@ wave_buffer
 1792              		.loc 1 350 5 is_stmt 0 view .LVU503
 1793 0878 0200000A 		beq	.L93		@,
 351:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1794              		.loc 1 351 5 is_stmt 1 view .LVU504
 1795              	@ armwave.c:351:     g_armwave_state.wave_buffer = wave_buffer;
 1796              		.loc 1 351 33 is_stmt 0 view .LVU505
 1797 087c 1C309FE5 		ldr	r3, .L94	@ tmp116,
 1798 0880 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1799 0884 1EFF2FE1 		bx	lr	@
 1800              	.L93:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1801              		.loc 1 350 5 is_stmt 1 discriminator 1 view .LVU506
 1802              	@ armwave.c:349: {
 349:armwave.c     ****     assert(wave_buffer != NULL);
 1803              		.loc 1 349 1 is_stmt 0 discriminator 1 view .LVU507
 1804 0888 10402DE9 		push	{r4, lr}	@
 1805              		.cfi_def_cfa_offset 8
 1806              		.cfi_offset 4, -8
 1807              		.cfi_offset 14, -4
 1808              	@ armwave.c:350:     assert(wave_buffer != NULL);
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1809              		.loc 1 350 5 discriminator 1 view .LVU508
 1810 088c 10309FE5 		ldr	r3, .L94+4	@,
 1811 0890 10209FE5 		ldr	r2, .L94+8	@,
 1812 0894 10109FE5 		ldr	r1, .L94+12	@,
 1813 0898 10009FE5 		ldr	r0, .L94+16	@,
 1814              	.LVL101:
 350:armwave.c     ****     assert(wave_buffer != NULL);
 1815              		.loc 1 350 5 discriminator 1 view .LVU509
 1816 089c FEFFFFEB 		bl	__assert_fail		@
 1817              	.LVL102:
 1818              	.L95:
 1819              		.align	2
 1820              	.L94:
 1821 08a0 00000000 		.word	g_armwave_state
 1822 08a4 34000000 		.word	.LANCHOR0+52
 1823 08a8 5E010000 		.word	350
 1824 08ac 20000000 		.word	.LC2
 1825 08b0 58010000 		.word	.LC10
 1826              		.cfi_endproc
 1827              	.LFE63:
 1829              		.align	2
 1830              		.global	armwave_set_wave_pointer_as_testbuf
 1831              		.syntax unified
 1832              		.arm
 1833              		.fpu vfp
 1835              	armwave_set_wave_pointer_as_testbuf:
 1836              	.LVL103:
 1837              	.LFB64:
 352:armwave.c     **** }
 353:armwave.c     **** 
 354:armwave.c     **** /*
 355:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 356:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 359:armwave.c     **** {
 1838              		.loc 1 359 1 is_stmt 1 view -0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 0
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
 1842              		@ link register save eliminated.
 360:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1843              		.loc 1 360 5 view .LVU511
 1844              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1845              		.loc 1 360 29 is_stmt 0 view .LVU512
 1846 08b4 24309FE5 		ldr	r3, .L99	@ tmp117,
 1847              	@ armwave.c:360:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1848              		.loc 1 360 7 view .LVU513
 1849 08b8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1850 08bc 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1851 08c0 0400003A 		bcc	.L98		@,
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 362:armwave.c     ****         return;
 363:armwave.c     ****     }
 364:armwave.c     **** 
 365:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1852              		.loc 1 365 5 is_stmt 1 view .LVU514
 1853              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1854              		.loc 1 365 111 is_stmt 0 view .LVU515
 1855 08c4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1856              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1857              		.loc 1 365 68 view .LVU516
 1858 08c8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1859 08cc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1860              	.LVL104:
 1861              	@ armwave.c:365:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1862              		.loc 1 365 33 view .LVU517
 1863 08d0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1864              	@ armwave.c:366: }
 366:armwave.c     **** }
 1865              		.loc 1 366 1 view .LVU518
 1866 08d4 1EFF2FE1 		bx	lr	@
 1867              	.LVL105:
 1868              	.L98:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1869              		.loc 1 361 9 is_stmt 1 view .LVU519
 1870 08d8 04009FE5 		ldr	r0, .L99+4	@,
 1871              	.LVL106:
 361:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1872              		.loc 1 361 9 is_stmt 0 view .LVU520
 1873 08dc FEFFFFEA 		b	puts		@
 1874              	.LVL107:
 1875              	.L100:
 1876              		.align	2
 1877              	.L99:
 1878 08e0 00000000 		.word	g_armwave_state
 1879 08e4 6C010000 		.word	.LC11
 1880              		.cfi_endproc
 1881              	.LFE64:
 1883              		.align	2
 1884              		.global	armwave_set_wave_pointer_u32
 1885              		.syntax unified
 1886              		.arm
 1887              		.fpu vfp
 1889              	armwave_set_wave_pointer_u32:
 1890              	.LVL108:
 1891              	.LFB65:
 367:armwave.c     **** 
 368:armwave.c     **** /*
 369:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 370:armwave.c     ****  * disjointed buffers in the future.
 371:armwave.c     ****  */
 372:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 373:armwave.c     **** {
 1892              		.loc 1 373 1 is_stmt 1 view -0
 1893              		.cfi_startproc
 1894              		@ args = 0, pretend = 0, frame = 0
 1895              		@ frame_needed = 0, uses_anonymous_args = 0
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1896              		.loc 1 374 5 view .LVU522
 1897 08e8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1898              		.loc 1 374 5 is_stmt 0 view .LVU523
 1899 08ec 0200000A 		beq	.L106		@,
 375:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1900              		.loc 1 375 5 is_stmt 1 view .LVU524
 1901              	@ armwave.c:375:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1902              		.loc 1 375 33 is_stmt 0 view .LVU525
 1903 08f0 1C309FE5 		ldr	r3, .L107	@ tmp117,
 1904 08f4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1905 08f8 1EFF2FE1 		bx	lr	@
 1906              	.L106:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1907              		.loc 1 374 5 is_stmt 1 discriminator 1 view .LVU526
 1908              	@ armwave.c:373: {
 373:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1909              		.loc 1 373 1 is_stmt 0 discriminator 1 view .LVU527
 1910 08fc 10402DE9 		push	{r4, lr}	@
 1911              		.cfi_def_cfa_offset 8
 1912              		.cfi_offset 4, -8
 1913              		.cfi_offset 14, -4
 1914              	@ armwave.c:374:     assert(wave_buffer_ptr != 0);
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1915              		.loc 1 374 5 discriminator 1 view .LVU528
 1916 0900 10309FE5 		ldr	r3, .L107+4	@,
 1917 0904 10209FE5 		ldr	r2, .L107+8	@,
 1918 0908 10109FE5 		ldr	r1, .L107+12	@,
 1919 090c 10009FE5 		ldr	r0, .L107+16	@,
 1920              	.LVL109:
 374:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1921              		.loc 1 374 5 discriminator 1 view .LVU529
 1922 0910 FEFFFFEB 		bl	__assert_fail		@
 1923              	.LVL110:
 1924              	.L108:
 1925              		.align	2
 1926              	.L107:
 1927 0914 00000000 		.word	g_armwave_state
 1928 0918 50000000 		.word	.LANCHOR0+80
 1929 091c 76010000 		.word	374
 1930 0920 20000000 		.word	.LC2
 1931 0924 A8010000 		.word	.LC12
 1932              		.cfi_endproc
 1933              	.LFE65:
 1935              		.align	2
 1936              		.global	armwave_clear_buffer
 1937              		.syntax unified
 1938              		.arm
 1939              		.fpu vfp
 1941              	armwave_clear_buffer:
 1942              	.LVL111:
 1943              	.LFB66:
 376:armwave.c     **** }
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 382:armwave.c     **** {
 1944              		.loc 1 382 1 is_stmt 1 view -0
 1945              		.cfi_startproc
 1946              		@ args = 0, pretend = 0, frame = 0
 1947              		@ frame_needed = 0, uses_anonymous_args = 0
 1948              		@ link register save eliminated.
 383:armwave.c     ****     // Flags ignored, only one buffer cleared
 384:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1949              		.loc 1 384 5 view .LVU531
 1950              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1951              		.loc 1 384 58 is_stmt 0 view .LVU532
 1952 0928 0C309FE5 		ldr	r3, .L110	@ tmp114,
 1953              	@ armwave.c:384:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1954              		.loc 1 384 5 view .LVU533
 1955 092c 0010A0E3 		mov	r1, #0	@,
 1956 0930 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1957 0934 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1958              	.LVL112:
 1959              		.loc 1 384 5 view .LVU534
 1960 0938 FEFFFFEA 		b	memset		@
 1961              	.LVL113:
 1962              	.L111:
 1963              		.align	2
 1964              	.L110:
 1965 093c 00000000 		.word	g_armwave_state
 1966              		.cfi_endproc
 1967              	.LFE66:
 1969              		.align	2
 1970              		.global	armwave_set_channel_colour
 1971              		.syntax unified
 1972              		.arm
 1973              		.fpu vfp
 1975              	armwave_set_channel_colour:
 1976              	.LVL114:
 1977              	.LFB67:
 385:armwave.c     **** }
 386:armwave.c     **** 
 387:armwave.c     **** /*
 388:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 389:armwave.c     ****  */
 390:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 391:armwave.c     **** {
 1978              		.loc 1 391 1 is_stmt 1 view -0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              		@ link register save eliminated.
 392:armwave.c     ****     // Only 1ch supported for now
 393:armwave.c     ****     switch(ch) {
 1983              		.loc 1 393 5 view .LVU536
 1984 0940 010050E3 		cmp	r0, #1	@ ch,
 394:armwave.c     ****         case 1:
 395:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1985              		.loc 1 395 13 view .LVU537
 1986              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 1987              		.loc 1 395 41 is_stmt 0 view .LVU538
 1988 0944 0C009F05 		ldreq	r0, .L114	@ tmp117,
 1989              	.LVL115:
 1990              		.loc 1 395 41 view .LVU539
 1991 0948 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 396:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1992              		.loc 1 396 13 is_stmt 1 view .LVU540
 1993              	@ armwave.c:396:             g_armwave_state.ch1_color.g = g;
 1994              		.loc 1 396 41 is_stmt 0 view .LVU541
 1995 094c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 397:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1996              		.loc 1 397 13 is_stmt 1 view .LVU542
 1997              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 1998              		.loc 1 397 41 is_stmt 0 view .LVU543
 1999 0950 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 398:armwave.c     ****             break;
 2000              		.loc 1 398 13 is_stmt 1 view .LVU544
 2001              	@ armwave.c:400: }
 399:armwave.c     ****     }
 400:armwave.c     **** }
 2002              		.loc 1 400 1 is_stmt 0 view .LVU545
 2003 0954 1EFF2FE1 		bx	lr	@
 2004              	.L115:
 2005              		.align	2
 2006              	.L114:
 2007 0958 00000000 		.word	g_armwave_state
 2008              		.cfi_endproc
 2009              	.LFE67:
 2011              		.align	2
 2012              		.global	armwave_dump_ppm_debug
 2013              		.syntax unified
 2014              		.arm
 2015              		.fpu vfp
 2017              	armwave_dump_ppm_debug:
 2018              	.LVL116:
 2019              	.LFB68:
 401:armwave.c     **** 
 402:armwave.c     **** /*
 403:armwave.c     ****  * Dump a ppm of a buffer to a file.
 404:armwave.c     ****  */
 405:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 406:armwave.c     **** {
 2020              		.loc 1 406 1 is_stmt 1 view -0
 2021              		.cfi_startproc
 2022              		@ args = 0, pretend = 0, frame = 0
 2023              		@ frame_needed = 0, uses_anonymous_args = 0
 407:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2024              		.loc 1 407 5 view .LVU547
 2025              	@ armwave.c:406: {
 406:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2026              		.loc 1 406 1 is_stmt 0 view .LVU548
 2027 095c 0130A0E1 		mov	r3, r1	@ fn, fn
 2028 0960 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2029              		.cfi_def_cfa_offset 28
 2030              		.cfi_offset 4, -28
 2031              		.cfi_offset 5, -24
 2032              		.cfi_offset 6, -20
 2033              		.cfi_offset 7, -16
 2034              		.cfi_offset 8, -12
 2035              		.cfi_offset 9, -8
 2036              		.cfi_offset 14, -4
 2037 0964 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2038 0968 0CD04DE2 		sub	sp, sp, #12	@,,
 2039              		.cfi_def_cfa_offset 40
 2040              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 2041              		.loc 1 407 16 view .LVU549
 2042 096c C4109FE5 		ldr	r1, .L124	@,
 2043              	.LVL117:
 2044              		.loc 1 407 16 view .LVU550
 2045 0970 0300A0E1 		mov	r0, r3	@, fn
 2046              	.LVL118:
 2047              		.loc 1 407 16 view .LVU551
 2048 0974 FEFFFFEB 		bl	fopen64		@
 2049              	.LVL119:
 2050              	@ armwave.c:414:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 408:armwave.c     ****     uint32_t data;
 409:armwave.c     ****     int xx, yy;
 410:armwave.c     **** 
 411:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 412:armwave.c     **** 
 413:armwave.c     ****     fputs("P3\n", fp);
 414:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2051              		.loc 1 414 5 view .LVU552
 2052 0978 BC609FE5 		ldr	r6, .L124+4	@ tmp150,
 2053              	@ armwave.c:413:     fputs("P3\n", fp);
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2054              		.loc 1 413 5 view .LVU553
 2055 097c 0320A0E3 		mov	r2, #3	@,
 2056 0980 0110A0E3 		mov	r1, #1	@,
 2057              	@ armwave.c:407:     FILE *fp = fopen(fn, "wb");
 407:armwave.c     ****     uint32_t data;
 2058              		.loc 1 407 16 view .LVU554
 2059 0984 0070A0E1 		mov	r7, r0	@ fp,
 2060              	.LVL120:
 408:armwave.c     ****     uint32_t data;
 2061              		.loc 1 408 5 is_stmt 1 view .LVU555
 409:armwave.c     **** 
 2062              		.loc 1 409 5 view .LVU556
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2063              		.loc 1 413 5 view .LVU557
 2064 0988 0030A0E1 		mov	r3, r0	@, fp
 2065 098c AC009FE5 		ldr	r0, .L124+8	@,
 2066              	.LVL121:
 413:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2067              		.loc 1 413 5 is_stmt 0 view .LVU558
 2068 0990 FEFFFFEB 		bl	fwrite		@
 2069              	.LVL122:
 2070              		.loc 1 414 5 is_stmt 1 view .LVU559
 2071 0994 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2072 0998 A4109FE5 		ldr	r1, .L124+12	@,
 2073 099c 0700A0E1 		mov	r0, r7	@, fp
 2074 09a0 FEFFFFEB 		bl	fprintf		@
 2075              	.LVL123:
 415:armwave.c     ****     fputs("255\n", fp);
 2076              		.loc 1 415 5 view .LVU560
 2077 09a4 0420A0E3 		mov	r2, #4	@,
 2078 09a8 0730A0E1 		mov	r3, r7	@, fp
 2079 09ac 0110A0E3 		mov	r1, #1	@,
 2080 09b0 90009FE5 		ldr	r0, .L124+16	@,
 2081 09b4 FEFFFFEB 		bl	fwrite		@
 2082              	.LVL124:
 416:armwave.c     **** 
 417:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2083              		.loc 1 417 5 view .LVU561
 2084              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2085              		.loc 1 417 37 is_stmt 0 view .LVU562
 2086 09b8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2087              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2088              		.loc 1 417 5 view .LVU563
 2089 09bc 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2090 09c0 180000DA 		ble	.L117		@,
 2091 09c4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2092              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 419:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 420:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 421:armwave.c     **** 
 422:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2093              		.loc 1 422 13 view .LVU564
 2094 09c8 7C909FE5 		ldr	r9, .L124+20	@ tmp152,
 2095              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2096              		.loc 1 417 12 view .LVU565
 2097 09cc 0050A0E3 		mov	r5, #0	@ yy,
 2098              	.LVL125:
 2099              	.L118:
 2100              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2101              		.loc 1 418 9 view .LVU566
 2102 09d0 000053E3 		cmp	r3, #0	@ _13,
 2103              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2104              		.loc 1 418 16 view .LVU567
 2105 09d4 0040A0C3 		movgt	r4, #0	@ xx,
 2106              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2107              		.loc 1 418 9 view .LVU568
 2108 09d8 0F0000DA 		ble	.L120		@,
 2109              	.LVL126:
 2110              	.L119:
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2111              		.loc 1 419 13 is_stmt 1 discriminator 3 view .LVU569
 2112              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2113              		.loc 1 419 29 is_stmt 0 discriminator 3 view .LVU570
 2114 09dc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2115              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2116              		.loc 1 422 13 discriminator 3 view .LVU571
 2117 09e0 0910A0E1 		mov	r1, r9	@, tmp152
 2118 09e4 0700A0E1 		mov	r0, r7	@, fp
 2119              	@ armwave.c:419:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 419:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2120              		.loc 1 419 18 discriminator 3 view .LVU572
 2121 09e8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2122              	.LVL127:
 2123              		.loc 1 422 13 is_stmt 1 discriminator 3 view .LVU573
 2124              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2125              		.loc 1 418 58 is_stmt 0 discriminator 3 view .LVU574
 2126 09ec 014084E2 		add	r4, r4, #1	@ xx, xx,
 2127              	.LVL128:
 2128              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2129              		.loc 1 422 81 discriminator 3 view .LVU575
 2130 09f0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2131              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2132              		.loc 1 422 61 discriminator 3 view .LVU576
 2133 09f4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2134              	@ armwave.c:422:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2135              		.loc 1 422 13 discriminator 3 view .LVU577
 2136 09f8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2137 09fc 7330EFE6 		uxtb	r3, r3	@, tmp142
 2138 0a00 00C08DE5 		str	ip, [sp]	@ tmp147,
 2139 0a04 7220EFE6 		uxtb	r2, r2	@, data
 2140              	.LVL129:
 2141              		.loc 1 422 13 discriminator 3 view .LVU578
 2142 0a08 FEFFFFEB 		bl	fprintf		@
 2143              	.LVL130:
 2144              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2145              		.loc 1 418 41 discriminator 3 view .LVU579
 2146 0a0c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2147              	@ armwave.c:418:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 418:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2148              		.loc 1 418 9 discriminator 3 view .LVU580
 2149 0a10 040053E1 		cmp	r3, r4	@ _13, xx
 2150 0a14 F0FFFFCA 		bgt	.L119		@,
 2151 0a18 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2152              	.LVL131:
 2153              	.L120:
 2154              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2155              		.loc 1 417 55 discriminator 2 view .LVU581
 2156 0a1c 015085E2 		add	r5, r5, #1	@ yy, yy,
 2157              	.LVL132:
 2158              	@ armwave.c:417:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 417:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2159              		.loc 1 417 5 discriminator 2 view .LVU582
 2160 0a20 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2161 0a24 E9FFFFBA 		blt	.L118		@,
 2162              	.LVL133:
 2163              	.L117:
 423:armwave.c     ****         }
 424:armwave.c     ****     }
 425:armwave.c     **** 
 426:armwave.c     ****     fclose(fp);
 2164              		.loc 1 426 5 is_stmt 1 view .LVU583
 2165 0a28 0700A0E1 		mov	r0, r7	@, fp
 2166              	@ armwave.c:427: }
 427:armwave.c     **** }
 2167              		.loc 1 427 1 is_stmt 0 view .LVU584
 2168 0a2c 0CD08DE2 		add	sp, sp, #12	@,,
 2169              		.cfi_def_cfa_offset 28
 2170              		@ sp needed	@
 2171 0a30 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2172              		.cfi_restore 14
 2173              		.cfi_restore 9
 2174              		.cfi_restore 8
 2175              		.cfi_restore 7
 2176              		.cfi_restore 6
 2177              		.cfi_restore 5
 2178              		.cfi_restore 4
 2179              		.cfi_def_cfa_offset 0
 2180              	.LVL134:
 2181              	@ armwave.c:426:     fclose(fp);
 426:armwave.c     **** }
 2182              		.loc 1 426 5 view .LVU585
 2183 0a34 FEFFFFEA 		b	fclose		@
 2184              	.LVL135:
 2185              	.L125:
 426:armwave.c     **** }
 2186              		.loc 1 426 5 view .LVU586
 2187              		.align	2
 2188              	.L124:
 2189 0a38 C0010000 		.word	.LC13
 2190 0a3c 00000000 		.word	g_armwave_state
 2191 0a40 C4010000 		.word	.LC14
 2192 0a44 C8010000 		.word	.LC15
 2193 0a48 D0010000 		.word	.LC16
 2194 0a4c D8010000 		.word	.LC17
 2195              		.cfi_endproc
 2196              	.LFE68:
 2198              		.align	2
 2199              		.global	armwave_test_init
 2200              		.syntax unified
 2201              		.arm
 2202              		.fpu vfp
 2204              	armwave_test_init:
 2205              	.LVL136:
 2206              	.LFB69:
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Initialise some test functionry.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 433:armwave.c     **** {
 2207              		.loc 1 433 1 is_stmt 1 view -0
 2208              		.cfi_startproc
 2209              		@ args = 0, pretend = 0, frame = 0
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 434:armwave.c     ****     test_create_gamma();
 2211              		.loc 1 434 5 view .LVU588
 2212              	.LBB18:
 2213              	.LBI18:
  34:armwave.c     **** {
 2214              		.loc 1 34 6 view .LVU589
  34:armwave.c     **** {
 2215              		.loc 1 34 6 is_stmt 0 view .LVU590
 2216              	.LBE18:
 2217              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2218              		.loc 1 433 1 view .LVU591
 2219 0a50 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2220              		.cfi_def_cfa_offset 32
 2221              		.cfi_offset 4, -32
 2222              		.cfi_offset 5, -28
 2223              		.cfi_offset 6, -24
 2224              		.cfi_offset 7, -20
 2225              		.cfi_offset 8, -16
 2226              		.cfi_offset 9, -12
 2227              		.cfi_offset 10, -8
 2228              		.cfi_offset 14, -4
 2229 0a54 068B2DED 		vpush.64	{d8, d9, d10}	@
 2230              		.cfi_def_cfa_offset 56
 2231              		.cfi_offset 80, -56
 2232              		.cfi_offset 81, -52
 2233              		.cfi_offset 82, -48
 2234              		.cfi_offset 83, -44
 2235              		.cfi_offset 84, -40
 2236              		.cfi_offset 85, -36
 2237 0a58 BC409FE5 		ldr	r4, .L130+20	@ ivtmp.93,
 2238              	.LBB21:
 2239              	.LBB19:
 2240              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2241              		.loc 1 40 32 view .LVU592
 2242 0a5c 2DAA9FED 		vldr.32	s20, .L130+16	@ tmp136,
 2243              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2244              		.loc 1 40 26 view .LVU593
 2245 0a60 289B9FED 		vldr.64	d9, .L130	@ tmp151,
 2246              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2247              		.loc 1 40 49 view .LVU594
 2248 0a64 298B9FED 		vldr.64	d8, .L130+8	@ tmp139,
 2249 0a68 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.93,
 2250              	.LBE19:
 2251              	.LBE21:
 2252              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2253              		.loc 1 433 1 view .LVU595
 2254 0a6c 10D04DE2 		sub	sp, sp, #16	@,,
 2255              		.cfi_def_cfa_offset 72
 2256              	@ armwave.c:433: {
 433:armwave.c     ****     test_create_gamma();
 2257              		.loc 1 433 1 view .LVU596
 2258 0a70 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2259 0a74 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2260 0a78 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2261 0a7c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2262 0a80 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.93,
 2263 0a84 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2264              	.LVL137:
 2265              	.L127:
 2266              	.LBB22:
 2267              	.LBB20:
  40:armwave.c     ****     }
 2268              		.loc 1 40 9 is_stmt 1 view .LVU597
 2269              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2270              		.loc 1 40 32 is_stmt 0 view .LVU598
 2271 0a88 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.93
 2272              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2273              		.loc 1 40 26 view .LVU599
 2274 0a8c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2275              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2276              		.loc 1 40 32 view .LVU600
 2277 0a90 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2278 0a94 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2279 0a98 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2280              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2281              		.loc 1 40 26 view .LVU601
 2282 0a9c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2283 0aa0 FEFFFFEB 		bl	pow		@
 2284              	.LVL138:
 2285              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2286              		.loc 1 40 49 view .LVU602
 2287 0aa4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2288              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2289              		.loc 1 40 24 view .LVU603
 2290 0aa8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2291 0aac 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2292 0ab0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2293              	.LVL139:
 2294              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2295              		.loc 1 39 5 view .LVU604
 2296 0ab4 0A0054E1 		cmp	r4, r10	@ ivtmp.93, _39
 2297 0ab8 F2FFFF1A 		bne	.L127		@,
 2298              	.LVL140:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2299              		.loc 1 39 5 view .LVU605
 2300              	.LBE20:
 2301              	.LBE22:
 435:armwave.c     **** 
 436:armwave.c     ****     // make ch1 yellowish by default
 437:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2302              		.loc 1 437 5 is_stmt 1 view .LVU606
 2303              	.LBB23:
 2304              	.LBI23:
 390:armwave.c     **** {
 2305              		.loc 1 390 6 view .LVU607
 2306              	.LBB24:
 393:armwave.c     ****         case 1:
 2307              		.loc 1 393 5 view .LVU608
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2308              		.loc 1 395 13 view .LVU609
 396:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2309              		.loc 1 396 13 view .LVU610
 2310              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2311              		.loc 1 395 41 is_stmt 0 view .LVU611
 2312 0abc 5CC09FE5 		ldr	ip, .L130+24	@ tmp142,
 2313 0ac0 5C409FE5 		ldr	r4, .L130+28	@ tmp143,
 2314              	.LBE24:
 2315              	.LBE23:
 2316              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 438:armwave.c     **** 
 439:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2317              		.loc 1 439 5 view .LVU612
 2318 0ac4 0000A0E3 		mov	r0, #0	@ tmp147,
 2319              	.LBB28:
 2320              	.LBB25:
 2321              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2322              		.loc 1 397 41 view .LVU613
 2323 0ac8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2324              	.LBE25:
 2325              	.LBE28:
 2326              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2327              		.loc 1 439 5 view .LVU614
 2328 0acc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2329 0ad0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2330 0ad4 00808DE5 		str	r8, [sp]	@ render_width,
 2331 0ad8 0610A0E1 		mov	r1, r6	@, tmp3
 2332 0adc 0720A0E1 		mov	r2, r7	@, nwaves
 2333              	.LBB29:
 2334              	.LBB26:
 2335              	@ armwave.c:395:             g_armwave_state.ch1_color.r = r;
 395:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2336              		.loc 1 395 41 view .LVU615
 2337 0ae0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 397:armwave.c     ****             break;
 2338              		.loc 1 397 13 is_stmt 1 view .LVU616
 2339              	.LBE26:
 2340              	.LBE29:
 2341              	@ armwave.c:439:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2342              		.loc 1 439 5 is_stmt 0 view .LVU617
 2343 0ae4 0630A0E1 		mov	r3, r6	@, wave_size
 2344              	.LBB30:
 2345              	.LBB27:
 2346              	@ armwave.c:397:             g_armwave_state.ch1_color.b = b;
 397:armwave.c     ****             break;
 2347              		.loc 1 397 41 view .LVU618
 2348 0ae8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 398:armwave.c     ****     }
 2349              		.loc 1 398 13 is_stmt 1 view .LVU619
 2350              	.LVL141:
 398:armwave.c     ****     }
 2351              		.loc 1 398 13 is_stmt 0 view .LVU620
 2352              	.LBE27:
 2353              	.LBE30:
 2354              		.loc 1 439 5 is_stmt 1 view .LVU621
 2355 0aec FEFFFFEB 		bl	armwave_setup_render		@
 2356              	.LVL142:
 440:armwave.c     **** 
 441:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2357              		.loc 1 441 5 view .LVU622
 2358 0af0 30109FE5 		ldr	r1, .L130+32	@,
 2359 0af4 30009FE5 		ldr	r0, .L130+36	@,
 2360              	@ armwave.c:442: }
 442:armwave.c     **** }
 2361              		.loc 1 442 1 is_stmt 0 view .LVU623
 2362 0af8 10D08DE2 		add	sp, sp, #16	@,,
 2363              		.cfi_def_cfa_offset 56
 2364              		@ sp needed	@
 2365 0afc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2366              		.cfi_restore 84
 2367              		.cfi_restore 85
 2368              		.cfi_restore 82
 2369              		.cfi_restore 83
 2370              		.cfi_restore 80
 2371              		.cfi_restore 81
 2372              		.cfi_def_cfa_offset 32
 2373 0b00 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2374              		.cfi_restore 14
 2375              		.cfi_restore 10
 2376              		.cfi_restore 9
 2377              		.cfi_restore 8
 2378              		.cfi_restore 7
 2379              		.cfi_restore 6
 2380              		.cfi_restore 5
 2381              		.cfi_restore 4
 2382              		.cfi_def_cfa_offset 0
 2383              	.LVL143:
 2384              	@ armwave.c:441:     printf("armwave version: %s\n", ARMWAVE_VER);
 441:armwave.c     **** }
 2385              		.loc 1 441 5 view .LVU624
 2386 0b04 FEFFFFEA 		b	printf		@
 2387              	.LVL144:
 2388              	.L131:
 2389              		.align	3
 2390              	.L130:
 2391 0b08 000000C0 		.word	-1073741824
 2392 0b0c CCCCEC3F 		.word	1072483532
 2393 0b10 00000000 		.word	0
 2394 0b14 00E06F40 		.word	1081073664
 2395 0b18 00007F43 		.word	1132396544
 2396 0b1c FFFFFFFF 		.word	gamma_table-1
 2397 0b20 00000000 		.word	g_armwave_state
 2398 0b24 F609F406 		.word	116656630
 2399 0b28 00000000 		.word	.LC0
 2400 0b2c 08000000 		.word	.LC1
 2401              		.cfi_endproc
 2402              	.LFE69:
 2404              		.align	2
 2405              		.global	armwave_test_fill_outbuf
 2406              		.syntax unified
 2407              		.arm
 2408              		.fpu vfp
 2410              	armwave_test_fill_outbuf:
 2411              	.LFB70:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 2412              		.loc 1 448 1 is_stmt 1 view -0
 2413              		.cfi_startproc
 2414              		@ args = 0, pretend = 0, frame = 0
 2415              		@ frame_needed = 0, uses_anonymous_args = 0
 2416              		@ link register save eliminated.
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2417              		.loc 1 449 5 view .LVU626
 2418 0b30 04309FE5 		ldr	r3, .L133	@ tmp111,
 2419 0b34 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2420 0b38 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2421              	.LVL145:
 2422              	.L134:
 2423              		.align	2
 2424              	.L133:
 2425 0b3c 00000000 		.word	g_armwave_state
 2426              		.cfi_endproc
 2427              	.LFE70:
 2429              		.align	2
 2430              		.global	armwave_test_dump_buffer_to_ppm
 2431              		.syntax unified
 2432              		.arm
 2433              		.fpu vfp
 2435              	armwave_test_dump_buffer_to_ppm:
 2436              	.LVL146:
 2437              	.LFB71:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2438              		.loc 1 456 1 view -0
 2439              		.cfi_startproc
 2440              		@ args = 0, pretend = 0, frame = 0
 2441              		@ frame_needed = 0, uses_anonymous_args = 0
 2442              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2443              		.loc 1 457 5 view .LVU628
 2444 0b40 08309FE5 		ldr	r3, .L136	@ tmp112,
 2445 0b44 0010A0E1 		mov	r1, r0	@, fn
 2446 0b48 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2447              	.LVL147:
 2448              		.loc 1 457 5 is_stmt 0 view .LVU629
 2449 0b4c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2450              	.LVL148:
 2451              	.L137:
 2452              		.loc 1 457 5 view .LVU630
 2453              		.align	2
 2454              	.L136:
 2455 0b50 00000000 		.word	g_armwave_state
 2456              		.cfi_endproc
 2457              	.LFE71:
 2459              		.align	2
 2460              		.global	armwave_test_fill_gdkbuf
 2461              		.syntax unified
 2462              		.arm
 2463              		.fpu vfp
 2465              	armwave_test_fill_gdkbuf:
 2466              	.LVL149:
 2467              	.LFB72:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2468              		.loc 1 464 1 is_stmt 1 view -0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 0
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472              		@ link register save eliminated.
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2473              		.loc 1 469 5 view .LVU632
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2474              		.loc 1 472 5 view .LVU633
 2475              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 469:armwave.c     ****     
 2476              		.loc 1 469 11 is_stmt 0 view .LVU634
 2477 0b54 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2478              	@ armwave.c:472:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2479              		.loc 1 472 5 view .LVU635
 2480 0b58 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2481              	.LVL150:
 2482              		.loc 1 472 5 view .LVU636
 2483 0b5c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2484              	.LVL151:
 2485              		.loc 1 472 5 view .LVU637
 2486              		.cfi_endproc
 2487              	.LFE72:
 2489              		.align	2
 2490              		.global	armwave_test_buffer_alloc
 2491              		.syntax unified
 2492              		.arm
 2493              		.fpu vfp
 2495              	armwave_test_buffer_alloc:
 2496              	.LVL152:
 2497              	.LFB73:
 473:armwave.c     **** }
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 2498              		.loc 1 479 1 is_stmt 1 view -0
 2499              		.cfi_startproc
 2500              		@ args = 0, pretend = 0, frame = 0
 2501              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2502              		.loc 1 480 5 view .LVU639
 2503              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2504              		.loc 1 479 1 is_stmt 0 view .LVU640
 2505 0b60 70402DE9 		push	{r4, r5, r6, lr}	@
 2506              		.cfi_def_cfa_offset 16
 2507              		.cfi_offset 4, -16
 2508              		.cfi_offset 5, -12
 2509              		.cfi_offset 6, -8
 2510              		.cfi_offset 14, -4
 2511              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2512              		.loc 1 479 1 view .LVU641
 2513 0b64 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2514              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2515              		.loc 1 480 23 view .LVU642
 2516 0b68 44409FE5 		ldr	r4, .L146	@ tmp128,
 2517 0b6c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2518              	.LVL153:
 2519              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2520              		.loc 1 480 7 view .LVU643
 2521 0b70 000050E3 		cmp	r0, #0	@ _1,
 2522 0b74 0000000A 		beq	.L140		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2523              		.loc 1 481 9 is_stmt 1 view .LVU644
 2524 0b78 FEFFFFEB 		bl	free		@
 2525              	.LVL154:
 2526              	.L140:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2527              		.loc 1 486 5 view .LVU645
 2528              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2529              		.loc 1 486 75 is_stmt 0 view .LVU646
 2530 0b7c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2531 0b80 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2532              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2533              		.loc 1 486 40 view .LVU647
 2534 0b84 0610A0E1 		mov	r1, r6	@, nsets
 2535              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2536              		.loc 1 486 75 view .LVU648
 2537 0b88 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2538              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2539              		.loc 1 486 40 view .LVU649
 2540 0b8c 0500A0E1 		mov	r0, r5	@, _4
 2541 0b90 FEFFFFEB 		bl	calloc		@
 2542              	.LVL155:
 2543              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2544              		.loc 1 488 7 view .LVU650
 2545 0b94 000050E3 		cmp	r0, #0	@ tmp124,
 2546              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2547              		.loc 1 486 38 view .LVU651
 2548 0b98 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2549              		.loc 1 488 5 is_stmt 1 view .LVU652
 2550              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 2551              		.loc 1 488 7 is_stmt 0 view .LVU653
 2552 0b9c 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2553              		.loc 1 489 9 is_stmt 1 view .LVU654
 2554 0ba0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2555 0ba4 0620A0E1 		mov	r2, r6	@, nsets
 2556 0ba8 08009FE5 		ldr	r0, .L146+4	@,
 2557              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 2558              		.loc 1 493 1 is_stmt 0 view .LVU655
 2559 0bac 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2560              		.cfi_restore 14
 2561              		.cfi_restore 6
 2562              		.cfi_restore 5
 2563              		.cfi_restore 4
 2564              		.cfi_def_cfa_offset 0
 2565              	.LVL156:
 2566              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2567              		.loc 1 489 9 view .LVU656
 2568 0bb0 FEFFFFEA 		b	printf		@
 2569              	.LVL157:
 2570              	.L147:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2571              		.loc 1 489 9 view .LVU657
 2572              		.align	2
 2573              	.L146:
 2574 0bb4 00000000 		.word	g_armwave_state
 2575 0bb8 E8010000 		.word	.LC18
 2576              		.cfi_endproc
 2577              	.LFE73:
 2579              		.align	2
 2580              		.global	armwave_fill_pixbuf_into_pybuffer
 2581              		.syntax unified
 2582              		.arm
 2583              		.fpu vfp
 2585              	armwave_fill_pixbuf_into_pybuffer:
 2586              	.LVL158:
 2587              	.LFB74:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 2588              		.loc 1 499 1 is_stmt 1 view -0
 2589              		.cfi_startproc
 2590              		@ args = 0, pretend = 0, frame = 48
 2591              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 2592              		.loc 1 500 5 view .LVU659
 501:armwave.c     ****     int ret;
 2593              		.loc 1 501 5 view .LVU660
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2594              		.loc 1 505 5 view .LVU661
 2595              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 2596              		.loc 1 499 1 is_stmt 0 view .LVU662
 2597 0bbc 04E02DE5 		str	lr, [sp, #-4]!	@,
 2598              		.cfi_def_cfa_offset 4
 2599              		.cfi_offset 14, -4
 2600 0bc0 34D04DE2 		sub	sp, sp, #52	@,,
 2601              		.cfi_def_cfa_offset 56
 2602              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2603              		.loc 1 505 11 view .LVU663
 2604 0bc4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2605 0bc8 0120A0E3 		mov	r2, #1	@,
 2606 0bcc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2607              	.LVL159:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 2608              		.loc 1 507 5 is_stmt 1 view .LVU664
 2609              	@ armwave.c:507:     if(ret != 0) {
 2610              		.loc 1 507 7 is_stmt 0 view .LVU665
 2611 0bd0 000050E3 		cmp	r0, #0	@,
 2612 0bd4 0A00001A 		bne	.L152		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2613              		.loc 1 514 5 is_stmt 1 view .LVU666
 2614 0bd8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2615              	.LVL160:
 2616              		.loc 1 514 5 is_stmt 0 view .LVU667
 2617 0bdc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2618              	.LVL161:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 2619              		.loc 1 517 5 is_stmt 1 view .LVU668
 2620 0be0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2621 0be4 FEFFFFEB 		bl	PyBuffer_Release		@
 2622              	.LVL162:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 2623              		.loc 1 520 5 view .LVU669
 2624              	.LBB31:
 2625              	.LBI31:
 2626              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2627              		.loc 2 456 20 view .LVU670
 2628              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2629              		.loc 2 458 21 view .LVU671
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2630              		.loc 2 459 5 view .LVU672
 2631              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2632              		.loc 2 459 18 is_stmt 0 view .LVU673
 2633 0be8 38309FE5 		ldr	r3, .L153	@ tmp126,
 2634              	.LBE32:
 2635              	.LBE31:
 2636              	@ armwave.c:520:     Py_RETURN_TRUE;
 2637              		.loc 1 520 5 view .LVU674
 2638 0bec 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2639              	.LBB34:
 2640              	.LBB33:
 2641              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2642              		.loc 2 459 18 view .LVU675
 2643 0bf0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2644 0bf4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2645 0bf8 002083E5 		str	r2, [r3]	@ tmp128,
 2646              	.LBE33:
 2647              	.LBE34:
 2648              	@ armwave.c:521: }
 521:armwave.c     **** }
 2649              		.loc 1 521 1 view .LVU676
 2650 0bfc 34D08DE2 		add	sp, sp, #52	@,,
 2651              		.cfi_remember_state
 2652              		.cfi_def_cfa_offset 4
 2653              		@ sp needed	@
 2654 0c00 04F09DE4 		ldr	pc, [sp], #4	@
 2655              	.LVL163:
 2656              	.L152:
 2657              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 2658              		.loc 1 508 9 is_stmt 1 view .LVU677
 2659 0c04 20009FE5 		ldr	r0, .L153+4	@,
 2660              	.LVL164:
 508:armwave.c     ****         Py_RETURN_FALSE;
 2661              		.loc 1 508 9 is_stmt 0 view .LVU678
 2662 0c08 FEFFFFEB 		bl	puts		@
 2663              	.LVL165:
 509:armwave.c     ****     }
 2664              		.loc 1 509 9 is_stmt 1 view .LVU679
 2665              	.LBB35:
 2666              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2667              		.loc 2 456 20 view .LVU680
 2668              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2669              		.loc 2 458 21 view .LVU681
 2670              		.loc 2 459 5 view .LVU682
 2671              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2672              		.loc 2 459 18 is_stmt 0 view .LVU683
 2673 0c0c 1C309FE5 		ldr	r3, .L153+8	@ tmp120,
 2674              	.LBE36:
 2675              	.LBE35:
 2676              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 2677              		.loc 1 509 9 view .LVU684
 2678 0c10 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2679              	.LBB38:
 2680              	.LBB37:
 2681              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2682              		.loc 2 459 18 view .LVU685
 2683 0c14 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2684 0c18 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2685 0c1c 002083E5 		str	r2, [r3]	@ tmp122,
 2686              	.LBE37:
 2687              	.LBE38:
 2688              	@ armwave.c:521: }
 2689              		.loc 1 521 1 view .LVU686
 2690 0c20 34D08DE2 		add	sp, sp, #52	@,,
 2691              		.cfi_def_cfa_offset 4
 2692              		@ sp needed	@
 2693 0c24 04F09DE4 		ldr	pc, [sp], #4	@
 2694              	.L154:
 2695              		.align	2
 2696              	.L153:
 2697 0c28 00000000 		.word	_Py_TrueStruct
 2698 0c2c 3C020000 		.word	.LC19
 2699 0c30 00000000 		.word	_Py_FalseStruct
 2700              		.cfi_endproc
 2701              	.LFE74:
 2703              		.align	2
 2704              		.global	armwave_test_create_am_sine
 2705              		.syntax unified
 2706              		.arm
 2707              		.fpu vfp
 2709              	armwave_test_create_am_sine:
 2710              	.LVL166:
 2711              	.LFB75:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 2712              		.loc 1 531 1 is_stmt 1 view -0
 2713              		.cfi_startproc
 2714              		@ args = 0, pretend = 0, frame = 8
 2715              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 2716              		.loc 1 532 5 view .LVU688
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2717              		.loc 1 533 5 view .LVU689
 2718              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2719              		.loc 1 531 1 is_stmt 0 view .LVU690
 2720 0c34 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2721              		.cfi_def_cfa_offset 32
 2722              		.cfi_offset 4, -32
 2723              		.cfi_offset 5, -28
 2724              		.cfi_offset 6, -24
 2725              		.cfi_offset 7, -20
 2726              		.cfi_offset 8, -16
 2727              		.cfi_offset 9, -12
 2728              		.cfi_offset 10, -8
 2729              		.cfi_offset 14, -4
 2730              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2731              		.loc 1 533 38 view .LVU691
 2732 0c38 7A7A9FED 		vldr.32	s14, .L186	@ tmp180,
 2733              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2734              		.loc 1 533 55 view .LVU692
 2735 0c3c 00529FE5 		ldr	r5, .L186+28	@ tmp250,
 2736              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2737              		.loc 1 531 1 view .LVU693
 2738 0c40 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2739              		.cfi_def_cfa_offset 80
 2740              		.cfi_offset 80, -80
 2741              		.cfi_offset 81, -76
 2742              		.cfi_offset 82, -72
 2743              		.cfi_offset 83, -68
 2744              		.cfi_offset 84, -64
 2745              		.cfi_offset 85, -60
 2746              		.cfi_offset 86, -56
 2747              		.cfi_offset 87, -52
 2748              		.cfi_offset 88, -48
 2749              		.cfi_offset 89, -44
 2750              		.cfi_offset 90, -40
 2751              		.cfi_offset 91, -36
 2752 0c44 0090A0E1 		mov	r9, r0	@ sets, sets
 2753              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2754              		.loc 1 533 38 view .LVU694
 2755 0c48 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2756              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2757              		.loc 1 537 70 view .LVU695
 2758 0c4c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2759 0c50 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2760              	.LBB41:
 2761              	.LBB42:
 2762              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2763              		.loc 1 480 23 view .LVU696
 2764 0c54 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2765              	.LVL167:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2766              		.loc 1 480 23 view .LVU697
 2767              	.LBE42:
 2768              	.LBE41:
 2769              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2770              		.loc 1 533 38 view .LVU698
 2771 0c58 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2772              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2773              		.loc 1 537 70 view .LVU699
 2774 0c5c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2775              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2776              		.loc 1 531 1 view .LVU700
 2777 0c60 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2778              	.LBB46:
 2779              	.LBB43:
 2780              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2781              		.loc 1 480 7 view .LVU701
 2782 0c64 000050E3 		cmp	r0, #0	@ _82,
 2783              	.LBE43:
 2784              	.LBE46:
 2785              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2786              		.loc 1 531 1 view .LVU702
 2787 0c68 08D04DE2 		sub	sp, sp, #8	@,,
 2788              		.cfi_def_cfa_offset 88
 2789              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2790              		.loc 1 538 44 view .LVU703
 2791 0c6c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2792              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2793              		.loc 1 537 45 view .LVU704
 2794 0c70 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2795              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2796              		.loc 1 533 38 view .LVU705
 2797 0c74 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2798              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2799              		.loc 1 533 11 view .LVU706
 2800 0c78 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2801              	.LVL168:
 534:armwave.c     ****     int w, x;
 2802              		.loc 1 534 5 is_stmt 1 view .LVU707
 535:armwave.c     **** 
 2803              		.loc 1 535 5 view .LVU708
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2804              		.loc 1 537 5 view .LVU709
 2805              		.loc 1 538 5 view .LVU710
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2806              		.loc 1 539 5 view .LVU711
 2807              	.LBB47:
 2808              	.LBI41:
 478:armwave.c     **** {
 2809              		.loc 1 478 6 view .LVU712
 2810              	.LBB44:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2811              		.loc 1 480 5 view .LVU713
 2812              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2813              		.loc 1 480 7 is_stmt 0 view .LVU714
 2814 0c7c 0000000A 		beq	.L156		@,
 481:armwave.c     ****     }
 2815              		.loc 1 481 9 is_stmt 1 view .LVU715
 2816 0c80 FEFFFFEB 		bl	free		@
 2817              	.LVL169:
 2818              	.L156:
 486:armwave.c     **** 
 2819              		.loc 1 486 5 view .LVU716
 2820              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2821              		.loc 1 486 75 is_stmt 0 view .LVU717
 2822 0c84 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2823 0c88 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2824              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2825              		.loc 1 486 40 view .LVU718
 2826 0c8c 0910A0E1 		mov	r1, r9	@, sets
 2827              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2828              		.loc 1 486 75 view .LVU719
 2829 0c90 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2830              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2831              		.loc 1 486 40 view .LVU720
 2832 0c94 0400A0E1 		mov	r0, r4	@, _85
 2833 0c98 FEFFFFEB 		bl	calloc		@
 2834              	.LVL170:
 2835              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2836              		.loc 1 488 7 view .LVU721
 2837 0c9c 000050E3 		cmp	r0, #0	@ tmp191,
 2838              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2839              		.loc 1 486 38 view .LVU722
 2840 0ca0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2841              		.loc 1 488 5 is_stmt 1 view .LVU723
 2842              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2843              		.loc 1 488 7 is_stmt 0 view .LVU724
 2844 0ca4 5A00000A 		beq	.L185		@,
 2845              	.L157:
 2846              	.LVL171:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2847              		.loc 1 488 7 view .LVU725
 2848              	.LBE44:
 2849              	.LBE47:
 2850              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 2851              		.loc 1 541 5 discriminator 1 view .LVU726
 2852 0ca8 000059E3 		cmp	r9, #0	@ sets,
 2853 0cac 550000DA 		ble	.L155		@,
 2854              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2855              		.loc 1 560 45 view .LVU727
 2856 0cb0 5C8A9FED 		vldr.32	s16, .L186	@ tmp258,
 2857              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2858              		.loc 1 563 104 view .LVU728
 2859 0cb4 5CCA9FED 		vldr.32	s24, .L186+4	@ tmp259,
 2860              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2861              		.loc 1 541 5 view .LVU729
 2862 0cb8 0070A0E3 		mov	r7, #0	@ set_offset,
 2863              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2864              		.loc 1 542 9 view .LVU730
 2865 0cbc 84A19FE5 		ldr	r10, .L186+32	@ tmp257,
 2866              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2867              		.loc 1 541 5 view .LVU731
 2868 0cc0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2869              	.LVL172:
 2870              	.L158:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2871              		.loc 1 542 9 is_stmt 1 view .LVU732
 2872 0cc4 0810A0E1 		mov	r1, r8	@, s
 2873 0cc8 0A00A0E1 		mov	r0, r10	@, tmp257
 2874 0ccc FEFFFFEB 		bl	printf		@
 2875              	.LVL173:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2876              		.loc 1 544 9 view .LVU733
 2877              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2878              		.loc 1 544 39 is_stmt 0 view .LVU734
 2879 0cd0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2880              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2881              		.loc 1 544 9 view .LVU735
 2882 0cd4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2883 0cd8 450000DA 		ble	.L159		@,
 2884              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2885              		.loc 1 546 21 view .LVU736
 2886 0cdc 53CADFED 		vldr.32	s25, .L186+8	@ tmp200,
 2887              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2888              		.loc 1 560 33 view .LVU737
 2889 0ce0 53BA9FED 		vldr.32	s22, .L186+12	@ tmp253,
 2890              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2891              		.loc 1 558 24 view .LVU738
 2892 0ce4 53AADFED 		vldr.32	s21, .L186+16	@ tmp254,
 2893 0ce8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2894              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2895              		.loc 1 544 15 view .LVU739
 2896 0cec 0060A0E3 		mov	r6, #0	@ w,
 2897              	.LVL174:
 2898              	.L166:
 546:armwave.c     **** 
 2899              		.loc 1 546 13 is_stmt 1 view .LVU740
 2900              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2901              		.loc 1 546 21 is_stmt 0 view .LVU741
 2902 0cf0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2903 0cf4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2904              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2905              		.loc 1 548 13 view .LVU742
 2906 0cf8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2907              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 2908              		.loc 1 546 21 view .LVU743
 2909 0cfc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2910 0d00 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2911              	.LVL175:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2912              		.loc 1 548 13 is_stmt 1 view .LVU744
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2913              		.loc 1 548 13 is_stmt 0 view .LVU745
 2914 0d04 370000DA 		ble	.L160		@,
 2915 0d08 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2916              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2917              		.loc 1 563 113 view .LVU746
 2918 0d0c 4AAA9FED 		vldr.32	s20, .L186+20	@ tmp229,
 2919 0d10 4A8ADFED 		vldr.32	s17, .L186+24	@ tmp230,
 2920              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2921              		.loc 1 548 19 view .LVU747
 2922 0d14 0040A0E3 		mov	r4, #0	@ x,
 2923              	.LVL176:
 2924              	.L165:
 549:armwave.c     ****                 noise *= noise;
 2925              		.loc 1 549 17 is_stmt 1 view .LVU748
 2926              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2927              		.loc 1 549 28 is_stmt 0 view .LVU749
 2928 0d18 FEFFFFEB 		bl	rand		@
 2929              	.LVL177:
 2930              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2931              		.loc 1 549 35 view .LVU750
 2932 0d1c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2933              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2934              		.loc 1 549 45 view .LVU751
 2935 0d20 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2936 0d24 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2937              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 2938              		.loc 1 549 24 view .LVU752
 2939 0d28 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2940              	.LVL178:
 550:armwave.c     ****                 noise *= noise;
 2941              		.loc 1 550 17 is_stmt 1 view .LVU753
 2942              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 2943              		.loc 1 550 23 is_stmt 0 view .LVU754
 2944 0d2c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2945              	.LVL179:
 551:armwave.c     ****                 noise *= noise;
 2946              		.loc 1 551 17 is_stmt 1 view .LVU755
 2947              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 2948              		.loc 1 551 23 is_stmt 0 view .LVU756
 2949 0d30 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2950              	.LVL180:
 552:armwave.c     **** 
 2951              		.loc 1 552 17 is_stmt 1 view .LVU757
 2952              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 2953              		.loc 1 552 23 is_stmt 0 view .LVU758
 2954 0d34 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2955              	.LVL181:
 554:armwave.c     ****                     noise = -noise;
 2956              		.loc 1 554 17 is_stmt 1 view .LVU759
 2957              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2958              		.loc 1 554 21 is_stmt 0 view .LVU760
 2959 0d38 FEFFFFEB 		bl	rand		@
 2960              	.LVL182:
 555:armwave.c     **** 
 2961              		.loc 1 555 21 is_stmt 1 view .LVU761
 2962              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 2963              		.loc 1 554 19 is_stmt 0 view .LVU762
 2964 0d3c 020910E3 		tst	r0, #32768	@,
 2965              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 2966              		.loc 1 555 27 view .LVU763
 2967 0d40 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2968              	.LVL183:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2969              		.loc 1 557 17 is_stmt 1 view .LVU764
 558:armwave.c     **** 
 2970              		.loc 1 558 17 view .LVU765
 2971              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2972              		.loc 1 558 27 is_stmt 0 view .LVU766
 2973 0d44 FEFFFFEB 		bl	rand		@
 2974              	.LVL184:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2975              		.loc 1 560 17 is_stmt 1 view .LVU767
 2976              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2977              		.loc 1 560 45 is_stmt 0 view .LVU768
 2978 0d48 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2979              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2980              		.loc 1 560 33 view .LVU769
 2981 0d4c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2982              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2983              		.loc 1 560 45 view .LVU770
 2984 0d50 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2985              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2986              		.loc 1 560 33 view .LVU771
 2987 0d54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2988              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2989              		.loc 1 560 45 view .LVU772
 2990 0d58 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2991              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2992              		.loc 1 560 33 view .LVU773
 2993 0d5c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2994              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2995              		.loc 1 558 34 view .LVU774
 2996 0d60 7000FFE6 		uxth	r0, r0	@ tmp214,
 2997              	.LVL185:
 2998              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 2999              		.loc 1 558 44 view .LVU775
 3000 0d64 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3001 0d68 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3002              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3003              		.loc 1 558 24 view .LVU776
 3004 0d6c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3005              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3006              		.loc 1 560 77 view .LVU777
 3007 0d70 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3008              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3009              		.loc 1 560 22 view .LVU778
 3010 0d74 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3011 0d78 FEFFFFEB 		bl	sin		@
 3012              	.LVL186:
 3013              		.loc 1 563 17 is_stmt 1 view .LVU779
 3014              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3015              		.loc 1 557 23 is_stmt 0 view .LVU780
 3016 0d7c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3017              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3018              		.loc 1 563 104 view .LVU781
 3019 0d80 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3020              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3021              		.loc 1 560 98 view .LVU782
 3022 0d84 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3023              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3024              		.loc 1 560 87 view .LVU783
 3025 0d88 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3026              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3027              		.loc 1 560 98 view .LVU784
 3028 0d8c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3029              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3030              		.loc 1 560 19 view .LVU785
 3031 0d90 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3032              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3033              		.loc 1 563 113 view .LVU786
 3034 0d94 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3035 0d98 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3036 0d9c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3037 0da0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3038 0da4 050000DA 		ble	.L162		@,
 3039              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3040              		.loc 1 563 104 discriminator 1 view .LVU787
 3041 0da8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3042 0dac FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3043 0db0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3044 0db4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3045 0db8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3046 0dbc 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3047              	.L162:
 3048              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3049              		.loc 1 563 57 discriminator 12 view .LVU788
 3050 0dc0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3051              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3052              		.loc 1 563 102 discriminator 12 view .LVU789
 3053 0dc4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3054 0dc8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3055 0dcc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3056              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3057              		.loc 1 548 58 discriminator 12 view .LVU790
 3058 0dd0 014084E2 		add	r4, r4, #1	@ x, x,
 3059              	.LVL187:
 3060              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3061              		.loc 1 563 102 discriminator 12 view .LVU791
 3062 0dd4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3063              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3064              		.loc 1 548 43 discriminator 12 view .LVU792
 3065 0dd8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3066              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3067              		.loc 1 548 13 discriminator 12 view .LVU793
 3068 0ddc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3069 0de0 CCFFFFCA 		bgt	.L165		@,
 3070 0de4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3071              	.LVL188:
 3072              	.L160:
 3073              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3074              		.loc 1 544 48 discriminator 2 view .LVU794
 3075 0de8 016086E2 		add	r6, r6, #1	@ w, w,
 3076              	.LVL189:
 3077              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3078              		.loc 1 544 9 discriminator 2 view .LVU795
 3079 0dec 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3080 0df0 BEFFFFBA 		blt	.L166		@,
 3081              	.LVL190:
 3082              	.L159:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3083              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU796
 3084              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3085              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU797
 3086 0df4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3087              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3088              		.loc 1 541 27 discriminator 2 view .LVU798
 3089 0df8 018088E2 		add	r8, r8, #1	@ s, s,
 3090              	.LVL191:
 3091              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3092              		.loc 1 541 5 discriminator 2 view .LVU799
 3093 0dfc 080059E1 		cmp	r9, r8	@ sets, s
 3094              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3095              		.loc 1 567 20 discriminator 2 view .LVU800
 3096 0e00 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3097              	.LVL192:
 3098              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3099              		.loc 1 541 5 discriminator 2 view .LVU801
 3100 0e04 AEFFFF1A 		bne	.L158		@,
 3101              	.LVL193:
 3102              	.L155:
 3103              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3104              		.loc 1 569 1 view .LVU802
 3105 0e08 08D08DE2 		add	sp, sp, #8	@,,
 3106              		.cfi_remember_state
 3107              		.cfi_def_cfa_offset 80
 3108              		@ sp needed	@
 3109 0e0c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3110              		.cfi_restore 90
 3111              		.cfi_restore 91
 3112              		.cfi_restore 88
 3113              		.cfi_restore 89
 3114              		.cfi_restore 86
 3115              		.cfi_restore 87
 3116              		.cfi_restore 84
 3117              		.cfi_restore 85
 3118              		.cfi_restore 82
 3119              		.cfi_restore 83
 3120              		.cfi_restore 80
 3121              		.cfi_restore 81
 3122              		.cfi_def_cfa_offset 32
 3123              	.LVL194:
 3124              		.loc 1 569 1 view .LVU803
 3125 0e10 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3126              	.LVL195:
 3127              	.L185:
 3128              		.cfi_restore_state
 3129              	.LBB48:
 3130              	.LBB45:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3131              		.loc 1 489 9 is_stmt 1 view .LVU804
 3132 0e14 940901E0 		mul	r1, r4, r9	@, _85, sets
 3133 0e18 0920A0E1 		mov	r2, r9	@, sets
 3134 0e1c 28009FE5 		ldr	r0, .L186+36	@,
 3135 0e20 FEFFFFEB 		bl	printf		@
 3136              	.LVL196:
 491:armwave.c     ****     }
 3137              		.loc 1 491 9 view .LVU805
 3138 0e24 9FFFFFEA 		b	.L157		@
 3139              	.L187:
 3140              		.align	2
 3141              	.L186:
 3142 0e28 0000803F 		.word	1065353216
 3143 0e2c 00007F43 		.word	1132396544
 3144 0e30 0000003F 		.word	1056964608
 3145 0e34 C3F5C840 		.word	1086911939
 3146 0e38 38FFC74A 		.word	1254620984
 3147 0e3c 0000FE42 		.word	1123942400
 3148 0e40 00000043 		.word	1124073472
 3149 0e44 00000000 		.word	g_armwave_state
 3150 0e48 90020000 		.word	.LC20
 3151 0e4c E8010000 		.word	.LC18
 3152              	.LBE45:
 3153              	.LBE48:
 3154              		.cfi_endproc
 3155              	.LFE75:
 3157              		.align	2
 3158              		.global	armwave_cleanup
 3159              		.syntax unified
 3160              		.arm
 3161              		.fpu vfp
 3163              	armwave_cleanup:
 3164              	.LFB76:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3165              		.loc 1 619 1 view -0
 3166              		.cfi_startproc
 3167              		@ args = 0, pretend = 0, frame = 0
 3168              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3169              		.loc 1 620 5 view .LVU807
 3170              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3171              		.loc 1 619 1 is_stmt 0 view .LVU808
 3172 0e50 10402DE9 		push	{r4, lr}	@
 3173              		.cfi_def_cfa_offset 8
 3174              		.cfi_offset 4, -8
 3175              		.cfi_offset 14, -4
 3176              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3177              		.loc 1 620 25 view .LVU809
 3178 0e54 34409FE5 		ldr	r4, .L190	@ tmp114,
 3179              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3180              		.loc 1 620 5 view .LVU810
 3181 0e58 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3182 0e5c FEFFFFEB 		bl	free		@
 3183              	.LVL197:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3184              		.loc 1 621 5 is_stmt 1 view .LVU811
 3185 0e60 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3186 0e64 FEFFFFEB 		bl	free		@
 3187              	.LVL198:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3188              		.loc 1 622 5 view .LVU812
 3189 0e68 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3190 0e6c FEFFFFEB 		bl	free		@
 3191              	.LVL199:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3192              		.loc 1 623 5 view .LVU813
 3193 0e70 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3194 0e74 FEFFFFEB 		bl	free		@
 3195              	.LVL200:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3196              		.loc 1 625 5 view .LVU814
 3197              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3198              		.loc 1 625 32 is_stmt 0 view .LVU815
 3199 0e78 0030A0E3 		mov	r3, #0	@ tmp123,
 3200 0e7c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3201              		.loc 1 626 5 is_stmt 1 view .LVU816
 3202              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3203              		.loc 1 626 32 is_stmt 0 view .LVU817
 3204 0e80 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3205              		.loc 1 627 5 is_stmt 1 view .LVU818
 3206              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3207              		.loc 1 627 38 is_stmt 0 view .LVU819
 3208 0e84 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3209              		.loc 1 628 5 is_stmt 1 view .LVU820
 3210              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3211              		.loc 1 628 38 is_stmt 0 view .LVU821
 3212 0e88 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3213              	@ armwave.c:629: }
 629:armwave.c     **** }
 3214              		.loc 1 629 1 view .LVU822
 3215 0e8c 1080BDE8 		pop	{r4, pc}	@
 3216              	.L191:
 3217              		.align	2
 3218              	.L190:
 3219 0e90 00000000 		.word	g_armwave_state
 3220              		.cfi_endproc
 3221              	.LFE76:
 3223              		.comm	gamma_table,256,4
 3224              		.comm	g_armwave_state,136,4
 3225              		.section	.rodata
 3226              		.align	2
 3227              		.set	.LANCHOR0,. + 0
 3230              	__PRETTY_FUNCTION__.17095:
 3231 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3231      6176655F 
 3231      66696C6C 
 3231      5F706978 
 3231      6275665F 
 3232 001b 00       		.space	1
 3235              	__PRETTY_FUNCTION__.17125:
 3236 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3236      6176655F 
 3236      73657475 
 3236      705F7265 
 3236      6E646572 
 3237 0031 000000   		.space	3
 3240              	__PRETTY_FUNCTION__.17132:
 3241 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3241      6176655F 
 3241      7365745F 
 3241      77617665 
 3241      5F706F69 
 3242 004d 000000   		.space	3
 3245              	__PRETTY_FUNCTION__.17139:
 3246 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3246      6176655F 
 3246      7365745F 
 3246      77617665 
 3246      5F706F69 
 3247              		.section	.rodata.str1.4,"aMS",%progbits,1
 3248              		.align	2
 3249              	.LC0:
 3250 0000 76302E30 		.ascii	"v0.0.1\000"
 3250      2E3100
 3251 0007 00       		.space	1
 3252              	.LC1:
 3253 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3253      61766520 
 3253      76657273 
 3253      696F6E3A 
 3253      2025730A 
 3254 001d 000000   		.space	3
 3255              	.LC2:
 3256 0020 61726D77 		.ascii	"armwave.c\000"
 3256      6176652E 
 3256      6300
 3257 002a 0000     		.space	2
 3258              	.LC3:
 3259 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3259      62756666 
 3259      65722021 
 3259      3D204E55 
 3259      4C4C00
 3260 003f 00       		.space	1
 3261              	.LC4:
 3262 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3262      20653D25 
 3262      6420773D 
 3262      25642077 
 3262      733D2564 
 3263              	.LC5:
 3264 006c 73746172 		.ascii	"start_point < end_point\000"
 3264      745F706F 
 3264      696E7420 
 3264      3C20656E 
 3264      645F706F 
 3265              	.LC6:
 3266 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3266      7566665F 
 3266      73697A65 
 3266      3D25642C 
 3266      20636D70 
 3267 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3267      5F776964 
 3267      74683D25 
 3267      642C2077 
 3267      6176655F 
 3268 00e1 000000   		.space	3
 3269              	.LC7:
 3270 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3270      6D776176 
 3270      655F7374 
 3270      6174652E 
 3270      6368315F 
 3271 0107 00       		.space	1
 3272              	.LC8:
 3273 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3273      6D776176 
 3273      655F7374 
 3273      6174652E 
 3273      78636F6F 
 3274 0131 000000   		.space	3
 3275              	.LC9:
 3276 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3276      3A203078 
 3276      25303878 
 3276      20307825 
 3276      30387820 
 3277              	.LC10:
 3278 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3278      5F627566 
 3278      66657220 
 3278      213D204E 
 3278      554C4C00 
 3279              	.LC11:
 3280 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3280      6176655F 
 3280      7365745F 
 3280      77617665 
 3280      5F706F69 
 3281 019f 78636565 		.ascii	"xceeded\000"
 3281      64656400 
 3282 01a7 00       		.space	1
 3283              	.LC12:
 3284 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3284      5F627566 
 3284      6665725F 
 3284      70747220 
 3284      213D2030 
 3285 01bd 000000   		.space	3
 3286              	.LC13:
 3287 01c0 776200   		.ascii	"wb\000"
 3288 01c3 00       		.space	1
 3289              	.LC14:
 3290 01c4 50330A00 		.ascii	"P3\012\000"
 3291              	.LC15:
 3292 01c8 25642025 		.ascii	"%d %d\012\000"
 3292      640A00
 3293 01cf 00       		.space	1
 3294              	.LC16:
 3295 01d0 3235350A 		.ascii	"255\012\000"
 3295      00
 3296 01d5 000000   		.space	3
 3297              	.LC17:
 3298 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3298      25336420 
 3298      2533640A 
 3298      00
 3299 01e5 000000   		.space	3
 3300              	.LC18:
 3301 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3301      6176655F 
 3301      74657374 
 3301      5F627566 
 3301      6665725F 
 3302 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3302      20627566 
 3302      66657220 
 3302      28256420 
 3302      62797465 
 3303              	.LC19:
 3304 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3304      6176655F 
 3304      66696C6C 
 3304      5F706978 
 3304      6275665F 
 3305 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3305      20666169 
 3305      6C65642C 
 3305      20726574 
 3305      75726E69 
 3306 028e 0000     		.space	2
 3307              	.LC20:
 3308 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3308      756C6174 
 3308      696E6720 
 3308      74657374 
 3308      20736574 
 3309              		.text
 3310              	.Letext0:
 3311              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3312              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3313              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3314              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3315              		.file 7 "/usr/include/stdio.h"
 3316              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3317              		.file 9 "/usr/include/errno.h"
 3318              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3319              		.file 11 "/usr/include/unistd.h"
 3320              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3321              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3322              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3323              		.file 15 "/usr/include/math.h"
 3324              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3325              		.file 17 "/usr/include/time.h"
 3326              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3327              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3328              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3329              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3330              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3331              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3332              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3333              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3334              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3335              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3336              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3337              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3338              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3339              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3340              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3341              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3342              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3343              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3344              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3345              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3346              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3347              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3348              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3349              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3350              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3351              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3352              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3353              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3354              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3355              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3356              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3357              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3358              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3359              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3360              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3361              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3362              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3363              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3364              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3365              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3366              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3367              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3368              		.file 60 "/usr/local/include/python3.8/context.h"
 3369              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3370              		.file 62 "/usr/local/include/python3.8/code.h"
 3371              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3372              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3373              		.file 65 "/usr/local/include/python3.8/import.h"
 3374              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3375              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3376              		.file 68 "/usr/include/malloc.h"
 3377              		.file 69 "armwave.h"
 3378              		.file 70 "/usr/include/stdlib.h"
 3379              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3380              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3381              		.file 73 "<built-in>"
 3382              		.file 74 "/usr/include/assert.h"
