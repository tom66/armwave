   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 82 is_stmt 0 view .LVU31
 237 009c 08329FE5 		ldr	r3, .L25	@ tmp202,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 259 00b0 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp206, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 384093E5 		ldr	r4, [r3, #56]	@ _77, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 23 view .LVU37
 269 00bc 04C093E5 		ldr	ip, [r3, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 270 00c0 8E90A0E1 		lsl	r9, lr, #1	@ _69, g_armwave_state.bitdepth_height,
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU38
 273 00c4 2118A0E1 		lsr	r1, r1, #16	@ tmp207, tmp206,
 274              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 275              		.loc 1 79 5 view .LVU39
 276 00c8 000054E3 		cmp	r4, #0	@ _77,
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU40
 279 00cc 20408DE5 		str	r4, [sp, #32]	@ _77, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 23 view .LVU41
 282 00d0 99C12AE0 		mla	r10, r9, r1, ip	@ write_buffer_base, _69, tmp207, g_armwave_state.ch1_buffer
 283              	.LVL8:
 284              		.loc 1 79 5 is_stmt 1 view .LVU42
 285              		.loc 1 79 5 is_stmt 0 view .LVU43
 286 00d4 6E0000DA 		ble	.L12		@,
 287              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 288              		.loc 1 80 36 view .LVU44
 289 00d8 141093E5 		ldr	r1, [r3, #20]	@ _9, g_armwave_state.wave_buffer
 290 00dc 343093E5 		ldr	r3, [r3, #52]	@ _227, g_armwave_state.wave_stride
 291 00e0 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 292 00e4 24308DE5 		str	r3, [sp, #36]	@ _227, %sfp
 293 00e8 8230A0E1 		lsl	r3, r2, #1	@ tmp215, _2,
 294 00ec 2C308DE5 		str	r3, [sp, #44]	@ tmp215, %sfp
 295 00f0 023083E0 		add	r3, r3, r2	@ ivtmp.46, tmp215, _2
 296 00f4 001081E0 		add	r1, r1, r0	@ tmp213, _9, slice_y
 297 00f8 28308DE5 		str	r3, [sp, #40]	@ ivtmp.46, %sfp
 298              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 299              		.loc 1 79 11 view .LVU45
 300 00fc 0980A0E1 		mov	r8, r9	@ _69, _69
 301 0100 0231A0E1 		lsl	r3, r2, #2	@ _208, _2,
 302 0104 000061E2 		rsb	r0, r1, #0	@ ivtmp.52, tmp213
 303              	.LVL9:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 304              		.loc 1 79 11 view .LVU46
 305 0108 18108DE5 		str	r1, [sp, #24]	@ tmp213, %sfp
 306 010c 00308DE5 		str	r3, [sp]	@ _208, %sfp
 307 0110 8C10A0E1 		lsl	r1, ip, #1	@ tmp220, tmp219,
 308 0114 0030A0E3 		mov	r3, #0	@ w,
 309 0118 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.52, %sfp
 310 011c 14108DE5 		str	r1, [sp, #20]	@ tmp220, %sfp
 311 0120 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 312              	.LVL10:
 313              	.L18:
 314              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 315              		.loc 1 84 9 view .LVU48
 316              		.loc 1 84 9 is_stmt 0 view .LVU49
 317 0124 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 318 0128 000053E3 		cmp	r3, #0	@ height,
 319 012c 4B00000A 		beq	.L13		@,
 320 0130 2C009DE5 		ldr	r0, [sp, #44]	@ ivtmp.47, %sfp
 321 0134 28709DE5 		ldr	r7, [sp, #40]	@ ivtmp.46, %sfp
 322 0138 18909DE5 		ldr	r9, [sp, #24]	@ ivtmp.45, %sfp
 323              	.LVL11:
 324              	.L17:
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 325              		.loc 1 85 13 is_stmt 1 view .LVU50
  86:armwave.c     **** 
  87:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d word=0x%08x\n", w, g_armwave_sta
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 // BUG:  waves 3/4/5 seem to be all zeroes; this kinda ignores them but obviously n
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 326              		.loc 1 101 17 view .LVU51
 327              		.loc 1 101 17 view .LVU52
 328              		.loc 1 101 17 view .LVU53
 329              		.loc 1 101 17 view .LVU54
 330              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 34 is_stmt 0 view .LVU55
 332 013c 14309DE5 		ldr	r3, [sp, #20]	@ tmp220, %sfp
 333 0140 00209DE5 		ldr	r2, [sp]	@ _208, %sfp
 334 0144 03C087E0 		add	ip, r7, r3	@ tmp243, ivtmp.46, tmp220
 335 0148 03E080E0 		add	lr, r0, r3	@ tmp228, ivtmp.47, tmp220
 336              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 337              		.loc 1 85 18 view .LVU56
 338 014c 043099E4 		ldr	r3, [r9], #4	@ word, MEM[base: _214, offset: 0B]
 339              	.LVL12:
  89:armwave.c     ****                 scale_value = word & 0xff;
 340              		.loc 1 89 13 is_stmt 1 view .LVU57
  90:armwave.c     ****                 
 341              		.loc 1 90 17 view .LVU58
  94:armwave.c     ****                     continue;
 342              		.loc 1 94 17 view .LVU59
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 344              		.loc 1 102 74 is_stmt 0 view .LVU60
 345 0150 2718A0E1 		lsr	r1, r7, #16	@ tmp271, ivtmp.46,
 346              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 347              		.loc 1 94 20 view .LVU61
 348 0154 FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 349 0158 0140A003 		moveq	r4, #1	@ tmp222,
 350 015c 0040A013 		movne	r4, #0	@ tmp222,
 351              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 352              		.loc 1 94 19 view .LVU62
 353 0160 FF0056E3 		cmp	r6, #255	@ scale_value,
 354 0164 01408403 		orreq	r4, r4, #1	@,, tmp227, tmp222
 355              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 106 47 view .LVU63
 357 0168 8650A0E1 		lsl	r5, r6, #1	@ tmp231, scale_value,
 358              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 359              		.loc 1 84 9 view .LVU64
 360 016c 0C609DE5 		ldr	r6, [sp, #12]	@ ivtmp.52, %sfp
 361              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 362              		.loc 1 94 19 view .LVU65
 363 0170 000054E3 		cmp	r4, #0	@ tmp227,
 364              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 365              		.loc 1 84 9 view .LVU66
 366 0174 066089E0 		add	r6, r9, r6	@ tmp277, ivtmp.45, ivtmp.52
 367              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 368              		.loc 1 102 74 view .LVU67
 369 0178 08108DE5 		str	r1, [sp, #8]	@ tmp271, %sfp
 370 017c 027087E0 		add	r7, r7, r2	@ ivtmp.46, ivtmp.46, _208
 371 0180 2EE8A0E1 		lsr	lr, lr, #16	@ tmp229, tmp228,
 372 0184 2CC8A0E1 		lsr	ip, ip, #16	@ tmp244, tmp243,
 373              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 374              		.loc 1 107 22 view .LVU68
 375 0188 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 376 018c 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 377              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 378              		.loc 1 84 9 view .LVU69
 379 0190 04608DE5 		str	r6, [sp, #4]	@ tmp277, %sfp
 380              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 381              		.loc 1 94 19 view .LVU70
 382 0194 2B00001A 		bne	.L16		@,
 383              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 384              		.loc 1 101 30 view .LVU71
 385 0198 98AE2BE0 		mla	fp, r8, lr, r10	@ write_buffer, _69, tmp229, write_buffer_base
 386              	.LVL13:
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 17 is_stmt 1 view .LVU72
 388              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 389              		.loc 1 94 20 is_stmt 0 view .LVU73
 390 019c FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 391 01a0 0140A003 		moveq	r4, #1	@ tmp237,
 392              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 393              		.loc 1 106 47 view .LVU74
 394 01a4 B5E09BE1 		ldrh	lr, [fp, r5]	@ *_88, *_88
 395              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 396              		.loc 1 94 20 view .LVU75
 397 01a8 0040A013 		movne	r4, #0	@ tmp237,
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU76
 400 01ac 8160A0E1 		lsl	r6, r1, #1	@ tmp246, scale_value,
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU77
 403 01b0 FF0051E3 		cmp	r1, #255	@ scale_value,
 404 01b4 0410A011 		movne	r1, r4	@, tmp242, tmp237
 405 01b8 01108403 		orreq	r1, r4, #1	@,, tmp242, tmp237
 406              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 407              		.loc 1 106 47 view .LVU78
 408 01bc 01E08EE2 		add	lr, lr, #1	@ tmp234, *_88,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 19 view .LVU79
 411 01c0 000051E3 		cmp	r1, #0	@ tmp242,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU80
 414 01c4 B5E08BE1 		strh	lr, [fp, r5]	@ movhi	@ tmp234, *_88
 415              		.loc 1 107 17 is_stmt 1 view .LVU81
 416              	.LVL14:
  90:armwave.c     ****                 
 417              		.loc 1 90 17 view .LVU82
  94:armwave.c     ****                     continue;
 418              		.loc 1 94 17 view .LVU83
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 19 is_stmt 0 view .LVU84
 421 01c8 1E00001A 		bne	.L16		@,
 422              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 423              		.loc 1 101 30 view .LVU85
 424 01cc 98AC2BE0 		mla	fp, r8, ip, r10	@ write_buffer, _69, tmp244, write_buffer_base
 425              	.LVL15:
 106:armwave.c     ****                 word >>= 8;
 426              		.loc 1 106 17 is_stmt 1 view .LVU86
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 is_stmt 0 view .LVU87
 429 01d0 FF2012E2 		ands	r2, r2, #255	@ scale_value, word,
 430 01d4 01C0A003 		moveq	ip, #1	@ tmp252,
 431              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 432              		.loc 1 106 47 view .LVU88
 433 01d8 B6109BE1 		ldrh	r1, [fp, r6]	@ *_119, *_119
 434              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 435              		.loc 1 94 20 view .LVU89
 436 01dc 00C0A013 		movne	ip, #0	@ tmp252,
 437              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 438              		.loc 1 106 47 view .LVU90
 439 01e0 82E0A0E1 		lsl	lr, r2, #1	@ tmp260, scale_value,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 19 view .LVU91
 442 01e4 FF0052E3 		cmp	r2, #255	@ scale_value,
 443 01e8 0C20A011 		movne	r2, ip	@, tmp257, tmp252
 444 01ec 01208C03 		orreq	r2, ip, #1	@,, tmp257, tmp252
 445              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 446              		.loc 1 106 47 view .LVU92
 447 01f0 011081E2 		add	r1, r1, #1	@ tmp249, *_119,
 448              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 449              		.loc 1 94 19 view .LVU93
 450 01f4 000052E3 		cmp	r2, #0	@ tmp257,
 451              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 452              		.loc 1 106 47 view .LVU94
 453 01f8 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp249, *_119
 454              		.loc 1 107 17 is_stmt 1 view .LVU95
 455              	.LVL16:
  90:armwave.c     ****                 
 456              		.loc 1 90 17 view .LVU96
  94:armwave.c     ****                     continue;
 457              		.loc 1 94 17 view .LVU97
 458              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 459              		.loc 1 94 19 is_stmt 0 view .LVU98
 460 01fc 1100001A 		bne	.L16		@,
 461              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 462              		.loc 1 101 30 view .LVU99
 463 0200 2028A0E1 		lsr	r2, r0, #16	@ tmp258, ivtmp.47,
 464              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 465              		.loc 1 94 20 view .LVU100
 466 0204 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 467              	.LVL17:
 468              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 469              		.loc 1 101 30 view .LVU101
 470 0208 98A22BE0 		mla	fp, r8, r2, r10	@ write_buffer, _69, tmp258, write_buffer_base
 471              	.LVL18:
 106:armwave.c     ****                 word >>= 8;
 472              		.loc 1 106 17 is_stmt 1 view .LVU102
 473              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 474              		.loc 1 94 20 is_stmt 0 view .LVU103
 475 020c 0110A003 		moveq	r1, #1	@ tmp265,
 476 0210 0010A013 		movne	r1, #0	@ tmp265,
 477              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 478              		.loc 1 106 47 view .LVU104
 479 0214 83C0A0E1 		lsl	ip, r3, #1	@ tmp273, word,
 480              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 481              		.loc 1 94 19 view .LVU105
 482 0218 FF0053E3 		cmp	r3, #255	@ word,
 483 021c 0130A011 		movne	r3, r1	@, tmp270, tmp265
 484 0220 01308103 		orreq	r3, r1, #1	@,, tmp270, tmp265
 485 0224 000053E3 		cmp	r3, #0	@ tmp270,
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU106
 488 0228 BE209BE1 		ldrh	r2, [fp, lr]	@ *_150, *_150
 489              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 490              		.loc 1 101 30 view .LVU107
 491 022c 08109D05 		ldreq	r1, [sp, #8]	@ tmp271, %sfp
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU108
 494 0230 012082E2 		add	r2, r2, #1	@ tmp263, *_150,
 495 0234 BE208BE1 		strh	r2, [fp, lr]	@ movhi	@ tmp263, *_150
 496              		.loc 1 107 17 is_stmt 1 view .LVU109
 497              	.LVL19:
  90:armwave.c     ****                 
 498              		.loc 1 90 17 view .LVU110
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU111
 500              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 501              		.loc 1 101 30 is_stmt 0 view .LVU112
 502 0238 98A12B00 		mlaeq	fp, r8, r1, r10	@ write_buffer, _69, tmp271, write_buffer_base
 503              	.LVL20:
 106:armwave.c     ****                 word >>= 8;
 504              		.loc 1 106 17 is_stmt 1 view .LVU113
 505              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 506              		.loc 1 106 47 is_stmt 0 view .LVU114
 507 023c BC309B01 		ldrheq	r3, [fp, ip]	@ *_181, *_181
 508 0240 01308302 		addeq	r3, r3, #1	@ tmp276, *_181,
 509 0244 BC308B01 		strheq	r3, [fp, ip]	@ movhi	@ tmp276, *_181
 510              		.loc 1 107 17 is_stmt 1 view .LVU115
 511              	.LVL21:
 512              	.L16:
 513              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 514              		.loc 1 84 9 is_stmt 0 view .LVU116
 515 0248 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 516 024c 04209DE5 		ldr	r2, [sp, #4]	@ tmp277, %sfp
 517 0250 020053E1 		cmp	r3, r2	@ height, tmp277
 518 0254 00309DE5 		ldr	r3, [sp]	@ _208, %sfp
 519 0258 030080E0 		add	r0, r0, r3	@ ivtmp.47, ivtmp.47, _208
 520 025c B6FFFF8A 		bhi	.L17		@,
 521              	.L13:
 522              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 79 44 discriminator 2 view .LVU117
 524 0260 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 525              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 79 5 discriminator 2 view .LVU118
 527 0264 20209DE5 		ldr	r2, [sp, #32]	@ _77, %sfp
 528              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 79 44 discriminator 2 view .LVU119
 530 0268 013083E2 		add	r3, r3, #1	@ w, w,
 531              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 79 5 discriminator 2 view .LVU120
 533 026c 020053E1 		cmp	r3, r2	@ w, _77
 534              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 535              		.loc 1 79 44 discriminator 2 view .LVU121
 536 0270 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 537              	.LVL22:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 538              		.loc 1 79 44 discriminator 2 view .LVU122
 539 0274 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.52, %sfp
 540 0278 24309DE5 		ldr	r3, [sp, #36]	@ _227, %sfp
 541              	.LVL23:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 discriminator 2 view .LVU123
 543 027c 032042E0 		sub	r2, r2, r3	@ ivtmp.52, ivtmp.52, _227
 544 0280 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.52, %sfp
 545 0284 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.53, %sfp
 546 0288 033082E0 		add	r3, r2, r3	@ ivtmp.53, ivtmp.53, _227
 547 028c 18308DE5 		str	r3, [sp, #24]	@ ivtmp.53, %sfp
 548              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 79 5 discriminator 2 view .LVU124
 550 0290 A3FFFF1A 		bne	.L18		@,
 551              	.LVL24:
 552              	.L12:
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** 
 112:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 553              		.loc 1 112 5 is_stmt 1 view .LVU125
 554              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 555              		.loc 1 112 40 is_stmt 0 view .LVU126
 556 0294 0A104BE0 		sub	r1, fp, r10	@ tmp278, write_buffer, write_buffer_base
 557              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 558              		.loc 1 112 5 view .LVU127
 559 0298 10009FE5 		ldr	r0, .L25+4	@,
 560 029c C110A0E1 		asr	r1, r1, #1	@, tmp278,
 561              	@ armwave.c:113: }
 113:armwave.c     **** }
 562              		.loc 1 113 1 view .LVU128
 563 02a0 34D08DE2 		add	sp, sp, #52	@,,
 564              		.cfi_def_cfa_offset 36
 565              		@ sp needed	@
 566 02a4 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 567              		.cfi_restore 14
 568              		.cfi_restore 11
 569              		.cfi_restore 10
 570              		.cfi_restore 9
 571              		.cfi_restore 8
 572              		.cfi_restore 7
 573              		.cfi_restore 6
 574              		.cfi_restore 5
 575              		.cfi_restore 4
 576              		.cfi_def_cfa_offset 0
 577              	.LVL25:
 578              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 579              		.loc 1 112 5 view .LVU129
 580 02a8 FEFFFFEA 		b	printf		@
 581              	.LVL26:
 582              	.L26:
 583              		.align	2
 584              	.L25:
 585 02ac 00000000 		.word	g_armwave_state
 586 02b0 20000000 		.word	.LC2
 587              		.cfi_endproc
 588              	.LFE59:
 590              		.align	2
 591              		.global	armwave_fill_pixbuf_scaled
 592              		.syntax unified
 593              		.arm
 594              		.fpu vfp
 596              	armwave_fill_pixbuf_scaled:
 597              	.LVL27:
 598              	.LFB60:
 114:armwave.c     **** 
 115:armwave.c     **** /*
 116:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 117:armwave.c     ****  * Rows are repeated as necessary.
 118:armwave.c     ****  */
 119:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 120:armwave.c     **** {
 599              		.loc 1 120 1 is_stmt 1 view -0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 24
 602              		@ frame_needed = 0, uses_anonymous_args = 0
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 603              		.loc 1 121 5 view .LVU131
 122:armwave.c     ****     // uint32_t ysub;
 123:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 604              		.loc 1 123 5 view .LVU132
 124:armwave.c     ****     uint8_t r, g, b;
 605              		.loc 1 124 5 view .LVU133
 125:armwave.c     ****     int value; 
 606              		.loc 1 125 5 view .LVU134
 126:armwave.c     ****     // uint8_t row;
 127:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 607              		.loc 1 127 5 view .LVU135
 608              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 609              		.loc 1 120 1 is_stmt 0 view .LVU136
 610 02b4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 611              		.cfi_def_cfa_offset 36
 612              		.cfi_offset 4, -36
 613              		.cfi_offset 5, -32
 614              		.cfi_offset 6, -28
 615              		.cfi_offset 7, -24
 616              		.cfi_offset 8, -20
 617              		.cfi_offset 9, -16
 618              		.cfi_offset 10, -12
 619              		.cfi_offset 11, -8
 620              		.cfi_offset 14, -4
 621              	@ armwave.c:131:     printf("output buffer: 0x%08x\n", out_buffer);
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 129:armwave.c     ****     uint32_t offset;
 130:armwave.c     **** 
 131:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 622              		.loc 1 131 5 view .LVU137
 623 02b8 0010A0E1 		mov	r1, r0	@, out_buffer
 624              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 625              		.loc 1 127 15 view .LVU138
 626 02bc CC419FE5 		ldr	r4, .L50	@ tmp241,
 627              	@ armwave.c:120: {
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 628              		.loc 1 120 1 view .LVU139
 629 02c0 0050A0E1 		mov	r5, r0	@ out_buffer, out_buffer
 630 02c4 2CD04DE2 		sub	sp, sp, #44	@,,
 631              		.cfi_def_cfa_offset 80
 632              	@ armwave.c:131:     printf("output buffer: 0x%08x\n", out_buffer);
 633              		.loc 1 131 5 view .LVU140
 634 02c8 C4019FE5 		ldr	r0, .L50+4	@,
 635              	.LVL28:
 636              	@ armwave.c:127:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 637              		.loc 1 127 15 view .LVU141
 638 02cc 046094E5 		ldr	r6, [r4, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 639              	.LVL29:
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 640              		.loc 1 128 5 is_stmt 1 view .LVU142
 129:armwave.c     **** 
 641              		.loc 1 129 5 view .LVU143
 642              		.loc 1 131 5 view .LVU144
 643 02d0 FEFFFFEB 		bl	printf		@
 644              	.LVL30:
 132:armwave.c     **** 
 133:armwave.c     ****     if(out_buffer == NULL)
 645              		.loc 1 133 5 view .LVU145
 646              	@ armwave.c:133:     if(out_buffer == NULL)
 647              		.loc 1 133 7 is_stmt 0 view .LVU146
 648 02d4 000055E3 		cmp	r5, #0	@ out_buffer,
 649 02d8 2A00000A 		beq	.L27		@,
 134:armwave.c     ****         return;
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 650              		.loc 1 136 5 is_stmt 1 view .LVU147
 651              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 652              		.loc 1 136 27 is_stmt 0 view .LVU148
 653 02dc 583094E5 		ldr	r3, [r4, #88]	@ _1, g_armwave_state.target_width
 654              	@ armwave.c:139:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 137:armwave.c     ****     
 138:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 655              		.loc 1 139 38 view .LVU149
 656 02e0 5C1094E5 		ldr	r1, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 657              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 658              		.loc 1 136 10 view .LVU150
 659 02e4 407094E5 		ldr	r7, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 660              	@ armwave.c:138:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 661              		.loc 1 138 5 view .LVU151
 662 02e8 24008DE2 		add	r0, sp, #36	@ tmp193,,
 663              	@ armwave.c:139:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 664              		.loc 1 139 38 view .LVU152
 665 02ec 910301E0 		mul	r1, r1, r3	@ tmp189, g_armwave_state.target_height, _1
 666              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 136:armwave.c     ****     
 667              		.loc 1 136 10 view .LVU153
 668 02f0 970307E0 		mul	r7, r7, r3	@ npix, g_armwave_state.bitdepth_height, _1
 669              	.LVL31:
 138:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 670              		.loc 1 138 5 is_stmt 1 view .LVU154
 671 02f4 0111A0E1 		lsl	r1, r1, #2	@, tmp189,
 672 02f8 0720A0E1 		mov	r2, r7	@, npix
 673 02fc 08008DE5 		str	r0, [sp, #8]	@ tmp193,
 674 0300 503094E5 		ldr	r3, [r4, #80]	@, g_armwave_state.ch_buff_size
 675 0304 04508DE5 		str	r5, [sp, #4]	@ out_buffer,
 676 0308 00608DE5 		str	r6, [sp]	@ base_32ptr,
 677 030c 84019FE5 		ldr	r0, .L50+8	@,
 678 0310 FEFFFFEB 		bl	printf		@
 679              	.LVL32:
 140:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 141:armwave.c     **** 
 142:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 143:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 680              		.loc 1 143 5 view .LVU155
 681              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 682              		.loc 1 143 59 is_stmt 0 view .LVU156
 683 0314 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 684 0318 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 685              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 686              		.loc 1 143 5 view .LVU157
 687 031c 0010A0E3 		mov	r1, #0	@,
 688 0320 0500A0E1 		mov	r0, r5	@, out_buffer
 689              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 690              		.loc 1 143 59 view .LVU158
 691 0324 920302E0 		mul	r2, r2, r3	@ tmp196, g_armwave_state.target_height, g_armwave_state.target_width
 692              	@ armwave.c:143:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 693              		.loc 1 143 5 view .LVU159
 694 0328 0221A0E1 		lsl	r2, r2, #2	@, tmp196,
 695 032c FEFFFFEB 		bl	memset		@
 696              	.LVL33:
 144:armwave.c     **** 
 145:armwave.c     ****     printf("iter...\n");
 697              		.loc 1 145 5 is_stmt 1 view .LVU160
 698 0330 64019FE5 		ldr	r0, .L50+12	@,
 699 0334 FEFFFFEB 		bl	puts		@
 700              	.LVL34:
 146:armwave.c     **** 
 147:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 701              		.loc 1 147 5 view .LVU161
 702              		.loc 1 147 5 is_stmt 0 view .LVU162
 703 0338 000057E3 		cmp	r7, #0	@ npix,
 704 033c 510000DA 		ble	.L36		@,
 705              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 149:armwave.c     ****         //wave_word = 0x12345678;
 150:armwave.c     ****         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 152:armwave.c     ****         /*
 153:armwave.c     ****         if(n % 200 == 0) {
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     ****         */
 157:armwave.c     **** 
 158:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 159:armwave.c     ****             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 162:armwave.c     **** 
 163:armwave.c     ****                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 706              		.loc 1 164 52 view .LVU163
 707 0340 FC36D4E1 		ldrsh	r3, [r4, #108]	@ _18, g_armwave_state.ch1_color.r
 708              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 168:armwave.c     ****                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 171:armwave.c     **** 
 172:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 173:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 175:armwave.c     ****                     // Plot the pixels
 176:armwave.c     ****                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 709              		.loc 1 177 57 view .LVU164
 710 0344 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _38, g_armwave_state.vscale_frac
 711              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 712              		.loc 1 147 11 view .LVU165
 713 0348 0090A0E3 		mov	r9, #0	@ n,
 714              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 715              		.loc 1 164 52 view .LVU166
 716 034c 14308DE5 		str	r3, [sp, #20]	@ _18, %sfp
 717              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 718              		.loc 1 165 52 view .LVU167
 719 0350 FE36D4E1 		ldrsh	r3, [r4, #110]	@ _21, g_armwave_state.ch1_color.g
 720              	@ armwave.c:121:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 121:armwave.c     ****     // uint32_t ysub;
 721              		.loc 1 121 46 view .LVU168
 722 0354 0910A0E1 		mov	r1, r9	@ painted, n
 723              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 724              		.loc 1 165 52 view .LVU169
 725 0358 18308DE5 		str	r3, [sp, #24]	@ _21, %sfp
 726              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 727              		.loc 1 166 52 view .LVU170
 728 035c F037D4E1 		ldrsh	r3, [r4, #112]	@ _24, g_armwave_state.ch1_color.b
 729 0360 1C308DE5 		str	r3, [sp, #28]	@ _24, %sfp
 730              	.LVL35:
 731              	.L35:
 150:armwave.c     **** 
 732              		.loc 1 150 9 is_stmt 1 view .LVU171
 733              	@ armwave.c:150:         wave_word = *base_32ptr++;
 150:armwave.c     **** 
 734              		.loc 1 150 19 is_stmt 0 view .LVU172
 735 0364 04C096E4 		ldr	ip, [r6], #4	@ wave_word, MEM[base: base_32ptr_77, offset: 4294967292B]
 736              	.LVL36:
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 737              		.loc 1 158 9 is_stmt 1 view .LVU173
 738              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 739              		.loc 1 158 11 is_stmt 0 view .LVU174
 740 0368 00005CE3 		cmp	ip, #0	@ wave_word,
 741              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 742              		.loc 1 159 26 view .LVU175
 743 036c 00A0A013 		movne	r10, #0	@ w.9_107,
 744              	@ armwave.c:158:         if(COND_UNLIKELY(wave_word != 0)) {
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 745              		.loc 1 158 11 view .LVU176
 746 0370 3B00001A 		bne	.L34		@,
 747              	.L31:
 748              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 749              		.loc 1 147 28 discriminator 2 view .LVU177
 750 0374 029089E2 		add	r9, r9, #2	@ n, n,
 751              	.LVL37:
 752              	@ armwave.c:147:     for(n = 0; n < npix; n += 2) {
 147:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 753              		.loc 1 147 5 discriminator 2 view .LVU178
 754 0378 090057E1 		cmp	r7, r9	@ npix, n
 755 037c F8FFFFCA 		bgt	.L35		@,
 756              	.LVL38:
 757              	.L30:
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 181:armwave.c     ****                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 186:armwave.c     ****                     }
 187:armwave.c     ****                 }
 188:armwave.c     ****             }
 189:armwave.c     ****         }
 190:armwave.c     ****     }
 191:armwave.c     **** 
 192:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 758              		.loc 1 192 5 is_stmt 1 view .LVU179
 759 0380 18019FE5 		ldr	r0, .L50+16	@,
 760 0384 FEFFFFEB 		bl	printf		@
 761              	.LVL39:
 762              	.L27:
 763              	@ armwave.c:193: }
 193:armwave.c     **** }
 764              		.loc 1 193 1 is_stmt 0 view .LVU180
 765 0388 2CD08DE2 		add	sp, sp, #44	@,,
 766              		.cfi_remember_state
 767              		.cfi_def_cfa_offset 36
 768              		@ sp needed	@
 769 038c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 770              	.LVL40:
 771              	.L49:
 772              		.cfi_restore_state
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 773              		.loc 1 164 21 is_stmt 1 view .LVU181
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 165 21 view .LVU182
 166:armwave.c     **** 
 775              		.loc 1 166 21 view .LVU183
 168:armwave.c     ****                     g = MIN(gg, 255);
 776              		.loc 1 168 21 view .LVU184
 169:armwave.c     ****                     b = MIN(bb, 255);
 777              		.loc 1 169 21 view .LVU185
 170:armwave.c     **** 
 778              		.loc 1 170 21 view .LVU186
 173:armwave.c     **** 
 779              		.loc 1 173 21 view .LVU187
 780 0390 0AE089E0 		add	lr, r9, r10	@ _154, n, w.9_107
 781              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 782              		.loc 1 166 55 is_stmt 0 view .LVU188
 783 0394 1C209DE5 		ldr	r2, [sp, #28]	@ _24, %sfp
 784              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 785              		.loc 1 177 32 view .LVU189
 786 0398 7E00EFE6 		uxtb	r0, lr	@ _36, _154
 787              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 788              		.loc 1 178 41 view .LVU190
 789 039c 018080E2 		add	r8, r0, #1	@ tmp227, _36,
 790              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 791              		.loc 1 177 40 view .LVU191
 792 03a0 900A07EE 		vmov	s15, r0	@ int	@ _36, _36
 793              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 794              		.loc 1 178 41 view .LVU192
 795 03a4 108A07EE 		vmov	s14, r8	@ int	@ tmp227, tmp227
 796              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 797              		.loc 1 165 55 view .LVU193
 798 03a8 18009DE5 		ldr	r0, [sp, #24]	@ _21, %sfp
 799              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 800              		.loc 1 166 55 view .LVU194
 801 03ac 930202E0 		mul	r2, r3, r2	@ tmp212, value, _24
 802              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 177 40 view .LVU195
 804 03b0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, _36
 805              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 806              		.loc 1 178 46 view .LVU196
 807 03b4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp228, tmp227
 808              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 809              		.loc 1 165 55 view .LVU197
 810 03b8 930000E0 		mul	r0, r3, r0	@ tmp216, value, _21
 811              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 812              		.loc 1 164 55 view .LVU198
 813 03bc 14809DE5 		ldr	r8, [sp, #20]	@ _18, %sfp
 814              	@ armwave.c:166:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 166:armwave.c     **** 
 815              		.loc 1 166 24 view .LVU199
 816 03c0 4224A0E1 		asr	r2, r2, #8	@ bb, tmp212,
 817              	.LVL41:
 818              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 819              		.loc 1 170 25 view .LVU200
 820 03c4 FF0052E3 		cmp	r2, #255	@ bb,
 821              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 822              		.loc 1 164 55 view .LVU201
 823 03c8 930803E0 		mul	r3, r3, r8	@ tmp222, value, _18
 824              	.LVL42:
 825              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 826              		.loc 1 177 40 view .LVU202
 827 03cc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp226, tmp225, _38
 828              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 829              		.loc 1 178 46 view .LVU203
 830 03d0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp229, tmp228, _38
 831              	@ armwave.c:165:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 832              		.loc 1 165 24 view .LVU204
 833 03d4 4004A0E1 		asr	r0, r0, #8	@ gg, tmp216,
 834              	.LVL43:
 835              	@ armwave.c:170:                     b = MIN(bb, 255);
 170:armwave.c     **** 
 836              		.loc 1 170 25 view .LVU205
 837 03d8 FF20A0A3 		movge	r2, #255	@ bb,
 838              	.LVL44:
 839              	@ armwave.c:169:                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 840              		.loc 1 169 25 view .LVU206
 841 03dc FF0050E3 		cmp	r0, #255	@ gg,
 842 03e0 FF00A0A3 		movge	r0, #255	@ gg,
 843              	.LVL45:
 844              	@ armwave.c:164:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 845              		.loc 1 164 24 view .LVU207
 846 03e4 4334A0E1 		asr	r3, r3, #8	@ rr, tmp222,
 847              	.LVL46:
 848              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 849              		.loc 1 168 25 view .LVU208
 850 03e8 FF0053E3 		cmp	r3, #255	@ rr,
 851              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 852              		.loc 1 177 24 view .LVU209
 853 03ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp226
 854              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 855              		.loc 1 173 56 view .LVU210
 856 03f0 0004A0E1 		lsl	r0, r0, #8	@ tmp217, gg,
 857              	@ armwave.c:168:                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 858              		.loc 1 168 25 view .LVU211
 859 03f4 FF30A0A3 		movge	r3, #255	@ rr,
 860              	.LVL47:
 861              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 862              		.loc 1 173 44 view .LVU212
 863 03f8 0228A0E1 		lsl	r2, r2, #16	@ tmp213, bb,
 864              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 865              		.loc 1 179 32 view .LVU213
 866 03fc 4EE4A0E1 		asr	lr, lr, #8	@ tmp230, _154,
 867              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 868              		.loc 1 173 44 view .LVU214
 869 0400 FF2802E2 		and	r2, r2, #16711680	@ tmp214, tmp213,
 870              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 871              		.loc 1 173 56 view .LVU215
 872 0404 7000FFE6 		uxth	r0, r0	@ tmp218, tmp217
 873              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 874              		.loc 1 173 51 view .LVU216
 875 0408 000082E1 		orr	r0, r2, r0	@ tmp220, tmp214, tmp218
 876              	@ armwave.c:177:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 877              		.loc 1 177 24 view .LVU217
 878 040c 90BA17EE 		vmov	fp, s15	@ int	@ yy, yy
 879              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 880              		.loc 1 178 24 view .LVU218
 881 0410 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp229
 882              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 883              		.loc 1 173 62 view .LVU219
 884 0414 7330EFE6 		uxtb	r3, r3	@ rr, rr
 885              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 886              		.loc 1 179 38 view .LVU220
 887 0418 AEEF8EE0 		add	lr, lr, lr, lsr #31	@ tmp232, tmp230, tmp230,
 888              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 889              		.loc 1 173 62 view .LVU221
 890 041c 030080E1 		orr	r0, r0, r3	@ tmp224, tmp220, rr
 891              	@ armwave.c:173:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 892              		.loc 1 173 26 view .LVU222
 893 0420 FF0480E3 		orr	r0, r0, #-16777216	@ word, tmp224,
 894              	.LVL48:
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 895              		.loc 1 176 21 is_stmt 1 view .LVU223
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 896              		.loc 1 177 21 view .LVU224
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 897              		.loc 1 178 21 view .LVU225
 898              	@ armwave.c:179:                     xx = (nsub >> 8) / 2;
 179:armwave.c     **** 
 899              		.loc 1 179 38 is_stmt 0 view .LVU226
 900 0424 CEE0A0E1 		asr	lr, lr, #1	@ xx, tmp232,
 901              	@ armwave.c:178:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 902              		.loc 1 178 24 view .LVU227
 903 0428 908A17EE 		vmov	r8, s15	@ int	@ ye, ye
 904              	.LVL49:
 179:armwave.c     **** 
 905              		.loc 1 179 21 is_stmt 1 view .LVU228
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 906              		.loc 1 181 21 view .LVU229
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 907              		.loc 1 181 21 is_stmt 0 view .LVU230
 908 042c 08005BE1 		cmp	fp, r8	@ yy, ye
 909 0430 0800002A 		bcs	.L32		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 910              		.loc 1 181 21 view .LVU231
 911 0434 0B30A0E1 		mov	r3, fp	@ y, yy
 912              	.LVL50:
 913              	.L33:
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 914              		.loc 1 182 25 is_stmt 1 discriminator 3 view .LVU232
 184:armwave.c     ****                         painted++;
 915              		.loc 1 184 25 discriminator 3 view .LVU233
 916              	@ armwave.c:182:                         offset = (xx + (y * g_armwave_state.target_width)); 
 182:armwave.c     ****                         //printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, 
 917              		.loc 1 182 43 is_stmt 0 discriminator 3 view .LVU234
 918 0438 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 919              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 920              		.loc 1 184 43 discriminator 3 view .LVU235
 921 043c 92E322E0 		mla	r2, r2, r3, lr	@ tmp237, g_armwave_state.target_width, y, xx
 922              	.LVL51:
 923              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 924              		.loc 1 181 42 discriminator 3 view .LVU236
 925 0440 013083E2 		add	r3, r3, #1	@ y, y,
 926              	.LVL52:
 927              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 928              		.loc 1 181 21 discriminator 3 view .LVU237
 929 0444 030058E1 		cmp	r8, r3	@ ye, y
 930              	@ armwave.c:184:                         *(out_buffer_base + offset) = word;
 184:armwave.c     ****                         painted++;
 931              		.loc 1 184 53 discriminator 3 view .LVU238
 932 0448 020185E7 		str	r0, [r5, r2, lsl #2]	@ word, *_49
 185:armwave.c     ****                     }
 933              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU239
 934              	.LVL53:
 935              	@ armwave.c:181:                     for(y = yy; y < ye; y++) {
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 936              		.loc 1 181 21 is_stmt 0 discriminator 3 view .LVU240
 937 044c F9FFFF1A 		bne	.L33		@,
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 938              		.loc 1 181 21 discriminator 3 view .LVU241
 939 0450 0B8048E0 		sub	r8, r8, fp	@ tmp238, ye, yy
 940              	.LVL54:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 941              		.loc 1 181 21 discriminator 3 view .LVU242
 942 0454 081081E0 		add	r1, r1, r8	@ painted, painted, tmp238
 943              	.LVL55:
 944              	.L32:
 945              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 946              		.loc 1 159 13 discriminator 2 view .LVU243
 947 0458 01005AE3 		cmp	r10, #1	@ w.9_107,
 948 045c 0600000A 		beq	.L48		@,
 949              	.LVL56:
 950              	.L37:
 159:armwave.c     ****                 value = wave_word & 0xffff;
 951              		.loc 1 159 13 discriminator 2 view .LVU244
 952 0460 01A0A0E3 		mov	r10, #1	@ w.9_107,
 953              	.L34:
 160:armwave.c     ****                 wave_word >>= 16;
 954              		.loc 1 160 17 is_stmt 1 view .LVU245
 955              	@ armwave.c:160:                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 956              		.loc 1 160 23 is_stmt 0 view .LVU246
 957 0464 7C30FFE6 		uxth	r3, ip	@ value, wave_word
 958              	.LVL57:
 161:armwave.c     **** 
 959              		.loc 1 161 17 is_stmt 1 view .LVU247
 960              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 961              		.loc 1 163 19 is_stmt 0 view .LVU248
 962 0468 000053E3 		cmp	r3, #0	@ value,
 963              	@ armwave.c:161:                 wave_word >>= 16;
 161:armwave.c     **** 
 964              		.loc 1 161 27 view .LVU249
 965 046c 2CC8A0E1 		lsr	ip, ip, #16	@ wave_word, wave_word,
 966              	.LVL58:
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 967              		.loc 1 163 17 is_stmt 1 view .LVU250
 968              	@ armwave.c:163:                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 969              		.loc 1 163 19 is_stmt 0 view .LVU251
 970 0470 C6FFFF1A 		bne	.L49		@,
 971              	@ armwave.c:159:             for(w = 0; w < 2; w++) {
 159:armwave.c     ****                 value = wave_word & 0xffff;
 972              		.loc 1 159 13 view .LVU252
 973 0474 01005AE3 		cmp	r10, #1	@ w.9_107,
 974 0478 F8FFFF1A 		bne	.L37		@,
 975              	.LVL59:
 976              	.L48:
 159:armwave.c     ****                 value = wave_word & 0xffff;
 977              		.loc 1 159 13 view .LVU253
 978 047c 0230A0E3 		mov	r3, #2	@ tmp283,
 979 0480 24308DE5 		str	r3, [sp, #36]	@ tmp283, w
 980 0484 BAFFFFEA 		b	.L31		@
 981              	.LVL60:
 982              	.L36:
 983              	@ armwave.c:121:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 121:armwave.c     ****     // uint32_t ysub;
 984              		.loc 1 121 46 view .LVU254
 985 0488 0010A0E3 		mov	r1, #0	@ painted,
 986 048c BBFFFFEA 		b	.L30		@
 987              	.L51:
 988              		.align	2
 989              	.L50:
 990 0490 00000000 		.word	g_armwave_state
 991 0494 2C000000 		.word	.LC3
 992 0498 44000000 		.word	.LC4
 993 049c A4000000 		.word	.LC5
 994 04a0 AC000000 		.word	.LC6
 995              		.cfi_endproc
 996              	.LFE60:
 998              		.global	__aeabi_idiv
 999              		.align	2
 1000              		.global	armwave_generate
 1001              		.syntax unified
 1002              		.arm
 1003              		.fpu vfp
 1005              	armwave_generate:
 1006              	.LFB61:
 194:armwave.c     **** 
 195:armwave.c     **** /*
 196:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_generate()
 199:armwave.c     **** {
 1007              		.loc 1 199 1 is_stmt 1 view -0
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 56
 1010              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     uint32_t yy;
 1011              		.loc 1 200 5 view .LVU256
 201:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1012              		.loc 1 201 5 view .LVU257
 1013              	.LVL61:
 202:armwave.c     **** 
 203:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1014              		.loc 1 203 5 view .LVU258
 1015              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 1016              		.loc 1 199 1 is_stmt 0 view .LVU259
 1017 04a4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1018              		.cfi_def_cfa_offset 36
 1019              		.cfi_offset 4, -36
 1020              		.cfi_offset 5, -32
 1021              		.cfi_offset 6, -28
 1022              		.cfi_offset 7, -24
 1023              		.cfi_offset 8, -20
 1024              		.cfi_offset 9, -16
 1025              		.cfi_offset 10, -12
 1026              		.cfi_offset 11, -8
 1027              		.cfi_offset 14, -4
 1028              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1029              		.loc 1 203 5 view .LVU260
 1030 04a8 0010A0E3 		mov	r1, #0	@,
 1031              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1032              		.loc 1 203 58 view .LVU261
 1033 04ac 94829FE5 		ldr	r8, .L70	@ tmp323,
 1034              	@ armwave.c:199: {
 199:armwave.c     ****     uint32_t yy;
 1035              		.loc 1 199 1 view .LVU262
 1036 04b0 44D04DE2 		sub	sp, sp, #68	@,,
 1037              		.cfi_def_cfa_offset 104
 1038              	@ armwave.c:203:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1039              		.loc 1 203 5 view .LVU263
 1040 04b4 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 1041 04b8 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 1042 04bc FEFFFFEB 		bl	memset		@
 1043              	.LVL62:
 204:armwave.c     **** 
 205:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1044              		.loc 1 205 5 is_stmt 1 view .LVU264
 1045              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1046              		.loc 1 205 68 is_stmt 0 view .LVU265
 1047 04c0 444098E5 		ldr	r4, [r8, #68]	@ _13, g_armwave_state.slice_height
 1048              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1049              		.loc 1 205 51 view .LVU266
 1050 04c4 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 1051 04c8 0410A0E1 		mov	r1, r4	@, _13
 1052 04cc FEFFFFEB 		bl	__aeabi_idiv		@
 1053              	.LVL63:
 1054              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1055              		.loc 1 205 5 view .LVU267
 1056 04d0 000050E3 		cmp	r0, #0	@,
 1057 04d4 9900000A 		beq	.L52		@,
 1058              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1059              		.loc 1 205 12 view .LVU268
 1060 04d8 0090A0E3 		mov	r9, #0	@ yy,
 1061 04dc 09A0A0E1 		mov	r10, r9	@ yy, yy
 1062 04e0 07B0A0E1 		mov	fp, r7	@ write_buffer, write_buffer
 1063              	.LVL64:
 1064              	.L53:
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 207:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1065              		.loc 1 207 9 is_stmt 1 discriminator 3 view .LVU269
 1066 04e4 9A0401E0 		mul	r1, r10, r4	@ _5, yy, _13
 1067              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 209:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1068              		.loc 1 209 48 is_stmt 0 discriminator 3 view .LVU270
 1069 04e8 24C098E5 		ldr	ip, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1070              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1071              		.loc 1 207 9 discriminator 3 view .LVU271
 1072 04ec 0120A0E1 		mov	r2, r1	@, _5
 1073 04f0 0430A0E1 		mov	r3, r4	@, _13
 1074              	@ armwave.c:209:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1075              		.loc 1 209 48 discriminator 3 view .LVU272
 1076 04f4 9C010CE0 		mul	ip, ip, r1	@ tmp233, g_armwave_state.cmp_x_bitdepth_scale, _5
 1077              	@ armwave.c:207:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1078              		.loc 1 207 9 discriminator 3 view .LVU273
 1079 04f8 4C029FE5 		ldr	r0, .L70+4	@,
 1080 04fc 0A10A0E1 		mov	r1, r10	@, yy
 1081 0500 2CC8A0E1 		lsr	ip, ip, #16	@ tmp235, tmp233,
 1082 0504 00C08DE5 		str	ip, [sp]	@ tmp235,
 1083 0508 FEFFFFEB 		bl	printf		@
 1084              	.LVL65:
 210:armwave.c     **** 
 211:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1085              		.loc 1 211 9 is_stmt 1 discriminator 3 view .LVU274
 1086              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1087              		.loc 1 211 62 is_stmt 0 discriminator 3 view .LVU275
 1088 050c 443098E5 		ldr	r3, [r8, #68]	@ _10, g_armwave_state.slice_height
 1089 0510 402098E5 		ldr	r2, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1090 0514 0310A0E1 		mov	r1, r3	@ _10, _10
 1091 0518 14308DE5 		str	r3, [sp, #20]	@ _10, %sfp
 1092              	@ armwave.c:211:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1093              		.loc 1 211 9 discriminator 3 view .LVU276
 1094 051c 9A0100E0 		mul	r0, r10, r1	@ _11, yy, _10
 1095              	.LVL66:
 1096              	.LBB10:
 1097              	.LBI10:
  62:armwave.c     **** {
 1098              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU277
 1099              	.LBB11:
  64:armwave.c     ****     uint32_t value, word;
 1100              		.loc 1 64 5 discriminator 3 view .LVU278
  65:armwave.c     ****     uint8_t *wave_base;
 1101              		.loc 1 65 5 discriminator 3 view .LVU279
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 1102              		.loc 1 66 5 discriminator 3 view .LVU280
  67:armwave.c     ****     bufftyp_t *write_buffer;
 1103              		.loc 1 67 5 discriminator 3 view .LVU281
  68:armwave.c     **** 
 1104              		.loc 1 68 5 discriminator 3 view .LVU282
  71:armwave.c     **** 
 1105              		.loc 1 71 5 discriminator 3 view .LVU283
 1106              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1107              		.loc 1 71 82 is_stmt 0 discriminator 3 view .LVU284
 1108 0520 243098E5 		ldr	r3, [r8, #36]	@ _24, g_armwave_state.cmp_x_bitdepth_scale
 1109              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1110              		.loc 1 79 35 discriminator 3 view .LVU285
 1111 0524 38C098E5 		ldr	ip, [r8, #56]	@ _43, g_armwave_state.waves
 1112 0528 82E0A0E1 		lsl	lr, r2, #1	@ _181, g_armwave_state.bitdepth_height,
 1113              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1114              		.loc 1 71 65 discriminator 3 view .LVU286
 1115 052c 930001E0 		mul	r1, r3, r0	@ tmp241, _24, _11
 1116              	.LVL67:
 1117              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1118              		.loc 1 71 23 discriminator 3 view .LVU287
 1119 0530 042098E5 		ldr	r2, [r8, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 1120              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1121              		.loc 1 79 5 discriminator 3 view .LVU288
 1122 0534 00005CE3 		cmp	ip, #0	@ _43,
 1123              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1124              		.loc 1 71 105 discriminator 3 view .LVU289
 1125 0538 2118A0E1 		lsr	r1, r1, #16	@ tmp242, tmp241,
 1126              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1127              		.loc 1 79 35 discriminator 3 view .LVU290
 1128 053c 28C08DE5 		str	ip, [sp, #40]	@ _43, %sfp
 1129              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1130              		.loc 1 71 23 discriminator 3 view .LVU291
 1131 0540 9E2129E0 		mla	r9, lr, r1, r2	@ write_buffer_base, _181, tmp242, g_armwave_state.ch1_buffer
 1132              	.LVL68:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1133              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU292
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1134              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU293
 1135 0544 720000DA 		ble	.L54		@,
 1136              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 1137              		.loc 1 80 36 view .LVU294
 1138 0548 142098E5 		ldr	r2, [r8, #20]	@ _32, g_armwave_state.wave_buffer
 1139 054c 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp254, _24, _24,
 1140 0550 34C098E5 		ldr	ip, [r8, #52]	@ _183, g_armwave_state.wave_stride
 1141 0554 002082E0 		add	r2, r2, r0	@ tmp248, _32, _11
 1142 0558 2CC08DE5 		str	ip, [sp, #44]	@ _183, %sfp
 1143 055c 8300A0E1 		lsl	r0, r3, #1	@ tmp250, _24,
 1144              	.LVL69:
  80:armwave.c     **** 
 1145              		.loc 1 80 36 view .LVU295
 1146 0560 00C062E2 		rsb	ip, r2, #0	@ ivtmp.85, tmp248
 1147 0564 10208DE5 		str	r2, [sp, #16]	@ tmp248, %sfp
 1148 0568 8120A0E1 		lsl	r2, r1, #1	@ tmp255, tmp254,
 1149 056c 38208DE5 		str	r2, [sp, #56]	@ tmp255, %sfp
 1150              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1151              		.loc 1 79 11 view .LVU296
 1152 0570 3CA08DE5 		str	r10, [sp, #60]	@ yy, %sfp
 1153 0574 032080E0 		add	r2, r0, r3	@ ivtmp.79, tmp250, _24
 1154 0578 0EA0A0E1 		mov	r10, lr	@ _181, _181
 1155              	.LVL70:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1156              		.loc 1 79 11 view .LVU297
 1157 057c 0331A0E1 		lsl	r3, r3, #2	@ _243, _24,
 1158 0580 1C308DE5 		str	r3, [sp, #28]	@ _243, %sfp
 1159 0584 0030A0E3 		mov	r3, #0	@ w,
 1160 0588 34008DE5 		str	r0, [sp, #52]	@ tmp250, %sfp
 1161 058c 0CC08DE5 		str	ip, [sp, #12]	@ ivtmp.85, %sfp
 1162 0590 30208DE5 		str	r2, [sp, #48]	@ ivtmp.79, %sfp
 1163 0594 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 1164              	.LVL71:
 1165              	.L60:
  80:armwave.c     **** 
 1166              		.loc 1 80 9 is_stmt 1 view .LVU298
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1167              		.loc 1 84 9 view .LVU299
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1168              		.loc 1 84 9 is_stmt 0 view .LVU300
 1169 0598 14309DE5 		ldr	r3, [sp, #20]	@ _10, %sfp
 1170 059c 000053E3 		cmp	r3, #0	@ _10,
 1171 05a0 4D00000A 		beq	.L55		@,
 1172 05a4 10609DE5 		ldr	r6, [sp, #16]	@ ivtmp.78, %sfp
 1173 05a8 34509DE5 		ldr	r5, [sp, #52]	@ ivtmp.80, %sfp
 1174 05ac 30709DE5 		ldr	r7, [sp, #48]	@ ivtmp.79, %sfp
 1175 05b0 06E0A0E1 		mov	lr, r6	@ ivtmp.78, ivtmp.78
 1176              	.LVL72:
 1177              	.L59:
  85:armwave.c     **** 
 1178              		.loc 1 85 13 is_stmt 1 view .LVU301
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1179              		.loc 1 101 17 view .LVU302
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1180              		.loc 1 101 17 view .LVU303
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1181              		.loc 1 101 17 view .LVU304
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1182              		.loc 1 101 17 view .LVU305
 1183              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1184              		.loc 1 102 34 is_stmt 0 view .LVU306
 1185 05b4 38309DE5 		ldr	r3, [sp, #56]	@ tmp255, %sfp
 1186 05b8 1C409DE5 		ldr	r4, [sp, #28]	@ _243, %sfp
 1187 05bc 03C087E0 		add	ip, r7, r3	@ tmp278, ivtmp.79, tmp255
 1188 05c0 030085E0 		add	r0, r5, r3	@ tmp263, ivtmp.80, tmp255
 1189              	@ armwave.c:85:             word = *(uint32_t*)(wave_base + yy);
  85:armwave.c     **** 
 1190              		.loc 1 85 18 view .LVU307
 1191 05c4 04309EE4 		ldr	r3, [lr], #4	@ word, MEM[base: _249, offset: 0B]
 1192              	.LVL73:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1193              		.loc 1 89 13 is_stmt 1 view .LVU308
  90:armwave.c     ****                 
 1194              		.loc 1 90 17 view .LVU309
  94:armwave.c     ****                     continue;
 1195              		.loc 1 94 17 view .LVU310
 1196              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1197              		.loc 1 102 74 is_stmt 0 view .LVU311
 1198 05c8 2718A0E1 		lsr	r1, r7, #16	@ tmp306, ivtmp.79,
 1199              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1200              		.loc 1 94 20 view .LVU312
 1201 05cc FF6013E2 		ands	r6, r3, #255	@ scale_value, word,
 1202 05d0 047087E0 		add	r7, r7, r4	@ ivtmp.79, ivtmp.79, _243
 1203              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1204              		.loc 1 107 22 view .LVU313
 1205 05d4 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1206              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1207              		.loc 1 94 20 view .LVU314
 1208 05d8 0140A003 		moveq	r4, #1	@ tmp257,
 1209 05dc 0040A013 		movne	r4, #0	@ tmp257,
 1210              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1211              		.loc 1 94 19 view .LVU315
 1212 05e0 FF0056E3 		cmp	r6, #255	@ scale_value,
 1213 05e4 01408403 		orreq	r4, r4, #1	@,, tmp262, tmp257
 1214              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1215              		.loc 1 106 47 view .LVU316
 1216 05e8 8620A0E1 		lsl	r2, r6, #1	@ tmp266, scale_value,
 1217              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1218              		.loc 1 84 9 view .LVU317
 1219 05ec 0C609DE5 		ldr	r6, [sp, #12]	@ ivtmp.85, %sfp
 1220              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1221              		.loc 1 94 19 view .LVU318
 1222 05f0 000054E3 		cmp	r4, #0	@ tmp262,
 1223              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1224              		.loc 1 84 9 view .LVU319
 1225 05f4 06608EE0 		add	r6, lr, r6	@ tmp312, ivtmp.78, ivtmp.85
 1226              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1227              		.loc 1 102 74 view .LVU320
 1228 05f8 20108DE5 		str	r1, [sp, #32]	@ tmp306, %sfp
 1229 05fc 2008A0E1 		lsr	r0, r0, #16	@ tmp264, tmp263,
 1230 0600 2CC8A0E1 		lsr	ip, ip, #16	@ tmp279, tmp278,
 1231              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1232              		.loc 1 107 22 view .LVU321
 1233 0604 2314A0E1 		lsr	r1, r3, #8	@ word, word,
 1234              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1235              		.loc 1 84 9 view .LVU322
 1236 0608 24608DE5 		str	r6, [sp, #36]	@ tmp312, %sfp
 1237              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1238              		.loc 1 94 19 view .LVU323
 1239 060c 2C00001A 		bne	.L58		@,
 1240              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1241              		.loc 1 101 30 view .LVU324
 1242 0610 9A902BE0 		mla	fp, r10, r0, r9	@ write_buffer, _181, tmp264, write_buffer_base
 1243              	.LVL74:
 106:armwave.c     ****                 word >>= 8;
 1244              		.loc 1 106 17 is_stmt 1 view .LVU325
 1245              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1246              		.loc 1 94 20 is_stmt 0 view .LVU326
 1247 0614 FF1011E2 		ands	r1, r1, #255	@ scale_value, word,
 1248 0618 0140A003 		moveq	r4, #1	@ tmp272,
 1249              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1250              		.loc 1 106 47 view .LVU327
 1251 061c B2009BE1 		ldrh	r0, [fp, r2]	@ *_106, *_106
 1252              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1253              		.loc 1 94 20 view .LVU328
 1254 0620 0040A013 		movne	r4, #0	@ tmp272,
 1255              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1256              		.loc 1 106 47 view .LVU329
 1257 0624 8160A0E1 		lsl	r6, r1, #1	@ tmp281, scale_value,
 1258              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1259              		.loc 1 94 19 view .LVU330
 1260 0628 FF0051E3 		cmp	r1, #255	@ scale_value,
 1261 062c 0410A011 		movne	r1, r4	@, tmp277, tmp272
 1262 0630 01108403 		orreq	r1, r4, #1	@,, tmp277, tmp272
 1263              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1264              		.loc 1 106 47 view .LVU331
 1265 0634 010080E2 		add	r0, r0, #1	@ tmp269, *_106,
 1266              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1267              		.loc 1 94 19 view .LVU332
 1268 0638 000051E3 		cmp	r1, #0	@ tmp277,
 1269              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1270              		.loc 1 106 47 view .LVU333
 1271 063c B2008BE1 		strh	r0, [fp, r2]	@ movhi	@ tmp269, *_106
 107:armwave.c     ****             }
 1272              		.loc 1 107 17 is_stmt 1 view .LVU334
 1273              	.LVL75:
  90:armwave.c     ****                 
 1274              		.loc 1 90 17 view .LVU335
  94:armwave.c     ****                     continue;
 1275              		.loc 1 94 17 view .LVU336
 1276              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1277              		.loc 1 94 19 is_stmt 0 view .LVU337
 1278 0640 1F00001A 		bne	.L58		@,
 1279              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1280              		.loc 1 101 30 view .LVU338
 1281 0644 9A9C2BE0 		mla	fp, r10, ip, r9	@ write_buffer, _181, tmp279, write_buffer_base
 1282              	.LVL76:
 106:armwave.c     ****                 word >>= 8;
 1283              		.loc 1 106 17 is_stmt 1 view .LVU339
 1284              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1285              		.loc 1 94 20 is_stmt 0 view .LVU340
 1286 0648 2348A0E1 		lsr	r4, r3, #16	@ word, word,
 1287 064c FF2014E2 		ands	r2, r4, #255	@ scale_value, word,
 1288              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1289              		.loc 1 106 47 view .LVU341
 1290 0650 B6109BE1 		ldrh	r1, [fp, r6]	@ *_137, *_137
 1291              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1292              		.loc 1 94 20 view .LVU342
 1293 0654 0100A003 		moveq	r0, #1	@ tmp287,
 1294 0658 0000A013 		movne	r0, #0	@ tmp287,
 1295              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1296              		.loc 1 106 47 view .LVU343
 1297 065c 82C0A0E1 		lsl	ip, r2, #1	@ tmp295, scale_value,
 1298              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1299              		.loc 1 94 19 view .LVU344
 1300 0660 FF0052E3 		cmp	r2, #255	@ scale_value,
 1301 0664 0020A011 		movne	r2, r0	@, tmp292, tmp287
 1302 0668 01208003 		orreq	r2, r0, #1	@,, tmp292, tmp287
 1303              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1304              		.loc 1 106 47 view .LVU345
 1305 066c 011081E2 		add	r1, r1, #1	@ tmp284, *_137,
 1306              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1307              		.loc 1 94 19 view .LVU346
 1308 0670 000052E3 		cmp	r2, #0	@ tmp292,
 1309              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1310              		.loc 1 106 47 view .LVU347
 1311 0674 B6108BE1 		strh	r1, [fp, r6]	@ movhi	@ tmp284, *_137
 107:armwave.c     ****             }
 1312              		.loc 1 107 17 is_stmt 1 view .LVU348
 1313              	.LVL77:
  90:armwave.c     ****                 
 1314              		.loc 1 90 17 view .LVU349
  94:armwave.c     ****                     continue;
 1315              		.loc 1 94 17 view .LVU350
 1316              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1317              		.loc 1 94 19 is_stmt 0 view .LVU351
 1318 0678 1100001A 		bne	.L58		@,
 1319              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1320              		.loc 1 101 30 view .LVU352
 1321 067c 2528A0E1 		lsr	r2, r5, #16	@ tmp293, ivtmp.80,
 1322              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1323              		.loc 1 94 20 view .LVU353
 1324 0680 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1325              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1326              		.loc 1 101 30 view .LVU354
 1327 0684 9A922BE0 		mla	fp, r10, r2, r9	@ write_buffer, _181, tmp293, write_buffer_base
 1328              	.LVL78:
 106:armwave.c     ****                 word >>= 8;
 1329              		.loc 1 106 17 is_stmt 1 view .LVU355
 1330              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1331              		.loc 1 94 20 is_stmt 0 view .LVU356
 1332 0688 0110A003 		moveq	r1, #1	@ tmp300,
 1333 068c 0010A013 		movne	r1, #0	@ tmp300,
 1334              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1335              		.loc 1 106 47 view .LVU357
 1336 0690 8300A0E1 		lsl	r0, r3, #1	@ tmp308, word,
 1337              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1338              		.loc 1 94 19 view .LVU358
 1339 0694 FF0053E3 		cmp	r3, #255	@ word,
 1340 0698 0130A011 		movne	r3, r1	@, tmp305, tmp300
 1341 069c 01308103 		orreq	r3, r1, #1	@,, tmp305, tmp300
 1342 06a0 000053E3 		cmp	r3, #0	@ tmp305,
 1343              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1344              		.loc 1 106 47 view .LVU359
 1345 06a4 BC209BE1 		ldrh	r2, [fp, ip]	@ *_168, *_168
 1346              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1347              		.loc 1 101 30 view .LVU360
 1348 06a8 20109D05 		ldreq	r1, [sp, #32]	@ tmp306, %sfp
 1349              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1350              		.loc 1 106 47 view .LVU361
 1351 06ac 012082E2 		add	r2, r2, #1	@ tmp298, *_168,
 1352 06b0 BC208BE1 		strh	r2, [fp, ip]	@ movhi	@ tmp298, *_168
 107:armwave.c     ****             }
 1353              		.loc 1 107 17 is_stmt 1 view .LVU362
 1354              	.LVL79:
  90:armwave.c     ****                 
 1355              		.loc 1 90 17 view .LVU363
  94:armwave.c     ****                     continue;
 1356              		.loc 1 94 17 view .LVU364
 1357              	@ armwave.c:101:                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1358              		.loc 1 101 30 is_stmt 0 view .LVU365
 1359 06b4 9A912B00 		mlaeq	fp, r10, r1, r9	@ write_buffer, _181, tmp306, write_buffer_base
 1360              	.LVL80:
 106:armwave.c     ****                 word >>= 8;
 1361              		.loc 1 106 17 is_stmt 1 view .LVU366
 1362              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1363              		.loc 1 106 47 is_stmt 0 view .LVU367
 1364 06b8 B0309B01 		ldrheq	r3, [fp, r0]	@ *_199, *_199
 1365 06bc 01308302 		addeq	r3, r3, #1	@ tmp311, *_199,
 1366 06c0 B0308B01 		strheq	r3, [fp, r0]	@ movhi	@ tmp311, *_199
 107:armwave.c     ****             }
 1367              		.loc 1 107 17 is_stmt 1 view .LVU368
 1368              	.LVL81:
 1369              	.L58:
 1370              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 1371              		.loc 1 84 9 is_stmt 0 view .LVU369
 1372 06c4 14309DE5 		ldr	r3, [sp, #20]	@ _10, %sfp
 1373 06c8 24209DE5 		ldr	r2, [sp, #36]	@ tmp312, %sfp
 1374 06cc 020053E1 		cmp	r3, r2	@ _10, tmp312
 1375 06d0 1C309DE5 		ldr	r3, [sp, #28]	@ _243, %sfp
 1376 06d4 035085E0 		add	r5, r5, r3	@ ivtmp.80, ivtmp.80, _243
 1377 06d8 B5FFFF8A 		bhi	.L59		@,
 1378              	.L55:
 1379              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1380              		.loc 1 79 44 view .LVU370
 1381 06dc 18309DE5 		ldr	r3, [sp, #24]	@ w, %sfp
 1382              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1383              		.loc 1 79 5 view .LVU371
 1384 06e0 28209DE5 		ldr	r2, [sp, #40]	@ _43, %sfp
 1385              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1386              		.loc 1 79 44 view .LVU372
 1387 06e4 013083E2 		add	r3, r3, #1	@ w, w,
 1388              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1389              		.loc 1 79 5 view .LVU373
 1390 06e8 030052E1 		cmp	r2, r3	@ _43, w
 1391              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1392              		.loc 1 79 44 view .LVU374
 1393 06ec 18308DE5 		str	r3, [sp, #24]	@ w, %sfp
 1394              	.LVL82:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1395              		.loc 1 79 44 view .LVU375
 1396 06f0 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.85, %sfp
 1397 06f4 2C309DE5 		ldr	r3, [sp, #44]	@ _183, %sfp
 1398              	.LVL83:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1399              		.loc 1 79 44 view .LVU376
 1400 06f8 032042E0 		sub	r2, r2, r3	@ ivtmp.85, ivtmp.85, _183
 1401 06fc 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.85, %sfp
 1402 0700 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.86, %sfp
 1403 0704 033082E0 		add	r3, r2, r3	@ ivtmp.86, ivtmp.86, _183
 1404 0708 10308DE5 		str	r3, [sp, #16]	@ ivtmp.86, %sfp
 1405              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1406              		.loc 1 79 5 view .LVU377
 1407 070c A1FFFF1A 		bne	.L60		@,
 1408 0710 3CA09DE5 		ldr	r10, [sp, #60]	@ yy, %sfp
 1409              	.LVL84:
 1410              	.L54:
 112:armwave.c     **** }
 1411              		.loc 1 112 5 is_stmt 1 view .LVU378
 1412              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1413              		.loc 1 112 40 is_stmt 0 view .LVU379
 1414 0714 09104BE0 		sub	r1, fp, r9	@ tmp313, write_buffer, write_buffer_base
 1415              	@ armwave.c:112:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 112:armwave.c     **** }
 1416              		.loc 1 112 5 view .LVU380
 1417 0718 30009FE5 		ldr	r0, .L70+8	@,
 1418 071c C110A0E1 		asr	r1, r1, #1	@, tmp313,
 1419 0720 FEFFFFEB 		bl	printf		@
 1420              	.LVL85:
 112:armwave.c     **** }
 1421              		.loc 1 112 5 view .LVU381
 1422              	.LBE11:
 1423              	.LBE10:
 212:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1424              		.loc 1 212 9 is_stmt 1 view .LVU382
 213:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1425              		.loc 1 213 9 view .LVU383
 1426              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1427              		.loc 1 205 68 is_stmt 0 view .LVU384
 1428 0724 444098E5 		ldr	r4, [r8, #68]	@ _13, g_armwave_state.slice_height
 1429              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1430              		.loc 1 205 51 view .LVU385
 1431 0728 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 1432 072c 0410A0E1 		mov	r1, r4	@, _13
 1433 0730 FEFFFFEB 		bl	__aeabi_idiv		@
 1434              	.LVL86:
 1435              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1436              		.loc 1 205 86 view .LVU386
 1437 0734 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 1438              	.LVL87:
 1439              	@ armwave.c:205:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 205:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1440              		.loc 1 205 5 view .LVU387
 1441 0738 0A0050E1 		cmp	r0, r10	@, yy
 1442 073c 68FFFF8A 		bhi	.L53		@,
 1443              	.LVL88:
 1444              	.L52:
 1445              	@ armwave.c:222: }
 214:armwave.c     ****     }
 215:armwave.c     **** 
 216:armwave.c     ****     /*
 217:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 218:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 219:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 220:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 221:armwave.c     ****     */
 222:armwave.c     **** }
 1446              		.loc 1 222 1 view .LVU388
 1447 0740 44D08DE2 		add	sp, sp, #68	@,,
 1448              		.cfi_def_cfa_offset 36
 1449              		@ sp needed	@
 1450 0744 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1451              	.L71:
 1452              		.align	2
 1453              	.L70:
 1454 0748 00000000 		.word	g_armwave_state
 1455 074c C8000000 		.word	.LC7
 1456 0750 20000000 		.word	.LC2
 1457              		.cfi_endproc
 1458              	.LFE61:
 1460              		.align	2
 1461              		.global	armwave_setup_render
 1462              		.syntax unified
 1463              		.arm
 1464              		.fpu vfp
 1466              	armwave_setup_render:
 1467              	.LVL89:
 1468              	.LFB62:
 223:armwave.c     **** 
 224:armwave.c     **** /*
 225:armwave.c     ****  * Setup the renderer with passed parameters.
 226:armwave.c     ****  */
 227:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 228:armwave.c     **** {
 1469              		.loc 1 228 1 is_stmt 1 view -0
 1470              		.cfi_startproc
 1471              		@ args = 12, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 229:armwave.c     ****     uint32_t length, xx;
 1473              		.loc 1 229 5 view .LVU390
 230:armwave.c     ****     float points_per_pixel;
 1474              		.loc 1 230 5 view .LVU391
 231:armwave.c     **** 
 232:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1475              		.loc 1 232 5 view .LVU392
 1476              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1477              		.loc 1 228 1 is_stmt 0 view .LVU393
 1478 0754 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1479              		.cfi_def_cfa_offset 28
 1480              		.cfi_offset 4, -28
 1481              		.cfi_offset 5, -24
 1482              		.cfi_offset 6, -20
 1483              		.cfi_offset 7, -16
 1484              		.cfi_offset 8, -12
 1485              		.cfi_offset 9, -8
 1486              		.cfi_offset 14, -4
 1487 0758 14D04DE2 		sub	sp, sp, #20	@,,
 1488              		.cfi_def_cfa_offset 48
 1489              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1490              		.loc 1 228 1 view .LVU394
 1491 075c 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1492 0760 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1493 0764 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1494 0768 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1495              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1496              		.loc 1 232 5 view .LVU395
 1497 076c 00308DE5 		str	r3, [sp]	@ wave_stride,
 1498              	@ armwave.c:228: {
 228:armwave.c     ****     uint32_t length, xx;
 1499              		.loc 1 228 1 view .LVU396
 1500 0770 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1501 0774 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1502              	@ armwave.c:232:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1503              		.loc 1 232 5 view .LVU397
 1504 0778 F460CDE1 		strd	r6, [sp, #4]	@,,
 1505 077c 0230A0E1 		mov	r3, r2	@, waves_max
 1506              	.LVL90:
 1507              		.loc 1 232 5 view .LVU398
 1508 0780 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1509 0784 0120A0E1 		mov	r2, r1	@, end_point
 1510              	.LVL91:
 1511              		.loc 1 232 5 view .LVU399
 1512 0788 0010A0E1 		mov	r1, r0	@, start_point
 1513              	.LVL92:
 1514              		.loc 1 232 5 view .LVU400
 1515 078c 8C019FE5 		ldr	r0, .L82+12	@,
 1516              	.LVL93:
 1517              		.loc 1 232 5 view .LVU401
 1518 0790 FEFFFFEB 		bl	printf		@
 1519              	.LVL94:
 233:armwave.c     **** 
 234:armwave.c     ****     // TODO these asserts should instead raise PyExc
 235:armwave.c     ****     assert(start_point < end_point);
 1520              		.loc 1 235 5 is_stmt 1 view .LVU402
 1521 0794 050054E1 		cmp	r4, r5	@ start_point, end_point
 1522 0798 5100002A 		bcs	.L80		@,
 236:armwave.c     **** 
 237:armwave.c     ****     /*
 238:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 239:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 240:armwave.c     ****     if(target_height == 256) {
 241:armwave.c     ****         g_armwave_state.row_shift = 8;
 242:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 243:armwave.c     ****     } else if(target_height == 512) {
 244:armwave.c     ****         g_armwave_state.row_shift = 9;
 245:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 246:armwave.c     ****     } else if(target_height == 1024) {
 247:armwave.c     ****         g_armwave_state.row_shift = 10;
 248:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 249:armwave.c     ****     } else if(target_height == 2048) {
 250:armwave.c     ****         g_armwave_state.row_shift = 11;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 252:armwave.c     ****     }
 253:armwave.c     ****     */
 254:armwave.c     **** 
 255:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 256:armwave.c     ****     g_armwave_state.xstride = target_height;
 1523              		.loc 1 256 5 view .LVU403
 1524              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1525              		.loc 1 267 45 is_stmt 0 view .LVU404
 1526 079c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1527              	.LVL95:
 1528              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 268:armwave.c     **** 
 269:armwave.c     ****     // Calculate compound scaler
 270:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1529              		.loc 1 271 48 view .LVU405
 1530 07a0 5B5A9FED 		vldr.32	s10, .L82	@ tmp187,
 1531 07a4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1532              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1533              		.loc 1 257 49 view .LVU406
 1534 07a8 5A7A9FED 		vldr.32	s14, .L82+4	@ tmp165,
 1535              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1536              		.loc 1 271 81 view .LVU407
 1537 07ac 5A6A9FED 		vldr.32	s12, .L82+8	@ tmp191,
 1538              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1539              		.loc 1 264 90 view .LVU408
 1540 07b0 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1541              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1542              		.loc 1 271 48 view .LVU409
 1543 07b4 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1544              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1545              		.loc 1 257 49 view .LVU410
 1546 07b8 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1547              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1548              		.loc 1 256 29 view .LVU411
 1549 07bc 60419FE5 		ldr	r4, .L82+16	@ tmp222,
 1550              	.LVL96:
 1551              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1552              		.loc 1 262 42 view .LVU412
 1553 07c0 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1554              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1555              		.loc 1 257 49 view .LVU413
 1556 07c4 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1557              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1558              		.loc 1 264 95 view .LVU414
 1559 07c8 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1560              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 272:armwave.c     **** 
 273:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1561              		.loc 1 273 5 view .LVU415
 1562 07cc 0128A0E3 		mov	r2, #65536	@ tmp194,
 1563              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1564              		.loc 1 271 48 view .LVU416
 1565 07d0 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1566              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1567              		.loc 1 273 5 view .LVU417
 1568 07d4 04508DE5 		str	r5, [sp, #4]	@ _13,
 1569 07d8 00608DE5 		str	r6, [sp]	@ target_width,
 1570              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1571              		.loc 1 264 95 view .LVU418
 1572 07dc 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1573              	@ armwave.c:256:     g_armwave_state.xstride = target_height;
 256:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1574              		.loc 1 256 29 view .LVU419
 1575 07e0 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1576              		.loc 1 257 5 is_stmt 1 view .LVU420
 1577              	@ armwave.c:259:     g_armwave_state.wave_stride = wave_stride;
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1578              		.loc 1 259 33 is_stmt 0 view .LVU421
 1579 07e4 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1580              	@ armwave.c:260:     g_armwave_state.waves_max = waves_max;
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1581              		.loc 1 260 31 view .LVU422
 1582 07e8 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1583              	@ armwave.c:261:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1584              		.loc 1 261 27 view .LVU423
 1585 07ec 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1586              	@ armwave.c:266:     g_armwave_state.target_height = target_height;
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1587              		.loc 1 266 35 view .LVU424
 1588 07f0 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1589              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1590              		.loc 1 273 5 view .LVU425
 1591 07f4 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1592              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1593              		.loc 1 263 37 view .LVU426
 1594 07f8 022CA0E3 		mov	r2, #512	@ tmp175,
 1595              	@ armwave.c:262:     g_armwave_state.size = target_height * target_width;
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1596              		.loc 1 262 26 view .LVU427
 1597 07fc 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1598              	@ armwave.c:263:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1599              		.loc 1 263 37 view .LVU428
 1600 0800 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1601              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1602              		.loc 1 273 5 view .LVU429
 1603 0804 0310A0E1 		mov	r1, r3	@, tmp180
 1604              	@ armwave.c:264:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1605              		.loc 1 264 34 view .LVU430
 1606 0808 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1607              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1608              		.loc 1 257 49 view .LVU431
 1609 080c 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1610              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1611              		.loc 1 271 40 view .LVU432
 1612 0810 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1613              	@ armwave.c:267:     g_armwave_state.wave_length = end_point - start_point;
 267:armwave.c     **** 
 1614              		.loc 1 267 33 view .LVU433
 1615 0814 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1616              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1617              		.loc 1 273 5 view .LVU434
 1618 0818 08019FE5 		ldr	r0, .L82+20	@,
 1619              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1620              		.loc 1 271 40 view .LVU435
 1621 081c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1622 0820 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1623              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1624              		.loc 1 258 30 view .LVU436
 1625 0824 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1626              	@ armwave.c:257:     g_armwave_state.vscale_frac = target_height / 255.0f;
 257:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1627              		.loc 1 257 33 view .LVU437
 1628 0828 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1629              		.loc 1 258 5 is_stmt 1 view .LVU438
 1630              	@ armwave.c:271:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 271:armwave.c     **** 
 1631              		.loc 1 271 81 is_stmt 0 view .LVU439
 1632 082c 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1633              	@ armwave.c:258:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 258:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1634              		.loc 1 258 30 view .LVU440
 1635 0830 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 259:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1636              		.loc 1 259 5 is_stmt 1 view .LVU441
 260:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1637              		.loc 1 260 5 view .LVU442
 261:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1638              		.loc 1 261 5 view .LVU443
 262:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1639              		.loc 1 262 5 view .LVU444
 263:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1640              		.loc 1 263 5 view .LVU445
 264:armwave.c     ****     g_armwave_state.target_width = target_width;
 1641              		.loc 1 264 5 view .LVU446
 265:armwave.c     ****     g_armwave_state.target_height = target_height;
 1642              		.loc 1 265 5 view .LVU447
 266:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1643              		.loc 1 266 5 view .LVU448
 267:armwave.c     **** 
 1644              		.loc 1 267 5 view .LVU449
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1645              		.loc 1 270 5 view .LVU450
 1646              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1647              		.loc 1 270 42 is_stmt 0 view .LVU451
 1648 0834 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1649 0838 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1650              	@ armwave.c:273:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1651              		.loc 1 273 5 view .LVU452
 1652 083c 903A17EE 		vmov	r3, s15	@ int	@, _20
 1653              	@ armwave.c:270:     g_armwave_state.cmp_x_bitdepth_scale = \
 270:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1654              		.loc 1 270 42 view .LVU453
 1655 0840 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1656              		.loc 1 273 5 is_stmt 1 view .LVU454
 1657 0844 0C20A0E1 		mov	r2, ip	@, tmp3
 1658 0848 FEFFFFEB 		bl	printf		@
 1659              	.LVL97:
 274:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 275:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 276:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 277:armwave.c     **** 
 278:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 279:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 280:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1660              		.loc 1 281 5 view .LVU455
 1661              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 282:armwave.c     **** 
 283:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1662              		.loc 1 283 23 is_stmt 0 view .LVU456
 1663 084c 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1664              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1665              		.loc 1 281 34 view .LVU457
 1666 0850 4030A0E3 		mov	r3, #64	@ tmp196,
 1667              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1668              		.loc 1 283 7 view .LVU458
 1669 0854 000050E3 		cmp	r0, #0	@ _21,
 1670              	@ armwave.c:281:     g_armwave_state.slice_height = 64; // 64;  
 281:armwave.c     **** 
 1671              		.loc 1 281 34 view .LVU459
 1672 0858 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1673              		.loc 1 283 5 is_stmt 1 view .LVU460
 1674              	@ armwave.c:283:     if(g_armwave_state.ch1_buffer != NULL)
 1675              		.loc 1 283 7 is_stmt 0 view .LVU461
 1676 085c 0000000A 		beq	.L74		@,
 284:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1677              		.loc 1 284 9 is_stmt 1 view .LVU462
 1678 0860 FEFFFFEB 		bl	free		@
 1679              	.LVL98:
 1680              	.L74:
 285:armwave.c     **** 
 286:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1681              		.loc 1 286 5 view .LVU463
 1682              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1683              		.loc 1 286 56 is_stmt 0 view .LVU464
 1684 0864 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1685              	.LVL99:
 1686              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1687              		.loc 1 286 34 view .LVU465
 1688 0868 0110A0E3 		mov	r1, #1	@,
 1689 086c 0800A0E1 		mov	r0, r8	@, _22
 1690 0870 FEFFFFEB 		bl	calloc		@
 1691              	.LVL100:
 1692              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 287:armwave.c     **** 
 288:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1693              		.loc 1 288 7 view .LVU466
 1694 0874 000050E3 		cmp	r0, #0	@ tmp199,
 1695              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1696              		.loc 1 286 34 view .LVU467
 1697 0878 0070A0E1 		mov	r7, r0	@ tmp199,
 1698              	@ armwave.c:286:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 286:armwave.c     **** 
 1699              		.loc 1 286 32 view .LVU468
 1700 087c 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1701              		.loc 1 288 5 is_stmt 1 view .LVU469
 1702              	@ armwave.c:288:     if(g_armwave_state.ch1_buffer == NULL) {
 1703              		.loc 1 288 7 is_stmt 0 view .LVU470
 1704 0880 1C00000A 		beq	.L81		@,
 289:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 290:armwave.c     ****         exit(-1);
 291:armwave.c     ****     }
 292:armwave.c     **** 
 293:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 294:armwave.c     ****     length = end_point - start_point;
 1705              		.loc 1 294 5 is_stmt 1 view .LVU471
 1706              	.LVL101:
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1707              		.loc 1 295 5 view .LVU472
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1708              		.loc 1 296 5 view .LVU473
 1709              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1710              		.loc 1 295 31 is_stmt 0 view .LVU474
 1711 0884 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1712              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1713              		.loc 1 295 34 view .LVU475
 1714 0888 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1715              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1716              		.loc 1 296 60 view .LVU476
 1717 088c 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1718              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 297:armwave.c     **** 
 298:armwave.c     ****     /*
 299:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 300:armwave.c     **** 
 301:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 304:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 307:armwave.c     ****     }
 308:armwave.c     ****     */
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1719              		.loc 1 310 34 view .LVU477
 1720 0890 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1721              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1722              		.loc 1 295 31 view .LVU478
 1723 0894 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1724              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1725              		.loc 1 295 34 view .LVU479
 1726 0898 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1727              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1728              		.loc 1 296 60 view .LVU480
 1729 089c E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1730              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1731              		.loc 1 310 34 view .LVU481
 1732 08a0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1733              	@ armwave.c:295:     points_per_pixel = length / ((float)(target_width));
 295:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1734              		.loc 1 295 22 view .LVU482
 1735 08a4 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1736              	.LVL102:
 1737              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1738              		.loc 1 296 60 view .LVU483
 1739 08a8 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1740              	@ armwave.c:296:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1741              		.loc 1 296 41 view .LVU484
 1742 08ac E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1743 08b0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1744              		.loc 1 310 5 is_stmt 1 view .LVU485
 1745              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1746              		.loc 1 310 34 is_stmt 0 view .LVU486
 1747 08b4 FEFFFFEB 		bl	malloc		@
 1748              	.LVL103:
 1749              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1750              		.loc 1 312 5 view .LVU487
 1751 08b8 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1752 08bc 0710A0E1 		mov	r1, r7	@, tmp199
 1753 08c0 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1754 08c4 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1755              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1756              		.loc 1 310 34 view .LVU488
 1757 08c8 00C0A0E1 		mov	ip, r0	@ tmp215,
 1758              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1759              		.loc 1 312 5 view .LVU489
 1760 08cc 0030A0E1 		mov	r3, r0	@, tmp215
 1761              	@ armwave.c:310:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 310:armwave.c     **** 
 1762              		.loc 1 310 32 view .LVU490
 1763 08d0 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1764              		.loc 1 312 5 is_stmt 1 view .LVU491
 1765 08d4 50009FE5 		ldr	r0, .L82+24	@,
 1766              	@ armwave.c:319: }
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 317:armwave.c     **** 
 318:armwave.c     ****      //malloc_stats();
 319:armwave.c     **** }
 1767              		.loc 1 319 1 is_stmt 0 view .LVU492
 1768 08d8 14D08DE2 		add	sp, sp, #20	@,,
 1769              		.cfi_remember_state
 1770              		.cfi_def_cfa_offset 28
 1771              		@ sp needed	@
 1772 08dc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1773              		.cfi_restore 14
 1774              		.cfi_restore 9
 1775              		.cfi_restore 8
 1776              		.cfi_restore 7
 1777              		.cfi_restore 6
 1778              		.cfi_restore 5
 1779              		.cfi_restore 4
 1780              		.cfi_def_cfa_offset 0
 1781              	.LVL104:
 1782              	@ armwave.c:312:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1783              		.loc 1 312 5 view .LVU493
 1784 08e0 FEFFFFEA 		b	printf		@
 1785              	.LVL105:
 1786              	.L80:
 1787              		.cfi_restore_state
 235:armwave.c     **** 
 1788              		.loc 1 235 5 is_stmt 1 discriminator 1 view .LVU494
 1789 08e4 44309FE5 		ldr	r3, .L82+28	@,
 1790 08e8 EB20A0E3 		mov	r2, #235	@,
 1791 08ec 40109FE5 		ldr	r1, .L82+32	@,
 1792 08f0 40009FE5 		ldr	r0, .L82+36	@,
 1793 08f4 FEFFFFEB 		bl	__assert_fail		@
 1794              	.LVL106:
 1795              	.L81:
 289:armwave.c     ****         exit(-1);
 1796              		.loc 1 289 9 view .LVU495
 1797 08f8 3C309FE5 		ldr	r3, .L82+40	@ tmp202,
 1798 08fc 0820A0E1 		mov	r2, r8	@, _22
 1799 0900 38109FE5 		ldr	r1, .L82+44	@,
 1800 0904 000093E5 		ldr	r0, [r3]	@, stderr
 1801 0908 FEFFFFEB 		bl	fprintf		@
 1802              	.LVL107:
 290:armwave.c     ****     }
 1803              		.loc 1 290 9 view .LVU496
 1804 090c 0000E0E3 		mvn	r0, #0	@,
 1805 0910 FEFFFFEB 		bl	exit		@
 1806              	.LVL108:
 1807              	.L83:
 1808              		.align	2
 1809              	.L82:
 1810 0914 0000803F 		.word	1065353216
 1811 0918 00007F43 		.word	1132396544
 1812 091c 00008047 		.word	1199570944
 1813 0920 FC000000 		.word	.LC8
 1814 0924 00000000 		.word	g_armwave_state
 1815 0928 4C010000 		.word	.LC11
 1816 092c F0010000 		.word	.LC13
 1817 0930 00000000 		.word	.LANCHOR0
 1818 0934 28010000 		.word	.LC9
 1819 0938 34010000 		.word	.LC10
 1820 093c 00000000 		.word	stderr
 1821 0940 AC010000 		.word	.LC12
 1822              		.cfi_endproc
 1823              	.LFE62:
 1825              		.align	2
 1826              		.global	armwave_set_wave_pointer
 1827              		.syntax unified
 1828              		.arm
 1829              		.fpu vfp
 1831              	armwave_set_wave_pointer:
 1832              	.LVL109:
 1833              	.LFB63:
 320:armwave.c     **** 
 321:armwave.c     **** /*
 322:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 323:armwave.c     ****  * in the future.
 324:armwave.c     ****  */
 325:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 326:armwave.c     **** {
 1834              		.loc 1 326 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1838              		.loc 1 327 5 view .LVU498
 1839 0944 000050E3 		cmp	r0, #0	@ wave_buffer
 1840              		.loc 1 327 5 is_stmt 0 view .LVU499
 1841 0948 0200000A 		beq	.L89		@,
 328:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1842              		.loc 1 328 5 is_stmt 1 view .LVU500
 1843              	@ armwave.c:328:     g_armwave_state.wave_buffer = wave_buffer;
 1844              		.loc 1 328 33 is_stmt 0 view .LVU501
 1845 094c 1C309FE5 		ldr	r3, .L90	@ tmp116,
 1846 0950 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1847 0954 1EFF2FE1 		bx	lr	@
 1848              	.L89:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1849              		.loc 1 327 5 is_stmt 1 discriminator 1 view .LVU502
 1850              	@ armwave.c:326: {
 326:armwave.c     ****     assert(wave_buffer != NULL);
 1851              		.loc 1 326 1 is_stmt 0 discriminator 1 view .LVU503
 1852 0958 10402DE9 		push	{r4, lr}	@
 1853              		.cfi_def_cfa_offset 8
 1854              		.cfi_offset 4, -8
 1855              		.cfi_offset 14, -4
 1856              	@ armwave.c:327:     assert(wave_buffer != NULL);
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1857              		.loc 1 327 5 discriminator 1 view .LVU504
 1858 095c 10309FE5 		ldr	r3, .L90+4	@,
 1859 0960 10209FE5 		ldr	r2, .L90+8	@,
 1860 0964 10109FE5 		ldr	r1, .L90+12	@,
 1861 0968 10009FE5 		ldr	r0, .L90+16	@,
 1862              	.LVL110:
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1863              		.loc 1 327 5 discriminator 1 view .LVU505
 1864 096c FEFFFFEB 		bl	__assert_fail		@
 1865              	.LVL111:
 1866              	.L91:
 1867              		.align	2
 1868              	.L90:
 1869 0970 00000000 		.word	g_armwave_state
 1870 0974 18000000 		.word	.LANCHOR0+24
 1871 0978 47010000 		.word	327
 1872 097c 28010000 		.word	.LC9
 1873 0980 14020000 		.word	.LC14
 1874              		.cfi_endproc
 1875              	.LFE63:
 1877              		.align	2
 1878              		.global	armwave_set_wave_pointer_as_testbuf
 1879              		.syntax unified
 1880              		.arm
 1881              		.fpu vfp
 1883              	armwave_set_wave_pointer_as_testbuf:
 1884              	.LVL112:
 1885              	.LFB64:
 329:armwave.c     **** }
 330:armwave.c     **** 
 331:armwave.c     **** /*
 332:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 333:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 336:armwave.c     **** {
 1886              		.loc 1 336 1 is_stmt 1 view -0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 0
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 1890              		@ link register save eliminated.
 337:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1891              		.loc 1 337 5 view .LVU507
 1892              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1893              		.loc 1 337 29 is_stmt 0 view .LVU508
 1894 0984 24309FE5 		ldr	r3, .L95	@ tmp117,
 1895              	@ armwave.c:337:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1896              		.loc 1 337 7 view .LVU509
 1897 0988 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1898 098c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1899 0990 0400003A 		bcc	.L94		@,
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 339:armwave.c     ****         return;
 340:armwave.c     ****     }
 341:armwave.c     **** 
 342:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1900              		.loc 1 342 5 is_stmt 1 view .LVU510
 1901              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1902              		.loc 1 342 111 is_stmt 0 view .LVU511
 1903 0994 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1904              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1905              		.loc 1 342 68 view .LVU512
 1906 0998 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1907 099c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1908              	.LVL113:
 1909              	@ armwave.c:342:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1910              		.loc 1 342 33 view .LVU513
 1911 09a0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1912              	@ armwave.c:343: }
 343:armwave.c     **** }
 1913              		.loc 1 343 1 view .LVU514
 1914 09a4 1EFF2FE1 		bx	lr	@
 1915              	.LVL114:
 1916              	.L94:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1917              		.loc 1 338 9 is_stmt 1 view .LVU515
 1918 09a8 04009FE5 		ldr	r0, .L95+4	@,
 1919              	.LVL115:
 338:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1920              		.loc 1 338 9 is_stmt 0 view .LVU516
 1921 09ac FEFFFFEA 		b	puts		@
 1922              	.LVL116:
 1923              	.L96:
 1924              		.align	2
 1925              	.L95:
 1926 09b0 00000000 		.word	g_armwave_state
 1927 09b4 28020000 		.word	.LC15
 1928              		.cfi_endproc
 1929              	.LFE64:
 1931              		.align	2
 1932              		.global	armwave_set_wave_pointer_u32
 1933              		.syntax unified
 1934              		.arm
 1935              		.fpu vfp
 1937              	armwave_set_wave_pointer_u32:
 1938              	.LVL117:
 1939              	.LFB65:
 344:armwave.c     **** 
 345:armwave.c     **** /*
 346:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 347:armwave.c     ****  * disjointed buffers in the future.
 348:armwave.c     ****  */
 349:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 350:armwave.c     **** {
 1940              		.loc 1 350 1 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 0
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1944              		.loc 1 351 5 view .LVU518
 1945 09b8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1946              		.loc 1 351 5 is_stmt 0 view .LVU519
 1947 09bc 0200000A 		beq	.L102		@,
 352:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1948              		.loc 1 352 5 is_stmt 1 view .LVU520
 1949              	@ armwave.c:352:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1950              		.loc 1 352 33 is_stmt 0 view .LVU521
 1951 09c0 1C309FE5 		ldr	r3, .L103	@ tmp117,
 1952 09c4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1953 09c8 1EFF2FE1 		bx	lr	@
 1954              	.L102:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1955              		.loc 1 351 5 is_stmt 1 discriminator 1 view .LVU522
 1956              	@ armwave.c:350: {
 350:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1957              		.loc 1 350 1 is_stmt 0 discriminator 1 view .LVU523
 1958 09cc 10402DE9 		push	{r4, lr}	@
 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 4, -8
 1961              		.cfi_offset 14, -4
 1962              	@ armwave.c:351:     assert(wave_buffer_ptr != 0);
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1963              		.loc 1 351 5 discriminator 1 view .LVU524
 1964 09d0 10309FE5 		ldr	r3, .L103+4	@,
 1965 09d4 10209FE5 		ldr	r2, .L103+8	@,
 1966 09d8 10109FE5 		ldr	r1, .L103+12	@,
 1967 09dc 10009FE5 		ldr	r0, .L103+16	@,
 1968              	.LVL118:
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1969              		.loc 1 351 5 discriminator 1 view .LVU525
 1970 09e0 FEFFFFEB 		bl	__assert_fail		@
 1971              	.LVL119:
 1972              	.L104:
 1973              		.align	2
 1974              	.L103:
 1975 09e4 00000000 		.word	g_armwave_state
 1976 09e8 34000000 		.word	.LANCHOR0+52
 1977 09ec 5F010000 		.word	351
 1978 09f0 28010000 		.word	.LC9
 1979 09f4 64020000 		.word	.LC16
 1980              		.cfi_endproc
 1981              	.LFE65:
 1983              		.align	2
 1984              		.global	armwave_clear_buffer
 1985              		.syntax unified
 1986              		.arm
 1987              		.fpu vfp
 1989              	armwave_clear_buffer:
 1990              	.LVL120:
 1991              	.LFB66:
 353:armwave.c     **** }
 354:armwave.c     **** 
 355:armwave.c     **** /*
 356:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 357:armwave.c     ****  */
 358:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 359:armwave.c     **** {
 1992              		.loc 1 359 1 is_stmt 1 view -0
 1993              		.cfi_startproc
 1994              		@ args = 0, pretend = 0, frame = 0
 1995              		@ frame_needed = 0, uses_anonymous_args = 0
 1996              		@ link register save eliminated.
 360:armwave.c     ****     // Flags ignored, only one buffer cleared
 361:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1997              		.loc 1 361 5 view .LVU527
 1998              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1999              		.loc 1 361 58 is_stmt 0 view .LVU528
 2000 09f8 0C309FE5 		ldr	r3, .L106	@ tmp114,
 2001              	@ armwave.c:361:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2002              		.loc 1 361 5 view .LVU529
 2003 09fc 0010A0E3 		mov	r1, #0	@,
 2004 0a00 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 2005 0a04 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 2006              	.LVL121:
 2007              		.loc 1 361 5 view .LVU530
 2008 0a08 FEFFFFEA 		b	memset		@
 2009              	.LVL122:
 2010              	.L107:
 2011              		.align	2
 2012              	.L106:
 2013 0a0c 00000000 		.word	g_armwave_state
 2014              		.cfi_endproc
 2015              	.LFE66:
 2017              		.align	2
 2018              		.global	armwave_set_channel_colour
 2019              		.syntax unified
 2020              		.arm
 2021              		.fpu vfp
 2023              	armwave_set_channel_colour:
 2024              	.LVL123:
 2025              	.LFB67:
 362:armwave.c     **** }
 363:armwave.c     **** 
 364:armwave.c     **** /*
 365:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 366:armwave.c     ****  */
 367:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 368:armwave.c     **** {
 2026              		.loc 1 368 1 is_stmt 1 view -0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 0
 2029              		@ frame_needed = 0, uses_anonymous_args = 0
 2030              		@ link register save eliminated.
 369:armwave.c     ****     // Only 1ch supported for now
 370:armwave.c     ****     switch(ch) {
 2031              		.loc 1 370 5 view .LVU532
 2032 0a10 010050E3 		cmp	r0, #1	@ ch,
 371:armwave.c     ****         case 1:
 372:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 2033              		.loc 1 372 13 view .LVU533
 2034              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 2035              		.loc 1 372 41 is_stmt 0 view .LVU534
 2036 0a14 0C009F05 		ldreq	r0, .L110	@ tmp117,
 2037              	.LVL124:
 2038              		.loc 1 372 41 view .LVU535
 2039 0a18 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2040              		.loc 1 373 13 is_stmt 1 view .LVU536
 2041              	@ armwave.c:373:             g_armwave_state.ch1_color.g = g;
 2042              		.loc 1 373 41 is_stmt 0 view .LVU537
 2043 0a1c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2044              		.loc 1 374 13 is_stmt 1 view .LVU538
 2045              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 2046              		.loc 1 374 41 is_stmt 0 view .LVU539
 2047 0a20 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 375:armwave.c     ****             break;
 2048              		.loc 1 375 13 is_stmt 1 view .LVU540
 2049              	@ armwave.c:377: }
 376:armwave.c     ****     }
 377:armwave.c     **** }
 2050              		.loc 1 377 1 is_stmt 0 view .LVU541
 2051 0a24 1EFF2FE1 		bx	lr	@
 2052              	.L111:
 2053              		.align	2
 2054              	.L110:
 2055 0a28 00000000 		.word	g_armwave_state
 2056              		.cfi_endproc
 2057              	.LFE67:
 2059              		.align	2
 2060              		.global	armwave_dump_ppm_debug
 2061              		.syntax unified
 2062              		.arm
 2063              		.fpu vfp
 2065              	armwave_dump_ppm_debug:
 2066              	.LVL125:
 2067              	.LFB68:
 378:armwave.c     **** 
 379:armwave.c     **** /*
 380:armwave.c     ****  * Dump a ppm of a buffer to a file.
 381:armwave.c     ****  */
 382:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 383:armwave.c     **** {
 2068              		.loc 1 383 1 is_stmt 1 view -0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2072              		.loc 1 384 5 view .LVU543
 2073              	@ armwave.c:383: {
 383:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2074              		.loc 1 383 1 is_stmt 0 view .LVU544
 2075 0a2c 0130A0E1 		mov	r3, r1	@ fn, fn
 2076 0a30 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2077              		.cfi_def_cfa_offset 28
 2078              		.cfi_offset 4, -28
 2079              		.cfi_offset 5, -24
 2080              		.cfi_offset 6, -20
 2081              		.cfi_offset 7, -16
 2082              		.cfi_offset 8, -12
 2083              		.cfi_offset 9, -8
 2084              		.cfi_offset 14, -4
 2085 0a34 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2086 0a38 0CD04DE2 		sub	sp, sp, #12	@,,
 2087              		.cfi_def_cfa_offset 40
 2088              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 2089              		.loc 1 384 16 view .LVU545
 2090 0a3c C4109FE5 		ldr	r1, .L120	@,
 2091              	.LVL126:
 2092              		.loc 1 384 16 view .LVU546
 2093 0a40 0300A0E1 		mov	r0, r3	@, fn
 2094              	.LVL127:
 2095              		.loc 1 384 16 view .LVU547
 2096 0a44 FEFFFFEB 		bl	fopen64		@
 2097              	.LVL128:
 2098              	@ armwave.c:391:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 385:armwave.c     ****     uint32_t data;
 386:armwave.c     ****     int xx, yy;
 387:armwave.c     **** 
 388:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 389:armwave.c     **** 
 390:armwave.c     ****     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2099              		.loc 1 391 5 view .LVU548
 2100 0a48 BC609FE5 		ldr	r6, .L120+4	@ tmp150,
 2101              	@ armwave.c:390:     fputs("P3\n", fp);
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2102              		.loc 1 390 5 view .LVU549
 2103 0a4c 0320A0E3 		mov	r2, #3	@,
 2104 0a50 0110A0E3 		mov	r1, #1	@,
 2105              	@ armwave.c:384:     FILE *fp = fopen(fn, "wb");
 384:armwave.c     ****     uint32_t data;
 2106              		.loc 1 384 16 view .LVU550
 2107 0a54 0070A0E1 		mov	r7, r0	@ fp,
 2108              	.LVL129:
 385:armwave.c     ****     uint32_t data;
 2109              		.loc 1 385 5 is_stmt 1 view .LVU551
 386:armwave.c     **** 
 2110              		.loc 1 386 5 view .LVU552
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2111              		.loc 1 390 5 view .LVU553
 2112 0a58 0030A0E1 		mov	r3, r0	@, fp
 2113 0a5c AC009FE5 		ldr	r0, .L120+8	@,
 2114              	.LVL130:
 390:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2115              		.loc 1 390 5 is_stmt 0 view .LVU554
 2116 0a60 FEFFFFEB 		bl	fwrite		@
 2117              	.LVL131:
 2118              		.loc 1 391 5 is_stmt 1 view .LVU555
 2119 0a64 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2120 0a68 A4109FE5 		ldr	r1, .L120+12	@,
 2121 0a6c 0700A0E1 		mov	r0, r7	@, fp
 2122 0a70 FEFFFFEB 		bl	fprintf		@
 2123              	.LVL132:
 392:armwave.c     ****     fputs("255\n", fp);
 2124              		.loc 1 392 5 view .LVU556
 2125 0a74 0420A0E3 		mov	r2, #4	@,
 2126 0a78 0730A0E1 		mov	r3, r7	@, fp
 2127 0a7c 0110A0E3 		mov	r1, #1	@,
 2128 0a80 90009FE5 		ldr	r0, .L120+16	@,
 2129 0a84 FEFFFFEB 		bl	fwrite		@
 2130              	.LVL133:
 393:armwave.c     **** 
 394:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2131              		.loc 1 394 5 view .LVU557
 2132              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2133              		.loc 1 394 37 is_stmt 0 view .LVU558
 2134 0a88 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2135              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2136              		.loc 1 394 5 view .LVU559
 2137 0a8c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2138 0a90 180000DA 		ble	.L113		@,
 2139 0a94 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2140              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 398:armwave.c     **** 
 399:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2141              		.loc 1 399 13 view .LVU560
 2142 0a98 7C909FE5 		ldr	r9, .L120+20	@ tmp152,
 2143              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2144              		.loc 1 394 12 view .LVU561
 2145 0a9c 0050A0E3 		mov	r5, #0	@ yy,
 2146              	.LVL134:
 2147              	.L114:
 2148              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2149              		.loc 1 395 9 view .LVU562
 2150 0aa0 000053E3 		cmp	r3, #0	@ _13,
 2151              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2152              		.loc 1 395 16 view .LVU563
 2153 0aa4 0040A0C3 		movgt	r4, #0	@ xx,
 2154              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2155              		.loc 1 395 9 view .LVU564
 2156 0aa8 0F0000DA 		ble	.L116		@,
 2157              	.LVL135:
 2158              	.L115:
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2159              		.loc 1 396 13 is_stmt 1 discriminator 3 view .LVU565
 2160              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2161              		.loc 1 396 29 is_stmt 0 discriminator 3 view .LVU566
 2162 0aac 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2163              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2164              		.loc 1 399 13 discriminator 3 view .LVU567
 2165 0ab0 0910A0E1 		mov	r1, r9	@, tmp152
 2166 0ab4 0700A0E1 		mov	r0, r7	@, fp
 2167              	@ armwave.c:396:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 396:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2168              		.loc 1 396 18 discriminator 3 view .LVU568
 2169 0ab8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2170              	.LVL136:
 2171              		.loc 1 399 13 is_stmt 1 discriminator 3 view .LVU569
 2172              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2173              		.loc 1 395 58 is_stmt 0 discriminator 3 view .LVU570
 2174 0abc 014084E2 		add	r4, r4, #1	@ xx, xx,
 2175              	.LVL137:
 2176              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2177              		.loc 1 399 81 discriminator 3 view .LVU571
 2178 0ac0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2179              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2180              		.loc 1 399 61 discriminator 3 view .LVU572
 2181 0ac4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2182              	@ armwave.c:399:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2183              		.loc 1 399 13 discriminator 3 view .LVU573
 2184 0ac8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2185 0acc 7330EFE6 		uxtb	r3, r3	@, tmp142
 2186 0ad0 00C08DE5 		str	ip, [sp]	@ tmp147,
 2187 0ad4 7220EFE6 		uxtb	r2, r2	@, data
 2188              	.LVL138:
 2189              		.loc 1 399 13 discriminator 3 view .LVU574
 2190 0ad8 FEFFFFEB 		bl	fprintf		@
 2191              	.LVL139:
 2192              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2193              		.loc 1 395 41 discriminator 3 view .LVU575
 2194 0adc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2195              	@ armwave.c:395:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2196              		.loc 1 395 9 discriminator 3 view .LVU576
 2197 0ae0 040053E1 		cmp	r3, r4	@ _13, xx
 2198 0ae4 F0FFFFCA 		bgt	.L115		@,
 2199 0ae8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2200              	.LVL140:
 2201              	.L116:
 2202              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2203              		.loc 1 394 55 discriminator 2 view .LVU577
 2204 0aec 015085E2 		add	r5, r5, #1	@ yy, yy,
 2205              	.LVL141:
 2206              	@ armwave.c:394:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 394:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2207              		.loc 1 394 5 discriminator 2 view .LVU578
 2208 0af0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2209 0af4 E9FFFFBA 		blt	.L114		@,
 2210              	.LVL142:
 2211              	.L113:
 400:armwave.c     ****         }
 401:armwave.c     ****     }
 402:armwave.c     **** 
 403:armwave.c     ****     fclose(fp);
 2212              		.loc 1 403 5 is_stmt 1 view .LVU579
 2213 0af8 0700A0E1 		mov	r0, r7	@, fp
 2214              	@ armwave.c:404: }
 404:armwave.c     **** }
 2215              		.loc 1 404 1 is_stmt 0 view .LVU580
 2216 0afc 0CD08DE2 		add	sp, sp, #12	@,,
 2217              		.cfi_def_cfa_offset 28
 2218              		@ sp needed	@
 2219 0b00 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2220              		.cfi_restore 14
 2221              		.cfi_restore 9
 2222              		.cfi_restore 8
 2223              		.cfi_restore 7
 2224              		.cfi_restore 6
 2225              		.cfi_restore 5
 2226              		.cfi_restore 4
 2227              		.cfi_def_cfa_offset 0
 2228              	.LVL143:
 2229              	@ armwave.c:403:     fclose(fp);
 403:armwave.c     **** }
 2230              		.loc 1 403 5 view .LVU581
 2231 0b04 FEFFFFEA 		b	fclose		@
 2232              	.LVL144:
 2233              	.L121:
 403:armwave.c     **** }
 2234              		.loc 1 403 5 view .LVU582
 2235              		.align	2
 2236              	.L120:
 2237 0b08 7C020000 		.word	.LC17
 2238 0b0c 00000000 		.word	g_armwave_state
 2239 0b10 80020000 		.word	.LC18
 2240 0b14 84020000 		.word	.LC19
 2241 0b18 8C020000 		.word	.LC20
 2242 0b1c 94020000 		.word	.LC21
 2243              		.cfi_endproc
 2244              	.LFE68:
 2246              		.align	2
 2247              		.global	armwave_test_init
 2248              		.syntax unified
 2249              		.arm
 2250              		.fpu vfp
 2252              	armwave_test_init:
 2253              	.LVL145:
 2254              	.LFB69:
 405:armwave.c     **** 
 406:armwave.c     **** /*
 407:armwave.c     ****  * Initialise some test functionry.
 408:armwave.c     ****  */
 409:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 410:armwave.c     **** {
 2255              		.loc 1 410 1 is_stmt 1 view -0
 2256              		.cfi_startproc
 2257              		@ args = 0, pretend = 0, frame = 0
 2258              		@ frame_needed = 0, uses_anonymous_args = 0
 411:armwave.c     ****     test_create_gamma();
 2259              		.loc 1 411 5 view .LVU584
 2260              	.LBB16:
 2261              	.LBI16:
  34:armwave.c     **** {
 2262              		.loc 1 34 6 view .LVU585
  34:armwave.c     **** {
 2263              		.loc 1 34 6 is_stmt 0 view .LVU586
 2264              	.LBE16:
 2265              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2266              		.loc 1 410 1 view .LVU587
 2267 0b20 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2268              		.cfi_def_cfa_offset 32
 2269              		.cfi_offset 4, -32
 2270              		.cfi_offset 5, -28
 2271              		.cfi_offset 6, -24
 2272              		.cfi_offset 7, -20
 2273              		.cfi_offset 8, -16
 2274              		.cfi_offset 9, -12
 2275              		.cfi_offset 10, -8
 2276              		.cfi_offset 14, -4
 2277 0b24 068B2DED 		vpush.64	{d8, d9, d10}	@
 2278              		.cfi_def_cfa_offset 56
 2279              		.cfi_offset 80, -56
 2280              		.cfi_offset 81, -52
 2281              		.cfi_offset 82, -48
 2282              		.cfi_offset 83, -44
 2283              		.cfi_offset 84, -40
 2284              		.cfi_offset 85, -36
 2285 0b28 BC409FE5 		ldr	r4, .L126+20	@ ivtmp.101,
 2286              	.LBB19:
 2287              	.LBB17:
 2288              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2289              		.loc 1 40 32 view .LVU588
 2290 0b2c 2DAA9FED 		vldr.32	s20, .L126+16	@ tmp136,
 2291              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2292              		.loc 1 40 26 view .LVU589
 2293 0b30 289B9FED 		vldr.64	d9, .L126	@ tmp151,
 2294              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2295              		.loc 1 40 49 view .LVU590
 2296 0b34 298B9FED 		vldr.64	d8, .L126+8	@ tmp139,
 2297 0b38 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.101,
 2298              	.LBE17:
 2299              	.LBE19:
 2300              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2301              		.loc 1 410 1 view .LVU591
 2302 0b3c 10D04DE2 		sub	sp, sp, #16	@,,
 2303              		.cfi_def_cfa_offset 72
 2304              	@ armwave.c:410: {
 410:armwave.c     ****     test_create_gamma();
 2305              		.loc 1 410 1 view .LVU592
 2306 0b40 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2307 0b44 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2308 0b48 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2309 0b4c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2310 0b50 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.101,
 2311 0b54 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2312              	.LVL146:
 2313              	.L123:
 2314              	.LBB20:
 2315              	.LBB18:
  40:armwave.c     ****     }
 2316              		.loc 1 40 9 is_stmt 1 view .LVU593
 2317              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2318              		.loc 1 40 32 is_stmt 0 view .LVU594
 2319 0b58 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.101
 2320              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2321              		.loc 1 40 26 view .LVU595
 2322 0b5c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2323              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2324              		.loc 1 40 32 view .LVU596
 2325 0b60 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2326 0b64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2327 0b68 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2328              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2329              		.loc 1 40 26 view .LVU597
 2330 0b6c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2331 0b70 FEFFFFEB 		bl	pow		@
 2332              	.LVL147:
 2333              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2334              		.loc 1 40 49 view .LVU598
 2335 0b74 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2336              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2337              		.loc 1 40 24 view .LVU599
 2338 0b78 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2339 0b7c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2340 0b80 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2341              	.LVL148:
 2342              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2343              		.loc 1 39 5 view .LVU600
 2344 0b84 0A0054E1 		cmp	r4, r10	@ ivtmp.101, _39
 2345 0b88 F2FFFF1A 		bne	.L123		@,
 2346              	.LVL149:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2347              		.loc 1 39 5 view .LVU601
 2348              	.LBE18:
 2349              	.LBE20:
 412:armwave.c     **** 
 413:armwave.c     ****     // make ch1 yellowish by default
 414:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2350              		.loc 1 414 5 is_stmt 1 view .LVU602
 2351              	.LBB21:
 2352              	.LBI21:
 367:armwave.c     **** {
 2353              		.loc 1 367 6 view .LVU603
 2354              	.LBB22:
 370:armwave.c     ****         case 1:
 2355              		.loc 1 370 5 view .LVU604
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2356              		.loc 1 372 13 view .LVU605
 373:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2357              		.loc 1 373 13 view .LVU606
 2358              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2359              		.loc 1 372 41 is_stmt 0 view .LVU607
 2360 0b8c 5CC09FE5 		ldr	ip, .L126+24	@ tmp142,
 2361 0b90 5C409FE5 		ldr	r4, .L126+28	@ tmp143,
 2362              	.LBE22:
 2363              	.LBE21:
 2364              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 415:armwave.c     **** 
 416:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2365              		.loc 1 416 5 view .LVU608
 2366 0b94 0000A0E3 		mov	r0, #0	@ tmp147,
 2367              	.LBB26:
 2368              	.LBB23:
 2369              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2370              		.loc 1 374 41 view .LVU609
 2371 0b98 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2372              	.LBE23:
 2373              	.LBE26:
 2374              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2375              		.loc 1 416 5 view .LVU610
 2376 0b9c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2377 0ba0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2378 0ba4 00808DE5 		str	r8, [sp]	@ render_width,
 2379 0ba8 0610A0E1 		mov	r1, r6	@, tmp3
 2380 0bac 0720A0E1 		mov	r2, r7	@, nwaves
 2381              	.LBB27:
 2382              	.LBB24:
 2383              	@ armwave.c:372:             g_armwave_state.ch1_color.r = r;
 372:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2384              		.loc 1 372 41 view .LVU611
 2385 0bb0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 374:armwave.c     ****             break;
 2386              		.loc 1 374 13 is_stmt 1 view .LVU612
 2387              	.LBE24:
 2388              	.LBE27:
 2389              	@ armwave.c:416:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2390              		.loc 1 416 5 is_stmt 0 view .LVU613
 2391 0bb4 0630A0E1 		mov	r3, r6	@, wave_size
 2392              	.LBB28:
 2393              	.LBB25:
 2394              	@ armwave.c:374:             g_armwave_state.ch1_color.b = b;
 374:armwave.c     ****             break;
 2395              		.loc 1 374 41 view .LVU614
 2396 0bb8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 375:armwave.c     ****     }
 2397              		.loc 1 375 13 is_stmt 1 view .LVU615
 2398              	.LVL150:
 375:armwave.c     ****     }
 2399              		.loc 1 375 13 is_stmt 0 view .LVU616
 2400              	.LBE25:
 2401              	.LBE28:
 2402              		.loc 1 416 5 is_stmt 1 view .LVU617
 2403 0bbc FEFFFFEB 		bl	armwave_setup_render		@
 2404              	.LVL151:
 417:armwave.c     **** 
 418:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2405              		.loc 1 418 5 view .LVU618
 2406 0bc0 30109FE5 		ldr	r1, .L126+32	@,
 2407 0bc4 30009FE5 		ldr	r0, .L126+36	@,
 2408              	@ armwave.c:419: }
 419:armwave.c     **** }
 2409              		.loc 1 419 1 is_stmt 0 view .LVU619
 2410 0bc8 10D08DE2 		add	sp, sp, #16	@,,
 2411              		.cfi_def_cfa_offset 56
 2412              		@ sp needed	@
 2413 0bcc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2414              		.cfi_restore 84
 2415              		.cfi_restore 85
 2416              		.cfi_restore 82
 2417              		.cfi_restore 83
 2418              		.cfi_restore 80
 2419              		.cfi_restore 81
 2420              		.cfi_def_cfa_offset 32
 2421 0bd0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2422              		.cfi_restore 14
 2423              		.cfi_restore 10
 2424              		.cfi_restore 9
 2425              		.cfi_restore 8
 2426              		.cfi_restore 7
 2427              		.cfi_restore 6
 2428              		.cfi_restore 5
 2429              		.cfi_restore 4
 2430              		.cfi_def_cfa_offset 0
 2431              	.LVL152:
 2432              	@ armwave.c:418:     printf("armwave version: %s\n", ARMWAVE_VER);
 418:armwave.c     **** }
 2433              		.loc 1 418 5 view .LVU620
 2434 0bd4 FEFFFFEA 		b	printf		@
 2435              	.LVL153:
 2436              	.L127:
 2437              		.align	3
 2438              	.L126:
 2439 0bd8 000000C0 		.word	-1073741824
 2440 0bdc CCCCEC3F 		.word	1072483532
 2441 0be0 00000000 		.word	0
 2442 0be4 00E06F40 		.word	1081073664
 2443 0be8 00007F43 		.word	1132396544
 2444 0bec FFFFFFFF 		.word	gamma_table-1
 2445 0bf0 00000000 		.word	g_armwave_state
 2446 0bf4 F609F406 		.word	116656630
 2447 0bf8 00000000 		.word	.LC0
 2448 0bfc 08000000 		.word	.LC1
 2449              		.cfi_endproc
 2450              	.LFE69:
 2452              		.align	2
 2453              		.global	armwave_test_fill_outbuf
 2454              		.syntax unified
 2455              		.arm
 2456              		.fpu vfp
 2458              	armwave_test_fill_outbuf:
 2459              	.LFB70:
 420:armwave.c     **** 
 421:armwave.c     **** /*
 422:armwave.c     ****  * Render image to the local allocated buffer.
 423:armwave.c     ****  */
 424:armwave.c     **** void armwave_test_fill_outbuf()
 425:armwave.c     **** {
 2460              		.loc 1 425 1 is_stmt 1 view -0
 2461              		.cfi_startproc
 2462              		@ args = 0, pretend = 0, frame = 0
 2463              		@ frame_needed = 0, uses_anonymous_args = 0
 2464              		@ link register save eliminated.
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2465              		.loc 1 426 5 view .LVU622
 2466 0c00 04309FE5 		ldr	r3, .L129	@ tmp111,
 2467 0c04 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2468 0c08 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2469              	.LVL154:
 2470              	.L130:
 2471              		.align	2
 2472              	.L129:
 2473 0c0c 00000000 		.word	g_armwave_state
 2474              		.cfi_endproc
 2475              	.LFE70:
 2477              		.align	2
 2478              		.global	armwave_test_dump_buffer_to_ppm
 2479              		.syntax unified
 2480              		.arm
 2481              		.fpu vfp
 2483              	armwave_test_dump_buffer_to_ppm:
 2484              	.LVL155:
 2485              	.LFB71:
 427:armwave.c     **** }
 428:armwave.c     **** 
 429:armwave.c     **** /*
 430:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 431:armwave.c     ****  */
 432:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 433:armwave.c     **** {
 2486              		.loc 1 433 1 view -0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 0, uses_anonymous_args = 0
 2490              		@ link register save eliminated.
 434:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2491              		.loc 1 434 5 view .LVU624
 2492 0c10 08309FE5 		ldr	r3, .L132	@ tmp112,
 2493 0c14 0010A0E1 		mov	r1, r0	@, fn
 2494 0c18 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2495              	.LVL156:
 2496              		.loc 1 434 5 is_stmt 0 view .LVU625
 2497 0c1c FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2498              	.LVL157:
 2499              	.L133:
 2500              		.loc 1 434 5 view .LVU626
 2501              		.align	2
 2502              	.L132:
 2503 0c20 00000000 		.word	g_armwave_state
 2504              		.cfi_endproc
 2505              	.LFE71:
 2507              		.align	2
 2508              		.global	armwave_test_fill_gdkbuf
 2509              		.syntax unified
 2510              		.arm
 2511              		.fpu vfp
 2513              	armwave_test_fill_gdkbuf:
 2514              	.LVL158:
 2515              	.LFB72:
 435:armwave.c     **** }
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Render GDK buffer with test funtionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 441:armwave.c     **** {
 2516              		.loc 1 441 1 is_stmt 1 view -0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520              		@ link register save eliminated.
 442:armwave.c     ****     //PyObject *mv;
 443:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 444:armwave.c     **** 
 445:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 446:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2521              		.loc 1 446 5 view .LVU628
 447:armwave.c     ****     
 448:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2522              		.loc 1 449 5 view .LVU629
 2523              	@ armwave.c:446:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 446:armwave.c     ****     
 2524              		.loc 1 446 11 is_stmt 0 view .LVU630
 2525 0c24 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2526              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2527              		.loc 1 449 5 view .LVU631
 2528 0c28 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2529              	.LVL159:
 2530              		.loc 1 449 5 view .LVU632
 2531 0c2c FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2532              	.LVL160:
 2533              		.loc 1 449 5 view .LVU633
 2534              		.cfi_endproc
 2535              	.LFE72:
 2537              		.align	2
 2538              		.global	armwave_test_buffer_alloc
 2539              		.syntax unified
 2540              		.arm
 2541              		.fpu vfp
 2543              	armwave_test_buffer_alloc:
 2544              	.LVL161:
 2545              	.LFB73:
 450:armwave.c     **** }
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 456:armwave.c     **** {
 2546              		.loc 1 456 1 is_stmt 1 view -0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 0
 2549              		@ frame_needed = 0, uses_anonymous_args = 0
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2550              		.loc 1 457 5 view .LVU635
 2551              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2552              		.loc 1 456 1 is_stmt 0 view .LVU636
 2553 0c30 70402DE9 		push	{r4, r5, r6, lr}	@
 2554              		.cfi_def_cfa_offset 16
 2555              		.cfi_offset 4, -16
 2556              		.cfi_offset 5, -12
 2557              		.cfi_offset 6, -8
 2558              		.cfi_offset 14, -4
 2559              	@ armwave.c:456: {
 456:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2560              		.loc 1 456 1 view .LVU637
 2561 0c34 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2562              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2563              		.loc 1 457 23 view .LVU638
 2564 0c38 44409FE5 		ldr	r4, .L142	@ tmp128,
 2565 0c3c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2566              	.LVL162:
 2567              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 2568              		.loc 1 457 7 view .LVU639
 2569 0c40 000050E3 		cmp	r0, #0	@ _1,
 2570 0c44 0000000A 		beq	.L136		@,
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2571              		.loc 1 458 9 is_stmt 1 view .LVU640
 2572 0c48 FEFFFFEB 		bl	free		@
 2573              	.LVL163:
 2574              	.L136:
 459:armwave.c     ****     }
 460:armwave.c     **** 
 461:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 462:armwave.c     **** 
 463:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2575              		.loc 1 463 5 view .LVU641
 2576              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2577              		.loc 1 463 75 is_stmt 0 view .LVU642
 2578 0c4c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2579 0c50 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2580              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2581              		.loc 1 463 40 view .LVU643
 2582 0c54 0610A0E1 		mov	r1, r6	@, nsets
 2583              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2584              		.loc 1 463 75 view .LVU644
 2585 0c58 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2586              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2587              		.loc 1 463 40 view .LVU645
 2588 0c5c 0500A0E1 		mov	r0, r5	@, _4
 2589 0c60 FEFFFFEB 		bl	calloc		@
 2590              	.LVL164:
 2591              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 464:armwave.c     **** 
 465:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2592              		.loc 1 465 7 view .LVU646
 2593 0c64 000050E3 		cmp	r0, #0	@ tmp124,
 2594              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2595              		.loc 1 463 38 view .LVU647
 2596 0c68 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2597              		.loc 1 465 5 is_stmt 1 view .LVU648
 2598              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 2599              		.loc 1 465 7 is_stmt 0 view .LVU649
 2600 0c6c 7080BD18 		popne	{r4, r5, r6, pc}	@
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2601              		.loc 1 466 9 is_stmt 1 view .LVU650
 2602 0c70 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2603 0c74 0620A0E1 		mov	r2, r6	@, nsets
 2604 0c78 08009FE5 		ldr	r0, .L142+4	@,
 2605              	@ armwave.c:470: }
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 468:armwave.c     ****         return;
 469:armwave.c     ****     }
 470:armwave.c     **** }
 2606              		.loc 1 470 1 is_stmt 0 view .LVU651
 2607 0c7c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2608              		.cfi_restore 14
 2609              		.cfi_restore 6
 2610              		.cfi_restore 5
 2611              		.cfi_restore 4
 2612              		.cfi_def_cfa_offset 0
 2613              	.LVL165:
 2614              	@ armwave.c:466:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2615              		.loc 1 466 9 view .LVU652
 2616 0c80 FEFFFFEA 		b	printf		@
 2617              	.LVL166:
 2618              	.L143:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2619              		.loc 1 466 9 view .LVU653
 2620              		.align	2
 2621              	.L142:
 2622 0c84 00000000 		.word	g_armwave_state
 2623 0c88 A4020000 		.word	.LC22
 2624              		.cfi_endproc
 2625              	.LFE73:
 2627              		.align	2
 2628              		.global	armwave_fill_pixbuf_into_pybuffer
 2629              		.syntax unified
 2630              		.arm
 2631              		.fpu vfp
 2633              	armwave_fill_pixbuf_into_pybuffer:
 2634              	.LVL167:
 2635              	.LFB74:
 471:armwave.c     **** 
 472:armwave.c     **** /*
 473:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 474:armwave.c     ****  */
 475:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 476:armwave.c     **** {
 2636              		.loc 1 476 1 is_stmt 1 view -0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 48
 2639              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     Py_buffer buffer;
 2640              		.loc 1 477 5 view .LVU655
 478:armwave.c     ****     int ret;
 2641              		.loc 1 478 5 view .LVU656
 479:armwave.c     **** 
 480:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 481:armwave.c     **** 
 482:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2642              		.loc 1 482 5 view .LVU657
 2643              	@ armwave.c:476: {
 476:armwave.c     ****     Py_buffer buffer;
 2644              		.loc 1 476 1 is_stmt 0 view .LVU658
 2645 0c8c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2646              		.cfi_def_cfa_offset 4
 2647              		.cfi_offset 14, -4
 2648 0c90 34D04DE2 		sub	sp, sp, #52	@,,
 2649              		.cfi_def_cfa_offset 56
 2650              	@ armwave.c:482:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2651              		.loc 1 482 11 view .LVU659
 2652 0c94 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2653 0c98 0120A0E3 		mov	r2, #1	@,
 2654 0c9c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2655              	.LVL168:
 483:armwave.c     **** 
 484:armwave.c     ****     if(ret != 0) {
 2656              		.loc 1 484 5 is_stmt 1 view .LVU660
 2657              	@ armwave.c:484:     if(ret != 0) {
 2658              		.loc 1 484 7 is_stmt 0 view .LVU661
 2659 0ca0 000050E3 		cmp	r0, #0	@,
 2660 0ca4 0A00001A 		bne	.L148		@,
 485:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 486:armwave.c     ****         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 488:armwave.c     **** 
 489:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 490:armwave.c     **** 
 491:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2661              		.loc 1 491 5 is_stmt 1 view .LVU662
 2662 0ca8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2663              	.LVL169:
 2664              		.loc 1 491 5 is_stmt 0 view .LVU663
 2665 0cac FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2666              	.LVL170:
 492:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 493:armwave.c     **** 
 494:armwave.c     ****     PyBuffer_Release(&buffer);
 2667              		.loc 1 494 5 is_stmt 1 view .LVU664
 2668 0cb0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2669 0cb4 FEFFFFEB 		bl	PyBuffer_Release		@
 2670              	.LVL171:
 495:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 496:armwave.c     **** 
 497:armwave.c     ****     Py_RETURN_TRUE;
 2671              		.loc 1 497 5 view .LVU665
 2672              	.LBB29:
 2673              	.LBI29:
 2674              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2675              		.loc 2 456 20 view .LVU666
 2676              	.LBB30:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2677              		.loc 2 458 21 view .LVU667
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2678              		.loc 2 459 5 view .LVU668
 2679              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2680              		.loc 2 459 18 is_stmt 0 view .LVU669
 2681 0cb8 38309FE5 		ldr	r3, .L149	@ tmp126,
 2682              	.LBE30:
 2683              	.LBE29:
 2684              	@ armwave.c:497:     Py_RETURN_TRUE;
 2685              		.loc 1 497 5 view .LVU670
 2686 0cbc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2687              	.LBB32:
 2688              	.LBB31:
 2689              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2690              		.loc 2 459 18 view .LVU671
 2691 0cc0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2692 0cc4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2693 0cc8 002083E5 		str	r2, [r3]	@ tmp128,
 2694              	.LBE31:
 2695              	.LBE32:
 2696              	@ armwave.c:498: }
 498:armwave.c     **** }
 2697              		.loc 1 498 1 view .LVU672
 2698 0ccc 34D08DE2 		add	sp, sp, #52	@,,
 2699              		.cfi_remember_state
 2700              		.cfi_def_cfa_offset 4
 2701              		@ sp needed	@
 2702 0cd0 04F09DE4 		ldr	pc, [sp], #4	@
 2703              	.LVL172:
 2704              	.L148:
 2705              		.cfi_restore_state
 485:armwave.c     ****         Py_RETURN_FALSE;
 2706              		.loc 1 485 9 is_stmt 1 view .LVU673
 2707 0cd4 20009FE5 		ldr	r0, .L149+4	@,
 2708              	.LVL173:
 485:armwave.c     ****         Py_RETURN_FALSE;
 2709              		.loc 1 485 9 is_stmt 0 view .LVU674
 2710 0cd8 FEFFFFEB 		bl	puts		@
 2711              	.LVL174:
 486:armwave.c     ****     }
 2712              		.loc 1 486 9 is_stmt 1 view .LVU675
 2713              	.LBB33:
 2714              	.LBI33:
 456:/usr/local/include/python3.8/object.h **** {
 2715              		.loc 2 456 20 view .LVU676
 2716              	.LBB34:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2717              		.loc 2 458 21 view .LVU677
 2718              		.loc 2 459 5 view .LVU678
 2719              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2720              		.loc 2 459 18 is_stmt 0 view .LVU679
 2721 0cdc 1C309FE5 		ldr	r3, .L149+8	@ tmp120,
 2722              	.LBE34:
 2723              	.LBE33:
 2724              	@ armwave.c:486:         Py_RETURN_FALSE;
 486:armwave.c     ****     }
 2725              		.loc 1 486 9 view .LVU680
 2726 0ce0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2727              	.LBB36:
 2728              	.LBB35:
 2729              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2730              		.loc 2 459 18 view .LVU681
 2731 0ce4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2732 0ce8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2733 0cec 002083E5 		str	r2, [r3]	@ tmp122,
 2734              	.LBE35:
 2735              	.LBE36:
 2736              	@ armwave.c:498: }
 2737              		.loc 1 498 1 view .LVU682
 2738 0cf0 34D08DE2 		add	sp, sp, #52	@,,
 2739              		.cfi_def_cfa_offset 4
 2740              		@ sp needed	@
 2741 0cf4 04F09DE4 		ldr	pc, [sp], #4	@
 2742              	.L150:
 2743              		.align	2
 2744              	.L149:
 2745 0cf8 00000000 		.word	_Py_TrueStruct
 2746 0cfc F8020000 		.word	.LC23
 2747 0d00 00000000 		.word	_Py_FalseStruct
 2748              		.cfi_endproc
 2749              	.LFE74:
 2751              		.align	2
 2752              		.global	armwave_test_create_am_sine
 2753              		.syntax unified
 2754              		.arm
 2755              		.fpu vfp
 2757              	armwave_test_create_am_sine:
 2758              	.LVL175:
 2759              	.LFB75:
 499:armwave.c     **** 
 500:armwave.c     **** /*
 501:armwave.c     ****  * Make a test AM waveform for render tests.
 502:armwave.c     ****  *
 503:armwave.c     ****  * @param   mod                     modulation depth
 504:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 505:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 508:armwave.c     **** {
 2760              		.loc 1 508 1 is_stmt 1 view -0
 2761              		.cfi_startproc
 2762              		@ args = 0, pretend = 0, frame = 8
 2763              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2764              		.loc 1 509 5 view .LVU684
 510:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2765              		.loc 1 510 5 view .LVU685
 2766              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2767              		.loc 1 508 1 is_stmt 0 view .LVU686
 2768 0d04 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2769              		.cfi_def_cfa_offset 32
 2770              		.cfi_offset 4, -32
 2771              		.cfi_offset 5, -28
 2772              		.cfi_offset 6, -24
 2773              		.cfi_offset 7, -20
 2774              		.cfi_offset 8, -16
 2775              		.cfi_offset 9, -12
 2776              		.cfi_offset 10, -8
 2777              		.cfi_offset 14, -4
 2778              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2779              		.loc 1 510 38 view .LVU687
 2780 0d08 7A7A9FED 		vldr.32	s14, .L182	@ tmp180,
 2781              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2782              		.loc 1 510 55 view .LVU688
 2783 0d0c 00529FE5 		ldr	r5, .L182+28	@ tmp250,
 2784              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2785              		.loc 1 508 1 view .LVU689
 2786 0d10 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2787              		.cfi_def_cfa_offset 80
 2788              		.cfi_offset 80, -80
 2789              		.cfi_offset 81, -76
 2790              		.cfi_offset 82, -72
 2791              		.cfi_offset 83, -68
 2792              		.cfi_offset 84, -64
 2793              		.cfi_offset 85, -60
 2794              		.cfi_offset 86, -56
 2795              		.cfi_offset 87, -52
 2796              		.cfi_offset 88, -48
 2797              		.cfi_offset 89, -44
 2798              		.cfi_offset 90, -40
 2799              		.cfi_offset 91, -36
 2800 0d14 0090A0E1 		mov	r9, r0	@ sets, sets
 2801              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2802              		.loc 1 510 38 view .LVU690
 2803 0d18 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2804              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 511:armwave.c     ****     int s, set_offset = 0;
 512:armwave.c     ****     int w, x;
 513:armwave.c     **** 
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2805              		.loc 1 514 70 view .LVU691
 2806 0d1c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2807 0d20 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2808              	.LBB39:
 2809              	.LBB40:
 2810              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2811              		.loc 1 457 23 view .LVU692
 2812 0d24 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2813              	.LVL176:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2814              		.loc 1 457 23 view .LVU693
 2815              	.LBE40:
 2816              	.LBE39:
 2817              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2818              		.loc 1 510 38 view .LVU694
 2819 0d28 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2820              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2821              		.loc 1 514 70 view .LVU695
 2822 0d2c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2823              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2824              		.loc 1 508 1 view .LVU696
 2825 0d30 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2826              	.LBB44:
 2827              	.LBB41:
 2828              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2829              		.loc 1 457 7 view .LVU697
 2830 0d34 000050E3 		cmp	r0, #0	@ _82,
 2831              	.LBE41:
 2832              	.LBE44:
 2833              	@ armwave.c:508: {
 508:armwave.c     ****     float v, noise, xnoise, mod_val;
 2834              		.loc 1 508 1 view .LVU698
 2835 0d38 08D04DE2 		sub	sp, sp, #8	@,,
 2836              		.cfi_def_cfa_offset 88
 2837              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_nsets = sets;
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2838              		.loc 1 515 44 view .LVU699
 2839 0d3c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2840              	@ armwave.c:514:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2841              		.loc 1 514 45 view .LVU700
 2842 0d40 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2843              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2844              		.loc 1 510 38 view .LVU701
 2845 0d44 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2846              	@ armwave.c:510:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 510:armwave.c     ****     int s, set_offset = 0;
 2847              		.loc 1 510 11 view .LVU702
 2848 0d48 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2849              	.LVL177:
 511:armwave.c     ****     int w, x;
 2850              		.loc 1 511 5 is_stmt 1 view .LVU703
 512:armwave.c     **** 
 2851              		.loc 1 512 5 view .LVU704
 514:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2852              		.loc 1 514 5 view .LVU705
 2853              		.loc 1 515 5 view .LVU706
 516:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2854              		.loc 1 516 5 view .LVU707
 2855              	.LBB45:
 2856              	.LBI39:
 455:armwave.c     **** {
 2857              		.loc 1 455 6 view .LVU708
 2858              	.LBB42:
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2859              		.loc 1 457 5 view .LVU709
 2860              	@ armwave.c:457:     if(g_armwave_state.test_wave_buffer != NULL) {
 457:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2861              		.loc 1 457 7 is_stmt 0 view .LVU710
 2862 0d4c 0000000A 		beq	.L152		@,
 458:armwave.c     ****     }
 2863              		.loc 1 458 9 is_stmt 1 view .LVU711
 2864 0d50 FEFFFFEB 		bl	free		@
 2865              	.LVL178:
 2866              	.L152:
 463:armwave.c     **** 
 2867              		.loc 1 463 5 view .LVU712
 2868              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2869              		.loc 1 463 75 is_stmt 0 view .LVU713
 2870 0d54 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2871 0d58 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2872              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2873              		.loc 1 463 40 view .LVU714
 2874 0d5c 0910A0E1 		mov	r1, r9	@, sets
 2875              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2876              		.loc 1 463 75 view .LVU715
 2877 0d60 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2878              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2879              		.loc 1 463 40 view .LVU716
 2880 0d64 0400A0E1 		mov	r0, r4	@, _85
 2881 0d68 FEFFFFEB 		bl	calloc		@
 2882              	.LVL179:
 2883              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2884              		.loc 1 465 7 view .LVU717
 2885 0d6c 000050E3 		cmp	r0, #0	@ tmp191,
 2886              	@ armwave.c:463:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 463:armwave.c     **** 
 2887              		.loc 1 463 38 view .LVU718
 2888 0d70 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2889              		.loc 1 465 5 is_stmt 1 view .LVU719
 2890              	@ armwave.c:465:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2891              		.loc 1 465 7 is_stmt 0 view .LVU720
 2892 0d74 5A00000A 		beq	.L181		@,
 2893              	.L153:
 2894              	.LVL180:
 465:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2895              		.loc 1 465 7 view .LVU721
 2896              	.LBE42:
 2897              	.LBE45:
 2898              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 517:armwave.c     **** 
 518:armwave.c     ****     for(s = 0; s < sets; s++) {
 2899              		.loc 1 518 5 discriminator 1 view .LVU722
 2900 0d78 000059E3 		cmp	r9, #0	@ sets,
 2901 0d7c 550000DA 		ble	.L151		@,
 2902              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 520:armwave.c     ****     
 521:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 523:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 525:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     **** 
 531:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 533:armwave.c     **** 
 534:armwave.c     ****                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 537:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2903              		.loc 1 537 45 view .LVU723
 2904 0d80 5C8A9FED 		vldr.32	s16, .L182	@ tmp258,
 2905              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 539:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 540:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2906              		.loc 1 540 104 view .LVU724
 2907 0d84 5CCA9FED 		vldr.32	s24, .L182+4	@ tmp259,
 2908              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2909              		.loc 1 518 5 view .LVU725
 2910 0d88 0070A0E3 		mov	r7, #0	@ set_offset,
 2911              	@ armwave.c:519:         printf("Calculating test set %d\n", s);
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2912              		.loc 1 519 9 view .LVU726
 2913 0d8c 84A19FE5 		ldr	r10, .L182+32	@ tmp257,
 2914              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 2915              		.loc 1 518 5 view .LVU727
 2916 0d90 0780A0E1 		mov	r8, r7	@ s, set_offset
 2917              	.LVL181:
 2918              	.L154:
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2919              		.loc 1 519 9 is_stmt 1 view .LVU728
 2920 0d94 0810A0E1 		mov	r1, r8	@, s
 2921 0d98 0A00A0E1 		mov	r0, r10	@, tmp257
 2922 0d9c FEFFFFEB 		bl	printf		@
 2923              	.LVL182:
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2924              		.loc 1 521 9 view .LVU729
 2925              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2926              		.loc 1 521 39 is_stmt 0 view .LVU730
 2927 0da0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2928              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2929              		.loc 1 521 9 view .LVU731
 2930 0da4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2931 0da8 450000DA 		ble	.L155		@,
 2932              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2933              		.loc 1 523 21 view .LVU732
 2934 0dac 53CADFED 		vldr.32	s25, .L182+8	@ tmp200,
 2935              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2936              		.loc 1 537 33 view .LVU733
 2937 0db0 53BA9FED 		vldr.32	s22, .L182+12	@ tmp253,
 2938              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 2939              		.loc 1 535 24 view .LVU734
 2940 0db4 53AADFED 		vldr.32	s21, .L182+16	@ tmp254,
 2941 0db8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2942              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2943              		.loc 1 521 15 view .LVU735
 2944 0dbc 0060A0E3 		mov	r6, #0	@ w,
 2945              	.LVL183:
 2946              	.L162:
 523:armwave.c     **** 
 2947              		.loc 1 523 13 is_stmt 1 view .LVU736
 2948              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2949              		.loc 1 523 21 is_stmt 0 view .LVU737
 2950 0dc0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2951 0dc4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2952              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2953              		.loc 1 525 13 view .LVU738
 2954 0dc8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2955              	@ armwave.c:523:             mod_val = 0.5f + (_1_waves_mod * w);
 523:armwave.c     **** 
 2956              		.loc 1 523 21 view .LVU739
 2957 0dcc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2958 0dd0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2959              	.LVL184:
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2960              		.loc 1 525 13 is_stmt 1 view .LVU740
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2961              		.loc 1 525 13 is_stmt 0 view .LVU741
 2962 0dd4 370000DA 		ble	.L156		@,
 2963 0dd8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2964              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2965              		.loc 1 540 113 view .LVU742
 2966 0ddc 4AAA9FED 		vldr.32	s20, .L182+20	@ tmp229,
 2967 0de0 4A8ADFED 		vldr.32	s17, .L182+24	@ tmp230,
 2968              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2969              		.loc 1 525 19 view .LVU743
 2970 0de4 0040A0E3 		mov	r4, #0	@ x,
 2971              	.LVL185:
 2972              	.L161:
 526:armwave.c     ****                 noise *= noise;
 2973              		.loc 1 526 17 is_stmt 1 view .LVU744
 2974              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2975              		.loc 1 526 28 is_stmt 0 view .LVU745
 2976 0de8 FEFFFFEB 		bl	rand		@
 2977              	.LVL186:
 2978              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2979              		.loc 1 526 35 view .LVU746
 2980 0dec 7000FFE6 		uxth	r0, r0	@ tmp201,
 2981              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2982              		.loc 1 526 45 view .LVU747
 2983 0df0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2984 0df4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2985              	@ armwave.c:526:                 noise  = ((rand() & 0xffff) * noise_fraction);
 526:armwave.c     ****                 noise *= noise;
 2986              		.loc 1 526 24 view .LVU748
 2987 0df8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2988              	.LVL187:
 527:armwave.c     ****                 noise *= noise;
 2989              		.loc 1 527 17 is_stmt 1 view .LVU749
 2990              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 2991              		.loc 1 527 23 is_stmt 0 view .LVU750
 2992 0dfc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2993              	.LVL188:
 528:armwave.c     ****                 noise *= noise;
 2994              		.loc 1 528 17 is_stmt 1 view .LVU751
 2995              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2996              		.loc 1 528 23 is_stmt 0 view .LVU752
 2997 0e00 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2998              	.LVL189:
 529:armwave.c     **** 
 2999              		.loc 1 529 17 is_stmt 1 view .LVU753
 3000              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     **** 
 3001              		.loc 1 529 23 is_stmt 0 view .LVU754
 3002 0e04 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3003              	.LVL190:
 531:armwave.c     ****                     noise = -noise;
 3004              		.loc 1 531 17 is_stmt 1 view .LVU755
 3005              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 3006              		.loc 1 531 21 is_stmt 0 view .LVU756
 3007 0e08 FEFFFFEB 		bl	rand		@
 3008              	.LVL191:
 532:armwave.c     **** 
 3009              		.loc 1 532 21 is_stmt 1 view .LVU757
 3010              	@ armwave.c:531:                 if((rand() & 0xffff) > 0x7fff)
 531:armwave.c     ****                     noise = -noise;
 3011              		.loc 1 531 19 is_stmt 0 view .LVU758
 3012 0e0c 020910E3 		tst	r0, #32768	@,
 3013              	@ armwave.c:532:                     noise = -noise;
 532:armwave.c     **** 
 3014              		.loc 1 532 27 view .LVU759
 3015 0e10 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3016              	.LVL192:
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3017              		.loc 1 534 17 is_stmt 1 view .LVU760
 535:armwave.c     **** 
 3018              		.loc 1 535 17 view .LVU761
 3019              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3020              		.loc 1 535 27 is_stmt 0 view .LVU762
 3021 0e14 FEFFFFEB 		bl	rand		@
 3022              	.LVL193:
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3023              		.loc 1 537 17 is_stmt 1 view .LVU763
 3024              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3025              		.loc 1 537 45 is_stmt 0 view .LVU764
 3026 0e18 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3027              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3028              		.loc 1 537 33 view .LVU765
 3029 0e1c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3030              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3031              		.loc 1 537 45 view .LVU766
 3032 0e20 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3033              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3034              		.loc 1 537 33 view .LVU767
 3035 0e24 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3036              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3037              		.loc 1 537 45 view .LVU768
 3038 0e28 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3039              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3040              		.loc 1 537 33 view .LVU769
 3041 0e2c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3042              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3043              		.loc 1 535 34 view .LVU770
 3044 0e30 7000FFE6 		uxth	r0, r0	@ tmp214,
 3045              	.LVL194:
 3046              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3047              		.loc 1 535 44 view .LVU771
 3048 0e34 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3049 0e38 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3050              	@ armwave.c:535:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 535:armwave.c     **** 
 3051              		.loc 1 535 24 view .LVU772
 3052 0e3c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3053              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3054              		.loc 1 537 77 view .LVU773
 3055 0e40 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3056              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3057              		.loc 1 537 22 view .LVU774
 3058 0e44 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3059 0e48 FEFFFFEB 		bl	sin		@
 3060              	.LVL195:
 3061              		.loc 1 540 17 is_stmt 1 view .LVU775
 3062              	@ armwave.c:534:                 noise += 1.0f;
 534:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3063              		.loc 1 534 23 is_stmt 0 view .LVU776
 3064 0e4c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3065              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3066              		.loc 1 540 104 view .LVU777
 3067 0e50 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 3068              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3069              		.loc 1 537 98 view .LVU778
 3070 0e54 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3071              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3072              		.loc 1 537 87 view .LVU779
 3073 0e58 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3074              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3075              		.loc 1 537 98 view .LVU780
 3076 0e5c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3077              	@ armwave.c:537:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 537:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3078              		.loc 1 537 19 view .LVU781
 3079 0e60 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3080              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3081              		.loc 1 540 113 view .LVU782
 3082 0e64 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3083 0e68 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3084 0e6c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3085 0e70 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3086 0e74 050000DA 		ble	.L158		@,
 3087              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3088              		.loc 1 540 104 discriminator 1 view .LVU783
 3089 0e78 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3090 0e7c FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 3091 0e80 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3092 0e84 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3093 0e88 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3094 0e8c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 3095              	.L158:
 3096              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3097              		.loc 1 540 57 discriminator 12 view .LVU784
 3098 0e90 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3099              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3100              		.loc 1 540 102 discriminator 12 view .LVU785
 3101 0e94 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3102 0e98 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3103 0e9c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3104              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3105              		.loc 1 525 58 discriminator 12 view .LVU786
 3106 0ea0 014084E2 		add	r4, r4, #1	@ x, x,
 3107              	.LVL196:
 3108              	@ armwave.c:540:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3109              		.loc 1 540 102 discriminator 12 view .LVU787
 3110 0ea4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 3111              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3112              		.loc 1 525 43 discriminator 12 view .LVU788
 3113 0ea8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3114              	@ armwave.c:525:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 525:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3115              		.loc 1 525 13 discriminator 12 view .LVU789
 3116 0eac 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3117 0eb0 CCFFFFCA 		bgt	.L161		@,
 3118 0eb4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3119              	.LVL197:
 3120              	.L156:
 3121              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3122              		.loc 1 521 48 discriminator 2 view .LVU790
 3123 0eb8 016086E2 		add	r6, r6, #1	@ w, w,
 3124              	.LVL198:
 3125              	@ armwave.c:521:         for(w = 0; w < g_armwave_state.waves; w++) {
 521:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3126              		.loc 1 521 9 discriminator 2 view .LVU791
 3127 0ebc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3128 0ec0 BEFFFFBA 		blt	.L162		@,
 3129              	.LVL199:
 3130              	.L155:
 541:armwave.c     ****             }
 542:armwave.c     ****         }
 543:armwave.c     **** 
 544:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3131              		.loc 1 544 9 is_stmt 1 discriminator 2 view .LVU792
 3132              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3133              		.loc 1 544 46 is_stmt 0 discriminator 2 view .LVU793
 3134 0ec4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3135              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3136              		.loc 1 518 27 discriminator 2 view .LVU794
 3137 0ec8 018088E2 		add	r8, r8, #1	@ s, s,
 3138              	.LVL200:
 3139              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3140              		.loc 1 518 5 discriminator 2 view .LVU795
 3141 0ecc 080059E1 		cmp	r9, r8	@ sets, s
 3142              	@ armwave.c:544:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3143              		.loc 1 544 20 discriminator 2 view .LVU796
 3144 0ed0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3145              	.LVL201:
 3146              	@ armwave.c:518:     for(s = 0; s < sets; s++) {
 518:armwave.c     ****         printf("Calculating test set %d\n", s);
 3147              		.loc 1 518 5 discriminator 2 view .LVU797
 3148 0ed4 AEFFFF1A 		bne	.L154		@,
 3149              	.LVL202:
 3150              	.L151:
 3151              	@ armwave.c:546: }
 545:armwave.c     ****     }
 546:armwave.c     **** }
 3152              		.loc 1 546 1 view .LVU798
 3153 0ed8 08D08DE2 		add	sp, sp, #8	@,,
 3154              		.cfi_remember_state
 3155              		.cfi_def_cfa_offset 80
 3156              		@ sp needed	@
 3157 0edc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3158              		.cfi_restore 90
 3159              		.cfi_restore 91
 3160              		.cfi_restore 88
 3161              		.cfi_restore 89
 3162              		.cfi_restore 86
 3163              		.cfi_restore 87
 3164              		.cfi_restore 84
 3165              		.cfi_restore 85
 3166              		.cfi_restore 82
 3167              		.cfi_restore 83
 3168              		.cfi_restore 80
 3169              		.cfi_restore 81
 3170              		.cfi_def_cfa_offset 32
 3171              	.LVL203:
 3172              		.loc 1 546 1 view .LVU799
 3173 0ee0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3174              	.LVL204:
 3175              	.L181:
 3176              		.cfi_restore_state
 3177              	.LBB46:
 3178              	.LBB43:
 466:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3179              		.loc 1 466 9 is_stmt 1 view .LVU800
 3180 0ee4 940901E0 		mul	r1, r4, r9	@, _85, sets
 3181 0ee8 0920A0E1 		mov	r2, r9	@, sets
 3182 0eec 28009FE5 		ldr	r0, .L182+36	@,
 3183 0ef0 FEFFFFEB 		bl	printf		@
 3184              	.LVL205:
 468:armwave.c     ****     }
 3185              		.loc 1 468 9 view .LVU801
 3186 0ef4 9FFFFFEA 		b	.L153		@
 3187              	.L183:
 3188              		.align	2
 3189              	.L182:
 3190 0ef8 0000803F 		.word	1065353216
 3191 0efc 00007F43 		.word	1132396544
 3192 0f00 0000003F 		.word	1056964608
 3193 0f04 C3F5C840 		.word	1086911939
 3194 0f08 38FFC74A 		.word	1254620984
 3195 0f0c 0000FE42 		.word	1123942400
 3196 0f10 00000043 		.word	1124073472
 3197 0f14 00000000 		.word	g_armwave_state
 3198 0f18 4C030000 		.word	.LC24
 3199 0f1c A4020000 		.word	.LC22
 3200              	.LBE43:
 3201              	.LBE46:
 3202              		.cfi_endproc
 3203              	.LFE75:
 3205              		.align	2
 3206              		.global	armwave_cleanup
 3207              		.syntax unified
 3208              		.arm
 3209              		.fpu vfp
 3211              	armwave_cleanup:
 3212              	.LFB76:
 547:armwave.c     **** 
 548:armwave.c     **** /*
 549:armwave.c     ****  * Make a test square waveform.
 550:armwave.c     ****  *
 551:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 552:armwave.c     ****  */
 553:armwave.c     **** #if 0
 554:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 555:armwave.c     **** {
 556:armwave.c     ****     uint8_t v;
 557:armwave.c     ****     float noise, xnoise;
 558:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 559:armwave.c     ****     int w, x;
 560:armwave.c     **** 
 561:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 562:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 563:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     **** 
 568:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 569:armwave.c     ****                 noise = -noise;
 570:armwave.c     **** 
 571:armwave.c     ****             //noise += 1.0f;
 572:armwave.c     **** 
 573:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 574:armwave.c     ****                 new_level = 0.2f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 576:armwave.c     ****                 new_level = 0.8f;
 577:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 578:armwave.c     ****                 new_level = 0.2f;
 579:armwave.c     ****             } else {
 580:armwave.c     ****                 new_level = 0.8f;
 581:armwave.c     ****             }
 582:armwave.c     **** 
 583:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 584:armwave.c     **** 
 585:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 586:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 587:armwave.c     ****         }
 588:armwave.c     ****     }
 589:armwave.c     **** }
 590:armwave.c     **** #endif
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_cleanup()
 596:armwave.c     **** {
 3213              		.loc 1 596 1 view -0
 3214              		.cfi_startproc
 3215              		@ args = 0, pretend = 0, frame = 0
 3216              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3217              		.loc 1 597 5 view .LVU803
 3218              	@ armwave.c:596: {
 596:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3219              		.loc 1 596 1 is_stmt 0 view .LVU804
 3220 0f20 10402DE9 		push	{r4, lr}	@
 3221              		.cfi_def_cfa_offset 8
 3222              		.cfi_offset 4, -8
 3223              		.cfi_offset 14, -4
 3224              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3225              		.loc 1 597 25 view .LVU805
 3226 0f24 34409FE5 		ldr	r4, .L186	@ tmp114,
 3227              	@ armwave.c:597:     free(g_armwave_state.out_pixbuf);
 3228              		.loc 1 597 5 view .LVU806
 3229 0f28 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3230 0f2c FEFFFFEB 		bl	free		@
 3231              	.LVL206:
 598:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3232              		.loc 1 598 5 is_stmt 1 view .LVU807
 3233 0f30 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3234 0f34 FEFFFFEB 		bl	free		@
 3235              	.LVL207:
 599:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3236              		.loc 1 599 5 view .LVU808
 3237 0f38 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3238 0f3c FEFFFFEB 		bl	free		@
 3239              	.LVL208:
 600:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3240              		.loc 1 600 5 view .LVU809
 3241 0f40 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3242 0f44 FEFFFFEB 		bl	free		@
 3243              	.LVL209:
 601:armwave.c     **** 
 602:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3244              		.loc 1 602 5 view .LVU810
 3245              	@ armwave.c:602:     g_armwave_state.out_pixbuf = NULL;
 3246              		.loc 1 602 32 is_stmt 0 view .LVU811
 3247 0f48 0030A0E3 		mov	r3, #0	@ tmp123,
 3248 0f4c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 603:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3249              		.loc 1 603 5 is_stmt 1 view .LVU812
 3250              	@ armwave.c:603:     g_armwave_state.ch1_buffer = NULL;
 3251              		.loc 1 603 32 is_stmt 0 view .LVU813
 3252 0f50 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 604:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3253              		.loc 1 604 5 is_stmt 1 view .LVU814
 3254              	@ armwave.c:604:     g_armwave_state.xcoord_to_xpixel = NULL;
 3255              		.loc 1 604 38 is_stmt 0 view .LVU815
 3256 0f54 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 605:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3257              		.loc 1 605 5 is_stmt 1 view .LVU816
 3258              	@ armwave.c:605:     g_armwave_state.test_wave_buffer = NULL;
 3259              		.loc 1 605 38 is_stmt 0 view .LVU817
 3260 0f58 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3261              	@ armwave.c:606: }
 606:armwave.c     **** }
 3262              		.loc 1 606 1 view .LVU818
 3263 0f5c 1080BDE8 		pop	{r4, pc}	@
 3264              	.L187:
 3265              		.align	2
 3266              	.L186:
 3267 0f60 00000000 		.word	g_armwave_state
 3268              		.cfi_endproc
 3269              	.LFE76:
 3271              		.comm	gamma_table,256,4
 3272              		.comm	g_armwave_state,136,4
 3273              		.section	.rodata
 3274              		.align	2
 3275              		.set	.LANCHOR0,. + 0
 3278              	__PRETTY_FUNCTION__.17126:
 3279 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3279      6176655F 
 3279      73657475 
 3279      705F7265 
 3279      6E646572 
 3280 0015 000000   		.space	3
 3283              	__PRETTY_FUNCTION__.17130:
 3284 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3284      6176655F 
 3284      7365745F 
 3284      77617665 
 3284      5F706F69 
 3285 0031 000000   		.space	3
 3288              	__PRETTY_FUNCTION__.17137:
 3289 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3289      6176655F 
 3289      7365745F 
 3289      77617665 
 3289      5F706F69 
 3290              		.section	.rodata.str1.4,"aMS",%progbits,1
 3291              		.align	2
 3292              	.LC0:
 3293 0000 76302E30 		.ascii	"v0.0.1\000"
 3293      2E3100
 3294 0007 00       		.space	1
 3295              	.LC1:
 3296 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3296      61766520 
 3296      76657273 
 3296      696F6E3A 
 3296      2025730A 
 3297 001d 000000   		.space	3
 3298              	.LC2:
 3299 0020 77625F65 		.ascii	"wb_end=%d\012\000"
 3299      6E643D25 
 3299      640A00
 3300 002b 00       		.space	1
 3301              	.LC3:
 3302 002c 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 3302      75742062 
 3302      75666665 
 3302      723A2030 
 3302      78253038 
 3303 0043 00       		.space	1
 3304              	.LC4:
 3305 0044 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 3305      65742025 
 3305      64206279 
 3305      7465732C 
 3305      206E7069 
 3306 0077 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 3306      38782C20 
 3306      64657374 
 3306      5F627566 
 3306      66657220 
 3307 00a2 0000     		.space	2
 3308              	.LC5:
 3309 00a4 69746572 		.ascii	"iter...\000"
 3309      2E2E2E00 
 3310              	.LC6:
 3311 00ac 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 3311      6F6E6520 
 3311      7061696E 
 3311      74202564 
 3311      20706978 
 3312              	.LC7:
 3313 00c8 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 3313      6176655F 
 3313      67656E65 
 3313      72617465 
 3313      3A20736C 
 3314 00f9 00       		.ascii	"\000"
 3315 00fa 0000     		.space	2
 3316              	.LC8:
 3317 00fc 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3317      20653D25 
 3317      6420773D 
 3317      25642077 
 3317      733D2564 
 3318              	.LC9:
 3319 0128 61726D77 		.ascii	"armwave.c\000"
 3319      6176652E 
 3319      6300
 3320 0132 0000     		.space	2
 3321              	.LC10:
 3322 0134 73746172 		.ascii	"start_point < end_point\000"
 3322      745F706F 
 3322      696E7420 
 3322      3C20656E 
 3322      645F706F 
 3323              	.LC11:
 3324 014c 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3324      7566665F 
 3324      73697A65 
 3324      3D25642C 
 3324      20636D70 
 3325 017f 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3325      5F776964 
 3325      74683D25 
 3325      642C2077 
 3325      6176655F 
 3326 01a9 000000   		.space	3
 3327              	.LC12:
 3328 01ac 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3328      6F632066 
 3328      61696C75 
 3328      72652061 
 3328      6C6C6F63 
 3329 01df 2E636831 		.ascii	".ch1_buffer)\012\000"
 3329      5F627566 
 3329      66657229 
 3329      0A00
 3330 01ed 000000   		.space	3
 3331              	.LC13:
 3332 01f0 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3332      3A203078 
 3332      25303878 
 3332      20307825 
 3332      30387820 
 3333              	.LC14:
 3334 0214 77617665 		.ascii	"wave_buffer != NULL\000"
 3334      5F627566 
 3334      66657220 
 3334      213D204E 
 3334      554C4C00 
 3335              	.LC15:
 3336 0228 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3336      6176655F 
 3336      7365745F 
 3336      77617665 
 3336      5F706F69 
 3337 025b 78636565 		.ascii	"xceeded\000"
 3337      64656400 
 3338 0263 00       		.space	1
 3339              	.LC16:
 3340 0264 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3340      5F627566 
 3340      6665725F 
 3340      70747220 
 3340      213D2030 
 3341 0279 000000   		.space	3
 3342              	.LC17:
 3343 027c 776200   		.ascii	"wb\000"
 3344 027f 00       		.space	1
 3345              	.LC18:
 3346 0280 50330A00 		.ascii	"P3\012\000"
 3347              	.LC19:
 3348 0284 25642025 		.ascii	"%d %d\012\000"
 3348      640A00
 3349 028b 00       		.space	1
 3350              	.LC20:
 3351 028c 3235350A 		.ascii	"255\012\000"
 3351      00
 3352 0291 000000   		.space	3
 3353              	.LC21:
 3354 0294 25336420 		.ascii	"%3d %3d %3d\012\000"
 3354      25336420 
 3354      2533640A 
 3354      00
 3355 02a1 000000   		.space	3
 3356              	.LC22:
 3357 02a4 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3357      6176655F 
 3357      74657374 
 3357      5F627566 
 3357      6665725F 
 3358 02d7 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3358      20627566 
 3358      66657220 
 3358      28256420 
 3358      62797465 
 3359              	.LC23:
 3360 02f8 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3360      6176655F 
 3360      66696C6C 
 3360      5F706978 
 3360      6275665F 
 3361 032b 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3361      20666169 
 3361      6C65642C 
 3361      20726574 
 3361      75726E69 
 3362 034a 0000     		.space	2
 3363              	.LC24:
 3364 034c 43616C63 		.ascii	"Calculating test set %d\012\000"
 3364      756C6174 
 3364      696E6720 
 3364      74657374 
 3364      20736574 
 3365              		.text
 3366              	.Letext0:
 3367              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3368              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3369              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3370              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3371              		.file 7 "/usr/include/stdio.h"
 3372              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3373              		.file 9 "/usr/include/errno.h"
 3374              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3375              		.file 11 "/usr/include/unistd.h"
 3376              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3377              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3378              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3379              		.file 15 "/usr/include/math.h"
 3380              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3381              		.file 17 "/usr/include/time.h"
 3382              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3383              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3384              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3385              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3386              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3387              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3388              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3389              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3390              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3391              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3392              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3393              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3394              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3395              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3396              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3397              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3398              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3399              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3400              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3401              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3402              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3403              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3404              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3405              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3406              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3407              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3408              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3409              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3410              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3411              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3412              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3413              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3414              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3415              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3416              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3417              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3418              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3419              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3420              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3421              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3422              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3423              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3424              		.file 60 "/usr/local/include/python3.8/context.h"
 3425              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3426              		.file 62 "/usr/local/include/python3.8/code.h"
 3427              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3428              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3429              		.file 65 "/usr/local/include/python3.8/import.h"
 3430              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3431              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3432              		.file 68 "/usr/include/malloc.h"
 3433              		.file 69 "armwave.h"
 3434              		.file 70 "/usr/include/stdlib.h"
 3435              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3436              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3437              		.file 73 "<built-in>"
 3438              		.file 74 "/usr/include/assert.h"
