   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 48
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 00329FE5 		ldr	r3, .L27	@ tmp205,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 34D04DE2 		sub	sp, sp, #52	@,,
 252              		.cfi_def_cfa_offset 88
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 242093E5 		ldr	r2, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0140A0E1 		mov	r4, r1	@ height, height
 259 00b0 10108DE5 		str	r1, [sp, #16]	@ height, %sfp
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 65 view .LVU35
 262 00b4 900201E0 		mul	r1, r0, r2	@ tmp208, slice_y, _2
 263              	.LVL7:
 264              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 265              		.loc 1 79 35 view .LVU36
 266 00b8 38C093E5 		ldr	ip, [r3, #56]	@ _93, g_armwave_state.waves
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 268              		.loc 1 71 147 view .LVU37
 269 00bc 40B093E5 		ldr	fp, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 270              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 271              		.loc 1 71 105 view .LVU38
 272 00c0 2118A0E1 		lsr	r1, r1, #16	@ tmp209, tmp208,
 273              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 274              		.loc 1 79 5 view .LVU39
 275 00c4 00005CE3 		cmp	ip, #0	@ _93,
 276              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 277              		.loc 1 79 35 view .LVU40
 278 00c8 20C08DE5 		str	ip, [sp, #32]	@ _93, %sfp
 279              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 280              		.loc 1 71 40 view .LVU41
 281 00cc 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 9B010AE0 		mul	r10, fp, r1	@ _7, _6, tmp209
 285              	.LVL8:
 286              		.loc 1 79 5 is_stmt 1 view .LVU43
 287              		.loc 1 79 5 is_stmt 0 view .LVU44
 288 00d4 700000DA 		ble	.L11		@,
 289              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 290              		.loc 1 80 36 view .LVU45
 291 00d8 141093E5 		ldr	r1, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 292              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 293              		.loc 1 80 81 view .LVU46
 294 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 295 00e0 000054E3 		cmp	r4, #0	@ height,
 296 00e4 24308DE5 		str	r3, [sp, #36]	@ _9, %sfp
 297 00e8 6B00000A 		beq	.L11		@,
 298 00ec 82CF62E0 		rsb	ip, r2, r2, lsl #31	@ tmp219, _2, _2,
 299 00f0 003081E0 		add	r3, r1, r0	@ tmp213, _8, slice_y
 300 00f4 000063E2 		rsb	r0, r3, #0	@ ivtmp.47, tmp213
 301              	.LVL9:
 302              		.loc 1 80 81 view .LVU47
 303 00f8 8210A0E1 		lsl	r1, r2, #1	@ tmp215, _2,
 304 00fc 18308DE5 		str	r3, [sp, #24]	@ tmp213, %sfp
 305 0100 8C30A0E1 		lsl	r3, ip, #1	@ tmp220, tmp219,
 306 0104 14308DE5 		str	r3, [sp, #20]	@ tmp220, %sfp
 307 0108 023081E0 		add	r3, r1, r2	@ ivtmp.41, tmp215, _2
 308 010c 28308DE5 		str	r3, [sp, #40]	@ ivtmp.41, %sfp
 309 0110 0231A0E1 		lsl	r3, r2, #2	@ _186, _2,
 310 0114 00308DE5 		str	r3, [sp]	@ _186, %sfp
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 312              		.loc 1 79 11 view .LVU48
 313 0118 0030A0E3 		mov	r3, #0	@ w,
 314 011c 2C108DE5 		str	r1, [sp, #44]	@ tmp215, %sfp
 315 0120 0C008DE5 		str	r0, [sp, #12]	@ ivtmp.47, %sfp
 316 0124 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 317              	.LVL10:
 318              	.L19:
 319              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 320              		.loc 1 84 9 view .LVU50
 321              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 322              		.loc 1 79 11 is_stmt 0 view .LVU51
 323 0128 2C609DE5 		ldr	r6, [sp, #44]	@ ivtmp.42, %sfp
 324 012c 28909DE5 		ldr	r9, [sp, #40]	@ ivtmp.41, %sfp
 325 0130 18809DE5 		ldr	r8, [sp, #24]	@ ivtmp.48, %sfp
 326              	.LVL11:
 327              	.L14:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 87 13 is_stmt 1 view .LVU52
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 101 17 view .LVU53
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 106 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 101 17 view .LVU55
 332              		.loc 1 106 17 view .LVU56
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 101 17 view .LVU57
 334              		.loc 1 106 17 view .LVU58
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 101 17 view .LVU59
 336              		.loc 1 106 17 view .LVU60
 337              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 338              		.loc 1 102 34 is_stmt 0 view .LVU61
 339 0134 14209DE5 		ldr	r2, [sp, #20]	@ tmp220, %sfp
 340              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 341              		.loc 1 102 74 view .LVU62
 342 0138 2908A0E1 		lsr	r0, r9, #16	@ tmp277, ivtmp.41,
 343              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 344              		.loc 1 102 34 view .LVU63
 345 013c 023086E0 		add	r3, r6, r2	@ tmp228, ivtmp.42, tmp220
 346              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 347              		.loc 1 102 74 view .LVU64
 348 0140 04008DE5 		str	r0, [sp, #4]	@ tmp277, %sfp
 349 0144 2338A0E1 		lsr	r3, r3, #16	@ tmp229, tmp228,
 350              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 351              		.loc 1 87 18 view .LVU65
 352 0148 040098E4 		ldr	r0, [r8], #4	@ word, MEM[base: _182, offset: 0B]
 353              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 355              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 356              		.loc 1 94 17 view .LVU68
 357              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 358              		.loc 1 106 47 is_stmt 0 view .LVU69
 359 014c 9BA323E0 		mla	r3, fp, r3, r10	@ tmp231, _6, tmp229, _7
 360              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 361              		.loc 1 94 20 view .LVU70
 362 0150 FF7010E2 		ands	r7, r0, #255	@ scale_value, word,
 363              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 364              		.loc 1 102 34 view .LVU71
 365 0154 021089E0 		add	r1, r9, r2	@ tmp245, ivtmp.41, tmp220
 366              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 367              		.loc 1 94 20 view .LVU72
 368 0158 0150A003 		moveq	r5, #1	@ tmp222,
 369 015c 0050A013 		movne	r5, #0	@ tmp222,
 370 0160 00C09DE5 		ldr	ip, [sp]	@ _186, %sfp
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 372              		.loc 1 106 47 view .LVU73
 373 0164 073083E0 		add	r3, r3, r7	@ tmp232, tmp231, scale_value
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 19 view .LVU74
 376 0168 FF0057E3 		cmp	r7, #255	@ scale_value,
 377 016c 01508503 		orreq	r5, r5, #1	@,, tmp227, tmp222
 378              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 379              		.loc 1 102 74 view .LVU75
 380 0170 2628A0E1 		lsr	r2, r6, #16	@ tmp262, ivtmp.42,
 381 0174 2118A0E1 		lsr	r1, r1, #16	@ tmp246, tmp245,
 382              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 383              		.loc 1 84 9 view .LVU76
 384 0178 0C709DE5 		ldr	r7, [sp, #12]	@ ivtmp.47, %sfp
 385              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 386              		.loc 1 94 19 view .LVU77
 387 017c 000055E3 		cmp	r5, #0	@ tmp227,
 388 0180 0C9089E0 		add	r9, r9, ip	@ ivtmp.41, ivtmp.41, _186
 389              	.LVL13:
 390              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 391              		.loc 1 106 47 view .LVU78
 392 0184 9BA121E0 		mla	r1, fp, r1, r10	@ tmp248, _6, tmp246, _7
 393 0188 9BA222E0 		mla	r2, fp, r2, r10	@ tmp264, _6, tmp262, _7
 394              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 395              		.loc 1 107 22 view .LVU79
 396 018c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 397              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 398              		.loc 1 106 47 view .LVU80
 399 0190 8330A0E1 		lsl	r3, r3, #1	@ tmp233, tmp232,
 400              	@ armwave.c:107:                 word >>= 8;
 401              		.loc 1 107 22 view .LVU81
 402 0194 20C8A0E1 		lsr	ip, r0, #16	@ word, word,
 403              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 404              		.loc 1 84 9 view .LVU82
 405 0198 077088E0 		add	r7, r8, r7	@ tmp285, ivtmp.40, ivtmp.47
 406              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 407              		.loc 1 94 19 view .LVU83
 408 019c 2C00001A 		bne	.L20		@,
 409              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 410              		.loc 1 94 20 view .LVU84
 411 01a0 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 412              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 413              		.loc 1 106 47 view .LVU85
 414 01a4 0450A0E1 		mov	r5, r4	@ scale_value, scale_value
 415 01a8 041081E0 		add	r1, r1, r4	@ tmp249, tmp248, scale_value
 416 01ac B3409EE1 		ldrh	r4, [lr, r3]	@ *_75, *_75
 417 01b0 8110A0E1 		lsl	r1, r1, #1	@ tmp250, tmp249,
 418 01b4 08408DE5 		str	r4, [sp, #8]	@ *_75, %sfp
 419              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 420              		.loc 1 94 20 view .LVU86
 421 01b8 0140A003 		moveq	r4, #1	@ tmp239,
 422 01bc 0040A013 		movne	r4, #0	@ tmp239,
 423              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 424              		.loc 1 94 19 view .LVU87
 425 01c0 FF0055E3 		cmp	r5, #255	@ scale_value,
 426 01c4 01408403 		orreq	r4, r4, #1	@,, tmp239, tmp239
 427 01c8 000054E3 		cmp	r4, #0	@ tmp244,
 428              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 429              		.loc 1 106 47 view .LVU88
 430 01cc 08409DE5 		ldr	r4, [sp, #8]	@ *_75, %sfp
 431 01d0 015084E2 		add	r5, r4, #1	@ tmp236, *_75,
 432 01d4 B3508EE1 		strh	r5, [lr, r3]	@ movhi	@ tmp236, *_75
 433              		.loc 1 107 17 is_stmt 1 view .LVU89
 434              	.LVL14:
  91:armwave.c     ****                 
 435              		.loc 1 91 17 view .LVU90
  94:armwave.c     ****                     continue;
 436              		.loc 1 94 17 view .LVU91
 437              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 438              		.loc 1 94 19 is_stmt 0 view .LVU92
 439 01d8 1D00001A 		bne	.L20		@,
 440              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 441              		.loc 1 94 20 view .LVU93
 442 01dc FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 443              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 444              		.loc 1 106 47 view .LVU94
 445 01e0 B1309EE1 		ldrh	r3, [lr, r1]	@ *_104, *_104
 446              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 447              		.loc 1 94 20 view .LVU95
 448 01e4 0140A003 		moveq	r4, #1	@ tmp256,
 449 01e8 0040A013 		movne	r4, #0	@ tmp256,
 450              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 451              		.loc 1 106 47 view .LVU96
 452 01ec 0C2082E0 		add	r2, r2, ip	@ tmp265, tmp264, scale_value
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 view .LVU97
 455 01f0 FF005CE3 		cmp	ip, #255	@ scale_value,
 456 01f4 04C0A011 		movne	ip, r4	@, tmp261, tmp256
 457 01f8 01C08403 		orreq	ip, r4, #1	@,, tmp261, tmp256
 458              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 459              		.loc 1 106 47 view .LVU98
 460 01fc 013083E2 		add	r3, r3, #1	@ tmp253, *_104,
 461              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 462              		.loc 1 94 19 view .LVU99
 463 0200 00005CE3 		cmp	ip, #0	@ tmp261,
 464              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 465              		.loc 1 106 47 view .LVU100
 466 0204 8220A0E1 		lsl	r2, r2, #1	@ tmp266, tmp265,
 467 0208 B1308EE1 		strh	r3, [lr, r1]	@ movhi	@ tmp253, *_104
 468              		.loc 1 107 17 is_stmt 1 view .LVU101
 469              	.LVL15:
  91:armwave.c     ****                 
 470              		.loc 1 91 17 view .LVU102
  94:armwave.c     ****                     continue;
 471              		.loc 1 94 17 view .LVU103
 472              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 473              		.loc 1 94 19 is_stmt 0 view .LVU104
 474 020c 1000001A 		bne	.L20		@,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU105
 477 0210 04309DE5 		ldr	r3, [sp, #4]	@ tmp277, %sfp
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU106
 480 0214 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 481              	.LVL16:
 482              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 483              		.loc 1 106 47 view .LVU107
 484 0218 B2109EE1 		ldrh	r1, [lr, r2]	@ *_133, *_133
 485 021c 9B0323E0 		mla	r3, fp, r3, r0	@ tmp279, _6, tmp277, word
 486              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 487              		.loc 1 94 20 view .LVU108
 488 0220 01C0A003 		moveq	ip, #1	@ tmp271,
 489 0224 00C0A013 		movne	ip, #0	@ tmp271,
 490              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 491              		.loc 1 106 47 view .LVU109
 492 0228 0A3083E0 		add	r3, r3, r10	@ tmp280, tmp279, _7
 493              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 494              		.loc 1 94 19 view .LVU110
 495 022c FF0050E3 		cmp	r0, #255	@ word,
 496 0230 0C00A011 		movne	r0, ip	@, tmp276, tmp271
 497 0234 01008C03 		orreq	r0, ip, #1	@,, tmp276, tmp271
 498 0238 000050E3 		cmp	r0, #0	@ tmp276,
 499              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 500              		.loc 1 106 47 view .LVU111
 501 023c 8330A0E1 		lsl	r3, r3, #1	@ tmp281, tmp280,
 502 0240 011081E2 		add	r1, r1, #1	@ tmp269, *_133,
 503 0244 B2108EE1 		strh	r1, [lr, r2]	@ movhi	@ tmp269, *_133
 504              		.loc 1 107 17 is_stmt 1 view .LVU112
 505              	.LVL17:
  91:armwave.c     ****                 
 506              		.loc 1 91 17 view .LVU113
  94:armwave.c     ****                     continue;
 507              		.loc 1 94 17 view .LVU114
 508              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 509              		.loc 1 106 47 is_stmt 0 view .LVU115
 510 0248 B3209E01 		ldrheq	r2, [lr, r3]	@ *_162, *_162
 511 024c 01208202 		addeq	r2, r2, #1	@ tmp284, *_162,
 512 0250 B3208E01 		strheq	r2, [lr, r3]	@ movhi	@ tmp284, *_162
 513              		.loc 1 107 17 is_stmt 1 view .LVU116
 514              	.LVL18:
 515              	.L20:
 516              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 517              		.loc 1 84 9 is_stmt 0 view .LVU117
 518 0254 10309DE5 		ldr	r3, [sp, #16]	@ height, %sfp
 519 0258 070053E1 		cmp	r3, r7	@ height, tmp285
 520 025c 00309DE5 		ldr	r3, [sp]	@ _186, %sfp
 521 0260 036086E0 		add	r6, r6, r3	@ ivtmp.42, ivtmp.42, _186
 522 0264 B2FFFF8A 		bhi	.L14		@,
 523              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 524              		.loc 1 79 44 view .LVU118
 525 0268 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 526              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 527              		.loc 1 79 5 view .LVU119
 528 026c 20209DE5 		ldr	r2, [sp, #32]	@ _93, %sfp
 529              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 530              		.loc 1 79 44 view .LVU120
 531 0270 013083E2 		add	r3, r3, #1	@ w, w,
 532              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 79 5 view .LVU121
 534 0274 020053E1 		cmp	r3, r2	@ w, _93
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU122
 537 0278 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 538              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 44 view .LVU123
 540 027c 0C209DE5 		ldr	r2, [sp, #12]	@ ivtmp.47, %sfp
 541 0280 24309DE5 		ldr	r3, [sp, #36]	@ _9, %sfp
 542              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 543              		.loc 1 79 44 view .LVU124
 544 0284 032042E0 		sub	r2, r2, r3	@ ivtmp.47, ivtmp.47, _9
 545 0288 0C208DE5 		str	r2, [sp, #12]	@ ivtmp.47, %sfp
 546 028c 18209DE5 		ldr	r2, [sp, #24]	@ ivtmp.48, %sfp
 547 0290 033082E0 		add	r3, r2, r3	@ ivtmp.48, ivtmp.48, _9
 548 0294 18308DE5 		str	r3, [sp, #24]	@ ivtmp.48, %sfp
 549              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 550              		.loc 1 79 5 view .LVU125
 551 0298 A2FFFF1A 		bne	.L19		@,
 552              	.LVL21:
 553              	.L11:
 554              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 555              		.loc 1 111 1 view .LVU126
 556 029c 34D08DE2 		add	sp, sp, #52	@,,
 557              		.cfi_def_cfa_offset 36
 558              		@ sp needed	@
 559 02a0 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 560              	.LVL22:
 561              	.L28:
 562              		.loc 1 111 1 view .LVU127
 563              		.align	2
 564              	.L27:
 565 02a4 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL23:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 115:armwave.c     ****  * Rows are repeated as necessary.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 118:armwave.c     **** {
 578              		.loc 1 118 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 119 5 view .LVU129
 120:armwave.c     ****     // uint32_t ysub;
 121:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 121 5 view .LVU130
 122:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 122 5 view .LVU131
 123:armwave.c     ****     // uint8_t row;
 124:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 124 5 view .LVU132
 125:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 125 5 view .LVU133
 126:armwave.c     ****     uint32_t offset;
 587              		.loc 1 126 5 view .LVU134
 127:armwave.c     **** 
 128:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 128 5 view .LVU135
 589              	@ armwave.c:118: {
 118:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 118 1 is_stmt 0 view .LVU136
 591 02a8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 592              		.cfi_def_cfa_offset 32
 593              		.cfi_offset 4, -32
 594              		.cfi_offset 5, -28
 595              		.cfi_offset 6, -24
 596              		.cfi_offset 7, -20
 597              		.cfi_offset 8, -16
 598              		.cfi_offset 9, -12
 599              		.cfi_offset 10, -8
 600              		.cfi_offset 14, -4
 601              	@ armwave.c:128:     assert(out_buffer != NULL);
 602              		.loc 1 128 5 view .LVU137
 603 02ac 005050E2 		subs	r5, r0, #0	@ out_buffer, out_buffer
 604 02b0 4400000A 		beq	.L41		@,
 129:armwave.c     **** 
 130:armwave.c     ****     // we don't really want to be doing this if possible
 131:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 605              		.loc 1 131 5 is_stmt 1 view .LVU138
 606              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 607              		.loc 1 131 45 is_stmt 0 view .LVU139
 608 02b4 20419FE5 		ldr	r4, .L42	@ tmp223,
 609              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 131 5 view .LVU140
 611 02b8 0010A0E3 		mov	r1, #0	@,
 612              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 131 59 view .LVU141
 614 02bc 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 615 02c0 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 616 02c4 920302E0 		mul	r2, r2, r3	@ tmp179, g_armwave_state.target_height, g_armwave_state.target_width
 617              	@ armwave.c:131:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 618              		.loc 1 131 5 view .LVU142
 619 02c8 0221A0E1 		lsl	r2, r2, #2	@, tmp179,
 620 02cc FEFFFFEB 		bl	memset		@
 621              	.LVL24:
 132:armwave.c     **** 
 133:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 133 5 is_stmt 1 view .LVU143
 623              	@ armwave.c:133:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 624              		.loc 1 133 10 is_stmt 0 view .LVU144
 625 02d0 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 626 02d4 406094E5 		ldr	r6, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 627 02d8 960306E0 		mul	r6, r6, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 628              	.LVL25:
 134:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 135:armwave.c     **** 
 136:armwave.c     **** #if 0
 137:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 138:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 139:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 140:armwave.c     ****         // most normal waveforms.
 141:armwave.c     ****         wave_word = *base_32ptr++;
 142:armwave.c     **** 
 143:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 144:armwave.c     ****             for(w = 0; w < 2; w++) {
 145:armwave.c     ****                 value = wave_word & 0xffff;
 146:armwave.c     ****                 wave_word >>= 16;
 147:armwave.c     **** 
 148:armwave.c     ****                 if(value != 0) {
 149:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 150:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 151:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 152:armwave.c     **** 
 153:armwave.c     ****                     r = MIN(rr, 255);
 154:armwave.c     ****                     g = MIN(gg, 255);
 155:armwave.c     ****                     b = MIN(bb, 255);
 156:armwave.c     **** 
 157:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 158:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 159:armwave.c     **** 
 160:armwave.c     ****                     // Plot the pixels
 161:armwave.c     ****                     nsub = n + (w * 2);
 162:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 164:armwave.c     ****                     xx = (nsub >> 8);
 165:armwave.c     **** 
 166:armwave.c     ****                     for(y = yy; y < ye; y++) {
 167:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 168:armwave.c     ****                         *(out_buffer_base + offset) = word;
 169:armwave.c     ****                     }
 170:armwave.c     ****                 }
 171:armwave.c     ****             }
 172:armwave.c     ****         }
 173:armwave.c     ****     }
 174:armwave.c     **** #endif
 175:armwave.c     **** 
 176:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 629              		.loc 1 176 5 is_stmt 1 view .LVU145
 630              		.loc 1 176 5 is_stmt 0 view .LVU146
 631 02dc 000056E3 		cmp	r6, #0	@ npix,
 632 02e0 F087BDD8 		pople	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 633              	@ armwave.c:177:         wave_word = g_armwave_state.ch1_buffer[n];
 177:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 634              		.loc 1 177 36 view .LVU147
 635 02e4 04C094E5 		ldr	ip, [r4, #4]	@ _8, g_armwave_state.ch1_buffer
 636              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 178:armwave.c     ****         value = wave_word & 0xffff;
 179:armwave.c     **** 
 180:armwave.c     ****         if(value != 0) {
 181:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 637              		.loc 1 181 44 view .LVU148
 638 02e8 FC96D4E1 		ldrsh	r9, [r4, #108]	@ _13, g_armwave_state.ch1_color.r
 639 02ec 02C04CE2 		sub	ip, ip, #2	@ ivtmp.55, _8,
 640              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 641              		.loc 1 182 44 view .LVU149
 642 02f0 FE86D4E1 		ldrsh	r8, [r4, #110]	@ _17, g_armwave_state.ch1_color.g
 643              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 644              		.loc 1 183 44 view .LVU150
 645 02f4 F077D4E1 		ldrsh	r7, [r4, #112]	@ _20, g_armwave_state.ch1_color.b
 646              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 184:armwave.c     **** 
 185:armwave.c     ****             r = MIN(rr, 255);
 186:armwave.c     ****             g = MIN(gg, 255);
 187:armwave.c     ****             b = MIN(bb, 255);
 188:armwave.c     **** 
 189:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 190:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 191:armwave.c     **** 
 192:armwave.c     ****             // Plot the pixels
 193:armwave.c     ****             nsub = n;
 194:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 647              		.loc 1 194 49 view .LVU151
 648 02f8 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _35, g_armwave_state.vscale_frac
 649 02fc 86608CE0 		add	r6, ip, r6, lsl #1	@ _117, ivtmp.55, npix,
 650              	.LVL26:
 651              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 652              		.loc 1 176 11 view .LVU152
 653 0300 00E0A0E3 		mov	lr, #0	@ n,
 654 0304 020000EA 		b	.L34		@
 655              	.LVL27:
 656              	.L32:
 657              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 658              		.loc 1 176 5 view .LVU153
 659 0308 06005CE1 		cmp	ip, r6	@ ivtmp.55, _117
 660              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 661              		.loc 1 176 28 view .LVU154
 662 030c 01E08EE2 		add	lr, lr, #1	@ n, n,
 663              	.LVL28:
 664              	@ armwave.c:176:     for(n = 0; n < npix; n += 1) {
 176:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 665              		.loc 1 176 5 view .LVU155
 666 0310 F087BD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 667              	.LVL29:
 668              	.L34:
 177:armwave.c     ****         value = wave_word & 0xffff;
 669              		.loc 1 177 9 is_stmt 1 view .LVU156
 178:armwave.c     **** 
 670              		.loc 1 178 9 view .LVU157
 671              	@ armwave.c:178:         value = wave_word & 0xffff;
 178:armwave.c     **** 
 672              		.loc 1 178 15 is_stmt 0 view .LVU158
 673 0314 B220FCE1 		ldrh	r2, [ip, #2]!	@ MEM[base: _122, offset: 0B], MEM[base: _122, offset: 0B]
 674              	.LVL30:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 675              		.loc 1 180 9 is_stmt 1 view .LVU159
 676              	@ armwave.c:180:         if(value != 0) {
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 677              		.loc 1 180 11 is_stmt 0 view .LVU160
 678 0318 FF2012E2 		ands	r2, r2, #255	@ value, MEM[base: _122, offset: 0B],
 679              	.LVL31:
 180:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 680              		.loc 1 180 11 view .LVU161
 681 031c F9FFFF0A 		beq	.L32		@,
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 682              		.loc 1 181 13 is_stmt 1 view .LVU162
 683              	.LVL32:
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 684              		.loc 1 182 13 view .LVU163
 183:armwave.c     **** 
 685              		.loc 1 183 13 view .LVU164
 185:armwave.c     ****             g = MIN(gg, 255);
 686              		.loc 1 185 13 view .LVU165
 186:armwave.c     ****             b = MIN(bb, 255);
 687              		.loc 1 186 13 view .LVU166
 187:armwave.c     **** 
 688              		.loc 1 187 13 view .LVU167
 190:armwave.c     **** 
 689              		.loc 1 190 13 view .LVU168
 690              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 691              		.loc 1 194 24 is_stmt 0 view .LVU169
 692 0320 7E30EFE6 		uxtb	r3, lr	@ _33, n
 693              	@ armwave.c:195:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 195 33 view .LVU170
 695 0324 011083E2 		add	r1, r3, #1	@ tmp216, _33,
 696              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 697              		.loc 1 194 32 view .LVU171
 698 0328 903A07EE 		vmov	s15, r3	@ int	@ _33, _33
 699              	@ armwave.c:195:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 700              		.loc 1 195 33 view .LVU172
 701 032c 101A07EE 		vmov	s14, r1	@ int	@ tmp216, tmp216
 702              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 703              		.loc 1 183 47 view .LVU173
 704 0330 820761E1 		smulbb	r1, r2, r7	@ tmp201, value, _20
 705              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 706              		.loc 1 182 47 view .LVU174
 707 0334 82086AE1 		smulbb	r10, r2, r8	@ tmp205, value, _17
 708              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 709              		.loc 1 194 32 view .LVU175
 710 0338 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp214, _33
 711              	@ armwave.c:195:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 712              		.loc 1 195 38 view .LVU176
 713 033c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp216
 714              	@ armwave.c:183:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 183:armwave.c     **** 
 715              		.loc 1 183 16 view .LVU177
 716 0340 4114A0E1 		asr	r1, r1, #8	@ bb, tmp201,
 717              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 718              		.loc 1 187 17 view .LVU178
 719 0344 FF0051E3 		cmp	r1, #255	@ bb,
 720              	@ armwave.c:182:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 182:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 721              		.loc 1 182 16 view .LVU179
 722 0348 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp205,
 723              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 724              		.loc 1 181 47 view .LVU180
 725 034c 820962E1 		smulbb	r2, r2, r9	@ tmp211, value, _13
 726              	.LVL33:
 727              	@ armwave.c:187:             b = MIN(bb, 255);
 187:armwave.c     **** 
 728              		.loc 1 187 17 view .LVU181
 729 0350 FF10A0A3 		movge	r1, #255	@ bb,
 730              	@ armwave.c:186:             g = MIN(gg, 255);
 186:armwave.c     ****             b = MIN(bb, 255);
 731              		.loc 1 186 17 view .LVU182
 732 0354 FF005AE3 		cmp	r10, #255	@ gg,
 733              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 734              		.loc 1 194 32 view .LVU183
 735 0358 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp215, tmp214, _35
 736              	@ armwave.c:195:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 737              		.loc 1 195 38 view .LVU184
 738 035c 267A27EE 		vmul.f32	s14, s14, s13	@ tmp218, tmp217, _35
 739              	@ armwave.c:186:             g = MIN(gg, 255);
 186:armwave.c     ****             b = MIN(bb, 255);
 740              		.loc 1 186 17 view .LVU185
 741 0360 FFA0A0A3 		movge	r10, #255	@ gg,
 742              	@ armwave.c:181:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 181:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 743              		.loc 1 181 16 view .LVU186
 744 0364 4224A0E1 		asr	r2, r2, #8	@ rr, tmp211,
 745              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 746              		.loc 1 185 17 view .LVU187
 747 0368 FF0052E3 		cmp	r2, #255	@ rr,
 748              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 749              		.loc 1 190 48 view .LVU188
 750 036c 0AA4A0E1 		lsl	r10, r10, #8	@ tmp206, gg,
 751              	@ armwave.c:185:             r = MIN(rr, 255);
 185:armwave.c     ****             g = MIN(gg, 255);
 752              		.loc 1 185 17 view .LVU189
 753 0370 FF20A0A3 		movge	r2, #255	@ rr,
 754              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 755              		.loc 1 190 36 view .LVU190
 756 0374 0118A0E1 		lsl	r1, r1, #16	@ tmp202, bb,
 757              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 194 16 view .LVU191
 759 0378 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp215
 760              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 761              		.loc 1 190 48 view .LVU192
 762 037c 7AA0FFE6 		uxth	r10, r10	@ tmp207, tmp206
 763              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 764              		.loc 1 190 36 view .LVU193
 765 0380 FF1801E2 		and	r1, r1, #16711680	@ tmp203, tmp202,
 766              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 767              		.loc 1 190 43 view .LVU194
 768 0384 0A1081E1 		orr	r1, r1, r10	@ tmp209, tmp203, tmp207
 769              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 770              		.loc 1 190 54 view .LVU195
 771 0388 7220EFE6 		uxtb	r2, r2	@ rr, rr
 772 038c 021081E1 		orr	r1, r1, r2	@ tmp213, tmp209, rr
 773              	@ armwave.c:190:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 190:armwave.c     **** 
 774              		.loc 1 190 18 view .LVU196
 775 0390 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp213,
 776              	.LVL34:
 193:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 777              		.loc 1 193 13 is_stmt 1 view .LVU197
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 194 13 view .LVU198
 779              	@ armwave.c:196:             xx = (nsub >> 8) / 2;
 196:armwave.c     ****             xx = (nsub >> 8) / 2;
 780              		.loc 1 196 30 is_stmt 0 view .LVU199
 781 0394 CEA4A0E1 		asr	r10, lr, #9	@ xx, n,
 782              	@ armwave.c:194:             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 194:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 783              		.loc 1 194 16 view .LVU200
 784 0398 903A17EE 		vmov	r3, s15	@ int	@ yy, yy
 785              	.LVL35:
 195:armwave.c     ****             xx = (nsub >> 8) / 2;
 786              		.loc 1 195 13 is_stmt 1 view .LVU201
 787              	@ armwave.c:195:             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 195:armwave.c     ****             xx = (nsub >> 8) / 2;
 788              		.loc 1 195 16 is_stmt 0 view .LVU202
 789 039c C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp218
 790 03a0 900A17EE 		vmov	r0, s15	@ int	@ ye, ye
 791              	.LVL36:
 792              		.loc 1 196 13 is_stmt 1 view .LVU203
 197:armwave.c     **** 
 198:armwave.c     ****             for(y = yy; y < ye; y++) {
 793              		.loc 1 198 13 view .LVU204
 794              		.loc 1 198 13 is_stmt 0 view .LVU205
 795 03a4 000053E1 		cmp	r3, r0	@ yy, ye
 796 03a8 D6FFFF2A 		bcs	.L32		@,
 797              	.LVL37:
 798              	.L33:
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 799              		.loc 1 199 17 is_stmt 1 discriminator 3 view .LVU206
 200:armwave.c     ****                 *(out_buffer_base + offset) = word;
 800              		.loc 1 200 17 discriminator 3 view .LVU207
 801              	@ armwave.c:199:                 offset = (xx + (y * g_armwave_state.target_width)); 
 199:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 802              		.loc 1 199 35 is_stmt 0 discriminator 3 view .LVU208
 803 03ac 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 804              	@ armwave.c:200:                 *(out_buffer_base + offset) = word;
 805              		.loc 1 200 35 discriminator 3 view .LVU209
 806 03b0 92A322E0 		mla	r2, r2, r3, r10	@ tmp222, g_armwave_state.target_width, yy, xx
 807              	.LVL38:
 808              	@ armwave.c:198:             for(y = yy; y < ye; y++) {
 198:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 809              		.loc 1 198 34 discriminator 3 view .LVU210
 810 03b4 013083E2 		add	r3, r3, #1	@ yy, yy,
 811              	.LVL39:
 812              	@ armwave.c:198:             for(y = yy; y < ye; y++) {
 198:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 813              		.loc 1 198 13 discriminator 3 view .LVU211
 814 03b8 030050E1 		cmp	r0, r3	@ ye, yy
 815              	@ armwave.c:200:                 *(out_buffer_base + offset) = word;
 816              		.loc 1 200 45 discriminator 3 view .LVU212
 817 03bc 021185E7 		str	r1, [r5, r2, lsl #2]	@ word, *_46
 818              	@ armwave.c:198:             for(y = yy; y < ye; y++) {
 198:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 819              		.loc 1 198 13 discriminator 3 view .LVU213
 820 03c0 F9FFFF1A 		bne	.L33		@,
 198:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 821              		.loc 1 198 13 discriminator 3 view .LVU214
 822 03c4 CFFFFFEA 		b	.L32		@
 823              	.LVL40:
 824              	.L41:
 128:armwave.c     **** 
 825              		.loc 1 128 5 is_stmt 1 discriminator 1 view .LVU215
 826 03c8 10309FE5 		ldr	r3, .L42+4	@,
 827 03cc 8020A0E3 		mov	r2, #128	@,
 828 03d0 0C109FE5 		ldr	r1, .L42+8	@,
 829 03d4 0C009FE5 		ldr	r0, .L42+12	@,
 830              	.LVL41:
 128:armwave.c     **** 
 831              		.loc 1 128 5 is_stmt 0 discriminator 1 view .LVU216
 832 03d8 FEFFFFEB 		bl	__assert_fail		@
 833              	.LVL42:
 834              	.L43:
 128:armwave.c     **** 
 835              		.loc 1 128 5 discriminator 1 view .LVU217
 836              		.align	2
 837              	.L42:
 838 03dc 00000000 		.word	g_armwave_state
 839 03e0 00000000 		.word	.LANCHOR0
 840 03e4 20000000 		.word	.LC2
 841 03e8 2C000000 		.word	.LC3
 842              		.cfi_endproc
 843              	.LFE60:
 845              		.global	__aeabi_idiv
 846              		.align	2
 847              		.global	armwave_generate
 848              		.syntax unified
 849              		.arm
 850              		.fpu vfp
 852              	armwave_generate:
 853              	.LFB61:
 201:armwave.c     ****             }
 202:armwave.c     ****         }
 203:armwave.c     ****     }
 204:armwave.c     **** }
 205:armwave.c     **** 
 206:armwave.c     **** /*
 207:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 208:armwave.c     ****  */
 209:armwave.c     **** void armwave_generate()
 210:armwave.c     **** {
 854              		.loc 1 210 1 is_stmt 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 72
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 211:armwave.c     ****     uint32_t yy;
 858              		.loc 1 211 5 view .LVU219
 212:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 859              		.loc 1 212 5 view .LVU220
 860              	.LVL43:
 213:armwave.c     **** 
 214:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 861              		.loc 1 214 5 view .LVU221
 862              	@ armwave.c:210: {
 210:armwave.c     ****     uint32_t yy;
 863              		.loc 1 210 1 is_stmt 0 view .LVU222
 864 03ec F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 865              		.cfi_def_cfa_offset 36
 866              		.cfi_offset 4, -36
 867              		.cfi_offset 5, -32
 868              		.cfi_offset 6, -28
 869              		.cfi_offset 7, -24
 870              		.cfi_offset 8, -20
 871              		.cfi_offset 9, -16
 872              		.cfi_offset 10, -12
 873              		.cfi_offset 11, -8
 874              		.cfi_offset 14, -4
 875              	@ armwave.c:214:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 876              		.loc 1 214 5 view .LVU223
 877 03f0 0010A0E3 		mov	r1, #0	@,
 878              	@ armwave.c:214:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 879              		.loc 1 214 58 view .LVU224
 880 03f4 90429FE5 		ldr	r4, .L64	@ tmp212,
 881              	@ armwave.c:210: {
 210:armwave.c     ****     uint32_t yy;
 882              		.loc 1 210 1 view .LVU225
 883 03f8 4CD04DE2 		sub	sp, sp, #76	@,,
 884              		.cfi_def_cfa_offset 112
 885              	@ armwave.c:214:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 886              		.loc 1 214 5 view .LVU226
 887 03fc 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 888 0400 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 889 0404 FEFFFFEB 		bl	memset		@
 890              	.LVL44:
 215:armwave.c     **** 
 216:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 891              		.loc 1 216 5 is_stmt 1 view .LVU227
 892              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 893              		.loc 1 216 68 is_stmt 0 view .LVU228
 894 0408 445094E5 		ldr	r5, [r4, #68]	@ _133, g_armwave_state.slice_height
 895              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 896              		.loc 1 216 51 view .LVU229
 897 040c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 898 0410 0510A0E1 		mov	r1, r5	@, _133
 899              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 900              		.loc 1 216 68 view .LVU230
 901 0414 24508DE5 		str	r5, [sp, #36]	@ _133, %sfp
 902              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 903              		.loc 1 216 51 view .LVU231
 904 0418 FEFFFFEB 		bl	__aeabi_idiv		@
 905              	.LVL45:
 906              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 907              		.loc 1 216 5 view .LVU232
 908 041c 003050E2 		subs	r3, r0, #0	@ _179,
 909 0420 40308DE5 		str	r3, [sp, #64]	@ _179, %sfp
 910 0424 9600000A 		beq	.L44		@,
 911              	.LBB10:
 912              	.LBB11:
 913              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 914              		.loc 1 79 35 view .LVU233
 915 0428 383094E5 		ldr	r3, [r4, #56]	@ _38, g_armwave_state.waves
 916              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 917              		.loc 1 80 81 view .LVU234
 918 042c 341094E5 		ldr	r1, [r4, #52]	@ _24, g_armwave_state.wave_stride
 919 0430 000053E3 		cmp	r3, #0	@ _38,
 920              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 921              		.loc 1 79 35 view .LVU235
 922 0434 30308DE5 		str	r3, [sp, #48]	@ _38, %sfp
 923              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 924              		.loc 1 71 40 view .LVU236
 925 0438 048094E5 		ldr	r8, [r4, #4]	@ _16, g_armwave_state.ch1_buffer
 926              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 927              		.loc 1 71 82 view .LVU237
 928 043c 243094E5 		ldr	r3, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 929              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 930              		.loc 1 71 147 view .LVU238
 931 0440 409094E5 		ldr	r9, [r4, #64]	@ _21, g_armwave_state.bitdepth_height
 932              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 933              		.loc 1 80 36 view .LVU239
 934 0444 142094E5 		ldr	r2, [r4, #20]	@ _23, g_armwave_state.wave_buffer
 935              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 936              		.loc 1 80 81 view .LVU240
 937 0448 2C108DE5 		str	r1, [sp, #44]	@ _24, %sfp
 938 044c 8C0000DA 		ble	.L44		@,
 939 0450 000055E3 		cmp	r5, #0	@ _133,
 940 0454 8A00000A 		beq	.L44		@,
 941 0458 930500E0 		mul	r0, r3, r5	@ _185, _17, _133
 942 045c 831F63E0 		rsb	r1, r3, r3, lsl #31	@ tmp235, _17, _17,
 943 0460 10208DE5 		str	r2, [sp, #16]	@ ivtmp.75, %sfp
 944 0464 002062E2 		rsb	r2, r2, #0	@ ivtmp.74, ivtmp.75
 945 0468 44008DE5 		str	r0, [sp, #68]	@ _185, %sfp
 946 046c 14208DE5 		str	r2, [sp, #20]	@ ivtmp.74, %sfp
 947 0470 8300A0E1 		lsl	r0, r3, #1	@ tmp231, _17,
 948 0474 8120A0E1 		lsl	r2, r1, #1	@ tmp236, tmp235,
 949 0478 09B0A0E1 		mov	fp, r9	@ _21, _21
 950 047c 00C0A0E3 		mov	ip, #0	@ ivtmp.73,
 951 0480 3C208DE5 		str	r2, [sp, #60]	@ tmp236, %sfp
 952 0484 032080E0 		add	r2, r0, r3	@ ivtmp.63, tmp231, _17
 953 0488 0331A0E1 		lsl	r3, r3, #2	@ _208, _17,
 954 048c 38008DE5 		str	r0, [sp, #56]	@ tmp231, %sfp
 955 0490 18C08DE5 		str	ip, [sp, #24]	@ ivtmp.73, %sfp
 956 0494 34208DE5 		str	r2, [sp, #52]	@ ivtmp.63, %sfp
 957              	.LBE11:
 958              	.LBE10:
 959              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 960              		.loc 1 216 12 view .LVU241
 961 0498 28C08DE5 		str	ip, [sp, #40]	@ ivtmp.73, %sfp
 962 049c 1C308DE5 		str	r3, [sp, #28]	@ _208, %sfp
 963              	.LVL46:
 964              	.L50:
 217:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 218:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 219:armwave.c     **** 
 220:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 965              		.loc 1 220 9 is_stmt 1 discriminator 3 view .LVU242
 966              	.LBB13:
 967              	.LBI10:
  62:armwave.c     **** {
 968              		.loc 1 62 6 discriminator 3 view .LVU243
 969              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 970              		.loc 1 64 5 discriminator 3 view .LVU244
  65:armwave.c     ****     uint8_t *wave_base;
 971              		.loc 1 65 5 discriminator 3 view .LVU245
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 972              		.loc 1 66 5 discriminator 3 view .LVU246
  67:armwave.c     ****     bufftyp_t *write_buffer;
 973              		.loc 1 67 5 discriminator 3 view .LVU247
  68:armwave.c     **** 
 974              		.loc 1 68 5 discriminator 3 view .LVU248
  71:armwave.c     **** 
 975              		.loc 1 71 5 discriminator 3 view .LVU249
 976              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 977              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU250
 978 04a0 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.73, %sfp
 979              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 980              		.loc 1 71 130 discriminator 3 view .LVU251
 981 04a4 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.75, %sfp
 982              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 983              		.loc 1 71 105 discriminator 3 view .LVU252
 984 04a8 2338A0E1 		lsr	r3, r3, #16	@ tmp237, ivtmp.73,
 985              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 986              		.loc 1 71 130 discriminator 3 view .LVU253
 987 04ac 00208DE5 		str	r2, [sp]	@ ivtmp.75, %sfp
 988 04b0 9B0307E0 		mul	r7, fp, r3	@ _22, _21, tmp237
 989              	.LVL47:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 990              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU254
 991              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 992              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU255
 993 04b4 14309DE5 		ldr	r3, [sp, #20]	@ ivtmp.74, %sfp
 994 04b8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.74, %sfp
 995              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 996              		.loc 1 79 11 discriminator 3 view .LVU256
 997 04bc 0030A0E3 		mov	r3, #0	@ w,
 998 04c0 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 999              	.LVL48:
 1000              	.L47:
  80:armwave.c     **** 
 1001              		.loc 1 80 9 is_stmt 1 view .LVU257
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1002              		.loc 1 84 9 view .LVU258
 1003              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1004              		.loc 1 79 11 is_stmt 0 view .LVU259
 1005 04c4 38509DE5 		ldr	r5, [sp, #56]	@ ivtmp.64, %sfp
 1006 04c8 34A09DE5 		ldr	r10, [sp, #52]	@ ivtmp.63, %sfp
 1007 04cc 00309DE5 		ldr	r3, [sp]	@ ivtmp.70, %sfp
 1008 04d0 08308DE5 		str	r3, [sp, #8]	@ ivtmp.70, %sfp
 1009              	.LVL49:
 1010              	.L49:
  87:armwave.c     **** 
 1011              		.loc 1 87 13 is_stmt 1 view .LVU260
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1012              		.loc 1 101 17 view .LVU261
 106:armwave.c     ****                 word >>= 8;
 1013              		.loc 1 106 17 view .LVU262
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1014              		.loc 1 101 17 view .LVU263
 106:armwave.c     ****                 word >>= 8;
 1015              		.loc 1 106 17 view .LVU264
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1016              		.loc 1 101 17 view .LVU265
 106:armwave.c     ****                 word >>= 8;
 1017              		.loc 1 106 17 view .LVU266
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1018              		.loc 1 101 17 view .LVU267
 106:armwave.c     ****                 word >>= 8;
 1019              		.loc 1 106 17 view .LVU268
 1020              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1021              		.loc 1 102 34 is_stmt 0 view .LVU269
 1022 04d4 3C209DE5 		ldr	r2, [sp, #60]	@ tmp236, %sfp
 1023              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1024              		.loc 1 87 18 view .LVU270
 1025 04d8 08E09DE5 		ldr	lr, [sp, #8]	@ ivtmp.62, %sfp
 1026              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1027              		.loc 1 102 34 view .LVU271
 1028 04dc 053082E0 		add	r3, r2, r5	@ tmp245, tmp236, ivtmp.64
 1029 04e0 0A1082E0 		add	r1, r2, r10	@ tmp262, tmp236, ivtmp.63
 1030              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1031              		.loc 1 102 74 view .LVU272
 1032 04e4 2338A0E1 		lsr	r3, r3, #16	@ tmp246, tmp245,
 1033              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1034              		.loc 1 87 18 view .LVU273
 1035 04e8 04009EE4 		ldr	r0, [lr], #4	@ word, MEM[base: _204, offset: 0B]
 1036              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1037              		.loc 1 106 47 view .LVU274
 1038 04ec 9B7323E0 		mla	r3, fp, r3, r7	@ tmp248, _21, tmp246, _22
 1039              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1040              		.loc 1 94 20 view .LVU275
 1041 04f0 FF9010E2 		ands	r9, r0, #255	@ scale_value, word,
 1042              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1043              		.loc 1 107 22 view .LVU276
 1044 04f4 2068A0E1 		lsr	r6, r0, #16	@ word, word,
 1045              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1046              		.loc 1 94 20 view .LVU277
 1047 04f8 0160A003 		moveq	r6, #1	@ tmp239,
 1048 04fc 0060A013 		movne	r6, #0	@ tmp239,
 1049              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1050              		.loc 1 106 47 view .LVU278
 1051 0500 093083E0 		add	r3, r3, r9	@ tmp249, tmp248, scale_value
 1052              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1053              		.loc 1 94 19 view .LVU279
 1054 0504 FF0059E3 		cmp	r9, #255	@ scale_value,
 1055 0508 01608603 		orreq	r6, r6, #1	@,, tmp244, tmp239
 1056              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1057              		.loc 1 87 18 view .LVU280
 1058 050c 08E08DE5 		str	lr, [sp, #8]	@ ivtmp.62, %sfp
 1059              	.LVL50:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 1060              		.loc 1 89 13 is_stmt 1 view .LVU281
  91:armwave.c     ****                 
 1061              		.loc 1 91 17 view .LVU282
  94:armwave.c     ****                     continue;
 1062              		.loc 1 94 17 view .LVU283
 1063              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1064              		.loc 1 84 9 is_stmt 0 view .LVU284
 1065 0510 0E90A0E1 		mov	r9, lr	@ ivtmp.62, ivtmp.62
 1066 0514 04E09DE5 		ldr	lr, [sp, #4]	@ ivtmp.69, %sfp
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1067              		.loc 1 84 9 view .LVU285
 1068 0518 1C409DE5 		ldr	r4, [sp, #28]	@ _208, %sfp
 1069              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1070              		.loc 1 102 74 view .LVU286
 1071 051c 2528A0E1 		lsr	r2, r5, #16	@ tmp279, ivtmp.64,
 1072 0520 2118A0E1 		lsr	r1, r1, #16	@ tmp263, tmp262,
 1073              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1074              		.loc 1 84 9 view .LVU287
 1075 0524 0E9089E0 		add	r9, r9, lr	@ tmp302, ivtmp.62, ivtmp.69
 1076              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1077              		.loc 1 94 19 view .LVU288
 1078 0528 000056E3 		cmp	r6, #0	@ tmp244,
 1079              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1080              		.loc 1 102 74 view .LVU289
 1081 052c 2AC8A0E1 		lsr	ip, r10, #16	@ tmp294, ivtmp.63,
 1082              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1083              		.loc 1 106 47 view .LVU290
 1084 0530 9B7121E0 		mla	r1, fp, r1, r7	@ tmp265, _21, tmp263, _22
 1085 0534 04A08AE0 		add	r10, r10, r4	@ ivtmp.63, ivtmp.63, _208
 1086              	.LVL51:
 106:armwave.c     ****                 word >>= 8;
 1087              		.loc 1 106 47 view .LVU291
 1088 0538 9B7222E0 		mla	r2, fp, r2, r7	@ tmp281, _21, tmp279, _22
 1089              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 1090              		.loc 1 107 22 view .LVU292
 1091 053c 2044A0E1 		lsr	r4, r0, #8	@ word, word,
 1092              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1093              		.loc 1 106 47 view .LVU293
 1094 0540 8330A0E1 		lsl	r3, r3, #1	@ tmp250, tmp249,
 1095              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1096              		.loc 1 84 9 view .LVU294
 1097 0544 20908DE5 		str	r9, [sp, #32]	@ tmp302, %sfp
 1098              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1099              		.loc 1 94 19 view .LVU295
 1100 0548 2A00001A 		bne	.L55		@,
 1101              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1102              		.loc 1 94 20 view .LVU296
 1103 054c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 1104              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1105              		.loc 1 106 47 view .LVU297
 1106 0550 B36098E1 		ldrh	r6, [r8, r3]	@ *_86, *_86
 1107              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1108              		.loc 1 94 20 view .LVU298
 1109 0554 0190A003 		moveq	r9, #1	@ tmp256,
 1110 0558 0090A013 		movne	r9, #0	@ tmp256,
 1111              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1112              		.loc 1 106 47 view .LVU299
 1113 055c 041081E0 		add	r1, r1, r4	@ tmp266, tmp265, scale_value
 1114              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1115              		.loc 1 94 19 view .LVU300
 1116 0560 FF0054E3 		cmp	r4, #255	@ scale_value,
 1117 0564 0940A011 		movne	r4, r9	@, tmp261, tmp256
 1118 0568 01408903 		orreq	r4, r9, #1	@,, tmp261, tmp256
 1119              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1120              		.loc 1 106 47 view .LVU301
 1121 056c 016086E2 		add	r6, r6, #1	@ tmp253, *_86,
 1122              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1123              		.loc 1 94 19 view .LVU302
 1124 0570 000054E3 		cmp	r4, #0	@ tmp261,
 1125              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1126              		.loc 1 106 47 view .LVU303
 1127 0574 8110A0E1 		lsl	r1, r1, #1	@ tmp267, tmp266,
 1128 0578 B36088E1 		strh	r6, [r8, r3]	@ movhi	@ tmp253, *_86
 107:armwave.c     ****             }
 1129              		.loc 1 107 17 is_stmt 1 view .LVU304
 1130              	.LVL52:
  91:armwave.c     ****                 
 1131              		.loc 1 91 17 view .LVU305
  94:armwave.c     ****                     continue;
 1132              		.loc 1 94 17 view .LVU306
 1133              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1134              		.loc 1 94 19 is_stmt 0 view .LVU307
 1135 057c 1D00001A 		bne	.L55		@,
 1136              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1137              		.loc 1 94 20 view .LVU308
 1138 0580 2038A0E1 		lsr	r3, r0, #16	@ word, word,
 1139 0584 FFE013E2 		ands	lr, r3, #255	@ scale_value, word,
 1140              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1141              		.loc 1 106 47 view .LVU309
 1142 0588 B13098E1 		ldrh	r3, [r8, r1]	@ *_115, *_115
 1143              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1144              		.loc 1 94 20 view .LVU310
 1145 058c 0140A003 		moveq	r4, #1	@ tmp273,
 1146 0590 0040A013 		movne	r4, #0	@ tmp273,
 1147              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1148              		.loc 1 106 47 view .LVU311
 1149 0594 0E2082E0 		add	r2, r2, lr	@ tmp282, tmp281, scale_value
 1150              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1151              		.loc 1 94 19 view .LVU312
 1152 0598 FF005EE3 		cmp	lr, #255	@ scale_value,
 1153 059c 04E0A011 		movne	lr, r4	@, tmp278, tmp273
 1154 05a0 01E08403 		orreq	lr, r4, #1	@,, tmp278, tmp273
 1155              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 106 47 view .LVU313
 1157 05a4 013083E2 		add	r3, r3, #1	@ tmp270, *_115,
 1158              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1159              		.loc 1 94 19 view .LVU314
 1160 05a8 00005EE3 		cmp	lr, #0	@ tmp278,
 1161              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 106 47 view .LVU315
 1163 05ac 8220A0E1 		lsl	r2, r2, #1	@ tmp283, tmp282,
 1164 05b0 B13088E1 		strh	r3, [r8, r1]	@ movhi	@ tmp270, *_115
 107:armwave.c     ****             }
 1165              		.loc 1 107 17 is_stmt 1 view .LVU316
 1166              	.LVL53:
  91:armwave.c     ****                 
 1167              		.loc 1 91 17 view .LVU317
  94:armwave.c     ****                     continue;
 1168              		.loc 1 94 17 view .LVU318
 1169              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1170              		.loc 1 94 19 is_stmt 0 view .LVU319
 1171 05b4 0F00001A 		bne	.L55		@,
 1172              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1173              		.loc 1 94 20 view .LVU320
 1174 05b8 200CB0E1 		lsrs	r0, r0, #24	@ word, word,
 1175              	.LVL54:
 1176              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1177              		.loc 1 106 47 view .LVU321
 1178 05bc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp296, _21, tmp294, word
 1179 05c0 B23098E1 		ldrh	r3, [r8, r2]	@ *_144, *_144
 1180              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1181              		.loc 1 94 20 view .LVU322
 1182 05c4 0110A003 		moveq	r1, #1	@ tmp288,
 1183 05c8 0010A013 		movne	r1, #0	@ tmp288,
 1184              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1185              		.loc 1 106 47 view .LVU323
 1186 05cc 07C08CE0 		add	ip, ip, r7	@ tmp297, tmp296, _22
 1187              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1188              		.loc 1 94 19 view .LVU324
 1189 05d0 FF0050E3 		cmp	r0, #255	@ word,
 1190 05d4 0100A011 		movne	r0, r1	@, tmp293, tmp288
 1191 05d8 01008103 		orreq	r0, r1, #1	@,, tmp293, tmp288
 1192 05dc 000050E3 		cmp	r0, #0	@ tmp293,
 1193              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1194              		.loc 1 106 47 view .LVU325
 1195 05e0 8CC0A0E1 		lsl	ip, ip, #1	@ tmp298, tmp297,
 1196 05e4 013083E2 		add	r3, r3, #1	@ tmp286, *_144,
 1197 05e8 B23088E1 		strh	r3, [r8, r2]	@ movhi	@ tmp286, *_144
 107:armwave.c     ****             }
 1198              		.loc 1 107 17 is_stmt 1 view .LVU326
 1199              	.LVL55:
  91:armwave.c     ****                 
 1200              		.loc 1 91 17 view .LVU327
  94:armwave.c     ****                     continue;
 1201              		.loc 1 94 17 view .LVU328
 1202              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1203              		.loc 1 106 47 is_stmt 0 view .LVU329
 1204 05ec BC309801 		ldrheq	r3, [r8, ip]	@ *_173, *_173
 1205 05f0 01308302 		addeq	r3, r3, #1	@ tmp301, *_173,
 1206 05f4 BC308801 		strheq	r3, [r8, ip]	@ movhi	@ tmp301, *_173
 107:armwave.c     ****             }
 1207              		.loc 1 107 17 is_stmt 1 view .LVU330
 1208              	.LVL56:
 1209              	.L55:
 1210              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1211              		.loc 1 84 9 is_stmt 0 view .LVU331
 1212 05f8 D022CDE1 		ldrd	r2, [sp, #32]	@,,
 1213 05fc 020053E1 		cmp	r3, r2	@ _133, tmp302
 1214 0600 1C309DE5 		ldr	r3, [sp, #28]	@ _208, %sfp
 1215 0604 035085E0 		add	r5, r5, r3	@ ivtmp.64, ivtmp.64, _208
 1216 0608 B1FFFF8A 		bhi	.L49		@,
 1217              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1218              		.loc 1 79 44 view .LVU332
 1219 060c 0C309DE5 		ldr	r3, [sp, #12]	@ w, %sfp
 1220              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1221              		.loc 1 79 5 view .LVU333
 1222 0610 30209DE5 		ldr	r2, [sp, #48]	@ _38, %sfp
 1223              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1224              		.loc 1 79 44 view .LVU334
 1225 0614 013083E2 		add	r3, r3, #1	@ w, w,
 1226              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1227              		.loc 1 79 5 view .LVU335
 1228 0618 030052E1 		cmp	r2, r3	@ _38, w
 1229              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1230              		.loc 1 79 44 view .LVU336
 1231 061c 0C308DE5 		str	r3, [sp, #12]	@ w, %sfp
 1232              	.LVL57:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1233              		.loc 1 79 44 view .LVU337
 1234 0620 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.69, %sfp
 1235 0624 2C309DE5 		ldr	r3, [sp, #44]	@ _24, %sfp
 1236              	.LVL58:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1237              		.loc 1 79 44 view .LVU338
 1238 0628 032042E0 		sub	r2, r2, r3	@ ivtmp.69, ivtmp.69, _24
 1239 062c 04208DE5 		str	r2, [sp, #4]	@ ivtmp.69, %sfp
 1240 0630 00209DE5 		ldr	r2, [sp]	@ ivtmp.70, %sfp
 1241 0634 033082E0 		add	r3, r2, r3	@ ivtmp.70, ivtmp.70, _24
 1242 0638 00308DE5 		str	r3, [sp]	@ ivtmp.70, %sfp
 1243              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1244              		.loc 1 79 5 view .LVU339
 1245 063c A0FFFF1A 		bne	.L47		@,
 1246              	.LVL59:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1247              		.loc 1 79 5 view .LVU340
 1248              	.LBE12:
 1249              	.LBE13:
 221:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1250              		.loc 1 221 9 is_stmt 1 view .LVU341
 222:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1251              		.loc 1 222 9 view .LVU342
 1252              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1253              		.loc 1 216 86 is_stmt 0 view .LVU343
 1254 0640 28309DE5 		ldr	r3, [sp, #40]	@ yy, %sfp
 1255              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1256              		.loc 1 216 5 view .LVU344
 1257 0644 40209DE5 		ldr	r2, [sp, #64]	@ _179, %sfp
 1258              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1259              		.loc 1 216 86 view .LVU345
 1260 0648 013083E2 		add	r3, r3, #1	@ yy, yy,
 1261              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1262              		.loc 1 216 5 view .LVU346
 1263 064c 020053E1 		cmp	r3, r2	@ yy, _179
 1264              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1265              		.loc 1 216 86 view .LVU347
 1266 0650 28308DE5 		str	r3, [sp, #40]	@ yy, %sfp
 1267              	.LVL60:
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1268              		.loc 1 216 86 view .LVU348
 1269 0654 44209DE5 		ldr	r2, [sp, #68]	@ _185, %sfp
 1270 0658 18309DE5 		ldr	r3, [sp, #24]	@ ivtmp.73, %sfp
 1271              	.LVL61:
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1272              		.loc 1 216 86 view .LVU349
 1273 065c 023083E0 		add	r3, r3, r2	@ ivtmp.73, ivtmp.73, _185
 1274 0660 18308DE5 		str	r3, [sp, #24]	@ ivtmp.73, %sfp
 1275 0664 14209DE5 		ldr	r2, [sp, #20]	@ ivtmp.74, %sfp
 1276 0668 24309DE5 		ldr	r3, [sp, #36]	@ _133, %sfp
 1277 066c 032042E0 		sub	r2, r2, r3	@ ivtmp.74, ivtmp.74, _133
 1278 0670 14208DE5 		str	r2, [sp, #20]	@ ivtmp.74, %sfp
 1279 0674 10209DE5 		ldr	r2, [sp, #16]	@ ivtmp.75, %sfp
 1280 0678 033082E0 		add	r3, r2, r3	@ ivtmp.75, ivtmp.75, _133
 1281 067c 10308DE5 		str	r3, [sp, #16]	@ ivtmp.75, %sfp
 1282              	@ armwave.c:216:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 216:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1283              		.loc 1 216 5 view .LVU350
 1284 0680 86FFFF1A 		bne	.L50		@,
 1285              	.LVL62:
 1286              	.L44:
 1287              	@ armwave.c:226: }
 223:armwave.c     ****     }
 224:armwave.c     **** 
 225:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 226:armwave.c     **** }
 1288              		.loc 1 226 1 view .LVU351
 1289 0684 4CD08DE2 		add	sp, sp, #76	@,,
 1290              		.cfi_def_cfa_offset 36
 1291              		@ sp needed	@
 1292 0688 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1293              	.L65:
 1294              		.align	2
 1295              	.L64:
 1296 068c 00000000 		.word	g_armwave_state
 1297              		.cfi_endproc
 1298              	.LFE61:
 1300              		.align	2
 1301              		.global	armwave_setup_render
 1302              		.syntax unified
 1303              		.arm
 1304              		.fpu vfp
 1306              	armwave_setup_render:
 1307              	.LVL63:
 1308              	.LFB62:
 227:armwave.c     **** 
 228:armwave.c     **** /*
 229:armwave.c     ****  * Setup the renderer with passed parameters.
 230:armwave.c     ****  */
 231:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 232:armwave.c     **** {
 1309              		.loc 1 232 1 is_stmt 1 view -0
 1310              		.cfi_startproc
 1311              		@ args = 12, pretend = 0, frame = 0
 1312              		@ frame_needed = 0, uses_anonymous_args = 0
 233:armwave.c     ****     uint32_t length, xx;
 1313              		.loc 1 233 5 view .LVU353
 234:armwave.c     ****     float points_per_pixel;
 1314              		.loc 1 234 5 view .LVU354
 235:armwave.c     **** 
 236:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1315              		.loc 1 236 5 view .LVU355
 1316              	@ armwave.c:232: {
 232:armwave.c     ****     uint32_t length, xx;
 1317              		.loc 1 232 1 is_stmt 0 view .LVU356
 1318 0690 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1319              		.cfi_def_cfa_offset 28
 1320              		.cfi_offset 4, -28
 1321              		.cfi_offset 5, -24
 1322              		.cfi_offset 6, -20
 1323              		.cfi_offset 7, -16
 1324              		.cfi_offset 8, -12
 1325              		.cfi_offset 9, -8
 1326              		.cfi_offset 14, -4
 1327 0694 028B2DED 		vpush.64	{d8}	@
 1328              		.cfi_def_cfa_offset 36
 1329              		.cfi_offset 80, -36
 1330              		.cfi_offset 81, -32
 1331 0698 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1332 069c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1333 06a0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1334 06a4 14D04DE2 		sub	sp, sp, #20	@,,
 1335              		.cfi_def_cfa_offset 56
 1336              	@ armwave.c:232: {
 232:armwave.c     ****     uint32_t length, xx;
 1337              		.loc 1 232 1 view .LVU357
 1338 06a8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1339 06ac D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1340 06b0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1341              	@ armwave.c:236:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1342              		.loc 1 236 5 view .LVU358
 1343 06b4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1344 06b8 F460CDE1 		strd	r6, [sp, #4]	@,,
 1345 06bc 0230A0E1 		mov	r3, r2	@, waves_max
 1346              	.LVL64:
 1347              		.loc 1 236 5 view .LVU359
 1348 06c0 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1349 06c4 0120A0E1 		mov	r2, r1	@, end_point
 1350              	.LVL65:
 1351              		.loc 1 236 5 view .LVU360
 1352 06c8 0010A0E1 		mov	r1, r0	@, start_point
 1353              	.LVL66:
 1354              		.loc 1 236 5 view .LVU361
 1355 06cc E0019FE5 		ldr	r0, .L80+12	@,
 1356              	.LVL67:
 1357              		.loc 1 236 5 view .LVU362
 1358 06d0 FEFFFFEB 		bl	printf		@
 1359              	.LVL68:
 237:armwave.c     **** 
 238:armwave.c     ****     // TODO these asserts should instead raise PyExc
 239:armwave.c     ****     assert(start_point < end_point);
 1360              		.loc 1 239 5 is_stmt 1 view .LVU363
 1361 06d4 050054E1 		cmp	r4, r5	@ start_point, end_point
 1362 06d8 6300002A 		bcs	.L77		@,
 240:armwave.c     **** 
 241:armwave.c     ****     /*
 242:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 243:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 244:armwave.c     ****     if(target_height == 256) {
 245:armwave.c     ****         g_armwave_state.row_shift = 8;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 247:armwave.c     ****     } else if(target_height == 512) {
 248:armwave.c     ****         g_armwave_state.row_shift = 9;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 250:armwave.c     ****     } else if(target_height == 1024) {
 251:armwave.c     ****         g_armwave_state.row_shift = 10;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 253:armwave.c     ****     } else if(target_height == 2048) {
 254:armwave.c     ****         g_armwave_state.row_shift = 11;
 255:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 256:armwave.c     ****     }
 257:armwave.c     ****     */
 258:armwave.c     **** 
 259:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 260:armwave.c     ****     g_armwave_state.xstride = target_height;
 1363              		.loc 1 260 5 view .LVU364
 1364              	@ armwave.c:271:     g_armwave_state.wave_length = end_point - start_point;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 262:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 263:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 264:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 265:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 266:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 267:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 268:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 269:armwave.c     ****     g_armwave_state.target_width = target_width;
 270:armwave.c     ****     g_armwave_state.target_height = target_height;
 271:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1365              		.loc 1 271 45 is_stmt 0 view .LVU365
 1366 06dc 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1367              	.LVL69:
 1368              	@ armwave.c:261:     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1369              		.loc 1 261 49 view .LVU366
 1370 06e0 706A9FED 		vldr.32	s12, .L80	@ tmp174,
 1371              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 272:armwave.c     **** 
 273:armwave.c     ****     // Calculate compound scaler
 274:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 275:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1372              		.loc 1 275 48 view .LVU367
 1373 06e4 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1374              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1375              		.loc 1 275 79 view .LVU368
 1376 06e8 6F6ADFED 		vldr.32	s13, .L80+4	@ tmp198,
 1377              	@ armwave.c:268:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 1378              		.loc 1 268 90 view .LVU369
 1379 06ec 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 1380              	@ armwave.c:260:     g_armwave_state.xstride = target_height;
 260:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1381              		.loc 1 260 29 view .LVU370
 1382 06f0 C0419FE5 		ldr	r4, .L80+16	@ tmp240,
 1383              	.LVL70:
 1384              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1385              		.loc 1 275 48 view .LVU371
 1386 06f4 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 1387              	@ armwave.c:261:     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1388              		.loc 1 261 49 view .LVU372
 1389 06f8 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1390              	@ armwave.c:266:     g_armwave_state.size = target_height * target_width;
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1391              		.loc 1 266 42 view .LVU373
 1392 06fc 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 1393              	@ armwave.c:268:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 1394              		.loc 1 268 95 view .LVU374
 1395 0700 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 1396              	@ armwave.c:261:     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1397              		.loc 1 261 49 view .LVU375
 1398 0704 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 1399              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1400              		.loc 1 275 48 view .LVU376
 1401 0708 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1402              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 276:armwave.c     **** 
 277:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1403              		.loc 1 277 5 view .LVU377
 1404 070c 0128A0E3 		mov	r2, #65536	@ tmp201,
 1405 0710 04508DE5 		str	r5, [sp, #4]	@ _13,
 1406 0714 00608DE5 		str	r6, [sp]	@ target_width,
 1407              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 275:armwave.c     **** 
 1408              		.loc 1 275 48 view .LVU378
 1409 0718 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1410              	@ armwave.c:268:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 1411              		.loc 1 268 95 view .LVU379
 1412 071c 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 1413              	@ armwave.c:260:     g_armwave_state.xstride = target_height;
 260:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1414              		.loc 1 260 29 view .LVU380
 1415 0720 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1416              		.loc 1 261 5 is_stmt 1 view .LVU381
 1417              	@ armwave.c:263:     g_armwave_state.wave_stride = wave_stride;
 263:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1418              		.loc 1 263 33 is_stmt 0 view .LVU382
 1419 0724 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1420              	@ armwave.c:264:     g_armwave_state.waves_max = waves_max;
 264:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1421              		.loc 1 264 31 view .LVU383
 1422 0728 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1423              	@ armwave.c:265:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 265:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1424              		.loc 1 265 27 view .LVU384
 1425 072c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1426              	@ armwave.c:270:     g_armwave_state.target_height = target_height;
 270:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1427              		.loc 1 270 35 view .LVU385
 1428 0730 F865C4E1 		strd	r6, [r4, #88]	@, tmp240,
 1429              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1430              		.loc 1 277 5 view .LVU386
 1431 0734 08208DE5 		str	r2, [sp, #8]	@ tmp201,
 1432              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 275:armwave.c     **** 
 1433              		.loc 1 275 48 view .LVU387
 1434 0738 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1435              	@ armwave.c:267:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 267:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1436              		.loc 1 267 37 view .LVU388
 1437 073c 022CA0E3 		mov	r2, #512	@ tmp184,
 1438              	@ armwave.c:266:     g_armwave_state.size = target_height * target_width;
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1439              		.loc 1 266 26 view .LVU389
 1440 0740 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1441              	@ armwave.c:267:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 267:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1442              		.loc 1 267 37 view .LVU390
 1443 0744 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1444              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1445              		.loc 1 277 5 view .LVU391
 1446 0748 0310A0E1 		mov	r1, r3	@, tmp189
 1447              	@ armwave.c:268:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 1448              		.loc 1 268 34 view .LVU392
 1449 074c 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1450              	@ armwave.c:271:     g_armwave_state.wave_length = end_point - start_point;
 271:armwave.c     **** 
 1451              		.loc 1 271 33 view .LVU393
 1452 0750 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1453              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1454              		.loc 1 277 5 view .LVU394
 1455 0754 60019FE5 		ldr	r0, .L80+20	@,
 1456              	@ armwave.c:261:     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1457              		.loc 1 261 49 view .LVU395
 1458 0758 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1459              	@ armwave.c:275:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 275:armwave.c     **** 
 1460              		.loc 1 275 79 view .LVU396
 1461 075c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1462              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1463              		.loc 1 274 42 view .LVU397
 1464 0760 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1465              	@ armwave.c:261:     g_armwave_state.vscale_frac = target_height / 255.0f;
 261:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1466              		.loc 1 261 33 view .LVU398
 1467 0764 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 262:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1468              		.loc 1 262 5 is_stmt 1 view .LVU399
 1469              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1470              		.loc 1 274 42 is_stmt 0 view .LVU400
 1471 0768 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1472              	@ armwave.c:262:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 262:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1473              		.loc 1 262 30 view .LVU401
 1474 076c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1475              	@ armwave.c:277:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1476              		.loc 1 277 5 view .LVU402
 1477 0770 0C30A0E1 		mov	r3, ip	@, _19
 1478 0774 0C20A0E1 		mov	r2, ip	@, tmp3
 1479              	@ armwave.c:274:     g_armwave_state.cmp_x_bitdepth_scale = \
 274:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1480              		.loc 1 274 42 view .LVU403
 1481 0778 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1482              	@ armwave.c:262:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 262:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1483              		.loc 1 262 30 view .LVU404
 1484 077c 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 263:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1485              		.loc 1 263 5 is_stmt 1 view .LVU405
 264:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1486              		.loc 1 264 5 view .LVU406
 265:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1487              		.loc 1 265 5 view .LVU407
 266:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1488              		.loc 1 266 5 view .LVU408
 267:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1489              		.loc 1 267 5 view .LVU409
 268:armwave.c     ****     g_armwave_state.target_width = target_width;
 1490              		.loc 1 268 5 view .LVU410
 269:armwave.c     ****     g_armwave_state.target_height = target_height;
 1491              		.loc 1 269 5 view .LVU411
 270:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1492              		.loc 1 270 5 view .LVU412
 271:armwave.c     **** 
 1493              		.loc 1 271 5 view .LVU413
 274:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1494              		.loc 1 274 5 view .LVU414
 1495              		.loc 1 277 5 view .LVU415
 1496 0780 FEFFFFEB 		bl	printf		@
 1497              	.LVL71:
 278:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 279:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 280:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 281:armwave.c     **** 
 282:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 283:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 284:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 285:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1498              		.loc 1 285 5 view .LVU416
 1499              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 286:armwave.c     **** 
 287:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1500              		.loc 1 287 23 is_stmt 0 view .LVU417
 1501 0784 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1502              	@ armwave.c:285:     g_armwave_state.slice_height = 256; // 64;  
 285:armwave.c     **** 
 1503              		.loc 1 285 34 view .LVU418
 1504 0788 013CA0E3 		mov	r3, #256	@ tmp203,
 1505              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 1506              		.loc 1 287 7 view .LVU419
 1507 078c 000050E3 		cmp	r0, #0	@ _20,
 1508              	@ armwave.c:285:     g_armwave_state.slice_height = 256; // 64;  
 285:armwave.c     **** 
 1509              		.loc 1 285 34 view .LVU420
 1510 0790 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1511              		.loc 1 287 5 is_stmt 1 view .LVU421
 1512              	@ armwave.c:287:     if(g_armwave_state.ch1_buffer != NULL)
 1513              		.loc 1 287 7 is_stmt 0 view .LVU422
 1514 0794 0000000A 		beq	.L68		@,
 288:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1515              		.loc 1 288 9 is_stmt 1 view .LVU423
 1516 0798 FEFFFFEB 		bl	free		@
 1517              	.LVL72:
 1518              	.L68:
 289:armwave.c     **** 
 290:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1519              		.loc 1 290 5 view .LVU424
 1520              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1521              		.loc 1 290 34 is_stmt 0 view .LVU425
 1522 079c 0110A0E3 		mov	r1, #1	@,
 1523 07a0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1524 07a4 FEFFFFEB 		bl	calloc		@
 1525              	.LVL73:
 1526              	@ armwave.c:292:     assert(g_armwave_state.ch1_buffer != NULL);
 291:armwave.c     **** 
 292:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1527              		.loc 1 292 5 view .LVU426
 1528 07a8 000050E3 		cmp	r0, #0	@ _23,
 1529              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 290:armwave.c     **** 
 1530              		.loc 1 290 34 view .LVU427
 1531 07ac 0070A0E1 		mov	r7, r0	@ _23,
 1532              	@ armwave.c:290:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 290:armwave.c     **** 
 1533              		.loc 1 290 32 view .LVU428
 1534 07b0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1535              		.loc 1 292 5 is_stmt 1 view .LVU429
 1536 07b4 3600000A 		beq	.L78		@,
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1537              		.loc 1 295 5 view .LVU430
 1538              	.LVL74:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1539              		.loc 1 296 5 view .LVU431
 1540              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 1541              		.loc 1 296 34 is_stmt 0 view .LVU432
 1542 07b8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1543              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 1544              		.loc 1 296 22 view .LVU433
 1545 07bc 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1546              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1547              		.loc 1 297 60 view .LVU434
 1548 07c0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1549              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1550              		.loc 1 298 40 view .LVU435
 1551 07c4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1552              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1553              		.loc 1 296 34 view .LVU436
 1554 07c8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1555              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1556              		.loc 1 296 22 view .LVU437
 1557 07cc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1558              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1559              		.loc 1 297 60 view .LVU438
 1560 07d0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1561              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1562              		.loc 1 296 22 view .LVU439
 1563 07d4 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1564              	.LVL75:
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1565              		.loc 1 297 5 is_stmt 1 view .LVU440
 1566              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1567              		.loc 1 297 60 is_stmt 0 view .LVU441
 1568 07d8 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1569              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1570              		.loc 1 297 41 view .LVU442
 1571 07dc E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1572 07e0 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1573              		.loc 1 298 5 is_stmt 1 view .LVU443
 1574              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1575              		.loc 1 298 40 is_stmt 0 view .LVU444
 1576 07e4 FEFFFFEB 		bl	malloc		@
 1577              	.LVL76:
 1578              	@ armwave.c:300:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 299:armwave.c     **** 
 300:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1579              		.loc 1 300 5 view .LVU445
 1580 07e8 000050E3 		cmp	r0, #0	@ _31,
 1581              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1582              		.loc 1 298 40 view .LVU446
 1583 07ec 0060A0E1 		mov	r6, r0	@ _31,
 1584              	@ armwave.c:298:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1585              		.loc 1 298 38 view .LVU447
 1586 07f0 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1587              		.loc 1 300 5 is_stmt 1 view .LVU448
 1588 07f4 2100000A 		beq	.L79		@,
 1589              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 301:armwave.c     **** 
 302:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 303:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1590              		.loc 1 303 54 is_stmt 0 view .LVU449
 1591 07f8 2C7ADFED 		vldr.32	s15, .L80+8	@ tmp228,
 1592 07fc 020040E2 		sub	r0, r0, #2	@ ivtmp.79, _31,
 1593              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1594              		.loc 1 302 12 view .LVU450
 1595 0800 0030A0E3 		mov	r3, #0	@ xx,
 1596              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1597              		.loc 1 303 54 view .LVU451
 1598 0804 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp228, points_per_pixel
 1599              	.L71:
 1600              	.LVL77:
 1601              		.loc 1 303 9 is_stmt 1 discriminator 3 view .LVU452
 1602              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1603              		.loc 1 303 74 is_stmt 0 discriminator 3 view .LVU453
 1604 0808 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1605              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1606              		.loc 1 302 32 discriminator 3 view .LVU454
 1607 080c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1608              	.LVL78:
 1609              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1610              		.loc 1 302 5 discriminator 3 view .LVU455
 1611 0810 030055E1 		cmp	r5, r3	@ _13, xx
 1612              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1613              		.loc 1 303 74 discriminator 3 view .LVU456
 1614 0814 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp229, xx
 1615 0818 877A67EE 		vmul.f32	s15, s15, s14	@ tmp230, tmp229, _32
 1616              	@ armwave.c:303:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1617              		.loc 1 303 46 discriminator 3 view .LVU457
 1618 081c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp231, tmp230
 1619 0820 902A17EE 		vmov	r2, s15	@ int	@ tmp231, tmp231
 1620 0824 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp231, MEM[base: _101, offset: 0B]
 1621              	@ armwave.c:302:     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1622              		.loc 1 302 5 discriminator 3 view .LVU458
 1623 0828 F6FFFF1A 		bne	.L71		@,
 304:armwave.c     **** 
 305:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 306:armwave.c     ****     }
 307:armwave.c     **** 
 308:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1624              		.loc 1 308 5 is_stmt 1 view .LVU459
 1625              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1626              		.loc 1 308 34 is_stmt 0 view .LVU460
 1627 082c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1628 0830 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1629 0834 FEFFFFEB 		bl	malloc		@
 1630              	.LVL79:
 1631              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 309:armwave.c     **** 
 310:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1632              		.loc 1 310 5 view .LVU461
 1633 0838 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1634 083c 0620A0E1 		mov	r2, r6	@, _31
 1635 0840 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1636 0844 0710A0E1 		mov	r1, r7	@, _23
 1637              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1638              		.loc 1 308 34 view .LVU462
 1639 0848 00C0A0E1 		mov	ip, r0	@ tmp235,
 1640              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1641              		.loc 1 310 5 view .LVU463
 1642 084c 0030A0E1 		mov	r3, r0	@, tmp235
 1643              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1644              		.loc 1 308 32 view .LVU464
 1645 0850 68C084E5 		str	ip, [r4, #104]	@ tmp235, g_armwave_state.out_pixbuf
 1646              		.loc 1 310 5 is_stmt 1 view .LVU465
 1647 0854 64009FE5 		ldr	r0, .L80+24	@,
 1648 0858 FEFFFFEB 		bl	printf		@
 1649              	.LVL80:
 311:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 315:armwave.c     **** 
 316:armwave.c     ****     malloc_stats();
 1650              		.loc 1 316 5 view .LVU466
 1651              	@ armwave.c:317: }
 317:armwave.c     **** }
 1652              		.loc 1 317 1 is_stmt 0 view .LVU467
 1653 085c 14D08DE2 		add	sp, sp, #20	@,,
 1654              		.cfi_remember_state
 1655              		.cfi_def_cfa_offset 36
 1656              		@ sp needed	@
 1657 0860 028BBDEC 		vldm	sp!, {d8}	@
 1658              		.cfi_restore 80
 1659              		.cfi_restore 81
 1660              		.cfi_def_cfa_offset 28
 1661              	.LVL81:
 1662              		.loc 1 317 1 view .LVU468
 1663 0864 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1664              		.cfi_restore 14
 1665              		.cfi_restore 9
 1666              		.cfi_restore 8
 1667              		.cfi_restore 7
 1668              		.cfi_restore 6
 1669              		.cfi_restore 5
 1670              		.cfi_restore 4
 1671              		.cfi_def_cfa_offset 0
 1672              	.LVL82:
 1673              	@ armwave.c:316:     malloc_stats();
 316:armwave.c     **** }
 1674              		.loc 1 316 5 view .LVU469
 1675 0868 FEFFFFEA 		b	malloc_stats		@
 1676              	.LVL83:
 1677              	.L77:
 1678              		.cfi_restore_state
 239:armwave.c     **** 
 1679              		.loc 1 239 5 is_stmt 1 discriminator 1 view .LVU470
 1680 086c 50309FE5 		ldr	r3, .L80+28	@,
 1681 0870 EF20A0E3 		mov	r2, #239	@,
 1682 0874 4C109FE5 		ldr	r1, .L80+32	@,
 1683 0878 4C009FE5 		ldr	r0, .L80+36	@,
 1684 087c FEFFFFEB 		bl	__assert_fail		@
 1685              	.LVL84:
 1686              	.L79:
 300:armwave.c     **** 
 1687              		.loc 1 300 5 discriminator 1 view .LVU471
 1688 0880 3C309FE5 		ldr	r3, .L80+28	@,
 1689 0884 4B2FA0E3 		mov	r2, #300	@,
 1690 0888 38109FE5 		ldr	r1, .L80+32	@,
 1691 088c 3C009FE5 		ldr	r0, .L80+40	@,
 1692 0890 FEFFFFEB 		bl	__assert_fail		@
 1693              	.LVL85:
 1694              	.L78:
 292:armwave.c     **** 
 1695              		.loc 1 292 5 discriminator 1 view .LVU472
 1696 0894 28309FE5 		ldr	r3, .L80+28	@,
 1697 0898 492FA0E3 		mov	r2, #292	@,
 1698 089c 24109FE5 		ldr	r1, .L80+32	@,
 1699 08a0 2C009FE5 		ldr	r0, .L80+44	@,
 1700 08a4 FEFFFFEB 		bl	__assert_fail		@
 1701              	.LVL86:
 1702              	.L81:
 1703              		.align	2
 1704              	.L80:
 1705 08a8 00007F43 		.word	1132396544
 1706 08ac 00008047 		.word	1199570944
 1707 08b0 0000803F 		.word	1065353216
 1708 08b4 40000000 		.word	.LC4
 1709 08b8 00000000 		.word	g_armwave_state
 1710 08bc 84000000 		.word	.LC6
 1711 08c0 34010000 		.word	.LC9
 1712 08c4 1C000000 		.word	.LANCHOR0+28
 1713 08c8 20000000 		.word	.LC2
 1714 08cc 6C000000 		.word	.LC5
 1715 08d0 08010000 		.word	.LC8
 1716 08d4 E4000000 		.word	.LC7
 1717              		.cfi_endproc
 1718              	.LFE62:
 1720              		.align	2
 1721              		.global	armwave_set_wave_pointer
 1722              		.syntax unified
 1723              		.arm
 1724              		.fpu vfp
 1726              	armwave_set_wave_pointer:
 1727              	.LVL87:
 1728              	.LFB63:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 321:armwave.c     ****  * in the future.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 324:armwave.c     **** {
 1729              		.loc 1 324 1 view -0
 1730              		.cfi_startproc
 1731              		@ args = 0, pretend = 0, frame = 0
 1732              		@ frame_needed = 0, uses_anonymous_args = 0
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1733              		.loc 1 325 5 view .LVU474
 1734 08d8 000050E3 		cmp	r0, #0	@ wave_buffer
 1735              		.loc 1 325 5 is_stmt 0 view .LVU475
 1736 08dc 0200000A 		beq	.L87		@,
 326:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1737              		.loc 1 326 5 is_stmt 1 view .LVU476
 1738              	@ armwave.c:326:     g_armwave_state.wave_buffer = wave_buffer;
 1739              		.loc 1 326 33 is_stmt 0 view .LVU477
 1740 08e0 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1741 08e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1742 08e8 1EFF2FE1 		bx	lr	@
 1743              	.L87:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1744              		.loc 1 325 5 is_stmt 1 discriminator 1 view .LVU478
 1745              	@ armwave.c:324: {
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1746              		.loc 1 324 1 is_stmt 0 discriminator 1 view .LVU479
 1747 08ec 10402DE9 		push	{r4, lr}	@
 1748              		.cfi_def_cfa_offset 8
 1749              		.cfi_offset 4, -8
 1750              		.cfi_offset 14, -4
 1751              	@ armwave.c:325:     assert(wave_buffer != NULL);
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1752              		.loc 1 325 5 discriminator 1 view .LVU480
 1753 08f0 10309FE5 		ldr	r3, .L88+4	@,
 1754 08f4 10209FE5 		ldr	r2, .L88+8	@,
 1755 08f8 10109FE5 		ldr	r1, .L88+12	@,
 1756 08fc 10009FE5 		ldr	r0, .L88+16	@,
 1757              	.LVL88:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1758              		.loc 1 325 5 discriminator 1 view .LVU481
 1759 0900 FEFFFFEB 		bl	__assert_fail		@
 1760              	.LVL89:
 1761              	.L89:
 1762              		.align	2
 1763              	.L88:
 1764 0904 00000000 		.word	g_armwave_state
 1765 0908 34000000 		.word	.LANCHOR0+52
 1766 090c 45010000 		.word	325
 1767 0910 20000000 		.word	.LC2
 1768 0914 58010000 		.word	.LC10
 1769              		.cfi_endproc
 1770              	.LFE63:
 1772              		.align	2
 1773              		.global	armwave_set_wave_pointer_as_testbuf
 1774              		.syntax unified
 1775              		.arm
 1776              		.fpu vfp
 1778              	armwave_set_wave_pointer_as_testbuf:
 1779              	.LVL90:
 1780              	.LFB64:
 327:armwave.c     **** }
 328:armwave.c     **** 
 329:armwave.c     **** /*
 330:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 331:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 332:armwave.c     ****  */
 333:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 334:armwave.c     **** {
 1781              		.loc 1 334 1 is_stmt 1 view -0
 1782              		.cfi_startproc
 1783              		@ args = 0, pretend = 0, frame = 0
 1784              		@ frame_needed = 0, uses_anonymous_args = 0
 1785              		@ link register save eliminated.
 335:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1786              		.loc 1 335 5 view .LVU483
 1787              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1788              		.loc 1 335 29 is_stmt 0 view .LVU484
 1789 0918 24309FE5 		ldr	r3, .L93	@ tmp117,
 1790              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1791              		.loc 1 335 7 view .LVU485
 1792 091c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1793 0920 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1794 0924 0400003A 		bcc	.L92		@,
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 337:armwave.c     ****         return;
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1795              		.loc 1 340 5 is_stmt 1 view .LVU486
 1796              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1797              		.loc 1 340 111 is_stmt 0 view .LVU487
 1798 0928 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1799              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1800              		.loc 1 340 68 view .LVU488
 1801 092c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1802 0930 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1803              	.LVL91:
 1804              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1805              		.loc 1 340 33 view .LVU489
 1806 0934 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1807              	@ armwave.c:341: }
 341:armwave.c     **** }
 1808              		.loc 1 341 1 view .LVU490
 1809 0938 1EFF2FE1 		bx	lr	@
 1810              	.LVL92:
 1811              	.L92:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1812              		.loc 1 336 9 is_stmt 1 view .LVU491
 1813 093c 04009FE5 		ldr	r0, .L93+4	@,
 1814              	.LVL93:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1815              		.loc 1 336 9 is_stmt 0 view .LVU492
 1816 0940 FEFFFFEA 		b	puts		@
 1817              	.LVL94:
 1818              	.L94:
 1819              		.align	2
 1820              	.L93:
 1821 0944 00000000 		.word	g_armwave_state
 1822 0948 6C010000 		.word	.LC11
 1823              		.cfi_endproc
 1824              	.LFE64:
 1826              		.align	2
 1827              		.global	armwave_set_wave_pointer_u32
 1828              		.syntax unified
 1829              		.arm
 1830              		.fpu vfp
 1832              	armwave_set_wave_pointer_u32:
 1833              	.LVL95:
 1834              	.LFB65:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 345:armwave.c     ****  * disjointed buffers in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 348:armwave.c     **** {
 1835              		.loc 1 348 1 is_stmt 1 view -0
 1836              		.cfi_startproc
 1837              		@ args = 0, pretend = 0, frame = 0
 1838              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1839              		.loc 1 349 5 view .LVU494
 1840 094c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1841              		.loc 1 349 5 is_stmt 0 view .LVU495
 1842 0950 0200000A 		beq	.L100		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1843              		.loc 1 350 5 is_stmt 1 view .LVU496
 1844              	@ armwave.c:350:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1845              		.loc 1 350 33 is_stmt 0 view .LVU497
 1846 0954 1C309FE5 		ldr	r3, .L101	@ tmp117,
 1847 0958 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1848 095c 1EFF2FE1 		bx	lr	@
 1849              	.L100:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1850              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU498
 1851              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1852              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU499
 1853 0960 10402DE9 		push	{r4, lr}	@
 1854              		.cfi_def_cfa_offset 8
 1855              		.cfi_offset 4, -8
 1856              		.cfi_offset 14, -4
 1857              	@ armwave.c:349:     assert(wave_buffer_ptr != 0);
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1858              		.loc 1 349 5 discriminator 1 view .LVU500
 1859 0964 10309FE5 		ldr	r3, .L101+4	@,
 1860 0968 10209FE5 		ldr	r2, .L101+8	@,
 1861 096c 10109FE5 		ldr	r1, .L101+12	@,
 1862 0970 10009FE5 		ldr	r0, .L101+16	@,
 1863              	.LVL96:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1864              		.loc 1 349 5 discriminator 1 view .LVU501
 1865 0974 FEFFFFEB 		bl	__assert_fail		@
 1866              	.LVL97:
 1867              	.L102:
 1868              		.align	2
 1869              	.L101:
 1870 0978 00000000 		.word	g_armwave_state
 1871 097c 50000000 		.word	.LANCHOR0+80
 1872 0980 5D010000 		.word	349
 1873 0984 20000000 		.word	.LC2
 1874 0988 A8010000 		.word	.LC12
 1875              		.cfi_endproc
 1876              	.LFE65:
 1878              		.align	2
 1879              		.global	armwave_clear_buffer
 1880              		.syntax unified
 1881              		.arm
 1882              		.fpu vfp
 1884              	armwave_clear_buffer:
 1885              	.LVL98:
 1886              	.LFB66:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 357:armwave.c     **** {
 1887              		.loc 1 357 1 is_stmt 1 view -0
 1888              		.cfi_startproc
 1889              		@ args = 0, pretend = 0, frame = 0
 1890              		@ frame_needed = 0, uses_anonymous_args = 0
 1891              		@ link register save eliminated.
 358:armwave.c     ****     // Flags ignored, only one buffer cleared
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1892              		.loc 1 359 5 view .LVU503
 1893              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1894              		.loc 1 359 58 is_stmt 0 view .LVU504
 1895 098c 0C309FE5 		ldr	r3, .L104	@ tmp114,
 1896              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1897              		.loc 1 359 5 view .LVU505
 1898 0990 0010A0E3 		mov	r1, #0	@,
 1899 0994 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1900 0998 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1901              	.LVL99:
 1902              		.loc 1 359 5 view .LVU506
 1903 099c FEFFFFEA 		b	memset		@
 1904              	.LVL100:
 1905              	.L105:
 1906              		.align	2
 1907              	.L104:
 1908 09a0 00000000 		.word	g_armwave_state
 1909              		.cfi_endproc
 1910              	.LFE66:
 1912              		.align	2
 1913              		.global	armwave_set_channel_colour
 1914              		.syntax unified
 1915              		.arm
 1916              		.fpu vfp
 1918              	armwave_set_channel_colour:
 1919              	.LVL101:
 1920              	.LFB67:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 366:armwave.c     **** {
 1921              		.loc 1 366 1 is_stmt 1 view -0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
 1925              		@ link register save eliminated.
 367:armwave.c     ****     // Only 1ch supported for now
 368:armwave.c     ****     switch(ch) {
 1926              		.loc 1 368 5 view .LVU508
 1927 09a4 010050E3 		cmp	r0, #1	@ ch,
 369:armwave.c     ****         case 1:
 370:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1928              		.loc 1 370 13 view .LVU509
 1929              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 1930              		.loc 1 370 41 is_stmt 0 view .LVU510
 1931 09a8 0C009F05 		ldreq	r0, .L108	@ tmp117,
 1932              	.LVL102:
 1933              		.loc 1 370 41 view .LVU511
 1934 09ac BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1935              		.loc 1 371 13 is_stmt 1 view .LVU512
 1936              	@ armwave.c:371:             g_armwave_state.ch1_color.g = g;
 1937              		.loc 1 371 41 is_stmt 0 view .LVU513
 1938 09b0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1939              		.loc 1 372 13 is_stmt 1 view .LVU514
 1940              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 1941              		.loc 1 372 41 is_stmt 0 view .LVU515
 1942 09b4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 373:armwave.c     ****             break;
 1943              		.loc 1 373 13 is_stmt 1 view .LVU516
 1944              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 1945              		.loc 1 375 1 is_stmt 0 view .LVU517
 1946 09b8 1EFF2FE1 		bx	lr	@
 1947              	.L109:
 1948              		.align	2
 1949              	.L108:
 1950 09bc 00000000 		.word	g_armwave_state
 1951              		.cfi_endproc
 1952              	.LFE67:
 1954              		.align	2
 1955              		.global	armwave_dump_ppm_debug
 1956              		.syntax unified
 1957              		.arm
 1958              		.fpu vfp
 1960              	armwave_dump_ppm_debug:
 1961              	.LVL103:
 1962              	.LFB68:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Dump a ppm of a buffer to a file.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 381:armwave.c     **** {
 1963              		.loc 1 381 1 is_stmt 1 view -0
 1964              		.cfi_startproc
 1965              		@ args = 0, pretend = 0, frame = 0
 1966              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1967              		.loc 1 382 5 view .LVU519
 1968              	@ armwave.c:381: {
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1969              		.loc 1 381 1 is_stmt 0 view .LVU520
 1970 09c0 0130A0E1 		mov	r3, r1	@ fn, fn
 1971 09c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1972              		.cfi_def_cfa_offset 28
 1973              		.cfi_offset 4, -28
 1974              		.cfi_offset 5, -24
 1975              		.cfi_offset 6, -20
 1976              		.cfi_offset 7, -16
 1977              		.cfi_offset 8, -12
 1978              		.cfi_offset 9, -8
 1979              		.cfi_offset 14, -4
 1980 09c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1981 09cc 0CD04DE2 		sub	sp, sp, #12	@,,
 1982              		.cfi_def_cfa_offset 40
 1983              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 1984              		.loc 1 382 16 view .LVU521
 1985 09d0 C4109FE5 		ldr	r1, .L118	@,
 1986              	.LVL104:
 1987              		.loc 1 382 16 view .LVU522
 1988 09d4 0300A0E1 		mov	r0, r3	@, fn
 1989              	.LVL105:
 1990              		.loc 1 382 16 view .LVU523
 1991 09d8 FEFFFFEB 		bl	fopen64		@
 1992              	.LVL106:
 1993              	@ armwave.c:389:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 383:armwave.c     ****     uint32_t data;
 384:armwave.c     ****     int xx, yy;
 385:armwave.c     **** 
 386:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 387:armwave.c     **** 
 388:armwave.c     ****     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1994              		.loc 1 389 5 view .LVU524
 1995 09dc BC609FE5 		ldr	r6, .L118+4	@ tmp150,
 1996              	@ armwave.c:388:     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1997              		.loc 1 388 5 view .LVU525
 1998 09e0 0320A0E3 		mov	r2, #3	@,
 1999 09e4 0110A0E3 		mov	r1, #1	@,
 2000              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 382:armwave.c     ****     uint32_t data;
 2001              		.loc 1 382 16 view .LVU526
 2002 09e8 0070A0E1 		mov	r7, r0	@ fp,
 2003              	.LVL107:
 383:armwave.c     ****     uint32_t data;
 2004              		.loc 1 383 5 is_stmt 1 view .LVU527
 384:armwave.c     **** 
 2005              		.loc 1 384 5 view .LVU528
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2006              		.loc 1 388 5 view .LVU529
 2007 09ec 0030A0E1 		mov	r3, r0	@, fp
 2008 09f0 AC009FE5 		ldr	r0, .L118+8	@,
 2009              	.LVL108:
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 2010              		.loc 1 388 5 is_stmt 0 view .LVU530
 2011 09f4 FEFFFFEB 		bl	fwrite		@
 2012              	.LVL109:
 2013              		.loc 1 389 5 is_stmt 1 view .LVU531
 2014 09f8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 2015 09fc A4109FE5 		ldr	r1, .L118+12	@,
 2016 0a00 0700A0E1 		mov	r0, r7	@, fp
 2017 0a04 FEFFFFEB 		bl	fprintf		@
 2018              	.LVL110:
 390:armwave.c     ****     fputs("255\n", fp);
 2019              		.loc 1 390 5 view .LVU532
 2020 0a08 0420A0E3 		mov	r2, #4	@,
 2021 0a0c 0730A0E1 		mov	r3, r7	@, fp
 2022 0a10 0110A0E3 		mov	r1, #1	@,
 2023 0a14 90009FE5 		ldr	r0, .L118+16	@,
 2024 0a18 FEFFFFEB 		bl	fwrite		@
 2025              	.LVL111:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2026              		.loc 1 392 5 view .LVU533
 2027              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2028              		.loc 1 392 37 is_stmt 0 view .LVU534
 2029 0a1c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2030              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2031              		.loc 1 392 5 view .LVU535
 2032 0a20 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2033 0a24 180000DA 		ble	.L111		@,
 2034 0a28 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2035              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 396:armwave.c     **** 
 397:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2036              		.loc 1 397 13 view .LVU536
 2037 0a2c 7C909FE5 		ldr	r9, .L118+20	@ tmp152,
 2038              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2039              		.loc 1 392 12 view .LVU537
 2040 0a30 0050A0E3 		mov	r5, #0	@ yy,
 2041              	.LVL112:
 2042              	.L112:
 2043              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2044              		.loc 1 393 9 view .LVU538
 2045 0a34 000053E3 		cmp	r3, #0	@ _13,
 2046              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2047              		.loc 1 393 16 view .LVU539
 2048 0a38 0040A0C3 		movgt	r4, #0	@ xx,
 2049              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2050              		.loc 1 393 9 view .LVU540
 2051 0a3c 0F0000DA 		ble	.L114		@,
 2052              	.LVL113:
 2053              	.L113:
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2054              		.loc 1 394 13 is_stmt 1 discriminator 3 view .LVU541
 2055              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2056              		.loc 1 394 29 is_stmt 0 discriminator 3 view .LVU542
 2057 0a40 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2058              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2059              		.loc 1 397 13 discriminator 3 view .LVU543
 2060 0a44 0910A0E1 		mov	r1, r9	@, tmp152
 2061 0a48 0700A0E1 		mov	r0, r7	@, fp
 2062              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2063              		.loc 1 394 18 discriminator 3 view .LVU544
 2064 0a4c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2065              	.LVL114:
 2066              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU545
 2067              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2068              		.loc 1 393 58 is_stmt 0 discriminator 3 view .LVU546
 2069 0a50 014084E2 		add	r4, r4, #1	@ xx, xx,
 2070              	.LVL115:
 2071              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2072              		.loc 1 397 81 discriminator 3 view .LVU547
 2073 0a54 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2074              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2075              		.loc 1 397 61 discriminator 3 view .LVU548
 2076 0a58 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2077              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2078              		.loc 1 397 13 discriminator 3 view .LVU549
 2079 0a5c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2080 0a60 7330EFE6 		uxtb	r3, r3	@, tmp142
 2081 0a64 00C08DE5 		str	ip, [sp]	@ tmp147,
 2082 0a68 7220EFE6 		uxtb	r2, r2	@, data
 2083              	.LVL116:
 2084              		.loc 1 397 13 discriminator 3 view .LVU550
 2085 0a6c FEFFFFEB 		bl	fprintf		@
 2086              	.LVL117:
 2087              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2088              		.loc 1 393 41 discriminator 3 view .LVU551
 2089 0a70 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2090              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2091              		.loc 1 393 9 discriminator 3 view .LVU552
 2092 0a74 040053E1 		cmp	r3, r4	@ _13, xx
 2093 0a78 F0FFFFCA 		bgt	.L113		@,
 2094 0a7c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2095              	.LVL118:
 2096              	.L114:
 2097              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2098              		.loc 1 392 55 discriminator 2 view .LVU553
 2099 0a80 015085E2 		add	r5, r5, #1	@ yy, yy,
 2100              	.LVL119:
 2101              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2102              		.loc 1 392 5 discriminator 2 view .LVU554
 2103 0a84 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2104 0a88 E9FFFFBA 		blt	.L112		@,
 2105              	.LVL120:
 2106              	.L111:
 398:armwave.c     ****         }
 399:armwave.c     ****     }
 400:armwave.c     **** 
 401:armwave.c     ****     fclose(fp);
 2107              		.loc 1 401 5 is_stmt 1 view .LVU555
 2108 0a8c 0700A0E1 		mov	r0, r7	@, fp
 2109              	@ armwave.c:402: }
 402:armwave.c     **** }
 2110              		.loc 1 402 1 is_stmt 0 view .LVU556
 2111 0a90 0CD08DE2 		add	sp, sp, #12	@,,
 2112              		.cfi_def_cfa_offset 28
 2113              		@ sp needed	@
 2114 0a94 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2115              		.cfi_restore 14
 2116              		.cfi_restore 9
 2117              		.cfi_restore 8
 2118              		.cfi_restore 7
 2119              		.cfi_restore 6
 2120              		.cfi_restore 5
 2121              		.cfi_restore 4
 2122              		.cfi_def_cfa_offset 0
 2123              	.LVL121:
 2124              	@ armwave.c:401:     fclose(fp);
 401:armwave.c     **** }
 2125              		.loc 1 401 5 view .LVU557
 2126 0a98 FEFFFFEA 		b	fclose		@
 2127              	.LVL122:
 2128              	.L119:
 401:armwave.c     **** }
 2129              		.loc 1 401 5 view .LVU558
 2130              		.align	2
 2131              	.L118:
 2132 0a9c C0010000 		.word	.LC13
 2133 0aa0 00000000 		.word	g_armwave_state
 2134 0aa4 C4010000 		.word	.LC14
 2135 0aa8 C8010000 		.word	.LC15
 2136 0aac D0010000 		.word	.LC16
 2137 0ab0 D8010000 		.word	.LC17
 2138              		.cfi_endproc
 2139              	.LFE68:
 2141              		.align	2
 2142              		.global	armwave_test_init
 2143              		.syntax unified
 2144              		.arm
 2145              		.fpu vfp
 2147              	armwave_test_init:
 2148              	.LVL123:
 2149              	.LFB69:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Initialise some test functionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 408:armwave.c     **** {
 2150              		.loc 1 408 1 is_stmt 1 view -0
 2151              		.cfi_startproc
 2152              		@ args = 0, pretend = 0, frame = 0
 2153              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     test_create_gamma();
 2154              		.loc 1 409 5 view .LVU560
 2155              	.LBB18:
 2156              	.LBI18:
  34:armwave.c     **** {
 2157              		.loc 1 34 6 view .LVU561
  34:armwave.c     **** {
 2158              		.loc 1 34 6 is_stmt 0 view .LVU562
 2159              	.LBE18:
 2160              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 2161              		.loc 1 408 1 view .LVU563
 2162 0ab4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2163              		.cfi_def_cfa_offset 32
 2164              		.cfi_offset 4, -32
 2165              		.cfi_offset 5, -28
 2166              		.cfi_offset 6, -24
 2167              		.cfi_offset 7, -20
 2168              		.cfi_offset 8, -16
 2169              		.cfi_offset 9, -12
 2170              		.cfi_offset 10, -8
 2171              		.cfi_offset 14, -4
 2172 0ab8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2173              		.cfi_def_cfa_offset 56
 2174              		.cfi_offset 80, -56
 2175              		.cfi_offset 81, -52
 2176              		.cfi_offset 82, -48
 2177              		.cfi_offset 83, -44
 2178              		.cfi_offset 84, -40
 2179              		.cfi_offset 85, -36
 2180 0abc C0409FE5 		ldr	r4, .L124+20	@ ivtmp.93,
 2181              	.LBB21:
 2182              	.LBB19:
 2183              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2184              		.loc 1 40 32 view .LVU564
 2185 0ac0 2EAA9FED 		vldr.32	s20, .L124+16	@ tmp136,
 2186              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2187              		.loc 1 40 26 view .LVU565
 2188 0ac4 299B9FED 		vldr.64	d9, .L124	@ tmp151,
 2189              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2190              		.loc 1 40 49 view .LVU566
 2191 0ac8 2A8B9FED 		vldr.64	d8, .L124+8	@ tmp139,
 2192 0acc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.93,
 2193              	.LBE19:
 2194              	.LBE21:
 2195              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 2196              		.loc 1 408 1 view .LVU567
 2197 0ad0 10D04DE2 		sub	sp, sp, #16	@,,
 2198              		.cfi_def_cfa_offset 72
 2199              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 2200              		.loc 1 408 1 view .LVU568
 2201 0ad4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2202 0ad8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2203 0adc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2204 0ae0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2205 0ae4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.93,
 2206 0ae8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2207              	.LVL124:
 2208              	.L121:
 2209              	.LBB22:
 2210              	.LBB20:
  40:armwave.c     ****     }
 2211              		.loc 1 40 9 is_stmt 1 view .LVU569
 2212              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2213              		.loc 1 40 32 is_stmt 0 view .LVU570
 2214 0aec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.93
 2215              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2216              		.loc 1 40 26 view .LVU571
 2217 0af0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2218              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2219              		.loc 1 40 32 view .LVU572
 2220 0af4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2221 0af8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2222 0afc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2223              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2224              		.loc 1 40 26 view .LVU573
 2225 0b00 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2226 0b04 FEFFFFEB 		bl	pow		@
 2227              	.LVL125:
 2228              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2229              		.loc 1 40 49 view .LVU574
 2230 0b08 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2231              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2232              		.loc 1 40 24 view .LVU575
 2233 0b0c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2234 0b10 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2235 0b14 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2236              	.LVL126:
 2237              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2238              		.loc 1 39 5 view .LVU576
 2239 0b18 0A0054E1 		cmp	r4, r10	@ ivtmp.93, _39
 2240 0b1c F2FFFF1A 		bne	.L121		@,
 2241              	.LVL127:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2242              		.loc 1 39 5 view .LVU577
 2243              	.LBE20:
 2244              	.LBE22:
 410:armwave.c     **** 
 411:armwave.c     ****     // make ch1 yellowish by default
 412:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2245              		.loc 1 412 5 is_stmt 1 view .LVU578
 2246              	.LBB23:
 2247              	.LBI23:
 365:armwave.c     **** {
 2248              		.loc 1 365 6 view .LVU579
 2249              	.LBB24:
 368:armwave.c     ****         case 1:
 2250              		.loc 1 368 5 view .LVU580
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2251              		.loc 1 370 13 view .LVU581
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2252              		.loc 1 371 13 view .LVU582
 2253              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2254              		.loc 1 370 41 is_stmt 0 view .LVU583
 2255 0b20 60C09FE5 		ldr	ip, .L124+24	@ tmp142,
 2256 0b24 60409FE5 		ldr	r4, .L124+28	@ tmp143,
 2257              	.LBE24:
 2258              	.LBE23:
 2259              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 413:armwave.c     **** 
 414:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2260              		.loc 1 414 5 view .LVU584
 2261 0b28 0000A0E3 		mov	r0, #0	@ tmp147,
 2262              	.LBB28:
 2263              	.LBB25:
 2264              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 2265              		.loc 1 372 41 view .LVU585
 2266 0b2c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2267              	.LBE25:
 2268              	.LBE28:
 2269              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2270              		.loc 1 414 5 view .LVU586
 2271 0b30 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2272 0b34 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2273 0b38 00808DE5 		str	r8, [sp]	@ render_width,
 2274 0b3c 0610A0E1 		mov	r1, r6	@, tmp3
 2275 0b40 0720A0E1 		mov	r2, r7	@, nwaves
 2276              	.LBB29:
 2277              	.LBB26:
 2278              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2279              		.loc 1 370 41 view .LVU587
 2280 0b44 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 372:armwave.c     ****             break;
 2281              		.loc 1 372 13 is_stmt 1 view .LVU588
 2282              	.LBE26:
 2283              	.LBE29:
 2284              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2285              		.loc 1 414 5 is_stmt 0 view .LVU589
 2286 0b48 0630A0E1 		mov	r3, r6	@, wave_size
 2287              	.LBB30:
 2288              	.LBB27:
 2289              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 2290              		.loc 1 372 41 view .LVU590
 2291 0b4c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 373:armwave.c     ****     }
 2292              		.loc 1 373 13 is_stmt 1 view .LVU591
 2293              	.LVL128:
 373:armwave.c     ****     }
 2294              		.loc 1 373 13 is_stmt 0 view .LVU592
 2295              	.LBE27:
 2296              	.LBE30:
 2297              		.loc 1 414 5 is_stmt 1 view .LVU593
 2298 0b50 FEFFFFEB 		bl	armwave_setup_render		@
 2299              	.LVL129:
 415:armwave.c     **** 
 416:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2300              		.loc 1 416 5 view .LVU594
 2301 0b54 34109FE5 		ldr	r1, .L124+32	@,
 2302 0b58 34009FE5 		ldr	r0, .L124+36	@,
 2303              	@ armwave.c:417: }
 417:armwave.c     **** }
 2304              		.loc 1 417 1 is_stmt 0 view .LVU595
 2305 0b5c 10D08DE2 		add	sp, sp, #16	@,,
 2306              		.cfi_def_cfa_offset 56
 2307              		@ sp needed	@
 2308 0b60 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2309              		.cfi_restore 84
 2310              		.cfi_restore 85
 2311              		.cfi_restore 82
 2312              		.cfi_restore 83
 2313              		.cfi_restore 80
 2314              		.cfi_restore 81
 2315              		.cfi_def_cfa_offset 32
 2316 0b64 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2317              		.cfi_restore 14
 2318              		.cfi_restore 10
 2319              		.cfi_restore 9
 2320              		.cfi_restore 8
 2321              		.cfi_restore 7
 2322              		.cfi_restore 6
 2323              		.cfi_restore 5
 2324              		.cfi_restore 4
 2325              		.cfi_def_cfa_offset 0
 2326              	.LVL130:
 2327              	@ armwave.c:416:     printf("armwave version: %s\n", ARMWAVE_VER);
 416:armwave.c     **** }
 2328              		.loc 1 416 5 view .LVU596
 2329 0b68 FEFFFFEA 		b	printf		@
 2330              	.LVL131:
 2331              	.L125:
 2332 0b6c 0000A0E1 		.align	3
 2333              	.L124:
 2334 0b70 000000C0 		.word	-1073741824
 2335 0b74 CCCCEC3F 		.word	1072483532
 2336 0b78 00000000 		.word	0
 2337 0b7c 00E06F40 		.word	1081073664
 2338 0b80 00007F43 		.word	1132396544
 2339 0b84 FFFFFFFF 		.word	gamma_table-1
 2340 0b88 00000000 		.word	g_armwave_state
 2341 0b8c F609F406 		.word	116656630
 2342 0b90 00000000 		.word	.LC0
 2343 0b94 08000000 		.word	.LC1
 2344              		.cfi_endproc
 2345              	.LFE69:
 2347              		.align	2
 2348              		.global	armwave_test_fill_outbuf
 2349              		.syntax unified
 2350              		.arm
 2351              		.fpu vfp
 2353              	armwave_test_fill_outbuf:
 2354              	.LFB70:
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Render image to the local allocated buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_fill_outbuf()
 423:armwave.c     **** {
 2355              		.loc 1 423 1 is_stmt 1 view -0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
 424:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2360              		.loc 1 424 5 view .LVU598
 2361 0b98 04309FE5 		ldr	r3, .L127	@ tmp111,
 2362 0b9c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2363 0ba0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2364              	.LVL132:
 2365              	.L128:
 2366              		.align	2
 2367              	.L127:
 2368 0ba4 00000000 		.word	g_armwave_state
 2369              		.cfi_endproc
 2370              	.LFE70:
 2372              		.align	2
 2373              		.global	armwave_test_dump_buffer_to_ppm
 2374              		.syntax unified
 2375              		.arm
 2376              		.fpu vfp
 2378              	armwave_test_dump_buffer_to_ppm:
 2379              	.LVL133:
 2380              	.LFB71:
 425:armwave.c     **** }
 426:armwave.c     **** 
 427:armwave.c     **** /*
 428:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 429:armwave.c     ****  */
 430:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 431:armwave.c     **** {
 2381              		.loc 1 431 1 view -0
 2382              		.cfi_startproc
 2383              		@ args = 0, pretend = 0, frame = 0
 2384              		@ frame_needed = 0, uses_anonymous_args = 0
 2385              		@ link register save eliminated.
 432:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2386              		.loc 1 432 5 view .LVU600
 2387 0ba8 08309FE5 		ldr	r3, .L130	@ tmp112,
 2388 0bac 0010A0E1 		mov	r1, r0	@, fn
 2389 0bb0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2390              	.LVL134:
 2391              		.loc 1 432 5 is_stmt 0 view .LVU601
 2392 0bb4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2393              	.LVL135:
 2394              	.L131:
 2395              		.loc 1 432 5 view .LVU602
 2396              		.align	2
 2397              	.L130:
 2398 0bb8 00000000 		.word	g_armwave_state
 2399              		.cfi_endproc
 2400              	.LFE71:
 2402              		.align	2
 2403              		.global	armwave_test_fill_gdkbuf
 2404              		.syntax unified
 2405              		.arm
 2406              		.fpu vfp
 2408              	armwave_test_fill_gdkbuf:
 2409              	.LVL136:
 2410              	.LFB72:
 433:armwave.c     **** }
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render GDK buffer with test funtionry.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 439:armwave.c     **** {
 2411              		.loc 1 439 1 is_stmt 1 view -0
 2412              		.cfi_startproc
 2413              		@ args = 0, pretend = 0, frame = 0
 2414              		@ frame_needed = 0, uses_anonymous_args = 0
 2415              		@ link register save eliminated.
 440:armwave.c     ****     //PyObject *mv;
 441:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 442:armwave.c     **** 
 443:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 444:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2416              		.loc 1 444 5 view .LVU604
 445:armwave.c     ****     
 446:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 447:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2417              		.loc 1 447 5 view .LVU605
 2418              	@ armwave.c:444:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 444:armwave.c     ****     
 2419              		.loc 1 444 11 is_stmt 0 view .LVU606
 2420 0bbc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2421              	@ armwave.c:447:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2422              		.loc 1 447 5 view .LVU607
 2423 0bc0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2424              	.LVL137:
 2425              		.loc 1 447 5 view .LVU608
 2426 0bc4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2427              	.LVL138:
 2428              		.loc 1 447 5 view .LVU609
 2429              		.cfi_endproc
 2430              	.LFE72:
 2432              		.align	2
 2433              		.global	armwave_test_buffer_alloc
 2434              		.syntax unified
 2435              		.arm
 2436              		.fpu vfp
 2438              	armwave_test_buffer_alloc:
 2439              	.LVL139:
 2440              	.LFB73:
 448:armwave.c     **** }
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 452:armwave.c     ****  */
 453:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 454:armwave.c     **** {
 2441              		.loc 1 454 1 is_stmt 1 view -0
 2442              		.cfi_startproc
 2443              		@ args = 0, pretend = 0, frame = 0
 2444              		@ frame_needed = 0, uses_anonymous_args = 0
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2445              		.loc 1 455 5 view .LVU611
 2446              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2447              		.loc 1 454 1 is_stmt 0 view .LVU612
 2448 0bc8 70402DE9 		push	{r4, r5, r6, lr}	@
 2449              		.cfi_def_cfa_offset 16
 2450              		.cfi_offset 4, -16
 2451              		.cfi_offset 5, -12
 2452              		.cfi_offset 6, -8
 2453              		.cfi_offset 14, -4
 2454              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2455              		.loc 1 454 1 view .LVU613
 2456 0bcc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2457              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2458              		.loc 1 455 23 view .LVU614
 2459 0bd0 44409FE5 		ldr	r4, .L140	@ tmp128,
 2460 0bd4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2461              	.LVL140:
 2462              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2463              		.loc 1 455 7 view .LVU615
 2464 0bd8 000050E3 		cmp	r0, #0	@ _1,
 2465 0bdc 0000000A 		beq	.L134		@,
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2466              		.loc 1 456 9 is_stmt 1 view .LVU616
 2467 0be0 FEFFFFEB 		bl	free		@
 2468              	.LVL141:
 2469              	.L134:
 457:armwave.c     ****     }
 458:armwave.c     **** 
 459:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 460:armwave.c     **** 
 461:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2470              		.loc 1 461 5 view .LVU617
 2471              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2472              		.loc 1 461 75 is_stmt 0 view .LVU618
 2473 0be4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2474 0be8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2475              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2476              		.loc 1 461 40 view .LVU619
 2477 0bec 0610A0E1 		mov	r1, r6	@, nsets
 2478              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2479              		.loc 1 461 75 view .LVU620
 2480 0bf0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2481              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2482              		.loc 1 461 40 view .LVU621
 2483 0bf4 0500A0E1 		mov	r0, r5	@, _4
 2484 0bf8 FEFFFFEB 		bl	calloc		@
 2485              	.LVL142:
 2486              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 462:armwave.c     **** 
 463:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2487              		.loc 1 463 7 view .LVU622
 2488 0bfc 000050E3 		cmp	r0, #0	@ tmp124,
 2489              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2490              		.loc 1 461 38 view .LVU623
 2491 0c00 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2492              		.loc 1 463 5 is_stmt 1 view .LVU624
 2493              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 2494              		.loc 1 463 7 is_stmt 0 view .LVU625
 2495 0c04 7080BD18 		popne	{r4, r5, r6, pc}	@
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2496              		.loc 1 464 9 is_stmt 1 view .LVU626
 2497 0c08 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2498 0c0c 0620A0E1 		mov	r2, r6	@, nsets
 2499 0c10 08009FE5 		ldr	r0, .L140+4	@,
 2500              	@ armwave.c:468: }
 465:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 466:armwave.c     ****         return;
 467:armwave.c     ****     }
 468:armwave.c     **** }
 2501              		.loc 1 468 1 is_stmt 0 view .LVU627
 2502 0c14 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2503              		.cfi_restore 14
 2504              		.cfi_restore 6
 2505              		.cfi_restore 5
 2506              		.cfi_restore 4
 2507              		.cfi_def_cfa_offset 0
 2508              	.LVL143:
 2509              	@ armwave.c:464:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2510              		.loc 1 464 9 view .LVU628
 2511 0c18 FEFFFFEA 		b	printf		@
 2512              	.LVL144:
 2513              	.L141:
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2514              		.loc 1 464 9 view .LVU629
 2515              		.align	2
 2516              	.L140:
 2517 0c1c 00000000 		.word	g_armwave_state
 2518 0c20 E8010000 		.word	.LC18
 2519              		.cfi_endproc
 2520              	.LFE73:
 2522              		.align	2
 2523              		.global	armwave_fill_pixbuf_into_pybuffer
 2524              		.syntax unified
 2525              		.arm
 2526              		.fpu vfp
 2528              	armwave_fill_pixbuf_into_pybuffer:
 2529              	.LVL145:
 2530              	.LFB74:
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 472:armwave.c     ****  */
 473:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 474:armwave.c     **** {
 2531              		.loc 1 474 1 is_stmt 1 view -0
 2532              		.cfi_startproc
 2533              		@ args = 0, pretend = 0, frame = 48
 2534              		@ frame_needed = 0, uses_anonymous_args = 0
 475:armwave.c     ****     Py_buffer buffer;
 2535              		.loc 1 475 5 view .LVU631
 476:armwave.c     ****     int ret;
 2536              		.loc 1 476 5 view .LVU632
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 479:armwave.c     **** 
 480:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2537              		.loc 1 480 5 view .LVU633
 2538              	@ armwave.c:474: {
 474:armwave.c     ****     Py_buffer buffer;
 2539              		.loc 1 474 1 is_stmt 0 view .LVU634
 2540 0c24 04E02DE5 		str	lr, [sp, #-4]!	@,
 2541              		.cfi_def_cfa_offset 4
 2542              		.cfi_offset 14, -4
 2543 0c28 34D04DE2 		sub	sp, sp, #52	@,,
 2544              		.cfi_def_cfa_offset 56
 2545              	@ armwave.c:480:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2546              		.loc 1 480 11 view .LVU635
 2547 0c2c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2548 0c30 0120A0E3 		mov	r2, #1	@,
 2549 0c34 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2550              	.LVL146:
 481:armwave.c     **** 
 482:armwave.c     ****     if(ret != 0) {
 2551              		.loc 1 482 5 is_stmt 1 view .LVU636
 2552              	@ armwave.c:482:     if(ret != 0) {
 2553              		.loc 1 482 7 is_stmt 0 view .LVU637
 2554 0c38 000050E3 		cmp	r0, #0	@,
 2555 0c3c 0A00001A 		bne	.L146		@,
 483:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 484:armwave.c     ****         Py_RETURN_FALSE;
 485:armwave.c     ****     }
 486:armwave.c     **** 
 487:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 488:armwave.c     **** 
 489:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2556              		.loc 1 489 5 is_stmt 1 view .LVU638
 2557 0c40 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2558              	.LVL147:
 2559              		.loc 1 489 5 is_stmt 0 view .LVU639
 2560 0c44 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2561              	.LVL148:
 490:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 491:armwave.c     **** 
 492:armwave.c     ****     PyBuffer_Release(&buffer);
 2562              		.loc 1 492 5 is_stmt 1 view .LVU640
 2563 0c48 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2564 0c4c FEFFFFEB 		bl	PyBuffer_Release		@
 2565              	.LVL149:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     Py_RETURN_TRUE;
 2566              		.loc 1 495 5 view .LVU641
 2567              	.LBB31:
 2568              	.LBI31:
 2569              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2570              		.loc 2 456 20 view .LVU642
 2571              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2572              		.loc 2 458 21 view .LVU643
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2573              		.loc 2 459 5 view .LVU644
 2574              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2575              		.loc 2 459 18 is_stmt 0 view .LVU645
 2576 0c50 38309FE5 		ldr	r3, .L147	@ tmp126,
 2577              	.LBE32:
 2578              	.LBE31:
 2579              	@ armwave.c:495:     Py_RETURN_TRUE;
 2580              		.loc 1 495 5 view .LVU646
 2581 0c54 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2582              	.LBB34:
 2583              	.LBB33:
 2584              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2585              		.loc 2 459 18 view .LVU647
 2586 0c58 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2587 0c5c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2588 0c60 002083E5 		str	r2, [r3]	@ tmp128,
 2589              	.LBE33:
 2590              	.LBE34:
 2591              	@ armwave.c:496: }
 496:armwave.c     **** }
 2592              		.loc 1 496 1 view .LVU648
 2593 0c64 34D08DE2 		add	sp, sp, #52	@,,
 2594              		.cfi_remember_state
 2595              		.cfi_def_cfa_offset 4
 2596              		@ sp needed	@
 2597 0c68 04F09DE4 		ldr	pc, [sp], #4	@
 2598              	.LVL150:
 2599              	.L146:
 2600              		.cfi_restore_state
 483:armwave.c     ****         Py_RETURN_FALSE;
 2601              		.loc 1 483 9 is_stmt 1 view .LVU649
 2602 0c6c 20009FE5 		ldr	r0, .L147+4	@,
 2603              	.LVL151:
 483:armwave.c     ****         Py_RETURN_FALSE;
 2604              		.loc 1 483 9 is_stmt 0 view .LVU650
 2605 0c70 FEFFFFEB 		bl	puts		@
 2606              	.LVL152:
 484:armwave.c     ****     }
 2607              		.loc 1 484 9 is_stmt 1 view .LVU651
 2608              	.LBB35:
 2609              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2610              		.loc 2 456 20 view .LVU652
 2611              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2612              		.loc 2 458 21 view .LVU653
 2613              		.loc 2 459 5 view .LVU654
 2614              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2615              		.loc 2 459 18 is_stmt 0 view .LVU655
 2616 0c74 1C309FE5 		ldr	r3, .L147+8	@ tmp120,
 2617              	.LBE36:
 2618              	.LBE35:
 2619              	@ armwave.c:484:         Py_RETURN_FALSE;
 484:armwave.c     ****     }
 2620              		.loc 1 484 9 view .LVU656
 2621 0c78 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2622              	.LBB38:
 2623              	.LBB37:
 2624              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2625              		.loc 2 459 18 view .LVU657
 2626 0c7c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2627 0c80 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2628 0c84 002083E5 		str	r2, [r3]	@ tmp122,
 2629              	.LBE37:
 2630              	.LBE38:
 2631              	@ armwave.c:496: }
 2632              		.loc 1 496 1 view .LVU658
 2633 0c88 34D08DE2 		add	sp, sp, #52	@,,
 2634              		.cfi_def_cfa_offset 4
 2635              		@ sp needed	@
 2636 0c8c 04F09DE4 		ldr	pc, [sp], #4	@
 2637              	.L148:
 2638              		.align	2
 2639              	.L147:
 2640 0c90 00000000 		.word	_Py_TrueStruct
 2641 0c94 3C020000 		.word	.LC19
 2642 0c98 00000000 		.word	_Py_FalseStruct
 2643              		.cfi_endproc
 2644              	.LFE74:
 2646              		.align	2
 2647              		.global	armwave_test_create_am_sine
 2648              		.syntax unified
 2649              		.arm
 2650              		.fpu vfp
 2652              	armwave_test_create_am_sine:
 2653              	.LVL153:
 2654              	.LFB75:
 497:armwave.c     **** 
 498:armwave.c     **** /*
 499:armwave.c     ****  * Make a test AM waveform for render tests.
 500:armwave.c     ****  *
 501:armwave.c     ****  * @param   mod                     modulation depth
 502:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 503:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 504:armwave.c     ****  */
 505:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 506:armwave.c     **** {
 2655              		.loc 1 506 1 is_stmt 1 view -0
 2656              		.cfi_startproc
 2657              		@ args = 0, pretend = 0, frame = 8
 2658              		@ frame_needed = 0, uses_anonymous_args = 0
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2659              		.loc 1 507 5 view .LVU660
 508:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2660              		.loc 1 508 5 view .LVU661
 2661              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2662              		.loc 1 506 1 is_stmt 0 view .LVU662
 2663 0c9c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2664              		.cfi_def_cfa_offset 32
 2665              		.cfi_offset 4, -32
 2666              		.cfi_offset 5, -28
 2667              		.cfi_offset 6, -24
 2668              		.cfi_offset 7, -20
 2669              		.cfi_offset 8, -16
 2670              		.cfi_offset 9, -12
 2671              		.cfi_offset 10, -8
 2672              		.cfi_offset 14, -4
 2673              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2674              		.loc 1 508 38 view .LVU663
 2675 0ca0 7A7A9FED 		vldr.32	s14, .L180	@ tmp180,
 2676              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2677              		.loc 1 508 55 view .LVU664
 2678 0ca4 00529FE5 		ldr	r5, .L180+28	@ tmp250,
 2679              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2680              		.loc 1 506 1 view .LVU665
 2681 0ca8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2682              		.cfi_def_cfa_offset 80
 2683              		.cfi_offset 80, -80
 2684              		.cfi_offset 81, -76
 2685              		.cfi_offset 82, -72
 2686              		.cfi_offset 83, -68
 2687              		.cfi_offset 84, -64
 2688              		.cfi_offset 85, -60
 2689              		.cfi_offset 86, -56
 2690              		.cfi_offset 87, -52
 2691              		.cfi_offset 88, -48
 2692              		.cfi_offset 89, -44
 2693              		.cfi_offset 90, -40
 2694              		.cfi_offset 91, -36
 2695 0cac 0090A0E1 		mov	r9, r0	@ sets, sets
 2696              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2697              		.loc 1 508 38 view .LVU666
 2698 0cb0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2699              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 509:armwave.c     ****     int s, set_offset = 0;
 510:armwave.c     ****     int w, x;
 511:armwave.c     **** 
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2700              		.loc 1 512 70 view .LVU667
 2701 0cb4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2702 0cb8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2703              	.LBB41:
 2704              	.LBB42:
 2705              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2706              		.loc 1 455 23 view .LVU668
 2707 0cbc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2708              	.LVL154:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2709              		.loc 1 455 23 view .LVU669
 2710              	.LBE42:
 2711              	.LBE41:
 2712              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2713              		.loc 1 508 38 view .LVU670
 2714 0cc0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2715              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2716              		.loc 1 512 70 view .LVU671
 2717 0cc4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2718              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2719              		.loc 1 506 1 view .LVU672
 2720 0cc8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2721              	.LBB46:
 2722              	.LBB43:
 2723              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2724              		.loc 1 455 7 view .LVU673
 2725 0ccc 000050E3 		cmp	r0, #0	@ _82,
 2726              	.LBE43:
 2727              	.LBE46:
 2728              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2729              		.loc 1 506 1 view .LVU674
 2730 0cd0 08D04DE2 		sub	sp, sp, #8	@,,
 2731              		.cfi_def_cfa_offset 88
 2732              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_nsets = sets;
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2733              		.loc 1 513 44 view .LVU675
 2734 0cd4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2735              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2736              		.loc 1 512 45 view .LVU676
 2737 0cd8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2738              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2739              		.loc 1 508 38 view .LVU677
 2740 0cdc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2741              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2742              		.loc 1 508 11 view .LVU678
 2743 0ce0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2744              	.LVL155:
 509:armwave.c     ****     int w, x;
 2745              		.loc 1 509 5 is_stmt 1 view .LVU679
 510:armwave.c     **** 
 2746              		.loc 1 510 5 view .LVU680
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2747              		.loc 1 512 5 view .LVU681
 2748              		.loc 1 513 5 view .LVU682
 514:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2749              		.loc 1 514 5 view .LVU683
 2750              	.LBB47:
 2751              	.LBI41:
 453:armwave.c     **** {
 2752              		.loc 1 453 6 view .LVU684
 2753              	.LBB44:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2754              		.loc 1 455 5 view .LVU685
 2755              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2756              		.loc 1 455 7 is_stmt 0 view .LVU686
 2757 0ce4 0000000A 		beq	.L150		@,
 456:armwave.c     ****     }
 2758              		.loc 1 456 9 is_stmt 1 view .LVU687
 2759 0ce8 FEFFFFEB 		bl	free		@
 2760              	.LVL156:
 2761              	.L150:
 461:armwave.c     **** 
 2762              		.loc 1 461 5 view .LVU688
 2763              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2764              		.loc 1 461 75 is_stmt 0 view .LVU689
 2765 0cec 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2766 0cf0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2767              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2768              		.loc 1 461 40 view .LVU690
 2769 0cf4 0910A0E1 		mov	r1, r9	@, sets
 2770              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2771              		.loc 1 461 75 view .LVU691
 2772 0cf8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2773              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2774              		.loc 1 461 40 view .LVU692
 2775 0cfc 0400A0E1 		mov	r0, r4	@, _85
 2776 0d00 FEFFFFEB 		bl	calloc		@
 2777              	.LVL157:
 2778              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2779              		.loc 1 463 7 view .LVU693
 2780 0d04 000050E3 		cmp	r0, #0	@ tmp191,
 2781              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2782              		.loc 1 461 38 view .LVU694
 2783 0d08 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2784              		.loc 1 463 5 is_stmt 1 view .LVU695
 2785              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2786              		.loc 1 463 7 is_stmt 0 view .LVU696
 2787 0d0c 5A00000A 		beq	.L179		@,
 2788              	.L151:
 2789              	.LVL158:
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2790              		.loc 1 463 7 view .LVU697
 2791              	.LBE44:
 2792              	.LBE47:
 2793              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 515:armwave.c     **** 
 516:armwave.c     ****     for(s = 0; s < sets; s++) {
 2794              		.loc 1 516 5 discriminator 1 view .LVU698
 2795 0d10 000059E3 		cmp	r9, #0	@ sets,
 2796 0d14 550000DA 		ble	.L149		@,
 2797              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 518:armwave.c     ****     
 519:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 521:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 523:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     **** 
 529:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 noise += 1.0f;
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 535:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2798              		.loc 1 535 45 view .LVU699
 2799 0d18 5C8A9FED 		vldr.32	s16, .L180	@ tmp258,
 2800              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 537:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 538:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2801              		.loc 1 538 104 view .LVU700
 2802 0d1c 5CCA9FED 		vldr.32	s24, .L180+4	@ tmp259,
 2803              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2804              		.loc 1 516 5 view .LVU701
 2805 0d20 0070A0E3 		mov	r7, #0	@ set_offset,
 2806              	@ armwave.c:517:         printf("Calculating test set %d\n", s);
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2807              		.loc 1 517 9 view .LVU702
 2808 0d24 84A19FE5 		ldr	r10, .L180+32	@ tmp257,
 2809              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2810              		.loc 1 516 5 view .LVU703
 2811 0d28 0780A0E1 		mov	r8, r7	@ s, set_offset
 2812              	.LVL159:
 2813              	.L152:
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2814              		.loc 1 517 9 is_stmt 1 view .LVU704
 2815 0d2c 0810A0E1 		mov	r1, r8	@, s
 2816 0d30 0A00A0E1 		mov	r0, r10	@, tmp257
 2817 0d34 FEFFFFEB 		bl	printf		@
 2818              	.LVL160:
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2819              		.loc 1 519 9 view .LVU705
 2820              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2821              		.loc 1 519 39 is_stmt 0 view .LVU706
 2822 0d38 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2823              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2824              		.loc 1 519 9 view .LVU707
 2825 0d3c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2826 0d40 450000DA 		ble	.L153		@,
 2827              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2828              		.loc 1 521 21 view .LVU708
 2829 0d44 53CADFED 		vldr.32	s25, .L180+8	@ tmp200,
 2830              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2831              		.loc 1 535 33 view .LVU709
 2832 0d48 53BA9FED 		vldr.32	s22, .L180+12	@ tmp253,
 2833              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2834              		.loc 1 533 24 view .LVU710
 2835 0d4c 53AADFED 		vldr.32	s21, .L180+16	@ tmp254,
 2836 0d50 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2837              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2838              		.loc 1 519 15 view .LVU711
 2839 0d54 0060A0E3 		mov	r6, #0	@ w,
 2840              	.LVL161:
 2841              	.L160:
 521:armwave.c     **** 
 2842              		.loc 1 521 13 is_stmt 1 view .LVU712
 2843              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2844              		.loc 1 521 21 is_stmt 0 view .LVU713
 2845 0d58 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2846 0d5c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2847              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2848              		.loc 1 523 13 view .LVU714
 2849 0d60 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2850              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2851              		.loc 1 521 21 view .LVU715
 2852 0d64 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2853 0d68 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2854              	.LVL162:
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2855              		.loc 1 523 13 is_stmt 1 view .LVU716
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2856              		.loc 1 523 13 is_stmt 0 view .LVU717
 2857 0d6c 370000DA 		ble	.L154		@,
 2858 0d70 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2859              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2860              		.loc 1 538 113 view .LVU718
 2861 0d74 4AAA9FED 		vldr.32	s20, .L180+20	@ tmp229,
 2862 0d78 4A8ADFED 		vldr.32	s17, .L180+24	@ tmp230,
 2863              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2864              		.loc 1 523 19 view .LVU719
 2865 0d7c 0040A0E3 		mov	r4, #0	@ x,
 2866              	.LVL163:
 2867              	.L159:
 524:armwave.c     ****                 noise *= noise;
 2868              		.loc 1 524 17 is_stmt 1 view .LVU720
 2869              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2870              		.loc 1 524 28 is_stmt 0 view .LVU721
 2871 0d80 FEFFFFEB 		bl	rand		@
 2872              	.LVL164:
 2873              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2874              		.loc 1 524 35 view .LVU722
 2875 0d84 7000FFE6 		uxth	r0, r0	@ tmp201,
 2876              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2877              		.loc 1 524 45 view .LVU723
 2878 0d88 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2879 0d8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2880              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2881              		.loc 1 524 24 view .LVU724
 2882 0d90 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2883              	.LVL165:
 525:armwave.c     ****                 noise *= noise;
 2884              		.loc 1 525 17 is_stmt 1 view .LVU725
 2885              	@ armwave.c:525:                 noise *= noise;
 525:armwave.c     ****                 noise *= noise;
 2886              		.loc 1 525 23 is_stmt 0 view .LVU726
 2887 0d94 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2888              	.LVL166:
 526:armwave.c     ****                 noise *= noise;
 2889              		.loc 1 526 17 is_stmt 1 view .LVU727
 2890              	@ armwave.c:526:                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 2891              		.loc 1 526 23 is_stmt 0 view .LVU728
 2892 0d98 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2893              	.LVL167:
 527:armwave.c     **** 
 2894              		.loc 1 527 17 is_stmt 1 view .LVU729
 2895              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     **** 
 2896              		.loc 1 527 23 is_stmt 0 view .LVU730
 2897 0d9c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2898              	.LVL168:
 529:armwave.c     ****                     noise = -noise;
 2899              		.loc 1 529 17 is_stmt 1 view .LVU731
 2900              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2901              		.loc 1 529 21 is_stmt 0 view .LVU732
 2902 0da0 FEFFFFEB 		bl	rand		@
 2903              	.LVL169:
 530:armwave.c     **** 
 2904              		.loc 1 530 21 is_stmt 1 view .LVU733
 2905              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2906              		.loc 1 529 19 is_stmt 0 view .LVU734
 2907 0da4 020910E3 		tst	r0, #32768	@,
 2908              	@ armwave.c:530:                     noise = -noise;
 530:armwave.c     **** 
 2909              		.loc 1 530 27 view .LVU735
 2910 0da8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2911              	.LVL170:
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2912              		.loc 1 532 17 is_stmt 1 view .LVU736
 533:armwave.c     **** 
 2913              		.loc 1 533 17 view .LVU737
 2914              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2915              		.loc 1 533 27 is_stmt 0 view .LVU738
 2916 0dac FEFFFFEB 		bl	rand		@
 2917              	.LVL171:
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2918              		.loc 1 535 17 is_stmt 1 view .LVU739
 2919              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2920              		.loc 1 535 45 is_stmt 0 view .LVU740
 2921 0db0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2922              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2923              		.loc 1 535 33 view .LVU741
 2924 0db4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2925              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2926              		.loc 1 535 45 view .LVU742
 2927 0db8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2928              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2929              		.loc 1 535 33 view .LVU743
 2930 0dbc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2931              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2932              		.loc 1 535 45 view .LVU744
 2933 0dc0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2934              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2935              		.loc 1 535 33 view .LVU745
 2936 0dc4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2937              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2938              		.loc 1 533 34 view .LVU746
 2939 0dc8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2940              	.LVL172:
 2941              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2942              		.loc 1 533 44 view .LVU747
 2943 0dcc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2944 0dd0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2945              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2946              		.loc 1 533 24 view .LVU748
 2947 0dd4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2948              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2949              		.loc 1 535 77 view .LVU749
 2950 0dd8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2951              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2952              		.loc 1 535 22 view .LVU750
 2953 0ddc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2954 0de0 FEFFFFEB 		bl	sin		@
 2955              	.LVL173:
 2956              		.loc 1 538 17 is_stmt 1 view .LVU751
 2957              	@ armwave.c:532:                 noise += 1.0f;
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2958              		.loc 1 532 23 is_stmt 0 view .LVU752
 2959 0de4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2960              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2961              		.loc 1 538 104 view .LVU753
 2962 0de8 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2963              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2964              		.loc 1 535 98 view .LVU754
 2965 0dec E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2966              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2967              		.loc 1 535 87 view .LVU755
 2968 0df0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2969              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2970              		.loc 1 535 98 view .LVU756
 2971 0df4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2972              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2973              		.loc 1 535 19 view .LVU757
 2974 0df8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2975              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2976              		.loc 1 538 113 view .LVU758
 2977 0dfc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2978 0e00 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2979 0e04 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2980 0e08 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2981 0e0c 050000DA 		ble	.L156		@,
 2982              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2983              		.loc 1 538 104 discriminator 1 view .LVU759
 2984 0e10 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2985 0e14 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2986 0e18 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2987 0e1c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2988 0e20 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2989 0e24 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2990              	.L156:
 2991              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2992              		.loc 1 538 57 discriminator 12 view .LVU760
 2993 0e28 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2994              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2995              		.loc 1 538 102 discriminator 12 view .LVU761
 2996 0e2c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2997 0e30 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2998 0e34 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2999              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3000              		.loc 1 523 58 discriminator 12 view .LVU762
 3001 0e38 014084E2 		add	r4, r4, #1	@ x, x,
 3002              	.LVL174:
 3003              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3004              		.loc 1 538 102 discriminator 12 view .LVU763
 3005 0e3c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3006              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3007              		.loc 1 523 43 discriminator 12 view .LVU764
 3008 0e40 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3009              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3010              		.loc 1 523 13 discriminator 12 view .LVU765
 3011 0e44 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3012 0e48 CCFFFFCA 		bgt	.L159		@,
 3013 0e4c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3014              	.LVL175:
 3015              	.L154:
 3016              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3017              		.loc 1 519 48 discriminator 2 view .LVU766
 3018 0e50 016086E2 		add	r6, r6, #1	@ w, w,
 3019              	.LVL176:
 3020              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3021              		.loc 1 519 9 discriminator 2 view .LVU767
 3022 0e54 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3023 0e58 BEFFFFBA 		blt	.L160		@,
 3024              	.LVL177:
 3025              	.L153:
 539:armwave.c     ****             }
 540:armwave.c     ****         }
 541:armwave.c     **** 
 542:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3026              		.loc 1 542 9 is_stmt 1 discriminator 2 view .LVU768
 3027              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3028              		.loc 1 542 46 is_stmt 0 discriminator 2 view .LVU769
 3029 0e5c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3030              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 3031              		.loc 1 516 27 discriminator 2 view .LVU770
 3032 0e60 018088E2 		add	r8, r8, #1	@ s, s,
 3033              	.LVL178:
 3034              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 3035              		.loc 1 516 5 discriminator 2 view .LVU771
 3036 0e64 080059E1 		cmp	r9, r8	@ sets, s
 3037              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3038              		.loc 1 542 20 discriminator 2 view .LVU772
 3039 0e68 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3040              	.LVL179:
 3041              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 3042              		.loc 1 516 5 discriminator 2 view .LVU773
 3043 0e6c AEFFFF1A 		bne	.L152		@,
 3044              	.LVL180:
 3045              	.L149:
 3046              	@ armwave.c:544: }
 543:armwave.c     ****     }
 544:armwave.c     **** }
 3047              		.loc 1 544 1 view .LVU774
 3048 0e70 08D08DE2 		add	sp, sp, #8	@,,
 3049              		.cfi_remember_state
 3050              		.cfi_def_cfa_offset 80
 3051              		@ sp needed	@
 3052 0e74 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3053              		.cfi_restore 90
 3054              		.cfi_restore 91
 3055              		.cfi_restore 88
 3056              		.cfi_restore 89
 3057              		.cfi_restore 86
 3058              		.cfi_restore 87
 3059              		.cfi_restore 84
 3060              		.cfi_restore 85
 3061              		.cfi_restore 82
 3062              		.cfi_restore 83
 3063              		.cfi_restore 80
 3064              		.cfi_restore 81
 3065              		.cfi_def_cfa_offset 32
 3066              	.LVL181:
 3067              		.loc 1 544 1 view .LVU775
 3068 0e78 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3069              	.LVL182:
 3070              	.L179:
 3071              		.cfi_restore_state
 3072              	.LBB48:
 3073              	.LBB45:
 464:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3074              		.loc 1 464 9 is_stmt 1 view .LVU776
 3075 0e7c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3076 0e80 0920A0E1 		mov	r2, r9	@, sets
 3077 0e84 28009FE5 		ldr	r0, .L180+36	@,
 3078 0e88 FEFFFFEB 		bl	printf		@
 3079              	.LVL183:
 466:armwave.c     ****     }
 3080              		.loc 1 466 9 view .LVU777
 3081 0e8c 9FFFFFEA 		b	.L151		@
 3082              	.L181:
 3083              		.align	2
 3084              	.L180:
 3085 0e90 0000803F 		.word	1065353216
 3086 0e94 00007F43 		.word	1132396544
 3087 0e98 0000003F 		.word	1056964608
 3088 0e9c C3F5C840 		.word	1086911939
 3089 0ea0 38FFC74A 		.word	1254620984
 3090 0ea4 0000FE42 		.word	1123942400
 3091 0ea8 00000043 		.word	1124073472
 3092 0eac 00000000 		.word	g_armwave_state
 3093 0eb0 90020000 		.word	.LC20
 3094 0eb4 E8010000 		.word	.LC18
 3095              	.LBE45:
 3096              	.LBE48:
 3097              		.cfi_endproc
 3098              	.LFE75:
 3100              		.align	2
 3101              		.global	armwave_cleanup
 3102              		.syntax unified
 3103              		.arm
 3104              		.fpu vfp
 3106              	armwave_cleanup:
 3107              	.LFB76:
 545:armwave.c     **** 
 546:armwave.c     **** /*
 547:armwave.c     ****  * Make a test square waveform.
 548:armwave.c     ****  *
 549:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 550:armwave.c     ****  */
 551:armwave.c     **** #if 0
 552:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 553:armwave.c     **** {
 554:armwave.c     ****     uint8_t v;
 555:armwave.c     ****     float noise, xnoise;
 556:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 557:armwave.c     ****     int w, x;
 558:armwave.c     **** 
 559:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 560:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 561:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 562:armwave.c     ****             noise *= noise;
 563:armwave.c     ****             noise *= noise;
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     **** 
 566:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 567:armwave.c     ****                 noise = -noise;
 568:armwave.c     **** 
 569:armwave.c     ****             //noise += 1.0f;
 570:armwave.c     **** 
 571:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 573:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 574:armwave.c     ****                 new_level = 0.8f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 576:armwave.c     ****                 new_level = 0.2f;
 577:armwave.c     ****             } else {
 578:armwave.c     ****                 new_level = 0.8f;
 579:armwave.c     ****             }
 580:armwave.c     **** 
 581:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 582:armwave.c     **** 
 583:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 584:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 585:armwave.c     ****         }
 586:armwave.c     ****     }
 587:armwave.c     **** }
 588:armwave.c     **** #endif
 589:armwave.c     **** 
 590:armwave.c     **** /*
 591:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 592:armwave.c     ****  */
 593:armwave.c     **** void armwave_cleanup()
 594:armwave.c     **** {
 3108              		.loc 1 594 1 view -0
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 0
 3111              		@ frame_needed = 0, uses_anonymous_args = 0
 595:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3112              		.loc 1 595 5 view .LVU779
 3113              	@ armwave.c:594: {
 594:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3114              		.loc 1 594 1 is_stmt 0 view .LVU780
 3115 0eb8 10402DE9 		push	{r4, lr}	@
 3116              		.cfi_def_cfa_offset 8
 3117              		.cfi_offset 4, -8
 3118              		.cfi_offset 14, -4
 3119              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 3120              		.loc 1 595 25 view .LVU781
 3121 0ebc 34409FE5 		ldr	r4, .L184	@ tmp114,
 3122              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 3123              		.loc 1 595 5 view .LVU782
 3124 0ec0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3125 0ec4 FEFFFFEB 		bl	free		@
 3126              	.LVL184:
 596:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3127              		.loc 1 596 5 is_stmt 1 view .LVU783
 3128 0ec8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3129 0ecc FEFFFFEB 		bl	free		@
 3130              	.LVL185:
 597:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3131              		.loc 1 597 5 view .LVU784
 3132 0ed0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3133 0ed4 FEFFFFEB 		bl	free		@
 3134              	.LVL186:
 598:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3135              		.loc 1 598 5 view .LVU785
 3136 0ed8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3137 0edc FEFFFFEB 		bl	free		@
 3138              	.LVL187:
 599:armwave.c     **** 
 600:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3139              		.loc 1 600 5 view .LVU786
 3140              	@ armwave.c:600:     g_armwave_state.out_pixbuf = NULL;
 3141              		.loc 1 600 32 is_stmt 0 view .LVU787
 3142 0ee0 0030A0E3 		mov	r3, #0	@ tmp123,
 3143 0ee4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 601:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3144              		.loc 1 601 5 is_stmt 1 view .LVU788
 3145              	@ armwave.c:601:     g_armwave_state.ch1_buffer = NULL;
 3146              		.loc 1 601 32 is_stmt 0 view .LVU789
 3147 0ee8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 602:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3148              		.loc 1 602 5 is_stmt 1 view .LVU790
 3149              	@ armwave.c:602:     g_armwave_state.xcoord_to_xpixel = NULL;
 3150              		.loc 1 602 38 is_stmt 0 view .LVU791
 3151 0eec 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3152              		.loc 1 603 5 is_stmt 1 view .LVU792
 3153              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = NULL;
 3154              		.loc 1 603 38 is_stmt 0 view .LVU793
 3155 0ef0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3156              	@ armwave.c:604: }
 604:armwave.c     **** }
 3157              		.loc 1 604 1 view .LVU794
 3158 0ef4 1080BDE8 		pop	{r4, pc}	@
 3159              	.L185:
 3160              		.align	2
 3161              	.L184:
 3162 0ef8 00000000 		.word	g_armwave_state
 3163              		.cfi_endproc
 3164              	.LFE76:
 3166              		.comm	gamma_table,256,4
 3167              		.comm	g_armwave_state,136,4
 3168              		.section	.rodata
 3169              		.align	2
 3170              		.set	.LANCHOR0,. + 0
 3173              	__PRETTY_FUNCTION__.17096:
 3174 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3174      6176655F 
 3174      66696C6C 
 3174      5F706978 
 3174      6275665F 
 3175 001b 00       		.space	1
 3178              	__PRETTY_FUNCTION__.17123:
 3179 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3179      6176655F 
 3179      73657475 
 3179      705F7265 
 3179      6E646572 
 3180 0031 000000   		.space	3
 3183              	__PRETTY_FUNCTION__.17130:
 3184 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3184      6176655F 
 3184      7365745F 
 3184      77617665 
 3184      5F706F69 
 3185 004d 000000   		.space	3
 3188              	__PRETTY_FUNCTION__.17137:
 3189 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3189      6176655F 
 3189      7365745F 
 3189      77617665 
 3189      5F706F69 
 3190              		.section	.rodata.str1.4,"aMS",%progbits,1
 3191              		.align	2
 3192              	.LC0:
 3193 0000 76302E30 		.ascii	"v0.0.1\000"
 3193      2E3100
 3194 0007 00       		.space	1
 3195              	.LC1:
 3196 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3196      61766520 
 3196      76657273 
 3196      696F6E3A 
 3196      2025730A 
 3197 001d 000000   		.space	3
 3198              	.LC2:
 3199 0020 61726D77 		.ascii	"armwave.c\000"
 3199      6176652E 
 3199      6300
 3200 002a 0000     		.space	2
 3201              	.LC3:
 3202 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3202      62756666 
 3202      65722021 
 3202      3D204E55 
 3202      4C4C00
 3203 003f 00       		.space	1
 3204              	.LC4:
 3205 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3205      20653D25 
 3205      6420773D 
 3205      25642077 
 3205      733D2564 
 3206              	.LC5:
 3207 006c 73746172 		.ascii	"start_point < end_point\000"
 3207      745F706F 
 3207      696E7420 
 3207      3C20656E 
 3207      645F706F 
 3208              	.LC6:
 3209 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3209      7566665F 
 3209      73697A65 
 3209      3D25642C 
 3209      20636D70 
 3210 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3210      5F776964 
 3210      74683D25 
 3210      642C2077 
 3210      6176655F 
 3211 00e1 000000   		.space	3
 3212              	.LC7:
 3213 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3213      6D776176 
 3213      655F7374 
 3213      6174652E 
 3213      6368315F 
 3214 0107 00       		.space	1
 3215              	.LC8:
 3216 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3216      6D776176 
 3216      655F7374 
 3216      6174652E 
 3216      78636F6F 
 3217 0131 000000   		.space	3
 3218              	.LC9:
 3219 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3219      3A203078 
 3219      25303878 
 3219      20307825 
 3219      30387820 
 3220              	.LC10:
 3221 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3221      5F627566 
 3221      66657220 
 3221      213D204E 
 3221      554C4C00 
 3222              	.LC11:
 3223 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3223      6176655F 
 3223      7365745F 
 3223      77617665 
 3223      5F706F69 
 3224 019f 78636565 		.ascii	"xceeded\000"
 3224      64656400 
 3225 01a7 00       		.space	1
 3226              	.LC12:
 3227 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3227      5F627566 
 3227      6665725F 
 3227      70747220 
 3227      213D2030 
 3228 01bd 000000   		.space	3
 3229              	.LC13:
 3230 01c0 776200   		.ascii	"wb\000"
 3231 01c3 00       		.space	1
 3232              	.LC14:
 3233 01c4 50330A00 		.ascii	"P3\012\000"
 3234              	.LC15:
 3235 01c8 25642025 		.ascii	"%d %d\012\000"
 3235      640A00
 3236 01cf 00       		.space	1
 3237              	.LC16:
 3238 01d0 3235350A 		.ascii	"255\012\000"
 3238      00
 3239 01d5 000000   		.space	3
 3240              	.LC17:
 3241 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3241      25336420 
 3241      2533640A 
 3241      00
 3242 01e5 000000   		.space	3
 3243              	.LC18:
 3244 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3244      6176655F 
 3244      74657374 
 3244      5F627566 
 3244      6665725F 
 3245 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3245      20627566 
 3245      66657220 
 3245      28256420 
 3245      62797465 
 3246              	.LC19:
 3247 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3247      6176655F 
 3247      66696C6C 
 3247      5F706978 
 3247      6275665F 
 3248 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3248      20666169 
 3248      6C65642C 
 3248      20726574 
 3248      75726E69 
 3249 028e 0000     		.space	2
 3250              	.LC20:
 3251 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3251      756C6174 
 3251      696E6720 
 3251      74657374 
 3251      20736574 
 3252              		.text
 3253              	.Letext0:
 3254              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3255              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3256              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3257              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3258              		.file 7 "/usr/include/stdio.h"
 3259              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3260              		.file 9 "/usr/include/errno.h"
 3261              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3262              		.file 11 "/usr/include/unistd.h"
 3263              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3264              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3265              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3266              		.file 15 "/usr/include/math.h"
 3267              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3268              		.file 17 "/usr/include/time.h"
 3269              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3270              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3271              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3272              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3273              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3274              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3275              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3276              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3277              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3278              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3279              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3280              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3281              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3282              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3283              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3284              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3285              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3286              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3287              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3288              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3289              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3290              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3291              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3292              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3293              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3294              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3295              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3296              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3297              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3298              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3299              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3300              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3301              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3302              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3303              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3304              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3305              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3306              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3307              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3308              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3309              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3310              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3311              		.file 60 "/usr/local/include/python3.8/context.h"
 3312              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3313              		.file 62 "/usr/local/include/python3.8/code.h"
 3314              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3315              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3316              		.file 65 "/usr/local/include/python3.8/import.h"
 3317              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3318              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3319              		.file 68 "/usr/include/malloc.h"
 3320              		.file 69 "armwave.h"
 3321              		.file 70 "/usr/include/stdlib.h"
 3322              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3323              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3324              		.file 73 "<built-in>"
 3325              		.file 74 "/usr/include/assert.h"
