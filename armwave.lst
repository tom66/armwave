   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=94 --param ggc-min-heapsize=119998
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	rgb2yuv
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	rgb2yuv:
  83              	.LVL0:
  84              	.LFB57:
  85              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #ifndef NO_PYTHON
  12:armwave.c     **** #include <Python.h>
  13:armwave.c     **** #endif
  14:armwave.c     **** 
  15:armwave.c     **** #include <sys/ipc.h>
  16:armwave.c     **** #include <sys/shm.h>
  17:armwave.c     **** 
  18:armwave.c     **** #include <X11/Xlib.h>
  19:armwave.c     **** #include <X11/Xutil.h>
  20:armwave.c     **** #include <X11/extensions/XShm.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include <assert.h>
  23:armwave.c     **** #include <ctype.h>
  24:armwave.c     **** #include <stdio.h>
  25:armwave.c     **** #include <stdint.h>
  26:armwave.c     **** #include <stdlib.h>
  27:armwave.c     **** #include <stdbool.h>
  28:armwave.c     **** #include <malloc.h>
  29:armwave.c     **** #include <string.h>
  30:armwave.c     **** #include <math.h>
  31:armwave.c     **** #include <unistd.h>
  32:armwave.c     **** 
  33:armwave.c     **** #include <X11/Xlib.h>
  34:armwave.c     **** #include <X11/Xutil.h>
  35:armwave.c     **** #include <X11/Xatom.h>
  36:armwave.c     **** #include <X11/extensions/Xv.h>
  37:armwave.c     **** #include <X11/extensions/Xvlib.h>
  38:armwave.c     **** #include <X11/extensions/XShm.h>
  39:armwave.c     **** 
  40:armwave.c     **** #include <time.h>
  41:armwave.c     **** 
  42:armwave.c     **** #include "armwave.h"
  43:armwave.c     **** 
  44:armwave.c     **** #define ARMWAVE_VER  "v0.2.0"
  45:armwave.c     **** 
  46:armwave.c     **** struct armwave_state_t g_armwave_state;
  47:armwave.c     **** struct armwave_yuv_t g_yuv_lut[256];
  48:armwave.c     **** 
  49:armwave.c     **** const struct armwave_rgb_t g_fill_black = { 0, 0, 0 };
  50:armwave.c     **** 
  51:armwave.c     **** /*
  52:armwave.c     ****  * X11 properties.  Should these be commoned into one struct?
  53:armwave.c     ****  */ 
  54:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims;
  55:armwave.c     **** struct armwave_canvas_dims_t g_canvas_dims_last;
  56:armwave.c     **** 
  57:armwave.c     **** int g_frame_num = 0, g_n_test_waves = 8;
  58:armwave.c     **** Window g_window = 0;
  59:armwave.c     **** Display *g_dpy;
  60:armwave.c     **** int g_xv_port;
  61:armwave.c     **** XVisualInfo	g_vinfo;
  62:armwave.c     **** GC g_gc = NULL;
  63:armwave.c     **** XvImage *g_yuv_image = NULL;
  64:armwave.c     **** XShmSegmentInfo g_yuv_shminfo;
  65:armwave.c     **** XColor g_grat_colour, g_grat_subcolour; 
  66:armwave.c     **** XSetWindowAttributes g_xswa;
  67:armwave.c     ****     
  68:armwave.c     **** struct MwmHints {
  69:armwave.c     ****     unsigned long flags;
  70:armwave.c     ****     unsigned long functions;
  71:armwave.c     ****     unsigned long decorations;
  72:armwave.c     ****     long input_mode;
  73:armwave.c     ****     unsigned long status;
  74:armwave.c     **** };
  75:armwave.c     **** 
  76:armwave.c     **** enum {
  77:armwave.c     ****     MWM_HINTS_FUNCTIONS = (1L << 0),
  78:armwave.c     ****     MWM_HINTS_DECORATIONS =  (1L << 1),
  79:armwave.c     **** 
  80:armwave.c     ****     MWM_FUNC_ALL = (1L << 0),
  81:armwave.c     ****     MWM_FUNC_RESIZE = (1L << 1),
  82:armwave.c     ****     MWM_FUNC_MOVE = (1L << 2),
  83:armwave.c     ****     MWM_FUNC_MINIMIZE = (1L << 3),
  84:armwave.c     ****     MWM_FUNC_MAXIMIZE = (1L << 4),
  85:armwave.c     ****     MWM_FUNC_CLOSE = (1L << 5)
  86:armwave.c     **** };
  87:armwave.c     **** 
  88:armwave.c     **** static void plot_pixel_yuv(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  89:armwave.c     **** static void plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct armwave_yuv_t *yuv_in);
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * Helper function to convert 8-bit RGB to 8-bit YUV values.
  93:armwave.c     ****  */
  94:armwave.c     **** void rgb2yuv(struct armwave_rgb_t *rgb_in, struct armwave_yuv_t *yuv_out)
  95:armwave.c     **** {
  86              		.loc 1 95 1 view -0
  87              		.cfi_startproc
  88              		@ args = 0, pretend = 0, frame = 0
  89              		@ frame_needed = 0, uses_anonymous_args = 0
  90              		@ link register save eliminated.
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
  91              		.loc 1 96 5 view .LVU1
  92              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  93              		.loc 1 96 41 is_stmt 0 view .LVU2
  94 0000 0030D0E5 		ldrb	r3, [r0]	@ zero_extendqisi2	@ rgb_in_32(D)->r, rgb_in_32(D)->r
  95              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96              		.loc 1 96 33 view .LVU3
  97 0004 254A9FED 		vldr.32	s8, .L3	@ tmp146,
  98              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
  99              		.loc 1 97 22 view .LVU4
 100 0008 257ADFED 		vldr.32	s15, .L3+4	@ tmp160,
 101              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 102              		.loc 1 96 22 view .LVU5
 103 000c 257A9FED 		vldr.32	s14, .L3+8	@ tmp148,
 104              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 105              		.loc 1 96 41 view .LVU6
 106 0010 103A05EE 		vmov	s10, r3	@ int	@ rgb_in_32(D)->r, rgb_in_32(D)->r
 107              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 108              		.loc 1 96 64 view .LVU7
 109 0014 0130D0E5 		ldrb	r3, [r0, #1]	@ zero_extendqisi2	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 110              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 111              		.loc 1 97 33 view .LVU8
 112 0018 236ADFED 		vldr.32	s13, .L3+12	@ tmp158,
 113              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 114              		.loc 1 97 79 view .LVU9
 115 001c 234ADFED 		vldr.32	s9, .L3+16	@ tmp165,
 116              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 117              		.loc 1 96 33 view .LVU10
 118 0020 C55AB8EE 		vcvt.f32.s32	s10, s10	@ _3, rgb_in_32(D)->r
 119              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 120              		.loc 1 96 64 view .LVU11
 121 0024 903A05EE 		vmov	s11, r3	@ int	@ rgb_in_32(D)->g, rgb_in_32(D)->g
 122              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 123              		.loc 1 96 87 view .LVU12
 124 0028 0230D0E5 		ldrb	r3, [r0, #2]	@ zero_extendqisi2	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 125              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 126              		.loc 1 96 56 view .LVU13
 127 002c 202ADFED 		vldr.32	s5, .L3+20	@ tmp150,
 128              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
 129              		.loc 1 97 56 view .LVU14
 130 0030 203A9FED 		vldr.32	s6, .L3+24	@ tmp162,
 131              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 132              		.loc 1 96 56 view .LVU15
 133 0034 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _8, rgb_in_32(D)->g
 134              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 135              		.loc 1 96 87 view .LVU16
 136 0038 103A06EE 		vmov	s12, r3	@ int	@ rgb_in_32(D)->b, rgb_in_32(D)->b
 137              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 138              		.loc 1 98 56 view .LVU17
 139 003c 1E3ADFED 		vldr.32	s7, .L3+28	@ tmp174,
 140              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 141              		.loc 1 96 22 view .LVU18
 142 0040 047A05EE 		vmla.f32	s14, s10, s8	@ tmp147, _3, tmp146
 143              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 144              		.loc 1 97 22 view .LVU19
 145 0044 674AB0EE 		vmov.f32	s8, s15	@ tmp159, tmp160
 146              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 147              		.loc 1 96 79 view .LVU20
 148 0048 C66AB8EE 		vcvt.f32.s32	s12, s12	@ _13, rgb_in_32(D)->b
 149              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 150              		.loc 1 98 22 view .LVU21
 151 004c 247A45EE 		vmla.f32	s15, s10, s9	@ tmp171, _3, tmp165
 152              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 153              		.loc 1 97 22 view .LVU22
 154 0050 264A05EE 		vmla.f32	s8, s10, s13	@ tmp159, _3, tmp158
 155              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 156              		.loc 1 98 79 view .LVU23
 157 0054 195A9FED 		vldr.32	s10, .L3+32	@ tmp177,
 158              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 159              		.loc 1 96 46 view .LVU24
 160 0058 A27A05EE 		vmla.f32	s14, s11, s5	@ tmp151, _8, tmp150
 161              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 162              		.loc 1 98 46 view .LVU25
 163 005c E37A45EE 		vmls.f32	s15, s11, s7	@ tmp175, _8, tmp174
 164              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 165              		.loc 1 97 22 view .LVU26
 166 0060 446AF0EE 		vmov.f32	s13, s8	@ tmp159, tmp159
 167              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 168              		.loc 1 96 79 view .LVU27
 169 0064 164A9FED 		vldr.32	s8, .L3+36	@ tmp153,
 170              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 171              		.loc 1 97 46 view .LVU28
 172 0068 C36A45EE 		vmls.f32	s13, s11, s6	@ tmp163, _8, tmp162
 173              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 174              		.loc 1 96 69 view .LVU29
 175 006c 047A06EE 		vmla.f32	s14, s12, s8	@ tmp154, _13, tmp153
 176              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 177              		.loc 1 98 69 view .LVU30
 178 0070 457A46EE 		vmls.f32	s15, s12, s10	@ tmp178, _13, tmp177
 179              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 180              		.loc 1 97 69 view .LVU31
 181 0074 246A46EE 		vmla.f32	s13, s12, s9	@ tmp166, _13, tmp165
 182              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 183              		.loc 1 96 16 view .LVU32
 184 0078 C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp155, tmp154
 185              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 186              		.loc 1 98 16 view .LVU33
 187 007c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 188              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 189              		.loc 1 96 16 view .LVU34
 190 0080 102A17EE 		vmov	r2, s14	@ int	@ tmp155, tmp155
 191              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 192              		.loc 1 97 16 view .LVU35
 193 0084 E67ABCEE 		vcvt.u32.f32	s14, s13	@ tmp167, tmp166
 194              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 195              		.loc 1 98 16 view .LVU36
 196 0088 903A17EE 		vmov	r3, s15	@ int	@ tmp179, tmp179
 197              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb_in->b);
 198              		.loc 1 96 16 view .LVU37
 199 008c 0020C1E5 		strb	r2, [r1]	@ tmp155, yuv_out_33(D)->y
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 200              		.loc 1 97 5 is_stmt 1 view .LVU38
 201              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
 202              		.loc 1 98 16 is_stmt 0 view .LVU39
 203 0090 0230C1E5 		strb	r3, [r1, #2]	@ tmp179, yuv_out_33(D)->v
 204              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 205              		.loc 1 97 16 view .LVU40
 206 0094 100A17EE 		vmov	r0, s14	@ int	@ tmp167, tmp167
 207              	.LVL1:
  97:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 208              		.loc 1 97 16 view .LVU41
 209 0098 0100C1E5 		strb	r0, [r1, #1]	@ tmp167, yuv_out_33(D)->u
 210              		.loc 1 98 5 is_stmt 1 view .LVU42
 211              	@ armwave.c:99: }
  99:armwave.c     **** }
 212              		.loc 1 99 1 is_stmt 0 view .LVU43
 213 009c 1EFF2FE1 		bx	lr	@
 214              	.L4:
 215              		.align	2
 216              	.L3:
 217 00a0 6F12833E 		.word	1048777327
 218 00a4 00000043 		.word	1124073472
 219 00a8 00008041 		.word	1098907648
 220 00ac 508D17BE 		.word	-1105752752
 221 00b0 9CC4E03E 		.word	1054917788
 222 00b4 2506013F 		.word	1057031717
 223 00b8 F4FD943E 		.word	1049951732
 224 00bc 7F6ABC3E 		.word	1052535423
 225 00c0 7368913D 		.word	1032939635
 226 00c4 F0A7C63D 		.word	1036429296
 227              		.cfi_endproc
 228              	.LFE57:
 230              		.align	2
 231              		.global	hsv2rgb
 232              		.syntax unified
 233              		.arm
 234              		.fpu vfp
 236              	hsv2rgb:
 237              	.LVL2:
 238              	.LFB58:
 100:armwave.c     **** 
 101:armwave.c     **** /*
 102:armwave.c     ****  * Helper function to convert 8-bit HSV to 8-bit RGB.
 103:armwave.c     ****  *
 104:armwave.c     ****  * https://stackoverflow.com/questions/3018313/algorithm-to-convert-rgb-to-hsv-and-hsv-to-rgb-in-ra
 105:armwave.c     ****  */
 106:armwave.c     **** void hsv2rgb(struct armwave_hsv_t *hsv_in, struct armwave_rgb_t *rgb_out)
 107:armwave.c     **** {
 239              		.loc 1 107 1 is_stmt 1 view -0
 240              		.cfi_startproc
 241              		@ args = 0, pretend = 0, frame = 0
 242              		@ frame_needed = 0, uses_anonymous_args = 0
 108:armwave.c     ****     unsigned char region, remainder, p, q, t;
 243              		.loc 1 108 5 view .LVU45
 109:armwave.c     **** 
 110:armwave.c     ****     if (hsv_in->s == 0)
 244              		.loc 1 110 5 view .LVU46
 245              	@ armwave.c:107: {
 107:armwave.c     ****     unsigned char region, remainder, p, q, t;
 246              		.loc 1 107 1 is_stmt 0 view .LVU47
 247 00c8 30402DE9 		push	{r4, r5, lr}	@
 248              		.cfi_def_cfa_offset 12
 249              		.cfi_offset 4, -12
 250              		.cfi_offset 5, -8
 251              		.cfi_offset 14, -4
 252              	@ armwave.c:110:     if (hsv_in->s == 0)
 253              		.loc 1 110 15 view .LVU48
 254 00cc 01E0D0E5 		ldrb	lr, [r0, #1]	@ zero_extendqisi2	@ _1, hsv_in_29(D)->s
 255 00d0 02C0D0E5 		ldrb	ip, [r0, #2]	@ zero_extendqisi2	@ pretmp_65, hsv_in_29(D)->v
 256              	@ armwave.c:110:     if (hsv_in->s == 0)
 257              		.loc 1 110 8 view .LVU49
 258 00d4 00005EE3 		cmp	lr, #0	@ _1,
 259 00d8 2100000A 		beq	.L16		@,
 111:armwave.c     ****     {
 112:armwave.c     ****         rgb_out->r = hsv_in->v;
 113:armwave.c     ****         rgb_out->g = hsv_in->v;
 114:armwave.c     ****         rgb_out->b = hsv_in->v;
 115:armwave.c     ****         return;
 116:armwave.c     ****     }
 117:armwave.c     **** 
 118:armwave.c     ****     region = hsv_in->h / 43;
 260              		.loc 1 118 5 is_stmt 1 view .LVU50
 261              	@ armwave.c:118:     region = hsv_in->h / 43;
 262              		.loc 1 118 20 is_stmt 0 view .LVU51
 263 00dc 0040D0E5 		ldrb	r4, [r0]	@ zero_extendqisi2	@ _3, hsv_in_29(D)->h
 264              	@ armwave.c:118:     region = hsv_in->h / 43;
 265              		.loc 1 118 12 view .LVU52
 266 00e0 EC209FE5 		ldr	r2, .L17	@ tmp149,
 267              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 268              		.loc 1 119 38 view .LVU53
 269 00e4 2A30E0E3 		mvn	r3, #42	@ tmp151,
 270              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 120:armwave.c     **** 
 121:armwave.c     ****     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 271              		.loc 1 121 27 view .LVU54
 272 00e8 FF006EE2 		rsb	r0, lr, #255	@ tmp160, _1,
 273              	.LVL3:
 274              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 275              		.loc 1 118 12 view .LVU55
 276 00ec 925482E0 		umull	r5, r2, r2, r4	@ tmp192, tmp148, tmp149, _3
 277              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 278              		.loc 1 121 20 view .LVU56
 279 00f0 9C0000E0 		mul	r0, ip, r0	@ tmp161, pretmp_65, tmp160
 280              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 281              		.loc 1 118 12 view .LVU57
 282 00f4 A221A0E1 		lsr	r2, r2, #3	@ region, tmp148,
 283              	.LVL4:
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 284              		.loc 1 119 5 is_stmt 1 view .LVU58
 285              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 286              		.loc 1 119 28 is_stmt 0 view .LVU59
 287 00f8 934223E0 		mla	r3, r3, r2, r4	@ tmp152, tmp151, region, _3
 288              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 289              		.loc 1 121 41 view .LVU60
 290 00fc 4004A0E1 		asr	r0, r0, #8	@ tmp162, tmp161,
 291              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 292              		.loc 1 119 15 view .LVU61
 293 0100 833083E0 		add	r3, r3, r3, lsl #1	@ tmp157, tmp152, tmp152,
 294              	@ armwave.c:121:     p = (hsv_in->v * (255 - hsv_in->s)) >> 8;
 295              		.loc 1 121 7 view .LVU62
 296 0104 7000EFE6 		uxtb	r0, r0	@ p, tmp162
 297              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 298              		.loc 1 119 15 view .LVU63
 299 0108 8330A0E1 		lsl	r3, r3, #1	@ tmp159, tmp157,
 300 010c 7330EFE6 		uxtb	r3, r3	@ remainder, tmp159
 301              	.LVL5:
 302              		.loc 1 121 5 is_stmt 1 view .LVU64
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 303              		.loc 1 122 5 view .LVU65
 304              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 305              		.loc 1 123 48 is_stmt 0 view .LVU66
 306 0110 FF4063E2 		rsb	r4, r3, #255	@ tmp168, remainder,
 307              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 308              		.loc 1 122 41 view .LVU67
 309 0114 8E0363E1 		smulbb	r3, lr, r3	@ tmp163, _1, remainder
 310              	.LVL6:
 311              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 312              		.loc 1 123 41 view .LVU68
 313 0118 9E040EE0 		mul	lr, lr, r4	@ tmp169, _1, tmp168
 314              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 315              		.loc 1 122 54 view .LVU69
 316 011c 4334A0E1 		asr	r3, r3, #8	@ tmp164, tmp163,
 317              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 318              		.loc 1 122 27 view .LVU70
 319 0120 FF3063E2 		rsb	r3, r3, #255	@ tmp165, tmp164,
 320              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 321              		.loc 1 123 62 view .LVU71
 322 0124 4EE4A0E1 		asr	lr, lr, #8	@ tmp170, tmp169,
 323              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 324              		.loc 1 123 27 view .LVU72
 325 0128 FFE06EE2 		rsb	lr, lr, #255	@ tmp171, tmp170,
 326              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 327              		.loc 1 122 20 view .LVU73
 328 012c 9C0303E0 		mul	r3, ip, r3	@ tmp166, pretmp_65, tmp165
 329              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 330              		.loc 1 123 20 view .LVU74
 331 0130 9C0E0EE0 		mul	lr, ip, lr	@ tmp172, pretmp_65, tmp171
 332              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 333              		.loc 1 122 62 view .LVU75
 334 0134 4334A0E1 		asr	r3, r3, #8	@ tmp167, tmp166,
 335              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 336              		.loc 1 123 70 view .LVU76
 337 0138 4EE4A0E1 		asr	lr, lr, #8	@ tmp173, tmp172,
 338              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 339              		.loc 1 122 7 view .LVU77
 340 013c 7330EFE6 		uxtb	r3, r3	@ q, tmp167
 341              	.LVL7:
 342              		.loc 1 123 5 is_stmt 1 view .LVU78
 343              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 344              		.loc 1 123 7 is_stmt 0 view .LVU79
 345 0140 7EE0EFE6 		uxtb	lr, lr	@ t, tmp173
 346              	.LVL8:
 124:armwave.c     **** 
 125:armwave.c     ****     switch (region)
 347              		.loc 1 125 5 is_stmt 1 view .LVU80
 348 0144 040052E3 		cmp	r2, #4	@ region,
 349 0148 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 350 014c 1C0000EA 		b	.L8	@
 351              	.L10:
 352 0150 84010000 		.word	.L14
 353 0154 94010000 		.word	.L13
 354 0158 A4010000 		.word	.L12
 355 015c B4010000 		.word	.L11
 356 0160 74010000 		.word	.L9
 357              	.LVL9:
 358              	.L16:
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 359              		.loc 1 112 9 view .LVU81
 360              	@ armwave.c:112:         rgb_out->r = hsv_in->v;
 112:armwave.c     ****         rgb_out->g = hsv_in->v;
 361              		.loc 1 112 20 is_stmt 0 view .LVU82
 362 0164 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 363              		.loc 1 113 9 is_stmt 1 view .LVU83
 364              	@ armwave.c:113:         rgb_out->g = hsv_in->v;
 113:armwave.c     ****         rgb_out->b = hsv_in->v;
 365              		.loc 1 113 20 is_stmt 0 view .LVU84
 366 0168 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 114:armwave.c     ****         return;
 367              		.loc 1 114 9 is_stmt 1 view .LVU85
 368              	@ armwave.c:114:         rgb_out->b = hsv_in->v;
 114:armwave.c     ****         return;
 369              		.loc 1 114 20 is_stmt 0 view .LVU86
 370 016c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 115:armwave.c     ****     }
 371              		.loc 1 115 9 is_stmt 1 view .LVU87
 372 0170 3080BDE8 		pop	{r4, r5, pc}	@
 373              	.LVL10:
 374              	.L9:
 126:armwave.c     ****     {
 127:armwave.c     ****         case 0:
 128:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 129:armwave.c     ****             break;
 130:armwave.c     ****         case 1:
 131:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 132:armwave.c     ****             break;
 133:armwave.c     ****         case 2:
 134:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 135:armwave.c     ****             break;
 136:armwave.c     ****         case 3:
 137:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 138:armwave.c     ****             break;
 139:armwave.c     ****         case 4:
 140:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 375              		.loc 1 140 13 view .LVU88
 376              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 377              		.loc 1 140 24 is_stmt 0 view .LVU89
 378 0174 00E0C1E5 		strb	lr, [r1]	@ t, rgb_out_30(D)->r
 379              	.LVL11:
 380              		.loc 1 140 29 is_stmt 1 view .LVU90
 381              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 382              		.loc 1 140 40 is_stmt 0 view .LVU91
 383 0178 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 384              		.loc 1 140 45 is_stmt 1 view .LVU92
 385              	@ armwave.c:140:             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 386              		.loc 1 140 56 is_stmt 0 view .LVU93
 387 017c 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 141:armwave.c     ****             break;
 388              		.loc 1 141 13 is_stmt 1 view .LVU94
 389 0180 3080BDE8 		pop	{r4, r5, pc}	@
 390              	.LVL12:
 391              	.L14:
 128:armwave.c     ****             break;
 392              		.loc 1 128 13 view .LVU95
 393              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 394              		.loc 1 128 24 is_stmt 0 view .LVU96
 395 0184 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 396              	.LVL13:
 128:armwave.c     ****             break;
 397              		.loc 1 128 37 is_stmt 1 view .LVU97
 398              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 399              		.loc 1 128 48 is_stmt 0 view .LVU98
 400 0188 01E0C1E5 		strb	lr, [r1, #1]	@ t, rgb_out_30(D)->g
 128:armwave.c     ****             break;
 401              		.loc 1 128 53 is_stmt 1 view .LVU99
 402              	@ armwave.c:128:             rgb_out->r = hsv_in->v; rgb_out->g = t; rgb_out->b = p;
 128:armwave.c     ****             break;
 403              		.loc 1 128 64 is_stmt 0 view .LVU100
 404 018c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 129:armwave.c     ****         case 1:
 405              		.loc 1 129 13 is_stmt 1 view .LVU101
 406 0190 3080BDE8 		pop	{r4, r5, pc}	@
 407              	.LVL14:
 408              	.L13:
 131:armwave.c     ****             break;
 409              		.loc 1 131 13 view .LVU102
 410              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 411              		.loc 1 131 24 is_stmt 0 view .LVU103
 412 0194 0030C1E5 		strb	r3, [r1]	@ q, rgb_out_30(D)->r
 413              	.LVL15:
 131:armwave.c     ****             break;
 414              		.loc 1 131 29 is_stmt 1 view .LVU104
 415              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 416              		.loc 1 131 40 is_stmt 0 view .LVU105
 417 0198 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 131:armwave.c     ****             break;
 418              		.loc 1 131 53 is_stmt 1 view .LVU106
 419              	@ armwave.c:131:             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 131:armwave.c     ****             break;
 420              		.loc 1 131 64 is_stmt 0 view .LVU107
 421 019c 0200C1E5 		strb	r0, [r1, #2]	@ p, rgb_out_30(D)->b
 132:armwave.c     ****         case 2:
 422              		.loc 1 132 13 is_stmt 1 view .LVU108
 423 01a0 3080BDE8 		pop	{r4, r5, pc}	@
 424              	.LVL16:
 425              	.L12:
 134:armwave.c     ****             break;
 426              		.loc 1 134 13 view .LVU109
 427              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 428              		.loc 1 134 24 is_stmt 0 view .LVU110
 429 01a4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 430              	.LVL17:
 134:armwave.c     ****             break;
 431              		.loc 1 134 29 is_stmt 1 view .LVU111
 432              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 433              		.loc 1 134 40 is_stmt 0 view .LVU112
 434 01a8 01C0C1E5 		strb	ip, [r1, #1]	@ pretmp_65, rgb_out_30(D)->g
 134:armwave.c     ****             break;
 435              		.loc 1 134 53 is_stmt 1 view .LVU113
 436              	@ armwave.c:134:             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 134:armwave.c     ****             break;
 437              		.loc 1 134 64 is_stmt 0 view .LVU114
 438 01ac 02E0C1E5 		strb	lr, [r1, #2]	@ t, rgb_out_30(D)->b
 135:armwave.c     ****         case 3:
 439              		.loc 1 135 13 is_stmt 1 view .LVU115
 440 01b0 3080BDE8 		pop	{r4, r5, pc}	@
 441              	.LVL18:
 442              	.L11:
 137:armwave.c     ****             break;
 443              		.loc 1 137 13 view .LVU116
 444              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 445              		.loc 1 137 24 is_stmt 0 view .LVU117
 446 01b4 0000C1E5 		strb	r0, [r1]	@ p, rgb_out_30(D)->r
 447              	.LVL19:
 137:armwave.c     ****             break;
 448              		.loc 1 137 29 is_stmt 1 view .LVU118
 449              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 450              		.loc 1 137 40 is_stmt 0 view .LVU119
 451 01b8 0130C1E5 		strb	r3, [r1, #1]	@ q, rgb_out_30(D)->g
 137:armwave.c     ****             break;
 452              		.loc 1 137 45 is_stmt 1 view .LVU120
 453              	@ armwave.c:137:             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 137:armwave.c     ****             break;
 454              		.loc 1 137 56 is_stmt 0 view .LVU121
 455 01bc 02C0C1E5 		strb	ip, [r1, #2]	@ pretmp_65, rgb_out_30(D)->b
 138:armwave.c     ****         case 4:
 456              		.loc 1 138 13 is_stmt 1 view .LVU122
 457 01c0 3080BDE8 		pop	{r4, r5, pc}	@
 458              	.LVL20:
 459              	.L8:
 142:armwave.c     ****         default:
 143:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 460              		.loc 1 143 13 view .LVU123
 461              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 462              		.loc 1 143 24 is_stmt 0 view .LVU124
 463 01c4 00C0C1E5 		strb	ip, [r1]	@ pretmp_65, rgb_out_30(D)->r
 464              	.LVL21:
 465              		.loc 1 143 37 is_stmt 1 view .LVU125
 466              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 467              		.loc 1 143 48 is_stmt 0 view .LVU126
 468 01c8 0100C1E5 		strb	r0, [r1, #1]	@ p, rgb_out_30(D)->g
 469              		.loc 1 143 53 is_stmt 1 view .LVU127
 470              	@ armwave.c:143:             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 471              		.loc 1 143 64 is_stmt 0 view .LVU128
 472 01cc 0230C1E5 		strb	r3, [r1, #2]	@ q, rgb_out_30(D)->b
 144:armwave.c     ****             break;
 473              		.loc 1 144 13 is_stmt 1 view .LVU129
 474              	@ armwave.c:146: }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 475              		.loc 1 146 1 is_stmt 0 view .LVU130
 476 01d0 3080BDE8 		pop	{r4, r5, pc}	@
 477              	.L18:
 478              		.align	2
 479              	.L17:
 480 01d4 83BEA02F 		.word	799063683
 481              		.cfi_endproc
 482              	.LFE58:
 484              		.align	2
 485              		.global	fill_rgb_xvimage
 486              		.syntax unified
 487              		.arm
 488              		.fpu vfp
 490              	fill_rgb_xvimage:
 491              	.LVL22:
 492              	.LFB61:
 147:armwave.c     **** 
 148:armwave.c     **** /*
 149:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.
 150:armwave.c     ****  */
 151:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv(XvImage *img, int x, int y, struct armwav
 152:armwave.c     **** {
 153:armwave.c     ****     int uv_base = img->width * img->height;
 154:armwave.c     ****     
 155:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 156:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 157:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 158:armwave.c     **** }
 159:armwave.c     **** 
 160:armwave.c     **** /*
 161:armwave.c     ****  * Demo/helper function to plot YUV pixel on XvImage canvas.  Does not write
 162:armwave.c     ****  * U/V values if x or y are odd.
 163:armwave.c     ****  */
 164:armwave.c     **** static void __attribute__((always_inline)) plot_pixel_yuv_fastq(XvImage *img, int x, int y, struct 
 165:armwave.c     **** {
 166:armwave.c     ****     int uv_base = img->width * img->height;
 167:armwave.c     ****     
 168:armwave.c     ****     img->data[(img->width * y) + x] = yuv_in->y; 
 169:armwave.c     ****     
 170:armwave.c     ****     if(!(x & 1) && !(y & 1)) {
 171:armwave.c     ****         img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 172:armwave.c     ****         img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 173:armwave.c     ****     }
 174:armwave.c     **** }
 175:armwave.c     **** 
 176:armwave.c     **** /*
 177:armwave.c     ****  * Fill an XvImage canvas with an RGB value.
 178:armwave.c     ****  */
 179:armwave.c     **** void fill_rgb_xvimage(XvImage *img, struct armwave_rgb_t *rgb)
 180:armwave.c     **** {
 493              		.loc 1 180 1 is_stmt 1 view -0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 8
 496              		@ frame_needed = 0, uses_anonymous_args = 0
 181:armwave.c     ****     struct armwave_yuv_t yuv;
 497              		.loc 1 181 5 view .LVU132
 182:armwave.c     ****     
 183:armwave.c     ****     // Compute the Y, U and V values, then use memset to block write them
 184:armwave.c     ****     rgb2yuv(rgb, &yuv);
 498              		.loc 1 184 5 view .LVU133
 499              	.LBB6:
 500              	.LBI6:
  94:armwave.c     **** {
 501              		.loc 1 94 6 view .LVU134
 502              	.LBB7:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 503              		.loc 1 96 5 view .LVU135
 504              	.LBE7:
 505              	.LBE6:
 506              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 507              		.loc 1 180 1 is_stmt 0 view .LVU136
 508 01d8 10402DE9 		push	{r4, lr}	@
 509              		.cfi_def_cfa_offset 8
 510              		.cfi_offset 4, -8
 511              		.cfi_offset 14, -4
 512 01dc 068B2DED 		vpush.64	{d8, d9, d10}	@
 513              		.cfi_def_cfa_offset 32
 514              		.cfi_offset 80, -32
 515              		.cfi_offset 81, -28
 516              		.cfi_offset 82, -24
 517              		.cfi_offset 83, -20
 518              		.cfi_offset 84, -16
 519              		.cfi_offset 85, -12
 520              	.LBB24:
 521              	.LBB8:
 522              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 523              		.loc 1 96 33 view .LVU137
 524 01e0 476A9FED 		vldr.32	s12, .L21	@ tmp204,
 525              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 526              		.loc 1 96 22 view .LVU138
 527 01e4 477ADFED 		vldr.32	s15, .L21+4	@ tmp206,
 528              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 529              		.loc 1 96 56 view .LVU139
 530 01e8 476ADFED 		vldr.32	s13, .L21+8	@ tmp208,
 531              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 532              		.loc 1 96 41 view .LVU140
 533 01ec 0030D1E5 		ldrb	r3, [r1]	@ zero_extendqisi2	@ rgb_39(D)->r, rgb_39(D)->r
 534              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 535              		.loc 1 96 79 view .LVU141
 536 01f0 467A9FED 		vldr.32	s14, .L21+12	@ tmp211,
 537              	.LBE8:
 538              	.LBE24:
 539              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 540              		.loc 1 180 1 view .LVU142
 541 01f4 08D04DE2 		sub	sp, sp, #8	@,,
 542              		.cfi_def_cfa_offset 40
 543              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 185:armwave.c     ****     
 186:armwave.c     ****     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 544              		.loc 1 186 36 view .LVU143
 545 01f8 182090E5 		ldr	r2, [r0, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 546              	.LBB25:
 547              	.LBB9:
 548              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 549              		.loc 1 96 41 view .LVU144
 550 01fc 903A09EE 		vmov	s19, r3	@ int	@ rgb_39(D)->r, rgb_39(D)->r
 551              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 552              		.loc 1 96 64 view .LVU145
 553 0200 0130D1E5 		ldrb	r3, [r1, #1]	@ zero_extendqisi2	@ rgb_39(D)->g, rgb_39(D)->g
 554              	.LBE9:
 555              	.LBE25:
 556              	@ armwave.c:180: {
 180:armwave.c     ****     struct armwave_yuv_t yuv;
 557              		.loc 1 180 1 view .LVU146
 558 0204 0040A0E1 		mov	r4, r0	@ img, img
 559              	.LBB26:
 560              	.LBB10:
 561              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 562              		.loc 1 98 22 view .LVU147
 563 0208 418A9FED 		vldr.32	s16, .L21+16	@ tmp257,
 564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 565              		.loc 1 96 33 view .LVU148
 566 020c E99AF8EE 		vcvt.f32.s32	s19, s19	@ _48, rgb_39(D)->r
 567              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 568              		.loc 1 96 64 view .LVU149
 569 0210 103A09EE 		vmov	s18, r3	@ int	@ rgb_39(D)->g, rgb_39(D)->g
 570              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 571              		.loc 1 96 87 view .LVU150
 572 0214 0230D1E5 		ldrb	r3, [r1, #2]	@ zero_extendqisi2	@ rgb_39(D)->b, rgb_39(D)->b
 573              	.LBE10:
 574              	.LBE26:
 575              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 576              		.loc 1 186 22 view .LVU151
 577 0218 001092E5 		ldr	r1, [r2]	@ *_2, *_2
 578              	.LVL23:
 579              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 580              		.loc 1 186 59 view .LVU152
 581 021c 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 582              	.LBB27:
 583              	.LBB11:
 584              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 585              		.loc 1 96 56 view .LVU153
 586 0220 C99AB8EE 		vcvt.f32.s32	s18, s18	@ _53, rgb_39(D)->g
 587              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 588              		.loc 1 96 87 view .LVU154
 589 0224 903A08EE 		vmov	s17, r3	@ int	@ rgb_39(D)->b, rgb_39(D)->b
 590              	.LBE11:
 591              	.LBE27:
 592              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 593              		.loc 1 186 59 view .LVU155
 594 0228 043090E5 		ldr	r3, [r0, #4]	@ img_41(D)->width, img_41(D)->width
 595              	.LBB28:
 596              	.LBB12:
 597              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 598              		.loc 1 96 22 view .LVU156
 599 022c 867A49EE 		vmla.f32	s15, s19, s12	@ tmp205, _48, tmp204
 600              	.LBE12:
 601              	.LBE28:
 602              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 603              		.loc 1 186 22 view .LVU157
 604 0230 1C0090E5 		ldr	r0, [r0, #28]	@ img_41(D)->data, img_41(D)->data
 605              	.LVL24:
 606              	.LBB29:
 607              	.LBB13:
 608              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 609              		.loc 1 96 79 view .LVU158
 610 0234 E88AF8EE 		vcvt.f32.s32	s17, s17	@ _58, rgb_39(D)->b
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 611              		.loc 1 97 5 is_stmt 1 view .LVU159
  98:armwave.c     **** }
 612              		.loc 1 98 5 view .LVU160
 613              	.LVL25:
  98:armwave.c     **** }
 614              		.loc 1 98 5 is_stmt 0 view .LVU161
 615              	.LBE13:
 616              	.LBE29:
 617              		.loc 1 186 5 is_stmt 1 view .LVU162
 618 0238 920302E0 		mul	r2, r2, r3	@, img_41(D)->height, img_41(D)->width
 619              	.LBB30:
 620              	.LBB14:
 621              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 622              		.loc 1 98 33 is_stmt 0 view .LVU163
 623 023c 35AA9FED 		vldr.32	s20, .L21+20	@ tmp255,
 624              	.LBE14:
 625              	.LBE30:
 626              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 627              		.loc 1 186 5 view .LVU164
 628 0240 010080E0 		add	r0, r0, r1	@, img_41(D)->data, *_2
 629              	.LBB31:
 630              	.LBB15:
 631              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 632              		.loc 1 96 46 view .LVU165
 633 0244 267A49EE 		vmla.f32	s15, s18, s13	@ tmp209, _53, tmp208
 634              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 635              		.loc 1 96 69 view .LVU166
 636 0248 877A48EE 		vmla.f32	s15, s17, s14	@ tmp212, _58, tmp211
 637              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 638              		.loc 1 96 16 view .LVU167
 639 024c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp214, tmp212
 640 0250 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp214, %sfp
 641              	.LBE15:
 642              	.LBE31:
 643              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 644              		.loc 1 186 5 view .LVU168
 645 0254 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 646 0258 FEFFFFEB 		bl	memset		@
 647              	.LVL26:
 187:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 648              		.loc 1 187 5 is_stmt 1 view .LVU169
 649              	.LBB32:
 650              	.LBB16:
 651              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 652              		.loc 1 98 22 is_stmt 0 view .LVU170
 653 025c 487AF0EE 		vmov.f32	s15, s16	@ tmp256, tmp257
 654              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 655              		.loc 1 98 56 view .LVU171
 656 0260 2D6ADFED 		vldr.32	s13, .L21+24	@ tmp259,
 657              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 658              		.loc 1 98 79 view .LVU172
 659 0264 2D7A9FED 		vldr.32	s14, .L21+28	@ tmp262,
 660              	.LBE16:
 661              	.LBE32:
 662              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 663              		.loc 1 187 61 view .LVU173
 664 0268 141094E5 		ldr	r1, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 665              	.LBB33:
 666              	.LBB17:
 667              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 668              		.loc 1 98 22 view .LVU174
 669 026c 8A7A49EE 		vmla.f32	s15, s19, s20	@ tmp256, _48, tmp255
 670              	.LBE17:
 671              	.LBE33:
 672              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 673              		.loc 1 187 65 view .LVU175
 674 0270 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 675 0274 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_19 + 4B], MEM[(int *)_19 + 4B]
 676              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 677              		.loc 1 187 36 view .LVU176
 678 0278 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 679              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 680              		.loc 1 187 22 view .LVU177
 681 027c 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 682              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 683              		.loc 1 187 65 view .LVU178
 684 0280 920102E0 		mul	r2, r2, r1	@ tmp247, img_41(D)->height, MEM[(int *)_19 + 4B]
 685              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 686              		.loc 1 187 22 view .LVU179
 687 0284 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_13 + 4B], MEM[(int *)_13 + 4B]
 688              	.LBB34:
 689              	.LBB18:
 690              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 691              		.loc 1 98 46 view .LVU180
 692 0288 667A49EE 		vmls.f32	s15, s18, s13	@ tmp260, _53, tmp259
 693              	.LBE18:
 694              	.LBE34:
 695              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 696              		.loc 1 187 80 view .LVU181
 697 028c A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp252, tmp247, tmp247,
 698              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 699              		.loc 1 187 5 view .LVU182
 700 0290 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_13 + 4B]
 701 0294 C220A0E1 		asr	r2, r2, #1	@, tmp252,
 702              	.LBB35:
 703              	.LBB19:
 704              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 705              		.loc 1 98 69 view .LVU183
 706 0298 C77A48EE 		vmls.f32	s15, s17, s14	@ tmp263, _58, tmp262
 707              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 708              		.loc 1 98 16 view .LVU184
 709 029c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp265, tmp263
 710 02a0 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp265, %sfp
 711              	.LBE19:
 712              	.LBE35:
 713              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 714              		.loc 1 187 5 view .LVU185
 715 02a4 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 716 02a8 FEFFFFEB 		bl	memset		@
 717              	.LVL27:
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 718              		.loc 1 188 5 is_stmt 1 view .LVU186
 719              	.LBB36:
 720              	.LBB20:
 721              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 722              		.loc 1 97 33 is_stmt 0 view .LVU187
 723 02ac 1C7A9FED 		vldr.32	s14, .L21+32	@ tmp306,
 724              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 725              		.loc 1 97 56 view .LVU188
 726 02b0 1C7ADFED 		vldr.32	s15, .L21+36	@ tmp310,
 727              	.LBE20:
 728              	.LBE36:
 729              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 730              		.loc 1 188 61 view .LVU189
 731 02b4 143094E5 		ldr	r3, [r4, #20]	@ img_41(D)->pitches, img_41(D)->pitches
 732              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 733              		.loc 1 188 65 view .LVU190
 734 02b8 082094E5 		ldr	r2, [r4, #8]	@ img_41(D)->height, img_41(D)->height
 735              	.LBB37:
 736              	.LBB21:
 737              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 738              		.loc 1 97 22 view .LVU191
 739 02bc 878A09EE 		vmla.f32	s16, s19, s14	@ tmp307, _48, tmp306
 740              	.LBE21:
 741              	.LBE37:
 742              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 743              		.loc 1 188 65 view .LVU192
 744 02c0 081093E5 		ldr	r1, [r3, #8]	@ MEM[(int *)_32 + 8B], MEM[(int *)_32 + 8B]
 745              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 746              		.loc 1 188 36 view .LVU193
 747 02c4 183094E5 		ldr	r3, [r4, #24]	@ img_41(D)->offsets, img_41(D)->offsets
 748              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 749              		.loc 1 188 22 view .LVU194
 750 02c8 1C0094E5 		ldr	r0, [r4, #28]	@ img_41(D)->data, img_41(D)->data
 751              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 752              		.loc 1 188 65 view .LVU195
 753 02cc 920102E0 		mul	r2, r2, r1	@ tmp298, img_41(D)->height, MEM[(int *)_32 + 8B]
 754              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 755              		.loc 1 188 22 view .LVU196
 756 02d0 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_26 + 8B], MEM[(int *)_26 + 8B]
 757              	.LBB38:
 758              	.LBB22:
 759              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 760              		.loc 1 97 46 view .LVU197
 761 02d4 678A09EE 		vmls.f32	s16, s18, s15	@ tmp311, _53, tmp310
 762              	.LBE22:
 763              	.LBE38:
 764              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 765              		.loc 1 188 80 view .LVU198
 766 02d8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp303, tmp298, tmp298,
 767              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 768              		.loc 1 188 5 view .LVU199
 769 02dc 030080E0 		add	r0, r0, r3	@, img_41(D)->data, MEM[(int *)_26 + 8B]
 770 02e0 C220A0E1 		asr	r2, r2, #1	@, tmp303,
 771              	.LBB39:
 772              	.LBB23:
 773              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 774              		.loc 1 97 69 view .LVU200
 775 02e4 8A8A08EE 		vmla.f32	s16, s17, s20	@ tmp314, _58, tmp255
 776              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 777              		.loc 1 97 16 view .LVU201
 778 02e8 C87AFCEE 		vcvt.u32.f32	s15, s16	@ tmp316, tmp314
 779 02ec 017ACDED 		vstr.32	s15, [sp, #4]	@ int	@ tmp316, %sfp
 780              	.LBE23:
 781              	.LBE39:
 782              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 783              		.loc 1 188 5 view .LVU202
 784 02f0 0410DDE5 		ldrb	r1, [sp, #4]	@ zero_extendqisi2	@, %sfp
 785              	@ armwave.c:189: }
 189:armwave.c     **** }
 786              		.loc 1 189 1 view .LVU203
 787 02f4 08D08DE2 		add	sp, sp, #8	@,,
 788              		.cfi_def_cfa_offset 32
 789              		@ sp needed	@
 790 02f8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 791              		.cfi_restore 84
 792              		.cfi_restore 85
 793              		.cfi_restore 82
 794              		.cfi_restore 83
 795              		.cfi_restore 80
 796              		.cfi_restore 81
 797              		.cfi_def_cfa_offset 8
 798 02fc 1040BDE8 		pop	{r4, lr}	@
 799              		.cfi_restore 14
 800              		.cfi_restore 4
 801              		.cfi_def_cfa_offset 0
 802              	.LVL28:
 803              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 804              		.loc 1 188 5 view .LVU204
 805 0300 FEFFFFEA 		b	memset		@
 806              	.LVL29:
 807              	.L22:
 808              		.align	2
 809              	.L21:
 810 0304 6F12833E 		.word	1048777327
 811 0308 00008041 		.word	1098907648
 812 030c 2506013F 		.word	1057031717
 813 0310 F0A7C63D 		.word	1036429296
 814 0314 00000043 		.word	1124073472
 815 0318 9CC4E03E 		.word	1054917788
 816 031c 7F6ABC3E 		.word	1052535423
 817 0320 7368913D 		.word	1032939635
 818 0324 508D17BE 		.word	-1105752752
 819 0328 F4FD943E 		.word	1049951732
 820              		.cfi_endproc
 821              	.LFE61:
 823              		.align	2
 824              		.global	armwave_prep_yuv_palette
 825              		.syntax unified
 826              		.arm
 827              		.fpu vfp
 829              	armwave_prep_yuv_palette:
 830              	.LVL30:
 831              	.LFB62:
 190:armwave.c     **** 
 191:armwave.c     **** /*
 192:armwave.c     ****  * Prepare the YUV table for a given range of intensities.
 193:armwave.c     ****  *
 194:armwave.c     ****  * This can be used to generate different palettes. Right now only
 195:armwave.c     ****  * the default palette '0' is supported which is linear intensity with
 196:armwave.c     ****  * given trace colour.
 197:armwave.c     ****  */
 198:armwave.c     **** void armwave_prep_yuv_palette(int palette, struct armwave_color_mix_t *color0, struct armwave_color
 199:armwave.c     **** {
 832              		.loc 1 199 1 is_stmt 1 view -0
 833              		.cfi_startproc
 834              		@ args = 0, pretend = 0, frame = 8
 835              		@ frame_needed = 0, uses_anonymous_args = 0
 200:armwave.c     ****     int v;
 836              		.loc 1 200 5 view .LVU206
 201:armwave.c     ****     float h;
 837              		.loc 1 201 5 view .LVU207
 202:armwave.c     ****     struct armwave_rgb_t rgb_temp;
 838              		.loc 1 202 5 view .LVU208
 203:armwave.c     ****     struct armwave_hsv_t hsv_temp;
 839              		.loc 1 203 5 view .LVU209
 204:armwave.c     ****     
 205:armwave.c     ****     switch(palette) {
 840              		.loc 1 205 5 view .LVU210
 841              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 842              		.loc 1 199 1 is_stmt 0 view .LVU211
 843 032c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 844              		.cfi_def_cfa_offset 32
 845              		.cfi_offset 4, -32
 846              		.cfi_offset 5, -28
 847              		.cfi_offset 6, -24
 848              		.cfi_offset 7, -20
 849              		.cfi_offset 8, -16
 850              		.cfi_offset 9, -12
 851              		.cfi_offset 10, -8
 852              		.cfi_offset 14, -4
 853 0330 068B2DED 		vpush.64	{d8, d9, d10}	@
 854              		.cfi_def_cfa_offset 56
 855              		.cfi_offset 80, -56
 856              		.cfi_offset 81, -52
 857              		.cfi_offset 82, -48
 858              		.cfi_offset 83, -44
 859              		.cfi_offset 84, -40
 860              		.cfi_offset 85, -36
 861              	@ armwave.c:205:     switch(palette) {
 862              		.loc 1 205 5 view .LVU212
 863 0334 010050E3 		cmp	r0, #1	@ palette,
 864              	@ armwave.c:199: {
 199:armwave.c     ****     int v;
 865              		.loc 1 199 1 view .LVU213
 866 0338 0160A0E1 		mov	r6, r1	@ color0, color0
 867 033c 18D04DE2 		sub	sp, sp, #24	@,,
 868              		.cfi_def_cfa_offset 80
 869              	@ armwave.c:205:     switch(palette) {
 870              		.loc 1 205 5 view .LVU214
 871 0340 1500000A 		beq	.L24		@,
 872 0344 020050E3 		cmp	r0, #2	@ palette,
 873 0348 0050A0E1 		mov	r5, r0	@ palette, palette
 874 034c 9F00000A 		beq	.L25		@,
 875 0350 000050E3 		cmp	r0, #0	@ palette,
 876 0354 5700000A 		beq	.L48		@,
 877              	.LVL31:
 878              	.L26:
 879              		.loc 1 205 5 view .LVU215
 880 0358 54449FE5 		ldr	r4, .L49+36	@ ivtmp.133,
 881              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 206:armwave.c     ****         case PLT_SINGLE_COLOUR:
 207:armwave.c     ****             for(v = 0; v < 256; v++) {
 208:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 210:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 211:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 212:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 213:armwave.c     ****             }
 214:armwave.c     ****             break;
 215:armwave.c     ****         
 216:armwave.c     ****         case PLT_INVERT_SINGLE_COLOUR:
 217:armwave.c     ****             for(v = 0; v < 256; v++) {
 218:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 220:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 221:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 222:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 223:armwave.c     ****             }
 224:armwave.c     ****             break;
 225:armwave.c     ****         
 226:armwave.c     ****         case PLT_RAINBOW_THERMAL:
 227:armwave.c     ****             for(v = 0; v < 256; v++) {
 228:armwave.c     ****                 hsv_temp.h = v;
 229:armwave.c     ****                 hsv_temp.s = 255;
 230:armwave.c     ****                 
 231:armwave.c     ****                 if(v < 20) {
 232:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 233:armwave.c     ****                 } else {
 234:armwave.c     ****                     hsv_temp.v = 255;
 235:armwave.c     ****                 }
 236:armwave.c     ****                 
 237:armwave.c     ****                 hsv2rgb(&hsv_temp, &rgb_temp);
 238:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 239:armwave.c     ****                 
 240:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h, hsv_temp.s, hsv
 241:armwave.c     ****             }
 242:armwave.c     ****             break;
 243:armwave.c     ****     }
 244:armwave.c     ****     
 245:armwave.c     ****     for(v = 0; v < 256; v++) {
 246:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 882              		.loc 1 246 9 discriminator 3 view .LVU216
 883 035c 54649FE5 		ldr	r6, .L49+40	@ tmp518,
 884              	.LBB48:
 885              	.LBB49:
 886              	@ armwave.c:125:     switch (region)
 125:armwave.c     ****     {
 887              		.loc 1 125 5 discriminator 3 view .LVU217
 888 0360 0050A0E3 		mov	r5, #0	@ v,
 889              	.L40:
 890              	.LVL32:
 125:armwave.c     ****     {
 891              		.loc 1 125 5 discriminator 3 view .LVU218
 892              	.LBE49:
 893              	.LBE48:
 894              		.loc 1 246 9 is_stmt 1 discriminator 3 view .LVU219
 895 0364 0210D4E5 		ldrb	r1, [r4, #2]	@ zero_extendqisi2	@ MEM[base: _415, offset: 2B], MEM[base: _415, offset: 2B]
 896 0368 0130D4E5 		ldrb	r3, [r4, #1]	@ zero_extendqisi2	@, MEM[base: _415, offset: 1B]
 897 036c 0020D4E5 		ldrb	r2, [r4]	@ zero_extendqisi2	@, MEM[base: _415, offset: 0B]
 898 0370 0600A0E1 		mov	r0, r6	@, tmp518
 899 0374 00108DE5 		str	r1, [sp]	@ MEM[base: _415, offset: 2B],
 900 0378 0510A0E1 		mov	r1, r5	@, v
 901              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 902              		.loc 1 245 26 is_stmt 0 discriminator 3 view .LVU220
 903 037c 015085E2 		add	r5, r5, #1	@ v, v,
 904              	.LVL33:
 905              	@ armwave.c:246:         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv
 906              		.loc 1 246 9 discriminator 3 view .LVU221
 907 0380 FEFFFFEB 		bl	printf		@
 908              	.LVL34:
 909              	@ armwave.c:245:     for(v = 0; v < 256; v++) {
 245:armwave.c     ****         printf("%3d = (%3d, %3d, %3d)\n", v, g_yuv_lut[v].y, g_yuv_lut[v].u, g_yuv_lut[v].v);
 910              		.loc 1 245 5 discriminator 3 view .LVU222
 911 0384 010C55E3 		cmp	r5, #256	@ v,
 912 0388 034084E2 		add	r4, r4, #3	@ ivtmp.133, ivtmp.133,
 913 038c F4FFFF1A 		bne	.L40		@,
 914              	@ armwave.c:248: }
 247:armwave.c     ****     }
 248:armwave.c     **** }
 915              		.loc 1 248 1 view .LVU223
 916 0390 18D08DE2 		add	sp, sp, #24	@,,
 917              		.cfi_remember_state
 918              		.cfi_def_cfa_offset 56
 919              		@ sp needed	@
 920 0394 068BBDEC 		vldm	sp!, {d8-d10}	@,
 921              		.cfi_restore 84
 922              		.cfi_restore 85
 923              		.cfi_restore 82
 924              		.cfi_restore 83
 925              		.cfi_restore 80
 926              		.cfi_restore 81
 927              		.cfi_def_cfa_offset 32
 928 0398 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 929              	.LVL35:
 930              	.L24:
 931              		.cfi_restore_state
 932              	.LBB59:
 933              	.LBB60:
 934              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 935              		.loc 1 96 33 view .LVU224
 936 039c FBAA9FED 		vldr.32	s20, .L49	@ tmp352,
 937              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 938              		.loc 1 96 22 view .LVU225
 939 03a0 FB9ADFED 		vldr.32	s19, .L49+4	@ tmp354,
 940              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 941              		.loc 1 96 56 view .LVU226
 942 03a4 FB9A9FED 		vldr.32	s18, .L49+8	@ tmp356,
 943              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 944              		.loc 1 96 79 view .LVU227
 945 03a8 FB8ADFED 		vldr.32	s17, .L49+12	@ tmp359,
 946              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 947              		.loc 1 97 33 view .LVU228
 948 03ac FB8A9FED 		vldr.32	s16, .L49+16	@ tmp364,
 949 03b0 FC739FE5 		ldr	r7, .L49+36	@ ivtmp.147,
 950              	.LBE60:
 951              	.LBE59:
 952              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 953              		.loc 1 221 17 view .LVU229
 954 03b4 00849FE5 		ldr	r8, .L49+44	@ tmp525,
 955              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 956              		.loc 1 217 19 view .LVU230
 957 03b8 0050A0E3 		mov	r5, #0	@ v,
 958              	.LVL36:
 959              	.L28:
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 960              		.loc 1 218 17 is_stmt 1 discriminator 3 view .LVU231
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 961              		.loc 1 219 17 discriminator 3 view .LVU232
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 962              		.loc 1 220 17 discriminator 3 view .LVU233
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 963              		.loc 1 221 17 discriminator 3 view .LVU234
 964              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 965              		.loc 1 218 30 is_stmt 0 discriminator 3 view .LVU235
 966 03bc F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 967              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 968              		.loc 1 219 30 discriminator 3 view .LVU236
 969 03c0 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 970              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 971              		.loc 1 220 30 discriminator 3 view .LVU237
 972 03c4 F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 973              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 974              		.loc 1 221 17 discriminator 3 view .LVU238
 975 03c8 FF1065E2 		rsb	r1, r5, #255	@, v,
 976              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 977              		.loc 1 218 30 discriminator 3 view .LVU239
 978 03cc 950202E0 		mul	r2, r5, r2	@ tmp342, v, color0_82(D)->r
 979              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 980              		.loc 1 219 30 discriminator 3 view .LVU240
 981 03d0 950303E0 		mul	r3, r5, r3	@ tmp345, v, color0_82(D)->g
 982              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 983              		.loc 1 220 30 discriminator 3 view .LVU241
 984 03d4 950000E0 		mul	r0, r5, r0	@ tmp348, v, color0_82(D)->b
 985              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 986              		.loc 1 218 30 discriminator 3 view .LVU242
 987 03d8 4224A0E1 		asr	r2, r2, #8	@ tmp340, tmp342,
 988              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 989              		.loc 1 219 30 discriminator 3 view .LVU243
 990 03dc 4334A0E1 		asr	r3, r3, #8	@ tmp343, tmp345,
 991              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 992              		.loc 1 218 30 discriminator 3 view .LVU244
 993 03e0 FF0052E3 		cmp	r2, #255	@ tmp340,
 994              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 995              		.loc 1 220 30 discriminator 3 view .LVU245
 996 03e4 4004A0E1 		asr	r0, r0, #8	@ tmp346, tmp348,
 997              	@ armwave.c:218:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 218:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 998              		.loc 1 218 30 discriminator 3 view .LVU246
 999 03e8 FF20A0A3 		movge	r2, #255	@ tmp340,
 1000              	@ armwave.c:219:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 219:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1001              		.loc 1 219 30 discriminator 3 view .LVU247
 1002 03ec FF0053E3 		cmp	r3, #255	@ tmp343,
 1003 03f0 FF30A0A3 		movge	r3, #255	@ tmp343,
 1004              	@ armwave.c:220:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 220:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1005              		.loc 1 220 30 discriminator 3 view .LVU248
 1006 03f4 FF0050E3 		cmp	r0, #255	@ tmp346,
 1007 03f8 FF00A0A3 		movge	r0, #255	@ tmp346,
 1008 03fc 72A0EFE6 		uxtb	r10, r2	@ _78, tmp340
 1009 0400 7040EFE6 		uxtb	r4, r0	@ _100, tmp346
 1010 0404 7390EFE6 		uxtb	r9, r3	@ _99, tmp343
 1011              	@ armwave.c:221:                 printf("%3d = [%3d, %3d, %3d]\n", 255 - v, rgb_temp.r, rgb_temp.g,
 221:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[255 - v]); 
 1012              		.loc 1 221 17 discriminator 3 view .LVU249
 1013 0408 0930A0E1 		mov	r3, r9	@, _99
 1014 040c 0A20A0E1 		mov	r2, r10	@, _78
 1015 0410 00408DE5 		str	r4, [sp]	@ _100,
 1016 0414 0800A0E1 		mov	r0, r8	@, tmp525
 1017 0418 FEFFFFEB 		bl	printf		@
 1018              	.LVL37:
 222:armwave.c     ****             }
 1019              		.loc 1 222 17 is_stmt 1 discriminator 3 view .LVU250
 1020              	.LBB63:
 1021              	.LBI59:
  94:armwave.c     **** {
 1022              		.loc 1 94 6 discriminator 3 view .LVU251
 1023              	.LBB61:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1024              		.loc 1 96 5 discriminator 3 view .LVU252
 1025              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1026              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU253
 1027 041c 90AA07EE 		vmov	s15, r10	@ int	@ _78, _78
 1028              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1029              		.loc 1 97 22 discriminator 3 view .LVU254
 1030 0420 E86A9FED 		vldr.32	s12, .L49+56	@ tmp366,
 1031              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1032              		.loc 1 96 22 discriminator 3 view .LVU255
 1033 0424 695AB0EE 		vmov.f32	s10, s19	@ tmp353, tmp354
 1034              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1035              		.loc 1 97 79 discriminator 3 view .LVU256
 1036 0428 E74ADFED 		vldr.32	s9, .L49+60	@ tmp371,
 1037              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1038              		.loc 1 96 33 discriminator 3 view .LVU257
 1039 042c E76AF8EE 		vcvt.f32.s32	s13, s15	@ _139, _78
 1040              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1041              		.loc 1 96 56 discriminator 3 view .LVU258
 1042 0430 909A07EE 		vmov	s15, r9	@ int	@ _99, _99
 1043              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1044              		.loc 1 97 22 discriminator 3 view .LVU259
 1045 0434 465AF0EE 		vmov.f32	s11, s12	@ tmp365, tmp366
 1046              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1047              		.loc 1 97 56 discriminator 3 view .LVU260
 1048 0438 D93A9FED 		vldr.32	s6, .L49+20	@ tmp368,
 1049              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1050              		.loc 1 98 56 discriminator 3 view .LVU261
 1051 043c D93ADFED 		vldr.32	s7, .L49+24	@ tmp380,
 1052              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1053              		.loc 1 96 56 discriminator 3 view .LVU262
 1054 0440 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _144, _99
 1055              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1056              		.loc 1 96 79 discriminator 3 view .LVU263
 1057 0444 904A07EE 		vmov	s15, r4	@ int	@ _100, _100
 1058              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1059              		.loc 1 98 79 discriminator 3 view .LVU264
 1060 0448 E44A9FED 		vldr.32	s8, .L49+80	@ tmp383,
 1061              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1062              		.loc 1 96 22 discriminator 3 view .LVU265
 1063 044c 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp353, _139, tmp352
 1064              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1065              		.loc 1 97 22 discriminator 3 view .LVU266
 1066 0450 885A46EE 		vmla.f32	s11, s13, s16	@ tmp365, _139, tmp364
 1067              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1068              		.loc 1 96 79 discriminator 3 view .LVU267
 1069 0454 E77AF8EE 		vcvt.f32.s32	s15, s15	@ _149, _100
 1070              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1071              		.loc 1 98 22 discriminator 3 view .LVU268
 1072 0458 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp377, _139, tmp371
 1073              	.LBE61:
 1074              	.LBE63:
 1075              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1076              		.loc 1 217 34 discriminator 3 view .LVU269
 1077 045c 015085E2 		add	r5, r5, #1	@ v, v,
 1078              	.LVL38:
 1079              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1080              		.loc 1 217 13 discriminator 3 view .LVU270
 1081 0460 010C55E3 		cmp	r5, #256	@ v,
 1082 0464 037047E2 		sub	r7, r7, #3	@ ivtmp.147, ivtmp.147,
 1083              	.LBB64:
 1084              	.LBB62:
 1085              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1086              		.loc 1 96 46 discriminator 3 view .LVU271
 1087 0468 095A07EE 		vmla.f32	s10, s14, s18	@ tmp357, _144, tmp356
 1088              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1089              		.loc 1 97 46 discriminator 3 view .LVU272
 1090 046c 656AF0EE 		vmov.f32	s13, s11	@ tmp365, tmp365
 1091              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1092              		.loc 1 98 46 discriminator 3 view .LVU273
 1093 0470 636A07EE 		vmls.f32	s12, s14, s7	@ tmp381, _144, tmp380
 1094              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1095              		.loc 1 97 46 discriminator 3 view .LVU274
 1096 0474 436A47EE 		vmls.f32	s13, s14, s6	@ tmp365, _144, tmp368
 1097              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1098              		.loc 1 96 69 discriminator 3 view .LVU275
 1099 0478 455AF0EE 		vmov.f32	s11, s10	@ tmp357, tmp357
 1100              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1101              		.loc 1 98 69 discriminator 3 view .LVU276
 1102 047c C46A07EE 		vmls.f32	s12, s15, s8	@ tmp384, _149, tmp383
 1103              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1104              		.loc 1 96 69 discriminator 3 view .LVU277
 1105 0480 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp357, _149, tmp359
 1106              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1107              		.loc 1 97 69 discriminator 3 view .LVU278
 1108 0484 667AB0EE 		vmov.f32	s14, s13	@ tmp369, tmp369
 1109 0488 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp369, _149, tmp371
 1110              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1111              		.loc 1 96 16 discriminator 3 view .LVU279
 1112 048c E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp361, tmp360
 1113 0490 901A17EE 		vmov	r1, s15	@ int	@ tmp361, tmp361
 1114              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1115              		.loc 1 97 16 discriminator 3 view .LVU280
 1116 0494 C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp373, tmp372
 1117              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1118              		.loc 1 96 16 discriminator 3 view .LVU281
 1119 0498 0013C7E5 		strb	r1, [r7, #768]	@ tmp361, MEM[base: _399, offset: 765B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1120              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU282
 1121              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1122              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU283
 1123 049c 902A17EE 		vmov	r2, s15	@ int	@ tmp373, tmp373
 1124              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1125              		.loc 1 98 16 discriminator 3 view .LVU284
 1126 04a0 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp385, tmp384
 1127              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1128              		.loc 1 97 16 discriminator 3 view .LVU285
 1129 04a4 0123C7E5 		strb	r2, [r7, #769]	@ tmp373, MEM[base: _399, offset: 766B]
  98:armwave.c     **** }
 1130              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU286
 1131              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1132              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU287
 1133 04a8 903A17EE 		vmov	r3, s15	@ int	@ tmp385, tmp385
 1134 04ac 0233C7E5 		strb	r3, [r7, #770]	@ tmp385, MEM[base: _399, offset: 767B]
 1135              	.LVL39:
  98:armwave.c     **** }
 1136              		.loc 1 98 16 discriminator 3 view .LVU288
 1137              	.LBE62:
 1138              	.LBE64:
 1139              	@ armwave.c:217:             for(v = 0; v < 256; v++) {
 217:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1140              		.loc 1 217 13 discriminator 3 view .LVU289
 1141 04b0 C1FFFF1A 		bne	.L28		@,
 1142 04b4 A7FFFFEA 		b	.L26		@
 1143              	.LVL40:
 1144              	.L48:
 1145              	.LBB65:
 1146              	.LBB66:
 1147              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1148              		.loc 1 96 33 view .LVU290
 1149 04b8 B4AA9FED 		vldr.32	s20, .L49	@ tmp305,
 1150              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1151              		.loc 1 96 22 view .LVU291
 1152 04bc B49ADFED 		vldr.32	s19, .L49+4	@ tmp307,
 1153              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1154              		.loc 1 96 56 view .LVU292
 1155 04c0 B49A9FED 		vldr.32	s18, .L49+8	@ tmp309,
 1156              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1157              		.loc 1 96 79 view .LVU293
 1158 04c4 B48ADFED 		vldr.32	s17, .L49+12	@ tmp312,
 1159              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1160              		.loc 1 97 33 view .LVU294
 1161 04c8 B48A9FED 		vldr.32	s16, .L49+16	@ tmp317,
 1162 04cc E0729FE5 		ldr	r7, .L49+36	@ ivtmp.140,
 1163              	.LBE66:
 1164              	.LBE65:
 1165              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1166              		.loc 1 211 17 view .LVU295
 1167 04d0 E4829FE5 		ldr	r8, .L49+44	@ tmp519,
 1168              	.LVL41:
 1169              	.L27:
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1170              		.loc 1 208 17 is_stmt 1 discriminator 3 view .LVU296
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1171              		.loc 1 209 17 discriminator 3 view .LVU297
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1172              		.loc 1 210 17 discriminator 3 view .LVU298
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1173              		.loc 1 211 17 discriminator 3 view .LVU299
 1174              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1175              		.loc 1 208 30 is_stmt 0 discriminator 3 view .LVU300
 1176 04d4 F020D6E1 		ldrsh	r2, [r6]	@ color0_82(D)->r, color0_82(D)->r
 1177              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1178              		.loc 1 209 30 discriminator 3 view .LVU301
 1179 04d8 F230D6E1 		ldrsh	r3, [r6, #2]	@ color0_82(D)->g, color0_82(D)->g
 1180              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1181              		.loc 1 210 30 discriminator 3 view .LVU302
 1182 04dc F400D6E1 		ldrsh	r0, [r6, #4]	@ color0_82(D)->b, color0_82(D)->b
 1183              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1184              		.loc 1 211 17 discriminator 3 view .LVU303
 1185 04e0 0510A0E1 		mov	r1, r5	@, palette
 1186              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1187              		.loc 1 208 30 discriminator 3 view .LVU304
 1188 04e4 950202E0 		mul	r2, r5, r2	@ tmp296, palette, color0_82(D)->r
 1189              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1190              		.loc 1 209 30 discriminator 3 view .LVU305
 1191 04e8 950303E0 		mul	r3, r5, r3	@ tmp299, palette, color0_82(D)->g
 1192              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1193              		.loc 1 210 30 discriminator 3 view .LVU306
 1194 04ec 950000E0 		mul	r0, r5, r0	@ tmp302, palette, color0_82(D)->b
 1195              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1196              		.loc 1 208 30 discriminator 3 view .LVU307
 1197 04f0 4224A0E1 		asr	r2, r2, #8	@ tmp294, tmp296,
 1198              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1199              		.loc 1 209 30 discriminator 3 view .LVU308
 1200 04f4 4334A0E1 		asr	r3, r3, #8	@ tmp297, tmp299,
 1201              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1202              		.loc 1 208 30 discriminator 3 view .LVU309
 1203 04f8 FF0052E3 		cmp	r2, #255	@ tmp294,
 1204              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1205              		.loc 1 210 30 discriminator 3 view .LVU310
 1206 04fc 4004A0E1 		asr	r0, r0, #8	@ tmp300, tmp302,
 1207              	@ armwave.c:208:                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 208:armwave.c     ****                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 1208              		.loc 1 208 30 discriminator 3 view .LVU311
 1209 0500 FF20A0A3 		movge	r2, #255	@ tmp294,
 1210              	@ armwave.c:209:                 rgb_temp.g = MIN((color0->g * v) >> 8, 255);
 209:armwave.c     ****                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 1211              		.loc 1 209 30 discriminator 3 view .LVU312
 1212 0504 FF0053E3 		cmp	r3, #255	@ tmp297,
 1213 0508 FF30A0A3 		movge	r3, #255	@ tmp297,
 1214              	@ armwave.c:210:                 rgb_temp.b = MIN((color0->b * v) >> 8, 255);
 210:armwave.c     ****                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_temp.b);
 1215              		.loc 1 210 30 discriminator 3 view .LVU313
 1216 050c FF0050E3 		cmp	r0, #255	@ tmp300,
 1217 0510 FF00A0A3 		movge	r0, #255	@ tmp300,
 1218 0514 72A0EFE6 		uxtb	r10, r2	@ _93, tmp294
 1219 0518 7040EFE6 		uxtb	r4, r0	@ _259, tmp300
 1220 051c 7390EFE6 		uxtb	r9, r3	@ _87, tmp297
 1221              	@ armwave.c:211:                 printf("%3d = [%3d, %3d, %3d]\n", v, rgb_temp.r, rgb_temp.g, rgb_t
 211:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1222              		.loc 1 211 17 discriminator 3 view .LVU314
 1223 0520 0930A0E1 		mov	r3, r9	@, _87
 1224 0524 0A20A0E1 		mov	r2, r10	@, _93
 1225 0528 00408DE5 		str	r4, [sp]	@ _259,
 1226 052c 0800A0E1 		mov	r0, r8	@, tmp519
 1227 0530 FEFFFFEB 		bl	printf		@
 1228              	.LVL42:
 212:armwave.c     ****             }
 1229              		.loc 1 212 17 is_stmt 1 discriminator 3 view .LVU315
 1230              	.LBB69:
 1231              	.LBI65:
  94:armwave.c     **** {
 1232              		.loc 1 94 6 discriminator 3 view .LVU316
 1233              	.LBB67:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1234              		.loc 1 96 5 discriminator 3 view .LVU317
 1235              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1236              		.loc 1 96 33 is_stmt 0 discriminator 3 view .LVU318
 1237 0534 90AA07EE 		vmov	s15, r10	@ int	@ _93, _93
 1238              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1239              		.loc 1 97 22 discriminator 3 view .LVU319
 1240 0538 A26A9FED 		vldr.32	s12, .L49+56	@ tmp319,
 1241              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1242              		.loc 1 96 22 discriminator 3 view .LVU320
 1243 053c 695AB0EE 		vmov.f32	s10, s19	@ tmp306, tmp307
 1244              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1245              		.loc 1 97 79 discriminator 3 view .LVU321
 1246 0540 A14ADFED 		vldr.32	s9, .L49+60	@ tmp324,
 1247              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1248              		.loc 1 96 33 discriminator 3 view .LVU322
 1249 0544 E76AF8EE 		vcvt.f32.s32	s13, s15	@ _109, _93
 1250              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1251              		.loc 1 96 56 discriminator 3 view .LVU323
 1252 0548 909A07EE 		vmov	s15, r9	@ int	@ _87, _87
 1253              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1254              		.loc 1 97 22 discriminator 3 view .LVU324
 1255 054c 465AF0EE 		vmov.f32	s11, s12	@ tmp318, tmp319
 1256              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1257              		.loc 1 97 56 discriminator 3 view .LVU325
 1258 0550 933A9FED 		vldr.32	s6, .L49+20	@ tmp321,
 1259              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1260              		.loc 1 98 56 discriminator 3 view .LVU326
 1261 0554 933ADFED 		vldr.32	s7, .L49+24	@ tmp333,
 1262              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1263              		.loc 1 96 56 discriminator 3 view .LVU327
 1264 0558 E77AB8EE 		vcvt.f32.s32	s14, s15	@ _114, _87
 1265              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1266              		.loc 1 96 79 discriminator 3 view .LVU328
 1267 055c 904A07EE 		vmov	s15, r4	@ int	@ _259, _259
 1268              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1269              		.loc 1 98 79 discriminator 3 view .LVU329
 1270 0560 9E4A9FED 		vldr.32	s8, .L49+80	@ tmp336,
 1271              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1272              		.loc 1 96 22 discriminator 3 view .LVU330
 1273 0564 8A5A06EE 		vmla.f32	s10, s13, s20	@ tmp306, _109, tmp305
 1274              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1275              		.loc 1 97 22 discriminator 3 view .LVU331
 1276 0568 885A46EE 		vmla.f32	s11, s13, s16	@ tmp318, _109, tmp317
 1277              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1278              		.loc 1 96 79 discriminator 3 view .LVU332
 1279 056c E77AF8EE 		vcvt.f32.s32	s15, s15	@ _119, _259
 1280              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1281              		.loc 1 98 22 discriminator 3 view .LVU333
 1282 0570 A46A06EE 		vmla.f32	s12, s13, s9	@ tmp330, _109, tmp324
 1283              	.LBE67:
 1284              	.LBE69:
 1285              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1286              		.loc 1 207 34 discriminator 3 view .LVU334
 1287 0574 015085E2 		add	r5, r5, #1	@ palette, palette,
 1288              	.LVL43:
 1289              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1290              		.loc 1 207 13 discriminator 3 view .LVU335
 1291 0578 010C55E3 		cmp	r5, #256	@ palette,
 1292 057c 037087E2 		add	r7, r7, #3	@ ivtmp.140, ivtmp.140,
 1293              	.LBB70:
 1294              	.LBB68:
 1295              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1296              		.loc 1 96 46 discriminator 3 view .LVU336
 1297 0580 095A07EE 		vmla.f32	s10, s14, s18	@ tmp310, _114, tmp309
 1298              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1299              		.loc 1 97 46 discriminator 3 view .LVU337
 1300 0584 656AF0EE 		vmov.f32	s13, s11	@ tmp318, tmp318
 1301              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1302              		.loc 1 98 46 discriminator 3 view .LVU338
 1303 0588 636A07EE 		vmls.f32	s12, s14, s7	@ tmp334, _114, tmp333
 1304              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1305              		.loc 1 97 46 discriminator 3 view .LVU339
 1306 058c 436A47EE 		vmls.f32	s13, s14, s6	@ tmp318, _114, tmp321
 1307              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1308              		.loc 1 96 69 discriminator 3 view .LVU340
 1309 0590 455AF0EE 		vmov.f32	s11, s10	@ tmp310, tmp310
 1310              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1311              		.loc 1 98 69 discriminator 3 view .LVU341
 1312 0594 C46A07EE 		vmls.f32	s12, s15, s8	@ tmp337, _119, tmp336
 1313              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1314              		.loc 1 96 69 discriminator 3 view .LVU342
 1315 0598 A85A47EE 		vmla.f32	s11, s15, s17	@ tmp310, _119, tmp312
 1316              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1317              		.loc 1 97 69 discriminator 3 view .LVU343
 1318 059c 667AB0EE 		vmov.f32	s14, s13	@ tmp322, tmp322
 1319 05a0 A47A07EE 		vmla.f32	s14, s15, s9	@ tmp322, _119, tmp324
 1320              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1321              		.loc 1 96 16 discriminator 3 view .LVU344
 1322 05a4 E57AFCEE 		vcvt.u32.f32	s15, s11	@ tmp314, tmp313
 1323 05a8 901A17EE 		vmov	r1, s15	@ int	@ tmp314, tmp314
 1324              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1325              		.loc 1 97 16 discriminator 3 view .LVU345
 1326 05ac C77AFCEE 		vcvt.u32.f32	s15, s14	@ tmp326, tmp325
 1327              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1328              		.loc 1 96 16 discriminator 3 view .LVU346
 1329 05b0 031047E5 		strb	r1, [r7, #-3]	@ tmp314, MEM[base: _409, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1330              		.loc 1 97 5 is_stmt 1 discriminator 3 view .LVU347
 1331              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1332              		.loc 1 97 16 is_stmt 0 discriminator 3 view .LVU348
 1333 05b4 902A17EE 		vmov	r2, s15	@ int	@ tmp326, tmp326
 1334              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1335              		.loc 1 98 16 discriminator 3 view .LVU349
 1336 05b8 C67AFCEE 		vcvt.u32.f32	s15, s12	@ tmp338, tmp337
 1337              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1338              		.loc 1 97 16 discriminator 3 view .LVU350
 1339 05bc 022047E5 		strb	r2, [r7, #-2]	@ tmp326, MEM[base: _409, offset: 1B]
  98:armwave.c     **** }
 1340              		.loc 1 98 5 is_stmt 1 discriminator 3 view .LVU351
 1341              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1342              		.loc 1 98 16 is_stmt 0 discriminator 3 view .LVU352
 1343 05c0 903A17EE 		vmov	r3, s15	@ int	@ tmp338, tmp338
 1344 05c4 013047E5 		strb	r3, [r7, #-1]	@ tmp338, MEM[base: _409, offset: 2B]
 1345              	.LVL44:
  98:armwave.c     **** }
 1346              		.loc 1 98 16 discriminator 3 view .LVU353
 1347              	.LBE68:
 1348              	.LBE70:
 1349              	@ armwave.c:207:             for(v = 0; v < 256; v++) {
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1350              		.loc 1 207 13 discriminator 3 view .LVU354
 1351 05c8 C1FFFF1A 		bne	.L27		@,
 1352 05cc 61FFFFEA 		b	.L26		@
 1353              	.LVL45:
 1354              	.L25:
 207:armwave.c     ****                 rgb_temp.r = MIN((color0->r * v) >> 8, 255);
 1355              		.loc 1 207 13 discriminator 3 view .LVU355
 1356 05d0 758A9FED 		vldr.32	s16, .L49+28	@ _354,
 1357              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1358              		.loc 1 232 48 view .LVU356
 1359 05d4 75AA9FED 		vldr.32	s20, .L49+32	@ tmp521,
 1360 05d8 6E9ADFED 		vldr.32	s19, .L49+8	@ tmp522,
 1361 05dc 709A9FED 		vldr.32	s18, .L49+20	@ tmp523,
 1362 05e0 708ADFED 		vldr.32	s17, .L49+24	@ tmp524,
 1363 05e4 C8519FE5 		ldr	r5, .L49+36	@ ivtmp.154,
 1364              	.LBB71:
 1365              	.LBB50:
 1366              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1367              		.loc 1 118 12 view .LVU357
 1368 05e8 D0619FE5 		ldr	r6, .L49+48	@ tmp394,
 1369              	.LBE50:
 1370              	.LBE71:
 1371              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1372              		.loc 1 227 19 view .LVU358
 1373 05ec 0040A0E3 		mov	r4, #0	@ v,
 1374              	.LVL46:
 1375              	.L39:
 228:armwave.c     ****                 hsv_temp.s = 255;
 1376              		.loc 1 228 17 is_stmt 1 view .LVU359
 1377              	@ armwave.c:231:                 if(v < 20) {
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1378              		.loc 1 231 19 is_stmt 0 view .LVU360
 1379 05f0 130054E3 		cmp	r4, #19	@ v,
 1380 05f4 7420EFE6 		uxtb	r2, r4	@ _390, v
 1381              	.LVL47:
 229:armwave.c     ****                 
 1382              		.loc 1 229 17 is_stmt 1 view .LVU361
 231:armwave.c     ****                     hsv_temp.v = (255 / 20.0f) * v;
 1383              		.loc 1 231 17 view .LVU362
 232:armwave.c     ****                 } else {
 1384              		.loc 1 232 21 view .LVU363
 237:armwave.c     ****                 rgb2yuv(&rgb_temp, &g_yuv_lut[v]); 
 1385              		.loc 1 237 17 view .LVU364
 1386              	.LBB72:
 1387              	.LBI48:
 106:armwave.c     **** {
 1388              		.loc 1 106 6 view .LVU365
 1389              	.LBB51:
 108:armwave.c     **** 
 1390              		.loc 1 108 5 view .LVU366
 110:armwave.c     ****     {
 1391              		.loc 1 110 5 view .LVU367
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1392              		.loc 1 118 5 view .LVU368
 1393              	.LBE51:
 1394              	.LBE72:
 1395              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1396              		.loc 1 232 48 is_stmt 0 view .LVU369
 1397 05f8 904A07DE 		vmovle	s15, r4	@ int	@ v, v
 1398              	.LBB73:
 1399              	.LBB52:
 1400              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1401              		.loc 1 118 12 view .LVU370
 1402 05fc 963282E0 		umull	r3, r2, r6, r2	@ tmp527, tmp393, tmp394, _390
 1403              	.LVL48:
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1404              		.loc 1 118 12 view .LVU371
 1405              	.LBE52:
 1406              	.LBE73:
 1407 0600 484AB0CE 		vmovgt.f32	s8, s16	@ _354, _354
 1408              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1409              		.loc 1 232 48 view .LVU372
 1410 0604 E77AF8DE 		vcvtle.f32.s32	s15, s15	@ tmp387, v
 1411              	.LBB74:
 1412              	.LBB53:
 1413              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1414              		.loc 1 119 38 view .LVU373
 1415 0608 2A30E0E3 		mvn	r3, #42	@ tmp396,
 1416              	@ armwave.c:118:     region = hsv_in->h / 43;
 118:armwave.c     ****     remainder = (hsv_in->h - (region * 43)) * 6; 
 1417              		.loc 1 118 12 view .LVU374
 1418 060c A221A0E1 		lsr	r2, r2, #3	@ region, tmp393,
 1419              	.LVL49:
 119:armwave.c     **** 
 1420              		.loc 1 119 5 is_stmt 1 view .LVU375
 1421              	.LBE53:
 1422              	.LBE74:
 1423 0610 FF10A0C3 		movgt	r1, #255	@ _352,
 1424              	.LBB75:
 1425              	.LBB54:
 1426              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1427              		.loc 1 119 28 is_stmt 0 view .LVU376
 1428 0614 934223E0 		mla	r3, r3, r2, r4	@ tmp397, tmp396, region, v
 1429              	.LBE54:
 1430              	.LBE75:
 1431              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1432              		.loc 1 232 48 view .LVU377
 1433 0618 8A7A67DE 		vmulle.f32	s15, s15, s20	@ tmp388, tmp387, tmp521
 1434              	.LBB76:
 1435              	.LBB55:
 1436              	@ armwave.c:119:     remainder = (hsv_in->h - (region * 43)) * 6; 
 119:armwave.c     **** 
 1437              		.loc 1 119 15 view .LVU378
 1438 061c 833083E0 		add	r3, r3, r3, lsl #1	@ tmp402, tmp397, tmp397,
 1439 0620 8330A0E1 		lsl	r3, r3, #1	@ tmp404, tmp402,
 1440 0624 7330EFE6 		uxtb	r3, r3	@ remainder, tmp404
 1441              	.LVL50:
 121:armwave.c     ****     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 1442              		.loc 1 121 5 is_stmt 1 view .LVU379
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1443              		.loc 1 122 5 view .LVU380
 1444              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1445              		.loc 1 123 48 is_stmt 0 view .LVU381
 1446 0628 FF0063E2 		rsb	r0, r3, #255	@ tmp412, remainder,
 1447              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1448              		.loc 1 122 41 view .LVU382
 1449 062c 033463E0 		rsb	r3, r3, r3, lsl #8	@ tmp408, remainder, remainder,
 1450              	.LVL51:
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1451              		.loc 1 122 41 view .LVU383
 1452              	.LBE55:
 1453              	.LBE76:
 1454              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1455              		.loc 1 232 32 view .LVU384
 1456 0630 E77AFCDE 		vcvtle.u32.f32	s15, s15	@ tmp391, tmp388
 1457              	.LBB77:
 1458              	.LBB56:
 1459              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1460              		.loc 1 123 41 view .LVU385
 1461 0634 000460E0 		rsb	r0, r0, r0, lsl #8	@ tmp415, tmp412, tmp412,
 1462              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1463              		.loc 1 122 54 view .LVU386
 1464 0638 4334A0E1 		asr	r3, r3, #8	@ tmp409, tmp408,
 1465              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1466              		.loc 1 123 62 view .LVU387
 1467 063c 4004A0E1 		asr	r0, r0, #8	@ tmp416, tmp415,
 1468              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1469              		.loc 1 123 27 view .LVU388
 1470 0640 FF0060E2 		rsb	r0, r0, #255	@ tmp417, tmp416,
 1471              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1472              		.loc 1 122 27 view .LVU389
 1473 0644 FF3063E2 		rsb	r3, r3, #255	@ tmp410, tmp409,
 1474              	.LBE56:
 1475              	.LBE77:
 1476              	@ armwave.c:232:                     hsv_temp.v = (255 / 20.0f) * v;
 232:armwave.c     ****                 } else {
 1477              		.loc 1 232 32 view .LVU390
 1478 0648 057ACDDD 		vstrle.32	s15, [sp, #20]	@ int	@ tmp391, %sfp
 1479 064c 1410DDD5 		ldrble	r1, [sp, #20]	@ zero_extendqisi2	@ _352, %sfp
 1480 0650 901A07DE 		vmovle	s15, r1	@ int	@ _352, _352
 1481              	.LBB78:
 1482              	.LBB57:
 1483              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1484              		.loc 1 123 20 view .LVU391
 1485 0654 910000E0 		mul	r0, r1, r0	@ tmp418, _352, tmp417
 1486              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1487              		.loc 1 122 20 view .LVU392
 1488 0658 910303E0 		mul	r3, r1, r3	@ tmp411, _352, tmp410
 1489 065c E74AB8DE 		vcvtle.f32.s32	s8, s15	@ _354, _352
 1490              	@ armwave.c:123:     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 123:armwave.c     **** 
 1491              		.loc 1 123 70 view .LVU393
 1492 0660 4004A0E1 		asr	r0, r0, #8	@ _226, tmp418,
 1493              	@ armwave.c:122:     q = (hsv_in->v * (255 - ((hsv_in->s * remainder) >> 8))) >> 8;
 122:armwave.c     ****     t = (hsv_in->v * (255 - ((hsv_in->s * (255 - remainder)) >> 8))) >> 8;
 1494              		.loc 1 122 62 view .LVU394
 1495 0664 4334A0E1 		asr	r3, r3, #8	@ _219, tmp411,
 1496              	.LVL52:
 123:armwave.c     **** 
 1497              		.loc 1 123 5 is_stmt 1 view .LVU395
 125:armwave.c     ****     {
 1498              		.loc 1 125 5 view .LVU396
 1499 0668 040052E3 		cmp	r2, #4	@ region,
 1500 066c 02F19F97 		ldrls	pc, [pc, r2, asl #2]	@ region
 1501 0670 970000EA 		b	.L31	@
 1502              	.L33:
 1503 0674 88060000 		.word	.L37
 1504 0678 80080000 		.word	.L36
 1505 067c 34080000 		.word	.L35
 1506 0680 E8070000 		.word	.L34
 1507 0684 3C070000 		.word	.L32
 1508              	.L37:
 1509 0688 4E6ADFED 		vldr.32	s13, .L49+56	@ tmp426,
 1510 068c 437A9FED 		vldr.32	s14, .L49+16	@ tmp424,
 1511 0690 100A06EE 		vmov	s12, r0	@ int	@ _226, _226
 1512 0694 4C7ADFED 		vldr.32	s15, .L49+60	@ tmp430,
 1513 0698 665AB0EE 		vmov.f32	s10, s13	@ tmp425, tmp426
 1514 069c 503ADFED 		vldr.32	s7, .L49+84	@ _478,
 1515 06a0 C65AF8EE 		vcvt.f32.s32	s11, s12	@ _440, _226
 1516 06a4 276A44EE 		vmla.f32	s13, s8, s15	@ tmp431, _354, tmp430
 1517 06a8 075A04EE 		vmla.f32	s10, s8, s14	@ tmp425, _354, tmp424
 1518 06ac 376A9FED 		vldr.32	s12, .L49	@ tmp420,
 1519 06b0 377ADFED 		vldr.32	s15, .L49+4	@ tmp421,
 1520 06b4 0130A0E1 		mov	r3, r1	@ _219, _352
 1521              	.LVL53:
 125:armwave.c     ****     {
 1522              		.loc 1 125 5 is_stmt 0 view .LVU397
 1523 06b8 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1524              	.LVL54:
 125:armwave.c     ****     {
 1525              		.loc 1 125 5 view .LVU398
 1526 06bc 067A44EE 		vmla.f32	s15, s8, s12	@ _434, _354, tmp420
 1527 06c0 E86A45EE 		vmls.f32	s13, s11, s17	@ _501, _440, tmp524
 1528 06c4 457AB0EE 		vmov.f32	s14, s10	@ tmp425, tmp425
 1529 06c8 A95A25EE 		vmul.f32	s10, s11, s19	@ _445, _440, tmp522
 1530 06cc C97A05EE 		vmls.f32	s14, s11, s18	@ tmp425, _440, tmp523
 1531 06d0 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1532 06d4 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp425
 1533              	.LVL55:
 1534              	.L38:
 125:armwave.c     ****     {
 1535              		.loc 1 125 5 view .LVU399
 1536              	.LBE57:
 1537              	.LBE78:
 238:armwave.c     ****                 
 1538              		.loc 1 238 17 is_stmt 1 view .LVU400
 1539              	.LBB79:
 1540              	.LBI79:
  94:armwave.c     **** {
 1541              		.loc 1 94 6 view .LVU401
 1542              	.LBB80:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1543              		.loc 1 96 5 view .LVU402
 1544              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1545              		.loc 1 96 46 is_stmt 0 view .LVU403
 1546 06d8 857A77EE 		vadd.f32	s15, s15, s10	@ tmp503, _434, _445
 1547              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1548              		.loc 1 97 69 view .LVU404
 1549 06dc 237A36EE 		vadd.f32	s14, s12, s7	@ tmp507, _476, _478
 1550              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1551              		.loc 1 98 16 view .LVU405
 1552 06e0 E66AFCEE 		vcvt.u32.f32	s13, s13	@ tmp510, _501
 1553              	.LBE80:
 1554              	.LBE79:
 1555              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1556              		.loc 1 240 17 view .LVU406
 1557 06e4 0A008DE8 		stm	sp, {r1, r3}	@,,
 1558 06e8 0C208DE5 		str	r2, [sp, #12]	@ prephitmp_447,
 1559 06ec 08008DE5 		str	r0, [sp, #8]	@ _226,
 1560 06f0 0420A0E1 		mov	r2, r4	@, v
 1561 06f4 0410A0E1 		mov	r1, r4	@, v
 1562              	.LBB83:
 1563              	.LBB81:
 1564              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1565              		.loc 1 96 69 view .LVU407
 1566 06f8 A57A77EE 		vadd.f32	s15, s15, s11	@ tmp504, tmp503, _453
 1567              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1568              		.loc 1 97 16 view .LVU408
 1569 06fc C77ABCEE 		vcvt.u32.f32	s14, s14	@ tmp508, tmp507
 1570              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1571              		.loc 1 98 16 view .LVU409
 1572 0700 90CA16EE 		vmov	ip, s13	@ int	@ tmp510, tmp510
 1573              	.LBE81:
 1574              	.LBE83:
 1575              	@ armwave.c:240:                 printf("%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\n", v, hsv_temp.h
 240:armwave.c     ****             }
 1576              		.loc 1 240 17 view .LVU410
 1577 0704 FF30A0E3 		mov	r3, #255	@,
 1578 0708 B4009FE5 		ldr	r0, .L49+52	@,
 1579              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1580              		.loc 1 227 34 view .LVU411
 1581 070c 014084E2 		add	r4, r4, #1	@ v, v,
 1582              	.LVL56:
 1583              	.LBB84:
 1584              	.LBB82:
 1585              	@ armwave.c:98:     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb
  98:armwave.c     **** }
 1586              		.loc 1 98 16 view .LVU412
 1587 0710 02C0C5E5 		strb	ip, [r5, #2]	@ tmp510, MEM[base: _393, offset: 2B]
 1588 0714 035085E2 		add	r5, r5, #3	@ ivtmp.154, ivtmp.154,
 1589              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1590              		.loc 1 96 16 view .LVU413
 1591 0718 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp505, tmp504
 1592              	@ armwave.c:97:     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1593              		.loc 1 97 16 view .LVU414
 1594 071c 10EA17EE 		vmov	lr, s14	@ int	@ tmp508, tmp508
 1595 0720 02E045E5 		strb	lr, [r5, #-2]	@ tmp508, MEM[base: _393, offset: 1B]
 1596              	@ armwave.c:96:     yuv_out->y =  16 + ( 0.256f * rgb_in->r) + (0.504f * rgb_in->g) + (0.097f * rgb
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 1597              		.loc 1 96 16 view .LVU415
 1598 0724 90CA17EE 		vmov	ip, s15	@ int	@ tmp505, tmp505
 1599 0728 03C045E5 		strb	ip, [r5, #-3]	@ tmp505, MEM[base: _393, offset: 0B]
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 1600              		.loc 1 97 5 is_stmt 1 view .LVU416
  98:armwave.c     **** }
 1601              		.loc 1 98 5 view .LVU417
 1602              	.LVL57:
  98:armwave.c     **** }
 1603              		.loc 1 98 5 is_stmt 0 view .LVU418
 1604              	.LBE82:
 1605              	.LBE84:
 240:armwave.c     ****             }
 1606              		.loc 1 240 17 is_stmt 1 view .LVU419
 1607 072c FEFFFFEB 		bl	printf		@
 1608              	.LVL58:
 1609              	@ armwave.c:227:             for(v = 0; v < 256; v++) {
 227:armwave.c     ****                 hsv_temp.h = v;
 1610              		.loc 1 227 13 is_stmt 0 view .LVU420
 1611 0730 010C54E3 		cmp	r4, #256	@ v,
 1612 0734 ADFFFF1A 		bne	.L39		@,
 1613 0738 06FFFFEA 		b	.L26		@
 1614              	.LVL59:
 1615              	.L32:
 1616              	.LBB85:
 1617              	.LBB58:
 140:armwave.c     ****             break;
 1618              		.loc 1 140 13 is_stmt 1 view .LVU421
 140:armwave.c     ****             break;
 1619              		.loc 1 140 29 view .LVU422
 140:armwave.c     ****             break;
 1620              		.loc 1 140 45 view .LVU423
 141:armwave.c     ****         default:
 1621              		.loc 1 141 13 view .LVU424
 1622 073c 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1623 0740 206A9FED 		vldr.32	s12, .L49+56	@ tmp481,
 1624 0744 207A9FED 		vldr.32	s14, .L49+60	@ tmp482,
 1625 0748 103ADFED 		vldr.32	s7, .L49	@ tmp476,
 1626 074c E75AB8EE 		vcvt.f32.s32	s10, s15	@ _423, _226
 1627 0750 466AF0EE 		vmov.f32	s13, s12	@ tmp485, tmp481
 1628 0754 0E7ADFED 		vldr.32	s15, .L49+4	@ tmp477,
 1629 0758 204ADFED 		vldr.32	s9, .L49+80	@ tmp488,
 1630 075c 0F3A9FED 		vldr.32	s6, .L49+16	@ tmp480,
 1631 0760 0D5ADFED 		vldr.32	s11, .L49+12	@ tmp478,
 1632              	@ armwave.c:139:         case 4:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1633              		.loc 1 139 9 is_stmt 0 view .LVU425
 1634 0764 0030A0E1 		mov	r3, r0	@ _219, _226
 1635              	.LVL60:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1636              		.loc 1 139 9 view .LVU426
 1637 0768 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1638              	.LVL61:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1639              		.loc 1 139 9 view .LVU427
 1640 076c 076A45EE 		vmla.f32	s13, s10, s14	@ tmp485, _423, tmp482
 1641 0770 237A45EE 		vmla.f32	s15, s10, s7	@ _434, _423, tmp476
 1642 0774 036A05EE 		vmla.f32	s12, s10, s6	@ _476, _423, tmp480
 1643 0778 073A64EE 		vmul.f32	s7, s8, s14	@ _478, _354, tmp482
 1644 077c 255A64EE 		vmul.f32	s11, s8, s11	@ _453, _354, tmp478
 1645 0780 175A9FED 		vldr.32	s10, .L49+84	@ _445,
 1646 0784 0000A0E3 		mov	r0, #0	@ _226,
 1647              	.LVL62:
 139:armwave.c     ****             rgb_out->r = t; rgb_out->g = p; rgb_out->b = hsv_in->v;
 1648              		.loc 1 139 9 view .LVU428
 1649 0788 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp488
 1650 078c D1FFFFEA 		b	.L38		@
 1651              	.L50:
 1652              		.align	2
 1653              	.L49:
 1654 0790 6F12833E 		.word	1048777327
 1655 0794 00008041 		.word	1098907648
 1656 0798 2506013F 		.word	1057031717
 1657 079c F0A7C63D 		.word	1036429296
 1658 07a0 508D17BE 		.word	-1105752752
 1659 07a4 F4FD943E 		.word	1049951732
 1660 07a8 7F6ABC3E 		.word	1052535423
 1661 07ac 00007F43 		.word	1132396544
 1662 07b0 00004C41 		.word	1095499776
 1663 07b4 00000000 		.word	g_yuv_lut
 1664 07b8 44000000 		.word	.LC2
 1665 07bc 00000000 		.word	.LC0
 1666 07c0 83BEA02F 		.word	799063683
 1667 07c4 18000000 		.word	.LC1
 1668 07c8 00000043 		.word	1124073472
 1669 07cc 9CC4E03E 		.word	1054917788
 1670 07d0 00008041 		.word	1098907648
 1671 07d4 F0A7C63D 		.word	1036429296
 1672 07d8 508D17BE 		.word	-1105752752
 1673 07dc 6F12833E 		.word	1048777327
 1674 07e0 7368913D 		.word	1032939635
 1675 07e4 00000000 		.word	0
 1676              	.LVL63:
 1677              	.L34:
 137:armwave.c     ****             break;
 1678              		.loc 1 137 13 is_stmt 1 view .LVU429
 137:armwave.c     ****             break;
 1679              		.loc 1 137 29 view .LVU430
 137:armwave.c     ****             break;
 1680              		.loc 1 137 45 view .LVU431
 138:armwave.c     ****         case 4:
 1681              		.loc 1 138 13 view .LVU432
 1682 07e8 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1683 07ec 0B7A1FED 		vldr.32	s14, .L49+56	@ tmp467,
 1684 07f0 064A5FED 		vldr.32	s9, .L49+80	@ tmp474,
 1685 07f4 0C3A5FED 		vldr.32	s7, .L49+60	@ tmp468,
 1686 07f8 E75AB8EE 		vcvt.f32.s32	s10, s15	@ _439, _219
 1687 07fc 476AF0EE 		vmov.f32	s13, s14	@ tmp471, tmp467
 1688 0800 0D7A5FED 		vldr.32	s15, .L49+68	@ tmp464,
 1689              	@ armwave.c:136:         case 3:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1690              		.loc 1 136 9 is_stmt 0 view .LVU433
 1691 0804 0300A0E1 		mov	r0, r3	@ _226, _219
 1692              	.LVL64:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1693              		.loc 1 136 9 view .LVU434
 1694 0808 0120A0E1 		mov	r2, r1	@ prephitmp_447, _352
 1695              	.LVL65:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1696              		.loc 1 136 9 view .LVU435
 1697 080c 233A64EE 		vmul.f32	s7, s8, s7	@ _478, _354, tmp468
 1698 0810 275A64EE 		vmul.f32	s11, s8, s15	@ _453, _354, tmp464
 1699 0814 0030A0E3 		mov	r3, #0	@ _219,
 1700              	.LVL66:
 136:armwave.c     ****             rgb_out->r = p; rgb_out->g = q; rgb_out->b = hsv_in->v;
 1701              		.loc 1 136 9 view .LVU436
 1702 0818 686A45EE 		vmls.f32	s13, s10, s17	@ tmp471, _439, tmp524
 1703 081c 497A05EE 		vmls.f32	s14, s10, s18	@ tmp467, _439, tmp523
 1704 0820 167A5FED 		vldr.32	s15, .L49+64	@ _434,
 1705 0824 295A25EE 		vmul.f32	s10, s10, s19	@ _445, _439, tmp522
 1706 0828 646A44EE 		vmls.f32	s13, s8, s9	@ _501, _354, tmp474
 1707 082c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp467
 1708 0830 A8FFFFEA 		b	.L38		@
 1709              	.LVL67:
 1710              	.L35:
 134:armwave.c     ****             break;
 1711              		.loc 1 134 13 is_stmt 1 view .LVU437
 134:armwave.c     ****             break;
 1712              		.loc 1 134 29 view .LVU438
 134:armwave.c     ****             break;
 1713              		.loc 1 134 53 view .LVU439
 135:armwave.c     ****         case 3:
 1714              		.loc 1 135 13 view .LVU440
 1715 0834 1D7A1FED 		vldr.32	s14, .L49+56	@ tmp455,
 1716 0838 900A07EE 		vmov	s15, r0	@ int	@ _226, _226
 1717 083c 193A1FED 		vldr.32	s6, .L49+80	@ tmp462,
 1718 0840 1F3A5FED 		vldr.32	s7, .L49+60	@ tmp456,
 1719 0844 476AF0EE 		vmov.f32	s13, s14	@ tmp459, tmp455
 1720 0848 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _450, _226
 1721 084c 497A04EE 		vmls.f32	s14, s8, s18	@ tmp455, _354, tmp523
 1722 0850 217A5FED 		vldr.32	s15, .L49+68	@ tmp452,
 1723 0854 686A44EE 		vmls.f32	s13, s8, s17	@ tmp459, _354, tmp524
 1724              	@ armwave.c:133:         case 2:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1725              		.loc 1 133 9 is_stmt 0 view .LVU441
 1726 0858 0020A0E1 		mov	r2, r0	@ prephitmp_447, _226
 1727              	.LVL68:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1728              		.loc 1 133 9 view .LVU442
 1729 085c 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1730 0860 0100A0E1 		mov	r0, r1	@ _226, _352
 1731              	.LVL69:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1732              		.loc 1 133 9 view .LVU443
 1733 0864 0030A0E3 		mov	r3, #0	@ _219,
 1734              	.LVL70:
 133:armwave.c     ****             rgb_out->r = p; rgb_out->g = hsv_in->v; rgb_out->b = t;
 1735              		.loc 1 133 9 view .LVU444
 1736 0868 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _450, tmp452
 1737 086c 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp455
 1738 0870 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _450, tmp456
 1739 0874 C36A44EE 		vmls.f32	s13, s9, s6	@ _501, _450, tmp462
 1740 0878 2C7A5FED 		vldr.32	s15, .L49+64	@ _434,
 1741 087c 95FFFFEA 		b	.L38		@
 1742              	.LVL71:
 1743              	.L36:
 131:armwave.c     ****             break;
 1744              		.loc 1 131 13 is_stmt 1 view .LVU445
 131:armwave.c     ****             break;
 1745              		.loc 1 131 29 view .LVU446
 131:armwave.c     ****             break;
 1746              		.loc 1 131 53 view .LVU447
 132:armwave.c     ****         case 2:
 1747              		.loc 1 132 13 view .LVU448
 1748 0880 903A05EE 		vmov	s11, r3	@ int	@ _219, _219
 1749 0884 316A5FED 		vldr.32	s13, .L49+56	@ tmp442,
 1750 0888 2E7A1FED 		vldr.32	s14, .L49+72	@ tmp440,
 1751 088c 324A5FED 		vldr.32	s9, .L49+60	@ tmp446,
 1752 0890 E55AF8EE 		vcvt.f32.s32	s11, s11	@ _424, _219
 1753 0894 663AB0EE 		vmov.f32	s6, s13	@ tmp441, tmp442
 1754 0898 316A1FED 		vldr.32	s12, .L49+76	@ tmp436,
 1755 089c 357A5FED 		vldr.32	s15, .L49+64	@ tmp437,
 1756              	@ armwave.c:130:         case 1:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1757              		.loc 1 130 9 is_stmt 0 view .LVU449
 1758 08a0 313A5FED 		vldr.32	s7, .L49+84	@ _478,
 1759 08a4 295A24EE 		vmul.f32	s10, s8, s19	@ _445, _354, tmp522
 1760 08a8 0100A0E1 		mov	r0, r1	@ _226, _352
 1761              	.LVL72:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1762              		.loc 1 130 9 view .LVU450
 1763 08ac 0020A0E3 		mov	r2, #0	@ prephitmp_447,
 1764              	.LVL73:
 130:armwave.c     ****             rgb_out->r = q; rgb_out->g = hsv_in->v; rgb_out->b = p;
 1765              		.loc 1 130 9 view .LVU451
 1766 08b0 873A05EE 		vmla.f32	s6, s11, s14	@ tmp441, _424, tmp440
 1767 08b4 A46A45EE 		vmla.f32	s13, s11, s9	@ tmp447, _424, tmp446
 1768 08b8 867A45EE 		vmla.f32	s15, s11, s12	@ _434, _424, tmp436
 1769 08bc 635AF0EE 		vmov.f32	s11, s7	@ _453, _478
 1770 08c0 437AB0EE 		vmov.f32	s14, s6	@ tmp441, tmp441
 1771 08c4 686A44EE 		vmls.f32	s13, s8, s17	@ _501, _354, tmp524
 1772 08c8 497A04EE 		vmls.f32	s14, s8, s18	@ tmp441, _354, tmp523
 1773 08cc 476AB0EE 		vmov.f32	s12, s14	@ _476, tmp441
 1774 08d0 80FFFFEA 		b	.L38		@
 1775              	.LVL74:
 1776              	.L31:
 143:armwave.c     ****             break;
 1777              		.loc 1 143 13 is_stmt 1 view .LVU452
 143:armwave.c     ****             break;
 1778              		.loc 1 143 37 view .LVU453
 143:armwave.c     ****             break;
 1779              		.loc 1 143 53 view .LVU454
 144:armwave.c     ****     }
 1780              		.loc 1 144 13 view .LVU455
 1781 08d4 903A07EE 		vmov	s15, r3	@ int	@ _219, _219
 1782 08d8 466A1FED 		vldr.32	s12, .L49+56	@ tmp495,
 1783 08dc 463A5FED 		vldr.32	s7, .L49+60	@ tmp496,
 1784 08e0 467A1FED 		vldr.32	s14, .L49+64	@ tmp491,
 1785 08e4 E74AF8EE 		vcvt.f32.s32	s9, s15	@ _448, _219
 1786 08e8 466AF0EE 		vmov.f32	s13, s12	@ tmp499, tmp495
 1787 08ec 487A5FED 		vldr.32	s15, .L49+68	@ tmp492,
 1788 08f0 462A5FED 		vldr.32	s5, .L49+80	@ tmp502,
 1789 08f4 492A1FED 		vldr.32	s4, .L49+72	@ tmp494,
 1790 08f8 236A44EE 		vmla.f32	s13, s8, s7	@ tmp499, _354, tmp496
 1791 08fc 4A3A1FED 		vldr.32	s6, .L49+76	@ tmp490,
 1792              	@ armwave.c:142:         default:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1793              		.loc 1 142 9 is_stmt 0 view .LVU456
 1794 0900 0320A0E1 		mov	r2, r3	@ prephitmp_447, _219
 1795              	.LVL75:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1796              		.loc 1 142 9 view .LVU457
 1797 0904 A75A64EE 		vmul.f32	s11, s9, s15	@ _453, _448, tmp492
 1798 0908 477AF0EE 		vmov.f32	s15, s14	@ tmp491, tmp491
 1799 090c 4C5A1FED 		vldr.32	s10, .L49+84	@ _445,
 1800 0910 A33A64EE 		vmul.f32	s7, s9, s7	@ _478, _448, tmp496
 1801 0914 026A04EE 		vmla.f32	s12, s8, s4	@ _476, _354, tmp494
 1802 0918 E26A44EE 		vmls.f32	s13, s9, s5	@ _501, _448, tmp502
 1803 091c 037A44EE 		vmla.f32	s15, s8, s6	@ tmp491, _354, tmp490
 1804 0920 0000A0E3 		mov	r0, #0	@ _226,
 1805              	.LVL76:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1806              		.loc 1 142 9 view .LVU458
 1807 0924 0130A0E1 		mov	r3, r1	@ _219, _352
 1808              	.LVL77:
 142:armwave.c     ****             rgb_out->r = hsv_in->v; rgb_out->g = p; rgb_out->b = q;
 1809              		.loc 1 142 9 view .LVU459
 1810 0928 6AFFFFEA 		b	.L38		@
 1811              	.LBE58:
 1812              	.LBE85:
 1813              		.cfi_endproc
 1814              	.LFE62:
 1816              		.align	2
 1817              		.global	armwave_init
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_init:
 1823              	.LFB63:
 249:armwave.c     **** 
 250:armwave.c     **** /*
 251:armwave.c     ****  * Initialise things.  STUB, mostly.
 252:armwave.c     ****  */
 253:armwave.c     **** void armwave_init()
 254:armwave.c     **** {
 1824              		.loc 1 254 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 0
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 255:armwave.c     ****     g_armwave_state.flags = 0;
 1828              		.loc 1 255 5 view .LVU461
 1829              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1830              		.loc 1 255 27 is_stmt 0 view .LVU462
 1831 092c 24309FE5 		ldr	r3, .L53	@ tmp110,
 1832              	@ armwave.c:254: {
 254:armwave.c     ****     g_armwave_state.flags = 0;
 1833              		.loc 1 254 1 view .LVU463
 1834 0930 10402DE9 		push	{r4, lr}	@
 1835              		.cfi_def_cfa_offset 8
 1836              		.cfi_offset 4, -8
 1837              		.cfi_offset 14, -4
 1838              	@ armwave.c:255:     g_armwave_state.flags = 0;
 1839              		.loc 1 255 27 view .LVU464
 1840 0934 0020A0E3 		mov	r2, #0	@ tmp111,
 1841              	@ armwave.c:258:     printf("armwave version: %s\n", ARMWAVE_VER);
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 257:armwave.c     **** 
 258:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1842              		.loc 1 258 5 view .LVU465
 1843 0938 1C109FE5 		ldr	r1, .L53+4	@,
 1844 093c 1C009FE5 		ldr	r0, .L53+8	@,
 1845              	@ armwave.c:255:     g_armwave_state.flags = 0;
 255:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1846              		.loc 1 255 27 view .LVU466
 1847 0940 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1848              		.loc 1 256 5 is_stmt 1 view .LVU467
 1849              	@ armwave.c:256:     g_armwave_state.frame_margin = 0;
 256:armwave.c     ****     g_armwave_state.frame_margin = 0;
 1850              		.loc 1 256 34 is_stmt 0 view .LVU468
 1851 0944 582083E5 		str	r2, [r3, #88]	@ tmp111, g_armwave_state.frame_margin
 1852              		.loc 1 258 5 is_stmt 1 view .LVU469
 1853 0948 FEFFFFEB 		bl	printf		@
 1854              	.LVL78:
 259:armwave.c     ****     
 260:armwave.c     **** #ifndef NO_PYTHON
 261:armwave.c     ****     printf("built without Python linkings\n");
 1855              		.loc 1 261 5 view .LVU470
 1856 094c 10009FE5 		ldr	r0, .L53+12	@,
 1857              	@ armwave.c:263: }
 262:armwave.c     **** #endif
 263:armwave.c     **** }
 1858              		.loc 1 263 1 is_stmt 0 view .LVU471
 1859 0950 1040BDE8 		pop	{r4, lr}	@
 1860              		.cfi_restore 14
 1861              		.cfi_restore 4
 1862              		.cfi_def_cfa_offset 0
 1863              	@ armwave.c:261:     printf("built without Python linkings\n");
 261:armwave.c     **** #endif
 1864              		.loc 1 261 5 view .LVU472
 1865 0954 FEFFFFEA 		b	puts		@
 1866              	.LVL79:
 1867              	.L54:
 1868              		.align	2
 1869              	.L53:
 1870 0958 00000000 		.word	g_armwave_state
 1871 095c 5C000000 		.word	.LC3
 1872 0960 64000000 		.word	.LC4
 1873 0964 7C000000 		.word	.LC5
 1874              		.cfi_endproc
 1875              	.LFE63:
 1877              		.align	2
 1878              		.global	render_nonaa_to_buffer_1ch_slice
 1879              		.syntax unified
 1880              		.arm
 1881              		.fpu vfp
 1883              	render_nonaa_to_buffer_1ch_slice:
 1884              	.LVL80:
 1885              	.LFB64:
 264:armwave.c     **** 
 265:armwave.c     **** /*
 266:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
 267:armwave.c     ****  * pre-computed.
 268:armwave.c     ****  *
 269:armwave.c     ****  * @param    slice_y        Slice to render at
 270:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
 271:armwave.c     ****  *                          accounting for cache behaviour, etc.)
 272:armwave.c     ****  */
 273:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 274:armwave.c     **** {
 1886              		.loc 1 274 1 is_stmt 1 view -0
 1887              		.cfi_startproc
 1888              		@ args = 0, pretend = 0, frame = 8
 1889              		@ frame_needed = 0, uses_anonymous_args = 0
 275:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1890              		.loc 1 275 5 view .LVU474
 276:armwave.c     ****     uint32_t value, word;
 1891              		.loc 1 276 5 view .LVU475
 277:armwave.c     ****     uint8_t *wave_base;
 1892              		.loc 1 277 5 view .LVU476
 278:armwave.c     ****     bufftyp_t *write_buffer_base;
 1893              		.loc 1 278 5 view .LVU477
 279:armwave.c     ****     bufftyp_t *write_buffer;
 1894              		.loc 1 279 5 view .LVU478
 280:armwave.c     **** 
 281:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 282:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 1895              		.loc 1 282 5 view .LVU479
 1896              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1897              		.loc 1 282 40 is_stmt 0 view .LVU480
 1898 0968 04319FE5 		ldr	r3, .L65	@ tmp187,
 1899              	@ armwave.c:274: {
 274:armwave.c     ****     int yy, ys, yi, w, scale_value;
 1900              		.loc 1 274 1 view .LVU481
 1901 096c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1902              		.cfi_def_cfa_offset 36
 1903              		.cfi_offset 4, -36
 1904              		.cfi_offset 5, -32
 1905              		.cfi_offset 6, -28
 1906              		.cfi_offset 7, -24
 1907              		.cfi_offset 8, -20
 1908              		.cfi_offset 9, -16
 1909              		.cfi_offset 10, -12
 1910              		.cfi_offset 11, -8
 1911              		.cfi_offset 14, -4
 1912 0970 0CD04DE2 		sub	sp, sp, #12	@,,
 1913              		.cfi_def_cfa_offset 48
 1914              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 1915              		.loc 1 282 82 view .LVU482
 1916 0974 246093E5 		ldr	r6, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 1917              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 283:armwave.c     **** 
 284:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
 285:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 286:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
 287:armwave.c     ****         g_armwave_state.bitdepth_height);
 288:armwave.c     **** 
 289:armwave.c     ****     // roll through each waveform
 290:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 1918              		.loc 1 290 35 view .LVU483
 1919 0978 38B093E5 		ldr	fp, [r3, #56]	@ _134, g_armwave_state.waves
 1920              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 282:armwave.c     **** 
 1921              		.loc 1 282 40 view .LVU484
 1922 097c 04E093E5 		ldr	lr, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 1923              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 1924              		.loc 1 290 5 view .LVU485
 1925 0980 00005BE3 		cmp	fp, #0	@ _134,
 1926              	@ armwave.c:282:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.
 282:armwave.c     **** 
 1927              		.loc 1 282 65 view .LVU486
 1928 0984 900605E0 		mul	r5, r0, r6	@ tmp189, slice_y, _2
 1929              	.LVL81:
 1930              		.loc 1 290 5 is_stmt 1 view .LVU487
 1931              		.loc 1 290 5 is_stmt 0 view .LVU488
 1932 0988 370000DA 		ble	.L55		@,
 1933              	@ armwave.c:291:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 291:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1934              		.loc 1 291 36 view .LVU489
 1935 098c 149093E5 		ldr	r9, [r3, #20]	@ _5, g_armwave_state.wave_buffer
 1936              	@ armwave.c:291:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 1937              		.loc 1 291 81 view .LVU490
 1938 0990 343093E5 		ldr	r3, [r3, #52]	@ _6, g_armwave_state.wave_stride
 1939 0994 000051E3 		cmp	r1, #0	@ height,
 1940 0998 04308DE5 		str	r3, [sp, #4]	@ _6, %sfp
 1941 099c 3200000A 		beq	.L55		@,
 1942 09a0 2558A0E1 		lsr	r5, r5, #16	@ _4, tmp189,
 1943              	.LVL82:
 1944              		.loc 1 291 81 view .LVU491
 1945 09a4 009089E0 		add	r9, r9, r0	@ ivtmp.170, _5, slice_y
 1946              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1947              		.loc 1 290 11 view .LVU492
 1948 09a8 00A0A0E3 		mov	r10, #0	@ w,
 1949              	.LVL83:
 1950              	.L58:
 1951              		.loc 1 291 9 is_stmt 1 view .LVU493
 292:armwave.c     **** 
 293:armwave.c     ****         // roll through y and render the slice into the out buffer
 294:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 295:armwave.c     ****         for(yy = 0, yi = 0; yy < height; yy += 4) {
 1952              		.loc 1 295 9 view .LVU494
 1953              		.loc 1 295 9 is_stmt 0 view .LVU495
 1954 09ac 044049E2 		sub	r4, r9, #4	@ ivtmp.160, ivtmp.170,
 1955              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1956              		.loc 1 290 11 view .LVU496
 1957 09b0 0030A0E3 		mov	r3, #0	@ ivtmp.163,
 1958              	.LVL84:
 1959              	.L57:
 296:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1960              		.loc 1 296 13 is_stmt 1 view .LVU497
 1961              	@ armwave.c:296:             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 1962              		.loc 1 296 18 is_stmt 0 view .LVU498
 1963 09b4 042094E5 		ldr	r2, [r4, #4]	@ word, MEM[base: _266, offset: 0B]
 1964              	.LVL85:
 297:armwave.c     ****             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likely next intent
 1965              		.loc 1 297 13 is_stmt 1 view .LVU499
 1966              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 298:armwave.c     ****             
 299:armwave.c     ****             for(ys = 0; ys < 4; ys++, yi++) {
 300:armwave.c     ****                 scale_value = word & 0xff;
 301:armwave.c     ****                 
 302:armwave.c     **** #if USE_ALU_XCOORD == 1
 303:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
 304:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 305:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 306:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 307:armwave.c     ****                 write_buffer = write_buffer_base + \
 308:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 309:armwave.c     **** #else
 310:armwave.c     ****                 write_buffer = write_buffer_base + \
 311:armwave.c     ****                     (g_armwave_state.xcoord_to_xpixel[yi] * 256 * sizeof(bufftyp_t));
 312:armwave.c     **** #endif
 313:armwave.c     **** 
 314:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 1967              		.loc 1 314 47 is_stmt 0 view .LVU500
 1968 09b8 230885E0 		add	r0, r5, r3, lsr #16	@ tmp195, _4, ivtmp.163,
 1969              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 1970              		.loc 1 308 34 view .LVU501
 1971 09bc 033086E0 		add	r3, r6, r3	@ _77, _2, ivtmp.163
 1972              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 1973              		.loc 1 300 29 view .LVU502
 1974 09c0 7270EFE6 		uxtb	r7, r2	@ scale_value, word
 1975              	@ armwave.c:315:                 word >>= 8;
 315:armwave.c     ****                 word >>= 8;
 1976              		.loc 1 315 22 view .LVU503
 1977 09c4 22C4A0E1 		lsr	ip, r2, #8	@ word, word,
 1978              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1979              		.loc 1 314 47 view .LVU504
 1980 09c8 8770A0E1 		lsl	r7, r7, #1	@ tmp198, scale_value,
 1981 09cc 007587E0 		add	r7, r7, r0, lsl #10	@ tmp199, tmp198, tmp195,
 1982              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 1983              		.loc 1 300 29 view .LVU505
 1984 09d0 7CC0EFE6 		uxtb	ip, ip	@ scale_value, word
 1985              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1986              		.loc 1 314 47 view .LVU506
 1987 09d4 230885E0 		add	r0, r5, r3, lsr #16	@ tmp204, _4, _77,
 1988 09d8 B7809EE1 		ldrh	r8, [lr, r7]	@ *_62, *_62
 1989 09dc 8CC0A0E1 		lsl	ip, ip, #1	@ tmp208, scale_value,
 1990 09e0 00C58CE0 		add	ip, ip, r0, lsl #10	@ tmp209, tmp208, tmp204,
 1991              	@ armwave.c:315:                 word >>= 8;
 1992              		.loc 1 315 22 view .LVU507
 1993 09e4 2208A0E1 		lsr	r0, r2, #16	@ word, word,
 1994              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 1995              		.loc 1 308 34 view .LVU508
 1996 09e8 033086E0 		add	r3, r6, r3	@ _99, _2, _77
 1997              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 1998              		.loc 1 314 47 view .LVU509
 1999 09ec 018088E2 		add	r8, r8, #1	@ tmp202, *_62,
 2000              	@ armwave.c:300:                 scale_value = word & 0xff;
 300:armwave.c     ****                 
 2001              		.loc 1 300 29 view .LVU510
 2002 09f0 7000EFE6 		uxtb	r0, r0	@ scale_value, word
 2003              	@ armwave.c:297:             __builtin_prefetch(wave_base + yy + 64);    // Advise CPU of our likel
 297:armwave.c     ****             
 2004              		.loc 1 297 13 view .LVU511
 2005 09f4 44F0D4F5 		pld	[r4, #68]		@
 299:armwave.c     ****                 scale_value = word & 0xff;
 2006              		.loc 1 299 13 is_stmt 1 view .LVU512
 2007              	.LVL86:
 300:armwave.c     ****                 
 2008              		.loc 1 300 17 view .LVU513
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2009              		.loc 1 307 17 view .LVU514
 314:armwave.c     ****                 word >>= 8;
 2010              		.loc 1 314 17 view .LVU515
 2011              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2012              		.loc 1 314 47 is_stmt 0 view .LVU516
 2013 09f8 B7808EE1 		strh	r8, [lr, r7]	@ movhi	@ tmp202, *_62
 2014              		.loc 1 315 17 is_stmt 1 view .LVU517
 2015              	.LVL87:
 300:armwave.c     ****                 
 2016              		.loc 1 300 17 view .LVU518
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2017              		.loc 1 307 17 view .LVU519
 314:armwave.c     ****                 word >>= 8;
 2018              		.loc 1 314 17 view .LVU520
 2019              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2020              		.loc 1 314 47 is_stmt 0 view .LVU521
 2021 09fc 238885E0 		add	r8, r5, r3, lsr #16	@ tmp214, _4, _99,
 2022 0a00 BC709EE1 		ldrh	r7, [lr, ip]	@ *_84, *_84
 2023 0a04 8000A0E1 		lsl	r0, r0, #1	@ tmp218, scale_value,
 2024 0a08 080580E0 		add	r0, r0, r8, lsl #10	@ tmp219, tmp218, tmp214,
 2025              	@ armwave.c:308:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 308:armwave.c     **** #else
 2026              		.loc 1 308 34 view .LVU522
 2027 0a0c 033086E0 		add	r3, r6, r3	@ _121, _2, _99
 2028              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2029              		.loc 1 314 47 view .LVU523
 2030 0a10 017087E2 		add	r7, r7, #1	@ tmp212, *_84,
 2031              	@ armwave.c:315:                 word >>= 8;
 2032              		.loc 1 315 22 view .LVU524
 2033 0a14 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 2034              	.LVL88:
 2035              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2036              		.loc 1 314 47 view .LVU525
 2037 0a18 BC708EE1 		strh	r7, [lr, ip]	@ movhi	@ tmp212, *_84
 2038              		.loc 1 315 17 is_stmt 1 view .LVU526
 2039              	.LVL89:
 300:armwave.c     ****                 
 2040              		.loc 1 300 17 view .LVU527
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2041              		.loc 1 307 17 view .LVU528
 314:armwave.c     ****                 word >>= 8;
 2042              		.loc 1 314 17 view .LVU529
 2043              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2044              		.loc 1 314 47 is_stmt 0 view .LVU530
 2045 0a1c 237885E0 		add	r7, r5, r3, lsr #16	@ tmp224, _4, _121,
 2046 0a20 B0C09EE1 		ldrh	ip, [lr, r0]	@ *_106, *_106
 2047 0a24 8220A0E1 		lsl	r2, r2, #1	@ tmp227, word,
 2048 0a28 072582E0 		add	r2, r2, r7, lsl #10	@ tmp228, tmp227, tmp224,
 2049 0a2c 01C08CE2 		add	ip, ip, #1	@ tmp222, *_106,
 2050 0a30 B0C08EE1 		strh	ip, [lr, r0]	@ movhi	@ tmp222, *_106
 2051              		.loc 1 315 17 is_stmt 1 view .LVU531
 2052              	.LVL90:
 300:armwave.c     ****                 
 2053              		.loc 1 300 17 view .LVU532
 307:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 2054              		.loc 1 307 17 view .LVU533
 314:armwave.c     ****                 word >>= 8;
 2055              		.loc 1 314 17 view .LVU534
 2056              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2057              		.loc 1 314 47 is_stmt 0 view .LVU535
 2058 0a34 B2009EE1 		ldrh	r0, [lr, r2]	@ *_128, *_128
 2059 0a38 08C084E2 		add	ip, r4, #8	@ tmp232, ivtmp.160,
 2060 0a3c 09C04CE0 		sub	ip, ip, r9	@ _259, tmp232, ivtmp.170
 2061 0a40 010080E2 		add	r0, r0, #1	@ tmp231, *_128,
 2062              	@ armwave.c:295:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 295:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2063              		.loc 1 295 9 view .LVU536
 2064 0a44 0C0051E1 		cmp	r1, ip	@ height, _259
 2065 0a48 033086E0 		add	r3, r6, r3	@ ivtmp.163, _2, _121
 2066              	.LVL91:
 2067              	@ armwave.c:314:                 *(write_buffer + scale_value) += 1;
 314:armwave.c     ****                 word >>= 8;
 2068              		.loc 1 314 47 view .LVU537
 2069 0a4c B2008EE1 		strh	r0, [lr, r2]	@ movhi	@ tmp231, *_128
 2070              		.loc 1 315 17 is_stmt 1 view .LVU538
 2071              	.LVL92:
 2072              		.loc 1 315 17 is_stmt 0 view .LVU539
 2073 0a50 044084E2 		add	r4, r4, #4	@ ivtmp.160, ivtmp.160,
 2074              	.LVL93:
 2075              	@ armwave.c:295:         for(yy = 0, yi = 0; yy < height; yy += 4) {
 295:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);        // Read 4 bytes at once
 2076              		.loc 1 295 9 view .LVU540
 2077 0a54 D6FFFF8A 		bhi	.L57		@,
 2078              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2079              		.loc 1 290 44 view .LVU541
 2080 0a58 01A08AE2 		add	r10, r10, #1	@ w, w,
 2081              	.LVL94:
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2082              		.loc 1 290 44 view .LVU542
 2083 0a5c 04309DE5 		ldr	r3, [sp, #4]	@ _6, %sfp
 2084              	@ armwave.c:290:     for(w = 0; w < g_armwave_state.waves; w++) {
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2085              		.loc 1 290 5 view .LVU543
 2086 0a60 0B005AE1 		cmp	r10, fp	@ w, _134
 2087 0a64 039089E0 		add	r9, r9, r3	@ ivtmp.170, ivtmp.170, _6
 2088              	.LVL95:
 290:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2089              		.loc 1 290 5 view .LVU544
 2090 0a68 CFFFFF1A 		bne	.L58		@,
 2091              	.LVL96:
 2092              	.L55:
 2093              	@ armwave.c:321: }
 316:armwave.c     ****             }
 317:armwave.c     ****         }
 318:armwave.c     ****     }
 319:armwave.c     **** 
 320:armwave.c     ****     //printf("wb_end=%d\n", write_buffer - write_buffer_base);
 321:armwave.c     **** }
 2094              		.loc 1 321 1 view .LVU545
 2095 0a6c 0CD08DE2 		add	sp, sp, #12	@,,
 2096              		.cfi_def_cfa_offset 36
 2097              		@ sp needed	@
 2098 0a70 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2099              	.LVL97:
 2100              	.L66:
 2101              		.loc 1 321 1 view .LVU546
 2102              		.align	2
 2103              	.L65:
 2104 0a74 00000000 		.word	g_armwave_state
 2105              		.cfi_endproc
 2106              	.LFE64:
 2108              		.align	2
 2109              		.global	fill_xvimage_scaled
 2110              		.syntax unified
 2111              		.arm
 2112              		.fpu vfp
 2114              	fill_xvimage_scaled:
 2115              	.LVL98:
 2116              	.LFB65:
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Render buffer to an XvImage canvas.
 325:armwave.c     ****  */
 326:armwave.c     **** void fill_xvimage_scaled(XvImage *img)
 327:armwave.c     **** {
 2117              		.loc 1 327 1 is_stmt 1 view -0
 2118              		.cfi_startproc
 2119              		@ args = 0, pretend = 0, frame = 8
 2120              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2121              		.loc 1 328 5 view .LVU548
 329:armwave.c     ****     // uint32_t ysub;
 330:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 2122              		.loc 1 330 5 view .LVU549
 331:armwave.c     ****     uint8_t r, g, b;
 2123              		.loc 1 331 5 view .LVU550
 332:armwave.c     ****     int value; 
 2124              		.loc 1 332 5 view .LVU551
 333:armwave.c     ****     // uint8_t row;
 334:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2125              		.loc 1 334 5 view .LVU552
 2126              	@ armwave.c:327: {
 327:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2127              		.loc 1 327 1 is_stmt 0 view .LVU553
 2128 0a78 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2129              		.cfi_def_cfa_offset 36
 2130              		.cfi_offset 4, -36
 2131              		.cfi_offset 5, -32
 2132              		.cfi_offset 6, -28
 2133              		.cfi_offset 7, -24
 2134              		.cfi_offset 8, -20
 2135              		.cfi_offset 9, -16
 2136              		.cfi_offset 10, -12
 2137              		.cfi_offset 11, -8
 2138              		.cfi_offset 14, -4
 2139 0a7c 0040A0E1 		mov	r4, r0	@ img, img
 2140              	.LBB92:
 2141              	.LBB93:
 2142              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2143              		.loc 1 186 36 view .LVU554
 2144 0a80 180090E5 		ldr	r0, [r0, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2145              	.LVL99:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2146              		.loc 1 186 36 view .LVU555
 2147              	.LBE93:
 2148              	.LBE92:
 2149              	@ armwave.c:334:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2150              		.loc 1 334 15 view .LVU556
 2151 0a84 10329FE5 		ldr	r3, .L83	@ tmp228,
 2152              	.LBB99:
 2153              	.LBB94:
 2154              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2155              		.loc 1 186 22 view .LVU557
 2156 0a88 1CE094E5 		ldr	lr, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2157 0a8c 000090E5 		ldr	r0, [r0]	@ *_68, *_68
 2158              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2159              		.loc 1 186 59 view .LVU558
 2160 0a90 081094E5 		ldr	r1, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2161 0a94 042094E5 		ldr	r2, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2162              	.LBE94:
 2163              	.LBE99:
 2164              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 335:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 336:armwave.c     ****     uint32_t offset;
 337:armwave.c     **** 
 338:armwave.c     ****     //printf("output buffer: 0x%08x\n", out_buffer);
 339:armwave.c     **** 
 340:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2165              		.loc 1 340 10 view .LVU559
 2166 0a98 70C093E5 		ldr	ip, [r3, #112]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2167              	.LBB100:
 2168              	.LBB95:
 2169              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2170              		.loc 1 186 5 view .LVU560
 2171 0a9c 00008EE0 		add	r0, lr, r0	@, img_23(D)->data, *_68
 2172              	.LBE95:
 2173              	.LBE100:
 2174              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2175              		.loc 1 340 10 view .LVU561
 2176 0aa0 40E093E5 		ldr	lr, [r3, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2177              	@ armwave.c:327: {
 327:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 2178              		.loc 1 327 1 view .LVU562
 2179 0aa4 0CD04DE2 		sub	sp, sp, #12	@,,
 2180              		.cfi_def_cfa_offset 48
 2181              	.LBB101:
 2182              	.LBB96:
 2183              	@ armwave.c:186:     memset(img->data + img->offsets[0], yuv.y, img->width * img->height);
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2184              		.loc 1 186 5 view .LVU563
 2185 0aa8 910202E0 		mul	r2, r1, r2	@, img_23(D)->height, img_23(D)->width
 2186 0aac 1010A0E3 		mov	r1, #16	@,
 2187              	.LBE96:
 2188              	.LBE101:
 2189              	@ armwave.c:340:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 2190              		.loc 1 340 10 view .LVU564
 2191 0ab0 9E0C07E0 		mul	r7, lr, ip	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2192              	@ armwave.c:334:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 334:armwave.c     ****     //uint32_t *out_buffer_base = out_buffer;
 2193              		.loc 1 334 15 view .LVU565
 2194 0ab4 049093E5 		ldr	r9, [r3, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2195              	.LVL100:
 336:armwave.c     **** 
 2196              		.loc 1 336 5 is_stmt 1 view .LVU566
 2197              		.loc 1 340 5 view .LVU567
 341:armwave.c     ****     
 342:armwave.c     ****     //printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack 
 343:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 344:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 345:armwave.c     **** 
 346:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 347:armwave.c     ****     //memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 348:armwave.c     ****     fill_rgb_xvimage(img, &g_fill_black);
 2198              		.loc 1 348 5 view .LVU568
 2199              	.LBB102:
 2200              	.LBI92:
 179:armwave.c     **** {
 2201              		.loc 1 179 6 view .LVU569
 2202              	.LBB97:
 181:armwave.c     ****     
 2203              		.loc 1 181 5 view .LVU570
 184:armwave.c     ****     
 2204              		.loc 1 184 5 view .LVU571
 184:armwave.c     ****     
 2205              		.loc 1 184 5 is_stmt 0 view .LVU572
 2206              	.LBE97:
 2207              	.LBE102:
  96:armwave.c     ****     yuv_out->u = 128 + (-0.148f * rgb_in->r) - (0.291f * rgb_in->g) + (0.439f * rgb_in->b);
 2208              		.loc 1 96 5 is_stmt 1 view .LVU573
  97:armwave.c     ****     yuv_out->v = 128 + ( 0.439f * rgb_in->r) - (0.368f * rgb_in->g) - (0.071f * rgb_in->b);
 2209              		.loc 1 97 5 view .LVU574
  98:armwave.c     **** }
 2210              		.loc 1 98 5 view .LVU575
 2211              	.LBB103:
 2212              	.LBB98:
 186:armwave.c     ****     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2);
 2213              		.loc 1 186 5 view .LVU576
 2214 0ab8 FEFFFFEB 		bl	memset		@
 2215              	.LVL101:
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2216              		.loc 1 187 5 view .LVU577
 2217              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2218              		.loc 1 187 61 is_stmt 0 view .LVU578
 2219 0abc 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2220              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2221              		.loc 1 187 65 view .LVU579
 2222 0ac0 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2223              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2224              		.loc 1 187 36 view .LVU580
 2225 0ac4 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2226              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2227              		.loc 1 187 65 view .LVU581
 2228 0ac8 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_85 + 4B], MEM[(int *)_85 + 4B]
 2229              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2230              		.loc 1 187 22 view .LVU582
 2231 0acc 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2232 0ad0 043093E5 		ldr	r3, [r3, #4]	@ MEM[(int *)_79 + 4B], MEM[(int *)_79 + 4B]
 2233              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2234              		.loc 1 187 65 view .LVU583
 2235 0ad4 920102E0 		mul	r2, r2, r1	@ tmp262, img_23(D)->height, MEM[(int *)_85 + 4B]
 2236              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2237              		.loc 1 187 5 view .LVU584
 2238 0ad8 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_79 + 4B]
 2239 0adc 8010A0E3 		mov	r1, #128	@,
 2240              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2241              		.loc 1 187 80 view .LVU585
 2242 0ae0 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp267, tmp262, tmp262,
 2243              	@ armwave.c:187:     memset(img->data + img->offsets[1], yuv.v, (img->pitches[1] * img->height) / 2
 187:armwave.c     ****     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2);
 2244              		.loc 1 187 5 view .LVU586
 2245 0ae4 C220A0E1 		asr	r2, r2, #1	@, tmp267,
 2246 0ae8 FEFFFFEB 		bl	memset		@
 2247              	.LVL102:
 188:armwave.c     **** }
 2248              		.loc 1 188 5 is_stmt 1 view .LVU587
 2249              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2250              		.loc 1 188 61 is_stmt 0 view .LVU588
 2251 0aec 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2252              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2253              		.loc 1 188 65 view .LVU589
 2254 0af0 082094E5 		ldr	r2, [r4, #8]	@ img_23(D)->height, img_23(D)->height
 2255              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2256              		.loc 1 188 36 view .LVU590
 2257 0af4 183094E5 		ldr	r3, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2258              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2259              		.loc 1 188 65 view .LVU591
 2260 0af8 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_98 + 8B], MEM[(int *)_98 + 8B]
 2261              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2262              		.loc 1 188 22 view .LVU592
 2263 0afc 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2264 0b00 083093E5 		ldr	r3, [r3, #8]	@ MEM[(int *)_92 + 8B], MEM[(int *)_92 + 8B]
 2265              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2266              		.loc 1 188 65 view .LVU593
 2267 0b04 920102E0 		mul	r2, r2, r1	@ tmp287, img_23(D)->height, MEM[(int *)_98 + 8B]
 2268              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2269              		.loc 1 188 5 view .LVU594
 2270 0b08 030080E0 		add	r0, r0, r3	@, img_23(D)->data, MEM[(int *)_92 + 8B]
 2271 0b0c 8010A0E3 		mov	r1, #128	@,
 2272              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2273              		.loc 1 188 80 view .LVU595
 2274 0b10 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp292, tmp287, tmp287,
 2275              	@ armwave.c:188:     memset(img->data + img->offsets[2], yuv.u, (img->pitches[2] * img->height) / 2
 188:armwave.c     **** }
 2276              		.loc 1 188 5 view .LVU596
 2277 0b14 C220A0E1 		asr	r2, r2, #1	@, tmp292,
 2278 0b18 FEFFFFEB 		bl	memset		@
 2279              	.LVL103:
 188:armwave.c     **** }
 2280              		.loc 1 188 5 view .LVU597
 2281              	.LBE98:
 2282              	.LBE103:
 2283              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 349:armwave.c     ****     
 350:armwave.c     ****     //printf("iter...\n");
 351:armwave.c     **** 
 352:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 2284              		.loc 1 352 5 view .LVU598
 2285 0b1c 000057E3 		cmp	r7, #0	@ npix,
 2286 0b20 060000DA 		ble	.L67		@,
 2287              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 2288              		.loc 1 352 11 view .LVU599
 2289 0b24 00B0A0E3 		mov	fp, #0	@ n,
 2290              	.LVL104:
 2291              	.L73:
 353:armwave.c     ****         wave_word = *base_32ptr++;
 2292              		.loc 1 353 9 is_stmt 1 view .LVU600
 2293              	@ armwave.c:353:         wave_word = *base_32ptr++;
 2294              		.loc 1 353 19 is_stmt 0 view .LVU601
 2295 0b28 043099E4 		ldr	r3, [r9], #4	@ wave_word, MEM[base: base_32ptr_25, offset: 4294967292B]
 2296              	.LVL105:
 354:armwave.c     **** 
 355:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 2297              		.loc 1 355 9 is_stmt 1 view .LVU602
 2298              	@ armwave.c:355:         if(COND_UNLIKELY(wave_word != 0)) {
 2299              		.loc 1 355 11 is_stmt 0 view .LVU603
 2300 0b2c 000053E3 		cmp	r3, #0	@ wave_word,
 2301 0b30 0400001A 		bne	.L82		@,
 2302              	.LVL106:
 2303              	.L70:
 2304              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 352:armwave.c     ****         wave_word = *base_32ptr++;
 2305              		.loc 1 352 28 discriminator 2 view .LVU604
 2306 0b34 02B08BE2 		add	fp, fp, #2	@ n, n,
 2307              	.LVL107:
 2308              	@ armwave.c:352:     for(n = 0; n < npix; n += 2) {
 352:armwave.c     ****         wave_word = *base_32ptr++;
 2309              		.loc 1 352 5 discriminator 2 view .LVU605
 2310 0b38 0B0057E1 		cmp	r7, fp	@ npix, n
 2311 0b3c F9FFFFCA 		bgt	.L73		@,
 2312              	.LVL108:
 2313              	.L67:
 2314              	@ armwave.c:376: }
 356:armwave.c     ****             for(w = 0; w < 2; w++) {
 357:armwave.c     ****                 value = wave_word & 0xffff;
 358:armwave.c     ****                 wave_word >>= 16;
 359:armwave.c     **** 
 360:armwave.c     ****                 if(value != 0) {
 361:armwave.c     ****                     // Plot the pixels
 362:armwave.c     ****                     nsub = n + w;
 363:armwave.c     ****                     yy = (nsub & 0xff); 
 364:armwave.c     ****                     xx = (nsub >> 8) / 2;
 365:armwave.c     **** 
 366:armwave.c     ****                     // FASTQ does not paint U/V for odd pixels; works OK for most purposes.
 367:armwave.c     ****                     //plot_pixel_yuv_fastq(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 369:armwave.c     ****                     painted++;
 370:armwave.c     ****                 }
 371:armwave.c     ****             }
 372:armwave.c     ****         }
 373:armwave.c     ****     }
 374:armwave.c     **** 
 375:armwave.c     ****     //printf("...done paint %d pixels...\n", painted);
 376:armwave.c     **** }
 2315              		.loc 1 376 1 view .LVU606
 2316 0b40 0CD08DE2 		add	sp, sp, #12	@,,
 2317              		.cfi_remember_state
 2318              		.cfi_def_cfa_offset 36
 2319              		@ sp needed	@
 2320 0b44 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2321              	.LVL109:
 2322              	.L82:
 2323              		.cfi_restore_state
 357:armwave.c     ****                 wave_word >>= 16;
 2324              		.loc 1 357 17 is_stmt 1 view .LVU607
 362:armwave.c     ****                     yy = (nsub & 0xff); 
 2325              		.loc 1 362 21 view .LVU608
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2326              		.loc 1 363 21 view .LVU609
 364:armwave.c     **** 
 2327              		.loc 1 364 21 view .LVU610
 362:armwave.c     ****                     yy = (nsub & 0xff); 
 2328              		.loc 1 362 21 view .LVU611
 2329 0b48 01208BE2 		add	r2, fp, #1	@ _132, n,
 2330              	.LVL110:
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2331              		.loc 1 363 21 view .LVU612
 364:armwave.c     **** 
 2332              		.loc 1 364 21 view .LVU613
 2333              	@ armwave.c:363:                     yy = (nsub & 0xff); 
 363:armwave.c     ****                     xx = (nsub >> 8) / 2;
 2334              		.loc 1 363 24 is_stmt 0 view .LVU614
 2335 0b4c 7B50EFE6 		uxtb	r5, fp	@ yy.10_115, n
 2336 0b50 72E0EFE6 		uxtb	lr, r2	@ yy.10_170, _132
 2337              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2338              		.loc 1 364 32 view .LVU615
 2339 0b54 4224A0E1 		asr	r2, r2, #8	@ _168, _132,
 2340 0b58 4BC4A0E1 		asr	ip, fp, #8	@ _113, n,
 2341              	.LVL111:
 368:armwave.c     ****                     painted++;
 2342              		.loc 1 368 21 is_stmt 1 view .LVU616
 368:armwave.c     ****                     painted++;
 2343              		.loc 1 368 21 view .LVU617
 2344              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2345              		.loc 1 364 38 is_stmt 0 view .LVU618
 2346 0b5c A21F82E0 		add	r1, r2, r2, lsr #31	@ tmp358, _168, _168,
 2347 0b60 04108DE5 		str	r1, [sp, #4]	@ tmp358, %sfp
 2348              	.LBB104:
 2349              	.LBB105:
 2350              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2351              		.loc 1 156 55 view .LVU619
 2352 0b64 C510A0E1 		asr	r1, r5, #1	@ _130, yy.10_115,
 2353 0b68 00108DE5 		str	r1, [sp]	@ _130, %sfp
 2354              	.LBE105:
 2355              	.LBE104:
 2356              	@ armwave.c:357:                 value = wave_word & 0xffff;
 357:armwave.c     ****                 wave_word >>= 16;
 2357              		.loc 1 357 23 view .LVU620
 2358 0b6c 7310FFE6 		uxth	r1, r3	@ value, wave_word
 2359              	.LVL112:
 358:armwave.c     **** 
 2360              		.loc 1 358 17 is_stmt 1 view .LVU621
 2361              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2362              		.loc 1 360 19 is_stmt 0 view .LVU622
 2363 0b70 000051E3 		cmp	r1, #0	@ value,
 2364              	@ armwave.c:364:                     xx = (nsub >> 8) / 2;
 364:armwave.c     **** 
 2365              		.loc 1 364 38 view .LVU623
 2366 0b74 AC6F8CE0 		add	r6, ip, ip, lsr #31	@ tmp308, _113, _113,
 2367              	.LBB111:
 2368              	.LBB106:
 2369              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2370              		.loc 1 156 55 view .LVU624
 2371 0b78 CEA0A0E1 		asr	r10, lr, #1	@ _185, yy.10_170,
 2372              	.LBE106:
 2373              	.LBE111:
 2374              	@ armwave.c:358:                 wave_word >>= 16;
 358:armwave.c     **** 
 2375              		.loc 1 358 27 view .LVU625
 2376 0b7c 2338A0E1 		lsr	r3, r3, #16	@ wave_word, wave_word,
 2377              	.LVL113:
 360:armwave.c     ****                     // Plot the pixels
 2378              		.loc 1 360 17 is_stmt 1 view .LVU626
 357:armwave.c     ****                 wave_word >>= 16;
 2379              		.loc 1 357 17 view .LVU627
 358:armwave.c     **** 
 2380              		.loc 1 358 17 view .LVU628
 360:armwave.c     ****                     // Plot the pixels
 2381              		.loc 1 360 17 view .LVU629
 2382              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2383              		.loc 1 360 19 is_stmt 0 view .LVU630
 2384 0b80 2100000A 		beq	.L71		@,
 2385              	.LBB112:
 2386              	.LBB107:
 2387              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2388              		.loc 1 155 37 view .LVU631
 2389 0b84 048094E5 		ldr	r8, [r4, #4]	@ tmp408, img_23(D)->width
 2390 0b88 1C0094E5 		ldr	r0, [r4, #28]	@ tmp409, img_23(D)->data
 2391              	.LBE107:
 2392              	.LBE112:
 2393              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2394              		.loc 1 368 60 view .LVU632
 2395 0b8c FF0051E3 		cmp	r1, #255	@ value,
 2396 0b90 FF10A0A3 		movge	r1, #255	@ _116,
 2397              	.LVL114:
 2398              	.LBB113:
 2399              	.LBI104:
 151:armwave.c     **** {
 2400              		.loc 1 151 44 is_stmt 1 view .LVU633
 2401              	.LBB108:
 153:armwave.c     ****     
 2402              		.loc 1 153 5 view .LVU634
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2403              		.loc 1 155 5 view .LVU635
 2404              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2405              		.loc 1 155 37 is_stmt 0 view .LVU636
 2406 0b94 980525E0 		mla	r5, r8, r5, r0	@ tmp311, tmp408, yy.10_115, tmp409
 2407              	.LVL115:
 2408              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2409              		.loc 1 155 45 view .LVU637
 2410 0b98 00019FE5 		ldr	r0, .L83+4	@ tmp425,
 2411 0b9c 811081E0 		add	r1, r1, r1, lsl #1	@ tmp302, _116, _116,
 2412              	.LVL116:
 2413              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2414              		.loc 1 156 66 view .LVU638
 2415 0ba0 03808CE2 		add	r8, ip, #3	@ tmp315, _113,
 2416              	.LVL117:
 2417              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2418              		.loc 1 155 45 view .LVU639
 2419 0ba4 0100D0E7 		ldrb	r0, [r0, r1]	@ zero_extendqisi2	@ _123, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].y
 2420              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2421              		.loc 1 156 66 view .LVU640
 2422 0ba8 00005CE3 		cmp	ip, #0	@ _113,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2423              		.loc 1 156 66 view .LVU641
 2424 0bac 08C0A0B1 		movlt	ip, r8	@ _113, tmp315
 2425              	.LVL118:
 2426              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2427              		.loc 1 155 37 view .LVU642
 2428 0bb0 C600C5E7 		strb	r0, [r5, r6, asr #1]	@ _123, *_122
 2429              	.LVL119:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2430              		.loc 1 156 5 is_stmt 1 view .LVU643
 2431              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2432              		.loc 1 156 46 is_stmt 0 view .LVU644
 2433 0bb4 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2434              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2435              		.loc 1 155 45 view .LVU645
 2436 0bb8 E0809FE5 		ldr	r8, .L83+4	@ tmp426,
 2437              	.LVL120:
 2438              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2439              		.loc 1 156 72 view .LVU646
 2440 0bbc 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2441              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2442              		.loc 1 156 50 view .LVU647
 2443 0bc0 045090E5 		ldr	r5, [r0, #4]	@ MEM[(int *)_128 + 4B], MEM[(int *)_128 + 4B]
 2444              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2445              		.loc 1 155 45 view .LVU648
 2446 0bc4 011088E0 		add	r1, r8, r1	@ tmp303, tmp426, tmp302
 2447              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2448              		.loc 1 156 72 view .LVU649
 2449 0bc8 00809DE5 		ldr	r8, [sp]	@ _130, %sfp
 2450              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2451              		.loc 1 156 66 view .LVU650
 2452 0bcc 4CC1A0E1 		asr	ip, ip, #2	@ tmp316, _113,
 2453              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2454              		.loc 1 156 72 view .LVU651
 2455 0bd0 0C0086E0 		add	r0, r6, ip	@ tmp329, img_23(D)->data, tmp316
 2456 0bd4 950820E0 		mla	r0, r5, r8, r0	@ tmp330, MEM[(int *)_128 + 4B], _130, tmp329
 2457 0bd8 185094E5 		ldr	r5, [r4, #24]	@ tmp413, img_23(D)->offsets
 2458              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2459              		.loc 1 156 80 view .LVU652
 2460 0bdc 0260D1E5 		ldrb	r6, [r1, #2]	@ zero_extendqisi2	@ _143, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].v
 2461              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2462              		.loc 1 156 72 view .LVU653
 2463 0be0 045095E5 		ldr	r5, [r5, #4]	@ MEM[(int *)_126 + 4B], MEM[(int *)_126 + 4B]
 2464 0be4 0560C0E7 		strb	r6, [r0, r5]	@ _143, *_142
 157:armwave.c     **** }
 2465              		.loc 1 157 5 is_stmt 1 view .LVU654
 2466              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2467              		.loc 1 157 46 is_stmt 0 view .LVU655
 2468 0be8 140094E5 		ldr	r0, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2469              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2470              		.loc 1 157 72 view .LVU656
 2471 0bec 1C6094E5 		ldr	r6, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2472              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2473              		.loc 1 157 80 view .LVU657
 2474 0bf0 0110D1E5 		ldrb	r1, [r1, #1]	@ zero_extendqisi2	@ _155, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_116].u
 2475              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2476              		.loc 1 157 50 view .LVU658
 2477 0bf4 085090E5 		ldr	r5, [r0, #8]	@ MEM[(int *)_148 + 8B], MEM[(int *)_148 + 8B]
 2478              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2479              		.loc 1 157 72 view .LVU659
 2480 0bf8 180094E5 		ldr	r0, [r4, #24]	@ tmp415, img_23(D)->offsets
 2481 0bfc 0CC086E0 		add	ip, r6, ip	@ tmp345, img_23(D)->data, tmp316
 2482 0c00 95C82CE0 		mla	ip, r5, r8, ip	@ tmp346, MEM[(int *)_148 + 8B], _130, tmp345
 2483 0c04 080090E5 		ldr	r0, [r0, #8]	@ MEM[(int *)_146 + 8B], MEM[(int *)_146 + 8B]
 2484 0c08 0010CCE7 		strb	r1, [ip, r0]	@ _155, *_154
 2485              	.LVL121:
 157:armwave.c     **** }
 2486              		.loc 1 157 72 view .LVU660
 2487              	.LBE108:
 2488              	.LBE113:
 369:armwave.c     ****                 }
 2489              		.loc 1 369 21 is_stmt 1 view .LVU661
 2490              	.L71:
 2491              	@ armwave.c:360:                 if(value != 0) {
 360:armwave.c     ****                     // Plot the pixels
 2492              		.loc 1 360 19 is_stmt 0 view .LVU662
 2493 0c0c 000053E3 		cmp	r3, #0	@ wave_word,
 2494 0c10 C7FFFF0A 		beq	.L70		@,
 2495              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2496              		.loc 1 368 60 view .LVU663
 2497 0c14 FF0053E3 		cmp	r3, #255	@ wave_word,
 2498              	.LBB114:
 2499              	.LBB109:
 2500              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2501              		.loc 1 155 27 view .LVU664
 2502 0c18 040094E5 		ldr	r0, [r4, #4]	@ img_23(D)->width, img_23(D)->width
 2503              	.LBE109:
 2504              	.LBE114:
 2505              	@ armwave.c:368:                     plot_pixel_yuv(img, xx, yy, &g_yuv_lut[MIN(value, 255)]);
 368:armwave.c     ****                     painted++;
 2506              		.loc 1 368 60 view .LVU665
 2507 0c1c FF30A0A3 		movge	r3, #255	@ _171,
 2508              	.LVL122:
 2509              	.LBB115:
 151:armwave.c     **** {
 2510              		.loc 1 151 44 is_stmt 1 view .LVU666
 2511              	.LBB110:
 153:armwave.c     ****     
 2512              		.loc 1 153 5 view .LVU667
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2513              		.loc 1 155 5 view .LVU668
 2514              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2515              		.loc 1 155 37 is_stmt 0 view .LVU669
 2516 0c20 1C1094E5 		ldr	r1, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2517              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2518              		.loc 1 155 45 view .LVU670
 2519 0c24 74C09FE5 		ldr	ip, .L83+4	@ tmp421,
 2520 0c28 833083E0 		add	r3, r3, r3, lsl #1	@ tmp352, _171, _171,
 2521              	.LVL123:
 2522              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2523              		.loc 1 155 37 view .LVU671
 2524 0c2c 901E2EE0 		mla	lr, r0, lr, r1	@ tmp361, img_23(D)->width, yy.10_170, img_23(D)->data
 2525              	.LVL124:
 2526              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2527              		.loc 1 156 66 view .LVU672
 2528 0c30 000052E3 		cmp	r2, #0	@ _168,
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2529              		.loc 1 156 66 view .LVU673
 2530 0c34 030082E2 		add	r0, r2, #3	@ tmp365, _168,
 2531              	.LVL125:
 2532              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2533              		.loc 1 155 45 view .LVU674
 2534 0c38 0310DCE7 		ldrb	r1, [ip, r3]	@ zero_extendqisi2	@ _178, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].y
 2535              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2536              		.loc 1 156 66 view .LVU675
 2537 0c3c 0020A0B1 		movlt	r2, r0	@ _168, tmp365
 2538              	.LVL126:
 2539              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2540              		.loc 1 155 37 view .LVU676
 2541 0c40 04009DE5 		ldr	r0, [sp, #4]	@ tmp358, %sfp
 2542              	.LVL127:
 2543              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2544              		.loc 1 155 45 view .LVU677
 2545 0c44 03308CE0 		add	r3, ip, r3	@ tmp353, tmp422, tmp352
 2546              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2547              		.loc 1 156 66 view .LVU678
 2548 0c48 4221A0E1 		asr	r2, r2, #2	@ tmp366, _168,
 2549              	@ armwave.c:155:     img->data[(img->width * y) + x] = yuv_in->y; 
 155:armwave.c     ****     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v;
 2550              		.loc 1 155 37 view .LVU679
 2551 0c4c C010CEE7 		strb	r1, [lr, r0, asr #1]	@ _178, *_177
 2552              	.LVL128:
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2553              		.loc 1 156 5 is_stmt 1 view .LVU680
 2554              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2555              		.loc 1 156 46 is_stmt 0 view .LVU681
 2556 0c50 141094E5 		ldr	r1, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2557              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2558              		.loc 1 156 72 view .LVU682
 2559 0c54 1C0094E5 		ldr	r0, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2560              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2561              		.loc 1 156 27 view .LVU683
 2562 0c58 18C094E5 		ldr	ip, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2563              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2564              		.loc 1 156 50 view .LVU684
 2565 0c5c 041091E5 		ldr	r1, [r1, #4]	@ MEM[(int *)_183 + 4B], MEM[(int *)_183 + 4B]
 2566              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2567              		.loc 1 156 72 view .LVU685
 2568 0c60 020080E0 		add	r0, r0, r2	@ tmp379, img_23(D)->data, tmp366
 2569 0c64 910A21E0 		mla	r1, r1, r10, r0	@ tmp380, MEM[(int *)_183 + 4B], _185, tmp379
 2570 0c68 04009CE5 		ldr	r0, [ip, #4]	@ MEM[(int *)_181 + 4B], MEM[(int *)_181 + 4B]
 2571              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2572              		.loc 1 156 80 view .LVU686
 2573 0c6c 02C0D3E5 		ldrb	ip, [r3, #2]	@ zero_extendqisi2	@ _192, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].v
 2574              	@ armwave.c:156:     img->data[img->offsets[1] + (img->pitches[1] * (y / 2)) + (x / 2)] = yuv_in->v
 156:armwave.c     ****     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u;
 2575              		.loc 1 156 72 view .LVU687
 2576 0c70 00C0C1E7 		strb	ip, [r1, r0]	@ _192, *_191
 157:armwave.c     **** }
 2577              		.loc 1 157 5 is_stmt 1 view .LVU688
 2578              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2579              		.loc 1 157 46 is_stmt 0 view .LVU689
 2580 0c74 14C094E5 		ldr	ip, [r4, #20]	@ img_23(D)->pitches, img_23(D)->pitches
 2581              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2582              		.loc 1 157 80 view .LVU690
 2583 0c78 0100D3E5 		ldrb	r0, [r3, #1]	@ zero_extendqisi2	@ _204, MEM[(struct armwave_yuv_t *)&g_yuv_lut][_171].u
 2584              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2585              		.loc 1 157 72 view .LVU691
 2586 0c7c 1C3094E5 		ldr	r3, [r4, #28]	@ img_23(D)->data, img_23(D)->data
 2587              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2588              		.loc 1 157 50 view .LVU692
 2589 0c80 08C09CE5 		ldr	ip, [ip, #8]	@ MEM[(int *)_197 + 8B], MEM[(int *)_197 + 8B]
 2590              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2591              		.loc 1 157 27 view .LVU693
 2592 0c84 181094E5 		ldr	r1, [r4, #24]	@ img_23(D)->offsets, img_23(D)->offsets
 2593              	@ armwave.c:157:     img->data[img->offsets[2] + (img->pitches[2] * (y / 2)) + (x / 2)] = yuv_in->u
 157:armwave.c     **** }
 2594              		.loc 1 157 72 view .LVU694
 2595 0c88 022083E0 		add	r2, r3, r2	@ tmp395, img_23(D)->data, tmp366
 2596 0c8c 9C2A22E0 		mla	r2, ip, r10, r2	@ tmp396, MEM[(int *)_197 + 8B], _185, tmp395
 2597 0c90 081091E5 		ldr	r1, [r1, #8]	@ MEM[(int *)_195 + 8B], MEM[(int *)_195 + 8B]
 2598 0c94 0100C2E7 		strb	r0, [r2, r1]	@ _204, *_203
 2599              	.LVL129:
 157:armwave.c     **** }
 2600              		.loc 1 157 72 view .LVU695
 2601              	.LBE110:
 2602              	.LBE115:
 369:armwave.c     ****                 }
 2603              		.loc 1 369 21 is_stmt 1 view .LVU696
 2604 0c98 A5FFFFEA 		b	.L70		@
 2605              	.L84:
 2606              		.align	2
 2607              	.L83:
 2608 0c9c 00000000 		.word	g_armwave_state
 2609 0ca0 00000000 		.word	g_yuv_lut
 2610              		.cfi_endproc
 2611              	.LFE65:
 2613              		.global	__aeabi_idiv
 2614              		.align	2
 2615              		.global	armwave_generate
 2616              		.syntax unified
 2617              		.arm
 2618              		.fpu vfp
 2620              	armwave_generate:
 2621              	.LFB66:
 377:armwave.c     **** 
 378:armwave.c     **** /*
 379:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 380:armwave.c     ****  */
 381:armwave.c     **** void armwave_generate()
 382:armwave.c     **** {
 2622              		.loc 1 382 1 view -0
 2623              		.cfi_startproc
 2624              		@ args = 0, pretend = 0, frame = 0
 2625              		@ frame_needed = 0, uses_anonymous_args = 0
 383:armwave.c     ****     uint32_t yy;
 2626              		.loc 1 383 5 view .LVU698
 384:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 2627              		.loc 1 384 5 view .LVU699
 2628              	@ armwave.c:382: {
 382:armwave.c     ****     uint32_t yy;
 2629              		.loc 1 382 1 is_stmt 0 view .LVU700
 2630 0ca4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2631              		.cfi_def_cfa_offset 24
 2632              		.cfi_offset 4, -24
 2633              		.cfi_offset 5, -20
 2634              		.cfi_offset 6, -16
 2635              		.cfi_offset 7, -12
 2636              		.cfi_offset 8, -8
 2637              		.cfi_offset 14, -4
 2638              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 385:armwave.c     **** 
 386:armwave.c     ****     // Zero the buffer
 387:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2639              		.loc 1 387 5 view .LVU701
 2640 0ca8 0010A0E3 		mov	r1, #0	@,
 2641              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2642              		.loc 1 384 38 view .LVU702
 2643 0cac 80609FE5 		ldr	r6, .L91	@ tmp147,
 2644              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 2645              		.loc 1 387 5 view .LVU703
 2646 0cb0 502096E5 		ldr	r2, [r6, #80]	@, g_armwave_state.ch_buff_size
 2647 0cb4 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 2648              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2649              		.loc 1 384 14 view .LVU704
 2650 0cb8 4C8096E5 		ldr	r8, [r6, #76]	@ xx_rem, g_armwave_state.wave_length
 2651              	.LVL130:
 2652              		.loc 1 387 5 is_stmt 1 view .LVU705
 2653 0cbc FEFFFFEB 		bl	memset		@
 2654              	.LVL131:
 388:armwave.c     **** 
 389:armwave.c     ****     // Render the main slices
 390:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 2655              		.loc 1 390 5 view .LVU706
 2656              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2657              		.loc 1 390 68 is_stmt 0 view .LVU707
 2658 0cc0 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2659              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2660              		.loc 1 390 51 view .LVU708
 2661 0cc4 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2662 0cc8 0410A0E1 		mov	r1, r4	@, _9
 2663 0ccc FEFFFFEB 		bl	__aeabi_idiv		@
 2664              	.LVL132:
 2665              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2666              		.loc 1 390 5 view .LVU709
 2667 0cd0 000050E3 		cmp	r0, #0	@ tmp139
 2668 0cd4 1100000A 		beq	.L88		@,
 2669              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2670              		.loc 1 384 52 view .LVU710
 2671 0cd8 0070A0E3 		mov	r7, #0	@ ypos,
 2672              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 2673              		.loc 1 390 12 view .LVU711
 2674 0cdc 0750A0E1 		mov	r5, r7	@ yy, ypos
 2675              	.LVL133:
 2676              	.L87:
 391:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2677              		.loc 1 391 9 is_stmt 1 discriminator 3 view .LVU712
 2678 0ce0 950400E0 		mul	r0, r5, r4	@, yy, tmp1
 2679 0ce4 0410A0E1 		mov	r1, r4	@, _9
 2680 0ce8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 2681              	.LVL134:
 392:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 2682              		.loc 1 392 9 discriminator 3 view .LVU713
 2683              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 2684              		.loc 1 392 34 is_stmt 0 discriminator 3 view .LVU714
 2685 0cec 444096E5 		ldr	r4, [r6, #68]	@ _9, g_armwave_state.slice_height
 2686              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2687              		.loc 1 390 51 discriminator 3 view .LVU715
 2688 0cf0 4C0096E5 		ldr	r0, [r6, #76]	@, g_armwave_state.wave_length
 2689 0cf4 0410A0E1 		mov	r1, r4	@, _9
 2690 0cf8 FEFFFFEB 		bl	__aeabi_idiv		@
 2691              	.LVL135:
 2692              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2693              		.loc 1 390 86 discriminator 3 view .LVU716
 2694 0cfc 015085E2 		add	r5, r5, #1	@ yy, yy,
 2695              	.LVL136:
 2696              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 2697              		.loc 1 392 16 discriminator 3 view .LVU717
 2698 0d00 048048E0 		sub	r8, r8, r4	@ xx_rem, xx_rem, _9
 2699              	.LVL137:
 393:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 2700              		.loc 1 393 9 is_stmt 1 discriminator 3 view .LVU718
 2701              	@ armwave.c:393:         ypos += g_armwave_state.slice_height;   
 2702              		.loc 1 393 14 is_stmt 0 discriminator 3 view .LVU719
 2703 0d04 047087E0 		add	r7, r7, r4	@ ypos, ypos, _9
 2704              	.LVL138:
 2705              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 2706              		.loc 1 390 5 discriminator 3 view .LVU720
 2707 0d08 050050E1 		cmp	r0, r5	@, yy
 2708 0d0c F3FFFF8A 		bhi	.L87		@,
 394:armwave.c     ****     }
 395:armwave.c     **** 
 396:armwave.c     ****     // Render whatever is left over
 397:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 2709              		.loc 1 397 5 is_stmt 1 view .LVU721
 2710 0d10 0810A0E1 		mov	r1, r8	@, xx_rem
 2711 0d14 0700A0E1 		mov	r0, r7	@, ypos
 2712              	@ armwave.c:398: }
 398:armwave.c     **** }
 2713              		.loc 1 398 1 is_stmt 0 view .LVU722
 2714 0d18 F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2715              		.cfi_remember_state
 2716              		.cfi_restore 14
 2717              		.cfi_restore 8
 2718              		.cfi_restore 7
 2719              		.cfi_restore 6
 2720              		.cfi_restore 5
 2721              		.cfi_restore 4
 2722              		.cfi_def_cfa_offset 0
 2723              	.LVL139:
 2724              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 2725              		.loc 1 397 5 view .LVU723
 2726 0d1c FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2727              	.LVL140:
 2728              	.L88:
 2729              		.cfi_restore_state
 2730              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 2731              		.loc 1 384 52 view .LVU724
 2732 0d20 0070A0E1 		mov	r7, r0	@ ypos, tmp139
 397:armwave.c     **** }
 2733              		.loc 1 397 5 is_stmt 1 view .LVU725
 2734 0d24 0810A0E1 		mov	r1, r8	@, xx_rem
 2735 0d28 0700A0E1 		mov	r0, r7	@, ypos
 2736              	@ armwave.c:398: }
 2737              		.loc 1 398 1 is_stmt 0 view .LVU726
 2738 0d2c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2739              		.cfi_restore 14
 2740              		.cfi_restore 8
 2741              		.cfi_restore 7
 2742              		.cfi_restore 6
 2743              		.cfi_restore 5
 2744              		.cfi_restore 4
 2745              		.cfi_def_cfa_offset 0
 2746              	.LVL141:
 2747              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 2748              		.loc 1 397 5 view .LVU727
 2749 0d30 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 2750              	.LVL142:
 2751              	.L92:
 2752              		.align	2
 2753              	.L91:
 2754 0d34 00000000 		.word	g_armwave_state
 2755              		.cfi_endproc
 2756              	.LFE66:
 2758              		.align	2
 2759              		.global	armwave_setup_render
 2760              		.syntax unified
 2761              		.arm
 2762              		.fpu vfp
 2764              	armwave_setup_render:
 2765              	.LVL143:
 2766              	.LFB67:
 399:armwave.c     **** 
 400:armwave.c     **** /*
 401:armwave.c     ****  * Setup the renderer with passed parameters.
 402:armwave.c     ****  */
 403:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 404:armwave.c     **** {
 2767              		.loc 1 404 1 is_stmt 1 view -0
 2768              		.cfi_startproc
 2769              		@ args = 12, pretend = 0, frame = 0
 2770              		@ frame_needed = 0, uses_anonymous_args = 0
 405:armwave.c     ****     uint32_t length, xx;
 2771              		.loc 1 405 5 view .LVU729
 406:armwave.c     ****     float points_per_pixel;
 2772              		.loc 1 406 5 view .LVU730
 407:armwave.c     **** 
 408:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 2773              		.loc 1 408 5 view .LVU731
 2774              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2775              		.loc 1 404 1 is_stmt 0 view .LVU732
 2776 0d38 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2777              		.cfi_def_cfa_offset 32
 2778              		.cfi_offset 4, -32
 2779              		.cfi_offset 5, -28
 2780              		.cfi_offset 6, -24
 2781              		.cfi_offset 7, -20
 2782              		.cfi_offset 8, -16
 2783              		.cfi_offset 9, -12
 2784              		.cfi_offset 10, -8
 2785              		.cfi_offset 14, -4
 2786 0d3c 10D04DE2 		sub	sp, sp, #16	@,,
 2787              		.cfi_def_cfa_offset 48
 2788              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2789              		.loc 1 404 1 view .LVU733
 2790 0d40 0040A0E1 		mov	r4, r0	@ start_point, start_point
 2791 0d44 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 2792 0d48 38809DE5 		ldr	r8, [sp, #56]	@ render_flags, render_flags
 2793 0d4c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 2794              	@ armwave.c:408:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2795              		.loc 1 408 5 view .LVU734
 2796 0d50 00308DE5 		str	r3, [sp]	@ wave_stride,
 2797              	@ armwave.c:404: {
 404:armwave.c     ****     uint32_t length, xx;
 2798              		.loc 1 404 1 view .LVU735
 2799 0d54 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 2800 0d58 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 2801              	@ armwave.c:408:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 2802              		.loc 1 408 5 view .LVU736
 2803 0d5c F460CDE1 		strd	r6, [sp, #4]	@,,
 2804 0d60 0230A0E1 		mov	r3, r2	@, waves_max
 2805              	.LVL144:
 2806              		.loc 1 408 5 view .LVU737
 2807 0d64 0C808DE5 		str	r8, [sp, #12]	@ render_flags,
 2808 0d68 0120A0E1 		mov	r2, r1	@, end_point
 2809              	.LVL145:
 2810              		.loc 1 408 5 view .LVU738
 2811 0d6c 0010A0E1 		mov	r1, r0	@, start_point
 2812              	.LVL146:
 2813              		.loc 1 408 5 view .LVU739
 2814 0d70 0C029FE5 		ldr	r0, .L108+12	@,
 2815              	.LVL147:
 2816              		.loc 1 408 5 view .LVU740
 2817 0d74 FEFFFFEB 		bl	printf		@
 2818              	.LVL148:
 409:armwave.c     **** 
 410:armwave.c     ****     if(start_point > end_point) {
 2819              		.loc 1 410 5 is_stmt 1 view .LVU741
 2820              	@ armwave.c:410:     if(start_point > end_point) {
 2821              		.loc 1 410 7 is_stmt 0 view .LVU742
 2822 0d78 050054E1 		cmp	r4, r5	@ start_point, end_point
 2823 0d7c 6D00008A 		bhi	.L106		@,
 411:armwave.c     ****         printf("Error: start point more than end point\n");
 412:armwave.c     ****         return;
 413:armwave.c     ****     }
 414:armwave.c     **** 
 415:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 416:armwave.c     ****     g_armwave_state.xstride = target_height;
 2824              		.loc 1 416 5 is_stmt 1 view .LVU743
 2825              	@ armwave.c:427:     g_armwave_state.wave_length = end_point - start_point;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 418:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 419:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 420:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 421:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 422:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 423:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 424:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 425:armwave.c     ****     g_armwave_state.target_width = target_width;
 426:armwave.c     ****     g_armwave_state.target_height = target_height;
 427:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2826              		.loc 1 427 45 is_stmt 0 view .LVU744
 2827 0d80 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 2828              	.LVL149:
 2829              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 428:armwave.c     ****     g_armwave_state.flags = render_flags;
 429:armwave.c     **** 
 430:armwave.c     ****     // Calculate compound scaler
 431:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 432:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2830              		.loc 1 432 48 view .LVU745
 2831 0d84 7B5A9FED 		vldr.32	s10, .L108	@ tmp197,
 2832 0d88 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 2833              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2834              		.loc 1 417 49 view .LVU746
 2835 0d8c 7A7A9FED 		vldr.32	s14, .L108+4	@ tmp174,
 2836              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2837              		.loc 1 432 81 view .LVU747
 2838 0d90 7A6A9FED 		vldr.32	s12, .L108+8	@ tmp201,
 2839              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2840              		.loc 1 424 90 view .LVU748
 2841 0d94 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 2842              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 2843              		.loc 1 432 48 view .LVU749
 2844 0d98 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp195, _13
 2845              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2846              		.loc 1 417 49 view .LVU750
 2847 0d9c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 2848              	@ armwave.c:416:     g_armwave_state.xstride = target_height;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2849              		.loc 1 416 29 view .LVU751
 2850 0da0 E0419FE5 		ldr	r4, .L108+16	@ tmp247,
 2851              	.LVL150:
 2852              	@ armwave.c:422:     g_armwave_state.size = target_height * target_width;
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2853              		.loc 1 422 42 view .LVU752
 2854 0da4 970600E0 		mul	r0, r7, r6	@ tmp182, target_height, target_width
 2855              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2856              		.loc 1 417 49 view .LVU753
 2857 0da8 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 2858              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2859              		.loc 1 424 95 view .LVU754
 2860 0dac 833383E0 		add	r3, r3, r3, lsl #7	@ tmp188, tmp185, tmp185,
 2861              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 433:armwave.c     **** 
 434:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 2862              		.loc 1 434 5 view .LVU755
 2863 0db0 0128A0E3 		mov	r2, #65536	@ tmp204,
 2864              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2865              		.loc 1 432 48 view .LVU756
 2866 0db4 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp196, tmp197, tmp195
 2867              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2868              		.loc 1 434 5 view .LVU757
 2869 0db8 04508DE5 		str	r5, [sp, #4]	@ _13,
 2870 0dbc 00608DE5 		str	r6, [sp]	@ target_width,
 2871              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2872              		.loc 1 424 95 view .LVU758
 2873 0dc0 8331A0E1 		lsl	r3, r3, #3	@ tmp189, tmp188,
 2874              	@ armwave.c:416:     g_armwave_state.xstride = target_height;
 416:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 2875              		.loc 1 416 29 view .LVU759
 2876 0dc4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2877              		.loc 1 417 5 is_stmt 1 view .LVU760
 2878              	@ armwave.c:419:     g_armwave_state.wave_stride = wave_stride;
 419:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2879              		.loc 1 419 33 is_stmt 0 view .LVU761
 2880 0dc8 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 2881              	@ armwave.c:420:     g_armwave_state.waves_max = waves_max;
 420:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2882              		.loc 1 420 31 view .LVU762
 2883 0dcc 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 2884              	@ armwave.c:421:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 421:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2885              		.loc 1 421 27 view .LVU763
 2886 0dd0 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 2887              	@ armwave.c:426:     g_armwave_state.target_height = target_height;
 426:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2888              		.loc 1 426 35 view .LVU764
 2889 0dd4 F067C4E1 		strd	r6, [r4, #112]	@, tmp247,
 2890              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2891              		.loc 1 434 5 view .LVU765
 2892 0dd8 08208DE5 		str	r2, [sp, #8]	@ tmp204,
 2893              	@ armwave.c:423:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2894              		.loc 1 423 37 view .LVU766
 2895 0ddc 022CA0E3 		mov	r2, #512	@ tmp184,
 2896              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2897              		.loc 1 434 5 view .LVU767
 2898 0de0 0310A0E1 		mov	r1, r3	@, tmp189
 2899              	@ armwave.c:422:     g_armwave_state.size = target_height * target_width;
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2900              		.loc 1 422 26 view .LVU768
 2901 0de4 540084E5 		str	r0, [r4, #84]	@ tmp182, g_armwave_state.size
 2902              	@ armwave.c:423:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2903              		.loc 1 423 37 view .LVU769
 2904 0de8 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 2905              	@ armwave.c:424:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2906              		.loc 1 424 34 view .LVU770
 2907 0dec 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 2908              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2909              		.loc 1 417 49 view .LVU771
 2910 0df0 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp173, tmp174
 2911              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2912              		.loc 1 432 40 view .LVU772
 2913 0df4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 2914              	@ armwave.c:427:     g_armwave_state.wave_length = end_point - start_point;
 427:armwave.c     ****     g_armwave_state.flags = render_flags;
 2915              		.loc 1 427 33 view .LVU773
 2916 0df8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 2917              	@ armwave.c:428:     g_armwave_state.flags = render_flags;
 428:armwave.c     **** 
 2918              		.loc 1 428 27 view .LVU774
 2919 0dfc 008084E5 		str	r8, [r4]	@ render_flags, g_armwave_state.flags
 2920              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2921              		.loc 1 434 5 view .LVU775
 2922 0e00 84019FE5 		ldr	r0, .L108+20	@,
 2923              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2924              		.loc 1 432 40 view .LVU776
 2925 0e04 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp198, target_width
 2926 0e08 877A67EE 		vmul.f32	s15, s15, s14	@ tmp199, tmp196, tmp198
 2927              	@ armwave.c:418:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2928              		.loc 1 418 30 view .LVU777
 2929 0e0c E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp177, _3
 2930              	@ armwave.c:417:     g_armwave_state.vscale_frac = target_height / 255.0f;
 417:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 2931              		.loc 1 417 33 view .LVU778
 2932 0e10 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2933              		.loc 1 418 5 is_stmt 1 view .LVU779
 2934              	@ armwave.c:432:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 432:armwave.c     **** 
 2935              		.loc 1 432 81 is_stmt 0 view .LVU780
 2936 0e14 867A67EE 		vmul.f32	s15, s15, s12	@ tmp200, tmp199, tmp201
 2937              	@ armwave.c:418:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 418:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 2938              		.loc 1 418 30 view .LVU781
 2939 0e18 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 419:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 2940              		.loc 1 419 5 is_stmt 1 view .LVU782
 420:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 2941              		.loc 1 420 5 view .LVU783
 421:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 2942              		.loc 1 421 5 view .LVU784
 422:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 2943              		.loc 1 422 5 view .LVU785
 423:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 2944              		.loc 1 423 5 view .LVU786
 424:armwave.c     ****     g_armwave_state.target_width = target_width;
 2945              		.loc 1 424 5 view .LVU787
 425:armwave.c     ****     g_armwave_state.target_height = target_height;
 2946              		.loc 1 425 5 view .LVU788
 426:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 2947              		.loc 1 426 5 view .LVU789
 427:armwave.c     ****     g_armwave_state.flags = render_flags;
 2948              		.loc 1 427 5 view .LVU790
 428:armwave.c     **** 
 2949              		.loc 1 428 5 view .LVU791
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2950              		.loc 1 431 5 view .LVU792
 2951              	@ armwave.c:431:     g_armwave_state.cmp_x_bitdepth_scale = \
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2952              		.loc 1 431 42 is_stmt 0 view .LVU793
 2953 0e1c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp200
 2954 0e20 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 2955              	@ armwave.c:434:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 2956              		.loc 1 434 5 view .LVU794
 2957 0e24 903A17EE 		vmov	r3, s15	@ int	@, _20
 2958              	@ armwave.c:431:     g_armwave_state.cmp_x_bitdepth_scale = \
 431:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 2959              		.loc 1 431 42 view .LVU795
 2960 0e28 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 2961              		.loc 1 434 5 is_stmt 1 view .LVU796
 2962 0e2c 0C20A0E1 		mov	r2, ip	@, tmp3
 2963 0e30 FEFFFFEB 		bl	printf		@
 2964              	.LVL151:
 435:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 436:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 437:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 438:armwave.c     **** 
 439:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 440:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 441:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 442:armwave.c     ****     g_armwave_state.slice_height = 16; // 64;  
 2965              		.loc 1 442 5 view .LVU797
 2966              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 443:armwave.c     **** 
 444:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 2967              		.loc 1 444 23 is_stmt 0 view .LVU798
 2968 0e34 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 2969              	@ armwave.c:442:     g_armwave_state.slice_height = 16; // 64;  
 442:armwave.c     **** 
 2970              		.loc 1 442 34 view .LVU799
 2971 0e38 1030A0E3 		mov	r3, #16	@ tmp206,
 2972              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 2973              		.loc 1 444 7 view .LVU800
 2974 0e3c 000050E3 		cmp	r0, #0	@ _21,
 2975              	@ armwave.c:442:     g_armwave_state.slice_height = 16; // 64;  
 442:armwave.c     **** 
 2976              		.loc 1 442 34 view .LVU801
 2977 0e40 443084E5 		str	r3, [r4, #68]	@ tmp206, g_armwave_state.slice_height
 2978              		.loc 1 444 5 is_stmt 1 view .LVU802
 2979              	@ armwave.c:444:     if(g_armwave_state.ch1_buffer != NULL)
 2980              		.loc 1 444 7 is_stmt 0 view .LVU803
 2981 0e44 0000000A 		beq	.L95		@,
 445:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 2982              		.loc 1 445 9 is_stmt 1 view .LVU804
 2983 0e48 FEFFFFEB 		bl	free		@
 2984              	.LVL152:
 2985              	.L95:
 446:armwave.c     **** 
 447:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2986              		.loc 1 447 5 view .LVU805
 2987              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2988              		.loc 1 447 56 is_stmt 0 view .LVU806
 2989 0e4c 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 2990              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 2991              		.loc 1 447 34 view .LVU807
 2992 0e50 0110A0E3 		mov	r1, #1	@,
 2993 0e54 0800A0E1 		mov	r0, r8	@, _22
 2994 0e58 FEFFFFEB 		bl	calloc		@
 2995              	.LVL153:
 2996              	@ armwave.c:449:     if(g_armwave_state.ch1_buffer == NULL) {
 448:armwave.c     **** 
 449:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 2997              		.loc 1 449 7 view .LVU808
 2998 0e5c 000050E3 		cmp	r0, #0	@ pretmp_124,
 2999              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 447:armwave.c     **** 
 3000              		.loc 1 447 34 view .LVU809
 3001 0e60 0070A0E1 		mov	r7, r0	@ pretmp_124,
 3002              	@ armwave.c:447:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 447:armwave.c     **** 
 3003              		.loc 1 447 32 view .LVU810
 3004 0e64 040084E5 		str	r0, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3005              		.loc 1 449 5 is_stmt 1 view .LVU811
 3006              	@ armwave.c:449:     if(g_armwave_state.ch1_buffer == NULL) {
 3007              		.loc 1 449 7 is_stmt 0 view .LVU812
 3008 0e68 3B00000A 		beq	.L107		@,
 450:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 451:armwave.c     ****         exit(-1);
 452:armwave.c     ****     }
 453:armwave.c     **** 
 454:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 455:armwave.c     ****     length = end_point - start_point;
 3009              		.loc 1 455 5 is_stmt 1 view .LVU813
 3010              	.LVL154:
 456:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3011              		.loc 1 456 5 view .LVU814
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3012              		.loc 1 457 5 view .LVU815
 3013              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 3014              		.loc 1 456 31 is_stmt 0 view .LVU816
 3015 0e6c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 3016              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 3017              		.loc 1 457 77 view .LVU817
 3018 0e70 448094E5 		ldr	r8, [r4, #68]	@ _28, g_armwave_state.slice_height
 3019              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 458:armwave.c     **** 
 459:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3020              		.loc 1 459 40 view .LVU818
 3021 0e74 8500A0E1 		lsl	r0, r5, #1	@, _13,
 3022              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3023              		.loc 1 456 31 view .LVU819
 3024 0e78 676AB8EE 		vcvt.f32.u32	s12, s15	@ tmp215, _13
 3025              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3026              		.loc 1 456 34 view .LVU820
 3027 0e7c 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 3028              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3029              		.loc 1 457 60 view .LVU821
 3030 0e80 108A07EE 		vmov	s14, r8	@ int	@ _28, _28
 3031              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3032              		.loc 1 456 34 view .LVU822
 3033 0e84 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp216, target_width
 3034              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3035              		.loc 1 457 60 view .LVU823
 3036 0e88 C76AF8EE 		vcvt.f32.s32	s13, s14	@ tmp218, _28
 3037              	@ armwave.c:456:     points_per_pixel = length / ((float)(target_width));
 456:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3038              		.loc 1 456 22 view .LVU824
 3039 0e8c 277A86EE 		vdiv.f32	s14, s12, s15	@ points_per_pixel, tmp215, tmp216
 3040              	.LVL155:
 3041              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3042              		.loc 1 457 60 view .LVU825
 3043 0e90 267A67EE 		vmul.f32	s15, s14, s13	@ tmp219, points_per_pixel, tmp218
 3044              	@ armwave.c:457:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 457:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 3045              		.loc 1 457 41 view .LVU826
 3046 0e94 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 3047 0e98 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 3048              		.loc 1 459 5 is_stmt 1 view .LVU827
 3049              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 3050              		.loc 1 459 40 is_stmt 0 view .LVU828
 3051 0e9c FEFFFFEB 		bl	malloc		@
 3052              	.LVL156:
 3053              	@ armwave.c:461:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 460:armwave.c     **** 
 461:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 3054              		.loc 1 461 5 view .LVU829
 3055 0ea0 000050E3 		cmp	r0, #0	@ pretmp_119,
 3056              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 459:armwave.c     **** 
 3057              		.loc 1 459 40 view .LVU830
 3058 0ea4 0060A0E1 		mov	r6, r0	@ pretmp_119,
 3059              	.LVL157:
 3060              	@ armwave.c:459:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 459:armwave.c     **** 
 3061              		.loc 1 459 38 view .LVU831
 3062 0ea8 9C0084E5 		str	r0, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3063              		.loc 1 461 5 is_stmt 1 view .LVU832
 3064 0eac 2500000A 		beq	.L97		@,
 3065              	.LVL158:
 3066              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 462:armwave.c     **** 
 463:armwave.c     ****     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3067              		.loc 1 463 5 is_stmt 0 view .LVU833
 3068 0eb0 000058E3 		cmp	r8, #0	@ _28,
 3069              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 3070              		.loc 1 463 12 view .LVU834
 3071 0eb4 0050A013 		movne	r5, #0	@ xx,
 3072              	.LVL159:
 3073              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 465:armwave.c     ****         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpixel[xx]);
 3074              		.loc 1 465 9 view .LVU835
 3075 0eb8 D0709F15 		ldrne	r7, .L108+24	@ tmp248,
 3076              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3077              		.loc 1 463 5 view .LVU836
 3078 0ebc 0100001A 		bne	.L98		@,
 3079 0ec0 0E0000EA 		b	.L99		@
 3080              	.LVL160:
 3081              	.L100:
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3082              		.loc 1 463 5 view .LVU837
 3083 0ec4 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3084              	.LVL161:
 3085              	.L98:
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3086              		.loc 1 464 9 is_stmt 1 discriminator 3 view .LVU838
 3087              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3088              		.loc 1 464 53 is_stmt 0 discriminator 3 view .LVU839
 3089 0ec8 243094E5 		ldr	r3, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3090              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3091              		.loc 1 464 46 discriminator 3 view .LVU840
 3092 0ecc 85C0A0E1 		lsl	ip, r5, #1	@ tmp231, xx,
 3093              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3094              		.loc 1 465 9 discriminator 3 view .LVU841
 3095 0ed0 0510A0E1 		mov	r1, r5	@, xx
 3096              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3097              		.loc 1 464 53 discriminator 3 view .LVU842
 3098 0ed4 930503E0 		mul	r3, r3, r5	@ tmp229, g_armwave_state.cmp_x_bitdepth_scale, xx
 3099              	@ armwave.c:465:         printf("xcoord_to_xpixel[%5d] = %5d\n", xx, g_armwave_state.xcoord_to_xpix
 3100              		.loc 1 465 9 discriminator 3 view .LVU843
 3101 0ed8 0700A0E1 		mov	r0, r7	@, tmp248
 3102              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3103              		.loc 1 463 54 discriminator 3 view .LVU844
 3104 0edc 015085E2 		add	r5, r5, #1	@ xx, xx,
 3105              	.LVL162:
 3106              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3107              		.loc 1 464 93 discriminator 3 view .LVU845
 3108 0ee0 2328A0E1 		lsr	r2, r3, #16	@ _36, tmp229,
 3109              	@ armwave.c:464:         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdep
 464:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3110              		.loc 1 464 46 discriminator 3 view .LVU846
 3111 0ee4 BC2086E1 		strh	r2, [r6, ip]	@ movhi	@ _36, *_39
 3112              		.loc 1 465 9 is_stmt 1 discriminator 3 view .LVU847
 3113 0ee8 FEFFFFEB 		bl	printf		@
 3114              	.LVL163:
 3115              	@ armwave.c:463:     for(xx = 0; xx < g_armwave_state.slice_height; xx++) {
 463:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = ((xx * g_armwave_state.cmp_x_bitdepth_scale) >> AM_X
 3116              		.loc 1 463 5 is_stmt 0 discriminator 3 view .LVU848
 3117 0eec 443094E5 		ldr	r3, [r4, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 3118 0ef0 050053E1 		cmp	r3, r5	@ g_armwave_state.slice_height, xx
 3119 0ef4 F2FFFF8A 		bhi	.L100		@,
 3120 0ef8 047094E5 		ldr	r7, [r4, #4]	@ pretmp_124, g_armwave_state.ch1_buffer
 3121 0efc 9C6094E5 		ldr	r6, [r4, #156]	@ pretmp_119, g_armwave_state.xcoord_to_xpixel
 3122              	.LVL164:
 3123              	.L99:
 466:armwave.c     ****     }
 467:armwave.c     ****     
 468:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3124              		.loc 1 468 5 is_stmt 1 view .LVU849
 3125              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 3126              		.loc 1 468 34 is_stmt 0 view .LVU850
 3127 0f00 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 3128 0f04 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 3129 0f08 FEFFFFEB 		bl	malloc		@
 3130              	.LVL165:
 3131              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 469:armwave.c     **** 
 470:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3132              		.loc 1 470 5 view .LVU851
 3133 0f0c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3134 0f10 0620A0E1 		mov	r2, r6	@, pretmp_119
 3135 0f14 30308DE5 		str	r3, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 3136 0f18 0710A0E1 		mov	r1, r7	@, pretmp_124
 3137              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 468:armwave.c     **** 
 3138              		.loc 1 468 34 view .LVU852
 3139 0f1c 00C0A0E1 		mov	ip, r0	@ tmp242,
 3140              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 3141              		.loc 1 470 5 view .LVU853
 3142 0f20 0030A0E1 		mov	r3, r0	@, tmp242
 3143              	@ armwave.c:468:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 468:armwave.c     **** 
 3144              		.loc 1 468 32 view .LVU854
 3145 0f24 80C084E5 		str	ip, [r4, #128]	@ tmp242, g_armwave_state.out_pixbuf
 3146              		.loc 1 470 5 is_stmt 1 view .LVU855
 3147 0f28 64009FE5 		ldr	r0, .L108+28	@,
 3148              	@ armwave.c:477: }
 471:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 472:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 473:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 474:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 475:armwave.c     **** 
 476:armwave.c     ****      //malloc_stats();
 477:armwave.c     **** }
 3149              		.loc 1 477 1 is_stmt 0 view .LVU856
 3150 0f2c 10D08DE2 		add	sp, sp, #16	@,,
 3151              		.cfi_remember_state
 3152              		.cfi_def_cfa_offset 32
 3153              		@ sp needed	@
 3154 0f30 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3155              		.cfi_restore 14
 3156              		.cfi_restore 10
 3157              		.cfi_restore 9
 3158              		.cfi_restore 8
 3159              		.cfi_restore 7
 3160              		.cfi_restore 6
 3161              		.cfi_restore 5
 3162              		.cfi_restore 4
 3163              		.cfi_def_cfa_offset 0
 3164              	.LVL166:
 3165              	@ armwave.c:470:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 470:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 3166              		.loc 1 470 5 view .LVU857
 3167 0f34 FEFFFFEA 		b	printf		@
 3168              	.LVL167:
 3169              	.L106:
 3170              		.cfi_restore_state
 411:armwave.c     ****         return;
 3171              		.loc 1 411 9 is_stmt 1 view .LVU858
 3172 0f38 58009FE5 		ldr	r0, .L108+32	@,
 3173              	@ armwave.c:477: }
 3174              		.loc 1 477 1 is_stmt 0 view .LVU859
 3175 0f3c 10D08DE2 		add	sp, sp, #16	@,,
 3176              		.cfi_remember_state
 3177              		.cfi_def_cfa_offset 32
 3178              		@ sp needed	@
 3179 0f40 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 3180              		.cfi_restore 14
 3181              		.cfi_restore 10
 3182              		.cfi_restore 9
 3183              		.cfi_restore 8
 3184              		.cfi_restore 7
 3185              		.cfi_restore 6
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_def_cfa_offset 0
 3189              	.LVL168:
 3190              	@ armwave.c:411:         printf("Error: start point more than end point\n");
 411:armwave.c     ****         return;
 3191              		.loc 1 411 9 view .LVU860
 3192 0f44 FEFFFFEA 		b	puts		@
 3193              	.LVL169:
 3194              	.L97:
 3195              		.cfi_restore_state
 461:armwave.c     **** 
 3196              		.loc 1 461 5 is_stmt 1 discriminator 1 view .LVU861
 3197 0f48 4C309FE5 		ldr	r3, .L108+36	@,
 3198 0f4c 4C209FE5 		ldr	r2, .L108+40	@,
 3199 0f50 4C109FE5 		ldr	r1, .L108+44	@,
 3200 0f54 4C009FE5 		ldr	r0, .L108+48	@,
 3201 0f58 FEFFFFEB 		bl	__assert_fail		@
 3202              	.LVL170:
 3203              	.L107:
 450:armwave.c     ****         exit(-1);
 3204              		.loc 1 450 9 view .LVU862
 3205 0f5c 48309FE5 		ldr	r3, .L108+52	@ tmp212,
 3206 0f60 0820A0E1 		mov	r2, r8	@, _22
 3207 0f64 44109FE5 		ldr	r1, .L108+56	@,
 3208 0f68 000093E5 		ldr	r0, [r3]	@, stderr
 3209 0f6c FEFFFFEB 		bl	fprintf		@
 3210              	.LVL171:
 451:armwave.c     ****     }
 3211              		.loc 1 451 9 view .LVU863
 3212 0f70 0000E0E3 		mvn	r0, #0	@,
 3213 0f74 FEFFFFEB 		bl	exit		@
 3214              	.LVL172:
 3215              	.L109:
 3216              		.align	2
 3217              	.L108:
 3218 0f78 0000803F 		.word	1065353216
 3219 0f7c 00007F43 		.word	1132396544
 3220 0f80 00008047 		.word	1199570944
 3221 0f84 9C000000 		.word	.LC6
 3222 0f88 00000000 		.word	g_armwave_state
 3223 0f8c F0000000 		.word	.LC8
 3224 0f90 CC010000 		.word	.LC12
 3225 0f94 EC010000 		.word	.LC13
 3226 0f98 C8000000 		.word	.LC7
 3227 0f9c 00000000 		.word	.LANCHOR0
 3228 0fa0 CD010000 		.word	461
 3229 0fa4 94010000 		.word	.LC10
 3230 0fa8 A0010000 		.word	.LC11
 3231 0fac 00000000 		.word	stderr
 3232 0fb0 50010000 		.word	.LC9
 3233              		.cfi_endproc
 3234              	.LFE67:
 3236              		.align	2
 3237              		.global	armwave_set_wave_pointer
 3238              		.syntax unified
 3239              		.arm
 3240              		.fpu vfp
 3242              	armwave_set_wave_pointer:
 3243              	.LVL173:
 3244              	.LFB68:
 478:armwave.c     **** 
 479:armwave.c     **** /*
 480:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 481:armwave.c     ****  * in the future.
 482:armwave.c     ****  */
 483:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 484:armwave.c     **** {
 3245              		.loc 1 484 1 view -0
 3246              		.cfi_startproc
 3247              		@ args = 0, pretend = 0, frame = 0
 3248              		@ frame_needed = 0, uses_anonymous_args = 0
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3249              		.loc 1 485 5 view .LVU865
 3250 0fb4 000050E3 		cmp	r0, #0	@ wave_buffer
 3251              		.loc 1 485 5 is_stmt 0 view .LVU866
 3252 0fb8 0200000A 		beq	.L115		@,
 486:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 3253              		.loc 1 486 5 is_stmt 1 view .LVU867
 3254              	@ armwave.c:486:     g_armwave_state.wave_buffer = wave_buffer;
 3255              		.loc 1 486 33 is_stmt 0 view .LVU868
 3256 0fbc 1C309FE5 		ldr	r3, .L116	@ tmp116,
 3257 0fc0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 3258 0fc4 1EFF2FE1 		bx	lr	@
 3259              	.L115:
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3260              		.loc 1 485 5 is_stmt 1 discriminator 1 view .LVU869
 3261              	@ armwave.c:484: {
 484:armwave.c     ****     assert(wave_buffer != NULL);
 3262              		.loc 1 484 1 is_stmt 0 discriminator 1 view .LVU870
 3263 0fc8 10402DE9 		push	{r4, lr}	@
 3264              		.cfi_def_cfa_offset 8
 3265              		.cfi_offset 4, -8
 3266              		.cfi_offset 14, -4
 3267              	@ armwave.c:485:     assert(wave_buffer != NULL);
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3268              		.loc 1 485 5 discriminator 1 view .LVU871
 3269 0fcc 10309FE5 		ldr	r3, .L116+4	@,
 3270 0fd0 10209FE5 		ldr	r2, .L116+8	@,
 3271 0fd4 10109FE5 		ldr	r1, .L116+12	@,
 3272 0fd8 10009FE5 		ldr	r0, .L116+16	@,
 3273              	.LVL174:
 485:armwave.c     ****     assert(wave_buffer != NULL);
 3274              		.loc 1 485 5 discriminator 1 view .LVU872
 3275 0fdc FEFFFFEB 		bl	__assert_fail		@
 3276              	.LVL175:
 3277              	.L117:
 3278              		.align	2
 3279              	.L116:
 3280 0fe0 00000000 		.word	g_armwave_state
 3281 0fe4 18000000 		.word	.LANCHOR0+24
 3282 0fe8 E5010000 		.word	485
 3283 0fec 94010000 		.word	.LC10
 3284 0ff0 10020000 		.word	.LC14
 3285              		.cfi_endproc
 3286              	.LFE68:
 3288              		.align	2
 3289              		.global	armwave_set_wave_pointer_as_testbuf
 3290              		.syntax unified
 3291              		.arm
 3292              		.fpu vfp
 3294              	armwave_set_wave_pointer_as_testbuf:
 3295              	.LVL176:
 3296              	.LFB69:
 487:armwave.c     **** }
 488:armwave.c     **** 
 489:armwave.c     **** /*
 490:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 491:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 492:armwave.c     ****  */
 493:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 494:armwave.c     **** {
 3297              		.loc 1 494 1 is_stmt 1 view -0
 3298              		.cfi_startproc
 3299              		@ args = 0, pretend = 0, frame = 0
 3300              		@ frame_needed = 0, uses_anonymous_args = 0
 3301              		@ link register save eliminated.
 495:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3302              		.loc 1 495 5 view .LVU874
 3303              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3304              		.loc 1 495 29 is_stmt 0 view .LVU875
 3305 0ff4 24309FE5 		ldr	r3, .L121	@ tmp117,
 3306              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 3307              		.loc 1 495 7 view .LVU876
 3308 0ff8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 3309 0ffc 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 3310 1000 0400003A 		bcc	.L120		@,
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 497:armwave.c     ****         return;
 498:armwave.c     ****     }
 499:armwave.c     **** 
 500:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 3311              		.loc 1 500 5 is_stmt 1 view .LVU877
 3312              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3313              		.loc 1 500 111 is_stmt 0 view .LVU878
 3314 1004 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 3315              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3316              		.loc 1 500 68 view .LVU879
 3317 1008 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3318 100c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 3319              	.LVL177:
 3320              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 3321              		.loc 1 500 33 view .LVU880
 3322 1010 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 3323              	@ armwave.c:501: }
 501:armwave.c     **** }
 3324              		.loc 1 501 1 view .LVU881
 3325 1014 1EFF2FE1 		bx	lr	@
 3326              	.LVL178:
 3327              	.L120:
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3328              		.loc 1 496 9 is_stmt 1 view .LVU882
 3329 1018 04009FE5 		ldr	r0, .L121+4	@,
 3330              	.LVL179:
 496:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 3331              		.loc 1 496 9 is_stmt 0 view .LVU883
 3332 101c FEFFFFEA 		b	puts		@
 3333              	.LVL180:
 3334              	.L122:
 3335              		.align	2
 3336              	.L121:
 3337 1020 00000000 		.word	g_armwave_state
 3338 1024 24020000 		.word	.LC15
 3339              		.cfi_endproc
 3340              	.LFE69:
 3342              		.align	2
 3343              		.global	armwave_set_wave_pointer_u32
 3344              		.syntax unified
 3345              		.arm
 3346              		.fpu vfp
 3348              	armwave_set_wave_pointer_u32:
 3349              	.LVL181:
 3350              	.LFB70:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 505:armwave.c     ****  * disjointed buffers in the future.
 506:armwave.c     ****  */
 507:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 508:armwave.c     **** {
 3351              		.loc 1 508 1 is_stmt 1 view -0
 3352              		.cfi_startproc
 3353              		@ args = 0, pretend = 0, frame = 0
 3354              		@ frame_needed = 0, uses_anonymous_args = 0
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3355              		.loc 1 509 5 view .LVU885
 3356 1028 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 3357              		.loc 1 509 5 is_stmt 0 view .LVU886
 3358 102c 0200000A 		beq	.L128		@,
 510:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3359              		.loc 1 510 5 is_stmt 1 view .LVU887
 3360              	@ armwave.c:510:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 3361              		.loc 1 510 33 is_stmt 0 view .LVU888
 3362 1030 1C309FE5 		ldr	r3, .L129	@ tmp117,
 3363 1034 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 3364 1038 1EFF2FE1 		bx	lr	@
 3365              	.L128:
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3366              		.loc 1 509 5 is_stmt 1 discriminator 1 view .LVU889
 3367              	@ armwave.c:508: {
 508:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3368              		.loc 1 508 1 is_stmt 0 discriminator 1 view .LVU890
 3369 103c 10402DE9 		push	{r4, lr}	@
 3370              		.cfi_def_cfa_offset 8
 3371              		.cfi_offset 4, -8
 3372              		.cfi_offset 14, -4
 3373              	@ armwave.c:509:     assert(wave_buffer_ptr != 0);
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3374              		.loc 1 509 5 discriminator 1 view .LVU891
 3375 1040 10309FE5 		ldr	r3, .L129+4	@,
 3376 1044 10209FE5 		ldr	r2, .L129+8	@,
 3377 1048 10109FE5 		ldr	r1, .L129+12	@,
 3378 104c 10009FE5 		ldr	r0, .L129+16	@,
 3379              	.LVL182:
 509:armwave.c     ****     assert(wave_buffer_ptr != 0);
 3380              		.loc 1 509 5 discriminator 1 view .LVU892
 3381 1050 FEFFFFEB 		bl	__assert_fail		@
 3382              	.LVL183:
 3383              	.L130:
 3384              		.align	2
 3385              	.L129:
 3386 1054 00000000 		.word	g_armwave_state
 3387 1058 34000000 		.word	.LANCHOR0+52
 3388 105c FD010000 		.word	509
 3389 1060 94010000 		.word	.LC10
 3390 1064 60020000 		.word	.LC16
 3391              		.cfi_endproc
 3392              	.LFE70:
 3394              		.align	2
 3395              		.global	armwave_clear_buffer
 3396              		.syntax unified
 3397              		.arm
 3398              		.fpu vfp
 3400              	armwave_clear_buffer:
 3401              	.LVL184:
 3402              	.LFB71:
 511:armwave.c     **** }
 512:armwave.c     **** 
 513:armwave.c     **** /*
 514:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 515:armwave.c     ****  */
 516:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 517:armwave.c     **** {
 3403              		.loc 1 517 1 is_stmt 1 view -0
 3404              		.cfi_startproc
 3405              		@ args = 0, pretend = 0, frame = 0
 3406              		@ frame_needed = 0, uses_anonymous_args = 0
 3407              		@ link register save eliminated.
 518:armwave.c     ****     // Flags ignored, only one buffer cleared
 519:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3408              		.loc 1 519 5 view .LVU894
 3409              	@ armwave.c:519:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3410              		.loc 1 519 58 is_stmt 0 view .LVU895
 3411 1068 0C309FE5 		ldr	r3, .L132	@ tmp114,
 3412              	@ armwave.c:519:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3413              		.loc 1 519 5 view .LVU896
 3414 106c 0010A0E3 		mov	r1, #0	@,
 3415 1070 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 3416 1074 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 3417              	.LVL185:
 3418              		.loc 1 519 5 view .LVU897
 3419 1078 FEFFFFEA 		b	memset		@
 3420              	.LVL186:
 3421              	.L133:
 3422              		.align	2
 3423              	.L132:
 3424 107c 00000000 		.word	g_armwave_state
 3425              		.cfi_endproc
 3426              	.LFE71:
 3428              		.align	2
 3429              		.global	armwave_set_channel_colour
 3430              		.syntax unified
 3431              		.arm
 3432              		.fpu vfp
 3434              	armwave_set_channel_colour:
 3435              	.LVL187:
 3436              	.LFB72:
 520:armwave.c     **** }
 521:armwave.c     **** 
 522:armwave.c     **** /*
 523:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.  
 524:armwave.c     ****  * `I` sets intensity multiplier for all colours.
 525:armwave.c     ****  */
 526:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b, float i)
 527:armwave.c     **** {
 3437              		.loc 1 527 1 is_stmt 1 view -0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 16
 3440              		@ frame_needed = 0, uses_anonymous_args = 0
 3441              		@ link register save eliminated.
 528:armwave.c     ****     // Only 1ch supported for now
 529:armwave.c     ****     switch(ch) {
 3442              		.loc 1 529 5 view .LVU899
 3443              	@ armwave.c:527: {
 527:armwave.c     ****     // Only 1ch supported for now
 3444              		.loc 1 527 1 is_stmt 0 view .LVU900
 3445 1080 10D04DE2 		sub	sp, sp, #16	@,,
 3446              		.cfi_def_cfa_offset 16
 3447              	@ armwave.c:529:     switch(ch) {
 3448              		.loc 1 529 5 view .LVU901
 3449 1084 010050E3 		cmp	r0, #1	@ ch,
 3450              	@ armwave.c:527: {
 527:armwave.c     ****     // Only 1ch supported for now
 3451              		.loc 1 527 1 view .LVU902
 3452 1088 0E008DE9 		stmib	sp, {r1, r2, r3}	@,,,
 3453              	@ armwave.c:529:     switch(ch) {
 3454              		.loc 1 529 5 view .LVU903
 3455 108c 1200001A 		bne	.L134		@,
 530:armwave.c     ****         case 1:
 531:armwave.c     ****             g_armwave_state.ch1_color.r = r * i;
 3456              		.loc 1 531 13 is_stmt 1 view .LVU904
 3457              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 3458              		.loc 1 531 45 is_stmt 0 view .LVU905
 3459 1090 901A07EE 		vmov	s15, r1	@ int	@ r,
 3460 1094 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp125, r
 3461              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3462              		.loc 1 532 45 view .LVU906
 3463 1098 902A07EE 		vmov	s15, r2	@ int	@ g,
 3464 109c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp129, g
 3465              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 533:armwave.c     ****             g_armwave_state.ch1_color.b = b * i;
 3466              		.loc 1 533 45 view .LVU907
 3467 10a0 903A07EE 		vmov	s15, r3	@ int	@ b,
 3468              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3469              		.loc 1 531 41 view .LVU908
 3470 10a4 38309FE5 		ldr	r3, .L137	@ tmp124,
 3471              	.LVL188:
 3472              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3473              		.loc 1 531 45 view .LVU909
 3474 10a8 806A66EE 		vmul.f32	s13, s13, s0	@ tmp126, tmp125, i
 3475              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3476              		.loc 1 533 45 view .LVU910
 3477 10ac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp133, b
 3478              	.LVL189:
 3479              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3480              		.loc 1 532 45 view .LVU911
 3481 10b0 007A27EE 		vmul.f32	s14, s14, s0	@ tmp130, tmp129, i
 3482              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3483              		.loc 1 531 41 view .LVU912
 3484 10b4 E66AFDEE 		vcvt.s32.f32	s13, s13	@ tmp127, tmp126
 3485              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3486              		.loc 1 533 45 view .LVU913
 3487 10b8 807A67EE 		vmul.f32	s15, s15, s0	@ tmp134, tmp133, i
 3488              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3489              		.loc 1 532 41 view .LVU914
 3490 10bc C77ABDEE 		vcvt.s32.f32	s14, s14	@ tmp131, tmp130
 3491              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3492              		.loc 1 531 41 view .LVU915
 3493 10c0 902A16EE 		vmov	r2, s13	@ int	@ tmp127, tmp127
 3494              	.LVL190:
 3495              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3496              		.loc 1 533 41 view .LVU916
 3497 10c4 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp135, tmp134
 3498              	@ armwave.c:531:             g_armwave_state.ch1_color.r = r * i;
 531:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3499              		.loc 1 531 41 view .LVU917
 3500 10c8 B428C3E1 		strh	r2, [r3, #132]	@ movhi	@ tmp127, g_armwave_state.ch1_color.r
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3501              		.loc 1 532 13 is_stmt 1 view .LVU918
 3502              	@ armwave.c:532:             g_armwave_state.ch1_color.g = g * i;
 532:armwave.c     ****             g_armwave_state.ch1_color.g = g * i;
 3503              		.loc 1 532 41 is_stmt 0 view .LVU919
 3504 10cc 102A17EE 		vmov	r2, s14	@ int	@ tmp131, tmp131
 3505 10d0 B628C3E1 		strh	r2, [r3, #134]	@ movhi	@ tmp131, g_armwave_state.ch1_color.g
 3506              		.loc 1 533 13 is_stmt 1 view .LVU920
 3507              	@ armwave.c:533:             g_armwave_state.ch1_color.b = b * i;
 3508              		.loc 1 533 41 is_stmt 0 view .LVU921
 3509 10d4 902A17EE 		vmov	r2, s15	@ int	@ tmp135, tmp135
 3510 10d8 B828C3E1 		strh	r2, [r3, #136]	@ movhi	@ tmp135, g_armwave_state.ch1_color.b
 534:armwave.c     ****             break;
 3511              		.loc 1 534 13 is_stmt 1 view .LVU922
 3512              	.L134:
 3513              	@ armwave.c:536: }
 535:armwave.c     ****     }
 536:armwave.c     **** }
 3514              		.loc 1 536 1 is_stmt 0 view .LVU923
 3515 10dc 10D08DE2 		add	sp, sp, #16	@,,
 3516              		.cfi_def_cfa_offset 0
 3517              		@ sp needed	@
 3518 10e0 1EFF2FE1 		bx	lr	@
 3519              	.L138:
 3520              		.align	2
 3521              	.L137:
 3522 10e4 00000000 		.word	g_armwave_state
 3523              		.cfi_endproc
 3524              	.LFE72:
 3526              		.align	2
 3527              		.global	armwave_set_graticule_colour
 3528              		.syntax unified
 3529              		.arm
 3530              		.fpu vfp
 3532              	armwave_set_graticule_colour:
 3533              	.LVL191:
 3534              	.LFB73:
 537:armwave.c     **** 
 538:armwave.c     **** /*
 539:armwave.c     ****  * Set the graticule colour.
 540:armwave.c     ****  */
 541:armwave.c     **** void armwave_set_graticule_colour(int r, int g, int b)
 542:armwave.c     **** {
 3535              		.loc 1 542 1 is_stmt 1 view -0
 3536              		.cfi_startproc
 3537              		@ args = 0, pretend = 0, frame = 0
 3538              		@ frame_needed = 0, uses_anonymous_args = 0
 543:armwave.c     ****     g_grat_colour.red = r * 255;
 3539              		.loc 1 543 5 view .LVU925
 3540              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 3541              		.loc 1 543 23 is_stmt 0 view .LVU926
 3542 10e8 3C309FE5 		ldr	r3, .L141	@ tmp121,
 3543              	@ armwave.c:542: {
 542:armwave.c     ****     g_grat_colour.red = r * 255;
 3544              		.loc 1 542 1 view .LVU927
 3545 10ec 70402DE9 		push	{r4, r5, r6, lr}	@
 3546              		.cfi_def_cfa_offset 16
 3547              		.cfi_offset 4, -16
 3548              		.cfi_offset 5, -12
 3549              		.cfi_offset 6, -8
 3550              		.cfi_offset 14, -4
 3551              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 3552              		.loc 1 543 23 view .LVU928
 3553 10f0 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3554              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 545:armwave.c     ****     g_grat_colour.blue = b * 255;
 546:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 547:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3555              		.loc 1 547 5 view .LVU929
 3556 10f4 34609FE5 		ldr	r6, .L141+4	@ tmp143,
 3557 10f8 34509FE5 		ldr	r5, .L141+8	@ tmp145,
 3558              	@ armwave.c:544:     g_grat_colour.green = g * 255;
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 3559              		.loc 1 544 25 view .LVU930
 3560 10fc 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3561              	@ armwave.c:545:     g_grat_colour.blue = b * 255;
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3562              		.loc 1 545 24 view .LVU931
 3563 1100 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3564              	@ armwave.c:543:     g_grat_colour.red = r * 255;
 543:armwave.c     ****     g_grat_colour.green = g * 255;
 3565              		.loc 1 543 23 view .LVU932
 3566 1104 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_colour.red
 544:armwave.c     ****     g_grat_colour.green = g * 255;
 3567              		.loc 1 544 5 is_stmt 1 view .LVU933
 3568              	@ armwave.c:546:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3569              		.loc 1 546 25 is_stmt 0 view .LVU934
 3570 1108 07C0A0E3 		mov	ip, #7	@ tmp140,
 3571              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3572              		.loc 1 547 5 view .LVU935
 3573 110c 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3574              	.LVL192:
 3575              		.loc 1 547 5 view .LVU936
 3576 1110 000095E5 		ldr	r0, [r5]	@, g_dpy
 3577              	.LVL193:
 3578              	@ armwave.c:544:     g_grat_colour.green = g * 255;
 544:armwave.c     ****     g_grat_colour.blue = b * 255;
 3579              		.loc 1 544 25 view .LVU937
 3580 1114 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_colour.green
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3581              		.loc 1 545 5 is_stmt 1 view .LVU938
 3582              	@ armwave.c:545:     g_grat_colour.blue = b * 255;
 545:armwave.c     ****     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 3583              		.loc 1 545 24 is_stmt 0 view .LVU939
 3584 1118 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_colour.blue
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3585              		.loc 1 546 5 is_stmt 1 view .LVU940
 3586              	@ armwave.c:546:     g_grat_colour.flags = DoRed | DoGreen | DoBlue;
 546:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 3587              		.loc 1 546 25 is_stmt 0 view .LVU941
 3588 111c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_colour.flags
 3589              		.loc 1 547 5 is_stmt 1 view .LVU942
 3590 1120 0320A0E1 		mov	r2, r3	@, tmp121
 3591              	.LVL194:
 3592              	@ armwave.c:548: }
 548:armwave.c     **** }
 3593              		.loc 1 548 1 is_stmt 0 view .LVU943
 3594 1124 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3595              		.cfi_restore 14
 3596              		.cfi_restore 6
 3597              		.cfi_restore 5
 3598              		.cfi_restore 4
 3599              		.cfi_def_cfa_offset 0
 3600              	@ armwave.c:547:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_colour);
 547:armwave.c     **** }
 3601              		.loc 1 547 5 view .LVU944
 3602 1128 FEFFFFEA 		b	XAllocColor		@
 3603              	.LVL195:
 3604              	.L142:
 3605              		.align	2
 3606              	.L141:
 3607 112c 00000000 		.word	g_grat_colour
 3608 1130 00000000 		.word	g_xswa
 3609 1134 00000000 		.word	g_dpy
 3610              		.cfi_endproc
 3611              	.LFE73:
 3613              		.align	2
 3614              		.global	armwave_set_graticule_subcolour
 3615              		.syntax unified
 3616              		.arm
 3617              		.fpu vfp
 3619              	armwave_set_graticule_subcolour:
 3620              	.LVL196:
 3621              	.LFB74:
 549:armwave.c     **** 
 550:armwave.c     **** /*
 551:armwave.c     ****  * Set the graticule sub colour.
 552:armwave.c     ****  */
 553:armwave.c     **** void armwave_set_graticule_subcolour(int r, int g, int b)
 554:armwave.c     **** {
 3622              		.loc 1 554 1 is_stmt 1 view -0
 3623              		.cfi_startproc
 3624              		@ args = 0, pretend = 0, frame = 0
 3625              		@ frame_needed = 0, uses_anonymous_args = 0
 555:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3626              		.loc 1 555 5 view .LVU946
 3627              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 3628              		.loc 1 555 26 is_stmt 0 view .LVU947
 3629 1138 3C309FE5 		ldr	r3, .L145	@ tmp121,
 3630              	@ armwave.c:554: {
 554:armwave.c     ****     g_grat_subcolour.red = r * 255;
 3631              		.loc 1 554 1 view .LVU948
 3632 113c 70402DE9 		push	{r4, r5, r6, lr}	@
 3633              		.cfi_def_cfa_offset 16
 3634              		.cfi_offset 4, -16
 3635              		.cfi_offset 5, -12
 3636              		.cfi_offset 6, -8
 3637              		.cfi_offset 14, -4
 3638              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 3639              		.loc 1 555 26 view .LVU949
 3640 1140 00C460E0 		rsb	ip, r0, r0, lsl #8	@ tmp126, r, r,
 3641              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 557:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 558:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 559:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3642              		.loc 1 559 5 view .LVU950
 3643 1144 34609FE5 		ldr	r6, .L145+4	@ tmp143,
 3644 1148 34509FE5 		ldr	r5, .L145+8	@ tmp145,
 3645              	@ armwave.c:556:     g_grat_subcolour.green = g * 255;
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3646              		.loc 1 556 28 view .LVU951
 3647 114c 014461E0 		rsb	r4, r1, r1, lsl #8	@ tmp132, g, g,
 3648              	@ armwave.c:557:     g_grat_subcolour.blue = b * 255;
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3649              		.loc 1 557 27 view .LVU952
 3650 1150 02E462E0 		rsb	lr, r2, r2, lsl #8	@ tmp138, b, b,
 3651              	@ armwave.c:555:     g_grat_subcolour.red = r * 255;
 555:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3652              		.loc 1 555 26 view .LVU953
 3653 1154 B4C0C3E1 		strh	ip, [r3, #4]	@ movhi	@ tmp126, g_grat_subcolour.red
 556:armwave.c     ****     g_grat_subcolour.green = g * 255;
 3654              		.loc 1 556 5 is_stmt 1 view .LVU954
 3655              	@ armwave.c:558:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3656              		.loc 1 558 28 is_stmt 0 view .LVU955
 3657 1158 07C0A0E3 		mov	ip, #7	@ tmp140,
 3658              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3659              		.loc 1 559 5 view .LVU956
 3660 115c 341096E5 		ldr	r1, [r6, #52]	@, g_xswa.colormap
 3661              	.LVL197:
 3662              		.loc 1 559 5 view .LVU957
 3663 1160 000095E5 		ldr	r0, [r5]	@, g_dpy
 3664              	.LVL198:
 3665              	@ armwave.c:556:     g_grat_subcolour.green = g * 255;
 556:armwave.c     ****     g_grat_subcolour.blue = b * 255;
 3666              		.loc 1 556 28 view .LVU958
 3667 1164 B640C3E1 		strh	r4, [r3, #6]	@ movhi	@ tmp132, g_grat_subcolour.green
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3668              		.loc 1 557 5 is_stmt 1 view .LVU959
 3669              	@ armwave.c:557:     g_grat_subcolour.blue = b * 255;
 557:armwave.c     ****     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 3670              		.loc 1 557 27 is_stmt 0 view .LVU960
 3671 1168 B8E0C3E1 		strh	lr, [r3, #8]	@ movhi	@ tmp138, g_grat_subcolour.blue
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3672              		.loc 1 558 5 is_stmt 1 view .LVU961
 3673              	@ armwave.c:558:     g_grat_subcolour.flags = DoRed | DoGreen | DoBlue;
 558:armwave.c     ****     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 3674              		.loc 1 558 28 is_stmt 0 view .LVU962
 3675 116c 0AC0C3E5 		strb	ip, [r3, #10]	@ tmp140, g_grat_subcolour.flags
 3676              		.loc 1 559 5 is_stmt 1 view .LVU963
 3677 1170 0320A0E1 		mov	r2, r3	@, tmp121
 3678              	.LVL199:
 3679              	@ armwave.c:560: }
 560:armwave.c     **** }
 3680              		.loc 1 560 1 is_stmt 0 view .LVU964
 3681 1174 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3682              		.cfi_restore 14
 3683              		.cfi_restore 6
 3684              		.cfi_restore 5
 3685              		.cfi_restore 4
 3686              		.cfi_def_cfa_offset 0
 3687              	@ armwave.c:559:     XAllocColor(g_dpy, g_xswa.colormap, &g_grat_subcolour);
 559:armwave.c     **** }
 3688              		.loc 1 559 5 view .LVU965
 3689 1178 FEFFFFEA 		b	XAllocColor		@
 3690              	.LVL200:
 3691              	.L146:
 3692              		.align	2
 3693              	.L145:
 3694 117c 00000000 		.word	g_grat_subcolour
 3695 1180 00000000 		.word	g_xswa
 3696 1184 00000000 		.word	g_dpy
 3697              		.cfi_endproc
 3698              	.LFE74:
 3700              		.align	2
 3701              		.global	armwave_set_graticule_dims
 3702              		.syntax unified
 3703              		.arm
 3704              		.fpu vfp
 3706              	armwave_set_graticule_dims:
 3707              	.LVL201:
 3708              	.LFB75:
 561:armwave.c     **** 
 562:armwave.c     **** /*
 563:armwave.c     ****  * Set the graticule dimensions.
 564:armwave.c     ****  */
 565:armwave.c     **** void armwave_set_graticule_dims(int marg, int n_hdiv, int n_vdiv, int n_subhdiv, int n_subvdiv, flo
 566:armwave.c     **** {
 3709              		.loc 1 566 1 is_stmt 1 view -0
 3710              		.cfi_startproc
 3711              		@ args = 4, pretend = 0, frame = 0
 3712              		@ frame_needed = 0, uses_anonymous_args = 0
 567:armwave.c     ****     if(marg > 0) {
 3713              		.loc 1 567 5 view .LVU967
 3714              	@ armwave.c:567:     if(marg > 0) {
 3715              		.loc 1 567 7 is_stmt 0 view .LVU968
 3716 1188 000050E3 		cmp	r0, #0	@ marg
 3717              	@ armwave.c:566: {
 566:armwave.c     ****     if(marg > 0) {
 3718              		.loc 1 566 1 view .LVU969
 3719 118c 04E02DE5 		str	lr, [sp, #-4]!	@,
 3720              		.cfi_def_cfa_offset 4
 3721              		.cfi_offset 14, -4
 3722              	@ armwave.c:568:         g_armwave_state.frame_margin = marg;
 568:armwave.c     ****         g_armwave_state.frame_margin = marg;
 3723              		.loc 1 568 38 view .LVU970
 3724 1190 58E09FC5 		ldrgt	lr, .L157	@ tmp120,
 3725              	@ armwave.c:566: {
 566:armwave.c     ****     if(marg > 0) {
 3726              		.loc 1 566 1 view .LVU971
 3727 1194 04C09DE5 		ldr	ip, [sp, #4]	@ n_subvdiv, n_subvdiv
 3728              		.loc 1 568 9 is_stmt 1 view .LVU972
 3729              	@ armwave.c:568:         g_armwave_state.frame_margin = marg;
 3730              		.loc 1 568 38 is_stmt 0 view .LVU973
 3731 1198 58008EC5 		strgt	r0, [lr, #88]	@ marg, g_armwave_state.frame_margin
 569:armwave.c     ****     }
 570:armwave.c     ****     
 571:armwave.c     ****     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3732              		.loc 1 571 5 is_stmt 1 view .LVU974
 3733              	@ armwave.c:571:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3734              		.loc 1 571 7 is_stmt 0 view .LVU975
 3735 119c 000051E3 		cmp	r1, #0	@ n_hdiv,
 3736 11a0 020000DA 		ble	.L149		@,
 3737              	@ armwave.c:571:     if(n_hdiv > 0 && (n_hdiv % 2) == 0) {
 3738              		.loc 1 571 19 discriminator 1 view .LVU976
 3739 11a4 010011E3 		tst	r1, #1	@ n_hdiv,
 572:armwave.c     ****         g_armwave_state.n_hdiv = n_hdiv;
 3740              		.loc 1 572 9 is_stmt 1 discriminator 1 view .LVU977
 3741              	@ armwave.c:572:         g_armwave_state.n_hdiv = n_hdiv;
 3742              		.loc 1 572 32 is_stmt 0 discriminator 1 view .LVU978
 3743 11a8 40009F05 		ldreq	r0, .L157	@ tmp122,
 3744              	.LVL202:
 3745              		.loc 1 572 32 discriminator 1 view .LVU979
 3746 11ac 5C108005 		streq	r1, [r0, #92]	@ n_hdiv, g_armwave_state.n_hdiv
 3747              	.L149:
 573:armwave.c     ****     }
 574:armwave.c     ****     
 575:armwave.c     ****     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3748              		.loc 1 575 5 is_stmt 1 view .LVU980
 3749              	@ armwave.c:575:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3750              		.loc 1 575 7 is_stmt 0 view .LVU981
 3751 11b0 000052E3 		cmp	r2, #0	@ n_vdiv,
 3752 11b4 020000DA 		ble	.L150		@,
 3753              	@ armwave.c:575:     if(n_vdiv > 0 && (n_vdiv % 2) == 0) {
 3754              		.loc 1 575 19 discriminator 1 view .LVU982
 3755 11b8 010012E3 		tst	r2, #1	@ n_vdiv,
 576:armwave.c     ****         g_armwave_state.n_vdiv = n_vdiv;
 3756              		.loc 1 576 9 is_stmt 1 discriminator 1 view .LVU983
 3757              	@ armwave.c:576:         g_armwave_state.n_vdiv = n_vdiv;
 3758              		.loc 1 576 32 is_stmt 0 discriminator 1 view .LVU984
 3759 11bc 2C109F05 		ldreq	r1, .L157	@ tmp124,
 3760              	.LVL203:
 3761              		.loc 1 576 32 discriminator 1 view .LVU985
 3762 11c0 60208105 		streq	r2, [r1, #96]	@ n_vdiv, g_armwave_state.n_vdiv
 3763              	.L150:
 577:armwave.c     ****     }
 578:armwave.c     ****     
 579:armwave.c     ****     if(n_subhdiv > 0) {
 3764              		.loc 1 579 5 is_stmt 1 view .LVU986
 3765              	@ armwave.c:579:     if(n_subhdiv > 0) {
 3766              		.loc 1 579 7 is_stmt 0 view .LVU987
 3767 11c4 000053E3 		cmp	r3, #0	@ n_subhdiv,
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3768              		.loc 1 580 9 is_stmt 1 view .LVU988
 3769              	@ armwave.c:587:     if(subdiv_frac > 0) {
 581:armwave.c     ****     }
 582:armwave.c     ****     
 583:armwave.c     ****     if(n_subvdiv > 0) {
 584:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 585:armwave.c     ****     }
 586:armwave.c     ****     
 587:armwave.c     ****     if(subdiv_frac > 0) {
 3770              		.loc 1 587 7 is_stmt 0 view .LVU989
 3771 11c8 C00AB5EE 		vcmpe.f32	s0, #0	@ subdiv_frac
 3772              	@ armwave.c:580:         g_armwave_state.n_subhdiv = n_subhdiv;
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3773              		.loc 1 580 35 view .LVU990
 3774 11cc 1C209FC5 		ldrgt	r2, .L157	@ tmp125,
 3775              	.LVL204:
 580:armwave.c     ****         g_armwave_state.n_subhdiv = n_subhdiv;
 3776              		.loc 1 580 35 view .LVU991
 3777 11d0 643082C5 		strgt	r3, [r2, #100]	@ n_subhdiv, g_armwave_state.n_subhdiv
 583:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3778              		.loc 1 583 5 is_stmt 1 view .LVU992
 3779              	@ armwave.c:583:     if(n_subvdiv > 0) {
 583:armwave.c     ****         g_armwave_state.n_subvdiv = n_subvdiv;
 3780              		.loc 1 583 7 is_stmt 0 view .LVU993
 3781 11d4 00005CE3 		cmp	ip, #0	@ n_subvdiv,
 584:armwave.c     ****     }
 3782              		.loc 1 584 9 is_stmt 1 view .LVU994
 3783              	@ armwave.c:584:         g_armwave_state.n_subvdiv = n_subvdiv;
 584:armwave.c     ****     }
 3784              		.loc 1 584 35 is_stmt 0 view .LVU995
 3785 11d8 10309FC5 		ldrgt	r3, .L157	@ tmp126,
 3786              	.LVL205:
 584:armwave.c     ****     }
 3787              		.loc 1 584 35 view .LVU996
 3788 11dc 68C083C5 		strgt	ip, [r3, #104]	@ n_subvdiv, g_armwave_state.n_subvdiv
 3789              		.loc 1 587 5 is_stmt 1 view .LVU997
 3790              	@ armwave.c:587:     if(subdiv_frac > 0) {
 3791              		.loc 1 587 7 is_stmt 0 view .LVU998
 3792 11e0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 588:armwave.c     ****         g_armwave_state.subdiv_frac = subdiv_frac;
 3793              		.loc 1 588 9 is_stmt 1 view .LVU999
 3794              	@ armwave.c:588:         g_armwave_state.subdiv_frac = subdiv_frac;
 3795              		.loc 1 588 37 is_stmt 0 view .LVU1000
 3796 11e4 04309FC5 		ldrgt	r3, .L157	@ tmp128,
 3797 11e8 1B0A83CD 		vstrgt.32	s0, [r3, #108]	@ subdiv_frac, g_armwave_state.subdiv_frac
 3798              	@ armwave.c:590: }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 3799              		.loc 1 590 1 view .LVU1001
 3800 11ec 04F09DE4 		ldr	pc, [sp], #4	@
 3801              	.L158:
 3802              		.align	2
 3803              	.L157:
 3804 11f0 00000000 		.word	g_armwave_state
 3805              		.cfi_endproc
 3806              	.LFE75:
 3808              		.align	2
 3809              		.global	armwave_test_buffer_alloc
 3810              		.syntax unified
 3811              		.arm
 3812              		.fpu vfp
 3814              	armwave_test_buffer_alloc:
 3815              	.LVL206:
 3816              	.LFB76:
 591:armwave.c     **** 
 592:armwave.c     **** /*
 593:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 594:armwave.c     ****  */
 595:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 596:armwave.c     **** {
 3817              		.loc 1 596 1 is_stmt 1 view -0
 3818              		.cfi_startproc
 3819              		@ args = 0, pretend = 0, frame = 0
 3820              		@ frame_needed = 0, uses_anonymous_args = 0
 597:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3821              		.loc 1 597 5 view .LVU1003
 3822              	@ armwave.c:596: {
 596:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3823              		.loc 1 596 1 is_stmt 0 view .LVU1004
 3824 11f4 70402DE9 		push	{r4, r5, r6, lr}	@
 3825              		.cfi_def_cfa_offset 16
 3826              		.cfi_offset 4, -16
 3827              		.cfi_offset 5, -12
 3828              		.cfi_offset 6, -8
 3829              		.cfi_offset 14, -4
 3830              	@ armwave.c:596: {
 596:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 3831              		.loc 1 596 1 view .LVU1005
 3832 11f8 0060A0E1 		mov	r6, r0	@ nsets, nsets
 3833              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 3834              		.loc 1 597 23 view .LVU1006
 3835 11fc 44409FE5 		ldr	r4, .L166	@ tmp128,
 3836 1200 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 3837              	.LVL207:
 3838              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 3839              		.loc 1 597 7 view .LVU1007
 3840 1204 000050E3 		cmp	r0, #0	@ _1,
 3841 1208 0000000A 		beq	.L160		@,
 598:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3842              		.loc 1 598 9 is_stmt 1 view .LVU1008
 3843 120c FEFFFFEB 		bl	free		@
 3844              	.LVL208:
 3845              	.L160:
 599:armwave.c     ****     }
 600:armwave.c     **** 
 601:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 3846              		.loc 1 603 5 view .LVU1009
 3847              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3848              		.loc 1 603 75 is_stmt 0 view .LVU1010
 3849 1210 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3850 1214 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3851              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3852              		.loc 1 603 40 view .LVU1011
 3853 1218 0610A0E1 		mov	r1, r6	@, nsets
 3854              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3855              		.loc 1 603 75 view .LVU1012
 3856 121c 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 3857              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 3858              		.loc 1 603 40 view .LVU1013
 3859 1220 0500A0E1 		mov	r0, r5	@, _4
 3860 1224 FEFFFFEB 		bl	calloc		@
 3861              	.LVL209:
 3862              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 604:armwave.c     **** 
 605:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 3863              		.loc 1 605 7 view .LVU1014
 3864 1228 000050E3 		cmp	r0, #0	@ tmp124,
 3865              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 3866              		.loc 1 603 38 view .LVU1015
 3867 122c 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 3868              		.loc 1 605 5 is_stmt 1 view .LVU1016
 3869              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 3870              		.loc 1 605 7 is_stmt 0 view .LVU1017
 3871 1230 7080BD18 		popne	{r4, r5, r6, pc}	@
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3872              		.loc 1 606 9 is_stmt 1 view .LVU1018
 3873 1234 960501E0 		mul	r1, r6, r5	@, nsets, _4
 3874 1238 0620A0E1 		mov	r2, r6	@, nsets
 3875 123c 08009FE5 		ldr	r0, .L166+4	@,
 3876              	@ armwave.c:610: }
 607:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 608:armwave.c     ****         return;
 609:armwave.c     ****     }
 610:armwave.c     **** }
 3877              		.loc 1 610 1 is_stmt 0 view .LVU1019
 3878 1240 7040BDE8 		pop	{r4, r5, r6, lr}	@
 3879              		.cfi_restore 14
 3880              		.cfi_restore 6
 3881              		.cfi_restore 5
 3882              		.cfi_restore 4
 3883              		.cfi_def_cfa_offset 0
 3884              	.LVL210:
 3885              	@ armwave.c:606:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3886              		.loc 1 606 9 view .LVU1020
 3887 1244 FEFFFFEA 		b	printf		@
 3888              	.LVL211:
 3889              	.L167:
 606:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3890              		.loc 1 606 9 view .LVU1021
 3891              		.align	2
 3892              	.L166:
 3893 1248 00000000 		.word	g_armwave_state
 3894 124c 78020000 		.word	.LC17
 3895              		.cfi_endproc
 3896              	.LFE76:
 3898              		.align	2
 3899              		.global	armwave_test_create_am_sine
 3900              		.syntax unified
 3901              		.arm
 3902              		.fpu vfp
 3904              	armwave_test_create_am_sine:
 3905              	.LVL212:
 3906              	.LFB77:
 611:armwave.c     **** 
 612:armwave.c     **** /*
 613:armwave.c     ****  * Make a test AM waveform for render tests.
 614:armwave.c     ****  *
 615:armwave.c     ****  * @param   mod                     modulation depth
 616:armwave.c     ****  * @param   noise_fraction          typically 1e-6`
 617:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 618:armwave.c     ****  */
 619:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 620:armwave.c     **** {
 3907              		.loc 1 620 1 is_stmt 1 view -0
 3908              		.cfi_startproc
 3909              		@ args = 0, pretend = 0, frame = 8
 3910              		@ frame_needed = 0, uses_anonymous_args = 0
 621:armwave.c     ****     float v, noise, xnoise, mod_val;
 3911              		.loc 1 621 5 view .LVU1023
 622:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3912              		.loc 1 622 5 view .LVU1024
 3913              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3914              		.loc 1 620 1 is_stmt 0 view .LVU1025
 3915 1250 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3916              		.cfi_def_cfa_offset 36
 3917              		.cfi_offset 4, -36
 3918              		.cfi_offset 5, -32
 3919              		.cfi_offset 6, -28
 3920              		.cfi_offset 7, -24
 3921              		.cfi_offset 8, -20
 3922              		.cfi_offset 9, -16
 3923              		.cfi_offset 10, -12
 3924              		.cfi_offset 11, -8
 3925              		.cfi_offset 14, -4
 3926              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3927              		.loc 1 622 38 view .LVU1026
 3928 1254 857A9FED 		vldr.32	s14, .L199+16	@ tmp185,
 3929              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3930              		.loc 1 622 55 view .LVU1027
 3931 1258 28529FE5 		ldr	r5, .L199+40	@ tmp260,
 3932              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3933              		.loc 1 620 1 view .LVU1028
 3934 125c 108B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13, d14, d15}	@
 3935              		.cfi_def_cfa_offset 100
 3936              		.cfi_offset 80, -100
 3937              		.cfi_offset 81, -96
 3938              		.cfi_offset 82, -92
 3939              		.cfi_offset 83, -88
 3940              		.cfi_offset 84, -84
 3941              		.cfi_offset 85, -80
 3942              		.cfi_offset 86, -76
 3943              		.cfi_offset 87, -72
 3944              		.cfi_offset 88, -68
 3945              		.cfi_offset 89, -64
 3946              		.cfi_offset 90, -60
 3947              		.cfi_offset 91, -56
 3948              		.cfi_offset 92, -52
 3949              		.cfi_offset 93, -48
 3950              		.cfi_offset 94, -44
 3951              		.cfi_offset 95, -40
 3952 1260 0090A0E1 		mov	r9, r0	@ sets, sets
 3953              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3954              		.loc 1 622 38 view .LVU1029
 3955 1264 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp272, g_armwave_state.waves
 3956              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 623:armwave.c     ****     int s, set_offset = 0;
 624:armwave.c     ****     int w, x;
 625:armwave.c     **** 
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3957              		.loc 1 626 70 view .LVU1030
 3958 1268 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3959 126c 382095E5 		ldr	r2, [r5, #56]	@ tmp273, g_armwave_state.waves
 3960              	.LBB118:
 3961              	.LBB119:
 3962              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3963              		.loc 1 597 23 view .LVU1031
 3964 1270 180095E5 		ldr	r0, [r5, #24]	@ _87, g_armwave_state.test_wave_buffer
 3965              	.LVL213:
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3966              		.loc 1 597 23 view .LVU1032
 3967              	.LBE119:
 3968              	.LBE118:
 3969              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 3970              		.loc 1 622 38 view .LVU1033
 3971 1274 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp183, tmp272
 3972              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3973              		.loc 1 626 70 view .LVU1034
 3974 1278 920303E0 		mul	r3, r2, r3	@ tmp188, tmp273, g_armwave_state.wave_stride
 3975              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3976              		.loc 1 620 1 view .LVU1035
 3977 127c 60DAF0EE 		vmov.f32	s27, s1	@ noise_fraction, noise_fraction
 3978              	.LBB123:
 3979              	.LBB120:
 3980              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3981              		.loc 1 597 7 view .LVU1036
 3982 1280 000050E3 		cmp	r0, #0	@ _87,
 3983              	.LBE120:
 3984              	.LBE123:
 3985              	@ armwave.c:620: {
 620:armwave.c     ****     float v, noise, xnoise, mod_val;
 3986              		.loc 1 620 1 view .LVU1037
 3987 1284 0CD04DE2 		sub	sp, sp, #12	@,,
 3988              		.cfi_def_cfa_offset 112
 3989              	@ armwave.c:627:     g_armwave_state.test_wave_buffer_nsets = sets;
 627:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3990              		.loc 1 627 44 view .LVU1038
 3991 1288 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3992              	@ armwave.c:626:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3993              		.loc 1 626 45 view .LVU1039
 3994 128c 1C3085E5 		str	r3, [r5, #28]	@ tmp188, g_armwave_state.test_wave_buffer_stride
 3995              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 3996              		.loc 1 622 38 view .LVU1040
 3997 1290 27EAC7EE 		vdiv.f32	s29, s14, s15	@ tmp184, tmp185, tmp183
 3998              	@ armwave.c:622:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 622:armwave.c     ****     int s, set_offset = 0;
 3999              		.loc 1 622 11 view .LVU1041
 4000 1294 80EA6EEE 		vmul.f32	s29, s29, s0	@ _1_waves_mod, tmp184, mod
 4001              	.LVL214:
 623:armwave.c     ****     int w, x;
 4002              		.loc 1 623 5 is_stmt 1 view .LVU1042
 624:armwave.c     **** 
 4003              		.loc 1 624 5 view .LVU1043
 626:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 4004              		.loc 1 626 5 view .LVU1044
 4005              		.loc 1 627 5 view .LVU1045
 628:armwave.c     ****     armwave_test_buffer_alloc(sets);
 4006              		.loc 1 628 5 view .LVU1046
 4007              	.LBB124:
 4008              	.LBI118:
 595:armwave.c     **** {
 4009              		.loc 1 595 6 view .LVU1047
 4010              	.LBB121:
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4011              		.loc 1 597 5 view .LVU1048
 4012              	@ armwave.c:597:     if(g_armwave_state.test_wave_buffer != NULL) {
 597:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 4013              		.loc 1 597 7 is_stmt 0 view .LVU1049
 4014 1298 0000000A 		beq	.L169		@,
 598:armwave.c     ****     }
 4015              		.loc 1 598 9 is_stmt 1 view .LVU1050
 4016 129c FEFFFFEB 		bl	free		@
 4017              	.LVL215:
 4018              	.L169:
 603:armwave.c     **** 
 4019              		.loc 1 603 5 view .LVU1051
 4020              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 4021              		.loc 1 603 75 is_stmt 0 view .LVU1052
 4022 12a0 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 4023 12a4 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 4024              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 4025              		.loc 1 603 40 view .LVU1053
 4026 12a8 0910A0E1 		mov	r1, r9	@, sets
 4027              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 4028              		.loc 1 603 75 view .LVU1054
 4029 12ac 940304E0 		mul	r4, r4, r3	@ _90, g_armwave_state.waves_max, g_armwave_state.wave_length
 4030              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 4031              		.loc 1 603 40 view .LVU1055
 4032 12b0 0400A0E1 		mov	r0, r4	@, _90
 4033 12b4 FEFFFFEB 		bl	calloc		@
 4034              	.LVL216:
 4035              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4036              		.loc 1 605 7 view .LVU1056
 4037 12b8 000050E3 		cmp	r0, #0	@ tmp196,
 4038              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 603:armwave.c     **** 
 4039              		.loc 1 603 38 view .LVU1057
 4040 12bc 180085E5 		str	r0, [r5, #24]	@ tmp196, g_armwave_state.test_wave_buffer
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4041              		.loc 1 605 5 is_stmt 1 view .LVU1058
 4042              	@ armwave.c:605:     if(g_armwave_state.test_wave_buffer == NULL) {
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4043              		.loc 1 605 7 is_stmt 0 view .LVU1059
 4044 12c0 6000000A 		beq	.L198		@,
 4045              	.L170:
 4046              	.LVL217:
 605:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 4047              		.loc 1 605 7 view .LVU1060
 4048              	.LBE121:
 4049              	.LBE124:
 4050              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 629:armwave.c     **** 
 630:armwave.c     ****     for(s = 0; s < sets; s++) {
 4051              		.loc 1 630 5 discriminator 1 view .LVU1061
 4052 12c4 000059E3 		cmp	r9, #0	@ sets,
 4053 12c8 5B0000DA 		ble	.L168		@,
 4054              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 631:armwave.c     ****         printf("Calculating test set %d\n", s);
 632:armwave.c     ****     
 633:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 634:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 635:armwave.c     ****             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4055              		.loc 1 635 63 view .LVU1062
 4056 12cc 63BB9FED 		vldr.64	d11, .L199	@ tmp267,
 4057              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 4058              		.loc 1 635 28 view .LVU1063
 4059 12d0 64AB9FED 		vldr.64	d10, .L199+8	@ tmp268,
 4060              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 636:armwave.c     **** 
 637:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 638:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 639:armwave.c     ****                 noise *= noise;
 640:armwave.c     ****                 noise *= noise;
 641:armwave.c     ****                 noise *= noise;
 642:armwave.c     **** 
 643:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 644:armwave.c     ****                     noise = -noise;
 645:armwave.c     **** 
 646:armwave.c     ****                 noise += 1.0f;
 647:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 648:armwave.c     **** 
 649:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 650:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 651:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 652:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 4061              		.loc 1 652 104 view .LVU1064
 4062 12d4 66EA9FED 		vldr.32	s28, .L199+20	@ tmp269,
 4063              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4064              		.loc 1 630 5 view .LVU1065
 4065 12d8 0070A0E3 		mov	r7, #0	@ set_offset,
 4066              	@ armwave.c:631:         printf("Calculating test set %d\n", s);
 631:armwave.c     ****         printf("Calculating test set %d\n", s);
 4067              		.loc 1 631 9 view .LVU1066
 4068 12dc A8A19FE5 		ldr	r10, .L199+44	@ tmp266,
 4069              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4070              		.loc 1 630 5 view .LVU1067
 4071 12e0 0780A0E1 		mov	r8, r7	@ s, set_offset
 4072              	.LVL218:
 4073              	.L171:
 631:armwave.c     ****         printf("Calculating test set %d\n", s);
 4074              		.loc 1 631 9 is_stmt 1 view .LVU1068
 4075 12e4 0810A0E1 		mov	r1, r8	@, s
 4076 12e8 0A00A0E1 		mov	r0, r10	@, tmp266
 4077 12ec FEFFFFEB 		bl	printf		@
 4078              	.LVL219:
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4079              		.loc 1 633 9 view .LVU1069
 4080              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4081              		.loc 1 633 39 is_stmt 0 view .LVU1070
 4082 12f0 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4083              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4084              		.loc 1 633 9 view .LVU1071
 4085 12f4 000054E3 		cmp	r4, #0	@ prephitmp_135,
 4086 12f8 4A0000DA 		ble	.L172		@,
 4087              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4088              		.loc 1 635 54 view .LVU1072
 4089 12fc 5D8ADFED 		vldr.32	s17, .L199+24	@ tmp206,
 4090              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4091              		.loc 1 649 45 view .LVU1073
 4092 1300 5A8A9FED 		vldr.32	s16, .L199+16	@ tmp263,
 4093 1304 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4094              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4095              		.loc 1 633 15 view .LVU1074
 4096 1308 0060A0E3 		mov	r6, #0	@ w,
 4097              	.LVL220:
 4098              	.L179:
 635:armwave.c     **** 
 4099              		.loc 1 635 13 is_stmt 1 view .LVU1075
 4100              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4101              		.loc 1 635 49 is_stmt 0 view .LVU1076
 4102 130c 906A07EE 		vmov	s15, r6	@ int	@ w, w
 4103 1310 E70AB8EE 		vcvt.f32.s32	s0, s15	@ tmp203, w
 4104 1314 2E0A20EE 		vmul.f32	s0, s0, s29	@ tmp204, tmp203, _1_waves_mod
 4105              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4106              		.loc 1 635 54 view .LVU1077
 4107 1318 280A20EE 		vmul.f32	s0, s0, s17	@ tmp205, tmp204, tmp206
 4108              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4109              		.loc 1 635 31 view .LVU1078
 4110 131c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp205
 4111 1320 FEFFFFEB 		bl	sin		@
 4112              	.LVL221:
 4113              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4114              		.loc 1 637 13 view .LVU1079
 4115 1324 00005BE3 		cmp	fp, #0	@ prephitmp_139,
 4116              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4117              		.loc 1 635 63 view .LVU1080
 4118 1328 0B0B30EE 		vadd.f64	d0, d0, d11	@ tmp208,, tmp267
 4119              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4120              		.loc 1 635 28 view .LVU1081
 4121 132c 0A0B20EE 		vmul.f64	d0, d0, d10	@ tmp210, tmp208, tmp268
 4122              	@ armwave.c:635:             mod_val = 0.5f * (sin((_1_waves_mod * w) * 6.28f) + 1.0f);
 635:armwave.c     **** 
 4123              		.loc 1 635 21 view .LVU1082
 4124 1330 C00BB7EE 		vcvt.f32.f64	s0, d0	@ mod_val, tmp210
 4125              	.LVL222:
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4126              		.loc 1 637 13 is_stmt 1 view .LVU1083
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4127              		.loc 1 637 13 is_stmt 0 view .LVU1084
 4128 1334 380000DA 		ble	.L173		@,
 4129 1338 C09AB7EE 		vcvt.f64.f32	d9, s0	@ tmp261, mod_val
 4130              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4131              		.loc 1 647 24 view .LVU1085
 4132 133c 4EDA9FED 		vldr.32	s26, .L199+28	@ tmp229,
 4133              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4134              		.loc 1 652 113 view .LVU1086
 4135 1340 4ECADFED 		vldr.32	s25, .L199+32	@ tmp240,
 4136 1344 4ECA9FED 		vldr.32	s24, .L199+36	@ tmp241,
 4137              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4138              		.loc 1 637 19 view .LVU1087
 4139 1348 0040A0E3 		mov	r4, #0	@ x,
 4140              	.LVL223:
 4141              	.L178:
 638:armwave.c     ****                 noise *= noise;
 4142              		.loc 1 638 17 is_stmt 1 view .LVU1088
 4143              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4144              		.loc 1 638 28 is_stmt 0 view .LVU1089
 4145 134c FEFFFFEB 		bl	rand		@
 4146              	.LVL224:
 4147              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4148              		.loc 1 638 35 view .LVU1090
 4149 1350 7000FFE6 		uxth	r0, r0	@ tmp212,
 4150              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4151              		.loc 1 638 45 view .LVU1091
 4152 1354 900A07EE 		vmov	s15, r0	@ int	@ tmp212, tmp212
 4153 1358 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp214, tmp212
 4154              	@ armwave.c:638:                 noise  = ((rand() & 0xffff) * noise_fraction);
 638:armwave.c     ****                 noise *= noise;
 4155              		.loc 1 638 24 view .LVU1092
 4156 135c AD7A67EE 		vmul.f32	s15, s15, s27	@ noise, tmp214, noise_fraction
 4157              	.LVL225:
 639:armwave.c     ****                 noise *= noise;
 4158              		.loc 1 639 17 is_stmt 1 view .LVU1093
 4159              	@ armwave.c:639:                 noise *= noise;
 639:armwave.c     ****                 noise *= noise;
 4160              		.loc 1 639 23 is_stmt 0 view .LVU1094
 4161 1360 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4162              	.LVL226:
 640:armwave.c     ****                 noise *= noise;
 4163              		.loc 1 640 17 is_stmt 1 view .LVU1095
 4164              	@ armwave.c:640:                 noise *= noise;
 640:armwave.c     ****                 noise *= noise;
 4165              		.loc 1 640 23 is_stmt 0 view .LVU1096
 4166 1364 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 4167              	.LVL227:
 641:armwave.c     **** 
 4168              		.loc 1 641 17 is_stmt 1 view .LVU1097
 4169              	@ armwave.c:641:                 noise *= noise;
 641:armwave.c     **** 
 4170              		.loc 1 641 23 is_stmt 0 view .LVU1098
 4171 1368 A7FA27EE 		vmul.f32	s30, s15, s15	@ noise, noise, noise
 4172              	.LVL228:
 643:armwave.c     ****                     noise = -noise;
 4173              		.loc 1 643 17 is_stmt 1 view .LVU1099
 4174              	@ armwave.c:643:                 if((rand() & 0xffff) > 0x7fff)
 643:armwave.c     ****                     noise = -noise;
 4175              		.loc 1 643 21 is_stmt 0 view .LVU1100
 4176 136c FEFFFFEB 		bl	rand		@
 4177              	.LVL229:
 644:armwave.c     **** 
 4178              		.loc 1 644 21 is_stmt 1 view .LVU1101
 4179              	@ armwave.c:643:                 if((rand() & 0xffff) > 0x7fff)
 643:armwave.c     ****                     noise = -noise;
 4180              		.loc 1 643 19 is_stmt 0 view .LVU1102
 4181 1370 020910E3 		tst	r0, #32768	@,
 4182              	@ armwave.c:644:                     noise = -noise;
 644:armwave.c     **** 
 4183              		.loc 1 644 27 view .LVU1103
 4184 1374 4FFAB11E 		vnegne.f32	s30, s30	@ noise, noise
 4185              	.LVL230:
 646:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4186              		.loc 1 646 17 is_stmt 1 view .LVU1104
 647:armwave.c     **** 
 4187              		.loc 1 647 17 view .LVU1105
 4188              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4189              		.loc 1 647 27 is_stmt 0 view .LVU1106
 4190 1378 FEFFFFEB 		bl	rand		@
 4191              	.LVL231:
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4192              		.loc 1 649 17 is_stmt 1 view .LVU1107
 4193              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4194              		.loc 1 649 45 is_stmt 0 view .LVU1108
 4195 137c 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp277, g_armwave_state.wave_length
 4196              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4197              		.loc 1 649 33 view .LVU1109
 4198 1380 904A07EE 		vmov	s15, r4	@ int	@ x, x
 4199              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4200              		.loc 1 649 45 view .LVU1110
 4201 1384 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp277
 4202              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4203              		.loc 1 649 33 view .LVU1111
 4204 1388 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp221, x
 4205              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4206              		.loc 1 649 45 view .LVU1112
 4207 138c 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp219, tmp263, tmp217
 4208              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4209              		.loc 1 649 33 view .LVU1113
 4210 1390 A87A67EE 		vmul.f32	s15, s15, s17	@ tmp222, tmp221, tmp206
 4211              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4212              		.loc 1 647 34 view .LVU1114
 4213 1394 7000FFE6 		uxth	r0, r0	@ tmp225,
 4214              	.LVL232:
 4215              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4216              		.loc 1 647 44 view .LVU1115
 4217 1398 100A07EE 		vmov	s14, r0	@ int	@ tmp225, tmp225
 4218 139c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp227, tmp225
 4219              	@ armwave.c:647:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 647:armwave.c     **** 
 4220              		.loc 1 647 24 view .LVU1116
 4221 13a0 0D0A87EE 		vdiv.f32	s0, s14, s26	@ xnoise, tmp227, tmp229
 4222              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4223              		.loc 1 649 77 view .LVU1117
 4224 13a4 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp230, tmp219, tmp222
 4225              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4226              		.loc 1 649 22 view .LVU1118
 4227 13a8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp230
 4228 13ac FEFFFFEB 		bl	sin		@
 4229              	.LVL233:
 4230              		.loc 1 652 17 is_stmt 1 view .LVU1119
 4231              	@ armwave.c:646:                 noise += 1.0f;
 646:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 4232              		.loc 1 646 23 is_stmt 0 view .LVU1120
 4233 13b0 087A7FEE 		vadd.f32	s15, s30, s16	@ noise, noise, tmp263
 4234              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4235              		.loc 1 652 104 view .LVU1121
 4236 13b4 0010A0E3 		mov	r1, #0	@ iftmp.27_55,
 4237              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4238              		.loc 1 649 98 view .LVU1122
 4239 13b8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp236, noise
 4240              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4241              		.loc 1 649 87 view .LVU1123
 4242 13bc 000B29EE 		vmul.f64	d0, d9, d0	@ tmp233, tmp261,
 4243              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4244              		.loc 1 649 98 view .LVU1124
 4245 13c0 077B20EE 		vmul.f64	d7, d0, d7	@ tmp237, tmp233, tmp236
 4246              	@ armwave.c:649:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 649:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 4247              		.loc 1 649 19 view .LVU1125
 4248 13c4 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp237
 4249              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4250              		.loc 1 652 113 view .LVU1126
 4251 13c8 4C7AF0EE 		vmov.f32	s15, s24	@ _38, tmp241
 4252 13cc 2C7A47EE 		vmla.f32	s15, s14, s25	@ _38, v, tmp240
 4253 13d0 C07AF5EE 		vcmpe.f32	s15, #0	@ _38
 4254 13d4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4255 13d8 050000DA 		ble	.L175		@,
 4256              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4257              		.loc 1 652 104 discriminator 1 view .LVU1127
 4258 13dc CE7AF4EE 		vcmpe.f32	s15, s28	@ _38, tmp269
 4259 13e0 FF10A0E3 		mov	r1, #255	@ iftmp.27_55,
 4260 13e4 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 4261 13e8 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp245, _38
 4262 13ec 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp245, %sfp
 4263 13f0 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_55, %sfp
 4264              	.L175:
 4265              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4266              		.loc 1 652 57 discriminator 12 view .LVU1128
 4267 13f4 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4268              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4269              		.loc 1 652 102 discriminator 12 view .LVU1129
 4270 13f8 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 4271 13fc 927622E0 		mla	r2, r2, r6, r7	@ tmp252, g_armwave_state.wave_stride, w, set_offset
 4272 1400 043083E0 		add	r3, r3, r4	@ tmp251, g_armwave_state.test_wave_buffer, x
 4273              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4274              		.loc 1 637 58 discriminator 12 view .LVU1130
 4275 1404 014084E2 		add	r4, r4, #1	@ x, x,
 4276              	.LVL234:
 4277              	@ armwave.c:652:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 4278              		.loc 1 652 102 discriminator 12 view .LVU1131
 4279 1408 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_55, *_45
 4280              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4281              		.loc 1 637 43 discriminator 12 view .LVU1132
 4282 140c 4CB095E5 		ldr	fp, [r5, #76]	@ prephitmp_139, g_armwave_state.wave_length
 4283              	@ armwave.c:637:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 637:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 4284              		.loc 1 637 13 discriminator 12 view .LVU1133
 4285 1410 04005BE1 		cmp	fp, r4	@ prephitmp_139, x
 4286 1414 CCFFFFCA 		bgt	.L178		@,
 4287 1418 384095E5 		ldr	r4, [r5, #56]	@ prephitmp_135, g_armwave_state.waves
 4288              	.LVL235:
 4289              	.L173:
 4290              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4291              		.loc 1 633 48 discriminator 2 view .LVU1134
 4292 141c 016086E2 		add	r6, r6, #1	@ w, w,
 4293              	.LVL236:
 4294              	@ armwave.c:633:         for(w = 0; w < g_armwave_state.waves; w++) {
 633:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 4295              		.loc 1 633 9 discriminator 2 view .LVU1135
 4296 1420 040056E1 		cmp	r6, r4	@ w, prephitmp_135
 4297 1424 B8FFFFBA 		blt	.L179		@,
 4298              	.LVL237:
 4299              	.L172:
 653:armwave.c     ****             }
 654:armwave.c     ****         }
 655:armwave.c     **** 
 656:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4300              		.loc 1 656 9 is_stmt 1 discriminator 2 view .LVU1136
 4301              	@ armwave.c:656:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4302              		.loc 1 656 46 is_stmt 0 discriminator 2 view .LVU1137
 4303 1428 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 4304              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4305              		.loc 1 630 27 discriminator 2 view .LVU1138
 4306 142c 018088E2 		add	r8, r8, #1	@ s, s,
 4307              	.LVL238:
 4308              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4309              		.loc 1 630 5 discriminator 2 view .LVU1139
 4310 1430 080059E1 		cmp	r9, r8	@ sets, s
 4311              	@ armwave.c:656:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 4312              		.loc 1 656 20 discriminator 2 view .LVU1140
 4313 1434 937427E0 		mla	r7, r3, r4, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_135, set_offset
 4314              	.LVL239:
 4315              	@ armwave.c:630:     for(s = 0; s < sets; s++) {
 630:armwave.c     ****         printf("Calculating test set %d\n", s);
 4316              		.loc 1 630 5 discriminator 2 view .LVU1141
 4317 1438 A9FFFF1A 		bne	.L171		@,
 4318              	.LVL240:
 4319              	.L168:
 4320              	@ armwave.c:658: }
 657:armwave.c     ****     }
 658:armwave.c     **** }
 4321              		.loc 1 658 1 view .LVU1142
 4322 143c 0CD08DE2 		add	sp, sp, #12	@,,
 4323              		.cfi_remember_state
 4324              		.cfi_def_cfa_offset 100
 4325              		@ sp needed	@
 4326 1440 108BBDEC 		vldm	sp!, {d8-d15}	@,
 4327              		.cfi_restore 94
 4328              		.cfi_restore 95
 4329              		.cfi_restore 92
 4330              		.cfi_restore 93
 4331              		.cfi_restore 90
 4332              		.cfi_restore 91
 4333              		.cfi_restore 88
 4334              		.cfi_restore 89
 4335              		.cfi_restore 86
 4336              		.cfi_restore 87
 4337              		.cfi_restore 84
 4338              		.cfi_restore 85
 4339              		.cfi_restore 82
 4340              		.cfi_restore 83
 4341              		.cfi_restore 80
 4342              		.cfi_restore 81
 4343              		.cfi_def_cfa_offset 36
 4344 1444 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 4345              	.LVL241:
 4346              	.L198:
 4347              		.cfi_restore_state
 4348              	.LBB125:
 4349              	.LBB122:
 606:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 4350              		.loc 1 606 9 is_stmt 1 view .LVU1143
 4351 1448 940901E0 		mul	r1, r4, r9	@, _90, sets
 4352 144c 0920A0E1 		mov	r2, r9	@, sets
 4353 1450 38009FE5 		ldr	r0, .L199+48	@,
 4354 1454 FEFFFFEB 		bl	printf		@
 4355              	.LVL242:
 608:armwave.c     ****     }
 4356              		.loc 1 608 9 view .LVU1144
 4357 1458 99FFFFEA 		b	.L170		@
 4358              	.L200:
 4359 145c 0000A0E1 		.align	3
 4360              	.L199:
 4361 1460 00000000 		.word	0
 4362 1464 0000F03F 		.word	1072693248
 4363 1468 00000000 		.word	0
 4364 146c 0000E03F 		.word	1071644672
 4365 1470 0000803F 		.word	1065353216
 4366 1474 00007F43 		.word	1132396544
 4367 1478 C3F5C840 		.word	1086911939
 4368 147c 38FFC74A 		.word	1254620984
 4369 1480 0000FE42 		.word	1123942400
 4370 1484 00000043 		.word	1124073472
 4371 1488 00000000 		.word	g_armwave_state
 4372 148c CC020000 		.word	.LC18
 4373 1490 78020000 		.word	.LC17
 4374              	.LBE122:
 4375              	.LBE125:
 4376              		.cfi_endproc
 4377              	.LFE77:
 4379              		.align	2
 4380              		.global	armwave_cleanup
 4381              		.syntax unified
 4382              		.arm
 4383              		.fpu vfp
 4385              	armwave_cleanup:
 4386              	.LFB78:
 659:armwave.c     **** 
 660:armwave.c     **** /*
 661:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 662:armwave.c     ****  */
 663:armwave.c     **** void armwave_cleanup()
 664:armwave.c     **** {
 4387              		.loc 1 664 1 view -0
 4388              		.cfi_startproc
 4389              		@ args = 0, pretend = 0, frame = 0
 4390              		@ frame_needed = 0, uses_anonymous_args = 0
 665:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4391              		.loc 1 665 5 view .LVU1146
 4392              	@ armwave.c:664: {
 664:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 4393              		.loc 1 664 1 is_stmt 0 view .LVU1147
 4394 1494 10402DE9 		push	{r4, lr}	@
 4395              		.cfi_def_cfa_offset 8
 4396              		.cfi_offset 4, -8
 4397              		.cfi_offset 14, -4
 4398              	@ armwave.c:665:     free(g_armwave_state.out_pixbuf);
 4399              		.loc 1 665 25 view .LVU1148
 4400 1498 34409FE5 		ldr	r4, .L203	@ tmp114,
 4401              	@ armwave.c:665:     free(g_armwave_state.out_pixbuf);
 4402              		.loc 1 665 5 view .LVU1149
 4403 149c 800094E5 		ldr	r0, [r4, #128]	@, g_armwave_state.out_pixbuf
 4404 14a0 FEFFFFEB 		bl	free		@
 4405              	.LVL243:
 666:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 4406              		.loc 1 666 5 is_stmt 1 view .LVU1150
 4407 14a4 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 4408 14a8 FEFFFFEB 		bl	free		@
 4409              	.LVL244:
 667:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 4410              		.loc 1 667 5 view .LVU1151
 4411 14ac 9C0094E5 		ldr	r0, [r4, #156]	@, g_armwave_state.xcoord_to_xpixel
 4412 14b0 FEFFFFEB 		bl	free		@
 4413              	.LVL245:
 668:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 4414              		.loc 1 668 5 view .LVU1152
 4415 14b4 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 4416 14b8 FEFFFFEB 		bl	free		@
 4417              	.LVL246:
 669:armwave.c     **** 
 670:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 4418              		.loc 1 670 5 view .LVU1153
 4419              	@ armwave.c:670:     g_armwave_state.out_pixbuf = NULL;
 4420              		.loc 1 670 32 is_stmt 0 view .LVU1154
 4421 14bc 0030A0E3 		mov	r3, #0	@ tmp123,
 4422 14c0 803084E5 		str	r3, [r4, #128]	@ tmp123, g_armwave_state.out_pixbuf
 671:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 4423              		.loc 1 671 5 is_stmt 1 view .LVU1155
 4424              	@ armwave.c:671:     g_armwave_state.ch1_buffer = NULL;
 4425              		.loc 1 671 32 is_stmt 0 view .LVU1156
 4426 14c4 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 672:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 4427              		.loc 1 672 5 is_stmt 1 view .LVU1157
 4428              	@ armwave.c:672:     g_armwave_state.xcoord_to_xpixel = NULL;
 4429              		.loc 1 672 38 is_stmt 0 view .LVU1158
 4430 14c8 9C3084E5 		str	r3, [r4, #156]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 673:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 4431              		.loc 1 673 5 is_stmt 1 view .LVU1159
 4432              	@ armwave.c:673:     g_armwave_state.test_wave_buffer = NULL;
 4433              		.loc 1 673 38 is_stmt 0 view .LVU1160
 4434 14cc 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 4435              	@ armwave.c:674: }
 674:armwave.c     **** }
 4436              		.loc 1 674 1 view .LVU1161
 4437 14d0 1080BDE8 		pop	{r4, pc}	@
 4438              	.L204:
 4439              		.align	2
 4440              	.L203:
 4441 14d4 00000000 		.word	g_armwave_state
 4442              		.cfi_endproc
 4443              	.LFE78:
 4445              		.align	2
 4446              		.global	armwave_grab_xid
 4447              		.syntax unified
 4448              		.arm
 4449              		.fpu vfp
 4451              	armwave_grab_xid:
 4452              	.LVL247:
 4453              	.LFB79:
 675:armwave.c     **** 
 676:armwave.c     **** /*
 677:armwave.c     ****  * Grab a given XWindow by ID.
 678:armwave.c     ****  */
 679:armwave.c     **** void armwave_grab_xid(int id)
 680:armwave.c     **** {
 4454              		.loc 1 680 1 is_stmt 1 view -0
 4455              		.cfi_startproc
 4456              		@ args = 0, pretend = 0, frame = 0
 4457              		@ frame_needed = 0, uses_anonymous_args = 0
 681:armwave.c     ****     XEvent event;
 4458              		.loc 1 681 5 view .LVU1163
 682:armwave.c     ****     
 683:armwave.c     ****     if(g_window != 0) {
 4459              		.loc 1 683 5 view .LVU1164
 4460              	@ armwave.c:680: {
 680:armwave.c     ****     XEvent event;
 4461              		.loc 1 680 1 is_stmt 0 view .LVU1165
 4462 14d8 70402DE9 		push	{r4, r5, r6, lr}	@
 4463              		.cfi_def_cfa_offset 16
 4464              		.cfi_offset 4, -16
 4465              		.cfi_offset 5, -12
 4466              		.cfi_offset 6, -8
 4467              		.cfi_offset 14, -4
 4468              	@ armwave.c:680: {
 680:armwave.c     ****     XEvent event;
 4469              		.loc 1 680 1 view .LVU1166
 4470 14dc 0060A0E1 		mov	r6, r0	@ id, id
 4471              	@ armwave.c:683:     if(g_window != 0) {
 4472              		.loc 1 683 17 view .LVU1167
 4473 14e0 6C409FE5 		ldr	r4, .L212	@ tmp141,
 4474 14e4 6C509FE5 		ldr	r5, .L212+4	@ tmp140,
 4475 14e8 001094E5 		ldr	r1, [r4]	@ g_window.30_1, g_window
 4476 14ec 000095E5 		ldr	r0, [r5]	@ pretmp_22, g_dpy
 4477              	.LVL248:
 4478              	@ armwave.c:683:     if(g_window != 0) {
 4479              		.loc 1 683 7 view .LVU1168
 4480 14f0 000051E3 		cmp	r1, #0	@ g_window.30_1,
 4481 14f4 1300001A 		bne	.L211		@,
 4482              	.L206:
 684:armwave.c     ****         XUnmapWindow(g_dpy, g_window);
 685:armwave.c     ****     }
 686:armwave.c     ****     
 687:armwave.c     ****     g_window = id;
 4483              		.loc 1 687 5 is_stmt 1 view .LVU1169
 4484              	@ armwave.c:689:     XStoreName(g_dpy, g_window, "ArmWave");
 688:armwave.c     ****     
 689:armwave.c     ****     XStoreName(g_dpy, g_window, "ArmWave");
 4485              		.loc 1 689 5 is_stmt 0 view .LVU1170
 4486 14f8 0610A0E1 		mov	r1, r6	@, id
 4487 14fc 58209FE5 		ldr	r2, .L212+8	@,
 4488              	@ armwave.c:687:     g_window = id;
 687:armwave.c     ****     
 4489              		.loc 1 687 14 view .LVU1171
 4490 1500 006084E5 		str	r6, [r4]	@ id, g_window
 4491              		.loc 1 689 5 is_stmt 1 view .LVU1172
 4492 1504 FEFFFFEB 		bl	XStoreName		@
 4493              	.LVL249:
 690:armwave.c     ****     XSetIconName(g_dpy, g_window, "ArmWave");
 4494              		.loc 1 690 5 view .LVU1173
 4495 1508 001094E5 		ldr	r1, [r4]	@, g_window
 4496 150c 48209FE5 		ldr	r2, .L212+8	@,
 4497 1510 000095E5 		ldr	r0, [r5]	@, g_dpy
 4498 1514 FEFFFFEB 		bl	XSetIconName		@
 4499              	.LVL250:
 691:armwave.c     ****     XSelectInput(g_dpy, g_window, StructureNotifyMask);
 4500              		.loc 1 691 5 view .LVU1174
 4501 1518 001094E5 		ldr	r1, [r4]	@, g_window
 4502 151c 0228A0E3 		mov	r2, #131072	@,
 4503 1520 000095E5 		ldr	r0, [r5]	@, g_dpy
 4504 1524 FEFFFFEB 		bl	XSelectInput		@
 4505              	.LVL251:
 692:armwave.c     ****     
 693:armwave.c     ****     printf("Window done, mapping...\n");
 4506              		.loc 1 693 5 view .LVU1175
 4507 1528 30009FE5 		ldr	r0, .L212+12	@,
 4508 152c FEFFFFEB 		bl	puts		@
 4509              	.LVL252:
 694:armwave.c     **** 
 695:armwave.c     **** #if 1	 
 696:armwave.c     ****     XMapWindow(g_dpy, g_window);
 4510              		.loc 1 696 5 view .LVU1176
 4511 1530 001094E5 		ldr	r1, [r4]	@, g_window
 4512 1534 000095E5 		ldr	r0, [r5]	@, g_dpy
 4513 1538 FEFFFFEB 		bl	XMapWindow		@
 4514              	.LVL253:
 697:armwave.c     **** 
 698:armwave.c     **** #if 0    
 699:armwave.c     ****     do {
 700:armwave.c     ****         XNextEvent(g_dpy, &event);
 701:armwave.c     ****     }
 702:armwave.c     ****     while(event.type != MapNotify || event.xmap.event != g_window);
 703:armwave.c     **** #endif
 704:armwave.c     **** #endif
 705:armwave.c     **** 
 706:armwave.c     ****     printf("All done in window\n");
 4515              		.loc 1 706 5 view .LVU1177
 4516 153c 20009FE5 		ldr	r0, .L212+16	@,
 4517              	@ armwave.c:707: }
 707:armwave.c     **** }
 4518              		.loc 1 707 1 is_stmt 0 view .LVU1178
 4519 1540 7040BDE8 		pop	{r4, r5, r6, lr}	@
 4520              		.cfi_remember_state
 4521              		.cfi_restore 14
 4522              		.cfi_restore 6
 4523              		.cfi_restore 5
 4524              		.cfi_restore 4
 4525              		.cfi_def_cfa_offset 0
 4526              	.LVL254:
 4527              	@ armwave.c:706:     printf("All done in window\n");
 706:armwave.c     **** }
 4528              		.loc 1 706 5 view .LVU1179
 4529 1544 FEFFFFEA 		b	puts		@
 4530              	.LVL255:
 4531              	.L211:
 4532              		.cfi_restore_state
 684:armwave.c     ****     }
 4533              		.loc 1 684 9 is_stmt 1 view .LVU1180
 4534 1548 FEFFFFEB 		bl	XUnmapWindow		@
 4535              	.LVL256:
 4536 154c 000095E5 		ldr	r0, [r5]	@ pretmp_22, g_dpy
 4537 1550 E8FFFFEA 		b	.L206		@
 4538              	.L213:
 4539              		.align	2
 4540              	.L212:
 4541 1554 00000000 		.word	.LANCHOR1
 4542 1558 00000000 		.word	g_dpy
 4543 155c E8020000 		.word	.LC19
 4544 1560 F0020000 		.word	.LC20
 4545 1564 08030000 		.word	.LC21
 4546              		.cfi_endproc
 4547              	.LFE79:
 4549              		.align	2
 4550              		.global	armwave_init_x11
 4551              		.syntax unified
 4552              		.arm
 4553              		.fpu vfp
 4555              	armwave_init_x11:
 4556              	.LFB80:
 708:armwave.c     **** 
 709:armwave.c     **** /*
 710:armwave.c     ****  * Initialise the Xvideo and MITSHM extension.
 711:armwave.c     ****  */
 712:armwave.c     **** void armwave_init_x11()
 713:armwave.c     **** {
 4557              		.loc 1 713 1 view -0
 4558              		.cfi_startproc
 4559              		@ args = 0, pretend = 0, frame = 0
 4560              		@ frame_needed = 0, uses_anonymous_args = 0
 714:armwave.c     ****     int screen;
 4561              		.loc 1 714 5 view .LVU1182
 715:armwave.c     ****     
 716:armwave.c     ****     printf("armwave: initialising for X11...\n");
 4562              		.loc 1 716 5 view .LVU1183
 4563              	@ armwave.c:713: {
 713:armwave.c     ****     int screen;
 4564              		.loc 1 713 1 is_stmt 0 view .LVU1184
 4565 1568 04E02DE5 		str	lr, [sp, #-4]!	@,
 4566              		.cfi_def_cfa_offset 4
 4567              		.cfi_offset 14, -4
 4568 156c 0CD04DE2 		sub	sp, sp, #12	@,,
 4569              		.cfi_def_cfa_offset 16
 4570              	@ armwave.c:716:     printf("armwave: initialising for X11...\n");
 4571              		.loc 1 716 5 view .LVU1185
 4572 1570 68009FE5 		ldr	r0, .L219	@,
 4573 1574 FEFFFFEB 		bl	puts		@
 4574              	.LVL257:
 717:armwave.c     ****         
 718:armwave.c     ****     /*
 719:armwave.c     ****      * Try to open the display.
 720:armwave.c     ****      */
 721:armwave.c     ****     g_dpy = XOpenDisplay(NULL);
 4575              		.loc 1 721 5 is_stmt 1 view .LVU1186
 4576              	@ armwave.c:721:     g_dpy = XOpenDisplay(NULL);
 4577              		.loc 1 721 13 is_stmt 0 view .LVU1187
 4578 1578 0000A0E3 		mov	r0, #0	@,
 4579 157c FEFFFFEB 		bl	XOpenDisplay		@
 4580              	.LVL258:
 4581              	@ armwave.c:721:     g_dpy = XOpenDisplay(NULL);
 4582              		.loc 1 721 11 view .LVU1188
 4583 1580 5C209FE5 		ldr	r2, .L219+4	@ tmp114,
 4584              	@ armwave.c:722:     if (g_dpy == NULL) {
 722:armwave.c     ****     if (g_dpy == NULL) {
 4585              		.loc 1 722 8 view .LVU1189
 4586 1584 000050E3 		cmp	r0, #0	@ _1,
 4587              	@ armwave.c:721:     g_dpy = XOpenDisplay(NULL);
 721:armwave.c     ****     if (g_dpy == NULL) {
 4588              		.loc 1 721 11 view .LVU1190
 4589 1588 000082E5 		str	r0, [r2]	@ _1, g_dpy
 4590              		.loc 1 722 5 is_stmt 1 view .LVU1191
 4591              	@ armwave.c:722:     if (g_dpy == NULL) {
 4592              		.loc 1 722 8 is_stmt 0 view .LVU1192
 4593 158c 0B00000A 		beq	.L218		@,
 723:armwave.c     ****         printf("Error: Fatal X11: Cannot open display.\n");
 724:armwave.c     ****         exit (-1);
 725:armwave.c     ****     }
 726:armwave.c     ****     
 727:armwave.c     ****     screen = DefaultScreen(g_dpy);
 4594              		.loc 1 727 5 is_stmt 1 view .LVU1193
 4595              	.LVL259:
 728:armwave.c     ****     
 729:armwave.c     ****     /*
 730:armwave.c     ****      * Check the display supports 24-bit TrueColor, if not then abort early.
 731:armwave.c     ****      */
 732:armwave.c     ****     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4596              		.loc 1 732 5 view .LVU1194
 4597              	@ armwave.c:732:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4598              		.loc 1 732 9 is_stmt 0 view .LVU1195
 4599 1590 50309FE5 		ldr	r3, .L219+8	@ tmp117,
 4600 1594 841090E5 		ldr	r1, [r0, #132]	@ MEM[(struct  *)_1].default_screen, MEM[(struct  *)_1].default_screen
 4601 1598 1820A0E3 		mov	r2, #24	@,
 4602 159c 00308DE5 		str	r3, [sp]	@ tmp117,
 4603              	.LVL260:
 4604              		.loc 1 732 9 view .LVU1196
 4605 15a0 0430A0E3 		mov	r3, #4	@,
 4606 15a4 FEFFFFEB 		bl	XMatchVisualInfo		@
 4607              	.LVL261:
 4608              	@ armwave.c:732:     if (XMatchVisualInfo(g_dpy, screen, 24, TrueColor, &g_vinfo)) {
 4609              		.loc 1 732 8 view .LVU1197
 4610 15a8 000050E3 		cmp	r0, #0	@,
 4611 15ac 0700000A 		beq	.L216		@,
 733:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4612              		.loc 1 733 9 is_stmt 1 view .LVU1198
 4613 15b0 34009FE5 		ldr	r0, .L219+12	@,
 4614              	@ armwave.c:738: }
 734:armwave.c     ****     } else {
 735:armwave.c     ****         printf("Error: Fatal X11: not supported 24-bit TrueColor display.\n");
 736:armwave.c     ****         exit(-1);
 737:armwave.c     ****     }
 738:armwave.c     **** }
 4615              		.loc 1 738 1 is_stmt 0 view .LVU1199
 4616 15b4 0CD08DE2 		add	sp, sp, #12	@,,
 4617              		.cfi_remember_state
 4618              		.cfi_def_cfa_offset 4
 4619              		@ sp needed	@
 4620 15b8 04E09DE4 		ldr	lr, [sp], #4	@,
 4621              		.cfi_restore 14
 4622              		.cfi_def_cfa_offset 0
 4623              	@ armwave.c:733:         printf("Found 24bit TrueColor.\n");
 733:armwave.c     ****         printf("Found 24bit TrueColor.\n");
 4624              		.loc 1 733 9 view .LVU1200
 4625 15bc FEFFFFEA 		b	puts		@
 4626              	.LVL262:
 4627              	.L218:
 4628              		.cfi_restore_state
 723:armwave.c     ****         exit (-1);
 4629              		.loc 1 723 9 is_stmt 1 view .LVU1201
 4630 15c0 28009FE5 		ldr	r0, .L219+16	@,
 4631 15c4 FEFFFFEB 		bl	puts		@
 4632              	.LVL263:
 724:armwave.c     ****     }
 4633              		.loc 1 724 9 view .LVU1202
 4634 15c8 0000E0E3 		mvn	r0, #0	@,
 4635 15cc FEFFFFEB 		bl	exit		@
 4636              	.LVL264:
 4637              	.L216:
 735:armwave.c     ****         exit(-1);
 4638              		.loc 1 735 9 view .LVU1203
 4639 15d0 1C009FE5 		ldr	r0, .L219+20	@,
 4640 15d4 FEFFFFEB 		bl	puts		@
 4641              	.LVL265:
 736:armwave.c     ****     }
 4642              		.loc 1 736 9 view .LVU1204
 4643 15d8 0000E0E3 		mvn	r0, #0	@,
 4644 15dc FEFFFFEB 		bl	exit		@
 4645              	.LVL266:
 4646              	.L220:
 4647              		.align	2
 4648              	.L219:
 4649 15e0 1C030000 		.word	.LC22
 4650 15e4 00000000 		.word	g_dpy
 4651 15e8 00000000 		.word	g_vinfo
 4652 15ec 68030000 		.word	.LC24
 4653 15f0 40030000 		.word	.LC23
 4654 15f4 80030000 		.word	.LC25
 4655              		.cfi_endproc
 4656              	.LFE80:
 4658              		.align	2
 4659              		.global	armwave_init_xvimage_shared
 4660              		.syntax unified
 4661              		.arm
 4662              		.fpu vfp
 4664              	armwave_init_xvimage_shared:
 4665              	.LVL267:
 4666              	.LFB81:
 739:armwave.c     **** 
 740:armwave.c     **** /*
 741:armwave.c     ****  * Create the shared memory buffer for the XvImage.
 742:armwave.c     ****  */
 743:armwave.c     **** void armwave_init_xvimage_shared(int tex_width, int tex_height)
 744:armwave.c     **** {
 4667              		.loc 1 744 1 view -0
 4668              		.cfi_startproc
 4669              		@ args = 0, pretend = 0, frame = 120
 4670              		@ frame_needed = 0, uses_anonymous_args = 0
 745:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4671              		.loc 1 745 5 view .LVU1206
 746:armwave.c     ****     int	p_num_adaptors, ret, n;
 4672              		.loc 1 746 5 view .LVU1207
 747:armwave.c     ****     XGCValues gc_values;
 4673              		.loc 1 747 5 view .LVU1208
 748:armwave.c     ****     XvAdaptorInfo *ai;
 4674              		.loc 1 748 5 view .LVU1209
 749:armwave.c     ****     
 750:armwave.c     ****     /*
 751:armwave.c     ****      * Query the MITSHM extension - check it is available.
 752:armwave.c     ****      */
 753:armwave.c     ****     if(!XShmQueryExtension(g_dpy)) {
 4675              		.loc 1 753 5 view .LVU1210
 4676              	@ armwave.c:744: {
 744:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4677              		.loc 1 744 1 is_stmt 0 view .LVU1211
 4678 15f8 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 4679              		.cfi_def_cfa_offset 32
 4680              		.cfi_offset 4, -32
 4681              		.cfi_offset 5, -28
 4682              		.cfi_offset 6, -24
 4683              		.cfi_offset 7, -20
 4684              		.cfi_offset 8, -16
 4685              		.cfi_offset 9, -12
 4686              		.cfi_offset 10, -8
 4687              		.cfi_offset 14, -4
 4688 15fc 0060A0E1 		mov	r6, r0	@ tex_width, tex_width
 4689              	@ armwave.c:753:     if(!XShmQueryExtension(g_dpy)) {
 4690              		.loc 1 753 9 view .LVU1212
 4691 1600 18729FE5 		ldr	r7, .L244	@ tmp251,
 4692              	@ armwave.c:744: {
 744:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4693              		.loc 1 744 1 view .LVU1213
 4694 1604 88D04DE2 		sub	sp, sp, #136	@,,
 4695              		.cfi_def_cfa_offset 168
 4696              	@ armwave.c:744: {
 744:armwave.c     ****     unsigned int p_version, p_release, p_request_base, p_event_base, p_error_base;
 4697              		.loc 1 744 1 view .LVU1214
 4698 1608 01A0A0E1 		mov	r10, r1	@ tex_height, tex_height
 4699              	@ armwave.c:753:     if(!XShmQueryExtension(g_dpy)) {
 4700              		.loc 1 753 9 view .LVU1215
 4701 160c 000097E5 		ldr	r0, [r7]	@, g_dpy
 4702              	.LVL268:
 4703              		.loc 1 753 9 view .LVU1216
 4704 1610 FEFFFFEB 		bl	XShmQueryExtension		@
 4705              	.LVL269:
 4706              	@ armwave.c:753:     if(!XShmQueryExtension(g_dpy)) {
 4707              		.loc 1 753 7 view .LVU1217
 4708 1614 000050E3 		cmp	r0, #0	@,
 4709 1618 6900000A 		beq	.L239		@,
 754:armwave.c     ****         printf("Error: Fatal X11: Shared memory extension not available or failed to allocate share
 755:armwave.c     ****         exit(-1);
 756:armwave.c     ****     }
 757:armwave.c     ****     
 758:armwave.c     ****     XShmGetEventBase(g_dpy);  // What does this do? 
 4710              		.loc 1 758 5 is_stmt 1 view .LVU1218
 4711 161c 000097E5 		ldr	r0, [r7]	@, g_dpy
 4712 1620 FEFFFFEB 		bl	XShmGetEventBase		@
 4713              	.LVL270:
 759:armwave.c     ****     
 760:armwave.c     ****     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4714              		.loc 1 760 5 view .LVU1219
 4715              	@ armwave.c:760:     ret = XvQueryExtension(g_dpy, &p_version, &p_release, &p_request_base,
 4716              		.loc 1 760 11 is_stmt 0 view .LVU1220
 4717 1624 20208DE2 		add	r2, sp, #32	@ tmp176,,
 4718 1628 1C308DE2 		add	r3, sp, #28	@ tmp177,,
 4719 162c 04208DE5 		str	r2, [sp, #4]	@ tmp176,
 4720 1630 00308DE5 		str	r3, [sp]	@ tmp177,
 4721 1634 14208DE2 		add	r2, sp, #20	@,,
 4722 1638 18308DE2 		add	r3, sp, #24	@,,
 4723 163c 10108DE2 		add	r1, sp, #16	@,,
 4724 1640 000097E5 		ldr	r0, [r7]	@, g_dpy
 4725 1644 FEFFFFEB 		bl	XvQueryExtension		@
 4726              	.LVL271:
 761:armwave.c     **** 			 &p_event_base, &p_error_base);
 762:armwave.c     ****     if(ret != Success) {
 4727              		.loc 1 762 5 is_stmt 1 view .LVU1221
 4728              	@ armwave.c:762:     if(ret != Success) {
 4729              		.loc 1 762 7 is_stmt 0 view .LVU1222
 4730 1648 000050E3 		cmp	r0, #0	@ ret
 4731              		.loc 1 762 7 view .LVU1223
 4732 164c 6E00001A 		bne	.L240		@,
 763:armwave.c     ****         printf("Error: Fatal X11: Unable to find XVideo extension (%d).  Is it configured correctly
 764:armwave.c     ****         exit(-1);
 765:armwave.c     ****     }
 766:armwave.c     ****     
 767:armwave.c     ****     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4733              		.loc 1 767 5 is_stmt 1 view .LVU1224
 4734              	@ armwave.c:767:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4735              		.loc 1 767 11 is_stmt 0 view .LVU1225
 4736 1650 002097E5 		ldr	r2, [r7]	@ g_dpy.48_5, g_dpy
 4737 1654 28308DE2 		add	r3, sp, #40	@,,
 4738 1658 0200A0E1 		mov	r0, r2	@, g_dpy.48_5
 4739              	.LVL272:
 4740              	@ armwave.c:767:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4741              		.loc 1 767 34 view .LVU1226
 4742 165c 841092E5 		ldr	r1, [r2, #132]	@ MEM[(struct  *)g_dpy.48_5].default_screen, MEM[(struct  *)g_dpy.48_5].default
 4743              	@ armwave.c:767:     ret = XvQueryAdaptors(g_dpy, DefaultRootWindow(g_dpy),
 4744              		.loc 1 767 11 view .LVU1227
 4745 1660 8CC092E5 		ldr	ip, [r2, #140]	@ MEM[(struct  *)g_dpy.48_5].screens, MEM[(struct  *)g_dpy.48_5].screens
 4746 1664 24208DE2 		add	r2, sp, #36	@,,
 4747 1668 011181E0 		add	r1, r1, r1, lsl #2	@ tmp186, MEM[(struct  *)g_dpy.48_5].default_screen, MEM[(struct  *)g_dpy.4
 4748 166c 01128CE0 		add	r1, ip, r1, lsl #4	@ tmp188, MEM[(struct  *)g_dpy.48_5].screens, tmp186,
 4749 1670 081091E5 		ldr	r1, [r1, #8]	@, _10->root
 4750 1674 FEFFFFEB 		bl	XvQueryAdaptors		@
 4751              	.LVL273:
 768:armwave.c     **** 			&p_num_adaptors, &ai);
 769:armwave.c     ****     
 770:armwave.c     ****     if(ret != Success) {
 4752              		.loc 1 770 5 is_stmt 1 view .LVU1228
 4753              	@ armwave.c:770:     if(ret != Success) {
 4754              		.loc 1 770 7 is_stmt 0 view .LVU1229
 4755 1678 004050E2 		subs	r4, r0, #0	@ n,
 4756 167c 5D00001A 		bne	.L241		@,
 771:armwave.c     ****         printf("Error: Fatal X11: Unable to query XVideo extension (%d).  Is it configured correctl
 772:armwave.c     ****         exit(-1);
 773:armwave.c     ****     }
 774:armwave.c     ****     
 775:armwave.c     ****     // Use the last port available
 776:armwave.c     ****     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4757              		.loc 1 776 5 is_stmt 1 view .LVU1230
 4758              	@ armwave.c:776:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4759              		.loc 1 776 19 is_stmt 0 view .LVU1231
 4760 1680 24109DE5 		ldr	r1, [sp, #36]	@ p_num_adaptors.52_13, p_num_adaptors
 4761              	@ armwave.c:776:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4762              		.loc 1 776 39 view .LVU1232
 4763 1684 28309DE5 		ldr	r3, [sp, #40]	@ ai, ai
 4764              	@ armwave.c:776:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4765              		.loc 1 776 15 view .LVU1233
 4766 1688 94919FE5 		ldr	r9, .L244+4	@ tmp249,
 4767              	@ armwave.c:776:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 4768              		.loc 1 776 39 view .LVU1234
 4769 168c 812161E0 		rsb	r2, r1, r1, lsl #3	@ tmp194, p_num_adaptors.52_13, p_num_adaptors.52_13,
 4770 1690 023183E0 		add	r3, r3, r2, lsl #2	@ tmp196, ai, tmp194,
 4771 1694 1C5013E5 		ldr	r5, [r3, #-28]	@ _19, _17->base_id
 4772              	@ armwave.c:777:     if(g_xv_port == -1) {
 777:armwave.c     ****     if(g_xv_port == -1) {
 4773              		.loc 1 777 7 view .LVU1235
 4774 1698 010075E3 		cmn	r5, #1	@ _19,
 4775              	@ armwave.c:776:     g_xv_port = ai[p_num_adaptors - 1].base_id;
 776:armwave.c     ****     if(g_xv_port == -1) {
 4776              		.loc 1 776 15 view .LVU1236
 4777 169c 005089E5 		str	r5, [r9]	@ _19, g_xv_port
 4778              		.loc 1 777 5 is_stmt 1 view .LVU1237
 4779              	@ armwave.c:777:     if(g_xv_port == -1) {
 4780              		.loc 1 777 7 is_stmt 0 view .LVU1238
 4781 16a0 4F00000A 		beq	.L242		@,
 778:armwave.c     ****         printf("Error: Fatal X11: Unable to use the port %d\n\n", p_num_adaptors - 1);
 779:armwave.c     ****         exit(-1);
 780:armwave.c     ****     }
 781:armwave.c     ****     
 782:armwave.c     ****     /*
 783:armwave.c     ****      * Create the shared image and attach to it.
 784:armwave.c     ****      */
 785:armwave.c     ****     printf("Attaching XvShm...\n");
 4782              		.loc 1 785 5 is_stmt 1 view .LVU1239
 4783              	@ armwave.c:787:     if(g_yuv_image != NULL) {
 786:armwave.c     ****     
 787:armwave.c     ****     if(g_yuv_image != NULL) {
 4784              		.loc 1 787 20 is_stmt 0 view .LVU1240
 4785 16a4 7C519FE5 		ldr	r5, .L244+8	@ tmp252,
 4786              	@ armwave.c:785:     printf("Attaching XvShm...\n");
 785:armwave.c     ****     
 4787              		.loc 1 785 5 view .LVU1241
 4788 16a8 7C019FE5 		ldr	r0, .L244+12	@,
 4789              	.LVL274:
 785:armwave.c     ****     
 4790              		.loc 1 785 5 view .LVU1242
 4791 16ac FEFFFFEB 		bl	puts		@
 4792              	.LVL275:
 4793              		.loc 1 787 5 is_stmt 1 view .LVU1243
 4794              	@ armwave.c:787:     if(g_yuv_image != NULL) {
 4795              		.loc 1 787 20 is_stmt 0 view .LVU1244
 4796 16b0 040095E5 		ldr	r0, [r5, #4]	@ g_yuv_image.56_21, g_yuv_image
 4797              	@ armwave.c:787:     if(g_yuv_image != NULL) {
 4798              		.loc 1 787 7 view .LVU1245
 4799 16b4 000050E3 		cmp	r0, #0	@ g_yuv_image.56_21,
 4800 16b8 0100000A 		beq	.L226		@,
 788:armwave.c     ****         // Unsure if this is reasonable
 789:armwave.c     ****         XFree(g_yuv_image);
 4801              		.loc 1 789 9 is_stmt 1 view .LVU1246
 4802 16bc FEFFFFEB 		bl	XFree		@
 4803              	.LVL276:
 790:armwave.c     ****         g_yuv_image = NULL;
 4804              		.loc 1 790 9 view .LVU1247
 4805              	@ armwave.c:790:         g_yuv_image = NULL;
 4806              		.loc 1 790 21 is_stmt 0 view .LVU1248
 4807 16c0 044085E5 		str	r4, [r5, #4]	@ n, g_yuv_image
 4808              	.L226:
 791:armwave.c     ****     }
 792:armwave.c     ****     
 793:armwave.c     ****     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_width, tex_height, &
 4809              		.loc 1 793 5 is_stmt 1 view .LVU1249
 4810              	@ armwave.c:793:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 4811              		.loc 1 793 19 is_stmt 0 view .LVU1250
 4812 16c4 64819FE5 		ldr	r8, .L244+16	@ tmp250,
 4813 16c8 40048DE8 		stm	sp, {r6, r10}	@,,
 4814 16cc 0030A0E3 		mov	r3, #0	@,
 4815 16d0 5C219FE5 		ldr	r2, .L244+20	@,
 4816 16d4 001099E5 		ldr	r1, [r9]	@, g_xv_port
 4817 16d8 08808DE5 		str	r8, [sp, #8]	@ tmp250,
 4818 16dc 000097E5 		ldr	r0, [r7]	@, g_dpy
 4819 16e0 FEFFFFEB 		bl	XvShmCreateImage		@
 4820              	.LVL277:
 4821              	@ armwave.c:794:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 794:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4822              		.loc 1 794 27 view .LVU1251
 4823 16e4 4C219FE5 		ldr	r2, .L244+24	@,
 4824              	@ armwave.c:793:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 793:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4825              		.loc 1 793 19 view .LVU1252
 4826 16e8 0030A0E1 		mov	r3, r0	@ _25,
 4827              	@ armwave.c:794:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4828              		.loc 1 794 27 view .LVU1253
 4829 16ec 0C1090E5 		ldr	r1, [r0, #12]	@, _25->data_size
 4830 16f0 0000A0E3 		mov	r0, #0	@,
 4831              	@ armwave.c:793:     g_yuv_image = XvShmCreateImage(g_dpy, g_xv_port, GUID_YUV12_PLANAR, 0, tex_wid
 793:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4832              		.loc 1 793 17 view .LVU1254
 4833 16f4 043085E5 		str	r3, [r5, #4]	@ _25, g_yuv_image
 4834              		.loc 1 794 5 is_stmt 1 view .LVU1255
 4835              	@ armwave.c:794:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 4836              		.loc 1 794 27 is_stmt 0 view .LVU1256
 4837 16f8 FEFFFFEB 		bl	shmget		@
 4838              	.LVL278:
 4839              	@ armwave.c:795:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 795:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4840              		.loc 1 795 49 view .LVU1257
 4841 16fc 0020A0E3 		mov	r2, #0	@,
 4842 1700 0210A0E1 		mov	r1, r2	@,
 4843              	@ armwave.c:795:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4844              		.loc 1 795 40 view .LVU1258
 4845 1704 046095E5 		ldr	r6, [r5, #4]	@ g_yuv_image.62_29, g_yuv_image
 4846              	.LVL279:
 4847              	@ armwave.c:794:     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 
 794:armwave.c     ****     g_yuv_shminfo.shmid = shmget(IPC_PRIVATE, g_yuv_image->data_size, IPC_CREAT | 0777);
 4848              		.loc 1 794 25 view .LVU1259
 4849 1708 040088E5 		str	r0, [r8, #4]	@, g_yuv_shminfo.shmid
 4850              		.loc 1 795 5 is_stmt 1 view .LVU1260
 4851              	@ armwave.c:795:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4852              		.loc 1 795 49 is_stmt 0 view .LVU1261
 4853 170c FEFFFFEB 		bl	shmat		@
 4854              	.LVL280:
 4855              	@ armwave.c:798:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 796:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 797:armwave.c     ****     
 798:armwave.c     ****     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4856              		.loc 1 798 31 view .LVU1262
 4857 1710 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.67_39, g_yuv_image
 4858              	@ armwave.c:796:     g_yuv_shminfo.readOnly = False;
 796:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4859              		.loc 1 796 28 view .LVU1263
 4860 1714 0020A0E3 		mov	r2, #0	@ tmp218,
 4861 1718 0C2088E5 		str	r2, [r8, #12]	@ tmp218, g_yuv_shminfo.readOnly
 4862              	@ armwave.c:798:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 4863              		.loc 1 798 5 view .LVU1264
 4864 171c 101093E5 		ldr	r1, [r3, #16]	@ g_yuv_image.67_106->num_planes, g_yuv_image.67_106->num_planes
 4865 1720 020051E1 		cmp	r1, r2	@ g_yuv_image.67_106->num_planes,
 4866              	@ armwave.c:795:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 795:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4867              		.loc 1 795 47 view .LVU1265
 4868 1724 1C0086E5 		str	r0, [r6, #28]	@ _30, g_yuv_image.62_29->data
 4869              	@ armwave.c:795:     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 795:armwave.c     ****     g_yuv_shminfo.shmaddr = g_yuv_image->data = shmat(g_yuv_shminfo.shmid, 0, 0);
 4870              		.loc 1 795 27 view .LVU1266
 4871 1728 080088E5 		str	r0, [r8, #8]	@ _30, g_yuv_shminfo.shmaddr
 796:armwave.c     ****     g_yuv_shminfo.readOnly = False;
 4872              		.loc 1 796 5 is_stmt 1 view .LVU1267
 4873              		.loc 1 798 5 view .LVU1268
 4874              	.LVL281:
 4875              		.loc 1 798 5 is_stmt 0 view .LVU1269
 4876 172c 0C0000DA 		ble	.L227		@,
 4877              	@ armwave.c:799:         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[
 799:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4878              		.loc 1 799 9 view .LVU1270
 4879 1730 04619FE5 		ldr	r6, .L244+28	@ tmp253,
 4880              	.LVL282:
 4881              	.L228:
 4882              		.loc 1 799 9 is_stmt 1 discriminator 3 view .LVU1271
 4883 1734 140093E5 		ldr	r0, [r3, #20]	@ g_yuv_image.67_108->pitches, g_yuv_image.67_108->pitches
 4884 1738 182093E5 		ldr	r2, [r3, #24]	@ g_yuv_image.67_108->offsets, g_yuv_image.67_108->offsets
 4885 173c 0410A0E1 		mov	r1, r4	@, n
 4886 1740 043190E7 		ldr	r3, [r0, r4, lsl #2]	@, *_37
 4887 1744 042192E7 		ldr	r2, [r2, r4, lsl #2]	@, *_34
 4888 1748 0600A0E1 		mov	r0, r6	@, tmp253
 4889 174c FEFFFFEB 		bl	printf		@
 4890              	.LVL283:
 4891              	@ armwave.c:798:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 798:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4892              		.loc 1 798 31 is_stmt 0 discriminator 3 view .LVU1272
 4893 1750 043095E5 		ldr	r3, [r5, #4]	@ g_yuv_image.67_39, g_yuv_image
 4894              	@ armwave.c:798:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 798:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4895              		.loc 1 798 46 discriminator 3 view .LVU1273
 4896 1754 014084E2 		add	r4, r4, #1	@ n, n,
 4897              	.LVL284:
 4898              	@ armwave.c:798:     for(n = 0; n < g_yuv_image->num_planes; n++) {
 798:armwave.c     ****         printf("yuv_image plane %d offset %d pitch %d\n", n, g_yuv_image->offsets[n], g_yuv_image->
 4899              		.loc 1 798 5 discriminator 3 view .LVU1274
 4900 1758 102093E5 		ldr	r2, [r3, #16]	@ g_yuv_image.67_39->num_planes, g_yuv_image.67_39->num_planes
 4901 175c 040052E1 		cmp	r2, r4	@ g_yuv_image.67_39->num_planes, n
 4902 1760 F3FFFFCA 		bgt	.L228		@,
 4903              	.LVL285:
 4904              	.L227:
 800:armwave.c     ****     }
 801:armwave.c     ****     
 802:armwave.c     ****     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4905              		.loc 1 802 5 is_stmt 1 view .LVU1275
 4906              	@ armwave.c:802:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4907              		.loc 1 802 9 is_stmt 0 view .LVU1276
 4908 1764 C4109FE5 		ldr	r1, .L244+16	@,
 4909 1768 000097E5 		ldr	r0, [r7]	@, g_dpy
 4910 176c FEFFFFEB 		bl	XShmAttach		@
 4911              	.LVL286:
 4912              	@ armwave.c:802:     if(!XShmAttach(g_dpy, &g_yuv_shminfo)) {
 4913              		.loc 1 802 7 view .LVU1277
 4914 1770 000050E3 		cmp	r0, #0	@,
 4915 1774 1600000A 		beq	.L243		@,
 803:armwave.c     ****         printf("Error: Fatal X11: XShmAttached failed\n");
 804:armwave.c     ****         exit (-1);
 805:armwave.c     ****     }
 806:armwave.c     ****     
 807:armwave.c     ****     printf("%d bytes for XvImage, shmid %d, xv_port %d\n", g_yuv_image->data_size, g_yuv_shminfo.sh
 4916              		.loc 1 807 5 is_stmt 1 view .LVU1278
 4917 1778 041095E5 		ldr	r1, [r5, #4]	@ g_yuv_image, g_yuv_image
 4918 177c 003099E5 		ldr	r3, [r9]	@, g_xv_port
 4919 1780 042098E5 		ldr	r2, [r8, #4]	@, g_yuv_shminfo.shmid
 4920 1784 0C1091E5 		ldr	r1, [r1, #12]	@, g_yuv_image.69_43->data_size
 4921 1788 B0009FE5 		ldr	r0, .L244+32	@,
 4922 178c FEFFFFEB 		bl	printf		@
 4923              	.LVL287:
 808:armwave.c     ****     
 809:armwave.c     ****     // Create the GC
 810:armwave.c     ****     if(g_gc != NULL) {
 4924              		.loc 1 810 5 view .LVU1279
 4925              	@ armwave.c:810:     if(g_gc != NULL) {
 4926              		.loc 1 810 13 is_stmt 0 view .LVU1280
 4927 1790 081095E5 		ldr	r1, [r5, #8]	@ g_gc.71_47, g_gc
 4928              	@ armwave.c:810:     if(g_gc != NULL) {
 4929              		.loc 1 810 7 view .LVU1281
 4930 1794 000051E3 		cmp	r1, #0	@ g_gc.71_47,
 4931 1798 0100000A 		beq	.L230		@,
 811:armwave.c     ****         XFreeGC(g_dpy, g_gc);
 4932              		.loc 1 811 9 is_stmt 1 view .LVU1282
 4933 179c 000097E5 		ldr	r0, [r7]	@, g_dpy
 4934 17a0 FEFFFFEB 		bl	XFreeGC		@
 4935              	.LVL288:
 4936              	.L230:
 812:armwave.c     ****     }
 813:armwave.c     ****     
 814:armwave.c     ****     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4937              		.loc 1 814 5 view .LVU1283
 4938              	@ armwave.c:814:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4939              		.loc 1 814 12 is_stmt 0 view .LVU1284
 4940 17a4 000097E5 		ldr	r0, [r7]	@, g_dpy
 4941 17a8 2C308DE2 		add	r3, sp, #44	@,,
 4942 17ac 3020A0E3 		mov	r2, #48	@,
 4943 17b0 001095E5 		ldr	r1, [r5]	@, g_window
 4944 17b4 FEFFFFEB 		bl	XCreateGC		@
 4945              	.LVL289:
 4946              	@ armwave.c:814:     g_gc = XCreateGC(g_dpy, g_window, GCLineWidth | GCLineStyle, &gc_values);
 4947              		.loc 1 814 10 view .LVU1285
 4948 17b8 080085E5 		str	r0, [r5, #8]	@, g_gc
 815:armwave.c     ****     gc_values.line_width = 1;
 4949              		.loc 1 815 5 is_stmt 1 view .LVU1286
 816:armwave.c     ****     gc_values.cap_style = CapNotLast;
 4950              		.loc 1 816 5 view .LVU1287
 4951              	@ armwave.c:817: }
 817:armwave.c     **** }
 4952              		.loc 1 817 1 is_stmt 0 view .LVU1288
 4953 17bc 88D08DE2 		add	sp, sp, #136	@,,
 4954              		.cfi_remember_state
 4955              		.cfi_def_cfa_offset 32
 4956              		@ sp needed	@
 4957 17c0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 4958              	.LVL290:
 4959              	.L239:
 4960              		.cfi_restore_state
 754:armwave.c     ****         exit(-1);
 4961              		.loc 1 754 9 is_stmt 1 view .LVU1289
 4962 17c4 78009FE5 		ldr	r0, .L244+36	@,
 4963 17c8 FEFFFFEB 		bl	puts		@
 4964              	.LVL291:
 755:armwave.c     ****     }
 4965              		.loc 1 755 9 view .LVU1290
 4966 17cc 0000E0E3 		mvn	r0, #0	@,
 4967 17d0 FEFFFFEB 		bl	exit		@
 4968              	.LVL292:
 4969              	.L243:
 803:armwave.c     ****         exit (-1);
 4970              		.loc 1 803 9 view .LVU1291
 4971 17d4 6C009FE5 		ldr	r0, .L244+40	@,
 4972 17d8 FEFFFFEB 		bl	puts		@
 4973              	.LVL293:
 804:armwave.c     ****     }
 4974              		.loc 1 804 9 view .LVU1292
 4975 17dc 0000E0E3 		mvn	r0, #0	@,
 4976 17e0 FEFFFFEB 		bl	exit		@
 4977              	.LVL294:
 4978              	.L242:
 778:armwave.c     ****         exit(-1);
 4979              		.loc 1 778 9 view .LVU1293
 4980 17e4 011041E2 		sub	r1, r1, #1	@, p_num_adaptors.52_13,
 4981 17e8 5C009FE5 		ldr	r0, .L244+44	@,
 4982              	.LVL295:
 778:armwave.c     ****         exit(-1);
 4983              		.loc 1 778 9 is_stmt 0 view .LVU1294
 4984 17ec FEFFFFEB 		bl	printf		@
 4985              	.LVL296:
 779:armwave.c     ****     }
 4986              		.loc 1 779 9 is_stmt 1 view .LVU1295
 4987 17f0 0500A0E1 		mov	r0, r5	@, _19
 4988 17f4 FEFFFFEB 		bl	exit		@
 4989              	.LVL297:
 4990              	.L241:
 771:armwave.c     ****         exit(-1);
 4991              		.loc 1 771 9 view .LVU1296
 4992 17f8 0410A0E1 		mov	r1, r4	@, n
 4993 17fc 4C009FE5 		ldr	r0, .L244+48	@,
 4994              	.LVL298:
 771:armwave.c     ****         exit(-1);
 4995              		.loc 1 771 9 is_stmt 0 view .LVU1297
 4996 1800 FEFFFFEB 		bl	printf		@
 4997              	.LVL299:
 772:armwave.c     ****     }
 4998              		.loc 1 772 9 is_stmt 1 view .LVU1298
 4999 1804 0000E0E3 		mvn	r0, #0	@,
 5000 1808 FEFFFFEB 		bl	exit		@
 5001              	.LVL300:
 5002              	.L240:
 763:armwave.c     ****         exit(-1);
 5003              		.loc 1 763 9 view .LVU1299
 5004 180c 0010A0E1 		mov	r1, r0	@, ret
 5005 1810 3C009FE5 		ldr	r0, .L244+52	@,
 5006              	.LVL301:
 763:armwave.c     ****         exit(-1);
 5007              		.loc 1 763 9 is_stmt 0 view .LVU1300
 5008 1814 FEFFFFEB 		bl	printf		@
 5009              	.LVL302:
 764:armwave.c     ****     }
 5010              		.loc 1 764 9 is_stmt 1 view .LVU1301
 5011 1818 0000E0E3 		mvn	r0, #0	@,
 5012 181c FEFFFFEB 		bl	exit		@
 5013              	.LVL303:
 5014              	.L245:
 5015              		.align	2
 5016              	.L244:
 5017 1820 00000000 		.word	g_dpy
 5018 1824 00000000 		.word	g_xv_port
 5019 1828 00000000 		.word	.LANCHOR1
 5020 182c FC040000 		.word	.LC30
 5021 1830 00000000 		.word	g_yuv_shminfo
 5022 1834 59563132 		.word	842094169
 5023 1838 FF030000 		.word	1023
 5024 183c 10050000 		.word	.LC31
 5025 1840 60050000 		.word	.LC33
 5026 1844 BC030000 		.word	.LC26
 5027 1848 38050000 		.word	.LC32
 5028 184c CC040000 		.word	.LC29
 5029 1850 74040000 		.word	.LC28
 5030 1854 1C040000 		.word	.LC27
 5031              		.cfi_endproc
 5032              	.LFE81:
 5034              		.align	2
 5035              		.global	armwave_render_graticule
 5036              		.syntax unified
 5037              		.arm
 5038              		.fpu vfp
 5040              	armwave_render_graticule:
 5041              	.LFB82:
 818:armwave.c     **** 
 819:armwave.c     **** /*
 820:armwave.c     ****  * Render the graticule.
 821:armwave.c     ****  */
 822:armwave.c     **** void armwave_render_graticule()
 823:armwave.c     **** {
 5042              		.loc 1 823 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 24
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
 824:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5046              		.loc 1 824 5 view .LVU1303
 825:armwave.c     ****     float gr_size;
 5047              		.loc 1 825 5 view .LVU1304
 826:armwave.c     ****     m = g_armwave_state.frame_margin;
 5048              		.loc 1 826 5 view .LVU1305
 5049              	@ armwave.c:823: {
 823:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5050              		.loc 1 823 1 is_stmt 0 view .LVU1306
 5051 1858 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 5052              		.cfi_def_cfa_offset 36
 5053              		.cfi_offset 4, -36
 5054              		.cfi_offset 5, -32
 5055              		.cfi_offset 6, -28
 5056              		.cfi_offset 7, -24
 5057              		.cfi_offset 8, -20
 5058              		.cfi_offset 9, -16
 5059              		.cfi_offset 10, -12
 5060              		.cfi_offset 11, -8
 5061              		.cfi_offset 14, -4
 5062 185c 028B2DED 		vpush.64	{d8}	@
 5063              		.cfi_def_cfa_offset 44
 5064              		.cfi_offset 80, -44
 5065              		.cfi_offset 81, -40
 5066              	@ armwave.c:827:     w = g_canvas_dims.w - m;
 827:armwave.c     ****     w = g_canvas_dims.w - m;
 5067              		.loc 1 827 22 view .LVU1307
 5068 1860 9C329FE5 		ldr	r3, .L268+4	@ tmp177,
 5069              	@ armwave.c:826:     m = g_armwave_state.frame_margin;
 826:armwave.c     ****     m = g_armwave_state.frame_margin;
 5070              		.loc 1 826 7 view .LVU1308
 5071 1864 9C629FE5 		ldr	r6, .L268+8	@ tmp261,
 5072              	@ armwave.c:835:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 828:armwave.c     ****     h = g_canvas_dims.h - m;
 829:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 830:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 831:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 832:armwave.c     ****     ch = h - m;
 833:armwave.c     ****     cw = w - m;
 834:armwave.c     ****     
 835:armwave.c     ****     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5073              		.loc 1 835 5 view .LVU1309
 5074 1868 9C229FE5 		ldr	r2, .L268+12	@ tmp181,
 5075 186c 9C529FE5 		ldr	r5, .L268+16	@ tmp263,
 5076 1870 9C729FE5 		ldr	r7, .L268+20	@ tmp262,
 5077              	@ armwave.c:826:     m = g_armwave_state.frame_margin;
 826:armwave.c     ****     w = g_canvas_dims.w - m;
 5078              		.loc 1 826 7 view .LVU1310
 5079 1874 589096E5 		ldr	r9, [r6, #88]	@ m, g_armwave_state.frame_margin
 5080              	.LVL304:
 827:armwave.c     ****     w = g_canvas_dims.w - m;
 5081              		.loc 1 827 5 is_stmt 1 view .LVU1311
 5082              	@ armwave.c:827:     w = g_canvas_dims.w - m;
 827:armwave.c     ****     w = g_canvas_dims.w - m;
 5083              		.loc 1 827 7 is_stmt 0 view .LVU1312
 5084 1878 00C093E5 		ldr	ip, [r3]	@ g_canvas_dims.w, g_canvas_dims.w
 5085              	@ armwave.c:823: {
 823:armwave.c     ****     int w, h, i, j, m, p, q, ch, cw, n_sub, hhalf, vhalf;
 5086              		.loc 1 823 1 view .LVU1313
 5087 187c 2CD04DE2 		sub	sp, sp, #44	@,,
 5088              		.cfi_def_cfa_offset 88
 5089              	@ armwave.c:835:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5090              		.loc 1 835 5 view .LVU1314
 5091 1880 002092E5 		ldr	r2, [r2]	@, g_grat_colour.pixel
 5092              	@ armwave.c:827:     w = g_canvas_dims.w - m;
 827:armwave.c     ****     h = g_canvas_dims.h - m;
 5093              		.loc 1 827 7 view .LVU1315
 5094 1884 09C04CE0 		sub	ip, ip, r9	@ w, g_canvas_dims.w, m
 5095              	@ armwave.c:835:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5096              		.loc 1 835 5 view .LVU1316
 5097 1888 081095E5 		ldr	r1, [r5, #8]	@, g_gc
 5098 188c 000097E5 		ldr	r0, [r7]	@, g_dpy
 5099              	@ armwave.c:828:     h = g_canvas_dims.h - m;
 828:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5100              		.loc 1 828 22 view .LVU1317
 5101 1890 044093E5 		ldr	r4, [r3, #4]	@ _2, g_canvas_dims.h
 5102              	@ armwave.c:827:     w = g_canvas_dims.w - m;
 827:armwave.c     ****     h = g_canvas_dims.h - m;
 5103              		.loc 1 827 7 view .LVU1318
 5104 1894 1CC08DE5 		str	ip, [sp, #28]	@ w, %sfp
 5105              	.LVL305:
 828:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5106              		.loc 1 828 5 is_stmt 1 view .LVU1319
 5107              	@ armwave.c:829:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 829:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5108              		.loc 1 829 35 is_stmt 0 view .LVU1320
 5109 1898 1B8A96ED 		vldr.32	s16, [r6, #108]	@ _3, g_armwave_state.subdiv_frac
 5110              	@ armwave.c:835:     XSetForeground(g_dpy, g_gc, g_grat_colour.pixel);
 5111              		.loc 1 835 5 view .LVU1321
 5112 189c FEFFFFEB 		bl	XSetForeground		@
 5113              	.LVL306:
 5114              	@ armwave.c:837:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 836:armwave.c     ****     
 837:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5115              		.loc 1 837 23 view .LVU1322
 5116 18a0 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5117              	@ armwave.c:828:     h = g_canvas_dims.h - m;
 828:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5118              		.loc 1 828 7 view .LVU1323
 5119 18a4 092044E0 		sub	r2, r4, r9	@ h, _2, m
 5120              	@ armwave.c:837:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5121              		.loc 1 837 7 view .LVU1324
 5122 18a8 010A13E3 		tst	r3, #4096	@ _8,
 5123              	@ armwave.c:828:     h = g_canvas_dims.h - m;
 828:armwave.c     ****     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 5124              		.loc 1 828 7 view .LVU1325
 5125 18ac 14208DE5 		str	r2, [sp, #20]	@ h, %sfp
 5126              	.LVL307:
 829:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5127              		.loc 1 829 5 is_stmt 1 view .LVU1326
 830:armwave.c     ****     vhalf = g_armwave_state.n_vdiv / 2;
 5128              		.loc 1 830 5 view .LVU1327
 831:armwave.c     ****     ch = h - m;
 5129              		.loc 1 831 5 view .LVU1328
 832:armwave.c     ****     cw = w - m;
 5130              		.loc 1 832 5 view .LVU1329
 833:armwave.c     ****     
 5131              		.loc 1 833 5 view .LVU1330
 835:armwave.c     ****     
 5132              		.loc 1 835 5 view .LVU1331
 5133              		.loc 1 837 5 view .LVU1332
 5134              	@ armwave.c:837:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_FRAME) {
 5135              		.loc 1 837 7 is_stmt 0 view .LVU1333
 5136 18b0 6E00001A 		bne	.L266		@,
 5137              	.LVL308:
 5138              	.L247:
 838:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 839:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 840:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 841:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 842:armwave.c     ****     }
 843:armwave.c     ****     
 844:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5139              		.loc 1 844 5 is_stmt 1 view .LVU1334
 5140              	@ armwave.c:844:     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_DIVS) {
 5141              		.loc 1 844 7 is_stmt 0 view .LVU1335
 5142 18b4 020A13E3 		tst	r3, #8192	@ _8,
 5143 18b8 6900000A 		beq	.L246		@,
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5144              		.loc 1 845 9 is_stmt 1 view .LVU1336
 5145              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5146              		.loc 1 846 9 is_stmt 0 view .LVU1337
 5147 18bc 5C2096E5 		ldr	r2, [r6, #92]	@ tmp290, g_armwave_state.n_hdiv
 5148              	@ armwave.c:845:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5149              		.loc 1 845 17 view .LVU1338
 5150 18c0 077A9DED 		vldr.32	s14, [sp, #28]	@ int	@ w, %sfp
 5151              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 5152              		.loc 1 846 9 view .LVU1339
 5153 18c4 000052E3 		cmp	r2, #0	@ tmp290,
 5154              	@ armwave.c:845:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5155              		.loc 1 845 24 view .LVU1340
 5156 18c8 902A07EE 		vmov	s15, r2	@ int	@ tmp291,
 5157              	@ armwave.c:845:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5158              		.loc 1 845 17 view .LVU1341
 5159 18cc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, w
 5160              	@ armwave.c:845:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5161              		.loc 1 845 24 view .LVU1342
 5162 18d0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp217, tmp291
 5163              	@ armwave.c:845:         gr_size = (w / (float)g_armwave_state.n_hdiv);
 845:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 5164              		.loc 1 845 17 view .LVU1343
 5165 18d4 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp216, tmp217
 5166              	.LVL309:
 5167              		.loc 1 846 9 is_stmt 1 view .LVU1344
 5168              		.loc 1 846 9 is_stmt 0 view .LVU1345
 5169 18d8 440000DA 		ble	.L256		@,
 5170              	@ armwave.c:829:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 829:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5171              		.loc 1 829 18 view .LVU1346
 5172 18dc 877A9FED 		vldr.32	s14, .L268	@ tmp224,
 5173              	@ armwave.c:855:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 847:armwave.c     ****             if(i > 0) {
 848:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, p, m, p, h);
 849:armwave.c     ****             }
 850:armwave.c     ****             
 851:armwave.c     ****             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 852:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 853:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 854:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 855:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5174              		.loc 1 855 66 view .LVU1347
 5175 18e0 A44F84E0 		add	r4, r4, r4, lsr #31	@ tmp226, _2, _2,
 5176              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5177              		.loc 1 846 22 view .LVU1348
 5178 18e4 10908DE5 		str	r9, [sp, #16]	@ m, %sfp
 5179              	@ armwave.c:855:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5180              		.loc 1 855 66 view .LVU1349
 5181 18e8 C440A0E1 		asr	r4, r4, #1	@ tmp227, tmp226,
 5182              	@ armwave.c:855:                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m 
 5183              		.loc 1 855 21 view .LVU1350
 5184 18ec 082044E2 		sub	r2, r4, #8	@ _42, tmp227,
 5185 18f0 24208DE5 		str	r2, [sp, #36]	@ _42, %sfp
 5186 18f4 08B084E2 		add	fp, r4, #8	@ _43, tmp227,
 5187              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5188              		.loc 1 846 15 view .LVU1351
 5189 18f8 0080A0E3 		mov	r8, #0	@ i,
 5190 18fc 18908DE5 		str	r9, [sp, #24]	@ m, %sfp
 5191              	@ armwave.c:829:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 829:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5192              		.loc 1 829 18 view .LVU1352
 5193 1900 087AC7EE 		vdiv.f32	s15, s14, s16	@ tmp223, tmp224, _3
 5194              	@ armwave.c:829:     n_sub = 1.0f / g_armwave_state.subdiv_frac;
 829:armwave.c     ****     hhalf = g_armwave_state.n_hdiv / 2;
 5195              		.loc 1 829 11 view .LVU1353
 5196 1904 E77AFDEE 		vcvt.s32.f32	s15, s15	@ n_sub, tmp223
 5197 1908 90AA17EE 		vmov	r10, s15	@ int	@ n_sub, n_sub
 5198 190c 140000EA 		b	.L252		@
 5199              	.LVL310:
 5200              	.L257:
 5201              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5202              		.loc 1 846 62 view .LVU1354
 5203 1910 888A38EE 		vadd.f32	s16, s17, s16	@ tmp236, gr_size, _157
 5204              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5205              		.loc 1 846 9 view .LVU1355
 5206 1914 5C3096E5 		ldr	r3, [r6, #92]	@ g_armwave_state.n_hdiv, g_armwave_state.n_hdiv
 5207              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5208              		.loc 1 846 56 view .LVU1356
 5209 1918 018088E2 		add	r8, r8, #1	@ i, i,
 5210              	.LVL311:
 5211              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5212              		.loc 1 846 9 view .LVU1357
 5213 191c 080053E1 		cmp	r3, r8	@ g_armwave_state.n_hdiv, i
 5214              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5215              		.loc 1 846 62 view .LVU1358
 5216 1920 C87AFDEE 		vcvt.s32.f32	s15, s16	@ p, tmp236
 5217 1924 047ACDED 		vstr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5218              	.LVL312:
 5219              	@ armwave.c:846:         for(i = 0, p = m; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 846:armwave.c     ****             if(i > 0) {
 5220              		.loc 1 846 9 view .LVU1359
 5221 1928 2F0000DA 		ble	.L267		@,
 847:armwave.c     ****             if(i > 0) {
 5222              		.loc 1 847 13 is_stmt 1 view .LVU1360
 5223              	@ armwave.c:847:             if(i > 0) {
 847:armwave.c     ****             if(i > 0) {
 5224              		.loc 1 847 15 is_stmt 0 view .LVU1361
 5225 192c 000058E3 		cmp	r8, #0	@ i,
 5226 1930 0A0000DA 		ble	.L253		@,
 848:armwave.c     ****             }
 5227              		.loc 1 848 17 is_stmt 1 view .LVU1362
 5228 1934 14309DE5 		ldr	r3, [sp, #20]	@ h, %sfp
 5229 1938 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5230 193c 08308DE5 		str	r3, [sp, #8]	@ h,
 5231 1940 10309DE5 		ldr	r3, [sp, #16]	@ p, %sfp
 5232 1944 001095E5 		ldr	r1, [r5]	@, g_window
 5233 1948 04308DE5 		str	r3, [sp, #4]	@ p,
 5234 194c 18309DE5 		ldr	r3, [sp, #24]	@ m, %sfp
 5235 1950 000097E5 		ldr	r0, [r7]	@, g_dpy
 5236 1954 00308DE5 		str	r3, [sp]	@ m,
 5237 1958 10309DE5 		ldr	r3, [sp, #16]	@, %sfp
 5238 195c FEFFFFEB 		bl	XDrawLine		@
 5239              	.LVL313:
 5240              	.L253:
 848:armwave.c     ****             }
 5241              		.loc 1 848 17 is_stmt 0 view .LVU1363
 5242 1960 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5243              	.LVL314:
 5244              	.L252:
 851:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5245              		.loc 1 851 13 is_stmt 1 view .LVU1364
 5246 1964 047ADDED 		vldr.32	s15, [sp, #16]	@ int	@ p, %sfp
 5247              	@ armwave.c:851:             if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 851:armwave.c     ****                 for(j = 1; j < n_sub; j++) {
 5248              		.loc 1 851 15 is_stmt 0 view .LVU1365
 5249 1968 020913E3 		tst	r3, #32768	@ _8,
 5250 196c E78AB8EE 		vcvt.f32.s32	s16, s15	@ _157, p
 5251 1970 E6FFFF0A 		beq	.L257		@,
 5252              	.LVL315:
 5253              	@ armwave.c:852:                 for(j = 1; j < n_sub; j++) {
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5254              		.loc 1 852 17 view .LVU1366
 5255 1974 01005AE3 		cmp	r10, #1	@ n_sub,
 5256 1978 E4FFFFDA 		ble	.L257		@,
 5257              	@ armwave.c:852:                 for(j = 1; j < n_sub; j++) {
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5258              		.loc 1 852 23 view .LVU1367
 5259 197c 24909DE5 		ldr	r9, [sp, #36]	@ _42, %sfp
 5260 1980 0140A0E3 		mov	r4, #1	@ j,
 5261 1984 20808DE5 		str	r8, [sp, #32]	@ i, %sfp
 5262              	.LVL316:
 5263              	.L258:
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5264              		.loc 1 853 21 is_stmt 1 discriminator 3 view .LVU1368
 5265              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5266              		.loc 1 853 38 is_stmt 0 discriminator 3 view .LVU1369
 5267 1988 1B7AD6ED 		vldr.32	s15, [r6, #108]	@ g_armwave_state.subdiv_frac, g_armwave_state.subdiv_frac
 5268              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5269              		.loc 1 853 68 discriminator 3 view .LVU1370
 5270 198c 104A07EE 		vmov	s14, r4	@ int	@ j, j
 5271              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5272              		.loc 1 853 27 discriminator 3 view .LVU1371
 5273 1990 486AF0EE 		vmov.f32	s13, s16	@ tmp244, _157
 5274              	@ armwave.c:854:                     printf("%3d, %3d\n", q, p);
 854:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5275              		.loc 1 854 21 discriminator 3 view .LVU1372
 5276 1994 10209DE5 		ldr	r2, [sp, #16]	@, %sfp
 5277              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5278              		.loc 1 853 38 discriminator 3 view .LVU1373
 5279 1998 A77A68EE 		vmul.f32	s15, s17, s15	@ tmp240, gr_size, g_armwave_state.subdiv_frac
 5280              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5281              		.loc 1 853 68 discriminator 3 view .LVU1374
 5282 199c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, j
 5283              	@ armwave.c:854:                     printf("%3d, %3d\n", q, p);
 854:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5284              		.loc 1 854 21 discriminator 3 view .LVU1375
 5285 19a0 70019FE5 		ldr	r0, .L268+24	@,
 5286              	@ armwave.c:852:                 for(j = 1; j < n_sub; j++) {
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5287              		.loc 1 852 40 discriminator 3 view .LVU1376
 5288 19a4 014084E2 		add	r4, r4, #1	@ j, j,
 5289              	.LVL317:
 5290              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5291              		.loc 1 853 27 discriminator 3 view .LVU1377
 5292 19a8 876A47EE 		vmla.f32	s13, s15, s14	@ tmp244, tmp240, tmp242
 5293              	@ armwave.c:853:                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 853:armwave.c     ****                     printf("%3d, %3d\n", q, p);
 5294              		.loc 1 853 23 discriminator 3 view .LVU1378
 5295 19ac E67AFDEE 		vcvt.s32.f32	s15, s13	@ q, tmp244
 5296 19b0 908A17EE 		vmov	r8, s15	@ int	@ q, q
 5297              	.LVL318:
 854:armwave.c     ****                     XDrawLine(g_dpy, g_window, g_gc, q, ((m + h) / 2) - 8, q, ((m + h) / 2) + 8);
 5298              		.loc 1 854 21 is_stmt 1 discriminator 3 view .LVU1379
 5299 19b4 901A17EE 		vmov	r1, s15	@ int	@, q
 5300 19b8 FEFFFFEB 		bl	printf		@
 5301              	.LVL319:
 5302              		.loc 1 855 21 discriminator 3 view .LVU1380
 5303 19bc 08B08DE5 		str	fp, [sp, #8]	@ _43,
 5304 19c0 04808DE5 		str	r8, [sp, #4]	@ q,
 5305 19c4 0830A0E1 		mov	r3, r8	@, q
 5306 19c8 00908DE5 		str	r9, [sp]	@ _42,
 5307 19cc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5308 19d0 001095E5 		ldr	r1, [r5]	@, g_window
 5309 19d4 000097E5 		ldr	r0, [r7]	@, g_dpy
 5310 19d8 FEFFFFEB 		bl	XDrawLine		@
 5311              	.LVL320:
 5312              	@ armwave.c:852:                 for(j = 1; j < n_sub; j++) {
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5313              		.loc 1 852 17 is_stmt 0 discriminator 3 view .LVU1381
 5314 19dc 04005AE1 		cmp	r10, r4	@ n_sub, j
 5315 19e0 E8FFFF1A 		bne	.L258		@,
 5316 19e4 20809DE5 		ldr	r8, [sp, #32]	@ i, %sfp
 5317              	.LVL321:
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5318              		.loc 1 852 17 discriminator 3 view .LVU1382
 5319 19e8 C8FFFFEA 		b	.L257		@
 5320              	.LVL322:
 5321              	.L267:
 852:armwave.c     ****                     q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 5322              		.loc 1 852 17 discriminator 3 view .LVU1383
 5323 19ec 18909DE5 		ldr	r9, [sp, #24]	@ m, %sfp
 5324              	.LVL323:
 5325              	.L256:
 856:armwave.c     ****                 }
 857:armwave.c     ****             }
 858:armwave.c     ****         }
 859:armwave.c     ****         
 860:armwave.c     ****         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5326              		.loc 1 860 9 is_stmt 1 view .LVU1384
 5327              	@ armwave.c:860:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 5328              		.loc 1 860 22 is_stmt 0 view .LVU1385
 5329 19f0 057ADDED 		vldr.32	s15, [sp, #20]	@ int	@ h, %sfp
 5330              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5331              		.loc 1 861 9 view .LVU1386
 5332 19f4 603096E5 		ldr	r3, [r6, #96]	@ tmp295, g_armwave_state.n_vdiv
 5333 19f8 010053E3 		cmp	r3, #1	@ tmp295,
 5334              	@ armwave.c:860:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 860:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5335              		.loc 1 860 22 view .LVU1387
 5336 19fc E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp219, h
 5337              	@ armwave.c:860:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 860:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5338              		.loc 1 860 24 view .LVU1388
 5339 1a00 187AD6ED 		vldr.32	s15, [r6, #96]	@ int	@ tmp294, g_armwave_state.n_vdiv
 5340              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5341              		.loc 1 861 15 view .LVU1389
 5342 1a04 0140A0C3 		movgt	r4, #1	@ i,
 5343 1a08 1C809DC5 		ldrgt	r8, [sp, #28]	@ w, %sfp
 5344              	@ armwave.c:860:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 860:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5345              		.loc 1 860 24 view .LVU1390
 5346 1a0c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, tmp294
 5347              	@ armwave.c:860:         gr_size = (h / (float)g_armwave_state.n_vdiv);
 860:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5348              		.loc 1 860 17 view .LVU1391
 5349 1a10 278AC7EE 		vdiv.f32	s17, s14, s15	@ gr_size, tmp219, tmp220
 5350              	.LVL324:
 5351              		.loc 1 861 9 is_stmt 1 view .LVU1392
 5352              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5353              		.loc 1 861 26 is_stmt 0 view .LVU1393
 5354 1a14 909A07EE 		vmov	s15, r9	@ int	@ m, m
 5355 1a18 E78AB8EE 		vcvt.f32.s32	s16, s15	@ tmp221, m
 5356 1a1c 288A38EE 		vadd.f32	s16, s16, s17	@ tmp222, tmp221, gr_size
 5357              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5358              		.loc 1 861 22 view .LVU1394
 5359 1a20 C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, tmp222
 5360              	.LVL325:
 5361              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 5362              		.loc 1 861 9 view .LVU1395
 5363 1a24 0E0000DA 		ble	.L246		@,
 5364              	.LVL326:
 5365              	.L250:
 862:armwave.c     ****             XDrawLine(g_dpy, g_window, g_gc, m, p, w, p);
 5366              		.loc 1 862 13 is_stmt 1 discriminator 3 view .LVU1396
 5367 1a28 028A8DED 		vstr.32	s16, [sp, #8]	@ int	@ p,
 5368 1a2c 008A8DED 		vstr.32	s16, [sp]	@ int	@ p,
 5369 1a30 0930A0E1 		mov	r3, r9	@, m
 5370 1a34 04808DE5 		str	r8, [sp, #4]	@ w,
 5371 1a38 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5372 1a3c 001095E5 		ldr	r1, [r5]	@, g_window
 5373 1a40 000097E5 		ldr	r0, [r7]	@, g_dpy
 5374 1a44 FEFFFFEB 		bl	XDrawLine		@
 5375              	.LVL327:
 5376              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5377              		.loc 1 861 72 is_stmt 0 discriminator 3 view .LVU1397
 5378 1a48 C88AB8EE 		vcvt.f32.s32	s16, s16	@ tmp258, p
 5379              	.LVL328:
 5380              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5381              		.loc 1 861 9 discriminator 3 view .LVU1398
 5382 1a4c 603096E5 		ldr	r3, [r6, #96]	@ g_armwave_state.n_vdiv, g_armwave_state.n_vdiv
 5383              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5384              		.loc 1 861 66 discriminator 3 view .LVU1399
 5385 1a50 014084E2 		add	r4, r4, #1	@ i, i,
 5386              	.LVL329:
 5387              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5388              		.loc 1 861 9 discriminator 3 view .LVU1400
 5389 1a54 040053E1 		cmp	r3, r4	@ g_armwave_state.n_vdiv, i
 5390              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5391              		.loc 1 861 72 discriminator 3 view .LVU1401
 5392 1a58 288A38EE 		vadd.f32	s16, s16, s17	@ _56, tmp258, gr_size
 5393 1a5c C88ABDEE 		vcvt.s32.f32	s16, s16	@ p, _56
 5394              	.LVL330:
 5395              	@ armwave.c:861:         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size)
 861:armwave.c     ****         for(i = 1, p = m + gr_size; i < g_armwave_state.n_vdiv; i++, p += gr_size) {
 5396              		.loc 1 861 9 discriminator 3 view .LVU1402
 5397 1a60 F0FFFFCA 		bgt	.L250		@,
 5398              	.LVL331:
 5399              	.L246:
 5400              	@ armwave.c:879: }
 863:armwave.c     ****         }
 864:armwave.c     ****     }
 865:armwave.c     ****     
 866:armwave.c     ****     /*
 867:armwave.c     ****     if(g_armwave_state.flags & AM_FLAG_GRAT_RENDER_SUBDIV) {
 868:armwave.c     ****         gr_size = (w / (float)g_armwave_state.n_hdiv);
 869:armwave.c     ****         
 870:armwave.c     ****         for(i = 0, p = m + gr_size; i < g_armwave_state.n_hdiv; i++, p += gr_size) {
 871:armwave.c     ****             for(j = 0; j < n_sub; j++) {
 872:armwave.c     ****                 q = p + (gr_size * g_armwave_state.subdiv_frac * j);
 873:armwave.c     ****                 printf("%3d, %3d\n", q, p);
 874:armwave.c     ****                 XDrawLine(g_dpy, g_window, g_gc, q, m + (ch / 2) - 16, q, m + (ch / 2) + 16);
 875:armwave.c     ****             }
 876:armwave.c     ****         }
 877:armwave.c     ****     }
 878:armwave.c     ****     */
 879:armwave.c     **** }
 5401              		.loc 1 879 1 view .LVU1403
 5402 1a64 2CD08DE2 		add	sp, sp, #44	@,,
 5403              		.cfi_remember_state
 5404              		.cfi_def_cfa_offset 44
 5405              		@ sp needed	@
 5406 1a68 028BBDEC 		vldm	sp!, {d8}	@
 5407              		.cfi_restore 80
 5408              		.cfi_restore 81
 5409              		.cfi_def_cfa_offset 36
 5410 1a6c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 5411              	.LVL332:
 5412              	.L266:
 5413              		.cfi_restore_state
 838:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5414              		.loc 1 838 9 is_stmt 1 view .LVU1404
 5415 1a70 1C809DE5 		ldr	r8, [sp, #28]	@ w, %sfp
 5416              	@ armwave.c:839:         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 839:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5417              		.loc 1 839 9 is_stmt 0 view .LVU1405
 5418 1a74 09A044E0 		sub	r10, r4, r9	@ h, _2, m
 5419              	@ armwave.c:838:         XDrawLine(g_dpy, g_window, g_gc, m, m, w, m);
 838:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5420              		.loc 1 838 9 view .LVU1406
 5421 1a78 0930A0E1 		mov	r3, r9	@, m
 5422 1a7c 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5423              	.LVL333:
 838:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, h, w, h);
 5424              		.loc 1 838 9 view .LVU1407
 5425 1a80 001095E5 		ldr	r1, [r5]	@, g_window
 5426 1a84 08908DE5 		str	r9, [sp, #8]	@ m,
 5427 1a88 04808DE5 		str	r8, [sp, #4]	@ w,
 5428 1a8c 00908DE5 		str	r9, [sp]	@ m,
 5429 1a90 000097E5 		ldr	r0, [r7]	@, g_dpy
 5430 1a94 FEFFFFEB 		bl	XDrawLine		@
 5431              	.LVL334:
 839:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, m, m, m, h);
 5432              		.loc 1 839 9 is_stmt 1 view .LVU1408
 5433 1a98 0A30A0E1 		mov	r3, r10	@ h, h
 5434 1a9c 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5435 1aa0 08018DE8 		stm	sp, {r3, r8}	@,,
 5436 1aa4 001095E5 		ldr	r1, [r5]	@, g_window
 5437 1aa8 0930A0E1 		mov	r3, r9	@, m
 5438 1aac 08A08DE5 		str	r10, [sp, #8]	@ h,
 5439 1ab0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5440 1ab4 FEFFFFEB 		bl	XDrawLine		@
 5441              	.LVL335:
 840:armwave.c     ****         XDrawLine(g_dpy, g_window, g_gc, w, m, w, h);
 5442              		.loc 1 840 9 view .LVU1409
 5443 1ab8 0930A0E1 		mov	r3, r9	@, m
 5444 1abc 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5445 1ac0 001095E5 		ldr	r1, [r5]	@, g_window
 5446 1ac4 08A08DE5 		str	r10, [sp, #8]	@ h,
 5447 1ac8 04908DE5 		str	r9, [sp, #4]	@ m,
 5448 1acc 00908DE5 		str	r9, [sp]	@ m,
 5449 1ad0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5450 1ad4 FEFFFFEB 		bl	XDrawLine		@
 5451              	.LVL336:
 841:armwave.c     ****     }
 5452              		.loc 1 841 9 view .LVU1410
 5453 1ad8 0830A0E1 		mov	r3, r8	@, w
 5454 1adc 08A08DE5 		str	r10, [sp, #8]	@ h,
 5455 1ae0 04808DE5 		str	r8, [sp, #4]	@ w,
 5456 1ae4 00908DE5 		str	r9, [sp]	@ m,
 5457 1ae8 082095E5 		ldr	r2, [r5, #8]	@, g_gc
 5458 1aec 001095E5 		ldr	r1, [r5]	@, g_window
 5459 1af0 000097E5 		ldr	r0, [r7]	@, g_dpy
 5460 1af4 FEFFFFEB 		bl	XDrawLine		@
 5461              	.LVL337:
 5462 1af8 003096E5 		ldr	r3, [r6]	@ _8, g_armwave_state.flags
 5463 1afc 6CFFFFEA 		b	.L247		@
 5464              	.L269:
 5465              		.align	2
 5466              	.L268:
 5467 1b00 0000803F 		.word	1065353216
 5468 1b04 00000000 		.word	g_canvas_dims
 5469 1b08 00000000 		.word	g_armwave_state
 5470 1b0c 00000000 		.word	g_grat_colour
 5471 1b10 00000000 		.word	.LANCHOR1
 5472 1b14 00000000 		.word	g_dpy
 5473 1b18 8C050000 		.word	.LC34
 5474              		.cfi_endproc
 5475              	.LFE82:
 5477              		.global	__aeabi_idivmod
 5478              		.align	2
 5479              		.global	armwave_render_frame_x11
 5480              		.syntax unified
 5481              		.arm
 5482              		.fpu vfp
 5484              	armwave_render_frame_x11:
 5485              	.LFB83:
 880:armwave.c     **** 
 881:armwave.c     **** /*
 882:armwave.c     ****  * Run one rendering tick.
 883:armwave.c     ****  */
 884:armwave.c     **** void armwave_render_frame_x11()
 885:armwave.c     **** {
 5486              		.loc 1 885 1 view -0
 5487              		.cfi_startproc
 5488              		@ args = 0, pretend = 0, frame = 16
 5489              		@ frame_needed = 0, uses_anonymous_args = 0
 886:armwave.c     ****     Window _dw;
 5490              		.loc 1 886 5 view .LVU1412
 887:armwave.c     ****     int _d, _w, _h;
 5491              		.loc 1 887 5 view .LVU1413
 888:armwave.c     ****     int m = g_armwave_state.frame_margin; 
 5492              		.loc 1 888 5 view .LVU1414
 5493              	@ armwave.c:885: {
 885:armwave.c     ****     Window _dw;
 5494              		.loc 1 885 1 is_stmt 0 view .LVU1415
 5495 1b1c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 5496              		.cfi_def_cfa_offset 32
 5497              		.cfi_offset 4, -32
 5498              		.cfi_offset 5, -28
 5499              		.cfi_offset 6, -24
 5500              		.cfi_offset 7, -20
 5501              		.cfi_offset 8, -16
 5502              		.cfi_offset 9, -12
 5503              		.cfi_offset 10, -8
 5504              		.cfi_offset 14, -4
 5505 1b20 38D04DE2 		sub	sp, sp, #56	@,,
 5506              		.cfi_def_cfa_offset 88
 5507              	@ armwave.c:890:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 889:armwave.c     ****     
 890:armwave.c     ****     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5508              		.loc 1 890 5 view .LVU1416
 5509 1b24 CC319FE5 		ldr	r3, .L281	@ tmp167,
 5510 1b28 CC519FE5 		ldr	r5, .L281+4	@ tmp264,
 5511              	@ armwave.c:888:     int m = g_armwave_state.frame_margin; 
 888:armwave.c     ****     
 5512              		.loc 1 888 9 view .LVU1417
 5513 1b2c CC419FE5 		ldr	r4, .L281+8	@ tmp263,
 5514              	@ armwave.c:890:     armwave_set_wave_pointer_as_testbuf(g_frame_num % g_n_test_waves);
 5515              		.loc 1 890 5 view .LVU1418
 5516 1b30 001093E5 		ldr	r1, [r3]	@, g_n_test_waves
 5517 1b34 0C0095E5 		ldr	r0, [r5, #12]	@, g_frame_num
 5518 1b38 FEFFFFEB 		bl	__aeabi_idivmod		@
 5519              	.LVL338:
 5520              	.LBB130:
 5521              	.LBB131:
 5522              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5523              		.loc 1 495 7 view .LVU1419
 5524 1b3c 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 5525              	.LBE131:
 5526              	.LBE130:
 5527              	@ armwave.c:888:     int m = g_armwave_state.frame_margin; 
 888:armwave.c     ****     
 5528              		.loc 1 888 9 view .LVU1420
 5529 1b40 587094E5 		ldr	r7, [r4, #88]	@ m, g_armwave_state.frame_margin
 5530              	.LVL339:
 5531              		.loc 1 890 5 is_stmt 1 view .LVU1421
 5532              	.LBB134:
 5533              	.LBI130:
 493:armwave.c     **** {
 5534              		.loc 1 493 6 view .LVU1422
 5535              	.LBB132:
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5536              		.loc 1 495 5 view .LVU1423
 5537              	@ armwave.c:495:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 495:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 5538              		.loc 1 495 7 is_stmt 0 view .LVU1424
 5539 1b44 010053E1 		cmp	r3, r1	@ g_armwave_state.test_wave_buffer_nsets, tmp175
 5540 1b48 6500003A 		bcc	.L280		@,
 500:armwave.c     **** }
 5541              		.loc 1 500 5 is_stmt 1 view .LVU1425
 5542              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5543              		.loc 1 500 111 is_stmt 0 view .LVU1426
 5544 1b4c 1C2094E5 		ldr	r2, [r4, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 5545              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5546              		.loc 1 500 68 view .LVU1427
 5547 1b50 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 5548 1b54 923121E0 		mla	r1, r2, r1, r3	@ tmp184, g_armwave_state.test_wave_buffer_stride, tmp175, g_armwave_state.test
 5549              	@ armwave.c:500:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 500:armwave.c     **** }
 5550              		.loc 1 500 33 view .LVU1428
 5551 1b58 141084E5 		str	r1, [r4, #20]	@ tmp184, g_armwave_state.wave_buffer
 5552              	.L272:
 500:armwave.c     **** }
 5553              		.loc 1 500 33 view .LVU1429
 5554              	.LBE132:
 5555              	.LBE134:
 891:armwave.c     ****     armwave_generate();
 5556              		.loc 1 891 5 is_stmt 1 view .LVU1430
 5557              	.LBB135:
 5558              	.LBI135:
 381:armwave.c     **** {
 5559              		.loc 1 381 6 view .LVU1431
 5560              	.LBB136:
 383:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 5561              		.loc 1 383 5 view .LVU1432
 384:armwave.c     **** 
 5562              		.loc 1 384 5 view .LVU1433
 5563              	@ armwave.c:387:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 387:armwave.c     **** 
 5564              		.loc 1 387 5 is_stmt 0 view .LVU1434
 5565 1b5c 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 5566 1b60 0010A0E3 		mov	r1, #0	@,
 5567 1b64 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 5568              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 5569              		.loc 1 384 14 view .LVU1435
 5570 1b68 4CA094E5 		ldr	r10, [r4, #76]	@ xx_rem, g_armwave_state.wave_length
 5571              	.LVL340:
 387:armwave.c     **** 
 5572              		.loc 1 387 5 is_stmt 1 view .LVU1436
 5573 1b6c FEFFFFEB 		bl	memset		@
 5574              	.LVL341:
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5575              		.loc 1 390 5 view .LVU1437
 5576              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5577              		.loc 1 390 68 is_stmt 0 view .LVU1438
 5578 1b70 446094E5 		ldr	r6, [r4, #68]	@ _64, g_armwave_state.slice_height
 5579              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5580              		.loc 1 390 51 view .LVU1439
 5581 1b74 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5582 1b78 0610A0E1 		mov	r1, r6	@, _64
 5583 1b7c FEFFFFEB 		bl	__aeabi_idiv		@
 5584              	.LVL342:
 5585              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5586              		.loc 1 390 5 view .LVU1440
 5587 1b80 000050E3 		cmp	r0, #0	@ tmp199
 5588 1b84 5900000A 		beq	.L277		@,
 5589              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 5590              		.loc 1 384 52 view .LVU1441
 5591 1b88 0080A0E3 		mov	r8, #0	@ ypos,
 5592              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5593              		.loc 1 390 12 view .LVU1442
 5594 1b8c 0890A0E1 		mov	r9, r8	@ yy, ypos
 5595              	.LVL343:
 5596              	.L274:
 391:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 5597              		.loc 1 391 9 is_stmt 1 view .LVU1443
 5598 1b90 990600E0 		mul	r0, r9, r6	@, yy, tmp1
 5599 1b94 0610A0E1 		mov	r1, r6	@, _64
 5600 1b98 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5601              	.LVL344:
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5602              		.loc 1 392 9 view .LVU1444
 5603              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5604              		.loc 1 392 34 is_stmt 0 view .LVU1445
 5605 1b9c 446094E5 		ldr	r6, [r4, #68]	@ _64, g_armwave_state.slice_height
 5606              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5607              		.loc 1 390 51 view .LVU1446
 5608 1ba0 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.wave_length
 5609 1ba4 0610A0E1 		mov	r1, r6	@, _64
 5610 1ba8 FEFFFFEB 		bl	__aeabi_idiv		@
 5611              	.LVL345:
 5612              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5613              		.loc 1 390 86 view .LVU1447
 5614 1bac 019089E2 		add	r9, r9, #1	@ yy, yy,
 5615              	.LVL346:
 5616              	@ armwave.c:392:         xx_rem -= g_armwave_state.slice_height;
 392:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 5617              		.loc 1 392 16 view .LVU1448
 5618 1bb0 06A04AE0 		sub	r10, r10, r6	@ xx_rem, xx_rem, _64
 5619              	.LVL347:
 393:armwave.c     ****     }
 5620              		.loc 1 393 9 is_stmt 1 view .LVU1449
 5621              	@ armwave.c:393:         ypos += g_armwave_state.slice_height;   
 393:armwave.c     ****     }
 5622              		.loc 1 393 14 is_stmt 0 view .LVU1450
 5623 1bb4 068088E0 		add	r8, r8, r6	@ ypos, ypos, _64
 5624              	.LVL348:
 5625              	@ armwave.c:390:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 390:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 5626              		.loc 1 390 5 view .LVU1451
 5627 1bb8 000059E1 		cmp	r9, r0	@ yy,
 5628 1bbc F3FFFF3A 		bcc	.L274		@,
 5629              	.LVL349:
 5630              	.L273:
 397:armwave.c     **** }
 5631              		.loc 1 397 5 is_stmt 1 view .LVU1452
 5632 1bc0 0A10A0E1 		mov	r1, r10	@, xx_rem
 5633 1bc4 0800A0E1 		mov	r0, r8	@, ypos
 5634              	.LBE136:
 5635              	.LBE135:
 5636              	@ armwave.c:894:     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 892:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 893:armwave.c     ****     
 894:armwave.c     ****     XGetGeometry(g_dpy, g_window, &_dw, &_d, &_d, &_w, &_h, &_d, &_d);
 5637              		.loc 1 894 5 is_stmt 0 view .LVU1453
 5638 1bc8 34619FE5 		ldr	r6, .L281+12	@ tmp265,
 5639              	.LBB139:
 5640              	.LBB137:
 5641              	@ armwave.c:397:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 397:armwave.c     **** }
 5642              		.loc 1 397 5 view .LVU1454
 5643 1bcc FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 5644              	.LVL350:
 397:armwave.c     **** }
 5645              		.loc 1 397 5 view .LVU1455
 5646              	.LBE137:
 5647              	.LBE139:
 892:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5648              		.loc 1 892 5 is_stmt 1 view .LVU1456
 5649              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 895:armwave.c     ****     g_canvas_dims.w = _w;
 896:armwave.c     ****     g_canvas_dims.h = _h;
 897:armwave.c     ****     
 898:armwave.c     ****     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas_dims.h) {
 5650              		.loc 1 898 26 is_stmt 0 view .LVU1457
 5651 1bd0 30819FE5 		ldr	r8, .L281+16	@ tmp266,
 5652              	@ armwave.c:892:     fill_xvimage_scaled(g_yuv_image);
 892:armwave.c     ****     fill_xvimage_scaled(g_yuv_image);
 5653              		.loc 1 892 5 view .LVU1458
 5654 1bd4 040095E5 		ldr	r0, [r5, #4]	@, g_yuv_image
 5655 1bd8 FEFFFFEB 		bl	fill_xvimage_scaled		@
 5656              	.LVL351:
 894:armwave.c     ****     g_canvas_dims.w = _w;
 5657              		.loc 1 894 5 is_stmt 1 view .LVU1459
 5658 1bdc 2C308DE2 		add	r3, sp, #44	@ tmp209,,
 5659 1be0 34108DE2 		add	r1, sp, #52	@ tmp217,,
 5660 1be4 30208DE2 		add	r2, sp, #48	@ tmp218,,
 5661 1be8 000096E5 		ldr	r0, [r6]	@, g_dpy
 5662 1bec 10308DE5 		str	r3, [sp, #16]	@ tmp209,
 5663 1bf0 0C308DE5 		str	r3, [sp, #12]	@ tmp209,
 5664 1bf4 00308DE5 		str	r3, [sp]	@ tmp209,
 5665 1bf8 08108DE5 		str	r1, [sp, #8]	@ tmp217,
 5666 1bfc 04208DE5 		str	r2, [sp, #4]	@ tmp218,
 5667 1c00 001095E5 		ldr	r1, [r5]	@, g_window
 5668 1c04 28208DE2 		add	r2, sp, #40	@,,
 5669 1c08 FEFFFFEB 		bl	XGetGeometry		@
 5670              	.LVL352:
 895:armwave.c     ****     g_canvas_dims.w = _w;
 5671              		.loc 1 895 5 view .LVU1460
 5672              	@ armwave.c:895:     g_canvas_dims.w = _w;
 895:armwave.c     ****     g_canvas_dims.w = _w;
 5673              		.loc 1 895 21 is_stmt 0 view .LVU1461
 5674 1c0c F8409FE5 		ldr	r4, .L281+20	@ tmp262,
 5675 1c10 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_75, _w
 5676              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5677              		.loc 1 898 7 view .LVU1462
 5678 1c14 002098E5 		ldr	r2, [r8]	@ g_canvas_dims_last.w, g_canvas_dims_last.w
 5679              	@ armwave.c:896:     g_canvas_dims.h = _h;
 896:armwave.c     ****     
 5680              		.loc 1 896 21 view .LVU1463
 5681 1c18 34309DE5 		ldr	r3, [sp, #52]	@ _h.105_8, _h
 5682              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5683              		.loc 1 898 7 view .LVU1464
 5684 1c1c 020051E1 		cmp	r1, r2	@ pretmp_75, g_canvas_dims_last.w
 5685              	@ armwave.c:896:     g_canvas_dims.h = _h;
 896:armwave.c     ****     
 5686              		.loc 1 896 21 view .LVU1465
 5687 1c20 0A0084E8 		stm	r4, {r1, r3}	@ tmp262,,
 5688              		.loc 1 898 5 is_stmt 1 view .LVU1466
 5689              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5690              		.loc 1 898 7 is_stmt 0 view .LVU1467
 5691 1c24 0200001A 		bne	.L275		@,
 5692              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5693              		.loc 1 898 69 discriminator 1 view .LVU1468
 5694 1c28 042098E5 		ldr	r2, [r8, #4]	@ pretmp_102, g_canvas_dims_last.h
 5695              	@ armwave.c:898:     if(g_canvas_dims_last.w != g_canvas_dims.w || g_canvas_dims_last.h != g_canvas
 5696              		.loc 1 898 48 discriminator 1 view .LVU1469
 5697 1c2c 020053E1 		cmp	r3, r2	@ _h.105_8, pretmp_102
 5698 1c30 0400000A 		beq	.L276		@,
 5699              	.L275:
 899:armwave.c     ****         XClearWindow(g_dpy, g_window);
 5700              		.loc 1 899 9 is_stmt 1 view .LVU1470
 5701 1c34 001095E5 		ldr	r1, [r5]	@, g_window
 5702 1c38 000096E5 		ldr	r0, [r6]	@, g_dpy
 5703 1c3c FEFFFFEB 		bl	XClearWindow		@
 5704              	.LVL353:
 5705 1c40 30109DE5 		ldr	r1, [sp, #48]	@ pretmp_75, _w
 5706 1c44 34209DE5 		ldr	r2, [sp, #52]	@ pretmp_102, _h
 5707              	.L276:
 900:armwave.c     ****     }
 901:armwave.c     ****     
 902:armwave.c     ****     printf("Canvas dims: %d x %d (margin: %d)\n", _w, _h, m);
 5708              		.loc 1 902 5 view .LVU1471
 5709 1c48 0730A0E1 		mov	r3, r7	@, m
 5710 1c4c BC009FE5 		ldr	r0, .L281+24	@,
 5711 1c50 FEFFFFEB 		bl	printf		@
 5712              	.LVL354:
 903:armwave.c     **** 
 904:armwave.c     ****     g_canvas_dims_last = g_canvas_dims;
 5713              		.loc 1 904 5 view .LVU1472
 5714              	@ armwave.c:908:         m, m, _w - (m * 2), _h - (m * 2), True);
 905:armwave.c     ****     
 906:armwave.c     ****     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 907:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 908:armwave.c     ****         m, m, _w - (m * 2), _h - (m * 2), True);
 5715              		.loc 1 908 18 is_stmt 0 view .LVU1473
 5716 1c54 D003CDE1 		ldrd	r0, [sp, #48]	@,,
 5717              	@ armwave.c:908:         m, m, _w - (m * 2), _h - (m * 2), True);
 5718              		.loc 1 908 23 view .LVU1474
 5719 1c58 873F67E0 		rsb	r3, r7, r7, lsl #31	@ tmp237, m, m,
 5720              	@ armwave.c:906:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 906:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5721              		.loc 1 906 5 view .LVU1475
 5722 1c5c 042095E5 		ldr	r2, [r5, #4]	@ g_yuv_image.115_20, g_yuv_image
 5723              	@ armwave.c:908:         m, m, _w - (m * 2), _h - (m * 2), True);
 5724              		.loc 1 908 23 view .LVU1476
 5725 1c60 8330A0E1 		lsl	r3, r3, #1	@ tmp238, tmp237,
 5726              	@ armwave.c:908:         m, m, _w - (m * 2), _h - (m * 2), True);
 5727              		.loc 1 908 32 view .LVU1477
 5728 1c64 011083E0 		add	r1, r3, r1	@ tmp248, tmp238, _h
 5729              	@ armwave.c:908:         m, m, _w - (m * 2), _h - (m * 2), True);
 5730              		.loc 1 908 18 view .LVU1478
 5731 1c68 003083E0 		add	r3, r3, r0	@ tmp250, tmp238, _w
 5732              	@ armwave.c:906:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 906:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5733              		.loc 1 906 5 view .LVU1479
 5734 1c6c 0100A0E3 		mov	r0, #1	@ tmp247,
 5735 1c70 18708DE5 		str	r7, [sp, #24]	@ m,
 5736 1c74 14708DE5 		str	r7, [sp, #20]	@ m,
 5737 1c78 20108DE5 		str	r1, [sp, #32]	@ tmp248,
 5738 1c7c 1C308DE5 		str	r3, [sp, #28]	@ tmp250,
 5739 1c80 24008DE5 		str	r0, [sp, #36]	@ tmp247,
 5740 1c84 083092E5 		ldr	r3, [r2, #8]	@ g_yuv_image.115_20->height, g_yuv_image.115_20->height
 5741              	@ armwave.c:904:     g_canvas_dims_last = g_canvas_dims;
 904:armwave.c     ****     
 5742              		.loc 1 904 24 view .LVU1480
 5743 1c88 030094E8 		ldm	r4, {r0, r1}	@ tmp262,,
 5744              	@ armwave.c:906:     XvShmPutImage(g_dpy, g_xv_port, g_window, g_gc, g_yuv_image,
 906:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5745              		.loc 1 906 5 view .LVU1481
 5746 1c8c 80C09FE5 		ldr	ip, .L281+28	@ tmp243,
 5747 1c90 10308DE5 		str	r3, [sp, #16]	@ g_yuv_image.115_20->height,
 5748 1c94 04E092E5 		ldr	lr, [r2, #4]	@ g_yuv_image.115_20->width, g_yuv_image.115_20->width
 5749 1c98 0030A0E3 		mov	r3, #0	@ tmp254,
 5750 1c9c 0CE08DE5 		str	lr, [sp, #12]	@ g_yuv_image.115_20->width,
 5751 1ca0 00208DE5 		str	r2, [sp]	@ g_yuv_image.115_20,
 5752              	@ armwave.c:904:     g_canvas_dims_last = g_canvas_dims;
 904:armwave.c     ****     
 5753              		.loc 1 904 24 view .LVU1482
 5754 1ca4 030088E8 		stm	r8, {r0, r1}	@ tmp266,,
 906:armwave.c     ****         0, 0, g_yuv_image->width, g_yuv_image->height,
 5755              		.loc 1 906 5 is_stmt 1 view .LVU1483
 5756 1ca8 002095E5 		ldr	r2, [r5]	@, g_window
 5757 1cac 08308DE5 		str	r3, [sp, #8]	@ tmp254,
 5758 1cb0 00109CE5 		ldr	r1, [ip]	@, g_xv_port
 5759 1cb4 04308DE5 		str	r3, [sp, #4]	@ tmp254,
 5760 1cb8 083095E5 		ldr	r3, [r5, #8]	@, g_gc
 5761 1cbc 000096E5 		ldr	r0, [r6]	@, g_dpy
 5762 1cc0 FEFFFFEB 		bl	XvShmPutImage		@
 5763              	.LVL355:
 909:armwave.c     ****     
 910:armwave.c     ****     armwave_render_graticule();
 5764              		.loc 1 910 5 view .LVU1484
 5765 1cc4 FEFFFFEB 		bl	armwave_render_graticule		@
 5766              	.LVL356:
 911:armwave.c     **** 
 912:armwave.c     ****     XFlush(g_dpy);
 5767              		.loc 1 912 5 view .LVU1485
 5768 1cc8 000096E5 		ldr	r0, [r6]	@, g_dpy
 5769 1ccc FEFFFFEB 		bl	XFlush		@
 5770              	.LVL357:
 913:armwave.c     **** 
 914:armwave.c     ****     g_frame_num++;
 5771              		.loc 1 914 5 view .LVU1486
 5772              	@ armwave.c:914:     g_frame_num++;
 5773              		.loc 1 914 16 is_stmt 0 view .LVU1487
 5774 1cd0 0C3095E5 		ldr	r3, [r5, #12]	@ g_frame_num, g_frame_num
 5775 1cd4 013083E2 		add	r3, r3, #1	@ tmp260, g_frame_num,
 5776 1cd8 0C3085E5 		str	r3, [r5, #12]	@ tmp260, g_frame_num
 5777              	@ armwave.c:915: }
 915:armwave.c     **** }
 5778              		.loc 1 915 1 view .LVU1488
 5779 1cdc 38D08DE2 		add	sp, sp, #56	@,,
 5780              		.cfi_remember_state
 5781              		.cfi_def_cfa_offset 32
 5782              		@ sp needed	@
 5783 1ce0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 5784              	.LVL358:
 5785              	.L280:
 5786              		.cfi_restore_state
 5787              	.LBB140:
 5788              	.LBB133:
 496:armwave.c     ****         return;
 5789              		.loc 1 496 9 is_stmt 1 view .LVU1489
 5790 1ce4 2C009FE5 		ldr	r0, .L281+32	@,
 5791 1ce8 FEFFFFEB 		bl	puts		@
 5792              	.LVL359:
 497:armwave.c     ****     }
 5793              		.loc 1 497 9 view .LVU1490
 5794 1cec 9AFFFFEA 		b	.L272		@
 5795              	.LVL360:
 5796              	.L277:
 497:armwave.c     ****     }
 5797              		.loc 1 497 9 is_stmt 0 view .LVU1491
 5798              	.LBE133:
 5799              	.LBE140:
 5800              	.LBB141:
 5801              	.LBB138:
 5802              	@ armwave.c:384:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 384:armwave.c     **** 
 5803              		.loc 1 384 52 view .LVU1492
 5804 1cf0 0080A0E1 		mov	r8, r0	@ ypos, tmp199
 5805 1cf4 B1FFFFEA 		b	.L273		@
 5806              	.L282:
 5807              		.align	2
 5808              	.L281:
 5809 1cf8 00000000 		.word	.LANCHOR2
 5810 1cfc 00000000 		.word	.LANCHOR1
 5811 1d00 00000000 		.word	g_armwave_state
 5812 1d04 00000000 		.word	g_dpy
 5813 1d08 00000000 		.word	g_canvas_dims_last
 5814 1d0c 00000000 		.word	g_canvas_dims
 5815 1d10 98050000 		.word	.LC35
 5816 1d14 00000000 		.word	g_xv_port
 5817 1d18 24020000 		.word	.LC15
 5818              	.LBE138:
 5819              	.LBE141:
 5820              		.cfi_endproc
 5821              	.LFE83:
 5823              		.comm	g_xswa,60,4
 5824              		.comm	g_grat_subcolour,12,4
 5825              		.comm	g_grat_colour,12,4
 5826              		.comm	g_yuv_shminfo,16,4
 5827              		.global	g_yuv_image
 5828              		.global	g_gc
 5829              		.comm	g_vinfo,40,4
 5830              		.comm	g_xv_port,4,4
 5831              		.comm	g_dpy,4,4
 5832              		.global	g_window
 5833              		.global	g_n_test_waves
 5834              		.global	g_frame_num
 5835              		.comm	g_canvas_dims_last,8,4
 5836              		.comm	g_canvas_dims,8,4
 5837              		.global	g_fill_black
 5838              		.comm	g_yuv_lut,768,4
 5839              		.comm	g_armwave_state,160,4
 5840              		.section	.rodata
 5841              		.align	2
 5842              		.set	.LANCHOR0,. + 0
 5845              	__PRETTY_FUNCTION__.20848:
 5846 0000 61726D77 		.ascii	"armwave_setup_render\000"
 5846      6176655F 
 5846      73657475 
 5846      705F7265 
 5846      6E646572 
 5847 0015 000000   		.space	3
 5850              	__PRETTY_FUNCTION__.20855:
 5851 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 5851      6176655F 
 5851      7365745F 
 5851      77617665 
 5851      5F706F69 
 5852 0031 000000   		.space	3
 5855              	__PRETTY_FUNCTION__.20862:
 5856 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 5856      6176655F 
 5856      7365745F 
 5856      77617665 
 5856      5F706F69 
 5857 0051 000000   		.space	3
 5860              	g_fill_black:
 5861 0054 000000   		.space	3
 5862              		.data
 5863              		.align	2
 5864              		.set	.LANCHOR2,. + 0
 5867              	g_n_test_waves:
 5868 0000 08000000 		.word	8
 5869              		.bss
 5870              		.align	2
 5871              		.set	.LANCHOR1,. + 0
 5874              	g_window:
 5875 0000 00000000 		.space	4
 5878              	g_yuv_image:
 5879 0004 00000000 		.space	4
 5882              	g_gc:
 5883 0008 00000000 		.space	4
 5886              	g_frame_num:
 5887 000c 00000000 		.space	4
 5888              		.section	.rodata.str1.4,"aMS",%progbits,1
 5889              		.align	2
 5890              	.LC0:
 5891 0000 25336420 		.ascii	"%3d = [%3d, %3d, %3d]\012\000"
 5891      3D205B25 
 5891      33642C20 
 5891      2533642C 
 5891      20253364 
 5892 0017 00       		.space	1
 5893              	.LC1:
 5894 0018 25336420 		.ascii	"%3d = [%3d, %3d, %3d] RGB: %3d, %3d, %3d\012\000"
 5894      3D205B25 
 5894      33642C20 
 5894      2533642C 
 5894      20253364 
 5895 0042 0000     		.space	2
 5896              	.LC2:
 5897 0044 25336420 		.ascii	"%3d = (%3d, %3d, %3d)\012\000"
 5897      3D202825 
 5897      33642C20 
 5897      2533642C 
 5897      20253364 
 5898 005b 00       		.space	1
 5899              	.LC3:
 5900 005c 76302E32 		.ascii	"v0.2.0\000"
 5900      2E3000
 5901 0063 00       		.space	1
 5902              	.LC4:
 5903 0064 61726D77 		.ascii	"armwave version: %s\012\000"
 5903      61766520 
 5903      76657273 
 5903      696F6E3A 
 5903      2025730A 
 5904 0079 000000   		.space	3
 5905              	.LC5:
 5906 007c 6275696C 		.ascii	"built without Python linkings\000"
 5906      74207769 
 5906      74686F75 
 5906      74205079 
 5906      74686F6E 
 5907 009a 0000     		.space	2
 5908              	.LC6:
 5909 009c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 5909      20653D25 
 5909      6420773D 
 5909      25642077 
 5909      733D2564 
 5910              	.LC7:
 5911 00c8 4572726F 		.ascii	"Error: start point more than end point\000"
 5911      723A2073 
 5911      74617274 
 5911      20706F69 
 5911      6E74206D 
 5912 00ef 00       		.space	1
 5913              	.LC8:
 5914 00f0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 5914      7566665F 
 5914      73697A65 
 5914      3D25642C 
 5914      20636D70 
 5915 0123 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 5915      5F776964 
 5915      74683D25 
 5915      642C2077 
 5915      6176655F 
 5916 014d 000000   		.space	3
 5917              	.LC9:
 5918 0150 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 5918      6F632066 
 5918      61696C75 
 5918      72652061 
 5918      6C6C6F63 
 5919 0183 2E636831 		.ascii	".ch1_buffer)\012\000"
 5919      5F627566 
 5919      66657229 
 5919      0A00
 5920 0191 000000   		.space	3
 5921              	.LC10:
 5922 0194 61726D77 		.ascii	"armwave.c\000"
 5922      6176652E 
 5922      6300
 5923 019e 0000     		.space	2
 5924              	.LC11:
 5925 01a0 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 5925      6D776176 
 5925      655F7374 
 5925      6174652E 
 5925      78636F6F 
 5926 01c9 000000   		.space	3
 5927              	.LC12:
 5928 01cc 78636F6F 		.ascii	"xcoord_to_xpixel[%5d] = %5d\012\000"
 5928      72645F74 
 5928      6F5F7870 
 5928      6978656C 
 5928      5B253564 
 5929 01e9 000000   		.space	3
 5930              	.LC13:
 5931 01ec 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 5931      3A203078 
 5931      25303878 
 5931      20307825 
 5931      30387820 
 5932              	.LC14:
 5933 0210 77617665 		.ascii	"wave_buffer != NULL\000"
 5933      5F627566 
 5933      66657220 
 5933      213D204E 
 5933      554C4C00 
 5934              	.LC15:
 5935 0224 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 5935      6176655F 
 5935      7365745F 
 5935      77617665 
 5935      5F706F69 
 5936 0257 78636565 		.ascii	"xceeded\000"
 5936      64656400 
 5937 025f 00       		.space	1
 5938              	.LC16:
 5939 0260 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 5939      5F627566 
 5939      6665725F 
 5939      70747220 
 5939      213D2030 
 5940 0275 000000   		.space	3
 5941              	.LC17:
 5942 0278 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 5942      6176655F 
 5942      74657374 
 5942      5F627566 
 5942      6665725F 
 5943 02ab 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 5943      20627566 
 5943      66657220 
 5943      28256420 
 5943      62797465 
 5944              	.LC18:
 5945 02cc 43616C63 		.ascii	"Calculating test set %d\012\000"
 5945      756C6174 
 5945      696E6720 
 5945      74657374 
 5945      20736574 
 5946 02e5 000000   		.space	3
 5947              	.LC19:
 5948 02e8 41726D57 		.ascii	"ArmWave\000"
 5948      61766500 
 5949              	.LC20:
 5950 02f0 57696E64 		.ascii	"Window done, mapping...\000"
 5950      6F772064 
 5950      6F6E652C 
 5950      206D6170 
 5950      70696E67 
 5951              	.LC21:
 5952 0308 416C6C20 		.ascii	"All done in window\000"
 5952      646F6E65 
 5952      20696E20 
 5952      77696E64 
 5952      6F7700
 5953 031b 00       		.space	1
 5954              	.LC22:
 5955 031c 61726D77 		.ascii	"armwave: initialising for X11...\000"
 5955      6176653A 
 5955      20696E69 
 5955      7469616C 
 5955      6973696E 
 5956 033d 000000   		.space	3
 5957              	.LC23:
 5958 0340 4572726F 		.ascii	"Error: Fatal X11: Cannot open display.\000"
 5958      723A2046 
 5958      6174616C 
 5958      20583131 
 5958      3A204361 
 5959 0367 00       		.space	1
 5960              	.LC24:
 5961 0368 466F756E 		.ascii	"Found 24bit TrueColor.\000"
 5961      64203234 
 5961      62697420 
 5961      54727565 
 5961      436F6C6F 
 5962 037f 00       		.space	1
 5963              	.LC25:
 5964 0380 4572726F 		.ascii	"Error: Fatal X11: not supported 24-bit TrueColor di"
 5964      723A2046 
 5964      6174616C 
 5964      20583131 
 5964      3A206E6F 
 5965 03b3 73706C61 		.ascii	"splay.\000"
 5965      792E00
 5966 03ba 0000     		.space	2
 5967              	.LC26:
 5968 03bc 4572726F 		.ascii	"Error: Fatal X11: Shared memory extension not avail"
 5968      723A2046 
 5968      6174616C 
 5968      20583131 
 5968      3A205368 
 5969 03ef 61626C65 		.ascii	"able or failed to allocate shared memory.\000"
 5969      206F7220 
 5969      6661696C 
 5969      65642074 
 5969      6F20616C 
 5970 0419 000000   		.space	3
 5971              	.LC27:
 5972 041c 4572726F 		.ascii	"Error: Fatal X11: Unable to find XVideo extension ("
 5972      723A2046 
 5972      6174616C 
 5972      20583131 
 5972      3A20556E 
 5973 044f 2564292E 		.ascii	"%d).  Is it configured correctly?\012\000"
 5973      20204973 
 5973      20697420 
 5973      636F6E66 
 5973      69677572 
 5974 0472 0000     		.space	2
 5975              	.LC28:
 5976 0474 4572726F 		.ascii	"Error: Fatal X11: Unable to query XVideo extension "
 5976      723A2046 
 5976      6174616C 
 5976      20583131 
 5976      3A20556E 
 5977 04a7 28256429 		.ascii	"(%d).  Is it configured correctly?\012\000"
 5977      2E202049 
 5977      73206974 
 5977      20636F6E 
 5977      66696775 
 5978 04cb 00       		.space	1
 5979              	.LC29:
 5980 04cc 4572726F 		.ascii	"Error: Fatal X11: Unable to use the port %d\012\012"
 5980      723A2046 
 5980      6174616C 
 5980      20583131 
 5980      3A20556E 
 5981 04f9 00       		.ascii	"\000"
 5982 04fa 0000     		.space	2
 5983              	.LC30:
 5984 04fc 41747461 		.ascii	"Attaching XvShm...\000"
 5984      6368696E 
 5984      67205876 
 5984      53686D2E 
 5984      2E2E00
 5985 050f 00       		.space	1
 5986              	.LC31:
 5987 0510 7975765F 		.ascii	"yuv_image plane %d offset %d pitch %d\012\000"
 5987      696D6167 
 5987      6520706C 
 5987      616E6520 
 5987      2564206F 
 5988 0537 00       		.space	1
 5989              	.LC32:
 5990 0538 4572726F 		.ascii	"Error: Fatal X11: XShmAttached failed\000"
 5990      723A2046 
 5990      6174616C 
 5990      20583131 
 5990      3A205853 
 5991 055e 0000     		.space	2
 5992              	.LC33:
 5993 0560 25642062 		.ascii	"%d bytes for XvImage, shmid %d, xv_port %d\012\000"
 5993      79746573 
 5993      20666F72 
 5993      20587649 
 5993      6D616765 
 5994              	.LC34:
 5995 058c 2533642C 		.ascii	"%3d, %3d\012\000"
 5995      20253364 
 5995      0A00
 5996 0596 0000     		.space	2
 5997              	.LC35:
 5998 0598 43616E76 		.ascii	"Canvas dims: %d x %d (margin: %d)\012\000"
 5998      61732064 
 5998      696D733A 
 5998      20256420 
 5998      78202564 
 5999              		.text
 6000              	.Letext0:
 6001              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 6002              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 6003              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 6004              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 6005              		.file 6 "/usr/include/stdio.h"
 6006              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 6007              		.file 8 "/usr/include/errno.h"
 6008              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 6009              		.file 10 "/usr/include/unistd.h"
 6010              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 6011              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 6012              		.file 13 "/usr/local/include/python3.8/pyport.h"
 6013              		.file 14 "/usr/include/math.h"
 6014              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 6015              		.file 16 "/usr/include/time.h"
 6016              		.file 17 "/usr/local/include/python3.8/pymem.h"
 6017              		.file 18 "/usr/local/include/python3.8/object.h"
 6018              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 6019              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 6020              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 6021              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 6022              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 6023              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 6024              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 6025              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 6026              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 6027              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 6028              		.file 29 "/usr/local/include/python3.8/longobject.h"
 6029              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 6030              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 6031              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 6032              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 6033              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 6034              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 6035              		.file 36 "/usr/local/include/python3.8/listobject.h"
 6036              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 6037              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 6038              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 6039              		.file 40 "/usr/local/include/python3.8/setobject.h"
 6040              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 6041              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 6042              		.file 43 "/usr/local/include/python3.8/classobject.h"
 6043              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 6044              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 6045              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 6046              		.file 47 "/usr/local/include/python3.8/traceback.h"
 6047              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 6048              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 6049              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 6050              		.file 51 "/usr/local/include/python3.8/pystate.h"
 6051              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 6052              		.file 53 "/usr/local/include/python3.8/genobject.h"
 6053              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 6054              		.file 55 "/usr/local/include/python3.8/structseq.h"
 6055              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 6056              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 6057              		.file 58 "/usr/local/include/python3.8/codecs.h"
 6058              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 6059              		.file 60 "/usr/local/include/python3.8/context.h"
 6060              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 6061              		.file 62 "/usr/local/include/python3.8/code.h"
 6062              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 6063              		.file 64 "/usr/local/include/python3.8/ceval.h"
 6064              		.file 65 "/usr/local/include/python3.8/import.h"
 6065              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 6066              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 6067              		.file 68 "/usr/include/X11/X.h"
 6068              		.file 69 "/usr/include/X11/Xlib.h"
 6069              		.file 70 "/usr/include/X11/Xutil.h"
 6070              		.file 71 "/usr/include/X11/extensions/XShm.h"
 6071              		.file 72 "/usr/include/malloc.h"
 6072              		.file 73 "/usr/include/X11/extensions/Xv.h"
 6073              		.file 74 "/usr/include/X11/extensions/Xvlib.h"
 6074              		.file 75 "armwave.h"
 6075              		.file 76 "<built-in>"
 6076              		.file 77 "/usr/include/arm-linux-gnueabihf/sys/shm.h"
 6077              		.file 78 "/usr/include/stdlib.h"
 6078              		.file 79 "/usr/include/assert.h"
 6079              		.file 80 "/usr/include/string.h"
 6080              		.file 81 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
