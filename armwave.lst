   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.33,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.33,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.33,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.33
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.33, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c 48319FE5 		ldr	r3, .L21	@ tmp189,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 1CD04DE2 		sub	sp, sp, #28	@,,
 252              		.cfi_def_cfa_offset 64
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 82 view .LVU33
 255 00a8 247093E5 		ldr	r7, [r3, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 257              		.loc 1 79 35 view .LVU34
 258 00ac 382093E5 		ldr	r2, [r3, #56]	@ _135, g_armwave_state.waves
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 260              		.loc 1 71 147 view .LVU35
 261 00b0 405093E5 		ldr	r5, [r3, #64]	@ _6, g_armwave_state.bitdepth_height
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 900704E0 		mul	r4, r0, r7	@ tmp192, slice_y, _2
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ _135,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01C0A0E1 		mov	ip, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2448A0E1 		lsr	r4, r4, #16	@ tmp193, tmp192,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 00108DE5 		str	r1, [sp]	@ height, %sfp
 277              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 278              		.loc 1 79 35 view .LVU41
 279 00c8 0C208DE5 		str	r2, [sp, #12]	@ _135, %sfp
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 041093E5 		ldr	r1, [r3, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 285              		.loc 1 71 130 view .LVU43
 286 00d0 950404E0 		mul	r4, r5, r4	@ _7, _6, tmp193
 287              	.LVL8:
 288              		.loc 1 79 5 is_stmt 1 view .LVU44
 289              		.loc 1 79 5 is_stmt 0 view .LVU45
 290 00d4 420000DA 		ble	.L11		@,
 291              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 292              		.loc 1 80 36 view .LVU46
 293 00d8 142093E5 		ldr	r2, [r3, #20]	@ _8, g_armwave_state.wave_buffer
 294              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
 295              		.loc 1 80 81 view .LVU47
 296 00dc 343093E5 		ldr	r3, [r3, #52]	@ _9, g_armwave_state.wave_stride
 297 00e0 00005CE3 		cmp	ip, #0	@ height,
 298 00e4 10308DE5 		str	r3, [sp, #16]	@ _9, %sfp
 299 00e8 3D00000A 		beq	.L11		@,
 300 00ec 003082E0 		add	r3, r2, r0	@ ivtmp.48, _8, slice_y
 301 00f0 8720A0E1 		lsl	r2, r7, #1	@ tmp239, _2,
 302 00f4 078082E0 		add	r8, r2, r7	@ tmp237, tmp239, _2
 303 00f8 04308DE5 		str	r3, [sp, #4]	@ ivtmp.48, %sfp
 304 00fc 00B063E2 		rsb	fp, r3, #0	@ ivtmp.49, ivtmp.48
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 306              		.loc 1 79 11 view .LVU48
 307 0100 0030A0E3 		mov	r3, #0	@ w,
 308 0104 14208DE5 		str	r2, [sp, #20]	@ tmp239, %sfp
 309 0108 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 310              	.LVL9:
 311              	.L14:
 312              		.loc 1 80 9 is_stmt 1 view .LVU49
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 313              		.loc 1 84 9 view .LVU50
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 315              		.loc 1 79 11 is_stmt 0 view .LVU51
 316 010c 14E09DE5 		ldr	lr, [sp, #20]	@ ivtmp.44, %sfp
 317 0110 04609DE5 		ldr	r6, [sp, #4]	@ ivtmp.41, %sfp
 318 0114 00C0A0E3 		mov	ip, #0	@ ivtmp.42,
 319              	.LVL10:
 320              	.L13:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 321              		.loc 1 87 13 is_stmt 1 view .LVU52
 322              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 103 74 is_stmt 0 view .LVU53
 324 0118 2C28A0E1 		lsr	r2, ip, #16	@ tmp197, ivtmp.42,
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 view .LVU54
 327 011c 043096E4 		ldr	r3, [r6], #4	@ word, MEM[base: _264, offset: 0B]
 328              	.LVL11:
  89:armwave.c     ****                 scale_value = word & 0xff;
 329              		.loc 1 89 13 is_stmt 1 view .LVU55
  90:armwave.c     ****                 
 330              		.loc 1 90 17 view .LVU56
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 102 17 view .LVU57
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 332              		.loc 1 107 17 view .LVU58
 333              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 334              		.loc 1 107 47 is_stmt 0 view .LVU59
 335 0120 954222E0 		mla	r2, r5, r2, r4	@ tmp199, _6, tmp197, _7
 336              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 337              		.loc 1 103 34 view .LVU60
 338 0124 0CC087E0 		add	ip, r7, ip	@ _78, _2, ivtmp.42
 339              	.LVL12:
 340              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 341              		.loc 1 107 47 view .LVU61
 342 0128 7320E2E6 		uxtab	r2, r2, r3	@ tmp201, tmp199, word
 343              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 344              		.loc 1 103 74 view .LVU62
 345 012c 2C08A0E1 		lsr	r0, ip, #16	@ tmp206, _78,
 346              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 347              		.loc 1 107 47 view .LVU63
 348 0130 8220A0E1 		lsl	r2, r2, #1	@ tmp202, tmp201,
 349 0134 954020E0 		mla	r0, r5, r0, r4	@ tmp208, _6, tmp206, _7
 350              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 351              		.loc 1 108 22 view .LVU64
 352 0138 23A4A0E1 		lsr	r10, r3, #8	@ word, word,
 353              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 354              		.loc 1 107 47 view .LVU65
 355 013c B29091E1 		ldrh	r9, [r1, r2]	@ *_63, *_63
 356 0140 7A00E0E6 		uxtab	r0, r0, r10	@ tmp211, tmp208, word
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 74 view .LVU66
 359 0144 2EA8A0E1 		lsr	r10, lr, #16	@ tmp216, ivtmp.44,
 360              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 361              		.loc 1 107 47 view .LVU67
 362 0148 019089E2 		add	r9, r9, #1	@ tmp205, *_63,
 363 014c 954A2AE0 		mla	r10, r5, r10, r4	@ tmp218, _6, tmp216, _7
 364 0150 B29081E1 		strh	r9, [r1, r2]	@ movhi	@ tmp205, *_63
 365              		.loc 1 108 17 is_stmt 1 view .LVU68
 366              	.LVL13:
  90:armwave.c     ****                 
 367              		.loc 1 90 17 view .LVU69
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 368              		.loc 1 102 17 view .LVU70
 107:armwave.c     ****                 word >>= 8;
 369              		.loc 1 107 17 view .LVU71
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 34 is_stmt 0 view .LVU72
 372 0154 0EE087E0 		add	lr, r7, lr	@ _122, _2, ivtmp.44
 373              	@ armwave.c:108:                 word >>= 8;
 374              		.loc 1 108 22 view .LVU73
 375 0158 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU74
 378 015c 8000A0E1 		lsl	r0, r0, #1	@ tmp212, tmp211,
 379 0160 7220EAE6 		uxtab	r2, r10, r2	@ tmp221, tmp218, word
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 74 view .LVU75
 382 0164 2EA8A0E1 		lsr	r10, lr, #16	@ tmp226, _122,
 383              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 384              		.loc 1 107 47 view .LVU76
 385 0168 B09091E1 		ldrh	r9, [r1, r0]	@ *_85, *_85
 386              	@ armwave.c:108:                 word >>= 8;
 387              		.loc 1 108 22 view .LVU77
 388 016c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 389              	.LVL14:
 390              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 391              		.loc 1 107 47 view .LVU78
 392 0170 953A23E0 		mla	r3, r5, r10, r3	@ tmp229, _6, tmp226, word
 393 0174 8220A0E1 		lsl	r2, r2, #1	@ tmp222, tmp221,
 394 0178 019089E2 		add	r9, r9, #1	@ tmp215, *_85,
 395 017c B09081E1 		strh	r9, [r1, r0]	@ movhi	@ tmp215, *_85
 396              		.loc 1 108 17 is_stmt 1 view .LVU79
 397              	.LVL15:
  90:armwave.c     ****                 
 398              		.loc 1 90 17 view .LVU80
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 399              		.loc 1 102 17 view .LVU81
 107:armwave.c     ****                 word >>= 8;
 400              		.loc 1 107 17 view .LVU82
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 is_stmt 0 view .LVU83
 403 0180 043083E0 		add	r3, r3, r4	@ tmp230, tmp229, _7
 404 0184 B20091E1 		ldrh	r0, [r1, r2]	@ *_107, *_107
 405 0188 8330A0E1 		lsl	r3, r3, #1	@ tmp231, tmp230,
 406              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 407              		.loc 1 84 9 view .LVU84
 408 018c 00909DE5 		ldr	r9, [sp]	@ height, %sfp
 409              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 47 view .LVU85
 411 0190 010080E2 		add	r0, r0, #1	@ tmp225, *_107,
 412 0194 B20081E1 		strh	r0, [r1, r2]	@ movhi	@ tmp225, *_107
 413              		.loc 1 108 17 is_stmt 1 view .LVU86
 414              	.LVL16:
  90:armwave.c     ****                 
 415              		.loc 1 90 17 view .LVU87
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 416              		.loc 1 102 17 view .LVU88
 107:armwave.c     ****                 word >>= 8;
 417              		.loc 1 107 17 view .LVU89
 418              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 419              		.loc 1 107 47 is_stmt 0 view .LVU90
 420 0198 B32091E1 		ldrh	r2, [r1, r3]	@ *_129, *_129
 421              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 422              		.loc 1 84 9 view .LVU91
 423 019c 06008BE0 		add	r0, fp, r6	@ tmp238, ivtmp.49, ivtmp.41
 424 01a0 000059E1 		cmp	r9, r0	@ height, tmp238
 425              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 426              		.loc 1 107 47 view .LVU92
 427 01a4 012082E2 		add	r2, r2, #1	@ tmp234, *_129,
 428 01a8 08C08CE0 		add	ip, ip, r8	@ ivtmp.42, _78, tmp237
 429 01ac 08E08EE0 		add	lr, lr, r8	@ ivtmp.44, _122, tmp237
 430              	.LVL17:
 107:armwave.c     ****                 word >>= 8;
 431              		.loc 1 107 47 view .LVU93
 432 01b0 B32081E1 		strh	r2, [r1, r3]	@ movhi	@ tmp234, *_129
 433              		.loc 1 108 17 is_stmt 1 view .LVU94
 434              	.LVL18:
 435              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 436              		.loc 1 84 9 is_stmt 0 view .LVU95
 437 01b4 D7FFFF8A 		bhi	.L13		@,
 438              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 439              		.loc 1 79 44 view .LVU96
 440 01b8 08309DE5 		ldr	r3, [sp, #8]	@ w, %sfp
 441              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 442              		.loc 1 79 5 view .LVU97
 443 01bc 0C209DE5 		ldr	r2, [sp, #12]	@ _135, %sfp
 444              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 445              		.loc 1 79 44 view .LVU98
 446 01c0 013083E2 		add	r3, r3, #1	@ w, w,
 447              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 448              		.loc 1 79 5 view .LVU99
 449 01c4 020053E1 		cmp	r3, r2	@ w, _135
 450              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 451              		.loc 1 79 44 view .LVU100
 452 01c8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 453              	.LVL19:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 454              		.loc 1 79 44 view .LVU101
 455 01cc 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.48, %sfp
 456 01d0 10309DE5 		ldr	r3, [sp, #16]	@ _9, %sfp
 457              	.LVL20:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 458              		.loc 1 79 44 view .LVU102
 459 01d4 032082E0 		add	r2, r2, r3	@ ivtmp.48, ivtmp.48, _9
 460 01d8 04208DE5 		str	r2, [sp, #4]	@ ivtmp.48, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 461              		.loc 1 79 44 view .LVU103
 462 01dc 03B04BE0 		sub	fp, fp, r3	@ ivtmp.49, ivtmp.49, _9
 463              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 464              		.loc 1 79 5 view .LVU104
 465 01e0 C9FFFF1A 		bne	.L14		@,
 466              	.LVL21:
 467              	.L11:
 468              	@ armwave.c:112: }
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** }
 469              		.loc 1 112 1 view .LVU105
 470 01e4 1CD08DE2 		add	sp, sp, #28	@,,
 471              		.cfi_def_cfa_offset 36
 472              	.LVL22:
 473              		.loc 1 112 1 view .LVU106
 474              		@ sp needed	@
 475 01e8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 476              	.LVL23:
 477              	.L22:
 478              		.loc 1 112 1 view .LVU107
 479              		.align	2
 480              	.L21:
 481 01ec 00000000 		.word	g_armwave_state
 482              		.cfi_endproc
 483              	.LFE59:
 485              		.align	2
 486              		.global	armwave_fill_pixbuf_scaled
 487              		.syntax unified
 488              		.arm
 489              		.fpu vfp
 491              	armwave_fill_pixbuf_scaled:
 492              	.LVL24:
 493              	.LFB60:
 113:armwave.c     **** 
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 116:armwave.c     ****  * Rows are repeated as necessary.
 117:armwave.c     ****  */
 118:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 119:armwave.c     **** {
 494              		.loc 1 119 1 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 8
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 120:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 498              		.loc 1 120 5 view .LVU109
 121:armwave.c     ****     // uint32_t ysub;
 122:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 499              		.loc 1 122 5 view .LVU110
 123:armwave.c     ****     uint8_t r, g, b;
 500              		.loc 1 123 5 view .LVU111
 124:armwave.c     ****     int value; 
 501              		.loc 1 124 5 view .LVU112
 125:armwave.c     ****     // uint8_t row;
 126:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 502              		.loc 1 126 5 view .LVU113
 127:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 503              		.loc 1 127 5 view .LVU114
 128:armwave.c     ****     uint32_t offset;
 504              		.loc 1 128 5 view .LVU115
 129:armwave.c     **** 
 130:armwave.c     ****     if(out_buffer == NULL)
 505              		.loc 1 130 5 view .LVU116
 506              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 507              		.loc 1 119 1 is_stmt 0 view .LVU117
 508 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_def_cfa_offset 36
 510              		.cfi_offset 4, -36
 511              		.cfi_offset 5, -32
 512              		.cfi_offset 6, -28
 513              		.cfi_offset 7, -24
 514              		.cfi_offset 8, -20
 515              		.cfi_offset 9, -16
 516              		.cfi_offset 10, -12
 517              		.cfi_offset 11, -8
 518              		.cfi_offset 14, -4
 519              	@ armwave.c:130:     if(out_buffer == NULL)
 520              		.loc 1 130 7 view .LVU118
 521 01f4 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 522              	@ armwave.c:119: {
 119:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 523              		.loc 1 119 1 view .LVU119
 524 01f8 0CD04DE2 		sub	sp, sp, #12	@,,
 525              		.cfi_def_cfa_offset 48
 526              	@ armwave.c:130:     if(out_buffer == NULL)
 527              		.loc 1 130 7 view .LVU120
 528 01fc 1A00000A 		beq	.L23		@,
 529              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 530              		.loc 1 126 15 view .LVU121
 531 0200 54519FE5 		ldr	r5, .L44	@ tmp221,
 532              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 131:armwave.c     ****         return;
 132:armwave.c     **** 
 133:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 134:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 533              		.loc 1 134 5 view .LVU122
 534 0204 0010A0E3 		mov	r1, #0	@,
 535              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 536              		.loc 1 134 59 view .LVU123
 537 0208 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 538 020c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 539              	@ armwave.c:126:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 126:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 540              		.loc 1 126 15 view .LVU124
 541 0210 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 542              		.loc 1 134 5 is_stmt 1 view .LVU125
 543              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 544              		.loc 1 134 59 is_stmt 0 view .LVU126
 545 0214 920302E0 		mul	r2, r2, r3	@ tmp177, g_armwave_state.target_height, g_armwave_state.target_width
 546              	@ armwave.c:134:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 547              		.loc 1 134 5 view .LVU127
 548 0218 0221A0E1 		lsl	r2, r2, #2	@, tmp177,
 549 021c FEFFFFEB 		bl	memset		@
 550              	.LVL25:
 135:armwave.c     **** 
 136:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 551              		.loc 1 136 5 is_stmt 1 view .LVU128
 552              	@ armwave.c:136:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 553              		.loc 1 136 10 is_stmt 0 view .LVU129
 554 0220 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 555 0224 400095E5 		ldr	r0, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 556 0228 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 557              	.LVL26:
 137:armwave.c     ****     
 138:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 558              		.loc 1 138 5 is_stmt 1 view .LVU130
 559              		.loc 1 138 5 is_stmt 0 view .LVU131
 560 022c 000050E3 		cmp	r0, #0	@ npix,
 561 0230 0D0000DA 		ble	.L23		@,
 562              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 139:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 140:armwave.c     ****         wave_word = *base_32ptr++;
 141:armwave.c     **** 
 142:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 143:armwave.c     ****             for(w = 0; w < 2; w++) {
 144:armwave.c     ****                 value = wave_word & 0xffff;
 145:armwave.c     ****                 wave_word >>= 16;
 146:armwave.c     **** 
 147:armwave.c     ****                 if(value != 0) {
 148:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 149:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 563              		.loc 1 149 52 view .LVU132
 564 0234 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _16, g_armwave_state.ch1_color.g
 565              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 566              		.loc 1 148 52 view .LVU133
 567 0238 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _13, g_armwave_state.ch1_color.r
 568              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 151:armwave.c     **** 
 152:armwave.c     ****                     r = MIN(rr, 255);
 153:armwave.c     ****                     g = MIN(gg, 255);
 154:armwave.c     ****                     b = MIN(bb, 255);
 155:armwave.c     **** 
 156:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 157:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 158:armwave.c     **** 
 159:armwave.c     ****                     // Plot the pixels
 160:armwave.c     ****                     nsub = n + w;
 161:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 569              		.loc 1 161 57 view .LVU134
 570 023c 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _33, g_armwave_state.vscale_frac
 571              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 572              		.loc 1 149 52 view .LVU135
 573 0240 00308DE5 		str	r3, [sp]	@ _16, %sfp
 574              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 575              		.loc 1 150 52 view .LVU136
 576 0244 F037D5E1 		ldrsh	r3, [r5, #112]	@ _19, g_armwave_state.ch1_color.b
 577 0248 04308DE5 		str	r3, [sp, #4]	@ _19, %sfp
 578              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 579              		.loc 1 138 11 view .LVU137
 580 024c 0030A0E3 		mov	r3, #0	@ n,
 581              	.LVL27:
 582              	.L29:
 140:armwave.c     **** 
 583              		.loc 1 140 9 is_stmt 1 view .LVU138
 584              	@ armwave.c:140:         wave_word = *base_32ptr++;
 140:armwave.c     **** 
 585              		.loc 1 140 19 is_stmt 0 view .LVU139
 586 0250 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_62, offset: 4294967292B]
 587              	.LVL28:
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 588              		.loc 1 142 9 is_stmt 1 view .LVU140
 589              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 590              		.loc 1 142 11 is_stmt 0 view .LVU141
 591 0254 000052E3 		cmp	r2, #0	@ wave_word,
 592              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 593              		.loc 1 143 19 view .LVU142
 594 0258 0080A013 		movne	r8, #0	@ w,
 595              	@ armwave.c:142:         if(COND_UNLIKELY(wave_word != 0)) {
 142:armwave.c     ****             for(w = 0; w < 2; w++) {
 596              		.loc 1 142 11 view .LVU143
 597 025c 0400001A 		bne	.L28		@,
 598              	.L25:
 599              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 600              		.loc 1 138 28 view .LVU144
 601 0260 023083E2 		add	r3, r3, #2	@ n, n,
 602              	.LVL29:
 603              	@ armwave.c:138:     for(n = 0; n < npix; n += 2) {
 138:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 604              		.loc 1 138 5 view .LVU145
 605 0264 030050E1 		cmp	r0, r3	@ npix, n
 606 0268 F8FFFFCA 		bgt	.L29		@,
 607              	.LVL30:
 608              	.L23:
 609              	@ armwave.c:173: }
 162:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 163:armwave.c     ****                     xx = (nsub >> 8) / 2;
 164:armwave.c     **** 
 165:armwave.c     ****                     for(y = yy; y < ye; y++) {
 166:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 167:armwave.c     ****                         *(out_buffer_base + offset) = word;
 168:armwave.c     ****                     }
 169:armwave.c     ****                 }
 170:armwave.c     ****             }
 171:armwave.c     ****         }
 172:armwave.c     ****     }
 173:armwave.c     **** }
 610              		.loc 1 173 1 view .LVU146
 611 026c 0CD08DE2 		add	sp, sp, #12	@,,
 612              		.cfi_remember_state
 613              		.cfi_def_cfa_offset 36
 614              		@ sp needed	@
 615 0270 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 616              	.LVL31:
 617              	.L28:
 618              		.cfi_restore_state
 144:armwave.c     ****                 wave_word >>= 16;
 619              		.loc 1 144 17 is_stmt 1 view .LVU147
 620              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 621              		.loc 1 144 23 is_stmt 0 view .LVU148
 622 0274 7290FFE6 		uxth	r9, r2	@ value, wave_word
 623              	.LVL32:
 145:armwave.c     **** 
 624              		.loc 1 145 17 is_stmt 1 view .LVU149
 625              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 626              		.loc 1 147 19 is_stmt 0 view .LVU150
 627 0278 000059E3 		cmp	r9, #0	@ value,
 628              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 629              		.loc 1 145 27 view .LVU151
 630 027c 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 631              	.LVL33:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 632              		.loc 1 147 17 is_stmt 1 view .LVU152
 633              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 634              		.loc 1 147 19 is_stmt 0 view .LVU153
 635 0280 0600001A 		bne	.L43		@,
 636              	.LVL34:
 637              	.L26:
 638              	@ armwave.c:143:             for(w = 0; w < 2; w++) {
 143:armwave.c     ****                 value = wave_word & 0xffff;
 639              		.loc 1 143 13 view .LVU154
 640 0284 010058E3 		cmp	r8, #1	@ w,
 641 0288 F4FFFF0A 		beq	.L25		@,
 642              	@ armwave.c:144:                 value = wave_word & 0xffff;
 144:armwave.c     ****                 wave_word >>= 16;
 643              		.loc 1 144 23 view .LVU155
 644 028c 7290FFE6 		uxth	r9, r2	@ value, wave_word
 645              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 646              		.loc 1 147 19 view .LVU156
 647 0290 000059E3 		cmp	r9, #0	@ value,
 648 0294 0180A0E3 		mov	r8, #1	@ w,
 649              	.LVL35:
 144:armwave.c     ****                 wave_word >>= 16;
 650              		.loc 1 144 17 is_stmt 1 view .LVU157
 145:armwave.c     **** 
 651              		.loc 1 145 17 view .LVU158
 652              	@ armwave.c:145:                 wave_word >>= 16;
 145:armwave.c     **** 
 653              		.loc 1 145 27 is_stmt 0 view .LVU159
 654 0298 2228A0E1 		lsr	r2, r2, #16	@ wave_word, wave_word,
 655              	.LVL36:
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 656              		.loc 1 147 17 is_stmt 1 view .LVU160
 657              	@ armwave.c:147:                 if(value != 0) {
 147:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 658              		.loc 1 147 19 is_stmt 0 view .LVU161
 659 029c F8FFFF0A 		beq	.L26		@,
 660              	.L43:
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 661              		.loc 1 148 21 is_stmt 1 view .LVU162
 662              	.LVL37:
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 663              		.loc 1 149 21 view .LVU163
 150:armwave.c     **** 
 664              		.loc 1 150 21 view .LVU164
 152:armwave.c     ****                     g = MIN(gg, 255);
 665              		.loc 1 152 21 view .LVU165
 153:armwave.c     ****                     b = MIN(bb, 255);
 666              		.loc 1 153 21 view .LVU166
 154:armwave.c     **** 
 667              		.loc 1 154 21 view .LVU167
 157:armwave.c     **** 
 668              		.loc 1 157 21 view .LVU168
 669              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 670              		.loc 1 150 55 is_stmt 0 view .LVU169
 671 02a0 04109DE5 		ldr	r1, [sp, #4]	@ _19, %sfp
 672 02a4 08E083E0 		add	lr, r3, r8	@ _130, n, w
 673 02a8 99010CE0 		mul	ip, r9, r1	@ tmp195, value, _19
 674              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 675              		.loc 1 161 32 view .LVU170
 676 02ac 7E10EFE6 		uxtb	r1, lr	@ _31, _130
 677              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 678              		.loc 1 162 41 view .LVU171
 679 02b0 017081E2 		add	r7, r1, #1	@ tmp210, _31,
 680              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 681              		.loc 1 161 40 view .LVU172
 682 02b4 901A07EE 		vmov	s15, r1	@ int	@ _31, _31
 683              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 684              		.loc 1 162 41 view .LVU173
 685 02b8 107A07EE 		vmov	s14, r7	@ int	@ tmp210, tmp210
 686              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 149 55 view .LVU174
 688 02bc 00109DE5 		ldr	r1, [sp]	@ _16, %sfp
 689              	@ armwave.c:150:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 150:armwave.c     **** 
 690              		.loc 1 150 24 view .LVU175
 691 02c0 4CC4A0E1 		asr	ip, ip, #8	@ bb, tmp195,
 692              	.LVL38:
 693              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 694              		.loc 1 161 40 view .LVU176
 695 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp208, _31
 696              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 697              		.loc 1 162 46 view .LVU177
 698 02c8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp211, tmp210
 699              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 700              		.loc 1 149 55 view .LVU178
 701 02cc 99010AE0 		mul	r10, r9, r1	@ tmp199, value, _16
 702              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 703              		.loc 1 148 55 view .LVU179
 704 02d0 990B09E0 		mul	r9, r9, fp	@ tmp205, value, _13
 705              	.LVL39:
 706              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 707              		.loc 1 154 25 view .LVU180
 708 02d4 FF005CE3 		cmp	ip, #255	@ bb,
 709              	@ armwave.c:149:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 149:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 710              		.loc 1 149 24 view .LVU181
 711 02d8 4AA4A0E1 		asr	r10, r10, #8	@ gg, tmp199,
 712              	.LVL40:
 713              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 714              		.loc 1 161 40 view .LVU182
 715 02dc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp209, tmp208, _33
 716              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 717              		.loc 1 162 46 view .LVU183
 718 02e0 267A27EE 		vmul.f32	s14, s14, s13	@ tmp212, tmp211, _33
 719              	@ armwave.c:154:                     b = MIN(bb, 255);
 154:armwave.c     **** 
 720              		.loc 1 154 25 view .LVU184
 721 02e4 FFC0A0A3 		movge	ip, #255	@ bb,
 722              	.LVL41:
 723              	@ armwave.c:153:                     g = MIN(gg, 255);
 153:armwave.c     ****                     b = MIN(bb, 255);
 724              		.loc 1 153 25 view .LVU185
 725 02e8 FF005AE3 		cmp	r10, #255	@ gg,
 726 02ec FFA0A0A3 		movge	r10, #255	@ gg,
 727              	.LVL42:
 728              	@ armwave.c:148:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 148:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 729              		.loc 1 148 24 view .LVU186
 730 02f0 4994A0E1 		asr	r9, r9, #8	@ rr, tmp205,
 731              	.LVL43:
 732              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 733              		.loc 1 152 25 view .LVU187
 734 02f4 FF0059E3 		cmp	r9, #255	@ rr,
 735              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 736              		.loc 1 157 56 view .LVU188
 737 02f8 0AA4A0E1 		lsl	r10, r10, #8	@ tmp200, gg,
 738              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 161 24 view .LVU189
 740 02fc E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp209
 741              	@ armwave.c:152:                     r = MIN(rr, 255);
 152:armwave.c     ****                     g = MIN(gg, 255);
 742              		.loc 1 152 25 view .LVU190
 743 0300 FF90A0A3 		movge	r9, #255	@ rr,
 744              	.LVL44:
 745              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 746              		.loc 1 163 32 view .LVU191
 747 0304 4EE4A0E1 		asr	lr, lr, #8	@ tmp213, _130,
 748              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 749              		.loc 1 157 44 view .LVU192
 750 0308 0CC8A0E1 		lsl	ip, ip, #16	@ tmp196, bb,
 751              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 752              		.loc 1 157 56 view .LVU193
 753 030c 7AA0FFE6 		uxth	r10, r10	@ tmp201, tmp200
 754              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 755              		.loc 1 157 44 view .LVU194
 756 0310 FFC80CE2 		and	ip, ip, #16711680	@ tmp197, tmp196,
 757              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 758              		.loc 1 157 51 view .LVU195
 759 0314 0AC08CE1 		orr	ip, ip, r10	@ tmp203, tmp197, tmp201
 760              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 761              		.loc 1 157 62 view .LVU196
 762 0318 79A0EFE6 		uxtb	r10, r9	@ rr, rr
 763              	@ armwave.c:161:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 161 24 view .LVU197
 765 031c 901A17EE 		vmov	r1, s15	@ int	@ yy, yy
 766              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 767              		.loc 1 162 24 view .LVU198
 768 0320 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp212
 769              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 770              		.loc 1 163 38 view .LVU199
 771 0324 AE9F8EE0 		add	r9, lr, lr, lsr #31	@ tmp215, tmp213, tmp213,
 772              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 773              		.loc 1 157 62 view .LVU200
 774 0328 0AC08CE1 		orr	ip, ip, r10	@ tmp207, tmp203, rr
 775              	@ armwave.c:157:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 157:armwave.c     **** 
 776              		.loc 1 157 26 view .LVU201
 777 032c FFE48CE3 		orr	lr, ip, #-16777216	@ word, tmp207,
 778              	.LVL45:
 160:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 779              		.loc 1 160 21 is_stmt 1 view .LVU202
 161:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 161 21 view .LVU203
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 781              		.loc 1 162 21 view .LVU204
 782              	@ armwave.c:163:                     xx = (nsub >> 8) / 2;
 163:armwave.c     **** 
 783              		.loc 1 163 38 is_stmt 0 view .LVU205
 784 0330 C990A0E1 		asr	r9, r9, #1	@ xx, tmp215,
 785              	@ armwave.c:162:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 162:armwave.c     ****                     xx = (nsub >> 8) / 2;
 786              		.loc 1 162 24 view .LVU206
 787 0334 907A17EE 		vmov	r7, s15	@ int	@ ye, ye
 788              	.LVL46:
 163:armwave.c     **** 
 789              		.loc 1 163 21 is_stmt 1 view .LVU207
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 790              		.loc 1 165 21 view .LVU208
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 791              		.loc 1 165 21 is_stmt 0 view .LVU209
 792 0338 070051E1 		cmp	r1, r7	@ yy, ye
 793 033c D0FFFF2A 		bcs	.L26		@,
 794              	.LVL47:
 795              	.L27:
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 796              		.loc 1 166 25 is_stmt 1 discriminator 3 view .LVU210
 167:armwave.c     ****                     }
 797              		.loc 1 167 25 discriminator 3 view .LVU211
 798              	@ armwave.c:166:                         offset = (xx + (y * g_armwave_state.target_width)); 
 166:armwave.c     ****                         *(out_buffer_base + offset) = word;
 799              		.loc 1 166 43 is_stmt 0 discriminator 3 view .LVU212
 800 0340 58C095E5 		ldr	ip, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 801              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 802              		.loc 1 167 43 discriminator 3 view .LVU213
 803 0344 9C912CE0 		mla	ip, ip, r1, r9	@ tmp220, g_armwave_state.target_width, yy, xx
 804              	.LVL48:
 805              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 806              		.loc 1 165 42 discriminator 3 view .LVU214
 807 0348 011081E2 		add	r1, r1, #1	@ yy, yy,
 808              	.LVL49:
 809              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 810              		.loc 1 165 21 discriminator 3 view .LVU215
 811 034c 010057E1 		cmp	r7, r1	@ ye, yy
 812              	@ armwave.c:167:                         *(out_buffer_base + offset) = word;
 167:armwave.c     ****                     }
 813              		.loc 1 167 53 discriminator 3 view .LVU216
 814 0350 0CE186E7 		str	lr, [r6, ip, lsl #2]	@ word, *_44
 815              	@ armwave.c:165:                     for(y = yy; y < ye; y++) {
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 816              		.loc 1 165 21 discriminator 3 view .LVU217
 817 0354 F9FFFF1A 		bne	.L27		@,
 165:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 818              		.loc 1 165 21 discriminator 3 view .LVU218
 819 0358 C9FFFFEA 		b	.L26		@
 820              	.L45:
 821              		.align	2
 822              	.L44:
 823 035c 00000000 		.word	g_armwave_state
 824              		.cfi_endproc
 825              	.LFE60:
 827              		.global	__aeabi_idiv
 828              		.align	2
 829              		.global	armwave_generate
 830              		.syntax unified
 831              		.arm
 832              		.fpu vfp
 834              	armwave_generate:
 835              	.LFB61:
 174:armwave.c     **** 
 175:armwave.c     **** /*
 176:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 177:armwave.c     ****  */
 178:armwave.c     **** void armwave_generate()
 179:armwave.c     **** {
 836              		.loc 1 179 1 is_stmt 1 view -0
 837              		.cfi_startproc
 838              		@ args = 0, pretend = 0, frame = 40
 839              		@ frame_needed = 0, uses_anonymous_args = 0
 180:armwave.c     ****     uint32_t yy;
 840              		.loc 1 180 5 view .LVU220
 181:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 841              		.loc 1 181 5 view .LVU221
 842              	@ armwave.c:179: {
 179:armwave.c     ****     uint32_t yy;
 843              		.loc 1 179 1 is_stmt 0 view .LVU222
 844 0360 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 845              		.cfi_def_cfa_offset 36
 846              		.cfi_offset 4, -36
 847              		.cfi_offset 5, -32
 848              		.cfi_offset 6, -28
 849              		.cfi_offset 7, -24
 850              		.cfi_offset 8, -20
 851              		.cfi_offset 9, -16
 852              		.cfi_offset 10, -12
 853              		.cfi_offset 11, -8
 854              		.cfi_offset 14, -4
 855 0364 2CD04DE2 		sub	sp, sp, #44	@,,
 856              		.cfi_def_cfa_offset 80
 857              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 858              		.loc 1 181 38 view .LVU223
 859 0368 18829FE5 		ldr	r8, .L60	@ tmp277,
 860              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 182:armwave.c     **** 
 183:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 861              		.loc 1 183 5 view .LVU224
 862 036c 0010A0E3 		mov	r1, #0	@,
 863              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 864              		.loc 1 181 14 view .LVU225
 865 0370 4C3098E5 		ldr	r3, [r8, #76]	@ xx_rem, g_armwave_state.wave_length
 866              	@ armwave.c:183:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 867              		.loc 1 183 5 view .LVU226
 868 0374 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 869 0378 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 870              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 871              		.loc 1 181 14 view .LVU227
 872 037c 10308DE5 		str	r3, [sp, #16]	@ xx_rem, %sfp
 873              	.LVL50:
 874              		.loc 1 183 5 is_stmt 1 view .LVU228
 875 0380 FEFFFFEB 		bl	memset		@
 876              	.LVL51:
 184:armwave.c     **** 
 185:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 877              		.loc 1 185 5 view .LVU229
 878              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 879              		.loc 1 185 68 is_stmt 0 view .LVU230
 880 0384 44B098E5 		ldr	fp, [r8, #68]	@ _9, g_armwave_state.slice_height
 881              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 882              		.loc 1 185 51 view .LVU231
 883 0388 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 884 038c 0B10A0E1 		mov	r1, fp	@, _9
 885 0390 FEFFFFEB 		bl	__aeabi_idiv		@
 886              	.LVL52:
 887              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 888              		.loc 1 185 5 view .LVU232
 889 0394 000050E3 		cmp	r0, #0	@ tmp217
 890 0398 7600000A 		beq	.L52		@,
 891              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 892              		.loc 1 181 52 view .LVU233
 893 039c 0030A0E3 		mov	r3, #0	@ ypos,
 894              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 895              		.loc 1 185 12 view .LVU234
 896 03a0 03A0A0E1 		mov	r10, r3	@ yy, ypos
 897              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 898              		.loc 1 181 52 view .LVU235
 899 03a4 14308DE5 		str	r3, [sp, #20]	@ ypos, %sfp
 900              	.LVL53:
 901              	.L51:
 186:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 187:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height, 
 902              		.loc 1 187 9 is_stmt 1 discriminator 3 view .LVU236
 903 03a8 0B30A0E1 		mov	r3, fp	@, _9
 904 03ac 9A0B02E0 		mul	r2, r10, fp	@, yy, tmp3
 905 03b0 0A10A0E1 		mov	r1, r10	@, yy
 906 03b4 D0019FE5 		ldr	r0, .L60+4	@,
 907 03b8 FEFFFFEB 		bl	printf		@
 908              	.LVL54:
 188:armwave.c     **** 
 189:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 909              		.loc 1 189 9 discriminator 3 view .LVU237
 910              	@ armwave.c:189:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 911              		.loc 1 189 62 is_stmt 0 discriminator 3 view .LVU238
 912 03bc 44B098E5 		ldr	fp, [r8, #68]	@ _9, g_armwave_state.slice_height
 913              	.LBB10:
 914              	.LBB11:
 915              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 916              		.loc 1 71 82 discriminator 3 view .LVU239
 917 03c0 249098E5 		ldr	r9, [r8, #36]	@ _35, g_armwave_state.cmp_x_bitdepth_scale
 918              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 919              		.loc 1 79 35 discriminator 3 view .LVU240
 920 03c4 383098E5 		ldr	r3, [r8, #56]	@ _147, g_armwave_state.waves
 921              	.LBE11:
 922              	.LBE10:
 923              	@ armwave.c:189:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 924              		.loc 1 189 9 discriminator 3 view .LVU241
 925 03c8 9A0B02E0 		mul	r2, r10, fp	@ _11, yy, _9
 926              	.LVL55:
 927              	.LBB13:
 928              	.LBI10:
  62:armwave.c     **** {
 929              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU242
 930              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 931              		.loc 1 64 5 discriminator 3 view .LVU243
  65:armwave.c     ****     uint8_t *wave_base;
 932              		.loc 1 65 5 discriminator 3 view .LVU244
  66:armwave.c     ****     bufftyp_t *write_buffer_base;
 933              		.loc 1 66 5 discriminator 3 view .LVU245
  67:armwave.c     ****     bufftyp_t *write_buffer;
 934              		.loc 1 67 5 discriminator 3 view .LVU246
  68:armwave.c     **** 
 935              		.loc 1 68 5 discriminator 3 view .LVU247
  71:armwave.c     **** 
 936              		.loc 1 71 5 discriminator 3 view .LVU248
 937              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 938              		.loc 1 79 35 is_stmt 0 discriminator 3 view .LVU249
 939 03cc 0310A0E1 		mov	r1, r3	@ _147, _147
 940 03d0 18308DE5 		str	r3, [sp, #24]	@ _147, %sfp
 941              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 942              		.loc 1 71 65 discriminator 3 view .LVU250
 943 03d4 990203E0 		mul	r3, r9, r2	@ tmp224, _35, _11
 944              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 945              		.loc 1 71 147 discriminator 3 view .LVU251
 946 03d8 40E098E5 		ldr	lr, [r8, #64]	@ _39, g_armwave_state.bitdepth_height
 947              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 948              		.loc 1 79 5 discriminator 3 view .LVU252
 949 03dc 000051E3 		cmp	r1, #0	@ _147,
 950              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 951              		.loc 1 71 105 discriminator 3 view .LVU253
 952 03e0 2338A0E1 		lsr	r3, r3, #16	@ tmp225, tmp224,
 953              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 954              		.loc 1 71 40 discriminator 3 view .LVU254
 955 03e4 040098E5 		ldr	r0, [r8, #4]	@ _34, g_armwave_state.ch1_buffer
 956              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 957              		.loc 1 71 130 discriminator 3 view .LVU255
 958 03e8 9E0304E0 		mul	r4, lr, r3	@ _40, _39, tmp225
 959              	.LVL56:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 960              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU256
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 961              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU257
 962 03ec 4A0000DA 		ble	.L48		@,
 963              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 964              		.loc 1 80 81 view .LVU258
 965 03f0 341098E5 		ldr	r1, [r8, #52]	@ _42, g_armwave_state.wave_stride
 966 03f4 00005BE3 		cmp	fp, #0	@ _9,
 967              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 968              		.loc 1 80 36 view .LVU259
 969 03f8 143098E5 		ldr	r3, [r8, #20]	@ _41, g_armwave_state.wave_buffer
 970              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 971              		.loc 1 80 81 view .LVU260
 972 03fc 1C108DE5 		str	r1, [sp, #28]	@ _42, %sfp
 973 0400 4500000A 		beq	.L48		@,
 974 0404 023083E0 		add	r3, r3, r2	@ ivtmp.79, _41, _11
 975 0408 04308DE5 		str	r3, [sp, #4]	@ ivtmp.79, %sfp
 976 040c 8920A0E1 		lsl	r2, r9, #1	@ tmp278, _35,
 977              	.LVL57:
  80:armwave.c     **** 
 978              		.loc 1 80 81 view .LVU261
 979 0410 003063E2 		rsb	r3, r3, #0	@ ivtmp.80, ivtmp.79
 980 0414 00308DE5 		str	r3, [sp]	@ ivtmp.80, %sfp
 981 0418 093082E0 		add	r3, r2, r9	@ tmp269, tmp278, _35
 982 041c 0C308DE5 		str	r3, [sp, #12]	@ tmp269, %sfp
 983              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 984              		.loc 1 79 11 view .LVU262
 985 0420 0030A0E3 		mov	r3, #0	@ w,
 986 0424 20208DE5 		str	r2, [sp, #32]	@ tmp278, %sfp
 987 0428 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 988 042c 24A08DE5 		str	r10, [sp, #36]	@ yy, %sfp
 989              	.LVL58:
 990              	.L50:
  80:armwave.c     **** 
 991              		.loc 1 80 9 is_stmt 1 view .LVU263
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 992              		.loc 1 84 9 view .LVU264
 993              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 994              		.loc 1 79 11 is_stmt 0 view .LVU265
 995 0430 20C09DE5 		ldr	ip, [sp, #32]	@ ivtmp.75, %sfp
 996 0434 04A09DE5 		ldr	r10, [sp, #4]	@ ivtmp.72, %sfp
 997 0438 0010A0E3 		mov	r1, #0	@ ivtmp.73,
 998              	.LVL59:
 999              	.L49:
  87:armwave.c     **** 
 1000              		.loc 1 87 13 is_stmt 1 view .LVU266
 1001              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1002              		.loc 1 103 74 is_stmt 0 view .LVU267
 1003 043c 2128A0E1 		lsr	r2, r1, #16	@ tmp229, ivtmp.73,
 1004              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 1005              		.loc 1 87 18 view .LVU268
 1006 0440 04309AE4 		ldr	r3, [r10], #4	@ word, MEM[base: _301, offset: 0B]
 1007              	.LVL60:
  89:armwave.c     ****                 scale_value = word & 0xff;
 1008              		.loc 1 89 13 is_stmt 1 view .LVU269
  90:armwave.c     ****                 
 1009              		.loc 1 90 17 view .LVU270
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1010              		.loc 1 102 17 view .LVU271
 107:armwave.c     ****                 word >>= 8;
 1011              		.loc 1 107 17 view .LVU272
 1012              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1013              		.loc 1 107 47 is_stmt 0 view .LVU273
 1014 0444 9E4222E0 		mla	r2, lr, r2, r4	@ tmp231, _39, tmp229, _40
 1015              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1016              		.loc 1 103 34 view .LVU274
 1017 0448 011089E0 		add	r1, r9, r1	@ _106, _35, ivtmp.73
 1018              	.LVL61:
 1019              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1020              		.loc 1 107 47 view .LVU275
 1021 044c 7320E2E6 		uxtab	r2, r2, r3	@ tmp233, tmp231, word
 1022              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1023              		.loc 1 103 74 view .LVU276
 1024 0450 2158A0E1 		lsr	r5, r1, #16	@ tmp238, _106,
 1025              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1026              		.loc 1 107 47 view .LVU277
 1027 0454 8220A0E1 		lsl	r2, r2, #1	@ tmp234, tmp233,
 1028 0458 0C609DE5 		ldr	r6, [sp, #12]	@ tmp269, %sfp
 1029 045c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp240, _39, tmp238, _40
 1030              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1031              		.loc 1 108 22 view .LVU278
 1032 0460 2374A0E1 		lsr	r7, r3, #8	@ word, word,
 1033 0464 061081E0 		add	r1, r1, r6	@ ivtmp.73, _106, tmp269
 1034              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1035              		.loc 1 107 47 view .LVU279
 1036 0468 B26090E1 		ldrh	r6, [r0, r2]	@ *_91, *_91
 1037 046c 7750E5E6 		uxtab	r5, r5, r7	@ tmp243, tmp240, word
 1038              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1039              		.loc 1 103 74 view .LVU280
 1040 0470 2C78A0E1 		lsr	r7, ip, #16	@ tmp248, ivtmp.75,
 1041              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1042              		.loc 1 107 47 view .LVU281
 1043 0474 016086E2 		add	r6, r6, #1	@ tmp237, *_91,
 1044 0478 9E4727E0 		mla	r7, lr, r7, r4	@ tmp250, _39, tmp248, _40
 1045 047c B26080E1 		strh	r6, [r0, r2]	@ movhi	@ tmp237, *_91
 108:armwave.c     ****             }
 1046              		.loc 1 108 17 is_stmt 1 view .LVU282
 1047              	.LVL62:
  90:armwave.c     ****                 
 1048              		.loc 1 90 17 view .LVU283
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1049              		.loc 1 102 17 view .LVU284
 107:armwave.c     ****                 word >>= 8;
 1050              		.loc 1 107 17 view .LVU285
 1051              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1052              		.loc 1 103 34 is_stmt 0 view .LVU286
 1053 0480 0CC089E0 		add	ip, r9, ip	@ _150, _35, ivtmp.75
 1054              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1055              		.loc 1 108 22 view .LVU287
 1056 0484 2328A0E1 		lsr	r2, r3, #16	@ word, word,
 1057              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1058              		.loc 1 107 47 view .LVU288
 1059 0488 8550A0E1 		lsl	r5, r5, #1	@ tmp244, tmp243,
 1060 048c 7220E7E6 		uxtab	r2, r7, r2	@ tmp253, tmp250, word
 1061              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 1062              		.loc 1 103 74 view .LVU289
 1063 0490 2C78A0E1 		lsr	r7, ip, #16	@ tmp258, _150,
 1064              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1065              		.loc 1 107 47 view .LVU290
 1066 0494 B56090E1 		ldrh	r6, [r0, r5]	@ *_113, *_113
 1067              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****             }
 1068              		.loc 1 108 22 view .LVU291
 1069 0498 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1070              	.LVL63:
 1071              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1072              		.loc 1 107 47 view .LVU292
 1073 049c 9E3723E0 		mla	r3, lr, r7, r3	@ tmp261, _39, tmp258, word
 1074 04a0 8220A0E1 		lsl	r2, r2, #1	@ tmp254, tmp253,
 1075 04a4 016086E2 		add	r6, r6, #1	@ tmp247, *_113,
 1076 04a8 B56080E1 		strh	r6, [r0, r5]	@ movhi	@ tmp247, *_113
 108:armwave.c     ****             }
 1077              		.loc 1 108 17 is_stmt 1 view .LVU293
 1078              	.LVL64:
  90:armwave.c     ****                 
 1079              		.loc 1 90 17 view .LVU294
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1080              		.loc 1 102 17 view .LVU295
 107:armwave.c     ****                 word >>= 8;
 1081              		.loc 1 107 17 view .LVU296
 1082              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1083              		.loc 1 107 47 is_stmt 0 view .LVU297
 1084 04ac 043083E0 		add	r3, r3, r4	@ tmp262, tmp261, _40
 1085 04b0 B25090E1 		ldrh	r5, [r0, r2]	@ *_135, *_135
 1086 04b4 8330A0E1 		lsl	r3, r3, #1	@ tmp263, tmp262,
 1087 04b8 0C609DE5 		ldr	r6, [sp, #12]	@ tmp269, %sfp
 1088 04bc 015085E2 		add	r5, r5, #1	@ tmp257, *_135,
 1089 04c0 B25080E1 		strh	r5, [r0, r2]	@ movhi	@ tmp257, *_135
 108:armwave.c     ****             }
 1090              		.loc 1 108 17 is_stmt 1 view .LVU298
 1091              	.LVL65:
  90:armwave.c     ****                 
 1092              		.loc 1 90 17 view .LVU299
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1093              		.loc 1 102 17 view .LVU300
 107:armwave.c     ****                 word >>= 8;
 1094              		.loc 1 107 17 view .LVU301
 1095              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1096              		.loc 1 84 9 is_stmt 0 view .LVU302
 1097 04c4 00509DE5 		ldr	r5, [sp]	@ ivtmp.80, %sfp
 1098              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1099              		.loc 1 107 47 view .LVU303
 1100 04c8 B32090E1 		ldrh	r2, [r0, r3]	@ *_157, *_157
 1101              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1102              		.loc 1 84 9 view .LVU304
 1103 04cc 0A5085E0 		add	r5, r5, r10	@ tmp270, ivtmp.80, ivtmp.72
 1104 04d0 05005BE1 		cmp	fp, r5	@ _9, tmp270
 1105              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 1106              		.loc 1 107 47 view .LVU305
 1107 04d4 012082E2 		add	r2, r2, #1	@ tmp266, *_157,
 1108 04d8 06C08CE0 		add	ip, ip, r6	@ ivtmp.75, _150, tmp269
 1109              	.LVL66:
 107:armwave.c     ****                 word >>= 8;
 1110              		.loc 1 107 47 view .LVU306
 1111 04dc B32080E1 		strh	r2, [r0, r3]	@ movhi	@ tmp266, *_157
 108:armwave.c     ****             }
 1112              		.loc 1 108 17 is_stmt 1 view .LVU307
 1113              	.LVL67:
 1114              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1115              		.loc 1 84 9 is_stmt 0 view .LVU308
 1116 04e0 D5FFFF8A 		bhi	.L49		@,
 1117              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1118              		.loc 1 79 44 view .LVU309
 1119 04e4 08309DE5 		ldr	r3, [sp, #8]	@ w, %sfp
 1120              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1121              		.loc 1 79 5 view .LVU310
 1122 04e8 18209DE5 		ldr	r2, [sp, #24]	@ _147, %sfp
 1123              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1124              		.loc 1 79 44 view .LVU311
 1125 04ec 013083E2 		add	r3, r3, #1	@ w, w,
 1126              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1127              		.loc 1 79 5 view .LVU312
 1128 04f0 020053E1 		cmp	r3, r2	@ w, _147
 1129              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1130              		.loc 1 79 44 view .LVU313
 1131 04f4 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 1132              	.LVL68:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1133              		.loc 1 79 44 view .LVU314
 1134 04f8 04209DE5 		ldr	r2, [sp, #4]	@ ivtmp.79, %sfp
 1135 04fc 1C309DE5 		ldr	r3, [sp, #28]	@ _42, %sfp
 1136              	.LVL69:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1137              		.loc 1 79 44 view .LVU315
 1138 0500 032082E0 		add	r2, r2, r3	@ ivtmp.79, ivtmp.79, _42
 1139 0504 04208DE5 		str	r2, [sp, #4]	@ ivtmp.79, %sfp
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1140              		.loc 1 79 44 view .LVU316
 1141 0508 00209DE5 		ldr	r2, [sp]	@ ivtmp.80, %sfp
 1142 050c 033042E0 		sub	r3, r2, r3	@ ivtmp.80, ivtmp.80, _42
 1143 0510 00308DE5 		str	r3, [sp]	@ ivtmp.80, %sfp
 1144              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1145              		.loc 1 79 5 view .LVU317
 1146 0514 C5FFFF1A 		bne	.L50		@,
 1147 0518 24A09DE5 		ldr	r10, [sp, #36]	@ yy, %sfp
 1148              	.LVL70:
 1149              	.L48:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1150              		.loc 1 79 5 view .LVU318
 1151              	.LBE12:
 1152              	.LBE13:
 190:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1153              		.loc 1 190 9 is_stmt 1 view .LVU319
 1154              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1155              		.loc 1 185 51 is_stmt 0 view .LVU320
 1156 051c 0B10A0E1 		mov	r1, fp	@, _9
 1157 0520 4C0098E5 		ldr	r0, [r8, #76]	@, g_armwave_state.wave_length
 1158              	.LVL71:
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1159              		.loc 1 185 51 view .LVU321
 1160 0524 FEFFFFEB 		bl	__aeabi_idiv		@
 1161              	.LVL72:
 1162              	@ armwave.c:190:         xx_rem -= g_armwave_state.slice_height;
 1163              		.loc 1 190 16 view .LVU322
 1164 0528 10309DE5 		ldr	r3, [sp, #16]	@ xx_rem, %sfp
 1165              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1166              		.loc 1 185 86 view .LVU323
 1167 052c 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 1168              	@ armwave.c:190:         xx_rem -= g_armwave_state.slice_height;
 1169              		.loc 1 190 16 view .LVU324
 1170 0530 0B3043E0 		sub	r3, r3, fp	@ xx_rem, xx_rem, _9
 1171 0534 10308DE5 		str	r3, [sp, #16]	@ xx_rem, %sfp
 1172              	.LVL73:
 191:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1173              		.loc 1 191 9 is_stmt 1 view .LVU325
 1174              	@ armwave.c:191:         ypos += g_armwave_state.slice_height;
 1175              		.loc 1 191 14 is_stmt 0 view .LVU326
 1176 0538 14309DE5 		ldr	r3, [sp, #20]	@ ypos, %sfp
 1177              	.LVL74:
 1178              		.loc 1 191 14 view .LVU327
 1179 053c 0B3083E0 		add	r3, r3, fp	@ ypos, ypos, _9
 1180 0540 14308DE5 		str	r3, [sp, #20]	@ ypos, %sfp
 1181              	.LVL75:
 1182              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1183              		.loc 1 185 5 view .LVU328
 1184 0544 0A0050E1 		cmp	r0, r10	@, yy
 1185 0548 96FFFF8A 		bhi	.L51		@,
 1186 054c 0340A0E1 		mov	r4, r3	@ ypos, ypos
 1187              	.LVL76:
 1188              	.L47:
 192:armwave.c     ****     }
 193:armwave.c     **** 
 194:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, ypos, g_armwave_state.slice_height);
 1189              		.loc 1 194 5 is_stmt 1 view .LVU329
 1190 0550 0A10A0E1 		mov	r1, r10	@, yy
 1191 0554 0B30A0E1 		mov	r3, fp	@, _9
 1192 0558 0420A0E1 		mov	r2, r4	@, ypos
 1193 055c 28009FE5 		ldr	r0, .L60+4	@,
 1194 0560 FEFFFFEB 		bl	printf		@
 1195              	.LVL77:
 195:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1196              		.loc 1 195 5 view .LVU330
 1197 0564 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 1198 0568 0400A0E1 		mov	r0, r4	@, ypos
 1199              	@ armwave.c:196: }
 196:armwave.c     **** }
 1200              		.loc 1 196 1 is_stmt 0 view .LVU331
 1201 056c 2CD08DE2 		add	sp, sp, #44	@,,
 1202              		.cfi_remember_state
 1203              		.cfi_def_cfa_offset 36
 1204              		@ sp needed	@
 1205 0570 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1206              		.cfi_restore 14
 1207              		.cfi_restore 11
 1208              		.cfi_restore 10
 1209              		.cfi_restore 9
 1210              		.cfi_restore 8
 1211              		.cfi_restore 7
 1212              		.cfi_restore 6
 1213              		.cfi_restore 5
 1214              		.cfi_restore 4
 1215              		.cfi_def_cfa_offset 0
 1216              	@ armwave.c:195:     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 195:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1217              		.loc 1 195 5 view .LVU332
 1218 0574 FEFFFFEA 		b	render_nonaa_to_buffer_1ch_slice		@
 1219              	.LVL78:
 1220              	.L52:
 1221              		.cfi_restore_state
 1222              	@ armwave.c:181:     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 181:armwave.c     **** 
 1223              		.loc 1 181 52 view .LVU333
 1224 0578 14008DE5 		str	r0, [sp, #20]	@ ypos, %sfp
 1225              	@ armwave.c:185:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 185:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1226              		.loc 1 185 12 view .LVU334
 1227 057c 00A0A0E1 		mov	r10, r0	@ yy, ypos
 1228 0580 0040A0E1 		mov	r4, r0	@ ypos, ypos
 1229 0584 F1FFFFEA 		b	.L47		@
 1230              	.L61:
 1231              		.align	2
 1232              	.L60:
 1233 0588 00000000 		.word	g_armwave_state
 1234 058c 20000000 		.word	.LC2
 1235              		.cfi_endproc
 1236              	.LFE61:
 1238              		.align	2
 1239              		.global	armwave_setup_render
 1240              		.syntax unified
 1241              		.arm
 1242              		.fpu vfp
 1244              	armwave_setup_render:
 1245              	.LVL79:
 1246              	.LFB62:
 197:armwave.c     **** 
 198:armwave.c     **** /*
 199:armwave.c     ****  * Setup the renderer with passed parameters.
 200:armwave.c     ****  */
 201:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 202:armwave.c     **** {
 1247              		.loc 1 202 1 is_stmt 1 view -0
 1248              		.cfi_startproc
 1249              		@ args = 12, pretend = 0, frame = 0
 1250              		@ frame_needed = 0, uses_anonymous_args = 0
 203:armwave.c     ****     uint32_t length, xx;
 1251              		.loc 1 203 5 view .LVU336
 204:armwave.c     ****     float points_per_pixel;
 1252              		.loc 1 204 5 view .LVU337
 205:armwave.c     **** 
 206:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1253              		.loc 1 206 5 view .LVU338
 1254              	@ armwave.c:202: {
 202:armwave.c     ****     uint32_t length, xx;
 1255              		.loc 1 202 1 is_stmt 0 view .LVU339
 1256 0590 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1257              		.cfi_def_cfa_offset 32
 1258              		.cfi_offset 4, -32
 1259              		.cfi_offset 5, -28
 1260              		.cfi_offset 6, -24
 1261              		.cfi_offset 7, -20
 1262              		.cfi_offset 8, -16
 1263              		.cfi_offset 9, -12
 1264              		.cfi_offset 10, -8
 1265              		.cfi_offset 14, -4
 1266 0594 028B2DED 		vpush.64	{d8}	@
 1267              		.cfi_def_cfa_offset 40
 1268              		.cfi_offset 80, -40
 1269              		.cfi_offset 81, -36
 1270 0598 0050A0E1 		mov	r5, r0	@ start_point, start_point
 1271 059c 0170A0E1 		mov	r7, r1	@ end_point, end_point
 1272 05a0 0290A0E1 		mov	r9, r2	@ waves_max, waves_max
 1273 05a4 10D04DE2 		sub	sp, sp, #16	@,,
 1274              		.cfi_def_cfa_offset 56
 1275              	@ armwave.c:202: {
 202:armwave.c     ****     uint32_t length, xx;
 1276              		.loc 1 202 1 view .LVU340
 1277 05a8 38608DE2 		add	r6, sp, #56	@,,
 1278 05ac 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 1279 05b0 401196E8 		ldm	r6, {r6, r8, ip}	@,,,
 1280              	@ armwave.c:206:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1281              		.loc 1 206 5 view .LVU341
 1282 05b4 00308DE5 		str	r3, [sp]	@ wave_stride,
 1283 05b8 0230A0E1 		mov	r3, r2	@, waves_max
 1284              	.LVL80:
 1285              		.loc 1 206 5 view .LVU342
 1286 05bc 40118DE9 		stmib	sp, {r6, r8, ip}	@,,,
 1287 05c0 0120A0E1 		mov	r2, r1	@, end_point
 1288              	.LVL81:
 1289              		.loc 1 206 5 view .LVU343
 1290 05c4 0010A0E1 		mov	r1, r0	@, start_point
 1291              	.LVL82:
 1292              		.loc 1 206 5 view .LVU344
 1293 05c8 CC019FE5 		ldr	r0, .L76+8	@,
 1294              	.LVL83:
 1295              		.loc 1 206 5 view .LVU345
 1296 05cc FEFFFFEB 		bl	printf		@
 1297              	.LVL84:
 207:armwave.c     **** 
 208:armwave.c     ****     // TODO these asserts should instead raise PyExc
 209:armwave.c     ****     assert(start_point < end_point);
 1298              		.loc 1 209 5 is_stmt 1 view .LVU346
 1299 05d0 070055E1 		cmp	r5, r7	@ start_point, end_point
 1300 05d4 5F00002A 		bcs	.L73		@,
 210:armwave.c     **** 
 211:armwave.c     ****     /*
 212:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 213:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 214:armwave.c     ****     if(target_height == 256) {
 215:armwave.c     ****         g_armwave_state.row_shift = 8;
 216:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 217:armwave.c     ****     } else if(target_height == 512) {
 218:armwave.c     ****         g_armwave_state.row_shift = 9;
 219:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 220:armwave.c     ****     } else if(target_height == 1024) {
 221:armwave.c     ****         g_armwave_state.row_shift = 10;
 222:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 223:armwave.c     ****     } else if(target_height == 2048) {
 224:armwave.c     ****         g_armwave_state.row_shift = 11;
 225:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 226:armwave.c     ****     }
 227:armwave.c     ****     */
 228:armwave.c     **** 
 229:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 230:armwave.c     ****     g_armwave_state.xstride = target_height;
 1301              		.loc 1 230 5 view .LVU347
 1302              	@ armwave.c:231:     g_armwave_state.vscale_frac = target_height / 255.0f;
 231:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1303              		.loc 1 231 49 is_stmt 0 view .LVU348
 1304 05d8 908A07EE 		vmov	s15, r8	@ int	@ target_height, target_height
 1305 05dc 6C7A9FED 		vldr.32	s14, .L76	@ tmp171,
 1306              	@ armwave.c:241:     g_armwave_state.wave_length = end_point - start_point;
 232:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 233:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 234:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 235:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 236:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 237:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 238:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 239:armwave.c     ****     g_armwave_state.target_width = target_width;
 240:armwave.c     ****     g_armwave_state.target_height = target_height;
 241:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1307              		.loc 1 241 45 view .LVU349
 1308 05e0 055047E0 		sub	r5, r7, r5	@ _13, end_point, start_point
 1309              	.LVL85:
 1310              	@ armwave.c:238:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 1311              		.loc 1 238 90 view .LVU350
 1312 05e4 047086E2 		add	r7, r6, #4	@ tmp182, target_width,
 1313              	.LVL86:
 1314              	@ armwave.c:231:     g_armwave_state.vscale_frac = target_height / 255.0f;
 231:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1315              		.loc 1 231 49 view .LVU351
 1316 05e8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp170, target_height
 1317              	@ armwave.c:230:     g_armwave_state.xstride = target_height;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1318              		.loc 1 230 29 view .LVU352
 1319 05ec AC419FE5 		ldr	r4, .L76+12	@ tmp236,
 1320              	@ armwave.c:236:     g_armwave_state.size = target_height * target_width;
 236:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1321              		.loc 1 236 42 view .LVU353
 1322 05f0 980602E0 		mul	r2, r8, r6	@ tmp179, target_height, target_width
 1323              	@ armwave.c:238:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 1324              		.loc 1 238 95 view .LVU354
 1325 05f4 877387E0 		add	r7, r7, r7, lsl #7	@ tmp185, tmp182, tmp182,
 1326              	@ armwave.c:237:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 237:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1327              		.loc 1 237 37 view .LVU355
 1328 05f8 023CA0E3 		mov	r3, #512	@ tmp181,
 1329              	@ armwave.c:238:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 1330              		.loc 1 238 95 view .LVU356
 1331 05fc 8771A0E1 		lsl	r7, r7, #3	@ tmp186, tmp185,
 1332              	@ armwave.c:245:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 242:armwave.c     **** 
 243:armwave.c     ****     // Calculate compound scaler
 244:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 245:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1333              		.loc 1 245 40 view .LVU357
 1334 0600 0510A0E1 		mov	r1, r5	@, _13
 1335              	@ armwave.c:231:     g_armwave_state.vscale_frac = target_height / 255.0f;
 231:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1336              		.loc 1 231 49 view .LVU358
 1337 0604 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp170, tmp171
 1338              	@ armwave.c:236:     g_armwave_state.size = target_height * target_width;
 236:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1339              		.loc 1 236 26 view .LVU359
 1340 0608 542084E5 		str	r2, [r4, #84]	@ tmp179, g_armwave_state.size
 1341              	@ armwave.c:237:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 237:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1342              		.loc 1 237 37 view .LVU360
 1343 060c 403084E5 		str	r3, [r4, #64]	@ tmp181, g_armwave_state.bitdepth_height
 1344              	@ armwave.c:230:     g_armwave_state.xstride = target_height;
 230:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1345              		.loc 1 230 29 view .LVU361
 1346 0610 2C8084E5 		str	r8, [r4, #44]	@ target_height, g_armwave_state.xstride
 231:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1347              		.loc 1 231 5 is_stmt 1 view .LVU362
 1348              	@ armwave.c:233:     g_armwave_state.wave_stride = wave_stride;
 233:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1349              		.loc 1 233 33 is_stmt 0 view .LVU363
 1350 0614 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1351              	@ armwave.c:234:     g_armwave_state.waves_max = waves_max;
 234:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1352              		.loc 1 234 31 view .LVU364
 1353 0618 3C9084E5 		str	r9, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1354              	@ armwave.c:235:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 235:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1355              		.loc 1 235 27 view .LVU365
 1356 061c 389084E5 		str	r9, [r4, #56]	@ waves_max, g_armwave_state.waves
 1357              	@ armwave.c:239:     g_armwave_state.target_width = target_width;
 239:armwave.c     ****     g_armwave_state.target_height = target_height;
 1358              		.loc 1 239 34 view .LVU366
 1359 0620 586084E5 		str	r6, [r4, #88]	@ target_width, g_armwave_state.target_width
 1360              	@ armwave.c:240:     g_armwave_state.target_height = target_height;
 240:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1361              		.loc 1 240 35 view .LVU367
 1362 0624 5C8084E5 		str	r8, [r4, #92]	@ target_height, g_armwave_state.target_height
 1363              	@ armwave.c:241:     g_armwave_state.wave_length = end_point - start_point;
 241:armwave.c     **** 
 1364              		.loc 1 241 33 view .LVU368
 1365 0628 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1366              	@ armwave.c:245:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1367              		.loc 1 245 40 view .LVU369
 1368 062c 0600A0E1 		mov	r0, r6	@, target_width
 1369              	@ armwave.c:238:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 1370              		.loc 1 238 34 view .LVU370
 1371 0630 507084E5 		str	r7, [r4, #80]	@ tmp186, g_armwave_state.ch_buff_size
 1372              	@ armwave.c:232:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 232:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1373              		.loc 1 232 30 view .LVU371
 1374 0634 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp174, _3
 1375              	@ armwave.c:231:     g_armwave_state.vscale_frac = target_height / 255.0f;
 231:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1376              		.loc 1 231 33 view .LVU372
 1377 0638 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 232:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1378              		.loc 1 232 5 is_stmt 1 view .LVU373
 1379              	@ armwave.c:232:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 232:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1380              		.loc 1 232 30 is_stmt 0 view .LVU374
 1381 063c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp174, g_armwave_state.vscale
 233:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1382              		.loc 1 233 5 is_stmt 1 view .LVU375
 234:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1383              		.loc 1 234 5 view .LVU376
 235:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1384              		.loc 1 235 5 view .LVU377
 236:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1385              		.loc 1 236 5 view .LVU378
 237:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1386              		.loc 1 237 5 view .LVU379
 238:armwave.c     ****     g_armwave_state.target_width = target_width;
 1387              		.loc 1 238 5 view .LVU380
 239:armwave.c     ****     g_armwave_state.target_height = target_height;
 1388              		.loc 1 239 5 view .LVU381
 240:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1389              		.loc 1 240 5 view .LVU382
 241:armwave.c     **** 
 1390              		.loc 1 241 5 view .LVU383
 244:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1391              		.loc 1 244 5 view .LVU384
 1392              	@ armwave.c:245:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 1393              		.loc 1 245 40 is_stmt 0 view .LVU385
 1394 0640 FEFFFFEB 		bl	__aeabi_idiv		@
 1395              	.LVL87:
 1396              	@ armwave.c:247:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 246:armwave.c     **** 
 247:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1397              		.loc 1 247 5 view .LVU386
 1398 0644 0138A0E3 		mov	r3, #65536	@ tmp197,
 1399 0648 08308DE5 		str	r3, [sp, #8]	@ tmp197,
 1400 064c 0710A0E1 		mov	r1, r7	@, tmp186
 1401 0650 04508DE5 		str	r5, [sp, #4]	@ _13,
 1402 0654 00608DE5 		str	r6, [sp]	@ target_width,
 1403              	@ armwave.c:245:         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_
 245:armwave.c     **** 
 1404              		.loc 1 245 72 view .LVU387
 1405 0658 00C8A0E1 		lsl	ip, r0, #16	@ _17,,
 1406              	@ armwave.c:247:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1407              		.loc 1 247 5 view .LVU388
 1408 065c 0C30A0E1 		mov	r3, ip	@, _17
 1409 0660 0C20A0E1 		mov	r2, ip	@, tmp3
 1410 0664 38019FE5 		ldr	r0, .L76+16	@,
 1411              	@ armwave.c:244:     g_armwave_state.cmp_x_bitdepth_scale = \
 244:armwave.c     ****         ((g_armwave_state.target_width / g_armwave_state.wave_length)) * (1 << AM_XCOORD_MULT_SHIFT
 1412              		.loc 1 244 42 view .LVU389
 1413 0668 24C084E5 		str	ip, [r4, #36]	@ _17, g_armwave_state.cmp_x_bitdepth_scale
 1414              		.loc 1 247 5 is_stmt 1 view .LVU390
 1415 066c FEFFFFEB 		bl	printf		@
 1416              	.LVL88:
 248:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 249:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 250:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 251:armwave.c     **** 
 252:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 253:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 254:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 255:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1417              		.loc 1 255 5 view .LVU391
 1418              	@ armwave.c:257:     if(g_armwave_state.ch1_buffer != NULL)
 256:armwave.c     **** 
 257:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1419              		.loc 1 257 23 is_stmt 0 view .LVU392
 1420 0670 040094E5 		ldr	r0, [r4, #4]	@ _18, g_armwave_state.ch1_buffer
 1421              	@ armwave.c:255:     g_armwave_state.slice_height = 64; // 64;  
 255:armwave.c     **** 
 1422              		.loc 1 255 34 view .LVU393
 1423 0674 4030A0E3 		mov	r3, #64	@ tmp199,
 1424              	@ armwave.c:257:     if(g_armwave_state.ch1_buffer != NULL)
 1425              		.loc 1 257 7 view .LVU394
 1426 0678 000050E3 		cmp	r0, #0	@ _18,
 1427              	@ armwave.c:255:     g_armwave_state.slice_height = 64; // 64;  
 255:armwave.c     **** 
 1428              		.loc 1 255 34 view .LVU395
 1429 067c 443084E5 		str	r3, [r4, #68]	@ tmp199, g_armwave_state.slice_height
 1430              		.loc 1 257 5 is_stmt 1 view .LVU396
 1431              	@ armwave.c:257:     if(g_armwave_state.ch1_buffer != NULL)
 1432              		.loc 1 257 7 is_stmt 0 view .LVU397
 1433 0680 0000000A 		beq	.L64		@,
 258:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1434              		.loc 1 258 9 is_stmt 1 view .LVU398
 1435 0684 FEFFFFEB 		bl	free		@
 1436              	.LVL89:
 1437              	.L64:
 259:armwave.c     **** 
 260:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1438              		.loc 1 260 5 view .LVU399
 1439              	@ armwave.c:260:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1440              		.loc 1 260 34 is_stmt 0 view .LVU400
 1441 0688 0110A0E3 		mov	r1, #1	@,
 1442 068c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1443 0690 FEFFFFEB 		bl	calloc		@
 1444              	.LVL90:
 1445              	@ armwave.c:262:     assert(g_armwave_state.ch1_buffer != NULL);
 261:armwave.c     **** 
 262:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1446              		.loc 1 262 5 view .LVU401
 1447 0694 000050E3 		cmp	r0, #0	@ _21,
 1448              	@ armwave.c:260:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 260:armwave.c     **** 
 1449              		.loc 1 260 34 view .LVU402
 1450 0698 0070A0E1 		mov	r7, r0	@ _21,
 1451              	@ armwave.c:260:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 260:armwave.c     **** 
 1452              		.loc 1 260 32 view .LVU403
 1453 069c 040084E5 		str	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1454              		.loc 1 262 5 is_stmt 1 view .LVU404
 1455 06a0 3600000A 		beq	.L74		@,
 263:armwave.c     **** 
 264:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 265:armwave.c     ****     length = end_point - start_point;
 1456              		.loc 1 265 5 view .LVU405
 1457              	.LVL91:
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1458              		.loc 1 266 5 view .LVU406
 1459              	@ armwave.c:266:     points_per_pixel = length / ((float)(target_width));
 1460              		.loc 1 266 34 is_stmt 0 view .LVU407
 1461 06a4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1462              	@ armwave.c:266:     points_per_pixel = length / ((float)(target_width));
 1463              		.loc 1 266 22 view .LVU408
 1464 06a8 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1465              	@ armwave.c:267:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1466              		.loc 1 267 60 view .LVU409
 1467 06ac 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp243, g_armwave_state.slice_height
 1468              	@ armwave.c:268:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1469              		.loc 1 268 40 view .LVU410
 1470 06b0 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1471              	@ armwave.c:266:     points_per_pixel = length / ((float)(target_width));
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1472              		.loc 1 266 34 view .LVU411
 1473 06b4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp210, target_width
 1474              	@ armwave.c:266:     points_per_pixel = length / ((float)(target_width));
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1475              		.loc 1 266 22 view .LVU412
 1476 06b8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp209, _13
 1477              	@ armwave.c:267:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1478              		.loc 1 267 60 view .LVU413
 1479 06bc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp213, tmp243
 1480              	@ armwave.c:266:     points_per_pixel = length / ((float)(target_width));
 266:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1481              		.loc 1 266 22 view .LVU414
 1482 06c0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp209, tmp210
 1483              	.LVL92:
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1484              		.loc 1 267 5 is_stmt 1 view .LVU415
 1485              	@ armwave.c:267:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1486              		.loc 1 267 60 is_stmt 0 view .LVU416
 1487 06c4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp215, tmp213, points_per_pixel
 1488              	@ armwave.c:267:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 267:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1489              		.loc 1 267 41 view .LVU417
 1490 06c8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp216, tmp215
 1491 06cc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp216, g_armwave_state.slice_record_height
 1492              		.loc 1 268 5 is_stmt 1 view .LVU418
 1493              	@ armwave.c:268:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1494              		.loc 1 268 40 is_stmt 0 view .LVU419
 1495 06d0 FEFFFFEB 		bl	malloc		@
 1496              	.LVL93:
 1497              	@ armwave.c:270:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 269:armwave.c     **** 
 270:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1498              		.loc 1 270 5 view .LVU420
 1499 06d4 000050E3 		cmp	r0, #0	@ _29,
 1500              	@ armwave.c:268:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1501              		.loc 1 268 40 view .LVU421
 1502 06d8 0060A0E1 		mov	r6, r0	@ _29,
 1503              	@ armwave.c:268:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 268:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1504              		.loc 1 268 38 view .LVU422
 1505 06dc 840084E5 		str	r0, [r4, #132]	@ _29, g_armwave_state.xcoord_to_xpixel
 1506              		.loc 1 270 5 is_stmt 1 view .LVU423
 1507 06e0 2100000A 		beq	.L75		@,
 1508              	@ armwave.c:273:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 271:armwave.c     **** 
 272:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 273:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1509              		.loc 1 273 54 is_stmt 0 view .LVU424
 1510 06e4 2B7ADFED 		vldr.32	s15, .L76+4	@ tmp224,
 1511 06e8 020040E2 		sub	r0, r0, #2	@ ivtmp.86, _29,
 1512              	@ armwave.c:272:     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1513              		.loc 1 272 12 view .LVU425
 1514 06ec 0030A0E3 		mov	r3, #0	@ xx,
 1515              	@ armwave.c:273:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1516              		.loc 1 273 54 view .LVU426
 1517 06f0 887A87EE 		vdiv.f32	s14, s15, s16	@ _30, tmp224, points_per_pixel
 1518              	.L67:
 1519              	.LVL94:
 1520              		.loc 1 273 9 is_stmt 1 discriminator 3 view .LVU427
 1521              	@ armwave.c:273:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1522              		.loc 1 273 74 is_stmt 0 discriminator 3 view .LVU428
 1523 06f4 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1524              	@ armwave.c:272:     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1525              		.loc 1 272 32 discriminator 3 view .LVU429
 1526 06f8 013083E2 		add	r3, r3, #1	@ xx, xx,
 1527              	.LVL95:
 1528              	@ armwave.c:272:     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1529              		.loc 1 272 5 discriminator 3 view .LVU430
 1530 06fc 030055E1 		cmp	r5, r3	@ _13, xx
 1531              	@ armwave.c:273:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1532              		.loc 1 273 74 discriminator 3 view .LVU431
 1533 0700 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, xx
 1534 0704 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, _30
 1535              	@ armwave.c:273:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1536              		.loc 1 273 46 discriminator 3 view .LVU432
 1537 0708 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp227, tmp226
 1538 070c 902A17EE 		vmov	r2, s15	@ int	@ tmp227, tmp227
 1539 0710 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp227, MEM[base: _99, offset: 0B]
 1540              	@ armwave.c:272:     for(xx = 0; xx < length; xx++) {
 272:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1541              		.loc 1 272 5 discriminator 3 view .LVU433
 1542 0714 F6FFFF1A 		bne	.L67		@,
 274:armwave.c     **** 
 275:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 276:armwave.c     ****     }
 277:armwave.c     **** 
 278:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1543              		.loc 1 278 5 is_stmt 1 view .LVU434
 1544              	@ armwave.c:278:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1545              		.loc 1 278 34 is_stmt 0 view .LVU435
 1546 0718 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1547 071c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1548 0720 FEFFFFEB 		bl	malloc		@
 1549              	.LVL96:
 1550              	@ armwave.c:280:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 279:armwave.c     **** 
 280:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1551              		.loc 1 280 5 view .LVU436
 1552 0724 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1553 0728 0620A0E1 		mov	r2, r6	@, _29
 1554 072c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1555 0730 0710A0E1 		mov	r1, r7	@, _21
 1556              	@ armwave.c:278:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 278:armwave.c     **** 
 1557              		.loc 1 278 34 view .LVU437
 1558 0734 00C0A0E1 		mov	ip, r0	@ tmp231,
 1559              	@ armwave.c:280:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1560              		.loc 1 280 5 view .LVU438
 1561 0738 0030A0E1 		mov	r3, r0	@, tmp231
 1562 073c 64009FE5 		ldr	r0, .L76+20	@,
 1563              	@ armwave.c:278:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 278:armwave.c     **** 
 1564              		.loc 1 278 32 view .LVU439
 1565 0740 68C084E5 		str	ip, [r4, #104]	@ tmp231, g_armwave_state.out_pixbuf
 1566              		.loc 1 280 5 is_stmt 1 view .LVU440
 1567 0744 FEFFFFEB 		bl	printf		@
 1568              	.LVL97:
 281:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 282:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 283:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 284:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 285:armwave.c     **** 
 286:armwave.c     ****     malloc_stats();
 1569              		.loc 1 286 5 view .LVU441
 1570              	@ armwave.c:287: }
 287:armwave.c     **** }
 1571              		.loc 1 287 1 is_stmt 0 view .LVU442
 1572 0748 10D08DE2 		add	sp, sp, #16	@,,
 1573              		.cfi_remember_state
 1574              		.cfi_def_cfa_offset 40
 1575              		@ sp needed	@
 1576 074c 028BBDEC 		vldm	sp!, {d8}	@
 1577              		.cfi_restore 80
 1578              		.cfi_restore 81
 1579              		.cfi_def_cfa_offset 32
 1580              	.LVL98:
 1581              		.loc 1 287 1 view .LVU443
 1582 0750 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1583              		.cfi_restore 14
 1584              		.cfi_restore 10
 1585              		.cfi_restore 9
 1586              		.cfi_restore 8
 1587              		.cfi_restore 7
 1588              		.cfi_restore 6
 1589              		.cfi_restore 5
 1590              		.cfi_restore 4
 1591              		.cfi_def_cfa_offset 0
 1592              	.LVL99:
 1593              	@ armwave.c:286:     malloc_stats();
 286:armwave.c     **** }
 1594              		.loc 1 286 5 view .LVU444
 1595 0754 FEFFFFEA 		b	malloc_stats		@
 1596              	.LVL100:
 1597              	.L73:
 1598              		.cfi_restore_state
 209:armwave.c     **** 
 1599              		.loc 1 209 5 is_stmt 1 discriminator 1 view .LVU445
 1600 0758 4C309FE5 		ldr	r3, .L76+24	@,
 1601 075c D120A0E3 		mov	r2, #209	@,
 1602 0760 48109FE5 		ldr	r1, .L76+28	@,
 1603 0764 48009FE5 		ldr	r0, .L76+32	@,
 1604 0768 FEFFFFEB 		bl	__assert_fail		@
 1605              	.LVL101:
 1606              	.L75:
 270:armwave.c     **** 
 1607              		.loc 1 270 5 discriminator 1 view .LVU446
 1608 076c 38309FE5 		ldr	r3, .L76+24	@,
 1609 0770 40209FE5 		ldr	r2, .L76+36	@,
 1610 0774 34109FE5 		ldr	r1, .L76+28	@,
 1611 0778 3C009FE5 		ldr	r0, .L76+40	@,
 1612 077c FEFFFFEB 		bl	__assert_fail		@
 1613              	.LVL102:
 1614              	.L74:
 262:armwave.c     **** 
 1615              		.loc 1 262 5 discriminator 1 view .LVU447
 1616 0780 24309FE5 		ldr	r3, .L76+24	@,
 1617 0784 34209FE5 		ldr	r2, .L76+44	@,
 1618 0788 20109FE5 		ldr	r1, .L76+28	@,
 1619 078c 30009FE5 		ldr	r0, .L76+48	@,
 1620 0790 FEFFFFEB 		bl	__assert_fail		@
 1621              	.LVL103:
 1622              	.L77:
 1623              		.align	2
 1624              	.L76:
 1625 0794 00007F43 		.word	1132396544
 1626 0798 0000803F 		.word	1065353216
 1627 079c 4C000000 		.word	.LC3
 1628 07a0 00000000 		.word	g_armwave_state
 1629 07a4 9C000000 		.word	.LC6
 1630 07a8 4C010000 		.word	.LC9
 1631 07ac 00000000 		.word	.LANCHOR0
 1632 07b0 78000000 		.word	.LC4
 1633 07b4 84000000 		.word	.LC5
 1634 07b8 0E010000 		.word	270
 1635 07bc 20010000 		.word	.LC8
 1636 07c0 06010000 		.word	262
 1637 07c4 FC000000 		.word	.LC7
 1638              		.cfi_endproc
 1639              	.LFE62:
 1641              		.align	2
 1642              		.global	armwave_set_wave_pointer
 1643              		.syntax unified
 1644              		.arm
 1645              		.fpu vfp
 1647              	armwave_set_wave_pointer:
 1648              	.LVL104:
 1649              	.LFB63:
 288:armwave.c     **** 
 289:armwave.c     **** /*
 290:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 291:armwave.c     ****  * in the future.
 292:armwave.c     ****  */
 293:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 294:armwave.c     **** {
 1650              		.loc 1 294 1 view -0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
 295:armwave.c     ****     assert(wave_buffer != NULL);
 1654              		.loc 1 295 5 view .LVU449
 1655 07c8 000050E3 		cmp	r0, #0	@ wave_buffer
 1656              		.loc 1 295 5 is_stmt 0 view .LVU450
 1657 07cc 0200000A 		beq	.L83		@,
 296:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1658              		.loc 1 296 5 is_stmt 1 view .LVU451
 1659              	@ armwave.c:296:     g_armwave_state.wave_buffer = wave_buffer;
 1660              		.loc 1 296 33 is_stmt 0 view .LVU452
 1661 07d0 1C309FE5 		ldr	r3, .L84	@ tmp116,
 1662 07d4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1663 07d8 1EFF2FE1 		bx	lr	@
 1664              	.L83:
 295:armwave.c     ****     assert(wave_buffer != NULL);
 1665              		.loc 1 295 5 is_stmt 1 discriminator 1 view .LVU453
 1666              	@ armwave.c:294: {
 294:armwave.c     ****     assert(wave_buffer != NULL);
 1667              		.loc 1 294 1 is_stmt 0 discriminator 1 view .LVU454
 1668 07dc 10402DE9 		push	{r4, lr}	@
 1669              		.cfi_def_cfa_offset 8
 1670              		.cfi_offset 4, -8
 1671              		.cfi_offset 14, -4
 1672              	@ armwave.c:295:     assert(wave_buffer != NULL);
 295:armwave.c     ****     assert(wave_buffer != NULL);
 1673              		.loc 1 295 5 discriminator 1 view .LVU455
 1674 07e0 10309FE5 		ldr	r3, .L84+4	@,
 1675 07e4 10209FE5 		ldr	r2, .L84+8	@,
 1676 07e8 10109FE5 		ldr	r1, .L84+12	@,
 1677 07ec 10009FE5 		ldr	r0, .L84+16	@,
 1678              	.LVL105:
 295:armwave.c     ****     assert(wave_buffer != NULL);
 1679              		.loc 1 295 5 discriminator 1 view .LVU456
 1680 07f0 FEFFFFEB 		bl	__assert_fail		@
 1681              	.LVL106:
 1682              	.L85:
 1683              		.align	2
 1684              	.L84:
 1685 07f4 00000000 		.word	g_armwave_state
 1686 07f8 18000000 		.word	.LANCHOR0+24
 1687 07fc 27010000 		.word	295
 1688 0800 78000000 		.word	.LC4
 1689 0804 70010000 		.word	.LC10
 1690              		.cfi_endproc
 1691              	.LFE63:
 1693              		.align	2
 1694              		.global	armwave_set_wave_pointer_as_testbuf
 1695              		.syntax unified
 1696              		.arm
 1697              		.fpu vfp
 1699              	armwave_set_wave_pointer_as_testbuf:
 1700              	.LVL107:
 1701              	.LFB64:
 297:armwave.c     **** }
 298:armwave.c     **** 
 299:armwave.c     **** /*
 300:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 301:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 302:armwave.c     ****  */
 303:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 304:armwave.c     **** {
 1702              		.loc 1 304 1 is_stmt 1 view -0
 1703              		.cfi_startproc
 1704              		@ args = 0, pretend = 0, frame = 0
 1705              		@ frame_needed = 0, uses_anonymous_args = 0
 1706              		@ link register save eliminated.
 305:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1707              		.loc 1 305 5 view .LVU458
 1708              	@ armwave.c:305:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1709              		.loc 1 305 29 is_stmt 0 view .LVU459
 1710 0808 24309FE5 		ldr	r3, .L89	@ tmp117,
 1711              	@ armwave.c:305:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1712              		.loc 1 305 7 view .LVU460
 1713 080c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1714 0810 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1715 0814 0400003A 		bcc	.L88		@,
 306:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 307:armwave.c     ****         return;
 308:armwave.c     ****     }
 309:armwave.c     **** 
 310:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1716              		.loc 1 310 5 is_stmt 1 view .LVU461
 1717              	@ armwave.c:310:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1718              		.loc 1 310 111 is_stmt 0 view .LVU462
 1719 0818 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1720              	@ armwave.c:310:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1721              		.loc 1 310 68 view .LVU463
 1722 081c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1723 0820 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1724              	.LVL108:
 1725              	@ armwave.c:310:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1726              		.loc 1 310 33 view .LVU464
 1727 0824 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1728              	@ armwave.c:311: }
 311:armwave.c     **** }
 1729              		.loc 1 311 1 view .LVU465
 1730 0828 1EFF2FE1 		bx	lr	@
 1731              	.LVL109:
 1732              	.L88:
 306:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1733              		.loc 1 306 9 is_stmt 1 view .LVU466
 1734 082c 04009FE5 		ldr	r0, .L89+4	@,
 1735              	.LVL110:
 306:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1736              		.loc 1 306 9 is_stmt 0 view .LVU467
 1737 0830 FEFFFFEA 		b	puts		@
 1738              	.LVL111:
 1739              	.L90:
 1740              		.align	2
 1741              	.L89:
 1742 0834 00000000 		.word	g_armwave_state
 1743 0838 84010000 		.word	.LC11
 1744              		.cfi_endproc
 1745              	.LFE64:
 1747              		.align	2
 1748              		.global	armwave_set_wave_pointer_u32
 1749              		.syntax unified
 1750              		.arm
 1751              		.fpu vfp
 1753              	armwave_set_wave_pointer_u32:
 1754              	.LVL112:
 1755              	.LFB65:
 312:armwave.c     **** 
 313:armwave.c     **** /*
 314:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 315:armwave.c     ****  * disjointed buffers in the future.
 316:armwave.c     ****  */
 317:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 318:armwave.c     **** {
 1756              		.loc 1 318 1 is_stmt 1 view -0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 0
 1759              		@ frame_needed = 0, uses_anonymous_args = 0
 319:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1760              		.loc 1 319 5 view .LVU469
 1761 083c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1762              		.loc 1 319 5 is_stmt 0 view .LVU470
 1763 0840 0200000A 		beq	.L96		@,
 320:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1764              		.loc 1 320 5 is_stmt 1 view .LVU471
 1765              	@ armwave.c:320:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1766              		.loc 1 320 33 is_stmt 0 view .LVU472
 1767 0844 1C309FE5 		ldr	r3, .L97	@ tmp117,
 1768 0848 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1769 084c 1EFF2FE1 		bx	lr	@
 1770              	.L96:
 319:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1771              		.loc 1 319 5 is_stmt 1 discriminator 1 view .LVU473
 1772              	@ armwave.c:318: {
 318:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1773              		.loc 1 318 1 is_stmt 0 discriminator 1 view .LVU474
 1774 0850 10402DE9 		push	{r4, lr}	@
 1775              		.cfi_def_cfa_offset 8
 1776              		.cfi_offset 4, -8
 1777              		.cfi_offset 14, -4
 1778              	@ armwave.c:319:     assert(wave_buffer_ptr != 0);
 319:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1779              		.loc 1 319 5 discriminator 1 view .LVU475
 1780 0854 10309FE5 		ldr	r3, .L97+4	@,
 1781 0858 10209FE5 		ldr	r2, .L97+8	@,
 1782 085c 10109FE5 		ldr	r1, .L97+12	@,
 1783 0860 10009FE5 		ldr	r0, .L97+16	@,
 1784              	.LVL113:
 319:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1785              		.loc 1 319 5 discriminator 1 view .LVU476
 1786 0864 FEFFFFEB 		bl	__assert_fail		@
 1787              	.LVL114:
 1788              	.L98:
 1789              		.align	2
 1790              	.L97:
 1791 0868 00000000 		.word	g_armwave_state
 1792 086c 34000000 		.word	.LANCHOR0+52
 1793 0870 3F010000 		.word	319
 1794 0874 78000000 		.word	.LC4
 1795 0878 C0010000 		.word	.LC12
 1796              		.cfi_endproc
 1797              	.LFE65:
 1799              		.align	2
 1800              		.global	armwave_clear_buffer
 1801              		.syntax unified
 1802              		.arm
 1803              		.fpu vfp
 1805              	armwave_clear_buffer:
 1806              	.LVL115:
 1807              	.LFB66:
 321:armwave.c     **** }
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 327:armwave.c     **** {
 1808              		.loc 1 327 1 is_stmt 1 view -0
 1809              		.cfi_startproc
 1810              		@ args = 0, pretend = 0, frame = 0
 1811              		@ frame_needed = 0, uses_anonymous_args = 0
 1812              		@ link register save eliminated.
 328:armwave.c     ****     // Flags ignored, only one buffer cleared
 329:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1813              		.loc 1 329 5 view .LVU478
 1814              	@ armwave.c:329:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1815              		.loc 1 329 58 is_stmt 0 view .LVU479
 1816 087c 0C309FE5 		ldr	r3, .L100	@ tmp114,
 1817              	@ armwave.c:329:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1818              		.loc 1 329 5 view .LVU480
 1819 0880 0010A0E3 		mov	r1, #0	@,
 1820 0884 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1821 0888 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1822              	.LVL116:
 1823              		.loc 1 329 5 view .LVU481
 1824 088c FEFFFFEA 		b	memset		@
 1825              	.LVL117:
 1826              	.L101:
 1827              		.align	2
 1828              	.L100:
 1829 0890 00000000 		.word	g_armwave_state
 1830              		.cfi_endproc
 1831              	.LFE66:
 1833              		.align	2
 1834              		.global	armwave_set_channel_colour
 1835              		.syntax unified
 1836              		.arm
 1837              		.fpu vfp
 1839              	armwave_set_channel_colour:
 1840              	.LVL118:
 1841              	.LFB67:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 334:armwave.c     ****  */
 335:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 336:armwave.c     **** {
 1842              		.loc 1 336 1 is_stmt 1 view -0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 0
 1845              		@ frame_needed = 0, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
 337:armwave.c     ****     // Only 1ch supported for now
 338:armwave.c     ****     switch(ch) {
 1847              		.loc 1 338 5 view .LVU483
 1848 0894 010050E3 		cmp	r0, #1	@ ch,
 339:armwave.c     ****         case 1:
 340:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1849              		.loc 1 340 13 view .LVU484
 1850              	@ armwave.c:340:             g_armwave_state.ch1_color.r = r;
 1851              		.loc 1 340 41 is_stmt 0 view .LVU485
 1852 0898 0C009F05 		ldreq	r0, .L104	@ tmp117,
 1853              	.LVL119:
 1854              		.loc 1 340 41 view .LVU486
 1855 089c BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 341:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1856              		.loc 1 341 13 is_stmt 1 view .LVU487
 1857              	@ armwave.c:341:             g_armwave_state.ch1_color.g = g;
 1858              		.loc 1 341 41 is_stmt 0 view .LVU488
 1859 08a0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 342:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1860              		.loc 1 342 13 is_stmt 1 view .LVU489
 1861              	@ armwave.c:342:             g_armwave_state.ch1_color.b = b;
 1862              		.loc 1 342 41 is_stmt 0 view .LVU490
 1863 08a4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 343:armwave.c     ****             break;
 1864              		.loc 1 343 13 is_stmt 1 view .LVU491
 1865              	@ armwave.c:345: }
 344:armwave.c     ****     }
 345:armwave.c     **** }
 1866              		.loc 1 345 1 is_stmt 0 view .LVU492
 1867 08a8 1EFF2FE1 		bx	lr	@
 1868              	.L105:
 1869              		.align	2
 1870              	.L104:
 1871 08ac 00000000 		.word	g_armwave_state
 1872              		.cfi_endproc
 1873              	.LFE67:
 1875              		.align	2
 1876              		.global	armwave_dump_ppm_debug
 1877              		.syntax unified
 1878              		.arm
 1879              		.fpu vfp
 1881              	armwave_dump_ppm_debug:
 1882              	.LVL120:
 1883              	.LFB68:
 346:armwave.c     **** 
 347:armwave.c     **** /*
 348:armwave.c     ****  * Dump a ppm of a buffer to a file.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 351:armwave.c     **** {
 1884              		.loc 1 351 1 is_stmt 1 view -0
 1885              		.cfi_startproc
 1886              		@ args = 0, pretend = 0, frame = 0
 1887              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1888              		.loc 1 352 5 view .LVU494
 1889              	@ armwave.c:351: {
 351:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1890              		.loc 1 351 1 is_stmt 0 view .LVU495
 1891 08b0 0130A0E1 		mov	r3, r1	@ fn, fn
 1892 08b4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1893              		.cfi_def_cfa_offset 28
 1894              		.cfi_offset 4, -28
 1895              		.cfi_offset 5, -24
 1896              		.cfi_offset 6, -20
 1897              		.cfi_offset 7, -16
 1898              		.cfi_offset 8, -12
 1899              		.cfi_offset 9, -8
 1900              		.cfi_offset 14, -4
 1901 08b8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1902 08bc 0CD04DE2 		sub	sp, sp, #12	@,,
 1903              		.cfi_def_cfa_offset 40
 1904              	@ armwave.c:352:     FILE *fp = fopen(fn, "wb");
 1905              		.loc 1 352 16 view .LVU496
 1906 08c0 C4109FE5 		ldr	r1, .L114	@,
 1907              	.LVL121:
 1908              		.loc 1 352 16 view .LVU497
 1909 08c4 0300A0E1 		mov	r0, r3	@, fn
 1910              	.LVL122:
 1911              		.loc 1 352 16 view .LVU498
 1912 08c8 FEFFFFEB 		bl	fopen64		@
 1913              	.LVL123:
 1914              	@ armwave.c:359:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 353:armwave.c     ****     uint32_t data;
 354:armwave.c     ****     int xx, yy;
 355:armwave.c     **** 
 356:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 357:armwave.c     **** 
 358:armwave.c     ****     fputs("P3\n", fp);
 359:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1915              		.loc 1 359 5 view .LVU499
 1916 08cc BC609FE5 		ldr	r6, .L114+4	@ tmp150,
 1917              	@ armwave.c:358:     fputs("P3\n", fp);
 358:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1918              		.loc 1 358 5 view .LVU500
 1919 08d0 0320A0E3 		mov	r2, #3	@,
 1920 08d4 0110A0E3 		mov	r1, #1	@,
 1921              	@ armwave.c:352:     FILE *fp = fopen(fn, "wb");
 352:armwave.c     ****     uint32_t data;
 1922              		.loc 1 352 16 view .LVU501
 1923 08d8 0070A0E1 		mov	r7, r0	@ fp,
 1924              	.LVL124:
 353:armwave.c     ****     uint32_t data;
 1925              		.loc 1 353 5 is_stmt 1 view .LVU502
 354:armwave.c     **** 
 1926              		.loc 1 354 5 view .LVU503
 358:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1927              		.loc 1 358 5 view .LVU504
 1928 08dc 0030A0E1 		mov	r3, r0	@, fp
 1929 08e0 AC009FE5 		ldr	r0, .L114+8	@,
 1930              	.LVL125:
 358:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1931              		.loc 1 358 5 is_stmt 0 view .LVU505
 1932 08e4 FEFFFFEB 		bl	fwrite		@
 1933              	.LVL126:
 1934              		.loc 1 359 5 is_stmt 1 view .LVU506
 1935 08e8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1936 08ec A4109FE5 		ldr	r1, .L114+12	@,
 1937 08f0 0700A0E1 		mov	r0, r7	@, fp
 1938 08f4 FEFFFFEB 		bl	fprintf		@
 1939              	.LVL127:
 360:armwave.c     ****     fputs("255\n", fp);
 1940              		.loc 1 360 5 view .LVU507
 1941 08f8 0420A0E3 		mov	r2, #4	@,
 1942 08fc 0730A0E1 		mov	r3, r7	@, fp
 1943 0900 0110A0E3 		mov	r1, #1	@,
 1944 0904 90009FE5 		ldr	r0, .L114+16	@,
 1945 0908 FEFFFFEB 		bl	fwrite		@
 1946              	.LVL128:
 361:armwave.c     **** 
 362:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1947              		.loc 1 362 5 view .LVU508
 1948              	@ armwave.c:362:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1949              		.loc 1 362 37 is_stmt 0 view .LVU509
 1950 090c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1951              	@ armwave.c:362:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1952              		.loc 1 362 5 view .LVU510
 1953 0910 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1954 0914 180000DA 		ble	.L107		@,
 1955 0918 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1956              	@ armwave.c:367:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 364:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 365:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 366:armwave.c     **** 
 367:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1957              		.loc 1 367 13 view .LVU511
 1958 091c 7C909FE5 		ldr	r9, .L114+20	@ tmp152,
 1959              	@ armwave.c:362:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1960              		.loc 1 362 12 view .LVU512
 1961 0920 0050A0E3 		mov	r5, #0	@ yy,
 1962              	.LVL129:
 1963              	.L108:
 1964              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1965              		.loc 1 363 9 view .LVU513
 1966 0924 000053E3 		cmp	r3, #0	@ _13,
 1967              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1968              		.loc 1 363 16 view .LVU514
 1969 0928 0040A0C3 		movgt	r4, #0	@ xx,
 1970              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1971              		.loc 1 363 9 view .LVU515
 1972 092c 0F0000DA 		ble	.L110		@,
 1973              	.LVL130:
 1974              	.L109:
 364:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1975              		.loc 1 364 13 is_stmt 1 discriminator 3 view .LVU516
 1976              	@ armwave.c:364:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 364:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1977              		.loc 1 364 29 is_stmt 0 discriminator 3 view .LVU517
 1978 0930 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1979              	@ armwave.c:367:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1980              		.loc 1 367 13 discriminator 3 view .LVU518
 1981 0934 0910A0E1 		mov	r1, r9	@, tmp152
 1982 0938 0700A0E1 		mov	r0, r7	@, fp
 1983              	@ armwave.c:364:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 364:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1984              		.loc 1 364 18 discriminator 3 view .LVU519
 1985 093c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1986              	.LVL131:
 1987              		.loc 1 367 13 is_stmt 1 discriminator 3 view .LVU520
 1988              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1989              		.loc 1 363 58 is_stmt 0 discriminator 3 view .LVU521
 1990 0940 014084E2 		add	r4, r4, #1	@ xx, xx,
 1991              	.LVL132:
 1992              	@ armwave.c:367:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1993              		.loc 1 367 81 discriminator 3 view .LVU522
 1994 0944 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1995              	@ armwave.c:367:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1996              		.loc 1 367 61 discriminator 3 view .LVU523
 1997 0948 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1998              	@ armwave.c:367:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1999              		.loc 1 367 13 discriminator 3 view .LVU524
 2000 094c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2001 0950 7330EFE6 		uxtb	r3, r3	@, tmp142
 2002 0954 00C08DE5 		str	ip, [sp]	@ tmp147,
 2003 0958 7220EFE6 		uxtb	r2, r2	@, data
 2004              	.LVL133:
 2005              		.loc 1 367 13 discriminator 3 view .LVU525
 2006 095c FEFFFFEB 		bl	fprintf		@
 2007              	.LVL134:
 2008              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2009              		.loc 1 363 41 discriminator 3 view .LVU526
 2010 0960 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2011              	@ armwave.c:363:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 363:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2012              		.loc 1 363 9 discriminator 3 view .LVU527
 2013 0964 040053E1 		cmp	r3, r4	@ _13, xx
 2014 0968 F0FFFFCA 		bgt	.L109		@,
 2015 096c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2016              	.LVL135:
 2017              	.L110:
 2018              	@ armwave.c:362:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2019              		.loc 1 362 55 discriminator 2 view .LVU528
 2020 0970 015085E2 		add	r5, r5, #1	@ yy, yy,
 2021              	.LVL136:
 2022              	@ armwave.c:362:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 362:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2023              		.loc 1 362 5 discriminator 2 view .LVU529
 2024 0974 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2025 0978 E9FFFFBA 		blt	.L108		@,
 2026              	.LVL137:
 2027              	.L107:
 368:armwave.c     ****         }
 369:armwave.c     ****     }
 370:armwave.c     **** 
 371:armwave.c     ****     fclose(fp);
 2028              		.loc 1 371 5 is_stmt 1 view .LVU530
 2029 097c 0700A0E1 		mov	r0, r7	@, fp
 2030              	@ armwave.c:372: }
 372:armwave.c     **** }
 2031              		.loc 1 372 1 is_stmt 0 view .LVU531
 2032 0980 0CD08DE2 		add	sp, sp, #12	@,,
 2033              		.cfi_def_cfa_offset 28
 2034              		@ sp needed	@
 2035 0984 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2036              		.cfi_restore 14
 2037              		.cfi_restore 9
 2038              		.cfi_restore 8
 2039              		.cfi_restore 7
 2040              		.cfi_restore 6
 2041              		.cfi_restore 5
 2042              		.cfi_restore 4
 2043              		.cfi_def_cfa_offset 0
 2044              	.LVL138:
 2045              	@ armwave.c:371:     fclose(fp);
 371:armwave.c     **** }
 2046              		.loc 1 371 5 view .LVU532
 2047 0988 FEFFFFEA 		b	fclose		@
 2048              	.LVL139:
 2049              	.L115:
 371:armwave.c     **** }
 2050              		.loc 1 371 5 view .LVU533
 2051              		.align	2
 2052              	.L114:
 2053 098c D8010000 		.word	.LC13
 2054 0990 00000000 		.word	g_armwave_state
 2055 0994 DC010000 		.word	.LC14
 2056 0998 E0010000 		.word	.LC15
 2057 099c E8010000 		.word	.LC16
 2058 09a0 F0010000 		.word	.LC17
 2059              		.cfi_endproc
 2060              	.LFE68:
 2062              		.align	2
 2063              		.global	armwave_test_init
 2064              		.syntax unified
 2065              		.arm
 2066              		.fpu vfp
 2068              	armwave_test_init:
 2069              	.LVL140:
 2070              	.LFB69:
 373:armwave.c     **** 
 374:armwave.c     **** /*
 375:armwave.c     ****  * Initialise some test functionry.
 376:armwave.c     ****  */
 377:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 378:armwave.c     **** {
 2071              		.loc 1 378 1 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     test_create_gamma();
 2075              		.loc 1 379 5 view .LVU535
 2076              	.LBB18:
 2077              	.LBI18:
  34:armwave.c     **** {
 2078              		.loc 1 34 6 view .LVU536
  34:armwave.c     **** {
 2079              		.loc 1 34 6 is_stmt 0 view .LVU537
 2080              	.LBE18:
 2081              	@ armwave.c:378: {
 378:armwave.c     ****     test_create_gamma();
 2082              		.loc 1 378 1 view .LVU538
 2083 09a4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2084              		.cfi_def_cfa_offset 32
 2085              		.cfi_offset 4, -32
 2086              		.cfi_offset 5, -28
 2087              		.cfi_offset 6, -24
 2088              		.cfi_offset 7, -20
 2089              		.cfi_offset 8, -16
 2090              		.cfi_offset 9, -12
 2091              		.cfi_offset 10, -8
 2092              		.cfi_offset 14, -4
 2093 09a8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2094              		.cfi_def_cfa_offset 56
 2095              		.cfi_offset 80, -56
 2096              		.cfi_offset 81, -52
 2097              		.cfi_offset 82, -48
 2098              		.cfi_offset 83, -44
 2099              		.cfi_offset 84, -40
 2100              		.cfi_offset 85, -36
 2101 09ac C0409FE5 		ldr	r4, .L120+20	@ ivtmp.100,
 2102              	.LBB21:
 2103              	.LBB19:
 2104              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2105              		.loc 1 40 32 view .LVU539
 2106 09b0 2EAA9FED 		vldr.32	s20, .L120+16	@ tmp136,
 2107              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2108              		.loc 1 40 26 view .LVU540
 2109 09b4 299B9FED 		vldr.64	d9, .L120	@ tmp151,
 2110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2111              		.loc 1 40 49 view .LVU541
 2112 09b8 2A8B9FED 		vldr.64	d8, .L120+8	@ tmp139,
 2113 09bc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.100,
 2114              	.LBE19:
 2115              	.LBE21:
 2116              	@ armwave.c:378: {
 378:armwave.c     ****     test_create_gamma();
 2117              		.loc 1 378 1 view .LVU542
 2118 09c0 10D04DE2 		sub	sp, sp, #16	@,,
 2119              		.cfi_def_cfa_offset 72
 2120              	@ armwave.c:378: {
 378:armwave.c     ****     test_create_gamma();
 2121              		.loc 1 378 1 view .LVU543
 2122 09c4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2123 09c8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2124 09cc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2125 09d0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2126 09d4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.100,
 2127 09d8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2128              	.LVL141:
 2129              	.L117:
 2130              	.LBB22:
 2131              	.LBB20:
  40:armwave.c     ****     }
 2132              		.loc 1 40 9 is_stmt 1 view .LVU544
 2133              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2134              		.loc 1 40 32 is_stmt 0 view .LVU545
 2135 09dc 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.100
 2136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2137              		.loc 1 40 26 view .LVU546
 2138 09e0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2139              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2140              		.loc 1 40 32 view .LVU547
 2141 09e4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2142 09e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2143 09ec 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2145              		.loc 1 40 26 view .LVU548
 2146 09f0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2147 09f4 FEFFFFEB 		bl	pow		@
 2148              	.LVL142:
 2149              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2150              		.loc 1 40 49 view .LVU549
 2151 09f8 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2152              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2153              		.loc 1 40 24 view .LVU550
 2154 09fc C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2155 0a00 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2156 0a04 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2157              	.LVL143:
 2158              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2159              		.loc 1 39 5 view .LVU551
 2160 0a08 0A0054E1 		cmp	r4, r10	@ ivtmp.100, _39
 2161 0a0c F2FFFF1A 		bne	.L117		@,
 2162              	.LVL144:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2163              		.loc 1 39 5 view .LVU552
 2164              	.LBE20:
 2165              	.LBE22:
 380:armwave.c     **** 
 381:armwave.c     ****     // make ch1 yellowish by default
 382:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2166              		.loc 1 382 5 is_stmt 1 view .LVU553
 2167              	.LBB23:
 2168              	.LBI23:
 335:armwave.c     **** {
 2169              		.loc 1 335 6 view .LVU554
 2170              	.LBB24:
 338:armwave.c     ****         case 1:
 2171              		.loc 1 338 5 view .LVU555
 340:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2172              		.loc 1 340 13 view .LVU556
 341:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2173              		.loc 1 341 13 view .LVU557
 2174              	@ armwave.c:340:             g_armwave_state.ch1_color.r = r;
 340:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2175              		.loc 1 340 41 is_stmt 0 view .LVU558
 2176 0a10 60C09FE5 		ldr	ip, .L120+24	@ tmp142,
 2177 0a14 60409FE5 		ldr	r4, .L120+28	@ tmp143,
 2178              	.LBE24:
 2179              	.LBE23:
 2180              	@ armwave.c:384:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 383:armwave.c     **** 
 384:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2181              		.loc 1 384 5 view .LVU559
 2182 0a18 0000A0E3 		mov	r0, #0	@ tmp147,
 2183              	.LBB28:
 2184              	.LBB25:
 2185              	@ armwave.c:342:             g_armwave_state.ch1_color.b = b;
 342:armwave.c     ****             break;
 2186              		.loc 1 342 41 view .LVU560
 2187 0a1c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2188              	.LBE25:
 2189              	.LBE28:
 2190              	@ armwave.c:384:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2191              		.loc 1 384 5 view .LVU561
 2192 0a20 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2193 0a24 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2194 0a28 00808DE5 		str	r8, [sp]	@ render_width,
 2195 0a2c 0610A0E1 		mov	r1, r6	@, tmp3
 2196 0a30 0720A0E1 		mov	r2, r7	@, nwaves
 2197              	.LBB29:
 2198              	.LBB26:
 2199              	@ armwave.c:340:             g_armwave_state.ch1_color.r = r;
 340:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2200              		.loc 1 340 41 view .LVU562
 2201 0a34 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 342:armwave.c     ****             break;
 2202              		.loc 1 342 13 is_stmt 1 view .LVU563
 2203              	.LBE26:
 2204              	.LBE29:
 2205              	@ armwave.c:384:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2206              		.loc 1 384 5 is_stmt 0 view .LVU564
 2207 0a38 0630A0E1 		mov	r3, r6	@, wave_size
 2208              	.LBB30:
 2209              	.LBB27:
 2210              	@ armwave.c:342:             g_armwave_state.ch1_color.b = b;
 342:armwave.c     ****             break;
 2211              		.loc 1 342 41 view .LVU565
 2212 0a3c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 343:armwave.c     ****     }
 2213              		.loc 1 343 13 is_stmt 1 view .LVU566
 2214              	.LVL145:
 343:armwave.c     ****     }
 2215              		.loc 1 343 13 is_stmt 0 view .LVU567
 2216              	.LBE27:
 2217              	.LBE30:
 2218              		.loc 1 384 5 is_stmt 1 view .LVU568
 2219 0a40 FEFFFFEB 		bl	armwave_setup_render		@
 2220              	.LVL146:
 385:armwave.c     **** 
 386:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2221              		.loc 1 386 5 view .LVU569
 2222 0a44 34109FE5 		ldr	r1, .L120+32	@,
 2223 0a48 34009FE5 		ldr	r0, .L120+36	@,
 2224              	@ armwave.c:387: }
 387:armwave.c     **** }
 2225              		.loc 1 387 1 is_stmt 0 view .LVU570
 2226 0a4c 10D08DE2 		add	sp, sp, #16	@,,
 2227              		.cfi_def_cfa_offset 56
 2228              		@ sp needed	@
 2229 0a50 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2230              		.cfi_restore 84
 2231              		.cfi_restore 85
 2232              		.cfi_restore 82
 2233              		.cfi_restore 83
 2234              		.cfi_restore 80
 2235              		.cfi_restore 81
 2236              		.cfi_def_cfa_offset 32
 2237 0a54 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2238              		.cfi_restore 14
 2239              		.cfi_restore 10
 2240              		.cfi_restore 9
 2241              		.cfi_restore 8
 2242              		.cfi_restore 7
 2243              		.cfi_restore 6
 2244              		.cfi_restore 5
 2245              		.cfi_restore 4
 2246              		.cfi_def_cfa_offset 0
 2247              	.LVL147:
 2248              	@ armwave.c:386:     printf("armwave version: %s\n", ARMWAVE_VER);
 386:armwave.c     **** }
 2249              		.loc 1 386 5 view .LVU571
 2250 0a58 FEFFFFEA 		b	printf		@
 2251              	.LVL148:
 2252              	.L121:
 2253 0a5c 0000A0E1 		.align	3
 2254              	.L120:
 2255 0a60 000000C0 		.word	-1073741824
 2256 0a64 CCCCEC3F 		.word	1072483532
 2257 0a68 00000000 		.word	0
 2258 0a6c 00E06F40 		.word	1081073664
 2259 0a70 00007F43 		.word	1132396544
 2260 0a74 FFFFFFFF 		.word	gamma_table-1
 2261 0a78 00000000 		.word	g_armwave_state
 2262 0a7c F609F406 		.word	116656630
 2263 0a80 00000000 		.word	.LC0
 2264 0a84 08000000 		.word	.LC1
 2265              		.cfi_endproc
 2266              	.LFE69:
 2268              		.align	2
 2269              		.global	armwave_test_fill_outbuf
 2270              		.syntax unified
 2271              		.arm
 2272              		.fpu vfp
 2274              	armwave_test_fill_outbuf:
 2275              	.LFB70:
 388:armwave.c     **** 
 389:armwave.c     **** /*
 390:armwave.c     ****  * Render image to the local allocated buffer.
 391:armwave.c     ****  */
 392:armwave.c     **** void armwave_test_fill_outbuf()
 393:armwave.c     **** {
 2276              		.loc 1 393 1 is_stmt 1 view -0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 0
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
 394:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2281              		.loc 1 394 5 view .LVU573
 2282 0a88 04309FE5 		ldr	r3, .L123	@ tmp111,
 2283 0a8c 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2284 0a90 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2285              	.LVL149:
 2286              	.L124:
 2287              		.align	2
 2288              	.L123:
 2289 0a94 00000000 		.word	g_armwave_state
 2290              		.cfi_endproc
 2291              	.LFE70:
 2293              		.align	2
 2294              		.global	armwave_test_dump_buffer_to_ppm
 2295              		.syntax unified
 2296              		.arm
 2297              		.fpu vfp
 2299              	armwave_test_dump_buffer_to_ppm:
 2300              	.LVL150:
 2301              	.LFB71:
 395:armwave.c     **** }
 396:armwave.c     **** 
 397:armwave.c     **** /*
 398:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 399:armwave.c     ****  */
 400:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 401:armwave.c     **** {
 2302              		.loc 1 401 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 0
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306              		@ link register save eliminated.
 402:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2307              		.loc 1 402 5 view .LVU575
 2308 0a98 08309FE5 		ldr	r3, .L126	@ tmp112,
 2309 0a9c 0010A0E1 		mov	r1, r0	@, fn
 2310 0aa0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2311              	.LVL151:
 2312              		.loc 1 402 5 is_stmt 0 view .LVU576
 2313 0aa4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2314              	.LVL152:
 2315              	.L127:
 2316              		.loc 1 402 5 view .LVU577
 2317              		.align	2
 2318              	.L126:
 2319 0aa8 00000000 		.word	g_armwave_state
 2320              		.cfi_endproc
 2321              	.LFE71:
 2323              		.align	2
 2324              		.global	armwave_test_fill_gdkbuf
 2325              		.syntax unified
 2326              		.arm
 2327              		.fpu vfp
 2329              	armwave_test_fill_gdkbuf:
 2330              	.LVL153:
 2331              	.LFB72:
 403:armwave.c     **** }
 404:armwave.c     **** 
 405:armwave.c     **** /*
 406:armwave.c     ****  * Render GDK buffer with test funtionry.
 407:armwave.c     ****  */
 408:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 409:armwave.c     **** {
 2332              		.loc 1 409 1 is_stmt 1 view -0
 2333              		.cfi_startproc
 2334              		@ args = 0, pretend = 0, frame = 0
 2335              		@ frame_needed = 0, uses_anonymous_args = 0
 2336              		@ link register save eliminated.
 410:armwave.c     ****     //PyObject *mv;
 411:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 412:armwave.c     **** 
 413:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 414:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2337              		.loc 1 414 5 view .LVU579
 415:armwave.c     ****     
 416:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 417:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2338              		.loc 1 417 5 view .LVU580
 2339              	@ armwave.c:414:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 414:armwave.c     ****     
 2340              		.loc 1 414 11 is_stmt 0 view .LVU581
 2341 0aac 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2342              	@ armwave.c:417:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2343              		.loc 1 417 5 view .LVU582
 2344 0ab0 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2345              	.LVL154:
 2346              		.loc 1 417 5 view .LVU583
 2347 0ab4 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2348              	.LVL155:
 2349              		.loc 1 417 5 view .LVU584
 2350              		.cfi_endproc
 2351              	.LFE72:
 2353              		.align	2
 2354              		.global	armwave_test_buffer_alloc
 2355              		.syntax unified
 2356              		.arm
 2357              		.fpu vfp
 2359              	armwave_test_buffer_alloc:
 2360              	.LVL156:
 2361              	.LFB73:
 418:armwave.c     **** }
 419:armwave.c     **** 
 420:armwave.c     **** /*
 421:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 422:armwave.c     ****  */
 423:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 424:armwave.c     **** {
 2362              		.loc 1 424 1 is_stmt 1 view -0
 2363              		.cfi_startproc
 2364              		@ args = 0, pretend = 0, frame = 0
 2365              		@ frame_needed = 0, uses_anonymous_args = 0
 425:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2366              		.loc 1 425 5 view .LVU586
 2367              	@ armwave.c:424: {
 424:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2368              		.loc 1 424 1 is_stmt 0 view .LVU587
 2369 0ab8 70402DE9 		push	{r4, r5, r6, lr}	@
 2370              		.cfi_def_cfa_offset 16
 2371              		.cfi_offset 4, -16
 2372              		.cfi_offset 5, -12
 2373              		.cfi_offset 6, -8
 2374              		.cfi_offset 14, -4
 2375              	@ armwave.c:424: {
 424:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2376              		.loc 1 424 1 view .LVU588
 2377 0abc 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2378              	@ armwave.c:425:     if(g_armwave_state.test_wave_buffer != NULL) {
 2379              		.loc 1 425 23 view .LVU589
 2380 0ac0 44409FE5 		ldr	r4, .L136	@ tmp128,
 2381 0ac4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2382              	.LVL157:
 2383              	@ armwave.c:425:     if(g_armwave_state.test_wave_buffer != NULL) {
 2384              		.loc 1 425 7 view .LVU590
 2385 0ac8 000050E3 		cmp	r0, #0	@ _1,
 2386 0acc 0000000A 		beq	.L130		@,
 426:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2387              		.loc 1 426 9 is_stmt 1 view .LVU591
 2388 0ad0 FEFFFFEB 		bl	free		@
 2389              	.LVL158:
 2390              	.L130:
 427:armwave.c     ****     }
 428:armwave.c     **** 
 429:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 430:armwave.c     **** 
 431:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2391              		.loc 1 431 5 view .LVU592
 2392              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2393              		.loc 1 431 75 is_stmt 0 view .LVU593
 2394 0ad4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2395 0ad8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2396              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2397              		.loc 1 431 40 view .LVU594
 2398 0adc 0610A0E1 		mov	r1, r6	@, nsets
 2399              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2400              		.loc 1 431 75 view .LVU595
 2401 0ae0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2402              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2403              		.loc 1 431 40 view .LVU596
 2404 0ae4 0500A0E1 		mov	r0, r5	@, _4
 2405 0ae8 FEFFFFEB 		bl	calloc		@
 2406              	.LVL159:
 2407              	@ armwave.c:433:     if(g_armwave_state.test_wave_buffer == NULL) {
 432:armwave.c     **** 
 433:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2408              		.loc 1 433 7 view .LVU597
 2409 0aec 000050E3 		cmp	r0, #0	@ tmp124,
 2410              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2411              		.loc 1 431 38 view .LVU598
 2412 0af0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2413              		.loc 1 433 5 is_stmt 1 view .LVU599
 2414              	@ armwave.c:433:     if(g_armwave_state.test_wave_buffer == NULL) {
 2415              		.loc 1 433 7 is_stmt 0 view .LVU600
 2416 0af4 7080BD18 		popne	{r4, r5, r6, pc}	@
 434:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2417              		.loc 1 434 9 is_stmt 1 view .LVU601
 2418 0af8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2419 0afc 0620A0E1 		mov	r2, r6	@, nsets
 2420 0b00 08009FE5 		ldr	r0, .L136+4	@,
 2421              	@ armwave.c:438: }
 435:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 436:armwave.c     ****         return;
 437:armwave.c     ****     }
 438:armwave.c     **** }
 2422              		.loc 1 438 1 is_stmt 0 view .LVU602
 2423 0b04 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2424              		.cfi_restore 14
 2425              		.cfi_restore 6
 2426              		.cfi_restore 5
 2427              		.cfi_restore 4
 2428              		.cfi_def_cfa_offset 0
 2429              	.LVL160:
 2430              	@ armwave.c:434:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 434:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2431              		.loc 1 434 9 view .LVU603
 2432 0b08 FEFFFFEA 		b	printf		@
 2433              	.LVL161:
 2434              	.L137:
 434:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2435              		.loc 1 434 9 view .LVU604
 2436              		.align	2
 2437              	.L136:
 2438 0b0c 00000000 		.word	g_armwave_state
 2439 0b10 00020000 		.word	.LC18
 2440              		.cfi_endproc
 2441              	.LFE73:
 2443              		.align	2
 2444              		.global	armwave_fill_pixbuf_into_pybuffer
 2445              		.syntax unified
 2446              		.arm
 2447              		.fpu vfp
 2449              	armwave_fill_pixbuf_into_pybuffer:
 2450              	.LVL162:
 2451              	.LFB74:
 439:armwave.c     **** 
 440:armwave.c     **** /*
 441:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 442:armwave.c     ****  */
 443:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 444:armwave.c     **** {
 2452              		.loc 1 444 1 is_stmt 1 view -0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 48
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 445:armwave.c     ****     Py_buffer buffer;
 2456              		.loc 1 445 5 view .LVU606
 446:armwave.c     ****     int ret;
 2457              		.loc 1 446 5 view .LVU607
 447:armwave.c     **** 
 448:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 449:armwave.c     **** 
 450:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2458              		.loc 1 450 5 view .LVU608
 2459              	@ armwave.c:444: {
 444:armwave.c     ****     Py_buffer buffer;
 2460              		.loc 1 444 1 is_stmt 0 view .LVU609
 2461 0b14 04E02DE5 		str	lr, [sp, #-4]!	@,
 2462              		.cfi_def_cfa_offset 4
 2463              		.cfi_offset 14, -4
 2464 0b18 34D04DE2 		sub	sp, sp, #52	@,,
 2465              		.cfi_def_cfa_offset 56
 2466              	@ armwave.c:450:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2467              		.loc 1 450 11 view .LVU610
 2468 0b1c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2469 0b20 0120A0E3 		mov	r2, #1	@,
 2470 0b24 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2471              	.LVL163:
 451:armwave.c     **** 
 452:armwave.c     ****     if(ret != 0) {
 2472              		.loc 1 452 5 is_stmt 1 view .LVU611
 2473              	@ armwave.c:452:     if(ret != 0) {
 2474              		.loc 1 452 7 is_stmt 0 view .LVU612
 2475 0b28 000050E3 		cmp	r0, #0	@,
 2476 0b2c 0A00001A 		bne	.L142		@,
 453:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 454:armwave.c     ****         Py_RETURN_FALSE;
 455:armwave.c     ****     }
 456:armwave.c     **** 
 457:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 458:armwave.c     **** 
 459:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2477              		.loc 1 459 5 is_stmt 1 view .LVU613
 2478 0b30 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2479              	.LVL164:
 2480              		.loc 1 459 5 is_stmt 0 view .LVU614
 2481 0b34 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2482              	.LVL165:
 460:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 461:armwave.c     **** 
 462:armwave.c     ****     PyBuffer_Release(&buffer);
 2483              		.loc 1 462 5 is_stmt 1 view .LVU615
 2484 0b38 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2485 0b3c FEFFFFEB 		bl	PyBuffer_Release		@
 2486              	.LVL166:
 463:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 464:armwave.c     **** 
 465:armwave.c     ****     Py_RETURN_TRUE;
 2487              		.loc 1 465 5 view .LVU616
 2488              	.LBB31:
 2489              	.LBI31:
 2490              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2491              		.loc 2 456 20 view .LVU617
 2492              	.LBB32:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2493              		.loc 2 458 21 view .LVU618
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2494              		.loc 2 459 5 view .LVU619
 2495              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2496              		.loc 2 459 18 is_stmt 0 view .LVU620
 2497 0b40 38309FE5 		ldr	r3, .L143	@ tmp126,
 2498              	.LBE32:
 2499              	.LBE31:
 2500              	@ armwave.c:465:     Py_RETURN_TRUE;
 2501              		.loc 1 465 5 view .LVU621
 2502 0b44 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2503              	.LBB34:
 2504              	.LBB33:
 2505              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2506              		.loc 2 459 18 view .LVU622
 2507 0b48 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2508 0b4c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2509 0b50 002083E5 		str	r2, [r3]	@ tmp128,
 2510              	.LBE33:
 2511              	.LBE34:
 2512              	@ armwave.c:466: }
 466:armwave.c     **** }
 2513              		.loc 1 466 1 view .LVU623
 2514 0b54 34D08DE2 		add	sp, sp, #52	@,,
 2515              		.cfi_remember_state
 2516              		.cfi_def_cfa_offset 4
 2517              		@ sp needed	@
 2518 0b58 04F09DE4 		ldr	pc, [sp], #4	@
 2519              	.LVL167:
 2520              	.L142:
 2521              		.cfi_restore_state
 453:armwave.c     ****         Py_RETURN_FALSE;
 2522              		.loc 1 453 9 is_stmt 1 view .LVU624
 2523 0b5c 20009FE5 		ldr	r0, .L143+4	@,
 2524              	.LVL168:
 453:armwave.c     ****         Py_RETURN_FALSE;
 2525              		.loc 1 453 9 is_stmt 0 view .LVU625
 2526 0b60 FEFFFFEB 		bl	puts		@
 2527              	.LVL169:
 454:armwave.c     ****     }
 2528              		.loc 1 454 9 is_stmt 1 view .LVU626
 2529              	.LBB35:
 2530              	.LBI35:
 456:/usr/local/include/python3.8/object.h **** {
 2531              		.loc 2 456 20 view .LVU627
 2532              	.LBB36:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2533              		.loc 2 458 21 view .LVU628
 2534              		.loc 2 459 5 view .LVU629
 2535              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2536              		.loc 2 459 18 is_stmt 0 view .LVU630
 2537 0b64 1C309FE5 		ldr	r3, .L143+8	@ tmp120,
 2538              	.LBE36:
 2539              	.LBE35:
 2540              	@ armwave.c:454:         Py_RETURN_FALSE;
 454:armwave.c     ****     }
 2541              		.loc 1 454 9 view .LVU631
 2542 0b68 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2543              	.LBB38:
 2544              	.LBB37:
 2545              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2546              		.loc 2 459 18 view .LVU632
 2547 0b6c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2548 0b70 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2549 0b74 002083E5 		str	r2, [r3]	@ tmp122,
 2550              	.LBE37:
 2551              	.LBE38:
 2552              	@ armwave.c:466: }
 2553              		.loc 1 466 1 view .LVU633
 2554 0b78 34D08DE2 		add	sp, sp, #52	@,,
 2555              		.cfi_def_cfa_offset 4
 2556              		@ sp needed	@
 2557 0b7c 04F09DE4 		ldr	pc, [sp], #4	@
 2558              	.L144:
 2559              		.align	2
 2560              	.L143:
 2561 0b80 00000000 		.word	_Py_TrueStruct
 2562 0b84 54020000 		.word	.LC19
 2563 0b88 00000000 		.word	_Py_FalseStruct
 2564              		.cfi_endproc
 2565              	.LFE74:
 2567              		.align	2
 2568              		.global	armwave_test_create_am_sine
 2569              		.syntax unified
 2570              		.arm
 2571              		.fpu vfp
 2573              	armwave_test_create_am_sine:
 2574              	.LVL170:
 2575              	.LFB75:
 467:armwave.c     **** 
 468:armwave.c     **** /*
 469:armwave.c     ****  * Make a test AM waveform for render tests.
 470:armwave.c     ****  *
 471:armwave.c     ****  * @param   mod                     modulation depth
 472:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 473:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 474:armwave.c     ****  */
 475:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 476:armwave.c     **** {
 2576              		.loc 1 476 1 is_stmt 1 view -0
 2577              		.cfi_startproc
 2578              		@ args = 0, pretend = 0, frame = 8
 2579              		@ frame_needed = 0, uses_anonymous_args = 0
 477:armwave.c     ****     float v, noise, xnoise, mod_val;
 2580              		.loc 1 477 5 view .LVU635
 478:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2581              		.loc 1 478 5 view .LVU636
 2582              	@ armwave.c:476: {
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2583              		.loc 1 476 1 is_stmt 0 view .LVU637
 2584 0b8c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2585              		.cfi_def_cfa_offset 32
 2586              		.cfi_offset 4, -32
 2587              		.cfi_offset 5, -28
 2588              		.cfi_offset 6, -24
 2589              		.cfi_offset 7, -20
 2590              		.cfi_offset 8, -16
 2591              		.cfi_offset 9, -12
 2592              		.cfi_offset 10, -8
 2593              		.cfi_offset 14, -4
 2594              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2595              		.loc 1 478 38 view .LVU638
 2596 0b90 7A7A9FED 		vldr.32	s14, .L176	@ tmp180,
 2597              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2598              		.loc 1 478 55 view .LVU639
 2599 0b94 00529FE5 		ldr	r5, .L176+28	@ tmp250,
 2600              	@ armwave.c:476: {
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2601              		.loc 1 476 1 view .LVU640
 2602 0b98 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2603              		.cfi_def_cfa_offset 80
 2604              		.cfi_offset 80, -80
 2605              		.cfi_offset 81, -76
 2606              		.cfi_offset 82, -72
 2607              		.cfi_offset 83, -68
 2608              		.cfi_offset 84, -64
 2609              		.cfi_offset 85, -60
 2610              		.cfi_offset 86, -56
 2611              		.cfi_offset 87, -52
 2612              		.cfi_offset 88, -48
 2613              		.cfi_offset 89, -44
 2614              		.cfi_offset 90, -40
 2615              		.cfi_offset 91, -36
 2616 0b9c 0090A0E1 		mov	r9, r0	@ sets, sets
 2617              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2618              		.loc 1 478 38 view .LVU641
 2619 0ba0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2620              	@ armwave.c:482:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 479:armwave.c     ****     int s, set_offset = 0;
 480:armwave.c     ****     int w, x;
 481:armwave.c     **** 
 482:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2621              		.loc 1 482 70 view .LVU642
 2622 0ba4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2623 0ba8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2624              	.LBB41:
 2625              	.LBB42:
 2626              	@ armwave.c:425:     if(g_armwave_state.test_wave_buffer != NULL) {
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2627              		.loc 1 425 23 view .LVU643
 2628 0bac 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2629              	.LVL171:
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2630              		.loc 1 425 23 view .LVU644
 2631              	.LBE42:
 2632              	.LBE41:
 2633              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 478:armwave.c     ****     int s, set_offset = 0;
 2634              		.loc 1 478 38 view .LVU645
 2635 0bb0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2636              	@ armwave.c:482:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2637              		.loc 1 482 70 view .LVU646
 2638 0bb4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2639              	@ armwave.c:476: {
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2640              		.loc 1 476 1 view .LVU647
 2641 0bb8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2642              	.LBB46:
 2643              	.LBB43:
 2644              	@ armwave.c:425:     if(g_armwave_state.test_wave_buffer != NULL) {
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2645              		.loc 1 425 7 view .LVU648
 2646 0bbc 000050E3 		cmp	r0, #0	@ _82,
 2647              	.LBE43:
 2648              	.LBE46:
 2649              	@ armwave.c:476: {
 476:armwave.c     ****     float v, noise, xnoise, mod_val;
 2650              		.loc 1 476 1 view .LVU649
 2651 0bc0 08D04DE2 		sub	sp, sp, #8	@,,
 2652              		.cfi_def_cfa_offset 88
 2653              	@ armwave.c:483:     g_armwave_state.test_wave_buffer_nsets = sets;
 483:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2654              		.loc 1 483 44 view .LVU650
 2655 0bc4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2656              	@ armwave.c:482:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 482:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2657              		.loc 1 482 45 view .LVU651
 2658 0bc8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2659              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 478:armwave.c     ****     int s, set_offset = 0;
 2660              		.loc 1 478 38 view .LVU652
 2661 0bcc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2662              	@ armwave.c:478:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 478:armwave.c     ****     int s, set_offset = 0;
 2663              		.loc 1 478 11 view .LVU653
 2664 0bd0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2665              	.LVL172:
 479:armwave.c     ****     int w, x;
 2666              		.loc 1 479 5 is_stmt 1 view .LVU654
 480:armwave.c     **** 
 2667              		.loc 1 480 5 view .LVU655
 482:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2668              		.loc 1 482 5 view .LVU656
 2669              		.loc 1 483 5 view .LVU657
 484:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2670              		.loc 1 484 5 view .LVU658
 2671              	.LBB47:
 2672              	.LBI41:
 423:armwave.c     **** {
 2673              		.loc 1 423 6 view .LVU659
 2674              	.LBB44:
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2675              		.loc 1 425 5 view .LVU660
 2676              	@ armwave.c:425:     if(g_armwave_state.test_wave_buffer != NULL) {
 425:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2677              		.loc 1 425 7 is_stmt 0 view .LVU661
 2678 0bd4 0000000A 		beq	.L146		@,
 426:armwave.c     ****     }
 2679              		.loc 1 426 9 is_stmt 1 view .LVU662
 2680 0bd8 FEFFFFEB 		bl	free		@
 2681              	.LVL173:
 2682              	.L146:
 431:armwave.c     **** 
 2683              		.loc 1 431 5 view .LVU663
 2684              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2685              		.loc 1 431 75 is_stmt 0 view .LVU664
 2686 0bdc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2687 0be0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2688              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2689              		.loc 1 431 40 view .LVU665
 2690 0be4 0910A0E1 		mov	r1, r9	@, sets
 2691              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2692              		.loc 1 431 75 view .LVU666
 2693 0be8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2694              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2695              		.loc 1 431 40 view .LVU667
 2696 0bec 0400A0E1 		mov	r0, r4	@, _85
 2697 0bf0 FEFFFFEB 		bl	calloc		@
 2698              	.LVL174:
 2699              	@ armwave.c:433:     if(g_armwave_state.test_wave_buffer == NULL) {
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2700              		.loc 1 433 7 view .LVU668
 2701 0bf4 000050E3 		cmp	r0, #0	@ tmp191,
 2702              	@ armwave.c:431:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 431:armwave.c     **** 
 2703              		.loc 1 431 38 view .LVU669
 2704 0bf8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2705              		.loc 1 433 5 is_stmt 1 view .LVU670
 2706              	@ armwave.c:433:     if(g_armwave_state.test_wave_buffer == NULL) {
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2707              		.loc 1 433 7 is_stmt 0 view .LVU671
 2708 0bfc 5A00000A 		beq	.L175		@,
 2709              	.L147:
 2710              	.LVL175:
 433:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2711              		.loc 1 433 7 view .LVU672
 2712              	.LBE44:
 2713              	.LBE47:
 2714              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 485:armwave.c     **** 
 486:armwave.c     ****     for(s = 0; s < sets; s++) {
 2715              		.loc 1 486 5 discriminator 1 view .LVU673
 2716 0c00 000059E3 		cmp	r9, #0	@ sets,
 2717 0c04 550000DA 		ble	.L145		@,
 2718              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 487:armwave.c     ****         printf("Calculating test set %d\n", s);
 488:armwave.c     ****     
 489:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 490:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 491:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 492:armwave.c     **** 
 493:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 494:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 495:armwave.c     ****                 noise *= noise;
 496:armwave.c     ****                 noise *= noise;
 497:armwave.c     ****                 noise *= noise;
 498:armwave.c     **** 
 499:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 500:armwave.c     ****                     noise = -noise;
 501:armwave.c     **** 
 502:armwave.c     ****                 noise += 1.0f;
 503:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 504:armwave.c     **** 
 505:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2719              		.loc 1 505 45 view .LVU674
 2720 0c08 5C8A9FED 		vldr.32	s16, .L176	@ tmp258,
 2721              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 506:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 507:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 508:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2722              		.loc 1 508 104 view .LVU675
 2723 0c0c 5CCA9FED 		vldr.32	s24, .L176+4	@ tmp259,
 2724              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2725              		.loc 1 486 5 view .LVU676
 2726 0c10 0070A0E3 		mov	r7, #0	@ set_offset,
 2727              	@ armwave.c:487:         printf("Calculating test set %d\n", s);
 487:armwave.c     ****         printf("Calculating test set %d\n", s);
 2728              		.loc 1 487 9 view .LVU677
 2729 0c14 84A19FE5 		ldr	r10, .L176+32	@ tmp257,
 2730              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2731              		.loc 1 486 5 view .LVU678
 2732 0c18 0780A0E1 		mov	r8, r7	@ s, set_offset
 2733              	.LVL176:
 2734              	.L148:
 487:armwave.c     ****         printf("Calculating test set %d\n", s);
 2735              		.loc 1 487 9 is_stmt 1 view .LVU679
 2736 0c1c 0810A0E1 		mov	r1, r8	@, s
 2737 0c20 0A00A0E1 		mov	r0, r10	@, tmp257
 2738 0c24 FEFFFFEB 		bl	printf		@
 2739              	.LVL177:
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2740              		.loc 1 489 9 view .LVU680
 2741              	@ armwave.c:489:         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2742              		.loc 1 489 39 is_stmt 0 view .LVU681
 2743 0c28 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2744              	@ armwave.c:489:         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2745              		.loc 1 489 9 view .LVU682
 2746 0c2c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2747 0c30 450000DA 		ble	.L149		@,
 2748              	@ armwave.c:491:             mod_val = 0.5f + (_1_waves_mod * w);
 491:armwave.c     **** 
 2749              		.loc 1 491 21 view .LVU683
 2750 0c34 53CADFED 		vldr.32	s25, .L176+8	@ tmp200,
 2751              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2752              		.loc 1 505 33 view .LVU684
 2753 0c38 53BA9FED 		vldr.32	s22, .L176+12	@ tmp253,
 2754              	@ armwave.c:503:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 2755              		.loc 1 503 24 view .LVU685
 2756 0c3c 53AADFED 		vldr.32	s21, .L176+16	@ tmp254,
 2757 0c40 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2758              	@ armwave.c:489:         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2759              		.loc 1 489 15 view .LVU686
 2760 0c44 0060A0E3 		mov	r6, #0	@ w,
 2761              	.LVL178:
 2762              	.L156:
 491:armwave.c     **** 
 2763              		.loc 1 491 13 is_stmt 1 view .LVU687
 2764              	@ armwave.c:491:             mod_val = 0.5f + (_1_waves_mod * w);
 491:armwave.c     **** 
 2765              		.loc 1 491 21 is_stmt 0 view .LVU688
 2766 0c48 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2767 0c4c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2768              	@ armwave.c:493:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2769              		.loc 1 493 13 view .LVU689
 2770 0c50 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2771              	@ armwave.c:491:             mod_val = 0.5f + (_1_waves_mod * w);
 491:armwave.c     **** 
 2772              		.loc 1 491 21 view .LVU690
 2773 0c54 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2774 0c58 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2775              	.LVL179:
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2776              		.loc 1 493 13 is_stmt 1 view .LVU691
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2777              		.loc 1 493 13 is_stmt 0 view .LVU692
 2778 0c5c 370000DA 		ble	.L150		@,
 2779 0c60 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2780              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2781              		.loc 1 508 113 view .LVU693
 2782 0c64 4AAA9FED 		vldr.32	s20, .L176+20	@ tmp229,
 2783 0c68 4A8ADFED 		vldr.32	s17, .L176+24	@ tmp230,
 2784              	@ armwave.c:493:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2785              		.loc 1 493 19 view .LVU694
 2786 0c6c 0040A0E3 		mov	r4, #0	@ x,
 2787              	.LVL180:
 2788              	.L155:
 494:armwave.c     ****                 noise *= noise;
 2789              		.loc 1 494 17 is_stmt 1 view .LVU695
 2790              	@ armwave.c:494:                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 2791              		.loc 1 494 28 is_stmt 0 view .LVU696
 2792 0c70 FEFFFFEB 		bl	rand		@
 2793              	.LVL181:
 2794              	@ armwave.c:494:                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 2795              		.loc 1 494 35 view .LVU697
 2796 0c74 7000FFE6 		uxth	r0, r0	@ tmp201,
 2797              	@ armwave.c:494:                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 2798              		.loc 1 494 45 view .LVU698
 2799 0c78 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2800 0c7c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2801              	@ armwave.c:494:                 noise  = ((rand() & 0xffff) * noise_fraction);
 494:armwave.c     ****                 noise *= noise;
 2802              		.loc 1 494 24 view .LVU699
 2803 0c80 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2804              	.LVL182:
 495:armwave.c     ****                 noise *= noise;
 2805              		.loc 1 495 17 is_stmt 1 view .LVU700
 2806              	@ armwave.c:495:                 noise *= noise;
 495:armwave.c     ****                 noise *= noise;
 2807              		.loc 1 495 23 is_stmt 0 view .LVU701
 2808 0c84 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2809              	.LVL183:
 496:armwave.c     ****                 noise *= noise;
 2810              		.loc 1 496 17 is_stmt 1 view .LVU702
 2811              	@ armwave.c:496:                 noise *= noise;
 496:armwave.c     ****                 noise *= noise;
 2812              		.loc 1 496 23 is_stmt 0 view .LVU703
 2813 0c88 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2814              	.LVL184:
 497:armwave.c     **** 
 2815              		.loc 1 497 17 is_stmt 1 view .LVU704
 2816              	@ armwave.c:497:                 noise *= noise;
 497:armwave.c     **** 
 2817              		.loc 1 497 23 is_stmt 0 view .LVU705
 2818 0c8c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2819              	.LVL185:
 499:armwave.c     ****                     noise = -noise;
 2820              		.loc 1 499 17 is_stmt 1 view .LVU706
 2821              	@ armwave.c:499:                 if((rand() & 0xffff) > 0x7fff)
 499:armwave.c     ****                     noise = -noise;
 2822              		.loc 1 499 21 is_stmt 0 view .LVU707
 2823 0c90 FEFFFFEB 		bl	rand		@
 2824              	.LVL186:
 500:armwave.c     **** 
 2825              		.loc 1 500 21 is_stmt 1 view .LVU708
 2826              	@ armwave.c:499:                 if((rand() & 0xffff) > 0x7fff)
 499:armwave.c     ****                     noise = -noise;
 2827              		.loc 1 499 19 is_stmt 0 view .LVU709
 2828 0c94 020910E3 		tst	r0, #32768	@,
 2829              	@ armwave.c:500:                     noise = -noise;
 500:armwave.c     **** 
 2830              		.loc 1 500 27 view .LVU710
 2831 0c98 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2832              	.LVL187:
 502:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2833              		.loc 1 502 17 is_stmt 1 view .LVU711
 503:armwave.c     **** 
 2834              		.loc 1 503 17 view .LVU712
 2835              	@ armwave.c:503:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 2836              		.loc 1 503 27 is_stmt 0 view .LVU713
 2837 0c9c FEFFFFEB 		bl	rand		@
 2838              	.LVL188:
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2839              		.loc 1 505 17 is_stmt 1 view .LVU714
 2840              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2841              		.loc 1 505 45 is_stmt 0 view .LVU715
 2842 0ca0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2843              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2844              		.loc 1 505 33 view .LVU716
 2845 0ca4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2846              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2847              		.loc 1 505 45 view .LVU717
 2848 0ca8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2849              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2850              		.loc 1 505 33 view .LVU718
 2851 0cac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2852              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2853              		.loc 1 505 45 view .LVU719
 2854 0cb0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2855              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2856              		.loc 1 505 33 view .LVU720
 2857 0cb4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2858              	@ armwave.c:503:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 2859              		.loc 1 503 34 view .LVU721
 2860 0cb8 7000FFE6 		uxth	r0, r0	@ tmp214,
 2861              	.LVL189:
 2862              	@ armwave.c:503:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 2863              		.loc 1 503 44 view .LVU722
 2864 0cbc 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2865 0cc0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2866              	@ armwave.c:503:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 503:armwave.c     **** 
 2867              		.loc 1 503 24 view .LVU723
 2868 0cc4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2869              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2870              		.loc 1 505 77 view .LVU724
 2871 0cc8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2872              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2873              		.loc 1 505 22 view .LVU725
 2874 0ccc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2875 0cd0 FEFFFFEB 		bl	sin		@
 2876              	.LVL190:
 2877              		.loc 1 508 17 is_stmt 1 view .LVU726
 2878              	@ armwave.c:502:                 noise += 1.0f;
 502:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2879              		.loc 1 502 23 is_stmt 0 view .LVU727
 2880 0cd4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2881              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2882              		.loc 1 508 104 view .LVU728
 2883 0cd8 0010A0E3 		mov	r1, #0	@ iftmp.23_50,
 2884              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2885              		.loc 1 505 98 view .LVU729
 2886 0cdc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2887              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2888              		.loc 1 505 87 view .LVU730
 2889 0ce0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2890              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2891              		.loc 1 505 98 view .LVU731
 2892 0ce4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2893              	@ armwave.c:505:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 505:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2894              		.loc 1 505 19 view .LVU732
 2895 0ce8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2896              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2897              		.loc 1 508 113 view .LVU733
 2898 0cec 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2899 0cf0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2900 0cf4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2901 0cf8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2902 0cfc 050000DA 		ble	.L152		@,
 2903              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2904              		.loc 1 508 104 discriminator 1 view .LVU734
 2905 0d00 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2906 0d04 FF10A0E3 		mov	r1, #255	@ iftmp.23_50,
 2907 0d08 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2908 0d0c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2909 0d10 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2910 0d14 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.23_50, %sfp
 2911              	.L152:
 2912              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2913              		.loc 1 508 57 discriminator 12 view .LVU735
 2914 0d18 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2915              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2916              		.loc 1 508 102 discriminator 12 view .LVU736
 2917 0d1c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2918 0d20 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2919 0d24 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2920              	@ armwave.c:493:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2921              		.loc 1 493 58 discriminator 12 view .LVU737
 2922 0d28 014084E2 		add	r4, r4, #1	@ x, x,
 2923              	.LVL191:
 2924              	@ armwave.c:508:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2925              		.loc 1 508 102 discriminator 12 view .LVU738
 2926 0d2c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.23_50, *_40
 2927              	@ armwave.c:493:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2928              		.loc 1 493 43 discriminator 12 view .LVU739
 2929 0d30 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2930              	@ armwave.c:493:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 493:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2931              		.loc 1 493 13 discriminator 12 view .LVU740
 2932 0d34 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2933 0d38 CCFFFFCA 		bgt	.L155		@,
 2934 0d3c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2935              	.LVL192:
 2936              	.L150:
 2937              	@ armwave.c:489:         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2938              		.loc 1 489 48 discriminator 2 view .LVU741
 2939 0d40 016086E2 		add	r6, r6, #1	@ w, w,
 2940              	.LVL193:
 2941              	@ armwave.c:489:         for(w = 0; w < g_armwave_state.waves; w++) {
 489:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2942              		.loc 1 489 9 discriminator 2 view .LVU742
 2943 0d44 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2944 0d48 BEFFFFBA 		blt	.L156		@,
 2945              	.LVL194:
 2946              	.L149:
 509:armwave.c     ****             }
 510:armwave.c     ****         }
 511:armwave.c     **** 
 512:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2947              		.loc 1 512 9 is_stmt 1 discriminator 2 view .LVU743
 2948              	@ armwave.c:512:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2949              		.loc 1 512 46 is_stmt 0 discriminator 2 view .LVU744
 2950 0d4c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2951              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2952              		.loc 1 486 27 discriminator 2 view .LVU745
 2953 0d50 018088E2 		add	r8, r8, #1	@ s, s,
 2954              	.LVL195:
 2955              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2956              		.loc 1 486 5 discriminator 2 view .LVU746
 2957 0d54 080059E1 		cmp	r9, r8	@ sets, s
 2958              	@ armwave.c:512:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2959              		.loc 1 512 20 discriminator 2 view .LVU747
 2960 0d58 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2961              	.LVL196:
 2962              	@ armwave.c:486:     for(s = 0; s < sets; s++) {
 486:armwave.c     ****         printf("Calculating test set %d\n", s);
 2963              		.loc 1 486 5 discriminator 2 view .LVU748
 2964 0d5c AEFFFF1A 		bne	.L148		@,
 2965              	.LVL197:
 2966              	.L145:
 2967              	@ armwave.c:514: }
 513:armwave.c     ****     }
 514:armwave.c     **** }
 2968              		.loc 1 514 1 view .LVU749
 2969 0d60 08D08DE2 		add	sp, sp, #8	@,,
 2970              		.cfi_remember_state
 2971              		.cfi_def_cfa_offset 80
 2972              		@ sp needed	@
 2973 0d64 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2974              		.cfi_restore 90
 2975              		.cfi_restore 91
 2976              		.cfi_restore 88
 2977              		.cfi_restore 89
 2978              		.cfi_restore 86
 2979              		.cfi_restore 87
 2980              		.cfi_restore 84
 2981              		.cfi_restore 85
 2982              		.cfi_restore 82
 2983              		.cfi_restore 83
 2984              		.cfi_restore 80
 2985              		.cfi_restore 81
 2986              		.cfi_def_cfa_offset 32
 2987              	.LVL198:
 2988              		.loc 1 514 1 view .LVU750
 2989 0d68 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2990              	.LVL199:
 2991              	.L175:
 2992              		.cfi_restore_state
 2993              	.LBB48:
 2994              	.LBB45:
 434:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2995              		.loc 1 434 9 is_stmt 1 view .LVU751
 2996 0d6c 940901E0 		mul	r1, r4, r9	@, _85, sets
 2997 0d70 0920A0E1 		mov	r2, r9	@, sets
 2998 0d74 28009FE5 		ldr	r0, .L176+36	@,
 2999 0d78 FEFFFFEB 		bl	printf		@
 3000              	.LVL200:
 436:armwave.c     ****     }
 3001              		.loc 1 436 9 view .LVU752
 3002 0d7c 9FFFFFEA 		b	.L147		@
 3003              	.L177:
 3004              		.align	2
 3005              	.L176:
 3006 0d80 0000803F 		.word	1065353216
 3007 0d84 00007F43 		.word	1132396544
 3008 0d88 0000003F 		.word	1056964608
 3009 0d8c C3F5C840 		.word	1086911939
 3010 0d90 38FFC74A 		.word	1254620984
 3011 0d94 0000FE42 		.word	1123942400
 3012 0d98 00000043 		.word	1124073472
 3013 0d9c 00000000 		.word	g_armwave_state
 3014 0da0 A8020000 		.word	.LC20
 3015 0da4 00020000 		.word	.LC18
 3016              	.LBE45:
 3017              	.LBE48:
 3018              		.cfi_endproc
 3019              	.LFE75:
 3021              		.align	2
 3022              		.global	armwave_cleanup
 3023              		.syntax unified
 3024              		.arm
 3025              		.fpu vfp
 3027              	armwave_cleanup:
 3028              	.LFB76:
 515:armwave.c     **** 
 516:armwave.c     **** /*
 517:armwave.c     ****  * Make a test square waveform.
 518:armwave.c     ****  *
 519:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 520:armwave.c     ****  */
 521:armwave.c     **** #if 0
 522:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 523:armwave.c     **** {
 524:armwave.c     ****     uint8_t v;
 525:armwave.c     ****     float noise, xnoise;
 526:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 527:armwave.c     ****     int w, x;
 528:armwave.c     **** 
 529:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 530:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 531:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 532:armwave.c     ****             noise *= noise;
 533:armwave.c     ****             noise *= noise;
 534:armwave.c     ****             noise *= noise;
 535:armwave.c     **** 
 536:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 537:armwave.c     ****                 noise = -noise;
 538:armwave.c     **** 
 539:armwave.c     ****             //noise += 1.0f;
 540:armwave.c     **** 
 541:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 542:armwave.c     ****                 new_level = 0.2f;
 543:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 544:armwave.c     ****                 new_level = 0.8f;
 545:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 546:armwave.c     ****                 new_level = 0.2f;
 547:armwave.c     ****             } else {
 548:armwave.c     ****                 new_level = 0.8f;
 549:armwave.c     ****             }
 550:armwave.c     **** 
 551:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 552:armwave.c     **** 
 553:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 554:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 555:armwave.c     ****         }
 556:armwave.c     ****     }
 557:armwave.c     **** }
 558:armwave.c     **** #endif
 559:armwave.c     **** 
 560:armwave.c     **** /*
 561:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 562:armwave.c     ****  */
 563:armwave.c     **** void armwave_cleanup()
 564:armwave.c     **** {
 3029              		.loc 1 564 1 view -0
 3030              		.cfi_startproc
 3031              		@ args = 0, pretend = 0, frame = 0
 3032              		@ frame_needed = 0, uses_anonymous_args = 0
 565:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3033              		.loc 1 565 5 view .LVU754
 3034              	@ armwave.c:564: {
 564:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3035              		.loc 1 564 1 is_stmt 0 view .LVU755
 3036 0da8 10402DE9 		push	{r4, lr}	@
 3037              		.cfi_def_cfa_offset 8
 3038              		.cfi_offset 4, -8
 3039              		.cfi_offset 14, -4
 3040              	@ armwave.c:565:     free(g_armwave_state.out_pixbuf);
 3041              		.loc 1 565 25 view .LVU756
 3042 0dac 34409FE5 		ldr	r4, .L180	@ tmp114,
 3043              	@ armwave.c:565:     free(g_armwave_state.out_pixbuf);
 3044              		.loc 1 565 5 view .LVU757
 3045 0db0 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3046 0db4 FEFFFFEB 		bl	free		@
 3047              	.LVL201:
 566:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3048              		.loc 1 566 5 is_stmt 1 view .LVU758
 3049 0db8 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3050 0dbc FEFFFFEB 		bl	free		@
 3051              	.LVL202:
 567:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3052              		.loc 1 567 5 view .LVU759
 3053 0dc0 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3054 0dc4 FEFFFFEB 		bl	free		@
 3055              	.LVL203:
 568:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3056              		.loc 1 568 5 view .LVU760
 3057 0dc8 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3058 0dcc FEFFFFEB 		bl	free		@
 3059              	.LVL204:
 569:armwave.c     **** 
 570:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3060              		.loc 1 570 5 view .LVU761
 3061              	@ armwave.c:570:     g_armwave_state.out_pixbuf = NULL;
 3062              		.loc 1 570 32 is_stmt 0 view .LVU762
 3063 0dd0 0030A0E3 		mov	r3, #0	@ tmp123,
 3064 0dd4 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 571:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3065              		.loc 1 571 5 is_stmt 1 view .LVU763
 3066              	@ armwave.c:571:     g_armwave_state.ch1_buffer = NULL;
 3067              		.loc 1 571 32 is_stmt 0 view .LVU764
 3068 0dd8 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 572:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3069              		.loc 1 572 5 is_stmt 1 view .LVU765
 3070              	@ armwave.c:572:     g_armwave_state.xcoord_to_xpixel = NULL;
 3071              		.loc 1 572 38 is_stmt 0 view .LVU766
 3072 0ddc 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 573:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3073              		.loc 1 573 5 is_stmt 1 view .LVU767
 3074              	@ armwave.c:573:     g_armwave_state.test_wave_buffer = NULL;
 3075              		.loc 1 573 38 is_stmt 0 view .LVU768
 3076 0de0 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3077              	@ armwave.c:574: }
 574:armwave.c     **** }
 3078              		.loc 1 574 1 view .LVU769
 3079 0de4 1080BDE8 		pop	{r4, pc}	@
 3080              	.L181:
 3081              		.align	2
 3082              	.L180:
 3083 0de8 00000000 		.word	g_armwave_state
 3084              		.cfi_endproc
 3085              	.LFE76:
 3087              		.comm	gamma_table,256,4
 3088              		.comm	g_armwave_state,136,4
 3089              		.section	.rodata
 3090              		.align	2
 3091              		.set	.LANCHOR0,. + 0
 3094              	__PRETTY_FUNCTION__.17124:
 3095 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3095      6176655F 
 3095      73657475 
 3095      705F7265 
 3095      6E646572 
 3096 0015 000000   		.space	3
 3099              	__PRETTY_FUNCTION__.17131:
 3100 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3100      6176655F 
 3100      7365745F 
 3100      77617665 
 3100      5F706F69 
 3101 0031 000000   		.space	3
 3104              	__PRETTY_FUNCTION__.17138:
 3105 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3105      6176655F 
 3105      7365745F 
 3105      77617665 
 3105      5F706F69 
 3106              		.section	.rodata.str1.4,"aMS",%progbits,1
 3107              		.align	2
 3108              	.LC0:
 3109 0000 76302E30 		.ascii	"v0.0.1\000"
 3109      2E3100
 3110 0007 00       		.space	1
 3111              	.LC1:
 3112 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3112      61766520 
 3112      76657273 
 3112      696F6E3A 
 3112      2025730A 
 3113 001d 000000   		.space	3
 3114              	.LC2:
 3115 0020 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d)\012\000"
 3115      6176655F 
 3115      67656E65 
 3115      72617465 
 3115      3A20736C 
 3116 0049 000000   		.space	3
 3117              	.LC3:
 3118 004c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3118      20653D25 
 3118      6420773D 
 3118      25642077 
 3118      733D2564 
 3119              	.LC4:
 3120 0078 61726D77 		.ascii	"armwave.c\000"
 3120      6176652E 
 3120      6300
 3121 0082 0000     		.space	2
 3122              	.LC5:
 3123 0084 73746172 		.ascii	"start_point < end_point\000"
 3123      745F706F 
 3123      696E7420 
 3123      3C20656E 
 3123      645F706F 
 3124              	.LC6:
 3125 009c 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3125      7566665F 
 3125      73697A65 
 3125      3D25642C 
 3125      20636D70 
 3126 00cf 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3126      5F776964 
 3126      74683D25 
 3126      642C2077 
 3126      6176655F 
 3127 00f9 000000   		.space	3
 3128              	.LC7:
 3129 00fc 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3129      6D776176 
 3129      655F7374 
 3129      6174652E 
 3129      6368315F 
 3130 011f 00       		.space	1
 3131              	.LC8:
 3132 0120 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3132      6D776176 
 3132      655F7374 
 3132      6174652E 
 3132      78636F6F 
 3133 0149 000000   		.space	3
 3134              	.LC9:
 3135 014c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3135      3A203078 
 3135      25303878 
 3135      20307825 
 3135      30387820 
 3136              	.LC10:
 3137 0170 77617665 		.ascii	"wave_buffer != NULL\000"
 3137      5F627566 
 3137      66657220 
 3137      213D204E 
 3137      554C4C00 
 3138              	.LC11:
 3139 0184 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3139      6176655F 
 3139      7365745F 
 3139      77617665 
 3139      5F706F69 
 3140 01b7 78636565 		.ascii	"xceeded\000"
 3140      64656400 
 3141 01bf 00       		.space	1
 3142              	.LC12:
 3143 01c0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3143      5F627566 
 3143      6665725F 
 3143      70747220 
 3143      213D2030 
 3144 01d5 000000   		.space	3
 3145              	.LC13:
 3146 01d8 776200   		.ascii	"wb\000"
 3147 01db 00       		.space	1
 3148              	.LC14:
 3149 01dc 50330A00 		.ascii	"P3\012\000"
 3150              	.LC15:
 3151 01e0 25642025 		.ascii	"%d %d\012\000"
 3151      640A00
 3152 01e7 00       		.space	1
 3153              	.LC16:
 3154 01e8 3235350A 		.ascii	"255\012\000"
 3154      00
 3155 01ed 000000   		.space	3
 3156              	.LC17:
 3157 01f0 25336420 		.ascii	"%3d %3d %3d\012\000"
 3157      25336420 
 3157      2533640A 
 3157      00
 3158 01fd 000000   		.space	3
 3159              	.LC18:
 3160 0200 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3160      6176655F 
 3160      74657374 
 3160      5F627566 
 3160      6665725F 
 3161 0233 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3161      20627566 
 3161      66657220 
 3161      28256420 
 3161      62797465 
 3162              	.LC19:
 3163 0254 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3163      6176655F 
 3163      66696C6C 
 3163      5F706978 
 3163      6275665F 
 3164 0287 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3164      20666169 
 3164      6C65642C 
 3164      20726574 
 3164      75726E69 
 3165 02a6 0000     		.space	2
 3166              	.LC20:
 3167 02a8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3167      756C6174 
 3167      696E6720 
 3167      74657374 
 3167      20736574 
 3168              		.text
 3169              	.Letext0:
 3170              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3171              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3172              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3173              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3174              		.file 7 "/usr/include/stdio.h"
 3175              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3176              		.file 9 "/usr/include/errno.h"
 3177              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3178              		.file 11 "/usr/include/unistd.h"
 3179              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3180              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3181              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3182              		.file 15 "/usr/include/math.h"
 3183              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3184              		.file 17 "/usr/include/time.h"
 3185              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3186              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3187              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3188              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3189              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3190              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3191              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3192              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3193              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3194              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3195              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3196              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3197              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3198              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3199              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3200              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3201              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3202              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3203              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3204              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3205              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3206              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3207              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3208              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3209              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3210              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3211              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3212              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3213              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3214              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3215              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3216              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3217              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3218              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3219              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3220              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3221              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3222              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3223              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3224              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3225              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3226              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3227              		.file 60 "/usr/local/include/python3.8/context.h"
 3228              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3229              		.file 62 "/usr/local/include/python3.8/code.h"
 3230              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3231              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3232              		.file 65 "/usr/local/include/python3.8/import.h"
 3233              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3234              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3235              		.file 68 "/usr/include/malloc.h"
 3236              		.file 69 "armwave.h"
 3237              		.file 70 "/usr/include/stdlib.h"
 3238              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3239              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3240              		.file 73 "<built-in>"
 3241              		.file 74 "/usr/include/assert.h"
