   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** struct armwave_state_t g_armwave_state;
  35:armwave.c     **** 
  36:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  37:armwave.c     **** uint8_t gamma_table[256];
  38:armwave.c     **** 
  39:armwave.c     **** // for now...
  40:armwave.c     **** const int overall_scale = 1;
  41:armwave.c     **** 
  42:armwave.c     **** float mod_depth = 0.0f;
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Make a test AM waveform for render tests.
  46:armwave.c     ****  */
  47:armwave.c     **** void test_create_waveform()
  48:armwave.c     **** {
  49:armwave.c     ****     float v, mod, noise, xnoise;
  50:armwave.c     ****     int w, x;
  51:armwave.c     **** 
  52:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  53:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  54:armwave.c     ****         //mod = 1.0f;
  55:armwave.c     **** 
  56:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  57:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  58:armwave.c     ****             noise *= noise;
  59:armwave.c     ****             noise *= noise;
  60:armwave.c     ****             noise *= noise;
  61:armwave.c     **** 
  62:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  63:armwave.c     ****                 noise = -noise;
  64:armwave.c     **** 
  65:armwave.c     ****             noise += 1.0f;
  66:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  67:armwave.c     **** 
  68:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  69:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  70:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  71:armwave.c     ****         }
  72:armwave.c     ****     }
  73:armwave.c     **** }
  74:armwave.c     **** 
  75:armwave.c     **** /*
  76:armwave.c     ****  * Create a gamma table.
  77:armwave.c     ****  */
  78:armwave.c     **** void test_create_gamma()
  79:armwave.c     **** {
  80:armwave.c     ****     int i;
  81:armwave.c     ****     float gamma = 0.90f;
  82:armwave.c     **** 
  83:armwave.c     ****     for(i = 0; i < 256; i++) {
  84:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  85:armwave.c     ****     }
  86:armwave.c     **** }
  87:armwave.c     **** 
  88:armwave.c     **** /*
  89:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  90:armwave.c     ****  * pre-computed.
  91:armwave.c     ****  *
  92:armwave.c     ****  * @param    slice_y        Slice to render at
  93:armwave.c     ****  * @param    height         Number of wave points to render
  94:armwave.c     ****  */
  95:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  96:armwave.c     **** {
  97:armwave.c     ****     int yy, ys, w, scale_value;
  98:armwave.c     ****     uint32_t value, word;
  99:armwave.c     ****     uint8_t *wave_base;
 100:armwave.c     ****     uint8_t *write_buffer_base;
 101:armwave.c     ****     uint8_t *write_buffer;
 102:armwave.c     ****     
 103:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 104:armwave.c     **** 
 105:armwave.c     ****     // roll through each waveform
 106:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 107:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 111:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 112:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 113:armwave.c     **** #endif
 114:armwave.c     **** 
 115:armwave.c     ****         // roll through y and render the slice into the out buffer
 116:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 117:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 118:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 119:armwave.c     **** 
 120:armwave.c     **** #if 0
 121:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 122:armwave.c     **** 
 123:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 124:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 125:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 126:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 127:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 128:armwave.c     ****                    wave_base + yy);
 129:armwave.c     **** #endif
 130:armwave.c     **** 
 131:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 132:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 133:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 134:armwave.c     ****             //*(write_buffer + value) = 0xff;
 135:armwave.c     **** 
 136:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 137:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 138:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 139:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 140:armwave.c     ****             	word >>= 8;
 141:armwave.c     ****     		}
 142:armwave.c     **** 
 143:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 144:armwave.c     ****         }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 147:armwave.c     **** 
 148:armwave.c     **** void armwave_init()
 149:armwave.c     **** {
 150:armwave.c     ****     g_armwave_state.flags = 0;
 151:armwave.c     **** }
 152:armwave.c     **** 
 153:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 153 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 154:armwave.c     **** {
 155:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 155 5 view .LVU1
 156:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 156 5 view .LVU2
 157:armwave.c     **** 
 158:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 158 5 view .LVU3
 159:armwave.c     **** 
 160:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 161:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 161 5 view .LVU4
  93              	@ armwave.c:153: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 153:armwave.c     **** {
  94              		.loc 1 153 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 162:armwave.c     **** 
 163:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 164:armwave.c     ****     assert((target_height % 256) == 0);
 165:armwave.c     **** 
 166:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 167:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 167 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 105              		.loc 1 161 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp172,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 169:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 169 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 170:armwave.c     ****     g_armwave_state.waves = waves;
 171:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 172:armwave.c     ****     g_armwave_state.target_width = target_width;
 173:armwave.c     ****     g_armwave_state.target_height = target_height;
 174:armwave.c     **** 
 175:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 176:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 178:armwave.c     ****     g_armwave_state.slice_height = 64;  
 179:armwave.c     **** 
 180:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 180 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 168 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 118              		.loc 1 161 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 120              		.loc 1 164 5 is_stmt 1 view .LVU12
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 167 5 view .LVU13
 122              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 171 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 170 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 180 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 168 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 167 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 168 5 is_stmt 1 view .LVU19
 169:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 169 5 view .LVU20
 139              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 140              		.loc 1 173 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 169 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 170 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 172 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 170 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 171 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 154              		.loc 1 178 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 171 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 172 5 is_stmt 1 view .LVU29
 173:armwave.c     **** 
 160              		.loc 1 173 5 view .LVU30
 178:armwave.c     **** 
 161              		.loc 1 178 5 view .LVU31
 162              		.loc 1 180 5 view .LVU32
 163              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 180 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 181:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 181 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 182:armwave.c     **** 
 183:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 183 5 view .LVU35
 172              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 183 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 184 33 view .LVU37
 180 0064 4D2CE0E3 		mvn	r2, #19712	@ tmp150,
 181              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 186:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 186 33 view .LVU38
 183 0068 1930A0E3 		mov	r3, #25	@ tmp152,
 184              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 184 33 view .LVU39
 186 006c B024C4E1 		strh	r2, [r4, #64]	@ movhi	@ tmp150, MEM[(unsigned char *)&g_armwave_state + 64B]
 187              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 186 33 view .LVU40
 189 0070 4230C4E5 		strb	r3, [r4, #66]	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 188:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 188 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 183 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 184 5 is_stmt 1 view .LVU43
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 185 5 view .LVU44
 186:armwave.c     **** 
 198              		.loc 1 186 5 view .LVU45
 199              		.loc 1 188 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 189:armwave.c     **** 
 190:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 191:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 191 5 view .LVU47
 202              	.LVL3:
 192:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 192 5 view .LVU48
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 193 5 view .LVU49
 205              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 193 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp174, g_armwave_state.slice_height
 208              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 194 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 193 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp159, tmp174
 214              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 193 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp161, tmp159
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp161, g_armwave_state.slice_record_height
 218              		.loc 1 194 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 194 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 196:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 196 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp162,
 226              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 194 38 view .LVU57
 228 009c 4C0084E5 		str	r0, [r4, #76]	@ tmp162, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 196 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     **** 
 198:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 198 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.25, tmp162,
 234              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 235              		.loc 1 196 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 199:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 199 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 199 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 198 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 198 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 199 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp167, xx
 253              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 199 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp168, tmp167
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp168, tmp168
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp168, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 198 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 200:armwave.c     **** 
 201:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 202:armwave.c     ****     }
 203:armwave.c     **** 
 204:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 204 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 204 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 204 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:205: }
 205:armwave.c     **** }
 271              		.loc 1 205 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 188:armwave.c     **** 
 275              		.loc 1 188 5 is_stmt 1 view .LVU72
 276 00dc 28309FE5 		ldr	r3, .L12+8	@,
 277 00e0 BC20A0E3 		mov	r2, #188	@,
 278 00e4 24109FE5 		ldr	r1, .L12+12	@,
 279 00e8 24009FE5 		ldr	r0, .L12+16	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 196:armwave.c     **** 
 283              		.loc 1 196 5 view .LVU73
 284 00f0 14309FE5 		ldr	r3, .L12+8	@,
 285 00f4 C420A0E3 		mov	r2, #196	@,
 286 00f8 10109FE5 		ldr	r1, .L12+12	@,
 287 00fc 14009FE5 		ldr	r0, .L12+20	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c 00000000 		.word	.LANCHOR0
 296 0110 00000000 		.word	.LC0
 297 0114 0C000000 		.word	.LC1
 298 0118 30000000 		.word	.LC2
 299              		.cfi_endproc
 300              	.LFE72:
 302              		.align	2
 303              		.global	test_create_waveform
 304              		.syntax unified
 305              		.arm
 306              		.fpu vfp
 308              	test_create_waveform:
 309              	.LFB57:
  48:armwave.c     ****     float v, mod, noise, xnoise;
 310              		.loc 1 48 1 view -0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 8
 313              		@ frame_needed = 0, uses_anonymous_args = 0
  49:armwave.c     ****     int w, x;
 314              		.loc 1 49 5 view .LVU75
  50:armwave.c     **** 
 315              		.loc 1 50 5 view .LVU76
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 316              		.loc 1 52 5 view .LVU77
 317              	.LVL11:
 318              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 319              		.loc 1 48 1 is_stmt 0 view .LVU78
 320 011c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 321              		.cfi_def_cfa_offset 36
 322              		.cfi_offset 4, -36
 323              		.cfi_offset 5, -32
 324              		.cfi_offset 6, -28
 325              		.cfi_offset 7, -24
 326              		.cfi_offset 8, -20
 327              		.cfi_offset 9, -16
 328              		.cfi_offset 10, -12
 329              		.cfi_offset 11, -8
 330              		.cfi_offset 14, -4
 331 0120 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 332              		.cfi_def_cfa_offset 84
 333              		.cfi_offset 80, -84
 334              		.cfi_offset 81, -80
 335              		.cfi_offset 82, -76
 336              		.cfi_offset 83, -72
 337              		.cfi_offset 84, -68
 338              		.cfi_offset 85, -64
 339              		.cfi_offset 86, -60
 340              		.cfi_offset 87, -56
 341              		.cfi_offset 88, -52
 342              		.cfi_offset 89, -48
 343              		.cfi_offset 90, -44
 344              		.cfi_offset 91, -40
 345 0124 5C819FE5 		ldr	r8, .L33+40	@ _75,
 346              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 347              		.loc 1 53 33 view .LVU79
 348 0128 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 349 012c 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.41, _75,
 350              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 351              		.loc 1 53 13 view .LVU80
 352 0130 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 353              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 354              		.loc 1 57 20 view .LVU81
 355 0134 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 356              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 357              		.loc 1 68 29 view .LVU82
 358 0138 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 359              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 360              		.loc 1 68 33 view .LVU83
 361 013c 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 362              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 363              		.loc 1 66 20 view .LVU84
 364 0140 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 365 0144 02B886E2 		add	fp, r6, #131072	@ _81,,
 366 0148 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 367              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 368              		.loc 1 48 1 view .LVU85
 369 014c 0CD04DE2 		sub	sp, sp, #12	@,,
 370              		.cfi_def_cfa_offset 96
 371 0150 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 372 0154 0F6086E2 		add	r6, r6, #15	@ ivtmp.41, ivtmp.41,
 373 0158 008068E2 		rsb	r8, r8, #0	@ ivtmp.44, _75
 374              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 375              		.loc 1 52 11 view .LVU86
 376 015c 0090A0E3 		mov	r9, #0	@ w,
 377              	.LVL12:
 378              	.L20:
  53:armwave.c     ****         //mod = 1.0f;
 379              		.loc 1 53 9 is_stmt 1 view .LVU87
 380              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 381              		.loc 1 53 24 is_stmt 0 view .LVU88
 382 0160 909A07EE 		vmov	s15, r9	@ int	@ w, w
 383              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 384              		.loc 1 53 48 view .LVU89
 385 0164 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 386              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 387              		.loc 1 53 13 view .LVU90
 388 0168 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 389              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 390              		.loc 1 65 19 view .LVU91
 391 016c 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 392              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 393              		.loc 1 53 24 view .LVU92
 394 0170 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 395              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 396              		.loc 1 70 58 view .LVU93
 397 0174 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 398 0178 025B46E2 		sub	r5, r6, #2048	@ ivtmp.34, ivtmp.41,
 399 017c 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.44,
 400              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 401              		.loc 1 53 33 view .LVU94
 402 0180 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 403              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 404              		.loc 1 53 13 view .LVU95
 405 0184 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 406              	.LVL13:
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 407              		.loc 1 56 9 is_stmt 1 view .LVU96
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 56 9 is_stmt 0 view .LVU97
 409 0188 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 410              	.LVL14:
 411              	.L19:
 412              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 413              		.loc 1 57 24 view .LVU98
 414 018c FEFFFFEB 		bl	rand		@
 415              	.LVL15:
 416 0190 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.34
 417              	.LVL16:
  57:armwave.c     ****             noise *= noise;
 418              		.loc 1 57 13 is_stmt 1 view .LVU99
 419              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 420              		.loc 1 57 31 is_stmt 0 view .LVU100
 421 0194 7000FFE6 		uxth	r0, r0	@ tmp163,
 422              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 423              		.loc 1 57 41 view .LVU101
 424 0198 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 425 019c E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 426              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 427              		.loc 1 57 20 view .LVU102
 428 01a0 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 429              	.LVL17:
  58:armwave.c     ****             noise *= noise;
 430              		.loc 1 58 13 is_stmt 1 view .LVU103
 431              	@ armwave.c:58:             noise *= noise;
  58:armwave.c     ****             noise *= noise;
 432              		.loc 1 58 19 is_stmt 0 view .LVU104
 433 01a4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 434              	.LVL18:
  59:armwave.c     ****             noise *= noise;
 435              		.loc 1 59 13 is_stmt 1 view .LVU105
 436              	@ armwave.c:59:             noise *= noise;
  59:armwave.c     ****             noise *= noise;
 437              		.loc 1 59 19 is_stmt 0 view .LVU106
 438 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 439              	.LVL19:
  60:armwave.c     **** 
 440              		.loc 1 60 13 is_stmt 1 view .LVU107
 441              	@ armwave.c:60:             noise *= noise;
  60:armwave.c     **** 
 442              		.loc 1 60 19 is_stmt 0 view .LVU108
 443 01ac A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 444              	.LVL20:
  62:armwave.c     ****                 noise = -noise;
 445              		.loc 1 62 13 is_stmt 1 view .LVU109
 446              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 447              		.loc 1 62 17 is_stmt 0 view .LVU110
 448 01b0 FEFFFFEB 		bl	rand		@
 449              	.LVL21:
  63:armwave.c     **** 
 450              		.loc 1 63 17 is_stmt 1 view .LVU111
 451              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 452              		.loc 1 62 15 is_stmt 0 view .LVU112
 453 01b4 020910E3 		tst	r0, #32768	@,
 454              	@ armwave.c:63:                 noise = -noise;
  63:armwave.c     **** 
 455              		.loc 1 63 23 view .LVU113
 456 01b8 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 457              	.LVL22:
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 458              		.loc 1 65 13 is_stmt 1 view .LVU114
  66:armwave.c     **** 
 459              		.loc 1 66 13 view .LVU115
 460              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 461              		.loc 1 66 23 is_stmt 0 view .LVU116
 462 01bc FEFFFFEB 		bl	rand		@
 463              	.LVL23:
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 464              		.loc 1 68 13 is_stmt 1 view .LVU117
 465              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 466              		.loc 1 68 29 is_stmt 0 view .LVU118
 467 01c0 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 468 01c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 469 01c8 AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 470              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 471              		.loc 1 66 30 view .LVU119
 472 01cc 7000FFE6 		uxth	r0, r0	@ tmp173,
 473              	.LVL24:
 474              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 475              		.loc 1 66 40 view .LVU120
 476 01d0 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 477 01d4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 478              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 479              		.loc 1 66 20 view .LVU121
 480 01d8 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 481              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 482              		.loc 1 68 60 view .LVU122
 483 01dc 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 484              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 485              		.loc 1 68 18 view .LVU123
 486 01e0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 487 01e4 FEFFFFEB 		bl	sin		@
 488              	.LVL25:
  70:armwave.c     ****         }
 489              		.loc 1 70 13 is_stmt 1 view .LVU124
 490              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 491              		.loc 1 65 19 is_stmt 0 view .LVU125
 492 01e8 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 493              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 494              		.loc 1 70 58 view .LVU126
 495 01ec 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 496              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 497              		.loc 1 70 56 view .LVU127
 498 01f0 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 499 01f4 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 500              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 501              		.loc 1 68 77 view .LVU128
 502 01f8 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 503              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 504              		.loc 1 68 70 view .LVU129
 505 01fc 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 506              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 507              		.loc 1 68 77 view .LVU130
 508 0200 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 509              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 510              		.loc 1 68 15 view .LVU131
 511 0204 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 512              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 513              		.loc 1 70 58 view .LVU132
 514 0208 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 515 020c 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 516 0210 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 517 0214 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 518 0218 050000DA 		ble	.L16		@,
 519              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 520              		.loc 1 70 56 discriminator 1 view .LVU133
 521 021c C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 522 0220 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 523 0224 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 524 0228 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 525 022c 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 526 0230 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 527              	.L16:
 528              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 529              		.loc 1 70 56 discriminator 12 view .LVU134
 530 0234 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 531              	.LVL26:
 532              	@ armwave.c:56:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 533              		.loc 1 56 9 discriminator 12 view .LVU135
 534 0238 060055E1 		cmp	r5, r6	@ ivtmp.34, ivtmp.41
 535 023c D2FFFF1A 		bne	.L19		@,
 536 0240 026B85E2 		add	r6, r5, #2048	@ ivtmp.41, ivtmp.34,
 537              	.LVL27:
 538              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 539              		.loc 1 52 5 discriminator 2 view .LVU136
 540 0244 0B0056E1 		cmp	r6, fp	@ ivtmp.41, _81
 541              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 542              		.loc 1 52 34 discriminator 2 view .LVU137
 543 0248 019089E2 		add	r9, r9, #1	@ w, w,
 544              	.LVL28:
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 545              		.loc 1 52 34 discriminator 2 view .LVU138
 546 024c 028B48E2 		sub	r8, r8, #2048	@ ivtmp.44, ivtmp.44,
 547              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 548              		.loc 1 52 5 discriminator 2 view .LVU139
 549 0250 C2FFFF1A 		bne	.L20		@,
 550              	@ armwave.c:73: }
  73:armwave.c     **** 
 551              		.loc 1 73 1 view .LVU140
 552 0254 0CD08DE2 		add	sp, sp, #12	@,,
 553              		.cfi_def_cfa_offset 84
 554              		@ sp needed	@
 555 0258 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 556              		.cfi_restore 90
 557              		.cfi_restore 91
 558              		.cfi_restore 88
 559              		.cfi_restore 89
 560              		.cfi_restore 86
 561              		.cfi_restore 87
 562              		.cfi_restore 84
 563              		.cfi_restore 85
 564              		.cfi_restore 82
 565              		.cfi_restore 83
 566              		.cfi_restore 80
 567              		.cfi_restore 81
 568              		.cfi_def_cfa_offset 36
 569              	.LVL29:
  73:armwave.c     **** 
 570              		.loc 1 73 1 view .LVU141
 571 025c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 572              	.LVL30:
 573              	.L34:
  73:armwave.c     **** 
 574              		.loc 1 73 1 view .LVU142
 575              		.align	2
 576              	.L33:
 577 0260 0000803C 		.word	1015021568
 578 0264 0000003F 		.word	1056964608
 579 0268 0050C347 		.word	1203982336
 580 026c C3F5C840 		.word	1086911939
 581 0270 0000003A 		.word	973078528
 582 0274 38FFC74A 		.word	1254620984
 583 0278 0000803F 		.word	1065353216
 584 027c 0000FE42 		.word	1123942400
 585 0280 00000043 		.word	1124073472
 586 0284 00007F43 		.word	1132396544
 587 0288 00000000 		.word	test_wave_buffer
 588 028c 00000000 		.word	.LANCHOR1
 589              		.cfi_endproc
 590              	.LFE57:
 592              		.align	2
 593              		.global	test_create_gamma
 594              		.syntax unified
 595              		.arm
 596              		.fpu vfp
 598              	test_create_gamma:
 599              	.LFB58:
  79:armwave.c     ****     int i;
 600              		.loc 1 79 1 is_stmt 1 view -0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
  80:armwave.c     ****     float gamma = 0.90f;
 604              		.loc 1 80 5 view .LVU144
  81:armwave.c     **** 
 605              		.loc 1 81 5 view .LVU145
 606              	.LVL31:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 607              		.loc 1 83 5 view .LVU146
 608              	@ armwave.c:79: {
  79:armwave.c     ****     int i;
 609              		.loc 1 79 1 is_stmt 0 view .LVU147
 610 0290 70402DE9 		push	{r4, r5, r6, lr}	@
 611              		.cfi_def_cfa_offset 16
 612              		.cfi_offset 4, -16
 613              		.cfi_offset 5, -12
 614              		.cfi_offset 6, -8
 615              		.cfi_offset 14, -4
 616 0294 068B2DED 		vpush.64	{d8, d9, d10}	@
 617              		.cfi_def_cfa_offset 40
 618              		.cfi_offset 80, -40
 619              		.cfi_offset 81, -36
 620              		.cfi_offset 82, -32
 621              		.cfi_offset 83, -28
 622              		.cfi_offset 84, -24
 623              		.cfi_offset 85, -20
 624 0298 64409FE5 		ldr	r4, .L39+20	@ ivtmp.52,
 625              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 626              		.loc 1 84 32 view .LVU148
 627 029c 17AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 628              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 629              		.loc 1 84 26 view .LVU149
 630 02a0 129B9FED 		vldr.64	d9, .L39	@ tmp135,
 631              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 632              		.loc 1 84 49 view .LVU150
 633 02a4 138B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 634 02a8 015084E2 		add	r5, r4, #1	@ _25, ivtmp.52,
 635 02ac 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.52,
 636 02b0 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 637              	.LVL32:
 638              	.L36:
  84:armwave.c     ****     }
 639              		.loc 1 84 9 is_stmt 1 discriminator 3 view .LVU151
 640              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 641              		.loc 1 84 32 is_stmt 0 discriminator 3 view .LVU152
 642 02b4 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.52
 643              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 644              		.loc 1 84 26 discriminator 3 view .LVU153
 645 02b8 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 646              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 647              		.loc 1 84 32 discriminator 3 view .LVU154
 648 02bc 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 649 02c0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 650 02c4 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 651              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 652              		.loc 1 84 26 discriminator 3 view .LVU155
 653 02c8 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 654 02cc FEFFFFEB 		bl	pow		@
 655              	.LVL33:
 656              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 657              		.loc 1 84 49 discriminator 3 view .LVU156
 658 02d0 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 659              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 660              		.loc 1 84 24 discriminator 3 view .LVU157
 661 02d4 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 662 02d8 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 663 02dc 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 664              	.LVL34:
 665              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 666              		.loc 1 83 5 discriminator 3 view .LVU158
 667 02e0 060054E1 		cmp	r4, r6	@ ivtmp.52, _26
 668 02e4 F2FFFF1A 		bne	.L36		@,
 669              	@ armwave.c:86: }
  86:armwave.c     **** 
 670              		.loc 1 86 1 view .LVU159
 671 02e8 068BBDEC 		vldm	sp!, {d8-d10}	@,
 672              		.cfi_restore 84
 673              		.cfi_restore 85
 674              		.cfi_restore 82
 675              		.cfi_restore 83
 676              		.cfi_restore 80
 677              		.cfi_restore 81
 678              		.cfi_def_cfa_offset 16
 679 02ec 7080BDE8 		pop	{r4, r5, r6, pc}	@
 680              	.LVL35:
 681              	.L40:
  86:armwave.c     **** 
 682              		.loc 1 86 1 view .LVU160
 683              		.align	3
 684              	.L39:
 685 02f0 000000C0 		.word	-1073741824
 686 02f4 CCCCEC3F 		.word	1072483532
 687 02f8 00000000 		.word	0
 688 02fc 00E06F40 		.word	1081073664
 689 0300 00007F43 		.word	1132396544
 690 0304 FFFFFFFF 		.word	gamma_table-1
 691              		.cfi_endproc
 692              	.LFE58:
 694              		.align	2
 695              		.global	render_nonaa_to_buffer_1ch_slice
 696              		.syntax unified
 697              		.arm
 698              		.fpu vfp
 700              	render_nonaa_to_buffer_1ch_slice:
 701              	.LVL36:
 702              	.LFB59:
  96:armwave.c     ****     int yy, ys, w, scale_value;
 703              		.loc 1 96 1 is_stmt 1 view -0
 704              		.cfi_startproc
 705              		@ args = 0, pretend = 0, frame = 0
 706              		@ frame_needed = 0, uses_anonymous_args = 0
  97:armwave.c     ****     uint32_t value, word;
 707              		.loc 1 97 5 view .LVU162
  98:armwave.c     ****     uint8_t *wave_base;
 708              		.loc 1 98 5 view .LVU163
  99:armwave.c     ****     uint8_t *write_buffer_base;
 709              		.loc 1 99 5 view .LVU164
 100:armwave.c     ****     uint8_t *write_buffer;
 710              		.loc 1 100 5 view .LVU165
 101:armwave.c     ****     
 711              		.loc 1 101 5 view .LVU166
 103:armwave.c     **** 
 712              		.loc 1 103 5 view .LVU167
 713              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 714              		.loc 1 103 40 is_stmt 0 view .LVU168
 715 0308 F4209FE5 		ldr	r2, .L53	@ tmp257,
 716              	@ armwave.c:96: {
  96:armwave.c     ****     int yy, ys, w, scale_value;
 717              		.loc 1 96 1 view .LVU169
 718 030c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 719              		.cfi_def_cfa_offset 36
 720              		.cfi_offset 4, -36
 721              		.cfi_offset 5, -32
 722              		.cfi_offset 6, -28
 723              		.cfi_offset 7, -24
 724              		.cfi_offset 8, -20
 725              		.cfi_offset 9, -16
 726              		.cfi_offset 10, -12
 727              		.cfi_offset 11, -8
 728              		.cfi_offset 14, -4
 729              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 730              		.loc 1 106 5 view .LVU170
 731 0310 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 732              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 733              		.loc 1 103 63 view .LVU171
 734 0314 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 735              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 736              		.loc 1 106 5 view .LVU172
 737 0318 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 738              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 739              		.loc 1 103 40 view .LVU173
 740 031c 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 741              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 742              		.loc 1 103 63 view .LVU174
 743 0320 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 744              	.LVL37:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 745              		.loc 1 106 5 is_stmt 1 view .LVU175
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 106 5 is_stmt 0 view .LVU176
 747 0324 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 748 0328 000051E3 		cmp	r1, #0	@ height,
 749 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 750 0330 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 751              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 752              		.loc 1 106 11 view .LVU177
 753 0334 0080A0E3 		mov	r8, #0	@ w,
 754              	.LVL38:
 755              	.L45:
 107:armwave.c     **** 
 756              		.loc 1 107 9 is_stmt 1 view .LVU178
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 757              		.loc 1 117 9 view .LVU179
 758              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 759              		.loc 1 107 64 is_stmt 0 view .LVU180
 760 0338 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 761 033c 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 762              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 763              		.loc 1 117 16 view .LVU181
 764 0340 0000A0E3 		mov	r0, #0	@ yy,
 765 0344 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 766 0348 037087E0 		add	r7, r7, r3	@ ivtmp.58, g_armwave_state.wave_buffer, tmp195
 767              	.LVL39:
 768              	.L44:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 769              		.loc 1 132 13 is_stmt 1 view .LVU182
 770              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 771              		.loc 1 132 18 is_stmt 0 view .LVU183
 772 034c 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 773              	.LVL40:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 774              		.loc 1 136 13 is_stmt 1 view .LVU184
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 775              		.loc 1 137 14 view .LVU185
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 776              		.loc 1 138 14 view .LVU186
 139:armwave.c     ****             	word >>= 8;
 777              		.loc 1 139 14 view .LVU187
 778              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 779              		.loc 1 137 42 is_stmt 0 view .LVU188
 780 0350 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 781              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 782              		.loc 1 138 60 view .LVU189
 783 0354 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 784              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 785              		.loc 1 137 34 view .LVU190
 786 0358 73E0EFE6 		uxtb	lr, r3	@ word, word
 787              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 788              		.loc 1 140 19 view .LVU191
 789 035c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 790              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 791              		.loc 1 139 44 view .LVU192
 792 0360 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 793              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 794              		.loc 1 137 34 view .LVU193
 795 0364 7440EFE6 		uxtb	r4, r4	@ word, word
 796              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 797              		.loc 1 139 44 view .LVU194
 798 0368 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 799              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 800              		.loc 1 138 60 view .LVU195
 801 036c 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 802              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 803              		.loc 1 140 19 view .LVU196
 804 0370 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 805              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 806              		.loc 1 139 44 view .LVU197
 807 0374 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 808              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 809              		.loc 1 137 34 view .LVU198
 810 0378 7EE0EFE6 		uxtb	lr, lr	@ word, word
 811              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 812              		.loc 1 140 19 view .LVU199
 813 037c 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 814              	.LVL41:
 815              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 816              		.loc 1 139 44 view .LVU200
 817 0380 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 818 0384 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 819              	.LVL42:
 140:armwave.c     ****     		}
 820              		.loc 1 140 14 is_stmt 1 view .LVU201
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 821              		.loc 1 137 14 view .LVU202
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 822              		.loc 1 138 14 view .LVU203
 139:armwave.c     ****             	word >>= 8;
 823              		.loc 1 139 14 view .LVU204
 824              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 825              		.loc 1 137 42 is_stmt 0 view .LVU205
 826 0388 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 827              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 828              		.loc 1 138 60 view .LVU206
 829 038c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 830              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 831              		.loc 1 139 44 view .LVU207
 832 0390 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 833              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 834              		.loc 1 138 60 view .LVU208
 835 0394 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 836              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 837              		.loc 1 139 44 view .LVU209
 838 0398 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 839              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 840              		.loc 1 138 60 view .LVU210
 841 039c 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 842              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 843              		.loc 1 117 37 view .LVU211
 844 03a0 040080E2 		add	r0, r0, #4	@ yy, yy,
 845              	.LVL43:
 846              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 847              		.loc 1 139 44 view .LVU212
 848 03a4 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 849              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 850              		.loc 1 117 9 view .LVU213
 851 03a8 000051E1 		cmp	r1, r0	@ height, yy
 852              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 853              		.loc 1 139 44 view .LVU214
 854 03ac 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 855 03b0 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 856              	.LVL44:
 140:armwave.c     ****     		}
 857              		.loc 1 140 14 is_stmt 1 view .LVU215
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 858              		.loc 1 137 14 view .LVU216
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 859              		.loc 1 138 14 view .LVU217
 139:armwave.c     ****             	word >>= 8;
 860              		.loc 1 139 14 view .LVU218
 861              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 862              		.loc 1 137 42 is_stmt 0 view .LVU219
 863 03b4 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 864              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 865              		.loc 1 138 60 view .LVU220
 866 03b8 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 867              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 868              		.loc 1 139 44 view .LVU221
 869 03bc 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 870 03c0 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 871 03c4 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 872 03c8 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 873 03cc 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 140:armwave.c     ****     		}
 874              		.loc 1 140 14 is_stmt 1 view .LVU222
 875              	.LVL45:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 876              		.loc 1 137 14 view .LVU223
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 877              		.loc 1 138 14 view .LVU224
 139:armwave.c     ****             	word >>= 8;
 878              		.loc 1 139 14 view .LVU225
 879              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 880              		.loc 1 137 42 is_stmt 0 view .LVU226
 881 03d0 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 882              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 883              		.loc 1 138 60 view .LVU227
 884 03d4 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 885              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 886              		.loc 1 139 44 view .LVU228
 887 03d8 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 888 03dc 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 889 03e0 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 890 03e4 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 891 03e8 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 140:armwave.c     ****     		}
 892              		.loc 1 140 14 is_stmt 1 view .LVU229
 893              	.LVL46:
 894              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 895              		.loc 1 117 9 is_stmt 0 view .LVU230
 896 03ec D6FFFF8A 		bhi	.L44		@,
 897              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 898              		.loc 1 106 5 view .LVU231
 899 03f0 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 900              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 901              		.loc 1 106 44 view .LVU232
 902 03f4 018088E2 		add	r8, r8, #1	@ w, w,
 903              	.LVL47:
 904              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 905              		.loc 1 106 5 view .LVU233
 906 03f8 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 907 03fc CDFFFF3A 		bcc	.L45		@,
 908 0400 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 909              	.L54:
 910              		.align	2
 911              	.L53:
 912 0404 00000000 		.word	g_armwave_state
 913              		.cfi_endproc
 914              	.LFE59:
 916              		.align	2
 917              		.global	armwave_init
 918              		.syntax unified
 919              		.arm
 920              		.fpu vfp
 922              	armwave_init:
 923              	.LFB60:
 149:armwave.c     ****     g_armwave_state.flags = 0;
 924              		.loc 1 149 1 is_stmt 1 view -0
 925              		.cfi_startproc
 926              		@ args = 0, pretend = 0, frame = 0
 927              		@ frame_needed = 0, uses_anonymous_args = 0
 928              		@ link register save eliminated.
 150:armwave.c     **** }
 929              		.loc 1 150 5 view .LVU235
 930              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 931              		.loc 1 150 27 is_stmt 0 view .LVU236
 932 0408 08309FE5 		ldr	r3, .L56	@ tmp110,
 933 040c 0020A0E3 		mov	r2, #0	@ tmp111,
 934 0410 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 935              	@ armwave.c:151: }
 151:armwave.c     **** 
 936              		.loc 1 151 1 view .LVU237
 937 0414 1EFF2FE1 		bx	lr	@
 938              	.L57:
 939              		.align	2
 940              	.L56:
 941 0418 00000000 		.word	g_armwave_state
 942              		.cfi_endproc
 943              	.LFE60:
 945              		.align	2
 946              		.global	armwave_setup_render
 947              		.syntax unified
 948              		.arm
 949              		.fpu vfp
 951              	armwave_setup_render:
 952              	.LVL48:
 953              	.LFB61:
 154:armwave.c     ****     uint32_t length, xx;
 954              		.loc 1 154 1 is_stmt 1 view -0
 955              		.cfi_startproc
 956              		@ args = 16, pretend = 0, frame = 0
 957              		@ frame_needed = 0, uses_anonymous_args = 0
 155:armwave.c     ****     float points_per_pixel;
 958              		.loc 1 155 5 view .LVU239
 156:armwave.c     **** 
 959              		.loc 1 156 5 view .LVU240
 158:armwave.c     **** 
 960              		.loc 1 158 5 view .LVU241
 961              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 962              		.loc 1 154 1 is_stmt 0 view .LVU242
 963 041c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 964              		.cfi_def_cfa_offset 32
 965              		.cfi_offset 4, -32
 966              		.cfi_offset 5, -28
 967              		.cfi_offset 6, -24
 968              		.cfi_offset 7, -20
 969              		.cfi_offset 8, -16
 970              		.cfi_offset 9, -12
 971              		.cfi_offset 10, -8
 972              		.cfi_offset 14, -4
 973              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 974              		.loc 1 158 5 view .LVU243
 975 0420 020051E1 		cmp	r1, r2	@ start_point, end_point
 976              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 977              		.loc 1 154 1 view .LVU244
 978 0424 028B2DED 		vpush.64	{d8}	@
 979              		.cfi_def_cfa_offset 40
 980              		.cfi_offset 80, -40
 981              		.cfi_offset 81, -36
 982              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 983              		.loc 1 154 1 view .LVU245
 984 0428 0190A0E1 		mov	r9, r1	@ start_point, start_point
 985 042c 0260A0E1 		mov	r6, r2	@ end_point, end_point
 986 0430 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 987              	.LVL49:
 154:armwave.c     ****     uint32_t length, xx;
 988              		.loc 1 154 1 view .LVU246
 989 0434 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 990 0438 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 991              	.LVL50:
 992              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 993              		.loc 1 158 5 view .LVU247
 994 043c 3E00002A 		bcs	.L70		@,
 161:armwave.c     **** 
 995              		.loc 1 161 5 is_stmt 1 view .LVU248
 996              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 997              		.loc 1 161 33 is_stmt 0 view .LVU249
 998 0440 48519FE5 		ldr	r5, .L74+4	@ tmp194,
 999              	@ armwave.c:164:     assert((target_height % 256) == 0);
 164:armwave.c     **** 
 1000              		.loc 1 164 5 view .LVU250
 1001 0444 FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1002              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 1003              		.loc 1 161 33 view .LVU251
 1004 0448 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 1005              		.loc 1 164 5 is_stmt 1 view .LVU252
 1006 044c 4900001A 		bne	.L71		@,
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1007              		.loc 1 167 5 view .LVU253
 1008              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1009              		.loc 1 171 42 is_stmt 0 view .LVU254
 1010 0450 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1011              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1012              		.loc 1 180 23 view .LVU255
 1013 0454 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1014              	.LVL51:
 1015              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1016              		.loc 1 169 33 view .LVU256
 1017 0458 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1018              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1019              		.loc 1 170 27 view .LVU257
 1020 045c 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1021              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1022              		.loc 1 168 44 view .LVU258
 1023 0460 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1024              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1025              		.loc 1 178 34 view .LVU259
 1026 0464 4030A0E3 		mov	r3, #64	@ tmp159,
 1027              	.LVL52:
 1028              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1029              		.loc 1 180 7 view .LVU260
 1030 0468 000050E3 		cmp	r0, #0	@ _4,
 1031              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1032              		.loc 1 167 29 view .LVU261
 1033 046c 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1034              		.loc 1 168 5 is_stmt 1 view .LVU262
 1035              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1036              		.loc 1 172 34 is_stmt 0 view .LVU263
 1037 0470 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1038              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 1039              		.loc 1 173 35 view .LVU264
 1040 0474 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1041              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1042              		.loc 1 171 26 view .LVU265
 1043 0478 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1044              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1045              		.loc 1 168 28 view .LVU266
 1046 047c 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1047              		.loc 1 169 5 is_stmt 1 view .LVU267
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1048              		.loc 1 170 5 view .LVU268
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1049              		.loc 1 171 5 view .LVU269
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1050              		.loc 1 172 5 view .LVU270
 173:armwave.c     **** 
 1051              		.loc 1 173 5 view .LVU271
 178:armwave.c     **** 
 1052              		.loc 1 178 5 view .LVU272
 1053              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1054              		.loc 1 178 34 is_stmt 0 view .LVU273
 1055 0480 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1056              		.loc 1 180 5 is_stmt 1 view .LVU274
 1057              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1058              		.loc 1 180 7 is_stmt 0 view .LVU275
 1059 0484 0100000A 		beq	.L61		@,
 181:armwave.c     **** 
 1060              		.loc 1 181 9 is_stmt 1 view .LVU276
 1061 0488 FEFFFFEB 		bl	free		@
 1062              	.LVL53:
 181:armwave.c     **** 
 1063              		.loc 1 181 9 is_stmt 0 view .LVU277
 1064 048c 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1065              	.L61:
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1066              		.loc 1 183 5 is_stmt 1 view .LVU278
 1067              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1068              		.loc 1 183 34 is_stmt 0 view .LVU279
 1069 0490 0110A0E3 		mov	r1, #1	@,
 1070 0494 0700A0E1 		mov	r0, r7	@, _3
 1071 0498 FEFFFFEB 		bl	calloc		@
 1072              	.LVL54:
 1073              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1074              		.loc 1 184 33 view .LVU280
 1075 049c 4D2CE0E3 		mvn	r2, #19712	@ tmp166,
 1076              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1077              		.loc 1 186 33 view .LVU281
 1078 04a0 1930A0E3 		mov	r3, #25	@ tmp168,
 1079              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1080              		.loc 1 184 33 view .LVU282
 1081 04a4 B024C5E1 		strh	r2, [r5, #64]	@ movhi	@ tmp166, MEM[(unsigned char *)&g_armwave_state + 64B]
 1082              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1083              		.loc 1 186 33 view .LVU283
 1084 04a8 4230C5E5 		strb	r3, [r5, #66]	@ tmp168, g_armwave_state.ch1_color.b
 1085              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 188:armwave.c     **** 
 1086              		.loc 1 188 5 view .LVU284
 1087 04ac 000050E3 		cmp	r0, #0	@ tmp162,
 1088              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1089              		.loc 1 183 32 view .LVU285
 1090 04b0 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1091              		.loc 1 184 5 is_stmt 1 view .LVU286
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1092              		.loc 1 185 5 view .LVU287
 186:armwave.c     **** 
 1093              		.loc 1 186 5 view .LVU288
 188:armwave.c     **** 
 1094              		.loc 1 188 5 view .LVU289
 1095 04b4 2A00000A 		beq	.L72		@,
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1096              		.loc 1 191 5 view .LVU290
 1097              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1098              		.loc 1 192 34 is_stmt 0 view .LVU291
 1099 04b8 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1100              	@ armwave.c:191:     length = end_point - start_point;
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1101              		.loc 1 191 12 view .LVU292
 1102 04bc 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1103              	.LVL55:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1104              		.loc 1 192 5 is_stmt 1 view .LVU293
 1105              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1106              		.loc 1 194 40 is_stmt 0 view .LVU294
 1107 04c0 8600A0E1 		lsl	r0, r6, #1	@, length,
 1108              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1109              		.loc 1 192 34 view .LVU295
 1110 04c4 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp174, target_width
 1111              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1112              		.loc 1 192 31 view .LVU296
 1113 04c8 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1114 04cc 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp173, length
 1115              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1116              		.loc 1 193 60 view .LVU297
 1117 04d0 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp198, g_armwave_state.slice_height
 1118 04d4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp177, tmp198
 1119              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1120              		.loc 1 192 22 view .LVU298
 1121 04d8 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp173, tmp174
 1122              	.LVL56:
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1123              		.loc 1 193 5 is_stmt 1 view .LVU299
 1124              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1125              		.loc 1 193 60 is_stmt 0 view .LVU300
 1126 04dc 887A67EE 		vmul.f32	s15, s15, s16	@ tmp179, tmp177, points_per_pixel
 1127              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1128              		.loc 1 193 41 view .LVU301
 1129 04e0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp180, tmp179
 1130 04e4 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp180, g_armwave_state.slice_record_height
 194:armwave.c     **** 
 1131              		.loc 1 194 5 is_stmt 1 view .LVU302
 1132              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1133              		.loc 1 194 40 is_stmt 0 view .LVU303
 1134 04e8 FEFFFFEB 		bl	malloc		@
 1135              	.LVL57:
 1136              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 1137              		.loc 1 196 5 view .LVU304
 1138 04ec 000050E3 		cmp	r0, #0	@ tmp182,
 1139              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1140              		.loc 1 194 38 view .LVU305
 1141 04f0 4C0085E5 		str	r0, [r5, #76]	@ tmp182, g_armwave_state.xcoord_to_xpixel
 196:armwave.c     **** 
 1142              		.loc 1 196 5 is_stmt 1 view .LVU306
 1143 04f4 1500000A 		beq	.L73		@,
 1144              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1145              		.loc 1 199 54 is_stmt 0 view .LVU307
 1146 04f8 237ADFED 		vldr.32	s15, .L74	@ tmp187,
 1147 04fc 020040E2 		sub	r0, r0, #2	@ ivtmp.68, tmp182,
 1148 0500 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp187, points_per_pixel
 1149              	.L64:
 1150              	.LVL58:
 199:armwave.c     **** 
 1151              		.loc 1 199 9 is_stmt 1 discriminator 3 view .LVU308
 1152              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1153              		.loc 1 199 74 is_stmt 0 discriminator 3 view .LVU309
 1154 0504 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1155              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1156              		.loc 1 198 32 discriminator 3 view .LVU310
 1157 0508 014084E2 		add	r4, r4, #1	@ xx, xx,
 1158              	.LVL59:
 1159              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1160              		.loc 1 198 5 discriminator 3 view .LVU311
 1161 050c 040056E1 		cmp	r6, r4	@ length, xx
 1162              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1163              		.loc 1 199 74 discriminator 3 view .LVU312
 1164 0510 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp188, xx
 1165 0514 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp188, _15
 1166              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1167              		.loc 1 199 46 discriminator 3 view .LVU313
 1168 0518 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp190, tmp189
 1169 051c 903A17EE 		vmov	r3, s15	@ int	@ tmp190, tmp190
 1170 0520 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp190, MEM[base: _64, offset: 0B]
 1171              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1172              		.loc 1 198 5 discriminator 3 view .LVU314
 1173 0524 F6FFFF1A 		bne	.L64		@,
 204:armwave.c     **** }
 1174              		.loc 1 204 5 is_stmt 1 view .LVU315
 1175              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1176              		.loc 1 204 34 is_stmt 0 view .LVU316
 1177 0528 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1178 052c FEFFFFEB 		bl	malloc		@
 1179              	.LVL60:
 1180              	@ armwave.c:205: }
 1181              		.loc 1 205 1 view .LVU317
 1182 0530 028BBDEC 		vldm	sp!, {d8}	@
 1183              		.cfi_remember_state
 1184              		.cfi_restore 80
 1185              		.cfi_restore 81
 1186              		.cfi_def_cfa_offset 32
 1187              	.LVL61:
 1188              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1189              		.loc 1 204 32 view .LVU318
 1190 0534 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1191              	@ armwave.c:205: }
 1192              		.loc 1 205 1 view .LVU319
 1193 0538 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1194              	.LVL62:
 1195              	.L70:
 1196              		.cfi_restore_state
 158:armwave.c     **** 
 1197              		.loc 1 158 5 is_stmt 1 discriminator 1 view .LVU320
 1198 053c 50309FE5 		ldr	r3, .L74+8	@,
 1199              	.LVL63:
 158:armwave.c     **** 
 1200              		.loc 1 158 5 is_stmt 0 discriminator 1 view .LVU321
 1201 0540 9E20A0E3 		mov	r2, #158	@,
 1202 0544 4C109FE5 		ldr	r1, .L74+12	@,
 1203 0548 4C009FE5 		ldr	r0, .L74+16	@,
 1204              	.LVL64:
 158:armwave.c     **** 
 1205              		.loc 1 158 5 discriminator 1 view .LVU322
 1206 054c FEFFFFEB 		bl	__assert_fail		@
 1207              	.LVL65:
 1208              	.L73:
 196:armwave.c     **** 
 1209              		.loc 1 196 5 is_stmt 1 discriminator 1 view .LVU323
 1210 0550 3C309FE5 		ldr	r3, .L74+8	@,
 1211 0554 C420A0E3 		mov	r2, #196	@,
 1212 0558 38109FE5 		ldr	r1, .L74+12	@,
 1213 055c 3C009FE5 		ldr	r0, .L74+20	@,
 1214 0560 FEFFFFEB 		bl	__assert_fail		@
 1215              	.LVL66:
 1216              	.L72:
 188:armwave.c     **** 
 1217              		.loc 1 188 5 discriminator 1 view .LVU324
 1218 0564 28309FE5 		ldr	r3, .L74+8	@,
 1219 0568 BC20A0E3 		mov	r2, #188	@,
 1220 056c 24109FE5 		ldr	r1, .L74+12	@,
 1221 0570 2C009FE5 		ldr	r0, .L74+24	@,
 1222 0574 FEFFFFEB 		bl	__assert_fail		@
 1223              	.LVL67:
 1224              	.L71:
 164:armwave.c     **** 
 1225              		.loc 1 164 5 discriminator 1 view .LVU325
 1226 0578 14309FE5 		ldr	r3, .L74+8	@,
 1227              	.LVL68:
 164:armwave.c     **** 
 1228              		.loc 1 164 5 is_stmt 0 discriminator 1 view .LVU326
 1229 057c A420A0E3 		mov	r2, #164	@,
 1230 0580 10109FE5 		ldr	r1, .L74+12	@,
 1231 0584 1C009FE5 		ldr	r0, .L74+28	@,
 1232              	.LVL69:
 164:armwave.c     **** 
 1233              		.loc 1 164 5 discriminator 1 view .LVU327
 1234 0588 FEFFFFEB 		bl	__assert_fail		@
 1235              	.LVL70:
 1236              	.L75:
 164:armwave.c     **** 
 1237              		.loc 1 164 5 discriminator 1 view .LVU328
 1238              		.align	2
 1239              	.L74:
 1240 058c 0000803F 		.word	1065353216
 1241 0590 00000000 		.word	g_armwave_state
 1242 0594 00000000 		.word	.LANCHOR0
 1243 0598 00000000 		.word	.LC0
 1244 059c 5C000000 		.word	.LC3
 1245 05a0 30000000 		.word	.LC2
 1246 05a4 0C000000 		.word	.LC1
 1247 05a8 74000000 		.word	.LC4
 1248              		.cfi_endproc
 1249              	.LFE61:
 1251              		.align	2
 1252              		.global	armwave_clear_buffer
 1253              		.syntax unified
 1254              		.arm
 1255              		.fpu vfp
 1257              	armwave_clear_buffer:
 1258              	.LVL71:
 1259              	.LFB62:
 206:armwave.c     **** 
 207:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 208:armwave.c     **** {
 1260              		.loc 1 208 1 is_stmt 1 view -0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 0
 1263              		@ frame_needed = 0, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 209:armwave.c     ****     // Flags ignored, only one buffer cleared
 210:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1265              		.loc 1 210 5 view .LVU330
 1266 05ac 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1267 05b0 0010A0E3 		mov	r1, #0	@,
 1268 05b4 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1269 05b8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1270              	.LVL72:
 1271              		.loc 1 210 5 is_stmt 0 view .LVU331
 1272 05bc FEFFFFEA 		b	memset		@
 1273              	.LVL73:
 1274              	.L78:
 1275              		.align	2
 1276              	.L77:
 1277 05c0 00000000 		.word	g_armwave_state
 1278              		.cfi_endproc
 1279              	.LFE62:
 1281              		.align	2
 1282              		.global	armwave_fill_pixbuf
 1283              		.syntax unified
 1284              		.arm
 1285              		.fpu vfp
 1287              	armwave_fill_pixbuf:
 1288              	.LVL74:
 1289              	.LFB63:
 211:armwave.c     **** }
 212:armwave.c     **** 
 213:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 214:armwave.c     **** {
 1290              		.loc 1 214 1 is_stmt 1 view -0
 1291              		.cfi_startproc
 1292              		@ args = 0, pretend = 0, frame = 0
 1293              		@ frame_needed = 0, uses_anonymous_args = 0
 215:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1294              		.loc 1 215 5 view .LVU333
 216:armwave.c     ****     int rr, gg, bb;
 1295              		.loc 1 216 5 view .LVU334
 217:armwave.c     ****     uint8_t r, g, b;
 1296              		.loc 1 217 5 view .LVU335
 218:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1297              		.loc 1 218 5 view .LVU336
 1298              	@ armwave.c:218:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1299              		.loc 1 218 14 is_stmt 0 view .LVU337
 1300 05c4 9C109FE5 		ldr	r1, .L91	@ tmp176,
 1301              	@ armwave.c:221:     assert(out_buffer != NULL);
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 220:armwave.c     **** 
 221:armwave.c     ****     assert(out_buffer != NULL);
 1302              		.loc 1 221 5 view .LVU338
 1303 05c8 000050E3 		cmp	r0, #0	@ out_buffer
 1304              	@ armwave.c:214: {
 214:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1305              		.loc 1 214 1 view .LVU339
 1306 05cc 70402DE9 		push	{r4, r5, r6, lr}	@
 1307              		.cfi_def_cfa_offset 16
 1308              		.cfi_offset 4, -16
 1309              		.cfi_offset 5, -12
 1310              		.cfi_offset 6, -8
 1311              		.cfi_offset 14, -4
 1312              	@ armwave.c:218:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 218:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1313              		.loc 1 218 14 view .LVU340
 1314 05d0 044091E5 		ldr	r4, [r1, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1315              	.LVL75:
 219:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1316              		.loc 1 219 5 is_stmt 1 view .LVU341
 1317              		.loc 1 221 5 view .LVU342
 1318 05d4 1E00000A 		beq	.L80		@,
 1319              	.LVL76:
 1320              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 222:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 223:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 224:armwave.c     **** 
 225:armwave.c     **** #if 0
 226:armwave.c     ****     // Pixbuf tests
 227:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 228:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 229:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 230:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 231:armwave.c     ****         }
 232:armwave.c     ****     }
 233:armwave.c     **** #endif
 234:armwave.c     **** 
 235:armwave.c     **** #if 1
 236:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 237:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1321              		.loc 1 237 37 is_stmt 0 view .LVU343
 1322 05d8 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_105, g_armwave_state.target_height
 1323              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1324              		.loc 1 237 5 view .LVU344
 1325 05dc 000052E3 		cmp	r2, #0	@ prephitmp_105,
 1326 05e0 7080BD08 		popeq	{r4, r5, r6, pc}	@
 1327 05e4 343091E5 		ldr	r3, [r1, #52]	@ _28, g_armwave_state.target_width
 1328              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1329              		.loc 1 237 12 view .LVU345
 1330 05e8 00E0A0E3 		mov	lr, #0	@ yy,
 1331              	.LVL77:
 1332              	.L82:
 1333              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1334              		.loc 1 238 9 view .LVU346
 1335 05ec 000053E3 		cmp	r3, #0	@ _28,
 1336              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1337              		.loc 1 238 16 view .LVU347
 1338 05f0 00C0A013 		movne	ip, #0	@ xx,
 1339              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1340              		.loc 1 238 9 view .LVU348
 1341 05f4 1200000A 		beq	.L84		@,
 1342              	.LVL78:
 1343              	.L83:
 239:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 240:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1344              		.loc 1 240 13 is_stmt 1 discriminator 3 view .LVU349
 1345              	@ armwave.c:240:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1346              		.loc 1 240 21 is_stmt 0 discriminator 3 view .LVU350
 1347 05f8 9E4325E0 		mla	r5, lr, r3, r4	@ tmp152, yy, _28, base_ptr
 1348              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) / 256;
 241:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 242:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 243:armwave.c     **** 
 244:armwave.c     **** #if 0
 245:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 246:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 247:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 248:armwave.c     **** 
 249:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 250:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 251:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 252:armwave.c     **** #endif
 253:armwave.c     **** 
 254:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) / 256;
 255:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) / 256;
 256:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) / 256;
 1349              		.loc 1 256 47 discriminator 3 view .LVU351
 1350 05fc 4220D1E5 		ldrb	r2, [r1, #66]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1351              	@ armwave.c:255:             gg = (g_armwave_state.ch1_color.g * value) / 256;
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) / 256;
 1352              		.loc 1 255 47 discriminator 3 view .LVU352
 1353 0600 4130D1E5 		ldrb	r3, [r1, #65]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1354              	@ armwave.c:240:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 240:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 1355              		.loc 1 240 21 discriminator 3 view .LVU353
 1356 0604 0C60D5E7 		ldrb	r6, [r5, ip]	@ zero_extendqisi2	@ _5, *_4
 1357              	.LVL79:
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) / 256;
 1358              		.loc 1 254 13 is_stmt 1 discriminator 3 view .LVU354
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) / 256;
 1359              		.loc 1 255 13 discriminator 3 view .LVU355
 1360              		.loc 1 256 13 discriminator 3 view .LVU356
 257:armwave.c     **** 
 258:armwave.c     ****             r = MIN(rr, 255);
 1361              		.loc 1 258 13 discriminator 3 view .LVU357
 259:armwave.c     ****             g = MIN(gg, 255);
 1362              		.loc 1 259 13 discriminator 3 view .LVU358
 260:armwave.c     ****             b = MIN(bb, 255);
 1363              		.loc 1 260 13 discriminator 3 view .LVU359
 261:armwave.c     **** 
 262:armwave.c     ****             // ensure 100% alpha channel, if it is used
 263:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1364              		.loc 1 263 13 discriminator 3 view .LVU360
 264:armwave.c     **** 
 265:armwave.c     ****             //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, val
 266:armwave.c     **** 
 267:armwave.c     ****             *out_buffer++ = word;
 1365              		.loc 1 267 13 discriminator 3 view .LVU361
 1366              	@ armwave.c:254:             rr = (g_armwave_state.ch1_color.r * value) / 256;
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) / 256;
 1367              		.loc 1 254 47 is_stmt 0 discriminator 3 view .LVU362
 1368 0608 4050D1E5 		ldrb	r5, [r1, #64]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1369              	.LVL80:
 1370              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1371              		.loc 1 238 58 discriminator 3 view .LVU363
 1372 060c 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1373              	.LVL81:
 1374              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) / 256;
 256:armwave.c     **** 
 1375              		.loc 1 256 47 discriminator 3 view .LVU364
 1376 0610 820662E1 		smulbb	r2, r2, r6	@ tmp157, g_armwave_state.ch1_color.b, _5
 1377              	@ armwave.c:255:             gg = (g_armwave_state.ch1_color.g * value) / 256;
 255:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) / 256;
 1378              		.loc 1 255 47 discriminator 3 view .LVU365
 1379 0614 830663E1 		smulbb	r3, r3, r6	@ tmp163, g_armwave_state.ch1_color.g, _5
 1380              	@ armwave.c:254:             rr = (g_armwave_state.ch1_color.r * value) / 256;
 254:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) / 256;
 1381              		.loc 1 254 47 discriminator 3 view .LVU366
 1382 0618 850665E1 		smulbb	r5, r5, r6	@ tmp170, g_armwave_state.ch1_color.r, _5
 1383              	.LVL82:
 1384              	@ armwave.c:256:             bb = (g_armwave_state.ch1_color.b * value) / 256;
 256:armwave.c     **** 
 1385              		.loc 1 256 56 discriminator 3 view .LVU367
 1386 061c 2224A0E1 		lsr	r2, r2, #8	@ bb, tmp157,
 1387              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1388              		.loc 1 263 43 discriminator 3 view .LVU368
 1389 0620 FF3C03E2 		and	r3, r3, #65280	@ tmp165, tmp163,
 1390 0624 023883E1 		orr	r3, r3, r2, lsl #16	@ tmp166, tmp165, bb,
 1391              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1392              		.loc 1 263 54 discriminator 3 view .LVU369
 1393 0628 253483E1 		orr	r3, r3, r5, lsr #8	@ tmp172, tmp166, tmp170,
 1394              	@ armwave.c:263:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 263:armwave.c     **** 
 1395              		.loc 1 263 18 discriminator 3 view .LVU370
 1396 062c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp172,
 1397              	@ armwave.c:267:             *out_buffer++ = word;
 1398              		.loc 1 267 27 discriminator 3 view .LVU371
 1399 0630 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_46, offset: 4294967292B]
 1400              	.LVL83:
 1401              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1402              		.loc 1 238 41 discriminator 3 view .LVU372
 1403 0634 343091E5 		ldr	r3, [r1, #52]	@ _28, g_armwave_state.target_width
 1404              	@ armwave.c:238:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 238:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1405              		.loc 1 238 9 discriminator 3 view .LVU373
 1406 0638 0C0053E1 		cmp	r3, ip	@ _28, xx
 1407 063c EDFFFF8A 		bhi	.L83		@,
 1408 0640 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_105, g_armwave_state.target_height
 1409              	.LVL84:
 1410              	.L84:
 1411              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1412              		.loc 1 237 55 discriminator 2 view .LVU374
 1413 0644 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1414              	.LVL85:
 1415              	@ armwave.c:237:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1416              		.loc 1 237 5 discriminator 2 view .LVU375
 1417 0648 02005EE1 		cmp	lr, r2	@ yy, prephitmp_105
 1418 064c E6FFFF3A 		bcc	.L82		@,
 237:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1419              		.loc 1 237 5 discriminator 2 view .LVU376
 1420 0650 7080BDE8 		pop	{r4, r5, r6, pc}	@
 1421              	.LVL86:
 1422              	.L80:
 221:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1423              		.loc 1 221 5 is_stmt 1 discriminator 1 view .LVU377
 1424 0654 10309FE5 		ldr	r3, .L91+4	@,
 1425 0658 DD20A0E3 		mov	r2, #221	@,
 1426 065c 0C109FE5 		ldr	r1, .L91+8	@,
 1427 0660 0C009FE5 		ldr	r0, .L91+12	@,
 1428              	.LVL87:
 221:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 1429              		.loc 1 221 5 is_stmt 0 discriminator 1 view .LVU378
 1430 0664 FEFFFFEB 		bl	__assert_fail		@
 1431              	.LVL88:
 1432              	.L92:
 1433              		.align	2
 1434              	.L91:
 1435 0668 00000000 		.word	g_armwave_state
 1436 066c 18000000 		.word	.LANCHOR0+24
 1437 0670 00000000 		.word	.LC0
 1438 0674 90000000 		.word	.LC5
 1439              		.cfi_endproc
 1440              	.LFE63:
 1442              		.align	2
 1443              		.global	armwave_fill_pixbuf2
 1444              		.syntax unified
 1445              		.arm
 1446              		.fpu vfp
 1448              	armwave_fill_pixbuf2:
 1449              	.LVL89:
 1450              	.LFB64:
 268:armwave.c     ****         }
 269:armwave.c     ****     }
 270:armwave.c     **** #endif
 271:armwave.c     **** }
 272:armwave.c     **** 
 273:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 274:armwave.c     **** {
 1451              		.loc 1 274 1 is_stmt 1 view -0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 0
 1454              		@ frame_needed = 0, uses_anonymous_args = 0
 275:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1455              		.loc 1 275 5 view .LVU380
 276:armwave.c     ****     int rr, gg, bb;
 1456              		.loc 1 276 5 view .LVU381
 277:armwave.c     ****     uint8_t r, g, b;
 1457              		.loc 1 277 5 view .LVU382
 278:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1458              		.loc 1 278 5 view .LVU383
 1459              	@ armwave.c:278:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1460              		.loc 1 278 14 is_stmt 0 view .LVU384
 1461 0678 DC109FE5 		ldr	r1, .L110	@ tmp176,
 1462              	@ armwave.c:281:     assert(out_buffer != NULL);
 279:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 280:armwave.c     **** 
 281:armwave.c     ****     assert(out_buffer != NULL);
 1463              		.loc 1 281 5 view .LVU385
 1464 067c 000050E3 		cmp	r0, #0	@ out_buffer
 1465              	@ armwave.c:274: {
 274:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1466              		.loc 1 274 1 view .LVU386
 1467 0680 70402DE9 		push	{r4, r5, r6, lr}	@
 1468              		.cfi_def_cfa_offset 16
 1469              		.cfi_offset 4, -16
 1470              		.cfi_offset 5, -12
 1471              		.cfi_offset 6, -8
 1472              		.cfi_offset 14, -4
 1473              	@ armwave.c:278:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 278:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1474              		.loc 1 278 14 view .LVU387
 1475 0684 044091E5 		ldr	r4, [r1, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1476              	.LVL90:
 279:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1477              		.loc 1 279 5 is_stmt 1 view .LVU388
 1478              		.loc 1 281 5 view .LVU389
 1479 0688 2E00000A 		beq	.L94		@,
 1480              	.LVL91:
 1481              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 282:armwave.c     **** 
 283:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 284:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1482              		.loc 1 284 37 is_stmt 0 view .LVU390
 1483 068c 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_100, g_armwave_state.target_height
 1484              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1485              		.loc 1 284 5 view .LVU391
 1486 0690 000052E3 		cmp	r2, #0	@ prephitmp_100,
 1487 0694 7080BD08 		popeq	{r4, r5, r6, pc}	@
 1488 0698 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1489              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1490              		.loc 1 284 12 view .LVU392
 1491 069c 00E0A0E3 		mov	lr, #0	@ yy,
 1492              	.LVL92:
 1493              	.L96:
 1494              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1495              		.loc 1 285 9 view .LVU393
 1496 06a0 000053E3 		cmp	r3, #0	@ _4,
 1497              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1498              		.loc 1 285 16 view .LVU394
 1499 06a4 00C0A013 		movne	ip, #0	@ xx,
 1500              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1501              		.loc 1 285 9 view .LVU395
 1502 06a8 1900000A 		beq	.L103		@,
 1503              	.LVL93:
 1504              	.L102:
 286:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 287:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1505              		.loc 1 287 13 is_stmt 1 view .LVU396
 1506              	@ armwave.c:287:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1507              		.loc 1 287 21 is_stmt 0 view .LVU397
 1508 06ac 934E22E0 		mla	r2, r3, lr, r4	@ tmp154, _4, yy, base_ptr
 1509              	@ armwave.c:289:             rr = g_armwave_state.ch1_color.r * value;
 288:armwave.c     **** 
 289:armwave.c     ****             rr = g_armwave_state.ch1_color.r * value;
 1510              		.loc 1 289 46 view .LVU398
 1511 06b0 4030D1E5 		ldrb	r3, [r1, #64]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 1512              	@ armwave.c:290:             gg = g_armwave_state.ch1_color.g * value;
 290:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1513              		.loc 1 290 46 view .LVU399
 1514 06b4 4150D1E5 		ldrb	r5, [r1, #65]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 1515              	@ armwave.c:287:             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 287:armwave.c     **** 
 1516              		.loc 1 287 21 view .LVU400
 1517 06b8 0C60D2E7 		ldrb	r6, [r2, ip]	@ zero_extendqisi2	@ _106, *_107
 1518              	.LVL94:
 289:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1519              		.loc 1 289 13 is_stmt 1 view .LVU401
 1520              	@ armwave.c:291:             bb = g_armwave_state.ch1_color.b * value;
 291:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1521              		.loc 1 291 46 is_stmt 0 view .LVU402
 1522 06bc 4220D1E5 		ldrb	r2, [r1, #66]	@ zero_extendqisi2	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 1523              	@ armwave.c:289:             rr = g_armwave_state.ch1_color.r * value;
 289:armwave.c     ****             gg = g_armwave_state.ch1_color.g * value;
 1524              		.loc 1 289 46 view .LVU403
 1525 06c0 830663E1 		smulbb	r3, r3, r6	@ prephitmp_90, g_armwave_state.ch1_color.r, _106
 1526              	.LVL95:
 290:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1527              		.loc 1 290 13 is_stmt 1 view .LVU404
 1528              	@ armwave.c:290:             gg = g_armwave_state.ch1_color.g * value;
 290:armwave.c     ****             bb = g_armwave_state.ch1_color.b * value;
 1529              		.loc 1 290 46 is_stmt 0 view .LVU405
 1530 06c4 850665E1 		smulbb	r5, r5, r6	@ _97, g_armwave_state.ch1_color.g, _106
 1531              	.LVL96:
 1532              		.loc 1 291 13 is_stmt 1 view .LVU406
 1533              	@ armwave.c:293:             r = CLAMP(rr * overall_scale, 0, 255);
 292:armwave.c     **** 
 293:armwave.c     ****             r = CLAMP(rr * overall_scale, 0, 255);
 1534              		.loc 1 293 15 is_stmt 0 view .LVU407
 1535 06c8 FF0053E3 		cmp	r3, #255	@ prephitmp_90,
 1536              	@ armwave.c:291:             bb = g_armwave_state.ch1_color.b * value;
 291:armwave.c     **** 
 1537              		.loc 1 291 46 view .LVU408
 1538 06cc 820662E1 		smulbb	r2, r2, r6	@ _94, g_armwave_state.ch1_color.b, _106
 1539              	.LVL97:
 1540              		.loc 1 293 13 is_stmt 1 view .LVU409
 294:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1541              		.loc 1 294 13 view .LVU410
 1542              	@ armwave.c:293:             r = CLAMP(rr * overall_scale, 0, 255);
 293:armwave.c     ****             g = CLAMP(gg * overall_scale, 0, 255);
 1543              		.loc 1 293 15 is_stmt 0 view .LVU411
 1544 06d0 FF30A023 		movcs	r3, #255	@ prephitmp_90,
 1545              	.LVL98:
 1546              	@ armwave.c:294:             g = CLAMP(gg * overall_scale, 0, 255);
 1547              		.loc 1 294 15 view .LVU412
 1548 06d4 FE0055E3 		cmp	r5, #254	@ _97,
 1549 06d8 0554A091 		lslls	r5, r5, #8	@ prephitmp_85, _97,
 1550              	.LVL99:
 1551              		.loc 1 294 15 view .LVU413
 1552 06dc FF5CA083 		movhi	r5, #65280	@ prephitmp_85,
 1553              	.LVL100:
 295:armwave.c     ****             b = CLAMP(bb * overall_scale, 0, 255);
 1554              		.loc 1 295 13 is_stmt 1 view .LVU414
 1555              	@ armwave.c:295:             b = CLAMP(bb * overall_scale, 0, 255);
 1556              		.loc 1 295 15 is_stmt 0 view .LVU415
 1557 06e0 FE0052E3 		cmp	r2, #254	@ _94,
 1558 06e4 0E00008A 		bhi	.L99		@,
 1559              	.LVL101:
 296:armwave.c     **** 
 297:armwave.c     ****             // ensure 100% alpha channel, if it is used
 298:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1560              		.loc 1 298 13 is_stmt 1 view .LVU416
 299:armwave.c     **** 
 300:armwave.c     ****             *out_buffer++ = word;
 1561              		.loc 1 300 13 view .LVU417
 1562              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1563              		.loc 1 298 54 is_stmt 0 view .LVU418
 1564 06e8 0228A0E1 		lsl	r2, r2, #16	@ tmp165, _94,
 1565              	.LVL102:
 298:armwave.c     **** 
 1566              		.loc 1 298 54 view .LVU419
 1567 06ec FF2802E2 		and	r2, r2, #16711680	@ tmp166, tmp165,
 1568              	.LVL103:
 298:armwave.c     **** 
 1569              		.loc 1 298 54 view .LVU420
 1570 06f0 033082E1 		orr	r3, r2, r3	@ tmp167, tmp166, prephitmp_90
 1571              	.LVL104:
 298:armwave.c     **** 
 1572              		.loc 1 298 54 view .LVU421
 1573 06f4 053083E1 		orr	r3, r3, r5	@ tmp168, tmp167, prephitmp_85
 1574              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1575              		.loc 1 298 18 view .LVU422
 1576 06f8 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp168,
 1577              	@ armwave.c:300:             *out_buffer++ = word;
 1578              		.loc 1 300 27 view .LVU423
 1579 06fc 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_54, offset: 4294967292B]
 1580              	.LVL105:
 1581              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1582              		.loc 1 285 41 view .LVU424
 1583 0700 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1584              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1585              		.loc 1 285 58 view .LVU425
 1586 0704 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1587              	.LVL106:
 1588              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1589              		.loc 1 285 9 view .LVU426
 1590 0708 03005CE1 		cmp	ip, r3	@ xx, _4
 1591 070c E6FFFF3A 		bcc	.L102		@,
 1592              	.L101:
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1593              		.loc 1 285 9 view .LVU427
 1594 0710 382091E5 		ldr	r2, [r1, #56]	@ prephitmp_100, g_armwave_state.target_height
 1595              	.LVL107:
 1596              	.L103:
 1597              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1598              		.loc 1 284 55 discriminator 2 view .LVU428
 1599 0714 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 1600              	.LVL108:
 1601              	@ armwave.c:284:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1602              		.loc 1 284 5 discriminator 2 view .LVU429
 1603 0718 02005EE1 		cmp	lr, r2	@ yy, prephitmp_100
 1604 071c DFFFFF3A 		bcc	.L96		@,
 284:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1605              		.loc 1 284 5 discriminator 2 view .LVU430
 1606 0720 7080BDE8 		pop	{r4, r5, r6, pc}	@
 1607              	.LVL109:
 1608              	.L99:
 298:armwave.c     **** 
 1609              		.loc 1 298 13 is_stmt 1 view .LVU431
 1610              		.loc 1 300 13 view .LVU432
 1611              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1612              		.loc 1 298 54 is_stmt 0 view .LVU433
 1613 0724 053083E1 		orr	r3, r3, r5	@ tmp172, prephitmp_90, prephitmp_85
 1614              	.LVL110:
 1615              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1616              		.loc 1 285 58 view .LVU434
 1617 0728 01C08CE2 		add	ip, ip, #1	@ xx, xx,
 1618              	.LVL111:
 1619              	@ armwave.c:298:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 298:armwave.c     **** 
 1620              		.loc 1 298 18 view .LVU435
 1621 072c 0338E0E1 		mvn	r3, r3, lsl #16	@ word, tmp172,
 1622 0730 2338E0E1 		mvn	r3, r3, lsr #16	@ word, word,
 1623              	@ armwave.c:300:             *out_buffer++ = word;
 1624              		.loc 1 300 27 view .LVU436
 1625 0734 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_76, offset: 4294967292B]
 1626              	.LVL112:
 1627              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1628              		.loc 1 285 41 view .LVU437
 1629 0738 343091E5 		ldr	r3, [r1, #52]	@ _4, g_armwave_state.target_width
 1630              	@ armwave.c:285:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 285:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 1631              		.loc 1 285 9 view .LVU438
 1632 073c 0C0053E1 		cmp	r3, ip	@ _4, xx
 1633 0740 D9FFFF8A 		bhi	.L102		@,
 1634 0744 F1FFFFEA 		b	.L101		@
 1635              	.LVL113:
 1636              	.L94:
 281:armwave.c     **** 
 1637              		.loc 1 281 5 is_stmt 1 discriminator 1 view .LVU439
 1638 0748 10309FE5 		ldr	r3, .L110+4	@,
 1639 074c 10209FE5 		ldr	r2, .L110+8	@,
 1640 0750 10109FE5 		ldr	r1, .L110+12	@,
 1641 0754 10009FE5 		ldr	r0, .L110+16	@,
 1642              	.LVL114:
 281:armwave.c     **** 
 1643              		.loc 1 281 5 is_stmt 0 discriminator 1 view .LVU440
 1644 0758 FEFFFFEB 		bl	__assert_fail		@
 1645              	.LVL115:
 1646              	.L111:
 1647              		.align	2
 1648              	.L110:
 1649 075c 00000000 		.word	g_armwave_state
 1650 0760 2C000000 		.word	.LANCHOR0+44
 1651 0764 19010000 		.word	281
 1652 0768 00000000 		.word	.LC0
 1653 076c 90000000 		.word	.LC5
 1654              		.cfi_endproc
 1655              	.LFE64:
 1657              		.align	2
 1658              		.global	armwave_dump_ppm_debug
 1659              		.syntax unified
 1660              		.arm
 1661              		.fpu vfp
 1663              	armwave_dump_ppm_debug:
 1664              	.LVL116:
 1665              	.LFB65:
 301:armwave.c     ****         }
 302:armwave.c     ****     }
 303:armwave.c     **** }
 304:armwave.c     **** 
 305:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 306:armwave.c     **** {
 1666              		.loc 1 306 1 is_stmt 1 view -0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 307:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1670              		.loc 1 307 5 view .LVU442
 1671              	@ armwave.c:306: {
 306:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1672              		.loc 1 306 1 is_stmt 0 view .LVU443
 1673 0770 0130A0E1 		mov	r3, r1	@ fn, fn
 1674 0774 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1675              		.cfi_def_cfa_offset 28
 1676              		.cfi_offset 4, -28
 1677              		.cfi_offset 5, -24
 1678              		.cfi_offset 6, -20
 1679              		.cfi_offset 7, -16
 1680              		.cfi_offset 8, -12
 1681              		.cfi_offset 9, -8
 1682              		.cfi_offset 14, -4
 1683 0778 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1684 077c 0CD04DE2 		sub	sp, sp, #12	@,,
 1685              		.cfi_def_cfa_offset 40
 1686              	@ armwave.c:307:     FILE *fp = fopen(fn, "wb");
 1687              		.loc 1 307 16 view .LVU444
 1688 0780 D8109FE5 		ldr	r1, .L124	@,
 1689              	.LVL117:
 1690              		.loc 1 307 16 view .LVU445
 1691 0784 0300A0E1 		mov	r0, r3	@, fn
 1692              	.LVL118:
 1693              		.loc 1 307 16 view .LVU446
 1694 0788 FEFFFFEB 		bl	fopen64		@
 1695              	.LVL119:
 1696              	@ armwave.c:314:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 308:armwave.c     ****     uint32_t data;
 309:armwave.c     ****     int xx, yy;
 310:armwave.c     **** 
 311:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 312:armwave.c     **** 
 313:armwave.c     ****     fputs("P3\n", fp);
 314:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1697              		.loc 1 314 5 view .LVU447
 1698 078c D0609FE5 		ldr	r6, .L124+4	@ tmp154,
 1699              	@ armwave.c:313:     fputs("P3\n", fp);
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1700              		.loc 1 313 5 view .LVU448
 1701 0790 0320A0E3 		mov	r2, #3	@,
 1702 0794 0110A0E3 		mov	r1, #1	@,
 1703              	@ armwave.c:307:     FILE *fp = fopen(fn, "wb");
 307:armwave.c     ****     uint32_t data;
 1704              		.loc 1 307 16 view .LVU449
 1705 0798 0070A0E1 		mov	r7, r0	@ fp,
 1706              	.LVL120:
 308:armwave.c     ****     uint32_t data;
 1707              		.loc 1 308 5 is_stmt 1 view .LVU450
 309:armwave.c     **** 
 1708              		.loc 1 309 5 view .LVU451
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1709              		.loc 1 313 5 view .LVU452
 1710 079c 0030A0E1 		mov	r3, r0	@, fp
 1711 07a0 C0009FE5 		ldr	r0, .L124+8	@,
 1712              	.LVL121:
 313:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1713              		.loc 1 313 5 is_stmt 0 view .LVU453
 1714 07a4 FEFFFFEB 		bl	fwrite		@
 1715              	.LVL122:
 1716              		.loc 1 314 5 is_stmt 1 view .LVU454
 1717 07a8 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1718 07ac 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1719 07b0 B4109FE5 		ldr	r1, .L124+12	@,
 1720 07b4 0700A0E1 		mov	r0, r7	@, fp
 1721 07b8 FEFFFFEB 		bl	fprintf		@
 1722              	.LVL123:
 315:armwave.c     ****     fputs("255\n", fp);
 1723              		.loc 1 315 5 view .LVU455
 1724 07bc 0420A0E3 		mov	r2, #4	@,
 1725 07c0 0730A0E1 		mov	r3, r7	@, fp
 1726 07c4 0110A0E3 		mov	r1, #1	@,
 1727 07c8 A0009FE5 		ldr	r0, .L124+16	@,
 1728 07cc FEFFFFEB 		bl	fwrite		@
 1729              	.LVL124:
 316:armwave.c     **** 
 317:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1730              		.loc 1 317 5 view .LVU456
 1731              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1732              		.loc 1 317 37 is_stmt 0 view .LVU457
 1733 07d0 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1734              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1735              		.loc 1 317 5 view .LVU458
 1736 07d4 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1737 07d8 1800000A 		beq	.L113		@,
 1738 07dc 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1739              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 319:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 320:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 321:armwave.c     **** 
 322:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1740              		.loc 1 322 13 view .LVU459
 1741 07e0 8C909FE5 		ldr	r9, .L124+20	@ tmp156,
 1742              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1743              		.loc 1 317 12 view .LVU460
 1744 07e4 0050A0E3 		mov	r5, #0	@ yy,
 1745              	.LVL125:
 1746              	.L114:
 1747              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1748              		.loc 1 318 9 view .LVU461
 1749 07e8 000053E3 		cmp	r3, #0	@ _12,
 1750              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1751              		.loc 1 318 16 view .LVU462
 1752 07ec 0040A013 		movne	r4, #0	@ xx,
 1753              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1754              		.loc 1 318 9 view .LVU463
 1755 07f0 1600000A 		beq	.L123		@,
 1756              	.LVL126:
 1757              	.L115:
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1758              		.loc 1 319 13 is_stmt 1 discriminator 3 view .LVU464
 1759              	@ armwave.c:319:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1760              		.loc 1 319 29 is_stmt 0 discriminator 3 view .LVU465
 1761 07f4 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1762              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1763              		.loc 1 322 13 discriminator 3 view .LVU466
 1764 07f8 0910A0E1 		mov	r1, r9	@, tmp156
 1765 07fc 0700A0E1 		mov	r0, r7	@, fp
 1766              	@ armwave.c:319:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 319:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1767              		.loc 1 319 18 discriminator 3 view .LVU467
 1768 0800 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1769              	.LVL127:
 1770              		.loc 1 322 13 is_stmt 1 discriminator 3 view .LVU468
 1771              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1772              		.loc 1 318 58 is_stmt 0 discriminator 3 view .LVU469
 1773 0804 014084E2 		add	r4, r4, #1	@ xx, xx,
 1774              	.LVL128:
 1775              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1776              		.loc 1 322 81 discriminator 3 view .LVU470
 1777 0808 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1778              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1779              		.loc 1 322 61 discriminator 3 view .LVU471
 1780 080c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1781              	@ armwave.c:322:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1782              		.loc 1 322 13 discriminator 3 view .LVU472
 1783 0810 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1784 0814 7330EFE6 		uxtb	r3, r3	@, tmp146
 1785 0818 00C08DE5 		str	ip, [sp]	@ tmp151,
 1786 081c 7220EFE6 		uxtb	r2, r2	@, data
 1787              	.LVL129:
 1788              		.loc 1 322 13 discriminator 3 view .LVU473
 1789 0820 FEFFFFEB 		bl	fprintf		@
 1790              	.LVL130:
 1791              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1792              		.loc 1 318 41 discriminator 3 view .LVU474
 1793 0824 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1794              	@ armwave.c:318:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 318:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1795              		.loc 1 318 9 discriminator 3 view .LVU475
 1796 0828 040053E1 		cmp	r3, r4	@ _12, xx
 1797 082c F0FFFF8A 		bhi	.L115		@,
 1798 0830 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1799              	.LVL131:
 1800              	.L116:
 1801              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1802              		.loc 1 317 55 discriminator 2 view .LVU476
 1803 0834 015085E2 		add	r5, r5, #1	@ yy, yy,
 1804              	.LVL132:
 1805              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1806              		.loc 1 317 5 discriminator 2 view .LVU477
 1807 0838 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1808 083c E9FFFF3A 		bcc	.L114		@,
 1809              	.LVL133:
 1810              	.L113:
 323:armwave.c     ****         }
 324:armwave.c     ****     }
 325:armwave.c     **** 
 326:armwave.c     ****     fclose(fp);
 1811              		.loc 1 326 5 is_stmt 1 view .LVU478
 1812 0840 0700A0E1 		mov	r0, r7	@, fp
 1813              	@ armwave.c:327: }
 327:armwave.c     **** }
 1814              		.loc 1 327 1 is_stmt 0 view .LVU479
 1815 0844 0CD08DE2 		add	sp, sp, #12	@,,
 1816              		.cfi_remember_state
 1817              		.cfi_def_cfa_offset 28
 1818              		@ sp needed	@
 1819 0848 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1820              		.cfi_restore 14
 1821              		.cfi_restore 9
 1822              		.cfi_restore 8
 1823              		.cfi_restore 7
 1824              		.cfi_restore 6
 1825              		.cfi_restore 5
 1826              		.cfi_restore 4
 1827              		.cfi_def_cfa_offset 0
 1828              	.LVL134:
 1829              	@ armwave.c:326:     fclose(fp);
 326:armwave.c     **** }
 1830              		.loc 1 326 5 view .LVU480
 1831 084c FEFFFFEA 		b	fclose		@
 1832              	.LVL135:
 1833              	.L123:
 1834              		.cfi_restore_state
 1835              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1836              		.loc 1 317 55 view .LVU481
 1837 0850 015085E2 		add	r5, r5, #1	@ yy, yy,
 1838              	.LVL136:
 1839              	@ armwave.c:317:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 317:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1840              		.loc 1 317 5 view .LVU482
 1841 0854 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1842 0858 F5FFFF8A 		bhi	.L116		@,
 1843 085c F7FFFFEA 		b	.L113		@
 1844              	.L125:
 1845              		.align	2
 1846              	.L124:
 1847 0860 A4000000 		.word	.LC6
 1848 0864 00000000 		.word	g_armwave_state
 1849 0868 A8000000 		.word	.LC7
 1850 086c AC000000 		.word	.LC8
 1851 0870 B4000000 		.word	.LC9
 1852 0874 BC000000 		.word	.LC10
 1853              		.cfi_endproc
 1854              	.LFE65:
 1856              		.align	2
 1857              		.global	armwave_test_init
 1858              		.syntax unified
 1859              		.arm
 1860              		.fpu vfp
 1862              	armwave_test_init:
 1863              	.LVL137:
 1864              	.LFB66:
 328:armwave.c     **** 
 329:armwave.c     **** void armwave_test_init(float mod)
 330:armwave.c     **** {
 1865              		.loc 1 330 1 is_stmt 1 view -0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 0
 1868              		@ frame_needed = 0, uses_anonymous_args = 0
 331:armwave.c     **** 	mod_depth = mod;
 1869              		.loc 1 331 2 view .LVU484
 1870              	@ armwave.c:331: 	mod_depth = mod;
 1871              		.loc 1 331 12 is_stmt 0 view .LVU485
 1872 0878 8C309FE5 		ldr	r3, .L130+20	@ tmp124,
 1873              	@ armwave.c:330: {
 330:armwave.c     **** 	mod_depth = mod;
 1874              		.loc 1 330 1 view .LVU486
 1875 087c 70402DE9 		push	{r4, r5, r6, lr}	@
 1876              		.cfi_def_cfa_offset 16
 1877              		.cfi_offset 4, -16
 1878              		.cfi_offset 5, -12
 1879              		.cfi_offset 6, -8
 1880              		.cfi_offset 14, -4
 1881 0880 068B2DED 		vpush.64	{d8, d9, d10}	@
 1882              		.cfi_def_cfa_offset 40
 1883              		.cfi_offset 80, -40
 1884              		.cfi_offset 81, -36
 1885              		.cfi_offset 82, -32
 1886              		.cfi_offset 83, -28
 1887              		.cfi_offset 84, -24
 1888              		.cfi_offset 85, -20
 1889 0884 84409FE5 		ldr	r4, .L130+24	@ ivtmp.98,
 1890              	.LBB6:
 1891              	.LBB7:
 1892              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1893              		.loc 1 84 32 view .LVU487
 1894 0888 1EAA9FED 		vldr.32	s20, .L130+16	@ tmp130,
 1895              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1896              		.loc 1 84 26 view .LVU488
 1897 088c 199B9FED 		vldr.64	d9, .L130	@ tmp139,
 1898              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1899              		.loc 1 84 49 view .LVU489
 1900 0890 1A8B9FED 		vldr.64	d8, .L130+8	@ tmp133,
 1901              	.LBE7:
 1902              	.LBE6:
 1903              	@ armwave.c:331: 	mod_depth = mod;
 1904              		.loc 1 331 12 view .LVU490
 1905 0894 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 332:armwave.c     **** 
 333:armwave.c     ****     test_create_waveform();
 1906              		.loc 1 333 5 is_stmt 1 view .LVU491
 1907 0898 FEFFFFEB 		bl	test_create_waveform		@
 1908              	.LVL138:
 334:armwave.c     ****     test_create_gamma();
 1909              		.loc 1 334 5 view .LVU492
 1910              	.LBB9:
 1911              	.LBI6:
  78:armwave.c     **** {
 1912              		.loc 1 78 6 view .LVU493
  78:armwave.c     **** {
 1913              		.loc 1 78 6 is_stmt 0 view .LVU494
 1914 089c 013084E2 		add	r3, r4, #1	@ _30, ivtmp.98,
 1915 08a0 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.98,
 1916 08a4 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1917              	.LVL139:
 1918              	.L127:
 1919              	.LBB8:
  84:armwave.c     ****     }
 1920              		.loc 1 84 9 is_stmt 1 view .LVU495
 1921              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1922              		.loc 1 84 32 is_stmt 0 view .LVU496
 1923 08a8 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.98
 1924              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1925              		.loc 1 84 26 view .LVU497
 1926 08ac 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1927              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1928              		.loc 1 84 32 view .LVU498
 1929 08b0 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1930 08b4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1931 08b8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1932              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1933              		.loc 1 84 26 view .LVU499
 1934 08bc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1935 08c0 FEFFFFEB 		bl	pow		@
 1936              	.LVL140:
 1937              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1938              		.loc 1 84 49 view .LVU500
 1939 08c4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1940              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1941              		.loc 1 84 24 view .LVU501
 1942 08c8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1943 08cc 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1944 08d0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1945              	.LVL141:
 1946              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1947              		.loc 1 83 5 view .LVU502
 1948 08d4 060054E1 		cmp	r4, r6	@ ivtmp.98, _31
 1949 08d8 F2FFFF1A 		bne	.L127		@,
 1950              	.LVL142:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1951              		.loc 1 83 5 view .LVU503
 1952              	.LBE8:
 1953              	.LBE9:
 335:armwave.c     **** 
 336:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1954              		.loc 1 336 5 is_stmt 1 view .LVU504
 1955 08dc C7FDFFEB 		bl	armwave_setup_render.constprop.0		@
 1956              	.LVL143:
 337:armwave.c     **** 
 338:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1957              		.loc 1 338 5 view .LVU505
 1958              	@ armwave.c:339: }
 339:armwave.c     **** }
 1959              		.loc 1 339 1 is_stmt 0 view .LVU506
 1960 08e0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1961              		.cfi_restore 84
 1962              		.cfi_restore 85
 1963              		.cfi_restore 82
 1964              		.cfi_restore 83
 1965              		.cfi_restore 80
 1966              		.cfi_restore 81
 1967              		.cfi_def_cfa_offset 16
 1968              	@ armwave.c:338:     printf("armwave version: %s\n", ARMWAVE_VER);
 338:armwave.c     **** }
 1969              		.loc 1 338 5 view .LVU507
 1970 08e4 28109FE5 		ldr	r1, .L130+28	@,
 1971 08e8 28009FE5 		ldr	r0, .L130+32	@,
 1972              	@ armwave.c:339: }
 1973              		.loc 1 339 1 view .LVU508
 1974 08ec 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1975              		.cfi_restore 14
 1976              		.cfi_restore 6
 1977              		.cfi_restore 5
 1978              		.cfi_restore 4
 1979              		.cfi_def_cfa_offset 0
 1980              	@ armwave.c:338:     printf("armwave version: %s\n", ARMWAVE_VER);
 338:armwave.c     **** }
 1981              		.loc 1 338 5 view .LVU509
 1982 08f0 FEFFFFEA 		b	printf		@
 1983              	.LVL144:
 1984              	.L131:
 1985 08f4 0000A0E1 		.align	3
 1986              	.L130:
 1987 08f8 000000C0 		.word	-1073741824
 1988 08fc CCCCEC3F 		.word	1072483532
 1989 0900 00000000 		.word	0
 1990 0904 00E06F40 		.word	1081073664
 1991 0908 00007F43 		.word	1132396544
 1992 090c 00000000 		.word	.LANCHOR1
 1993 0910 FFFFFFFF 		.word	gamma_table-1
 1994 0914 CC000000 		.word	.LC11
 1995 0918 D4000000 		.word	.LC12
 1996              		.cfi_endproc
 1997              	.LFE66:
 1999              		.global	__aeabi_uidiv
 2000              		.align	2
 2001              		.global	armwave_test_generate
 2002              		.syntax unified
 2003              		.arm
 2004              		.fpu vfp
 2006              	armwave_test_generate:
 2007              	.LFB67:
 340:armwave.c     **** 
 341:armwave.c     **** void armwave_test_generate()
 342:armwave.c     **** {
 2008              		.loc 1 342 1 is_stmt 1 view -0
 2009              		.cfi_startproc
 2010              		@ args = 0, pretend = 0, frame = 8
 2011              		@ frame_needed = 0, uses_anonymous_args = 0
 343:armwave.c     **** 	uint32_t yy;
 2012              		.loc 1 343 2 view .LVU511
 344:armwave.c     **** 
 345:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2013              		.loc 1 345 5 view .LVU512
 2014              	@ armwave.c:342: {
 342:armwave.c     **** 	uint32_t yy;
 2015              		.loc 1 342 1 is_stmt 0 view .LVU513
 2016 091c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2017              		.cfi_def_cfa_offset 36
 2018              		.cfi_offset 4, -36
 2019              		.cfi_offset 5, -32
 2020              		.cfi_offset 6, -28
 2021              		.cfi_offset 7, -24
 2022              		.cfi_offset 8, -20
 2023              		.cfi_offset 9, -16
 2024              		.cfi_offset 10, -12
 2025              		.cfi_offset 11, -8
 2026              		.cfi_offset 14, -4
 2027              	@ armwave.c:345:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2028              		.loc 1 345 5 view .LVU514
 2029 0920 0010A0E3 		mov	r1, #0	@,
 2030 0924 44419FE5 		ldr	r4, .L150	@ tmp269,
 2031              	@ armwave.c:342: {
 342:armwave.c     **** 	uint32_t yy;
 2032              		.loc 1 342 1 view .LVU515
 2033 0928 0CD04DE2 		sub	sp, sp, #12	@,,
 2034              		.cfi_def_cfa_offset 48
 2035              	@ armwave.c:345:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 2036              		.loc 1 345 5 view .LVU516
 2037 092c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 2038 0930 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2039 0934 FEFFFFEB 		bl	memset		@
 2040              	.LVL145:
 346:armwave.c     **** 
 347:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2041              		.loc 1 347 5 is_stmt 1 view .LVU517
 2042              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2043              		.loc 1 347 45 is_stmt 0 view .LVU518
 2044 0938 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2045              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2046              		.loc 1 347 5 view .LVU519
 2047 093c 020B55E3 		cmp	r5, #2048	@ _72,
 2048 0940 4800008A 		bhi	.L132		@,
 2049 0944 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2050              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2051              		.loc 1 347 12 view .LVU520
 2052 0948 00A0A0E3 		mov	r10, #0	@ yy,
 2053              	.LVL146:
 2054              	.L138:
 348:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2055              		.loc 1 348 9 is_stmt 1 discriminator 3 view .LVU521
 2056 094c 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 2057              	.LBB12:
 2058              	.LBB13:
 2059              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2060              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU522
 2061 0950 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2062              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2063              		.loc 1 106 5 discriminator 3 view .LVU523
 2064 0954 000056E3 		cmp	r6, #0	@ prephitmp_171,
 2065              	.LBE13:
 2066              	.LBE12:
 2067              	@ armwave.c:348:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 2068              		.loc 1 348 9 discriminator 3 view .LVU524
 2069 0958 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 2070              	.LVL147:
 2071              	.LBB15:
 2072              	.LBI12:
  95:armwave.c     **** {
 2073              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU525
 2074              	.LBB14:
  97:armwave.c     ****     uint32_t value, word;
 2075              		.loc 1 97 5 discriminator 3 view .LVU526
  98:armwave.c     ****     uint8_t *wave_base;
 2076              		.loc 1 98 5 discriminator 3 view .LVU527
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2077              		.loc 1 99 5 discriminator 3 view .LVU528
 100:armwave.c     ****     uint8_t *write_buffer;
 2078              		.loc 1 100 5 discriminator 3 view .LVU529
 101:armwave.c     ****     
 2079              		.loc 1 101 5 discriminator 3 view .LVU530
 103:armwave.c     **** 
 2080              		.loc 1 103 5 discriminator 3 view .LVU531
 2081              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2082              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU532
 2083 095c 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 2084              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2085              		.loc 1 103 40 discriminator 3 view .LVU533
 2086 0960 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 2087              	.LVL148:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2088              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU534
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2089              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU535
 2090 0964 3900000A 		beq	.L134		@,
 2091              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2092              		.loc 1 106 11 view .LVU536
 2093 0968 0080A0E3 		mov	r8, #0	@ w,
 2094 096c 043043E2 		sub	r3, r3, #4	@ _77, _3,
 2095              	.LVL149:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2096              		.loc 1 106 11 view .LVU537
 2097 0970 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 2098              	.LVL150:
 2099              	.L137:
 107:armwave.c     **** 
 2100              		.loc 1 107 9 is_stmt 1 view .LVU538
 2101              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2102              		.loc 1 107 64 is_stmt 0 view .LVU539
 2103 0974 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2104              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2105              		.loc 1 117 9 view .LVU540
 2106 0978 000059E3 		cmp	r9, #0	@ _4,
 2107              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2108              		.loc 1 107 36 view .LVU541
 2109 097c 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 2110              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2111              		.loc 1 107 64 view .LVU542
 2112 0980 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 2113              	.LVL151:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2114              		.loc 1 117 9 is_stmt 1 view .LVU543
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2115              		.loc 1 117 9 is_stmt 0 view .LVU544
 2116 0984 2D00000A 		beq	.L135		@,
 2117 0988 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 2118 098c 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 2119              	.LVL152:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2120              		.loc 1 117 9 view .LVU545
 2121 0990 03E08EE0 		add	lr, lr, r3	@ ivtmp.104, _16, tmp205
 2122              	.LVL153:
 2123              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2124              		.loc 1 117 16 view .LVU546
 2125 0994 0010A0E3 		mov	r1, #0	@ yy,
 2126              	.LVL154:
 2127              	.L136:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2128              		.loc 1 132 13 is_stmt 1 view .LVU547
 2129              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2130              		.loc 1 132 18 is_stmt 0 view .LVU548
 2131 0998 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 2132              	.LVL155:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2133              		.loc 1 136 13 is_stmt 1 view .LVU549
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2134              		.loc 1 137 14 view .LVU550
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2135              		.loc 1 138 14 view .LVU551
 139:armwave.c     ****             	word >>= 8;
 2136              		.loc 1 139 14 view .LVU552
 2137              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2138              		.loc 1 137 42 is_stmt 0 view .LVU553
 2139 099c 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2140              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2141              		.loc 1 138 60 view .LVU554
 2142 09a0 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2143              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2144              		.loc 1 137 34 view .LVU555
 2145 09a4 73C0EFE6 		uxtb	ip, r3	@ word, word
 2146              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2147              		.loc 1 140 19 view .LVU556
 2148 09a8 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 2149              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2150              		.loc 1 139 44 view .LVU557
 2151 09ac 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 2152              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2153              		.loc 1 137 34 view .LVU558
 2154 09b0 7550EFE6 		uxtb	r5, r5	@ word, word
 2155              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2156              		.loc 1 139 44 view .LVU559
 2157 09b4 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 2158              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2159              		.loc 1 138 60 view .LVU560
 2160 09b8 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 2161              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2162              		.loc 1 140 19 view .LVU561
 2163 09bc 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2164              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2165              		.loc 1 139 44 view .LVU562
 2166 09c0 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 2167              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2168              		.loc 1 137 34 view .LVU563
 2169 09c4 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2170              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2171              		.loc 1 140 19 view .LVU564
 2172 09c8 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2173              	.LVL156:
 2174              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2175              		.loc 1 139 44 view .LVU565
 2176 09cc 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 2177 09d0 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 2178              	.LVL157:
 140:armwave.c     ****     		}
 2179              		.loc 1 140 14 is_stmt 1 view .LVU566
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2180              		.loc 1 137 14 view .LVU567
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2181              		.loc 1 138 14 view .LVU568
 139:armwave.c     ****             	word >>= 8;
 2182              		.loc 1 139 14 view .LVU569
 2183              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2184              		.loc 1 137 42 is_stmt 0 view .LVU570
 2185 09d4 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2186              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2187              		.loc 1 138 60 view .LVU571
 2188 09d8 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2189              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2190              		.loc 1 139 44 view .LVU572
 2191 09dc 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2192              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2193              		.loc 1 138 60 view .LVU573
 2194 09e0 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2195              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2196              		.loc 1 139 44 view .LVU574
 2197 09e4 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2198              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2199              		.loc 1 138 60 view .LVU575
 2200 09e8 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2201              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2202              		.loc 1 117 37 view .LVU576
 2203 09ec 041081E2 		add	r1, r1, #4	@ yy, yy,
 2204              	.LVL158:
 2205              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2206              		.loc 1 139 44 view .LVU577
 2207 09f0 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2208              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2209              		.loc 1 117 9 view .LVU578
 2210 09f4 010059E1 		cmp	r9, r1	@ _4, yy
 2211              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2212              		.loc 1 139 44 view .LVU579
 2213 09f8 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2214 09fc 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2215              	.LVL159:
 140:armwave.c     ****     		}
 2216              		.loc 1 140 14 is_stmt 1 view .LVU580
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2217              		.loc 1 137 14 view .LVU581
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2218              		.loc 1 138 14 view .LVU582
 139:armwave.c     ****             	word >>= 8;
 2219              		.loc 1 139 14 view .LVU583
 2220              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2221              		.loc 1 137 42 is_stmt 0 view .LVU584
 2222 0a00 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2223              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2224              		.loc 1 138 60 view .LVU585
 2225 0a04 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2226              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2227              		.loc 1 139 44 view .LVU586
 2228 0a08 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2229 0a0c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2230 0a10 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2231 0a14 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2232 0a18 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 140:armwave.c     ****     		}
 2233              		.loc 1 140 14 is_stmt 1 view .LVU587
 2234              	.LVL160:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2235              		.loc 1 137 14 view .LVU588
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2236              		.loc 1 138 14 view .LVU589
 139:armwave.c     ****             	word >>= 8;
 2237              		.loc 1 139 14 view .LVU590
 2238              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2239              		.loc 1 137 42 is_stmt 0 view .LVU591
 2240 0a1c 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2241              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2242              		.loc 1 138 60 view .LVU592
 2243 0a20 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2244              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2245              		.loc 1 139 44 view .LVU593
 2246 0a24 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2247 0a28 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2248 0a2c 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2249 0a30 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2250 0a34 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 140:armwave.c     ****     		}
 2251              		.loc 1 140 14 is_stmt 1 view .LVU594
 2252              	.LVL161:
 2253              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2254              		.loc 1 117 9 is_stmt 0 view .LVU595
 2255 0a38 D6FFFF8A 		bhi	.L136		@,
 2256 0a3c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2257              	.LVL162:
 2258              	.L135:
 2259              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2260              		.loc 1 106 44 view .LVU596
 2261 0a40 018088E2 		add	r8, r8, #1	@ w, w,
 2262              	.LVL163:
 2263              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2264              		.loc 1 106 5 view .LVU597
 2265 0a44 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2266 0a48 C9FFFF3A 		bcc	.L137		@,
 2267 0a4c 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2268              	.LVL164:
 2269              	.L134:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2270              		.loc 1 106 5 view .LVU598
 2271              	.LBE14:
 2272              	.LBE15:
 2273              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2274              		.loc 1 347 28 discriminator 3 view .LVU599
 2275 0a50 0510A0E1 		mov	r1, r5	@, _72
 2276 0a54 020BA0E3 		mov	r0, #2048	@,
 2277              	.LVL165:
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2278              		.loc 1 347 28 discriminator 3 view .LVU600
 2279 0a58 FEFFFFEB 		bl	__aeabi_uidiv		@
 2280              	.LVL166:
 2281              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2282              		.loc 1 347 63 discriminator 3 view .LVU601
 2283 0a5c 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2284              	.LVL167:
 2285              	@ armwave.c:347:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 347:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2286              		.loc 1 347 5 discriminator 3 view .LVU602
 2287 0a60 0A0050E1 		cmp	r0, r10	@, yy
 2288 0a64 B8FFFF8A 		bhi	.L138		@,
 2289              	.LVL168:
 2290              	.L132:
 2291              	@ armwave.c:350: }
 349:armwave.c     ****     }
 350:armwave.c     **** }
 2292              		.loc 1 350 1 view .LVU603
 2293 0a68 0CD08DE2 		add	sp, sp, #12	@,,
 2294              		.cfi_def_cfa_offset 36
 2295              		@ sp needed	@
 2296 0a6c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2297              	.L151:
 2298              		.align	2
 2299              	.L150:
 2300 0a70 00000000 		.word	g_armwave_state
 2301              		.cfi_endproc
 2302              	.LFE67:
 2304              		.align	2
 2305              		.global	armwave_test_get_buffer
 2306              		.syntax unified
 2307              		.arm
 2308              		.fpu vfp
 2310              	armwave_test_get_buffer:
 2311              	.LFB68:
 351:armwave.c     **** 
 352:armwave.c     **** PyObject *armwave_test_get_buffer()
 353:armwave.c     **** {
 2312              		.loc 1 353 1 is_stmt 1 view -0
 2313              		.cfi_startproc
 2314              		@ args = 0, pretend = 0, frame = 0
 2315              		@ frame_needed = 0, uses_anonymous_args = 0
 354:armwave.c     ****     PyObject *mv;
 2316              		.loc 1 354 5 view .LVU605
 355:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2317              		.loc 1 355 5 view .LVU606
 2318              	@ armwave.c:353: {
 353:armwave.c     ****     PyObject *mv;
 2319              		.loc 1 353 1 is_stmt 0 view .LVU607
 2320 0a74 30402DE9 		push	{r4, r5, lr}	@
 2321              		.cfi_def_cfa_offset 12
 2322              		.cfi_offset 4, -12
 2323              		.cfi_offset 5, -8
 2324              		.cfi_offset 14, -4
 2325              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2326              		.loc 1 355 22 view .LVU608
 2327 0a78 2C00A0E3 		mov	r0, #44	@,
 2328              	@ armwave.c:353: {
 353:armwave.c     ****     PyObject *mv;
 2329              		.loc 1 353 1 view .LVU609
 2330 0a7c 0CD04DE2 		sub	sp, sp, #12	@,,
 2331              		.cfi_def_cfa_offset 24
 2332              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2333              		.loc 1 355 22 view .LVU610
 2334 0a80 FEFFFFEB 		bl	malloc		@
 2335              	.LVL169:
 2336              	@ armwave.c:357:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 356:armwave.c     ****     
 357:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2337              		.loc 1 357 5 view .LVU611
 2338 0a84 3C409FE5 		ldr	r4, .L154	@ tmp118,
 2339              	@ armwave.c:355:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 355:armwave.c     ****     
 2340              		.loc 1 355 22 view .LVU612
 2341 0a88 0050A0E1 		mov	r5, r0	@ tmp117,
 2342              	.LVL170:
 2343              		.loc 1 357 5 is_stmt 1 view .LVU613
 2344 0a8c 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2345              	.LVL171:
 2346              		.loc 1 357 5 is_stmt 0 view .LVU614
 2347 0a90 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2348              	.LVL172:
 358:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2349              		.loc 1 358 5 is_stmt 1 view .LVU615
 2350              	@ armwave.c:358:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2351              		.loc 1 358 79 is_stmt 0 view .LVU616
 2352 0a94 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2353              	@ armwave.c:358:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2354              		.loc 1 358 5 view .LVU617
 2355 0a98 08C0A0E3 		mov	ip, #8	@ tmp125,
 2356 0a9c 0110A0E3 		mov	r1, #1	@ tmp126,
 2357 0aa0 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2358 0aa4 02108DE8 		stm	sp, {r1, ip}	@,,
 2359 0aa8 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2360 0aac 0500A0E1 		mov	r0, r5	@, tmp117
 2361 0ab0 0010A0E3 		mov	r1, #0	@,
 2362 0ab4 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2363              	.LVL173:
 359:armwave.c     **** 
 360:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2364              		.loc 1 360 2 is_stmt 1 view .LVU618
 2365              	@ armwave.c:360: 	mv = PyMemoryView_FromBuffer(buf);
 2366              		.loc 1 360 7 is_stmt 0 view .LVU619
 2367 0ab8 0500A0E1 		mov	r0, r5	@, tmp117
 2368              	@ armwave.c:361: }
 361:armwave.c     **** }
 2369              		.loc 1 361 1 view .LVU620
 2370 0abc 0CD08DE2 		add	sp, sp, #12	@,,
 2371              		.cfi_def_cfa_offset 12
 2372              		@ sp needed	@
 2373 0ac0 3040BDE8 		pop	{r4, r5, lr}	@
 2374              		.cfi_restore 14
 2375              		.cfi_restore 5
 2376              		.cfi_restore 4
 2377              		.cfi_def_cfa_offset 0
 2378              	.LVL174:
 2379              	@ armwave.c:360: 	mv = PyMemoryView_FromBuffer(buf);
 360:armwave.c     **** }
 2380              		.loc 1 360 7 view .LVU621
 2381 0ac4 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2382              	.LVL175:
 2383              	.L155:
 360:armwave.c     **** }
 2384              		.loc 1 360 7 view .LVU622
 2385              		.align	2
 2386              	.L154:
 2387 0ac8 00000000 		.word	g_armwave_state
 2388              		.cfi_endproc
 2389              	.LFE68:
 2391              		.align	2
 2392              		.global	armwave_test_dump_buffer_to_ppm
 2393              		.syntax unified
 2394              		.arm
 2395              		.fpu vfp
 2397              	armwave_test_dump_buffer_to_ppm:
 2398              	.LVL176:
 2399              	.LFB69:
 362:armwave.c     **** 
 363:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 364:armwave.c     **** {
 2400              		.loc 1 364 1 is_stmt 1 view -0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404              		@ link register save eliminated.
 365:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2405              		.loc 1 365 2 view .LVU624
 2406 0acc 08309FE5 		ldr	r3, .L157	@ tmp112,
 2407 0ad0 0010A0E1 		mov	r1, r0	@, fn
 2408 0ad4 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2409              	.LVL177:
 2410              		.loc 1 365 2 is_stmt 0 view .LVU625
 2411 0ad8 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2412              	.LVL178:
 2413              	.L158:
 2414              		.loc 1 365 2 view .LVU626
 2415              		.align	2
 2416              	.L157:
 2417 0adc 00000000 		.word	g_armwave_state
 2418              		.cfi_endproc
 2419              	.LFE69:
 2421              		.align	2
 2422              		.global	armwave_cleanup
 2423              		.syntax unified
 2424              		.arm
 2425              		.fpu vfp
 2427              	armwave_cleanup:
 2428              	.LFB70:
 366:armwave.c     **** }
 367:armwave.c     **** 
 368:armwave.c     **** void armwave_cleanup()
 369:armwave.c     **** {
 2429              		.loc 1 369 1 is_stmt 1 view -0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 0
 2432              		@ frame_needed = 0, uses_anonymous_args = 0
 370:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2433              		.loc 1 370 2 view .LVU628
 2434              	@ armwave.c:369: {
 369:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2435              		.loc 1 369 1 is_stmt 0 view .LVU629
 2436 0ae0 10402DE9 		push	{r4, lr}	@
 2437              		.cfi_def_cfa_offset 8
 2438              		.cfi_offset 4, -8
 2439              		.cfi_offset 14, -4
 2440              	@ armwave.c:370: 	free(g_armwave_state.out_pixbuf);
 2441              		.loc 1 370 22 view .LVU630
 2442 0ae4 28409FE5 		ldr	r4, .L161	@ tmp113,
 2443              	@ armwave.c:370: 	free(g_armwave_state.out_pixbuf);
 2444              		.loc 1 370 2 view .LVU631
 2445 0ae8 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2446 0aec FEFFFFEB 		bl	free		@
 2447              	.LVL179:
 371:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2448              		.loc 1 371 2 is_stmt 1 view .LVU632
 2449 0af0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2450 0af4 FEFFFFEB 		bl	free		@
 2451              	.LVL180:
 372:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2452              		.loc 1 372 2 view .LVU633
 2453 0af8 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.xcoord_to_xpixel
 2454 0afc FEFFFFEB 		bl	free		@
 2455              	.LVL181:
 373:armwave.c     **** 
 374:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2456              		.loc 1 374 2 view .LVU634
 2457              	@ armwave.c:374: 	g_armwave_state.out_pixbuf = NULL;
 2458              		.loc 1 374 29 is_stmt 0 view .LVU635
 2459 0b00 0030A0E3 		mov	r3, #0	@ tmp120,
 2460 0b04 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 375:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2461              		.loc 1 375 2 is_stmt 1 view .LVU636
 2462              	@ armwave.c:375: 	g_armwave_state.ch1_buffer = NULL;
 2463              		.loc 1 375 29 is_stmt 0 view .LVU637
 2464 0b08 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 376:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2465              		.loc 1 376 2 is_stmt 1 view .LVU638
 2466              	@ armwave.c:376: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2467              		.loc 1 376 35 is_stmt 0 view .LVU639
 2468 0b0c 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2469              	@ armwave.c:377: }
 377:armwave.c     **** }
 2470              		.loc 1 377 1 view .LVU640
 2471 0b10 1080BDE8 		pop	{r4, pc}	@
 2472              	.L162:
 2473              		.align	2
 2474              	.L161:
 2475 0b14 00000000 		.word	g_armwave_state
 2476              		.cfi_endproc
 2477              	.LFE70:
 2479              		.section	.text.startup,"ax",%progbits
 2480              		.align	2
 2481              		.global	main
 2482              		.syntax unified
 2483              		.arm
 2484              		.fpu vfp
 2486              	main:
 2487              	.LVL182:
 2488              	.LFB71:
 378:armwave.c     **** 
 379:armwave.c     **** int main(int argc, char *argv[])
 380:armwave.c     **** {
 2489              		.loc 1 380 1 is_stmt 1 view -0
 2490              		.cfi_startproc
 2491              		@ args = 0, pretend = 0, frame = 8
 2492              		@ frame_needed = 0, uses_anonymous_args = 0
 381:armwave.c     ****     uint32_t *out_buffer;
 2493              		.loc 1 381 5 view .LVU642
 382:armwave.c     ****     uint32_t xx, yy, n;
 2494              		.loc 1 382 5 view .LVU643
 383:armwave.c     **** 
 384:armwave.c     ****     //printf("Starting armwave...\n");
 385:armwave.c     ****     armwave_init();
 2495              		.loc 1 385 5 view .LVU644
 2496              	.LBB20:
 2497              	.LBI20:
 148:armwave.c     **** {
 2498              		.loc 1 148 6 view .LVU645
 2499              	.LBB21:
 150:armwave.c     **** }
 2500              		.loc 1 150 5 view .LVU646
 2501              	.LBE21:
 2502              	.LBE20:
 2503              	@ armwave.c:380: {
 380:armwave.c     ****     uint32_t *out_buffer;
 2504              		.loc 1 380 1 is_stmt 0 view .LVU647
 2505 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2506              		.cfi_def_cfa_offset 36
 2507              		.cfi_offset 4, -36
 2508              		.cfi_offset 5, -32
 2509              		.cfi_offset 6, -28
 2510              		.cfi_offset 7, -24
 2511              		.cfi_offset 8, -20
 2512              		.cfi_offset 9, -16
 2513              		.cfi_offset 10, -12
 2514              		.cfi_offset 11, -8
 2515              		.cfi_offset 14, -4
 2516 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2517              		.cfi_def_cfa_offset 48
 2518              	.LBB25:
 2519              	.LBB22:
 2520              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2521              		.loc 1 150 27 view .LVU648
 2522 0008 68919FE5 		ldr	r9, .L183	@ tmp267,
 2523              	.LBE22:
 2524              	.LBE25:
 2525              	@ armwave.c:394:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 386:armwave.c     **** 
 387:armwave.c     ****     //printf("Creating test waveform...\n");
 388:armwave.c     ****     test_create_waveform();
 389:armwave.c     **** 
 390:armwave.c     ****     //printf("Creating gamma LUT...\n");
 391:armwave.c     ****     test_create_gamma();
 392:armwave.c     **** 
 393:armwave.c     ****     //printf("Setting up render...\n");
 394:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2526              		.loc 1 394 5 view .LVU649
 2527 000c 68219FE5 		ldr	r2, .L183+4	@ ivtmp_191,
 2528              	.LBB26:
 2529              	.LBB23:
 2530              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2531              		.loc 1 150 27 view .LVU650
 2532 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2533              	.LBE23:
 2534              	.LBE26:
 2535              	@ armwave.c:394:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2536              		.loc 1 394 5 view .LVU651
 2537 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2538              	.LBB27:
 2539              	.LBB24:
 2540              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2541              		.loc 1 150 27 view .LVU652
 2542 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2543              	.LBE24:
 2544              	.LBE27:
 388:armwave.c     **** 
 2545              		.loc 1 388 5 is_stmt 1 view .LVU653
 2546 001c FEFFFFEB 		bl	test_create_waveform		@
 2547              	.LVL183:
 391:armwave.c     **** 
 2548              		.loc 1 391 5 view .LVU654
 2549 0020 FEFFFFEB 		bl	test_create_gamma		@
 2550              	.LVL184:
 2551              		.loc 1 394 5 view .LVU655
 2552 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 2553              	.LVL185:
 395:armwave.c     **** 
 396:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 397:armwave.c     **** 
 398:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2554              		.loc 1 398 5 view .LVU656
 2555              		.loc 1 398 5 is_stmt 0 view .LVU657
 2556 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2557              	.LVL186:
 2558              	.L164:
 2559              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2560              		.loc 1 399 9 view .LVU658
 2561 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2562 0030 4900008A 		bhi	.L172		@,
 2563 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2564              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2565              		.loc 1 399 16 view .LVU659
 2566 0038 0080A0E3 		mov	r8, #0	@ yy,
 2567 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2568              	.LVL187:
 2569              	.L169:
 400:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 401:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2570              		.loc 1 401 13 is_stmt 1 discriminator 3 view .LVU660
 2571 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2572              	.LBB28:
 2573              	.LBB29:
 2574              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2575              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU661
 2576 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2577              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2578              		.loc 1 106 5 discriminator 3 view .LVU662
 2579 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2580              	.LBE29:
 2581              	.LBE28:
 2582              	@ armwave.c:401:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2583              		.loc 1 401 13 discriminator 3 view .LVU663
 2584 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2585              	.LVL188:
 2586              	.LBB31:
 2587              	.LBI28:
  95:armwave.c     **** {
 2588              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU664
 2589              	.LBB30:
  97:armwave.c     ****     uint32_t value, word;
 2590              		.loc 1 97 5 discriminator 3 view .LVU665
  98:armwave.c     ****     uint8_t *wave_base;
 2591              		.loc 1 98 5 discriminator 3 view .LVU666
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2592              		.loc 1 99 5 discriminator 3 view .LVU667
 100:armwave.c     ****     uint8_t *write_buffer;
 2593              		.loc 1 100 5 discriminator 3 view .LVU668
 101:armwave.c     ****     
 2594              		.loc 1 101 5 discriminator 3 view .LVU669
 103:armwave.c     **** 
 2595              		.loc 1 103 5 discriminator 3 view .LVU670
 2596              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2597              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU671
 2598 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2599              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2600              		.loc 1 103 40 discriminator 3 view .LVU672
 2601 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2602              	.LVL189:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2603              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU673
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2604              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU674
 2605 0058 3900000A 		beq	.L165		@,
 2606              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2607              		.loc 1 106 11 view .LVU675
 2608 005c 0070A0E3 		mov	r7, #0	@ w,
 2609 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2610              	.LVL190:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2611              		.loc 1 106 11 view .LVU676
 2612 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2613              	.LVL191:
 2614              	.L168:
 107:armwave.c     **** 
 2615              		.loc 1 107 9 is_stmt 1 view .LVU677
 2616              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2617              		.loc 1 107 64 is_stmt 0 view .LVU678
 2618 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2619              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2620              		.loc 1 117 9 view .LVU679
 2621 006c 00005AE3 		cmp	r10, #0	@ _2,
 2622              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2623              		.loc 1 107 36 view .LVU680
 2624 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2625              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2626              		.loc 1 107 64 view .LVU681
 2627 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2628              	.LVL192:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2629              		.loc 1 117 9 is_stmt 1 view .LVU682
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2630              		.loc 1 117 9 is_stmt 0 view .LVU683
 2631 0078 2D00000A 		beq	.L166		@,
 2632 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2633 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2634              	.LVL193:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2635              		.loc 1 117 9 view .LVU684
 2636 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.117, _20, tmp202
 2637              	.LVL194:
 2638              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2639              		.loc 1 117 16 view .LVU685
 2640 0088 0010A0E3 		mov	r1, #0	@ yy,
 2641              	.LVL195:
 2642              	.L167:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2643              		.loc 1 132 13 is_stmt 1 view .LVU686
 2644              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2645              		.loc 1 132 18 is_stmt 0 view .LVU687
 2646 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2647              	.LVL196:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2648              		.loc 1 136 13 is_stmt 1 view .LVU688
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2649              		.loc 1 137 14 view .LVU689
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2650              		.loc 1 138 14 view .LVU690
 139:armwave.c     ****             	word >>= 8;
 2651              		.loc 1 139 14 view .LVU691
 2652              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2653              		.loc 1 137 42 is_stmt 0 view .LVU692
 2654 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2655              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2656              		.loc 1 138 60 view .LVU693
 2657 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2658              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2659              		.loc 1 137 34 view .LVU694
 2660 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2661              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2662              		.loc 1 140 19 view .LVU695
 2663 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2664              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2665              		.loc 1 139 44 view .LVU696
 2666 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2667              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2668              		.loc 1 137 34 view .LVU697
 2669 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2670              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2671              		.loc 1 139 44 view .LVU698
 2672 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2673              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2674              		.loc 1 138 60 view .LVU699
 2675 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2676              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2677              		.loc 1 140 19 view .LVU700
 2678 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2679              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2680              		.loc 1 139 44 view .LVU701
 2681 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2682              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2683              		.loc 1 137 34 view .LVU702
 2684 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2685              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2686              		.loc 1 140 19 view .LVU703
 2687 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2688              	.LVL197:
 2689              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2690              		.loc 1 139 44 view .LVU704
 2691 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2692 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2693              	.LVL198:
 140:armwave.c     ****     		}
 2694              		.loc 1 140 14 is_stmt 1 view .LVU705
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2695              		.loc 1 137 14 view .LVU706
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2696              		.loc 1 138 14 view .LVU707
 139:armwave.c     ****             	word >>= 8;
 2697              		.loc 1 139 14 view .LVU708
 2698              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2699              		.loc 1 137 42 is_stmt 0 view .LVU709
 2700 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2701              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2702              		.loc 1 138 60 view .LVU710
 2703 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2704              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2705              		.loc 1 139 44 view .LVU711
 2706 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2707              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2708              		.loc 1 138 60 view .LVU712
 2709 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2710              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2711              		.loc 1 139 44 view .LVU713
 2712 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2713              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2714              		.loc 1 138 60 view .LVU714
 2715 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2716              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2717              		.loc 1 117 37 view .LVU715
 2718 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2719              	.LVL199:
 2720              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2721              		.loc 1 139 44 view .LVU716
 2722 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2723              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2724              		.loc 1 117 9 view .LVU717
 2725 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2726              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2727              		.loc 1 139 44 view .LVU718
 2728 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2729 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2730              	.LVL200:
 140:armwave.c     ****     		}
 2731              		.loc 1 140 14 is_stmt 1 view .LVU719
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2732              		.loc 1 137 14 view .LVU720
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2733              		.loc 1 138 14 view .LVU721
 139:armwave.c     ****             	word >>= 8;
 2734              		.loc 1 139 14 view .LVU722
 2735              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2736              		.loc 1 137 42 is_stmt 0 view .LVU723
 2737 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2738              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2739              		.loc 1 138 60 view .LVU724
 2740 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2741              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2742              		.loc 1 139 44 view .LVU725
 2743 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2744 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2745 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2746 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2747 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 140:armwave.c     ****     		}
 2748              		.loc 1 140 14 is_stmt 1 view .LVU726
 2749              	.LVL201:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2750              		.loc 1 137 14 view .LVU727
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2751              		.loc 1 138 14 view .LVU728
 139:armwave.c     ****             	word >>= 8;
 2752              		.loc 1 139 14 view .LVU729
 2753              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2754              		.loc 1 137 42 is_stmt 0 view .LVU730
 2755 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2756              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2757              		.loc 1 138 60 view .LVU731
 2758 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2759              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2760              		.loc 1 139 44 view .LVU732
 2761 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2762 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2763 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2764 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2765 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 140:armwave.c     ****     		}
 2766              		.loc 1 140 14 is_stmt 1 view .LVU733
 2767              	.LVL202:
 2768              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2769              		.loc 1 117 9 is_stmt 0 view .LVU734
 2770 012c D6FFFF8A 		bhi	.L167		@,
 2771 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2772              	.LVL203:
 2773              	.L166:
 2774              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2775              		.loc 1 106 44 view .LVU735
 2776 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2777              	.LVL204:
 2778              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2779              		.loc 1 106 5 view .LVU736
 2780 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2781 013c C9FFFF3A 		bcc	.L168		@,
 2782 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2783              	.LVL205:
 2784              	.L165:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2785              		.loc 1 106 5 view .LVU737
 2786              	.LBE30:
 2787              	.LBE31:
 2788              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2789              		.loc 1 399 32 discriminator 3 view .LVU738
 2790 0144 0510A0E1 		mov	r1, r5	@, _61
 2791 0148 020BA0E3 		mov	r0, #2048	@,
 2792              	.LVL206:
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2793              		.loc 1 399 32 discriminator 3 view .LVU739
 2794 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2795              	.LVL207:
 2796              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2797              		.loc 1 399 67 discriminator 3 view .LVU740
 2798 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2799              	.LVL208:
 2800              	@ armwave.c:399:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 399:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2801              		.loc 1 399 9 discriminator 3 view .LVU741
 2802 0154 080050E1 		cmp	r0, r8	@, yy
 2803 0158 B8FFFF8A 		bhi	.L169		@,
 2804              	.LVL209:
 2805              	.L172:
 2806              	@ armwave.c:398:     for(n = 0; n < 5000; n++) {
 398:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2807              		.loc 1 398 5 discriminator 2 view .LVU742
 2808 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2809 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2810 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2811 0168 AFFFFF1A 		bne	.L164		@,
 2812 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 402:armwave.c     ****         }
 403:armwave.c     ****     }
 404:armwave.c     **** 
 405:armwave.c     ****     /*
 406:armwave.c     ****     printf("Creating pixbuf\n");
 407:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 408:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 409:armwave.c     **** 
 410:armwave.c     ****     printf("Dumping pixbuf\n");
 411:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 412:armwave.c     ****     */
 413:armwave.c     **** 
 414:armwave.c     ****     return 0;
 2813              		.loc 1 414 5 is_stmt 1 view .LVU743
 2814              	@ armwave.c:415: }
 415:armwave.c     **** }...
 2815              		.loc 1 415 1 is_stmt 0 view .LVU744
 2816 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2817              		.cfi_def_cfa_offset 36
 2818              		@ sp needed	@
 2819 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2820              	.L184:
 2821              		.align	2
 2822              	.L183:
 2823 0178 00000000 		.word	g_armwave_state
 2824 017c 88130000 		.word	5000
 2825              		.cfi_endproc
 2826              	.LFE71:
 2828              		.global	mod_depth
 2829              		.global	overall_scale
 2830              		.comm	gamma_table,256,4
 2831              		.comm	test_wave_buffer,131072,4
 2832              		.comm	g_armwave_state,80,4
 2833              		.section	.rodata
 2834              		.align	2
 2835              		.set	.LANCHOR0,. + 0
 2838              	__PRETTY_FUNCTION__.16995:
 2839 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2839      6176655F 
 2839      73657475 
 2839      705F7265 
 2839      6E646572 
 2840 0015 000000   		.space	3
 2843              	__PRETTY_FUNCTION__.17018:
 2844 0018 61726D77 		.ascii	"armwave_fill_pixbuf\000"
 2844      6176655F 
 2844      66696C6C 
 2844      5F706978 
 2844      62756600 
 2847              	__PRETTY_FUNCTION__.17041:
 2848 002c 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2848      6176655F 
 2848      66696C6C 
 2848      5F706978 
 2848      62756632 
 2849 0041 000000   		.space	3
 2852              	overall_scale:
 2853 0044 01000000 		.word	1
 2854              		.bss
 2855              		.align	2
 2856              		.set	.LANCHOR1,. + 0
 2859              	mod_depth:
 2860 0000 00000000 		.space	4
 2861              		.section	.rodata.str1.4,"aMS",%progbits,1
 2862              		.align	2
 2863              	.LC0:
 2864 0000 61726D77 		.ascii	"armwave.c\000"
 2864      6176652E 
 2864      6300
 2865 000a 0000     		.space	2
 2866              	.LC1:
 2867 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2867      6D776176 
 2867      655F7374 
 2867      6174652E 
 2867      6368315F 
 2868 002f 00       		.space	1
 2869              	.LC2:
 2870 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2870      6D776176 
 2870      655F7374 
 2870      6174652E 
 2870      78636F6F 
 2871 0059 000000   		.space	3
 2872              	.LC3:
 2873 005c 73746172 		.ascii	"start_point < end_point\000"
 2873      745F706F 
 2873      696E7420 
 2873      3C20656E 
 2873      645F706F 
 2874              	.LC4:
 2875 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2875      6765745F 
 2875      68656967 
 2875      68742025 
 2875      20323536 
 2876 008f 00       		.space	1
 2877              	.LC5:
 2878 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2878      62756666 
 2878      65722021 
 2878      3D204E55 
 2878      4C4C00
 2879 00a3 00       		.space	1
 2880              	.LC6:
 2881 00a4 776200   		.ascii	"wb\000"
 2882 00a7 00       		.space	1
 2883              	.LC7:
 2884 00a8 50330A00 		.ascii	"P3\012\000"
 2885              	.LC8:
 2886 00ac 25642025 		.ascii	"%d %d\012\000"
 2886      640A00
 2887 00b3 00       		.space	1
 2888              	.LC9:
 2889 00b4 3235350A 		.ascii	"255\012\000"
 2889      00
 2890 00b9 000000   		.space	3
 2891              	.LC10:
 2892 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2892      25336420 
 2892      2533640A 
 2892      00
 2893 00c9 000000   		.space	3
 2894              	.LC11:
 2895 00cc 76302E30 		.ascii	"v0.0.1\000"
 2895      2E3100
 2896 00d3 00       		.space	1
 2897              	.LC12:
 2898 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 2898      61766520 
 2898      76657273 
 2898      696F6E3A 
 2898      2025730A 
 2899              		.text
 2900              	.Letext0:
 2901              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2902              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2903              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2904              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2905              		.file 6 "/usr/include/stdio.h"
 2906              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2907              		.file 8 "/usr/include/errno.h"
 2908              		.file 9 "/usr/include/unistd.h"
 2909              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2910              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2911              		.file 12 "/usr/local/include/python3.8/pyport.h"
 2912              		.file 13 "/usr/include/math.h"
 2913              		.file 14 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2914              		.file 15 "/usr/include/time.h"
 2915              		.file 16 "/usr/local/include/python3.8/pymem.h"
 2916              		.file 17 "/usr/local/include/python3.8/object.h"
 2917              		.file 18 "/usr/local/include/python3.8/cpython/object.h"
 2918              		.file 19 "/usr/local/include/python3.8/methodobject.h"
 2919              		.file 20 "/usr/local/include/python3.8/descrobject.h"
 2920              		.file 21 "/usr/local/include/python3.8/pyhash.h"
 2921              		.file 22 "/usr/local/include/python3.8/pydebug.h"
 2922              		.file 23 "/usr/local/include/python3.8/bytearrayobject.h"
 2923              		.file 24 "/usr/local/include/python3.8/bytesobject.h"
 2924              		.file 25 "/usr/local/include/python3.8/unicodeobject.h"
 2925              		.file 26 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2926              		.file 27 "/usr/local/include/python3.8/longintrepr.h"
 2927              		.file 28 "/usr/local/include/python3.8/longobject.h"
 2928              		.file 29 "/usr/local/include/python3.8/boolobject.h"
 2929              		.file 30 "/usr/local/include/python3.8/floatobject.h"
 2930              		.file 31 "/usr/local/include/python3.8/complexobject.h"
 2931              		.file 32 "/usr/local/include/python3.8/rangeobject.h"
 2932              		.file 33 "/usr/local/include/python3.8/memoryobject.h"
 2933              		.file 34 "/usr/local/include/python3.8/tupleobject.h"
 2934              		.file 35 "/usr/local/include/python3.8/listobject.h"
 2935              		.file 36 "/usr/local/include/python3.8/dictobject.h"
 2936              		.file 37 "/usr/local/include/python3.8/odictobject.h"
 2937              		.file 38 "/usr/local/include/python3.8/enumobject.h"
 2938              		.file 39 "/usr/local/include/python3.8/setobject.h"
 2939              		.file 40 "/usr/local/include/python3.8/moduleobject.h"
 2940              		.file 41 "/usr/local/include/python3.8/funcobject.h"
 2941              		.file 42 "/usr/local/include/python3.8/classobject.h"
 2942              		.file 43 "/usr/local/include/python3.8/fileobject.h"
 2943              		.file 44 "/usr/local/include/python3.8/cpython/fileobject.h"
 2944              		.file 45 "/usr/local/include/python3.8/pycapsule.h"
 2945              		.file 46 "/usr/local/include/python3.8/traceback.h"
 2946              		.file 47 "/usr/local/include/python3.8/sliceobject.h"
 2947              		.file 48 "/usr/local/include/python3.8/cellobject.h"
 2948              		.file 49 "/usr/local/include/python3.8/iterobject.h"
 2949              		.file 50 "/usr/local/include/python3.8/pystate.h"
 2950              		.file 51 "/usr/local/include/python3.8/cpython/pystate.h"
 2951              		.file 52 "/usr/local/include/python3.8/genobject.h"
 2952              		.file 53 "/usr/local/include/python3.8/weakrefobject.h"
 2953              		.file 54 "/usr/local/include/python3.8/structseq.h"
 2954              		.file 55 "/usr/local/include/python3.8/namespaceobject.h"
 2955              		.file 56 "/usr/local/include/python3.8/picklebufobject.h"
 2956              		.file 57 "/usr/local/include/python3.8/codecs.h"
 2957              		.file 58 "/usr/local/include/python3.8/pyerrors.h"
 2958              		.file 59 "/usr/local/include/python3.8/context.h"
 2959              		.file 60 "/usr/local/include/python3.8/modsupport.h"
 2960              		.file 61 "/usr/local/include/python3.8/code.h"
 2961              		.file 62 "/usr/local/include/python3.8/pythonrun.h"
 2962              		.file 63 "/usr/local/include/python3.8/ceval.h"
 2963              		.file 64 "/usr/local/include/python3.8/import.h"
 2964              		.file 65 "/usr/local/include/python3.8/bltinmodule.h"
 2965              		.file 66 "/usr/local/include/python3.8/pyctype.h"
 2966              		.file 67 "armwave.h"
 2967              		.file 68 "/usr/include/stdlib.h"
 2968              		.file 69 "/usr/local/include/python3.8/cpython/abstract.h"
 2969              		.file 70 "<built-in>"
 2970              		.file 71 "/usr/include/assert.h"
 2971              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
