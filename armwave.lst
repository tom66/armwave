   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 24D04DE2 		sub	sp, sp, #36	@,,
 249              		.cfi_def_cfa_offset 72
 250              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 251              		.loc 1 71 40 view .LVU32
 252 00a4 34819FE5 		ldr	r8, .L27	@ tmp198,
 253              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 254              		.loc 1 63 1 view .LVU33
 255 00a8 0140A0E1 		mov	r4, r1	@ height, height
 256 00ac 1C108DE5 		str	r1, [sp, #28]	@ height, %sfp
 257              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 258              		.loc 1 71 65 view .LVU34
 259 00b0 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 260              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 261              		.loc 1 71 130 view .LVU35
 262 00b4 401098E5 		ldr	r1, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 263              	.LVL7:
 264              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 265              		.loc 1 71 40 view .LVU36
 266 00b8 04A098E5 		ldr	r10, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 267              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 268              		.loc 1 71 65 view .LVU37
 269 00bc 920002E0 		mul	r2, r2, r0	@ tmp158, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 270              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 271              		.loc 1 73 5 view .LVU38
 272 00c0 0A30A0E1 		mov	r3, r10	@, _1
 273              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 274              		.loc 1 63 1 view .LVU39
 275 00c4 14008DE5 		str	r0, [sp, #20]	@ slice_y, %sfp
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2224A0E1 		lsr	r2, r2, #8	@ tmp160, tmp158,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 11008DE9 		stmib	sp, {r0, r4}	@,,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 130 view .LVU42
 284 00d0 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp160
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 286              		.loc 1 73 5 view .LVU43
 287 00d4 08019FE5 		ldr	r0, .L27+4	@,
 288              	.LVL8:
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00d8 02A08AE0 		add	r10, r10, r2	@ write_buffer_base, _1, _7
 292              	.LVL9:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00dc 00208DE5 		str	r2, [sp]	@ _7,
 295 00e0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 296 00e4 0A20A0E1 		mov	r2, r10	@, write_buffer_base
 297 00e8 FEFFFFEB 		bl	printf		@
 298              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 299              		.loc 1 78 5 view .LVU46
 300              		.loc 1 78 5 is_stmt 0 view .LVU47
 301 00ec 383098E5 		ldr	r3, [r8, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 302 00f0 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 303 00f4 370000DA 		ble	.L11		@,
 304 00f8 000054E3 		cmp	r4, #0	@ height,
 305 00fc 3500000A 		beq	.L11		@,
 306              	@ armwave.c:103:                 printf("write_buff=0x%08x value=%d\n", write_buffer, value);
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stride
  85:armwave.c     **** 
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     **** 
 103:armwave.c     ****                 printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 307              		.loc 1 103 17 view .LVU48
 308 0100 E0909FE5 		ldr	r9, .L27+8	@ tmp199,
 309              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 310              		.loc 1 78 11 view .LVU49
 311 0104 0030A0E3 		mov	r3, #0	@ w,
 312 0108 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 313              	.LVL11:
 314              	.L17:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 315              		.loc 1 79 9 is_stmt 1 view .LVU50
 316              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 317              		.loc 1 79 81 is_stmt 0 view .LVU51
 318 010c 342098E5 		ldr	r2, [r8, #52]	@ pretmp_92, g_armwave_state.wave_stride
 319              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 320              		.loc 1 79 59 view .LVU52
 321 0110 10309DE5 		ldr	r3, [sp, #16]	@ w, %sfp
 322 0114 14109DE5 		ldr	r1, [sp, #20]	@ slice_y, %sfp
 323              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 324              		.loc 1 79 19 view .LVU53
 325 0118 14B098E5 		ldr	fp, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 326              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 327              		.loc 1 79 59 view .LVU54
 328 011c 931223E0 		mla	r3, r3, r2, r1	@ tmp171, w, pretmp_92, slice_y
 329              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stride
 330              		.loc 1 83 16 view .LVU55
 331 0120 0070A0E3 		mov	r7, #0	@ yy,
 332              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 333              		.loc 1 79 19 view .LVU56
 334 0124 03308BE0 		add	r3, fp, r3	@ wave_base, g_armwave_state.wave_buffer, tmp171
 335 0128 18308DE5 		str	r3, [sp, #24]	@ wave_base, %sfp
 336              	.LVL12:
  83:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stride
 337              		.loc 1 83 9 is_stmt 1 view .LVU57
 338              	.L18:
  84:armwave.c     **** 
 339              		.loc 1 84 13 view .LVU58
 340 012c 18409DE5 		ldr	r4, [sp, #24]	@ wave_base, %sfp
 341 0130 04708DE5 		str	r7, [sp, #4]	@ yy,
 342 0134 00408DE5 		str	r4, [sp]	@ wave_base,
 343 0138 14309DE5 		ldr	r3, [sp, #20]	@, %sfp
 344 013c 10109DE5 		ldr	r1, [sp, #16]	@, %sfp
 345 0140 A4009FE5 		ldr	r0, .L27+12	@,
 346 0144 FEFFFFEB 		bl	printf		@
 347              	.LVL13:
  86:armwave.c     **** 
 348              		.loc 1 86 13 view .LVU59
 349              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 350              		.loc 1 86 18 is_stmt 0 view .LVU60
 351 0148 0750A0E1 		mov	r5, r7	@ ivtmp.40, yy
 352 014c 076094E7 		ldr	r6, [r4, r7]	@ word, MEM[base: wave_base_53, index: _109, offset: 0B]
 353              	.LVL14:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 354              		.loc 1 88 13 is_stmt 1 view .LVU61
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 355              		.loc 1 88 13 is_stmt 0 view .LVU62
 356 0150 047087E2 		add	r7, r7, #4	@ yy, ivtmp.40,
 357              	.LVL15:
 358              	.L15:
  90:armwave.c     ****                 
 359              		.loc 1 90 17 is_stmt 1 view .LVU63
  93:armwave.c     ****                     continue;
 360              		.loc 1 93 17 view .LVU64
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 361              		.loc 1 100 17 view .LVU65
 362              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 363              		.loc 1 93 20 is_stmt 0 view .LVU66
 364 0154 FFB016E2 		ands	fp, r6, #255	@ scale_value, word,
 365              	@ armwave.c:103:                 printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 366              		.loc 1 103 17 view .LVU67
 367 0158 0020A0E3 		mov	r2, #0	@,
 368              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 369              		.loc 1 93 20 view .LVU68
 370 015c 0130A003 		moveq	r3, #1	@ tmp175,
 371 0160 0230A011 		movne	r3, r2	@ tmp175,
 372              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 373              		.loc 1 93 19 view .LVU69
 374 0164 FF005BE3 		cmp	fp, #255	@ scale_value,
 375 0168 01308303 		orreq	r3, r3, #1	@,, tmp180, tmp175
 376 016c 020053E1 		cmp	r3, r2	@ tmp180,
 377              	@ armwave.c:103:                 printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 378              		.loc 1 103 17 view .LVU70
 379 0170 0900A0E1 		mov	r0, r9	@, tmp199
 380              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 381              		.loc 1 93 19 view .LVU71
 382 0174 0A00001A 		bne	.L14		@,
 383              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 384              		.loc 1 101 34 view .LVU72
 385 0178 244098E5 		ldr	r4, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 386              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 387              		.loc 1 101 99 view .LVU73
 388 017c 403098E5 		ldr	r3, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 389              	@ armwave.c:106:                 word >>= 8;
 104:armwave.c     **** 
 105:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 390              		.loc 1 106 22 view .LVU74
 391 0180 2664A0E1 		lsr	r6, r6, #8	@ word, word,
 392              	.LVL16:
 393              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 394              		.loc 1 101 34 view .LVU75
 395 0184 940504E0 		mul	r4, r4, r5	@ tmp182, g_armwave_state.cmp_x_bitdepth_scale, ivtmp.40
 396              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 397              		.loc 1 101 74 view .LVU76
 398 0188 2444A0E1 		lsr	r4, r4, #8	@ tmp184, tmp182,
 399              	@ armwave.c:100:                 write_buffer = write_buffer_base + \
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 400              		.loc 1 100 30 view .LVU77
 401 018c 93A424E0 		mla	r4, r3, r4, r10	@ write_buffer, g_armwave_state.bitdepth_height, tmp184, write_buffer_base
 402              	.LVL17:
 103:armwave.c     **** 
 403              		.loc 1 103 17 is_stmt 1 view .LVU78
 404 0190 0410A0E1 		mov	r1, r4	@, write_buffer
 405 0194 FEFFFFEB 		bl	printf		@
 406              	.LVL18:
 105:armwave.c     ****                 word >>= 8;
 407              		.loc 1 105 17 view .LVU79
 408              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 409              		.loc 1 105 47 is_stmt 0 view .LVU80
 410 0198 0B30D4E7 		ldrb	r3, [r4, fp]	@ zero_extendqisi2	@ *_32, *_32
 411 019c 013083E2 		add	r3, r3, #1	@ tmp191, *_32,
 412 01a0 0B30C4E7 		strb	r3, [r4, fp]	@ tmp191, *_32
 413              		.loc 1 106 17 is_stmt 1 view .LVU81
 414              	.LVL19:
 415              	.L14:
 416              		.loc 1 106 17 is_stmt 0 view .LVU82
 417 01a4 015085E2 		add	r5, r5, #1	@ ivtmp.40, ivtmp.40,
 418              	@ armwave.c:88:             for(ys = 0; ys < 4; ys++) {
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 419              		.loc 1 88 13 discriminator 2 view .LVU83
 420 01a8 050057E1 		cmp	r7, r5	@ yy, ivtmp.40
 421 01ac E8FFFF1A 		bne	.L15		@,
 422              	.LVL20:
 423              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stride
 424              		.loc 1 83 9 discriminator 2 view .LVU84
 425 01b0 1C309DE5 		ldr	r3, [sp, #28]	@ height, %sfp
 426 01b4 070053E1 		cmp	r3, r7	@ height, yy
  83:armwave.c     ****             printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stride
 427              		.loc 1 83 9 discriminator 2 view .LVU85
 428 01b8 34209885 		ldrhi	r2, [r8, #52]	@ pretmp_92, g_armwave_state.wave_stride
 429 01bc DAFFFF8A 		bhi	.L18		@
 430              	.L26:
 431              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 432              		.loc 1 78 44 view .LVU86
 433 01c0 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 434              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 435              		.loc 1 78 5 view .LVU87
 436 01c4 383098E5 		ldr	r3, [r8, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 437              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 438              		.loc 1 78 44 view .LVU88
 439 01c8 012082E2 		add	r2, r2, #1	@ w, w,
 440              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 441              		.loc 1 78 5 view .LVU89
 442 01cc 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 443              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 444              		.loc 1 78 44 view .LVU90
 445 01d0 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 446              	.LVL21:
 447              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 448              		.loc 1 78 5 view .LVU91
 449 01d4 CCFFFFBA 		blt	.L17		@,
 450              	.LVL22:
 451              	.L11:
 452              	@ armwave.c:110: }
 107:armwave.c     ****             }
 108:armwave.c     ****         }
 109:armwave.c     ****     }
 110:armwave.c     **** }
 453              		.loc 1 110 1 view .LVU92
 454 01d8 24D08DE2 		add	sp, sp, #36	@,,
 455              		.cfi_def_cfa_offset 36
 456              		@ sp needed	@
 457 01dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 458              	.LVL23:
 459              	.L28:
 460              		.loc 1 110 1 view .LVU93
 461              		.align	2
 462              	.L27:
 463 01e0 00000000 		.word	g_armwave_state
 464 01e4 20000000 		.word	.LC2
 465 01e8 8C000000 		.word	.LC4
 466 01ec 5C000000 		.word	.LC3
 467              		.cfi_endproc
 468              	.LFE59:
 470              		.align	2
 471              		.global	armwave_fill_pixbuf_scaled
 472              		.syntax unified
 473              		.arm
 474              		.fpu vfp
 476              	armwave_fill_pixbuf_scaled:
 477              	.LVL24:
 478              	.LFB60:
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 115:armwave.c     ****  */
 116:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 117:armwave.c     **** {
 118:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 119:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 120:armwave.c     ****     uint8_t r, g, b, value;
 121:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 122:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 123:armwave.c     ****     uint32_t offset;
 124:armwave.c     **** 
 125:armwave.c     ****     assert(out_buffer != NULL);
 126:armwave.c     **** 
 127:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 128:armwave.c     **** 
 129:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 130:armwave.c     **** 
 131:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 132:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 133:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 134:armwave.c     ****         // most normal waveforms.
 135:armwave.c     ****         wave_word = *base_32ptr++;
 136:armwave.c     **** 
 137:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 138:armwave.c     ****             for(i = 0; i < 4; i++) {
 139:armwave.c     ****                 value = wave_word & 0xff;
 140:armwave.c     ****                 wave_word >>= 8;
 141:armwave.c     **** 
 142:armwave.c     ****                 if(value != 0) {
 143:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 144:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 145:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 146:armwave.c     **** 
 147:armwave.c     ****                     r = MIN(rr, 255);
 148:armwave.c     ****                     g = MIN(gg, 255);
 149:armwave.c     ****                     b = MIN(bb, 255);
 150:armwave.c     **** 
 151:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 152:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 153:armwave.c     **** 
 154:armwave.c     ****                     // Is there a better way?
 155:armwave.c     ****                     nsub = n + i;
 156:armwave.c     ****                     xx = nsub & 0xff;
 157:armwave.c     ****                     yy = nsub >> 8;
 158:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 159:armwave.c     ****                     *(out_buffer_base + offset) = word;
 160:armwave.c     ****                 }
 161:armwave.c     ****             }
 162:armwave.c     ****         } 
 163:armwave.c     ****     }
 164:armwave.c     **** }
 165:armwave.c     **** #endif
 166:armwave.c     **** 
 167:armwave.c     **** /*
 168:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 169:armwave.c     ****  * Rows are repeated as necessary.
 170:armwave.c     ****  */
 171:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 172:armwave.c     **** {
 479              		.loc 1 172 1 is_stmt 1 view -0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 8
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 483              		.loc 1 173 5 view .LVU95
 174:armwave.c     ****     // uint32_t ysub;
 175:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 484              		.loc 1 175 5 view .LVU96
 176:armwave.c     ****     uint8_t r, g, b, value; 
 485              		.loc 1 176 5 view .LVU97
 177:armwave.c     ****     // uint8_t row;
 178:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 486              		.loc 1 178 5 view .LVU98
 487              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 488              		.loc 1 172 1 is_stmt 0 view .LVU99
 489 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 490              		.cfi_def_cfa_offset 36
 491              		.cfi_offset 4, -36
 492              		.cfi_offset 5, -32
 493              		.cfi_offset 6, -28
 494              		.cfi_offset 7, -24
 495              		.cfi_offset 8, -20
 496              		.cfi_offset 9, -16
 497              		.cfi_offset 10, -12
 498              		.cfi_offset 11, -8
 499              		.cfi_offset 14, -4
 500              	@ armwave.c:182:     assert(out_buffer != NULL);
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 180:armwave.c     ****     uint32_t offset;
 181:armwave.c     **** 
 182:armwave.c     ****     assert(out_buffer != NULL);
 501              		.loc 1 182 5 view .LVU100
 502 01f4 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 503              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 504              		.loc 1 178 15 view .LVU101
 505 01f8 5C519FE5 		ldr	r5, .L51	@ tmp221,
 506              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 507              		.loc 1 172 1 view .LVU102
 508 01fc 0CD04DE2 		sub	sp, sp, #12	@,,
 509              		.cfi_def_cfa_offset 48
 510              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 511              		.loc 1 178 15 view .LVU103
 512 0200 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 513              	.LVL25:
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 514              		.loc 1 179 5 is_stmt 1 view .LVU104
 180:armwave.c     **** 
 515              		.loc 1 180 5 view .LVU105
 516              		.loc 1 182 5 view .LVU106
 517 0204 4F00000A 		beq	.L48		@,
 183:armwave.c     **** 
 184:armwave.c     ****     // we don't really want to be doing this
 185:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 518              		.loc 1 185 5 view .LVU107
 519              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 520              		.loc 1 185 59 is_stmt 0 view .LVU108
 521 0208 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 522 020c 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 523              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 524              		.loc 1 185 5 view .LVU109
 525 0210 0110A0E3 		mov	r1, #1	@,
 526              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 527              		.loc 1 185 59 view .LVU110
 528 0214 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 529              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 530              		.loc 1 185 5 view .LVU111
 531 0218 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 532 021c FEFFFFEB 		bl	memset		@
 533              	.LVL26:
 186:armwave.c     **** 
 187:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 534              		.loc 1 187 5 is_stmt 1 view .LVU112
 535              	@ armwave.c:187:     npix = g_armwave_state.target_width * 256; 
 536              		.loc 1 187 10 is_stmt 0 view .LVU113
 537 0220 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 538 0224 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 539              	.LVL27:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 189:armwave.c     **** 
 190:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 540              		.loc 1 190 5 is_stmt 1 view .LVU114
 541              		.loc 1 190 5 is_stmt 0 view .LVU115
 542 0228 000058E3 		cmp	r8, #0	@ npix,
 543 022c 0C0000DA 		ble	.L29		@,
 544              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 192:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 193:armwave.c     ****         // most normal waveforms.
 194:armwave.c     ****         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 196:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 200:armwave.c     **** 
 201:armwave.c     ****                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 545              		.loc 1 203 52 view .LVU116
 546 0230 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 547              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 548              		.loc 1 202 52 view .LVU117
 549 0234 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 550              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 206:armwave.c     ****                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 209:armwave.c     **** 
 210:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 211:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 213:armwave.c     ****                     // Do line scaling as necessary.
 214:armwave.c     ****                     /*
 215:armwave.c     ****                     nsub = n + w;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 217:armwave.c     ****                     xx = (nsub >> 8);
 218:armwave.c     **** 
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 551              		.loc 1 226 57 view .LVU118
 552 0238 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 553              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 554              		.loc 1 203 52 view .LVU119
 555 023c 00308DE5 		str	r3, [sp]	@ _15, %sfp
 556              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 557              		.loc 1 204 52 view .LVU120
 558 0240 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 559              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 560              		.loc 1 190 11 view .LVU121
 561 0244 0010A0E3 		mov	r1, #0	@ n,
 562              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 563              		.loc 1 204 52 view .LVU122
 564 0248 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 565              	.LVL28:
 566              	.L36:
 194:armwave.c     **** 
 567              		.loc 1 194 9 is_stmt 1 view .LVU123
 568              	@ armwave.c:194:         wave_word = *base_32ptr++;
 194:armwave.c     **** 
 569              		.loc 1 194 19 is_stmt 0 view .LVU124
 570 024c 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 571              	.LVL29:
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 572              		.loc 1 196 9 is_stmt 1 view .LVU125
 573              	@ armwave.c:196:         if(COND_UNLIKELY(wave_word != 0)) {
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 574              		.loc 1 196 11 is_stmt 0 view .LVU126
 575 0250 000053E3 		cmp	r3, #0	@ wave_word,
 576 0254 0400001A 		bne	.L49		@,
 577              	.L32:
 578              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 579              		.loc 1 190 28 view .LVU127
 580 0258 041081E2 		add	r1, r1, #4	@ n, n,
 581              	.LVL30:
 582              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 583              		.loc 1 190 5 view .LVU128
 584 025c 010058E1 		cmp	r8, r1	@ npix, n
 585 0260 F9FFFFCA 		bgt	.L36		@,
 586              	.LVL31:
 587              	.L29:
 588              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 589              		.loc 1 238 1 view .LVU129
 590 0264 0CD08DE2 		add	sp, sp, #12	@,,
 591              		.cfi_remember_state
 592              		.cfi_def_cfa_offset 36
 593              		@ sp needed	@
 594 0268 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 595              	.LVL32:
 596              	.L49:
 597              		.cfi_restore_state
 598              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 599              		.loc 1 201 19 view .LVU130
 600 026c FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 601              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 602              		.loc 1 197 19 view .LVU131
 603 0270 0070A0E3 		mov	r7, #0	@ w,
 604              	.LVL33:
 198:armwave.c     ****                 wave_word >>= 8;
 605              		.loc 1 198 17 is_stmt 1 view .LVU132
 199:armwave.c     **** 
 606              		.loc 1 199 17 view .LVU133
 607              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 608              		.loc 1 199 27 is_stmt 0 view .LVU134
 609 0274 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 610              	.LVL34:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 611              		.loc 1 201 17 is_stmt 1 view .LVU135
 612              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 613              		.loc 1 201 19 is_stmt 0 view .LVU136
 614 0278 0500001A 		bne	.L50		@,
 615              	.L33:
 616              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 617              		.loc 1 197 32 view .LVU137
 618 027c 017087E2 		add	r7, r7, #1	@ w, w,
 619              	.LVL35:
 620              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 621              		.loc 1 197 13 view .LVU138
 622 0280 040057E3 		cmp	r7, #4	@ w,
 623 0284 F3FFFF0A 		beq	.L32		@,
 198:armwave.c     ****                 wave_word >>= 8;
 624              		.loc 1 198 17 is_stmt 1 view .LVU139
 625              	.LVL36:
 199:armwave.c     **** 
 626              		.loc 1 199 17 view .LVU140
 627              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 628              		.loc 1 201 19 is_stmt 0 view .LVU141
 629 0288 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 630              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 631              		.loc 1 199 27 view .LVU142
 632 028c 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 633              	.LVL37:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 634              		.loc 1 201 17 is_stmt 1 view .LVU143
 635              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 636              		.loc 1 201 19 is_stmt 0 view .LVU144
 637 0290 F9FFFF0A 		beq	.L33		@,
 638              	.L50:
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 639              		.loc 1 202 21 is_stmt 1 view .LVU145
 640              	.LVL38:
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 641              		.loc 1 203 21 view .LVU146
 204:armwave.c     **** 
 642              		.loc 1 204 21 view .LVU147
 206:armwave.c     ****                     g = MIN(gg, 255);
 643              		.loc 1 206 21 view .LVU148
 207:armwave.c     ****                     b = MIN(bb, 255);
 644              		.loc 1 207 21 view .LVU149
 208:armwave.c     **** 
 645              		.loc 1 208 21 view .LVU150
 211:armwave.c     **** 
 646              		.loc 1 211 21 view .LVU151
 647              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 648              		.loc 1 204 55 is_stmt 0 view .LVU152
 649 0294 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 650 0298 07E081E0 		add	lr, r1, r7	@ _126, n, w
 651 029c 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 652              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 653              		.loc 1 226 32 view .LVU153
 654 02a0 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 655              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 656              		.loc 1 227 41 view .LVU154
 657 02a4 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 658              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 659              		.loc 1 226 40 view .LVU155
 660 02a8 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 661              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 662              		.loc 1 227 41 view .LVU156
 663 02ac 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 664              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 665              		.loc 1 203 55 view .LVU157
 666 02b0 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 667              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 668              		.loc 1 204 24 view .LVU158
 669 02b4 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 670              	.LVL39:
 671              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 672              		.loc 1 226 40 view .LVU159
 673 02b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 674              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 675              		.loc 1 227 46 view .LVU160
 676 02bc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 677              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 678              		.loc 1 203 55 view .LVU161
 679 02c0 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 680              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 681              		.loc 1 202 55 view .LVU162
 682 02c4 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 683              	.LVL40:
 684              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 685              		.loc 1 208 25 view .LVU163
 686 02c8 FF005AE3 		cmp	r10, #255	@ bb,
 687              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 688              		.loc 1 203 24 view .LVU164
 689 02cc 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 690              	.LVL41:
 691              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 692              		.loc 1 226 40 view .LVU165
 693 02d0 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 694              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 695              		.loc 1 227 46 view .LVU166
 696 02d4 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 697              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 698              		.loc 1 202 24 view .LVU167
 699 02d8 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 700              	.LVL42:
 701              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 702              		.loc 1 208 25 view .LVU168
 703 02dc FFA0A0A3 		movge	r10, #255	@ bb,
 704              	.LVL43:
 705              	@ armwave.c:207:                     g = MIN(gg, 255);
 207:armwave.c     ****                     b = MIN(bb, 255);
 706              		.loc 1 207 25 view .LVU169
 707 02e0 FF005CE3 		cmp	ip, #255	@ gg,
 708 02e4 FFC0A0A3 		movge	ip, #255	@ gg,
 709              	.LVL44:
 710              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 711              		.loc 1 206 25 view .LVU170
 712 02e8 FF0050E3 		cmp	r0, #255	@ rr,
 713              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 714              		.loc 1 211 56 view .LVU171
 715 02ec 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 716              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 717              		.loc 1 226 24 view .LVU172
 718 02f0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 719              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 720              		.loc 1 206 25 view .LVU173
 721 02f4 FF00A0A3 		movge	r0, #255	@ rr,
 722              	.LVL45:
 723              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 724              		.loc 1 211 44 view .LVU174
 725 02f8 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 726 02fc FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 727              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 728              		.loc 1 211 56 view .LVU175
 729 0300 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 730              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 731              		.loc 1 211 51 view .LVU176
 732 0304 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 733              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 734              		.loc 1 211 62 view .LVU177
 735 0308 7000EFE6 		uxtb	r0, r0	@ rr, rr
 736 030c 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 737              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 738              		.loc 1 226 24 view .LVU178
 739 0310 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 740              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 741              		.loc 1 227 24 view .LVU179
 742 0314 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 743              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 744              		.loc 1 211 26 view .LVU180
 745 0318 FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 746              	.LVL46:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 747              		.loc 1 225 21 is_stmt 1 view .LVU181
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 748              		.loc 1 226 21 view .LVU182
 227:armwave.c     ****                     xx = (nsub >> 8);
 749              		.loc 1 227 21 view .LVU183
 750              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 751              		.loc 1 228 32 is_stmt 0 view .LVU184
 752 031c 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 753              	.LVL47:
 754              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 755              		.loc 1 227 24 view .LVU185
 756 0320 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 757              	.LVL48:
 228:armwave.c     **** 
 758              		.loc 1 228 21 is_stmt 1 view .LVU186
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 759              		.loc 1 230 21 view .LVU187
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 760              		.loc 1 230 21 is_stmt 0 view .LVU188
 761 0324 090052E1 		cmp	r2, r9	@ yy, ye
 762 0328 D3FFFF2A 		bcs	.L33		@,
 763              	.LVL49:
 764              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 765              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU189
 232:armwave.c     ****                     }
 766              		.loc 1 232 25 discriminator 3 view .LVU190
 767              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 768              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU191
 769 032c 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 770              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 771              		.loc 1 232 43 discriminator 3 view .LVU192
 772 0330 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 773              	.LVL50:
 774              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 775              		.loc 1 230 42 discriminator 3 view .LVU193
 776 0334 012082E2 		add	r2, r2, #1	@ yy, yy,
 777              	.LVL51:
 778              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 779              		.loc 1 230 21 discriminator 3 view .LVU194
 780 0338 020059E1 		cmp	r9, r2	@ ye, yy
 781              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 782              		.loc 1 232 53 discriminator 3 view .LVU195
 783 033c 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 784              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 785              		.loc 1 230 21 discriminator 3 view .LVU196
 786 0340 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 787              		.loc 1 230 21 discriminator 3 view .LVU197
 788 0344 CCFFFFEA 		b	.L33		@
 789              	.LVL52:
 790              	.L48:
 182:armwave.c     **** 
 791              		.loc 1 182 5 is_stmt 1 discriminator 1 view .LVU198
 792 0348 10309FE5 		ldr	r3, .L51+4	@,
 793 034c B620A0E3 		mov	r2, #182	@,
 794 0350 0C109FE5 		ldr	r1, .L51+8	@,
 795 0354 0C009FE5 		ldr	r0, .L51+12	@,
 796              	.LVL53:
 182:armwave.c     **** 
 797              		.loc 1 182 5 is_stmt 0 discriminator 1 view .LVU199
 798 0358 FEFFFFEB 		bl	__assert_fail		@
 799              	.LVL54:
 800              	.L52:
 801              		.align	2
 802              	.L51:
 803 035c 00000000 		.word	g_armwave_state
 804 0360 00000000 		.word	.LANCHOR0
 805 0364 A8000000 		.word	.LC5
 806 0368 B4000000 		.word	.LC6
 807              		.cfi_endproc
 808              	.LFE60:
 810              		.global	__aeabi_idiv
 811              		.align	2
 812              		.global	armwave_generate
 813              		.syntax unified
 814              		.arm
 815              		.fpu vfp
 817              	armwave_generate:
 818              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 819              		.loc 1 244 1 is_stmt 1 view -0
 820              		.cfi_startproc
 821              		@ args = 0, pretend = 0, frame = 0
 822              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 823              		.loc 1 245 5 view .LVU201
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 824              		.loc 1 246 5 view .LVU202
 825              	.LVL55:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 826              		.loc 1 248 5 view .LVU203
 827              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 828              		.loc 1 244 1 is_stmt 0 view .LVU204
 829 036c 70402DE9 		push	{r4, r5, r6, lr}	@
 830              		.cfi_def_cfa_offset 16
 831              		.cfi_offset 4, -16
 832              		.cfi_offset 5, -12
 833              		.cfi_offset 6, -8
 834              		.cfi_offset 14, -4
 835              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 836              		.loc 1 248 5 view .LVU205
 837 0370 0010A0E3 		mov	r1, #0	@,
 838              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 839              		.loc 1 248 58 view .LVU206
 840 0374 50509FE5 		ldr	r5, .L61	@ tmp146,
 841              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 842              		.loc 1 248 5 view .LVU207
 843 0378 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 844 037c 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 845 0380 FEFFFFEB 		bl	memset		@
 846              	.LVL56:
 249:armwave.c     **** 
 250:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 847              		.loc 1 250 5 is_stmt 1 view .LVU208
 848              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 849              		.loc 1 250 68 is_stmt 0 view .LVU209
 850 0384 446095E5 		ldr	r6, [r5, #68]	@ _9, g_armwave_state.slice_height
 851              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 852              		.loc 1 250 51 view .LVU210
 853 0388 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 854 038c 0610A0E1 		mov	r1, r6	@, _9
 855 0390 FEFFFFEB 		bl	__aeabi_idiv		@
 856              	.LVL57:
 857              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 858              		.loc 1 250 5 view .LVU211
 859 0394 000050E3 		cmp	r0, #0	@,
 860 0398 7080BD08 		popeq	{r4, r5, r6, pc}	@
 861              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 862              		.loc 1 250 12 view .LVU212
 863 039c 0040A0E3 		mov	r4, #0	@ yy,
 864              	.LVL58:
 865              	.L55:
 251:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 866              		.loc 1 254 9 is_stmt 1 discriminator 3 view .LVU213
 867 03a0 940600E0 		mul	r0, r4, r6	@, yy, _9
 868 03a4 481095E5 		ldr	r1, [r5, #72]	@, g_armwave_state.slice_record_height
 869 03a8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 870              	.LVL59:
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 871              		.loc 1 255 9 discriminator 3 view .LVU214
 256:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 872              		.loc 1 256 9 discriminator 3 view .LVU215
 873              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 874              		.loc 1 250 68 is_stmt 0 discriminator 3 view .LVU216
 875 03ac 446095E5 		ldr	r6, [r5, #68]	@ _9, g_armwave_state.slice_height
 876              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 877              		.loc 1 250 51 discriminator 3 view .LVU217
 878 03b0 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 879 03b4 0610A0E1 		mov	r1, r6	@, _9
 880 03b8 FEFFFFEB 		bl	__aeabi_idiv		@
 881              	.LVL60:
 882              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 883              		.loc 1 250 86 discriminator 3 view .LVU218
 884 03bc 014084E2 		add	r4, r4, #1	@ yy, yy,
 885              	.LVL61:
 886              	@ armwave.c:250:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 250:armwave.c     ****     //for(yy = 0; yy < 1; yy++) {
 887              		.loc 1 250 5 discriminator 3 view .LVU219
 888 03c0 040050E1 		cmp	r0, r4	@, yy
 889 03c4 F5FFFF8A 		bhi	.L55		@,
 890 03c8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 891              	.L62:
 892              		.align	2
 893              	.L61:
 894 03cc 00000000 		.word	g_armwave_state
 895              		.cfi_endproc
 896              	.LFE61:
 898              		.align	2
 899              		.global	armwave_setup_render
 900              		.syntax unified
 901              		.arm
 902              		.fpu vfp
 904              	armwave_setup_render:
 905              	.LVL62:
 906              	.LFB62:
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 907              		.loc 1 266 1 is_stmt 1 view -0
 908              		.cfi_startproc
 909              		@ args = 12, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 911              		.loc 1 267 5 view .LVU221
 268:armwave.c     ****     float points_per_pixel;
 912              		.loc 1 268 5 view .LVU222
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 913              		.loc 1 270 5 view .LVU223
 914              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 915              		.loc 1 266 1 is_stmt 0 view .LVU224
 916 03d0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 917              		.cfi_def_cfa_offset 28
 918              		.cfi_offset 4, -28
 919              		.cfi_offset 5, -24
 920              		.cfi_offset 6, -20
 921              		.cfi_offset 7, -16
 922              		.cfi_offset 8, -12
 923              		.cfi_offset 9, -8
 924              		.cfi_offset 14, -4
 925 03d4 028B2DED 		vpush.64	{d8}	@
 926              		.cfi_def_cfa_offset 36
 927              		.cfi_offset 80, -36
 928              		.cfi_offset 81, -32
 929 03d8 0040A0E1 		mov	r4, r0	@ start_point, start_point
 930 03dc 0150A0E1 		mov	r5, r1	@ end_point, end_point
 931 03e0 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 932 03e4 14D04DE2 		sub	sp, sp, #20	@,,
 933              		.cfi_def_cfa_offset 56
 934              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 935              		.loc 1 266 1 view .LVU225
 936 03e8 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 937 03ec D863CDE1 		ldrd	r6, [sp, #56]	@,,
 938 03f0 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 939              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 940              		.loc 1 270 5 view .LVU226
 941 03f4 00308DE5 		str	r3, [sp]	@ wave_stride,
 942 03f8 F460CDE1 		strd	r6, [sp, #4]	@,,
 943 03fc 0230A0E1 		mov	r3, r2	@, waves_max
 944              	.LVL63:
 945              		.loc 1 270 5 view .LVU227
 946 0400 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 947 0404 0120A0E1 		mov	r2, r1	@, end_point
 948              	.LVL64:
 949              		.loc 1 270 5 view .LVU228
 950 0408 0010A0E1 		mov	r1, r0	@, start_point
 951              	.LVL65:
 952              		.loc 1 270 5 view .LVU229
 953 040c D0019FE5 		ldr	r0, .L77+12	@,
 954              	.LVL66:
 955              		.loc 1 270 5 view .LVU230
 956 0410 FEFFFFEB 		bl	printf		@
 957              	.LVL67:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 958              		.loc 1 273 5 is_stmt 1 view .LVU231
 959 0414 050054E1 		cmp	r4, r5	@ start_point, end_point
 960 0418 5F00002A 		bcs	.L74		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     **** 
 279:armwave.c     ****     if(target_height == 256) {
 280:armwave.c     ****         g_armwave_state.row_shift = 8;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 282:armwave.c     ****     } else if(target_height == 512) {
 283:armwave.c     ****         g_armwave_state.row_shift = 9;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 285:armwave.c     ****     } else if(target_height == 1024) {
 286:armwave.c     ****         g_armwave_state.row_shift = 10;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 288:armwave.c     ****     } else if(target_height == 2048) {
 289:armwave.c     ****         g_armwave_state.row_shift = 11;
 290:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 291:armwave.c     ****     }
 292:armwave.c     ****     */
 293:armwave.c     **** 
 294:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 295:armwave.c     ****     g_armwave_state.xstride = target_height;
 961              		.loc 1 295 5 view .LVU232
 962              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 963              		.loc 1 306 45 is_stmt 0 view .LVU233
 964 041c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 965              	.LVL68:
 966              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 967              		.loc 1 296 49 view .LVU234
 968 0420 6C6A9FED 		vldr.32	s12, .L77	@ tmp175,
 969              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 308:armwave.c     ****     // Calculate compound scaler
 309:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 970              		.loc 1 310 48 view .LVU235
 971 0424 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 972              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 973              		.loc 1 310 79 view .LVU236
 974 0428 6B6ADFED 		vldr.32	s13, .L77+4	@ tmp199,
 975              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 976              		.loc 1 303 90 view .LVU237
 977 042c 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 978              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 979              		.loc 1 295 29 view .LVU238
 980 0430 B0419FE5 		ldr	r4, .L77+16	@ tmp242,
 981              	.LVL69:
 982              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 983              		.loc 1 310 48 view .LVU239
 984 0434 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 985              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 986              		.loc 1 296 49 view .LVU240
 987 0438 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 988              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 989              		.loc 1 301 42 view .LVU241
 990 043c 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 991              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 992              		.loc 1 303 74 view .LVU242
 993 0440 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 994              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 995              		.loc 1 296 49 view .LVU243
 996 0444 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 997              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 998              		.loc 1 310 48 view .LVU244
 999 0448 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1000              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1001              		.loc 1 303 74 view .LVU245
 1002 044c 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1003              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1004              		.loc 1 302 37 view .LVU246
 1005 0450 012CA0E3 		mov	r2, #256	@ tmp185,
 1006              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1007              		.loc 1 301 26 view .LVU247
 1008 0454 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1009              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1010              		.loc 1 310 48 view .LVU248
 1011 0458 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1012              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1013              		.loc 1 312 5 view .LVU249
 1014 045c 0310A0E1 		mov	r1, r3	@, tmp190
 1015              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1016              		.loc 1 302 37 view .LVU250
 1017 0460 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1018              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1019              		.loc 1 303 34 view .LVU251
 1020 0464 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1021              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1022              		.loc 1 312 5 view .LVU252
 1023 0468 7C019FE5 		ldr	r0, .L77+20	@,
 1024              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1025              		.loc 1 295 29 view .LVU253
 1026 046c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1027              		.loc 1 296 5 is_stmt 1 view .LVU254
 1028              	@ armwave.c:298:     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1029              		.loc 1 298 33 is_stmt 0 view .LVU255
 1030 0470 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1031              	@ armwave.c:299:     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1032              		.loc 1 299 31 view .LVU256
 1033 0474 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1034              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1035              		.loc 1 310 48 view .LVU257
 1036 0478 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1037              	@ armwave.c:300:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1038              		.loc 1 300 27 view .LVU258
 1039 047c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1040              	@ armwave.c:305:     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1041              		.loc 1 305 35 view .LVU259
 1042 0480 F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1043              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 306:armwave.c     **** 
 1044              		.loc 1 306 33 view .LVU260
 1045 0484 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1046              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1047              		.loc 1 296 49 view .LVU261
 1048 0488 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1049              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1050              		.loc 1 310 79 view .LVU262
 1051 048c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1052              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1053              		.loc 1 309 42 view .LVU263
 1054 0490 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1055              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1056              		.loc 1 296 33 view .LVU264
 1057 0494 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1058              		.loc 1 297 5 is_stmt 1 view .LVU265
 1059              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1060              		.loc 1 309 42 is_stmt 0 view .LVU266
 1061 0498 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1062              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1063              		.loc 1 297 30 view .LVU267
 1064 049c C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1065              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1066              		.loc 1 312 5 view .LVU268
 1067 04a0 0C30A0E1 		mov	r3, ip	@, _19
 1068 04a4 0C20A0E1 		mov	r2, ip	@, tmp3
 1069              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1070              		.loc 1 309 42 view .LVU269
 1071 04a8 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1072              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1073              		.loc 1 297 30 view .LVU270
 1074 04ac 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1075              		.loc 1 298 5 is_stmt 1 view .LVU271
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1076              		.loc 1 299 5 view .LVU272
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1077              		.loc 1 300 5 view .LVU273
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1078              		.loc 1 301 5 view .LVU274
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1079              		.loc 1 302 5 view .LVU275
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1080              		.loc 1 303 5 view .LVU276
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 1081              		.loc 1 304 5 view .LVU277
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1082              		.loc 1 305 5 view .LVU278
 306:armwave.c     **** 
 1083              		.loc 1 306 5 view .LVU279
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1084              		.loc 1 309 5 view .LVU280
 1085              		.loc 1 312 5 view .LVU281
 1086 04b0 FEFFFFEB 		bl	printf		@
 1087              	.LVL70:
 313:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 314:armwave.c     **** 
 315:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 316:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 317:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1088              		.loc 1 318 5 view .LVU282
 1089              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 319:armwave.c     **** 
 320:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1090              		.loc 1 320 23 is_stmt 0 view .LVU283
 1091 04b4 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1092              	@ armwave.c:318:     g_armwave_state.slice_height = 64;  
 318:armwave.c     **** 
 1093              		.loc 1 318 34 view .LVU284
 1094 04b8 4030A0E3 		mov	r3, #64	@ tmp203,
 1095              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 1096              		.loc 1 320 7 view .LVU285
 1097 04bc 000050E3 		cmp	r0, #0	@ _20,
 1098              	@ armwave.c:318:     g_armwave_state.slice_height = 64;  
 318:armwave.c     **** 
 1099              		.loc 1 318 34 view .LVU286
 1100 04c0 443084E5 		str	r3, [r4, #68]	@ tmp203, g_armwave_state.slice_height
 1101              		.loc 1 320 5 is_stmt 1 view .LVU287
 1102              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 1103              		.loc 1 320 7 is_stmt 0 view .LVU288
 1104 04c4 0000000A 		beq	.L65		@,
 321:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1105              		.loc 1 321 9 is_stmt 1 view .LVU289
 1106 04c8 FEFFFFEB 		bl	free		@
 1107              	.LVL71:
 1108              	.L65:
 322:armwave.c     **** 
 323:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1109              		.loc 1 323 5 view .LVU290
 1110              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1111              		.loc 1 323 34 is_stmt 0 view .LVU291
 1112 04cc 0110A0E3 		mov	r1, #1	@,
 1113 04d0 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1114 04d4 FEFFFFEB 		bl	calloc		@
 1115              	.LVL72:
 1116              	@ armwave.c:325:     assert(g_armwave_state.ch1_buffer != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1117              		.loc 1 325 5 view .LVU292
 1118 04d8 000050E3 		cmp	r0, #0	@ _23,
 1119              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1120              		.loc 1 323 34 view .LVU293
 1121 04dc 0070A0E1 		mov	r7, r0	@ _23,
 1122              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1123              		.loc 1 323 32 view .LVU294
 1124 04e0 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1125              		.loc 1 325 5 is_stmt 1 view .LVU295
 1126 04e4 3600000A 		beq	.L75		@,
 326:armwave.c     **** 
 327:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 328:armwave.c     ****     length = end_point - start_point;
 1127              		.loc 1 328 5 view .LVU296
 1128              	.LVL73:
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1129              		.loc 1 329 5 view .LVU297
 1130              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1131              		.loc 1 329 34 is_stmt 0 view .LVU298
 1132 04e8 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1133              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1134              		.loc 1 329 22 view .LVU299
 1135 04ec 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1136              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1137              		.loc 1 330 60 view .LVU300
 1138 04f0 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1139              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1140              		.loc 1 331 40 view .LVU301
 1141 04f4 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1142              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1143              		.loc 1 329 34 view .LVU302
 1144 04f8 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1145              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1146              		.loc 1 329 22 view .LVU303
 1147 04fc 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1148              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1149              		.loc 1 330 60 view .LVU304
 1150 0500 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1151              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1152              		.loc 1 329 22 view .LVU305
 1153 0504 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1154              	.LVL74:
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1155              		.loc 1 330 5 is_stmt 1 view .LVU306
 1156              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1157              		.loc 1 330 60 is_stmt 0 view .LVU307
 1158 0508 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1159              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1160              		.loc 1 330 41 view .LVU308
 1161 050c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1162 0510 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1163              		.loc 1 331 5 is_stmt 1 view .LVU309
 1164              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1165              		.loc 1 331 40 is_stmt 0 view .LVU310
 1166 0514 FEFFFFEB 		bl	malloc		@
 1167              	.LVL75:
 1168              	@ armwave.c:333:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 332:armwave.c     **** 
 333:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1169              		.loc 1 333 5 view .LVU311
 1170 0518 000050E3 		cmp	r0, #0	@ _31,
 1171              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1172              		.loc 1 331 40 view .LVU312
 1173 051c 0060A0E1 		mov	r6, r0	@ _31,
 1174              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1175              		.loc 1 331 38 view .LVU313
 1176 0520 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1177              		.loc 1 333 5 is_stmt 1 view .LVU314
 1178 0524 2100000A 		beq	.L76		@,
 1179              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334:armwave.c     **** 
 335:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1180              		.loc 1 336 54 is_stmt 0 view .LVU315
 1181 0528 2C7ADFED 		vldr.32	s15, .L77+8	@ tmp230,
 1182 052c 02C040E2 		sub	ip, r0, #2	@ ivtmp.74, _31,
 1183              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1184              		.loc 1 335 12 view .LVU316
 1185 0530 0030A0E3 		mov	r3, #0	@ xx,
 1186              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1187              		.loc 1 336 54 view .LVU317
 1188 0534 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1189              	.L68:
 1190              	.LVL76:
 1191              		.loc 1 336 9 is_stmt 1 discriminator 3 view .LVU318
 1192              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1193              		.loc 1 336 74 is_stmt 0 discriminator 3 view .LVU319
 1194 0538 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1195              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1196              		.loc 1 335 32 discriminator 3 view .LVU320
 1197 053c 013083E2 		add	r3, r3, #1	@ xx, xx,
 1198              	.LVL77:
 1199              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1200              		.loc 1 335 5 discriminator 3 view .LVU321
 1201 0540 030055E1 		cmp	r5, r3	@ _13, xx
 1202              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1203              		.loc 1 336 74 discriminator 3 view .LVU322
 1204 0544 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1205 0548 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1206              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1207              		.loc 1 336 46 discriminator 3 view .LVU323
 1208 054c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1209 0550 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1210 0554 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1211              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1212              		.loc 1 335 5 discriminator 3 view .LVU324
 1213 0558 F6FFFF1A 		bne	.L68		@,
 337:armwave.c     **** 
 338:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 339:armwave.c     ****     }
 340:armwave.c     **** 
 341:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1214              		.loc 1 341 5 is_stmt 1 view .LVU325
 1215              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1216              		.loc 1 341 34 is_stmt 0 view .LVU326
 1217 055c 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1218 0560 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1219 0564 FEFFFFEB 		bl	malloc		@
 1220              	.LVL78:
 1221              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 342:armwave.c     **** 
 343:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1222              		.loc 1 343 5 view .LVU327
 1223 0568 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1224 056c 0620A0E1 		mov	r2, r6	@, _31
 1225 0570 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1226 0574 0710A0E1 		mov	r1, r7	@, _23
 1227              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1228              		.loc 1 341 34 view .LVU328
 1229 0578 00C0A0E1 		mov	ip, r0	@ tmp237,
 1230              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1231              		.loc 1 343 5 view .LVU329
 1232 057c 0030A0E1 		mov	r3, r0	@, tmp237
 1233              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1234              		.loc 1 341 32 view .LVU330
 1235 0580 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1236              		.loc 1 343 5 is_stmt 1 view .LVU331
 1237 0584 64009FE5 		ldr	r0, .L77+24	@,
 1238 0588 FEFFFFEB 		bl	printf		@
 1239              	.LVL79:
 344:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 345:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 348:armwave.c     **** 
 349:armwave.c     ****     malloc_stats();
 1240              		.loc 1 349 5 view .LVU332
 1241              	@ armwave.c:350: }
 350:armwave.c     **** }
 1242              		.loc 1 350 1 is_stmt 0 view .LVU333
 1243 058c 14D08DE2 		add	sp, sp, #20	@,,
 1244              		.cfi_remember_state
 1245              		.cfi_def_cfa_offset 36
 1246              		@ sp needed	@
 1247 0590 028BBDEC 		vldm	sp!, {d8}	@
 1248              		.cfi_restore 80
 1249              		.cfi_restore 81
 1250              		.cfi_def_cfa_offset 28
 1251              	.LVL80:
 1252              		.loc 1 350 1 view .LVU334
 1253 0594 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1254              		.cfi_restore 14
 1255              		.cfi_restore 9
 1256              		.cfi_restore 8
 1257              		.cfi_restore 7
 1258              		.cfi_restore 6
 1259              		.cfi_restore 5
 1260              		.cfi_restore 4
 1261              		.cfi_def_cfa_offset 0
 1262              	.LVL81:
 1263              	@ armwave.c:349:     malloc_stats();
 349:armwave.c     **** }
 1264              		.loc 1 349 5 view .LVU335
 1265 0598 FEFFFFEA 		b	malloc_stats		@
 1266              	.LVL82:
 1267              	.L74:
 1268              		.cfi_restore_state
 273:armwave.c     **** 
 1269              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU336
 1270 059c 50309FE5 		ldr	r3, .L77+28	@,
 1271 05a0 50209FE5 		ldr	r2, .L77+32	@,
 1272 05a4 50109FE5 		ldr	r1, .L77+36	@,
 1273 05a8 50009FE5 		ldr	r0, .L77+40	@,
 1274 05ac FEFFFFEB 		bl	__assert_fail		@
 1275              	.LVL83:
 1276              	.L76:
 333:armwave.c     **** 
 1277              		.loc 1 333 5 discriminator 1 view .LVU337
 1278 05b0 3C309FE5 		ldr	r3, .L77+28	@,
 1279 05b4 48209FE5 		ldr	r2, .L77+44	@,
 1280 05b8 3C109FE5 		ldr	r1, .L77+36	@,
 1281 05bc 44009FE5 		ldr	r0, .L77+48	@,
 1282 05c0 FEFFFFEB 		bl	__assert_fail		@
 1283              	.LVL84:
 1284              	.L75:
 325:armwave.c     **** 
 1285              		.loc 1 325 5 discriminator 1 view .LVU338
 1286 05c4 28309FE5 		ldr	r3, .L77+28	@,
 1287 05c8 3C209FE5 		ldr	r2, .L77+52	@,
 1288 05cc 28109FE5 		ldr	r1, .L77+36	@,
 1289 05d0 38009FE5 		ldr	r0, .L77+56	@,
 1290 05d4 FEFFFFEB 		bl	__assert_fail		@
 1291              	.LVL85:
 1292              	.L78:
 1293              		.align	2
 1294              	.L77:
 1295 05d8 00007F43 		.word	1132396544
 1296 05dc 00008043 		.word	1132462080
 1297 05e0 0000803F 		.word	1065353216
 1298 05e4 C8000000 		.word	.LC7
 1299 05e8 00000000 		.word	g_armwave_state
 1300 05ec 0C010000 		.word	.LC9
 1301 05f0 90010000 		.word	.LC12
 1302 05f4 1C000000 		.word	.LANCHOR0+28
 1303 05f8 11010000 		.word	273
 1304 05fc A8000000 		.word	.LC5
 1305 0600 F4000000 		.word	.LC8
 1306 0604 4D010000 		.word	333
 1307 0608 64010000 		.word	.LC11
 1308 060c 45010000 		.word	325
 1309 0610 40010000 		.word	.LC10
 1310              		.cfi_endproc
 1311              	.LFE62:
 1313              		.align	2
 1314              		.global	armwave_set_wave_pointer
 1315              		.syntax unified
 1316              		.arm
 1317              		.fpu vfp
 1319              	armwave_set_wave_pointer:
 1320              	.LVL86:
 1321              	.LFB63:
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 354:armwave.c     ****  * in the future.
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 357:armwave.c     **** {
 1322              		.loc 1 357 1 view -0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 0
 1325              		@ frame_needed = 0, uses_anonymous_args = 0
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1326              		.loc 1 358 5 view .LVU340
 1327 0614 000050E3 		cmp	r0, #0	@ wave_buffer
 1328              		.loc 1 358 5 is_stmt 0 view .LVU341
 1329 0618 0200000A 		beq	.L84		@,
 359:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1330              		.loc 1 359 5 is_stmt 1 view .LVU342
 1331              	@ armwave.c:359:     g_armwave_state.wave_buffer = wave_buffer;
 1332              		.loc 1 359 33 is_stmt 0 view .LVU343
 1333 061c 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1334 0620 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1335 0624 1EFF2FE1 		bx	lr	@
 1336              	.L84:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1337              		.loc 1 358 5 is_stmt 1 discriminator 1 view .LVU344
 1338              	@ armwave.c:357: {
 357:armwave.c     ****     assert(wave_buffer != NULL);
 1339              		.loc 1 357 1 is_stmt 0 discriminator 1 view .LVU345
 1340 0628 10402DE9 		push	{r4, lr}	@
 1341              		.cfi_def_cfa_offset 8
 1342              		.cfi_offset 4, -8
 1343              		.cfi_offset 14, -4
 1344              	@ armwave.c:358:     assert(wave_buffer != NULL);
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1345              		.loc 1 358 5 discriminator 1 view .LVU346
 1346 062c 10309FE5 		ldr	r3, .L85+4	@,
 1347 0630 10209FE5 		ldr	r2, .L85+8	@,
 1348 0634 10109FE5 		ldr	r1, .L85+12	@,
 1349 0638 10009FE5 		ldr	r0, .L85+16	@,
 1350              	.LVL87:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1351              		.loc 1 358 5 discriminator 1 view .LVU347
 1352 063c FEFFFFEB 		bl	__assert_fail		@
 1353              	.LVL88:
 1354              	.L86:
 1355              		.align	2
 1356              	.L85:
 1357 0640 00000000 		.word	g_armwave_state
 1358 0644 34000000 		.word	.LANCHOR0+52
 1359 0648 66010000 		.word	358
 1360 064c A8000000 		.word	.LC5
 1361 0650 B4010000 		.word	.LC13
 1362              		.cfi_endproc
 1363              	.LFE63:
 1365              		.align	2
 1366              		.global	armwave_set_wave_pointer_as_testbuf
 1367              		.syntax unified
 1368              		.arm
 1369              		.fpu vfp
 1371              	armwave_set_wave_pointer_as_testbuf:
 1372              	.LVL89:
 1373              	.LFB64:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 364:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 365:armwave.c     ****  */
 366:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 367:armwave.c     **** {
 1374              		.loc 1 367 1 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 368:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1379              		.loc 1 368 5 view .LVU349
 1380              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1381              		.loc 1 368 29 is_stmt 0 view .LVU350
 1382 0654 24309FE5 		ldr	r3, .L90	@ tmp117,
 1383              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1384              		.loc 1 368 7 view .LVU351
 1385 0658 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1386 065c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1387 0660 0400003A 		bcc	.L89		@,
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 370:armwave.c     ****         return;
 371:armwave.c     ****     }
 372:armwave.c     **** 
 373:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1388              		.loc 1 373 5 is_stmt 1 view .LVU352
 1389              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1390              		.loc 1 373 111 is_stmt 0 view .LVU353
 1391 0664 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1392              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1393              		.loc 1 373 68 view .LVU354
 1394 0668 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1395 066c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1396              	.LVL90:
 1397              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1398              		.loc 1 373 33 view .LVU355
 1399 0670 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1400              	@ armwave.c:374: }
 374:armwave.c     **** }
 1401              		.loc 1 374 1 view .LVU356
 1402 0674 1EFF2FE1 		bx	lr	@
 1403              	.LVL91:
 1404              	.L89:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1405              		.loc 1 369 9 is_stmt 1 view .LVU357
 1406 0678 04009FE5 		ldr	r0, .L90+4	@,
 1407              	.LVL92:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1408              		.loc 1 369 9 is_stmt 0 view .LVU358
 1409 067c FEFFFFEA 		b	puts		@
 1410              	.LVL93:
 1411              	.L91:
 1412              		.align	2
 1413              	.L90:
 1414 0680 00000000 		.word	g_armwave_state
 1415 0684 C8010000 		.word	.LC14
 1416              		.cfi_endproc
 1417              	.LFE64:
 1419              		.align	2
 1420              		.global	armwave_set_wave_pointer_u32
 1421              		.syntax unified
 1422              		.arm
 1423              		.fpu vfp
 1425              	armwave_set_wave_pointer_u32:
 1426              	.LVL94:
 1427              	.LFB65:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 378:armwave.c     ****  * disjointed buffers in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 381:armwave.c     **** {
 1428              		.loc 1 381 1 is_stmt 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 0
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1432              		.loc 1 382 5 view .LVU360
 1433 0688 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1434              		.loc 1 382 5 is_stmt 0 view .LVU361
 1435 068c 0200000A 		beq	.L97		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1436              		.loc 1 383 5 is_stmt 1 view .LVU362
 1437              	@ armwave.c:383:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1438              		.loc 1 383 33 is_stmt 0 view .LVU363
 1439 0690 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1440 0694 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1441 0698 1EFF2FE1 		bx	lr	@
 1442              	.L97:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1443              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU364
 1444              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1445              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU365
 1446 069c 10402DE9 		push	{r4, lr}	@
 1447              		.cfi_def_cfa_offset 8
 1448              		.cfi_offset 4, -8
 1449              		.cfi_offset 14, -4
 1450              	@ armwave.c:382:     assert(wave_buffer_ptr != 0);
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1451              		.loc 1 382 5 discriminator 1 view .LVU366
 1452 06a0 10309FE5 		ldr	r3, .L98+4	@,
 1453 06a4 10209FE5 		ldr	r2, .L98+8	@,
 1454 06a8 10109FE5 		ldr	r1, .L98+12	@,
 1455 06ac 10009FE5 		ldr	r0, .L98+16	@,
 1456              	.LVL95:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1457              		.loc 1 382 5 discriminator 1 view .LVU367
 1458 06b0 FEFFFFEB 		bl	__assert_fail		@
 1459              	.LVL96:
 1460              	.L99:
 1461              		.align	2
 1462              	.L98:
 1463 06b4 00000000 		.word	g_armwave_state
 1464 06b8 50000000 		.word	.LANCHOR0+80
 1465 06bc 7E010000 		.word	382
 1466 06c0 A8000000 		.word	.LC5
 1467 06c4 04020000 		.word	.LC15
 1468              		.cfi_endproc
 1469              	.LFE65:
 1471              		.align	2
 1472              		.global	armwave_clear_buffer
 1473              		.syntax unified
 1474              		.arm
 1475              		.fpu vfp
 1477              	armwave_clear_buffer:
 1478              	.LVL97:
 1479              	.LFB66:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 390:armwave.c     **** {
 1480              		.loc 1 390 1 is_stmt 1 view -0
 1481              		.cfi_startproc
 1482              		@ args = 0, pretend = 0, frame = 0
 1483              		@ frame_needed = 0, uses_anonymous_args = 0
 1484              		@ link register save eliminated.
 391:armwave.c     ****     // Flags ignored, only one buffer cleared
 392:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1485              		.loc 1 392 5 view .LVU369
 1486              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1487              		.loc 1 392 58 is_stmt 0 view .LVU370
 1488 06c8 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1489              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1490              		.loc 1 392 5 view .LVU371
 1491 06cc 0010A0E3 		mov	r1, #0	@,
 1492 06d0 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1493 06d4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1494              	.LVL98:
 1495              		.loc 1 392 5 view .LVU372
 1496 06d8 FEFFFFEA 		b	memset		@
 1497              	.LVL99:
 1498              	.L102:
 1499              		.align	2
 1500              	.L101:
 1501 06dc 00000000 		.word	g_armwave_state
 1502              		.cfi_endproc
 1503              	.LFE66:
 1505              		.align	2
 1506              		.global	armwave_set_channel_colour
 1507              		.syntax unified
 1508              		.arm
 1509              		.fpu vfp
 1511              	armwave_set_channel_colour:
 1512              	.LVL100:
 1513              	.LFB67:
 393:armwave.c     **** }
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 397:armwave.c     ****  */
 398:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 399:armwave.c     **** {
 1514              		.loc 1 399 1 is_stmt 1 view -0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 400:armwave.c     ****     // Only 1ch supported for now
 401:armwave.c     ****     switch(ch) {
 1519              		.loc 1 401 5 view .LVU374
 1520 06e0 010050E3 		cmp	r0, #1	@ ch,
 402:armwave.c     ****         case 1:
 403:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1521              		.loc 1 403 13 view .LVU375
 1522              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 1523              		.loc 1 403 41 is_stmt 0 view .LVU376
 1524 06e4 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1525              	.LVL101:
 1526              		.loc 1 403 41 view .LVU377
 1527 06e8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1528              		.loc 1 404 13 is_stmt 1 view .LVU378
 1529              	@ armwave.c:404:             g_armwave_state.ch1_color.g = g;
 1530              		.loc 1 404 41 is_stmt 0 view .LVU379
 1531 06ec BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1532              		.loc 1 405 13 is_stmt 1 view .LVU380
 1533              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 1534              		.loc 1 405 41 is_stmt 0 view .LVU381
 1535 06f0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 406:armwave.c     ****             break;
 1536              		.loc 1 406 13 is_stmt 1 view .LVU382
 1537              	@ armwave.c:408: }
 407:armwave.c     ****     }
 408:armwave.c     **** }
 1538              		.loc 1 408 1 is_stmt 0 view .LVU383
 1539 06f4 1EFF2FE1 		bx	lr	@
 1540              	.L106:
 1541              		.align	2
 1542              	.L105:
 1543 06f8 00000000 		.word	g_armwave_state
 1544              		.cfi_endproc
 1545              	.LFE67:
 1547              		.align	2
 1548              		.global	armwave_dump_ppm_debug
 1549              		.syntax unified
 1550              		.arm
 1551              		.fpu vfp
 1553              	armwave_dump_ppm_debug:
 1554              	.LVL102:
 1555              	.LFB68:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Dump a ppm of a buffer to a file.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 414:armwave.c     **** {
 1556              		.loc 1 414 1 is_stmt 1 view -0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1560              		.loc 1 415 5 view .LVU385
 1561              	@ armwave.c:414: {
 414:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1562              		.loc 1 414 1 is_stmt 0 view .LVU386
 1563 06fc 0130A0E1 		mov	r3, r1	@ fn, fn
 1564 0700 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1565              		.cfi_def_cfa_offset 28
 1566              		.cfi_offset 4, -28
 1567              		.cfi_offset 5, -24
 1568              		.cfi_offset 6, -20
 1569              		.cfi_offset 7, -16
 1570              		.cfi_offset 8, -12
 1571              		.cfi_offset 9, -8
 1572              		.cfi_offset 14, -4
 1573 0704 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1574 0708 0CD04DE2 		sub	sp, sp, #12	@,,
 1575              		.cfi_def_cfa_offset 40
 1576              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 1577              		.loc 1 415 16 view .LVU387
 1578 070c C4109FE5 		ldr	r1, .L115	@,
 1579              	.LVL103:
 1580              		.loc 1 415 16 view .LVU388
 1581 0710 0300A0E1 		mov	r0, r3	@, fn
 1582              	.LVL104:
 1583              		.loc 1 415 16 view .LVU389
 1584 0714 FEFFFFEB 		bl	fopen64		@
 1585              	.LVL105:
 1586              	@ armwave.c:422:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 416:armwave.c     ****     uint32_t data;
 417:armwave.c     ****     int xx, yy;
 418:armwave.c     **** 
 419:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 420:armwave.c     **** 
 421:armwave.c     ****     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1587              		.loc 1 422 5 view .LVU390
 1588 0718 BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1589              	@ armwave.c:421:     fputs("P3\n", fp);
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1590              		.loc 1 421 5 view .LVU391
 1591 071c 0320A0E3 		mov	r2, #3	@,
 1592 0720 0110A0E3 		mov	r1, #1	@,
 1593              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 415:armwave.c     ****     uint32_t data;
 1594              		.loc 1 415 16 view .LVU392
 1595 0724 0070A0E1 		mov	r7, r0	@ fp,
 1596              	.LVL106:
 416:armwave.c     ****     uint32_t data;
 1597              		.loc 1 416 5 is_stmt 1 view .LVU393
 417:armwave.c     **** 
 1598              		.loc 1 417 5 view .LVU394
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1599              		.loc 1 421 5 view .LVU395
 1600 0728 0030A0E1 		mov	r3, r0	@, fp
 1601 072c AC009FE5 		ldr	r0, .L115+8	@,
 1602              	.LVL107:
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1603              		.loc 1 421 5 is_stmt 0 view .LVU396
 1604 0730 FEFFFFEB 		bl	fwrite		@
 1605              	.LVL108:
 1606              		.loc 1 422 5 is_stmt 1 view .LVU397
 1607 0734 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1608 0738 A4109FE5 		ldr	r1, .L115+12	@,
 1609 073c 0700A0E1 		mov	r0, r7	@, fp
 1610 0740 FEFFFFEB 		bl	fprintf		@
 1611              	.LVL109:
 423:armwave.c     ****     fputs("255\n", fp);
 1612              		.loc 1 423 5 view .LVU398
 1613 0744 0420A0E3 		mov	r2, #4	@,
 1614 0748 0730A0E1 		mov	r3, r7	@, fp
 1615 074c 0110A0E3 		mov	r1, #1	@,
 1616 0750 90009FE5 		ldr	r0, .L115+16	@,
 1617 0754 FEFFFFEB 		bl	fwrite		@
 1618              	.LVL110:
 424:armwave.c     **** 
 425:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1619              		.loc 1 425 5 view .LVU399
 1620              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1621              		.loc 1 425 37 is_stmt 0 view .LVU400
 1622 0758 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1623              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1624              		.loc 1 425 5 view .LVU401
 1625 075c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1626 0760 180000DA 		ble	.L108		@,
 1627 0764 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1628              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 429:armwave.c     **** 
 430:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1629              		.loc 1 430 13 view .LVU402
 1630 0768 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 1631              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1632              		.loc 1 425 12 view .LVU403
 1633 076c 0050A0E3 		mov	r5, #0	@ yy,
 1634              	.LVL111:
 1635              	.L109:
 1636              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1637              		.loc 1 426 9 view .LVU404
 1638 0770 000053E3 		cmp	r3, #0	@ _13,
 1639              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1640              		.loc 1 426 16 view .LVU405
 1641 0774 0040A0C3 		movgt	r4, #0	@ xx,
 1642              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1643              		.loc 1 426 9 view .LVU406
 1644 0778 0F0000DA 		ble	.L111		@,
 1645              	.LVL112:
 1646              	.L110:
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1647              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU407
 1648              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1649              		.loc 1 427 29 is_stmt 0 discriminator 3 view .LVU408
 1650 077c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1651              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1652              		.loc 1 430 13 discriminator 3 view .LVU409
 1653 0780 0910A0E1 		mov	r1, r9	@, tmp152
 1654 0784 0700A0E1 		mov	r0, r7	@, fp
 1655              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1656              		.loc 1 427 18 discriminator 3 view .LVU410
 1657 0788 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1658              	.LVL113:
 1659              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU411
 1660              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1661              		.loc 1 426 58 is_stmt 0 discriminator 3 view .LVU412
 1662 078c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1663              	.LVL114:
 1664              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1665              		.loc 1 430 81 discriminator 3 view .LVU413
 1666 0790 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1667              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1668              		.loc 1 430 61 discriminator 3 view .LVU414
 1669 0794 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1670              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1671              		.loc 1 430 13 discriminator 3 view .LVU415
 1672 0798 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1673 079c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1674 07a0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1675 07a4 7220EFE6 		uxtb	r2, r2	@, data
 1676              	.LVL115:
 1677              		.loc 1 430 13 discriminator 3 view .LVU416
 1678 07a8 FEFFFFEB 		bl	fprintf		@
 1679              	.LVL116:
 1680              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1681              		.loc 1 426 41 discriminator 3 view .LVU417
 1682 07ac 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1683              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1684              		.loc 1 426 9 discriminator 3 view .LVU418
 1685 07b0 040053E1 		cmp	r3, r4	@ _13, xx
 1686 07b4 F0FFFFCA 		bgt	.L110		@,
 1687 07b8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1688              	.LVL117:
 1689              	.L111:
 1690              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1691              		.loc 1 425 55 discriminator 2 view .LVU419
 1692 07bc 015085E2 		add	r5, r5, #1	@ yy, yy,
 1693              	.LVL118:
 1694              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1695              		.loc 1 425 5 discriminator 2 view .LVU420
 1696 07c0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1697 07c4 E9FFFFBA 		blt	.L109		@,
 1698              	.LVL119:
 1699              	.L108:
 431:armwave.c     ****         }
 432:armwave.c     ****     }
 433:armwave.c     **** 
 434:armwave.c     ****     fclose(fp);
 1700              		.loc 1 434 5 is_stmt 1 view .LVU421
 1701 07c8 0700A0E1 		mov	r0, r7	@, fp
 1702              	@ armwave.c:435: }
 435:armwave.c     **** }
 1703              		.loc 1 435 1 is_stmt 0 view .LVU422
 1704 07cc 0CD08DE2 		add	sp, sp, #12	@,,
 1705              		.cfi_def_cfa_offset 28
 1706              		@ sp needed	@
 1707 07d0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1708              		.cfi_restore 14
 1709              		.cfi_restore 9
 1710              		.cfi_restore 8
 1711              		.cfi_restore 7
 1712              		.cfi_restore 6
 1713              		.cfi_restore 5
 1714              		.cfi_restore 4
 1715              		.cfi_def_cfa_offset 0
 1716              	.LVL120:
 1717              	@ armwave.c:434:     fclose(fp);
 434:armwave.c     **** }
 1718              		.loc 1 434 5 view .LVU423
 1719 07d4 FEFFFFEA 		b	fclose		@
 1720              	.LVL121:
 1721              	.L116:
 434:armwave.c     **** }
 1722              		.loc 1 434 5 view .LVU424
 1723              		.align	2
 1724              	.L115:
 1725 07d8 1C020000 		.word	.LC16
 1726 07dc 00000000 		.word	g_armwave_state
 1727 07e0 20020000 		.word	.LC17
 1728 07e4 24020000 		.word	.LC18
 1729 07e8 2C020000 		.word	.LC19
 1730 07ec 34020000 		.word	.LC20
 1731              		.cfi_endproc
 1732              	.LFE68:
 1734              		.align	2
 1735              		.global	armwave_test_init
 1736              		.syntax unified
 1737              		.arm
 1738              		.fpu vfp
 1740              	armwave_test_init:
 1741              	.LVL122:
 1742              	.LFB69:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Initialise some test functionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 441:armwave.c     **** {
 1743              		.loc 1 441 1 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     test_create_gamma();
 1747              		.loc 1 442 5 view .LVU426
 1748              	.LBB12:
 1749              	.LBI12:
  34:armwave.c     **** {
 1750              		.loc 1 34 6 view .LVU427
  34:armwave.c     **** {
 1751              		.loc 1 34 6 is_stmt 0 view .LVU428
 1752              	.LBE12:
 1753              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1754              		.loc 1 441 1 view .LVU429
 1755 07f0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1756              		.cfi_def_cfa_offset 32
 1757              		.cfi_offset 4, -32
 1758              		.cfi_offset 5, -28
 1759              		.cfi_offset 6, -24
 1760              		.cfi_offset 7, -20
 1761              		.cfi_offset 8, -16
 1762              		.cfi_offset 9, -12
 1763              		.cfi_offset 10, -8
 1764              		.cfi_offset 14, -4
 1765 07f4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1766              		.cfi_def_cfa_offset 56
 1767              		.cfi_offset 80, -56
 1768              		.cfi_offset 81, -52
 1769              		.cfi_offset 82, -48
 1770              		.cfi_offset 83, -44
 1771              		.cfi_offset 84, -40
 1772              		.cfi_offset 85, -36
 1773 07f8 BC409FE5 		ldr	r4, .L121+20	@ ivtmp.88,
 1774              	.LBB15:
 1775              	.LBB13:
 1776              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1777              		.loc 1 40 32 view .LVU430
 1778 07fc 2DAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 1779              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1780              		.loc 1 40 26 view .LVU431
 1781 0800 289B9FED 		vldr.64	d9, .L121	@ tmp151,
 1782              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1783              		.loc 1 40 49 view .LVU432
 1784 0804 298B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 1785 0808 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.88,
 1786              	.LBE13:
 1787              	.LBE15:
 1788              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1789              		.loc 1 441 1 view .LVU433
 1790 080c 10D04DE2 		sub	sp, sp, #16	@,,
 1791              		.cfi_def_cfa_offset 72
 1792              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 1793              		.loc 1 441 1 view .LVU434
 1794 0810 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1795 0814 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1796 0818 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1797 081c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1798 0820 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.88,
 1799 0824 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1800              	.LVL123:
 1801              	.L118:
 1802              	.LBB16:
 1803              	.LBB14:
  40:armwave.c     ****     }
 1804              		.loc 1 40 9 is_stmt 1 view .LVU435
 1805              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1806              		.loc 1 40 32 is_stmt 0 view .LVU436
 1807 0828 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.88
 1808              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1809              		.loc 1 40 26 view .LVU437
 1810 082c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1811              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1812              		.loc 1 40 32 view .LVU438
 1813 0830 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1814 0834 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1815 0838 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1816              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1817              		.loc 1 40 26 view .LVU439
 1818 083c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1819 0840 FEFFFFEB 		bl	pow		@
 1820              	.LVL124:
 1821              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1822              		.loc 1 40 49 view .LVU440
 1823 0844 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1824              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1825              		.loc 1 40 24 view .LVU441
 1826 0848 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1827 084c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1828 0850 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1829              	.LVL125:
 1830              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1831              		.loc 1 39 5 view .LVU442
 1832 0854 0A0054E1 		cmp	r4, r10	@ ivtmp.88, _39
 1833 0858 F2FFFF1A 		bne	.L118		@,
 1834              	.LVL126:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1835              		.loc 1 39 5 view .LVU443
 1836              	.LBE14:
 1837              	.LBE16:
 443:armwave.c     **** 
 444:armwave.c     ****     // make ch1 yellowish by default
 445:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1838              		.loc 1 445 5 is_stmt 1 view .LVU444
 1839              	.LBB17:
 1840              	.LBI17:
 398:armwave.c     **** {
 1841              		.loc 1 398 6 view .LVU445
 1842              	.LBB18:
 401:armwave.c     ****         case 1:
 1843              		.loc 1 401 5 view .LVU446
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1844              		.loc 1 403 13 view .LVU447
 404:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1845              		.loc 1 404 13 view .LVU448
 1846              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1847              		.loc 1 403 41 is_stmt 0 view .LVU449
 1848 085c 5CC09FE5 		ldr	ip, .L121+24	@ tmp142,
 1849 0860 5C409FE5 		ldr	r4, .L121+28	@ tmp143,
 1850              	.LBE18:
 1851              	.LBE17:
 1852              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 446:armwave.c     **** 
 447:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1853              		.loc 1 447 5 view .LVU450
 1854 0864 0000A0E3 		mov	r0, #0	@ tmp147,
 1855              	.LBB22:
 1856              	.LBB19:
 1857              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 1858              		.loc 1 405 41 view .LVU451
 1859 0868 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1860              	.LBE19:
 1861              	.LBE22:
 1862              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1863              		.loc 1 447 5 view .LVU452
 1864 086c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1865 0870 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1866 0874 00808DE5 		str	r8, [sp]	@ render_width,
 1867 0878 0610A0E1 		mov	r1, r6	@, tmp3
 1868 087c 0720A0E1 		mov	r2, r7	@, nwaves
 1869              	.LBB23:
 1870              	.LBB20:
 1871              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1872              		.loc 1 403 41 view .LVU453
 1873 0880 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 405:armwave.c     ****             break;
 1874              		.loc 1 405 13 is_stmt 1 view .LVU454
 1875              	.LBE20:
 1876              	.LBE23:
 1877              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1878              		.loc 1 447 5 is_stmt 0 view .LVU455
 1879 0884 0630A0E1 		mov	r3, r6	@, wave_size
 1880              	.LBB24:
 1881              	.LBB21:
 1882              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 1883              		.loc 1 405 41 view .LVU456
 1884 0888 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 406:armwave.c     ****     }
 1885              		.loc 1 406 13 is_stmt 1 view .LVU457
 1886              	.LVL127:
 406:armwave.c     ****     }
 1887              		.loc 1 406 13 is_stmt 0 view .LVU458
 1888              	.LBE21:
 1889              	.LBE24:
 1890              		.loc 1 447 5 is_stmt 1 view .LVU459
 1891 088c FEFFFFEB 		bl	armwave_setup_render		@
 1892              	.LVL128:
 448:armwave.c     **** 
 449:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1893              		.loc 1 449 5 view .LVU460
 1894 0890 30109FE5 		ldr	r1, .L121+32	@,
 1895 0894 30009FE5 		ldr	r0, .L121+36	@,
 1896              	@ armwave.c:450: }
 450:armwave.c     **** }
 1897              		.loc 1 450 1 is_stmt 0 view .LVU461
 1898 0898 10D08DE2 		add	sp, sp, #16	@,,
 1899              		.cfi_def_cfa_offset 56
 1900              		@ sp needed	@
 1901 089c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1902              		.cfi_restore 84
 1903              		.cfi_restore 85
 1904              		.cfi_restore 82
 1905              		.cfi_restore 83
 1906              		.cfi_restore 80
 1907              		.cfi_restore 81
 1908              		.cfi_def_cfa_offset 32
 1909 08a0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1910              		.cfi_restore 14
 1911              		.cfi_restore 10
 1912              		.cfi_restore 9
 1913              		.cfi_restore 8
 1914              		.cfi_restore 7
 1915              		.cfi_restore 6
 1916              		.cfi_restore 5
 1917              		.cfi_restore 4
 1918              		.cfi_def_cfa_offset 0
 1919              	.LVL129:
 1920              	@ armwave.c:449:     printf("armwave version: %s\n", ARMWAVE_VER);
 449:armwave.c     **** }
 1921              		.loc 1 449 5 view .LVU462
 1922 08a4 FEFFFFEA 		b	printf		@
 1923              	.LVL130:
 1924              	.L122:
 1925              		.align	3
 1926              	.L121:
 1927 08a8 000000C0 		.word	-1073741824
 1928 08ac CCCCEC3F 		.word	1072483532
 1929 08b0 00000000 		.word	0
 1930 08b4 00E06F40 		.word	1081073664
 1931 08b8 00007F43 		.word	1132396544
 1932 08bc FFFFFFFF 		.word	gamma_table-1
 1933 08c0 00000000 		.word	g_armwave_state
 1934 08c4 F609F406 		.word	116656630
 1935 08c8 00000000 		.word	.LC0
 1936 08cc 08000000 		.word	.LC1
 1937              		.cfi_endproc
 1938              	.LFE69:
 1940              		.align	2
 1941              		.global	armwave_test_fill_outbuf
 1942              		.syntax unified
 1943              		.arm
 1944              		.fpu vfp
 1946              	armwave_test_fill_outbuf:
 1947              	.LFB70:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Render image to the local allocated buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_fill_outbuf()
 456:armwave.c     **** {
 1948              		.loc 1 456 1 is_stmt 1 view -0
 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 0
 1951              		@ frame_needed = 0, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 457:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1953              		.loc 1 457 5 view .LVU464
 1954 08d0 04309FE5 		ldr	r3, .L124	@ tmp111,
 1955 08d4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 1956 08d8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 1957              	.LVL131:
 1958              	.L125:
 1959              		.align	2
 1960              	.L124:
 1961 08dc 00000000 		.word	g_armwave_state
 1962              		.cfi_endproc
 1963              	.LFE70:
 1965              		.align	2
 1966              		.global	armwave_test_dump_buffer_to_ppm
 1967              		.syntax unified
 1968              		.arm
 1969              		.fpu vfp
 1971              	armwave_test_dump_buffer_to_ppm:
 1972              	.LVL132:
 1973              	.LFB71:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 464:armwave.c     **** {
 1974              		.loc 1 464 1 view -0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 0
 1977              		@ frame_needed = 0, uses_anonymous_args = 0
 1978              		@ link register save eliminated.
 465:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 1979              		.loc 1 465 5 view .LVU466
 1980 08e0 08309FE5 		ldr	r3, .L127	@ tmp112,
 1981 08e4 0010A0E1 		mov	r1, r0	@, fn
 1982 08e8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 1983              	.LVL133:
 1984              		.loc 1 465 5 is_stmt 0 view .LVU467
 1985 08ec FEFFFFEA 		b	armwave_dump_ppm_debug		@
 1986              	.LVL134:
 1987              	.L128:
 1988              		.loc 1 465 5 view .LVU468
 1989              		.align	2
 1990              	.L127:
 1991 08f0 00000000 		.word	g_armwave_state
 1992              		.cfi_endproc
 1993              	.LFE71:
 1995              		.align	2
 1996              		.global	armwave_test_fill_gdkbuf
 1997              		.syntax unified
 1998              		.arm
 1999              		.fpu vfp
 2001              	armwave_test_fill_gdkbuf:
 2002              	.LVL135:
 2003              	.LFB72:
 466:armwave.c     **** }
 467:armwave.c     **** 
 468:armwave.c     **** /*
 469:armwave.c     ****  * Render GDK buffer with test funtionry.
 470:armwave.c     ****  */
 471:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 472:armwave.c     **** {
 2004              		.loc 1 472 1 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 473:armwave.c     ****     //PyObject *mv;
 474:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 475:armwave.c     **** 
 476:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 477:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2009              		.loc 1 477 5 view .LVU470
 478:armwave.c     ****     
 479:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2010              		.loc 1 480 5 view .LVU471
 2011              	@ armwave.c:477:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 477:armwave.c     ****     
 2012              		.loc 1 477 11 is_stmt 0 view .LVU472
 2013 08f4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2014              	@ armwave.c:480:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2015              		.loc 1 480 5 view .LVU473
 2016 08f8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2017              	.LVL136:
 2018              		.loc 1 480 5 view .LVU474
 2019 08fc FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2020              	.LVL137:
 2021              		.loc 1 480 5 view .LVU475
 2022              		.cfi_endproc
 2023              	.LFE72:
 2025              		.align	2
 2026              		.global	armwave_test_buffer_alloc
 2027              		.syntax unified
 2028              		.arm
 2029              		.fpu vfp
 2031              	armwave_test_buffer_alloc:
 2032              	.LVL138:
 2033              	.LFB73:
 481:armwave.c     **** }
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 485:armwave.c     ****  */
 486:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 487:armwave.c     **** {
 2034              		.loc 1 487 1 is_stmt 1 view -0
 2035              		.cfi_startproc
 2036              		@ args = 0, pretend = 0, frame = 0
 2037              		@ frame_needed = 0, uses_anonymous_args = 0
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2038              		.loc 1 488 5 view .LVU477
 2039              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2040              		.loc 1 487 1 is_stmt 0 view .LVU478
 2041 0900 70402DE9 		push	{r4, r5, r6, lr}	@
 2042              		.cfi_def_cfa_offset 16
 2043              		.cfi_offset 4, -16
 2044              		.cfi_offset 5, -12
 2045              		.cfi_offset 6, -8
 2046              		.cfi_offset 14, -4
 2047              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2048              		.loc 1 487 1 view .LVU479
 2049 0904 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2050              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2051              		.loc 1 488 23 view .LVU480
 2052 0908 44409FE5 		ldr	r4, .L137	@ tmp128,
 2053 090c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2054              	.LVL139:
 2055              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2056              		.loc 1 488 7 view .LVU481
 2057 0910 000050E3 		cmp	r0, #0	@ _1,
 2058 0914 0000000A 		beq	.L131		@,
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2059              		.loc 1 489 9 is_stmt 1 view .LVU482
 2060 0918 FEFFFFEB 		bl	free		@
 2061              	.LVL140:
 2062              	.L131:
 490:armwave.c     ****     }
 491:armwave.c     **** 
 492:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 493:armwave.c     **** 
 494:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2063              		.loc 1 494 5 view .LVU483
 2064              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2065              		.loc 1 494 75 is_stmt 0 view .LVU484
 2066 091c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2067 0920 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2068              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2069              		.loc 1 494 40 view .LVU485
 2070 0924 0610A0E1 		mov	r1, r6	@, nsets
 2071              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2072              		.loc 1 494 75 view .LVU486
 2073 0928 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2074              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2075              		.loc 1 494 40 view .LVU487
 2076 092c 0500A0E1 		mov	r0, r5	@, _4
 2077 0930 FEFFFFEB 		bl	calloc		@
 2078              	.LVL141:
 2079              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 495:armwave.c     **** 
 496:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2080              		.loc 1 496 7 view .LVU488
 2081 0934 000050E3 		cmp	r0, #0	@ tmp124,
 2082              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2083              		.loc 1 494 38 view .LVU489
 2084 0938 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2085              		.loc 1 496 5 is_stmt 1 view .LVU490
 2086              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 2087              		.loc 1 496 7 is_stmt 0 view .LVU491
 2088 093c 7080BD18 		popne	{r4, r5, r6, pc}	@
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2089              		.loc 1 497 9 is_stmt 1 view .LVU492
 2090 0940 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2091 0944 0620A0E1 		mov	r2, r6	@, nsets
 2092 0948 08009FE5 		ldr	r0, .L137+4	@,
 2093              	@ armwave.c:501: }
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 499:armwave.c     ****         return;
 500:armwave.c     ****     }
 501:armwave.c     **** }
 2094              		.loc 1 501 1 is_stmt 0 view .LVU493
 2095 094c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2096              		.cfi_restore 14
 2097              		.cfi_restore 6
 2098              		.cfi_restore 5
 2099              		.cfi_restore 4
 2100              		.cfi_def_cfa_offset 0
 2101              	.LVL142:
 2102              	@ armwave.c:497:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2103              		.loc 1 497 9 view .LVU494
 2104 0950 FEFFFFEA 		b	printf		@
 2105              	.LVL143:
 2106              	.L138:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2107              		.loc 1 497 9 view .LVU495
 2108              		.align	2
 2109              	.L137:
 2110 0954 00000000 		.word	g_armwave_state
 2111 0958 44020000 		.word	.LC21
 2112              		.cfi_endproc
 2113              	.LFE73:
 2115              		.align	2
 2116              		.global	armwave_fill_pixbuf_into_pybuffer
 2117              		.syntax unified
 2118              		.arm
 2119              		.fpu vfp
 2121              	armwave_fill_pixbuf_into_pybuffer:
 2122              	.LVL144:
 2123              	.LFB74:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 505:armwave.c     ****  */
 506:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 507:armwave.c     **** {
 2124              		.loc 1 507 1 is_stmt 1 view -0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 48
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     Py_buffer buffer;
 2128              		.loc 1 508 5 view .LVU497
 509:armwave.c     ****     int ret;
 2129              		.loc 1 509 5 view .LVU498
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 512:armwave.c     **** 
 513:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2130              		.loc 1 513 5 view .LVU499
 2131              	@ armwave.c:507: {
 507:armwave.c     ****     Py_buffer buffer;
 2132              		.loc 1 507 1 is_stmt 0 view .LVU500
 2133 095c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2134              		.cfi_def_cfa_offset 4
 2135              		.cfi_offset 14, -4
 2136 0960 34D04DE2 		sub	sp, sp, #52	@,,
 2137              		.cfi_def_cfa_offset 56
 2138              	@ armwave.c:513:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2139              		.loc 1 513 11 view .LVU501
 2140 0964 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2141 0968 0120A0E3 		mov	r2, #1	@,
 2142 096c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2143              	.LVL145:
 514:armwave.c     **** 
 515:armwave.c     ****     if(ret != 0) {
 2144              		.loc 1 515 5 is_stmt 1 view .LVU502
 2145              	@ armwave.c:515:     if(ret != 0) {
 2146              		.loc 1 515 7 is_stmt 0 view .LVU503
 2147 0970 000050E3 		cmp	r0, #0	@,
 2148 0974 0A00001A 		bne	.L143		@,
 516:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 517:armwave.c     ****         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 519:armwave.c     **** 
 520:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 521:armwave.c     **** 
 522:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2149              		.loc 1 522 5 is_stmt 1 view .LVU504
 2150 0978 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2151              	.LVL146:
 2152              		.loc 1 522 5 is_stmt 0 view .LVU505
 2153 097c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2154              	.LVL147:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     PyBuffer_Release(&buffer);
 2155              		.loc 1 525 5 is_stmt 1 view .LVU506
 2156 0980 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2157 0984 FEFFFFEB 		bl	PyBuffer_Release		@
 2158              	.LVL148:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     Py_RETURN_TRUE;
 2159              		.loc 1 528 5 view .LVU507
 2160              	.LBB25:
 2161              	.LBI25:
 2162              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2163              		.loc 2 456 20 view .LVU508
 2164              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2165              		.loc 2 458 21 view .LVU509
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2166              		.loc 2 459 5 view .LVU510
 2167              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2168              		.loc 2 459 18 is_stmt 0 view .LVU511
 2169 0988 38309FE5 		ldr	r3, .L144	@ tmp126,
 2170              	.LBE26:
 2171              	.LBE25:
 2172              	@ armwave.c:528:     Py_RETURN_TRUE;
 2173              		.loc 1 528 5 view .LVU512
 2174 098c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2175              	.LBB28:
 2176              	.LBB27:
 2177              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2178              		.loc 2 459 18 view .LVU513
 2179 0990 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2180 0994 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2181 0998 002083E5 		str	r2, [r3]	@ tmp128,
 2182              	.LBE27:
 2183              	.LBE28:
 2184              	@ armwave.c:529: }
 529:armwave.c     **** }
 2185              		.loc 1 529 1 view .LVU514
 2186 099c 34D08DE2 		add	sp, sp, #52	@,,
 2187              		.cfi_remember_state
 2188              		.cfi_def_cfa_offset 4
 2189              		@ sp needed	@
 2190 09a0 04F09DE4 		ldr	pc, [sp], #4	@
 2191              	.LVL149:
 2192              	.L143:
 2193              		.cfi_restore_state
 516:armwave.c     ****         Py_RETURN_FALSE;
 2194              		.loc 1 516 9 is_stmt 1 view .LVU515
 2195 09a4 20009FE5 		ldr	r0, .L144+4	@,
 2196              	.LVL150:
 516:armwave.c     ****         Py_RETURN_FALSE;
 2197              		.loc 1 516 9 is_stmt 0 view .LVU516
 2198 09a8 FEFFFFEB 		bl	puts		@
 2199              	.LVL151:
 517:armwave.c     ****     }
 2200              		.loc 1 517 9 is_stmt 1 view .LVU517
 2201              	.LBB29:
 2202              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2203              		.loc 2 456 20 view .LVU518
 2204              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2205              		.loc 2 458 21 view .LVU519
 2206              		.loc 2 459 5 view .LVU520
 2207              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2208              		.loc 2 459 18 is_stmt 0 view .LVU521
 2209 09ac 1C309FE5 		ldr	r3, .L144+8	@ tmp120,
 2210              	.LBE30:
 2211              	.LBE29:
 2212              	@ armwave.c:517:         Py_RETURN_FALSE;
 517:armwave.c     ****     }
 2213              		.loc 1 517 9 view .LVU522
 2214 09b0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2215              	.LBB32:
 2216              	.LBB31:
 2217              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2218              		.loc 2 459 18 view .LVU523
 2219 09b4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2220 09b8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2221 09bc 002083E5 		str	r2, [r3]	@ tmp122,
 2222              	.LBE31:
 2223              	.LBE32:
 2224              	@ armwave.c:529: }
 2225              		.loc 1 529 1 view .LVU524
 2226 09c0 34D08DE2 		add	sp, sp, #52	@,,
 2227              		.cfi_def_cfa_offset 4
 2228              		@ sp needed	@
 2229 09c4 04F09DE4 		ldr	pc, [sp], #4	@
 2230              	.L145:
 2231              		.align	2
 2232              	.L144:
 2233 09c8 00000000 		.word	_Py_TrueStruct
 2234 09cc 98020000 		.word	.LC22
 2235 09d0 00000000 		.word	_Py_FalseStruct
 2236              		.cfi_endproc
 2237              	.LFE74:
 2239              		.align	2
 2240              		.global	armwave_test_create_am_sine
 2241              		.syntax unified
 2242              		.arm
 2243              		.fpu vfp
 2245              	armwave_test_create_am_sine:
 2246              	.LVL152:
 2247              	.LFB75:
 530:armwave.c     **** 
 531:armwave.c     **** /*
 532:armwave.c     ****  * Make a test AM waveform for render tests.
 533:armwave.c     ****  *
 534:armwave.c     ****  * @param   mod                     modulation depth
 535:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 536:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 537:armwave.c     ****  */
 538:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 539:armwave.c     **** {
 2248              		.loc 1 539 1 is_stmt 1 view -0
 2249              		.cfi_startproc
 2250              		@ args = 0, pretend = 0, frame = 8
 2251              		@ frame_needed = 0, uses_anonymous_args = 0
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2252              		.loc 1 540 5 view .LVU526
 541:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2253              		.loc 1 541 5 view .LVU527
 2254              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2255              		.loc 1 539 1 is_stmt 0 view .LVU528
 2256 09d4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2257              		.cfi_def_cfa_offset 32
 2258              		.cfi_offset 4, -32
 2259              		.cfi_offset 5, -28
 2260              		.cfi_offset 6, -24
 2261              		.cfi_offset 7, -20
 2262              		.cfi_offset 8, -16
 2263              		.cfi_offset 9, -12
 2264              		.cfi_offset 10, -8
 2265              		.cfi_offset 14, -4
 2266              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2267              		.loc 1 541 38 view .LVU529
 2268 09d8 7A7A9FED 		vldr.32	s14, .L177	@ tmp180,
 2269              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2270              		.loc 1 541 55 view .LVU530
 2271 09dc 00529FE5 		ldr	r5, .L177+28	@ tmp250,
 2272              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2273              		.loc 1 539 1 view .LVU531
 2274 09e0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2275              		.cfi_def_cfa_offset 80
 2276              		.cfi_offset 80, -80
 2277              		.cfi_offset 81, -76
 2278              		.cfi_offset 82, -72
 2279              		.cfi_offset 83, -68
 2280              		.cfi_offset 84, -64
 2281              		.cfi_offset 85, -60
 2282              		.cfi_offset 86, -56
 2283              		.cfi_offset 87, -52
 2284              		.cfi_offset 88, -48
 2285              		.cfi_offset 89, -44
 2286              		.cfi_offset 90, -40
 2287              		.cfi_offset 91, -36
 2288 09e4 0090A0E1 		mov	r9, r0	@ sets, sets
 2289              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2290              		.loc 1 541 38 view .LVU532
 2291 09e8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2292              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     int s, set_offset = 0;
 543:armwave.c     ****     int w, x;
 544:armwave.c     **** 
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2293              		.loc 1 545 70 view .LVU533
 2294 09ec 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2295 09f0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2296              	.LBB35:
 2297              	.LBB36:
 2298              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2299              		.loc 1 488 23 view .LVU534
 2300 09f4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2301              	.LVL153:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2302              		.loc 1 488 23 view .LVU535
 2303              	.LBE36:
 2304              	.LBE35:
 2305              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2306              		.loc 1 541 38 view .LVU536
 2307 09f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2308              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2309              		.loc 1 545 70 view .LVU537
 2310 09fc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2311              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2312              		.loc 1 539 1 view .LVU538
 2313 0a00 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2314              	.LBB40:
 2315              	.LBB37:
 2316              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2317              		.loc 1 488 7 view .LVU539
 2318 0a04 000050E3 		cmp	r0, #0	@ _82,
 2319              	.LBE37:
 2320              	.LBE40:
 2321              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2322              		.loc 1 539 1 view .LVU540
 2323 0a08 08D04DE2 		sub	sp, sp, #8	@,,
 2324              		.cfi_def_cfa_offset 88
 2325              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_nsets = sets;
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2326              		.loc 1 546 44 view .LVU541
 2327 0a0c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2328              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2329              		.loc 1 545 45 view .LVU542
 2330 0a10 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2331              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2332              		.loc 1 541 38 view .LVU543
 2333 0a14 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2334              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2335              		.loc 1 541 11 view .LVU544
 2336 0a18 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2337              	.LVL154:
 542:armwave.c     ****     int w, x;
 2338              		.loc 1 542 5 is_stmt 1 view .LVU545
 543:armwave.c     **** 
 2339              		.loc 1 543 5 view .LVU546
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2340              		.loc 1 545 5 view .LVU547
 2341              		.loc 1 546 5 view .LVU548
 547:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2342              		.loc 1 547 5 view .LVU549
 2343              	.LBB41:
 2344              	.LBI35:
 486:armwave.c     **** {
 2345              		.loc 1 486 6 view .LVU550
 2346              	.LBB38:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2347              		.loc 1 488 5 view .LVU551
 2348              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2349              		.loc 1 488 7 is_stmt 0 view .LVU552
 2350 0a1c 0000000A 		beq	.L147		@,
 489:armwave.c     ****     }
 2351              		.loc 1 489 9 is_stmt 1 view .LVU553
 2352 0a20 FEFFFFEB 		bl	free		@
 2353              	.LVL155:
 2354              	.L147:
 494:armwave.c     **** 
 2355              		.loc 1 494 5 view .LVU554
 2356              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2357              		.loc 1 494 75 is_stmt 0 view .LVU555
 2358 0a24 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2359 0a28 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2360              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2361              		.loc 1 494 40 view .LVU556
 2362 0a2c 0910A0E1 		mov	r1, r9	@, sets
 2363              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2364              		.loc 1 494 75 view .LVU557
 2365 0a30 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2366              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2367              		.loc 1 494 40 view .LVU558
 2368 0a34 0400A0E1 		mov	r0, r4	@, _85
 2369 0a38 FEFFFFEB 		bl	calloc		@
 2370              	.LVL156:
 2371              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2372              		.loc 1 496 7 view .LVU559
 2373 0a3c 000050E3 		cmp	r0, #0	@ tmp191,
 2374              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2375              		.loc 1 494 38 view .LVU560
 2376 0a40 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2377              		.loc 1 496 5 is_stmt 1 view .LVU561
 2378              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2379              		.loc 1 496 7 is_stmt 0 view .LVU562
 2380 0a44 5A00000A 		beq	.L176		@,
 2381              	.L148:
 2382              	.LVL157:
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2383              		.loc 1 496 7 view .LVU563
 2384              	.LBE38:
 2385              	.LBE41:
 2386              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 548:armwave.c     **** 
 549:armwave.c     ****     for(s = 0; s < sets; s++) {
 2387              		.loc 1 549 5 discriminator 1 view .LVU564
 2388 0a48 000059E3 		cmp	r9, #0	@ sets,
 2389 0a4c 550000DA 		ble	.L146		@,
 2390              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 551:armwave.c     ****     
 552:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 554:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 556:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 568:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2391              		.loc 1 568 45 view .LVU565
 2392 0a50 5C8A9FED 		vldr.32	s16, .L177	@ tmp258,
 2393              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 570:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 571:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2394              		.loc 1 571 104 view .LVU566
 2395 0a54 5CCA9FED 		vldr.32	s24, .L177+4	@ tmp259,
 2396              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2397              		.loc 1 549 5 view .LVU567
 2398 0a58 0070A0E3 		mov	r7, #0	@ set_offset,
 2399              	@ armwave.c:550:         printf("Calculating test set %d\n", s);
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2400              		.loc 1 550 9 view .LVU568
 2401 0a5c 84A19FE5 		ldr	r10, .L177+32	@ tmp257,
 2402              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2403              		.loc 1 549 5 view .LVU569
 2404 0a60 0780A0E1 		mov	r8, r7	@ s, set_offset
 2405              	.LVL158:
 2406              	.L149:
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2407              		.loc 1 550 9 is_stmt 1 view .LVU570
 2408 0a64 0810A0E1 		mov	r1, r8	@, s
 2409 0a68 0A00A0E1 		mov	r0, r10	@, tmp257
 2410 0a6c FEFFFFEB 		bl	printf		@
 2411              	.LVL159:
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2412              		.loc 1 552 9 view .LVU571
 2413              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2414              		.loc 1 552 39 is_stmt 0 view .LVU572
 2415 0a70 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2416              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2417              		.loc 1 552 9 view .LVU573
 2418 0a74 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2419 0a78 450000DA 		ble	.L150		@,
 2420              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2421              		.loc 1 554 21 view .LVU574
 2422 0a7c 53CADFED 		vldr.32	s25, .L177+8	@ tmp200,
 2423              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2424              		.loc 1 568 33 view .LVU575
 2425 0a80 53BA9FED 		vldr.32	s22, .L177+12	@ tmp253,
 2426              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2427              		.loc 1 566 24 view .LVU576
 2428 0a84 53AADFED 		vldr.32	s21, .L177+16	@ tmp254,
 2429 0a88 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2430              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2431              		.loc 1 552 15 view .LVU577
 2432 0a8c 0060A0E3 		mov	r6, #0	@ w,
 2433              	.LVL160:
 2434              	.L157:
 554:armwave.c     **** 
 2435              		.loc 1 554 13 is_stmt 1 view .LVU578
 2436              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2437              		.loc 1 554 21 is_stmt 0 view .LVU579
 2438 0a90 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2439 0a94 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2440              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2441              		.loc 1 556 13 view .LVU580
 2442 0a98 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2443              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2444              		.loc 1 554 21 view .LVU581
 2445 0a9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2446 0aa0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2447              	.LVL161:
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2448              		.loc 1 556 13 is_stmt 1 view .LVU582
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2449              		.loc 1 556 13 is_stmt 0 view .LVU583
 2450 0aa4 370000DA 		ble	.L151		@,
 2451 0aa8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2452              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2453              		.loc 1 571 113 view .LVU584
 2454 0aac 4AAA9FED 		vldr.32	s20, .L177+20	@ tmp229,
 2455 0ab0 4A8ADFED 		vldr.32	s17, .L177+24	@ tmp230,
 2456              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2457              		.loc 1 556 19 view .LVU585
 2458 0ab4 0040A0E3 		mov	r4, #0	@ x,
 2459              	.LVL162:
 2460              	.L156:
 557:armwave.c     ****                 noise *= noise;
 2461              		.loc 1 557 17 is_stmt 1 view .LVU586
 2462              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2463              		.loc 1 557 28 is_stmt 0 view .LVU587
 2464 0ab8 FEFFFFEB 		bl	rand		@
 2465              	.LVL163:
 2466              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2467              		.loc 1 557 35 view .LVU588
 2468 0abc 7000FFE6 		uxth	r0, r0	@ tmp201,
 2469              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2470              		.loc 1 557 45 view .LVU589
 2471 0ac0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2472 0ac4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2473              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2474              		.loc 1 557 24 view .LVU590
 2475 0ac8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2476              	.LVL164:
 558:armwave.c     ****                 noise *= noise;
 2477              		.loc 1 558 17 is_stmt 1 view .LVU591
 2478              	@ armwave.c:558:                 noise *= noise;
 558:armwave.c     ****                 noise *= noise;
 2479              		.loc 1 558 23 is_stmt 0 view .LVU592
 2480 0acc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2481              	.LVL165:
 559:armwave.c     ****                 noise *= noise;
 2482              		.loc 1 559 17 is_stmt 1 view .LVU593
 2483              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2484              		.loc 1 559 23 is_stmt 0 view .LVU594
 2485 0ad0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2486              	.LVL166:
 560:armwave.c     **** 
 2487              		.loc 1 560 17 is_stmt 1 view .LVU595
 2488              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     **** 
 2489              		.loc 1 560 23 is_stmt 0 view .LVU596
 2490 0ad4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2491              	.LVL167:
 562:armwave.c     ****                     noise = -noise;
 2492              		.loc 1 562 17 is_stmt 1 view .LVU597
 2493              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2494              		.loc 1 562 21 is_stmt 0 view .LVU598
 2495 0ad8 FEFFFFEB 		bl	rand		@
 2496              	.LVL168:
 563:armwave.c     **** 
 2497              		.loc 1 563 21 is_stmt 1 view .LVU599
 2498              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2499              		.loc 1 562 19 is_stmt 0 view .LVU600
 2500 0adc 020910E3 		tst	r0, #32768	@,
 2501              	@ armwave.c:563:                     noise = -noise;
 563:armwave.c     **** 
 2502              		.loc 1 563 27 view .LVU601
 2503 0ae0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2504              	.LVL169:
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2505              		.loc 1 565 17 is_stmt 1 view .LVU602
 566:armwave.c     **** 
 2506              		.loc 1 566 17 view .LVU603
 2507              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2508              		.loc 1 566 27 is_stmt 0 view .LVU604
 2509 0ae4 FEFFFFEB 		bl	rand		@
 2510              	.LVL170:
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2511              		.loc 1 568 17 is_stmt 1 view .LVU605
 2512              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2513              		.loc 1 568 45 is_stmt 0 view .LVU606
 2514 0ae8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2515              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2516              		.loc 1 568 33 view .LVU607
 2517 0aec 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2518              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2519              		.loc 1 568 45 view .LVU608
 2520 0af0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2521              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2522              		.loc 1 568 33 view .LVU609
 2523 0af4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2524              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2525              		.loc 1 568 45 view .LVU610
 2526 0af8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2527              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2528              		.loc 1 568 33 view .LVU611
 2529 0afc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2530              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2531              		.loc 1 566 34 view .LVU612
 2532 0b00 7000FFE6 		uxth	r0, r0	@ tmp214,
 2533              	.LVL171:
 2534              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2535              		.loc 1 566 44 view .LVU613
 2536 0b04 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2537 0b08 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2538              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2539              		.loc 1 566 24 view .LVU614
 2540 0b0c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2541              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2542              		.loc 1 568 77 view .LVU615
 2543 0b10 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2544              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2545              		.loc 1 568 22 view .LVU616
 2546 0b14 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2547 0b18 FEFFFFEB 		bl	sin		@
 2548              	.LVL172:
 2549              		.loc 1 571 17 is_stmt 1 view .LVU617
 2550              	@ armwave.c:565:                 noise += 1.0f;
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2551              		.loc 1 565 23 is_stmt 0 view .LVU618
 2552 0b1c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2553              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2554              		.loc 1 571 104 view .LVU619
 2555 0b20 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2556              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2557              		.loc 1 568 98 view .LVU620
 2558 0b24 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2559              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2560              		.loc 1 568 87 view .LVU621
 2561 0b28 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2562              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2563              		.loc 1 568 98 view .LVU622
 2564 0b2c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2565              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2566              		.loc 1 568 19 view .LVU623
 2567 0b30 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2568              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2569              		.loc 1 571 113 view .LVU624
 2570 0b34 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2571 0b38 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2572 0b3c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2573 0b40 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2574 0b44 050000DA 		ble	.L153		@,
 2575              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2576              		.loc 1 571 104 discriminator 1 view .LVU625
 2577 0b48 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2578 0b4c FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2579 0b50 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2580 0b54 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2581 0b58 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2582 0b5c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2583              	.L153:
 2584              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2585              		.loc 1 571 57 discriminator 12 view .LVU626
 2586 0b60 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2587              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2588              		.loc 1 571 102 discriminator 12 view .LVU627
 2589 0b64 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2590 0b68 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2591 0b6c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2592              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2593              		.loc 1 556 58 discriminator 12 view .LVU628
 2594 0b70 014084E2 		add	r4, r4, #1	@ x, x,
 2595              	.LVL173:
 2596              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2597              		.loc 1 571 102 discriminator 12 view .LVU629
 2598 0b74 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2599              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2600              		.loc 1 556 43 discriminator 12 view .LVU630
 2601 0b78 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2602              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2603              		.loc 1 556 13 discriminator 12 view .LVU631
 2604 0b7c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2605 0b80 CCFFFFCA 		bgt	.L156		@,
 2606 0b84 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2607              	.LVL174:
 2608              	.L151:
 2609              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2610              		.loc 1 552 48 discriminator 2 view .LVU632
 2611 0b88 016086E2 		add	r6, r6, #1	@ w, w,
 2612              	.LVL175:
 2613              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2614              		.loc 1 552 9 discriminator 2 view .LVU633
 2615 0b8c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2616 0b90 BEFFFFBA 		blt	.L157		@,
 2617              	.LVL176:
 2618              	.L150:
 572:armwave.c     ****             }
 573:armwave.c     ****         }
 574:armwave.c     **** 
 575:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2619              		.loc 1 575 9 is_stmt 1 discriminator 2 view .LVU634
 2620              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2621              		.loc 1 575 46 is_stmt 0 discriminator 2 view .LVU635
 2622 0b94 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2623              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2624              		.loc 1 549 27 discriminator 2 view .LVU636
 2625 0b98 018088E2 		add	r8, r8, #1	@ s, s,
 2626              	.LVL177:
 2627              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2628              		.loc 1 549 5 discriminator 2 view .LVU637
 2629 0b9c 080059E1 		cmp	r9, r8	@ sets, s
 2630              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2631              		.loc 1 575 20 discriminator 2 view .LVU638
 2632 0ba0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2633              	.LVL178:
 2634              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2635              		.loc 1 549 5 discriminator 2 view .LVU639
 2636 0ba4 AEFFFF1A 		bne	.L149		@,
 2637              	.LVL179:
 2638              	.L146:
 2639              	@ armwave.c:577: }
 576:armwave.c     ****     }
 577:armwave.c     **** }
 2640              		.loc 1 577 1 view .LVU640
 2641 0ba8 08D08DE2 		add	sp, sp, #8	@,,
 2642              		.cfi_remember_state
 2643              		.cfi_def_cfa_offset 80
 2644              		@ sp needed	@
 2645 0bac 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2646              		.cfi_restore 90
 2647              		.cfi_restore 91
 2648              		.cfi_restore 88
 2649              		.cfi_restore 89
 2650              		.cfi_restore 86
 2651              		.cfi_restore 87
 2652              		.cfi_restore 84
 2653              		.cfi_restore 85
 2654              		.cfi_restore 82
 2655              		.cfi_restore 83
 2656              		.cfi_restore 80
 2657              		.cfi_restore 81
 2658              		.cfi_def_cfa_offset 32
 2659              	.LVL180:
 2660              		.loc 1 577 1 view .LVU641
 2661 0bb0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2662              	.LVL181:
 2663              	.L176:
 2664              		.cfi_restore_state
 2665              	.LBB42:
 2666              	.LBB39:
 497:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2667              		.loc 1 497 9 is_stmt 1 view .LVU642
 2668 0bb4 940901E0 		mul	r1, r4, r9	@, _85, sets
 2669 0bb8 0920A0E1 		mov	r2, r9	@, sets
 2670 0bbc 28009FE5 		ldr	r0, .L177+36	@,
 2671 0bc0 FEFFFFEB 		bl	printf		@
 2672              	.LVL182:
 499:armwave.c     ****     }
 2673              		.loc 1 499 9 view .LVU643
 2674 0bc4 9FFFFFEA 		b	.L148		@
 2675              	.L178:
 2676              		.align	2
 2677              	.L177:
 2678 0bc8 0000803F 		.word	1065353216
 2679 0bcc 00007F43 		.word	1132396544
 2680 0bd0 0000003F 		.word	1056964608
 2681 0bd4 C3F5C840 		.word	1086911939
 2682 0bd8 38FFC74A 		.word	1254620984
 2683 0bdc 0000FE42 		.word	1123942400
 2684 0be0 00000043 		.word	1124073472
 2685 0be4 00000000 		.word	g_armwave_state
 2686 0be8 EC020000 		.word	.LC23
 2687 0bec 44020000 		.word	.LC21
 2688              	.LBE39:
 2689              	.LBE42:
 2690              		.cfi_endproc
 2691              	.LFE75:
 2693              		.align	2
 2694              		.global	armwave_cleanup
 2695              		.syntax unified
 2696              		.arm
 2697              		.fpu vfp
 2699              	armwave_cleanup:
 2700              	.LFB76:
 578:armwave.c     **** 
 579:armwave.c     **** /*
 580:armwave.c     ****  * Make a test square waveform.
 581:armwave.c     ****  *
 582:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 583:armwave.c     ****  */
 584:armwave.c     **** #if 0
 585:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 586:armwave.c     **** {
 587:armwave.c     ****     uint8_t v;
 588:armwave.c     ****     float noise, xnoise;
 589:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 590:armwave.c     ****     int w, x;
 591:armwave.c     **** 
 592:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 593:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 594:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 595:armwave.c     ****             noise *= noise;
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     **** 
 599:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 600:armwave.c     ****                 noise = -noise;
 601:armwave.c     **** 
 602:armwave.c     ****             //noise += 1.0f;
 603:armwave.c     **** 
 604:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 605:armwave.c     ****                 new_level = 0.2f;
 606:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 607:armwave.c     ****                 new_level = 0.8f;
 608:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 609:armwave.c     ****                 new_level = 0.2f;
 610:armwave.c     ****             } else {
 611:armwave.c     ****                 new_level = 0.8f;
 612:armwave.c     ****             }
 613:armwave.c     **** 
 614:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 615:armwave.c     **** 
 616:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 617:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 618:armwave.c     ****         }
 619:armwave.c     ****     }
 620:armwave.c     **** }
 621:armwave.c     **** #endif
 622:armwave.c     **** 
 623:armwave.c     **** /*
 624:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 625:armwave.c     ****  */
 626:armwave.c     **** void armwave_cleanup()
 627:armwave.c     **** {
 2701              		.loc 1 627 1 view -0
 2702              		.cfi_startproc
 2703              		@ args = 0, pretend = 0, frame = 0
 2704              		@ frame_needed = 0, uses_anonymous_args = 0
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2705              		.loc 1 628 5 view .LVU645
 2706              	@ armwave.c:627: {
 627:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2707              		.loc 1 627 1 is_stmt 0 view .LVU646
 2708 0bf0 10402DE9 		push	{r4, lr}	@
 2709              		.cfi_def_cfa_offset 8
 2710              		.cfi_offset 4, -8
 2711              		.cfi_offset 14, -4
 2712              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 2713              		.loc 1 628 25 view .LVU647
 2714 0bf4 34409FE5 		ldr	r4, .L181	@ tmp114,
 2715              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 2716              		.loc 1 628 5 view .LVU648
 2717 0bf8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2718 0bfc FEFFFFEB 		bl	free		@
 2719              	.LVL183:
 629:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2720              		.loc 1 629 5 is_stmt 1 view .LVU649
 2721 0c00 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2722 0c04 FEFFFFEB 		bl	free		@
 2723              	.LVL184:
 630:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2724              		.loc 1 630 5 view .LVU650
 2725 0c08 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2726 0c0c FEFFFFEB 		bl	free		@
 2727              	.LVL185:
 631:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2728              		.loc 1 631 5 view .LVU651
 2729 0c10 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2730 0c14 FEFFFFEB 		bl	free		@
 2731              	.LVL186:
 632:armwave.c     **** 
 633:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2732              		.loc 1 633 5 view .LVU652
 2733              	@ armwave.c:633:     g_armwave_state.out_pixbuf = NULL;
 2734              		.loc 1 633 32 is_stmt 0 view .LVU653
 2735 0c18 0030A0E3 		mov	r3, #0	@ tmp123,
 2736 0c1c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 634:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2737              		.loc 1 634 5 is_stmt 1 view .LVU654
 2738              	@ armwave.c:634:     g_armwave_state.ch1_buffer = NULL;
 2739              		.loc 1 634 32 is_stmt 0 view .LVU655
 2740 0c20 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 635:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2741              		.loc 1 635 5 is_stmt 1 view .LVU656
 2742              	@ armwave.c:635:     g_armwave_state.xcoord_to_xpixel = NULL;
 2743              		.loc 1 635 38 is_stmt 0 view .LVU657
 2744 0c24 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 636:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2745              		.loc 1 636 5 is_stmt 1 view .LVU658
 2746              	@ armwave.c:636:     g_armwave_state.test_wave_buffer = NULL;
 2747              		.loc 1 636 38 is_stmt 0 view .LVU659
 2748 0c28 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2749              	@ armwave.c:637: }
 637:armwave.c     **** }
 2750              		.loc 1 637 1 view .LVU660
 2751 0c2c 1080BDE8 		pop	{r4, pc}	@
 2752              	.L182:
 2753              		.align	2
 2754              	.L181:
 2755 0c30 00000000 		.word	g_armwave_state
 2756              		.cfi_endproc
 2757              	.LFE76:
 2759              		.comm	gamma_table,256,4
 2760              		.comm	g_armwave_state,136,4
 2761              		.section	.rodata
 2762              		.align	2
 2763              		.set	.LANCHOR0,. + 0
 2766              	__PRETTY_FUNCTION__.17095:
 2767 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 2767      6176655F 
 2767      66696C6C 
 2767      5F706978 
 2767      6275665F 
 2768 001b 00       		.space	1
 2771              	__PRETTY_FUNCTION__.17125:
 2772 001c 61726D77 		.ascii	"armwave_setup_render\000"
 2772      6176655F 
 2772      73657475 
 2772      705F7265 
 2772      6E646572 
 2773 0031 000000   		.space	3
 2776              	__PRETTY_FUNCTION__.17132:
 2777 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2777      6176655F 
 2777      7365745F 
 2777      77617665 
 2777      5F706F69 
 2778 004d 000000   		.space	3
 2781              	__PRETTY_FUNCTION__.17139:
 2782 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2782      6176655F 
 2782      7365745F 
 2782      77617665 
 2782      5F706F69 
 2783              		.section	.rodata.str1.4,"aMS",%progbits,1
 2784              		.align	2
 2785              	.LC0:
 2786 0000 76302E30 		.ascii	"v0.0.1\000"
 2786      2E3100
 2787 0007 00       		.space	1
 2788              	.LC1:
 2789 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2789      61766520 
 2789      76657273 
 2789      696F6E3A 
 2789      2025730A 
 2790 001d 000000   		.space	3
 2791              	.LC2:
 2792 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2792      78253038 
 2792      7820623D 
 2792      30782530 
 2792      38782063 
 2793 0053 6768743D 		.ascii	"ght=%d\012\000"
 2793      25640A00 
 2794 005b 00       		.space	1
 2795              	.LC3:
 2796 005c 773D2564 		.ascii	"w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\012\000"
 2796      20737472 
 2796      6964653D 
 2796      25642073 
 2796      6C793D25 
 2797 008a 0000     		.space	2
 2798              	.LC4:
 2799 008c 77726974 		.ascii	"write_buff=0x%08x value=%d\012\000"
 2799      655F6275 
 2799      66663D30 
 2799      78253038 
 2799      78207661 
 2800              	.LC5:
 2801 00a8 61726D77 		.ascii	"armwave.c\000"
 2801      6176652E 
 2801      6300
 2802 00b2 0000     		.space	2
 2803              	.LC6:
 2804 00b4 6F75745F 		.ascii	"out_buffer != NULL\000"
 2804      62756666 
 2804      65722021 
 2804      3D204E55 
 2804      4C4C00
 2805 00c7 00       		.space	1
 2806              	.LC7:
 2807 00c8 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2807      20653D25 
 2807      6420773D 
 2807      25642077 
 2807      733D2564 
 2808              	.LC8:
 2809 00f4 73746172 		.ascii	"start_point < end_point\000"
 2809      745F706F 
 2809      696E7420 
 2809      3C20656E 
 2809      645F706F 
 2810              	.LC9:
 2811 010c 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 2811      7566665F 
 2811      73697A65 
 2811      3D25642C 
 2811      20636D70 
 2812 013e 00       		.ascii	"\000"
 2813 013f 00       		.space	1
 2814              	.LC10:
 2815 0140 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2815      6D776176 
 2815      655F7374 
 2815      6174652E 
 2815      6368315F 
 2816 0163 00       		.space	1
 2817              	.LC11:
 2818 0164 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2818      6D776176 
 2818      655F7374 
 2818      6174652E 
 2818      78636F6F 
 2819 018d 000000   		.space	3
 2820              	.LC12:
 2821 0190 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2821      3A203078 
 2821      25303878 
 2821      20307825 
 2821      30387820 
 2822              	.LC13:
 2823 01b4 77617665 		.ascii	"wave_buffer != NULL\000"
 2823      5F627566 
 2823      66657220 
 2823      213D204E 
 2823      554C4C00 
 2824              	.LC14:
 2825 01c8 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2825      6176655F 
 2825      7365745F 
 2825      77617665 
 2825      5F706F69 
 2826 01fb 78636565 		.ascii	"xceeded\000"
 2826      64656400 
 2827 0203 00       		.space	1
 2828              	.LC15:
 2829 0204 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2829      5F627566 
 2829      6665725F 
 2829      70747220 
 2829      213D2030 
 2830 0219 000000   		.space	3
 2831              	.LC16:
 2832 021c 776200   		.ascii	"wb\000"
 2833 021f 00       		.space	1
 2834              	.LC17:
 2835 0220 50330A00 		.ascii	"P3\012\000"
 2836              	.LC18:
 2837 0224 25642025 		.ascii	"%d %d\012\000"
 2837      640A00
 2838 022b 00       		.space	1
 2839              	.LC19:
 2840 022c 3235350A 		.ascii	"255\012\000"
 2840      00
 2841 0231 000000   		.space	3
 2842              	.LC20:
 2843 0234 25336420 		.ascii	"%3d %3d %3d\012\000"
 2843      25336420 
 2843      2533640A 
 2843      00
 2844 0241 000000   		.space	3
 2845              	.LC21:
 2846 0244 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2846      6176655F 
 2846      74657374 
 2846      5F627566 
 2846      6665725F 
 2847 0277 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2847      20627566 
 2847      66657220 
 2847      28256420 
 2847      62797465 
 2848              	.LC22:
 2849 0298 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2849      6176655F 
 2849      66696C6C 
 2849      5F706978 
 2849      6275665F 
 2850 02cb 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2850      20666169 
 2850      6C65642C 
 2850      20726574 
 2850      75726E69 
 2851 02ea 0000     		.space	2
 2852              	.LC23:
 2853 02ec 43616C63 		.ascii	"Calculating test set %d\012\000"
 2853      756C6174 
 2853      696E6720 
 2853      74657374 
 2853      20736574 
 2854              		.text
 2855              	.Letext0:
 2856              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2857              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2858              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2859              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2860              		.file 7 "/usr/include/stdio.h"
 2861              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2862              		.file 9 "/usr/include/errno.h"
 2863              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2864              		.file 11 "/usr/include/unistd.h"
 2865              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2866              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2867              		.file 14 "/usr/local/include/python3.8/pyport.h"
 2868              		.file 15 "/usr/include/math.h"
 2869              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2870              		.file 17 "/usr/include/time.h"
 2871              		.file 18 "/usr/local/include/python3.8/pymem.h"
 2872              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2873              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2874              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2875              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2876              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2877              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2878              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2879              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2880              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2881              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2882              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2883              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2884              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2885              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2886              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2887              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2888              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2889              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2890              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2891              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2892              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2893              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2894              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2895              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2896              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2897              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2898              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2899              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2900              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2901              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2902              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2903              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2904              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2905              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2906              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2907              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2908              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2909              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2910              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2911              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2912              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2913              		.file 60 "/usr/local/include/python3.8/context.h"
 2914              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2915              		.file 62 "/usr/local/include/python3.8/code.h"
 2916              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2917              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2918              		.file 65 "/usr/local/include/python3.8/import.h"
 2919              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2920              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2921              		.file 68 "/usr/include/malloc.h"
 2922              		.file 69 "armwave.h"
 2923              		.file 70 "/usr/include/stdlib.h"
 2924              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 2925              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2926              		.file 73 "<built-in>"
 2927              		.file 74 "/usr/include/assert.h"
 2928              		.file 75 "/usr/include/string.h"
