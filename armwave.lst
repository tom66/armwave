   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C0C19FE5 		ldr	ip, .L27	@ tmp318,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 130 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  74:armwave.c     ****         write_buffer_base, g_armwave_state.ch1_buffer, write_buffer_base - g_armwave_state.ch1_buff
  75:armwave.c     ****         slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 78 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp216, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 78 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2334A0E1 		lsr	r3, r3, #8	@ tmp218, tmp216,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 130 view .LVU41
 279 00c8 950305E0 		mul	r5, r5, r3	@ _7, g_armwave_state.bitdepth_height, tmp218
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 78 5 is_stmt 1 view .LVU43
 285              		.loc 1 78 5 is_stmt 0 view .LVU44
 286 00d0 610000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 5F00000A 		beq	.L11		@,
 289 00dc 043040E2 		sub	r3, r0, #4	@ tmp317, slice_y,
 290 00e0 0C308DE5 		str	r3, [sp, #12]	@ tmp317, %sfp
 291              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 292              		.loc 1 78 11 view .LVU45
 293 00e4 0030A0E3 		mov	r3, #0	@ w,
 294 00e8 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 295              	.LVL8:
 296              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 297              		.loc 1 79 9 is_stmt 1 view .LVU46
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 298              		.loc 1 83 9 view .LVU47
 299              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 79 64 is_stmt 0 view .LVU48
 301 00ec 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 302 00f0 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 303 00f4 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp317, %sfp
 304 00f8 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 305 00fc 93E223E0 		mla	r3, r3, r2, lr	@ tmp228, g_armwave_state.wave_stride, w, tmp317
 306              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 307              		.loc 1 83 16 view .LVU49
 308 0100 0000A0E3 		mov	r0, #0	@ yy,
 309 0104 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp228
 310 0108 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 311              	.LVL9:
 312              	.L17:
  84:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 313              		.loc 1 84 13 is_stmt 1 view .LVU50
  85:armwave.c     **** 
  86:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  87:armwave.c     ****                 // maybe worth preloading the base address here...
  88:armwave.c     ****                 scale_value = word & 0xff;
  89:armwave.c     ****                 
  90:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  91:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  92:armwave.c     ****                     continue;
  93:armwave.c     **** 
  94:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  95:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  96:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  97:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
  98:armwave.c     ****                 write_buffer = write_buffer_base + \
 314              		.loc 1 98 17 view .LVU51
  99:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 100:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 315              		.loc 1 100 17 view .LVU52
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 316              		.loc 1 98 17 view .LVU53
 317              		.loc 1 100 17 view .LVU54
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 318              		.loc 1 98 17 view .LVU55
 319              		.loc 1 100 17 view .LVU56
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 320              		.loc 1 98 17 view .LVU57
 321              		.loc 1 100 17 view .LVU58
 322              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 323              		.loc 1 84 18 is_stmt 0 view .LVU59
 324 010c 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 325              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 326              		.loc 1 99 34 view .LVU60
 327 0110 019080E2 		add	r9, r0, #1	@ tmp259, yy,
 328 0114 028080E2 		add	r8, r0, #2	@ tmp281, yy,
 329              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 330              		.loc 1 84 18 view .LVU61
 331 0118 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _185, offset: 0B]
 332              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 99 34 view .LVU62
 334 011c 037080E2 		add	r7, r0, #3	@ tmp301, yy,
 335              	.LVL10:
 336              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 337              		.loc 1 91 20 view .LVU63
 338 0120 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 339              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 340              		.loc 1 84 18 view .LVU64
 341 0124 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 342              	.LVL11:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 343              		.loc 1 86 13 is_stmt 1 view .LVU65
  88:armwave.c     ****                 
 344              		.loc 1 88 17 view .LVU66
  91:armwave.c     ****                     continue;
 345              		.loc 1 91 17 view .LVU67
 346              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 347              		.loc 1 91 20 is_stmt 0 view .LVU68
 348 0128 0120A003 		moveq	r2, #1	@ tmp231,
 349 012c 0020A013 		movne	r2, #0	@ tmp231,
 350              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 351              		.loc 1 91 19 view .LVU69
 352 0130 FF005AE3 		cmp	r10, #255	@ scale_value,
 353 0134 01208203 		orreq	r2, r2, #1	@,, tmp236, tmp231
 354 0138 000052E3 		cmp	r2, #0	@ tmp236,
 355              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 356              		.loc 1 100 47 view .LVU70
 357 013c 05B08AE0 		add	fp, r10, r5	@ tmp244, scale_value, _7
 358              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****                 word >>= 8;
 359              		.loc 1 101 22 view .LVU71
 360 0140 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 361 0144 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 362              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 363              		.loc 1 91 19 view .LVU72
 364 0148 3900001A 		bne	.L20		@,
 365              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 366              		.loc 1 99 34 view .LVU73
 367 014c 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 368              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 369              		.loc 1 100 47 view .LVU74
 370 0150 40609CE5 		ldr	r6, [ip, #64]	@ tmp330, g_armwave_state.bitdepth_height
 371              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 372              		.loc 1 91 20 view .LVU75
 373 0154 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 374              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 375              		.loc 1 99 34 view .LVU76
 376 0158 920002E0 		mul	r2, r2, r0	@ tmp238, g_armwave_state.cmp_x_bitdepth_scale, yy
 377              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 378              		.loc 1 100 47 view .LVU77
 379 015c 05A084E0 		add	r10, r4, r5	@ tmp266, scale_value, _7
 380              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 381              		.loc 1 99 74 view .LVU78
 382 0160 2224A0E1 		lsr	r2, r2, #8	@ tmp240, tmp238,
 383              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 384              		.loc 1 100 47 view .LVU79
 385 0164 96B222E0 		mla	r2, r6, r2, fp	@ tmp245, tmp330, tmp240, tmp244
 386              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 387              		.loc 1 91 20 view .LVU80
 388 0168 01B0A003 		moveq	fp, #1	@ tmp252,
 389 016c 00B0A013 		movne	fp, #0	@ tmp252,
 390              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 391              		.loc 1 91 19 view .LVU81
 392 0170 FF0054E3 		cmp	r4, #255	@ scale_value,
 393 0174 0B40A011 		movne	r4, fp	@, tmp257, tmp252
 394 0178 01408B03 		orreq	r4, fp, #1	@,, tmp257, tmp252
 395              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 396              		.loc 1 100 47 view .LVU82
 397 017c 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_79, *_79
 398              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 399              		.loc 1 91 19 view .LVU83
 400 0180 000054E3 		cmp	r4, #0	@ tmp257,
 401              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 402              		.loc 1 100 47 view .LVU84
 403 0184 01B08BE2 		add	fp, fp, #1	@ tmp248, *_79,
 404 0188 02B0C1E7 		strb	fp, [r1, r2]	@ tmp248, *_79
 405              	.LVL12:
 406              		.loc 1 101 17 is_stmt 1 view .LVU85
  88:armwave.c     ****                 
 407              		.loc 1 88 17 view .LVU86
  91:armwave.c     ****                     continue;
 408              		.loc 1 91 17 view .LVU87
 409              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 410              		.loc 1 91 19 is_stmt 0 view .LVU88
 411 018c 2800001A 		bne	.L20		@,
 412              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 413              		.loc 1 99 34 view .LVU89
 414 0190 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 415              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 416              		.loc 1 99 99 view .LVU90
 417 0194 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 418              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 419              		.loc 1 91 20 view .LVU91
 420 0198 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 421              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 422              		.loc 1 99 34 view .LVU92
 423 019c 920909E0 		mul	r9, r2, r9	@ tmp260, g_armwave_state.cmp_x_bitdepth_scale, tmp259
 424              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 425              		.loc 1 91 20 view .LVU93
 426 01a0 0120A003 		moveq	r2, #1	@ tmp274,
 427 01a4 0020A013 		movne	r2, #0	@ tmp274,
 428              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 429              		.loc 1 99 74 view .LVU94
 430 01a8 2994A0E1 		lsr	r9, r9, #8	@ tmp262, tmp260,
 431              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 432              		.loc 1 100 47 view .LVU95
 433 01ac 05408EE0 		add	r4, lr, r5	@ tmp288, scale_value, _7
 434 01b0 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp267, g_armwave_state.bitdepth_height, tmp262, tmp266
 435              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 436              		.loc 1 91 19 view .LVU96
 437 01b4 FF005EE3 		cmp	lr, #255	@ scale_value,
 438 01b8 02E0A011 		movne	lr, r2	@, tmp279, tmp274
 439 01bc 01E08203 		orreq	lr, r2, #1	@,, tmp279, tmp274
 440 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 441              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 442              		.loc 1 100 47 view .LVU97
 443 01c4 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_110, *_110
 444 01c8 012082E2 		add	r2, r2, #1	@ tmp270, *_110,
 445 01cc 0A20C1E7 		strb	r2, [r1, r10]	@ tmp270, *_110
 446              		.loc 1 101 17 is_stmt 1 view .LVU98
 447              	.LVL13:
  88:armwave.c     ****                 
 448              		.loc 1 88 17 view .LVU99
  91:armwave.c     ****                     continue;
 449              		.loc 1 91 17 view .LVU100
 450              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 451              		.loc 1 91 19 is_stmt 0 view .LVU101
 452 01d0 1700001A 		bne	.L20		@,
 453              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 454              		.loc 1 99 34 view .LVU102
 455 01d4 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 456              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 457              		.loc 1 91 20 view .LVU103
 458 01d8 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 459              	.LVL14:
 460              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 461              		.loc 1 100 47 view .LVU104
 462 01dc 032085E0 		add	r2, r5, r3	@ tmp309, _7, word
 463              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 464              		.loc 1 99 34 view .LVU105
 465 01e0 9E0808E0 		mul	r8, lr, r8	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 466              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 467              		.loc 1 99 99 view .LVU106
 468 01e4 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 469              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 470              		.loc 1 99 74 view .LVU107
 471 01e8 2884A0E1 		lsr	r8, r8, #8	@ tmp284, tmp282,
 472              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 473              		.loc 1 100 47 view .LVU108
 474 01ec 9E4828E0 		mla	r8, lr, r8, r4	@ tmp289, g_armwave_state.bitdepth_height, tmp284, tmp288
 475              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 476              		.loc 1 91 20 view .LVU109
 477 01f0 01E0A003 		moveq	lr, #1	@ tmp295,
 478 01f4 00E0A013 		movne	lr, #0	@ tmp295,
 479              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 480              		.loc 1 91 19 view .LVU110
 481 01f8 FF0053E3 		cmp	r3, #255	@ word,
 482 01fc 01E08E03 		orreq	lr, lr, #1	@,, tmp300, tmp295
 483              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 484              		.loc 1 100 47 view .LVU111
 485 0200 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_141, *_141
 486              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 487              		.loc 1 91 19 view .LVU112
 488 0204 00005EE3 		cmp	lr, #0	@ tmp300,
 489              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 490              		.loc 1 100 47 view .LVU113
 491 0208 013083E2 		add	r3, r3, #1	@ tmp292, *_141,
 492 020c 0830C1E7 		strb	r3, [r1, r8]	@ tmp292, *_141
 493              		.loc 1 101 17 is_stmt 1 view .LVU114
 494              	.LVL15:
  88:armwave.c     ****                 
 495              		.loc 1 88 17 view .LVU115
  91:armwave.c     ****                     continue;
 496              		.loc 1 91 17 view .LVU116
 497              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 498              		.loc 1 91 19 is_stmt 0 view .LVU117
 499 0210 0700001A 		bne	.L20		@,
 500              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 501              		.loc 1 99 34 view .LVU118
 502 0214 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 503              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 504              		.loc 1 99 99 view .LVU119
 505 0218 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 506              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 507              		.loc 1 99 34 view .LVU120
 508 021c 930707E0 		mul	r7, r3, r7	@ tmp303, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 509              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 510              		.loc 1 99 74 view .LVU121
 511 0220 2774A0E1 		lsr	r7, r7, #8	@ tmp305, tmp303,
 512              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 513              		.loc 1 100 47 view .LVU122
 514 0224 9E2727E0 		mla	r7, lr, r7, r2	@ tmp310, g_armwave_state.bitdepth_height, tmp305, tmp309
 515 0228 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_172, *_172
 516 022c 013083E2 		add	r3, r3, #1	@ tmp313, *_172,
 517 0230 0730C1E7 		strb	r3, [r1, r7]	@ tmp313, *_172
 518              		.loc 1 101 17 is_stmt 1 view .LVU123
 519              	.LVL16:
 520              	.L20:
 521              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 522              		.loc 1 83 9 is_stmt 0 view .LVU124
 523 0234 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 524              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 525              		.loc 1 83 37 view .LVU125
 526 0238 040080E2 		add	r0, r0, #4	@ yy, yy,
 527              	.LVL17:
 528              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 529              		.loc 1 83 9 view .LVU126
 530 023c 000053E1 		cmp	r3, r0	@ height, yy
 531 0240 B1FFFF8A 		bhi	.L17		@,
 532              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 533              		.loc 1 78 44 view .LVU127
 534 0244 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 535              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 78 5 view .LVU128
 537 0248 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 538              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 78 44 view .LVU129
 540 024c 012082E2 		add	r2, r2, #1	@ w, w,
 541              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 78 5 view .LVU130
 543 0250 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 544              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 78 44 view .LVU131
 546 0254 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 547              	.LVL18:
 548              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 549              		.loc 1 78 5 view .LVU132
 550 0258 A3FFFFBA 		blt	.L18		@,
 551              	.LVL19:
 552              	.L11:
 553              	@ armwave.c:105: }
 102:armwave.c     ****             }
 103:armwave.c     ****         }
 104:armwave.c     ****     }
 105:armwave.c     **** }
 554              		.loc 1 105 1 view .LVU133
 555 025c 14D08DE2 		add	sp, sp, #20	@,,
 556              		.cfi_def_cfa_offset 36
 557              		@ sp needed	@
 558 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 559              	.LVL20:
 560              	.L28:
 561              		.loc 1 105 1 view .LVU134
 562              		.align	2
 563              	.L27:
 564 0264 00000000 		.word	g_armwave_state
 565              		.cfi_endproc
 566              	.LFE59:
 568              		.align	2
 569              		.global	armwave_fill_pixbuf_scaled
 570              		.syntax unified
 571              		.arm
 572              		.fpu vfp
 574              	armwave_fill_pixbuf_scaled:
 575              	.LVL21:
 576              	.LFB60:
 106:armwave.c     **** 
 107:armwave.c     **** #if 0
 108:armwave.c     **** /*
 109:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 110:armwave.c     ****  */
 111:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 112:armwave.c     **** {
 113:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 114:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 115:armwave.c     ****     uint8_t r, g, b, value;
 116:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 117:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 118:armwave.c     ****     uint32_t offset;
 119:armwave.c     **** 
 120:armwave.c     ****     assert(out_buffer != NULL);
 121:armwave.c     **** 
 122:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 123:armwave.c     **** 
 124:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 125:armwave.c     **** 
 126:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 127:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 128:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 129:armwave.c     ****         // most normal waveforms.
 130:armwave.c     ****         wave_word = *base_32ptr++;
 131:armwave.c     **** 
 132:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 133:armwave.c     ****             for(i = 0; i < 4; i++) {
 134:armwave.c     ****                 value = wave_word & 0xff;
 135:armwave.c     ****                 wave_word >>= 8;
 136:armwave.c     **** 
 137:armwave.c     ****                 if(value != 0) {
 138:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 139:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 140:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 141:armwave.c     **** 
 142:armwave.c     ****                     r = MIN(rr, 255);
 143:armwave.c     ****                     g = MIN(gg, 255);
 144:armwave.c     ****                     b = MIN(bb, 255);
 145:armwave.c     **** 
 146:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 147:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 148:armwave.c     **** 
 149:armwave.c     ****                     // Is there a better way?
 150:armwave.c     ****                     nsub = n + i;
 151:armwave.c     ****                     xx = nsub & 0xff;
 152:armwave.c     ****                     yy = nsub >> 8;
 153:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 154:armwave.c     ****                     *(out_buffer_base + offset) = word;
 155:armwave.c     ****                 }
 156:armwave.c     ****             }
 157:armwave.c     ****         } 
 158:armwave.c     ****     }
 159:armwave.c     **** }
 160:armwave.c     **** #endif
 161:armwave.c     **** 
 162:armwave.c     **** /*
 163:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 164:armwave.c     ****  * Rows are repeated as necessary.
 165:armwave.c     ****  */
 166:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 167:armwave.c     **** {
 577              		.loc 1 167 1 is_stmt 1 view -0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 0, uses_anonymous_args = 0
 168:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 581              		.loc 1 168 5 view .LVU136
 169:armwave.c     ****     // uint32_t ysub;
 170:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 582              		.loc 1 170 5 view .LVU137
 171:armwave.c     ****     uint8_t r, g, b, value; 
 583              		.loc 1 171 5 view .LVU138
 172:armwave.c     ****     // uint8_t row;
 173:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 584              		.loc 1 173 5 view .LVU139
 585              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 586              		.loc 1 167 1 is_stmt 0 view .LVU140
 587 0268 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 588              		.cfi_def_cfa_offset 36
 589              		.cfi_offset 4, -36
 590              		.cfi_offset 5, -32
 591              		.cfi_offset 6, -28
 592              		.cfi_offset 7, -24
 593              		.cfi_offset 8, -20
 594              		.cfi_offset 9, -16
 595              		.cfi_offset 10, -12
 596              		.cfi_offset 11, -8
 597              		.cfi_offset 14, -4
 598              	@ armwave.c:177:     assert(out_buffer != NULL);
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 175:armwave.c     ****     uint32_t offset;
 176:armwave.c     **** 
 177:armwave.c     ****     assert(out_buffer != NULL);
 599              		.loc 1 177 5 view .LVU141
 600 026c 000050E3 		cmp	r0, #0	@ out_buffer
 601              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 602              		.loc 1 173 15 view .LVU142
 603 0270 44619FE5 		ldr	r6, .L51	@ tmp203,
 604              	@ armwave.c:167: {
 167:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 605              		.loc 1 167 1 view .LVU143
 606 0274 0CD04DE2 		sub	sp, sp, #12	@,,
 607              		.cfi_def_cfa_offset 48
 608              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 609              		.loc 1 173 15 view .LVU144
 610 0278 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 611              	.LVL22:
 174:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 612              		.loc 1 174 5 is_stmt 1 view .LVU145
 175:armwave.c     **** 
 613              		.loc 1 175 5 view .LVU146
 614              		.loc 1 177 5 view .LVU147
 615 027c 4900000A 		beq	.L48		@,
 178:armwave.c     **** 
 179:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 616              		.loc 1 179 5 view .LVU148
 617              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 618              		.loc 1 179 10 is_stmt 0 view .LVU149
 619 0280 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 620 0284 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 621              	.LVL23:
 180:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 181:armwave.c     **** 
 182:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 622              		.loc 1 182 5 is_stmt 1 view .LVU150
 623              		.loc 1 182 5 is_stmt 0 view .LVU151
 624 0288 000058E3 		cmp	r8, #0	@ npix,
 625 028c 0C0000DA 		ble	.L29		@,
 626              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 183:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 184:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 185:armwave.c     ****         // most normal waveforms.
 186:armwave.c     ****         wave_word = *base_32ptr++;
 187:armwave.c     **** 
 188:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 189:armwave.c     ****             for(w = 0; w < 4; w++) {
 190:armwave.c     ****                 value = wave_word & 0xff;
 191:armwave.c     ****                 wave_word >>= 8;
 192:armwave.c     **** 
 193:armwave.c     ****                 if(value != 0) {
 194:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 195:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 627              		.loc 1 195 52 view .LVU152
 628 0290 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 629              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 630              		.loc 1 194 52 view .LVU153
 631 0294 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 632              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 197:armwave.c     **** 
 198:armwave.c     ****                     r = MIN(rr, 255);
 199:armwave.c     ****                     g = MIN(gg, 255);
 200:armwave.c     ****                     b = MIN(bb, 255);
 201:armwave.c     **** 
 202:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 203:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 204:armwave.c     **** 
 205:armwave.c     ****                     // Do line scaling as necessary.
 206:armwave.c     ****                     /*
 207:armwave.c     ****                     nsub = n + w;
 208:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 209:armwave.c     ****                     xx = (nsub >> 8);
 210:armwave.c     **** 
 211:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 212:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 213:armwave.c     ****                         *(out_buffer_base + offset) = word;
 214:armwave.c     ****                     }
 215:armwave.c     ****                     */
 216:armwave.c     **** 
 217:armwave.c     ****                     nsub = n + w;
 218:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 633              		.loc 1 218 57 view .LVU154
 634 0298 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 635              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 636              		.loc 1 195 52 view .LVU155
 637 029c 00308DE5 		str	r3, [sp]	@ _10, %sfp
 638              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 639              		.loc 1 196 52 view .LVU156
 640 02a0 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 641              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 642              		.loc 1 182 11 view .LVU157
 643 02a4 0010A0E3 		mov	r1, #0	@ n,
 644              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 645              		.loc 1 196 52 view .LVU158
 646 02a8 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 647              	.LVL24:
 648              	.L36:
 186:armwave.c     **** 
 649              		.loc 1 186 9 is_stmt 1 view .LVU159
 650              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 651              		.loc 1 186 19 is_stmt 0 view .LVU160
 652 02ac 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 653              	.LVL25:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 654              		.loc 1 188 9 is_stmt 1 view .LVU161
 655              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 656              		.loc 1 188 11 is_stmt 0 view .LVU162
 657 02b0 000053E3 		cmp	r3, #0	@ wave_word,
 658 02b4 0400001A 		bne	.L49		@,
 659              	.L32:
 660              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 661              		.loc 1 182 28 view .LVU163
 662 02b8 041081E2 		add	r1, r1, #4	@ n, n,
 663              	.LVL26:
 664              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 182 5 view .LVU164
 666 02bc 010058E1 		cmp	r8, r1	@ npix, n
 667 02c0 F9FFFFCA 		bgt	.L36		@,
 668              	.LVL27:
 669              	.L29:
 670              	@ armwave.c:230: }
 219:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 220:armwave.c     ****                     xx = (nsub >> 8);
 221:armwave.c     **** 
 222:armwave.c     ****                     for(y = yy; y < ye; y++) {
 223:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 224:armwave.c     ****                         *(out_buffer_base + offset) = word;
 225:armwave.c     ****                     }
 226:armwave.c     ****                 }
 227:armwave.c     ****             }
 228:armwave.c     ****         }
 229:armwave.c     ****     }
 230:armwave.c     **** }
 671              		.loc 1 230 1 view .LVU165
 672 02c4 0CD08DE2 		add	sp, sp, #12	@,,
 673              		.cfi_remember_state
 674              		.cfi_def_cfa_offset 36
 675              		@ sp needed	@
 676 02c8 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 677              	.LVL28:
 678              	.L49:
 679              		.cfi_restore_state
 680              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 681              		.loc 1 193 19 view .LVU166
 682 02cc FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 683              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 684              		.loc 1 189 19 view .LVU167
 685 02d0 0070A0E3 		mov	r7, #0	@ w,
 686              	.LVL29:
 190:armwave.c     ****                 wave_word >>= 8;
 687              		.loc 1 190 17 is_stmt 1 view .LVU168
 191:armwave.c     **** 
 688              		.loc 1 191 17 view .LVU169
 689              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 690              		.loc 1 191 27 is_stmt 0 view .LVU170
 691 02d4 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 692              	.LVL30:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 693              		.loc 1 193 17 is_stmt 1 view .LVU171
 694              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 695              		.loc 1 193 19 is_stmt 0 view .LVU172
 696 02d8 0500001A 		bne	.L50		@,
 697              	.L33:
 698              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 699              		.loc 1 189 32 view .LVU173
 700 02dc 017087E2 		add	r7, r7, #1	@ w, w,
 701              	.LVL31:
 702              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 189 13 view .LVU174
 704 02e0 040057E3 		cmp	r7, #4	@ w,
 705 02e4 F3FFFF0A 		beq	.L32		@,
 190:armwave.c     ****                 wave_word >>= 8;
 706              		.loc 1 190 17 is_stmt 1 view .LVU175
 707              	.LVL32:
 191:armwave.c     **** 
 708              		.loc 1 191 17 view .LVU176
 709              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 710              		.loc 1 193 19 is_stmt 0 view .LVU177
 711 02e8 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 712              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 713              		.loc 1 191 27 view .LVU178
 714 02ec 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 715              	.LVL33:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 716              		.loc 1 193 17 is_stmt 1 view .LVU179
 717              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 718              		.loc 1 193 19 is_stmt 0 view .LVU180
 719 02f0 F9FFFF0A 		beq	.L33		@,
 720              	.L50:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 721              		.loc 1 194 21 is_stmt 1 view .LVU181
 722              	.LVL34:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 723              		.loc 1 195 21 view .LVU182
 196:armwave.c     **** 
 724              		.loc 1 196 21 view .LVU183
 198:armwave.c     ****                     g = MIN(gg, 255);
 725              		.loc 1 198 21 view .LVU184
 199:armwave.c     ****                     b = MIN(bb, 255);
 726              		.loc 1 199 21 view .LVU185
 200:armwave.c     **** 
 727              		.loc 1 200 21 view .LVU186
 203:armwave.c     **** 
 728              		.loc 1 203 21 view .LVU187
 729              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 730              		.loc 1 196 55 is_stmt 0 view .LVU188
 731 02f4 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 732 02f8 075081E0 		add	r5, r1, r7	@ _120, n, w
 733 02fc 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 734              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 735              		.loc 1 218 32 view .LVU189
 736 0300 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 737              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 738              		.loc 1 219 41 view .LVU190
 739 0304 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 740              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 741              		.loc 1 218 40 view .LVU191
 742 0308 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 743              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 744              		.loc 1 219 41 view .LVU192
 745 030c 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 746              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 747              		.loc 1 195 55 view .LVU193
 748 0310 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 749              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 750              		.loc 1 196 24 view .LVU194
 751 0314 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 752              	.LVL35:
 753              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 754              		.loc 1 218 40 view .LVU195
 755 0318 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 756              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 757              		.loc 1 219 46 view .LVU196
 758 031c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 759              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 760              		.loc 1 195 55 view .LVU197
 761 0320 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 762              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 763              		.loc 1 194 55 view .LVU198
 764 0324 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 765              	.LVL36:
 766              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 767              		.loc 1 200 25 view .LVU199
 768 0328 FF005AE3 		cmp	r10, #255	@ bb,
 769              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 195 24 view .LVU200
 771 032c 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 772              	.LVL37:
 773              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 218 40 view .LVU201
 775 0330 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 776              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 777              		.loc 1 219 46 view .LVU202
 778 0334 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 779              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 780              		.loc 1 194 24 view .LVU203
 781 0338 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 782              	.LVL38:
 783              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 784              		.loc 1 200 25 view .LVU204
 785 033c FFA0A0A3 		movge	r10, #255	@ bb,
 786              	.LVL39:
 787              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 788              		.loc 1 199 25 view .LVU205
 789 0340 FF0054E3 		cmp	r4, #255	@ gg,
 790 0344 FF40A0A3 		movge	r4, #255	@ gg,
 791              	.LVL40:
 792              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 793              		.loc 1 198 25 view .LVU206
 794 0348 FF005CE3 		cmp	ip, #255	@ rr,
 795              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 796              		.loc 1 203 56 view .LVU207
 797 034c 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 798              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 799              		.loc 1 218 24 view .LVU208
 800 0350 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 801              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 802              		.loc 1 198 25 view .LVU209
 803 0354 FFC0A0A3 		movge	ip, #255	@ rr,
 804              	.LVL41:
 805              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 806              		.loc 1 203 44 view .LVU210
 807 0358 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 808 035c FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 809              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 810              		.loc 1 203 56 view .LVU211
 811 0360 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 812              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 813              		.loc 1 203 51 view .LVU212
 814 0364 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 815              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 816              		.loc 1 203 62 view .LVU213
 817 0368 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 818 036c 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 819              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 820              		.loc 1 218 24 view .LVU214
 821 0370 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 822              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 823              		.loc 1 219 24 view .LVU215
 824 0374 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 825              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 826              		.loc 1 203 26 view .LVU216
 827 0378 FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 828              	.LVL42:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 829              		.loc 1 217 21 is_stmt 1 view .LVU217
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 830              		.loc 1 218 21 view .LVU218
 219:armwave.c     ****                     xx = (nsub >> 8);
 831              		.loc 1 219 21 view .LVU219
 832              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 833              		.loc 1 220 32 is_stmt 0 view .LVU220
 834 037c 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 835              	.LVL43:
 836              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 837              		.loc 1 219 24 view .LVU221
 838 0380 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 839              	.LVL44:
 220:armwave.c     **** 
 840              		.loc 1 220 21 is_stmt 1 view .LVU222
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 841              		.loc 1 222 21 view .LVU223
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 842              		.loc 1 222 21 is_stmt 0 view .LVU224
 843 0384 090052E1 		cmp	r2, r9	@ yy, ye
 844 0388 D3FFFF2A 		bcs	.L33		@,
 845              	.LVL45:
 846              	.L34:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 847              		.loc 1 223 25 is_stmt 1 discriminator 3 view .LVU225
 224:armwave.c     ****                     }
 848              		.loc 1 224 25 discriminator 3 view .LVU226
 849              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 850              		.loc 1 223 43 is_stmt 0 discriminator 3 view .LVU227
 851 038c 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 852              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 853              		.loc 1 224 43 discriminator 3 view .LVU228
 854 0390 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 855              	.LVL46:
 856              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 857              		.loc 1 222 42 discriminator 3 view .LVU229
 858 0394 012082E2 		add	r2, r2, #1	@ yy, yy,
 859              	.LVL47:
 860              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 222 21 discriminator 3 view .LVU230
 862 0398 020059E1 		cmp	r9, r2	@ ye, yy
 863              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 864              		.loc 1 224 53 discriminator 3 view .LVU231
 865 039c 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 866              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 867              		.loc 1 222 21 discriminator 3 view .LVU232
 868 03a0 F9FFFF1A 		bne	.L34		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 869              		.loc 1 222 21 discriminator 3 view .LVU233
 870 03a4 CCFFFFEA 		b	.L33		@
 871              	.LVL48:
 872              	.L48:
 177:armwave.c     **** 
 873              		.loc 1 177 5 is_stmt 1 discriminator 1 view .LVU234
 874 03a8 10309FE5 		ldr	r3, .L51+4	@,
 875 03ac B120A0E3 		mov	r2, #177	@,
 876 03b0 0C109FE5 		ldr	r1, .L51+8	@,
 877 03b4 0C009FE5 		ldr	r0, .L51+12	@,
 878              	.LVL49:
 177:armwave.c     **** 
 879              		.loc 1 177 5 is_stmt 0 discriminator 1 view .LVU235
 880 03b8 FEFFFFEB 		bl	__assert_fail		@
 881              	.LVL50:
 882              	.L52:
 177:armwave.c     **** 
 883              		.loc 1 177 5 discriminator 1 view .LVU236
 884              		.align	2
 885              	.L51:
 886 03bc 00000000 		.word	g_armwave_state
 887 03c0 00000000 		.word	.LANCHOR0
 888 03c4 20000000 		.word	.LC2
 889 03c8 2C000000 		.word	.LC3
 890              		.cfi_endproc
 891              	.LFE60:
 893              		.align	2
 894              		.global	armwave_setup_render
 895              		.syntax unified
 896              		.arm
 897              		.fpu vfp
 899              	armwave_setup_render:
 900              	.LVL51:
 901              	.LFB61:
 231:armwave.c     **** 
 232:armwave.c     **** /*
 233:armwave.c     ****  * Setup the renderer with passed parameters.
 234:armwave.c     ****  */
 235:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 236:armwave.c     **** {
 902              		.loc 1 236 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 12, pretend = 0, frame = 0
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 237:armwave.c     ****     uint32_t length, xx;
 906              		.loc 1 237 5 view .LVU238
 238:armwave.c     ****     float points_per_pixel;
 907              		.loc 1 238 5 view .LVU239
 239:armwave.c     **** 
 240:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 908              		.loc 1 240 5 view .LVU240
 909              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 910              		.loc 1 236 1 is_stmt 0 view .LVU241
 911 03cc F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 912              		.cfi_def_cfa_offset 28
 913              		.cfi_offset 4, -28
 914              		.cfi_offset 5, -24
 915              		.cfi_offset 6, -20
 916              		.cfi_offset 7, -16
 917              		.cfi_offset 8, -12
 918              		.cfi_offset 9, -8
 919              		.cfi_offset 14, -4
 920 03d0 028B2DED 		vpush.64	{d8}	@
 921              		.cfi_def_cfa_offset 36
 922              		.cfi_offset 80, -36
 923              		.cfi_offset 81, -32
 924 03d4 0040A0E1 		mov	r4, r0	@ start_point, start_point
 925 03d8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 926 03dc 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 927 03e0 14D04DE2 		sub	sp, sp, #20	@,,
 928              		.cfi_def_cfa_offset 56
 929              	@ armwave.c:236: {
 236:armwave.c     ****     uint32_t length, xx;
 930              		.loc 1 236 1 view .LVU242
 931 03e4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 932 03e8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 933 03ec 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 934              	@ armwave.c:240:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 935              		.loc 1 240 5 view .LVU243
 936 03f0 00308DE5 		str	r3, [sp]	@ wave_stride,
 937 03f4 F460CDE1 		strd	r6, [sp, #4]	@,,
 938 03f8 0230A0E1 		mov	r3, r2	@, waves_max
 939              	.LVL52:
 940              		.loc 1 240 5 view .LVU244
 941 03fc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 942 0400 0120A0E1 		mov	r2, r1	@, end_point
 943              	.LVL53:
 944              		.loc 1 240 5 view .LVU245
 945 0404 0010A0E1 		mov	r1, r0	@, start_point
 946              	.LVL54:
 947              		.loc 1 240 5 view .LVU246
 948 0408 D0019FE5 		ldr	r0, .L67+12	@,
 949              	.LVL55:
 950              		.loc 1 240 5 view .LVU247
 951 040c FEFFFFEB 		bl	printf		@
 952              	.LVL56:
 241:armwave.c     **** 
 242:armwave.c     ****     // TODO these asserts should instead raise PyExc
 243:armwave.c     ****     assert(start_point < end_point);
 953              		.loc 1 243 5 is_stmt 1 view .LVU248
 954 0410 050054E1 		cmp	r4, r5	@ start_point, end_point
 955 0414 5F00002A 		bcs	.L64		@,
 244:armwave.c     **** 
 245:armwave.c     ****     /*
 246:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 247:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 248:armwave.c     **** 
 249:armwave.c     ****     if(target_height == 256) {
 250:armwave.c     ****         g_armwave_state.row_shift = 8;
 251:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 252:armwave.c     ****     } else if(target_height == 512) {
 253:armwave.c     ****         g_armwave_state.row_shift = 9;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 255:armwave.c     ****     } else if(target_height == 1024) {
 256:armwave.c     ****         g_armwave_state.row_shift = 10;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 258:armwave.c     ****     } else if(target_height == 2048) {
 259:armwave.c     ****         g_armwave_state.row_shift = 11;
 260:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 261:armwave.c     ****     }
 262:armwave.c     ****     */
 263:armwave.c     **** 
 264:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 265:armwave.c     ****     g_armwave_state.xstride = target_height;
 956              		.loc 1 265 5 view .LVU249
 957              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 267:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 268:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 269:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 270:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 271:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 272:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 273:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 274:armwave.c     ****     g_armwave_state.target_width = target_width;
 275:armwave.c     ****     g_armwave_state.target_height = target_height;
 276:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 958              		.loc 1 276 45 is_stmt 0 view .LVU250
 959 0418 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 960              	.LVL57:
 961              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 962              		.loc 1 266 49 view .LVU251
 963 041c 6C6A9FED 		vldr.32	s12, .L67	@ tmp174,
 964              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 277:armwave.c     **** 
 278:armwave.c     ****     // Calculate compound scaler
 279:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 280:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 965              		.loc 1 280 48 view .LVU252
 966 0420 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 967              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 968              		.loc 1 280 79 view .LVU253
 969 0424 6B6ADFED 		vldr.32	s13, .L67+4	@ tmp198,
 970              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 971              		.loc 1 273 90 view .LVU254
 972 0428 043086E2 		add	r3, r6, #4	@ tmp185, target_width,
 973              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 974              		.loc 1 265 29 view .LVU255
 975 042c B0419FE5 		ldr	r4, .L67+16	@ tmp241,
 976              	.LVL58:
 977              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 978              		.loc 1 280 48 view .LVU256
 979 0430 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp195, _13
 980              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 981              		.loc 1 266 49 view .LVU257
 982 0434 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 983              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 984              		.loc 1 271 42 view .LVU258
 985 0438 970601E0 		mul	r1, r7, r6	@ tmp182, target_height, target_width
 986              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 987              		.loc 1 273 74 view .LVU259
 988 043c 033383E0 		add	r3, r3, r3, lsl #6	@ tmp188, tmp185, tmp185,
 989              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 990              		.loc 1 266 49 view .LVU260
 991 0440 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp173, target_height
 992              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 993              		.loc 1 280 48 view .LVU261
 994 0444 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 995              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 996              		.loc 1 273 74 view .LVU262
 997 0448 0331A0E1 		lsl	r3, r3, #2	@ tmp189, tmp188,
 998              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 999              		.loc 1 272 37 view .LVU263
 1000 044c 012CA0E3 		mov	r2, #256	@ tmp184,
 1001              	@ armwave.c:271:     g_armwave_state.size = target_height * target_width;
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1002              		.loc 1 271 26 view .LVU264
 1003 0450 541084E5 		str	r1, [r4, #84]	@ tmp182, g_armwave_state.size
 1004              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1005              		.loc 1 280 48 view .LVU265
 1006 0454 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp194, target_width
 1007              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 281:armwave.c     **** 
 282:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1008              		.loc 1 282 5 view .LVU266
 1009 0458 0310A0E1 		mov	r1, r3	@, tmp189
 1010              	@ armwave.c:272:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1011              		.loc 1 272 37 view .LVU267
 1012 045c 402084E5 		str	r2, [r4, #64]	@ tmp184, g_armwave_state.bitdepth_height
 1013              	@ armwave.c:273:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 1014              		.loc 1 273 34 view .LVU268
 1015 0460 503084E5 		str	r3, [r4, #80]	@ tmp189, g_armwave_state.ch_buff_size
 1016              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1017              		.loc 1 282 5 view .LVU269
 1018 0464 7C019FE5 		ldr	r0, .L67+20	@,
 1019              	@ armwave.c:265:     g_armwave_state.xstride = target_height;
 265:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1020              		.loc 1 265 29 view .LVU270
 1021 0468 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1022              		.loc 1 266 5 is_stmt 1 view .LVU271
 1023              	@ armwave.c:268:     g_armwave_state.wave_stride = wave_stride;
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1024              		.loc 1 268 33 is_stmt 0 view .LVU272
 1025 046c 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1026              	@ armwave.c:269:     g_armwave_state.waves_max = waves_max;
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1027              		.loc 1 269 31 view .LVU273
 1028 0470 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1029              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1030              		.loc 1 280 48 view .LVU274
 1031 0474 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp196, tmp194, tmp195
 1032              	@ armwave.c:270:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1033              		.loc 1 270 27 view .LVU275
 1034 0478 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1035              	@ armwave.c:275:     g_armwave_state.target_height = target_height;
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1036              		.loc 1 275 35 view .LVU276
 1037 047c F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1038              	@ armwave.c:276:     g_armwave_state.wave_length = end_point - start_point;
 276:armwave.c     **** 
 1039              		.loc 1 276 33 view .LVU277
 1040 0480 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1041              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1042              		.loc 1 266 49 view .LVU278
 1043 0484 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp173, tmp174
 1044              	@ armwave.c:280:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 280:armwave.c     **** 
 1045              		.loc 1 280 79 view .LVU279
 1046 0488 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, tmp198
 1047              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1048              		.loc 1 279 42 view .LVU280
 1049 048c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp197
 1050              	@ armwave.c:266:     g_armwave_state.vscale_frac = target_height / 255.0f;
 266:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1051              		.loc 1 266 33 view .LVU281
 1052 0490 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1053              		.loc 1 267 5 is_stmt 1 view .LVU282
 1054              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1055              		.loc 1 279 42 is_stmt 0 view .LVU283
 1056 0494 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1057              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1058              		.loc 1 267 30 view .LVU284
 1059 0498 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp177, _3
 1060              	@ armwave.c:282:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1061              		.loc 1 282 5 view .LVU285
 1062 049c 0C30A0E1 		mov	r3, ip	@, _19
 1063 04a0 0C20A0E1 		mov	r2, ip	@, tmp3
 1064              	@ armwave.c:279:     g_armwave_state.cmp_x_bitdepth_scale = \
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1065              		.loc 1 279 42 view .LVU286
 1066 04a4 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1067              	@ armwave.c:267:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 267:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1068              		.loc 1 267 30 view .LVU287
 1069 04a8 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp177, g_armwave_state.vscale
 268:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1070              		.loc 1 268 5 is_stmt 1 view .LVU288
 269:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1071              		.loc 1 269 5 view .LVU289
 270:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1072              		.loc 1 270 5 view .LVU290
 271:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1073              		.loc 1 271 5 view .LVU291
 272:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1074              		.loc 1 272 5 view .LVU292
 273:armwave.c     ****     g_armwave_state.target_width = target_width;
 1075              		.loc 1 273 5 view .LVU293
 274:armwave.c     ****     g_armwave_state.target_height = target_height;
 1076              		.loc 1 274 5 view .LVU294
 275:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1077              		.loc 1 275 5 view .LVU295
 276:armwave.c     **** 
 1078              		.loc 1 276 5 view .LVU296
 279:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1079              		.loc 1 279 5 view .LVU297
 1080              		.loc 1 282 5 view .LVU298
 1081 04ac FEFFFFEB 		bl	printf		@
 1082              	.LVL59:
 283:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 284:armwave.c     **** 
 285:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 286:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 287:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 288:armwave.c     ****     g_armwave_state.slice_height = 64;  
 1083              		.loc 1 288 5 view .LVU299
 1084              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 289:armwave.c     **** 
 290:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1085              		.loc 1 290 23 is_stmt 0 view .LVU300
 1086 04b0 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1087              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1088              		.loc 1 288 34 view .LVU301
 1089 04b4 4030A0E3 		mov	r3, #64	@ tmp202,
 1090              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1091              		.loc 1 290 7 view .LVU302
 1092 04b8 000050E3 		cmp	r0, #0	@ _20,
 1093              	@ armwave.c:288:     g_armwave_state.slice_height = 64;  
 288:armwave.c     **** 
 1094              		.loc 1 288 34 view .LVU303
 1095 04bc 443084E5 		str	r3, [r4, #68]	@ tmp202, g_armwave_state.slice_height
 1096              		.loc 1 290 5 is_stmt 1 view .LVU304
 1097              	@ armwave.c:290:     if(g_armwave_state.ch1_buffer != NULL)
 1098              		.loc 1 290 7 is_stmt 0 view .LVU305
 1099 04c0 0000000A 		beq	.L55		@,
 291:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1100              		.loc 1 291 9 is_stmt 1 view .LVU306
 1101 04c4 FEFFFFEB 		bl	free		@
 1102              	.LVL60:
 1103              	.L55:
 292:armwave.c     **** 
 293:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1104              		.loc 1 293 5 view .LVU307
 1105              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1106              		.loc 1 293 34 is_stmt 0 view .LVU308
 1107 04c8 0110A0E3 		mov	r1, #1	@,
 1108 04cc 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1109 04d0 FEFFFFEB 		bl	calloc		@
 1110              	.LVL61:
 1111              	@ armwave.c:295:     assert(g_armwave_state.ch1_buffer != NULL);
 294:armwave.c     **** 
 295:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1112              		.loc 1 295 5 view .LVU309
 1113 04d4 000050E3 		cmp	r0, #0	@ _23,
 1114              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1115              		.loc 1 293 34 view .LVU310
 1116 04d8 0070A0E1 		mov	r7, r0	@ _23,
 1117              	@ armwave.c:293:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 293:armwave.c     **** 
 1118              		.loc 1 293 32 view .LVU311
 1119 04dc 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1120              		.loc 1 295 5 is_stmt 1 view .LVU312
 1121 04e0 3600000A 		beq	.L65		@,
 296:armwave.c     **** 
 297:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 298:armwave.c     ****     length = end_point - start_point;
 1122              		.loc 1 298 5 view .LVU313
 1123              	.LVL62:
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1124              		.loc 1 299 5 view .LVU314
 1125              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1126              		.loc 1 299 34 is_stmt 0 view .LVU315
 1127 04e4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1128              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 1129              		.loc 1 299 22 view .LVU316
 1130 04e8 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1131              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1132              		.loc 1 300 60 view .LVU317
 1133 04ec 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp251, g_armwave_state.slice_height
 1134              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1135              		.loc 1 301 40 view .LVU318
 1136 04f0 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1137              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1138              		.loc 1 299 34 view .LVU319
 1139 04f4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp214, target_width
 1140              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1141              		.loc 1 299 22 view .LVU320
 1142 04f8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp213, _13
 1143              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1144              		.loc 1 300 60 view .LVU321
 1145 04fc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp217, tmp251
 1146              	@ armwave.c:299:     points_per_pixel = length / ((float)(target_width));
 299:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1147              		.loc 1 299 22 view .LVU322
 1148 0500 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp213, tmp214
 1149              	.LVL63:
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1150              		.loc 1 300 5 is_stmt 1 view .LVU323
 1151              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1152              		.loc 1 300 60 is_stmt 0 view .LVU324
 1153 0504 087A67EE 		vmul.f32	s15, s14, s16	@ tmp219, tmp217, points_per_pixel
 1154              	@ armwave.c:300:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 300:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1155              		.loc 1 300 41 view .LVU325
 1156 0508 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp220, tmp219
 1157 050c 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp220, g_armwave_state.slice_record_height
 1158              		.loc 1 301 5 is_stmt 1 view .LVU326
 1159              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1160              		.loc 1 301 40 is_stmt 0 view .LVU327
 1161 0510 FEFFFFEB 		bl	malloc		@
 1162              	.LVL64:
 1163              	@ armwave.c:303:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 302:armwave.c     **** 
 303:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1164              		.loc 1 303 5 view .LVU328
 1165 0514 000050E3 		cmp	r0, #0	@ _31,
 1166              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1167              		.loc 1 301 40 view .LVU329
 1168 0518 0060A0E1 		mov	r6, r0	@ _31,
 1169              	@ armwave.c:301:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1170              		.loc 1 301 38 view .LVU330
 1171 051c 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1172              		.loc 1 303 5 is_stmt 1 view .LVU331
 1173 0520 2100000A 		beq	.L66		@,
 1174              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 304:armwave.c     **** 
 305:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1175              		.loc 1 306 54 is_stmt 0 view .LVU332
 1176 0524 2C7ADFED 		vldr.32	s15, .L67+8	@ tmp229,
 1177 0528 02C040E2 		sub	ip, r0, #2	@ ivtmp.65, _31,
 1178              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1179              		.loc 1 305 12 view .LVU333
 1180 052c 0030A0E3 		mov	r3, #0	@ xx,
 1181              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1182              		.loc 1 306 54 view .LVU334
 1183 0530 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1184              	.L58:
 1185              	.LVL65:
 1186              		.loc 1 306 9 is_stmt 1 discriminator 3 view .LVU335
 1187              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1188              		.loc 1 306 74 is_stmt 0 discriminator 3 view .LVU336
 1189 0534 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1190              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1191              		.loc 1 305 32 discriminator 3 view .LVU337
 1192 0538 013083E2 		add	r3, r3, #1	@ xx, xx,
 1193              	.LVL66:
 1194              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1195              		.loc 1 305 5 discriminator 3 view .LVU338
 1196 053c 030055E1 		cmp	r5, r3	@ _13, xx
 1197              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1198              		.loc 1 306 74 discriminator 3 view .LVU339
 1199 0540 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1200 0544 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1201              	@ armwave.c:306:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1202              		.loc 1 306 46 discriminator 3 view .LVU340
 1203 0548 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1204 054c 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1205 0550 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1206              	@ armwave.c:305:     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1207              		.loc 1 305 5 discriminator 3 view .LVU341
 1208 0554 F6FFFF1A 		bne	.L58		@,
 307:armwave.c     **** 
 308:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 309:armwave.c     ****     }
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1209              		.loc 1 311 5 is_stmt 1 view .LVU342
 1210              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1211              		.loc 1 311 34 is_stmt 0 view .LVU343
 1212 0558 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1213 055c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1214 0560 FEFFFFEB 		bl	malloc		@
 1215              	.LVL67:
 1216              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1217              		.loc 1 313 5 view .LVU344
 1218 0564 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1219 0568 0620A0E1 		mov	r2, r6	@, _31
 1220 056c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1221 0570 0710A0E1 		mov	r1, r7	@, _23
 1222              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1223              		.loc 1 311 34 view .LVU345
 1224 0574 00C0A0E1 		mov	ip, r0	@ tmp236,
 1225              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1226              		.loc 1 313 5 view .LVU346
 1227 0578 0030A0E1 		mov	r3, r0	@, tmp236
 1228              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1229              		.loc 1 311 32 view .LVU347
 1230 057c 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1231              		.loc 1 313 5 is_stmt 1 view .LVU348
 1232 0580 64009FE5 		ldr	r0, .L67+24	@,
 1233 0584 FEFFFFEB 		bl	printf		@
 1234              	.LVL68:
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****     malloc_stats();
 1235              		.loc 1 319 5 view .LVU349
 1236              	@ armwave.c:320: }
 320:armwave.c     **** }
 1237              		.loc 1 320 1 is_stmt 0 view .LVU350
 1238 0588 14D08DE2 		add	sp, sp, #20	@,,
 1239              		.cfi_remember_state
 1240              		.cfi_def_cfa_offset 36
 1241              		@ sp needed	@
 1242 058c 028BBDEC 		vldm	sp!, {d8}	@
 1243              		.cfi_restore 80
 1244              		.cfi_restore 81
 1245              		.cfi_def_cfa_offset 28
 1246              	.LVL69:
 1247              		.loc 1 320 1 view .LVU351
 1248 0590 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1249              		.cfi_restore 14
 1250              		.cfi_restore 9
 1251              		.cfi_restore 8
 1252              		.cfi_restore 7
 1253              		.cfi_restore 6
 1254              		.cfi_restore 5
 1255              		.cfi_restore 4
 1256              		.cfi_def_cfa_offset 0
 1257              	.LVL70:
 1258              	@ armwave.c:319:     malloc_stats();
 319:armwave.c     **** }
 1259              		.loc 1 319 5 view .LVU352
 1260 0594 FEFFFFEA 		b	malloc_stats		@
 1261              	.LVL71:
 1262              	.L64:
 1263              		.cfi_restore_state
 243:armwave.c     **** 
 1264              		.loc 1 243 5 is_stmt 1 discriminator 1 view .LVU353
 1265 0598 50309FE5 		ldr	r3, .L67+28	@,
 1266 059c F320A0E3 		mov	r2, #243	@,
 1267 05a0 4C109FE5 		ldr	r1, .L67+32	@,
 1268 05a4 4C009FE5 		ldr	r0, .L67+36	@,
 1269 05a8 FEFFFFEB 		bl	__assert_fail		@
 1270              	.LVL72:
 1271              	.L66:
 303:armwave.c     **** 
 1272              		.loc 1 303 5 discriminator 1 view .LVU354
 1273 05ac 3C309FE5 		ldr	r3, .L67+28	@,
 1274 05b0 44209FE5 		ldr	r2, .L67+40	@,
 1275 05b4 38109FE5 		ldr	r1, .L67+32	@,
 1276 05b8 40009FE5 		ldr	r0, .L67+44	@,
 1277 05bc FEFFFFEB 		bl	__assert_fail		@
 1278              	.LVL73:
 1279              	.L65:
 295:armwave.c     **** 
 1280              		.loc 1 295 5 discriminator 1 view .LVU355
 1281 05c0 28309FE5 		ldr	r3, .L67+28	@,
 1282 05c4 38209FE5 		ldr	r2, .L67+48	@,
 1283 05c8 24109FE5 		ldr	r1, .L67+32	@,
 1284 05cc 34009FE5 		ldr	r0, .L67+52	@,
 1285 05d0 FEFFFFEB 		bl	__assert_fail		@
 1286              	.LVL74:
 1287              	.L68:
 1288              		.align	2
 1289              	.L67:
 1290 05d4 00007F43 		.word	1132396544
 1291 05d8 00008043 		.word	1132462080
 1292 05dc 0000803F 		.word	1065353216
 1293 05e0 40000000 		.word	.LC4
 1294 05e4 00000000 		.word	g_armwave_state
 1295 05e8 84000000 		.word	.LC6
 1296 05ec 08010000 		.word	.LC9
 1297 05f0 1C000000 		.word	.LANCHOR0+28
 1298 05f4 20000000 		.word	.LC2
 1299 05f8 6C000000 		.word	.LC5
 1300 05fc 2F010000 		.word	303
 1301 0600 DC000000 		.word	.LC8
 1302 0604 27010000 		.word	295
 1303 0608 B8000000 		.word	.LC7
 1304              		.cfi_endproc
 1305              	.LFE61:
 1307              		.align	2
 1308              		.global	armwave_set_wave_pointer
 1309              		.syntax unified
 1310              		.arm
 1311              		.fpu vfp
 1313              	armwave_set_wave_pointer:
 1314              	.LVL75:
 1315              	.LFB62:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1316              		.loc 1 327 1 view -0
 1317              		.cfi_startproc
 1318              		@ args = 0, pretend = 0, frame = 0
 1319              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1320              		.loc 1 328 5 view .LVU357
 1321 060c 000050E3 		cmp	r0, #0	@ wave_buffer
 1322              		.loc 1 328 5 is_stmt 0 view .LVU358
 1323 0610 0200000A 		beq	.L74		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1324              		.loc 1 329 5 is_stmt 1 view .LVU359
 1325              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1326              		.loc 1 329 33 is_stmt 0 view .LVU360
 1327 0614 1C309FE5 		ldr	r3, .L75	@ tmp115,
 1328 0618 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1329 061c 1EFF2FE1 		bx	lr	@
 1330              	.L74:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1331              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU361
 1332              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1333              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU362
 1334 0620 10402DE9 		push	{r4, lr}	@
 1335              		.cfi_def_cfa_offset 8
 1336              		.cfi_offset 4, -8
 1337              		.cfi_offset 14, -4
 1338              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1339              		.loc 1 328 5 discriminator 1 view .LVU363
 1340 0624 522FA0E3 		mov	r2, #328	@,
 1341 0628 0C309FE5 		ldr	r3, .L75+4	@,
 1342 062c 0C109FE5 		ldr	r1, .L75+8	@,
 1343 0630 0C009FE5 		ldr	r0, .L75+12	@,
 1344              	.LVL76:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1345              		.loc 1 328 5 discriminator 1 view .LVU364
 1346 0634 FEFFFFEB 		bl	__assert_fail		@
 1347              	.LVL77:
 1348              	.L76:
 1349              		.align	2
 1350              	.L75:
 1351 0638 00000000 		.word	g_armwave_state
 1352 063c 34000000 		.word	.LANCHOR0+52
 1353 0640 20000000 		.word	.LC2
 1354 0644 2C010000 		.word	.LC10
 1355              		.cfi_endproc
 1356              	.LFE62:
 1358              		.align	2
 1359              		.global	armwave_set_wave_pointer_as_testbuf
 1360              		.syntax unified
 1361              		.arm
 1362              		.fpu vfp
 1364              	armwave_set_wave_pointer_as_testbuf:
 1365              	.LVL78:
 1366              	.LFB63:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1367              		.loc 1 337 1 is_stmt 1 view -0
 1368              		.cfi_startproc
 1369              		@ args = 0, pretend = 0, frame = 0
 1370              		@ frame_needed = 0, uses_anonymous_args = 0
 1371              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1372              		.loc 1 338 5 view .LVU366
 1373              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1374              		.loc 1 338 29 is_stmt 0 view .LVU367
 1375 0648 24309FE5 		ldr	r3, .L80	@ tmp117,
 1376              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1377              		.loc 1 338 7 view .LVU368
 1378 064c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1379 0650 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1380 0654 0400003A 		bcc	.L79		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1381              		.loc 1 343 5 is_stmt 1 view .LVU369
 1382              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1383              		.loc 1 343 111 is_stmt 0 view .LVU370
 1384 0658 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1385              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1386              		.loc 1 343 68 view .LVU371
 1387 065c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1388 0660 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1389              	.LVL79:
 1390              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1391              		.loc 1 343 33 view .LVU372
 1392 0664 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1393              	@ armwave.c:344: }
 344:armwave.c     **** }
 1394              		.loc 1 344 1 view .LVU373
 1395 0668 1EFF2FE1 		bx	lr	@
 1396              	.LVL80:
 1397              	.L79:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1398              		.loc 1 339 9 is_stmt 1 view .LVU374
 1399 066c 04009FE5 		ldr	r0, .L80+4	@,
 1400              	.LVL81:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1401              		.loc 1 339 9 is_stmt 0 view .LVU375
 1402 0670 FEFFFFEA 		b	puts		@
 1403              	.LVL82:
 1404              	.L81:
 1405              		.align	2
 1406              	.L80:
 1407 0674 00000000 		.word	g_armwave_state
 1408 0678 40010000 		.word	.LC11
 1409              		.cfi_endproc
 1410              	.LFE63:
 1412              		.align	2
 1413              		.global	armwave_set_wave_pointer_u32
 1414              		.syntax unified
 1415              		.arm
 1416              		.fpu vfp
 1418              	armwave_set_wave_pointer_u32:
 1419              	.LVL83:
 1420              	.LFB64:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1421              		.loc 1 351 1 is_stmt 1 view -0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1425              		.loc 1 352 5 view .LVU377
 1426 067c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1427              		.loc 1 352 5 is_stmt 0 view .LVU378
 1428 0680 0200000A 		beq	.L87		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1429              		.loc 1 353 5 is_stmt 1 view .LVU379
 1430              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1431              		.loc 1 353 33 is_stmt 0 view .LVU380
 1432 0684 1C309FE5 		ldr	r3, .L88	@ tmp116,
 1433 0688 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1434 068c 1EFF2FE1 		bx	lr	@
 1435              	.L87:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1436              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU381
 1437              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1438              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU382
 1439 0690 10402DE9 		push	{r4, lr}	@
 1440              		.cfi_def_cfa_offset 8
 1441              		.cfi_offset 4, -8
 1442              		.cfi_offset 14, -4
 1443              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1444              		.loc 1 352 5 discriminator 1 view .LVU383
 1445 0694 162EA0E3 		mov	r2, #352	@,
 1446 0698 0C309FE5 		ldr	r3, .L88+4	@,
 1447 069c 0C109FE5 		ldr	r1, .L88+8	@,
 1448 06a0 0C009FE5 		ldr	r0, .L88+12	@,
 1449              	.LVL84:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1450              		.loc 1 352 5 discriminator 1 view .LVU384
 1451 06a4 FEFFFFEB 		bl	__assert_fail		@
 1452              	.LVL85:
 1453              	.L89:
 1454              		.align	2
 1455              	.L88:
 1456 06a8 00000000 		.word	g_armwave_state
 1457 06ac 50000000 		.word	.LANCHOR0+80
 1458 06b0 20000000 		.word	.LC2
 1459 06b4 7C010000 		.word	.LC12
 1460              		.cfi_endproc
 1461              	.LFE64:
 1463              		.align	2
 1464              		.global	armwave_clear_buffer
 1465              		.syntax unified
 1466              		.arm
 1467              		.fpu vfp
 1469              	armwave_clear_buffer:
 1470              	.LVL86:
 1471              	.LFB65:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1472              		.loc 1 360 1 is_stmt 1 view -0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 0
 1475              		@ frame_needed = 0, uses_anonymous_args = 0
 1476              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1477              		.loc 1 362 5 view .LVU386
 1478              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1479              		.loc 1 362 58 is_stmt 0 view .LVU387
 1480 06b8 0C309FE5 		ldr	r3, .L91	@ tmp114,
 1481              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1482              		.loc 1 362 5 view .LVU388
 1483 06bc 0010A0E3 		mov	r1, #0	@,
 1484 06c0 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1485 06c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1486              	.LVL87:
 1487              		.loc 1 362 5 view .LVU389
 1488 06c8 FEFFFFEA 		b	memset		@
 1489              	.LVL88:
 1490              	.L92:
 1491              		.align	2
 1492              	.L91:
 1493 06cc 00000000 		.word	g_armwave_state
 1494              		.cfi_endproc
 1495              	.LFE65:
 1497              		.align	2
 1498              		.global	armwave_set_channel_colour
 1499              		.syntax unified
 1500              		.arm
 1501              		.fpu vfp
 1503              	armwave_set_channel_colour:
 1504              	.LVL89:
 1505              	.LFB66:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1506              		.loc 1 369 1 is_stmt 1 view -0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1511              		.loc 1 371 5 view .LVU391
 1512 06d0 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1513              		.loc 1 373 13 view .LVU392
 1514              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1515              		.loc 1 373 41 is_stmt 0 view .LVU393
 1516 06d4 0C009F05 		ldreq	r0, .L95	@ tmp117,
 1517              	.LVL90:
 1518              		.loc 1 373 41 view .LVU394
 1519 06d8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1520              		.loc 1 374 13 is_stmt 1 view .LVU395
 1521              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1522              		.loc 1 374 41 is_stmt 0 view .LVU396
 1523 06dc BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1524              		.loc 1 375 13 is_stmt 1 view .LVU397
 1525              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1526              		.loc 1 375 41 is_stmt 0 view .LVU398
 1527 06e0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1528              		.loc 1 376 13 is_stmt 1 view .LVU399
 1529              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1530              		.loc 1 378 1 is_stmt 0 view .LVU400
 1531 06e4 1EFF2FE1 		bx	lr	@
 1532              	.L96:
 1533              		.align	2
 1534              	.L95:
 1535 06e8 00000000 		.word	g_armwave_state
 1536              		.cfi_endproc
 1537              	.LFE66:
 1539              		.align	2
 1540              		.global	armwave_dump_ppm_debug
 1541              		.syntax unified
 1542              		.arm
 1543              		.fpu vfp
 1545              	armwave_dump_ppm_debug:
 1546              	.LVL91:
 1547              	.LFB67:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1548              		.loc 1 384 1 is_stmt 1 view -0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1552              		.loc 1 385 5 view .LVU402
 1553              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1554              		.loc 1 384 1 is_stmt 0 view .LVU403
 1555 06ec 0130A0E1 		mov	r3, r1	@ fn, fn
 1556 06f0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1557              		.cfi_def_cfa_offset 28
 1558              		.cfi_offset 4, -28
 1559              		.cfi_offset 5, -24
 1560              		.cfi_offset 6, -20
 1561              		.cfi_offset 7, -16
 1562              		.cfi_offset 8, -12
 1563              		.cfi_offset 9, -8
 1564              		.cfi_offset 14, -4
 1565 06f4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1566 06f8 0CD04DE2 		sub	sp, sp, #12	@,,
 1567              		.cfi_def_cfa_offset 40
 1568              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1569              		.loc 1 385 16 view .LVU404
 1570 06fc C4109FE5 		ldr	r1, .L105	@,
 1571              	.LVL92:
 1572              		.loc 1 385 16 view .LVU405
 1573 0700 0300A0E1 		mov	r0, r3	@, fn
 1574              	.LVL93:
 1575              		.loc 1 385 16 view .LVU406
 1576 0704 FEFFFFEB 		bl	fopen64		@
 1577              	.LVL94:
 1578              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1579              		.loc 1 392 5 view .LVU407
 1580 0708 BC609FE5 		ldr	r6, .L105+4	@ tmp150,
 1581              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1582              		.loc 1 391 5 view .LVU408
 1583 070c 0320A0E3 		mov	r2, #3	@,
 1584 0710 0110A0E3 		mov	r1, #1	@,
 1585              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1586              		.loc 1 385 16 view .LVU409
 1587 0714 0070A0E1 		mov	r7, r0	@ fp,
 1588              	.LVL95:
 386:armwave.c     ****     uint32_t data;
 1589              		.loc 1 386 5 is_stmt 1 view .LVU410
 387:armwave.c     **** 
 1590              		.loc 1 387 5 view .LVU411
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1591              		.loc 1 391 5 view .LVU412
 1592 0718 0030A0E1 		mov	r3, r0	@, fp
 1593 071c AC009FE5 		ldr	r0, .L105+8	@,
 1594              	.LVL96:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1595              		.loc 1 391 5 is_stmt 0 view .LVU413
 1596 0720 FEFFFFEB 		bl	fwrite		@
 1597              	.LVL97:
 1598              		.loc 1 392 5 is_stmt 1 view .LVU414
 1599 0724 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1600 0728 A4109FE5 		ldr	r1, .L105+12	@,
 1601 072c 0700A0E1 		mov	r0, r7	@, fp
 1602 0730 FEFFFFEB 		bl	fprintf		@
 1603              	.LVL98:
 393:armwave.c     ****     fputs("255\n", fp);
 1604              		.loc 1 393 5 view .LVU415
 1605 0734 0420A0E3 		mov	r2, #4	@,
 1606 0738 0730A0E1 		mov	r3, r7	@, fp
 1607 073c 0110A0E3 		mov	r1, #1	@,
 1608 0740 90009FE5 		ldr	r0, .L105+16	@,
 1609 0744 FEFFFFEB 		bl	fwrite		@
 1610              	.LVL99:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1611              		.loc 1 395 5 view .LVU416
 1612              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1613              		.loc 1 395 37 is_stmt 0 view .LVU417
 1614 0748 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1615              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1616              		.loc 1 395 5 view .LVU418
 1617 074c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1618 0750 180000DA 		ble	.L98		@,
 1619 0754 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1620              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1621              		.loc 1 400 13 view .LVU419
 1622 0758 7C909FE5 		ldr	r9, .L105+20	@ tmp152,
 1623              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1624              		.loc 1 395 12 view .LVU420
 1625 075c 0050A0E3 		mov	r5, #0	@ yy,
 1626              	.LVL100:
 1627              	.L99:
 1628              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1629              		.loc 1 396 9 view .LVU421
 1630 0760 000053E3 		cmp	r3, #0	@ _13,
 1631              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1632              		.loc 1 396 16 view .LVU422
 1633 0764 0040A0C3 		movgt	r4, #0	@ xx,
 1634              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1635              		.loc 1 396 9 view .LVU423
 1636 0768 0F0000DA 		ble	.L101		@,
 1637              	.LVL101:
 1638              	.L100:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1639              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU424
 1640              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1641              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU425
 1642 076c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1643              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1644              		.loc 1 400 13 discriminator 3 view .LVU426
 1645 0770 0910A0E1 		mov	r1, r9	@, tmp152
 1646 0774 0700A0E1 		mov	r0, r7	@, fp
 1647              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1648              		.loc 1 397 18 discriminator 3 view .LVU427
 1649 0778 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1650              	.LVL102:
 1651              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU428
 1652              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1653              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU429
 1654 077c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1655              	.LVL103:
 1656              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1657              		.loc 1 400 81 discriminator 3 view .LVU430
 1658 0780 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1659              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1660              		.loc 1 400 61 discriminator 3 view .LVU431
 1661 0784 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1662              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1663              		.loc 1 400 13 discriminator 3 view .LVU432
 1664 0788 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1665 078c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1666 0790 00C08DE5 		str	ip, [sp]	@ tmp147,
 1667 0794 7220EFE6 		uxtb	r2, r2	@, data
 1668              	.LVL104:
 1669              		.loc 1 400 13 discriminator 3 view .LVU433
 1670 0798 FEFFFFEB 		bl	fprintf		@
 1671              	.LVL105:
 1672              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1673              		.loc 1 396 41 discriminator 3 view .LVU434
 1674 079c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1675              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1676              		.loc 1 396 9 discriminator 3 view .LVU435
 1677 07a0 040053E1 		cmp	r3, r4	@ _13, xx
 1678 07a4 F0FFFFCA 		bgt	.L100		@,
 1679 07a8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1680              	.LVL106:
 1681              	.L101:
 1682              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1683              		.loc 1 395 55 discriminator 2 view .LVU436
 1684 07ac 015085E2 		add	r5, r5, #1	@ yy, yy,
 1685              	.LVL107:
 1686              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1687              		.loc 1 395 5 discriminator 2 view .LVU437
 1688 07b0 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1689 07b4 E9FFFFBA 		blt	.L99		@,
 1690              	.LVL108:
 1691              	.L98:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1692              		.loc 1 404 5 is_stmt 1 view .LVU438
 1693 07b8 0700A0E1 		mov	r0, r7	@, fp
 1694              	@ armwave.c:405: }
 405:armwave.c     **** }
 1695              		.loc 1 405 1 is_stmt 0 view .LVU439
 1696 07bc 0CD08DE2 		add	sp, sp, #12	@,,
 1697              		.cfi_def_cfa_offset 28
 1698              		@ sp needed	@
 1699 07c0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1700              		.cfi_restore 14
 1701              		.cfi_restore 9
 1702              		.cfi_restore 8
 1703              		.cfi_restore 7
 1704              		.cfi_restore 6
 1705              		.cfi_restore 5
 1706              		.cfi_restore 4
 1707              		.cfi_def_cfa_offset 0
 1708              	.LVL109:
 1709              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1710              		.loc 1 404 5 view .LVU440
 1711 07c4 FEFFFFEA 		b	fclose		@
 1712              	.LVL110:
 1713              	.L106:
 404:armwave.c     **** }
 1714              		.loc 1 404 5 view .LVU441
 1715              		.align	2
 1716              	.L105:
 1717 07c8 94010000 		.word	.LC13
 1718 07cc 00000000 		.word	g_armwave_state
 1719 07d0 98010000 		.word	.LC14
 1720 07d4 9C010000 		.word	.LC15
 1721 07d8 A4010000 		.word	.LC16
 1722 07dc AC010000 		.word	.LC17
 1723              		.cfi_endproc
 1724              	.LFE67:
 1726              		.align	2
 1727              		.global	armwave_test_init
 1728              		.syntax unified
 1729              		.arm
 1730              		.fpu vfp
 1732              	armwave_test_init:
 1733              	.LVL111:
 1734              	.LFB68:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1735              		.loc 1 411 1 is_stmt 1 view -0
 1736              		.cfi_startproc
 1737              		@ args = 0, pretend = 0, frame = 0
 1738              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1739              		.loc 1 412 5 view .LVU443
 1740              	.LBB12:
 1741              	.LBI12:
  34:armwave.c     **** {
 1742              		.loc 1 34 6 view .LVU444
  34:armwave.c     **** {
 1743              		.loc 1 34 6 is_stmt 0 view .LVU445
 1744              	.LBE12:
 1745              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1746              		.loc 1 411 1 view .LVU446
 1747 07e0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1748              		.cfi_def_cfa_offset 32
 1749              		.cfi_offset 4, -32
 1750              		.cfi_offset 5, -28
 1751              		.cfi_offset 6, -24
 1752              		.cfi_offset 7, -20
 1753              		.cfi_offset 8, -16
 1754              		.cfi_offset 9, -12
 1755              		.cfi_offset 10, -8
 1756              		.cfi_offset 14, -4
 1757 07e4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1758              		.cfi_def_cfa_offset 56
 1759              		.cfi_offset 80, -56
 1760              		.cfi_offset 81, -52
 1761              		.cfi_offset 82, -48
 1762              		.cfi_offset 83, -44
 1763              		.cfi_offset 84, -40
 1764              		.cfi_offset 85, -36
 1765 07e8 BC409FE5 		ldr	r4, .L111+20	@ ivtmp.79,
 1766              	.LBB15:
 1767              	.LBB13:
 1768              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1769              		.loc 1 40 32 view .LVU447
 1770 07ec 2DAA9FED 		vldr.32	s20, .L111+16	@ tmp136,
 1771              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1772              		.loc 1 40 26 view .LVU448
 1773 07f0 289B9FED 		vldr.64	d9, .L111	@ tmp151,
 1774              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1775              		.loc 1 40 49 view .LVU449
 1776 07f4 298B9FED 		vldr.64	d8, .L111+8	@ tmp139,
 1777 07f8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.79,
 1778              	.LBE13:
 1779              	.LBE15:
 1780              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1781              		.loc 1 411 1 view .LVU450
 1782 07fc 10D04DE2 		sub	sp, sp, #16	@,,
 1783              		.cfi_def_cfa_offset 72
 1784              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1785              		.loc 1 411 1 view .LVU451
 1786 0800 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1787 0804 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1788 0808 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1789 080c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1790 0810 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.79,
 1791 0814 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1792              	.LVL112:
 1793              	.L108:
 1794              	.LBB16:
 1795              	.LBB14:
  40:armwave.c     ****     }
 1796              		.loc 1 40 9 is_stmt 1 view .LVU452
 1797              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1798              		.loc 1 40 32 is_stmt 0 view .LVU453
 1799 0818 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.79
 1800              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1801              		.loc 1 40 26 view .LVU454
 1802 081c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1803              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1804              		.loc 1 40 32 view .LVU455
 1805 0820 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1806 0824 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1807 0828 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1808              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1809              		.loc 1 40 26 view .LVU456
 1810 082c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1811 0830 FEFFFFEB 		bl	pow		@
 1812              	.LVL113:
 1813              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1814              		.loc 1 40 49 view .LVU457
 1815 0834 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1816              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1817              		.loc 1 40 24 view .LVU458
 1818 0838 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1819 083c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1820 0840 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1821              	.LVL114:
 1822              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1823              		.loc 1 39 5 view .LVU459
 1824 0844 0A0054E1 		cmp	r4, r10	@ ivtmp.79, _39
 1825 0848 F2FFFF1A 		bne	.L108		@,
 1826              	.LVL115:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1827              		.loc 1 39 5 view .LVU460
 1828              	.LBE14:
 1829              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1830              		.loc 1 415 5 is_stmt 1 view .LVU461
 1831              	.LBB17:
 1832              	.LBI17:
 368:armwave.c     **** {
 1833              		.loc 1 368 6 view .LVU462
 1834              	.LBB18:
 371:armwave.c     ****         case 1:
 1835              		.loc 1 371 5 view .LVU463
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1836              		.loc 1 373 13 view .LVU464
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1837              		.loc 1 374 13 view .LVU465
 1838              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1839              		.loc 1 373 41 is_stmt 0 view .LVU466
 1840 084c 5CC09FE5 		ldr	ip, .L111+24	@ tmp142,
 1841 0850 5C409FE5 		ldr	r4, .L111+28	@ tmp143,
 1842              	.LBE18:
 1843              	.LBE17:
 1844              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1845              		.loc 1 417 5 view .LVU467
 1846 0854 0000A0E3 		mov	r0, #0	@ tmp147,
 1847              	.LBB22:
 1848              	.LBB19:
 1849              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1850              		.loc 1 375 41 view .LVU468
 1851 0858 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1852              	.LBE19:
 1853              	.LBE22:
 1854              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1855              		.loc 1 417 5 view .LVU469
 1856 085c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1857 0860 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1858 0864 00808DE5 		str	r8, [sp]	@ render_width,
 1859 0868 0610A0E1 		mov	r1, r6	@, tmp3
 1860 086c 0720A0E1 		mov	r2, r7	@, nwaves
 1861              	.LBB23:
 1862              	.LBB20:
 1863              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1864              		.loc 1 373 41 view .LVU470
 1865 0870 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 1866              		.loc 1 375 13 is_stmt 1 view .LVU471
 1867              	.LBE20:
 1868              	.LBE23:
 1869              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1870              		.loc 1 417 5 is_stmt 0 view .LVU472
 1871 0874 0630A0E1 		mov	r3, r6	@, wave_size
 1872              	.LBB24:
 1873              	.LBB21:
 1874              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 1875              		.loc 1 375 41 view .LVU473
 1876 0878 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 1877              		.loc 1 376 13 is_stmt 1 view .LVU474
 1878              	.LVL116:
 376:armwave.c     ****     }
 1879              		.loc 1 376 13 is_stmt 0 view .LVU475
 1880              	.LBE21:
 1881              	.LBE24:
 1882              		.loc 1 417 5 is_stmt 1 view .LVU476
 1883 087c FEFFFFEB 		bl	armwave_setup_render		@
 1884              	.LVL117:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1885              		.loc 1 419 5 view .LVU477
 1886 0880 30109FE5 		ldr	r1, .L111+32	@,
 1887 0884 30009FE5 		ldr	r0, .L111+36	@,
 1888              	@ armwave.c:420: }
 420:armwave.c     **** }
 1889              		.loc 1 420 1 is_stmt 0 view .LVU478
 1890 0888 10D08DE2 		add	sp, sp, #16	@,,
 1891              		.cfi_def_cfa_offset 56
 1892              		@ sp needed	@
 1893 088c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1894              		.cfi_restore 84
 1895              		.cfi_restore 85
 1896              		.cfi_restore 82
 1897              		.cfi_restore 83
 1898              		.cfi_restore 80
 1899              		.cfi_restore 81
 1900              		.cfi_def_cfa_offset 32
 1901 0890 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1902              		.cfi_restore 14
 1903              		.cfi_restore 10
 1904              		.cfi_restore 9
 1905              		.cfi_restore 8
 1906              		.cfi_restore 7
 1907              		.cfi_restore 6
 1908              		.cfi_restore 5
 1909              		.cfi_restore 4
 1910              		.cfi_def_cfa_offset 0
 1911              	.LVL118:
 1912              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 1913              		.loc 1 419 5 view .LVU479
 1914 0894 FEFFFFEA 		b	printf		@
 1915              	.LVL119:
 1916              	.L112:
 1917              		.align	3
 1918              	.L111:
 1919 0898 000000C0 		.word	-1073741824
 1920 089c CCCCEC3F 		.word	1072483532
 1921 08a0 00000000 		.word	0
 1922 08a4 00E06F40 		.word	1081073664
 1923 08a8 00007F43 		.word	1132396544
 1924 08ac FFFFFFFF 		.word	gamma_table-1
 1925 08b0 00000000 		.word	g_armwave_state
 1926 08b4 F609F406 		.word	116656630
 1927 08b8 00000000 		.word	.LC0
 1928 08bc 08000000 		.word	.LC1
 1929              		.cfi_endproc
 1930              	.LFE68:
 1932              		.align	2
 1933              		.global	armwave_test_fill_outbuf
 1934              		.syntax unified
 1935              		.arm
 1936              		.fpu vfp
 1938              	armwave_test_fill_outbuf:
 1939              	.LFB69:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render image to the local allocated buffer.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_outbuf()
 426:armwave.c     **** {
 1940              		.loc 1 426 1 is_stmt 1 view -0
 1941              		.cfi_startproc
 1942              		@ args = 0, pretend = 0, frame = 8
 1943              		@ frame_needed = 0, uses_anonymous_args = 0
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1944              		.loc 1 427 5 view .LVU481
 1945 08c0 50C19FE5 		ldr	ip, .L134	@ tmp204,
 1946              	@ armwave.c:426: {
 426:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1947              		.loc 1 426 1 is_stmt 0 view .LVU482
 1948 08c4 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1949              		.cfi_def_cfa_offset 36
 1950              		.cfi_offset 4, -36
 1951              		.cfi_offset 5, -32
 1952              		.cfi_offset 6, -28
 1953              		.cfi_offset 7, -24
 1954              		.cfi_offset 8, -20
 1955              		.cfi_offset 9, -16
 1956              		.cfi_offset 10, -12
 1957              		.cfi_offset 11, -8
 1958              		.cfi_offset 14, -4
 1959 08c8 0CD04DE2 		sub	sp, sp, #12	@,,
 1960              		.cfi_def_cfa_offset 48
 1961              	@ armwave.c:427:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1962              		.loc 1 427 5 view .LVU483
 1963 08cc 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 1964              	.LVL120:
 1965              	.LBB27:
 1966              	.LBI27:
 166:armwave.c     **** {
 1967              		.loc 1 166 6 is_stmt 1 view .LVU484
 1968              	.LBB28:
 168:armwave.c     ****     // uint32_t ysub;
 1969              		.loc 1 168 5 view .LVU485
 170:armwave.c     ****     uint8_t r, g, b, value; 
 1970              		.loc 1 170 5 view .LVU486
 171:armwave.c     ****     // uint8_t row;
 1971              		.loc 1 171 5 view .LVU487
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1972              		.loc 1 173 5 view .LVU488
 1973              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1974              		.loc 1 173 15 is_stmt 0 view .LVU489
 1975 08d0 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1976              	.LVL121:
 174:armwave.c     ****     uint32_t offset;
 1977              		.loc 1 174 5 is_stmt 1 view .LVU490
 175:armwave.c     **** 
 1978              		.loc 1 175 5 view .LVU491
 177:armwave.c     **** 
 1979              		.loc 1 177 5 view .LVU492
 1980 08d4 000058E3 		cmp	r8, #0	@ _1,
 1981 08d8 4900000A 		beq	.L132		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1982              		.loc 1 179 5 view .LVU493
 1983              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1984              		.loc 1 179 10 is_stmt 0 view .LVU494
 1985 08dc 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1986 08e0 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 1987              	.LVL122:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1988              		.loc 1 182 5 is_stmt 1 view .LVU495
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1989              		.loc 1 182 5 is_stmt 0 view .LVU496
 1990 08e4 000057E3 		cmp	r7, #0	@ npix,
 1991 08e8 0A0000DA 		ble	.L113		@,
 1992              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1993              		.loc 1 194 52 view .LVU497
 1994 08ec FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 1995              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1996              		.loc 1 195 52 view .LVU498
 1997 08f0 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 1998              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 1999              		.loc 1 196 52 view .LVU499
 2000 08f4 F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 2001              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2002              		.loc 1 218 57 view .LVU500
 2003 08f8 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 2004              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2005              		.loc 1 182 11 view .LVU501
 2006 08fc 00E0A0E3 		mov	lr, #0	@ n,
 2007              	.LVL123:
 2008              	.L120:
 186:armwave.c     **** 
 2009              		.loc 1 186 9 is_stmt 1 view .LVU502
 2010              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2011              		.loc 1 186 19 is_stmt 0 view .LVU503
 2012 0900 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 2013              	.LVL124:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2014              		.loc 1 188 9 is_stmt 1 view .LVU504
 2015              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2016              		.loc 1 188 11 is_stmt 0 view .LVU505
 2017 0904 000050E3 		cmp	r0, #0	@ wave_word,
 2018 0908 0400001A 		bne	.L129		@,
 2019 090c 04E08EE2 		add	lr, lr, #4	@ n, n,
 2020              	.L116:
 2021              	.LVL125:
 2022              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2023              		.loc 1 182 5 view .LVU506
 2024 0910 0E0057E1 		cmp	r7, lr	@ npix, n
 2025 0914 F9FFFFCA 		bgt	.L120		@,
 2026              	.LVL126:
 2027              	.L113:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2028              		.loc 1 182 5 view .LVU507
 2029              	.LBE28:
 2030              	.LBE27:
 2031              	@ armwave.c:428: }
 428:armwave.c     **** }
 2032              		.loc 1 428 1 view .LVU508
 2033 0918 0CD08DE2 		add	sp, sp, #12	@,,
 2034              		.cfi_remember_state
 2035              		.cfi_def_cfa_offset 36
 2036              		@ sp needed	@
 2037 091c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2038              	.LVL127:
 2039              	.L129:
 2040              		.cfi_restore_state
 2041              	.LBB30:
 2042              	.LBB29:
 2043              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2044              		.loc 1 193 19 view .LVU509
 2045 0920 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2046              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2047              		.loc 1 188 11 view .LVU510
 2048 0924 0E60A0E1 		mov	r6, lr	@ ivtmp.89, n
 2049              	.LVL128:
 190:armwave.c     ****                 wave_word >>= 8;
 2050              		.loc 1 190 17 is_stmt 1 view .LVU511
 191:armwave.c     **** 
 2051              		.loc 1 191 17 view .LVU512
 2052              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2053              		.loc 1 191 27 is_stmt 0 view .LVU513
 2054 0928 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2055              	.LVL129:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2056              		.loc 1 193 17 is_stmt 1 view .LVU514
 2057 092c 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.89,
 2058              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2059              		.loc 1 193 19 is_stmt 0 view .LVU515
 2060 0930 0500001A 		bne	.L133		@,
 2061              	.LVL130:
 2062              	.L117:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2063              		.loc 1 193 19 view .LVU516
 2064 0934 016086E2 		add	r6, r6, #1	@ ivtmp.89, ivtmp.89,
 2065              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2066              		.loc 1 189 13 view .LVU517
 2067 0938 06005EE1 		cmp	lr, r6	@ n, ivtmp.89
 2068 093c F3FFFF0A 		beq	.L116		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2069              		.loc 1 190 17 is_stmt 1 view .LVU518
 2070              	.LVL131:
 191:armwave.c     **** 
 2071              		.loc 1 191 17 view .LVU519
 2072              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2073              		.loc 1 193 19 is_stmt 0 view .LVU520
 2074 0940 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2075              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2076              		.loc 1 191 27 view .LVU521
 2077 0944 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2078              	.LVL132:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2079              		.loc 1 193 17 is_stmt 1 view .LVU522
 2080              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2081              		.loc 1 193 19 is_stmt 0 view .LVU523
 2082 0948 F9FFFF0A 		beq	.L117		@,
 2083              	.L133:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2084              		.loc 1 194 21 is_stmt 1 view .LVU524
 2085              	.LVL133:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2086              		.loc 1 195 21 view .LVU525
 196:armwave.c     **** 
 2087              		.loc 1 196 21 view .LVU526
 198:armwave.c     ****                     g = MIN(gg, 255);
 2088              		.loc 1 198 21 view .LVU527
 199:armwave.c     ****                     b = MIN(bb, 255);
 2089              		.loc 1 199 21 view .LVU528
 200:armwave.c     **** 
 2090              		.loc 1 200 21 view .LVU529
 203:armwave.c     **** 
 2091              		.loc 1 203 21 view .LVU530
 2092              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2093              		.loc 1 218 32 is_stmt 0 view .LVU531
 2094 094c 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.89
 2095              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2096              		.loc 1 219 41 view .LVU532
 2097 0950 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2098              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2099              		.loc 1 218 40 view .LVU533
 2100 0954 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2101              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2102              		.loc 1 219 41 view .LVU534
 2103 0958 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2104              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2105              		.loc 1 196 55 view .LVU535
 2106 095c 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2107              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2108              		.loc 1 218 40 view .LVU536
 2109 0960 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2110              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2111              		.loc 1 219 46 view .LVU537
 2112 0964 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2113              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2114              		.loc 1 195 55 view .LVU538
 2115 0968 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2116              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2117              		.loc 1 196 24 view .LVU539
 2118 096c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2119              	.LVL134:
 2120              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2121              		.loc 1 200 25 view .LVU540
 2122 0970 FF0053E3 		cmp	r3, #255	@ bb,
 2123              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2124              		.loc 1 195 24 view .LVU541
 2125 0974 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2126              	.LVL135:
 2127              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2128              		.loc 1 200 25 view .LVU542
 2129 0978 FF30A0A3 		movge	r3, #255	@ bb,
 2130              	.LVL136:
 2131              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2132              		.loc 1 218 40 view .LVU543
 2133 097c A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2134              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2135              		.loc 1 219 46 view .LVU544
 2136 0980 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2137              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2138              		.loc 1 199 25 view .LVU545
 2139 0984 FF0052E3 		cmp	r2, #255	@ gg,
 2140 0988 FF20A0A3 		movge	r2, #255	@ gg,
 2141              	.LVL137:
 2142              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2143              		.loc 1 194 55 view .LVU546
 2144 098c 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2145              	.LVL138:
 2146              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2147              		.loc 1 203 56 view .LVU547
 2148 0990 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2149              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2150              		.loc 1 203 44 view .LVU548
 2151 0994 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2152              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2153              		.loc 1 218 24 view .LVU549
 2154 0998 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2155              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2156              		.loc 1 194 24 view .LVU550
 2157 099c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2158              	.LVL139:
 2159              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2160              		.loc 1 203 56 view .LVU551
 2161 09a0 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2162              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2163              		.loc 1 203 44 view .LVU552
 2164 09a4 FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2165              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2166              		.loc 1 198 25 view .LVU553
 2167 09a8 FF0051E3 		cmp	r1, #255	@ rr,
 2168              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2169              		.loc 1 203 51 view .LVU554
 2170 09ac 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2171              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2172              		.loc 1 198 25 view .LVU555
 2173 09b0 FF10A0A3 		movge	r1, #255	@ rr,
 2174              	.LVL140:
 2175              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2176              		.loc 1 218 24 view .LVU556
 2177 09b4 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2178              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2179              		.loc 1 219 24 view .LVU557
 2180 09b8 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2181              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2182              		.loc 1 203 62 view .LVU558
 2183 09bc 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2184 09c0 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2185              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2186              		.loc 1 203 26 view .LVU559
 2187 09c4 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2188              	.LVL141:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2189              		.loc 1 217 21 is_stmt 1 view .LVU560
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2190              		.loc 1 218 21 view .LVU561
 219:armwave.c     ****                     xx = (nsub >> 8);
 2191              		.loc 1 219 21 view .LVU562
 220:armwave.c     **** 
 2192              		.loc 1 220 21 view .LVU563
 2193              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2194              		.loc 1 220 32 is_stmt 0 view .LVU564
 2195 09c8 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.89,
 2196              	.LVL142:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2197              		.loc 1 222 21 is_stmt 1 view .LVU565
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2198              		.loc 1 222 21 is_stmt 0 view .LVU566
 2199 09cc 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2200              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2201              		.loc 1 219 24 view .LVU567
 2202 09d0 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2203              	.LVL143:
 2204              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2205              		.loc 1 222 21 view .LVU568
 2206 09d4 020054E1 		cmp	r4, r2	@ yy, ye
 2207 09d8 D5FFFF2A 		bcs	.L117		@,
 2208 09dc 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2209              	.LVL144:
 2210              	.L118:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2211              		.loc 1 223 25 is_stmt 1 view .LVU569
 224:armwave.c     ****                     }
 2212              		.loc 1 224 25 view .LVU570
 2213              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2214              		.loc 1 223 43 is_stmt 0 view .LVU571
 2215 09e0 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2216              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2217              		.loc 1 222 21 view .LVU572
 2218 09e4 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2219              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2220              		.loc 1 224 43 view .LVU573
 2221 09e8 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2222              	.LVL145:
 2223              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2224              		.loc 1 222 42 view .LVU574
 2225 09ec 014084E2 		add	r4, r4, #1	@ yy, yy,
 2226              	.LVL146:
 2227              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2228              		.loc 1 222 21 view .LVU575
 2229 09f0 040050E1 		cmp	r0, r4	@ ye, yy
 2230              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2231              		.loc 1 224 53 view .LVU576
 2232 09f4 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2233              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2234              		.loc 1 222 21 view .LVU577
 2235 09f8 F8FFFF1A 		bne	.L118		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2236              		.loc 1 222 21 view .LVU578
 2237 09fc 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2238 0a00 CBFFFFEA 		b	.L117		@
 2239              	.LVL147:
 2240              	.L132:
 177:armwave.c     **** 
 2241              		.loc 1 177 5 is_stmt 1 view .LVU579
 2242 0a04 10309FE5 		ldr	r3, .L134+4	@,
 2243 0a08 B120A0E3 		mov	r2, #177	@,
 2244 0a0c 0C109FE5 		ldr	r1, .L134+8	@,
 2245 0a10 0C009FE5 		ldr	r0, .L134+12	@,
 2246 0a14 FEFFFFEB 		bl	__assert_fail		@
 2247              	.LVL148:
 2248              	.L135:
 2249              		.align	2
 2250              	.L134:
 2251 0a18 00000000 		.word	g_armwave_state
 2252 0a1c 00000000 		.word	.LANCHOR0
 2253 0a20 20000000 		.word	.LC2
 2254 0a24 2C000000 		.word	.LC3
 2255              	.LBE29:
 2256              	.LBE30:
 2257              		.cfi_endproc
 2258              	.LFE69:
 2260              		.align	2
 2261              		.global	armwave_test_dump_buffer_to_ppm
 2262              		.syntax unified
 2263              		.arm
 2264              		.fpu vfp
 2266              	armwave_test_dump_buffer_to_ppm:
 2267              	.LVL149:
 2268              	.LFB70:
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 434:armwave.c     **** {
 2269              		.loc 1 434 1 view -0
 2270              		.cfi_startproc
 2271              		@ args = 0, pretend = 0, frame = 0
 2272              		@ frame_needed = 0, uses_anonymous_args = 0
 2273              		@ link register save eliminated.
 435:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2274              		.loc 1 435 5 view .LVU581
 2275 0a28 08309FE5 		ldr	r3, .L137	@ tmp112,
 2276 0a2c 0010A0E1 		mov	r1, r0	@, fn
 2277 0a30 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2278              	.LVL150:
 2279              		.loc 1 435 5 is_stmt 0 view .LVU582
 2280 0a34 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2281              	.LVL151:
 2282              	.L138:
 2283              		.loc 1 435 5 view .LVU583
 2284              		.align	2
 2285              	.L137:
 2286 0a38 00000000 		.word	g_armwave_state
 2287              		.cfi_endproc
 2288              	.LFE70:
 2290              		.align	2
 2291              		.global	armwave_test_fill_gdkbuf
 2292              		.syntax unified
 2293              		.arm
 2294              		.fpu vfp
 2296              	armwave_test_fill_gdkbuf:
 2297              	.LVL152:
 2298              	.LFB71:
 436:armwave.c     **** }
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render GDK buffer with test funtionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 442:armwave.c     **** {
 2299              		.loc 1 442 1 is_stmt 1 view -0
 2300              		.cfi_startproc
 2301              		@ args = 0, pretend = 0, frame = 8
 2302              		@ frame_needed = 0, uses_anonymous_args = 0
 443:armwave.c     ****     //PyObject *mv;
 444:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 445:armwave.c     **** 
 446:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 447:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2303              		.loc 1 447 5 view .LVU585
 2304              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2305              		.loc 1 447 11 is_stmt 0 view .LVU586
 2306 0a3c 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2307              	@ armwave.c:442: {
 442:armwave.c     ****     //PyObject *mv;
 2308              		.loc 1 442 1 view .LVU587
 2309 0a40 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2310              		.cfi_def_cfa_offset 36
 2311              		.cfi_offset 4, -36
 2312              		.cfi_offset 5, -32
 2313              		.cfi_offset 6, -28
 2314              		.cfi_offset 7, -24
 2315              		.cfi_offset 8, -20
 2316              		.cfi_offset 9, -16
 2317              		.cfi_offset 10, -12
 2318              		.cfi_offset 11, -8
 2319              		.cfi_offset 14, -4
 2320 0a44 0CD04DE2 		sub	sp, sp, #12	@,,
 2321              		.cfi_def_cfa_offset 48
 2322              	.LBB33:
 2323              	.LBB34:
 2324              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2325              		.loc 1 173 15 view .LVU588
 2326 0a48 48519FE5 		ldr	r5, .L160	@ tmp206,
 2327              	.LBE34:
 2328              	.LBE33:
 2329              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2330              		.loc 1 447 11 view .LVU589
 2331 0a4c 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2332              	.LVL153:
 448:armwave.c     ****     
 449:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2333              		.loc 1 450 5 is_stmt 1 view .LVU590
 2334              	.LBB37:
 2335              	.LBI33:
 166:armwave.c     **** {
 2336              		.loc 1 166 6 view .LVU591
 2337              	.LBB35:
 168:armwave.c     ****     // uint32_t ysub;
 2338              		.loc 1 168 5 view .LVU592
 170:armwave.c     ****     uint8_t r, g, b, value; 
 2339              		.loc 1 170 5 view .LVU593
 171:armwave.c     ****     // uint8_t row;
 2340              		.loc 1 171 5 view .LVU594
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2341              		.loc 1 173 5 view .LVU595
 2342              	@ armwave.c:177:     assert(out_buffer != NULL);
 177:armwave.c     **** 
 2343              		.loc 1 177 5 is_stmt 0 view .LVU596
 2344 0a50 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2345              	@ armwave.c:173:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 173:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2346              		.loc 1 173 15 view .LVU597
 2347 0a54 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2348              	.LVL154:
 174:armwave.c     ****     uint32_t offset;
 2349              		.loc 1 174 5 is_stmt 1 view .LVU598
 175:armwave.c     **** 
 2350              		.loc 1 175 5 view .LVU599
 177:armwave.c     **** 
 2351              		.loc 1 177 5 view .LVU600
 2352 0a58 4900000A 		beq	.L158		@,
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2353              		.loc 1 179 5 view .LVU601
 2354              	@ armwave.c:179:     npix = g_armwave_state.target_width * 256; 
 179:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2355              		.loc 1 179 10 is_stmt 0 view .LVU602
 2356 0a5c 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2357 0a60 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2358              	.LVL155:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2359              		.loc 1 182 5 is_stmt 1 view .LVU603
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2360              		.loc 1 182 5 is_stmt 0 view .LVU604
 2361 0a64 000057E3 		cmp	r7, #0	@ npix,
 2362 0a68 0A0000DA 		ble	.L139		@,
 2363              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2364              		.loc 1 194 52 view .LVU605
 2365 0a6c FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2366              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2367              		.loc 1 195 52 view .LVU606
 2368 0a70 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2369              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2370              		.loc 1 196 52 view .LVU607
 2371 0a74 F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2372              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2373              		.loc 1 218 57 view .LVU608
 2374 0a78 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2375              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2376              		.loc 1 182 11 view .LVU609
 2377 0a7c 00C0A0E3 		mov	ip, #0	@ n,
 2378              	.LVL156:
 2379              	.L146:
 186:armwave.c     **** 
 2380              		.loc 1 186 9 is_stmt 1 view .LVU610
 2381              	@ armwave.c:186:         wave_word = *base_32ptr++;
 186:armwave.c     **** 
 2382              		.loc 1 186 19 is_stmt 0 view .LVU611
 2383 0a80 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2384              	.LVL157:
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2385              		.loc 1 188 9 is_stmt 1 view .LVU612
 2386              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2387              		.loc 1 188 11 is_stmt 0 view .LVU613
 2388 0a84 000050E3 		cmp	r0, #0	@ wave_word,
 2389 0a88 0400001A 		bne	.L155		@,
 2390 0a8c 04C08CE2 		add	ip, ip, #4	@ n, n,
 2391              	.L142:
 2392              	.LVL158:
 2393              	@ armwave.c:182:     for(n = 0; n < npix; n += 4) {
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2394              		.loc 1 182 5 view .LVU614
 2395 0a90 0C0057E1 		cmp	r7, ip	@ npix, n
 2396 0a94 F9FFFFCA 		bgt	.L146		@,
 2397              	.LVL159:
 2398              	.L139:
 182:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2399              		.loc 1 182 5 view .LVU615
 2400              	.LBE35:
 2401              	.LBE37:
 2402              	@ armwave.c:451: }
 451:armwave.c     **** }
 2403              		.loc 1 451 1 view .LVU616
 2404 0a98 0CD08DE2 		add	sp, sp, #12	@,,
 2405              		.cfi_remember_state
 2406              		.cfi_def_cfa_offset 36
 2407              		@ sp needed	@
 2408 0a9c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2409              	.LVL160:
 2410              	.L155:
 2411              		.cfi_restore_state
 2412              	.LBB38:
 2413              	.LBB36:
 2414              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2415              		.loc 1 193 19 view .LVU617
 2416 0aa0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2417              	@ armwave.c:188:         if(COND_UNLIKELY(wave_word != 0)) {
 188:armwave.c     ****             for(w = 0; w < 4; w++) {
 2418              		.loc 1 188 11 view .LVU618
 2419 0aa4 0C60A0E1 		mov	r6, ip	@ ivtmp.105, n
 2420              	.LVL161:
 190:armwave.c     ****                 wave_word >>= 8;
 2421              		.loc 1 190 17 is_stmt 1 view .LVU619
 191:armwave.c     **** 
 2422              		.loc 1 191 17 view .LVU620
 2423              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2424              		.loc 1 191 27 is_stmt 0 view .LVU621
 2425 0aa8 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2426              	.LVL162:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2427              		.loc 1 193 17 is_stmt 1 view .LVU622
 2428 0aac 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.105,
 2429              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2430              		.loc 1 193 19 is_stmt 0 view .LVU623
 2431 0ab0 0500001A 		bne	.L159		@,
 2432              	.LVL163:
 2433              	.L143:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2434              		.loc 1 193 19 view .LVU624
 2435 0ab4 016086E2 		add	r6, r6, #1	@ ivtmp.105, ivtmp.105,
 2436              	@ armwave.c:189:             for(w = 0; w < 4; w++) {
 189:armwave.c     ****                 value = wave_word & 0xff;
 2437              		.loc 1 189 13 view .LVU625
 2438 0ab8 06005CE1 		cmp	ip, r6	@ n, ivtmp.105
 2439 0abc F3FFFF0A 		beq	.L142		@,
 190:armwave.c     ****                 wave_word >>= 8;
 2440              		.loc 1 190 17 is_stmt 1 view .LVU626
 2441              	.LVL164:
 191:armwave.c     **** 
 2442              		.loc 1 191 17 view .LVU627
 2443              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2444              		.loc 1 193 19 is_stmt 0 view .LVU628
 2445 0ac0 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2446              	@ armwave.c:191:                 wave_word >>= 8;
 191:armwave.c     **** 
 2447              		.loc 1 191 27 view .LVU629
 2448 0ac4 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2449              	.LVL165:
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2450              		.loc 1 193 17 is_stmt 1 view .LVU630
 2451              	@ armwave.c:193:                 if(value != 0) {
 193:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2452              		.loc 1 193 19 is_stmt 0 view .LVU631
 2453 0ac8 F9FFFF0A 		beq	.L143		@,
 2454              	.L159:
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2455              		.loc 1 194 21 is_stmt 1 view .LVU632
 2456              	.LVL166:
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2457              		.loc 1 195 21 view .LVU633
 196:armwave.c     **** 
 2458              		.loc 1 196 21 view .LVU634
 198:armwave.c     ****                     g = MIN(gg, 255);
 2459              		.loc 1 198 21 view .LVU635
 199:armwave.c     ****                     b = MIN(bb, 255);
 2460              		.loc 1 199 21 view .LVU636
 200:armwave.c     **** 
 2461              		.loc 1 200 21 view .LVU637
 203:armwave.c     **** 
 2462              		.loc 1 203 21 view .LVU638
 2463              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2464              		.loc 1 218 32 is_stmt 0 view .LVU639
 2465 0acc 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.105
 2466              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2467              		.loc 1 219 41 view .LVU640
 2468 0ad0 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2469              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2470              		.loc 1 218 40 view .LVU641
 2471 0ad4 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2472              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2473              		.loc 1 219 41 view .LVU642
 2474 0ad8 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2475              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2476              		.loc 1 196 55 view .LVU643
 2477 0adc 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2478              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2479              		.loc 1 218 40 view .LVU644
 2480 0ae0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2481              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2482              		.loc 1 219 46 view .LVU645
 2483 0ae4 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2484              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2485              		.loc 1 195 55 view .LVU646
 2486 0ae8 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2487              	@ armwave.c:196:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 196:armwave.c     **** 
 2488              		.loc 1 196 24 view .LVU647
 2489 0aec 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2490              	.LVL167:
 2491              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2492              		.loc 1 200 25 view .LVU648
 2493 0af0 FF0053E3 		cmp	r3, #255	@ bb,
 2494              	@ armwave.c:195:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 195:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2495              		.loc 1 195 24 view .LVU649
 2496 0af4 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2497              	.LVL168:
 2498              	@ armwave.c:200:                     b = MIN(bb, 255);
 200:armwave.c     **** 
 2499              		.loc 1 200 25 view .LVU650
 2500 0af8 FF30A0A3 		movge	r3, #255	@ bb,
 2501              	.LVL169:
 2502              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2503              		.loc 1 218 40 view .LVU651
 2504 0afc A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2505              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2506              		.loc 1 219 46 view .LVU652
 2507 0b00 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2508              	@ armwave.c:199:                     g = MIN(gg, 255);
 199:armwave.c     ****                     b = MIN(bb, 255);
 2509              		.loc 1 199 25 view .LVU653
 2510 0b04 FF0052E3 		cmp	r2, #255	@ gg,
 2511 0b08 FF20A0A3 		movge	r2, #255	@ gg,
 2512              	.LVL170:
 2513              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2514              		.loc 1 194 55 view .LVU654
 2515 0b0c 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2516              	.LVL171:
 2517              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2518              		.loc 1 203 56 view .LVU655
 2519 0b10 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2520              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2521              		.loc 1 203 44 view .LVU656
 2522 0b14 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2523              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2524              		.loc 1 218 24 view .LVU657
 2525 0b18 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2526              	@ armwave.c:194:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 194:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2527              		.loc 1 194 24 view .LVU658
 2528 0b1c 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2529              	.LVL172:
 2530              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2531              		.loc 1 203 56 view .LVU659
 2532 0b20 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2533              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2534              		.loc 1 203 44 view .LVU660
 2535 0b24 FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2536              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2537              		.loc 1 198 25 view .LVU661
 2538 0b28 FF0051E3 		cmp	r1, #255	@ rr,
 2539              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2540              		.loc 1 203 51 view .LVU662
 2541 0b2c 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2542              	@ armwave.c:198:                     r = MIN(rr, 255);
 198:armwave.c     ****                     g = MIN(gg, 255);
 2543              		.loc 1 198 25 view .LVU663
 2544 0b30 FF10A0A3 		movge	r1, #255	@ rr,
 2545              	.LVL173:
 2546              	@ armwave.c:218:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2547              		.loc 1 218 24 view .LVU664
 2548 0b34 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2549              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2550              		.loc 1 219 24 view .LVU665
 2551 0b38 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2552              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2553              		.loc 1 203 62 view .LVU666
 2554 0b3c 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2555 0b40 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2556              	@ armwave.c:203:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 203:armwave.c     **** 
 2557              		.loc 1 203 26 view .LVU667
 2558 0b44 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2559              	.LVL174:
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2560              		.loc 1 217 21 is_stmt 1 view .LVU668
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2561              		.loc 1 218 21 view .LVU669
 219:armwave.c     ****                     xx = (nsub >> 8);
 2562              		.loc 1 219 21 view .LVU670
 220:armwave.c     **** 
 2563              		.loc 1 220 21 view .LVU671
 2564              	@ armwave.c:220:                     xx = (nsub >> 8);
 220:armwave.c     **** 
 2565              		.loc 1 220 32 is_stmt 0 view .LVU672
 2566 0b48 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.105,
 2567              	.LVL175:
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2568              		.loc 1 222 21 is_stmt 1 view .LVU673
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2569              		.loc 1 222 21 is_stmt 0 view .LVU674
 2570 0b4c 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2571              	@ armwave.c:219:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 2572              		.loc 1 219 24 view .LVU675
 2573 0b50 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2574              	.LVL176:
 2575              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2576              		.loc 1 222 21 view .LVU676
 2577 0b54 02005EE1 		cmp	lr, r2	@ yy, ye
 2578 0b58 D5FFFF2A 		bcs	.L143		@,
 2579 0b5c 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2580              	.LVL177:
 2581              	.L144:
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2582              		.loc 1 223 25 is_stmt 1 view .LVU677
 224:armwave.c     ****                     }
 2583              		.loc 1 224 25 view .LVU678
 2584              	@ armwave.c:223:                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2585              		.loc 1 223 43 is_stmt 0 view .LVU679
 2586 0b60 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2587              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2588              		.loc 1 222 21 view .LVU680
 2589 0b64 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2590              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2591              		.loc 1 224 43 view .LVU681
 2592 0b68 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2593              	.LVL178:
 2594              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2595              		.loc 1 222 42 view .LVU682
 2596 0b6c 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2597              	.LVL179:
 2598              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2599              		.loc 1 222 21 view .LVU683
 2600 0b70 0E0050E1 		cmp	r0, lr	@ ye, yy
 2601              	@ armwave.c:224:                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 2602              		.loc 1 224 53 view .LVU684
 2603 0b74 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2604              	@ armwave.c:222:                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2605              		.loc 1 222 21 view .LVU685
 2606 0b78 F8FFFF1A 		bne	.L144		@,
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2607              		.loc 1 222 21 view .LVU686
 2608 0b7c 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2609 0b80 CBFFFFEA 		b	.L143		@
 2610              	.LVL180:
 2611              	.L158:
 177:armwave.c     **** 
 2612              		.loc 1 177 5 is_stmt 1 view .LVU687
 2613 0b84 10309FE5 		ldr	r3, .L160+4	@,
 2614 0b88 B120A0E3 		mov	r2, #177	@,
 2615 0b8c 0C109FE5 		ldr	r1, .L160+8	@,
 2616 0b90 0C009FE5 		ldr	r0, .L160+12	@,
 2617              	.LVL181:
 177:armwave.c     **** 
 2618              		.loc 1 177 5 is_stmt 0 view .LVU688
 2619 0b94 FEFFFFEB 		bl	__assert_fail		@
 2620              	.LVL182:
 2621              	.L161:
 2622              		.align	2
 2623              	.L160:
 2624 0b98 00000000 		.word	g_armwave_state
 2625 0b9c 00000000 		.word	.LANCHOR0
 2626 0ba0 20000000 		.word	.LC2
 2627 0ba4 2C000000 		.word	.LC3
 2628              	.LBE36:
 2629              	.LBE38:
 2630              		.cfi_endproc
 2631              	.LFE71:
 2633              		.align	2
 2634              		.global	armwave_test_buffer_alloc
 2635              		.syntax unified
 2636              		.arm
 2637              		.fpu vfp
 2639              	armwave_test_buffer_alloc:
 2640              	.LVL183:
 2641              	.LFB72:
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 457:armwave.c     **** {
 2642              		.loc 1 457 1 is_stmt 1 view -0
 2643              		.cfi_startproc
 2644              		@ args = 0, pretend = 0, frame = 0
 2645              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2646              		.loc 1 458 5 view .LVU690
 2647              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2648              		.loc 1 457 1 is_stmt 0 view .LVU691
 2649 0ba8 70402DE9 		push	{r4, r5, r6, lr}	@
 2650              		.cfi_def_cfa_offset 16
 2651              		.cfi_offset 4, -16
 2652              		.cfi_offset 5, -12
 2653              		.cfi_offset 6, -8
 2654              		.cfi_offset 14, -4
 2655              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2656              		.loc 1 457 1 view .LVU692
 2657 0bac 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2658              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2659              		.loc 1 458 23 view .LVU693
 2660 0bb0 44409FE5 		ldr	r4, .L169	@ tmp128,
 2661 0bb4 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2662              	.LVL184:
 2663              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2664              		.loc 1 458 7 view .LVU694
 2665 0bb8 000050E3 		cmp	r0, #0	@ _1,
 2666 0bbc 0000000A 		beq	.L163		@,
 459:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2667              		.loc 1 459 9 is_stmt 1 view .LVU695
 2668 0bc0 FEFFFFEB 		bl	free		@
 2669              	.LVL185:
 2670              	.L163:
 460:armwave.c     ****     }
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 463:armwave.c     **** 
 464:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2671              		.loc 1 464 5 view .LVU696
 2672              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2673              		.loc 1 464 75 is_stmt 0 view .LVU697
 2674 0bc4 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2675 0bc8 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2676              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2677              		.loc 1 464 40 view .LVU698
 2678 0bcc 0610A0E1 		mov	r1, r6	@, nsets
 2679              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2680              		.loc 1 464 75 view .LVU699
 2681 0bd0 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2682              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2683              		.loc 1 464 40 view .LVU700
 2684 0bd4 0500A0E1 		mov	r0, r5	@, _4
 2685 0bd8 FEFFFFEB 		bl	calloc		@
 2686              	.LVL186:
 2687              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     **** 
 466:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2688              		.loc 1 466 7 view .LVU701
 2689 0bdc 000050E3 		cmp	r0, #0	@ tmp124,
 2690              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2691              		.loc 1 464 38 view .LVU702
 2692 0be0 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2693              		.loc 1 466 5 is_stmt 1 view .LVU703
 2694              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 2695              		.loc 1 466 7 is_stmt 0 view .LVU704
 2696 0be4 7080BD18 		popne	{r4, r5, r6, pc}	@
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2697              		.loc 1 467 9 is_stmt 1 view .LVU705
 2698 0be8 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2699 0bec 0620A0E1 		mov	r2, r6	@, nsets
 2700 0bf0 08009FE5 		ldr	r0, .L169+4	@,
 2701              	@ armwave.c:471: }
 468:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 469:armwave.c     ****         return;
 470:armwave.c     ****     }
 471:armwave.c     **** }
 2702              		.loc 1 471 1 is_stmt 0 view .LVU706
 2703 0bf4 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2704              		.cfi_restore 14
 2705              		.cfi_restore 6
 2706              		.cfi_restore 5
 2707              		.cfi_restore 4
 2708              		.cfi_def_cfa_offset 0
 2709              	.LVL187:
 2710              	@ armwave.c:467:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2711              		.loc 1 467 9 view .LVU707
 2712 0bf8 FEFFFFEA 		b	printf		@
 2713              	.LVL188:
 2714              	.L170:
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2715              		.loc 1 467 9 view .LVU708
 2716              		.align	2
 2717              	.L169:
 2718 0bfc 00000000 		.word	g_armwave_state
 2719 0c00 BC010000 		.word	.LC18
 2720              		.cfi_endproc
 2721              	.LFE72:
 2723              		.align	2
 2724              		.global	armwave_fill_pixbuf_into_pybuffer
 2725              		.syntax unified
 2726              		.arm
 2727              		.fpu vfp
 2729              	armwave_fill_pixbuf_into_pybuffer:
 2730              	.LVL189:
 2731              	.LFB73:
 472:armwave.c     **** 
 473:armwave.c     **** /*
 474:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 475:armwave.c     ****  */
 476:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 477:armwave.c     **** {
 2732              		.loc 1 477 1 is_stmt 1 view -0
 2733              		.cfi_startproc
 2734              		@ args = 0, pretend = 0, frame = 48
 2735              		@ frame_needed = 0, uses_anonymous_args = 0
 478:armwave.c     ****     Py_buffer buffer;
 2736              		.loc 1 478 5 view .LVU710
 479:armwave.c     ****     int ret;
 2737              		.loc 1 479 5 view .LVU711
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 482:armwave.c     **** 
 483:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2738              		.loc 1 483 5 view .LVU712
 2739              	@ armwave.c:477: {
 477:armwave.c     ****     Py_buffer buffer;
 2740              		.loc 1 477 1 is_stmt 0 view .LVU713
 2741 0c04 04E02DE5 		str	lr, [sp, #-4]!	@,
 2742              		.cfi_def_cfa_offset 4
 2743              		.cfi_offset 14, -4
 2744 0c08 34D04DE2 		sub	sp, sp, #52	@,,
 2745              		.cfi_def_cfa_offset 56
 2746              	@ armwave.c:483:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2747              		.loc 1 483 11 view .LVU714
 2748 0c0c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2749 0c10 0120A0E3 		mov	r2, #1	@,
 2750 0c14 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2751              	.LVL190:
 484:armwave.c     **** 
 485:armwave.c     ****     if(ret != 0) {
 2752              		.loc 1 485 5 is_stmt 1 view .LVU715
 2753              	@ armwave.c:485:     if(ret != 0) {
 2754              		.loc 1 485 7 is_stmt 0 view .LVU716
 2755 0c18 000050E3 		cmp	r0, #0	@,
 2756 0c1c 0A00001A 		bne	.L175		@,
 486:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 487:armwave.c     ****         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 489:armwave.c     **** 
 490:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2757              		.loc 1 492 5 is_stmt 1 view .LVU717
 2758 0c20 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2759              	.LVL191:
 2760              		.loc 1 492 5 is_stmt 0 view .LVU718
 2761 0c24 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2762              	.LVL192:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     PyBuffer_Release(&buffer);
 2763              		.loc 1 495 5 is_stmt 1 view .LVU719
 2764 0c28 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2765 0c2c FEFFFFEB 		bl	PyBuffer_Release		@
 2766              	.LVL193:
 496:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 497:armwave.c     **** 
 498:armwave.c     ****     Py_RETURN_TRUE;
 2767              		.loc 1 498 5 view .LVU720
 2768              	.LBB39:
 2769              	.LBI39:
 2770              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2771              		.loc 2 456 20 view .LVU721
 2772              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2773              		.loc 2 458 21 view .LVU722
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2774              		.loc 2 459 5 view .LVU723
 2775              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2776              		.loc 2 459 18 is_stmt 0 view .LVU724
 2777 0c30 38309FE5 		ldr	r3, .L176	@ tmp126,
 2778              	.LBE40:
 2779              	.LBE39:
 2780              	@ armwave.c:498:     Py_RETURN_TRUE;
 2781              		.loc 1 498 5 view .LVU725
 2782 0c34 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2783              	.LBB42:
 2784              	.LBB41:
 2785              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2786              		.loc 2 459 18 view .LVU726
 2787 0c38 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2788 0c3c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2789 0c40 002083E5 		str	r2, [r3]	@ tmp128,
 2790              	.LBE41:
 2791              	.LBE42:
 2792              	@ armwave.c:499: }
 499:armwave.c     **** }
 2793              		.loc 1 499 1 view .LVU727
 2794 0c44 34D08DE2 		add	sp, sp, #52	@,,
 2795              		.cfi_remember_state
 2796              		.cfi_def_cfa_offset 4
 2797              		@ sp needed	@
 2798 0c48 04F09DE4 		ldr	pc, [sp], #4	@
 2799              	.LVL194:
 2800              	.L175:
 2801              		.cfi_restore_state
 486:armwave.c     ****         Py_RETURN_FALSE;
 2802              		.loc 1 486 9 is_stmt 1 view .LVU728
 2803 0c4c 20009FE5 		ldr	r0, .L176+4	@,
 2804              	.LVL195:
 486:armwave.c     ****         Py_RETURN_FALSE;
 2805              		.loc 1 486 9 is_stmt 0 view .LVU729
 2806 0c50 FEFFFFEB 		bl	puts		@
 2807              	.LVL196:
 487:armwave.c     ****     }
 2808              		.loc 1 487 9 is_stmt 1 view .LVU730
 2809              	.LBB43:
 2810              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 2811              		.loc 2 456 20 view .LVU731
 2812              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2813              		.loc 2 458 21 view .LVU732
 2814              		.loc 2 459 5 view .LVU733
 2815              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2816              		.loc 2 459 18 is_stmt 0 view .LVU734
 2817 0c54 1C309FE5 		ldr	r3, .L176+8	@ tmp120,
 2818              	.LBE44:
 2819              	.LBE43:
 2820              	@ armwave.c:487:         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 2821              		.loc 1 487 9 view .LVU735
 2822 0c58 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2823              	.LBB46:
 2824              	.LBB45:
 2825              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2826              		.loc 2 459 18 view .LVU736
 2827 0c5c 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2828 0c60 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2829 0c64 002083E5 		str	r2, [r3]	@ tmp122,
 2830              	.LBE45:
 2831              	.LBE46:
 2832              	@ armwave.c:499: }
 2833              		.loc 1 499 1 view .LVU737
 2834 0c68 34D08DE2 		add	sp, sp, #52	@,,
 2835              		.cfi_def_cfa_offset 4
 2836              		@ sp needed	@
 2837 0c6c 04F09DE4 		ldr	pc, [sp], #4	@
 2838              	.L177:
 2839              		.align	2
 2840              	.L176:
 2841 0c70 00000000 		.word	_Py_TrueStruct
 2842 0c74 10020000 		.word	.LC19
 2843 0c78 00000000 		.word	_Py_FalseStruct
 2844              		.cfi_endproc
 2845              	.LFE73:
 2847              		.align	2
 2848              		.global	armwave_test_create_am_sine
 2849              		.syntax unified
 2850              		.arm
 2851              		.fpu vfp
 2853              	armwave_test_create_am_sine:
 2854              	.LVL197:
 2855              	.LFB74:
 500:armwave.c     **** 
 501:armwave.c     **** /*
 502:armwave.c     ****  * Make a test AM waveform for render tests.
 503:armwave.c     ****  *
 504:armwave.c     ****  * @param   mod                     modulation depth
 505:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 506:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 509:armwave.c     **** {
 2856              		.loc 1 509 1 is_stmt 1 view -0
 2857              		.cfi_startproc
 2858              		@ args = 0, pretend = 0, frame = 8
 2859              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 2860              		.loc 1 510 5 view .LVU739
 511:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2861              		.loc 1 511 5 view .LVU740
 2862              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2863              		.loc 1 509 1 is_stmt 0 view .LVU741
 2864 0c7c F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2865              		.cfi_def_cfa_offset 32
 2866              		.cfi_offset 4, -32
 2867              		.cfi_offset 5, -28
 2868              		.cfi_offset 6, -24
 2869              		.cfi_offset 7, -20
 2870              		.cfi_offset 8, -16
 2871              		.cfi_offset 9, -12
 2872              		.cfi_offset 10, -8
 2873              		.cfi_offset 14, -4
 2874              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2875              		.loc 1 511 38 view .LVU742
 2876 0c80 7A7A9FED 		vldr.32	s14, .L209	@ tmp180,
 2877              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2878              		.loc 1 511 55 view .LVU743
 2879 0c84 00529FE5 		ldr	r5, .L209+28	@ tmp250,
 2880              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2881              		.loc 1 509 1 view .LVU744
 2882 0c88 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2883              		.cfi_def_cfa_offset 80
 2884              		.cfi_offset 80, -80
 2885              		.cfi_offset 81, -76
 2886              		.cfi_offset 82, -72
 2887              		.cfi_offset 83, -68
 2888              		.cfi_offset 84, -64
 2889              		.cfi_offset 85, -60
 2890              		.cfi_offset 86, -56
 2891              		.cfi_offset 87, -52
 2892              		.cfi_offset 88, -48
 2893              		.cfi_offset 89, -44
 2894              		.cfi_offset 90, -40
 2895              		.cfi_offset 91, -36
 2896 0c8c 0090A0E1 		mov	r9, r0	@ sets, sets
 2897              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2898              		.loc 1 511 38 view .LVU745
 2899 0c90 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2900              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     int s, set_offset = 0;
 513:armwave.c     ****     int w, x;
 514:armwave.c     **** 
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2901              		.loc 1 515 70 view .LVU746
 2902 0c94 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2903 0c98 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2904              	.LBB49:
 2905              	.LBB50:
 2906              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2907              		.loc 1 458 23 view .LVU747
 2908 0c9c 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2909              	.LVL198:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2910              		.loc 1 458 23 view .LVU748
 2911              	.LBE50:
 2912              	.LBE49:
 2913              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2914              		.loc 1 511 38 view .LVU749
 2915 0ca0 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2916              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2917              		.loc 1 515 70 view .LVU750
 2918 0ca4 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2919              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2920              		.loc 1 509 1 view .LVU751
 2921 0ca8 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2922              	.LBB54:
 2923              	.LBB51:
 2924              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2925              		.loc 1 458 7 view .LVU752
 2926 0cac 000050E3 		cmp	r0, #0	@ _82,
 2927              	.LBE51:
 2928              	.LBE54:
 2929              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2930              		.loc 1 509 1 view .LVU753
 2931 0cb0 08D04DE2 		sub	sp, sp, #8	@,,
 2932              		.cfi_def_cfa_offset 88
 2933              	@ armwave.c:516:     g_armwave_state.test_wave_buffer_nsets = sets;
 516:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2934              		.loc 1 516 44 view .LVU754
 2935 0cb4 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2936              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2937              		.loc 1 515 45 view .LVU755
 2938 0cb8 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2939              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2940              		.loc 1 511 38 view .LVU756
 2941 0cbc 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2942              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2943              		.loc 1 511 11 view .LVU757
 2944 0cc0 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2945              	.LVL199:
 512:armwave.c     ****     int w, x;
 2946              		.loc 1 512 5 is_stmt 1 view .LVU758
 513:armwave.c     **** 
 2947              		.loc 1 513 5 view .LVU759
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2948              		.loc 1 515 5 view .LVU760
 2949              		.loc 1 516 5 view .LVU761
 517:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2950              		.loc 1 517 5 view .LVU762
 2951              	.LBB55:
 2952              	.LBI49:
 456:armwave.c     **** {
 2953              		.loc 1 456 6 view .LVU763
 2954              	.LBB52:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2955              		.loc 1 458 5 view .LVU764
 2956              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2957              		.loc 1 458 7 is_stmt 0 view .LVU765
 2958 0cc4 0000000A 		beq	.L179		@,
 459:armwave.c     ****     }
 2959              		.loc 1 459 9 is_stmt 1 view .LVU766
 2960 0cc8 FEFFFFEB 		bl	free		@
 2961              	.LVL200:
 2962              	.L179:
 464:armwave.c     **** 
 2963              		.loc 1 464 5 view .LVU767
 2964              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2965              		.loc 1 464 75 is_stmt 0 view .LVU768
 2966 0ccc 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2967 0cd0 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2968              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2969              		.loc 1 464 40 view .LVU769
 2970 0cd4 0910A0E1 		mov	r1, r9	@, sets
 2971              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2972              		.loc 1 464 75 view .LVU770
 2973 0cd8 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2974              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2975              		.loc 1 464 40 view .LVU771
 2976 0cdc 0400A0E1 		mov	r0, r4	@, _85
 2977 0ce0 FEFFFFEB 		bl	calloc		@
 2978              	.LVL201:
 2979              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2980              		.loc 1 466 7 view .LVU772
 2981 0ce4 000050E3 		cmp	r0, #0	@ tmp191,
 2982              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2983              		.loc 1 464 38 view .LVU773
 2984 0ce8 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2985              		.loc 1 466 5 is_stmt 1 view .LVU774
 2986              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2987              		.loc 1 466 7 is_stmt 0 view .LVU775
 2988 0cec 5A00000A 		beq	.L208		@,
 2989              	.L180:
 2990              	.LVL202:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2991              		.loc 1 466 7 view .LVU776
 2992              	.LBE52:
 2993              	.LBE55:
 2994              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 518:armwave.c     **** 
 519:armwave.c     ****     for(s = 0; s < sets; s++) {
 2995              		.loc 1 519 5 discriminator 1 view .LVU777
 2996 0cf0 000059E3 		cmp	r9, #0	@ sets,
 2997 0cf4 550000DA 		ble	.L178		@,
 2998              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 521:armwave.c     ****     
 522:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 524:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 525:armwave.c     **** 
 526:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 527:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 533:armwave.c     ****                     noise = -noise;
 534:armwave.c     **** 
 535:armwave.c     ****                 noise += 1.0f;
 536:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 537:armwave.c     **** 
 538:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2999              		.loc 1 538 45 view .LVU778
 3000 0cf8 5C8A9FED 		vldr.32	s16, .L209	@ tmp258,
 3001              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 539:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 540:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 541:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3002              		.loc 1 541 104 view .LVU779
 3003 0cfc 5CCA9FED 		vldr.32	s24, .L209+4	@ tmp259,
 3004              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3005              		.loc 1 519 5 view .LVU780
 3006 0d00 0070A0E3 		mov	r7, #0	@ set_offset,
 3007              	@ armwave.c:520:         printf("Calculating test set %d\n", s);
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 3008              		.loc 1 520 9 view .LVU781
 3009 0d04 84A19FE5 		ldr	r10, .L209+32	@ tmp257,
 3010              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3011              		.loc 1 519 5 view .LVU782
 3012 0d08 0780A0E1 		mov	r8, r7	@ s, set_offset
 3013              	.LVL203:
 3014              	.L181:
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 3015              		.loc 1 520 9 is_stmt 1 view .LVU783
 3016 0d0c 0810A0E1 		mov	r1, r8	@, s
 3017 0d10 0A00A0E1 		mov	r0, r10	@, tmp257
 3018 0d14 FEFFFFEB 		bl	printf		@
 3019              	.LVL204:
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3020              		.loc 1 522 9 view .LVU784
 3021              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3022              		.loc 1 522 39 is_stmt 0 view .LVU785
 3023 0d18 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3024              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3025              		.loc 1 522 9 view .LVU786
 3026 0d1c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3027 0d20 450000DA 		ble	.L182		@,
 3028              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 3029              		.loc 1 524 21 view .LVU787
 3030 0d24 53CADFED 		vldr.32	s25, .L209+8	@ tmp200,
 3031              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3032              		.loc 1 538 33 view .LVU788
 3033 0d28 53BA9FED 		vldr.32	s22, .L209+12	@ tmp253,
 3034              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 3035              		.loc 1 536 24 view .LVU789
 3036 0d2c 53AADFED 		vldr.32	s21, .L209+16	@ tmp254,
 3037 0d30 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3038              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3039              		.loc 1 522 15 view .LVU790
 3040 0d34 0060A0E3 		mov	r6, #0	@ w,
 3041              	.LVL205:
 3042              	.L189:
 524:armwave.c     **** 
 3043              		.loc 1 524 13 is_stmt 1 view .LVU791
 3044              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 3045              		.loc 1 524 21 is_stmt 0 view .LVU792
 3046 0d38 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3047 0d3c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3048              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3049              		.loc 1 526 13 view .LVU793
 3050 0d40 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3051              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 3052              		.loc 1 524 21 view .LVU794
 3053 0d44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3054 0d48 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3055              	.LVL206:
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3056              		.loc 1 526 13 is_stmt 1 view .LVU795
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3057              		.loc 1 526 13 is_stmt 0 view .LVU796
 3058 0d4c 370000DA 		ble	.L183		@,
 3059 0d50 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3060              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3061              		.loc 1 541 113 view .LVU797
 3062 0d54 4AAA9FED 		vldr.32	s20, .L209+20	@ tmp229,
 3063 0d58 4A8ADFED 		vldr.32	s17, .L209+24	@ tmp230,
 3064              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3065              		.loc 1 526 19 view .LVU798
 3066 0d5c 0040A0E3 		mov	r4, #0	@ x,
 3067              	.LVL207:
 3068              	.L188:
 527:armwave.c     ****                 noise *= noise;
 3069              		.loc 1 527 17 is_stmt 1 view .LVU799
 3070              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 3071              		.loc 1 527 28 is_stmt 0 view .LVU800
 3072 0d60 FEFFFFEB 		bl	rand		@
 3073              	.LVL208:
 3074              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 3075              		.loc 1 527 35 view .LVU801
 3076 0d64 7000FFE6 		uxth	r0, r0	@ tmp201,
 3077              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 3078              		.loc 1 527 45 view .LVU802
 3079 0d68 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3080 0d6c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3081              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 3082              		.loc 1 527 24 view .LVU803
 3083 0d70 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3084              	.LVL209:
 528:armwave.c     ****                 noise *= noise;
 3085              		.loc 1 528 17 is_stmt 1 view .LVU804
 3086              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 3087              		.loc 1 528 23 is_stmt 0 view .LVU805
 3088 0d74 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3089              	.LVL210:
 529:armwave.c     ****                 noise *= noise;
 3090              		.loc 1 529 17 is_stmt 1 view .LVU806
 3091              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 3092              		.loc 1 529 23 is_stmt 0 view .LVU807
 3093 0d78 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3094              	.LVL211:
 530:armwave.c     **** 
 3095              		.loc 1 530 17 is_stmt 1 view .LVU808
 3096              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     **** 
 3097              		.loc 1 530 23 is_stmt 0 view .LVU809
 3098 0d7c A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3099              	.LVL212:
 532:armwave.c     ****                     noise = -noise;
 3100              		.loc 1 532 17 is_stmt 1 view .LVU810
 3101              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 3102              		.loc 1 532 21 is_stmt 0 view .LVU811
 3103 0d80 FEFFFFEB 		bl	rand		@
 3104              	.LVL213:
 533:armwave.c     **** 
 3105              		.loc 1 533 21 is_stmt 1 view .LVU812
 3106              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 3107              		.loc 1 532 19 is_stmt 0 view .LVU813
 3108 0d84 020910E3 		tst	r0, #32768	@,
 3109              	@ armwave.c:533:                     noise = -noise;
 533:armwave.c     **** 
 3110              		.loc 1 533 27 view .LVU814
 3111 0d88 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3112              	.LVL214:
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3113              		.loc 1 535 17 is_stmt 1 view .LVU815
 536:armwave.c     **** 
 3114              		.loc 1 536 17 view .LVU816
 3115              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 3116              		.loc 1 536 27 is_stmt 0 view .LVU817
 3117 0d8c FEFFFFEB 		bl	rand		@
 3118              	.LVL215:
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3119              		.loc 1 538 17 is_stmt 1 view .LVU818
 3120              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3121              		.loc 1 538 45 is_stmt 0 view .LVU819
 3122 0d90 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3123              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3124              		.loc 1 538 33 view .LVU820
 3125 0d94 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3126              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3127              		.loc 1 538 45 view .LVU821
 3128 0d98 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3129              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3130              		.loc 1 538 33 view .LVU822
 3131 0d9c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3132              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3133              		.loc 1 538 45 view .LVU823
 3134 0da0 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3135              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3136              		.loc 1 538 33 view .LVU824
 3137 0da4 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3138              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 3139              		.loc 1 536 34 view .LVU825
 3140 0da8 7000FFE6 		uxth	r0, r0	@ tmp214,
 3141              	.LVL216:
 3142              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 3143              		.loc 1 536 44 view .LVU826
 3144 0dac 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3145 0db0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3146              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 3147              		.loc 1 536 24 view .LVU827
 3148 0db4 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3149              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3150              		.loc 1 538 77 view .LVU828
 3151 0db8 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3152              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3153              		.loc 1 538 22 view .LVU829
 3154 0dbc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3155 0dc0 FEFFFFEB 		bl	sin		@
 3156              	.LVL217:
 3157              		.loc 1 541 17 is_stmt 1 view .LVU830
 3158              	@ armwave.c:535:                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3159              		.loc 1 535 23 is_stmt 0 view .LVU831
 3160 0dc4 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3161              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3162              		.loc 1 541 104 view .LVU832
 3163 0dc8 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3164              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3165              		.loc 1 538 98 view .LVU833
 3166 0dcc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3167              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3168              		.loc 1 538 87 view .LVU834
 3169 0dd0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3170              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3171              		.loc 1 538 98 view .LVU835
 3172 0dd4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3173              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3174              		.loc 1 538 19 view .LVU836
 3175 0dd8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3176              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3177              		.loc 1 541 113 view .LVU837
 3178 0ddc 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3179 0de0 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3180 0de4 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3181 0de8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3182 0dec 050000DA 		ble	.L185		@,
 3183              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3184              		.loc 1 541 104 discriminator 1 view .LVU838
 3185 0df0 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3186 0df4 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3187 0df8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3188 0dfc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3189 0e00 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3190 0e04 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3191              	.L185:
 3192              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3193              		.loc 1 541 57 discriminator 12 view .LVU839
 3194 0e08 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3195              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3196              		.loc 1 541 102 discriminator 12 view .LVU840
 3197 0e0c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3198 0e10 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3199 0e14 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3200              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3201              		.loc 1 526 58 discriminator 12 view .LVU841
 3202 0e18 014084E2 		add	r4, r4, #1	@ x, x,
 3203              	.LVL218:
 3204              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3205              		.loc 1 541 102 discriminator 12 view .LVU842
 3206 0e1c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3207              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3208              		.loc 1 526 43 discriminator 12 view .LVU843
 3209 0e20 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3210              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3211              		.loc 1 526 13 discriminator 12 view .LVU844
 3212 0e24 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3213 0e28 CCFFFFCA 		bgt	.L188		@,
 3214 0e2c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3215              	.LVL219:
 3216              	.L183:
 3217              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3218              		.loc 1 522 48 discriminator 2 view .LVU845
 3219 0e30 016086E2 		add	r6, r6, #1	@ w, w,
 3220              	.LVL220:
 3221              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3222              		.loc 1 522 9 discriminator 2 view .LVU846
 3223 0e34 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3224 0e38 BEFFFFBA 		blt	.L189		@,
 3225              	.LVL221:
 3226              	.L182:
 542:armwave.c     ****             }
 543:armwave.c     ****         }
 544:armwave.c     **** 
 545:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3227              		.loc 1 545 9 is_stmt 1 discriminator 2 view .LVU847
 3228              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3229              		.loc 1 545 46 is_stmt 0 discriminator 2 view .LVU848
 3230 0e3c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3231              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3232              		.loc 1 519 27 discriminator 2 view .LVU849
 3233 0e40 018088E2 		add	r8, r8, #1	@ s, s,
 3234              	.LVL222:
 3235              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3236              		.loc 1 519 5 discriminator 2 view .LVU850
 3237 0e44 080059E1 		cmp	r9, r8	@ sets, s
 3238              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3239              		.loc 1 545 20 discriminator 2 view .LVU851
 3240 0e48 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3241              	.LVL223:
 3242              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 3243              		.loc 1 519 5 discriminator 2 view .LVU852
 3244 0e4c AEFFFF1A 		bne	.L181		@,
 3245              	.LVL224:
 3246              	.L178:
 3247              	@ armwave.c:547: }
 546:armwave.c     ****     }
 547:armwave.c     **** }
 3248              		.loc 1 547 1 view .LVU853
 3249 0e50 08D08DE2 		add	sp, sp, #8	@,,
 3250              		.cfi_remember_state
 3251              		.cfi_def_cfa_offset 80
 3252              		@ sp needed	@
 3253 0e54 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3254              		.cfi_restore 90
 3255              		.cfi_restore 91
 3256              		.cfi_restore 88
 3257              		.cfi_restore 89
 3258              		.cfi_restore 86
 3259              		.cfi_restore 87
 3260              		.cfi_restore 84
 3261              		.cfi_restore 85
 3262              		.cfi_restore 82
 3263              		.cfi_restore 83
 3264              		.cfi_restore 80
 3265              		.cfi_restore 81
 3266              		.cfi_def_cfa_offset 32
 3267              	.LVL225:
 3268              		.loc 1 547 1 view .LVU854
 3269 0e58 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3270              	.LVL226:
 3271              	.L208:
 3272              		.cfi_restore_state
 3273              	.LBB56:
 3274              	.LBB53:
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3275              		.loc 1 467 9 is_stmt 1 view .LVU855
 3276 0e5c 940901E0 		mul	r1, r4, r9	@, _85, sets
 3277 0e60 0920A0E1 		mov	r2, r9	@, sets
 3278 0e64 28009FE5 		ldr	r0, .L209+36	@,
 3279 0e68 FEFFFFEB 		bl	printf		@
 3280              	.LVL227:
 469:armwave.c     ****     }
 3281              		.loc 1 469 9 view .LVU856
 3282 0e6c 9FFFFFEA 		b	.L180		@
 3283              	.L210:
 3284              		.align	2
 3285              	.L209:
 3286 0e70 0000803F 		.word	1065353216
 3287 0e74 00007F43 		.word	1132396544
 3288 0e78 0000003F 		.word	1056964608
 3289 0e7c C3F5C840 		.word	1086911939
 3290 0e80 38FFC74A 		.word	1254620984
 3291 0e84 0000FE42 		.word	1123942400
 3292 0e88 00000043 		.word	1124073472
 3293 0e8c 00000000 		.word	g_armwave_state
 3294 0e90 64020000 		.word	.LC20
 3295 0e94 BC010000 		.word	.LC18
 3296              	.LBE53:
 3297              	.LBE56:
 3298              		.cfi_endproc
 3299              	.LFE74:
 3301              		.global	__aeabi_idiv
 3302              		.align	2
 3303              		.global	armwave_generate
 3304              		.syntax unified
 3305              		.arm
 3306              		.fpu vfp
 3308              	armwave_generate:
 3309              	.LFB75:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Make a test square waveform.
 551:armwave.c     ****  *
 552:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 553:armwave.c     ****  */
 554:armwave.c     **** #if 0
 555:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 556:armwave.c     **** {
 557:armwave.c     ****     uint8_t v;
 558:armwave.c     ****     float noise, xnoise;
 559:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 560:armwave.c     ****     int w, x;
 561:armwave.c     **** 
 562:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 563:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 564:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     **** 
 569:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 570:armwave.c     ****                 noise = -noise;
 571:armwave.c     **** 
 572:armwave.c     ****             //noise += 1.0f;
 573:armwave.c     **** 
 574:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 575:armwave.c     ****                 new_level = 0.2f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 577:armwave.c     ****                 new_level = 0.8f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 579:armwave.c     ****                 new_level = 0.2f;
 580:armwave.c     ****             } else {
 581:armwave.c     ****                 new_level = 0.8f;
 582:armwave.c     ****             }
 583:armwave.c     **** 
 584:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 585:armwave.c     **** 
 586:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 587:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 588:armwave.c     ****         }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 591:armwave.c     **** #endif
 592:armwave.c     **** 
 593:armwave.c     **** /*
 594:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_generate()
 597:armwave.c     **** {
 3310              		.loc 1 597 1 view -0
 3311              		.cfi_startproc
 3312              		@ args = 0, pretend = 0, frame = 16
 3313              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     uint32_t yy;
 3314              		.loc 1 598 5 view .LVU858
 599:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 3315              		.loc 1 599 5 view .LVU859
 3316              	.LVL228:
 600:armwave.c     **** 
 601:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3317              		.loc 1 601 5 view .LVU860
 3318              	@ armwave.c:597: {
 597:armwave.c     ****     uint32_t yy;
 3319              		.loc 1 597 1 is_stmt 0 view .LVU861
 3320 0e98 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 3321              		.cfi_def_cfa_offset 36
 3322              		.cfi_offset 4, -36
 3323              		.cfi_offset 5, -32
 3324              		.cfi_offset 6, -28
 3325              		.cfi_offset 7, -24
 3326              		.cfi_offset 8, -20
 3327              		.cfi_offset 9, -16
 3328              		.cfi_offset 10, -12
 3329              		.cfi_offset 11, -8
 3330              		.cfi_offset 14, -4
 3331              	@ armwave.c:601:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3332              		.loc 1 601 5 view .LVU862
 3333 0e9c 0010A0E3 		mov	r1, #0	@,
 3334              	@ armwave.c:601:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3335              		.loc 1 601 58 view .LVU863
 3336 0ea0 10729FE5 		ldr	r7, .L230	@ tmp343,
 3337              	@ armwave.c:597: {
 597:armwave.c     ****     uint32_t yy;
 3338              		.loc 1 597 1 view .LVU864
 3339 0ea4 14D04DE2 		sub	sp, sp, #20	@,,
 3340              		.cfi_def_cfa_offset 56
 3341              	@ armwave.c:601:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3342              		.loc 1 601 5 view .LVU865
 3343 0ea8 502097E5 		ldr	r2, [r7, #80]	@, g_armwave_state.ch_buff_size
 3344 0eac 040097E5 		ldr	r0, [r7, #4]	@, g_armwave_state.ch1_buffer
 3345 0eb0 FEFFFFEB 		bl	memset		@
 3346              	.LVL229:
 602:armwave.c     **** 
 603:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 3347              		.loc 1 603 5 is_stmt 1 view .LVU866
 3348              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3349              		.loc 1 603 38 is_stmt 0 view .LVU867
 3350 0eb4 4C5097E5 		ldr	r5, [r7, #76]	@ prephitmp_231, g_armwave_state.wave_length
 3351              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3352              		.loc 1 603 68 view .LVU868
 3353 0eb8 446097E5 		ldr	r6, [r7, #68]	@ _36, g_armwave_state.slice_height
 3354              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3355              		.loc 1 603 51 view .LVU869
 3356 0ebc 0500A0E1 		mov	r0, r5	@, prephitmp_231
 3357 0ec0 0610A0E1 		mov	r1, r6	@, _36
 3358 0ec4 FEFFFFEB 		bl	__aeabi_idiv		@
 3359              	.LVL230:
 3360              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3361              		.loc 1 603 5 view .LVU870
 3362 0ec8 000050E3 		cmp	r0, #0	@,
 3363 0ecc 7700000A 		beq	.L211		@,
 3364 0ed0 384097E5 		ldr	r4, [r7, #56]	@ prephitmp_241, g_armwave_state.waves
 3365              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 3366              		.loc 1 603 12 view .LVU871
 3367 0ed4 0080A0E3 		mov	r8, #0	@ yy,
 3368 0ed8 04808DE5 		str	r8, [sp, #4]	@ yy, %sfp
 3369              	.LVL231:
 3370              	.L220:
 604:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 605:armwave.c     **** 
 606:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3371              		.loc 1 606 9 is_stmt 1 discriminator 3 view .LVU872
 3372 0edc 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 3373              	.LBB59:
 3374              	.LBB60:
 3375              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3376              		.loc 1 71 130 is_stmt 0 discriminator 3 view .LVU873
 3377 0ee0 40C097E5 		ldr	ip, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3378              	.LBE60:
 3379              	.LBE59:
 3380              	@ armwave.c:606:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3381              		.loc 1 606 9 discriminator 3 view .LVU874
 3382 0ee4 481097E5 		ldr	r1, [r7, #72]	@ _7, g_armwave_state.slice_record_height
 3383 0ee8 930602E0 		mul	r2, r3, r6	@ _5, yy, _36
 3384              	.LBB63:
 3385              	.LBB61:
 3386              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3387              		.loc 1 71 65 discriminator 3 view .LVU875
 3388 0eec 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3389              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3390              		.loc 1 78 5 discriminator 3 view .LVU876
 3391 0ef0 000054E3 		cmp	r4, #0	@ prephitmp_241,
 3392              	.LBE61:
 3393              	.LBE63:
 3394              	@ armwave.c:606:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 3395              		.loc 1 606 9 discriminator 3 view .LVU877
 3396 0ef4 00108DE5 		str	r1, [sp]	@ _7, %sfp
 3397              	.LVL232:
 3398              	.LBB64:
 3399              	.LBI59:
  62:armwave.c     **** {
 3400              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU878
 3401              	.LBB62:
  64:armwave.c     ****     uint32_t value, word;
 3402              		.loc 1 64 5 discriminator 3 view .LVU879
  65:armwave.c     ****     uint8_t *wave_base;
 3403              		.loc 1 65 5 discriminator 3 view .LVU880
  66:armwave.c     ****     uint8_t *write_buffer_base;
 3404              		.loc 1 66 5 discriminator 3 view .LVU881
  67:armwave.c     ****     uint8_t *write_buffer;
 3405              		.loc 1 67 5 discriminator 3 view .LVU882
  68:armwave.c     **** 
 3406              		.loc 1 68 5 discriminator 3 view .LVU883
  71:armwave.c     **** 
 3407              		.loc 1 71 5 discriminator 3 view .LVU884
 3408              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3409              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU885
 3410 0ef8 930203E0 		mul	r3, r3, r2	@ tmp241, g_armwave_state.cmp_x_bitdepth_scale, _5
 3411              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3412              		.loc 1 71 40 discriminator 3 view .LVU886
 3413 0efc 041097E5 		ldr	r1, [r7, #4]	@ _18, g_armwave_state.ch1_buffer
 3414              	.LVL233:
 3415              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3416              		.loc 1 71 105 discriminator 3 view .LVU887
 3417 0f00 2334A0E1 		lsr	r3, r3, #8	@ tmp243, tmp241,
 3418              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 3419              		.loc 1 71 130 discriminator 3 view .LVU888
 3420 0f04 9C030CE0 		mul	ip, ip, r3	@ _24, g_armwave_state.bitdepth_height, tmp243
 3421              	.LVL234:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3422              		.loc 1 78 5 is_stmt 1 discriminator 3 view .LVU889
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3423              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU890
 3424 0f08 600000DA 		ble	.L213		@,
 3425              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3426              		.loc 1 78 11 view .LVU891
 3427 0f0c 0080A0E3 		mov	r8, #0	@ w,
 3428 0f10 043042E2 		sub	r3, r2, #4	@ _33, _5,
 3429 0f14 08308DE5 		str	r3, [sp, #8]	@ _33, %sfp
 3430              	.LVL235:
 3431              	.L219:
  79:armwave.c     **** 
 3432              		.loc 1 79 9 is_stmt 1 view .LVU892
 3433              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3434              		.loc 1 83 9 is_stmt 0 view .LVU893
 3435 0f18 00209DE5 		ldr	r2, [sp]	@ _7, %sfp
 3436              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 3437              		.loc 1 79 64 view .LVU894
 3438 0f1c 343097E5 		ldr	r3, [r7, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3439              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3440              		.loc 1 83 9 view .LVU895
 3441 0f20 000052E3 		cmp	r2, #0	@ _7,
 3442              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 3443              		.loc 1 79 36 view .LVU896
 3444 0f24 142097E5 		ldr	r2, [r7, #20]	@ _25, g_armwave_state.wave_buffer
 3445              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 3446              		.loc 1 79 64 view .LVU897
 3447 0f28 930803E0 		mul	r3, r3, r8	@ _29, g_armwave_state.wave_stride, w
 3448              	.LVL236:
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3449              		.loc 1 83 9 is_stmt 1 view .LVU898
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3450              		.loc 1 83 9 is_stmt 0 view .LVU899
 3451 0f2c 5200000A 		beq	.L214		@,
 3452 0f30 08009DE5 		ldr	r0, [sp, #8]	@ _33, %sfp
 3453 0f34 003083E0 		add	r3, r3, r0	@ tmp249, _29, _33
 3454              	.LVL237:
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3455              		.loc 1 83 9 view .LVU900
 3456 0f38 036082E0 		add	r6, r2, r3	@ ivtmp.123, _25, tmp249
 3457              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3458              		.loc 1 83 16 view .LVU901
 3459 0f3c 0000A0E3 		mov	r0, #0	@ yy,
 3460              	.LVL238:
 3461              	.L218:
  84:armwave.c     **** 
 3462              		.loc 1 84 13 is_stmt 1 view .LVU902
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 3463              		.loc 1 98 17 view .LVU903
 100:armwave.c     ****                 word >>= 8;
 3464              		.loc 1 100 17 view .LVU904
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 3465              		.loc 1 98 17 view .LVU905
 100:armwave.c     ****                 word >>= 8;
 3466              		.loc 1 100 17 view .LVU906
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 3467              		.loc 1 98 17 view .LVU907
 100:armwave.c     ****                 word >>= 8;
 3468              		.loc 1 100 17 view .LVU908
  98:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 3469              		.loc 1 98 17 view .LVU909
 100:armwave.c     ****                 word >>= 8;
 3470              		.loc 1 100 17 view .LVU910
 3471              	@ armwave.c:84:             word = *(uint32_t*)(wave_base + yy);
  84:armwave.c     **** 
 3472              		.loc 1 84 18 is_stmt 0 view .LVU911
 3473 0f40 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _274, offset: 0B]
 3474              	.LVL239:
  86:armwave.c     ****                 // maybe worth preloading the base address here...
 3475              		.loc 1 86 13 is_stmt 1 view .LVU912
  88:armwave.c     ****                 
 3476              		.loc 1 88 17 view .LVU913
  91:armwave.c     ****                     continue;
 3477              		.loc 1 91 17 view .LVU914
 3478              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3479              		.loc 1 99 34 is_stmt 0 view .LVU915
 3480 0f44 01A080E2 		add	r10, r0, #1	@ tmp279, yy,
 3481              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3482              		.loc 1 91 20 view .LVU916
 3483 0f48 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 3484 0f4c 0120A003 		moveq	r2, #1	@ tmp251,
 3485 0f50 0020A013 		movne	r2, #0	@ tmp251,
 3486              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3487              		.loc 1 91 19 view .LVU917
 3488 0f54 FF0059E3 		cmp	r9, #255	@ scale_value,
 3489 0f58 01208203 		orreq	r2, r2, #1	@,, tmp256, tmp251
 3490              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****             }
 3491              		.loc 1 101 22 view .LVU918
 3492 0f5c 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 3493              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3494              		.loc 1 91 19 view .LVU919
 3495 0f60 000052E3 		cmp	r2, #0	@ tmp256,
 3496              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3497              		.loc 1 99 34 view .LVU920
 3498 0f64 025080E2 		add	r5, r0, #2	@ tmp301, yy,
 3499              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3500              		.loc 1 100 47 view .LVU921
 3501 0f68 0CB089E0 		add	fp, r9, ip	@ tmp264, scale_value, _24
 3502              	@ armwave.c:101:                 word >>= 8;
 101:armwave.c     ****             }
 3503              		.loc 1 101 22 view .LVU922
 3504 0f6c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 3505 0f70 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 3506              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3507              		.loc 1 91 19 view .LVU923
 3508 0f74 3B00001A 		bne	.L222		@,
 3509              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3510              		.loc 1 99 34 view .LVU924
 3511 0f78 242097E5 		ldr	r2, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3512              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3513              		.loc 1 100 47 view .LVU925
 3514 0f7c 40E097E5 		ldr	lr, [r7, #64]	@ tmp363, g_armwave_state.bitdepth_height
 3515              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3516              		.loc 1 91 20 view .LVU926
 3517 0f80 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 3518              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3519              		.loc 1 99 34 view .LVU927
 3520 0f84 920002E0 		mul	r2, r2, r0	@ tmp258, g_armwave_state.cmp_x_bitdepth_scale, yy
 3521              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3522              		.loc 1 100 47 view .LVU928
 3523 0f88 0C9084E0 		add	r9, r4, ip	@ tmp286, scale_value, _24
 3524              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3525              		.loc 1 99 74 view .LVU929
 3526 0f8c 2224A0E1 		lsr	r2, r2, #8	@ tmp260, tmp258,
 3527              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3528              		.loc 1 100 47 view .LVU930
 3529 0f90 9EB222E0 		mla	r2, lr, r2, fp	@ tmp265, tmp363, tmp260, tmp264
 3530              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3531              		.loc 1 91 20 view .LVU931
 3532 0f94 01B0A003 		moveq	fp, #1	@ tmp272,
 3533 0f98 00B0A013 		movne	fp, #0	@ tmp272,
 3534              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3535              		.loc 1 91 19 view .LVU932
 3536 0f9c FF0054E3 		cmp	r4, #255	@ scale_value,
 3537 0fa0 0B40A011 		movne	r4, fp	@, tmp277, tmp272
 3538 0fa4 01408B03 		orreq	r4, fp, #1	@,, tmp277, tmp272
 3539              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3540              		.loc 1 100 47 view .LVU933
 3541 0fa8 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_92, *_92
 3542              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3543              		.loc 1 91 19 view .LVU934
 3544 0fac 000054E3 		cmp	r4, #0	@ tmp277,
 3545              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3546              		.loc 1 100 47 view .LVU935
 3547 0fb0 01B08BE2 		add	fp, fp, #1	@ tmp268, *_92,
 3548 0fb4 02B0C1E7 		strb	fp, [r1, r2]	@ tmp268, *_92
 3549              	.LVL240:
 101:armwave.c     ****             }
 3550              		.loc 1 101 17 is_stmt 1 view .LVU936
  88:armwave.c     ****                 
 3551              		.loc 1 88 17 view .LVU937
  91:armwave.c     ****                     continue;
 3552              		.loc 1 91 17 view .LVU938
 3553              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3554              		.loc 1 91 19 is_stmt 0 view .LVU939
 3555 0fb8 2A00001A 		bne	.L222		@,
 3556              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3557              		.loc 1 99 34 view .LVU940
 3558 0fbc 242097E5 		ldr	r2, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3559              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3560              		.loc 1 99 99 view .LVU941
 3561 0fc0 40B097E5 		ldr	fp, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3562              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3563              		.loc 1 91 20 view .LVU942
 3564 0fc4 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 3565              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3566              		.loc 1 99 34 view .LVU943
 3567 0fc8 920A0AE0 		mul	r10, r2, r10	@ tmp280, g_armwave_state.cmp_x_bitdepth_scale, tmp279
 3568              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3569              		.loc 1 91 20 view .LVU944
 3570 0fcc FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 3571 0fd0 0120A003 		moveq	r2, #1	@ tmp294,
 3572              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3573              		.loc 1 99 74 view .LVU945
 3574 0fd4 2AA4A0E1 		lsr	r10, r10, #8	@ tmp282, tmp280,
 3575              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3576              		.loc 1 91 20 view .LVU946
 3577 0fd8 0020A013 		movne	r2, #0	@ tmp294,
 3578              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3579              		.loc 1 100 47 view .LVU947
 3580 0fdc 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp287, g_armwave_state.bitdepth_height, tmp282, tmp286
 3581 0fe0 0C408EE0 		add	r4, lr, ip	@ tmp308, scale_value, _24
 3582              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3583              		.loc 1 91 19 view .LVU948
 3584 0fe4 FF005EE3 		cmp	lr, #255	@ scale_value,
 3585 0fe8 02E0A011 		movne	lr, r2	@, tmp299, tmp294
 3586 0fec 01E08203 		orreq	lr, r2, #1	@,, tmp299, tmp294
 3587              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3588              		.loc 1 100 47 view .LVU949
 3589 0ff0 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_123, *_123
 3590              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3591              		.loc 1 91 19 view .LVU950
 3592 0ff4 00005EE3 		cmp	lr, #0	@ tmp299,
 3593              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3594              		.loc 1 100 47 view .LVU951
 3595 0ff8 012082E2 		add	r2, r2, #1	@ tmp290, *_123,
 3596 0ffc 0920C1E7 		strb	r2, [r1, r9]	@ tmp290, *_123
 101:armwave.c     ****             }
 3597              		.loc 1 101 17 is_stmt 1 view .LVU952
 3598              	.LVL241:
  88:armwave.c     ****                 
 3599              		.loc 1 88 17 view .LVU953
  91:armwave.c     ****                     continue;
 3600              		.loc 1 91 17 view .LVU954
 3601              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3602              		.loc 1 91 19 is_stmt 0 view .LVU955
 3603 1000 1800001A 		bne	.L222		@,
 3604              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3605              		.loc 1 99 34 view .LVU956
 3606 1004 24E097E5 		ldr	lr, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3607              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3608              		.loc 1 91 20 view .LVU957
 3609 1008 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 3610              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3611              		.loc 1 100 47 view .LVU958
 3612 100c 03208CE0 		add	r2, ip, r3	@ tmp329, _24, word
 3613              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3614              		.loc 1 99 34 view .LVU959
 3615 1010 9E0505E0 		mul	r5, lr, r5	@ tmp302, g_armwave_state.cmp_x_bitdepth_scale, tmp301
 3616              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3617              		.loc 1 99 99 view .LVU960
 3618 1014 40E097E5 		ldr	lr, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3619              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3620              		.loc 1 99 74 view .LVU961
 3621 1018 2554A0E1 		lsr	r5, r5, #8	@ tmp304, tmp302,
 3622              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3623              		.loc 1 100 47 view .LVU962
 3624 101c 9E4525E0 		mla	r5, lr, r5, r4	@ tmp309, g_armwave_state.bitdepth_height, tmp304, tmp308
 3625              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3626              		.loc 1 91 20 view .LVU963
 3627 1020 01E0A003 		moveq	lr, #1	@ tmp315,
 3628 1024 00E0A013 		movne	lr, #0	@ tmp315,
 3629              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3630              		.loc 1 91 19 view .LVU964
 3631 1028 FF0053E3 		cmp	r3, #255	@ word,
 3632 102c 01E08E03 		orreq	lr, lr, #1	@,, tmp320, tmp315
 3633              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3634              		.loc 1 100 47 view .LVU965
 3635 1030 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_154, *_154
 3636              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3637              		.loc 1 91 19 view .LVU966
 3638 1034 00005EE3 		cmp	lr, #0	@ tmp320,
 3639              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3640              		.loc 1 100 47 view .LVU967
 3641 1038 013083E2 		add	r3, r3, #1	@ tmp312, *_154,
 3642 103c 0530C1E7 		strb	r3, [r1, r5]	@ tmp312, *_154
 101:armwave.c     ****             }
 3643              		.loc 1 101 17 is_stmt 1 view .LVU968
 3644              	.LVL242:
  88:armwave.c     ****                 
 3645              		.loc 1 88 17 view .LVU969
  91:armwave.c     ****                     continue;
 3646              		.loc 1 91 17 view .LVU970
 3647              	@ armwave.c:91:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  91:armwave.c     ****                     continue;
 3648              		.loc 1 91 19 is_stmt 0 view .LVU971
 3649 1040 0800001A 		bne	.L222		@,
 3650              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3651              		.loc 1 99 34 view .LVU972
 3652 1044 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 3653 1048 034080E2 		add	r4, r0, #3	@ tmp322, yy,
 3654              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3655              		.loc 1 99 99 view .LVU973
 3656 104c 40E097E5 		ldr	lr, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 3657              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3658              		.loc 1 99 34 view .LVU974
 3659 1050 930403E0 		mul	r3, r3, r4	@ tmp323, g_armwave_state.cmp_x_bitdepth_scale, tmp322
 3660              	@ armwave.c:99:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOO
  99:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 3661              		.loc 1 99 74 view .LVU975
 3662 1054 2334A0E1 		lsr	r3, r3, #8	@ tmp325, tmp323,
 3663              	@ armwave.c:100:                 *(write_buffer + scale_value) += 1;
 100:armwave.c     ****                 word >>= 8;
 3664              		.loc 1 100 47 view .LVU976
 3665 1058 9E2323E0 		mla	r3, lr, r3, r2	@ tmp330, g_armwave_state.bitdepth_height, tmp325, tmp329
 3666 105c 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_185, *_185
 3667 1060 012082E2 		add	r2, r2, #1	@ tmp333, *_185,
 3668 1064 0320C1E7 		strb	r2, [r1, r3]	@ tmp333, *_185
 101:armwave.c     ****             }
 3669              		.loc 1 101 17 is_stmt 1 view .LVU977
 3670              	.LVL243:
 3671              	.L222:
 3672              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3673              		.loc 1 83 9 is_stmt 0 view .LVU978
 3674 1068 00309DE5 		ldr	r3, [sp]	@ _7, %sfp
 3675              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3676              		.loc 1 83 37 view .LVU979
 3677 106c 040080E2 		add	r0, r0, #4	@ yy, yy,
 3678              	.LVL244:
 3679              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 3680              		.loc 1 83 9 view .LVU980
 3681 1070 000053E1 		cmp	r3, r0	@ _7, yy
 3682 1074 B1FFFF8A 		bhi	.L218		@,
 3683 1078 384097E5 		ldr	r4, [r7, #56]	@ prephitmp_241, g_armwave_state.waves
 3684              	.LVL245:
 3685              	.L214:
 3686              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3687              		.loc 1 78 44 view .LVU981
 3688 107c 018088E2 		add	r8, r8, #1	@ w, w,
 3689              	.LVL246:
 3690              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3691              		.loc 1 78 5 view .LVU982
 3692 1080 040058E1 		cmp	r8, r4	@ w, prephitmp_241
 3693 1084 A3FFFFBA 		blt	.L219		@,
 3694 1088 4C5097E5 		ldr	r5, [r7, #76]	@ prephitmp_231, g_armwave_state.wave_length
 3695 108c 446097E5 		ldr	r6, [r7, #68]	@ _36, g_armwave_state.slice_height
 3696              	.LVL247:
 3697              	.L213:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 3698              		.loc 1 78 5 view .LVU983
 3699              	.LBE62:
 3700              	.LBE64:
 607:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 3701              		.loc 1 607 9 is_stmt 1 discriminator 3 view .LVU984
 608:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 3702              		.loc 1 608 9 discriminator 3 view .LVU985
 3703              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 603:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3704              		.loc 1 603 51 is_stmt 0 discriminator 3 view .LVU986
 3705 1090 0610A0E1 		mov	r1, r6	@, _36
 3706              	.LVL248:
 603:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3707              		.loc 1 603 51 discriminator 3 view .LVU987
 3708 1094 0500A0E1 		mov	r0, r5	@, prephitmp_231
 3709 1098 FEFFFFEB 		bl	__aeabi_idiv		@
 3710              	.LVL249:
 3711              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 603:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3712              		.loc 1 603 86 discriminator 3 view .LVU988
 3713 109c 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 3714 10a0 013083E2 		add	r3, r3, #1	@ yy, yy,
 3715 10a4 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 3716              	.LVL250:
 3717              	@ armwave.c:603:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 603:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 3718              		.loc 1 603 5 discriminator 3 view .LVU989
 3719 10a8 030050E1 		cmp	r0, r3	@, yy
 3720 10ac 8AFFFF8A 		bhi	.L220		@,
 3721              	.LVL251:
 3722              	.L211:
 3723              	@ armwave.c:612: }
 609:armwave.c     ****     }
 610:armwave.c     **** 
 611:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 612:armwave.c     **** }
 3724              		.loc 1 612 1 view .LVU990
 3725 10b0 14D08DE2 		add	sp, sp, #20	@,,
 3726              		.cfi_def_cfa_offset 36
 3727              		@ sp needed	@
 3728 10b4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 3729              	.L231:
 3730              		.align	2
 3731              	.L230:
 3732 10b8 00000000 		.word	g_armwave_state
 3733              		.cfi_endproc
 3734              	.LFE75:
 3736              		.align	2
 3737              		.global	armwave_cleanup
 3738              		.syntax unified
 3739              		.arm
 3740              		.fpu vfp
 3742              	armwave_cleanup:
 3743              	.LFB76:
 613:armwave.c     **** 
 614:armwave.c     **** /*
 615:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 616:armwave.c     ****  */
 617:armwave.c     **** void armwave_cleanup()
 618:armwave.c     **** {
 3744              		.loc 1 618 1 is_stmt 1 view -0
 3745              		.cfi_startproc
 3746              		@ args = 0, pretend = 0, frame = 0
 3747              		@ frame_needed = 0, uses_anonymous_args = 0
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3748              		.loc 1 619 5 view .LVU992
 3749              	@ armwave.c:618: {
 618:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3750              		.loc 1 618 1 is_stmt 0 view .LVU993
 3751 10bc 10402DE9 		push	{r4, lr}	@
 3752              		.cfi_def_cfa_offset 8
 3753              		.cfi_offset 4, -8
 3754              		.cfi_offset 14, -4
 3755              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3756              		.loc 1 619 25 view .LVU994
 3757 10c0 34409FE5 		ldr	r4, .L234	@ tmp114,
 3758              	@ armwave.c:619:     free(g_armwave_state.out_pixbuf);
 3759              		.loc 1 619 5 view .LVU995
 3760 10c4 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3761 10c8 FEFFFFEB 		bl	free		@
 3762              	.LVL252:
 620:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3763              		.loc 1 620 5 is_stmt 1 view .LVU996
 3764 10cc 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3765 10d0 FEFFFFEB 		bl	free		@
 3766              	.LVL253:
 621:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3767              		.loc 1 621 5 view .LVU997
 3768 10d4 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3769 10d8 FEFFFFEB 		bl	free		@
 3770              	.LVL254:
 622:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3771              		.loc 1 622 5 view .LVU998
 3772 10dc 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3773 10e0 FEFFFFEB 		bl	free		@
 3774              	.LVL255:
 623:armwave.c     **** 
 624:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3775              		.loc 1 624 5 view .LVU999
 3776              	@ armwave.c:624:     g_armwave_state.out_pixbuf = NULL;
 3777              		.loc 1 624 32 is_stmt 0 view .LVU1000
 3778 10e4 0030A0E3 		mov	r3, #0	@ tmp123,
 3779 10e8 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 625:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3780              		.loc 1 625 5 is_stmt 1 view .LVU1001
 3781              	@ armwave.c:625:     g_armwave_state.ch1_buffer = NULL;
 3782              		.loc 1 625 32 is_stmt 0 view .LVU1002
 3783 10ec 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 626:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3784              		.loc 1 626 5 is_stmt 1 view .LVU1003
 3785              	@ armwave.c:626:     g_armwave_state.xcoord_to_xpixel = NULL;
 3786              		.loc 1 626 38 is_stmt 0 view .LVU1004
 3787 10f0 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 627:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3788              		.loc 1 627 5 is_stmt 1 view .LVU1005
 3789              	@ armwave.c:627:     g_armwave_state.test_wave_buffer = NULL;
 3790              		.loc 1 627 38 is_stmt 0 view .LVU1006
 3791 10f4 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3792              	@ armwave.c:628: }
 628:armwave.c     **** }
 3793              		.loc 1 628 1 view .LVU1007
 3794 10f8 1080BDE8 		pop	{r4, pc}	@
 3795              	.L235:
 3796              		.align	2
 3797              	.L234:
 3798 10fc 00000000 		.word	g_armwave_state
 3799              		.cfi_endproc
 3800              	.LFE76:
 3802              		.comm	gamma_table,256,4
 3803              		.comm	g_armwave_state,136,4
 3804              		.section	.rodata
 3805              		.align	2
 3806              		.set	.LANCHOR0,. + 0
 3809              	__PRETTY_FUNCTION__.17095:
 3810 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3810      6176655F 
 3810      66696C6C 
 3810      5F706978 
 3810      6275665F 
 3811 001b 00       		.space	1
 3814              	__PRETTY_FUNCTION__.17117:
 3815 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3815      6176655F 
 3815      73657475 
 3815      705F7265 
 3815      6E646572 
 3816 0031 000000   		.space	3
 3819              	__PRETTY_FUNCTION__.17124:
 3820 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3820      6176655F 
 3820      7365745F 
 3820      77617665 
 3820      5F706F69 
 3821 004d 000000   		.space	3
 3824              	__PRETTY_FUNCTION__.17131:
 3825 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3825      6176655F 
 3825      7365745F 
 3825      77617665 
 3825      5F706F69 
 3826              		.section	.rodata.str1.4,"aMS",%progbits,1
 3827              		.align	2
 3828              	.LC0:
 3829 0000 76302E30 		.ascii	"v0.0.1\000"
 3829      2E3100
 3830 0007 00       		.space	1
 3831              	.LC1:
 3832 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3832      61766520 
 3832      76657273 
 3832      696F6E3A 
 3832      2025730A 
 3833 001d 000000   		.space	3
 3834              	.LC2:
 3835 0020 61726D77 		.ascii	"armwave.c\000"
 3835      6176652E 
 3835      6300
 3836 002a 0000     		.space	2
 3837              	.LC3:
 3838 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3838      62756666 
 3838      65722021 
 3838      3D204E55 
 3838      4C4C00
 3839 003f 00       		.space	1
 3840              	.LC4:
 3841 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3841      20653D25 
 3841      6420773D 
 3841      25642077 
 3841      733D2564 
 3842              	.LC5:
 3843 006c 73746172 		.ascii	"start_point < end_point\000"
 3843      745F706F 
 3843      696E7420 
 3843      3C20656E 
 3843      645F706F 
 3844              	.LC6:
 3845 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3845      7566665F 
 3845      73697A65 
 3845      3D25642C 
 3845      20636D70 
 3846 00b6 00       		.ascii	"\000"
 3847 00b7 00       		.space	1
 3848              	.LC7:
 3849 00b8 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3849      6D776176 
 3849      655F7374 
 3849      6174652E 
 3849      6368315F 
 3850 00db 00       		.space	1
 3851              	.LC8:
 3852 00dc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3852      6D776176 
 3852      655F7374 
 3852      6174652E 
 3852      78636F6F 
 3853 0105 000000   		.space	3
 3854              	.LC9:
 3855 0108 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3855      3A203078 
 3855      25303878 
 3855      20307825 
 3855      30387820 
 3856              	.LC10:
 3857 012c 77617665 		.ascii	"wave_buffer != NULL\000"
 3857      5F627566 
 3857      66657220 
 3857      213D204E 
 3857      554C4C00 
 3858              	.LC11:
 3859 0140 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3859      6176655F 
 3859      7365745F 
 3859      77617665 
 3859      5F706F69 
 3860 0173 78636565 		.ascii	"xceeded\000"
 3860      64656400 
 3861 017b 00       		.space	1
 3862              	.LC12:
 3863 017c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3863      5F627566 
 3863      6665725F 
 3863      70747220 
 3863      213D2030 
 3864 0191 000000   		.space	3
 3865              	.LC13:
 3866 0194 776200   		.ascii	"wb\000"
 3867 0197 00       		.space	1
 3868              	.LC14:
 3869 0198 50330A00 		.ascii	"P3\012\000"
 3870              	.LC15:
 3871 019c 25642025 		.ascii	"%d %d\012\000"
 3871      640A00
 3872 01a3 00       		.space	1
 3873              	.LC16:
 3874 01a4 3235350A 		.ascii	"255\012\000"
 3874      00
 3875 01a9 000000   		.space	3
 3876              	.LC17:
 3877 01ac 25336420 		.ascii	"%3d %3d %3d\012\000"
 3877      25336420 
 3877      2533640A 
 3877      00
 3878 01b9 000000   		.space	3
 3879              	.LC18:
 3880 01bc 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3880      6176655F 
 3880      74657374 
 3880      5F627566 
 3880      6665725F 
 3881 01ef 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3881      20627566 
 3881      66657220 
 3881      28256420 
 3881      62797465 
 3882              	.LC19:
 3883 0210 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3883      6176655F 
 3883      66696C6C 
 3883      5F706978 
 3883      6275665F 
 3884 0243 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3884      20666169 
 3884      6C65642C 
 3884      20726574 
 3884      75726E69 
 3885 0262 0000     		.space	2
 3886              	.LC20:
 3887 0264 43616C63 		.ascii	"Calculating test set %d\012\000"
 3887      756C6174 
 3887      696E6720 
 3887      74657374 
 3887      20736574 
 3888              		.text
 3889              	.Letext0:
 3890              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3891              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3892              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3893              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3894              		.file 7 "/usr/include/stdio.h"
 3895              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3896              		.file 9 "/usr/include/errno.h"
 3897              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3898              		.file 11 "/usr/include/unistd.h"
 3899              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3900              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3901              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3902              		.file 15 "/usr/include/math.h"
 3903              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3904              		.file 17 "/usr/include/time.h"
 3905              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3906              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3907              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3908              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3909              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3910              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3911              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3912              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3913              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3914              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3915              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3916              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3917              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3918              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3919              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3920              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3921              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3922              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3923              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3924              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3925              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3926              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3927              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3928              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3929              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3930              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3931              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3932              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3933              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3934              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3935              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3936              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3937              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3938              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3939              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3940              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3941              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3942              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3943              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3944              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3945              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3946              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3947              		.file 60 "/usr/local/include/python3.8/context.h"
 3948              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3949              		.file 62 "/usr/local/include/python3.8/code.h"
 3950              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3951              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3952              		.file 65 "/usr/local/include/python3.8/import.h"
 3953              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3954              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3955              		.file 68 "/usr/include/malloc.h"
 3956              		.file 69 "armwave.h"
 3957              		.file 70 "/usr/include/stdlib.h"
 3958              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3959              		.file 72 "<built-in>"
 3960              		.file 73 "/usr/include/assert.h"
 3961              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
