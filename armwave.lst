   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.27,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.27,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.27,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.27
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.27, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB60:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * Core inline to do part of a render operation.
  56:armwave.c     ****  */
  57:armwave.c     **** ATTR_ALWAYS_INLINE INLINE_STATIC_VOID _render_nonaa_to_buffer_1ch_slice_core0(uint32_t *write_buffe
  58:armwave.c     **** {
  59:armwave.c     ****     int scale_value, yy, ys;
  60:armwave.c     ****     uint32_t *write_buffer;
  61:armwave.c     ****     uint32_t word;
  62:armwave.c     **** 
  63:armwave.c     ****     // roll through y and render the slice into the out buffer
  64:armwave.c     ****     // buffer is rendered rotated by 90 degrees
  65:armwave.c     ****     for(yy = 0; yy < height; yy += 4) {
  66:armwave.c     ****         word = *(uint32_t*)(wave_base + yy);
  67:armwave.c     **** 
  68:armwave.c     ****         for(ys = 0; ys < 4; ys++) {
  69:armwave.c     ****             scale_value = word & 0xff;
  70:armwave.c     ****             
  71:armwave.c     ****             // prevents saturating behaviour; we lose two ADC counts.
  72:armwave.c     ****             if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  73:armwave.c     ****                 continue;
  74:armwave.c     **** 
  75:armwave.c     ****             // Keep math in integer where possible using the compound X multiplier and a shift by 8
  76:armwave.c     ****             // of X to 1/256 but this should not be an ultimate issue.
  77:armwave.c     ****             write_buffer = write_buffer_base + (((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) 
  78:armwave.c     ****             *(write_buffer + scale_value) += 1;
  79:armwave.c     ****             word >>= 8;
  80:armwave.c     ****         }
  81:armwave.c     ****     }
  82:armwave.c     **** }
  83:armwave.c     **** 
  84:armwave.c     **** /*
  85:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  86:armwave.c     ****  * pre-computed.
  87:armwave.c     ****  *
  88:armwave.c     ****  * @param    slice_y        Slice to render at
  89:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  90:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  91:armwave.c     ****  */
  92:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  93:armwave.c     **** {
 225              		.loc 1 93 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 0
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  94:armwave.c     ****     int yy, ys, w;
 229              		.loc 1 94 5 view .LVU25
  95:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 95 5 view .LVU26
  96:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 96 5 view .LVU27
  97:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 97 5 view .LVU28
  98:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 98 5 view .LVU29
  99:armwave.c     **** 
 100:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 234              		.loc 1 100 5 view .LVU30
 235              	@ armwave.c:93: {
  93:armwave.c     ****     int yy, ys, w;
 236              		.loc 1 93 1 is_stmt 0 view .LVU31
 237 009c F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 238              		.cfi_def_cfa_offset 24
 239              		.cfi_offset 4, -24
 240              		.cfi_offset 5, -20
 241              		.cfi_offset 6, -16
 242              		.cfi_offset 7, -12
 243              		.cfi_offset 8, -8
 244              		.cfi_offset 14, -4
 245              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 246              		.loc 1 100 40 view .LVU32
 247 00a0 50509FE5 		ldr	r5, .L16	@ tmp142,
 248              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 101:armwave.c     **** 
 102:armwave.c     ****     // roll through each waveform
 103:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 249              		.loc 1 103 5 view .LVU33
 250 00a4 382095E5 		ldr	r2, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 251              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 100:armwave.c     **** 
 252              		.loc 1 100 63 view .LVU34
 253 00a8 407095E5 		ldr	r7, [r5, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 254              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 100:armwave.c     **** 
 255              		.loc 1 100 23 view .LVU35
 256 00ac 043095E5 		ldr	r3, [r5, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 257              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 258              		.loc 1 103 5 view .LVU36
 259 00b0 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 260              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 100:armwave.c     **** 
 261              		.loc 1 100 23 view .LVU37
 262 00b4 973027E0 		mla	r7, r7, r0, r3	@ write_buffer_base, g_armwave_state.bitdepth_height, slice_y, g_armwave_state.
 263              	.LVL7:
 264              		.loc 1 103 5 is_stmt 1 view .LVU38
 265              		.loc 1 103 5 is_stmt 0 view .LVU39
 266 00b8 F081BDD8 		pople	{r4, r5, r6, r7, r8, pc}	@
 267 00bc 0180A0E1 		mov	r8, r1	@ height, height
 268 00c0 0060A0E1 		mov	r6, r0	@ slice_y, slice_y
 269              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 270              		.loc 1 103 11 view .LVU40
 271 00c4 0040A0E3 		mov	r4, #0	@ w,
 272              	.LVL8:
 273              	.L13:
 274              	.LBB9:
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 275              		.loc 1 104 9 is_stmt 1 discriminator 3 view .LVU41
 105:armwave.c     **** 
 106:armwave.c     ****         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, height);
 276              		.loc 1 106 9 discriminator 3 view .LVU42
 277              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 278              		.loc 1 104 64 is_stmt 0 discriminator 3 view .LVU43
 279 00c8 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 280              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 281              		.loc 1 104 19 discriminator 3 view .LVU44
 282 00cc 141095E5 		ldr	r1, [r5, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 283              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 284              		.loc 1 106 9 discriminator 3 view .LVU45
 285 00d0 0820A0E1 		mov	r2, r8	@, height
 286              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 287              		.loc 1 104 59 discriminator 3 view .LVU46
 288 00d4 936423E0 		mla	r3, r3, r4, r6	@ tmp137, g_armwave_state.wave_stride, w, slice_y
 289              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 290              		.loc 1 106 9 discriminator 3 view .LVU47
 291 00d8 0700A0E1 		mov	r0, r7	@, write_buffer_base
 292 00dc 031081E0 		add	r1, r1, r3	@, g_armwave_state.wave_buffer, tmp137
 293 00e0 FEFFFFEB 		bl	_render_nonaa_to_buffer_1ch_slice_core		@
 294              	.LVL9:
 295              		.loc 1 106 9 discriminator 3 view .LVU48
 296              	.LBE9:
 297              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 298              		.loc 1 103 5 discriminator 3 view .LVU49
 299 00e4 383095E5 		ldr	r3, [r5, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 300              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 301              		.loc 1 103 44 discriminator 3 view .LVU50
 302 00e8 014084E2 		add	r4, r4, #1	@ w, w,
 303              	.LVL10:
 304              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 305              		.loc 1 103 5 discriminator 3 view .LVU51
 306 00ec 040053E1 		cmp	r3, r4	@ g_armwave_state.waves, w
 307 00f0 F4FFFFCA 		bgt	.L13		@,
 308 00f4 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 309              	.L17:
 310              		.align	2
 311              	.L16:
 312 00f8 00000000 		.word	g_armwave_state
 313              		.cfi_endproc
 314              	.LFE60:
 316              		.align	2
 317              		.global	armwave_fill_pixbuf_scaled
 318              		.syntax unified
 319              		.arm
 320              		.fpu vfp
 322              	armwave_fill_pixbuf_scaled:
 323              	.LVL11:
 324              	.LFB61:
 107:armwave.c     ****     }
 108:armwave.c     **** }
 109:armwave.c     **** 
 110:armwave.c     **** #if 0
 111:armwave.c     **** /*
 112:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 113:armwave.c     ****  */
 114:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 115:armwave.c     **** {
 116:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 117:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 118:armwave.c     ****     uint8_t r, g, b, value;
 119:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 120:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 121:armwave.c     ****     uint32_t offset;
 122:armwave.c     **** 
 123:armwave.c     ****     assert(out_buffer != NULL);
 124:armwave.c     **** 
 125:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 126:armwave.c     **** 
 127:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 128:armwave.c     **** 
 129:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 130:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 131:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 132:armwave.c     ****         // most normal waveforms.
 133:armwave.c     ****         wave_word = *base_32ptr++;
 134:armwave.c     **** 
 135:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 136:armwave.c     ****             for(i = 0; i < 4; i++) {
 137:armwave.c     ****                 value = wave_word & 0xff;
 138:armwave.c     ****                 wave_word >>= 8;
 139:armwave.c     **** 
 140:armwave.c     ****                 if(value != 0) {
 141:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 142:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 143:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 144:armwave.c     **** 
 145:armwave.c     ****                     r = MIN(rr, 255);
 146:armwave.c     ****                     g = MIN(gg, 255);
 147:armwave.c     ****                     b = MIN(bb, 255);
 148:armwave.c     **** 
 149:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 150:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 151:armwave.c     **** 
 152:armwave.c     ****                     // Is there a better way?
 153:armwave.c     ****                     nsub = n + i;
 154:armwave.c     ****                     xx = nsub & 0xff;
 155:armwave.c     ****                     yy = nsub >> 8;
 156:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 157:armwave.c     ****                     *(out_buffer_base + offset) = word;
 158:armwave.c     ****                 }
 159:armwave.c     ****             }
 160:armwave.c     ****         } 
 161:armwave.c     ****     }
 162:armwave.c     **** }
 163:armwave.c     **** #endif
 164:armwave.c     **** 
 165:armwave.c     **** /*
 166:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 167:armwave.c     ****  * Rows are repeated as necessary.
 168:armwave.c     ****  */
 169:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 170:armwave.c     **** {
 325              		.loc 1 170 1 is_stmt 1 view -0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 8
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 171:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 329              		.loc 1 171 5 view .LVU53
 172:armwave.c     ****     // uint32_t ysub;
 173:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 330              		.loc 1 173 5 view .LVU54
 174:armwave.c     ****     uint8_t r, g, b, value; 
 331              		.loc 1 174 5 view .LVU55
 175:armwave.c     ****     // uint8_t row;
 176:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 332              		.loc 1 176 5 view .LVU56
 333              	@ armwave.c:170: {
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 334              		.loc 1 170 1 is_stmt 0 view .LVU57
 335 00fc F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 336              		.cfi_def_cfa_offset 36
 337              		.cfi_offset 4, -36
 338              		.cfi_offset 5, -32
 339              		.cfi_offset 6, -28
 340              		.cfi_offset 7, -24
 341              		.cfi_offset 8, -20
 342              		.cfi_offset 9, -16
 343              		.cfi_offset 10, -12
 344              		.cfi_offset 11, -8
 345              		.cfi_offset 14, -4
 346              	@ armwave.c:180:     assert(out_buffer != NULL);
 177:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 178:armwave.c     ****     uint32_t offset;
 179:armwave.c     **** 
 180:armwave.c     ****     assert(out_buffer != NULL);
 347              		.loc 1 180 5 view .LVU58
 348 0100 000050E3 		cmp	r0, #0	@ out_buffer
 349              	@ armwave.c:176:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 350              		.loc 1 176 15 view .LVU59
 351 0104 44619FE5 		ldr	r6, .L40	@ tmp203,
 352              	@ armwave.c:170: {
 170:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 353              		.loc 1 170 1 view .LVU60
 354 0108 0CD04DE2 		sub	sp, sp, #12	@,,
 355              		.cfi_def_cfa_offset 48
 356              	@ armwave.c:176:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 357              		.loc 1 176 15 view .LVU61
 358 010c 04E096E5 		ldr	lr, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 359              	.LVL12:
 177:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 360              		.loc 1 177 5 is_stmt 1 view .LVU62
 178:armwave.c     **** 
 361              		.loc 1 178 5 view .LVU63
 362              		.loc 1 180 5 view .LVU64
 363 0110 4900000A 		beq	.L37		@,
 181:armwave.c     **** 
 182:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 364              		.loc 1 182 5 view .LVU65
 365              	@ armwave.c:182:     npix = g_armwave_state.target_width * 256; 
 366              		.loc 1 182 10 is_stmt 0 view .LVU66
 367 0114 588096E5 		ldr	r8, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 368 0118 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 369              	.LVL13:
 183:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 184:armwave.c     **** 
 185:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 370              		.loc 1 185 5 is_stmt 1 view .LVU67
 371              		.loc 1 185 5 is_stmt 0 view .LVU68
 372 011c 000058E3 		cmp	r8, #0	@ npix,
 373 0120 0C0000DA 		ble	.L18		@,
 374              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 186:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 187:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 188:armwave.c     ****         // most normal waveforms.
 189:armwave.c     ****         wave_word = *base_32ptr++;
 190:armwave.c     **** 
 191:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 192:armwave.c     ****             for(w = 0; w < 4; w++) {
 193:armwave.c     ****                 value = wave_word & 0xff;
 194:armwave.c     ****                 wave_word >>= 8;
 195:armwave.c     **** 
 196:armwave.c     ****                 if(value != 0) {
 197:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 198:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 375              		.loc 1 198 52 view .LVU69
 376 0124 FE36D6E1 		ldrsh	r3, [r6, #110]	@ _10, g_armwave_state.ch1_color.g
 377              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 378              		.loc 1 197 52 view .LVU70
 379 0128 FCB6D6E1 		ldrsh	fp, [r6, #108]	@ _6, g_armwave_state.ch1_color.r
 380              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 199:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 200:armwave.c     **** 
 201:armwave.c     ****                     r = MIN(rr, 255);
 202:armwave.c     ****                     g = MIN(gg, 255);
 203:armwave.c     ****                     b = MIN(bb, 255);
 204:armwave.c     **** 
 205:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 206:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 207:armwave.c     **** 
 208:armwave.c     ****                     // Do line scaling as necessary.
 209:armwave.c     ****                     /*
 210:armwave.c     ****                     nsub = n + w;
 211:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 212:armwave.c     ****                     xx = (nsub >> 8);
 213:armwave.c     **** 
 214:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 215:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 216:armwave.c     ****                         *(out_buffer_base + offset) = word;
 217:armwave.c     ****                     }
 218:armwave.c     ****                     */
 219:armwave.c     **** 
 220:armwave.c     ****                     nsub = n + w;
 221:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 381              		.loc 1 221 57 view .LVU71
 382 012c 0A6AD6ED 		vldr.32	s13, [r6, #40]	@ _27, g_armwave_state.vscale_frac
 383              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 384              		.loc 1 198 52 view .LVU72
 385 0130 00308DE5 		str	r3, [sp]	@ _10, %sfp
 386              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 387              		.loc 1 199 52 view .LVU73
 388 0134 F037D6E1 		ldrsh	r3, [r6, #112]	@ _13, g_armwave_state.ch1_color.b
 389              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 390              		.loc 1 185 11 view .LVU74
 391 0138 0010A0E3 		mov	r1, #0	@ n,
 392              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 393              		.loc 1 199 52 view .LVU75
 394 013c 04308DE5 		str	r3, [sp, #4]	@ _13, %sfp
 395              	.LVL14:
 396              	.L25:
 189:armwave.c     **** 
 397              		.loc 1 189 9 is_stmt 1 view .LVU76
 398              	@ armwave.c:189:         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 399              		.loc 1 189 19 is_stmt 0 view .LVU77
 400 0140 04309EE4 		ldr	r3, [lr], #4	@ wave_word, MEM[base: base_32ptr_54, offset: 4294967292B]
 401              	.LVL15:
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 402              		.loc 1 191 9 is_stmt 1 view .LVU78
 403              	@ armwave.c:191:         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 404              		.loc 1 191 11 is_stmt 0 view .LVU79
 405 0144 000053E3 		cmp	r3, #0	@ wave_word,
 406 0148 0400001A 		bne	.L38		@,
 407              	.L21:
 408              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 409              		.loc 1 185 28 view .LVU80
 410 014c 041081E2 		add	r1, r1, #4	@ n, n,
 411              	.LVL16:
 412              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 413              		.loc 1 185 5 view .LVU81
 414 0150 010058E1 		cmp	r8, r1	@ npix, n
 415 0154 F9FFFFCA 		bgt	.L25		@,
 416              	.LVL17:
 417              	.L18:
 418              	@ armwave.c:233: }
 222:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 223:armwave.c     ****                     xx = (nsub >> 8);
 224:armwave.c     **** 
 225:armwave.c     ****                     for(y = yy; y < ye; y++) {
 226:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 227:armwave.c     ****                         *(out_buffer_base + offset) = word;
 228:armwave.c     ****                     }
 229:armwave.c     ****                 }
 230:armwave.c     ****             }
 231:armwave.c     ****         }
 232:armwave.c     ****     }
 233:armwave.c     **** }
 419              		.loc 1 233 1 view .LVU82
 420 0158 0CD08DE2 		add	sp, sp, #12	@,,
 421              		.cfi_remember_state
 422              		.cfi_def_cfa_offset 36
 423              		@ sp needed	@
 424 015c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 425              	.LVL18:
 426              	.L38:
 427              		.cfi_restore_state
 428              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 429              		.loc 1 196 19 view .LVU83
 430 0160 FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 431              	@ armwave.c:192:             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 432              		.loc 1 192 19 view .LVU84
 433 0164 0070A0E3 		mov	r7, #0	@ w,
 434              	.LVL19:
 193:armwave.c     ****                 wave_word >>= 8;
 435              		.loc 1 193 17 is_stmt 1 view .LVU85
 194:armwave.c     **** 
 436              		.loc 1 194 17 view .LVU86
 437              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 438              		.loc 1 194 27 is_stmt 0 view .LVU87
 439 0168 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 440              	.LVL20:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 441              		.loc 1 196 17 is_stmt 1 view .LVU88
 442              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 443              		.loc 1 196 19 is_stmt 0 view .LVU89
 444 016c 0500001A 		bne	.L39		@,
 445              	.L22:
 446              	@ armwave.c:192:             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 447              		.loc 1 192 32 view .LVU90
 448 0170 017087E2 		add	r7, r7, #1	@ w, w,
 449              	.LVL21:
 450              	@ armwave.c:192:             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 451              		.loc 1 192 13 view .LVU91
 452 0174 040057E3 		cmp	r7, #4	@ w,
 453 0178 F3FFFF0A 		beq	.L21		@,
 193:armwave.c     ****                 wave_word >>= 8;
 454              		.loc 1 193 17 is_stmt 1 view .LVU92
 455              	.LVL22:
 194:armwave.c     **** 
 456              		.loc 1 194 17 view .LVU93
 457              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 458              		.loc 1 196 19 is_stmt 0 view .LVU94
 459 017c FF2013E2 		ands	r2, r3, #255	@ _7, wave_word,
 460              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 461              		.loc 1 194 27 view .LVU95
 462 0180 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 463              	.LVL23:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 464              		.loc 1 196 17 is_stmt 1 view .LVU96
 465              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 466              		.loc 1 196 19 is_stmt 0 view .LVU97
 467 0184 F9FFFF0A 		beq	.L22		@,
 468              	.L39:
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 469              		.loc 1 197 21 is_stmt 1 view .LVU98
 470              	.LVL24:
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 471              		.loc 1 198 21 view .LVU99
 199:armwave.c     **** 
 472              		.loc 1 199 21 view .LVU100
 201:armwave.c     ****                     g = MIN(gg, 255);
 473              		.loc 1 201 21 view .LVU101
 202:armwave.c     ****                     b = MIN(bb, 255);
 474              		.loc 1 202 21 view .LVU102
 203:armwave.c     **** 
 475              		.loc 1 203 21 view .LVU103
 206:armwave.c     **** 
 476              		.loc 1 206 21 view .LVU104
 477              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 478              		.loc 1 199 55 is_stmt 0 view .LVU105
 479 0188 04C09DE5 		ldr	ip, [sp, #4]	@ _13, %sfp
 480 018c 075081E0 		add	r5, r1, r7	@ _120, n, w
 481 0190 9C020AE0 		mul	r10, ip, r2	@ tmp181, _13, _7
 482              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 483              		.loc 1 221 32 view .LVU106
 484 0194 75C0EFE6 		uxtb	ip, r5	@ _25, _120
 485              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 486              		.loc 1 222 41 view .LVU107
 487 0198 01408CE2 		add	r4, ip, #1	@ tmp196, _25,
 488              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 489              		.loc 1 221 40 view .LVU108
 490 019c 90CA07EE 		vmov	s15, ip	@ int	@ _25, _25
 491              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 492              		.loc 1 222 41 view .LVU109
 493 01a0 104A07EE 		vmov	s14, r4	@ int	@ tmp196, tmp196
 494              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 495              		.loc 1 198 55 view .LVU110
 496 01a4 00C09DE5 		ldr	ip, [sp]	@ _10, %sfp
 497              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 498              		.loc 1 199 24 view .LVU111
 499 01a8 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp181,
 500              	.LVL25:
 501              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 502              		.loc 1 221 40 view .LVU112
 503 01ac E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _25
 504              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 505              		.loc 1 222 46 view .LVU113
 506 01b0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 507              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 508              		.loc 1 198 55 view .LVU114
 509 01b4 9C0204E0 		mul	r4, ip, r2	@ tmp185, _10, _7
 510              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 511              		.loc 1 197 55 view .LVU115
 512 01b8 920B02E0 		mul	r2, r2, fp	@ tmp191, _7, _6
 513              	.LVL26:
 514              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 515              		.loc 1 203 25 view .LVU116
 516 01bc FF005AE3 		cmp	r10, #255	@ bb,
 517              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 518              		.loc 1 198 24 view .LVU117
 519 01c0 4444A0E1 		asr	r4, r4, #8	@ gg, tmp185,
 520              	.LVL27:
 521              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 522              		.loc 1 221 40 view .LVU118
 523 01c4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _27
 524              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 525              		.loc 1 222 46 view .LVU119
 526 01c8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _27
 527              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 528              		.loc 1 197 24 view .LVU120
 529 01cc 42C4A0E1 		asr	ip, r2, #8	@ rr, tmp191,
 530              	.LVL28:
 531              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 532              		.loc 1 203 25 view .LVU121
 533 01d0 FFA0A0A3 		movge	r10, #255	@ bb,
 534              	.LVL29:
 535              	@ armwave.c:202:                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 536              		.loc 1 202 25 view .LVU122
 537 01d4 FF0054E3 		cmp	r4, #255	@ gg,
 538 01d8 FF40A0A3 		movge	r4, #255	@ gg,
 539              	.LVL30:
 540              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 541              		.loc 1 201 25 view .LVU123
 542 01dc FF005CE3 		cmp	ip, #255	@ rr,
 543              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 544              		.loc 1 206 56 view .LVU124
 545 01e0 0444A0E1 		lsl	r4, r4, #8	@ tmp186, gg,
 546              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 547              		.loc 1 221 24 view .LVU125
 548 01e4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 549              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 550              		.loc 1 201 25 view .LVU126
 551 01e8 FFC0A0A3 		movge	ip, #255	@ rr,
 552              	.LVL31:
 553              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 554              		.loc 1 206 44 view .LVU127
 555 01ec 0AA8A0E1 		lsl	r10, r10, #16	@ tmp182, bb,
 556 01f0 FFA80AE2 		and	r10, r10, #16711680	@ tmp183, tmp182,
 557              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 558              		.loc 1 206 56 view .LVU128
 559 01f4 7440FFE6 		uxth	r4, r4	@ tmp187, tmp186
 560              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 561              		.loc 1 206 51 view .LVU129
 562 01f8 04408AE1 		orr	r4, r10, r4	@ tmp189, tmp183, tmp187
 563              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 564              		.loc 1 206 62 view .LVU130
 565 01fc 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 566 0200 0CC084E1 		orr	ip, r4, ip	@ tmp193, tmp189, rr
 567              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 568              		.loc 1 221 24 view .LVU131
 569 0204 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 570              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 571              		.loc 1 222 24 view .LVU132
 572 0208 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 573              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 574              		.loc 1 206 26 view .LVU133
 575 020c FF448CE3 		orr	r4, ip, #-16777216	@ word, tmp193,
 576              	.LVL32:
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 577              		.loc 1 220 21 is_stmt 1 view .LVU134
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 578              		.loc 1 221 21 view .LVU135
 222:armwave.c     ****                     xx = (nsub >> 8);
 579              		.loc 1 222 21 view .LVU136
 580              	@ armwave.c:223:                     xx = (nsub >> 8);
 223:armwave.c     **** 
 581              		.loc 1 223 32 is_stmt 0 view .LVU137
 582 0210 4554A0E1 		asr	r5, r5, #8	@ xx, _120,
 583              	.LVL33:
 584              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 585              		.loc 1 222 24 view .LVU138
 586 0214 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 587              	.LVL34:
 223:armwave.c     **** 
 588              		.loc 1 223 21 is_stmt 1 view .LVU139
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 589              		.loc 1 225 21 view .LVU140
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 590              		.loc 1 225 21 is_stmt 0 view .LVU141
 591 0218 090052E1 		cmp	r2, r9	@ yy, ye
 592 021c D3FFFF2A 		bcs	.L22		@,
 593              	.LVL35:
 594              	.L23:
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 595              		.loc 1 226 25 is_stmt 1 discriminator 3 view .LVU142
 227:armwave.c     ****                     }
 596              		.loc 1 227 25 discriminator 3 view .LVU143
 597              	@ armwave.c:226:                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 598              		.loc 1 226 43 is_stmt 0 discriminator 3 view .LVU144
 599 0220 58C096E5 		ldr	ip, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 600              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 601              		.loc 1 227 43 discriminator 3 view .LVU145
 602 0224 9C522CE0 		mla	ip, ip, r2, r5	@ tmp202, g_armwave_state.target_width, yy, xx
 603              	.LVL36:
 604              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 605              		.loc 1 225 42 discriminator 3 view .LVU146
 606 0228 012082E2 		add	r2, r2, #1	@ yy, yy,
 607              	.LVL37:
 608              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 609              		.loc 1 225 21 discriminator 3 view .LVU147
 610 022c 020059E1 		cmp	r9, r2	@ ye, yy
 611              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 612              		.loc 1 227 53 discriminator 3 view .LVU148
 613 0230 0C4180E7 		str	r4, [r0, ip, lsl #2]	@ word, *_37
 614              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 615              		.loc 1 225 21 discriminator 3 view .LVU149
 616 0234 F9FFFF1A 		bne	.L23		@,
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 617              		.loc 1 225 21 discriminator 3 view .LVU150
 618 0238 CCFFFFEA 		b	.L22		@
 619              	.LVL38:
 620              	.L37:
 180:armwave.c     **** 
 621              		.loc 1 180 5 is_stmt 1 discriminator 1 view .LVU151
 622 023c 10309FE5 		ldr	r3, .L40+4	@,
 623 0240 B420A0E3 		mov	r2, #180	@,
 624 0244 0C109FE5 		ldr	r1, .L40+8	@,
 625 0248 0C009FE5 		ldr	r0, .L40+12	@,
 626              	.LVL39:
 180:armwave.c     **** 
 627              		.loc 1 180 5 is_stmt 0 discriminator 1 view .LVU152
 628 024c FEFFFFEB 		bl	__assert_fail		@
 629              	.LVL40:
 630              	.L41:
 180:armwave.c     **** 
 631              		.loc 1 180 5 discriminator 1 view .LVU153
 632              		.align	2
 633              	.L40:
 634 0250 00000000 		.word	g_armwave_state
 635 0254 00000000 		.word	.LANCHOR0
 636 0258 20000000 		.word	.LC2
 637 025c 2C000000 		.word	.LC3
 638              		.cfi_endproc
 639              	.LFE61:
 641              		.align	2
 642              		.global	armwave_setup_render
 643              		.syntax unified
 644              		.arm
 645              		.fpu vfp
 647              	armwave_setup_render:
 648              	.LVL41:
 649              	.LFB62:
 234:armwave.c     **** 
 235:armwave.c     **** /*
 236:armwave.c     ****  * Setup the renderer with passed parameters.
 237:armwave.c     ****  */
 238:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 239:armwave.c     **** {
 650              		.loc 1 239 1 is_stmt 1 view -0
 651              		.cfi_startproc
 652              		@ args = 12, pretend = 0, frame = 0
 653              		@ frame_needed = 0, uses_anonymous_args = 0
 240:armwave.c     ****     uint32_t length, xx;
 654              		.loc 1 240 5 view .LVU155
 241:armwave.c     ****     float points_per_pixel;
 655              		.loc 1 241 5 view .LVU156
 242:armwave.c     **** 
 243:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 656              		.loc 1 243 5 view .LVU157
 657              	@ armwave.c:239: {
 239:armwave.c     ****     uint32_t length, xx;
 658              		.loc 1 239 1 is_stmt 0 view .LVU158
 659 0260 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 660              		.cfi_def_cfa_offset 32
 661              		.cfi_offset 4, -32
 662              		.cfi_offset 5, -28
 663              		.cfi_offset 6, -24
 664              		.cfi_offset 7, -20
 665              		.cfi_offset 8, -16
 666              		.cfi_offset 9, -12
 667              		.cfi_offset 10, -8
 668              		.cfi_offset 14, -4
 669 0264 028B2DED 		vpush.64	{d8}	@
 670              		.cfi_def_cfa_offset 40
 671              		.cfi_offset 80, -40
 672              		.cfi_offset 81, -36
 673 0268 0050A0E1 		mov	r5, r0	@ start_point, start_point
 674 026c 0190A0E1 		mov	r9, r1	@ end_point, end_point
 675 0270 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 676 0274 10D04DE2 		sub	sp, sp, #16	@,,
 677              		.cfi_def_cfa_offset 56
 678              	@ armwave.c:239: {
 239:armwave.c     ****     uint32_t length, xx;
 679              		.loc 1 239 1 view .LVU159
 680 0278 03A0A0E1 		mov	r10, r3	@ wave_stride, wave_stride
 681 027c D863CDE1 		ldrd	r6, [sp, #56]	@,,
 682 0280 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 683              	@ armwave.c:243:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 684              		.loc 1 243 5 view .LVU160
 685 0284 00308DE5 		str	r3, [sp]	@ wave_stride,
 686 0288 F460CDE1 		strd	r6, [sp, #4]	@,,
 687 028c 0230A0E1 		mov	r3, r2	@, waves_max
 688              	.LVL42:
 689              		.loc 1 243 5 view .LVU161
 690 0290 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 691 0294 0120A0E1 		mov	r2, r1	@, end_point
 692              	.LVL43:
 693              		.loc 1 243 5 view .LVU162
 694 0298 0010A0E1 		mov	r1, r0	@, start_point
 695              	.LVL44:
 696              		.loc 1 243 5 view .LVU163
 697 029c 9C019FE5 		ldr	r0, .L56+8	@,
 698              	.LVL45:
 699              		.loc 1 243 5 view .LVU164
 700 02a0 FEFFFFEB 		bl	printf		@
 701              	.LVL46:
 244:armwave.c     **** 
 245:armwave.c     ****     // TODO these asserts should instead raise PyExc
 246:armwave.c     ****     assert(start_point < end_point);
 702              		.loc 1 246 5 is_stmt 1 view .LVU165
 703 02a4 090055E1 		cmp	r5, r9	@ start_point, end_point
 704 02a8 5300002A 		bcs	.L53		@,
 247:armwave.c     **** 
 248:armwave.c     ****     /*
 249:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 250:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 251:armwave.c     **** 
 252:armwave.c     ****     if(target_height == 256) {
 253:armwave.c     ****         g_armwave_state.row_shift = 8;
 254:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 255:armwave.c     ****     } else if(target_height == 512) {
 256:armwave.c     ****         g_armwave_state.row_shift = 9;
 257:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 258:armwave.c     ****     } else if(target_height == 1024) {
 259:armwave.c     ****         g_armwave_state.row_shift = 10;
 260:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 261:armwave.c     ****     } else if(target_height == 2048) {
 262:armwave.c     ****         g_armwave_state.row_shift = 11;
 263:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 264:armwave.c     ****     }
 265:armwave.c     ****     */
 266:armwave.c     **** 
 267:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 268:armwave.c     ****     g_armwave_state.xstride = target_height;
 705              		.loc 1 268 5 view .LVU166
 706              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 707              		.loc 1 269 49 is_stmt 0 view .LVU167
 708 02ac 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 709 02b0 607A9FED 		vldr.32	s14, .L56	@ tmp168,
 710              	@ armwave.c:268:     g_armwave_state.xstride = target_height;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 711              		.loc 1 268 29 view .LVU168
 712 02b4 88419FE5 		ldr	r4, .L56+12	@ tmp224,
 713              	@ armwave.c:274:     g_armwave_state.size = target_height * target_width;
 270:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 271:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 272:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 273:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 274:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 714              		.loc 1 274 42 view .LVU169
 715 02b8 970601E0 		mul	r1, r7, r6	@ tmp176, target_height, target_width
 716              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 717              		.loc 1 269 49 view .LVU170
 718 02bc 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp167, target_height
 719              	@ armwave.c:276:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 275:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 276:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 720              		.loc 1 276 68 view .LVU171
 721 02c0 0634A0E1 		lsl	r3, r6, #8	@ _10, target_width,
 722              	@ armwave.c:275:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 275:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 723              		.loc 1 275 37 view .LVU172
 724 02c4 010CA0E3 		mov	r0, #256	@ tmp178,
 725              	@ armwave.c:282:     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 <<
 277:armwave.c     ****     g_armwave_state.target_width = target_width;
 278:armwave.c     ****     g_armwave_state.target_height = target_height;
 279:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 280:armwave.c     **** 
 281:armwave.c     ****     // Calculate compound scaler
 282:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 << AM_XCOORD_MULT_S
 726              		.loc 1 282 42 view .LVU173
 727 02c8 0128A0E3 		mov	r2, #65536	@ tmp184,
 728              	@ armwave.c:274:     g_armwave_state.size = target_height * target_width;
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 729              		.loc 1 274 26 view .LVU174
 730 02cc 541084E5 		str	r1, [r4, #84]	@ tmp176, g_armwave_state.size
 731              	@ armwave.c:275:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 275:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 732              		.loc 1 275 37 view .LVU175
 733 02d0 400084E5 		str	r0, [r4, #64]	@ tmp178, g_armwave_state.bitdepth_height
 734              	@ armwave.c:284:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 283:armwave.c     **** 
 284:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 735              		.loc 1 284 5 view .LVU176
 736 02d4 0310A0E1 		mov	r1, r3	@, _10
 737              	@ armwave.c:279:     g_armwave_state.wave_length = end_point - start_point;
 279:armwave.c     **** 
 738              		.loc 1 279 45 view .LVU177
 739 02d8 055049E0 		sub	r5, r9, r5	@ _12, end_point, start_point
 740              	.LVL47:
 741              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 742              		.loc 1 269 49 view .LVU178
 743 02dc 877AC6EE 		vdiv.f32	s15, s13, s14	@ _3, tmp167, tmp168
 744              	@ armwave.c:284:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 745              		.loc 1 284 5 view .LVU179
 746 02e0 60019FE5 		ldr	r0, .L56+16	@,
 747              	@ armwave.c:276:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 748              		.loc 1 276 34 view .LVU180
 749 02e4 503084E5 		str	r3, [r4, #80]	@ _10, g_armwave_state.ch_buff_size
 750              	@ armwave.c:268:     g_armwave_state.xstride = target_height;
 268:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 751              		.loc 1 268 29 view .LVU181
 752 02e8 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 753              		.loc 1 269 5 is_stmt 1 view .LVU182
 754              	@ armwave.c:271:     g_armwave_state.wave_stride = wave_stride;
 271:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 755              		.loc 1 271 33 is_stmt 0 view .LVU183
 756 02ec 34A084E5 		str	r10, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 757              	@ armwave.c:272:     g_armwave_state.waves_max = waves_max;
 272:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 758              		.loc 1 272 31 view .LVU184
 759 02f0 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 760              	@ armwave.c:273:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 273:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 761              		.loc 1 273 27 view .LVU185
 762 02f4 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 763              	@ armwave.c:278:     g_armwave_state.target_height = target_height;
 278:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 764              		.loc 1 278 35 view .LVU186
 765 02f8 F865C4E1 		strd	r6, [r4, #88]	@, tmp224,
 766              	@ armwave.c:279:     g_armwave_state.wave_length = end_point - start_point;
 279:armwave.c     **** 
 767              		.loc 1 279 33 view .LVU187
 768 02fc 4C5084E5 		str	r5, [r4, #76]	@ _12, g_armwave_state.wave_length
 769              	@ armwave.c:282:     g_armwave_state.cmp_x_bitdepth_scale = g_armwave_state.bitdepth_height * (1 <<
 282:armwave.c     **** 
 770              		.loc 1 282 42 view .LVU188
 771 0300 242084E5 		str	r2, [r4, #36]	@ tmp184, g_armwave_state.cmp_x_bitdepth_scale
 772              	@ armwave.c:270:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 773              		.loc 1 270 30 view .LVU189
 774 0304 E77ABDEE 		vcvt.s32.f32	s14, s15	@ tmp171, _3
 775              	@ armwave.c:269:     g_armwave_state.vscale_frac = target_height / 255.0f;
 269:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 776              		.loc 1 269 33 view .LVU190
 777 0308 0A7AC4ED 		vstr.32	s15, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 778              		.loc 1 270 5 is_stmt 1 view .LVU191
 779              	@ armwave.c:270:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 270:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 780              		.loc 1 270 30 is_stmt 0 view .LVU192
 781 030c 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp171, g_armwave_state.vscale
 271:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 782              		.loc 1 271 5 is_stmt 1 view .LVU193
 272:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 783              		.loc 1 272 5 view .LVU194
 273:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 784              		.loc 1 273 5 view .LVU195
 274:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 785              		.loc 1 274 5 view .LVU196
 275:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 786              		.loc 1 275 5 view .LVU197
 276:armwave.c     ****     g_armwave_state.target_width = target_width;
 787              		.loc 1 276 5 view .LVU198
 277:armwave.c     ****     g_armwave_state.target_height = target_height;
 788              		.loc 1 277 5 view .LVU199
 278:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 789              		.loc 1 278 5 view .LVU200
 279:armwave.c     **** 
 790              		.loc 1 279 5 view .LVU201
 282:armwave.c     **** 
 791              		.loc 1 282 5 view .LVU202
 792              		.loc 1 284 5 view .LVU203
 793 0310 FEFFFFEB 		bl	printf		@
 794              	.LVL48:
 285:armwave.c     **** 
 286:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 287:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 288:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 289:armwave.c     ****     g_armwave_state.slice_height = 64;  
 795              		.loc 1 289 5 view .LVU204
 796              	@ armwave.c:291:     if(g_armwave_state.ch1_buffer != NULL)
 290:armwave.c     **** 
 291:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 797              		.loc 1 291 23 is_stmt 0 view .LVU205
 798 0314 040094E5 		ldr	r0, [r4, #4]	@ _14, g_armwave_state.ch1_buffer
 799              	@ armwave.c:289:     g_armwave_state.slice_height = 64;  
 289:armwave.c     **** 
 800              		.loc 1 289 34 view .LVU206
 801 0318 4030A0E3 		mov	r3, #64	@ tmp187,
 802              	@ armwave.c:291:     if(g_armwave_state.ch1_buffer != NULL)
 803              		.loc 1 291 7 view .LVU207
 804 031c 000050E3 		cmp	r0, #0	@ _14,
 805              	@ armwave.c:289:     g_armwave_state.slice_height = 64;  
 289:armwave.c     **** 
 806              		.loc 1 289 34 view .LVU208
 807 0320 443084E5 		str	r3, [r4, #68]	@ tmp187, g_armwave_state.slice_height
 808              		.loc 1 291 5 is_stmt 1 view .LVU209
 809              	@ armwave.c:291:     if(g_armwave_state.ch1_buffer != NULL)
 810              		.loc 1 291 7 is_stmt 0 view .LVU210
 811 0324 0000000A 		beq	.L44		@,
 292:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 812              		.loc 1 292 9 is_stmt 1 view .LVU211
 813 0328 FEFFFFEB 		bl	free		@
 814              	.LVL49:
 815              	.L44:
 293:armwave.c     **** 
 294:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 816              		.loc 1 294 5 view .LVU212
 817              	@ armwave.c:294:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 818              		.loc 1 294 34 is_stmt 0 view .LVU213
 819 032c 0110A0E3 		mov	r1, #1	@,
 820 0330 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 821 0334 FEFFFFEB 		bl	calloc		@
 822              	.LVL50:
 823              	@ armwave.c:296:     assert(g_armwave_state.ch1_buffer != NULL);
 295:armwave.c     **** 
 296:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 824              		.loc 1 296 5 view .LVU214
 825 0338 000050E3 		cmp	r0, #0	@ _17,
 826              	@ armwave.c:294:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 294:armwave.c     **** 
 827              		.loc 1 294 34 view .LVU215
 828 033c 0070A0E1 		mov	r7, r0	@ _17,
 829              	@ armwave.c:294:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 294:armwave.c     **** 
 830              		.loc 1 294 32 view .LVU216
 831 0340 040084E5 		str	r0, [r4, #4]	@ _17, g_armwave_state.ch1_buffer
 832              		.loc 1 296 5 is_stmt 1 view .LVU217
 833 0344 3600000A 		beq	.L54		@,
 297:armwave.c     **** 
 298:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 299:armwave.c     ****     length = end_point - start_point;
 834              		.loc 1 299 5 view .LVU218
 835              	.LVL51:
 300:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 836              		.loc 1 300 5 view .LVU219
 837              	@ armwave.c:300:     points_per_pixel = length / ((float)(target_width));
 838              		.loc 1 300 34 is_stmt 0 view .LVU220
 839 0348 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 840              	@ armwave.c:300:     points_per_pixel = length / ((float)(target_width));
 841              		.loc 1 300 22 view .LVU221
 842 034c 905A06EE 		vmov	s13, r5	@ int	@ _12, _12
 843              	@ armwave.c:302:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 302:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 844              		.loc 1 302 40 view .LVU222
 845 0350 8500A0E1 		lsl	r0, r5, #1	@, _12,
 846              	@ armwave.c:300:     points_per_pixel = length / ((float)(target_width));
 300:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 847              		.loc 1 300 34 view .LVU223
 848 0354 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp198, target_width
 849              	@ armwave.c:300:     points_per_pixel = length / ((float)(target_width));
 300:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 850              		.loc 1 300 22 view .LVU224
 851 0358 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp197, _12
 852              	@ armwave.c:301:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 301:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 853              		.loc 1 301 60 view .LVU225
 854 035c 117AD4ED 		vldr.32	s15, [r4, #68]	@ int	@ tmp230, g_armwave_state.slice_height
 855 0360 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp201, tmp230
 856              	@ armwave.c:300:     points_per_pixel = length / ((float)(target_width));
 300:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 857              		.loc 1 300 22 view .LVU226
 858 0364 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp197, tmp198
 859              	.LVL52:
 301:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 860              		.loc 1 301 5 is_stmt 1 view .LVU227
 861              	@ armwave.c:301:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 301:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 862              		.loc 1 301 60 is_stmt 0 view .LVU228
 863 0368 887A67EE 		vmul.f32	s15, s15, s16	@ tmp203, tmp201, points_per_pixel
 864              	@ armwave.c:301:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 301:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 865              		.loc 1 301 41 view .LVU229
 866 036c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp204, tmp203
 867 0370 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp204, g_armwave_state.slice_record_height
 868              		.loc 1 302 5 is_stmt 1 view .LVU230
 869              	@ armwave.c:302:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 870              		.loc 1 302 40 is_stmt 0 view .LVU231
 871 0374 FEFFFFEB 		bl	malloc		@
 872              	.LVL53:
 873              	@ armwave.c:304:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 303:armwave.c     **** 
 304:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 874              		.loc 1 304 5 view .LVU232
 875 0378 000050E3 		cmp	r0, #0	@ _25,
 876              	@ armwave.c:302:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 302:armwave.c     **** 
 877              		.loc 1 302 40 view .LVU233
 878 037c 0060A0E1 		mov	r6, r0	@ _25,
 879              	@ armwave.c:302:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 302:armwave.c     **** 
 880              		.loc 1 302 38 view .LVU234
 881 0380 840084E5 		str	r0, [r4, #132]	@ _25, g_armwave_state.xcoord_to_xpixel
 882              		.loc 1 304 5 is_stmt 1 view .LVU235
 883 0384 2100000A 		beq	.L55		@,
 884              	@ armwave.c:307:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 305:armwave.c     **** 
 306:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 307:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 885              		.loc 1 307 54 is_stmt 0 view .LVU236
 886 0388 2B7ADFED 		vldr.32	s15, .L56+4	@ tmp212,
 887 038c 02C040E2 		sub	ip, r0, #2	@ ivtmp.51, _25,
 888              	@ armwave.c:306:     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 889              		.loc 1 306 12 view .LVU237
 890 0390 0030A0E3 		mov	r3, #0	@ xx,
 891              	@ armwave.c:307:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 892              		.loc 1 307 54 view .LVU238
 893 0394 887A87EE 		vdiv.f32	s14, s15, s16	@ _26, tmp212, points_per_pixel
 894              	.L47:
 895              	.LVL54:
 896              		.loc 1 307 9 is_stmt 1 discriminator 3 view .LVU239
 897              	@ armwave.c:307:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 898              		.loc 1 307 74 is_stmt 0 discriminator 3 view .LVU240
 899 0398 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 900              	@ armwave.c:306:     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 901              		.loc 1 306 32 discriminator 3 view .LVU241
 902 039c 013083E2 		add	r3, r3, #1	@ xx, xx,
 903              	.LVL55:
 904              	@ armwave.c:306:     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 905              		.loc 1 306 5 discriminator 3 view .LVU242
 906 03a0 030055E1 		cmp	r5, r3	@ _12, xx
 907              	@ armwave.c:307:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 908              		.loc 1 307 74 discriminator 3 view .LVU243
 909 03a4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp213, xx
 910 03a8 877A67EE 		vmul.f32	s15, s15, s14	@ tmp214, tmp213, _26
 911              	@ armwave.c:307:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 912              		.loc 1 307 46 discriminator 3 view .LVU244
 913 03ac E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp215, tmp214
 914 03b0 902A17EE 		vmov	r2, s15	@ int	@ tmp215, tmp215
 915 03b4 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp215, MEM[base: _95, offset: 0B]
 916              	@ armwave.c:306:     for(xx = 0; xx < length; xx++) {
 306:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 917              		.loc 1 306 5 discriminator 3 view .LVU245
 918 03b8 F6FFFF1A 		bne	.L47		@,
 308:armwave.c     **** 
 309:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 310:armwave.c     ****     }
 311:armwave.c     **** 
 312:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 919              		.loc 1 312 5 is_stmt 1 view .LVU246
 920              	@ armwave.c:312:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 921              		.loc 1 312 34 is_stmt 0 view .LVU247
 922 03bc 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 923 03c0 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 924 03c4 FEFFFFEB 		bl	malloc		@
 925              	.LVL56:
 926              	@ armwave.c:314:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 313:armwave.c     **** 
 314:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 927              		.loc 1 314 5 view .LVU248
 928 03c8 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 929 03cc 0620A0E1 		mov	r2, r6	@, _25
 930 03d0 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 931 03d4 0710A0E1 		mov	r1, r7	@, _17
 932              	@ armwave.c:312:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 312:armwave.c     **** 
 933              		.loc 1 312 34 view .LVU249
 934 03d8 00C0A0E1 		mov	ip, r0	@ tmp219,
 935              	@ armwave.c:314:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 936              		.loc 1 314 5 view .LVU250
 937 03dc 0030A0E1 		mov	r3, r0	@, tmp219
 938 03e0 64009FE5 		ldr	r0, .L56+20	@,
 939              	@ armwave.c:312:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 312:armwave.c     **** 
 940              		.loc 1 312 32 view .LVU251
 941 03e4 68C084E5 		str	ip, [r4, #104]	@ tmp219, g_armwave_state.out_pixbuf
 942              		.loc 1 314 5 is_stmt 1 view .LVU252
 943 03e8 FEFFFFEB 		bl	printf		@
 944              	.LVL57:
 315:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 318:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 319:armwave.c     **** 
 320:armwave.c     ****     malloc_stats();
 945              		.loc 1 320 5 view .LVU253
 946              	@ armwave.c:321: }
 321:armwave.c     **** }
 947              		.loc 1 321 1 is_stmt 0 view .LVU254
 948 03ec 10D08DE2 		add	sp, sp, #16	@,,
 949              		.cfi_remember_state
 950              		.cfi_def_cfa_offset 40
 951              		@ sp needed	@
 952 03f0 028BBDEC 		vldm	sp!, {d8}	@
 953              		.cfi_restore 80
 954              		.cfi_restore 81
 955              		.cfi_def_cfa_offset 32
 956              	.LVL58:
 957              		.loc 1 321 1 view .LVU255
 958 03f4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 959              		.cfi_restore 14
 960              		.cfi_restore 10
 961              		.cfi_restore 9
 962              		.cfi_restore 8
 963              		.cfi_restore 7
 964              		.cfi_restore 6
 965              		.cfi_restore 5
 966              		.cfi_restore 4
 967              		.cfi_def_cfa_offset 0
 968              	.LVL59:
 969              	@ armwave.c:320:     malloc_stats();
 320:armwave.c     **** }
 970              		.loc 1 320 5 view .LVU256
 971 03f8 FEFFFFEA 		b	malloc_stats		@
 972              	.LVL60:
 973              	.L53:
 974              		.cfi_restore_state
 246:armwave.c     **** 
 975              		.loc 1 246 5 is_stmt 1 discriminator 1 view .LVU257
 976 03fc 4C309FE5 		ldr	r3, .L56+24	@,
 977 0400 F620A0E3 		mov	r2, #246	@,
 978 0404 48109FE5 		ldr	r1, .L56+28	@,
 979 0408 48009FE5 		ldr	r0, .L56+32	@,
 980 040c FEFFFFEB 		bl	__assert_fail		@
 981              	.LVL61:
 982              	.L55:
 304:armwave.c     **** 
 983              		.loc 1 304 5 discriminator 1 view .LVU258
 984 0410 38309FE5 		ldr	r3, .L56+24	@,
 985 0414 132EA0E3 		mov	r2, #304	@,
 986 0418 34109FE5 		ldr	r1, .L56+28	@,
 987 041c 38009FE5 		ldr	r0, .L56+36	@,
 988 0420 FEFFFFEB 		bl	__assert_fail		@
 989              	.LVL62:
 990              	.L54:
 296:armwave.c     **** 
 991              		.loc 1 296 5 discriminator 1 view .LVU259
 992 0424 24309FE5 		ldr	r3, .L56+24	@,
 993 0428 4A2FA0E3 		mov	r2, #296	@,
 994 042c 20109FE5 		ldr	r1, .L56+28	@,
 995 0430 28009FE5 		ldr	r0, .L56+40	@,
 996 0434 FEFFFFEB 		bl	__assert_fail		@
 997              	.LVL63:
 998              	.L57:
 999              		.align	2
 1000              	.L56:
 1001 0438 00007F43 		.word	1132396544
 1002 043c 0000803F 		.word	1065353216
 1003 0440 40000000 		.word	.LC4
 1004 0444 00000000 		.word	g_armwave_state
 1005 0448 84000000 		.word	.LC6
 1006 044c E8000000 		.word	.LC9
 1007 0450 1C000000 		.word	.LANCHOR0+28
 1008 0454 20000000 		.word	.LC2
 1009 0458 6C000000 		.word	.LC5
 1010 045c BC000000 		.word	.LC8
 1011 0460 98000000 		.word	.LC7
 1012              		.cfi_endproc
 1013              	.LFE62:
 1015              		.align	2
 1016              		.global	armwave_set_wave_pointer
 1017              		.syntax unified
 1018              		.arm
 1019              		.fpu vfp
 1021              	armwave_set_wave_pointer:
 1022              	.LVL64:
 1023              	.LFB63:
 322:armwave.c     **** 
 323:armwave.c     **** /*
 324:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 325:armwave.c     ****  * in the future.
 326:armwave.c     ****  */
 327:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 328:armwave.c     **** {
 1024              		.loc 1 328 1 view -0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 0
 1027              		@ frame_needed = 0, uses_anonymous_args = 0
 329:armwave.c     ****     assert(wave_buffer != NULL);
 1028              		.loc 1 329 5 view .LVU261
 1029 0464 000050E3 		cmp	r0, #0	@ wave_buffer
 1030              		.loc 1 329 5 is_stmt 0 view .LVU262
 1031 0468 0200000A 		beq	.L63		@,
 330:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1032              		.loc 1 330 5 is_stmt 1 view .LVU263
 1033              	@ armwave.c:330:     g_armwave_state.wave_buffer = wave_buffer;
 1034              		.loc 1 330 33 is_stmt 0 view .LVU264
 1035 046c 1C309FE5 		ldr	r3, .L64	@ tmp116,
 1036 0470 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1037 0474 1EFF2FE1 		bx	lr	@
 1038              	.L63:
 329:armwave.c     ****     assert(wave_buffer != NULL);
 1039              		.loc 1 329 5 is_stmt 1 discriminator 1 view .LVU265
 1040              	@ armwave.c:328: {
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1041              		.loc 1 328 1 is_stmt 0 discriminator 1 view .LVU266
 1042 0478 10402DE9 		push	{r4, lr}	@
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 4, -8
 1045              		.cfi_offset 14, -4
 1046              	@ armwave.c:329:     assert(wave_buffer != NULL);
 329:armwave.c     ****     assert(wave_buffer != NULL);
 1047              		.loc 1 329 5 discriminator 1 view .LVU267
 1048 047c 10309FE5 		ldr	r3, .L64+4	@,
 1049 0480 10209FE5 		ldr	r2, .L64+8	@,
 1050 0484 10109FE5 		ldr	r1, .L64+12	@,
 1051 0488 10009FE5 		ldr	r0, .L64+16	@,
 1052              	.LVL65:
 329:armwave.c     ****     assert(wave_buffer != NULL);
 1053              		.loc 1 329 5 discriminator 1 view .LVU268
 1054 048c FEFFFFEB 		bl	__assert_fail		@
 1055              	.LVL66:
 1056              	.L65:
 1057              		.align	2
 1058              	.L64:
 1059 0490 00000000 		.word	g_armwave_state
 1060 0494 34000000 		.word	.LANCHOR0+52
 1061 0498 49010000 		.word	329
 1062 049c 20000000 		.word	.LC2
 1063 04a0 0C010000 		.word	.LC10
 1064              		.cfi_endproc
 1065              	.LFE63:
 1067              		.align	2
 1068              		.global	armwave_set_wave_pointer_as_testbuf
 1069              		.syntax unified
 1070              		.arm
 1071              		.fpu vfp
 1073              	armwave_set_wave_pointer_as_testbuf:
 1074              	.LVL67:
 1075              	.LFB64:
 331:armwave.c     **** }
 332:armwave.c     **** 
 333:armwave.c     **** /*
 334:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 335:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 336:armwave.c     ****  */
 337:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 338:armwave.c     **** {
 1076              		.loc 1 338 1 is_stmt 1 view -0
 1077              		.cfi_startproc
 1078              		@ args = 0, pretend = 0, frame = 0
 1079              		@ frame_needed = 0, uses_anonymous_args = 0
 1080              		@ link register save eliminated.
 339:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1081              		.loc 1 339 5 view .LVU270
 1082              	@ armwave.c:339:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1083              		.loc 1 339 29 is_stmt 0 view .LVU271
 1084 04a4 24309FE5 		ldr	r3, .L69	@ tmp117,
 1085              	@ armwave.c:339:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1086              		.loc 1 339 7 view .LVU272
 1087 04a8 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1088 04ac 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1089 04b0 0400003A 		bcc	.L68		@,
 340:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 341:armwave.c     ****         return;
 342:armwave.c     ****     }
 343:armwave.c     **** 
 344:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1090              		.loc 1 344 5 is_stmt 1 view .LVU273
 1091              	@ armwave.c:344:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1092              		.loc 1 344 111 is_stmt 0 view .LVU274
 1093 04b4 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1094              	@ armwave.c:344:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1095              		.loc 1 344 68 view .LVU275
 1096 04b8 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1097 04bc 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1098              	.LVL68:
 1099              	@ armwave.c:344:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1100              		.loc 1 344 33 view .LVU276
 1101 04c0 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1102              	@ armwave.c:345: }
 345:armwave.c     **** }
 1103              		.loc 1 345 1 view .LVU277
 1104 04c4 1EFF2FE1 		bx	lr	@
 1105              	.LVL69:
 1106              	.L68:
 340:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1107              		.loc 1 340 9 is_stmt 1 view .LVU278
 1108 04c8 04009FE5 		ldr	r0, .L69+4	@,
 1109              	.LVL70:
 340:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1110              		.loc 1 340 9 is_stmt 0 view .LVU279
 1111 04cc FEFFFFEA 		b	puts		@
 1112              	.LVL71:
 1113              	.L70:
 1114              		.align	2
 1115              	.L69:
 1116 04d0 00000000 		.word	g_armwave_state
 1117 04d4 20010000 		.word	.LC11
 1118              		.cfi_endproc
 1119              	.LFE64:
 1121              		.align	2
 1122              		.global	armwave_set_wave_pointer_u32
 1123              		.syntax unified
 1124              		.arm
 1125              		.fpu vfp
 1127              	armwave_set_wave_pointer_u32:
 1128              	.LVL72:
 1129              	.LFB65:
 346:armwave.c     **** 
 347:armwave.c     **** /*
 348:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 349:armwave.c     ****  * disjointed buffers in the future.
 350:armwave.c     ****  */
 351:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 352:armwave.c     **** {
 1130              		.loc 1 352 1 is_stmt 1 view -0
 1131              		.cfi_startproc
 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 353:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1134              		.loc 1 353 5 view .LVU281
 1135 04d8 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1136              		.loc 1 353 5 is_stmt 0 view .LVU282
 1137 04dc 0200000A 		beq	.L76		@,
 354:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1138              		.loc 1 354 5 is_stmt 1 view .LVU283
 1139              	@ armwave.c:354:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1140              		.loc 1 354 33 is_stmt 0 view .LVU284
 1141 04e0 1C309FE5 		ldr	r3, .L77	@ tmp117,
 1142 04e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1143 04e8 1EFF2FE1 		bx	lr	@
 1144              	.L76:
 353:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1145              		.loc 1 353 5 is_stmt 1 discriminator 1 view .LVU285
 1146              	@ armwave.c:352: {
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1147              		.loc 1 352 1 is_stmt 0 discriminator 1 view .LVU286
 1148 04ec 10402DE9 		push	{r4, lr}	@
 1149              		.cfi_def_cfa_offset 8
 1150              		.cfi_offset 4, -8
 1151              		.cfi_offset 14, -4
 1152              	@ armwave.c:353:     assert(wave_buffer_ptr != 0);
 353:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1153              		.loc 1 353 5 discriminator 1 view .LVU287
 1154 04f0 10309FE5 		ldr	r3, .L77+4	@,
 1155 04f4 10209FE5 		ldr	r2, .L77+8	@,
 1156 04f8 10109FE5 		ldr	r1, .L77+12	@,
 1157 04fc 10009FE5 		ldr	r0, .L77+16	@,
 1158              	.LVL73:
 353:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1159              		.loc 1 353 5 discriminator 1 view .LVU288
 1160 0500 FEFFFFEB 		bl	__assert_fail		@
 1161              	.LVL74:
 1162              	.L78:
 1163              		.align	2
 1164              	.L77:
 1165 0504 00000000 		.word	g_armwave_state
 1166 0508 50000000 		.word	.LANCHOR0+80
 1167 050c 61010000 		.word	353
 1168 0510 20000000 		.word	.LC2
 1169 0514 5C010000 		.word	.LC12
 1170              		.cfi_endproc
 1171              	.LFE65:
 1173              		.align	2
 1174              		.global	armwave_clear_buffer
 1175              		.syntax unified
 1176              		.arm
 1177              		.fpu vfp
 1179              	armwave_clear_buffer:
 1180              	.LVL75:
 1181              	.LFB66:
 355:armwave.c     **** }
 356:armwave.c     **** 
 357:armwave.c     **** /*
 358:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 359:armwave.c     ****  */
 360:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 361:armwave.c     **** {
 1182              		.loc 1 361 1 is_stmt 1 view -0
 1183              		.cfi_startproc
 1184              		@ args = 0, pretend = 0, frame = 0
 1185              		@ frame_needed = 0, uses_anonymous_args = 0
 1186              		@ link register save eliminated.
 362:armwave.c     ****     // Flags ignored, only one buffer cleared
 363:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1187              		.loc 1 363 5 view .LVU290
 1188              	@ armwave.c:363:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1189              		.loc 1 363 58 is_stmt 0 view .LVU291
 1190 0518 0C309FE5 		ldr	r3, .L80	@ tmp114,
 1191              	@ armwave.c:363:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1192              		.loc 1 363 5 view .LVU292
 1193 051c 0010A0E3 		mov	r1, #0	@,
 1194 0520 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1195 0524 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1196              	.LVL76:
 1197              		.loc 1 363 5 view .LVU293
 1198 0528 FEFFFFEA 		b	memset		@
 1199              	.LVL77:
 1200              	.L81:
 1201              		.align	2
 1202              	.L80:
 1203 052c 00000000 		.word	g_armwave_state
 1204              		.cfi_endproc
 1205              	.LFE66:
 1207              		.align	2
 1208              		.global	armwave_set_channel_colour
 1209              		.syntax unified
 1210              		.arm
 1211              		.fpu vfp
 1213              	armwave_set_channel_colour:
 1214              	.LVL78:
 1215              	.LFB67:
 364:armwave.c     **** }
 365:armwave.c     **** 
 366:armwave.c     **** /*
 367:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 368:armwave.c     ****  */
 369:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 370:armwave.c     **** {
 1216              		.loc 1 370 1 is_stmt 1 view -0
 1217              		.cfi_startproc
 1218              		@ args = 0, pretend = 0, frame = 0
 1219              		@ frame_needed = 0, uses_anonymous_args = 0
 1220              		@ link register save eliminated.
 371:armwave.c     ****     // Only 1ch supported for now
 372:armwave.c     ****     switch(ch) {
 1221              		.loc 1 372 5 view .LVU295
 1222 0530 010050E3 		cmp	r0, #1	@ ch,
 373:armwave.c     ****         case 1:
 374:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1223              		.loc 1 374 13 view .LVU296
 1224              	@ armwave.c:374:             g_armwave_state.ch1_color.r = r;
 1225              		.loc 1 374 41 is_stmt 0 view .LVU297
 1226 0534 0C009F05 		ldreq	r0, .L84	@ tmp117,
 1227              	.LVL79:
 1228              		.loc 1 374 41 view .LVU298
 1229 0538 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 375:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1230              		.loc 1 375 13 is_stmt 1 view .LVU299
 1231              	@ armwave.c:375:             g_armwave_state.ch1_color.g = g;
 1232              		.loc 1 375 41 is_stmt 0 view .LVU300
 1233 053c BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 376:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1234              		.loc 1 376 13 is_stmt 1 view .LVU301
 1235              	@ armwave.c:376:             g_armwave_state.ch1_color.b = b;
 1236              		.loc 1 376 41 is_stmt 0 view .LVU302
 1237 0540 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 377:armwave.c     ****             break;
 1238              		.loc 1 377 13 is_stmt 1 view .LVU303
 1239              	@ armwave.c:379: }
 378:armwave.c     ****     }
 379:armwave.c     **** }
 1240              		.loc 1 379 1 is_stmt 0 view .LVU304
 1241 0544 1EFF2FE1 		bx	lr	@
 1242              	.L85:
 1243              		.align	2
 1244              	.L84:
 1245 0548 00000000 		.word	g_armwave_state
 1246              		.cfi_endproc
 1247              	.LFE67:
 1249              		.align	2
 1250              		.global	armwave_dump_ppm_debug
 1251              		.syntax unified
 1252              		.arm
 1253              		.fpu vfp
 1255              	armwave_dump_ppm_debug:
 1256              	.LVL80:
 1257              	.LFB68:
 380:armwave.c     **** 
 381:armwave.c     **** /*
 382:armwave.c     ****  * Dump a ppm of a buffer to a file.
 383:armwave.c     ****  */
 384:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 385:armwave.c     **** {
 1258              		.loc 1 385 1 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 386:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1262              		.loc 1 386 5 view .LVU306
 1263              	@ armwave.c:385: {
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1264              		.loc 1 385 1 is_stmt 0 view .LVU307
 1265 054c 0130A0E1 		mov	r3, r1	@ fn, fn
 1266 0550 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1267              		.cfi_def_cfa_offset 28
 1268              		.cfi_offset 4, -28
 1269              		.cfi_offset 5, -24
 1270              		.cfi_offset 6, -20
 1271              		.cfi_offset 7, -16
 1272              		.cfi_offset 8, -12
 1273              		.cfi_offset 9, -8
 1274              		.cfi_offset 14, -4
 1275 0554 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1276 0558 0CD04DE2 		sub	sp, sp, #12	@,,
 1277              		.cfi_def_cfa_offset 40
 1278              	@ armwave.c:386:     FILE *fp = fopen(fn, "wb");
 1279              		.loc 1 386 16 view .LVU308
 1280 055c C4109FE5 		ldr	r1, .L94	@,
 1281              	.LVL81:
 1282              		.loc 1 386 16 view .LVU309
 1283 0560 0300A0E1 		mov	r0, r3	@, fn
 1284              	.LVL82:
 1285              		.loc 1 386 16 view .LVU310
 1286 0564 FEFFFFEB 		bl	fopen64		@
 1287              	.LVL83:
 1288              	@ armwave.c:393:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 387:armwave.c     ****     uint32_t data;
 388:armwave.c     ****     int xx, yy;
 389:armwave.c     **** 
 390:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 391:armwave.c     **** 
 392:armwave.c     ****     fputs("P3\n", fp);
 393:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1289              		.loc 1 393 5 view .LVU311
 1290 0568 BC609FE5 		ldr	r6, .L94+4	@ tmp150,
 1291              	@ armwave.c:392:     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1292              		.loc 1 392 5 view .LVU312
 1293 056c 0320A0E3 		mov	r2, #3	@,
 1294 0570 0110A0E3 		mov	r1, #1	@,
 1295              	@ armwave.c:386:     FILE *fp = fopen(fn, "wb");
 386:armwave.c     ****     uint32_t data;
 1296              		.loc 1 386 16 view .LVU313
 1297 0574 0070A0E1 		mov	r7, r0	@ fp,
 1298              	.LVL84:
 387:armwave.c     ****     uint32_t data;
 1299              		.loc 1 387 5 is_stmt 1 view .LVU314
 388:armwave.c     **** 
 1300              		.loc 1 388 5 view .LVU315
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1301              		.loc 1 392 5 view .LVU316
 1302 0578 0030A0E1 		mov	r3, r0	@, fp
 1303 057c AC009FE5 		ldr	r0, .L94+8	@,
 1304              	.LVL85:
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1305              		.loc 1 392 5 is_stmt 0 view .LVU317
 1306 0580 FEFFFFEB 		bl	fwrite		@
 1307              	.LVL86:
 1308              		.loc 1 393 5 is_stmt 1 view .LVU318
 1309 0584 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1310 0588 A4109FE5 		ldr	r1, .L94+12	@,
 1311 058c 0700A0E1 		mov	r0, r7	@, fp
 1312 0590 FEFFFFEB 		bl	fprintf		@
 1313              	.LVL87:
 394:armwave.c     ****     fputs("255\n", fp);
 1314              		.loc 1 394 5 view .LVU319
 1315 0594 0420A0E3 		mov	r2, #4	@,
 1316 0598 0730A0E1 		mov	r3, r7	@, fp
 1317 059c 0110A0E3 		mov	r1, #1	@,
 1318 05a0 90009FE5 		ldr	r0, .L94+16	@,
 1319 05a4 FEFFFFEB 		bl	fwrite		@
 1320              	.LVL88:
 395:armwave.c     **** 
 396:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1321              		.loc 1 396 5 view .LVU320
 1322              	@ armwave.c:396:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1323              		.loc 1 396 37 is_stmt 0 view .LVU321
 1324 05a8 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1325              	@ armwave.c:396:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1326              		.loc 1 396 5 view .LVU322
 1327 05ac 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1328 05b0 180000DA 		ble	.L87		@,
 1329 05b4 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1330              	@ armwave.c:401:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 398:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 399:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 400:armwave.c     **** 
 401:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1331              		.loc 1 401 13 view .LVU323
 1332 05b8 7C909FE5 		ldr	r9, .L94+20	@ tmp152,
 1333              	@ armwave.c:396:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1334              		.loc 1 396 12 view .LVU324
 1335 05bc 0050A0E3 		mov	r5, #0	@ yy,
 1336              	.LVL89:
 1337              	.L88:
 1338              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1339              		.loc 1 397 9 view .LVU325
 1340 05c0 000053E3 		cmp	r3, #0	@ _13,
 1341              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1342              		.loc 1 397 16 view .LVU326
 1343 05c4 0040A0C3 		movgt	r4, #0	@ xx,
 1344              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1345              		.loc 1 397 9 view .LVU327
 1346 05c8 0F0000DA 		ble	.L90		@,
 1347              	.LVL90:
 1348              	.L89:
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1349              		.loc 1 398 13 is_stmt 1 discriminator 3 view .LVU328
 1350              	@ armwave.c:398:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1351              		.loc 1 398 29 is_stmt 0 discriminator 3 view .LVU329
 1352 05cc 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1353              	@ armwave.c:401:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1354              		.loc 1 401 13 discriminator 3 view .LVU330
 1355 05d0 0910A0E1 		mov	r1, r9	@, tmp152
 1356 05d4 0700A0E1 		mov	r0, r7	@, fp
 1357              	@ armwave.c:398:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1358              		.loc 1 398 18 discriminator 3 view .LVU331
 1359 05d8 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1360              	.LVL91:
 1361              		.loc 1 401 13 is_stmt 1 discriminator 3 view .LVU332
 1362              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1363              		.loc 1 397 58 is_stmt 0 discriminator 3 view .LVU333
 1364 05dc 014084E2 		add	r4, r4, #1	@ xx, xx,
 1365              	.LVL92:
 1366              	@ armwave.c:401:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1367              		.loc 1 401 81 discriminator 3 view .LVU334
 1368 05e0 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1369              	@ armwave.c:401:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1370              		.loc 1 401 61 discriminator 3 view .LVU335
 1371 05e4 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1372              	@ armwave.c:401:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1373              		.loc 1 401 13 discriminator 3 view .LVU336
 1374 05e8 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1375 05ec 7330EFE6 		uxtb	r3, r3	@, tmp142
 1376 05f0 00C08DE5 		str	ip, [sp]	@ tmp147,
 1377 05f4 7220EFE6 		uxtb	r2, r2	@, data
 1378              	.LVL93:
 1379              		.loc 1 401 13 discriminator 3 view .LVU337
 1380 05f8 FEFFFFEB 		bl	fprintf		@
 1381              	.LVL94:
 1382              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1383              		.loc 1 397 41 discriminator 3 view .LVU338
 1384 05fc 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1385              	@ armwave.c:397:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1386              		.loc 1 397 9 discriminator 3 view .LVU339
 1387 0600 040053E1 		cmp	r3, r4	@ _13, xx
 1388 0604 F0FFFFCA 		bgt	.L89		@,
 1389 0608 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1390              	.LVL95:
 1391              	.L90:
 1392              	@ armwave.c:396:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1393              		.loc 1 396 55 discriminator 2 view .LVU340
 1394 060c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1395              	.LVL96:
 1396              	@ armwave.c:396:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1397              		.loc 1 396 5 discriminator 2 view .LVU341
 1398 0610 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1399 0614 E9FFFFBA 		blt	.L88		@,
 1400              	.LVL97:
 1401              	.L87:
 402:armwave.c     ****         }
 403:armwave.c     ****     }
 404:armwave.c     **** 
 405:armwave.c     ****     fclose(fp);
 1402              		.loc 1 405 5 is_stmt 1 view .LVU342
 1403 0618 0700A0E1 		mov	r0, r7	@, fp
 1404              	@ armwave.c:406: }
 406:armwave.c     **** }
 1405              		.loc 1 406 1 is_stmt 0 view .LVU343
 1406 061c 0CD08DE2 		add	sp, sp, #12	@,,
 1407              		.cfi_def_cfa_offset 28
 1408              		@ sp needed	@
 1409 0620 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1410              		.cfi_restore 14
 1411              		.cfi_restore 9
 1412              		.cfi_restore 8
 1413              		.cfi_restore 7
 1414              		.cfi_restore 6
 1415              		.cfi_restore 5
 1416              		.cfi_restore 4
 1417              		.cfi_def_cfa_offset 0
 1418              	.LVL98:
 1419              	@ armwave.c:405:     fclose(fp);
 405:armwave.c     **** }
 1420              		.loc 1 405 5 view .LVU344
 1421 0624 FEFFFFEA 		b	fclose		@
 1422              	.LVL99:
 1423              	.L95:
 405:armwave.c     **** }
 1424              		.loc 1 405 5 view .LVU345
 1425              		.align	2
 1426              	.L94:
 1427 0628 74010000 		.word	.LC13
 1428 062c 00000000 		.word	g_armwave_state
 1429 0630 78010000 		.word	.LC14
 1430 0634 7C010000 		.word	.LC15
 1431 0638 84010000 		.word	.LC16
 1432 063c 8C010000 		.word	.LC17
 1433              		.cfi_endproc
 1434              	.LFE68:
 1436              		.align	2
 1437              		.global	armwave_test_init
 1438              		.syntax unified
 1439              		.arm
 1440              		.fpu vfp
 1442              	armwave_test_init:
 1443              	.LVL100:
 1444              	.LFB69:
 407:armwave.c     **** 
 408:armwave.c     **** /*
 409:armwave.c     ****  * Initialise some test functionry.
 410:armwave.c     ****  */
 411:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 412:armwave.c     **** {
 1445              		.loc 1 412 1 is_stmt 1 view -0
 1446              		.cfi_startproc
 1447              		@ args = 0, pretend = 0, frame = 0
 1448              		@ frame_needed = 0, uses_anonymous_args = 0
 413:armwave.c     ****     test_create_gamma();
 1449              		.loc 1 413 5 view .LVU347
 1450              	.LBB14:
 1451              	.LBI14:
  34:armwave.c     **** {
 1452              		.loc 1 34 6 view .LVU348
  34:armwave.c     **** {
 1453              		.loc 1 34 6 is_stmt 0 view .LVU349
 1454              	.LBE14:
 1455              	@ armwave.c:412: {
 412:armwave.c     ****     test_create_gamma();
 1456              		.loc 1 412 1 view .LVU350
 1457 0640 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1458              		.cfi_def_cfa_offset 32
 1459              		.cfi_offset 4, -32
 1460              		.cfi_offset 5, -28
 1461              		.cfi_offset 6, -24
 1462              		.cfi_offset 7, -20
 1463              		.cfi_offset 8, -16
 1464              		.cfi_offset 9, -12
 1465              		.cfi_offset 10, -8
 1466              		.cfi_offset 14, -4
 1467 0644 068B2DED 		vpush.64	{d8, d9, d10}	@
 1468              		.cfi_def_cfa_offset 56
 1469              		.cfi_offset 80, -56
 1470              		.cfi_offset 81, -52
 1471              		.cfi_offset 82, -48
 1472              		.cfi_offset 83, -44
 1473              		.cfi_offset 84, -40
 1474              		.cfi_offset 85, -36
 1475 0648 BC409FE5 		ldr	r4, .L100+20	@ ivtmp.65,
 1476              	.LBB17:
 1477              	.LBB15:
 1478              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1479              		.loc 1 40 32 view .LVU351
 1480 064c 2DAA9FED 		vldr.32	s20, .L100+16	@ tmp136,
 1481              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1482              		.loc 1 40 26 view .LVU352
 1483 0650 289B9FED 		vldr.64	d9, .L100	@ tmp151,
 1484              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1485              		.loc 1 40 49 view .LVU353
 1486 0654 298B9FED 		vldr.64	d8, .L100+8	@ tmp139,
 1487 0658 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.65,
 1488              	.LBE15:
 1489              	.LBE17:
 1490              	@ armwave.c:412: {
 412:armwave.c     ****     test_create_gamma();
 1491              		.loc 1 412 1 view .LVU354
 1492 065c 10D04DE2 		sub	sp, sp, #16	@,,
 1493              		.cfi_def_cfa_offset 72
 1494              	@ armwave.c:412: {
 412:armwave.c     ****     test_create_gamma();
 1495              		.loc 1 412 1 view .LVU355
 1496 0660 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1497 0664 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1498 0668 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1499 066c 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1500 0670 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.65,
 1501 0674 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1502              	.LVL101:
 1503              	.L97:
 1504              	.LBB18:
 1505              	.LBB16:
  40:armwave.c     ****     }
 1506              		.loc 1 40 9 is_stmt 1 view .LVU356
 1507              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1508              		.loc 1 40 32 is_stmt 0 view .LVU357
 1509 0678 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.65
 1510              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1511              		.loc 1 40 26 view .LVU358
 1512 067c 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1513              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1514              		.loc 1 40 32 view .LVU359
 1515 0680 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1516 0684 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1517 0688 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1518              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1519              		.loc 1 40 26 view .LVU360
 1520 068c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1521 0690 FEFFFFEB 		bl	pow		@
 1522              	.LVL102:
 1523              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1524              		.loc 1 40 49 view .LVU361
 1525 0694 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1526              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1527              		.loc 1 40 24 view .LVU362
 1528 0698 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1529 069c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1530 06a0 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1531              	.LVL103:
 1532              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1533              		.loc 1 39 5 view .LVU363
 1534 06a4 0A0054E1 		cmp	r4, r10	@ ivtmp.65, _39
 1535 06a8 F2FFFF1A 		bne	.L97		@,
 1536              	.LVL104:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1537              		.loc 1 39 5 view .LVU364
 1538              	.LBE16:
 1539              	.LBE18:
 414:armwave.c     **** 
 415:armwave.c     ****     // make ch1 yellowish by default
 416:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1540              		.loc 1 416 5 is_stmt 1 view .LVU365
 1541              	.LBB19:
 1542              	.LBI19:
 369:armwave.c     **** {
 1543              		.loc 1 369 6 view .LVU366
 1544              	.LBB20:
 372:armwave.c     ****         case 1:
 1545              		.loc 1 372 5 view .LVU367
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1546              		.loc 1 374 13 view .LVU368
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1547              		.loc 1 375 13 view .LVU369
 1548              	@ armwave.c:374:             g_armwave_state.ch1_color.r = r;
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1549              		.loc 1 374 41 is_stmt 0 view .LVU370
 1550 06ac 5CC09FE5 		ldr	ip, .L100+24	@ tmp142,
 1551 06b0 5C409FE5 		ldr	r4, .L100+28	@ tmp143,
 1552              	.LBE20:
 1553              	.LBE19:
 1554              	@ armwave.c:418:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 417:armwave.c     **** 
 418:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1555              		.loc 1 418 5 view .LVU371
 1556 06b4 0000A0E3 		mov	r0, #0	@ tmp147,
 1557              	.LBB24:
 1558              	.LBB21:
 1559              	@ armwave.c:376:             g_armwave_state.ch1_color.b = b;
 376:armwave.c     ****             break;
 1560              		.loc 1 376 41 view .LVU372
 1561 06b8 FAE0A0E3 		mov	lr, #250	@ tmp146,
 1562              	.LBE21:
 1563              	.LBE24:
 1564              	@ armwave.c:418:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1565              		.loc 1 418 5 view .LVU373
 1566 06bc 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 1567 06c0 04908DE5 		str	r9, [sp, #4]	@ render_height,
 1568 06c4 00808DE5 		str	r8, [sp]	@ render_width,
 1569 06c8 0610A0E1 		mov	r1, r6	@, tmp3
 1570 06cc 0720A0E1 		mov	r2, r7	@, nwaves
 1571              	.LBB25:
 1572              	.LBB22:
 1573              	@ armwave.c:374:             g_armwave_state.ch1_color.r = r;
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1574              		.loc 1 374 41 view .LVU374
 1575 06d0 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 376:armwave.c     ****             break;
 1576              		.loc 1 376 13 is_stmt 1 view .LVU375
 1577              	.LBE22:
 1578              	.LBE25:
 1579              	@ armwave.c:418:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 1580              		.loc 1 418 5 is_stmt 0 view .LVU376
 1581 06d4 0630A0E1 		mov	r3, r6	@, wave_size
 1582              	.LBB26:
 1583              	.LBB23:
 1584              	@ armwave.c:376:             g_armwave_state.ch1_color.b = b;
 376:armwave.c     ****             break;
 1585              		.loc 1 376 41 view .LVU377
 1586 06d8 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 377:armwave.c     ****     }
 1587              		.loc 1 377 13 is_stmt 1 view .LVU378
 1588              	.LVL105:
 377:armwave.c     ****     }
 1589              		.loc 1 377 13 is_stmt 0 view .LVU379
 1590              	.LBE23:
 1591              	.LBE26:
 1592              		.loc 1 418 5 is_stmt 1 view .LVU380
 1593 06dc FEFFFFEB 		bl	armwave_setup_render		@
 1594              	.LVL106:
 419:armwave.c     **** 
 420:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1595              		.loc 1 420 5 view .LVU381
 1596 06e0 30109FE5 		ldr	r1, .L100+32	@,
 1597 06e4 30009FE5 		ldr	r0, .L100+36	@,
 1598              	@ armwave.c:421: }
 421:armwave.c     **** }
 1599              		.loc 1 421 1 is_stmt 0 view .LVU382
 1600 06e8 10D08DE2 		add	sp, sp, #16	@,,
 1601              		.cfi_def_cfa_offset 56
 1602              		@ sp needed	@
 1603 06ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1604              		.cfi_restore 84
 1605              		.cfi_restore 85
 1606              		.cfi_restore 82
 1607              		.cfi_restore 83
 1608              		.cfi_restore 80
 1609              		.cfi_restore 81
 1610              		.cfi_def_cfa_offset 32
 1611 06f0 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1612              		.cfi_restore 14
 1613              		.cfi_restore 10
 1614              		.cfi_restore 9
 1615              		.cfi_restore 8
 1616              		.cfi_restore 7
 1617              		.cfi_restore 6
 1618              		.cfi_restore 5
 1619              		.cfi_restore 4
 1620              		.cfi_def_cfa_offset 0
 1621              	.LVL107:
 1622              	@ armwave.c:420:     printf("armwave version: %s\n", ARMWAVE_VER);
 420:armwave.c     **** }
 1623              		.loc 1 420 5 view .LVU383
 1624 06f4 FEFFFFEA 		b	printf		@
 1625              	.LVL108:
 1626              	.L101:
 1627              		.align	3
 1628              	.L100:
 1629 06f8 000000C0 		.word	-1073741824
 1630 06fc CCCCEC3F 		.word	1072483532
 1631 0700 00000000 		.word	0
 1632 0704 00E06F40 		.word	1081073664
 1633 0708 00007F43 		.word	1132396544
 1634 070c FFFFFFFF 		.word	gamma_table-1
 1635 0710 00000000 		.word	g_armwave_state
 1636 0714 F609F406 		.word	116656630
 1637 0718 00000000 		.word	.LC0
 1638 071c 08000000 		.word	.LC1
 1639              		.cfi_endproc
 1640              	.LFE69:
 1642              		.global	__aeabi_idiv
 1643              		.align	2
 1644              		.global	armwave_test_generate
 1645              		.syntax unified
 1646              		.arm
 1647              		.fpu vfp
 1649              	armwave_test_generate:
 1650              	.LFB70:
 422:armwave.c     **** 
 423:armwave.c     **** /*
 424:armwave.c     ****  * Fill buffers with test funtionry.
 425:armwave.c     ****  */
 426:armwave.c     **** void armwave_test_generate()
 427:armwave.c     **** {
 1651              		.loc 1 427 1 is_stmt 1 view -0
 1652              		.cfi_startproc
 1653              		@ args = 0, pretend = 0, frame = 16
 1654              		@ frame_needed = 0, uses_anonymous_args = 0
 428:armwave.c     ****     uint32_t yy;
 1655              		.loc 1 428 5 view .LVU385
 429:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 1656              		.loc 1 429 5 view .LVU386
 1657              	@ armwave.c:427: {
 427:armwave.c     ****     uint32_t yy;
 1658              		.loc 1 427 1 is_stmt 0 view .LVU387
 1659 0720 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1660              		.cfi_def_cfa_offset 36
 1661              		.cfi_offset 4, -36
 1662              		.cfi_offset 5, -32
 1663              		.cfi_offset 6, -28
 1664              		.cfi_offset 7, -24
 1665              		.cfi_offset 8, -20
 1666              		.cfi_offset 9, -16
 1667              		.cfi_offset 10, -12
 1668              		.cfi_offset 11, -8
 1669              		.cfi_offset 14, -4
 1670              	@ armwave.c:431:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 430:armwave.c     **** 
 431:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1671              		.loc 1 431 5 view .LVU388
 1672 0724 0010A0E3 		mov	r1, #0	@,
 1673              	@ armwave.c:429:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 429:armwave.c     **** 
 1674              		.loc 1 429 38 view .LVU389
 1675 0728 34419FE5 		ldr	r4, .L115	@ tmp197,
 1676              	@ armwave.c:427: {
 427:armwave.c     ****     uint32_t yy;
 1677              		.loc 1 427 1 view .LVU390
 1678 072c 14D04DE2 		sub	sp, sp, #20	@,,
 1679              		.cfi_def_cfa_offset 56
 1680              	@ armwave.c:431:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1681              		.loc 1 431 5 view .LVU391
 1682 0730 502094E5 		ldr	r2, [r4, #80]	@, g_armwave_state.ch_buff_size
 1683 0734 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1684              	@ armwave.c:429:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 429:armwave.c     **** 
 1685              		.loc 1 429 14 view .LVU392
 1686 0738 588094E5 		ldr	r8, [r4, #88]	@ xx_rem, g_armwave_state.target_width
 1687              	.LVL109:
 1688              		.loc 1 431 5 is_stmt 1 view .LVU393
 1689 073c FEFFFFEB 		bl	memset		@
 1690              	.LVL110:
 432:armwave.c     **** 
 433:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height); yy++) {
 1691              		.loc 1 433 5 view .LVU394
 1692              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1693              		.loc 1 433 38 is_stmt 0 view .LVU395
 1694 0740 589094E5 		ldr	r9, [r4, #88]	@ prephitmp_116, g_armwave_state.target_width
 1695              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1696              		.loc 1 433 69 view .LVU396
 1697 0744 445094E5 		ldr	r5, [r4, #68]	@ _71, g_armwave_state.slice_height
 1698              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1699              		.loc 1 433 52 view .LVU397
 1700 0748 0900A0E1 		mov	r0, r9	@, prephitmp_116
 1701 074c 0510A0E1 		mov	r1, r5	@, _71
 1702 0750 FEFFFFEB 		bl	__aeabi_idiv		@
 1703              	.LVL111:
 1704              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1705              		.loc 1 433 5 view .LVU398
 1706 0754 000050E3 		cmp	r0, #0	@ tmp163
 1707 0758 3D00000A 		beq	.L103		@,
 1708 075c 043094E5 		ldr	r3, [r4, #4]	@ prephitmp_124, g_armwave_state.ch1_buffer
 1709              	@ armwave.c:429:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 429:armwave.c     **** 
 1710              		.loc 1 429 53 view .LVU399
 1711 0760 0070A0E3 		mov	r7, #0	@ ypos,
 1712 0764 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_129, g_armwave_state.waves
 1713 0768 08308DE5 		str	r3, [sp, #8]	@ prephitmp_124, %sfp
 1714              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 1715              		.loc 1 433 12 view .LVU400
 1716 076c 0760A0E1 		mov	r6, r7	@ yy, ypos
 1717 0770 403094E5 		ldr	r3, [r4, #64]	@ prephitmp_126, g_armwave_state.bitdepth_height
 1718 0774 0C308DE5 		str	r3, [sp, #12]	@ prephitmp_126, %sfp
 1719              	.LVL112:
 1720              	.L106:
 434:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 435:armwave.c     **** 
 436:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1721              		.loc 1 436 9 is_stmt 1 discriminator 3 view .LVU401
 1722 0778 483094E5 		ldr	r3, [r4, #72]	@ _9, g_armwave_state.slice_record_height
 1723 077c 96050AE0 		mul	r10, r6, r5	@ _7, yy, _71
 1724 0780 04308DE5 		str	r3, [sp, #4]	@ _9, %sfp
 1725              	.LVL113:
 1726              	.LBB33:
 1727              	.LBI33:
  92:armwave.c     **** {
 1728              		.loc 1 92 6 discriminator 3 view .LVU402
 1729              	.LBB34:
  94:armwave.c     ****     uint32_t value, word;
 1730              		.loc 1 94 5 discriminator 3 view .LVU403
  95:armwave.c     ****     uint8_t *wave_base;
 1731              		.loc 1 95 5 discriminator 3 view .LVU404
  96:armwave.c     ****     uint8_t *write_buffer_base;
 1732              		.loc 1 96 5 discriminator 3 view .LVU405
  97:armwave.c     ****     uint8_t *write_buffer;
 1733              		.loc 1 97 5 discriminator 3 view .LVU406
  98:armwave.c     **** 
 1734              		.loc 1 98 5 discriminator 3 view .LVU407
 100:armwave.c     **** 
 1735              		.loc 1 100 5 discriminator 3 view .LVU408
 1736              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 100:armwave.c     **** 
 1737              		.loc 1 100 23 is_stmt 0 discriminator 3 view .LVU409
 1738 0784 0C309DE5 		ldr	r3, [sp, #12]	@ prephitmp_126, %sfp
 1739              	.LVL114:
 100:armwave.c     **** 
 1740              		.loc 1 100 23 discriminator 3 view .LVU410
 1741 0788 08109DE5 		ldr	r1, [sp, #8]	@ prephitmp_124, %sfp
 1742              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1743              		.loc 1 103 5 discriminator 3 view .LVU411
 1744 078c 000052E3 		cmp	r2, #0	@ prephitmp_129,
 1745              	@ armwave.c:100:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 100:armwave.c     **** 
 1746              		.loc 1 100 23 discriminator 3 view .LVU412
 1747 0790 931A2BE0 		mla	fp, r3, r10, r1	@ write_buffer_base, prephitmp_126, _7, prephitmp_124
 1748              	.LVL115:
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1749              		.loc 1 103 5 is_stmt 1 discriminator 3 view .LVU413
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1750              		.loc 1 103 5 is_stmt 0 discriminator 3 view .LVU414
 1751 0794 110000DA 		ble	.L104		@,
 1752              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1753              		.loc 1 103 11 view .LVU415
 1754 0798 0050A0E3 		mov	r5, #0	@ w,
 1755              	.LVL116:
 1756              	.L105:
 1757              	.LBB35:
 104:armwave.c     **** 
 1758              		.loc 1 104 9 is_stmt 1 view .LVU416
 106:armwave.c     ****     }
 1759              		.loc 1 106 9 view .LVU417
 1760              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1761              		.loc 1 104 64 is_stmt 0 view .LVU418
 1762 079c 341094E5 		ldr	r1, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1763              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1764              		.loc 1 104 19 view .LVU419
 1765 07a0 14C094E5 		ldr	ip, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1766              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 106:armwave.c     ****     }
 1767              		.loc 1 106 9 view .LVU420
 1768 07a4 04209DE5 		ldr	r2, [sp, #4]	@, %sfp
 1769              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1770              		.loc 1 104 59 view .LVU421
 1771 07a8 91A521E0 		mla	r1, r1, r5, r10	@ tmp173, g_armwave_state.wave_stride, w, _7
 1772              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 106:armwave.c     ****     }
 1773              		.loc 1 106 9 view .LVU422
 1774 07ac 0B00A0E1 		mov	r0, fp	@, write_buffer_base
 1775 07b0 01108CE0 		add	r1, ip, r1	@, g_armwave_state.wave_buffer, tmp173
 1776 07b4 FEFFFFEB 		bl	_render_nonaa_to_buffer_1ch_slice_core		@
 1777              	.LVL117:
 106:armwave.c     ****     }
 1778              		.loc 1 106 9 view .LVU423
 1779              	.LBE35:
 1780              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1781              		.loc 1 103 35 view .LVU424
 1782 07b8 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_129, g_armwave_state.waves
 1783              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1784              		.loc 1 103 44 view .LVU425
 1785 07bc 015085E2 		add	r5, r5, #1	@ w, w,
 1786              	.LVL118:
 1787              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1788              		.loc 1 103 5 view .LVU426
 1789 07c0 020055E1 		cmp	r5, r2	@ w, prephitmp_129
 1790 07c4 F4FFFFBA 		blt	.L105		@,
 1791 07c8 043094E5 		ldr	r3, [r4, #4]	@ prephitmp_124, g_armwave_state.ch1_buffer
 1792 07cc 445094E5 		ldr	r5, [r4, #68]	@ _71, g_armwave_state.slice_height
 1793              	.LVL119:
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1794              		.loc 1 103 5 view .LVU427
 1795 07d0 589094E5 		ldr	r9, [r4, #88]	@ prephitmp_116, g_armwave_state.target_width
 1796 07d4 08308DE5 		str	r3, [sp, #8]	@ prephitmp_124, %sfp
 1797 07d8 403094E5 		ldr	r3, [r4, #64]	@ prephitmp_126, g_armwave_state.bitdepth_height
 1798 07dc 0C308DE5 		str	r3, [sp, #12]	@ prephitmp_126, %sfp
 1799              	.L104:
 1800              	.LVL120:
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1801              		.loc 1 103 5 view .LVU428
 1802              	.LBE34:
 1803              	.LBE33:
 437:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1804              		.loc 1 437 9 is_stmt 1 discriminator 3 view .LVU429
 1805              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 1806              		.loc 1 433 52 is_stmt 0 discriminator 3 view .LVU430
 1807 07e0 0510A0E1 		mov	r1, r5	@, _71
 1808 07e4 0900A0E1 		mov	r0, r9	@, prephitmp_116
 1809 07e8 04208DE5 		str	r2, [sp, #4]	@ prephitmp_129, %sfp
 1810 07ec FEFFFFEB 		bl	__aeabi_idiv		@
 1811              	.LVL121:
 1812              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 1813              		.loc 1 433 87 discriminator 3 view .LVU431
 1814 07f0 016086E2 		add	r6, r6, #1	@ yy, yy,
 1815              	.LVL122:
 1816              	@ armwave.c:437:         xx_rem -= g_armwave_state.slice_height;
 1817              		.loc 1 437 16 discriminator 3 view .LVU432
 1818 07f4 058048E0 		sub	r8, r8, r5	@ xx_rem, xx_rem, _71
 1819              	.LVL123:
 438:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1820              		.loc 1 438 9 is_stmt 1 discriminator 3 view .LVU433
 1821              	@ armwave.c:438:         ypos += g_armwave_state.slice_height;
 1822              		.loc 1 438 14 is_stmt 0 discriminator 3 view .LVU434
 1823 07f8 057087E0 		add	r7, r7, r5	@ ypos, ypos, _71
 1824              	.LVL124:
 1825              	@ armwave.c:433:     for(yy = 0; yy < (g_armwave_state.target_width / g_armwave_state.slice_height)
 433:armwave.c     ****         //printf("armwave_test_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_h
 1826              		.loc 1 433 5 discriminator 3 view .LVU435
 1827 07fc 04209DE5 		ldr	r2, [sp, #4]	@ prephitmp_129, %sfp
 1828 0800 060050E1 		cmp	r0, r6	@, yy
 1829 0804 DBFFFF8A 		bhi	.L106		@,
 1830 0808 0C309DE5 		ldr	r3, [sp, #12]	@ prephitmp_126, %sfp
 1831 080c 08109DE5 		ldr	r1, [sp, #8]	@ prephitmp_124, %sfp
 1832 0810 931726E0 		mla	r6, r3, r7, r1	@ _140, prephitmp_126, ypos, prephitmp_124
 1833              	.LVL125:
 1834              	.L107:
 439:armwave.c     ****     }
 440:armwave.c     **** 
 441:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 1835              		.loc 1 441 5 is_stmt 1 view .LVU436
 1836              	.LBB36:
 1837              	.LBI36:
  92:armwave.c     **** {
 1838              		.loc 1 92 6 view .LVU437
 1839              	.LBB37:
  94:armwave.c     ****     uint32_t value, word;
 1840              		.loc 1 94 5 view .LVU438
  95:armwave.c     ****     uint8_t *wave_base;
 1841              		.loc 1 95 5 view .LVU439
  96:armwave.c     ****     uint8_t *write_buffer_base;
 1842              		.loc 1 96 5 view .LVU440
  97:armwave.c     ****     uint8_t *write_buffer;
 1843              		.loc 1 97 5 view .LVU441
  98:armwave.c     **** 
 1844              		.loc 1 98 5 view .LVU442
 100:armwave.c     **** 
 1845              		.loc 1 100 5 view .LVU443
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1846              		.loc 1 103 5 view .LVU444
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1847              		.loc 1 103 5 is_stmt 0 view .LVU445
 1848 0814 000052E3 		cmp	r2, #0	@ prephitmp_129,
 1849 0818 0B0000DA 		ble	.L102		@,
 1850              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1851              		.loc 1 103 11 view .LVU446
 1852 081c 0050A0E3 		mov	r5, #0	@ w,
 1853              	.LVL126:
 1854              	.L108:
 1855              	.LBB38:
 104:armwave.c     **** 
 1856              		.loc 1 104 9 is_stmt 1 view .LVU447
 106:armwave.c     ****     }
 1857              		.loc 1 106 9 view .LVU448
 1858              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1859              		.loc 1 104 64 is_stmt 0 view .LVU449
 1860 0820 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1861              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1862              		.loc 1 104 19 view .LVU450
 1863 0824 141094E5 		ldr	r1, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1864              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 106:armwave.c     ****     }
 1865              		.loc 1 106 9 view .LVU451
 1866 0828 0820A0E1 		mov	r2, r8	@, xx_rem
 1867              	@ armwave.c:104:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 104:armwave.c     **** 
 1868              		.loc 1 104 59 view .LVU452
 1869 082c 937523E0 		mla	r3, r3, r5, r7	@ tmp192, g_armwave_state.wave_stride, w, ypos
 1870              	@ armwave.c:106:         _render_nonaa_to_buffer_1ch_slice_core(write_buffer_base, wave_base, heigh
 106:armwave.c     ****     }
 1871              		.loc 1 106 9 view .LVU453
 1872 0830 0600A0E1 		mov	r0, r6	@, _140
 1873 0834 031081E0 		add	r1, r1, r3	@, g_armwave_state.wave_buffer, tmp192
 1874 0838 FEFFFFEB 		bl	_render_nonaa_to_buffer_1ch_slice_core		@
 1875              	.LVL127:
 106:armwave.c     ****     }
 1876              		.loc 1 106 9 view .LVU454
 1877              	.LBE38:
 1878              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1879              		.loc 1 103 5 view .LVU455
 1880 083c 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1881              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1882              		.loc 1 103 44 view .LVU456
 1883 0840 015085E2 		add	r5, r5, #1	@ w, w,
 1884              	.LVL128:
 1885              	@ armwave.c:103:     for(w = 0; w < g_armwave_state.waves; w++) {
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1886              		.loc 1 103 5 view .LVU457
 1887 0844 030055E1 		cmp	r5, r3	@ w, g_armwave_state.waves
 1888 0848 F4FFFFBA 		blt	.L108		@,
 1889              	.LVL129:
 1890              	.L102:
 103:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1891              		.loc 1 103 5 view .LVU458
 1892              	.LBE37:
 1893              	.LBE36:
 1894              	@ armwave.c:442: }
 442:armwave.c     **** }
 1895              		.loc 1 442 1 view .LVU459
 1896 084c 14D08DE2 		add	sp, sp, #20	@,,
 1897              		.cfi_remember_state
 1898              		.cfi_def_cfa_offset 36
 1899              		@ sp needed	@
 1900 0850 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1901              	.LVL130:
 1902              	.L103:
 1903              		.cfi_restore_state
 1904              		.loc 1 442 1 view .LVU460
 1905 0854 046094E5 		ldr	r6, [r4, #4]	@ _140, g_armwave_state.ch1_buffer
 1906 0858 382094E5 		ldr	r2, [r4, #56]	@ prephitmp_129, g_armwave_state.waves
 1907              	@ armwave.c:429:     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 429:armwave.c     **** 
 1908              		.loc 1 429 53 view .LVU461
 1909 085c 0070A0E1 		mov	r7, r0	@ ypos, tmp163
 1910 0860 EBFFFFEA 		b	.L107		@
 1911              	.L116:
 1912              		.align	2
 1913              	.L115:
 1914 0864 00000000 		.word	g_armwave_state
 1915              		.cfi_endproc
 1916              	.LFE70:
 1918              		.align	2
 1919              		.global	armwave_test_fill_outbuf
 1920              		.syntax unified
 1921              		.arm
 1922              		.fpu vfp
 1924              	armwave_test_fill_outbuf:
 1925              	.LFB71:
 443:armwave.c     **** 
 444:armwave.c     **** /*
 445:armwave.c     ****  * Render image to the local allocated buffer.
 446:armwave.c     ****  */
 447:armwave.c     **** void armwave_test_fill_outbuf()
 448:armwave.c     **** {
 1926              		.loc 1 448 1 is_stmt 1 view -0
 1927              		.cfi_startproc
 1928              		@ args = 0, pretend = 0, frame = 8
 1929              		@ frame_needed = 0, uses_anonymous_args = 0
 449:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1930              		.loc 1 449 5 view .LVU463
 1931 0868 50C19FE5 		ldr	ip, .L138	@ tmp204,
 1932              	@ armwave.c:448: {
 448:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1933              		.loc 1 448 1 is_stmt 0 view .LVU464
 1934 086c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1935              		.cfi_def_cfa_offset 36
 1936              		.cfi_offset 4, -36
 1937              		.cfi_offset 5, -32
 1938              		.cfi_offset 6, -28
 1939              		.cfi_offset 7, -24
 1940              		.cfi_offset 8, -20
 1941              		.cfi_offset 9, -16
 1942              		.cfi_offset 10, -12
 1943              		.cfi_offset 11, -8
 1944              		.cfi_offset 14, -4
 1945 0870 0CD04DE2 		sub	sp, sp, #12	@,,
 1946              		.cfi_def_cfa_offset 48
 1947              	@ armwave.c:449:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 1948              		.loc 1 449 5 view .LVU465
 1949 0874 68809CE5 		ldr	r8, [ip, #104]	@ _1, g_armwave_state.out_pixbuf
 1950              	.LVL131:
 1951              	.LBB41:
 1952              	.LBI41:
 169:armwave.c     **** {
 1953              		.loc 1 169 6 is_stmt 1 view .LVU466
 1954              	.LBB42:
 171:armwave.c     ****     // uint32_t ysub;
 1955              		.loc 1 171 5 view .LVU467
 173:armwave.c     ****     uint8_t r, g, b, value; 
 1956              		.loc 1 173 5 view .LVU468
 174:armwave.c     ****     // uint8_t row;
 1957              		.loc 1 174 5 view .LVU469
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1958              		.loc 1 176 5 view .LVU470
 1959              	@ armwave.c:176:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1960              		.loc 1 176 15 is_stmt 0 view .LVU471
 1961 0878 04909CE5 		ldr	r9, [ip, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1962              	.LVL132:
 177:armwave.c     ****     uint32_t offset;
 1963              		.loc 1 177 5 is_stmt 1 view .LVU472
 178:armwave.c     **** 
 1964              		.loc 1 178 5 view .LVU473
 180:armwave.c     **** 
 1965              		.loc 1 180 5 view .LVU474
 1966 087c 000058E3 		cmp	r8, #0	@ _1,
 1967 0880 4900000A 		beq	.L136		@,
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1968              		.loc 1 182 5 view .LVU475
 1969              	@ armwave.c:182:     npix = g_armwave_state.target_width * 256; 
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 1970              		.loc 1 182 10 is_stmt 0 view .LVU476
 1971 0884 58709CE5 		ldr	r7, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1972 0888 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 1973              	.LVL133:
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1974              		.loc 1 185 5 is_stmt 1 view .LVU477
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1975              		.loc 1 185 5 is_stmt 0 view .LVU478
 1976 088c 000057E3 		cmp	r7, #0	@ npix,
 1977 0890 0A0000DA 		ble	.L117		@,
 1978              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1979              		.loc 1 197 52 view .LVU479
 1980 0894 FCB6DCE1 		ldrsh	fp, [ip, #108]	@ _17, g_armwave_state.ch1_color.r
 1981              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1982              		.loc 1 198 52 view .LVU480
 1983 0898 FEA6DCE1 		ldrsh	r10, [ip, #110]	@ _23, g_armwave_state.ch1_color.g
 1984              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 1985              		.loc 1 199 52 view .LVU481
 1986 089c F057DCE1 		ldrsh	r5, [ip, #112]	@ _27, g_armwave_state.ch1_color.b
 1987              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 1988              		.loc 1 221 57 view .LVU482
 1989 08a0 0A6ADCED 		vldr.32	s13, [ip, #40]	@ _49, g_armwave_state.vscale_frac
 1990              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1991              		.loc 1 185 11 view .LVU483
 1992 08a4 00E0A0E3 		mov	lr, #0	@ n,
 1993              	.LVL134:
 1994              	.L124:
 189:armwave.c     **** 
 1995              		.loc 1 189 9 is_stmt 1 view .LVU484
 1996              	@ armwave.c:189:         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 1997              		.loc 1 189 19 is_stmt 0 view .LVU485
 1998 08a8 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_8, offset: 4294967292B]
 1999              	.LVL135:
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2000              		.loc 1 191 9 is_stmt 1 view .LVU486
 2001              	@ armwave.c:191:         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2002              		.loc 1 191 11 is_stmt 0 view .LVU487
 2003 08ac 000050E3 		cmp	r0, #0	@ wave_word,
 2004 08b0 0400001A 		bne	.L133		@,
 2005 08b4 04E08EE2 		add	lr, lr, #4	@ n, n,
 2006              	.L120:
 2007              	.LVL136:
 2008              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2009              		.loc 1 185 5 view .LVU488
 2010 08b8 0E0057E1 		cmp	r7, lr	@ npix, n
 2011 08bc F9FFFFCA 		bgt	.L124		@,
 2012              	.LVL137:
 2013              	.L117:
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2014              		.loc 1 185 5 view .LVU489
 2015              	.LBE42:
 2016              	.LBE41:
 2017              	@ armwave.c:450: }
 450:armwave.c     **** }
 2018              		.loc 1 450 1 view .LVU490
 2019 08c0 0CD08DE2 		add	sp, sp, #12	@,,
 2020              		.cfi_remember_state
 2021              		.cfi_def_cfa_offset 36
 2022              		@ sp needed	@
 2023 08c4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2024              	.LVL138:
 2025              	.L133:
 2026              		.cfi_restore_state
 2027              	.LBB44:
 2028              	.LBB43:
 2029              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2030              		.loc 1 196 19 view .LVU491
 2031 08c8 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2032              	@ armwave.c:191:         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2033              		.loc 1 191 11 view .LVU492
 2034 08cc 0E60A0E1 		mov	r6, lr	@ ivtmp.81, n
 2035              	.LVL139:
 193:armwave.c     ****                 wave_word >>= 8;
 2036              		.loc 1 193 17 is_stmt 1 view .LVU493
 194:armwave.c     **** 
 2037              		.loc 1 194 17 view .LVU494
 2038              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 2039              		.loc 1 194 27 is_stmt 0 view .LVU495
 2040 08d0 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2041              	.LVL140:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2042              		.loc 1 196 17 is_stmt 1 view .LVU496
 2043 08d4 04E08EE2 		add	lr, lr, #4	@ n, ivtmp.81,
 2044              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2045              		.loc 1 196 19 is_stmt 0 view .LVU497
 2046 08d8 0500001A 		bne	.L137		@,
 2047              	.LVL141:
 2048              	.L121:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2049              		.loc 1 196 19 view .LVU498
 2050 08dc 016086E2 		add	r6, r6, #1	@ ivtmp.81, ivtmp.81,
 2051              	@ armwave.c:192:             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 2052              		.loc 1 192 13 view .LVU499
 2053 08e0 06005EE1 		cmp	lr, r6	@ n, ivtmp.81
 2054 08e4 F3FFFF0A 		beq	.L120		@,
 193:armwave.c     ****                 wave_word >>= 8;
 2055              		.loc 1 193 17 is_stmt 1 view .LVU500
 2056              	.LVL142:
 194:armwave.c     **** 
 2057              		.loc 1 194 17 view .LVU501
 2058              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2059              		.loc 1 196 19 is_stmt 0 view .LVU502
 2060 08e8 FF1010E2 		ands	r1, r0, #255	@ _19, wave_word,
 2061              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 2062              		.loc 1 194 27 view .LVU503
 2063 08ec 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2064              	.LVL143:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2065              		.loc 1 196 17 is_stmt 1 view .LVU504
 2066              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2067              		.loc 1 196 19 is_stmt 0 view .LVU505
 2068 08f0 F9FFFF0A 		beq	.L121		@,
 2069              	.L137:
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2070              		.loc 1 197 21 is_stmt 1 view .LVU506
 2071              	.LVL144:
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2072              		.loc 1 198 21 view .LVU507
 199:armwave.c     **** 
 2073              		.loc 1 199 21 view .LVU508
 201:armwave.c     ****                     g = MIN(gg, 255);
 2074              		.loc 1 201 21 view .LVU509
 202:armwave.c     ****                     b = MIN(bb, 255);
 2075              		.loc 1 202 21 view .LVU510
 203:armwave.c     **** 
 2076              		.loc 1 203 21 view .LVU511
 206:armwave.c     **** 
 2077              		.loc 1 206 21 view .LVU512
 2078              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2079              		.loc 1 221 32 is_stmt 0 view .LVU513
 2080 08f4 7630EFE6 		uxtb	r3, r6	@ _47, ivtmp.81
 2081              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2082              		.loc 1 222 41 view .LVU514
 2083 08f8 012083E2 		add	r2, r3, #1	@ tmp196, _47,
 2084              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2085              		.loc 1 221 40 view .LVU515
 2086 08fc 903A07EE 		vmov	s15, r3	@ int	@ _47, _47
 2087              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2088              		.loc 1 222 41 view .LVU516
 2089 0900 102A07EE 		vmov	s14, r2	@ int	@ tmp196, tmp196
 2090              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 2091              		.loc 1 199 55 view .LVU517
 2092 0904 950103E0 		mul	r3, r5, r1	@ tmp181, _27, _19
 2093              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2094              		.loc 1 221 40 view .LVU518
 2095 0908 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp194, _47
 2096              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2097              		.loc 1 222 46 view .LVU519
 2098 090c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp197, tmp196
 2099              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2100              		.loc 1 198 55 view .LVU520
 2101 0910 9A0102E0 		mul	r2, r10, r1	@ tmp185, _23, _19
 2102              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 2103              		.loc 1 199 24 view .LVU521
 2104 0914 4334A0E1 		asr	r3, r3, #8	@ bb, tmp181,
 2105              	.LVL145:
 2106              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 2107              		.loc 1 203 25 view .LVU522
 2108 0918 FF0053E3 		cmp	r3, #255	@ bb,
 2109              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2110              		.loc 1 198 24 view .LVU523
 2111 091c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp185,
 2112              	.LVL146:
 2113              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 2114              		.loc 1 203 25 view .LVU524
 2115 0920 FF30A0A3 		movge	r3, #255	@ bb,
 2116              	.LVL147:
 2117              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2118              		.loc 1 221 40 view .LVU525
 2119 0924 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp195, tmp194, _49
 2120              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2121              		.loc 1 222 46 view .LVU526
 2122 0928 267A27EE 		vmul.f32	s14, s14, s13	@ tmp198, tmp197, _49
 2123              	@ armwave.c:202:                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 2124              		.loc 1 202 25 view .LVU527
 2125 092c FF0052E3 		cmp	r2, #255	@ gg,
 2126 0930 FF20A0A3 		movge	r2, #255	@ gg,
 2127              	.LVL148:
 2128              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2129              		.loc 1 197 55 view .LVU528
 2130 0934 910B01E0 		mul	r1, r1, fp	@ tmp191, _19, _17
 2131              	.LVL149:
 2132              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2133              		.loc 1 206 56 view .LVU529
 2134 0938 0224A0E1 		lsl	r2, r2, #8	@ tmp186, gg,
 2135              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2136              		.loc 1 206 44 view .LVU530
 2137 093c 0338A0E1 		lsl	r3, r3, #16	@ tmp182, bb,
 2138              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2139              		.loc 1 221 24 view .LVU531
 2140 0940 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp195
 2141              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2142              		.loc 1 197 24 view .LVU532
 2143 0944 4114A0E1 		asr	r1, r1, #8	@ rr, tmp191,
 2144              	.LVL150:
 2145              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2146              		.loc 1 206 56 view .LVU533
 2147 0948 7220FFE6 		uxth	r2, r2	@ tmp187, tmp186
 2148              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2149              		.loc 1 206 44 view .LVU534
 2150 094c FF3803E2 		and	r3, r3, #16711680	@ tmp183, tmp182,
 2151              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 2152              		.loc 1 201 25 view .LVU535
 2153 0950 FF0051E3 		cmp	r1, #255	@ rr,
 2154              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2155              		.loc 1 206 51 view .LVU536
 2156 0954 023083E1 		orr	r3, r3, r2	@ tmp189, tmp183, tmp187
 2157              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 2158              		.loc 1 201 25 view .LVU537
 2159 0958 FF10A0A3 		movge	r1, #255	@ rr,
 2160              	.LVL151:
 2161              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2162              		.loc 1 221 24 view .LVU538
 2163 095c 904A17EE 		vmov	r4, s15	@ int	@ yy, yy
 2164              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2165              		.loc 1 222 24 view .LVU539
 2166 0960 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp198
 2167              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2168              		.loc 1 206 62 view .LVU540
 2169 0964 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2170 0968 013083E1 		orr	r3, r3, r1	@ tmp193, tmp189, rr
 2171              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2172              		.loc 1 206 26 view .LVU541
 2173 096c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp193,
 2174              	.LVL152:
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2175              		.loc 1 220 21 is_stmt 1 view .LVU542
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2176              		.loc 1 221 21 view .LVU543
 222:armwave.c     ****                     xx = (nsub >> 8);
 2177              		.loc 1 222 21 view .LVU544
 223:armwave.c     **** 
 2178              		.loc 1 223 21 view .LVU545
 2179              	@ armwave.c:223:                     xx = (nsub >> 8);
 223:armwave.c     **** 
 2180              		.loc 1 223 32 is_stmt 0 view .LVU546
 2181 0970 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.81,
 2182              	.LVL153:
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2183              		.loc 1 225 21 is_stmt 1 view .LVU547
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2184              		.loc 1 225 21 is_stmt 0 view .LVU548
 2185 0974 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2186              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2187              		.loc 1 222 24 view .LVU549
 2188 0978 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2189              	.LVL154:
 2190              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2191              		.loc 1 225 21 view .LVU550
 2192 097c 020054E1 		cmp	r4, r2	@ yy, ye
 2193 0980 D5FFFF2A 		bcs	.L121		@,
 2194 0984 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2195              	.LVL155:
 2196              	.L122:
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2197              		.loc 1 226 25 is_stmt 1 view .LVU551
 227:armwave.c     ****                     }
 2198              		.loc 1 227 25 view .LVU552
 2199              	@ armwave.c:226:                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2200              		.loc 1 226 43 is_stmt 0 view .LVU553
 2201 0988 58209CE5 		ldr	r2, [ip, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2202              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2203              		.loc 1 225 21 view .LVU554
 2204 098c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2205              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 2206              		.loc 1 227 43 view .LVU555
 2207 0990 921422E0 		mla	r2, r2, r4, r1	@ tmp202, g_armwave_state.target_width, yy, xx
 2208              	.LVL156:
 2209              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2210              		.loc 1 225 42 view .LVU556
 2211 0994 014084E2 		add	r4, r4, #1	@ yy, yy,
 2212              	.LVL157:
 2213              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2214              		.loc 1 225 21 view .LVU557
 2215 0998 040050E1 		cmp	r0, r4	@ ye, yy
 2216              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 2217              		.loc 1 227 53 view .LVU558
 2218 099c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_64
 2219              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2220              		.loc 1 225 21 view .LVU559
 2221 09a0 F8FFFF1A 		bne	.L122		@,
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2222              		.loc 1 225 21 view .LVU560
 2223 09a4 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2224 09a8 CBFFFFEA 		b	.L121		@
 2225              	.LVL158:
 2226              	.L136:
 180:armwave.c     **** 
 2227              		.loc 1 180 5 is_stmt 1 view .LVU561
 2228 09ac 10309FE5 		ldr	r3, .L138+4	@,
 2229 09b0 B420A0E3 		mov	r2, #180	@,
 2230 09b4 0C109FE5 		ldr	r1, .L138+8	@,
 2231 09b8 0C009FE5 		ldr	r0, .L138+12	@,
 2232 09bc FEFFFFEB 		bl	__assert_fail		@
 2233              	.LVL159:
 2234              	.L139:
 2235              		.align	2
 2236              	.L138:
 2237 09c0 00000000 		.word	g_armwave_state
 2238 09c4 00000000 		.word	.LANCHOR0
 2239 09c8 20000000 		.word	.LC2
 2240 09cc 2C000000 		.word	.LC3
 2241              	.LBE43:
 2242              	.LBE44:
 2243              		.cfi_endproc
 2244              	.LFE71:
 2246              		.align	2
 2247              		.global	armwave_test_dump_buffer_to_ppm
 2248              		.syntax unified
 2249              		.arm
 2250              		.fpu vfp
 2252              	armwave_test_dump_buffer_to_ppm:
 2253              	.LVL160:
 2254              	.LFB72:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 456:armwave.c     **** {
 2255              		.loc 1 456 1 view -0
 2256              		.cfi_startproc
 2257              		@ args = 0, pretend = 0, frame = 0
 2258              		@ frame_needed = 0, uses_anonymous_args = 0
 2259              		@ link register save eliminated.
 457:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2260              		.loc 1 457 5 view .LVU563
 2261 09d0 08309FE5 		ldr	r3, .L141	@ tmp112,
 2262 09d4 0010A0E1 		mov	r1, r0	@, fn
 2263 09d8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2264              	.LVL161:
 2265              		.loc 1 457 5 is_stmt 0 view .LVU564
 2266 09dc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2267              	.LVL162:
 2268              	.L142:
 2269              		.loc 1 457 5 view .LVU565
 2270              		.align	2
 2271              	.L141:
 2272 09e0 00000000 		.word	g_armwave_state
 2273              		.cfi_endproc
 2274              	.LFE72:
 2276              		.align	2
 2277              		.global	armwave_test_fill_gdkbuf
 2278              		.syntax unified
 2279              		.arm
 2280              		.fpu vfp
 2282              	armwave_test_fill_gdkbuf:
 2283              	.LVL163:
 2284              	.LFB73:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Render GDK buffer with test funtionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 464:armwave.c     **** {
 2285              		.loc 1 464 1 is_stmt 1 view -0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 8
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 465:armwave.c     ****     //PyObject *mv;
 466:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 467:armwave.c     **** 
 468:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 469:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2289              		.loc 1 469 5 view .LVU567
 2290              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2291              		.loc 1 469 11 is_stmt 0 view .LVU568
 2292 09e4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2293              	@ armwave.c:464: {
 464:armwave.c     ****     //PyObject *mv;
 2294              		.loc 1 464 1 view .LVU569
 2295 09e8 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2296              		.cfi_def_cfa_offset 36
 2297              		.cfi_offset 4, -36
 2298              		.cfi_offset 5, -32
 2299              		.cfi_offset 6, -28
 2300              		.cfi_offset 7, -24
 2301              		.cfi_offset 8, -20
 2302              		.cfi_offset 9, -16
 2303              		.cfi_offset 10, -12
 2304              		.cfi_offset 11, -8
 2305              		.cfi_offset 14, -4
 2306 09ec 0CD04DE2 		sub	sp, sp, #12	@,,
 2307              		.cfi_def_cfa_offset 48
 2308              	.LBB47:
 2309              	.LBB48:
 2310              	@ armwave.c:176:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2311              		.loc 1 176 15 view .LVU570
 2312 09f0 48519FE5 		ldr	r5, .L164	@ tmp206,
 2313              	.LBE48:
 2314              	.LBE47:
 2315              	@ armwave.c:469:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2316              		.loc 1 469 11 view .LVU571
 2317 09f4 288093E5 		ldr	r8, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2318              	.LVL164:
 470:armwave.c     ****     
 471:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 472:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2319              		.loc 1 472 5 is_stmt 1 view .LVU572
 2320              	.LBB51:
 2321              	.LBI47:
 169:armwave.c     **** {
 2322              		.loc 1 169 6 view .LVU573
 2323              	.LBB49:
 171:armwave.c     ****     // uint32_t ysub;
 2324              		.loc 1 171 5 view .LVU574
 173:armwave.c     ****     uint8_t r, g, b, value; 
 2325              		.loc 1 173 5 view .LVU575
 174:armwave.c     ****     // uint8_t row;
 2326              		.loc 1 174 5 view .LVU576
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2327              		.loc 1 176 5 view .LVU577
 2328              	@ armwave.c:180:     assert(out_buffer != NULL);
 180:armwave.c     **** 
 2329              		.loc 1 180 5 is_stmt 0 view .LVU578
 2330 09f8 000058E3 		cmp	r8, #0	@ out_pixbuf,
 2331              	@ armwave.c:176:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 176:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2332              		.loc 1 176 15 view .LVU579
 2333 09fc 049095E5 		ldr	r9, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2334              	.LVL165:
 177:armwave.c     ****     uint32_t offset;
 2335              		.loc 1 177 5 is_stmt 1 view .LVU580
 178:armwave.c     **** 
 2336              		.loc 1 178 5 view .LVU581
 180:armwave.c     **** 
 2337              		.loc 1 180 5 view .LVU582
 2338 0a00 4900000A 		beq	.L162		@,
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2339              		.loc 1 182 5 view .LVU583
 2340              	@ armwave.c:182:     npix = g_armwave_state.target_width * 256; 
 182:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2341              		.loc 1 182 10 is_stmt 0 view .LVU584
 2342 0a04 587095E5 		ldr	r7, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2343 0a08 0774A0E1 		lsl	r7, r7, #8	@ npix, g_armwave_state.target_width,
 2344              	.LVL166:
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2345              		.loc 1 185 5 is_stmt 1 view .LVU585
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2346              		.loc 1 185 5 is_stmt 0 view .LVU586
 2347 0a0c 000057E3 		cmp	r7, #0	@ npix,
 2348 0a10 0A0000DA 		ble	.L143		@,
 2349              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2350              		.loc 1 197 52 view .LVU587
 2351 0a14 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _19, g_armwave_state.ch1_color.r
 2352              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2353              		.loc 1 198 52 view .LVU588
 2354 0a18 FEA6D5E1 		ldrsh	r10, [r5, #110]	@ _25, g_armwave_state.ch1_color.g
 2355              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 2356              		.loc 1 199 52 view .LVU589
 2357 0a1c F047D5E1 		ldrsh	r4, [r5, #112]	@ _29, g_armwave_state.ch1_color.b
 2358              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2359              		.loc 1 221 57 view .LVU590
 2360 0a20 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _51, g_armwave_state.vscale_frac
 2361              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2362              		.loc 1 185 11 view .LVU591
 2363 0a24 00C0A0E3 		mov	ip, #0	@ n,
 2364              	.LVL167:
 2365              	.L150:
 189:armwave.c     **** 
 2366              		.loc 1 189 9 is_stmt 1 view .LVU592
 2367              	@ armwave.c:189:         wave_word = *base_32ptr++;
 189:armwave.c     **** 
 2368              		.loc 1 189 19 is_stmt 0 view .LVU593
 2369 0a28 040099E4 		ldr	r0, [r9], #4	@ wave_word, MEM[base: base_32ptr_10, offset: 4294967292B]
 2370              	.LVL168:
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2371              		.loc 1 191 9 is_stmt 1 view .LVU594
 2372              	@ armwave.c:191:         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2373              		.loc 1 191 11 is_stmt 0 view .LVU595
 2374 0a2c 000050E3 		cmp	r0, #0	@ wave_word,
 2375 0a30 0400001A 		bne	.L159		@,
 2376 0a34 04C08CE2 		add	ip, ip, #4	@ n, n,
 2377              	.L146:
 2378              	.LVL169:
 2379              	@ armwave.c:185:     for(n = 0; n < npix; n += 4) {
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2380              		.loc 1 185 5 view .LVU596
 2381 0a38 0C0057E1 		cmp	r7, ip	@ npix, n
 2382 0a3c F9FFFFCA 		bgt	.L150		@,
 2383              	.LVL170:
 2384              	.L143:
 185:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2385              		.loc 1 185 5 view .LVU597
 2386              	.LBE49:
 2387              	.LBE51:
 2388              	@ armwave.c:473: }
 473:armwave.c     **** }
 2389              		.loc 1 473 1 view .LVU598
 2390 0a40 0CD08DE2 		add	sp, sp, #12	@,,
 2391              		.cfi_remember_state
 2392              		.cfi_def_cfa_offset 36
 2393              		@ sp needed	@
 2394 0a44 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2395              	.LVL171:
 2396              	.L159:
 2397              		.cfi_restore_state
 2398              	.LBB52:
 2399              	.LBB50:
 2400              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2401              		.loc 1 196 19 view .LVU599
 2402 0a48 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2403              	@ armwave.c:191:         if(COND_UNLIKELY(wave_word != 0)) {
 191:armwave.c     ****             for(w = 0; w < 4; w++) {
 2404              		.loc 1 191 11 view .LVU600
 2405 0a4c 0C60A0E1 		mov	r6, ip	@ ivtmp.97, n
 2406              	.LVL172:
 193:armwave.c     ****                 wave_word >>= 8;
 2407              		.loc 1 193 17 is_stmt 1 view .LVU601
 194:armwave.c     **** 
 2408              		.loc 1 194 17 view .LVU602
 2409              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 2410              		.loc 1 194 27 is_stmt 0 view .LVU603
 2411 0a50 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2412              	.LVL173:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2413              		.loc 1 196 17 is_stmt 1 view .LVU604
 2414 0a54 04C08CE2 		add	ip, ip, #4	@ n, ivtmp.97,
 2415              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2416              		.loc 1 196 19 is_stmt 0 view .LVU605
 2417 0a58 0500001A 		bne	.L163		@,
 2418              	.LVL174:
 2419              	.L147:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2420              		.loc 1 196 19 view .LVU606
 2421 0a5c 016086E2 		add	r6, r6, #1	@ ivtmp.97, ivtmp.97,
 2422              	@ armwave.c:192:             for(w = 0; w < 4; w++) {
 192:armwave.c     ****                 value = wave_word & 0xff;
 2423              		.loc 1 192 13 view .LVU607
 2424 0a60 06005CE1 		cmp	ip, r6	@ n, ivtmp.97
 2425 0a64 F3FFFF0A 		beq	.L146		@,
 193:armwave.c     ****                 wave_word >>= 8;
 2426              		.loc 1 193 17 is_stmt 1 view .LVU608
 2427              	.LVL175:
 194:armwave.c     **** 
 2428              		.loc 1 194 17 view .LVU609
 2429              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2430              		.loc 1 196 19 is_stmt 0 view .LVU610
 2431 0a68 FF1010E2 		ands	r1, r0, #255	@ _21, wave_word,
 2432              	@ armwave.c:194:                 wave_word >>= 8;
 194:armwave.c     **** 
 2433              		.loc 1 194 27 view .LVU611
 2434 0a6c 2004A0E1 		lsr	r0, r0, #8	@ wave_word, wave_word,
 2435              	.LVL176:
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2436              		.loc 1 196 17 is_stmt 1 view .LVU612
 2437              	@ armwave.c:196:                 if(value != 0) {
 196:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2438              		.loc 1 196 19 is_stmt 0 view .LVU613
 2439 0a70 F9FFFF0A 		beq	.L147		@,
 2440              	.L163:
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2441              		.loc 1 197 21 is_stmt 1 view .LVU614
 2442              	.LVL177:
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2443              		.loc 1 198 21 view .LVU615
 199:armwave.c     **** 
 2444              		.loc 1 199 21 view .LVU616
 201:armwave.c     ****                     g = MIN(gg, 255);
 2445              		.loc 1 201 21 view .LVU617
 202:armwave.c     ****                     b = MIN(bb, 255);
 2446              		.loc 1 202 21 view .LVU618
 203:armwave.c     **** 
 2447              		.loc 1 203 21 view .LVU619
 206:armwave.c     **** 
 2448              		.loc 1 206 21 view .LVU620
 2449              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2450              		.loc 1 221 32 is_stmt 0 view .LVU621
 2451 0a74 7630EFE6 		uxtb	r3, r6	@ _49, ivtmp.97
 2452              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2453              		.loc 1 222 41 view .LVU622
 2454 0a78 012083E2 		add	r2, r3, #1	@ tmp198, _49,
 2455              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2456              		.loc 1 221 40 view .LVU623
 2457 0a7c 903A07EE 		vmov	s15, r3	@ int	@ _49, _49
 2458              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2459              		.loc 1 222 41 view .LVU624
 2460 0a80 102A07EE 		vmov	s14, r2	@ int	@ tmp198, tmp198
 2461              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 2462              		.loc 1 199 55 view .LVU625
 2463 0a84 940103E0 		mul	r3, r4, r1	@ tmp183, _29, _21
 2464              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2465              		.loc 1 221 40 view .LVU626
 2466 0a88 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp196, _49
 2467              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2468              		.loc 1 222 46 view .LVU627
 2469 0a8c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp199, tmp198
 2470              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2471              		.loc 1 198 55 view .LVU628
 2472 0a90 9A0102E0 		mul	r2, r10, r1	@ tmp187, _25, _21
 2473              	@ armwave.c:199:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 199:armwave.c     **** 
 2474              		.loc 1 199 24 view .LVU629
 2475 0a94 4334A0E1 		asr	r3, r3, #8	@ bb, tmp183,
 2476              	.LVL178:
 2477              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 2478              		.loc 1 203 25 view .LVU630
 2479 0a98 FF0053E3 		cmp	r3, #255	@ bb,
 2480              	@ armwave.c:198:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 198:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2481              		.loc 1 198 24 view .LVU631
 2482 0a9c 4224A0E1 		asr	r2, r2, #8	@ gg, tmp187,
 2483              	.LVL179:
 2484              	@ armwave.c:203:                     b = MIN(bb, 255);
 203:armwave.c     **** 
 2485              		.loc 1 203 25 view .LVU632
 2486 0aa0 FF30A0A3 		movge	r3, #255	@ bb,
 2487              	.LVL180:
 2488              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2489              		.loc 1 221 40 view .LVU633
 2490 0aa4 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp197, tmp196, _51
 2491              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2492              		.loc 1 222 46 view .LVU634
 2493 0aa8 267A27EE 		vmul.f32	s14, s14, s13	@ tmp200, tmp199, _51
 2494              	@ armwave.c:202:                     g = MIN(gg, 255);
 202:armwave.c     ****                     b = MIN(bb, 255);
 2495              		.loc 1 202 25 view .LVU635
 2496 0aac FF0052E3 		cmp	r2, #255	@ gg,
 2497 0ab0 FF20A0A3 		movge	r2, #255	@ gg,
 2498              	.LVL181:
 2499              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2500              		.loc 1 197 55 view .LVU636
 2501 0ab4 910B01E0 		mul	r1, r1, fp	@ tmp193, _21, _19
 2502              	.LVL182:
 2503              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2504              		.loc 1 206 56 view .LVU637
 2505 0ab8 0224A0E1 		lsl	r2, r2, #8	@ tmp188, gg,
 2506              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2507              		.loc 1 206 44 view .LVU638
 2508 0abc 0338A0E1 		lsl	r3, r3, #16	@ tmp184, bb,
 2509              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2510              		.loc 1 221 24 view .LVU639
 2511 0ac0 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp197
 2512              	@ armwave.c:197:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 197:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2513              		.loc 1 197 24 view .LVU640
 2514 0ac4 4114A0E1 		asr	r1, r1, #8	@ rr, tmp193,
 2515              	.LVL183:
 2516              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2517              		.loc 1 206 56 view .LVU641
 2518 0ac8 7220FFE6 		uxth	r2, r2	@ tmp189, tmp188
 2519              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2520              		.loc 1 206 44 view .LVU642
 2521 0acc FF3803E2 		and	r3, r3, #16711680	@ tmp185, tmp184,
 2522              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 2523              		.loc 1 201 25 view .LVU643
 2524 0ad0 FF0051E3 		cmp	r1, #255	@ rr,
 2525              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2526              		.loc 1 206 51 view .LVU644
 2527 0ad4 023083E1 		orr	r3, r3, r2	@ tmp191, tmp185, tmp189
 2528              	@ armwave.c:201:                     r = MIN(rr, 255);
 201:armwave.c     ****                     g = MIN(gg, 255);
 2529              		.loc 1 201 25 view .LVU645
 2530 0ad8 FF10A0A3 		movge	r1, #255	@ rr,
 2531              	.LVL184:
 2532              	@ armwave.c:221:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2533              		.loc 1 221 24 view .LVU646
 2534 0adc 90EA17EE 		vmov	lr, s15	@ int	@ yy, yy
 2535              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2536              		.loc 1 222 24 view .LVU647
 2537 0ae0 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp200
 2538              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2539              		.loc 1 206 62 view .LVU648
 2540 0ae4 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2541 0ae8 013083E1 		orr	r3, r3, r1	@ tmp195, tmp191, rr
 2542              	@ armwave.c:206:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 206:armwave.c     **** 
 2543              		.loc 1 206 26 view .LVU649
 2544 0aec FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp195,
 2545              	.LVL185:
 220:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2546              		.loc 1 220 21 is_stmt 1 view .LVU650
 221:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2547              		.loc 1 221 21 view .LVU651
 222:armwave.c     ****                     xx = (nsub >> 8);
 2548              		.loc 1 222 21 view .LVU652
 223:armwave.c     **** 
 2549              		.loc 1 223 21 view .LVU653
 2550              	@ armwave.c:223:                     xx = (nsub >> 8);
 223:armwave.c     **** 
 2551              		.loc 1 223 32 is_stmt 0 view .LVU654
 2552 0af0 4614A0E1 		asr	r1, r6, #8	@ xx, ivtmp.97,
 2553              	.LVL186:
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2554              		.loc 1 225 21 is_stmt 1 view .LVU655
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2555              		.loc 1 225 21 is_stmt 0 view .LVU656
 2556 0af4 902A17EE 		vmov	r2, s15	@ int	@ ye,
 2557              	@ armwave.c:222:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 222:armwave.c     ****                     xx = (nsub >> 8);
 2558              		.loc 1 222 24 view .LVU657
 2559 0af8 007ACDED 		vstr.32	s15, [sp]	@ int	@ ye, %sfp
 2560              	.LVL187:
 2561              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2562              		.loc 1 225 21 view .LVU658
 2563 0afc 02005EE1 		cmp	lr, r2	@ yy, ye
 2564 0b00 D5FFFF2A 		bcs	.L147		@,
 2565 0b04 04008DE5 		str	r0, [sp, #4]	@ wave_word, %sfp
 2566              	.LVL188:
 2567              	.L148:
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2568              		.loc 1 226 25 is_stmt 1 view .LVU659
 227:armwave.c     ****                     }
 2569              		.loc 1 227 25 view .LVU660
 2570              	@ armwave.c:226:                         offset = (xx + (y * g_armwave_state.target_width)); 
 226:armwave.c     ****                         *(out_buffer_base + offset) = word;
 2571              		.loc 1 226 43 is_stmt 0 view .LVU661
 2572 0b08 582095E5 		ldr	r2, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2573              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2574              		.loc 1 225 21 view .LVU662
 2575 0b0c 00009DE5 		ldr	r0, [sp]	@ ye, %sfp
 2576              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 2577              		.loc 1 227 43 view .LVU663
 2578 0b10 921E22E0 		mla	r2, r2, lr, r1	@ tmp204, g_armwave_state.target_width, yy, xx
 2579              	.LVL189:
 2580              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2581              		.loc 1 225 42 view .LVU664
 2582 0b14 01E08EE2 		add	lr, lr, #1	@ yy, yy,
 2583              	.LVL190:
 2584              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2585              		.loc 1 225 21 view .LVU665
 2586 0b18 0E0050E1 		cmp	r0, lr	@ ye, yy
 2587              	@ armwave.c:227:                         *(out_buffer_base + offset) = word;
 227:armwave.c     ****                     }
 2588              		.loc 1 227 53 view .LVU666
 2589 0b1c 023188E7 		str	r3, [r8, r2, lsl #2]	@ word, *_66
 2590              	@ armwave.c:225:                     for(y = yy; y < ye; y++) {
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2591              		.loc 1 225 21 view .LVU667
 2592 0b20 F8FFFF1A 		bne	.L148		@,
 225:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 2593              		.loc 1 225 21 view .LVU668
 2594 0b24 04009DE5 		ldr	r0, [sp, #4]	@ wave_word, %sfp
 2595 0b28 CBFFFFEA 		b	.L147		@
 2596              	.LVL191:
 2597              	.L162:
 180:armwave.c     **** 
 2598              		.loc 1 180 5 is_stmt 1 view .LVU669
 2599 0b2c 10309FE5 		ldr	r3, .L164+4	@,
 2600 0b30 B420A0E3 		mov	r2, #180	@,
 2601 0b34 0C109FE5 		ldr	r1, .L164+8	@,
 2602 0b38 0C009FE5 		ldr	r0, .L164+12	@,
 2603              	.LVL192:
 180:armwave.c     **** 
 2604              		.loc 1 180 5 is_stmt 0 view .LVU670
 2605 0b3c FEFFFFEB 		bl	__assert_fail		@
 2606              	.LVL193:
 2607              	.L165:
 2608              		.align	2
 2609              	.L164:
 2610 0b40 00000000 		.word	g_armwave_state
 2611 0b44 00000000 		.word	.LANCHOR0
 2612 0b48 20000000 		.word	.LC2
 2613 0b4c 2C000000 		.word	.LC3
 2614              	.LBE50:
 2615              	.LBE52:
 2616              		.cfi_endproc
 2617              	.LFE73:
 2619              		.align	2
 2620              		.global	armwave_test_buffer_alloc
 2621              		.syntax unified
 2622              		.arm
 2623              		.fpu vfp
 2625              	armwave_test_buffer_alloc:
 2626              	.LVL194:
 2627              	.LFB74:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 479:armwave.c     **** {
 2628              		.loc 1 479 1 is_stmt 1 view -0
 2629              		.cfi_startproc
 2630              		@ args = 0, pretend = 0, frame = 0
 2631              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2632              		.loc 1 480 5 view .LVU672
 2633              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2634              		.loc 1 479 1 is_stmt 0 view .LVU673
 2635 0b50 70402DE9 		push	{r4, r5, r6, lr}	@
 2636              		.cfi_def_cfa_offset 16
 2637              		.cfi_offset 4, -16
 2638              		.cfi_offset 5, -12
 2639              		.cfi_offset 6, -8
 2640              		.cfi_offset 14, -4
 2641              	@ armwave.c:479: {
 479:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2642              		.loc 1 479 1 view .LVU674
 2643 0b54 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2644              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2645              		.loc 1 480 23 view .LVU675
 2646 0b58 44409FE5 		ldr	r4, .L173	@ tmp128,
 2647 0b5c 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2648              	.LVL195:
 2649              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 2650              		.loc 1 480 7 view .LVU676
 2651 0b60 000050E3 		cmp	r0, #0	@ _1,
 2652 0b64 0000000A 		beq	.L167		@,
 481:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2653              		.loc 1 481 9 is_stmt 1 view .LVU677
 2654 0b68 FEFFFFEB 		bl	free		@
 2655              	.LVL196:
 2656              	.L167:
 482:armwave.c     ****     }
 483:armwave.c     **** 
 484:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 485:armwave.c     **** 
 486:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2657              		.loc 1 486 5 view .LVU678
 2658              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2659              		.loc 1 486 75 is_stmt 0 view .LVU679
 2660 0b6c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2661 0b70 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2662              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2663              		.loc 1 486 40 view .LVU680
 2664 0b74 0610A0E1 		mov	r1, r6	@, nsets
 2665              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2666              		.loc 1 486 75 view .LVU681
 2667 0b78 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2668              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2669              		.loc 1 486 40 view .LVU682
 2670 0b7c 0500A0E1 		mov	r0, r5	@, _4
 2671 0b80 FEFFFFEB 		bl	calloc		@
 2672              	.LVL197:
 2673              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 487:armwave.c     **** 
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2674              		.loc 1 488 7 view .LVU683
 2675 0b84 000050E3 		cmp	r0, #0	@ tmp124,
 2676              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2677              		.loc 1 486 38 view .LVU684
 2678 0b88 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2679              		.loc 1 488 5 is_stmt 1 view .LVU685
 2680              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 2681              		.loc 1 488 7 is_stmt 0 view .LVU686
 2682 0b8c 7080BD18 		popne	{r4, r5, r6, pc}	@
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2683              		.loc 1 489 9 is_stmt 1 view .LVU687
 2684 0b90 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2685 0b94 0620A0E1 		mov	r2, r6	@, nsets
 2686 0b98 08009FE5 		ldr	r0, .L173+4	@,
 2687              	@ armwave.c:493: }
 490:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 491:armwave.c     ****         return;
 492:armwave.c     ****     }
 493:armwave.c     **** }
 2688              		.loc 1 493 1 is_stmt 0 view .LVU688
 2689 0b9c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2690              		.cfi_restore 14
 2691              		.cfi_restore 6
 2692              		.cfi_restore 5
 2693              		.cfi_restore 4
 2694              		.cfi_def_cfa_offset 0
 2695              	.LVL198:
 2696              	@ armwave.c:489:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2697              		.loc 1 489 9 view .LVU689
 2698 0ba0 FEFFFFEA 		b	printf		@
 2699              	.LVL199:
 2700              	.L174:
 489:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2701              		.loc 1 489 9 view .LVU690
 2702              		.align	2
 2703              	.L173:
 2704 0ba4 00000000 		.word	g_armwave_state
 2705 0ba8 9C010000 		.word	.LC18
 2706              		.cfi_endproc
 2707              	.LFE74:
 2709              		.align	2
 2710              		.global	armwave_fill_pixbuf_into_pybuffer
 2711              		.syntax unified
 2712              		.arm
 2713              		.fpu vfp
 2715              	armwave_fill_pixbuf_into_pybuffer:
 2716              	.LVL200:
 2717              	.LFB75:
 494:armwave.c     **** 
 495:armwave.c     **** /*
 496:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 497:armwave.c     ****  */
 498:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 499:armwave.c     **** {
 2718              		.loc 1 499 1 is_stmt 1 view -0
 2719              		.cfi_startproc
 2720              		@ args = 0, pretend = 0, frame = 48
 2721              		@ frame_needed = 0, uses_anonymous_args = 0
 500:armwave.c     ****     Py_buffer buffer;
 2722              		.loc 1 500 5 view .LVU692
 501:armwave.c     ****     int ret;
 2723              		.loc 1 501 5 view .LVU693
 502:armwave.c     **** 
 503:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 504:armwave.c     **** 
 505:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2724              		.loc 1 505 5 view .LVU694
 2725              	@ armwave.c:499: {
 499:armwave.c     ****     Py_buffer buffer;
 2726              		.loc 1 499 1 is_stmt 0 view .LVU695
 2727 0bac 04E02DE5 		str	lr, [sp, #-4]!	@,
 2728              		.cfi_def_cfa_offset 4
 2729              		.cfi_offset 14, -4
 2730 0bb0 34D04DE2 		sub	sp, sp, #52	@,,
 2731              		.cfi_def_cfa_offset 56
 2732              	@ armwave.c:505:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2733              		.loc 1 505 11 view .LVU696
 2734 0bb4 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2735 0bb8 0120A0E3 		mov	r2, #1	@,
 2736 0bbc FEFFFFEB 		bl	PyObject_GetBuffer		@
 2737              	.LVL201:
 506:armwave.c     **** 
 507:armwave.c     ****     if(ret != 0) {
 2738              		.loc 1 507 5 is_stmt 1 view .LVU697
 2739              	@ armwave.c:507:     if(ret != 0) {
 2740              		.loc 1 507 7 is_stmt 0 view .LVU698
 2741 0bc0 000050E3 		cmp	r0, #0	@,
 2742 0bc4 0A00001A 		bne	.L179		@,
 508:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 509:armwave.c     ****         Py_RETURN_FALSE;
 510:armwave.c     ****     }
 511:armwave.c     **** 
 512:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 513:armwave.c     **** 
 514:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2743              		.loc 1 514 5 is_stmt 1 view .LVU699
 2744 0bc8 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2745              	.LVL202:
 2746              		.loc 1 514 5 is_stmt 0 view .LVU700
 2747 0bcc FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2748              	.LVL203:
 515:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 516:armwave.c     **** 
 517:armwave.c     ****     PyBuffer_Release(&buffer);
 2749              		.loc 1 517 5 is_stmt 1 view .LVU701
 2750 0bd0 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2751 0bd4 FEFFFFEB 		bl	PyBuffer_Release		@
 2752              	.LVL204:
 518:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 519:armwave.c     **** 
 520:armwave.c     ****     Py_RETURN_TRUE;
 2753              		.loc 1 520 5 view .LVU702
 2754              	.LBB53:
 2755              	.LBI53:
 2756              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2757              		.loc 2 456 20 view .LVU703
 2758              	.LBB54:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2759              		.loc 2 458 21 view .LVU704
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2760              		.loc 2 459 5 view .LVU705
 2761              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2762              		.loc 2 459 18 is_stmt 0 view .LVU706
 2763 0bd8 38309FE5 		ldr	r3, .L180	@ tmp126,
 2764              	.LBE54:
 2765              	.LBE53:
 2766              	@ armwave.c:520:     Py_RETURN_TRUE;
 2767              		.loc 1 520 5 view .LVU707
 2768 0bdc 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2769              	.LBB56:
 2770              	.LBB55:
 2771              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2772              		.loc 2 459 18 view .LVU708
 2773 0be0 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2774 0be4 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2775 0be8 002083E5 		str	r2, [r3]	@ tmp128,
 2776              	.LBE55:
 2777              	.LBE56:
 2778              	@ armwave.c:521: }
 521:armwave.c     **** }
 2779              		.loc 1 521 1 view .LVU709
 2780 0bec 34D08DE2 		add	sp, sp, #52	@,,
 2781              		.cfi_remember_state
 2782              		.cfi_def_cfa_offset 4
 2783              		@ sp needed	@
 2784 0bf0 04F09DE4 		ldr	pc, [sp], #4	@
 2785              	.LVL205:
 2786              	.L179:
 2787              		.cfi_restore_state
 508:armwave.c     ****         Py_RETURN_FALSE;
 2788              		.loc 1 508 9 is_stmt 1 view .LVU710
 2789 0bf4 20009FE5 		ldr	r0, .L180+4	@,
 2790              	.LVL206:
 508:armwave.c     ****         Py_RETURN_FALSE;
 2791              		.loc 1 508 9 is_stmt 0 view .LVU711
 2792 0bf8 FEFFFFEB 		bl	puts		@
 2793              	.LVL207:
 509:armwave.c     ****     }
 2794              		.loc 1 509 9 is_stmt 1 view .LVU712
 2795              	.LBB57:
 2796              	.LBI57:
 456:/usr/local/include/python3.8/object.h **** {
 2797              		.loc 2 456 20 view .LVU713
 2798              	.LBB58:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2799              		.loc 2 458 21 view .LVU714
 2800              		.loc 2 459 5 view .LVU715
 2801              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2802              		.loc 2 459 18 is_stmt 0 view .LVU716
 2803 0bfc 1C309FE5 		ldr	r3, .L180+8	@ tmp120,
 2804              	.LBE58:
 2805              	.LBE57:
 2806              	@ armwave.c:509:         Py_RETURN_FALSE;
 509:armwave.c     ****     }
 2807              		.loc 1 509 9 view .LVU717
 2808 0c00 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2809              	.LBB60:
 2810              	.LBB59:
 2811              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2812              		.loc 2 459 18 view .LVU718
 2813 0c04 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2814 0c08 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2815 0c0c 002083E5 		str	r2, [r3]	@ tmp122,
 2816              	.LBE59:
 2817              	.LBE60:
 2818              	@ armwave.c:521: }
 2819              		.loc 1 521 1 view .LVU719
 2820 0c10 34D08DE2 		add	sp, sp, #52	@,,
 2821              		.cfi_def_cfa_offset 4
 2822              		@ sp needed	@
 2823 0c14 04F09DE4 		ldr	pc, [sp], #4	@
 2824              	.L181:
 2825              		.align	2
 2826              	.L180:
 2827 0c18 00000000 		.word	_Py_TrueStruct
 2828 0c1c F0010000 		.word	.LC19
 2829 0c20 00000000 		.word	_Py_FalseStruct
 2830              		.cfi_endproc
 2831              	.LFE75:
 2833              		.align	2
 2834              		.global	armwave_test_create_am_sine
 2835              		.syntax unified
 2836              		.arm
 2837              		.fpu vfp
 2839              	armwave_test_create_am_sine:
 2840              	.LVL208:
 2841              	.LFB76:
 522:armwave.c     **** 
 523:armwave.c     **** /*
 524:armwave.c     ****  * Make a test AM waveform for render tests.
 525:armwave.c     ****  *
 526:armwave.c     ****  * @param   mod                     modulation depth
 527:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 528:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 529:armwave.c     ****  */
 530:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 531:armwave.c     **** {
 2842              		.loc 1 531 1 is_stmt 1 view -0
 2843              		.cfi_startproc
 2844              		@ args = 0, pretend = 0, frame = 8
 2845              		@ frame_needed = 0, uses_anonymous_args = 0
 532:armwave.c     ****     float v, noise, xnoise, mod_val;
 2846              		.loc 1 532 5 view .LVU721
 533:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2847              		.loc 1 533 5 view .LVU722
 2848              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2849              		.loc 1 531 1 is_stmt 0 view .LVU723
 2850 0c24 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2851              		.cfi_def_cfa_offset 32
 2852              		.cfi_offset 4, -32
 2853              		.cfi_offset 5, -28
 2854              		.cfi_offset 6, -24
 2855              		.cfi_offset 7, -20
 2856              		.cfi_offset 8, -16
 2857              		.cfi_offset 9, -12
 2858              		.cfi_offset 10, -8
 2859              		.cfi_offset 14, -4
 2860              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2861              		.loc 1 533 38 view .LVU724
 2862 0c28 7A7A9FED 		vldr.32	s14, .L213	@ tmp180,
 2863              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2864              		.loc 1 533 55 view .LVU725
 2865 0c2c 00529FE5 		ldr	r5, .L213+28	@ tmp250,
 2866              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2867              		.loc 1 531 1 view .LVU726
 2868 0c30 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2869              		.cfi_def_cfa_offset 80
 2870              		.cfi_offset 80, -80
 2871              		.cfi_offset 81, -76
 2872              		.cfi_offset 82, -72
 2873              		.cfi_offset 83, -68
 2874              		.cfi_offset 84, -64
 2875              		.cfi_offset 85, -60
 2876              		.cfi_offset 86, -56
 2877              		.cfi_offset 87, -52
 2878              		.cfi_offset 88, -48
 2879              		.cfi_offset 89, -44
 2880              		.cfi_offset 90, -40
 2881              		.cfi_offset 91, -36
 2882 0c34 0090A0E1 		mov	r9, r0	@ sets, sets
 2883              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2884              		.loc 1 533 38 view .LVU727
 2885 0c38 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2886              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 534:armwave.c     ****     int s, set_offset = 0;
 535:armwave.c     ****     int w, x;
 536:armwave.c     **** 
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2887              		.loc 1 537 70 view .LVU728
 2888 0c3c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2889 0c40 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2890              	.LBB63:
 2891              	.LBB64:
 2892              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2893              		.loc 1 480 23 view .LVU729
 2894 0c44 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2895              	.LVL209:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2896              		.loc 1 480 23 view .LVU730
 2897              	.LBE64:
 2898              	.LBE63:
 2899              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2900              		.loc 1 533 38 view .LVU731
 2901 0c48 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2902              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2903              		.loc 1 537 70 view .LVU732
 2904 0c4c 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2905              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2906              		.loc 1 531 1 view .LVU733
 2907 0c50 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2908              	.LBB68:
 2909              	.LBB65:
 2910              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2911              		.loc 1 480 7 view .LVU734
 2912 0c54 000050E3 		cmp	r0, #0	@ _82,
 2913              	.LBE65:
 2914              	.LBE68:
 2915              	@ armwave.c:531: {
 531:armwave.c     ****     float v, noise, xnoise, mod_val;
 2916              		.loc 1 531 1 view .LVU735
 2917 0c58 08D04DE2 		sub	sp, sp, #8	@,,
 2918              		.cfi_def_cfa_offset 88
 2919              	@ armwave.c:538:     g_armwave_state.test_wave_buffer_nsets = sets;
 538:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2920              		.loc 1 538 44 view .LVU736
 2921 0c5c 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2922              	@ armwave.c:537:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2923              		.loc 1 537 45 view .LVU737
 2924 0c60 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2925              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2926              		.loc 1 533 38 view .LVU738
 2927 0c64 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2928              	@ armwave.c:533:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 533:armwave.c     ****     int s, set_offset = 0;
 2929              		.loc 1 533 11 view .LVU739
 2930 0c68 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2931              	.LVL210:
 534:armwave.c     ****     int w, x;
 2932              		.loc 1 534 5 is_stmt 1 view .LVU740
 535:armwave.c     **** 
 2933              		.loc 1 535 5 view .LVU741
 537:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2934              		.loc 1 537 5 view .LVU742
 2935              		.loc 1 538 5 view .LVU743
 539:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2936              		.loc 1 539 5 view .LVU744
 2937              	.LBB69:
 2938              	.LBI63:
 478:armwave.c     **** {
 2939              		.loc 1 478 6 view .LVU745
 2940              	.LBB66:
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2941              		.loc 1 480 5 view .LVU746
 2942              	@ armwave.c:480:     if(g_armwave_state.test_wave_buffer != NULL) {
 480:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2943              		.loc 1 480 7 is_stmt 0 view .LVU747
 2944 0c6c 0000000A 		beq	.L183		@,
 481:armwave.c     ****     }
 2945              		.loc 1 481 9 is_stmt 1 view .LVU748
 2946 0c70 FEFFFFEB 		bl	free		@
 2947              	.LVL211:
 2948              	.L183:
 486:armwave.c     **** 
 2949              		.loc 1 486 5 view .LVU749
 2950              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2951              		.loc 1 486 75 is_stmt 0 view .LVU750
 2952 0c74 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2953 0c78 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2954              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2955              		.loc 1 486 40 view .LVU751
 2956 0c7c 0910A0E1 		mov	r1, r9	@, sets
 2957              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2958              		.loc 1 486 75 view .LVU752
 2959 0c80 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2960              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2961              		.loc 1 486 40 view .LVU753
 2962 0c84 0400A0E1 		mov	r0, r4	@, _85
 2963 0c88 FEFFFFEB 		bl	calloc		@
 2964              	.LVL212:
 2965              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2966              		.loc 1 488 7 view .LVU754
 2967 0c8c 000050E3 		cmp	r0, #0	@ tmp191,
 2968              	@ armwave.c:486:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 486:armwave.c     **** 
 2969              		.loc 1 486 38 view .LVU755
 2970 0c90 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2971              		.loc 1 488 5 is_stmt 1 view .LVU756
 2972              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer == NULL) {
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2973              		.loc 1 488 7 is_stmt 0 view .LVU757
 2974 0c94 5A00000A 		beq	.L212		@,
 2975              	.L184:
 2976              	.LVL213:
 488:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2977              		.loc 1 488 7 view .LVU758
 2978              	.LBE66:
 2979              	.LBE69:
 2980              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 540:armwave.c     **** 
 541:armwave.c     ****     for(s = 0; s < sets; s++) {
 2981              		.loc 1 541 5 discriminator 1 view .LVU759
 2982 0c98 000059E3 		cmp	r9, #0	@ sets,
 2983 0c9c 550000DA 		ble	.L182		@,
 2984              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 543:armwave.c     ****     
 544:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 545:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 546:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 547:armwave.c     **** 
 548:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 549:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 550:armwave.c     ****                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 552:armwave.c     ****                 noise *= noise;
 553:armwave.c     **** 
 554:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 555:armwave.c     ****                     noise = -noise;
 556:armwave.c     **** 
 557:armwave.c     ****                 noise += 1.0f;
 558:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 559:armwave.c     **** 
 560:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2985              		.loc 1 560 45 view .LVU760
 2986 0ca0 5C8A9FED 		vldr.32	s16, .L213	@ tmp258,
 2987              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 561:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 562:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 563:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2988              		.loc 1 563 104 view .LVU761
 2989 0ca4 5CCA9FED 		vldr.32	s24, .L213+4	@ tmp259,
 2990              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2991              		.loc 1 541 5 view .LVU762
 2992 0ca8 0070A0E3 		mov	r7, #0	@ set_offset,
 2993              	@ armwave.c:542:         printf("Calculating test set %d\n", s);
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 2994              		.loc 1 542 9 view .LVU763
 2995 0cac 84A19FE5 		ldr	r10, .L213+32	@ tmp257,
 2996              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 2997              		.loc 1 541 5 view .LVU764
 2998 0cb0 0780A0E1 		mov	r8, r7	@ s, set_offset
 2999              	.LVL214:
 3000              	.L185:
 542:armwave.c     ****         printf("Calculating test set %d\n", s);
 3001              		.loc 1 542 9 is_stmt 1 view .LVU765
 3002 0cb4 0810A0E1 		mov	r1, r8	@, s
 3003 0cb8 0A00A0E1 		mov	r0, r10	@, tmp257
 3004 0cbc FEFFFFEB 		bl	printf		@
 3005              	.LVL215:
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3006              		.loc 1 544 9 view .LVU766
 3007              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3008              		.loc 1 544 39 is_stmt 0 view .LVU767
 3009 0cc0 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3010              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3011              		.loc 1 544 9 view .LVU768
 3012 0cc4 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3013 0cc8 450000DA 		ble	.L186		@,
 3014              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3015              		.loc 1 546 21 view .LVU769
 3016 0ccc 53CADFED 		vldr.32	s25, .L213+8	@ tmp200,
 3017              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3018              		.loc 1 560 33 view .LVU770
 3019 0cd0 53BA9FED 		vldr.32	s22, .L213+12	@ tmp253,
 3020              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3021              		.loc 1 558 24 view .LVU771
 3022 0cd4 53AADFED 		vldr.32	s21, .L213+16	@ tmp254,
 3023 0cd8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3024              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3025              		.loc 1 544 15 view .LVU772
 3026 0cdc 0060A0E3 		mov	r6, #0	@ w,
 3027              	.LVL216:
 3028              	.L193:
 546:armwave.c     **** 
 3029              		.loc 1 546 13 is_stmt 1 view .LVU773
 3030              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3031              		.loc 1 546 21 is_stmt 0 view .LVU774
 3032 0ce0 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3033 0ce4 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3034              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3035              		.loc 1 548 13 view .LVU775
 3036 0ce8 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3037              	@ armwave.c:546:             mod_val = 0.5f + (_1_waves_mod * w);
 546:armwave.c     **** 
 3038              		.loc 1 546 21 view .LVU776
 3039 0cec E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3040 0cf0 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3041              	.LVL217:
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3042              		.loc 1 548 13 is_stmt 1 view .LVU777
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3043              		.loc 1 548 13 is_stmt 0 view .LVU778
 3044 0cf4 370000DA 		ble	.L187		@,
 3045 0cf8 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3046              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3047              		.loc 1 563 113 view .LVU779
 3048 0cfc 4AAA9FED 		vldr.32	s20, .L213+20	@ tmp229,
 3049 0d00 4A8ADFED 		vldr.32	s17, .L213+24	@ tmp230,
 3050              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3051              		.loc 1 548 19 view .LVU780
 3052 0d04 0040A0E3 		mov	r4, #0	@ x,
 3053              	.LVL218:
 3054              	.L192:
 549:armwave.c     ****                 noise *= noise;
 3055              		.loc 1 549 17 is_stmt 1 view .LVU781
 3056              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3057              		.loc 1 549 28 is_stmt 0 view .LVU782
 3058 0d08 FEFFFFEB 		bl	rand		@
 3059              	.LVL219:
 3060              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3061              		.loc 1 549 35 view .LVU783
 3062 0d0c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3063              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3064              		.loc 1 549 45 view .LVU784
 3065 0d10 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3066 0d14 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3067              	@ armwave.c:549:                 noise  = ((rand() & 0xffff) * noise_fraction);
 549:armwave.c     ****                 noise *= noise;
 3068              		.loc 1 549 24 view .LVU785
 3069 0d18 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3070              	.LVL220:
 550:armwave.c     ****                 noise *= noise;
 3071              		.loc 1 550 17 is_stmt 1 view .LVU786
 3072              	@ armwave.c:550:                 noise *= noise;
 550:armwave.c     ****                 noise *= noise;
 3073              		.loc 1 550 23 is_stmt 0 view .LVU787
 3074 0d1c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3075              	.LVL221:
 551:armwave.c     ****                 noise *= noise;
 3076              		.loc 1 551 17 is_stmt 1 view .LVU788
 3077              	@ armwave.c:551:                 noise *= noise;
 551:armwave.c     ****                 noise *= noise;
 3078              		.loc 1 551 23 is_stmt 0 view .LVU789
 3079 0d20 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3080              	.LVL222:
 552:armwave.c     **** 
 3081              		.loc 1 552 17 is_stmt 1 view .LVU790
 3082              	@ armwave.c:552:                 noise *= noise;
 552:armwave.c     **** 
 3083              		.loc 1 552 23 is_stmt 0 view .LVU791
 3084 0d24 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3085              	.LVL223:
 554:armwave.c     ****                     noise = -noise;
 3086              		.loc 1 554 17 is_stmt 1 view .LVU792
 3087              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 3088              		.loc 1 554 21 is_stmt 0 view .LVU793
 3089 0d28 FEFFFFEB 		bl	rand		@
 3090              	.LVL224:
 555:armwave.c     **** 
 3091              		.loc 1 555 21 is_stmt 1 view .LVU794
 3092              	@ armwave.c:554:                 if((rand() & 0xffff) > 0x7fff)
 554:armwave.c     ****                     noise = -noise;
 3093              		.loc 1 554 19 is_stmt 0 view .LVU795
 3094 0d2c 020910E3 		tst	r0, #32768	@,
 3095              	@ armwave.c:555:                     noise = -noise;
 555:armwave.c     **** 
 3096              		.loc 1 555 27 view .LVU796
 3097 0d30 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3098              	.LVL225:
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3099              		.loc 1 557 17 is_stmt 1 view .LVU797
 558:armwave.c     **** 
 3100              		.loc 1 558 17 view .LVU798
 3101              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3102              		.loc 1 558 27 is_stmt 0 view .LVU799
 3103 0d34 FEFFFFEB 		bl	rand		@
 3104              	.LVL226:
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3105              		.loc 1 560 17 is_stmt 1 view .LVU800
 3106              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3107              		.loc 1 560 45 is_stmt 0 view .LVU801
 3108 0d38 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3109              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3110              		.loc 1 560 33 view .LVU802
 3111 0d3c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3112              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3113              		.loc 1 560 45 view .LVU803
 3114 0d40 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3115              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3116              		.loc 1 560 33 view .LVU804
 3117 0d44 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3118              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3119              		.loc 1 560 45 view .LVU805
 3120 0d48 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3121              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3122              		.loc 1 560 33 view .LVU806
 3123 0d4c 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3124              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3125              		.loc 1 558 34 view .LVU807
 3126 0d50 7000FFE6 		uxth	r0, r0	@ tmp214,
 3127              	.LVL227:
 3128              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3129              		.loc 1 558 44 view .LVU808
 3130 0d54 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3131 0d58 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3132              	@ armwave.c:558:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 558:armwave.c     **** 
 3133              		.loc 1 558 24 view .LVU809
 3134 0d5c 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3135              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3136              		.loc 1 560 77 view .LVU810
 3137 0d60 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3138              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3139              		.loc 1 560 22 view .LVU811
 3140 0d64 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3141 0d68 FEFFFFEB 		bl	sin		@
 3142              	.LVL228:
 3143              		.loc 1 563 17 is_stmt 1 view .LVU812
 3144              	@ armwave.c:557:                 noise += 1.0f;
 557:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3145              		.loc 1 557 23 is_stmt 0 view .LVU813
 3146 0d6c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3147              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3148              		.loc 1 563 104 view .LVU814
 3149 0d70 0010A0E3 		mov	r1, #0	@ iftmp.17_50,
 3150              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3151              		.loc 1 560 98 view .LVU815
 3152 0d74 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3153              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3154              		.loc 1 560 87 view .LVU816
 3155 0d78 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3156              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3157              		.loc 1 560 98 view .LVU817
 3158 0d7c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3159              	@ armwave.c:560:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 560:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3160              		.loc 1 560 19 view .LVU818
 3161 0d80 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3162              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3163              		.loc 1 563 113 view .LVU819
 3164 0d84 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3165 0d88 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3166 0d8c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3167 0d90 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3168 0d94 050000DA 		ble	.L189		@,
 3169              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3170              		.loc 1 563 104 discriminator 1 view .LVU820
 3171 0d98 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3172 0d9c FF10A0E3 		mov	r1, #255	@ iftmp.17_50,
 3173 0da0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3174 0da4 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3175 0da8 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3176 0dac 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.17_50, %sfp
 3177              	.L189:
 3178              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3179              		.loc 1 563 57 discriminator 12 view .LVU821
 3180 0db0 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3181              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3182              		.loc 1 563 102 discriminator 12 view .LVU822
 3183 0db4 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3184 0db8 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3185 0dbc 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3186              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3187              		.loc 1 548 58 discriminator 12 view .LVU823
 3188 0dc0 014084E2 		add	r4, r4, #1	@ x, x,
 3189              	.LVL229:
 3190              	@ armwave.c:563:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3191              		.loc 1 563 102 discriminator 12 view .LVU824
 3192 0dc4 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.17_50, *_40
 3193              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3194              		.loc 1 548 43 discriminator 12 view .LVU825
 3195 0dc8 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3196              	@ armwave.c:548:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 548:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3197              		.loc 1 548 13 discriminator 12 view .LVU826
 3198 0dcc 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3199 0dd0 CCFFFFCA 		bgt	.L192		@,
 3200 0dd4 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3201              	.LVL230:
 3202              	.L187:
 3203              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3204              		.loc 1 544 48 discriminator 2 view .LVU827
 3205 0dd8 016086E2 		add	r6, r6, #1	@ w, w,
 3206              	.LVL231:
 3207              	@ armwave.c:544:         for(w = 0; w < g_armwave_state.waves; w++) {
 544:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3208              		.loc 1 544 9 discriminator 2 view .LVU828
 3209 0ddc 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3210 0de0 BEFFFFBA 		blt	.L193		@,
 3211              	.LVL232:
 3212              	.L186:
 564:armwave.c     ****             }
 565:armwave.c     ****         }
 566:armwave.c     **** 
 567:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3213              		.loc 1 567 9 is_stmt 1 discriminator 2 view .LVU829
 3214              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3215              		.loc 1 567 46 is_stmt 0 discriminator 2 view .LVU830
 3216 0de4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3217              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3218              		.loc 1 541 27 discriminator 2 view .LVU831
 3219 0de8 018088E2 		add	r8, r8, #1	@ s, s,
 3220              	.LVL233:
 3221              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3222              		.loc 1 541 5 discriminator 2 view .LVU832
 3223 0dec 080059E1 		cmp	r9, r8	@ sets, s
 3224              	@ armwave.c:567:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3225              		.loc 1 567 20 discriminator 2 view .LVU833
 3226 0df0 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3227              	.LVL234:
 3228              	@ armwave.c:541:     for(s = 0; s < sets; s++) {
 541:armwave.c     ****         printf("Calculating test set %d\n", s);
 3229              		.loc 1 541 5 discriminator 2 view .LVU834
 3230 0df4 AEFFFF1A 		bne	.L185		@,
 3231              	.LVL235:
 3232              	.L182:
 3233              	@ armwave.c:569: }
 568:armwave.c     ****     }
 569:armwave.c     **** }
 3234              		.loc 1 569 1 view .LVU835
 3235 0df8 08D08DE2 		add	sp, sp, #8	@,,
 3236              		.cfi_remember_state
 3237              		.cfi_def_cfa_offset 80
 3238              		@ sp needed	@
 3239 0dfc 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3240              		.cfi_restore 90
 3241              		.cfi_restore 91
 3242              		.cfi_restore 88
 3243              		.cfi_restore 89
 3244              		.cfi_restore 86
 3245              		.cfi_restore 87
 3246              		.cfi_restore 84
 3247              		.cfi_restore 85
 3248              		.cfi_restore 82
 3249              		.cfi_restore 83
 3250              		.cfi_restore 80
 3251              		.cfi_restore 81
 3252              		.cfi_def_cfa_offset 32
 3253              	.LVL236:
 3254              		.loc 1 569 1 view .LVU836
 3255 0e00 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3256              	.LVL237:
 3257              	.L212:
 3258              		.cfi_restore_state
 3259              	.LBB70:
 3260              	.LBB67:
 489:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3261              		.loc 1 489 9 is_stmt 1 view .LVU837
 3262 0e04 940901E0 		mul	r1, r4, r9	@, _85, sets
 3263 0e08 0920A0E1 		mov	r2, r9	@, sets
 3264 0e0c 28009FE5 		ldr	r0, .L213+36	@,
 3265 0e10 FEFFFFEB 		bl	printf		@
 3266              	.LVL238:
 491:armwave.c     ****     }
 3267              		.loc 1 491 9 view .LVU838
 3268 0e14 9FFFFFEA 		b	.L184		@
 3269              	.L214:
 3270              		.align	2
 3271              	.L213:
 3272 0e18 0000803F 		.word	1065353216
 3273 0e1c 00007F43 		.word	1132396544
 3274 0e20 0000003F 		.word	1056964608
 3275 0e24 C3F5C840 		.word	1086911939
 3276 0e28 38FFC74A 		.word	1254620984
 3277 0e2c 0000FE42 		.word	1123942400
 3278 0e30 00000043 		.word	1124073472
 3279 0e34 00000000 		.word	g_armwave_state
 3280 0e38 44020000 		.word	.LC20
 3281 0e3c 9C010000 		.word	.LC18
 3282              	.LBE67:
 3283              	.LBE70:
 3284              		.cfi_endproc
 3285              	.LFE76:
 3287              		.align	2
 3288              		.global	armwave_cleanup
 3289              		.syntax unified
 3290              		.arm
 3291              		.fpu vfp
 3293              	armwave_cleanup:
 3294              	.LFB77:
 570:armwave.c     **** 
 571:armwave.c     **** /*
 572:armwave.c     ****  * Make a test square waveform.
 573:armwave.c     ****  *
 574:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 575:armwave.c     ****  */
 576:armwave.c     **** #if 0
 577:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 578:armwave.c     **** {
 579:armwave.c     ****     uint8_t v;
 580:armwave.c     ****     float noise, xnoise;
 581:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 582:armwave.c     ****     int w, x;
 583:armwave.c     **** 
 584:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 585:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 586:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 587:armwave.c     ****             noise *= noise;
 588:armwave.c     ****             noise *= noise;
 589:armwave.c     ****             noise *= noise;
 590:armwave.c     **** 
 591:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 592:armwave.c     ****                 noise = -noise;
 593:armwave.c     **** 
 594:armwave.c     ****             //noise += 1.0f;
 595:armwave.c     **** 
 596:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 597:armwave.c     ****                 new_level = 0.2f;
 598:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 599:armwave.c     ****                 new_level = 0.8f;
 600:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 601:armwave.c     ****                 new_level = 0.2f;
 602:armwave.c     ****             } else {
 603:armwave.c     ****                 new_level = 0.8f;
 604:armwave.c     ****             }
 605:armwave.c     **** 
 606:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 607:armwave.c     **** 
 608:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 609:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 610:armwave.c     ****         }
 611:armwave.c     ****     }
 612:armwave.c     **** }
 613:armwave.c     **** #endif
 614:armwave.c     **** 
 615:armwave.c     **** /*
 616:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 617:armwave.c     ****  */
 618:armwave.c     **** void armwave_cleanup()
 619:armwave.c     **** {
 3295              		.loc 1 619 1 view -0
 3296              		.cfi_startproc
 3297              		@ args = 0, pretend = 0, frame = 0
 3298              		@ frame_needed = 0, uses_anonymous_args = 0
 620:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3299              		.loc 1 620 5 view .LVU840
 3300              	@ armwave.c:619: {
 619:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3301              		.loc 1 619 1 is_stmt 0 view .LVU841
 3302 0e40 10402DE9 		push	{r4, lr}	@
 3303              		.cfi_def_cfa_offset 8
 3304              		.cfi_offset 4, -8
 3305              		.cfi_offset 14, -4
 3306              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3307              		.loc 1 620 25 view .LVU842
 3308 0e44 34409FE5 		ldr	r4, .L217	@ tmp114,
 3309              	@ armwave.c:620:     free(g_armwave_state.out_pixbuf);
 3310              		.loc 1 620 5 view .LVU843
 3311 0e48 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3312 0e4c FEFFFFEB 		bl	free		@
 3313              	.LVL239:
 621:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3314              		.loc 1 621 5 is_stmt 1 view .LVU844
 3315 0e50 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3316 0e54 FEFFFFEB 		bl	free		@
 3317              	.LVL240:
 622:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3318              		.loc 1 622 5 view .LVU845
 3319 0e58 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3320 0e5c FEFFFFEB 		bl	free		@
 3321              	.LVL241:
 623:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3322              		.loc 1 623 5 view .LVU846
 3323 0e60 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3324 0e64 FEFFFFEB 		bl	free		@
 3325              	.LVL242:
 624:armwave.c     **** 
 625:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3326              		.loc 1 625 5 view .LVU847
 3327              	@ armwave.c:625:     g_armwave_state.out_pixbuf = NULL;
 3328              		.loc 1 625 32 is_stmt 0 view .LVU848
 3329 0e68 0030A0E3 		mov	r3, #0	@ tmp123,
 3330 0e6c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 626:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3331              		.loc 1 626 5 is_stmt 1 view .LVU849
 3332              	@ armwave.c:626:     g_armwave_state.ch1_buffer = NULL;
 3333              		.loc 1 626 32 is_stmt 0 view .LVU850
 3334 0e70 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 627:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3335              		.loc 1 627 5 is_stmt 1 view .LVU851
 3336              	@ armwave.c:627:     g_armwave_state.xcoord_to_xpixel = NULL;
 3337              		.loc 1 627 38 is_stmt 0 view .LVU852
 3338 0e74 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 628:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3339              		.loc 1 628 5 is_stmt 1 view .LVU853
 3340              	@ armwave.c:628:     g_armwave_state.test_wave_buffer = NULL;
 3341              		.loc 1 628 38 is_stmt 0 view .LVU854
 3342 0e78 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3343              	@ armwave.c:629: }
 629:armwave.c     **** }
 3344              		.loc 1 629 1 view .LVU855
 3345 0e7c 1080BDE8 		pop	{r4, pc}	@
 3346              	.L218:
 3347              		.align	2
 3348              	.L217:
 3349 0e80 00000000 		.word	g_armwave_state
 3350              		.cfi_endproc
 3351              	.LFE77:
 3353              		.comm	gamma_table,256,4
 3354              		.comm	g_armwave_state,136,4
 3355              		.section	.rodata
 3356              		.align	2
 3357              		.set	.LANCHOR0,. + 0
 3360              	__PRETTY_FUNCTION__.17108:
 3361 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3361      6176655F 
 3361      66696C6C 
 3361      5F706978 
 3361      6275665F 
 3362 001b 00       		.space	1
 3365              	__PRETTY_FUNCTION__.17130:
 3366 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3366      6176655F 
 3366      73657475 
 3366      705F7265 
 3366      6E646572 
 3367 0031 000000   		.space	3
 3370              	__PRETTY_FUNCTION__.17137:
 3371 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3371      6176655F 
 3371      7365745F 
 3371      77617665 
 3371      5F706F69 
 3372 004d 000000   		.space	3
 3375              	__PRETTY_FUNCTION__.17144:
 3376 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3376      6176655F 
 3376      7365745F 
 3376      77617665 
 3376      5F706F69 
 3377              		.section	.rodata.str1.4,"aMS",%progbits,1
 3378              		.align	2
 3379              	.LC0:
 3380 0000 76302E30 		.ascii	"v0.0.1\000"
 3380      2E3100
 3381 0007 00       		.space	1
 3382              	.LC1:
 3383 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3383      61766520 
 3383      76657273 
 3383      696F6E3A 
 3383      2025730A 
 3384 001d 000000   		.space	3
 3385              	.LC2:
 3386 0020 61726D77 		.ascii	"armwave.c\000"
 3386      6176652E 
 3386      6300
 3387 002a 0000     		.space	2
 3388              	.LC3:
 3389 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3389      62756666 
 3389      65722021 
 3389      3D204E55 
 3389      4C4C00
 3390 003f 00       		.space	1
 3391              	.LC4:
 3392 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3392      20653D25 
 3392      6420773D 
 3392      25642077 
 3392      733D2564 
 3393              	.LC5:
 3394 006c 73746172 		.ascii	"start_point < end_point\000"
 3394      745F706F 
 3394      696E7420 
 3394      3C20656E 
 3394      645F706F 
 3395              	.LC6:
 3396 0084 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3396      7566665F 
 3396      73697A65 
 3396      3D25640A 
 3396      00
 3397 0095 000000   		.space	3
 3398              	.LC7:
 3399 0098 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3399      6D776176 
 3399      655F7374 
 3399      6174652E 
 3399      6368315F 
 3400 00bb 00       		.space	1
 3401              	.LC8:
 3402 00bc 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3402      6D776176 
 3402      655F7374 
 3402      6174652E 
 3402      78636F6F 
 3403 00e5 000000   		.space	3
 3404              	.LC9:
 3405 00e8 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3405      3A203078 
 3405      25303878 
 3405      20307825 
 3405      30387820 
 3406              	.LC10:
 3407 010c 77617665 		.ascii	"wave_buffer != NULL\000"
 3407      5F627566 
 3407      66657220 
 3407      213D204E 
 3407      554C4C00 
 3408              	.LC11:
 3409 0120 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3409      6176655F 
 3409      7365745F 
 3409      77617665 
 3409      5F706F69 
 3410 0153 78636565 		.ascii	"xceeded\000"
 3410      64656400 
 3411 015b 00       		.space	1
 3412              	.LC12:
 3413 015c 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3413      5F627566 
 3413      6665725F 
 3413      70747220 
 3413      213D2030 
 3414 0171 000000   		.space	3
 3415              	.LC13:
 3416 0174 776200   		.ascii	"wb\000"
 3417 0177 00       		.space	1
 3418              	.LC14:
 3419 0178 50330A00 		.ascii	"P3\012\000"
 3420              	.LC15:
 3421 017c 25642025 		.ascii	"%d %d\012\000"
 3421      640A00
 3422 0183 00       		.space	1
 3423              	.LC16:
 3424 0184 3235350A 		.ascii	"255\012\000"
 3424      00
 3425 0189 000000   		.space	3
 3426              	.LC17:
 3427 018c 25336420 		.ascii	"%3d %3d %3d\012\000"
 3427      25336420 
 3427      2533640A 
 3427      00
 3428 0199 000000   		.space	3
 3429              	.LC18:
 3430 019c 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3430      6176655F 
 3430      74657374 
 3430      5F627566 
 3430      6665725F 
 3431 01cf 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3431      20627566 
 3431      66657220 
 3431      28256420 
 3431      62797465 
 3432              	.LC19:
 3433 01f0 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3433      6176655F 
 3433      66696C6C 
 3433      5F706978 
 3433      6275665F 
 3434 0223 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3434      20666169 
 3434      6C65642C 
 3434      20726574 
 3434      75726E69 
 3435 0242 0000     		.space	2
 3436              	.LC20:
 3437 0244 43616C63 		.ascii	"Calculating test set %d\012\000"
 3437      756C6174 
 3437      696E6720 
 3437      74657374 
 3437      20736574 
 3438              		.text
 3439              	.Letext0:
 3440              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3441              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3442              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3443              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3444              		.file 7 "/usr/include/stdio.h"
 3445              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3446              		.file 9 "/usr/include/errno.h"
 3447              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3448              		.file 11 "/usr/include/unistd.h"
 3449              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3450              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3451              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3452              		.file 15 "/usr/include/math.h"
 3453              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3454              		.file 17 "/usr/include/time.h"
 3455              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3456              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3457              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3458              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3459              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3460              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3461              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3462              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3463              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3464              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3465              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3466              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3467              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3468              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3469              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3470              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3471              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3472              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3473              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3474              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3475              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3476              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3477              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3478              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3479              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3480              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3481              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3482              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3483              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3484              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3485              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3486              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3487              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3488              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3489              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3490              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3491              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3492              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3493              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3494              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3495              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3496              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3497              		.file 60 "/usr/local/include/python3.8/context.h"
 3498              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3499              		.file 62 "/usr/local/include/python3.8/code.h"
 3500              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3501              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3502              		.file 65 "/usr/local/include/python3.8/import.h"
 3503              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3504              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3505              		.file 68 "/usr/include/malloc.h"
 3506              		.file 69 "armwave.h"
 3507              		.file 70 "/usr/include/stdlib.h"
 3508              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3509              		.file 72 "/usr/include/assert.h"
 3510              		.file 73 "<built-in>"
 3511              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
