   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.37,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.37,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.37,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.37
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.37, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.52, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.53, ivtmp.52
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.45, ivtmp.52
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.46,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.46,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.46
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.53, ivtmp.45
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.46, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.52, ivtmp.52, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.53, ivtmp.53, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 32
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564 022c 3CD04DE2 		sub	sp, sp, #60	@,,
 565              		.cfi_def_cfa_offset 96
 566              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 567              		.loc 1 128 15 view .LVU124
 568 0230 2C729FE5 		ldr	r7, .L46	@ tmp241,
 569              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 570              		.loc 1 121 1 view .LVU125
 571 0234 00A0A0E1 		mov	r10, r0	@ out_buffer, out_buffer
 572              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 573              		.loc 1 132 5 view .LVU126
 574 0238 0010A0E1 		mov	r1, r0	@, out_buffer
 575              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 576              		.loc 1 128 15 view .LVU127
 577 023c 045097E5 		ldr	r5, [r7, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 578              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 579              		.loc 1 132 5 view .LVU128
 580 0240 20029FE5 		ldr	r0, .L46+4	@,
 581              	.LVL29:
 582              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 128 15 view .LVU129
 584 0244 18508DE5 		str	r5, [sp, #24]	@ base_32ptr, %sfp
 585              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 129 5 is_stmt 1 view .LVU130
 130:armwave.c     **** 
 587              		.loc 1 130 5 view .LVU131
 588              		.loc 1 132 5 view .LVU132
 589 0248 FEFFFFEB 		bl	printf		@
 590              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 591              		.loc 1 134 5 view .LVU133
 592              	@ armwave.c:134:     if(out_buffer == NULL)
 593              		.loc 1 134 7 is_stmt 0 view .LVU134
 594 024c 00005AE3 		cmp	r10, #0	@ out_buffer,
 595 0250 2600000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 596              		.loc 1 137 5 is_stmt 1 view .LVU135
 597              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 598              		.loc 1 137 27 is_stmt 0 view .LVU136
 599 0254 583097E5 		ldr	r3, [r7, #88]	@ _1, g_armwave_state.target_width
 600              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer 0x%08x, stack ~0
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 601              		.loc 1 140 38 view .LVU137
 602 0258 5C1097E5 		ldr	r1, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 603              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 604              		.loc 1 137 10 view .LVU138
 605 025c 402097E5 		ldr	r2, [r7, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 606              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 139 5 view .LVU139
 608 0260 34008DE2 		add	r0, sp, #52	@ tmp190,,
 609              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 610              		.loc 1 140 38 view .LVU140
 611 0264 910301E0 		mul	r1, r1, r3	@ tmp186, g_armwave_state.target_height, _1
 612              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 613              		.loc 1 137 10 view .LVU141
 614 0268 920304E0 		mul	r4, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 615              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, dest_buffer
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 616              		.loc 1 139 5 view .LVU142
 617 026c 0111A0E1 		lsl	r1, r1, #2	@, tmp186,
 618 0270 0420A0E1 		mov	r2, r4	@, npix
 619 0274 08008DE5 		str	r0, [sp, #8]	@ tmp190,
 620 0278 503097E5 		ldr	r3, [r7, #80]	@, g_armwave_state.ch_buff_size
 621 027c 20048DE8 		stm	sp, {r5, r10}	@,,
 622 0280 E4019FE5 		ldr	r0, .L46+8	@,
 623              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 624              		.loc 1 137 10 view .LVU143
 625 0284 1C408DE5 		str	r4, [sp, #28]	@ npix, %sfp
 626              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 627              		.loc 1 139 5 is_stmt 1 view .LVU144
 628 0288 FEFFFFEB 		bl	printf		@
 629              	.LVL33:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, out_buffer_base, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 630              		.loc 1 144 5 view .LVU145
 631              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 632              		.loc 1 144 59 is_stmt 0 view .LVU146
 633 028c 583097E5 		ldr	r3, [r7, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 634 0290 5C2097E5 		ldr	r2, [r7, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 635              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 636              		.loc 1 144 5 view .LVU147
 637 0294 0010A0E3 		mov	r1, #0	@,
 638 0298 0A00A0E1 		mov	r0, r10	@, out_buffer
 639              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 640              		.loc 1 144 59 view .LVU148
 641 029c 920302E0 		mul	r2, r2, r3	@ tmp193, g_armwave_state.target_height, g_armwave_state.target_width
 642              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 643              		.loc 1 144 5 view .LVU149
 644 02a0 0221A0E1 		lsl	r2, r2, #2	@, tmp193,
 645 02a4 FEFFFFEB 		bl	memset		@
 646              	.LVL34:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 647              		.loc 1 146 5 is_stmt 1 view .LVU150
 648 02a8 C0019FE5 		ldr	r0, .L46+12	@,
 649 02ac FEFFFFEB 		bl	puts		@
 650              	.LVL35:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 651              		.loc 1 148 5 view .LVU151
 652              		.loc 1 148 5 is_stmt 0 view .LVU152
 653 02b0 000054E3 		cmp	r4, #0	@ npix,
 654 02b4 670000DA 		ble	.L34		@,
 655              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 656              		.loc 1 148 11 view .LVU153
 657 02b8 00B0A0E3 		mov	fp, #0	@ n,
 658              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 659              		.loc 1 122 46 view .LVU154
 660 02bc 20B08DE5 		str	fp, [sp, #32]	@ n, %sfp
 661              	.LVL36:
 662              	.L33:
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         //wave_word = 0x12345678;
 151:armwave.c     ****         wave_word = *base_32ptr++;
 663              		.loc 1 151 9 is_stmt 1 view .LVU155
 664              	@ armwave.c:151:         wave_word = *base_32ptr++;
 665              		.loc 1 151 19 is_stmt 0 view .LVU156
 666 02c0 18309DE5 		ldr	r3, [sp, #24]	@ base_32ptr, %sfp
 667 02c4 049093E4 		ldr	r9, [r3], #4	@ wave_word, MEM[base: base_32ptr_80, offset: 4294967292B]
 668              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 152:armwave.c     **** 
 153:armwave.c     ****         /*
 154:armwave.c     ****         if(n % 200 == 0) {
 155:armwave.c     ****            printf("%d\n", n);
 156:armwave.c     ****         }
 157:armwave.c     ****         */
 158:armwave.c     **** 
 159:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 669              		.loc 1 159 11 view .LVU157
 670 02c8 000059E3 		cmp	r9, #0	@ wave_word,
 671              	@ armwave.c:151:         wave_word = *base_32ptr++;
 151:armwave.c     **** 
 672              		.loc 1 151 19 view .LVU158
 673 02cc 18308DE5 		str	r3, [sp, #24]	@ base_32ptr, %sfp
 674              	.LVL37:
 675              		.loc 1 159 9 is_stmt 1 view .LVU159
 676              	@ armwave.c:159:         if(COND_UNLIKELY(wave_word != 0)) {
 677              		.loc 1 159 11 is_stmt 0 view .LVU160
 678 02d0 0800001A 		bne	.L44		@,
 679              	.LVL38:
 680              	.L28:
 681              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 682              		.loc 1 148 5 discriminator 2 view .LVU161
 683 02d4 1C309DE5 		ldr	r3, [sp, #28]	@ npix, %sfp
 684              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 685              		.loc 1 148 28 discriminator 2 view .LVU162
 686 02d8 02B08BE2 		add	fp, fp, #2	@ n, n,
 687              	.LVL39:
 688              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 689              		.loc 1 148 5 discriminator 2 view .LVU163
 690 02dc 0B0053E1 		cmp	r3, fp	@ npix, n
 691 02e0 F6FFFFCA 		bgt	.L33		@,
 692              	.LVL40:
 693              	.L27:
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 161:armwave.c     ****                 value = wave_word & 0xffff;
 162:armwave.c     ****                 wave_word >>= 16;
 163:armwave.c     **** 
 164:armwave.c     ****                 if(value != 0) {
 165:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 166:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 167:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 168:armwave.c     **** 
 169:armwave.c     ****                     r = MIN(rr, 255);
 170:armwave.c     ****                     g = MIN(gg, 255);
 171:armwave.c     ****                     b = MIN(bb, 255);
 172:armwave.c     **** 
 173:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 174:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 175:armwave.c     **** 
 176:armwave.c     ****                     // Plot the pixels
 177:armwave.c     ****                     nsub = n + w;
 178:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 180:armwave.c     ****                     xx = (nsub >> 8) / 2;
 181:armwave.c     **** 
 182:armwave.c     ****                     for(y = yy; y < ye; y++) {
 183:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 184:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 185:armwave.c     ****                         *(out_buffer_base + offset) = word;
 186:armwave.c     ****                         painted++;
 187:armwave.c     ****                     }
 188:armwave.c     ****                 }
 189:armwave.c     ****             }
 190:armwave.c     ****         }
 191:armwave.c     ****     }
 192:armwave.c     **** 
 193:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 694              		.loc 1 193 5 is_stmt 1 view .LVU164
 695 02e4 20109DE5 		ldr	r1, [sp, #32]	@, %sfp
 696 02e8 84019FE5 		ldr	r0, .L46+16	@,
 697 02ec FEFFFFEB 		bl	printf		@
 698              	.LVL41:
 699              	.L24:
 700              	@ armwave.c:194: }
 194:armwave.c     **** }
 701              		.loc 1 194 1 is_stmt 0 view .LVU165
 702 02f0 3CD08DE2 		add	sp, sp, #60	@,,
 703              		.cfi_remember_state
 704              		.cfi_def_cfa_offset 36
 705              		@ sp needed	@
 706 02f4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 707              	.LVL42:
 708              	.L44:
 709              		.cfi_restore_state
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 710              		.loc 1 160 13 is_stmt 1 view .LVU166
 711              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 712              		.loc 1 160 26 is_stmt 0 view .LVU167
 713 02f8 0020A0E3 		mov	r2, #0	@ _53,
 714              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 715              		.loc 1 160 19 view .LVU168
 716 02fc 34208DE5 		str	r2, [sp, #52]	@ tmp266, w
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 717              		.loc 1 160 19 view .LVU169
 718 0300 28B08DE5 		str	fp, [sp, #40]	@ n, %sfp
 719 0304 030000EA 		b	.L32		@
 720              	.LVL43:
 721              	.L29:
 722              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 723              		.loc 1 160 32 discriminator 2 view .LVU170
 724 0308 012082E2 		add	r2, r2, #1	@ _53, _53,
 725              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 726              		.loc 1 160 13 discriminator 2 view .LVU171
 727 030c 010052E3 		cmp	r2, #1	@ _53,
 728              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 729              		.loc 1 160 32 discriminator 2 view .LVU172
 730 0310 34208DE5 		str	r2, [sp, #52]	@ _53, w
 731              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****             for(w = 0; w < 2; w++) {
 732              		.loc 1 160 13 discriminator 2 view .LVU173
 733 0314 4D0000CA 		bgt	.L45		@,
 734              	.L32:
 161:armwave.c     ****                 wave_word >>= 16;
 735              		.loc 1 161 17 is_stmt 1 view .LVU174
 736              	@ armwave.c:161:                 value = wave_word & 0xffff;
 161:armwave.c     ****                 wave_word >>= 16;
 737              		.loc 1 161 23 is_stmt 0 view .LVU175
 738 0318 7930FFE6 		uxth	r3, r9	@ value, wave_word
 739              	.LVL44:
 162:armwave.c     **** 
 740              		.loc 1 162 17 is_stmt 1 view .LVU176
 741              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 742              		.loc 1 164 19 is_stmt 0 view .LVU177
 743 031c 000053E3 		cmp	r3, #0	@ value,
 744              	@ armwave.c:162:                 wave_word >>= 16;
 162:armwave.c     **** 
 745              		.loc 1 162 27 view .LVU178
 746 0320 2998A0E1 		lsr	r9, r9, #16	@ wave_word, wave_word,
 747              	.LVL45:
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 748              		.loc 1 164 17 is_stmt 1 view .LVU179
 749              	@ armwave.c:164:                 if(value != 0) {
 164:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 750              		.loc 1 164 19 is_stmt 0 view .LVU180
 751 0324 F7FFFF0A 		beq	.L29		@,
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 752              		.loc 1 165 21 is_stmt 1 view .LVU181
 753              	.LVL46:
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 754              		.loc 1 166 21 view .LVU182
 167:armwave.c     **** 
 755              		.loc 1 167 21 view .LVU183
 169:armwave.c     ****                     g = MIN(gg, 255);
 756              		.loc 1 169 21 view .LVU184
 170:armwave.c     ****                     b = MIN(bb, 255);
 757              		.loc 1 170 21 view .LVU185
 171:armwave.c     **** 
 758              		.loc 1 171 21 view .LVU186
 174:armwave.c     **** 
 759              		.loc 1 174 21 view .LVU187
 760              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 761              		.loc 1 177 26 is_stmt 0 view .LVU188
 762 0328 28C09DE5 		ldr	ip, [sp, #40]	@ n, %sfp
 763              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 764              		.loc 1 178 57 view .LVU189
 765 032c 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 766              	@ armwave.c:177:                     nsub = n + w;
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 767              		.loc 1 177 26 view .LVU190
 768 0330 0C5082E0 		add	r5, r2, ip	@ nsub, _53, n
 769              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 770              		.loc 1 166 52 view .LVU191
 771 0334 FE66D7E1 		ldrsh	r6, [r7, #110]	@ g_armwave_state.ch1_color.g, g_armwave_state.ch1_color.g
 772              	.LVL47:
 773              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 774              		.loc 1 178 32 view .LVU192
 775 0338 7510EFE6 		uxtb	r1, r5	@ _36, nsub
 776              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 777              		.loc 1 179 41 view .LVU193
 778 033c 010081E2 		add	r0, r1, #1	@ tmp227, _36,
 779              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 780              		.loc 1 178 40 view .LVU194
 781 0340 901A07EE 		vmov	s15, r1	@ int	@ _36, _36
 782              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 783              		.loc 1 179 41 view .LVU195
 784 0344 900A06EE 		vmov	s13, r0	@ int	@ tmp227, tmp227
 785              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 786              		.loc 1 167 52 view .LVU196
 787 0348 F017D7E1 		ldrsh	r1, [r7, #112]	@ g_armwave_state.ch1_color.b, g_armwave_state.ch1_color.b
 788              	.LVL48:
 789              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 790              		.loc 1 165 52 view .LVU197
 791 034c FC06D7E1 		ldrsh	r0, [r7, #108]	@ g_armwave_state.ch1_color.r, g_armwave_state.ch1_color.r
 792              	.LVL49:
 793              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 794              		.loc 1 178 40 view .LVU198
 795 0350 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp225, _36
 796              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 797              		.loc 1 179 46 view .LVU199
 798 0354 E66AF8EE 		vcvt.f32.s32	s13, s13	@ tmp228, tmp227
 799              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 800              		.loc 1 167 55 view .LVU200
 801 0358 930101E0 		mul	r1, r3, r1	@ tmp207, value, g_armwave_state.ch1_color.b
 802              	.LVL50:
 803              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 804              		.loc 1 166 55 view .LVU201
 805 035c 930606E0 		mul	r6, r3, r6	@ tmp213, value, g_armwave_state.ch1_color.g
 806              	.LVL51:
 807              	@ armwave.c:167:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 167:armwave.c     **** 
 808              		.loc 1 167 24 view .LVU202
 809 0360 4114A0E1 		asr	r1, r1, #8	@ bb, tmp207,
 810              	.LVL52:
 811              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 812              		.loc 1 165 55 view .LVU203
 813 0364 930003E0 		mul	r3, r3, r0	@ tmp221, value, g_armwave_state.ch1_color.r
 814              	.LVL53:
 815              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 816              		.loc 1 178 40 view .LVU204
 817 0368 877A67EE 		vmul.f32	s15, s15, s14	@ tmp226, tmp225, pretmp_169
 818              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 819              		.loc 1 179 46 view .LVU205
 820 036c 876A66EE 		vmul.f32	s13, s13, s14	@ tmp229, tmp228, pretmp_169
 821              	@ armwave.c:166:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 166:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 822              		.loc 1 166 24 view .LVU206
 823 0370 4664A0E1 		asr	r6, r6, #8	@ gg, tmp213,
 824              	.LVL54:
 825              	@ armwave.c:171:                     b = MIN(bb, 255);
 171:armwave.c     **** 
 826              		.loc 1 171 25 view .LVU207
 827 0374 FF0051E3 		cmp	r1, #255	@ bb,
 828 0378 FF10A0A3 		movge	r1, #255	@ bb,
 829              	.LVL55:
 830              	@ armwave.c:170:                     g = MIN(gg, 255);
 170:armwave.c     ****                     b = MIN(bb, 255);
 831              		.loc 1 170 25 view .LVU208
 832 037c FF0056E3 		cmp	r6, #255	@ gg,
 833 0380 FF60A0A3 		movge	r6, #255	@ gg,
 834              	.LVL56:
 835              	@ armwave.c:165:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 165:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 836              		.loc 1 165 24 view .LVU209
 837 0384 4334A0E1 		asr	r3, r3, #8	@ rr, tmp221,
 838              	.LVL57:
 839              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 840              		.loc 1 178 24 view .LVU210
 841 0388 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp226
 842              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 843              		.loc 1 179 24 view .LVU211
 844 038c E66AFCEE 		vcvt.u32.f32	s13, s13	@ ye, tmp229
 845              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 846              		.loc 1 169 25 view .LVU212
 847 0390 FF0053E3 		cmp	r3, #255	@ rr,
 848              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 849              		.loc 1 174 56 view .LVU213
 850 0394 0604A0E1 		lsl	r0, r6, #8	@ tmp214, gg,
 851              	@ armwave.c:169:                     r = MIN(rr, 255);
 169:armwave.c     ****                     g = MIN(gg, 255);
 852              		.loc 1 169 25 view .LVU214
 853 0398 FF30A0A3 		movge	r3, #255	@ rr,
 854              	.LVL58:
 855              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 856              		.loc 1 174 44 view .LVU215
 857 039c 0168A0E1 		lsl	r6, r1, #16	@ tmp208, bb,
 858              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 859              		.loc 1 180 32 view .LVU216
 860 03a0 4554A0E1 		asr	r5, r5, #8	@ tmp230, nsub,
 861              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 862              		.loc 1 174 44 view .LVU217
 863 03a4 FF6806E2 		and	r6, r6, #16711680	@ tmp209, tmp208,
 864              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 182 21 view .LVU218
 866 03a8 904A17EE 		vmov	r4, s15	@ int	@ yy,
 867              	@ armwave.c:179:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 868              		.loc 1 179 24 view .LVU219
 869 03ac 90BA16EE 		vmov	fp, s13	@ int	@ ye, ye
 870              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 871              		.loc 1 174 56 view .LVU220
 872 03b0 7010FFE6 		uxth	r1, r0	@ tmp215, tmp214
 873              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 874              		.loc 1 174 51 view .LVU221
 875 03b4 016086E1 		orr	r6, r6, r1	@ tmp217, tmp209, tmp215
 876              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 877              		.loc 1 174 62 view .LVU222
 878 03b8 7330EFE6 		uxtb	r3, r3	@ rr, rr
 879              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 880              		.loc 1 180 38 view .LVU223
 881 03bc A55F85E0 		add	r5, r5, r5, lsr #31	@ tmp232, tmp230, tmp230,
 882              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 883              		.loc 1 174 62 view .LVU224
 884 03c0 036086E1 		orr	r6, r6, r3	@ tmp223, tmp217, rr
 885              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 886              		.loc 1 182 21 view .LVU225
 887 03c4 0B0054E1 		cmp	r4, fp	@ yy, ye
 888              	@ armwave.c:178:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 889              		.loc 1 178 24 view .LVU226
 890 03c8 097ACDED 		vstr.32	s15, [sp, #36]	@ int	@ yy, %sfp
 891              	@ armwave.c:174:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 174:armwave.c     **** 
 892              		.loc 1 174 26 view .LVU227
 893 03cc FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp223,
 894              	.LVL59:
 177:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 895              		.loc 1 177 21 is_stmt 1 view .LVU228
 178:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 896              		.loc 1 178 21 view .LVU229
 179:armwave.c     ****                     xx = (nsub >> 8) / 2;
 897              		.loc 1 179 21 view .LVU230
 180:armwave.c     **** 
 898              		.loc 1 180 21 view .LVU231
 899              	@ armwave.c:180:                     xx = (nsub >> 8) / 2;
 180:armwave.c     **** 
 900              		.loc 1 180 38 is_stmt 0 view .LVU232
 901 03d0 C550A0E1 		asr	r5, r5, #1	@ xx, tmp232,
 902              	.LVL60:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 903              		.loc 1 182 21 is_stmt 1 view .LVU233
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 904              		.loc 1 182 21 is_stmt 0 view .LVU234
 905 03d4 CBFFFF2A 		bcs	.L29		@,
 906 03d8 2C908DE5 		str	r9, [sp, #44]	@ wave_word, %sfp
 907 03dc 0C90A0E1 		mov	r9, ip	@ n, n
 908              	.LVL61:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 909              		.loc 1 182 21 view .LVU235
 910 03e0 000000EA 		b	.L31		@
 911              	.LVL62:
 912              	.L30:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 913              		.loc 1 182 21 view .LVU236
 914 03e4 0A7A97ED 		vldr.32	s14, [r7, #40]	@ pretmp_169, g_armwave_state.vscale_frac
 915              	.LVL63:
 916              	.L31:
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 917              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU237
 918              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 919              		.loc 1 184 25 is_stmt 0 discriminator 3 view .LVU238
 920 03e8 C77AB7EE 		vcvt.f64.f32	d7, s14	@ tmp237, pretmp_169
 921              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 922              		.loc 1 183 60 discriminator 3 view .LVU239
 923 03ec 583097E5 		ldr	r3, [r7, #88]	@ _45, g_armwave_state.target_width
 924              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 925              		.loc 1 184 25 discriminator 3 view .LVU240
 926 03f0 10028DE8 		stm	sp, {r4, r9}	@,,
 927 03f4 08308DE5 		str	r3, [sp, #8]	@ _45,
 928              	@ armwave.c:183:                         offset = (xx + (y * g_armwave_state.target_width)); 
 183:armwave.c     ****                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_base, offset, xx, y,
 929              		.loc 1 183 32 discriminator 3 view .LVU241
 930 03f8 945328E0 		mla	r8, r4, r3, r5	@ offset, y, _45, xx
 931              	.LVL64:
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 932              		.loc 1 184 25 is_stmt 1 discriminator 3 view .LVU242
 933 03fc 0A10A0E1 		mov	r1, r10	@, out_buffer
 934              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 935              		.loc 1 182 42 is_stmt 0 discriminator 3 view .LVU243
 936 0400 014084E2 		add	r4, r4, #1	@ y, y,
 937              	.LVL65:
 938              	@ armwave.c:184:                         printf("0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\n", out_buffer_bas
 184:armwave.c     ****                         *(out_buffer_base + offset) = word;
 939              		.loc 1 184 25 discriminator 3 view .LVU244
 940 0404 0820A0E1 		mov	r2, r8	@, offset
 941 0408 047B8DED 		vstr.64	d7, [sp, #16]	@ tmp237,
 942 040c 0530A0E1 		mov	r3, r5	@, xx
 943 0410 60009FE5 		ldr	r0, .L46+20	@,
 944 0414 FEFFFFEB 		bl	printf		@
 945              	.LVL66:
 185:armwave.c     ****                         painted++;
 946              		.loc 1 185 25 is_stmt 1 discriminator 3 view .LVU245
 947              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 948              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU246
 949 0418 04005BE1 		cmp	fp, r4	@ ye, y
 950              	@ armwave.c:185:                         *(out_buffer_base + offset) = word;
 185:armwave.c     ****                         painted++;
 951              		.loc 1 185 53 discriminator 3 view .LVU247
 952 041c 08618AE7 		str	r6, [r10, r8, lsl #2]	@ word, *_51
 186:armwave.c     ****                     }
 953              		.loc 1 186 25 is_stmt 1 discriminator 3 view .LVU248
 954              	.LVL67:
 955              	@ armwave.c:182:                     for(y = yy; y < ye; y++) {
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 956              		.loc 1 182 21 is_stmt 0 discriminator 3 view .LVU249
 957 0420 EFFFFF1A 		bne	.L30		@,
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 958              		.loc 1 182 21 discriminator 3 view .LVU250
 959 0424 24309DE5 		ldr	r3, [sp, #36]	@ yy, %sfp
 960 0428 34209DE5 		ldr	r2, [sp, #52]	@ _53, w
 961              	.LVL68:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 962              		.loc 1 182 21 discriminator 3 view .LVU251
 963 042c 03B04BE0 		sub	fp, fp, r3	@ tmp238, ye, yy
 964              	.LVL69:
 182:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 965              		.loc 1 182 21 discriminator 3 view .LVU252
 966 0430 20309DE5 		ldr	r3, [sp, #32]	@ painted, %sfp
 967              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 968              		.loc 1 160 32 view .LVU253
 969 0434 012082E2 		add	r2, r2, #1	@ _53, _53,
 970 0438 0B3083E0 		add	r3, r3, fp	@ painted, painted, tmp238
 971              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 972              		.loc 1 160 13 view .LVU254
 973 043c 010052E3 		cmp	r2, #1	@ _53,
 974 0440 2C909DE5 		ldr	r9, [sp, #44]	@ wave_word, %sfp
 975 0444 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 976              	.LVL70:
 977              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 978              		.loc 1 160 32 view .LVU255
 979 0448 34208DE5 		str	r2, [sp, #52]	@ _53, w
 980              	.LVL71:
 981              	@ armwave.c:160:             for(w = 0; w < 2; w++) {
 160:armwave.c     ****                 value = wave_word & 0xffff;
 982              		.loc 1 160 13 view .LVU256
 983 044c B1FFFFDA 		ble	.L32		@,
 984              	.LVL72:
 985              	.L45:
 160:armwave.c     ****                 value = wave_word & 0xffff;
 986              		.loc 1 160 13 view .LVU257
 987 0450 28B09DE5 		ldr	fp, [sp, #40]	@ n, %sfp
 988 0454 9EFFFFEA 		b	.L28		@
 989              	.LVL73:
 990              	.L34:
 991              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 992              		.loc 1 122 46 view .LVU258
 993 0458 0030A0E3 		mov	r3, #0	@ painted,
 994 045c 20308DE5 		str	r3, [sp, #32]	@ painted, %sfp
 995 0460 9FFFFFEA 		b	.L27		@
 996              	.L47:
 997              		.align	2
 998              	.L46:
 999 0464 00000000 		.word	g_armwave_state
 1000 0468 84000000 		.word	.LC4
 1001 046c 9C000000 		.word	.LC5
 1002 0470 FC000000 		.word	.LC6
 1003 0474 28010000 		.word	.LC8
 1004 0478 04010000 		.word	.LC7
 1005              		.cfi_endproc
 1006              	.LFE60:
 1008              		.global	__aeabi_idiv
 1009              		.align	2
 1010              		.global	armwave_generate
 1011              		.syntax unified
 1012              		.arm
 1013              		.fpu vfp
 1015              	armwave_generate:
 1016              	.LFB61:
 195:armwave.c     **** 
 196:armwave.c     **** /*
 197:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 198:armwave.c     ****  */
 199:armwave.c     **** void armwave_generate()
 200:armwave.c     **** {
 1017              		.loc 1 200 1 is_stmt 1 view -0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 0
 1020              		@ frame_needed = 0, uses_anonymous_args = 0
 201:armwave.c     ****     uint32_t yy;
 1021              		.loc 1 201 5 view .LVU260
 202:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 1022              		.loc 1 202 5 view .LVU261
 1023              	.LVL74:
 203:armwave.c     **** 
 204:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1024              		.loc 1 204 5 view .LVU262
 1025              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1026              		.loc 1 200 1 is_stmt 0 view .LVU263
 1027 047c F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 1028              		.cfi_def_cfa_offset 20
 1029              		.cfi_offset 4, -20
 1030              		.cfi_offset 5, -16
 1031              		.cfi_offset 6, -12
 1032              		.cfi_offset 7, -8
 1033              		.cfi_offset 14, -4
 1034              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1035              		.loc 1 204 5 view .LVU264
 1036 0480 0010A0E3 		mov	r1, #0	@,
 1037              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1038              		.loc 1 204 58 view .LVU265
 1039 0484 84509FE5 		ldr	r5, .L56	@ tmp154,
 1040              	@ armwave.c:200: {
 200:armwave.c     ****     uint32_t yy;
 1041              		.loc 1 200 1 view .LVU266
 1042 0488 0CD04DE2 		sub	sp, sp, #12	@,,
 1043              		.cfi_def_cfa_offset 32
 1044              	@ armwave.c:204:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1045              		.loc 1 204 5 view .LVU267
 1046 048c 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 1047 0490 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1048 0494 FEFFFFEB 		bl	memset		@
 1049              	.LVL75:
 205:armwave.c     **** 
 206:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1050              		.loc 1 206 5 is_stmt 1 view .LVU268
 1051              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1052              		.loc 1 206 68 is_stmt 0 view .LVU269
 1053 0498 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1054              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1055              		.loc 1 206 51 view .LVU270
 1056 049c 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1057 04a0 0610A0E1 		mov	r1, r6	@, _13
 1058 04a4 FEFFFFEB 		bl	__aeabi_idiv		@
 1059              	.LVL76:
 1060              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1061              		.loc 1 206 5 view .LVU271
 1062 04a8 000050E3 		cmp	r0, #0	@,
 1063 04ac 1500000A 		beq	.L48		@,
 1064              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 207:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 208:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1065              		.loc 1 208 9 view .LVU272
 1066 04b0 5C709FE5 		ldr	r7, .L56+4	@ tmp155,
 1067              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1068              		.loc 1 206 12 view .LVU273
 1069 04b4 0040A0E3 		mov	r4, #0	@ yy,
 1070              	.LVL77:
 1071              	.L50:
 1072              		.loc 1 208 9 is_stmt 1 discriminator 3 view .LVU274
 1073 04b8 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1074              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 209:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 210:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1075              		.loc 1 210 48 is_stmt 0 discriminator 3 view .LVU275
 1076 04bc 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1077              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1078              		.loc 1 208 9 discriminator 3 view .LVU276
 1079 04c0 0630A0E1 		mov	r3, r6	@, _13
 1080 04c4 0120A0E1 		mov	r2, r1	@, _5
 1081              	@ armwave.c:210:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1082              		.loc 1 210 48 discriminator 3 view .LVU277
 1083 04c8 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1084              	@ armwave.c:208:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 208:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1085              		.loc 1 208 9 discriminator 3 view .LVU278
 1086 04cc 0700A0E1 		mov	r0, r7	@, tmp155
 1087 04d0 0410A0E1 		mov	r1, r4	@, yy
 1088 04d4 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1089 04d8 00C08DE5 		str	ip, [sp]	@ tmp145,
 1090 04dc FEFFFFEB 		bl	printf		@
 1091              	.LVL78:
 211:armwave.c     **** 
 212:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1092              		.loc 1 212 9 is_stmt 1 discriminator 3 view .LVU279
 1093              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1094              		.loc 1 212 62 is_stmt 0 discriminator 3 view .LVU280
 1095 04e0 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1096              	@ armwave.c:212:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1097              		.loc 1 212 9 discriminator 3 view .LVU281
 1098 04e4 940100E0 		mul	r0, r4, r1	@, yy,
 1099 04e8 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1100              	.LVL79:
 213:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1101              		.loc 1 213 9 is_stmt 1 discriminator 3 view .LVU282
 214:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1102              		.loc 1 214 9 discriminator 3 view .LVU283
 1103              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1104              		.loc 1 206 68 is_stmt 0 discriminator 3 view .LVU284
 1105 04ec 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1106              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1107              		.loc 1 206 51 discriminator 3 view .LVU285
 1108 04f0 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1109 04f4 0610A0E1 		mov	r1, r6	@, _13
 1110 04f8 FEFFFFEB 		bl	__aeabi_idiv		@
 1111              	.LVL80:
 1112              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1113              		.loc 1 206 86 discriminator 3 view .LVU286
 1114 04fc 014084E2 		add	r4, r4, #1	@ yy, yy,
 1115              	.LVL81:
 1116              	@ armwave.c:206:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 206:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1117              		.loc 1 206 5 discriminator 3 view .LVU287
 1118 0500 040050E1 		cmp	r0, r4	@, yy
 1119 0504 EBFFFF8A 		bhi	.L50		@,
 1120              	.LVL82:
 1121              	.L48:
 1122              	@ armwave.c:223: }
 215:armwave.c     ****     }
 216:armwave.c     **** 
 217:armwave.c     ****     /*
 218:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 219:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 220:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 221:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 222:armwave.c     ****     */
 223:armwave.c     **** }
 1123              		.loc 1 223 1 view .LVU288
 1124 0508 0CD08DE2 		add	sp, sp, #12	@,,
 1125              		.cfi_def_cfa_offset 20
 1126              		@ sp needed	@
 1127 050c F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1128              	.L57:
 1129              		.align	2
 1130              	.L56:
 1131 0510 00000000 		.word	g_armwave_state
 1132 0514 44010000 		.word	.LC9
 1133              		.cfi_endproc
 1134              	.LFE61:
 1136              		.align	2
 1137              		.global	armwave_setup_render
 1138              		.syntax unified
 1139              		.arm
 1140              		.fpu vfp
 1142              	armwave_setup_render:
 1143              	.LVL83:
 1144              	.LFB62:
 224:armwave.c     **** 
 225:armwave.c     **** /*
 226:armwave.c     ****  * Setup the renderer with passed parameters.
 227:armwave.c     ****  */
 228:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 229:armwave.c     **** {
 1145              		.loc 1 229 1 is_stmt 1 view -0
 1146              		.cfi_startproc
 1147              		@ args = 12, pretend = 0, frame = 0
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 230:armwave.c     ****     uint32_t length, xx;
 1149              		.loc 1 230 5 view .LVU290
 231:armwave.c     ****     float points_per_pixel;
 1150              		.loc 1 231 5 view .LVU291
 232:armwave.c     **** 
 233:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1151              		.loc 1 233 5 view .LVU292
 1152              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1153              		.loc 1 229 1 is_stmt 0 view .LVU293
 1154 0518 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1155              		.cfi_def_cfa_offset 28
 1156              		.cfi_offset 4, -28
 1157              		.cfi_offset 5, -24
 1158              		.cfi_offset 6, -20
 1159              		.cfi_offset 7, -16
 1160              		.cfi_offset 8, -12
 1161              		.cfi_offset 9, -8
 1162              		.cfi_offset 14, -4
 1163 051c 14D04DE2 		sub	sp, sp, #20	@,,
 1164              		.cfi_def_cfa_offset 48
 1165              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1166              		.loc 1 229 1 view .LVU294
 1167 0520 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1168 0524 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1169 0528 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1170 052c 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1171              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1172              		.loc 1 233 5 view .LVU295
 1173 0530 00308DE5 		str	r3, [sp]	@ wave_stride,
 1174              	@ armwave.c:229: {
 229:armwave.c     ****     uint32_t length, xx;
 1175              		.loc 1 229 1 view .LVU296
 1176 0534 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1177 0538 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1178              	@ armwave.c:233:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1179              		.loc 1 233 5 view .LVU297
 1180 053c F460CDE1 		strd	r6, [sp, #4]	@,,
 1181 0540 0230A0E1 		mov	r3, r2	@, waves_max
 1182              	.LVL84:
 1183              		.loc 1 233 5 view .LVU298
 1184 0544 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1185 0548 0120A0E1 		mov	r2, r1	@, end_point
 1186              	.LVL85:
 1187              		.loc 1 233 5 view .LVU299
 1188 054c 0010A0E1 		mov	r1, r0	@, start_point
 1189              	.LVL86:
 1190              		.loc 1 233 5 view .LVU300
 1191 0550 8C019FE5 		ldr	r0, .L68+12	@,
 1192              	.LVL87:
 1193              		.loc 1 233 5 view .LVU301
 1194 0554 FEFFFFEB 		bl	printf		@
 1195              	.LVL88:
 234:armwave.c     **** 
 235:armwave.c     ****     // TODO these asserts should instead raise PyExc
 236:armwave.c     ****     assert(start_point < end_point);
 1196              		.loc 1 236 5 is_stmt 1 view .LVU302
 1197 0558 050054E1 		cmp	r4, r5	@ start_point, end_point
 1198 055c 5100002A 		bcs	.L66		@,
 237:armwave.c     **** 
 238:armwave.c     ****     /*
 239:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 240:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 241:armwave.c     ****     if(target_height == 256) {
 242:armwave.c     ****         g_armwave_state.row_shift = 8;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 244:armwave.c     ****     } else if(target_height == 512) {
 245:armwave.c     ****         g_armwave_state.row_shift = 9;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 247:armwave.c     ****     } else if(target_height == 1024) {
 248:armwave.c     ****         g_armwave_state.row_shift = 10;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 250:armwave.c     ****     } else if(target_height == 2048) {
 251:armwave.c     ****         g_armwave_state.row_shift = 11;
 252:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 253:armwave.c     ****     }
 254:armwave.c     ****     */
 255:armwave.c     **** 
 256:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 257:armwave.c     ****     g_armwave_state.xstride = target_height;
 1199              		.loc 1 257 5 view .LVU303
 1200              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 259:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 260:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 261:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 262:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 263:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 264:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 265:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 266:armwave.c     ****     g_armwave_state.target_width = target_width;
 267:armwave.c     ****     g_armwave_state.target_height = target_height;
 268:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1201              		.loc 1 268 45 is_stmt 0 view .LVU304
 1202 0560 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1203              	.LVL89:
 1204              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 270:armwave.c     ****     // Calculate compound scaler
 271:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 272:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1205              		.loc 1 272 48 view .LVU305
 1206 0564 5B5A9FED 		vldr.32	s10, .L68	@ tmp187,
 1207 0568 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1208              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1209              		.loc 1 258 49 view .LVU306
 1210 056c 5A7A9FED 		vldr.32	s14, .L68+4	@ tmp165,
 1211              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1212              		.loc 1 272 81 view .LVU307
 1213 0570 5A6A9FED 		vldr.32	s12, .L68+8	@ tmp191,
 1214              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1215              		.loc 1 265 90 view .LVU308
 1216 0574 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1217              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1218              		.loc 1 272 48 view .LVU309
 1219 0578 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1220              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1221              		.loc 1 258 49 view .LVU310
 1222 057c 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1223              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1224              		.loc 1 257 29 view .LVU311
 1225 0580 60419FE5 		ldr	r4, .L68+16	@ tmp222,
 1226              	.LVL90:
 1227              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1228              		.loc 1 263 42 view .LVU312
 1229 0584 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1230              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1231              		.loc 1 258 49 view .LVU313
 1232 0588 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1233              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1234              		.loc 1 265 95 view .LVU314
 1235 058c 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1236              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 273:armwave.c     **** 
 274:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1237              		.loc 1 274 5 view .LVU315
 1238 0590 0128A0E3 		mov	r2, #65536	@ tmp194,
 1239              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1240              		.loc 1 272 48 view .LVU316
 1241 0594 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1242              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1243              		.loc 1 274 5 view .LVU317
 1244 0598 04508DE5 		str	r5, [sp, #4]	@ _13,
 1245 059c 00608DE5 		str	r6, [sp]	@ target_width,
 1246              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1247              		.loc 1 265 95 view .LVU318
 1248 05a0 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1249              	@ armwave.c:257:     g_armwave_state.xstride = target_height;
 257:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1250              		.loc 1 257 29 view .LVU319
 1251 05a4 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1252              		.loc 1 258 5 is_stmt 1 view .LVU320
 1253              	@ armwave.c:260:     g_armwave_state.wave_stride = wave_stride;
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1254              		.loc 1 260 33 is_stmt 0 view .LVU321
 1255 05a8 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1256              	@ armwave.c:261:     g_armwave_state.waves_max = waves_max;
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1257              		.loc 1 261 31 view .LVU322
 1258 05ac 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1259              	@ armwave.c:262:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1260              		.loc 1 262 27 view .LVU323
 1261 05b0 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1262              	@ armwave.c:267:     g_armwave_state.target_height = target_height;
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1263              		.loc 1 267 35 view .LVU324
 1264 05b4 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1265              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1266              		.loc 1 274 5 view .LVU325
 1267 05b8 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1268              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1269              		.loc 1 264 37 view .LVU326
 1270 05bc 022CA0E3 		mov	r2, #512	@ tmp175,
 1271              	@ armwave.c:263:     g_armwave_state.size = target_height * target_width;
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1272              		.loc 1 263 26 view .LVU327
 1273 05c0 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1274              	@ armwave.c:264:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1275              		.loc 1 264 37 view .LVU328
 1276 05c4 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1277              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1278              		.loc 1 274 5 view .LVU329
 1279 05c8 0310A0E1 		mov	r1, r3	@, tmp180
 1280              	@ armwave.c:265:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1281              		.loc 1 265 34 view .LVU330
 1282 05cc 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1283              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1284              		.loc 1 258 49 view .LVU331
 1285 05d0 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1286              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1287              		.loc 1 272 40 view .LVU332
 1288 05d4 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1289              	@ armwave.c:268:     g_armwave_state.wave_length = end_point - start_point;
 268:armwave.c     **** 
 1290              		.loc 1 268 33 view .LVU333
 1291 05d8 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1292              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1293              		.loc 1 274 5 view .LVU334
 1294 05dc 08019FE5 		ldr	r0, .L68+20	@,
 1295              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1296              		.loc 1 272 40 view .LVU335
 1297 05e0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1298 05e4 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1299              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1300              		.loc 1 259 30 view .LVU336
 1301 05e8 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1302              	@ armwave.c:258:     g_armwave_state.vscale_frac = target_height / 255.0f;
 258:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1303              		.loc 1 258 33 view .LVU337
 1304 05ec 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1305              		.loc 1 259 5 is_stmt 1 view .LVU338
 1306              	@ armwave.c:272:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 272:armwave.c     **** 
 1307              		.loc 1 272 81 is_stmt 0 view .LVU339
 1308 05f0 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1309              	@ armwave.c:259:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 259:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1310              		.loc 1 259 30 view .LVU340
 1311 05f4 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 260:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1312              		.loc 1 260 5 is_stmt 1 view .LVU341
 261:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1313              		.loc 1 261 5 view .LVU342
 262:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1314              		.loc 1 262 5 view .LVU343
 263:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1315              		.loc 1 263 5 view .LVU344
 264:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1316              		.loc 1 264 5 view .LVU345
 265:armwave.c     ****     g_armwave_state.target_width = target_width;
 1317              		.loc 1 265 5 view .LVU346
 266:armwave.c     ****     g_armwave_state.target_height = target_height;
 1318              		.loc 1 266 5 view .LVU347
 267:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1319              		.loc 1 267 5 view .LVU348
 268:armwave.c     **** 
 1320              		.loc 1 268 5 view .LVU349
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1321              		.loc 1 271 5 view .LVU350
 1322              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1323              		.loc 1 271 42 is_stmt 0 view .LVU351
 1324 05f8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1325 05fc 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1326              	@ armwave.c:274:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1327              		.loc 1 274 5 view .LVU352
 1328 0600 903A17EE 		vmov	r3, s15	@ int	@, _20
 1329              	@ armwave.c:271:     g_armwave_state.cmp_x_bitdepth_scale = \
 271:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1330              		.loc 1 271 42 view .LVU353
 1331 0604 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1332              		.loc 1 274 5 is_stmt 1 view .LVU354
 1333 0608 0C20A0E1 		mov	r2, ip	@, tmp3
 1334 060c FEFFFFEB 		bl	printf		@
 1335              	.LVL91:
 275:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 276:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 277:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 278:armwave.c     **** 
 279:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 280:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 281:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 282:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1336              		.loc 1 282 5 view .LVU355
 1337              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 283:armwave.c     **** 
 284:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1338              		.loc 1 284 23 is_stmt 0 view .LVU356
 1339 0610 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1340              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1341              		.loc 1 282 34 view .LVU357
 1342 0614 4030A0E3 		mov	r3, #64	@ tmp196,
 1343              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1344              		.loc 1 284 7 view .LVU358
 1345 0618 000050E3 		cmp	r0, #0	@ _21,
 1346              	@ armwave.c:282:     g_armwave_state.slice_height = 64; // 64;  
 282:armwave.c     **** 
 1347              		.loc 1 282 34 view .LVU359
 1348 061c 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1349              		.loc 1 284 5 is_stmt 1 view .LVU360
 1350              	@ armwave.c:284:     if(g_armwave_state.ch1_buffer != NULL)
 1351              		.loc 1 284 7 is_stmt 0 view .LVU361
 1352 0620 0000000A 		beq	.L60		@,
 285:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1353              		.loc 1 285 9 is_stmt 1 view .LVU362
 1354 0624 FEFFFFEB 		bl	free		@
 1355              	.LVL92:
 1356              	.L60:
 286:armwave.c     **** 
 287:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1357              		.loc 1 287 5 view .LVU363
 1358              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1359              		.loc 1 287 56 is_stmt 0 view .LVU364
 1360 0628 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1361              	.LVL93:
 1362              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1363              		.loc 1 287 34 view .LVU365
 1364 062c 0110A0E3 		mov	r1, #1	@,
 1365 0630 0800A0E1 		mov	r0, r8	@, _22
 1366 0634 FEFFFFEB 		bl	calloc		@
 1367              	.LVL94:
 1368              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 288:armwave.c     **** 
 289:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1369              		.loc 1 289 7 view .LVU366
 1370 0638 000050E3 		cmp	r0, #0	@ tmp199,
 1371              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1372              		.loc 1 287 34 view .LVU367
 1373 063c 0070A0E1 		mov	r7, r0	@ tmp199,
 1374              	@ armwave.c:287:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 287:armwave.c     **** 
 1375              		.loc 1 287 32 view .LVU368
 1376 0640 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1377              		.loc 1 289 5 is_stmt 1 view .LVU369
 1378              	@ armwave.c:289:     if(g_armwave_state.ch1_buffer == NULL) {
 1379              		.loc 1 289 7 is_stmt 0 view .LVU370
 1380 0644 1C00000A 		beq	.L67		@,
 290:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 291:armwave.c     ****         exit(-1);
 292:armwave.c     ****     }
 293:armwave.c     **** 
 294:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 295:armwave.c     ****     length = end_point - start_point;
 1381              		.loc 1 295 5 is_stmt 1 view .LVU371
 1382              	.LVL95:
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1383              		.loc 1 296 5 view .LVU372
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1384              		.loc 1 297 5 view .LVU373
 1385              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1386              		.loc 1 296 31 is_stmt 0 view .LVU374
 1387 0648 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1388              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1389              		.loc 1 296 34 view .LVU375
 1390 064c 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1391              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1392              		.loc 1 297 60 view .LVU376
 1393 0650 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1394              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 298:armwave.c     **** 
 299:armwave.c     ****     /*
 300:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 301:armwave.c     **** 
 302:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 303:armwave.c     **** 
 304:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 305:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306:armwave.c     **** 
 307:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 308:armwave.c     ****     }
 309:armwave.c     ****     */
 310:armwave.c     **** 
 311:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1395              		.loc 1 311 34 view .LVU377
 1396 0654 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1397              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1398              		.loc 1 296 31 view .LVU378
 1399 0658 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1400              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1401              		.loc 1 296 34 view .LVU379
 1402 065c 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1403              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1404              		.loc 1 297 60 view .LVU380
 1405 0660 E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1406              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1407              		.loc 1 311 34 view .LVU381
 1408 0664 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1409              	@ armwave.c:296:     points_per_pixel = length / ((float)(target_width));
 296:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1410              		.loc 1 296 22 view .LVU382
 1411 0668 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1412              	.LVL96:
 1413              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1414              		.loc 1 297 60 view .LVU383
 1415 066c 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1416              	@ armwave.c:297:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 297:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1417              		.loc 1 297 41 view .LVU384
 1418 0670 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1419 0674 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1420              		.loc 1 311 5 is_stmt 1 view .LVU385
 1421              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1422              		.loc 1 311 34 is_stmt 0 view .LVU386
 1423 0678 FEFFFFEB 		bl	malloc		@
 1424              	.LVL97:
 1425              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 312:armwave.c     **** 
 313:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1426              		.loc 1 313 5 view .LVU387
 1427 067c 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1428 0680 0710A0E1 		mov	r1, r7	@, tmp199
 1429 0684 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1430 0688 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1431              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1432              		.loc 1 311 34 view .LVU388
 1433 068c 00C0A0E1 		mov	ip, r0	@ tmp215,
 1434              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1435              		.loc 1 313 5 view .LVU389
 1436 0690 0030A0E1 		mov	r3, r0	@, tmp215
 1437              	@ armwave.c:311:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 311:armwave.c     **** 
 1438              		.loc 1 311 32 view .LVU390
 1439 0694 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1440              		.loc 1 313 5 is_stmt 1 view .LVU391
 1441 0698 50009FE5 		ldr	r0, .L68+24	@,
 1442              	@ armwave.c:320: }
 314:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 315:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 316:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 317:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 318:armwave.c     **** 
 319:armwave.c     ****      //malloc_stats();
 320:armwave.c     **** }
 1443              		.loc 1 320 1 is_stmt 0 view .LVU392
 1444 069c 14D08DE2 		add	sp, sp, #20	@,,
 1445              		.cfi_remember_state
 1446              		.cfi_def_cfa_offset 28
 1447              		@ sp needed	@
 1448 06a0 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1449              		.cfi_restore 14
 1450              		.cfi_restore 9
 1451              		.cfi_restore 8
 1452              		.cfi_restore 7
 1453              		.cfi_restore 6
 1454              		.cfi_restore 5
 1455              		.cfi_restore 4
 1456              		.cfi_def_cfa_offset 0
 1457              	.LVL98:
 1458              	@ armwave.c:313:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 313:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1459              		.loc 1 313 5 view .LVU393
 1460 06a4 FEFFFFEA 		b	printf		@
 1461              	.LVL99:
 1462              	.L66:
 1463              		.cfi_restore_state
 236:armwave.c     **** 
 1464              		.loc 1 236 5 is_stmt 1 discriminator 1 view .LVU394
 1465 06a8 44309FE5 		ldr	r3, .L68+28	@,
 1466 06ac EC20A0E3 		mov	r2, #236	@,
 1467 06b0 40109FE5 		ldr	r1, .L68+32	@,
 1468 06b4 40009FE5 		ldr	r0, .L68+36	@,
 1469 06b8 FEFFFFEB 		bl	__assert_fail		@
 1470              	.LVL100:
 1471              	.L67:
 290:armwave.c     ****         exit(-1);
 1472              		.loc 1 290 9 view .LVU395
 1473 06bc 3C309FE5 		ldr	r3, .L68+40	@ tmp202,
 1474 06c0 0820A0E1 		mov	r2, r8	@, _22
 1475 06c4 38109FE5 		ldr	r1, .L68+44	@,
 1476 06c8 000093E5 		ldr	r0, [r3]	@, stderr
 1477 06cc FEFFFFEB 		bl	fprintf		@
 1478              	.LVL101:
 291:armwave.c     ****     }
 1479              		.loc 1 291 9 view .LVU396
 1480 06d0 0000E0E3 		mvn	r0, #0	@,
 1481 06d4 FEFFFFEB 		bl	exit		@
 1482              	.LVL102:
 1483              	.L69:
 1484              		.align	2
 1485              	.L68:
 1486 06d8 0000803F 		.word	1065353216
 1487 06dc 00007F43 		.word	1132396544
 1488 06e0 00008047 		.word	1199570944
 1489 06e4 78010000 		.word	.LC10
 1490 06e8 00000000 		.word	g_armwave_state
 1491 06ec C8010000 		.word	.LC13
 1492 06f0 6C020000 		.word	.LC15
 1493 06f4 00000000 		.word	.LANCHOR0
 1494 06f8 A4010000 		.word	.LC11
 1495 06fc B0010000 		.word	.LC12
 1496 0700 00000000 		.word	stderr
 1497 0704 28020000 		.word	.LC14
 1498              		.cfi_endproc
 1499              	.LFE62:
 1501              		.align	2
 1502              		.global	armwave_set_wave_pointer
 1503              		.syntax unified
 1504              		.arm
 1505              		.fpu vfp
 1507              	armwave_set_wave_pointer:
 1508              	.LVL103:
 1509              	.LFB63:
 321:armwave.c     **** 
 322:armwave.c     **** /*
 323:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 324:armwave.c     ****  * in the future.
 325:armwave.c     ****  */
 326:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 327:armwave.c     **** {
 1510              		.loc 1 327 1 view -0
 1511              		.cfi_startproc
 1512              		@ args = 0, pretend = 0, frame = 0
 1513              		@ frame_needed = 0, uses_anonymous_args = 0
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1514              		.loc 1 328 5 view .LVU398
 1515 0708 000050E3 		cmp	r0, #0	@ wave_buffer
 1516              		.loc 1 328 5 is_stmt 0 view .LVU399
 1517 070c 0200000A 		beq	.L75		@,
 329:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1518              		.loc 1 329 5 is_stmt 1 view .LVU400
 1519              	@ armwave.c:329:     g_armwave_state.wave_buffer = wave_buffer;
 1520              		.loc 1 329 33 is_stmt 0 view .LVU401
 1521 0710 1C309FE5 		ldr	r3, .L76	@ tmp115,
 1522 0714 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1523 0718 1EFF2FE1 		bx	lr	@
 1524              	.L75:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1525              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU402
 1526              	@ armwave.c:327: {
 327:armwave.c     ****     assert(wave_buffer != NULL);
 1527              		.loc 1 327 1 is_stmt 0 discriminator 1 view .LVU403
 1528 071c 10402DE9 		push	{r4, lr}	@
 1529              		.cfi_def_cfa_offset 8
 1530              		.cfi_offset 4, -8
 1531              		.cfi_offset 14, -4
 1532              	@ armwave.c:328:     assert(wave_buffer != NULL);
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1533              		.loc 1 328 5 discriminator 1 view .LVU404
 1534 0720 522FA0E3 		mov	r2, #328	@,
 1535 0724 0C309FE5 		ldr	r3, .L76+4	@,
 1536 0728 0C109FE5 		ldr	r1, .L76+8	@,
 1537 072c 0C009FE5 		ldr	r0, .L76+12	@,
 1538              	.LVL104:
 328:armwave.c     ****     assert(wave_buffer != NULL);
 1539              		.loc 1 328 5 discriminator 1 view .LVU405
 1540 0730 FEFFFFEB 		bl	__assert_fail		@
 1541              	.LVL105:
 1542              	.L77:
 1543              		.align	2
 1544              	.L76:
 1545 0734 00000000 		.word	g_armwave_state
 1546 0738 18000000 		.word	.LANCHOR0+24
 1547 073c A4010000 		.word	.LC11
 1548 0740 90020000 		.word	.LC16
 1549              		.cfi_endproc
 1550              	.LFE63:
 1552              		.align	2
 1553              		.global	armwave_set_wave_pointer_as_testbuf
 1554              		.syntax unified
 1555              		.arm
 1556              		.fpu vfp
 1558              	armwave_set_wave_pointer_as_testbuf:
 1559              	.LVL106:
 1560              	.LFB64:
 330:armwave.c     **** }
 331:armwave.c     **** 
 332:armwave.c     **** /*
 333:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 334:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 335:armwave.c     ****  */
 336:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 337:armwave.c     **** {
 1561              		.loc 1 337 1 is_stmt 1 view -0
 1562              		.cfi_startproc
 1563              		@ args = 0, pretend = 0, frame = 0
 1564              		@ frame_needed = 0, uses_anonymous_args = 0
 1565              		@ link register save eliminated.
 338:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1566              		.loc 1 338 5 view .LVU407
 1567              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1568              		.loc 1 338 29 is_stmt 0 view .LVU408
 1569 0744 24309FE5 		ldr	r3, .L81	@ tmp117,
 1570              	@ armwave.c:338:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1571              		.loc 1 338 7 view .LVU409
 1572 0748 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1573 074c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1574 0750 0400003A 		bcc	.L80		@,
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 340:armwave.c     ****         return;
 341:armwave.c     ****     }
 342:armwave.c     **** 
 343:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1575              		.loc 1 343 5 is_stmt 1 view .LVU410
 1576              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1577              		.loc 1 343 111 is_stmt 0 view .LVU411
 1578 0754 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1579              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1580              		.loc 1 343 68 view .LVU412
 1581 0758 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1582 075c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1583              	.LVL107:
 1584              	@ armwave.c:343:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1585              		.loc 1 343 33 view .LVU413
 1586 0760 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1587              	@ armwave.c:344: }
 344:armwave.c     **** }
 1588              		.loc 1 344 1 view .LVU414
 1589 0764 1EFF2FE1 		bx	lr	@
 1590              	.LVL108:
 1591              	.L80:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1592              		.loc 1 339 9 is_stmt 1 view .LVU415
 1593 0768 04009FE5 		ldr	r0, .L81+4	@,
 1594              	.LVL109:
 339:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1595              		.loc 1 339 9 is_stmt 0 view .LVU416
 1596 076c FEFFFFEA 		b	puts		@
 1597              	.LVL110:
 1598              	.L82:
 1599              		.align	2
 1600              	.L81:
 1601 0770 00000000 		.word	g_armwave_state
 1602 0774 A4020000 		.word	.LC17
 1603              		.cfi_endproc
 1604              	.LFE64:
 1606              		.align	2
 1607              		.global	armwave_set_wave_pointer_u32
 1608              		.syntax unified
 1609              		.arm
 1610              		.fpu vfp
 1612              	armwave_set_wave_pointer_u32:
 1613              	.LVL111:
 1614              	.LFB65:
 345:armwave.c     **** 
 346:armwave.c     **** /*
 347:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 348:armwave.c     ****  * disjointed buffers in the future.
 349:armwave.c     ****  */
 350:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 351:armwave.c     **** {
 1615              		.loc 1 351 1 is_stmt 1 view -0
 1616              		.cfi_startproc
 1617              		@ args = 0, pretend = 0, frame = 0
 1618              		@ frame_needed = 0, uses_anonymous_args = 0
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1619              		.loc 1 352 5 view .LVU418
 1620 0778 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1621              		.loc 1 352 5 is_stmt 0 view .LVU419
 1622 077c 0200000A 		beq	.L88		@,
 353:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1623              		.loc 1 353 5 is_stmt 1 view .LVU420
 1624              	@ armwave.c:353:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1625              		.loc 1 353 33 is_stmt 0 view .LVU421
 1626 0780 1C309FE5 		ldr	r3, .L89	@ tmp116,
 1627 0784 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1628 0788 1EFF2FE1 		bx	lr	@
 1629              	.L88:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1630              		.loc 1 352 5 is_stmt 1 discriminator 1 view .LVU422
 1631              	@ armwave.c:351: {
 351:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1632              		.loc 1 351 1 is_stmt 0 discriminator 1 view .LVU423
 1633 078c 10402DE9 		push	{r4, lr}	@
 1634              		.cfi_def_cfa_offset 8
 1635              		.cfi_offset 4, -8
 1636              		.cfi_offset 14, -4
 1637              	@ armwave.c:352:     assert(wave_buffer_ptr != 0);
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1638              		.loc 1 352 5 discriminator 1 view .LVU424
 1639 0790 162EA0E3 		mov	r2, #352	@,
 1640 0794 0C309FE5 		ldr	r3, .L89+4	@,
 1641 0798 0C109FE5 		ldr	r1, .L89+8	@,
 1642 079c 0C009FE5 		ldr	r0, .L89+12	@,
 1643              	.LVL112:
 352:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1644              		.loc 1 352 5 discriminator 1 view .LVU425
 1645 07a0 FEFFFFEB 		bl	__assert_fail		@
 1646              	.LVL113:
 1647              	.L90:
 1648              		.align	2
 1649              	.L89:
 1650 07a4 00000000 		.word	g_armwave_state
 1651 07a8 34000000 		.word	.LANCHOR0+52
 1652 07ac A4010000 		.word	.LC11
 1653 07b0 E0020000 		.word	.LC18
 1654              		.cfi_endproc
 1655              	.LFE65:
 1657              		.align	2
 1658              		.global	armwave_clear_buffer
 1659              		.syntax unified
 1660              		.arm
 1661              		.fpu vfp
 1663              	armwave_clear_buffer:
 1664              	.LVL114:
 1665              	.LFB66:
 354:armwave.c     **** }
 355:armwave.c     **** 
 356:armwave.c     **** /*
 357:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 358:armwave.c     ****  */
 359:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 360:armwave.c     **** {
 1666              		.loc 1 360 1 is_stmt 1 view -0
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 0
 1669              		@ frame_needed = 0, uses_anonymous_args = 0
 1670              		@ link register save eliminated.
 361:armwave.c     ****     // Flags ignored, only one buffer cleared
 362:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1671              		.loc 1 362 5 view .LVU427
 1672              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1673              		.loc 1 362 58 is_stmt 0 view .LVU428
 1674 07b4 0C309FE5 		ldr	r3, .L92	@ tmp114,
 1675              	@ armwave.c:362:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1676              		.loc 1 362 5 view .LVU429
 1677 07b8 0010A0E3 		mov	r1, #0	@,
 1678 07bc 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1679 07c0 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1680              	.LVL115:
 1681              		.loc 1 362 5 view .LVU430
 1682 07c4 FEFFFFEA 		b	memset		@
 1683              	.LVL116:
 1684              	.L93:
 1685              		.align	2
 1686              	.L92:
 1687 07c8 00000000 		.word	g_armwave_state
 1688              		.cfi_endproc
 1689              	.LFE66:
 1691              		.align	2
 1692              		.global	armwave_set_channel_colour
 1693              		.syntax unified
 1694              		.arm
 1695              		.fpu vfp
 1697              	armwave_set_channel_colour:
 1698              	.LVL117:
 1699              	.LFB67:
 363:armwave.c     **** }
 364:armwave.c     **** 
 365:armwave.c     **** /*
 366:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 367:armwave.c     ****  */
 368:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 369:armwave.c     **** {
 1700              		.loc 1 369 1 is_stmt 1 view -0
 1701              		.cfi_startproc
 1702              		@ args = 0, pretend = 0, frame = 0
 1703              		@ frame_needed = 0, uses_anonymous_args = 0
 1704              		@ link register save eliminated.
 370:armwave.c     ****     // Only 1ch supported for now
 371:armwave.c     ****     switch(ch) {
 1705              		.loc 1 371 5 view .LVU432
 1706 07cc 010050E3 		cmp	r0, #1	@ ch,
 372:armwave.c     ****         case 1:
 373:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1707              		.loc 1 373 13 view .LVU433
 1708              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 1709              		.loc 1 373 41 is_stmt 0 view .LVU434
 1710 07d0 0C009F05 		ldreq	r0, .L96	@ tmp117,
 1711              	.LVL118:
 1712              		.loc 1 373 41 view .LVU435
 1713 07d4 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 374:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1714              		.loc 1 374 13 is_stmt 1 view .LVU436
 1715              	@ armwave.c:374:             g_armwave_state.ch1_color.g = g;
 1716              		.loc 1 374 41 is_stmt 0 view .LVU437
 1717 07d8 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 375:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1718              		.loc 1 375 13 is_stmt 1 view .LVU438
 1719              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 1720              		.loc 1 375 41 is_stmt 0 view .LVU439
 1721 07dc B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 376:armwave.c     ****             break;
 1722              		.loc 1 376 13 is_stmt 1 view .LVU440
 1723              	@ armwave.c:378: }
 377:armwave.c     ****     }
 378:armwave.c     **** }
 1724              		.loc 1 378 1 is_stmt 0 view .LVU441
 1725 07e0 1EFF2FE1 		bx	lr	@
 1726              	.L97:
 1727              		.align	2
 1728              	.L96:
 1729 07e4 00000000 		.word	g_armwave_state
 1730              		.cfi_endproc
 1731              	.LFE67:
 1733              		.align	2
 1734              		.global	armwave_dump_ppm_debug
 1735              		.syntax unified
 1736              		.arm
 1737              		.fpu vfp
 1739              	armwave_dump_ppm_debug:
 1740              	.LVL119:
 1741              	.LFB68:
 379:armwave.c     **** 
 380:armwave.c     **** /*
 381:armwave.c     ****  * Dump a ppm of a buffer to a file.
 382:armwave.c     ****  */
 383:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 384:armwave.c     **** {
 1742              		.loc 1 384 1 is_stmt 1 view -0
 1743              		.cfi_startproc
 1744              		@ args = 0, pretend = 0, frame = 0
 1745              		@ frame_needed = 0, uses_anonymous_args = 0
 385:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1746              		.loc 1 385 5 view .LVU443
 1747              	@ armwave.c:384: {
 384:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1748              		.loc 1 384 1 is_stmt 0 view .LVU444
 1749 07e8 0130A0E1 		mov	r3, r1	@ fn, fn
 1750 07ec F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1751              		.cfi_def_cfa_offset 28
 1752              		.cfi_offset 4, -28
 1753              		.cfi_offset 5, -24
 1754              		.cfi_offset 6, -20
 1755              		.cfi_offset 7, -16
 1756              		.cfi_offset 8, -12
 1757              		.cfi_offset 9, -8
 1758              		.cfi_offset 14, -4
 1759 07f0 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1760 07f4 0CD04DE2 		sub	sp, sp, #12	@,,
 1761              		.cfi_def_cfa_offset 40
 1762              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 1763              		.loc 1 385 16 view .LVU445
 1764 07f8 C4109FE5 		ldr	r1, .L106	@,
 1765              	.LVL120:
 1766              		.loc 1 385 16 view .LVU446
 1767 07fc 0300A0E1 		mov	r0, r3	@, fn
 1768              	.LVL121:
 1769              		.loc 1 385 16 view .LVU447
 1770 0800 FEFFFFEB 		bl	fopen64		@
 1771              	.LVL122:
 1772              	@ armwave.c:392:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 386:armwave.c     ****     uint32_t data;
 387:armwave.c     ****     int xx, yy;
 388:armwave.c     **** 
 389:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 390:armwave.c     **** 
 391:armwave.c     ****     fputs("P3\n", fp);
 392:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1773              		.loc 1 392 5 view .LVU448
 1774 0804 BC609FE5 		ldr	r6, .L106+4	@ tmp150,
 1775              	@ armwave.c:391:     fputs("P3\n", fp);
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1776              		.loc 1 391 5 view .LVU449
 1777 0808 0320A0E3 		mov	r2, #3	@,
 1778 080c 0110A0E3 		mov	r1, #1	@,
 1779              	@ armwave.c:385:     FILE *fp = fopen(fn, "wb");
 385:armwave.c     ****     uint32_t data;
 1780              		.loc 1 385 16 view .LVU450
 1781 0810 0070A0E1 		mov	r7, r0	@ fp,
 1782              	.LVL123:
 386:armwave.c     ****     uint32_t data;
 1783              		.loc 1 386 5 is_stmt 1 view .LVU451
 387:armwave.c     **** 
 1784              		.loc 1 387 5 view .LVU452
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1785              		.loc 1 391 5 view .LVU453
 1786 0814 0030A0E1 		mov	r3, r0	@, fp
 1787 0818 AC009FE5 		ldr	r0, .L106+8	@,
 1788              	.LVL124:
 391:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1789              		.loc 1 391 5 is_stmt 0 view .LVU454
 1790 081c FEFFFFEB 		bl	fwrite		@
 1791              	.LVL125:
 1792              		.loc 1 392 5 is_stmt 1 view .LVU455
 1793 0820 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1794 0824 A4109FE5 		ldr	r1, .L106+12	@,
 1795 0828 0700A0E1 		mov	r0, r7	@, fp
 1796 082c FEFFFFEB 		bl	fprintf		@
 1797              	.LVL126:
 393:armwave.c     ****     fputs("255\n", fp);
 1798              		.loc 1 393 5 view .LVU456
 1799 0830 0420A0E3 		mov	r2, #4	@,
 1800 0834 0730A0E1 		mov	r3, r7	@, fp
 1801 0838 0110A0E3 		mov	r1, #1	@,
 1802 083c 90009FE5 		ldr	r0, .L106+16	@,
 1803 0840 FEFFFFEB 		bl	fwrite		@
 1804              	.LVL127:
 394:armwave.c     **** 
 395:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1805              		.loc 1 395 5 view .LVU457
 1806              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1807              		.loc 1 395 37 is_stmt 0 view .LVU458
 1808 0844 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1809              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1810              		.loc 1 395 5 view .LVU459
 1811 0848 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1812 084c 180000DA 		ble	.L99		@,
 1813 0850 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1814              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 397:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 398:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 399:armwave.c     **** 
 400:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1815              		.loc 1 400 13 view .LVU460
 1816 0854 7C909FE5 		ldr	r9, .L106+20	@ tmp152,
 1817              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1818              		.loc 1 395 12 view .LVU461
 1819 0858 0050A0E3 		mov	r5, #0	@ yy,
 1820              	.LVL128:
 1821              	.L100:
 1822              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1823              		.loc 1 396 9 view .LVU462
 1824 085c 000053E3 		cmp	r3, #0	@ _13,
 1825              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1826              		.loc 1 396 16 view .LVU463
 1827 0860 0040A0C3 		movgt	r4, #0	@ xx,
 1828              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1829              		.loc 1 396 9 view .LVU464
 1830 0864 0F0000DA 		ble	.L102		@,
 1831              	.LVL129:
 1832              	.L101:
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1833              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU465
 1834              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1835              		.loc 1 397 29 is_stmt 0 discriminator 3 view .LVU466
 1836 0868 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1837              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1838              		.loc 1 400 13 discriminator 3 view .LVU467
 1839 086c 0910A0E1 		mov	r1, r9	@, tmp152
 1840 0870 0700A0E1 		mov	r0, r7	@, fp
 1841              	@ armwave.c:397:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 397:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1842              		.loc 1 397 18 discriminator 3 view .LVU468
 1843 0874 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1844              	.LVL130:
 1845              		.loc 1 400 13 is_stmt 1 discriminator 3 view .LVU469
 1846              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1847              		.loc 1 396 58 is_stmt 0 discriminator 3 view .LVU470
 1848 0878 014084E2 		add	r4, r4, #1	@ xx, xx,
 1849              	.LVL131:
 1850              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1851              		.loc 1 400 81 discriminator 3 view .LVU471
 1852 087c 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1853              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1854              		.loc 1 400 61 discriminator 3 view .LVU472
 1855 0880 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1856              	@ armwave.c:400:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1857              		.loc 1 400 13 discriminator 3 view .LVU473
 1858 0884 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1859 0888 7330EFE6 		uxtb	r3, r3	@, tmp142
 1860 088c 00C08DE5 		str	ip, [sp]	@ tmp147,
 1861 0890 7220EFE6 		uxtb	r2, r2	@, data
 1862              	.LVL132:
 1863              		.loc 1 400 13 discriminator 3 view .LVU474
 1864 0894 FEFFFFEB 		bl	fprintf		@
 1865              	.LVL133:
 1866              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1867              		.loc 1 396 41 discriminator 3 view .LVU475
 1868 0898 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1869              	@ armwave.c:396:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 396:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1870              		.loc 1 396 9 discriminator 3 view .LVU476
 1871 089c 040053E1 		cmp	r3, r4	@ _13, xx
 1872 08a0 F0FFFFCA 		bgt	.L101		@,
 1873 08a4 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1874              	.LVL134:
 1875              	.L102:
 1876              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1877              		.loc 1 395 55 discriminator 2 view .LVU477
 1878 08a8 015085E2 		add	r5, r5, #1	@ yy, yy,
 1879              	.LVL135:
 1880              	@ armwave.c:395:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 395:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1881              		.loc 1 395 5 discriminator 2 view .LVU478
 1882 08ac 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1883 08b0 E9FFFFBA 		blt	.L100		@,
 1884              	.LVL136:
 1885              	.L99:
 401:armwave.c     ****         }
 402:armwave.c     ****     }
 403:armwave.c     **** 
 404:armwave.c     ****     fclose(fp);
 1886              		.loc 1 404 5 is_stmt 1 view .LVU479
 1887 08b4 0700A0E1 		mov	r0, r7	@, fp
 1888              	@ armwave.c:405: }
 405:armwave.c     **** }
 1889              		.loc 1 405 1 is_stmt 0 view .LVU480
 1890 08b8 0CD08DE2 		add	sp, sp, #12	@,,
 1891              		.cfi_def_cfa_offset 28
 1892              		@ sp needed	@
 1893 08bc F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1894              		.cfi_restore 14
 1895              		.cfi_restore 9
 1896              		.cfi_restore 8
 1897              		.cfi_restore 7
 1898              		.cfi_restore 6
 1899              		.cfi_restore 5
 1900              		.cfi_restore 4
 1901              		.cfi_def_cfa_offset 0
 1902              	.LVL137:
 1903              	@ armwave.c:404:     fclose(fp);
 404:armwave.c     **** }
 1904              		.loc 1 404 5 view .LVU481
 1905 08c0 FEFFFFEA 		b	fclose		@
 1906              	.LVL138:
 1907              	.L107:
 404:armwave.c     **** }
 1908              		.loc 1 404 5 view .LVU482
 1909              		.align	2
 1910              	.L106:
 1911 08c4 F8020000 		.word	.LC19
 1912 08c8 00000000 		.word	g_armwave_state
 1913 08cc FC020000 		.word	.LC20
 1914 08d0 00030000 		.word	.LC21
 1915 08d4 08030000 		.word	.LC22
 1916 08d8 10030000 		.word	.LC23
 1917              		.cfi_endproc
 1918              	.LFE68:
 1920              		.align	2
 1921              		.global	armwave_test_init
 1922              		.syntax unified
 1923              		.arm
 1924              		.fpu vfp
 1926              	armwave_test_init:
 1927              	.LVL139:
 1928              	.LFB69:
 406:armwave.c     **** 
 407:armwave.c     **** /*
 408:armwave.c     ****  * Initialise some test functionry.
 409:armwave.c     ****  */
 410:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 411:armwave.c     **** {
 1929              		.loc 1 411 1 is_stmt 1 view -0
 1930              		.cfi_startproc
 1931              		@ args = 0, pretend = 0, frame = 0
 1932              		@ frame_needed = 0, uses_anonymous_args = 0
 412:armwave.c     ****     test_create_gamma();
 1933              		.loc 1 412 5 view .LVU484
 1934              	.LBB12:
 1935              	.LBI12:
  34:armwave.c     **** {
 1936              		.loc 1 34 6 view .LVU485
  34:armwave.c     **** {
 1937              		.loc 1 34 6 is_stmt 0 view .LVU486
 1938              	.LBE12:
 1939              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1940              		.loc 1 411 1 view .LVU487
 1941 08dc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1942              		.cfi_def_cfa_offset 32
 1943              		.cfi_offset 4, -32
 1944              		.cfi_offset 5, -28
 1945              		.cfi_offset 6, -24
 1946              		.cfi_offset 7, -20
 1947              		.cfi_offset 8, -16
 1948              		.cfi_offset 9, -12
 1949              		.cfi_offset 10, -8
 1950              		.cfi_offset 14, -4
 1951 08e0 068B2DED 		vpush.64	{d8, d9, d10}	@
 1952              		.cfi_def_cfa_offset 56
 1953              		.cfi_offset 80, -56
 1954              		.cfi_offset 81, -52
 1955              		.cfi_offset 82, -48
 1956              		.cfi_offset 83, -44
 1957              		.cfi_offset 84, -40
 1958              		.cfi_offset 85, -36
 1959 08e4 C0409FE5 		ldr	r4, .L112+20	@ ivtmp.82,
 1960              	.LBB15:
 1961              	.LBB13:
 1962              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1963              		.loc 1 40 32 view .LVU488
 1964 08e8 2EAA9FED 		vldr.32	s20, .L112+16	@ tmp136,
 1965              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1966              		.loc 1 40 26 view .LVU489
 1967 08ec 299B9FED 		vldr.64	d9, .L112	@ tmp151,
 1968              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1969              		.loc 1 40 49 view .LVU490
 1970 08f0 2A8B9FED 		vldr.64	d8, .L112+8	@ tmp139,
 1971 08f4 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 1972              	.LBE13:
 1973              	.LBE15:
 1974              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1975              		.loc 1 411 1 view .LVU491
 1976 08f8 10D04DE2 		sub	sp, sp, #16	@,,
 1977              		.cfi_def_cfa_offset 72
 1978              	@ armwave.c:411: {
 411:armwave.c     ****     test_create_gamma();
 1979              		.loc 1 411 1 view .LVU492
 1980 08fc 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1981 0900 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1982 0904 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1983 0908 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1984 090c 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 1985 0910 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1986              	.LVL140:
 1987              	.L109:
 1988              	.LBB16:
 1989              	.LBB14:
  40:armwave.c     ****     }
 1990              		.loc 1 40 9 is_stmt 1 view .LVU493
 1991              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1992              		.loc 1 40 32 is_stmt 0 view .LVU494
 1993 0914 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 1994              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1995              		.loc 1 40 26 view .LVU495
 1996 0918 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1997              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1998              		.loc 1 40 32 view .LVU496
 1999 091c 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2000 0920 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2001 0924 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2002              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2003              		.loc 1 40 26 view .LVU497
 2004 0928 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2005 092c FEFFFFEB 		bl	pow		@
 2006              	.LVL141:
 2007              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2008              		.loc 1 40 49 view .LVU498
 2009 0930 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2010              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2011              		.loc 1 40 24 view .LVU499
 2012 0934 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2013 0938 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2014 093c 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2015              	.LVL142:
 2016              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2017              		.loc 1 39 5 view .LVU500
 2018 0940 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 2019 0944 F2FFFF1A 		bne	.L109		@,
 2020              	.LVL143:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2021              		.loc 1 39 5 view .LVU501
 2022              	.LBE14:
 2023              	.LBE16:
 413:armwave.c     **** 
 414:armwave.c     ****     // make ch1 yellowish by default
 415:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2024              		.loc 1 415 5 is_stmt 1 view .LVU502
 2025              	.LBB17:
 2026              	.LBI17:
 368:armwave.c     **** {
 2027              		.loc 1 368 6 view .LVU503
 2028              	.LBB18:
 371:armwave.c     ****         case 1:
 2029              		.loc 1 371 5 view .LVU504
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2030              		.loc 1 373 13 view .LVU505
 374:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2031              		.loc 1 374 13 view .LVU506
 2032              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2033              		.loc 1 373 41 is_stmt 0 view .LVU507
 2034 0948 60C09FE5 		ldr	ip, .L112+24	@ tmp142,
 2035 094c 60409FE5 		ldr	r4, .L112+28	@ tmp143,
 2036              	.LBE18:
 2037              	.LBE17:
 2038              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 416:armwave.c     **** 
 417:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2039              		.loc 1 417 5 view .LVU508
 2040 0950 0000A0E3 		mov	r0, #0	@ tmp147,
 2041              	.LBB22:
 2042              	.LBB19:
 2043              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2044              		.loc 1 375 41 view .LVU509
 2045 0954 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2046              	.LBE19:
 2047              	.LBE22:
 2048              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2049              		.loc 1 417 5 view .LVU510
 2050 0958 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2051 095c 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2052 0960 00808DE5 		str	r8, [sp]	@ render_width,
 2053 0964 0610A0E1 		mov	r1, r6	@, tmp3
 2054 0968 0720A0E1 		mov	r2, r7	@, nwaves
 2055              	.LBB23:
 2056              	.LBB20:
 2057              	@ armwave.c:373:             g_armwave_state.ch1_color.r = r;
 373:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2058              		.loc 1 373 41 view .LVU511
 2059 096c 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 375:armwave.c     ****             break;
 2060              		.loc 1 375 13 is_stmt 1 view .LVU512
 2061              	.LBE20:
 2062              	.LBE23:
 2063              	@ armwave.c:417:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2064              		.loc 1 417 5 is_stmt 0 view .LVU513
 2065 0970 0630A0E1 		mov	r3, r6	@, wave_size
 2066              	.LBB24:
 2067              	.LBB21:
 2068              	@ armwave.c:375:             g_armwave_state.ch1_color.b = b;
 375:armwave.c     ****             break;
 2069              		.loc 1 375 41 view .LVU514
 2070 0974 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 376:armwave.c     ****     }
 2071              		.loc 1 376 13 is_stmt 1 view .LVU515
 2072              	.LVL144:
 376:armwave.c     ****     }
 2073              		.loc 1 376 13 is_stmt 0 view .LVU516
 2074              	.LBE21:
 2075              	.LBE24:
 2076              		.loc 1 417 5 is_stmt 1 view .LVU517
 2077 0978 FEFFFFEB 		bl	armwave_setup_render		@
 2078              	.LVL145:
 418:armwave.c     **** 
 419:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2079              		.loc 1 419 5 view .LVU518
 2080 097c 34109FE5 		ldr	r1, .L112+32	@,
 2081 0980 34009FE5 		ldr	r0, .L112+36	@,
 2082              	@ armwave.c:420: }
 420:armwave.c     **** }
 2083              		.loc 1 420 1 is_stmt 0 view .LVU519
 2084 0984 10D08DE2 		add	sp, sp, #16	@,,
 2085              		.cfi_def_cfa_offset 56
 2086              		@ sp needed	@
 2087 0988 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2088              		.cfi_restore 84
 2089              		.cfi_restore 85
 2090              		.cfi_restore 82
 2091              		.cfi_restore 83
 2092              		.cfi_restore 80
 2093              		.cfi_restore 81
 2094              		.cfi_def_cfa_offset 32
 2095 098c F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2096              		.cfi_restore 14
 2097              		.cfi_restore 10
 2098              		.cfi_restore 9
 2099              		.cfi_restore 8
 2100              		.cfi_restore 7
 2101              		.cfi_restore 6
 2102              		.cfi_restore 5
 2103              		.cfi_restore 4
 2104              		.cfi_def_cfa_offset 0
 2105              	.LVL146:
 2106              	@ armwave.c:419:     printf("armwave version: %s\n", ARMWAVE_VER);
 419:armwave.c     **** }
 2107              		.loc 1 419 5 view .LVU520
 2108 0990 FEFFFFEA 		b	printf		@
 2109              	.LVL147:
 2110              	.L113:
 2111 0994 0000A0E1 		.align	3
 2112              	.L112:
 2113 0998 000000C0 		.word	-1073741824
 2114 099c CCCCEC3F 		.word	1072483532
 2115 09a0 00000000 		.word	0
 2116 09a4 00E06F40 		.word	1081073664
 2117 09a8 00007F43 		.word	1132396544
 2118 09ac FFFFFFFF 		.word	gamma_table-1
 2119 09b0 00000000 		.word	g_armwave_state
 2120 09b4 F609F406 		.word	116656630
 2121 09b8 00000000 		.word	.LC0
 2122 09bc 08000000 		.word	.LC1
 2123              		.cfi_endproc
 2124              	.LFE69:
 2126              		.align	2
 2127              		.global	armwave_test_fill_outbuf
 2128              		.syntax unified
 2129              		.arm
 2130              		.fpu vfp
 2132              	armwave_test_fill_outbuf:
 2133              	.LFB70:
 421:armwave.c     **** 
 422:armwave.c     **** /*
 423:armwave.c     ****  * Render image to the local allocated buffer.
 424:armwave.c     ****  */
 425:armwave.c     **** void armwave_test_fill_outbuf()
 426:armwave.c     **** {
 2134              		.loc 1 426 1 is_stmt 1 view -0
 2135              		.cfi_startproc
 2136              		@ args = 0, pretend = 0, frame = 0
 2137              		@ frame_needed = 0, uses_anonymous_args = 0
 2138              		@ link register save eliminated.
 427:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2139              		.loc 1 427 5 view .LVU522
 2140 09c0 04309FE5 		ldr	r3, .L115	@ tmp111,
 2141 09c4 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2142 09c8 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2143              	.LVL148:
 2144              	.L116:
 2145              		.align	2
 2146              	.L115:
 2147 09cc 00000000 		.word	g_armwave_state
 2148              		.cfi_endproc
 2149              	.LFE70:
 2151              		.align	2
 2152              		.global	armwave_test_dump_buffer_to_ppm
 2153              		.syntax unified
 2154              		.arm
 2155              		.fpu vfp
 2157              	armwave_test_dump_buffer_to_ppm:
 2158              	.LVL149:
 2159              	.LFB71:
 428:armwave.c     **** }
 429:armwave.c     **** 
 430:armwave.c     **** /*
 431:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 432:armwave.c     ****  */
 433:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 434:armwave.c     **** {
 2160              		.loc 1 434 1 view -0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 0
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164              		@ link register save eliminated.
 435:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2165              		.loc 1 435 5 view .LVU524
 2166 09d0 08309FE5 		ldr	r3, .L118	@ tmp112,
 2167 09d4 0010A0E1 		mov	r1, r0	@, fn
 2168 09d8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2169              	.LVL150:
 2170              		.loc 1 435 5 is_stmt 0 view .LVU525
 2171 09dc FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2172              	.LVL151:
 2173              	.L119:
 2174              		.loc 1 435 5 view .LVU526
 2175              		.align	2
 2176              	.L118:
 2177 09e0 00000000 		.word	g_armwave_state
 2178              		.cfi_endproc
 2179              	.LFE71:
 2181              		.align	2
 2182              		.global	armwave_test_fill_gdkbuf
 2183              		.syntax unified
 2184              		.arm
 2185              		.fpu vfp
 2187              	armwave_test_fill_gdkbuf:
 2188              	.LVL152:
 2189              	.LFB72:
 436:armwave.c     **** }
 437:armwave.c     **** 
 438:armwave.c     **** /*
 439:armwave.c     ****  * Render GDK buffer with test funtionry.
 440:armwave.c     ****  */
 441:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 442:armwave.c     **** {
 2190              		.loc 1 442 1 is_stmt 1 view -0
 2191              		.cfi_startproc
 2192              		@ args = 0, pretend = 0, frame = 0
 2193              		@ frame_needed = 0, uses_anonymous_args = 0
 2194              		@ link register save eliminated.
 443:armwave.c     ****     //PyObject *mv;
 444:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 445:armwave.c     **** 
 446:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 447:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2195              		.loc 1 447 5 view .LVU528
 448:armwave.c     ****     
 449:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 450:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2196              		.loc 1 450 5 view .LVU529
 2197              	@ armwave.c:447:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 447:armwave.c     ****     
 2198              		.loc 1 447 11 is_stmt 0 view .LVU530
 2199 09e4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2200              	@ armwave.c:450:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2201              		.loc 1 450 5 view .LVU531
 2202 09e8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2203              	.LVL153:
 2204              		.loc 1 450 5 view .LVU532
 2205 09ec FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2206              	.LVL154:
 2207              		.loc 1 450 5 view .LVU533
 2208              		.cfi_endproc
 2209              	.LFE72:
 2211              		.align	2
 2212              		.global	armwave_test_buffer_alloc
 2213              		.syntax unified
 2214              		.arm
 2215              		.fpu vfp
 2217              	armwave_test_buffer_alloc:
 2218              	.LVL155:
 2219              	.LFB73:
 451:armwave.c     **** }
 452:armwave.c     **** 
 453:armwave.c     **** /*
 454:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 455:armwave.c     ****  */
 456:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 457:armwave.c     **** {
 2220              		.loc 1 457 1 is_stmt 1 view -0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 0
 2223              		@ frame_needed = 0, uses_anonymous_args = 0
 458:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2224              		.loc 1 458 5 view .LVU535
 2225              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2226              		.loc 1 457 1 is_stmt 0 view .LVU536
 2227 09f0 70402DE9 		push	{r4, r5, r6, lr}	@
 2228              		.cfi_def_cfa_offset 16
 2229              		.cfi_offset 4, -16
 2230              		.cfi_offset 5, -12
 2231              		.cfi_offset 6, -8
 2232              		.cfi_offset 14, -4
 2233              	@ armwave.c:457: {
 457:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2234              		.loc 1 457 1 view .LVU537
 2235 09f4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2236              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2237              		.loc 1 458 23 view .LVU538
 2238 09f8 44409FE5 		ldr	r4, .L128	@ tmp128,
 2239 09fc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2240              	.LVL156:
 2241              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 2242              		.loc 1 458 7 view .LVU539
 2243 0a00 000050E3 		cmp	r0, #0	@ _1,
 2244 0a04 0000000A 		beq	.L122		@,
 459:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2245              		.loc 1 459 9 is_stmt 1 view .LVU540
 2246 0a08 FEFFFFEB 		bl	free		@
 2247              	.LVL157:
 2248              	.L122:
 460:armwave.c     ****     }
 461:armwave.c     **** 
 462:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 463:armwave.c     **** 
 464:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2249              		.loc 1 464 5 view .LVU541
 2250              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2251              		.loc 1 464 75 is_stmt 0 view .LVU542
 2252 0a0c 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2253 0a10 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2254              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2255              		.loc 1 464 40 view .LVU543
 2256 0a14 0610A0E1 		mov	r1, r6	@, nsets
 2257              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2258              		.loc 1 464 75 view .LVU544
 2259 0a18 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2260              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2261              		.loc 1 464 40 view .LVU545
 2262 0a1c 0500A0E1 		mov	r0, r5	@, _4
 2263 0a20 FEFFFFEB 		bl	calloc		@
 2264              	.LVL158:
 2265              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 465:armwave.c     **** 
 466:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2266              		.loc 1 466 7 view .LVU546
 2267 0a24 000050E3 		cmp	r0, #0	@ tmp124,
 2268              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2269              		.loc 1 464 38 view .LVU547
 2270 0a28 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2271              		.loc 1 466 5 is_stmt 1 view .LVU548
 2272              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 2273              		.loc 1 466 7 is_stmt 0 view .LVU549
 2274 0a2c 7080BD18 		popne	{r4, r5, r6, pc}	@
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2275              		.loc 1 467 9 is_stmt 1 view .LVU550
 2276 0a30 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2277 0a34 0620A0E1 		mov	r2, r6	@, nsets
 2278 0a38 08009FE5 		ldr	r0, .L128+4	@,
 2279              	@ armwave.c:471: }
 468:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 469:armwave.c     ****         return;
 470:armwave.c     ****     }
 471:armwave.c     **** }
 2280              		.loc 1 471 1 is_stmt 0 view .LVU551
 2281 0a3c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2282              		.cfi_restore 14
 2283              		.cfi_restore 6
 2284              		.cfi_restore 5
 2285              		.cfi_restore 4
 2286              		.cfi_def_cfa_offset 0
 2287              	.LVL159:
 2288              	@ armwave.c:467:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2289              		.loc 1 467 9 view .LVU552
 2290 0a40 FEFFFFEA 		b	printf		@
 2291              	.LVL160:
 2292              	.L129:
 467:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2293              		.loc 1 467 9 view .LVU553
 2294              		.align	2
 2295              	.L128:
 2296 0a44 00000000 		.word	g_armwave_state
 2297 0a48 20030000 		.word	.LC24
 2298              		.cfi_endproc
 2299              	.LFE73:
 2301              		.align	2
 2302              		.global	armwave_fill_pixbuf_into_pybuffer
 2303              		.syntax unified
 2304              		.arm
 2305              		.fpu vfp
 2307              	armwave_fill_pixbuf_into_pybuffer:
 2308              	.LVL161:
 2309              	.LFB74:
 472:armwave.c     **** 
 473:armwave.c     **** /*
 474:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 475:armwave.c     ****  */
 476:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 477:armwave.c     **** {
 2310              		.loc 1 477 1 is_stmt 1 view -0
 2311              		.cfi_startproc
 2312              		@ args = 0, pretend = 0, frame = 48
 2313              		@ frame_needed = 0, uses_anonymous_args = 0
 478:armwave.c     ****     Py_buffer buffer;
 2314              		.loc 1 478 5 view .LVU555
 479:armwave.c     ****     int ret;
 2315              		.loc 1 479 5 view .LVU556
 480:armwave.c     **** 
 481:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 482:armwave.c     **** 
 483:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2316              		.loc 1 483 5 view .LVU557
 2317              	@ armwave.c:477: {
 477:armwave.c     ****     Py_buffer buffer;
 2318              		.loc 1 477 1 is_stmt 0 view .LVU558
 2319 0a4c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2320              		.cfi_def_cfa_offset 4
 2321              		.cfi_offset 14, -4
 2322 0a50 34D04DE2 		sub	sp, sp, #52	@,,
 2323              		.cfi_def_cfa_offset 56
 2324              	@ armwave.c:483:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2325              		.loc 1 483 11 view .LVU559
 2326 0a54 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2327 0a58 0120A0E3 		mov	r2, #1	@,
 2328 0a5c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2329              	.LVL162:
 484:armwave.c     **** 
 485:armwave.c     ****     if(ret != 0) {
 2330              		.loc 1 485 5 is_stmt 1 view .LVU560
 2331              	@ armwave.c:485:     if(ret != 0) {
 2332              		.loc 1 485 7 is_stmt 0 view .LVU561
 2333 0a60 000050E3 		cmp	r0, #0	@,
 2334 0a64 0A00001A 		bne	.L134		@,
 486:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 487:armwave.c     ****         Py_RETURN_FALSE;
 488:armwave.c     ****     }
 489:armwave.c     **** 
 490:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 491:armwave.c     **** 
 492:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2335              		.loc 1 492 5 is_stmt 1 view .LVU562
 2336 0a68 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2337              	.LVL163:
 2338              		.loc 1 492 5 is_stmt 0 view .LVU563
 2339 0a6c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2340              	.LVL164:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     PyBuffer_Release(&buffer);
 2341              		.loc 1 495 5 is_stmt 1 view .LVU564
 2342 0a70 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2343 0a74 FEFFFFEB 		bl	PyBuffer_Release		@
 2344              	.LVL165:
 496:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 497:armwave.c     **** 
 498:armwave.c     ****     Py_RETURN_TRUE;
 2345              		.loc 1 498 5 view .LVU565
 2346              	.LBB25:
 2347              	.LBI25:
 2348              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2349              		.loc 2 456 20 view .LVU566
 2350              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2351              		.loc 2 458 21 view .LVU567
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2352              		.loc 2 459 5 view .LVU568
 2353              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2354              		.loc 2 459 18 is_stmt 0 view .LVU569
 2355 0a78 38309FE5 		ldr	r3, .L135	@ tmp126,
 2356              	.LBE26:
 2357              	.LBE25:
 2358              	@ armwave.c:498:     Py_RETURN_TRUE;
 2359              		.loc 1 498 5 view .LVU570
 2360 0a7c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2361              	.LBB28:
 2362              	.LBB27:
 2363              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2364              		.loc 2 459 18 view .LVU571
 2365 0a80 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2366 0a84 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2367 0a88 002083E5 		str	r2, [r3]	@ tmp128,
 2368              	.LBE27:
 2369              	.LBE28:
 2370              	@ armwave.c:499: }
 499:armwave.c     **** }
 2371              		.loc 1 499 1 view .LVU572
 2372 0a8c 34D08DE2 		add	sp, sp, #52	@,,
 2373              		.cfi_remember_state
 2374              		.cfi_def_cfa_offset 4
 2375              		@ sp needed	@
 2376 0a90 04F09DE4 		ldr	pc, [sp], #4	@
 2377              	.LVL166:
 2378              	.L134:
 2379              		.cfi_restore_state
 486:armwave.c     ****         Py_RETURN_FALSE;
 2380              		.loc 1 486 9 is_stmt 1 view .LVU573
 2381 0a94 20009FE5 		ldr	r0, .L135+4	@,
 2382              	.LVL167:
 486:armwave.c     ****         Py_RETURN_FALSE;
 2383              		.loc 1 486 9 is_stmt 0 view .LVU574
 2384 0a98 FEFFFFEB 		bl	puts		@
 2385              	.LVL168:
 487:armwave.c     ****     }
 2386              		.loc 1 487 9 is_stmt 1 view .LVU575
 2387              	.LBB29:
 2388              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2389              		.loc 2 456 20 view .LVU576
 2390              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2391              		.loc 2 458 21 view .LVU577
 2392              		.loc 2 459 5 view .LVU578
 2393              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2394              		.loc 2 459 18 is_stmt 0 view .LVU579
 2395 0a9c 1C309FE5 		ldr	r3, .L135+8	@ tmp120,
 2396              	.LBE30:
 2397              	.LBE29:
 2398              	@ armwave.c:487:         Py_RETURN_FALSE;
 487:armwave.c     ****     }
 2399              		.loc 1 487 9 view .LVU580
 2400 0aa0 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2401              	.LBB32:
 2402              	.LBB31:
 2403              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2404              		.loc 2 459 18 view .LVU581
 2405 0aa4 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2406 0aa8 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2407 0aac 002083E5 		str	r2, [r3]	@ tmp122,
 2408              	.LBE31:
 2409              	.LBE32:
 2410              	@ armwave.c:499: }
 2411              		.loc 1 499 1 view .LVU582
 2412 0ab0 34D08DE2 		add	sp, sp, #52	@,,
 2413              		.cfi_def_cfa_offset 4
 2414              		@ sp needed	@
 2415 0ab4 04F09DE4 		ldr	pc, [sp], #4	@
 2416              	.L136:
 2417              		.align	2
 2418              	.L135:
 2419 0ab8 00000000 		.word	_Py_TrueStruct
 2420 0abc 74030000 		.word	.LC25
 2421 0ac0 00000000 		.word	_Py_FalseStruct
 2422              		.cfi_endproc
 2423              	.LFE74:
 2425              		.align	2
 2426              		.global	armwave_test_create_am_sine
 2427              		.syntax unified
 2428              		.arm
 2429              		.fpu vfp
 2431              	armwave_test_create_am_sine:
 2432              	.LVL169:
 2433              	.LFB75:
 500:armwave.c     **** 
 501:armwave.c     **** /*
 502:armwave.c     ****  * Make a test AM waveform for render tests.
 503:armwave.c     ****  *
 504:armwave.c     ****  * @param   mod                     modulation depth
 505:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 506:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 507:armwave.c     ****  */
 508:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 509:armwave.c     **** {
 2434              		.loc 1 509 1 is_stmt 1 view -0
 2435              		.cfi_startproc
 2436              		@ args = 0, pretend = 0, frame = 8
 2437              		@ frame_needed = 0, uses_anonymous_args = 0
 510:armwave.c     ****     float v, noise, xnoise, mod_val;
 2438              		.loc 1 510 5 view .LVU584
 511:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2439              		.loc 1 511 5 view .LVU585
 2440              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2441              		.loc 1 509 1 is_stmt 0 view .LVU586
 2442 0ac4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2443              		.cfi_def_cfa_offset 32
 2444              		.cfi_offset 4, -32
 2445              		.cfi_offset 5, -28
 2446              		.cfi_offset 6, -24
 2447              		.cfi_offset 7, -20
 2448              		.cfi_offset 8, -16
 2449              		.cfi_offset 9, -12
 2450              		.cfi_offset 10, -8
 2451              		.cfi_offset 14, -4
 2452              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2453              		.loc 1 511 38 view .LVU587
 2454 0ac8 7A7A9FED 		vldr.32	s14, .L168	@ tmp180,
 2455              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2456              		.loc 1 511 55 view .LVU588
 2457 0acc 00529FE5 		ldr	r5, .L168+28	@ tmp250,
 2458              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2459              		.loc 1 509 1 view .LVU589
 2460 0ad0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2461              		.cfi_def_cfa_offset 80
 2462              		.cfi_offset 80, -80
 2463              		.cfi_offset 81, -76
 2464              		.cfi_offset 82, -72
 2465              		.cfi_offset 83, -68
 2466              		.cfi_offset 84, -64
 2467              		.cfi_offset 85, -60
 2468              		.cfi_offset 86, -56
 2469              		.cfi_offset 87, -52
 2470              		.cfi_offset 88, -48
 2471              		.cfi_offset 89, -44
 2472              		.cfi_offset 90, -40
 2473              		.cfi_offset 91, -36
 2474 0ad4 0090A0E1 		mov	r9, r0	@ sets, sets
 2475              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2476              		.loc 1 511 38 view .LVU590
 2477 0ad8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2478              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     int s, set_offset = 0;
 513:armwave.c     ****     int w, x;
 514:armwave.c     **** 
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2479              		.loc 1 515 70 view .LVU591
 2480 0adc 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2481 0ae0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2482              	.LBB35:
 2483              	.LBB36:
 2484              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2485              		.loc 1 458 23 view .LVU592
 2486 0ae4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2487              	.LVL170:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2488              		.loc 1 458 23 view .LVU593
 2489              	.LBE36:
 2490              	.LBE35:
 2491              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2492              		.loc 1 511 38 view .LVU594
 2493 0ae8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2494              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2495              		.loc 1 515 70 view .LVU595
 2496 0aec 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2497              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2498              		.loc 1 509 1 view .LVU596
 2499 0af0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2500              	.LBB40:
 2501              	.LBB37:
 2502              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2503              		.loc 1 458 7 view .LVU597
 2504 0af4 000050E3 		cmp	r0, #0	@ _82,
 2505              	.LBE37:
 2506              	.LBE40:
 2507              	@ armwave.c:509: {
 509:armwave.c     ****     float v, noise, xnoise, mod_val;
 2508              		.loc 1 509 1 view .LVU598
 2509 0af8 08D04DE2 		sub	sp, sp, #8	@,,
 2510              		.cfi_def_cfa_offset 88
 2511              	@ armwave.c:516:     g_armwave_state.test_wave_buffer_nsets = sets;
 516:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2512              		.loc 1 516 44 view .LVU599
 2513 0afc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2514              	@ armwave.c:515:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2515              		.loc 1 515 45 view .LVU600
 2516 0b00 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2517              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2518              		.loc 1 511 38 view .LVU601
 2519 0b04 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2520              	@ armwave.c:511:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 511:armwave.c     ****     int s, set_offset = 0;
 2521              		.loc 1 511 11 view .LVU602
 2522 0b08 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2523              	.LVL171:
 512:armwave.c     ****     int w, x;
 2524              		.loc 1 512 5 is_stmt 1 view .LVU603
 513:armwave.c     **** 
 2525              		.loc 1 513 5 view .LVU604
 515:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2526              		.loc 1 515 5 view .LVU605
 2527              		.loc 1 516 5 view .LVU606
 517:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2528              		.loc 1 517 5 view .LVU607
 2529              	.LBB41:
 2530              	.LBI35:
 456:armwave.c     **** {
 2531              		.loc 1 456 6 view .LVU608
 2532              	.LBB38:
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2533              		.loc 1 458 5 view .LVU609
 2534              	@ armwave.c:458:     if(g_armwave_state.test_wave_buffer != NULL) {
 458:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2535              		.loc 1 458 7 is_stmt 0 view .LVU610
 2536 0b0c 0000000A 		beq	.L138		@,
 459:armwave.c     ****     }
 2537              		.loc 1 459 9 is_stmt 1 view .LVU611
 2538 0b10 FEFFFFEB 		bl	free		@
 2539              	.LVL172:
 2540              	.L138:
 464:armwave.c     **** 
 2541              		.loc 1 464 5 view .LVU612
 2542              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2543              		.loc 1 464 75 is_stmt 0 view .LVU613
 2544 0b14 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2545 0b18 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2546              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2547              		.loc 1 464 40 view .LVU614
 2548 0b1c 0910A0E1 		mov	r1, r9	@, sets
 2549              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2550              		.loc 1 464 75 view .LVU615
 2551 0b20 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2552              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2553              		.loc 1 464 40 view .LVU616
 2554 0b24 0400A0E1 		mov	r0, r4	@, _85
 2555 0b28 FEFFFFEB 		bl	calloc		@
 2556              	.LVL173:
 2557              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2558              		.loc 1 466 7 view .LVU617
 2559 0b2c 000050E3 		cmp	r0, #0	@ tmp191,
 2560              	@ armwave.c:464:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 464:armwave.c     **** 
 2561              		.loc 1 464 38 view .LVU618
 2562 0b30 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2563              		.loc 1 466 5 is_stmt 1 view .LVU619
 2564              	@ armwave.c:466:     if(g_armwave_state.test_wave_buffer == NULL) {
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2565              		.loc 1 466 7 is_stmt 0 view .LVU620
 2566 0b34 5A00000A 		beq	.L167		@,
 2567              	.L139:
 2568              	.LVL174:
 466:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2569              		.loc 1 466 7 view .LVU621
 2570              	.LBE38:
 2571              	.LBE41:
 2572              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 518:armwave.c     **** 
 519:armwave.c     ****     for(s = 0; s < sets; s++) {
 2573              		.loc 1 519 5 discriminator 1 view .LVU622
 2574 0b38 000059E3 		cmp	r9, #0	@ sets,
 2575 0b3c 550000DA 		ble	.L137		@,
 2576              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 521:armwave.c     ****     
 522:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 523:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 524:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 525:armwave.c     **** 
 526:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 527:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 528:armwave.c     ****                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 530:armwave.c     ****                 noise *= noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 533:armwave.c     ****                     noise = -noise;
 534:armwave.c     **** 
 535:armwave.c     ****                 noise += 1.0f;
 536:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 537:armwave.c     **** 
 538:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2577              		.loc 1 538 45 view .LVU623
 2578 0b40 5C8A9FED 		vldr.32	s16, .L168	@ tmp258,
 2579              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 539:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 540:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 541:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2580              		.loc 1 541 104 view .LVU624
 2581 0b44 5CCA9FED 		vldr.32	s24, .L168+4	@ tmp259,
 2582              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2583              		.loc 1 519 5 view .LVU625
 2584 0b48 0070A0E3 		mov	r7, #0	@ set_offset,
 2585              	@ armwave.c:520:         printf("Calculating test set %d\n", s);
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2586              		.loc 1 520 9 view .LVU626
 2587 0b4c 84A19FE5 		ldr	r10, .L168+32	@ tmp257,
 2588              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2589              		.loc 1 519 5 view .LVU627
 2590 0b50 0780A0E1 		mov	r8, r7	@ s, set_offset
 2591              	.LVL175:
 2592              	.L140:
 520:armwave.c     ****         printf("Calculating test set %d\n", s);
 2593              		.loc 1 520 9 is_stmt 1 view .LVU628
 2594 0b54 0810A0E1 		mov	r1, r8	@, s
 2595 0b58 0A00A0E1 		mov	r0, r10	@, tmp257
 2596 0b5c FEFFFFEB 		bl	printf		@
 2597              	.LVL176:
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2598              		.loc 1 522 9 view .LVU629
 2599              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2600              		.loc 1 522 39 is_stmt 0 view .LVU630
 2601 0b60 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2602              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2603              		.loc 1 522 9 view .LVU631
 2604 0b64 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2605 0b68 450000DA 		ble	.L141		@,
 2606              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2607              		.loc 1 524 21 view .LVU632
 2608 0b6c 53CADFED 		vldr.32	s25, .L168+8	@ tmp200,
 2609              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2610              		.loc 1 538 33 view .LVU633
 2611 0b70 53BA9FED 		vldr.32	s22, .L168+12	@ tmp253,
 2612              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2613              		.loc 1 536 24 view .LVU634
 2614 0b74 53AADFED 		vldr.32	s21, .L168+16	@ tmp254,
 2615 0b78 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2616              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2617              		.loc 1 522 15 view .LVU635
 2618 0b7c 0060A0E3 		mov	r6, #0	@ w,
 2619              	.LVL177:
 2620              	.L148:
 524:armwave.c     **** 
 2621              		.loc 1 524 13 is_stmt 1 view .LVU636
 2622              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2623              		.loc 1 524 21 is_stmt 0 view .LVU637
 2624 0b80 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2625 0b84 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2626              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2627              		.loc 1 526 13 view .LVU638
 2628 0b88 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2629              	@ armwave.c:524:             mod_val = 0.5f + (_1_waves_mod * w);
 524:armwave.c     **** 
 2630              		.loc 1 524 21 view .LVU639
 2631 0b8c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2632 0b90 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2633              	.LVL178:
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2634              		.loc 1 526 13 is_stmt 1 view .LVU640
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2635              		.loc 1 526 13 is_stmt 0 view .LVU641
 2636 0b94 370000DA 		ble	.L142		@,
 2637 0b98 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2638              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2639              		.loc 1 541 113 view .LVU642
 2640 0b9c 4AAA9FED 		vldr.32	s20, .L168+20	@ tmp229,
 2641 0ba0 4A8ADFED 		vldr.32	s17, .L168+24	@ tmp230,
 2642              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2643              		.loc 1 526 19 view .LVU643
 2644 0ba4 0040A0E3 		mov	r4, #0	@ x,
 2645              	.LVL179:
 2646              	.L147:
 527:armwave.c     ****                 noise *= noise;
 2647              		.loc 1 527 17 is_stmt 1 view .LVU644
 2648              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2649              		.loc 1 527 28 is_stmt 0 view .LVU645
 2650 0ba8 FEFFFFEB 		bl	rand		@
 2651              	.LVL180:
 2652              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2653              		.loc 1 527 35 view .LVU646
 2654 0bac 7000FFE6 		uxth	r0, r0	@ tmp201,
 2655              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2656              		.loc 1 527 45 view .LVU647
 2657 0bb0 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2658 0bb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2659              	@ armwave.c:527:                 noise  = ((rand() & 0xffff) * noise_fraction);
 527:armwave.c     ****                 noise *= noise;
 2660              		.loc 1 527 24 view .LVU648
 2661 0bb8 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2662              	.LVL181:
 528:armwave.c     ****                 noise *= noise;
 2663              		.loc 1 528 17 is_stmt 1 view .LVU649
 2664              	@ armwave.c:528:                 noise *= noise;
 528:armwave.c     ****                 noise *= noise;
 2665              		.loc 1 528 23 is_stmt 0 view .LVU650
 2666 0bbc A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2667              	.LVL182:
 529:armwave.c     ****                 noise *= noise;
 2668              		.loc 1 529 17 is_stmt 1 view .LVU651
 2669              	@ armwave.c:529:                 noise *= noise;
 529:armwave.c     ****                 noise *= noise;
 2670              		.loc 1 529 23 is_stmt 0 view .LVU652
 2671 0bc0 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2672              	.LVL183:
 530:armwave.c     **** 
 2673              		.loc 1 530 17 is_stmt 1 view .LVU653
 2674              	@ armwave.c:530:                 noise *= noise;
 530:armwave.c     **** 
 2675              		.loc 1 530 23 is_stmt 0 view .LVU654
 2676 0bc4 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2677              	.LVL184:
 532:armwave.c     ****                     noise = -noise;
 2678              		.loc 1 532 17 is_stmt 1 view .LVU655
 2679              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2680              		.loc 1 532 21 is_stmt 0 view .LVU656
 2681 0bc8 FEFFFFEB 		bl	rand		@
 2682              	.LVL185:
 533:armwave.c     **** 
 2683              		.loc 1 533 21 is_stmt 1 view .LVU657
 2684              	@ armwave.c:532:                 if((rand() & 0xffff) > 0x7fff)
 532:armwave.c     ****                     noise = -noise;
 2685              		.loc 1 532 19 is_stmt 0 view .LVU658
 2686 0bcc 020910E3 		tst	r0, #32768	@,
 2687              	@ armwave.c:533:                     noise = -noise;
 533:armwave.c     **** 
 2688              		.loc 1 533 27 view .LVU659
 2689 0bd0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2690              	.LVL186:
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2691              		.loc 1 535 17 is_stmt 1 view .LVU660
 536:armwave.c     **** 
 2692              		.loc 1 536 17 view .LVU661
 2693              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2694              		.loc 1 536 27 is_stmt 0 view .LVU662
 2695 0bd4 FEFFFFEB 		bl	rand		@
 2696              	.LVL187:
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2697              		.loc 1 538 17 is_stmt 1 view .LVU663
 2698              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2699              		.loc 1 538 45 is_stmt 0 view .LVU664
 2700 0bd8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2701              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2702              		.loc 1 538 33 view .LVU665
 2703 0bdc 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2704              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2705              		.loc 1 538 45 view .LVU666
 2706 0be0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2707              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2708              		.loc 1 538 33 view .LVU667
 2709 0be4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2710              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2711              		.loc 1 538 45 view .LVU668
 2712 0be8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2713              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2714              		.loc 1 538 33 view .LVU669
 2715 0bec 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2716              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2717              		.loc 1 536 34 view .LVU670
 2718 0bf0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2719              	.LVL188:
 2720              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2721              		.loc 1 536 44 view .LVU671
 2722 0bf4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2723 0bf8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2724              	@ armwave.c:536:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 536:armwave.c     **** 
 2725              		.loc 1 536 24 view .LVU672
 2726 0bfc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2727              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2728              		.loc 1 538 77 view .LVU673
 2729 0c00 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2730              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2731              		.loc 1 538 22 view .LVU674
 2732 0c04 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2733 0c08 FEFFFFEB 		bl	sin		@
 2734              	.LVL189:
 2735              		.loc 1 541 17 is_stmt 1 view .LVU675
 2736              	@ armwave.c:535:                 noise += 1.0f;
 535:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2737              		.loc 1 535 23 is_stmt 0 view .LVU676
 2738 0c0c 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2739              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2740              		.loc 1 541 104 view .LVU677
 2741 0c10 0010A0E3 		mov	r1, #0	@ iftmp.27_50,
 2742              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2743              		.loc 1 538 98 view .LVU678
 2744 0c14 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2745              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2746              		.loc 1 538 87 view .LVU679
 2747 0c18 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2748              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2749              		.loc 1 538 98 view .LVU680
 2750 0c1c 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2751              	@ armwave.c:538:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 538:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2752              		.loc 1 538 19 view .LVU681
 2753 0c20 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2754              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2755              		.loc 1 541 113 view .LVU682
 2756 0c24 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2757 0c28 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2758 0c2c C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2759 0c30 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2760 0c34 050000DA 		ble	.L144		@,
 2761              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2762              		.loc 1 541 104 discriminator 1 view .LVU683
 2763 0c38 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2764 0c3c FF10A0E3 		mov	r1, #255	@ iftmp.27_50,
 2765 0c40 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2766 0c44 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2767 0c48 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2768 0c4c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.27_50, %sfp
 2769              	.L144:
 2770              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2771              		.loc 1 541 57 discriminator 12 view .LVU684
 2772 0c50 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2773              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2774              		.loc 1 541 102 discriminator 12 view .LVU685
 2775 0c54 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2776 0c58 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2777 0c5c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2778              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2779              		.loc 1 526 58 discriminator 12 view .LVU686
 2780 0c60 014084E2 		add	r4, r4, #1	@ x, x,
 2781              	.LVL190:
 2782              	@ armwave.c:541:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2783              		.loc 1 541 102 discriminator 12 view .LVU687
 2784 0c64 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.27_50, *_40
 2785              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2786              		.loc 1 526 43 discriminator 12 view .LVU688
 2787 0c68 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2788              	@ armwave.c:526:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 526:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2789              		.loc 1 526 13 discriminator 12 view .LVU689
 2790 0c6c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2791 0c70 CCFFFFCA 		bgt	.L147		@,
 2792 0c74 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2793              	.LVL191:
 2794              	.L142:
 2795              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2796              		.loc 1 522 48 discriminator 2 view .LVU690
 2797 0c78 016086E2 		add	r6, r6, #1	@ w, w,
 2798              	.LVL192:
 2799              	@ armwave.c:522:         for(w = 0; w < g_armwave_state.waves; w++) {
 522:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2800              		.loc 1 522 9 discriminator 2 view .LVU691
 2801 0c7c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2802 0c80 BEFFFFBA 		blt	.L148		@,
 2803              	.LVL193:
 2804              	.L141:
 542:armwave.c     ****             }
 543:armwave.c     ****         }
 544:armwave.c     **** 
 545:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2805              		.loc 1 545 9 is_stmt 1 discriminator 2 view .LVU692
 2806              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2807              		.loc 1 545 46 is_stmt 0 discriminator 2 view .LVU693
 2808 0c84 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2809              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2810              		.loc 1 519 27 discriminator 2 view .LVU694
 2811 0c88 018088E2 		add	r8, r8, #1	@ s, s,
 2812              	.LVL194:
 2813              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2814              		.loc 1 519 5 discriminator 2 view .LVU695
 2815 0c8c 080059E1 		cmp	r9, r8	@ sets, s
 2816              	@ armwave.c:545:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2817              		.loc 1 545 20 discriminator 2 view .LVU696
 2818 0c90 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2819              	.LVL195:
 2820              	@ armwave.c:519:     for(s = 0; s < sets; s++) {
 519:armwave.c     ****         printf("Calculating test set %d\n", s);
 2821              		.loc 1 519 5 discriminator 2 view .LVU697
 2822 0c94 AEFFFF1A 		bne	.L140		@,
 2823              	.LVL196:
 2824              	.L137:
 2825              	@ armwave.c:547: }
 546:armwave.c     ****     }
 547:armwave.c     **** }
 2826              		.loc 1 547 1 view .LVU698
 2827 0c98 08D08DE2 		add	sp, sp, #8	@,,
 2828              		.cfi_remember_state
 2829              		.cfi_def_cfa_offset 80
 2830              		@ sp needed	@
 2831 0c9c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2832              		.cfi_restore 90
 2833              		.cfi_restore 91
 2834              		.cfi_restore 88
 2835              		.cfi_restore 89
 2836              		.cfi_restore 86
 2837              		.cfi_restore 87
 2838              		.cfi_restore 84
 2839              		.cfi_restore 85
 2840              		.cfi_restore 82
 2841              		.cfi_restore 83
 2842              		.cfi_restore 80
 2843              		.cfi_restore 81
 2844              		.cfi_def_cfa_offset 32
 2845              	.LVL197:
 2846              		.loc 1 547 1 view .LVU699
 2847 0ca0 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2848              	.LVL198:
 2849              	.L167:
 2850              		.cfi_restore_state
 2851              	.LBB42:
 2852              	.LBB39:
 467:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2853              		.loc 1 467 9 is_stmt 1 view .LVU700
 2854 0ca4 940901E0 		mul	r1, r4, r9	@, _85, sets
 2855 0ca8 0920A0E1 		mov	r2, r9	@, sets
 2856 0cac 28009FE5 		ldr	r0, .L168+36	@,
 2857 0cb0 FEFFFFEB 		bl	printf		@
 2858              	.LVL199:
 469:armwave.c     ****     }
 2859              		.loc 1 469 9 view .LVU701
 2860 0cb4 9FFFFFEA 		b	.L139		@
 2861              	.L169:
 2862              		.align	2
 2863              	.L168:
 2864 0cb8 0000803F 		.word	1065353216
 2865 0cbc 00007F43 		.word	1132396544
 2866 0cc0 0000003F 		.word	1056964608
 2867 0cc4 C3F5C840 		.word	1086911939
 2868 0cc8 38FFC74A 		.word	1254620984
 2869 0ccc 0000FE42 		.word	1123942400
 2870 0cd0 00000043 		.word	1124073472
 2871 0cd4 00000000 		.word	g_armwave_state
 2872 0cd8 C8030000 		.word	.LC26
 2873 0cdc 20030000 		.word	.LC24
 2874              	.LBE39:
 2875              	.LBE42:
 2876              		.cfi_endproc
 2877              	.LFE75:
 2879              		.align	2
 2880              		.global	armwave_cleanup
 2881              		.syntax unified
 2882              		.arm
 2883              		.fpu vfp
 2885              	armwave_cleanup:
 2886              	.LFB76:
 548:armwave.c     **** 
 549:armwave.c     **** /*
 550:armwave.c     ****  * Make a test square waveform.
 551:armwave.c     ****  *
 552:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 553:armwave.c     ****  */
 554:armwave.c     **** #if 0
 555:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 556:armwave.c     **** {
 557:armwave.c     ****     uint8_t v;
 558:armwave.c     ****     float noise, xnoise;
 559:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 560:armwave.c     ****     int w, x;
 561:armwave.c     **** 
 562:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 563:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 564:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 565:armwave.c     ****             noise *= noise;
 566:armwave.c     ****             noise *= noise;
 567:armwave.c     ****             noise *= noise;
 568:armwave.c     **** 
 569:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 570:armwave.c     ****                 noise = -noise;
 571:armwave.c     **** 
 572:armwave.c     ****             //noise += 1.0f;
 573:armwave.c     **** 
 574:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 575:armwave.c     ****                 new_level = 0.2f;
 576:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 577:armwave.c     ****                 new_level = 0.8f;
 578:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 579:armwave.c     ****                 new_level = 0.2f;
 580:armwave.c     ****             } else {
 581:armwave.c     ****                 new_level = 0.8f;
 582:armwave.c     ****             }
 583:armwave.c     **** 
 584:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 585:armwave.c     **** 
 586:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 587:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 588:armwave.c     ****         }
 589:armwave.c     ****     }
 590:armwave.c     **** }
 591:armwave.c     **** #endif
 592:armwave.c     **** 
 593:armwave.c     **** /*
 594:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 595:armwave.c     ****  */
 596:armwave.c     **** void armwave_cleanup()
 597:armwave.c     **** {
 2887              		.loc 1 597 1 view -0
 2888              		.cfi_startproc
 2889              		@ args = 0, pretend = 0, frame = 0
 2890              		@ frame_needed = 0, uses_anonymous_args = 0
 598:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2891              		.loc 1 598 5 view .LVU703
 2892              	@ armwave.c:597: {
 597:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2893              		.loc 1 597 1 is_stmt 0 view .LVU704
 2894 0ce0 10402DE9 		push	{r4, lr}	@
 2895              		.cfi_def_cfa_offset 8
 2896              		.cfi_offset 4, -8
 2897              		.cfi_offset 14, -4
 2898              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2899              		.loc 1 598 25 view .LVU705
 2900 0ce4 34409FE5 		ldr	r4, .L172	@ tmp114,
 2901              	@ armwave.c:598:     free(g_armwave_state.out_pixbuf);
 2902              		.loc 1 598 5 view .LVU706
 2903 0ce8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2904 0cec FEFFFFEB 		bl	free		@
 2905              	.LVL200:
 599:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2906              		.loc 1 599 5 is_stmt 1 view .LVU707
 2907 0cf0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2908 0cf4 FEFFFFEB 		bl	free		@
 2909              	.LVL201:
 600:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2910              		.loc 1 600 5 view .LVU708
 2911 0cf8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2912 0cfc FEFFFFEB 		bl	free		@
 2913              	.LVL202:
 601:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2914              		.loc 1 601 5 view .LVU709
 2915 0d00 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2916 0d04 FEFFFFEB 		bl	free		@
 2917              	.LVL203:
 602:armwave.c     **** 
 603:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2918              		.loc 1 603 5 view .LVU710
 2919              	@ armwave.c:603:     g_armwave_state.out_pixbuf = NULL;
 2920              		.loc 1 603 32 is_stmt 0 view .LVU711
 2921 0d08 0030A0E3 		mov	r3, #0	@ tmp123,
 2922 0d0c 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 604:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2923              		.loc 1 604 5 is_stmt 1 view .LVU712
 2924              	@ armwave.c:604:     g_armwave_state.ch1_buffer = NULL;
 2925              		.loc 1 604 32 is_stmt 0 view .LVU713
 2926 0d10 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 605:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2927              		.loc 1 605 5 is_stmt 1 view .LVU714
 2928              	@ armwave.c:605:     g_armwave_state.xcoord_to_xpixel = NULL;
 2929              		.loc 1 605 38 is_stmt 0 view .LVU715
 2930 0d14 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 606:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2931              		.loc 1 606 5 is_stmt 1 view .LVU716
 2932              	@ armwave.c:606:     g_armwave_state.test_wave_buffer = NULL;
 2933              		.loc 1 606 38 is_stmt 0 view .LVU717
 2934 0d18 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2935              	@ armwave.c:607: }
 607:armwave.c     **** }
 2936              		.loc 1 607 1 view .LVU718
 2937 0d1c 1080BDE8 		pop	{r4, pc}	@
 2938              	.L173:
 2939              		.align	2
 2940              	.L172:
 2941 0d20 00000000 		.word	g_armwave_state
 2942              		.cfi_endproc
 2943              	.LFE76:
 2945              		.comm	gamma_table,256,4
 2946              		.comm	g_armwave_state,136,4
 2947              		.section	.rodata
 2948              		.align	2
 2949              		.set	.LANCHOR0,. + 0
 2952              	__PRETTY_FUNCTION__.17125:
 2953 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2953      6176655F 
 2953      73657475 
 2953      705F7265 
 2953      6E646572 
 2954 0015 000000   		.space	3
 2957              	__PRETTY_FUNCTION__.17129:
 2958 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2958      6176655F 
 2958      7365745F 
 2958      77617665 
 2958      5F706F69 
 2959 0031 000000   		.space	3
 2962              	__PRETTY_FUNCTION__.17136:
 2963 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2963      6176655F 
 2963      7365745F 
 2963      77617665 
 2963      5F706F69 
 2964              		.section	.rodata.str1.4,"aMS",%progbits,1
 2965              		.align	2
 2966              	.LC0:
 2967 0000 76302E30 		.ascii	"v0.0.1\000"
 2967      2E3100
 2968 0007 00       		.space	1
 2969              	.LC1:
 2970 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2970      61766520 
 2970      76657273 
 2970      696F6E3A 
 2970      2025730A 
 2971 001d 000000   		.space	3
 2972              	.LC2:
 2973 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2973      78253038 
 2973      7820623D 
 2973      30782530 
 2973      38782063 
 2974 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2974      25642073 
 2974      63616C65 
 2974      3D256420 
 2974      62697464 
 2975 0077 00       		.space	1
 2976              	.LC3:
 2977 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2977      6E643D25 
 2977      640A00
 2978 0083 00       		.space	1
 2979              	.LC4:
 2980 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2980      75742062 
 2980      75666665 
 2980      723A2030 
 2980      78253038 
 2981 009b 00       		.space	1
 2982              	.LC5:
 2983 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2983      65742025 
 2983      64206279 
 2983      7465732C 
 2983      206E7069 
 2984 00cf 30782530 		.ascii	"0x%08x, dest_buffer 0x%08x, stack ~0x%08x\012\000"
 2984      38782C20 
 2984      64657374 
 2984      5F627566 
 2984      66657220 
 2985 00fa 0000     		.space	2
 2986              	.LC6:
 2987 00fc 69746572 		.ascii	"iter...\000"
 2987      2E2E2E00 
 2988              	.LC7:
 2989 0104 30782530 		.ascii	"0x%08x,%6d,%6d,%6d,%6d,%4d,%.3f\012\000"
 2989      38782C25 
 2989      36642C25 
 2989      36642C25 
 2989      36642C25 
 2990 0125 000000   		.space	3
 2991              	.LC8:
 2992 0128 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2992      6F6E6520 
 2992      7061696E 
 2992      74202564 
 2992      20706978 
 2993              	.LC9:
 2994 0144 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2994      6176655F 
 2994      67656E65 
 2994      72617465 
 2994      3A20736C 
 2995 0175 00       		.ascii	"\000"
 2996 0176 0000     		.space	2
 2997              	.LC10:
 2998 0178 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2998      20653D25 
 2998      6420773D 
 2998      25642077 
 2998      733D2564 
 2999              	.LC11:
 3000 01a4 61726D77 		.ascii	"armwave.c\000"
 3000      6176652E 
 3000      6300
 3001 01ae 0000     		.space	2
 3002              	.LC12:
 3003 01b0 73746172 		.ascii	"start_point < end_point\000"
 3003      745F706F 
 3003      696E7420 
 3003      3C20656E 
 3003      645F706F 
 3004              	.LC13:
 3005 01c8 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3005      7566665F 
 3005      73697A65 
 3005      3D25642C 
 3005      20636D70 
 3006 01fb 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3006      5F776964 
 3006      74683D25 
 3006      642C2077 
 3006      6176655F 
 3007 0225 000000   		.space	3
 3008              	.LC14:
 3009 0228 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 3009      6F632066 
 3009      61696C75 
 3009      72652061 
 3009      6C6C6F63 
 3010 025b 2E636831 		.ascii	".ch1_buffer)\012\000"
 3010      5F627566 
 3010      66657229 
 3010      0A00
 3011 0269 000000   		.space	3
 3012              	.LC15:
 3013 026c 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3013      3A203078 
 3013      25303878 
 3013      20307825 
 3013      30387820 
 3014              	.LC16:
 3015 0290 77617665 		.ascii	"wave_buffer != NULL\000"
 3015      5F627566 
 3015      66657220 
 3015      213D204E 
 3015      554C4C00 
 3016              	.LC17:
 3017 02a4 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3017      6176655F 
 3017      7365745F 
 3017      77617665 
 3017      5F706F69 
 3018 02d7 78636565 		.ascii	"xceeded\000"
 3018      64656400 
 3019 02df 00       		.space	1
 3020              	.LC18:
 3021 02e0 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3021      5F627566 
 3021      6665725F 
 3021      70747220 
 3021      213D2030 
 3022 02f5 000000   		.space	3
 3023              	.LC19:
 3024 02f8 776200   		.ascii	"wb\000"
 3025 02fb 00       		.space	1
 3026              	.LC20:
 3027 02fc 50330A00 		.ascii	"P3\012\000"
 3028              	.LC21:
 3029 0300 25642025 		.ascii	"%d %d\012\000"
 3029      640A00
 3030 0307 00       		.space	1
 3031              	.LC22:
 3032 0308 3235350A 		.ascii	"255\012\000"
 3032      00
 3033 030d 000000   		.space	3
 3034              	.LC23:
 3035 0310 25336420 		.ascii	"%3d %3d %3d\012\000"
 3035      25336420 
 3035      2533640A 
 3035      00
 3036 031d 000000   		.space	3
 3037              	.LC24:
 3038 0320 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3038      6176655F 
 3038      74657374 
 3038      5F627566 
 3038      6665725F 
 3039 0353 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3039      20627566 
 3039      66657220 
 3039      28256420 
 3039      62797465 
 3040              	.LC25:
 3041 0374 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3041      6176655F 
 3041      66696C6C 
 3041      5F706978 
 3041      6275665F 
 3042 03a7 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3042      20666169 
 3042      6C65642C 
 3042      20726574 
 3042      75726E69 
 3043 03c6 0000     		.space	2
 3044              	.LC26:
 3045 03c8 43616C63 		.ascii	"Calculating test set %d\012\000"
 3045      756C6174 
 3045      696E6720 
 3045      74657374 
 3045      20736574 
 3046              		.text
 3047              	.Letext0:
 3048              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3049              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3050              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3051              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3052              		.file 7 "/usr/include/stdio.h"
 3053              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3054              		.file 9 "/usr/include/errno.h"
 3055              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3056              		.file 11 "/usr/include/unistd.h"
 3057              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3058              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3059              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3060              		.file 15 "/usr/include/math.h"
 3061              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3062              		.file 17 "/usr/include/time.h"
 3063              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3064              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3065              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3066              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3067              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3068              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3069              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3070              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3071              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3072              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3073              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3074              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3075              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3076              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3077              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3078              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3079              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3080              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3081              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3082              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3083              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3084              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3085              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3086              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3087              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3088              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3089              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3090              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3091              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3092              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3093              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3094              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3095              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3096              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3097              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3098              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3099              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3100              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3101              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3102              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3103              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3104              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3105              		.file 60 "/usr/local/include/python3.8/context.h"
 3106              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3107              		.file 62 "/usr/local/include/python3.8/code.h"
 3108              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3109              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3110              		.file 65 "/usr/local/include/python3.8/import.h"
 3111              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3112              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3113              		.file 68 "/usr/include/malloc.h"
 3114              		.file 69 "armwave.h"
 3115              		.file 70 "/usr/include/stdlib.h"
 3116              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3117              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3118              		.file 73 "<built-in>"
 3119              		.file 74 "/usr/include/assert.h"
