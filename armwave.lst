   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 236              		.loc 1 71 40 is_stmt 0 view .LVU31
 237 009c C4C19FE5 		ldr	ip, .L27	@ tmp320,
 238              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 239              		.loc 1 63 1 view .LVU32
 240 00a0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 241              		.cfi_def_cfa_offset 36
 242              		.cfi_offset 4, -36
 243              		.cfi_offset 5, -32
 244              		.cfi_offset 6, -28
 245              		.cfi_offset 7, -24
 246              		.cfi_offset 8, -20
 247              		.cfi_offset 9, -16
 248              		.cfi_offset 10, -12
 249              		.cfi_offset 11, -8
 250              		.cfi_offset 14, -4
 251 00a4 14D04DE2 		sub	sp, sp, #20	@,,
 252              		.cfi_def_cfa_offset 56
 253              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 254              		.loc 1 71 65 view .LVU33
 255 00a8 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 256              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 257              		.loc 1 71 52 view .LVU34
 258 00ac 40509CE5 		ldr	r5, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 259              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  72:armwave.c     **** 
  73:armwave.c     ****     //printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 260              		.loc 1 79 5 view .LVU35
 261 00b0 38209CE5 		ldr	r2, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 263              		.loc 1 71 65 view .LVU36
 264 00b4 930003E0 		mul	r3, r3, r0	@ tmp217, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 265              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 266              		.loc 1 79 5 view .LVU37
 267 00b8 000052E3 		cmp	r2, #0	@ g_armwave_state.waves,
 268              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 269              		.loc 1 63 1 view .LVU38
 270 00bc 01E0A0E1 		mov	lr, r1	@ height, height
 271              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 272              		.loc 1 71 105 view .LVU39
 273 00c0 2338A0E1 		lsr	r3, r3, #16	@ tmp219, tmp217,
 274              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 275              		.loc 1 63 1 view .LVU40
 276 00c4 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 277              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 278              		.loc 1 71 52 view .LVU41
 279 00c8 950303E0 		mul	r3, r5, r3	@ tmp221, g_armwave_state.bitdepth_height, tmp219
 280              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 281              		.loc 1 71 40 view .LVU42
 282 00cc 04109CE5 		ldr	r1, [ip, #4]	@ _1, g_armwave_state.ch1_buffer
 283              	.LVL7:
 284              		.loc 1 79 5 is_stmt 1 view .LVU43
 285              		.loc 1 79 5 is_stmt 0 view .LVU44
 286 00d0 620000DA 		ble	.L11		@,
 287 00d4 00005EE3 		cmp	lr, #0	@ height,
 288 00d8 6000000A 		beq	.L11		@,
 289 00dc 8350A0E1 		lsl	r5, r3, #1	@ _8, tmp221,
 290              	.LVL8:
 291              		.loc 1 79 5 view .LVU45
 292 00e0 043040E2 		sub	r3, r0, #4	@ tmp319, slice_y,
 293 00e4 0C308DE5 		str	r3, [sp, #12]	@ tmp319, %sfp
 294              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 295              		.loc 1 79 11 view .LVU46
 296 00e8 0030A0E3 		mov	r3, #0	@ w,
 297 00ec 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 298              	.LVL9:
 299              	.L18:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 300              		.loc 1 80 9 is_stmt 1 view .LVU47
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 301              		.loc 1 84 9 view .LVU48
 302              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 303              		.loc 1 80 64 is_stmt 0 view .LVU49
 304 00f0 34309CE5 		ldr	r3, [ip, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 305 00f4 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 306 00f8 0CE09DE5 		ldr	lr, [sp, #12]	@ tmp319, %sfp
 307 00fc 14609CE5 		ldr	r6, [ip, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 308 0100 93E223E0 		mla	r3, r3, r2, lr	@ tmp230, g_armwave_state.wave_stride, w, tmp319
 309              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
 310              		.loc 1 84 16 view .LVU50
 311 0104 0000A0E3 		mov	r0, #0	@ yy,
 312 0108 036086E0 		add	r6, r6, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 313 010c 00608DE5 		str	r6, [sp]	@ ivtmp.39, %sfp
 314              	.LVL10:
 315              	.L17:
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 316              		.loc 1 87 13 is_stmt 1 view .LVU51
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 // maybe worth preloading the base address here...
  91:armwave.c     ****                 scale_value = word & 0xff;
  92:armwave.c     ****                 
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     **** 
  97:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  98:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  99:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 100:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 101:armwave.c     ****                 write_buffer = write_buffer_base + \
 317              		.loc 1 101 17 view .LVU52
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 103:armwave.c     **** 
 104:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 105:armwave.c     **** 
 106:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 318              		.loc 1 106 17 view .LVU53
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 319              		.loc 1 101 17 view .LVU54
 320              		.loc 1 106 17 view .LVU55
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 101 17 view .LVU56
 322              		.loc 1 106 17 view .LVU57
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 323              		.loc 1 101 17 view .LVU58
 324              		.loc 1 106 17 view .LVU59
 325              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 326              		.loc 1 87 18 is_stmt 0 view .LVU60
 327 0110 00209DE5 		ldr	r2, [sp]	@ ivtmp.39, %sfp
 328              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 329              		.loc 1 102 34 view .LVU61
 330 0114 019080E2 		add	r9, r0, #1	@ tmp261, yy,
 331 0118 028080E2 		add	r8, r0, #2	@ tmp283, yy,
 332              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 333              		.loc 1 87 18 view .LVU62
 334 011c 0430B2E5 		ldr	r3, [r2, #4]!	@ word, MEM[base: _187, offset: 0B]
 335              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 336              		.loc 1 102 34 view .LVU63
 337 0120 037080E2 		add	r7, r0, #3	@ tmp303, yy,
 338              	.LVL11:
 339              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 340              		.loc 1 94 20 view .LVU64
 341 0124 FFA013E2 		ands	r10, r3, #255	@ scale_value, word,
 342              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 343              		.loc 1 87 18 view .LVU65
 344 0128 00208DE5 		str	r2, [sp]	@ ivtmp.39, %sfp
 345              	.LVL12:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 346              		.loc 1 89 13 is_stmt 1 view .LVU66
  91:armwave.c     ****                 
 347              		.loc 1 91 17 view .LVU67
  94:armwave.c     ****                     continue;
 348              		.loc 1 94 17 view .LVU68
 349              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 350              		.loc 1 94 20 is_stmt 0 view .LVU69
 351 012c 0120A003 		moveq	r2, #1	@ tmp233,
 352 0130 0020A013 		movne	r2, #0	@ tmp233,
 353              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 354              		.loc 1 94 19 view .LVU70
 355 0134 FF005AE3 		cmp	r10, #255	@ scale_value,
 356 0138 01208203 		orreq	r2, r2, #1	@,, tmp238, tmp233
 357 013c 000052E3 		cmp	r2, #0	@ tmp238,
 358              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 359              		.loc 1 106 47 view .LVU71
 360 0140 05B08AE0 		add	fp, r10, r5	@ tmp246, scale_value, _8
 361              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****                 word >>= 8;
 362              		.loc 1 107 22 view .LVU72
 363 0144 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 364 0148 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 365              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 366              		.loc 1 94 19 view .LVU73
 367 014c 3900001A 		bne	.L20		@,
 368              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 369              		.loc 1 102 34 view .LVU74
 370 0150 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 371              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 372              		.loc 1 106 47 view .LVU75
 373 0154 40609CE5 		ldr	r6, [ip, #64]	@ tmp332, g_armwave_state.bitdepth_height
 374              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 375              		.loc 1 94 20 view .LVU76
 376 0158 FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 377              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 378              		.loc 1 102 34 view .LVU77
 379 015c 920002E0 		mul	r2, r2, r0	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 380              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 381              		.loc 1 106 47 view .LVU78
 382 0160 05A084E0 		add	r10, r4, r5	@ tmp268, scale_value, _8
 383              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 384              		.loc 1 102 74 view .LVU79
 385 0164 2228A0E1 		lsr	r2, r2, #16	@ tmp242, tmp240,
 386              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 387              		.loc 1 106 47 view .LVU80
 388 0168 96B222E0 		mla	r2, r6, r2, fp	@ tmp247, tmp332, tmp242, tmp246
 389              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 390              		.loc 1 94 20 view .LVU81
 391 016c 01B0A003 		moveq	fp, #1	@ tmp254,
 392 0170 00B0A013 		movne	fp, #0	@ tmp254,
 393              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 394              		.loc 1 94 19 view .LVU82
 395 0174 FF0054E3 		cmp	r4, #255	@ scale_value,
 396 0178 0B40A011 		movne	r4, fp	@, tmp259, tmp254
 397 017c 01408B03 		orreq	r4, fp, #1	@,, tmp259, tmp254
 398              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 399              		.loc 1 106 47 view .LVU83
 400 0180 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_80, *_80
 401              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 402              		.loc 1 94 19 view .LVU84
 403 0184 000054E3 		cmp	r4, #0	@ tmp259,
 404              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 405              		.loc 1 106 47 view .LVU85
 406 0188 01B08BE2 		add	fp, fp, #1	@ tmp250, *_80,
 407 018c 02B0C1E7 		strb	fp, [r1, r2]	@ tmp250, *_80
 408              	.LVL13:
 409              		.loc 1 107 17 is_stmt 1 view .LVU86
  91:armwave.c     ****                 
 410              		.loc 1 91 17 view .LVU87
  94:armwave.c     ****                     continue;
 411              		.loc 1 94 17 view .LVU88
 412              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 413              		.loc 1 94 19 is_stmt 0 view .LVU89
 414 0190 2800001A 		bne	.L20		@,
 415              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 416              		.loc 1 102 34 view .LVU90
 417 0194 24209CE5 		ldr	r2, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 418              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 419              		.loc 1 102 99 view .LVU91
 420 0198 40B09CE5 		ldr	fp, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 421              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 422              		.loc 1 94 20 view .LVU92
 423 019c FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 424              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 425              		.loc 1 102 34 view .LVU93
 426 01a0 920909E0 		mul	r9, r2, r9	@ tmp262, g_armwave_state.cmp_x_bitdepth_scale, tmp261
 427              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 428              		.loc 1 94 20 view .LVU94
 429 01a4 0120A003 		moveq	r2, #1	@ tmp276,
 430 01a8 0020A013 		movne	r2, #0	@ tmp276,
 431              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 432              		.loc 1 102 74 view .LVU95
 433 01ac 2998A0E1 		lsr	r9, r9, #16	@ tmp264, tmp262,
 434              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 435              		.loc 1 106 47 view .LVU96
 436 01b0 05408EE0 		add	r4, lr, r5	@ tmp290, scale_value, _8
 437 01b4 9BA92AE0 		mla	r10, fp, r9, r10	@ tmp269, g_armwave_state.bitdepth_height, tmp264, tmp268
 438              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 439              		.loc 1 94 19 view .LVU97
 440 01b8 FF005EE3 		cmp	lr, #255	@ scale_value,
 441 01bc 02E0A011 		movne	lr, r2	@, tmp281, tmp276
 442 01c0 01E08203 		orreq	lr, r2, #1	@,, tmp281, tmp276
 443 01c4 00005EE3 		cmp	lr, #0	@ tmp281,
 444              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 445              		.loc 1 106 47 view .LVU98
 446 01c8 0A20D1E7 		ldrb	r2, [r1, r10]	@ zero_extendqisi2	@ *_111, *_111
 447 01cc 012082E2 		add	r2, r2, #1	@ tmp272, *_111,
 448 01d0 0A20C1E7 		strb	r2, [r1, r10]	@ tmp272, *_111
 449              		.loc 1 107 17 is_stmt 1 view .LVU99
 450              	.LVL14:
  91:armwave.c     ****                 
 451              		.loc 1 91 17 view .LVU100
  94:armwave.c     ****                     continue;
 452              		.loc 1 94 17 view .LVU101
 453              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 454              		.loc 1 94 19 is_stmt 0 view .LVU102
 455 01d4 1700001A 		bne	.L20		@,
 456              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 457              		.loc 1 102 34 view .LVU103
 458 01d8 24E09CE5 		ldr	lr, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 459              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 460              		.loc 1 94 20 view .LVU104
 461 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 462              	.LVL15:
 463              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 464              		.loc 1 106 47 view .LVU105
 465 01e0 032085E0 		add	r2, r5, r3	@ tmp311, _8, word
 466              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 467              		.loc 1 102 34 view .LVU106
 468 01e4 9E0808E0 		mul	r8, lr, r8	@ tmp284, g_armwave_state.cmp_x_bitdepth_scale, tmp283
 469              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 470              		.loc 1 102 99 view .LVU107
 471 01e8 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 472              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 473              		.loc 1 102 74 view .LVU108
 474 01ec 2888A0E1 		lsr	r8, r8, #16	@ tmp286, tmp284,
 475              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 476              		.loc 1 106 47 view .LVU109
 477 01f0 9E4828E0 		mla	r8, lr, r8, r4	@ tmp291, g_armwave_state.bitdepth_height, tmp286, tmp290
 478              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 479              		.loc 1 94 20 view .LVU110
 480 01f4 01E0A003 		moveq	lr, #1	@ tmp297,
 481 01f8 00E0A013 		movne	lr, #0	@ tmp297,
 482              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 483              		.loc 1 94 19 view .LVU111
 484 01fc FF0053E3 		cmp	r3, #255	@ word,
 485 0200 01E08E03 		orreq	lr, lr, #1	@,, tmp302, tmp297
 486              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 487              		.loc 1 106 47 view .LVU112
 488 0204 0830D1E7 		ldrb	r3, [r1, r8]	@ zero_extendqisi2	@ *_142, *_142
 489              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 490              		.loc 1 94 19 view .LVU113
 491 0208 00005EE3 		cmp	lr, #0	@ tmp302,
 492              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 493              		.loc 1 106 47 view .LVU114
 494 020c 013083E2 		add	r3, r3, #1	@ tmp294, *_142,
 495 0210 0830C1E7 		strb	r3, [r1, r8]	@ tmp294, *_142
 496              		.loc 1 107 17 is_stmt 1 view .LVU115
 497              	.LVL16:
  91:armwave.c     ****                 
 498              		.loc 1 91 17 view .LVU116
  94:armwave.c     ****                     continue;
 499              		.loc 1 94 17 view .LVU117
 500              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 501              		.loc 1 94 19 is_stmt 0 view .LVU118
 502 0214 0700001A 		bne	.L20		@,
 503              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 504              		.loc 1 102 34 view .LVU119
 505 0218 24309CE5 		ldr	r3, [ip, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 506              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 507              		.loc 1 102 99 view .LVU120
 508 021c 40E09CE5 		ldr	lr, [ip, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 509              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 510              		.loc 1 102 34 view .LVU121
 511 0220 930707E0 		mul	r7, r3, r7	@ tmp305, g_armwave_state.cmp_x_bitdepth_scale, tmp303
 512              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 513              		.loc 1 102 74 view .LVU122
 514 0224 2778A0E1 		lsr	r7, r7, #16	@ tmp307, tmp305,
 515              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 516              		.loc 1 106 47 view .LVU123
 517 0228 9E2727E0 		mla	r7, lr, r7, r2	@ tmp312, g_armwave_state.bitdepth_height, tmp307, tmp311
 518 022c 0730D1E7 		ldrb	r3, [r1, r7]	@ zero_extendqisi2	@ *_173, *_173
 519 0230 013083E2 		add	r3, r3, #1	@ tmp315, *_173,
 520 0234 0730C1E7 		strb	r3, [r1, r7]	@ tmp315, *_173
 521              		.loc 1 107 17 is_stmt 1 view .LVU124
 522              	.LVL17:
 523              	.L20:
 524              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 525              		.loc 1 84 9 is_stmt 0 view .LVU125
 526 0238 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 527              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 528              		.loc 1 84 37 view .LVU126
 529 023c 040080E2 		add	r0, r0, #4	@ yy, yy,
 530              	.LVL18:
 531              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 532              		.loc 1 84 9 view .LVU127
 533 0240 000053E1 		cmp	r3, r0	@ height, yy
 534 0244 B1FFFF8A 		bhi	.L17		@,
 535              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 79 44 view .LVU128
 537 0248 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 538              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 539              		.loc 1 79 5 view .LVU129
 540 024c 38309CE5 		ldr	r3, [ip, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 541              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 542              		.loc 1 79 44 view .LVU130
 543 0250 012082E2 		add	r2, r2, #1	@ w, w,
 544              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 545              		.loc 1 79 5 view .LVU131
 546 0254 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 547              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 548              		.loc 1 79 44 view .LVU132
 549 0258 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 550              	.LVL19:
 551              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 552              		.loc 1 79 5 view .LVU133
 553 025c A3FFFFBA 		blt	.L18		@,
 554              	.LVL20:
 555              	.L11:
 556              	@ armwave.c:111: }
 108:armwave.c     ****             }
 109:armwave.c     ****         }
 110:armwave.c     ****     }
 111:armwave.c     **** }
 557              		.loc 1 111 1 view .LVU134
 558 0260 14D08DE2 		add	sp, sp, #20	@,,
 559              		.cfi_def_cfa_offset 36
 560              		@ sp needed	@
 561 0264 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 562              	.L28:
 563              		.align	2
 564              	.L27:
 565 0268 00000000 		.word	g_armwave_state
 566              		.cfi_endproc
 567              	.LFE59:
 569              		.align	2
 570              		.global	armwave_fill_pixbuf_scaled
 571              		.syntax unified
 572              		.arm
 573              		.fpu vfp
 575              	armwave_fill_pixbuf_scaled:
 576              	.LVL21:
 577              	.LFB60:
 112:armwave.c     **** 
 113:armwave.c     **** #if 0
 114:armwave.c     **** /*
 115:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 116:armwave.c     ****  */
 117:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 118:armwave.c     **** {
 119:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 120:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 121:armwave.c     ****     uint8_t r, g, b, value;
 122:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 123:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 124:armwave.c     ****     uint32_t offset;
 125:armwave.c     **** 
 126:armwave.c     ****     assert(out_buffer != NULL);
 127:armwave.c     **** 
 128:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 129:armwave.c     **** 
 130:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 131:armwave.c     **** 
 132:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 133:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 134:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 135:armwave.c     ****         // most normal waveforms.
 136:armwave.c     ****         wave_word = *base_32ptr++;
 137:armwave.c     **** 
 138:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 139:armwave.c     ****             for(i = 0; i < 4; i++) {
 140:armwave.c     ****                 value = wave_word & 0xff;
 141:armwave.c     ****                 wave_word >>= 8;
 142:armwave.c     **** 
 143:armwave.c     ****                 if(value != 0) {
 144:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 145:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 146:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 147:armwave.c     **** 
 148:armwave.c     ****                     r = MIN(rr, 255);
 149:armwave.c     ****                     g = MIN(gg, 255);
 150:armwave.c     ****                     b = MIN(bb, 255);
 151:armwave.c     **** 
 152:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 153:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 154:armwave.c     **** 
 155:armwave.c     ****                     // Is there a better way?
 156:armwave.c     ****                     nsub = n + i;
 157:armwave.c     ****                     xx = nsub & 0xff;
 158:armwave.c     ****                     yy = nsub >> 8;
 159:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 160:armwave.c     ****                     *(out_buffer_base + offset) = word;
 161:armwave.c     ****                 }
 162:armwave.c     ****             }
 163:armwave.c     ****         } 
 164:armwave.c     ****     }
 165:armwave.c     **** }
 166:armwave.c     **** #endif
 167:armwave.c     **** 
 168:armwave.c     **** /*
 169:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 170:armwave.c     ****  * Rows are repeated as necessary.
 171:armwave.c     ****  */
 172:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 173:armwave.c     **** {
 578              		.loc 1 173 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 174:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 582              		.loc 1 174 5 view .LVU136
 175:armwave.c     ****     // uint32_t ysub;
 176:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 583              		.loc 1 176 5 view .LVU137
 177:armwave.c     ****     uint8_t r, g, b, value; 
 584              		.loc 1 177 5 view .LVU138
 178:armwave.c     ****     // uint8_t row;
 179:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 585              		.loc 1 179 5 view .LVU139
 180:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 586              		.loc 1 180 5 view .LVU140
 181:armwave.c     ****     uint32_t offset;
 587              		.loc 1 181 5 view .LVU141
 182:armwave.c     **** 
 183:armwave.c     ****     assert(out_buffer != NULL);
 588              		.loc 1 183 5 view .LVU142
 589              	@ armwave.c:173: {
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 590              		.loc 1 173 1 is_stmt 0 view .LVU143
 591 026c F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 592              		.cfi_def_cfa_offset 24
 593              		.cfi_offset 4, -24
 594              		.cfi_offset 5, -20
 595              		.cfi_offset 6, -16
 596              		.cfi_offset 7, -12
 597              		.cfi_offset 8, -8
 598              		.cfi_offset 14, -4
 599              	@ armwave.c:183:     assert(out_buffer != NULL);
 600              		.loc 1 183 5 view .LVU144
 601 0270 004050E2 		subs	r4, r0, #0	@ out_buffer, out_buffer
 602 0274 3100000A 		beq	.L39		@,
 184:armwave.c     **** 
 185:armwave.c     ****     // we don't really want to be doing this if possible
 186:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 603              		.loc 1 186 5 is_stmt 1 view .LVU145
 604              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 605              		.loc 1 186 45 is_stmt 0 view .LVU146
 606 0278 D4609FE5 		ldr	r6, .L40	@ tmp213,
 607              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 608              		.loc 1 186 5 view .LVU147
 609 027c 0010A0E3 		mov	r1, #0	@,
 610              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 611              		.loc 1 186 59 view .LVU148
 612 0280 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 613 0284 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 614 0288 920302E0 		mul	r2, r2, r3	@ tmp170, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 186 5 view .LVU149
 617 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp170,
 618 0290 FEFFFFEB 		bl	memset		@
 619              	.LVL22:
 187:armwave.c     **** 
 188:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 620              		.loc 1 188 5 is_stmt 1 view .LVU150
 621              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 622              		.loc 1 188 10 is_stmt 0 view .LVU151
 623 0294 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 0298 400096E5 		ldr	r0, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 625 029c 900300E0 		mul	r0, r0, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 626              	.LVL23:
 189:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 190:armwave.c     **** 
 191:armwave.c     **** #if 0
 192:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 193:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 194:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 195:armwave.c     ****         // most normal waveforms.
 196:armwave.c     ****         wave_word = *base_32ptr++;
 197:armwave.c     **** 
 198:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 199:armwave.c     ****             for(w = 0; w < 2; w++) {
 200:armwave.c     ****                 value = wave_word & 0xffff;
 201:armwave.c     ****                 wave_word >>= 16;
 202:armwave.c     **** 
 203:armwave.c     ****                 if(value != 0) {
 204:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 205:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 206:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 207:armwave.c     **** 
 208:armwave.c     ****                     r = MIN(rr, 255);
 209:armwave.c     ****                     g = MIN(gg, 255);
 210:armwave.c     ****                     b = MIN(bb, 255);
 211:armwave.c     **** 
 212:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 213:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 214:armwave.c     **** 
 215:armwave.c     ****                     // Plot the pixels
 216:armwave.c     ****                     nsub = n + (w * 2);
 217:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 218:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 219:armwave.c     ****                     xx = (nsub >> 8);
 220:armwave.c     **** 
 221:armwave.c     ****                     for(y = yy; y < ye; y++) {
 222:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 223:armwave.c     ****                         *(out_buffer_base + offset) = word;
 224:armwave.c     ****                     }
 225:armwave.c     ****                 }
 226:armwave.c     ****             }
 227:armwave.c     ****         }
 228:armwave.c     ****     }
 229:armwave.c     **** #endif
 230:armwave.c     **** 
 231:armwave.c     ****     for(n = 0; n < (npix / 2); n += 1) {
 627              		.loc 1 231 5 is_stmt 1 view .LVU152
 628              		.loc 1 231 5 is_stmt 0 view .LVU153
 629 02a0 010050E3 		cmp	r0, #1	@ npix,
 630              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 631              		.loc 1 231 26 view .LVU154
 632 02a4 A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp183, npix, npix,
 633              	.LVL24:
 634              		.loc 1 231 26 view .LVU155
 635 02a8 C000A0E1 		asr	r0, r0, #1	@ _63, tmp183,
 636              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 637              		.loc 1 231 5 view .LVU156
 638 02ac F081BDD8 		pople	{r4, r5, r6, r7, r8, pc}	@
 639 02b0 041096E5 		ldr	r1, [r6, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 640              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 232:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 233:armwave.c     ****         value = wave_word & 0xffff;
 234:armwave.c     **** 
 235:armwave.c     ****         if(value != 0) {
 236:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 641              		.loc 1 236 44 view .LVU157
 642 02b4 FC56D6E1 		ldrsh	r5, [r6, #108]	@ _13, g_armwave_state.ch1_color.r
 643              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 644              		.loc 1 237 44 view .LVU158
 645 02b8 FEE6D6E1 		ldrsh	lr, [r6, #110]	@ _17, g_armwave_state.ch1_color.g
 646              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 647              		.loc 1 238 44 view .LVU159
 648 02bc F0C7D6E1 		ldrsh	ip, [r6, #112]	@ _20, g_armwave_state.ch1_color.b
 649 02c0 021041E2 		sub	r1, r1, #2	@ ivtmp.49, g_armwave_state.ch1_buffer,
 650              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 651              		.loc 1 231 11 view .LVU160
 652 02c4 0020A0E3 		mov	r2, #0	@ n,
 653              	.LVL25:
 654              	.L33:
 232:armwave.c     ****         value = wave_word & 0xffff;
 655              		.loc 1 232 9 is_stmt 1 view .LVU161
 233:armwave.c     **** 
 656              		.loc 1 233 9 view .LVU162
 657              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 658              		.loc 1 233 15 is_stmt 0 view .LVU163
 659 02c8 B230F1E1 		ldrh	r3, [r1, #2]!	@ MEM[base: _91, offset: 0B], MEM[base: _91, offset: 0B]
 660              	.LVL26:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 661              		.loc 1 235 9 is_stmt 1 view .LVU164
 662              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 663              		.loc 1 235 11 is_stmt 0 view .LVU165
 664 02cc FF6013E2 		ands	r6, r3, #255	@ value, MEM[base: _91, offset: 0B],
 665 02d0 1600000A 		beq	.L32		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 666              		.loc 1 236 13 is_stmt 1 view .LVU166
 667              	.LVL27:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 668              		.loc 1 237 13 view .LVU167
 669              		.loc 1 238 13 view .LVU168
 239:armwave.c     **** 
 240:armwave.c     ****             r = MIN(rr, 255);
 670              		.loc 1 240 13 view .LVU169
 241:armwave.c     ****             g = MIN(gg, 255);
 671              		.loc 1 241 13 view .LVU170
 242:armwave.c     ****             b = MIN(bb, 255);
 672              		.loc 1 242 13 view .LVU171
 243:armwave.c     **** 
 244:armwave.c     ****             // Ensure 100% alpha channel, if it is used
 245:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 673              		.loc 1 245 13 view .LVU172
 246:armwave.c     **** 
 247:armwave.c     ****             // Plot the pixels
 248:armwave.c     ****             nsub = n * 2;
 674              		.loc 1 248 13 view .LVU173
 249:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 675              		.loc 1 249 13 view .LVU174
 250:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 676              		.loc 1 250 13 view .LVU175
 251:armwave.c     ****             xx = (nsub >> 8);
 677              		.loc 1 251 13 view .LVU176
 252:armwave.c     **** 
 253:armwave.c     ****             //for(y = yy; y < ye; y++) {
 254:armwave.c     ****             {
 255:armwave.c     ****                 offset = (xx + (y * g_armwave_state.target_width)); 
 678              		.loc 1 255 17 view .LVU177
 256:armwave.c     ****                 *(out_buffer_base + offset) = word;
 679              		.loc 1 256 17 view .LVU178
 680              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 681              		.loc 1 238 47 is_stmt 0 view .LVU179
 682 02d4 860C63E1 		smulbb	r3, r6, ip	@ tmp199, value, _20
 683              	.LVL28:
 684              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 685              		.loc 1 237 47 view .LVU180
 686 02d8 860E67E1 		smulbb	r7, r6, lr	@ tmp203, value, _17
 687              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 688              		.loc 1 236 47 view .LVU181
 689 02dc 860566E1 		smulbb	r6, r6, r5	@ tmp209, value, _13
 690              	.LVL29:
 691              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 692              		.loc 1 238 16 view .LVU182
 693 02e0 4334A0E1 		asr	r3, r3, #8	@ bb, tmp199,
 694              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 695              		.loc 1 242 17 view .LVU183
 696 02e4 FF0053E3 		cmp	r3, #255	@ bb,
 697              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 698              		.loc 1 237 16 view .LVU184
 699 02e8 4774A0E1 		asr	r7, r7, #8	@ gg, tmp203,
 700              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 701              		.loc 1 242 17 view .LVU185
 702 02ec FF30A0A3 		movge	r3, #255	@ bb,
 703              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 704              		.loc 1 241 17 view .LVU186
 705 02f0 FF0057E3 		cmp	r7, #255	@ gg,
 706 02f4 FF70A0A3 		movge	r7, #255	@ gg,
 707              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 708              		.loc 1 236 16 view .LVU187
 709 02f8 4664A0E1 		asr	r6, r6, #8	@ rr, tmp209,
 710              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 711              		.loc 1 240 17 view .LVU188
 712 02fc FF0056E3 		cmp	r6, #255	@ rr,
 713              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 714              		.loc 1 245 48 view .LVU189
 715 0300 0774A0E1 		lsl	r7, r7, #8	@ tmp204, gg,
 716              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 717              		.loc 1 245 36 view .LVU190
 718 0304 0338A0E1 		lsl	r3, r3, #16	@ tmp200, bb,
 719              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 720              		.loc 1 240 17 view .LVU191
 721 0308 FF60A0A3 		movge	r6, #255	@ rr,
 722              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 723              		.loc 1 245 36 view .LVU192
 724 030c FF3803E2 		and	r3, r3, #16711680	@ tmp201, tmp200,
 725              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 726              		.loc 1 245 48 view .LVU193
 727 0310 7770FFE6 		uxth	r7, r7	@ tmp205, tmp204
 728              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 729              		.loc 1 248 18 view .LVU194
 730 0314 8280A0E1 		lsl	r8, r2, #1	@ nsub, n,
 731              	.LVL30:
 732              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 733              		.loc 1 245 54 view .LVU195
 734 0318 7660EFE6 		uxtb	r6, r6	@ rr, rr
 735              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 736              		.loc 1 245 43 view .LVU196
 737 031c 073083E1 		orr	r3, r3, r7	@ tmp207, tmp201, tmp205
 738              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 739              		.loc 1 245 54 view .LVU197
 740 0320 063083E1 		orr	r3, r3, r6	@ tmp211, tmp207, rr
 741              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 742              		.loc 1 256 35 view .LVU198
 743 0324 4864A0E1 		asr	r6, r8, #8	@ tmp197, nsub,
 744              	.LVL31:
 745              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 746              		.loc 1 245 18 view .LVU199
 747 0328 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp211,
 748              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 749              		.loc 1 256 45 view .LVU200
 750 032c 063184E7 		str	r3, [r4, r6, lsl #2]	@ word, *_38
 751              	.LVL32:
 752              	.L32:
 753              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 754              		.loc 1 231 34 discriminator 2 view .LVU201
 755 0330 012082E2 		add	r2, r2, #1	@ n, n,
 756              	.LVL33:
 757              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 758              		.loc 1 231 5 discriminator 2 view .LVU202
 759 0334 000052E1 		cmp	r2, r0	@ n, _63
 760 0338 E2FFFFBA 		blt	.L33		@,
 761 033c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 762              	.LVL34:
 763              	.L39:
 183:armwave.c     **** 
 764              		.loc 1 183 5 is_stmt 1 discriminator 1 view .LVU203
 765 0340 10309FE5 		ldr	r3, .L40+4	@,
 766 0344 B720A0E3 		mov	r2, #183	@,
 767 0348 0C109FE5 		ldr	r1, .L40+8	@,
 768 034c 0C009FE5 		ldr	r0, .L40+12	@,
 769              	.LVL35:
 183:armwave.c     **** 
 770              		.loc 1 183 5 is_stmt 0 discriminator 1 view .LVU204
 771 0350 FEFFFFEB 		bl	__assert_fail		@
 772              	.LVL36:
 773              	.L41:
 183:armwave.c     **** 
 774              		.loc 1 183 5 discriminator 1 view .LVU205
 775              		.align	2
 776              	.L40:
 777 0354 00000000 		.word	g_armwave_state
 778 0358 00000000 		.word	.LANCHOR0
 779 035c 20000000 		.word	.LC2
 780 0360 2C000000 		.word	.LC3
 781              		.cfi_endproc
 782              	.LFE60:
 784              		.global	__aeabi_idiv
 785              		.align	2
 786              		.global	armwave_generate
 787              		.syntax unified
 788              		.arm
 789              		.fpu vfp
 791              	armwave_generate:
 792              	.LFB61:
 257:armwave.c     ****             }
 258:armwave.c     ****         }
 259:armwave.c     ****     }
 260:armwave.c     **** }
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_generate()
 266:armwave.c     **** {
 793              		.loc 1 266 1 is_stmt 1 view -0
 794              		.cfi_startproc
 795              		@ args = 0, pretend = 0, frame = 16
 796              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t yy;
 797              		.loc 1 267 5 view .LVU207
 268:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 798              		.loc 1 268 5 view .LVU208
 799              	.LVL37:
 269:armwave.c     **** 
 270:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 800              		.loc 1 270 5 view .LVU209
 801              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t yy;
 802              		.loc 1 266 1 is_stmt 0 view .LVU210
 803 0364 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 804              		.cfi_def_cfa_offset 36
 805              		.cfi_offset 4, -36
 806              		.cfi_offset 5, -32
 807              		.cfi_offset 6, -28
 808              		.cfi_offset 7, -24
 809              		.cfi_offset 8, -20
 810              		.cfi_offset 9, -16
 811              		.cfi_offset 10, -12
 812              		.cfi_offset 11, -8
 813              		.cfi_offset 14, -4
 814              	@ armwave.c:270:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 815              		.loc 1 270 5 view .LVU211
 816 0368 0010A0E3 		mov	r1, #0	@,
 817              	@ armwave.c:270:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 818              		.loc 1 270 58 view .LVU212
 819 036c 14829FE5 		ldr	r8, .L61	@ tmp342,
 820              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t yy;
 821              		.loc 1 266 1 view .LVU213
 822 0370 14D04DE2 		sub	sp, sp, #20	@,,
 823              		.cfi_def_cfa_offset 56
 824              	@ armwave.c:270:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 825              		.loc 1 270 5 view .LVU214
 826 0374 502098E5 		ldr	r2, [r8, #80]	@, g_armwave_state.ch_buff_size
 827 0378 040098E5 		ldr	r0, [r8, #4]	@, g_armwave_state.ch1_buffer
 828 037c FEFFFFEB 		bl	memset		@
 829              	.LVL38:
 271:armwave.c     **** 
 272:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 830              		.loc 1 272 5 is_stmt 1 view .LVU215
 831              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 832              		.loc 1 272 68 is_stmt 0 view .LVU216
 833 0380 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 834              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 835              		.loc 1 272 38 view .LVU217
 836 0384 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 837              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 838              		.loc 1 272 51 view .LVU218
 839 0388 0310A0E1 		mov	r1, r3	@, _35
 840 038c 0500A0E1 		mov	r0, r5	@, prephitmp_229
 841              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 842              		.loc 1 272 68 view .LVU219
 843 0390 00308DE5 		str	r3, [sp]	@ _35, %sfp
 844              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 845              		.loc 1 272 51 view .LVU220
 846 0394 FEFFFFEB 		bl	__aeabi_idiv		@
 847              	.LVL39:
 848              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 849              		.loc 1 272 5 view .LVU221
 850 0398 000050E3 		cmp	r0, #0	@,
 851 039c 7700000A 		beq	.L42		@,
 852 03a0 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 853              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 854              		.loc 1 272 12 view .LVU222
 855 03a4 0030A0E3 		mov	r3, #0	@ yy,
 856 03a8 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 857              	.LVL40:
 858              	.L51:
 273:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 274:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 275:armwave.c     **** 
 276:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 859              		.loc 1 276 9 is_stmt 1 discriminator 3 view .LVU223
 860 03ac D020CDE1 		ldrd	r2, [sp]	@, %sfp
 861              	.LBB10:
 862              	.LBB11:
 863              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 864              		.loc 1 71 52 is_stmt 0 discriminator 3 view .LVU224
 865 03b0 400098E5 		ldr	r0, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 866              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 867              		.loc 1 79 5 discriminator 3 view .LVU225
 868 03b4 000054E3 		cmp	r4, #0	@ prephitmp_239,
 869              	.LBE11:
 870              	.LBE10:
 871              	@ armwave.c:276:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 872              		.loc 1 276 9 discriminator 3 view .LVU226
 873 03b8 930202E0 		mul	r2, r3, r2	@ _5, yy, _35
 874              	.LVL41:
 875              	.LBB13:
 876              	.LBI10:
  62:armwave.c     **** {
 877              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU227
 878              	.LBB12:
  64:armwave.c     ****     uint32_t value, word;
 879              		.loc 1 64 5 discriminator 3 view .LVU228
  65:armwave.c     ****     uint8_t *wave_base;
 880              		.loc 1 65 5 discriminator 3 view .LVU229
  66:armwave.c     ****     uint8_t *write_buffer_base;
 881              		.loc 1 66 5 discriminator 3 view .LVU230
  67:armwave.c     ****     uint8_t *write_buffer;
 882              		.loc 1 67 5 discriminator 3 view .LVU231
  68:armwave.c     **** 
 883              		.loc 1 68 5 discriminator 3 view .LVU232
  71:armwave.c     **** 
 884              		.loc 1 71 5 discriminator 3 view .LVU233
 885              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 886              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU234
 887 03bc 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 888              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 889              		.loc 1 71 40 discriminator 3 view .LVU235
 890 03c0 041098E5 		ldr	r1, [r8, #4]	@ _16, g_armwave_state.ch1_buffer
 891              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 892              		.loc 1 71 65 discriminator 3 view .LVU236
 893 03c4 930203E0 		mul	r3, r3, r2	@ tmp239, g_armwave_state.cmp_x_bitdepth_scale, _5
 894              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 895              		.loc 1 71 105 discriminator 3 view .LVU237
 896 03c8 2338A0E1 		lsr	r3, r3, #16	@ tmp241, tmp239,
 897              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 898              		.loc 1 71 52 discriminator 3 view .LVU238
 899 03cc 900300E0 		mul	r0, r0, r3	@ tmp243, g_armwave_state.bitdepth_height, tmp241
 900 03d0 8000A0E1 		lsl	r0, r0, #1	@ _23, tmp243,
 901              	.LVL42:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 79 5 is_stmt 1 discriminator 3 view .LVU239
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 903              		.loc 1 79 5 is_stmt 0 discriminator 3 view .LVU240
 904 03d4 610000DA 		ble	.L44		@,
 905              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 79 11 view .LVU241
 907 03d8 0070A0E3 		mov	r7, #0	@ w,
 908 03dc 043042E2 		sub	r3, r2, #4	@ _32, _5,
 909 03e0 08308DE5 		str	r3, [sp, #8]	@ _32, %sfp
 910              	.LVL43:
 911              	.L50:
  80:armwave.c     **** 
 912              		.loc 1 80 9 is_stmt 1 view .LVU242
 913              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 914              		.loc 1 84 9 is_stmt 0 view .LVU243
 915 03e4 00209DE5 		ldr	r2, [sp]	@ _35, %sfp
 916              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 917              		.loc 1 80 64 view .LVU244
 918 03e8 343098E5 		ldr	r3, [r8, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 919              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 920              		.loc 1 84 9 view .LVU245
 921 03ec 000052E3 		cmp	r2, #0	@ _35,
 922              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 923              		.loc 1 80 36 view .LVU246
 924 03f0 142098E5 		ldr	r2, [r8, #20]	@ _24, g_armwave_state.wave_buffer
 925              	@ armwave.c:80:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  80:armwave.c     **** 
 926              		.loc 1 80 64 view .LVU247
 927 03f4 930703E0 		mul	r3, r3, r7	@ _28, g_armwave_state.wave_stride, w
 928              	.LVL44:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 929              		.loc 1 84 9 is_stmt 1 view .LVU248
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 930              		.loc 1 84 9 is_stmt 0 view .LVU249
 931 03f8 5200000A 		beq	.L45		@,
 932 03fc 08C09DE5 		ldr	ip, [sp, #8]	@ _32, %sfp
 933 0400 0C3083E0 		add	r3, r3, ip	@ tmp248, _28, _32
 934              	.LVL45:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 935              		.loc 1 84 9 view .LVU250
 936 0404 036082E0 		add	r6, r2, r3	@ ivtmp.56, _24, tmp248
 937              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 938              		.loc 1 84 16 view .LVU251
 939 0408 00C0A0E3 		mov	ip, #0	@ yy,
 940              	.LVL46:
 941              	.L49:
  87:armwave.c     **** 
 942              		.loc 1 87 13 is_stmt 1 view .LVU252
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 943              		.loc 1 101 17 view .LVU253
 106:armwave.c     ****                 word >>= 8;
 944              		.loc 1 106 17 view .LVU254
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 945              		.loc 1 101 17 view .LVU255
 106:armwave.c     ****                 word >>= 8;
 946              		.loc 1 106 17 view .LVU256
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 947              		.loc 1 101 17 view .LVU257
 106:armwave.c     ****                 word >>= 8;
 948              		.loc 1 106 17 view .LVU258
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 949              		.loc 1 101 17 view .LVU259
 106:armwave.c     ****                 word >>= 8;
 950              		.loc 1 106 17 view .LVU260
 951              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 952              		.loc 1 87 18 is_stmt 0 view .LVU261
 953 040c 0430B6E5 		ldr	r3, [r6, #4]!	@ word, MEM[base: _272, offset: 0B]
 954              	.LVL47:
  89:armwave.c     ****                 // maybe worth preloading the base address here...
 955              		.loc 1 89 13 is_stmt 1 view .LVU262
  91:armwave.c     ****                 
 956              		.loc 1 91 17 view .LVU263
  94:armwave.c     ****                     continue;
 957              		.loc 1 94 17 view .LVU264
 958              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 959              		.loc 1 102 34 is_stmt 0 view .LVU265
 960 0410 01A08CE2 		add	r10, ip, #1	@ tmp278, yy,
 961              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 962              		.loc 1 94 20 view .LVU266
 963 0414 FF9013E2 		ands	r9, r3, #255	@ scale_value, word,
 964 0418 0120A003 		moveq	r2, #1	@ tmp250,
 965 041c 0020A013 		movne	r2, #0	@ tmp250,
 966              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 967              		.loc 1 94 19 view .LVU267
 968 0420 FF0059E3 		cmp	r9, #255	@ scale_value,
 969 0424 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 970              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 971              		.loc 1 107 22 view .LVU268
 972 0428 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 973              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 974              		.loc 1 94 19 view .LVU269
 975 042c 000052E3 		cmp	r2, #0	@ tmp255,
 976              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 977              		.loc 1 102 34 view .LVU270
 978 0430 02508CE2 		add	r5, ip, #2	@ tmp300, yy,
 979              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 980              		.loc 1 106 47 view .LVU271
 981 0434 00B089E0 		add	fp, r9, r0	@ tmp263, scale_value, _23
 982              	@ armwave.c:107:                 word >>= 8;
 107:armwave.c     ****             }
 983              		.loc 1 107 22 view .LVU272
 984 0438 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 985 043c 0CE08DE5 		str	lr, [sp, #12]	@ word, %sfp
 986              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 987              		.loc 1 94 19 view .LVU273
 988 0440 3B00001A 		bne	.L53		@,
 989              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 990              		.loc 1 102 34 view .LVU274
 991 0444 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 992              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 993              		.loc 1 106 47 view .LVU275
 994 0448 40E098E5 		ldr	lr, [r8, #64]	@ tmp362, g_armwave_state.bitdepth_height
 995              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 996              		.loc 1 94 20 view .LVU276
 997 044c FF4014E2 		ands	r4, r4, #255	@ scale_value, word,
 998              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 999              		.loc 1 102 34 view .LVU277
 1000 0450 920C02E0 		mul	r2, r2, ip	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1001              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1002              		.loc 1 106 47 view .LVU278
 1003 0454 009084E0 		add	r9, r4, r0	@ tmp285, scale_value, _23
 1004              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1005              		.loc 1 102 74 view .LVU279
 1006 0458 2228A0E1 		lsr	r2, r2, #16	@ tmp259, tmp257,
 1007              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1008              		.loc 1 106 47 view .LVU280
 1009 045c 9EB222E0 		mla	r2, lr, r2, fp	@ tmp264, tmp362, tmp259, tmp263
 1010              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1011              		.loc 1 94 20 view .LVU281
 1012 0460 01B0A003 		moveq	fp, #1	@ tmp271,
 1013 0464 00B0A013 		movne	fp, #0	@ tmp271,
 1014              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1015              		.loc 1 94 19 view .LVU282
 1016 0468 FF0054E3 		cmp	r4, #255	@ scale_value,
 1017 046c 0B40A011 		movne	r4, fp	@, tmp276, tmp271
 1018 0470 01408B03 		orreq	r4, fp, #1	@,, tmp276, tmp271
 1019              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1020              		.loc 1 106 47 view .LVU283
 1021 0474 02B0D1E7 		ldrb	fp, [r1, r2]	@ zero_extendqisi2	@ *_91, *_91
 1022              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1023              		.loc 1 94 19 view .LVU284
 1024 0478 000054E3 		cmp	r4, #0	@ tmp276,
 1025              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1026              		.loc 1 106 47 view .LVU285
 1027 047c 01B08BE2 		add	fp, fp, #1	@ tmp267, *_91,
 1028 0480 02B0C1E7 		strb	fp, [r1, r2]	@ tmp267, *_91
 1029              	.LVL48:
 107:armwave.c     ****             }
 1030              		.loc 1 107 17 is_stmt 1 view .LVU286
  91:armwave.c     ****                 
 1031              		.loc 1 91 17 view .LVU287
  94:armwave.c     ****                     continue;
 1032              		.loc 1 94 17 view .LVU288
 1033              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1034              		.loc 1 94 19 is_stmt 0 view .LVU289
 1035 0484 2A00001A 		bne	.L53		@,
 1036              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1037              		.loc 1 102 34 view .LVU290
 1038 0488 242098E5 		ldr	r2, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1039              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1040              		.loc 1 102 99 view .LVU291
 1041 048c 40B098E5 		ldr	fp, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1042              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1043              		.loc 1 94 20 view .LVU292
 1044 0490 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 1045              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1046              		.loc 1 102 34 view .LVU293
 1047 0494 920A0AE0 		mul	r10, r2, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1048              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1049              		.loc 1 94 20 view .LVU294
 1050 0498 FFE01EE2 		ands	lr, lr, #255	@ scale_value, word,
 1051 049c 0120A003 		moveq	r2, #1	@ tmp293,
 1052              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1053              		.loc 1 102 74 view .LVU295
 1054 04a0 2AA8A0E1 		lsr	r10, r10, #16	@ tmp281, tmp279,
 1055              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1056              		.loc 1 94 20 view .LVU296
 1057 04a4 0020A013 		movne	r2, #0	@ tmp293,
 1058              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1059              		.loc 1 106 47 view .LVU297
 1060 04a8 9B9A29E0 		mla	r9, fp, r10, r9	@ tmp286, g_armwave_state.bitdepth_height, tmp281, tmp285
 1061 04ac 00408EE0 		add	r4, lr, r0	@ tmp307, scale_value, _23
 1062              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1063              		.loc 1 94 19 view .LVU298
 1064 04b0 FF005EE3 		cmp	lr, #255	@ scale_value,
 1065 04b4 02E0A011 		movne	lr, r2	@, tmp298, tmp293
 1066 04b8 01E08203 		orreq	lr, r2, #1	@,, tmp298, tmp293
 1067              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1068              		.loc 1 106 47 view .LVU299
 1069 04bc 0920D1E7 		ldrb	r2, [r1, r9]	@ zero_extendqisi2	@ *_122, *_122
 1070              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1071              		.loc 1 94 19 view .LVU300
 1072 04c0 00005EE3 		cmp	lr, #0	@ tmp298,
 1073              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1074              		.loc 1 106 47 view .LVU301
 1075 04c4 012082E2 		add	r2, r2, #1	@ tmp289, *_122,
 1076 04c8 0920C1E7 		strb	r2, [r1, r9]	@ tmp289, *_122
 107:armwave.c     ****             }
 1077              		.loc 1 107 17 is_stmt 1 view .LVU302
 1078              	.LVL49:
  91:armwave.c     ****                 
 1079              		.loc 1 91 17 view .LVU303
  94:armwave.c     ****                     continue;
 1080              		.loc 1 94 17 view .LVU304
 1081              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1082              		.loc 1 94 19 is_stmt 0 view .LVU305
 1083 04cc 1800001A 		bne	.L53		@,
 1084              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1085              		.loc 1 102 34 view .LVU306
 1086 04d0 24E098E5 		ldr	lr, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1087              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1088              		.loc 1 94 20 view .LVU307
 1089 04d4 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1090              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1091              		.loc 1 106 47 view .LVU308
 1092 04d8 032080E0 		add	r2, r0, r3	@ tmp328, _23, word
 1093              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1094              		.loc 1 102 34 view .LVU309
 1095 04dc 9E0505E0 		mul	r5, lr, r5	@ tmp301, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 1096              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1097              		.loc 1 102 99 view .LVU310
 1098 04e0 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1099              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1100              		.loc 1 102 74 view .LVU311
 1101 04e4 2558A0E1 		lsr	r5, r5, #16	@ tmp303, tmp301,
 1102              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1103              		.loc 1 106 47 view .LVU312
 1104 04e8 9E4525E0 		mla	r5, lr, r5, r4	@ tmp308, g_armwave_state.bitdepth_height, tmp303, tmp307
 1105              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1106              		.loc 1 94 20 view .LVU313
 1107 04ec 01E0A003 		moveq	lr, #1	@ tmp314,
 1108 04f0 00E0A013 		movne	lr, #0	@ tmp314,
 1109              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1110              		.loc 1 94 19 view .LVU314
 1111 04f4 FF0053E3 		cmp	r3, #255	@ word,
 1112 04f8 01E08E03 		orreq	lr, lr, #1	@,, tmp319, tmp314
 1113              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1114              		.loc 1 106 47 view .LVU315
 1115 04fc 0530D1E7 		ldrb	r3, [r1, r5]	@ zero_extendqisi2	@ *_153, *_153
 1116              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1117              		.loc 1 94 19 view .LVU316
 1118 0500 00005EE3 		cmp	lr, #0	@ tmp319,
 1119              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1120              		.loc 1 106 47 view .LVU317
 1121 0504 013083E2 		add	r3, r3, #1	@ tmp311, *_153,
 1122 0508 0530C1E7 		strb	r3, [r1, r5]	@ tmp311, *_153
 107:armwave.c     ****             }
 1123              		.loc 1 107 17 is_stmt 1 view .LVU318
 1124              	.LVL50:
  91:armwave.c     ****                 
 1125              		.loc 1 91 17 view .LVU319
  94:armwave.c     ****                     continue;
 1126              		.loc 1 94 17 view .LVU320
 1127              	@ armwave.c:94:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
 1128              		.loc 1 94 19 is_stmt 0 view .LVU321
 1129 050c 0800001A 		bne	.L53		@,
 1130              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1131              		.loc 1 102 34 view .LVU322
 1132 0510 243098E5 		ldr	r3, [r8, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1133 0514 03408CE2 		add	r4, ip, #3	@ tmp321, yy,
 1134              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1135              		.loc 1 102 99 view .LVU323
 1136 0518 40E098E5 		ldr	lr, [r8, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1137              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1138              		.loc 1 102 34 view .LVU324
 1139 051c 930403E0 		mul	r3, r3, r4	@ tmp322, g_armwave_state.cmp_x_bitdepth_scale, tmp321
 1140              	@ armwave.c:102:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 102:armwave.c     **** 
 1141              		.loc 1 102 74 view .LVU325
 1142 0520 2338A0E1 		lsr	r3, r3, #16	@ tmp324, tmp322,
 1143              	@ armwave.c:106:                 *(write_buffer + scale_value) += 1;
 106:armwave.c     ****                 word >>= 8;
 1144              		.loc 1 106 47 view .LVU326
 1145 0524 9E2323E0 		mla	r3, lr, r3, r2	@ tmp329, g_armwave_state.bitdepth_height, tmp324, tmp328
 1146 0528 0320D1E7 		ldrb	r2, [r1, r3]	@ zero_extendqisi2	@ *_184, *_184
 1147 052c 012082E2 		add	r2, r2, #1	@ tmp332, *_184,
 1148 0530 0320C1E7 		strb	r2, [r1, r3]	@ tmp332, *_184
 107:armwave.c     ****             }
 1149              		.loc 1 107 17 is_stmt 1 view .LVU327
 1150              	.LVL51:
 1151              	.L53:
 1152              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1153              		.loc 1 84 9 is_stmt 0 view .LVU328
 1154 0534 00309DE5 		ldr	r3, [sp]	@ _35, %sfp
 1155              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1156              		.loc 1 84 37 view .LVU329
 1157 0538 04C08CE2 		add	ip, ip, #4	@ yy, yy,
 1158              	.LVL52:
 1159              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1160              		.loc 1 84 9 view .LVU330
 1161 053c 0C0053E1 		cmp	r3, ip	@ _35, yy
 1162 0540 B1FFFF8A 		bhi	.L49		@,
 1163 0544 384098E5 		ldr	r4, [r8, #56]	@ prephitmp_239, g_armwave_state.waves
 1164              	.LVL53:
 1165              	.L45:
 1166              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1167              		.loc 1 79 44 view .LVU331
 1168 0548 017087E2 		add	r7, r7, #1	@ w, w,
 1169              	.LVL54:
 1170              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1171              		.loc 1 79 5 view .LVU332
 1172 054c 040057E1 		cmp	r7, r4	@ w, prephitmp_239
 1173 0550 A3FFFFBA 		blt	.L50		@,
 1174 0554 4C5098E5 		ldr	r5, [r8, #76]	@ prephitmp_229, g_armwave_state.wave_length
 1175 0558 443098E5 		ldr	r3, [r8, #68]	@ _35, g_armwave_state.slice_height
 1176 055c 00308DE5 		str	r3, [sp]	@ _35, %sfp
 1177              	.LVL55:
 1178              	.L44:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1179              		.loc 1 79 5 view .LVU333
 1180              	.LBE12:
 1181              	.LBE13:
 277:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1182              		.loc 1 277 9 is_stmt 1 discriminator 3 view .LVU334
 278:armwave.c     ****         ypos += g_armwave_state.slice_height;
 1183              		.loc 1 278 9 discriminator 3 view .LVU335
 1184              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1185              		.loc 1 272 51 is_stmt 0 discriminator 3 view .LVU336
 1186 0560 00109DE5 		ldr	r1, [sp]	@, %sfp
 1187              	.LVL56:
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1188              		.loc 1 272 51 discriminator 3 view .LVU337
 1189 0564 0500A0E1 		mov	r0, r5	@, prephitmp_229
 1190 0568 FEFFFFEB 		bl	__aeabi_idiv		@
 1191              	.LVL57:
 1192              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1193              		.loc 1 272 86 discriminator 3 view .LVU338
 1194 056c 04309DE5 		ldr	r3, [sp, #4]	@ yy, %sfp
 1195 0570 013083E2 		add	r3, r3, #1	@ yy, yy,
 1196 0574 04308DE5 		str	r3, [sp, #4]	@ yy, %sfp
 1197              	.LVL58:
 1198              	@ armwave.c:272:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 272:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1199              		.loc 1 272 5 discriminator 3 view .LVU339
 1200 0578 030050E1 		cmp	r0, r3	@, yy
 1201 057c 8AFFFF8A 		bhi	.L51		@,
 1202              	.LVL59:
 1203              	.L42:
 1204              	@ armwave.c:282: }
 279:armwave.c     ****     }
 280:armwave.c     **** 
 281:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 282:armwave.c     **** }
 1205              		.loc 1 282 1 view .LVU340
 1206 0580 14D08DE2 		add	sp, sp, #20	@,,
 1207              		.cfi_def_cfa_offset 36
 1208              		@ sp needed	@
 1209 0584 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1210              	.L62:
 1211              		.align	2
 1212              	.L61:
 1213 0588 00000000 		.word	g_armwave_state
 1214              		.cfi_endproc
 1215              	.LFE61:
 1217              		.align	2
 1218              		.global	armwave_setup_render
 1219              		.syntax unified
 1220              		.arm
 1221              		.fpu vfp
 1223              	armwave_setup_render:
 1224              	.LVL60:
 1225              	.LFB62:
 283:armwave.c     **** 
 284:armwave.c     **** /*
 285:armwave.c     ****  * Setup the renderer with passed parameters.
 286:armwave.c     ****  */
 287:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 288:armwave.c     **** {
 1226              		.loc 1 288 1 is_stmt 1 view -0
 1227              		.cfi_startproc
 1228              		@ args = 12, pretend = 0, frame = 0
 1229              		@ frame_needed = 0, uses_anonymous_args = 0
 289:armwave.c     ****     uint32_t length, xx;
 1230              		.loc 1 289 5 view .LVU342
 290:armwave.c     ****     float points_per_pixel;
 1231              		.loc 1 290 5 view .LVU343
 291:armwave.c     **** 
 292:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1232              		.loc 1 292 5 view .LVU344
 1233              	@ armwave.c:288: {
 288:armwave.c     ****     uint32_t length, xx;
 1234              		.loc 1 288 1 is_stmt 0 view .LVU345
 1235 058c F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1236              		.cfi_def_cfa_offset 28
 1237              		.cfi_offset 4, -28
 1238              		.cfi_offset 5, -24
 1239              		.cfi_offset 6, -20
 1240              		.cfi_offset 7, -16
 1241              		.cfi_offset 8, -12
 1242              		.cfi_offset 9, -8
 1243              		.cfi_offset 14, -4
 1244 0590 028B2DED 		vpush.64	{d8}	@
 1245              		.cfi_def_cfa_offset 36
 1246              		.cfi_offset 80, -36
 1247              		.cfi_offset 81, -32
 1248 0594 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1249 0598 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1250 059c 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1251 05a0 14D04DE2 		sub	sp, sp, #20	@,,
 1252              		.cfi_def_cfa_offset 56
 1253              	@ armwave.c:288: {
 288:armwave.c     ****     uint32_t length, xx;
 1254              		.loc 1 288 1 view .LVU346
 1255 05a4 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1256 05a8 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1257 05ac 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1258              	@ armwave.c:292:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1259              		.loc 1 292 5 view .LVU347
 1260 05b0 00308DE5 		str	r3, [sp]	@ wave_stride,
 1261 05b4 F460CDE1 		strd	r6, [sp, #4]	@,,
 1262 05b8 0230A0E1 		mov	r3, r2	@, waves_max
 1263              	.LVL61:
 1264              		.loc 1 292 5 view .LVU348
 1265 05bc 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1266 05c0 0120A0E1 		mov	r2, r1	@, end_point
 1267              	.LVL62:
 1268              		.loc 1 292 5 view .LVU349
 1269 05c4 0010A0E1 		mov	r1, r0	@, start_point
 1270              	.LVL63:
 1271              		.loc 1 292 5 view .LVU350
 1272 05c8 E0019FE5 		ldr	r0, .L77+12	@,
 1273              	.LVL64:
 1274              		.loc 1 292 5 view .LVU351
 1275 05cc FEFFFFEB 		bl	printf		@
 1276              	.LVL65:
 293:armwave.c     **** 
 294:armwave.c     ****     // TODO these asserts should instead raise PyExc
 295:armwave.c     ****     assert(start_point < end_point);
 1277              		.loc 1 295 5 is_stmt 1 view .LVU352
 1278 05d0 050054E1 		cmp	r4, r5	@ start_point, end_point
 1279 05d4 6300002A 		bcs	.L74		@,
 296:armwave.c     **** 
 297:armwave.c     ****     /*
 298:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 299:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 300:armwave.c     ****     if(target_height == 256) {
 301:armwave.c     ****         g_armwave_state.row_shift = 8;
 302:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 303:armwave.c     ****     } else if(target_height == 512) {
 304:armwave.c     ****         g_armwave_state.row_shift = 9;
 305:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 306:armwave.c     ****     } else if(target_height == 1024) {
 307:armwave.c     ****         g_armwave_state.row_shift = 10;
 308:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 309:armwave.c     ****     } else if(target_height == 2048) {
 310:armwave.c     ****         g_armwave_state.row_shift = 11;
 311:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 312:armwave.c     ****     }
 313:armwave.c     ****     */
 314:armwave.c     **** 
 315:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 316:armwave.c     ****     g_armwave_state.xstride = target_height;
 1280              		.loc 1 316 5 view .LVU353
 1281              	@ armwave.c:327:     g_armwave_state.wave_length = end_point - start_point;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 318:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 319:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 320:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 321:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 322:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 323:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 324:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 325:armwave.c     ****     g_armwave_state.target_width = target_width;
 326:armwave.c     ****     g_armwave_state.target_height = target_height;
 327:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1282              		.loc 1 327 45 is_stmt 0 view .LVU354
 1283 05d8 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1284              	.LVL66:
 1285              	@ armwave.c:317:     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1286              		.loc 1 317 49 view .LVU355
 1287 05dc 706A9FED 		vldr.32	s12, .L77	@ tmp175,
 1288              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 328:armwave.c     **** 
 329:armwave.c     ****     // Calculate compound scaler
 330:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 331:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1289              		.loc 1 331 48 view .LVU356
 1290 05e0 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1291              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1292              		.loc 1 331 79 view .LVU357
 1293 05e4 6F6ADFED 		vldr.32	s13, .L77+4	@ tmp199,
 1294              	@ armwave.c:324:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 1295              		.loc 1 324 90 view .LVU358
 1296 05e8 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1297              	@ armwave.c:316:     g_armwave_state.xstride = target_height;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1298              		.loc 1 316 29 view .LVU359
 1299 05ec C0419FE5 		ldr	r4, .L77+16	@ tmp241,
 1300              	.LVL67:
 1301              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1302              		.loc 1 331 48 view .LVU360
 1303 05f0 E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1304              	@ armwave.c:317:     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1305              		.loc 1 317 49 view .LVU361
 1306 05f4 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1307              	@ armwave.c:322:     g_armwave_state.size = target_height * target_width;
 322:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1308              		.loc 1 322 42 view .LVU362
 1309 05f8 970601E0 		mul	r1, r7, r6	@ tmp183, target_height, target_width
 1310              	@ armwave.c:324:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 1311              		.loc 1 324 95 view .LVU363
 1312 05fc 833383E0 		add	r3, r3, r3, lsl #7	@ tmp189, tmp186, tmp186,
 1313              	@ armwave.c:317:     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1314              		.loc 1 317 49 view .LVU364
 1315 0600 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1316              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1317              		.loc 1 331 48 view .LVU365
 1318 0604 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1319              	@ armwave.c:333:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 332:armwave.c     **** 
 333:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1320              		.loc 1 333 5 view .LVU366
 1321 0608 0128A0E3 		mov	r2, #65536	@ tmp202,
 1322 060c 04508DE5 		str	r5, [sp, #4]	@ _13,
 1323 0610 00608DE5 		str	r6, [sp]	@ target_width,
 1324              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 331:armwave.c     **** 
 1325              		.loc 1 331 48 view .LVU367
 1326 0614 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1327              	@ armwave.c:324:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 1328              		.loc 1 324 95 view .LVU368
 1329 0618 8331A0E1 		lsl	r3, r3, #3	@ tmp190, tmp189,
 1330              	@ armwave.c:316:     g_armwave_state.xstride = target_height;
 316:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1331              		.loc 1 316 29 view .LVU369
 1332 061c 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1333              		.loc 1 317 5 is_stmt 1 view .LVU370
 1334              	@ armwave.c:319:     g_armwave_state.wave_stride = wave_stride;
 319:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1335              		.loc 1 319 33 is_stmt 0 view .LVU371
 1336 0620 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1337              	@ armwave.c:320:     g_armwave_state.waves_max = waves_max;
 320:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1338              		.loc 1 320 31 view .LVU372
 1339 0624 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1340              	@ armwave.c:321:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 321:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1341              		.loc 1 321 27 view .LVU373
 1342 0628 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1343              	@ armwave.c:326:     g_armwave_state.target_height = target_height;
 326:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1344              		.loc 1 326 35 view .LVU374
 1345 062c F865C4E1 		strd	r6, [r4, #88]	@, tmp241,
 1346              	@ armwave.c:333:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1347              		.loc 1 333 5 view .LVU375
 1348 0630 08208DE5 		str	r2, [sp, #8]	@ tmp202,
 1349              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 331:armwave.c     **** 
 1350              		.loc 1 331 48 view .LVU376
 1351 0634 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1352              	@ armwave.c:323:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 323:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1353              		.loc 1 323 37 view .LVU377
 1354 0638 022CA0E3 		mov	r2, #512	@ tmp185,
 1355              	@ armwave.c:322:     g_armwave_state.size = target_height * target_width;
 322:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1356              		.loc 1 322 26 view .LVU378
 1357 063c 541084E5 		str	r1, [r4, #84]	@ tmp183, g_armwave_state.size
 1358              	@ armwave.c:323:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 323:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1359              		.loc 1 323 37 view .LVU379
 1360 0640 402084E5 		str	r2, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1361              	@ armwave.c:333:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1362              		.loc 1 333 5 view .LVU380
 1363 0644 0310A0E1 		mov	r1, r3	@, tmp190
 1364              	@ armwave.c:324:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 1365              		.loc 1 324 34 view .LVU381
 1366 0648 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1367              	@ armwave.c:327:     g_armwave_state.wave_length = end_point - start_point;
 327:armwave.c     **** 
 1368              		.loc 1 327 33 view .LVU382
 1369 064c 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1370              	@ armwave.c:333:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1371              		.loc 1 333 5 view .LVU383
 1372 0650 60019FE5 		ldr	r0, .L77+20	@,
 1373              	@ armwave.c:317:     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1374              		.loc 1 317 49 view .LVU384
 1375 0654 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1376              	@ armwave.c:331:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 331:armwave.c     **** 
 1377              		.loc 1 331 79 view .LVU385
 1378 0658 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1379              	@ armwave.c:330:     g_armwave_state.cmp_x_bitdepth_scale = \
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1380              		.loc 1 330 42 view .LVU386
 1381 065c E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1382              	@ armwave.c:317:     g_armwave_state.vscale_frac = target_height / 255.0f;
 317:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1383              		.loc 1 317 33 view .LVU387
 1384 0660 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 318:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1385              		.loc 1 318 5 is_stmt 1 view .LVU388
 1386              	@ armwave.c:330:     g_armwave_state.cmp_x_bitdepth_scale = \
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1387              		.loc 1 330 42 is_stmt 0 view .LVU389
 1388 0664 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1389              	@ armwave.c:318:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 318:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1390              		.loc 1 318 30 view .LVU390
 1391 0668 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1392              	@ armwave.c:333:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1393              		.loc 1 333 5 view .LVU391
 1394 066c 0C30A0E1 		mov	r3, ip	@, _19
 1395 0670 0C20A0E1 		mov	r2, ip	@, tmp3
 1396              	@ armwave.c:330:     g_armwave_state.cmp_x_bitdepth_scale = \
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1397              		.loc 1 330 42 view .LVU392
 1398 0674 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1399              	@ armwave.c:318:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 318:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1400              		.loc 1 318 30 view .LVU393
 1401 0678 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 319:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1402              		.loc 1 319 5 is_stmt 1 view .LVU394
 320:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1403              		.loc 1 320 5 view .LVU395
 321:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1404              		.loc 1 321 5 view .LVU396
 322:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1405              		.loc 1 322 5 view .LVU397
 323:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1406              		.loc 1 323 5 view .LVU398
 324:armwave.c     ****     g_armwave_state.target_width = target_width;
 1407              		.loc 1 324 5 view .LVU399
 325:armwave.c     ****     g_armwave_state.target_height = target_height;
 1408              		.loc 1 325 5 view .LVU400
 326:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1409              		.loc 1 326 5 view .LVU401
 327:armwave.c     **** 
 1410              		.loc 1 327 5 view .LVU402
 330:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1411              		.loc 1 330 5 view .LVU403
 1412              		.loc 1 333 5 view .LVU404
 1413 067c FEFFFFEB 		bl	printf		@
 1414              	.LVL68:
 334:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 335:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 336:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 337:armwave.c     **** 
 338:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 339:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 340:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 341:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1415              		.loc 1 341 5 view .LVU405
 1416              	@ armwave.c:343:     if(g_armwave_state.ch1_buffer != NULL)
 342:armwave.c     **** 
 343:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1417              		.loc 1 343 23 is_stmt 0 view .LVU406
 1418 0680 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1419              	@ armwave.c:341:     g_armwave_state.slice_height = 256; // 64;  
 341:armwave.c     **** 
 1420              		.loc 1 341 34 view .LVU407
 1421 0684 013CA0E3 		mov	r3, #256	@ tmp204,
 1422              	@ armwave.c:343:     if(g_armwave_state.ch1_buffer != NULL)
 1423              		.loc 1 343 7 view .LVU408
 1424 0688 000050E3 		cmp	r0, #0	@ _20,
 1425              	@ armwave.c:341:     g_armwave_state.slice_height = 256; // 64;  
 341:armwave.c     **** 
 1426              		.loc 1 341 34 view .LVU409
 1427 068c 443084E5 		str	r3, [r4, #68]	@ tmp204, g_armwave_state.slice_height
 1428              		.loc 1 343 5 is_stmt 1 view .LVU410
 1429              	@ armwave.c:343:     if(g_armwave_state.ch1_buffer != NULL)
 1430              		.loc 1 343 7 is_stmt 0 view .LVU411
 1431 0690 0000000A 		beq	.L65		@,
 344:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1432              		.loc 1 344 9 is_stmt 1 view .LVU412
 1433 0694 FEFFFFEB 		bl	free		@
 1434              	.LVL69:
 1435              	.L65:
 345:armwave.c     **** 
 346:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1436              		.loc 1 346 5 view .LVU413
 1437              	@ armwave.c:346:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1438              		.loc 1 346 34 is_stmt 0 view .LVU414
 1439 0698 0110A0E3 		mov	r1, #1	@,
 1440 069c 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1441 06a0 FEFFFFEB 		bl	calloc		@
 1442              	.LVL70:
 1443              	@ armwave.c:348:     assert(g_armwave_state.ch1_buffer != NULL);
 347:armwave.c     **** 
 348:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1444              		.loc 1 348 5 view .LVU415
 1445 06a4 000050E3 		cmp	r0, #0	@ _23,
 1446              	@ armwave.c:346:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 346:armwave.c     **** 
 1447              		.loc 1 346 34 view .LVU416
 1448 06a8 0070A0E1 		mov	r7, r0	@ _23,
 1449              	@ armwave.c:346:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 346:armwave.c     **** 
 1450              		.loc 1 346 32 view .LVU417
 1451 06ac 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1452              		.loc 1 348 5 is_stmt 1 view .LVU418
 1453 06b0 3600000A 		beq	.L75		@,
 349:armwave.c     **** 
 350:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 351:armwave.c     ****     length = end_point - start_point;
 1454              		.loc 1 351 5 view .LVU419
 1455              	.LVL71:
 352:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1456              		.loc 1 352 5 view .LVU420
 1457              	@ armwave.c:352:     points_per_pixel = length / ((float)(target_width));
 1458              		.loc 1 352 34 is_stmt 0 view .LVU421
 1459 06b4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1460              	@ armwave.c:352:     points_per_pixel = length / ((float)(target_width));
 1461              		.loc 1 352 22 view .LVU422
 1462 06b8 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1463              	@ armwave.c:353:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 353:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1464              		.loc 1 353 60 view .LVU423
 1465 06bc 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1466              	@ armwave.c:354:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 354:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1467              		.loc 1 354 40 view .LVU424
 1468 06c0 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1469              	@ armwave.c:352:     points_per_pixel = length / ((float)(target_width));
 352:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1470              		.loc 1 352 34 view .LVU425
 1471 06c4 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1472              	@ armwave.c:352:     points_per_pixel = length / ((float)(target_width));
 352:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1473              		.loc 1 352 22 view .LVU426
 1474 06c8 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1475              	@ armwave.c:353:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 353:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1476              		.loc 1 353 60 view .LVU427
 1477 06cc C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1478              	@ armwave.c:352:     points_per_pixel = length / ((float)(target_width));
 352:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1479              		.loc 1 352 22 view .LVU428
 1480 06d0 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1481              	.LVL72:
 353:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1482              		.loc 1 353 5 is_stmt 1 view .LVU429
 1483              	@ armwave.c:353:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 353:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1484              		.loc 1 353 60 is_stmt 0 view .LVU430
 1485 06d4 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1486              	@ armwave.c:353:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 353:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1487              		.loc 1 353 41 view .LVU431
 1488 06d8 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1489 06dc 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1490              		.loc 1 354 5 is_stmt 1 view .LVU432
 1491              	@ armwave.c:354:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1492              		.loc 1 354 40 is_stmt 0 view .LVU433
 1493 06e0 FEFFFFEB 		bl	malloc		@
 1494              	.LVL73:
 1495              	@ armwave.c:356:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 355:armwave.c     **** 
 356:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1496              		.loc 1 356 5 view .LVU434
 1497 06e4 000050E3 		cmp	r0, #0	@ _31,
 1498              	@ armwave.c:354:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 354:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1499              		.loc 1 354 40 view .LVU435
 1500 06e8 0060A0E1 		mov	r6, r0	@ _31,
 1501              	@ armwave.c:354:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 354:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1502              		.loc 1 354 38 view .LVU436
 1503 06ec 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1504              		.loc 1 356 5 is_stmt 1 view .LVU437
 1505 06f0 2100000A 		beq	.L76		@,
 1506              	@ armwave.c:359:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 357:armwave.c     **** 
 358:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 359:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1507              		.loc 1 359 54 is_stmt 0 view .LVU438
 1508 06f4 2C7ADFED 		vldr.32	s15, .L77+8	@ tmp229,
 1509 06f8 020040E2 		sub	r0, r0, #2	@ ivtmp.68, _31,
 1510              	@ armwave.c:358:     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1511              		.loc 1 358 12 view .LVU439
 1512 06fc 0030A0E3 		mov	r3, #0	@ xx,
 1513              	@ armwave.c:359:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1514              		.loc 1 359 54 view .LVU440
 1515 0700 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp229, points_per_pixel
 1516              	.L68:
 1517              	.LVL74:
 1518              		.loc 1 359 9 is_stmt 1 discriminator 3 view .LVU441
 1519              	@ armwave.c:359:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1520              		.loc 1 359 74 is_stmt 0 discriminator 3 view .LVU442
 1521 0704 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1522              	@ armwave.c:358:     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1523              		.loc 1 358 32 discriminator 3 view .LVU443
 1524 0708 013083E2 		add	r3, r3, #1	@ xx, xx,
 1525              	.LVL75:
 1526              	@ armwave.c:358:     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1527              		.loc 1 358 5 discriminator 3 view .LVU444
 1528 070c 030055E1 		cmp	r5, r3	@ _13, xx
 1529              	@ armwave.c:359:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1530              		.loc 1 359 74 discriminator 3 view .LVU445
 1531 0710 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp230, xx
 1532 0714 877A67EE 		vmul.f32	s15, s15, s14	@ tmp231, tmp230, _32
 1533              	@ armwave.c:359:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1534              		.loc 1 359 46 discriminator 3 view .LVU446
 1535 0718 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp232, tmp231
 1536 071c 902A17EE 		vmov	r2, s15	@ int	@ tmp232, tmp232
 1537 0720 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp232, MEM[base: _101, offset: 0B]
 1538              	@ armwave.c:358:     for(xx = 0; xx < length; xx++) {
 358:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1539              		.loc 1 358 5 discriminator 3 view .LVU447
 1540 0724 F6FFFF1A 		bne	.L68		@,
 360:armwave.c     **** 
 361:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 362:armwave.c     ****     }
 363:armwave.c     **** 
 364:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1541              		.loc 1 364 5 is_stmt 1 view .LVU448
 1542              	@ armwave.c:364:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1543              		.loc 1 364 34 is_stmt 0 view .LVU449
 1544 0728 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1545 072c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1546 0730 FEFFFFEB 		bl	malloc		@
 1547              	.LVL76:
 1548              	@ armwave.c:366:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 365:armwave.c     **** 
 366:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1549              		.loc 1 366 5 view .LVU450
 1550 0734 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1551 0738 0620A0E1 		mov	r2, r6	@, _31
 1552 073c 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1553 0740 0710A0E1 		mov	r1, r7	@, _23
 1554              	@ armwave.c:364:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 364:armwave.c     **** 
 1555              		.loc 1 364 34 view .LVU451
 1556 0744 00C0A0E1 		mov	ip, r0	@ tmp236,
 1557              	@ armwave.c:366:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1558              		.loc 1 366 5 view .LVU452
 1559 0748 0030A0E1 		mov	r3, r0	@, tmp236
 1560              	@ armwave.c:364:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 364:armwave.c     **** 
 1561              		.loc 1 364 32 view .LVU453
 1562 074c 68C084E5 		str	ip, [r4, #104]	@ tmp236, g_armwave_state.out_pixbuf
 1563              		.loc 1 366 5 is_stmt 1 view .LVU454
 1564 0750 64009FE5 		ldr	r0, .L77+24	@,
 1565 0754 FEFFFFEB 		bl	printf		@
 1566              	.LVL77:
 367:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 368:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 369:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 370:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 371:armwave.c     **** 
 372:armwave.c     ****     malloc_stats();
 1567              		.loc 1 372 5 view .LVU455
 1568              	@ armwave.c:373: }
 373:armwave.c     **** }
 1569              		.loc 1 373 1 is_stmt 0 view .LVU456
 1570 0758 14D08DE2 		add	sp, sp, #20	@,,
 1571              		.cfi_remember_state
 1572              		.cfi_def_cfa_offset 36
 1573              		@ sp needed	@
 1574 075c 028BBDEC 		vldm	sp!, {d8}	@
 1575              		.cfi_restore 80
 1576              		.cfi_restore 81
 1577              		.cfi_def_cfa_offset 28
 1578              	.LVL78:
 1579              		.loc 1 373 1 view .LVU457
 1580 0760 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1581              		.cfi_restore 14
 1582              		.cfi_restore 9
 1583              		.cfi_restore 8
 1584              		.cfi_restore 7
 1585              		.cfi_restore 6
 1586              		.cfi_restore 5
 1587              		.cfi_restore 4
 1588              		.cfi_def_cfa_offset 0
 1589              	.LVL79:
 1590              	@ armwave.c:372:     malloc_stats();
 372:armwave.c     **** }
 1591              		.loc 1 372 5 view .LVU458
 1592 0764 FEFFFFEA 		b	malloc_stats		@
 1593              	.LVL80:
 1594              	.L74:
 1595              		.cfi_restore_state
 295:armwave.c     **** 
 1596              		.loc 1 295 5 is_stmt 1 discriminator 1 view .LVU459
 1597 0768 50309FE5 		ldr	r3, .L77+28	@,
 1598 076c 50209FE5 		ldr	r2, .L77+32	@,
 1599 0770 50109FE5 		ldr	r1, .L77+36	@,
 1600 0774 50009FE5 		ldr	r0, .L77+40	@,
 1601 0778 FEFFFFEB 		bl	__assert_fail		@
 1602              	.LVL81:
 1603              	.L76:
 356:armwave.c     **** 
 1604              		.loc 1 356 5 discriminator 1 view .LVU460
 1605 077c 3C309FE5 		ldr	r3, .L77+28	@,
 1606 0780 592FA0E3 		mov	r2, #356	@,
 1607 0784 3C109FE5 		ldr	r1, .L77+36	@,
 1608 0788 40009FE5 		ldr	r0, .L77+44	@,
 1609 078c FEFFFFEB 		bl	__assert_fail		@
 1610              	.LVL82:
 1611              	.L75:
 348:armwave.c     **** 
 1612              		.loc 1 348 5 discriminator 1 view .LVU461
 1613 0790 28309FE5 		ldr	r3, .L77+28	@,
 1614 0794 572FA0E3 		mov	r2, #348	@,
 1615 0798 28109FE5 		ldr	r1, .L77+36	@,
 1616 079c 30009FE5 		ldr	r0, .L77+48	@,
 1617 07a0 FEFFFFEB 		bl	__assert_fail		@
 1618              	.LVL83:
 1619              	.L78:
 1620              		.align	2
 1621              	.L77:
 1622 07a4 00007F43 		.word	1132396544
 1623 07a8 00008047 		.word	1199570944
 1624 07ac 0000803F 		.word	1065353216
 1625 07b0 40000000 		.word	.LC4
 1626 07b4 00000000 		.word	g_armwave_state
 1627 07b8 84000000 		.word	.LC6
 1628 07bc 34010000 		.word	.LC9
 1629 07c0 1C000000 		.word	.LANCHOR0+28
 1630 07c4 27010000 		.word	295
 1631 07c8 20000000 		.word	.LC2
 1632 07cc 6C000000 		.word	.LC5
 1633 07d0 08010000 		.word	.LC8
 1634 07d4 E4000000 		.word	.LC7
 1635              		.cfi_endproc
 1636              	.LFE62:
 1638              		.align	2
 1639              		.global	armwave_set_wave_pointer
 1640              		.syntax unified
 1641              		.arm
 1642              		.fpu vfp
 1644              	armwave_set_wave_pointer:
 1645              	.LVL84:
 1646              	.LFB63:
 374:armwave.c     **** 
 375:armwave.c     **** /*
 376:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 377:armwave.c     ****  * in the future.
 378:armwave.c     ****  */
 379:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 380:armwave.c     **** {
 1647              		.loc 1 380 1 view -0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 0, uses_anonymous_args = 0
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1651              		.loc 1 381 5 view .LVU463
 1652 07d8 000050E3 		cmp	r0, #0	@ wave_buffer
 1653              		.loc 1 381 5 is_stmt 0 view .LVU464
 1654 07dc 0200000A 		beq	.L84		@,
 382:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1655              		.loc 1 382 5 is_stmt 1 view .LVU465
 1656              	@ armwave.c:382:     g_armwave_state.wave_buffer = wave_buffer;
 1657              		.loc 1 382 33 is_stmt 0 view .LVU466
 1658 07e0 1C309FE5 		ldr	r3, .L85	@ tmp116,
 1659 07e4 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1660 07e8 1EFF2FE1 		bx	lr	@
 1661              	.L84:
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1662              		.loc 1 381 5 is_stmt 1 discriminator 1 view .LVU467
 1663              	@ armwave.c:380: {
 380:armwave.c     ****     assert(wave_buffer != NULL);
 1664              		.loc 1 380 1 is_stmt 0 discriminator 1 view .LVU468
 1665 07ec 10402DE9 		push	{r4, lr}	@
 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 4, -8
 1668              		.cfi_offset 14, -4
 1669              	@ armwave.c:381:     assert(wave_buffer != NULL);
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1670              		.loc 1 381 5 discriminator 1 view .LVU469
 1671 07f0 10309FE5 		ldr	r3, .L85+4	@,
 1672 07f4 10209FE5 		ldr	r2, .L85+8	@,
 1673 07f8 10109FE5 		ldr	r1, .L85+12	@,
 1674 07fc 10009FE5 		ldr	r0, .L85+16	@,
 1675              	.LVL85:
 381:armwave.c     ****     assert(wave_buffer != NULL);
 1676              		.loc 1 381 5 discriminator 1 view .LVU470
 1677 0800 FEFFFFEB 		bl	__assert_fail		@
 1678              	.LVL86:
 1679              	.L86:
 1680              		.align	2
 1681              	.L85:
 1682 0804 00000000 		.word	g_armwave_state
 1683 0808 34000000 		.word	.LANCHOR0+52
 1684 080c 7D010000 		.word	381
 1685 0810 20000000 		.word	.LC2
 1686 0814 58010000 		.word	.LC10
 1687              		.cfi_endproc
 1688              	.LFE63:
 1690              		.align	2
 1691              		.global	armwave_set_wave_pointer_as_testbuf
 1692              		.syntax unified
 1693              		.arm
 1694              		.fpu vfp
 1696              	armwave_set_wave_pointer_as_testbuf:
 1697              	.LVL87:
 1698              	.LFB64:
 383:armwave.c     **** }
 384:armwave.c     **** 
 385:armwave.c     **** /*
 386:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 387:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 390:armwave.c     **** {
 1699              		.loc 1 390 1 is_stmt 1 view -0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703              		@ link register save eliminated.
 391:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1704              		.loc 1 391 5 view .LVU472
 1705              	@ armwave.c:391:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1706              		.loc 1 391 29 is_stmt 0 view .LVU473
 1707 0818 24309FE5 		ldr	r3, .L90	@ tmp117,
 1708              	@ armwave.c:391:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1709              		.loc 1 391 7 view .LVU474
 1710 081c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1711 0820 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1712 0824 0400003A 		bcc	.L89		@,
 392:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 393:armwave.c     ****         return;
 394:armwave.c     ****     }
 395:armwave.c     **** 
 396:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1713              		.loc 1 396 5 is_stmt 1 view .LVU475
 1714              	@ armwave.c:396:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1715              		.loc 1 396 111 is_stmt 0 view .LVU476
 1716 0828 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1717              	@ armwave.c:396:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1718              		.loc 1 396 68 view .LVU477
 1719 082c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1720 0830 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1721              	.LVL88:
 1722              	@ armwave.c:396:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1723              		.loc 1 396 33 view .LVU478
 1724 0834 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1725              	@ armwave.c:397: }
 397:armwave.c     **** }
 1726              		.loc 1 397 1 view .LVU479
 1727 0838 1EFF2FE1 		bx	lr	@
 1728              	.LVL89:
 1729              	.L89:
 392:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1730              		.loc 1 392 9 is_stmt 1 view .LVU480
 1731 083c 04009FE5 		ldr	r0, .L90+4	@,
 1732              	.LVL90:
 392:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1733              		.loc 1 392 9 is_stmt 0 view .LVU481
 1734 0840 FEFFFFEA 		b	puts		@
 1735              	.LVL91:
 1736              	.L91:
 1737              		.align	2
 1738              	.L90:
 1739 0844 00000000 		.word	g_armwave_state
 1740 0848 6C010000 		.word	.LC11
 1741              		.cfi_endproc
 1742              	.LFE64:
 1744              		.align	2
 1745              		.global	armwave_set_wave_pointer_u32
 1746              		.syntax unified
 1747              		.arm
 1748              		.fpu vfp
 1750              	armwave_set_wave_pointer_u32:
 1751              	.LVL92:
 1752              	.LFB65:
 398:armwave.c     **** 
 399:armwave.c     **** /*
 400:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 401:armwave.c     ****  * disjointed buffers in the future.
 402:armwave.c     ****  */
 403:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 404:armwave.c     **** {
 1753              		.loc 1 404 1 is_stmt 1 view -0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 0
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1757              		.loc 1 405 5 view .LVU483
 1758 084c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1759              		.loc 1 405 5 is_stmt 0 view .LVU484
 1760 0850 0200000A 		beq	.L97		@,
 406:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1761              		.loc 1 406 5 is_stmt 1 view .LVU485
 1762              	@ armwave.c:406:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1763              		.loc 1 406 33 is_stmt 0 view .LVU486
 1764 0854 1C309FE5 		ldr	r3, .L98	@ tmp117,
 1765 0858 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1766 085c 1EFF2FE1 		bx	lr	@
 1767              	.L97:
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1768              		.loc 1 405 5 is_stmt 1 discriminator 1 view .LVU487
 1769              	@ armwave.c:404: {
 404:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1770              		.loc 1 404 1 is_stmt 0 discriminator 1 view .LVU488
 1771 0860 10402DE9 		push	{r4, lr}	@
 1772              		.cfi_def_cfa_offset 8
 1773              		.cfi_offset 4, -8
 1774              		.cfi_offset 14, -4
 1775              	@ armwave.c:405:     assert(wave_buffer_ptr != 0);
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1776              		.loc 1 405 5 discriminator 1 view .LVU489
 1777 0864 10309FE5 		ldr	r3, .L98+4	@,
 1778 0868 10209FE5 		ldr	r2, .L98+8	@,
 1779 086c 10109FE5 		ldr	r1, .L98+12	@,
 1780 0870 10009FE5 		ldr	r0, .L98+16	@,
 1781              	.LVL93:
 405:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1782              		.loc 1 405 5 discriminator 1 view .LVU490
 1783 0874 FEFFFFEB 		bl	__assert_fail		@
 1784              	.LVL94:
 1785              	.L99:
 1786              		.align	2
 1787              	.L98:
 1788 0878 00000000 		.word	g_armwave_state
 1789 087c 50000000 		.word	.LANCHOR0+80
 1790 0880 95010000 		.word	405
 1791 0884 20000000 		.word	.LC2
 1792 0888 A8010000 		.word	.LC12
 1793              		.cfi_endproc
 1794              	.LFE65:
 1796              		.align	2
 1797              		.global	armwave_clear_buffer
 1798              		.syntax unified
 1799              		.arm
 1800              		.fpu vfp
 1802              	armwave_clear_buffer:
 1803              	.LVL95:
 1804              	.LFB66:
 407:armwave.c     **** }
 408:armwave.c     **** 
 409:armwave.c     **** /*
 410:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 411:armwave.c     ****  */
 412:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 413:armwave.c     **** {
 1805              		.loc 1 413 1 is_stmt 1 view -0
 1806              		.cfi_startproc
 1807              		@ args = 0, pretend = 0, frame = 0
 1808              		@ frame_needed = 0, uses_anonymous_args = 0
 1809              		@ link register save eliminated.
 414:armwave.c     ****     // Flags ignored, only one buffer cleared
 415:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1810              		.loc 1 415 5 view .LVU492
 1811              	@ armwave.c:415:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1812              		.loc 1 415 58 is_stmt 0 view .LVU493
 1813 088c 0C309FE5 		ldr	r3, .L101	@ tmp114,
 1814              	@ armwave.c:415:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1815              		.loc 1 415 5 view .LVU494
 1816 0890 0010A0E3 		mov	r1, #0	@,
 1817 0894 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1818 0898 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1819              	.LVL96:
 1820              		.loc 1 415 5 view .LVU495
 1821 089c FEFFFFEA 		b	memset		@
 1822              	.LVL97:
 1823              	.L102:
 1824              		.align	2
 1825              	.L101:
 1826 08a0 00000000 		.word	g_armwave_state
 1827              		.cfi_endproc
 1828              	.LFE66:
 1830              		.align	2
 1831              		.global	armwave_set_channel_colour
 1832              		.syntax unified
 1833              		.arm
 1834              		.fpu vfp
 1836              	armwave_set_channel_colour:
 1837              	.LVL98:
 1838              	.LFB67:
 416:armwave.c     **** }
 417:armwave.c     **** 
 418:armwave.c     **** /*
 419:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 420:armwave.c     ****  */
 421:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 422:armwave.c     **** {
 1839              		.loc 1 422 1 is_stmt 1 view -0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 0
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843              		@ link register save eliminated.
 423:armwave.c     ****     // Only 1ch supported for now
 424:armwave.c     ****     switch(ch) {
 1844              		.loc 1 424 5 view .LVU497
 1845 08a4 010050E3 		cmp	r0, #1	@ ch,
 425:armwave.c     ****         case 1:
 426:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1846              		.loc 1 426 13 view .LVU498
 1847              	@ armwave.c:426:             g_armwave_state.ch1_color.r = r;
 1848              		.loc 1 426 41 is_stmt 0 view .LVU499
 1849 08a8 0C009F05 		ldreq	r0, .L105	@ tmp117,
 1850              	.LVL99:
 1851              		.loc 1 426 41 view .LVU500
 1852 08ac BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 427:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1853              		.loc 1 427 13 is_stmt 1 view .LVU501
 1854              	@ armwave.c:427:             g_armwave_state.ch1_color.g = g;
 1855              		.loc 1 427 41 is_stmt 0 view .LVU502
 1856 08b0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 428:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1857              		.loc 1 428 13 is_stmt 1 view .LVU503
 1858              	@ armwave.c:428:             g_armwave_state.ch1_color.b = b;
 1859              		.loc 1 428 41 is_stmt 0 view .LVU504
 1860 08b4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 429:armwave.c     ****             break;
 1861              		.loc 1 429 13 is_stmt 1 view .LVU505
 1862              	@ armwave.c:431: }
 430:armwave.c     ****     }
 431:armwave.c     **** }
 1863              		.loc 1 431 1 is_stmt 0 view .LVU506
 1864 08b8 1EFF2FE1 		bx	lr	@
 1865              	.L106:
 1866              		.align	2
 1867              	.L105:
 1868 08bc 00000000 		.word	g_armwave_state
 1869              		.cfi_endproc
 1870              	.LFE67:
 1872              		.align	2
 1873              		.global	armwave_dump_ppm_debug
 1874              		.syntax unified
 1875              		.arm
 1876              		.fpu vfp
 1878              	armwave_dump_ppm_debug:
 1879              	.LVL100:
 1880              	.LFB68:
 432:armwave.c     **** 
 433:armwave.c     **** /*
 434:armwave.c     ****  * Dump a ppm of a buffer to a file.
 435:armwave.c     ****  */
 436:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 437:armwave.c     **** {
 1881              		.loc 1 437 1 is_stmt 1 view -0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 0
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 438:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1885              		.loc 1 438 5 view .LVU508
 1886              	@ armwave.c:437: {
 437:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1887              		.loc 1 437 1 is_stmt 0 view .LVU509
 1888 08c0 0130A0E1 		mov	r3, r1	@ fn, fn
 1889 08c4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1890              		.cfi_def_cfa_offset 28
 1891              		.cfi_offset 4, -28
 1892              		.cfi_offset 5, -24
 1893              		.cfi_offset 6, -20
 1894              		.cfi_offset 7, -16
 1895              		.cfi_offset 8, -12
 1896              		.cfi_offset 9, -8
 1897              		.cfi_offset 14, -4
 1898 08c8 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1899 08cc 0CD04DE2 		sub	sp, sp, #12	@,,
 1900              		.cfi_def_cfa_offset 40
 1901              	@ armwave.c:438:     FILE *fp = fopen(fn, "wb");
 1902              		.loc 1 438 16 view .LVU510
 1903 08d0 C4109FE5 		ldr	r1, .L115	@,
 1904              	.LVL101:
 1905              		.loc 1 438 16 view .LVU511
 1906 08d4 0300A0E1 		mov	r0, r3	@, fn
 1907              	.LVL102:
 1908              		.loc 1 438 16 view .LVU512
 1909 08d8 FEFFFFEB 		bl	fopen64		@
 1910              	.LVL103:
 1911              	@ armwave.c:445:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 439:armwave.c     ****     uint32_t data;
 440:armwave.c     ****     int xx, yy;
 441:armwave.c     **** 
 442:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 443:armwave.c     **** 
 444:armwave.c     ****     fputs("P3\n", fp);
 445:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1912              		.loc 1 445 5 view .LVU513
 1913 08dc BC609FE5 		ldr	r6, .L115+4	@ tmp150,
 1914              	@ armwave.c:444:     fputs("P3\n", fp);
 444:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1915              		.loc 1 444 5 view .LVU514
 1916 08e0 0320A0E3 		mov	r2, #3	@,
 1917 08e4 0110A0E3 		mov	r1, #1	@,
 1918              	@ armwave.c:438:     FILE *fp = fopen(fn, "wb");
 438:armwave.c     ****     uint32_t data;
 1919              		.loc 1 438 16 view .LVU515
 1920 08e8 0070A0E1 		mov	r7, r0	@ fp,
 1921              	.LVL104:
 439:armwave.c     ****     uint32_t data;
 1922              		.loc 1 439 5 is_stmt 1 view .LVU516
 440:armwave.c     **** 
 1923              		.loc 1 440 5 view .LVU517
 444:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1924              		.loc 1 444 5 view .LVU518
 1925 08ec 0030A0E1 		mov	r3, r0	@, fp
 1926 08f0 AC009FE5 		ldr	r0, .L115+8	@,
 1927              	.LVL105:
 444:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1928              		.loc 1 444 5 is_stmt 0 view .LVU519
 1929 08f4 FEFFFFEB 		bl	fwrite		@
 1930              	.LVL106:
 1931              		.loc 1 445 5 is_stmt 1 view .LVU520
 1932 08f8 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1933 08fc A4109FE5 		ldr	r1, .L115+12	@,
 1934 0900 0700A0E1 		mov	r0, r7	@, fp
 1935 0904 FEFFFFEB 		bl	fprintf		@
 1936              	.LVL107:
 446:armwave.c     ****     fputs("255\n", fp);
 1937              		.loc 1 446 5 view .LVU521
 1938 0908 0420A0E3 		mov	r2, #4	@,
 1939 090c 0730A0E1 		mov	r3, r7	@, fp
 1940 0910 0110A0E3 		mov	r1, #1	@,
 1941 0914 90009FE5 		ldr	r0, .L115+16	@,
 1942 0918 FEFFFFEB 		bl	fwrite		@
 1943              	.LVL108:
 447:armwave.c     **** 
 448:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1944              		.loc 1 448 5 view .LVU522
 1945              	@ armwave.c:448:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1946              		.loc 1 448 37 is_stmt 0 view .LVU523
 1947 091c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1948              	@ armwave.c:448:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1949              		.loc 1 448 5 view .LVU524
 1950 0920 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1951 0924 180000DA 		ble	.L108		@,
 1952 0928 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1953              	@ armwave.c:453:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 450:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 451:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 452:armwave.c     **** 
 453:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1954              		.loc 1 453 13 view .LVU525
 1955 092c 7C909FE5 		ldr	r9, .L115+20	@ tmp152,
 1956              	@ armwave.c:448:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1957              		.loc 1 448 12 view .LVU526
 1958 0930 0050A0E3 		mov	r5, #0	@ yy,
 1959              	.LVL109:
 1960              	.L109:
 1961              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1962              		.loc 1 449 9 view .LVU527
 1963 0934 000053E3 		cmp	r3, #0	@ _13,
 1964              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1965              		.loc 1 449 16 view .LVU528
 1966 0938 0040A0C3 		movgt	r4, #0	@ xx,
 1967              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1968              		.loc 1 449 9 view .LVU529
 1969 093c 0F0000DA 		ble	.L111		@,
 1970              	.LVL110:
 1971              	.L110:
 450:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1972              		.loc 1 450 13 is_stmt 1 discriminator 3 view .LVU530
 1973              	@ armwave.c:450:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 450:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1974              		.loc 1 450 29 is_stmt 0 discriminator 3 view .LVU531
 1975 0940 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1976              	@ armwave.c:453:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1977              		.loc 1 453 13 discriminator 3 view .LVU532
 1978 0944 0910A0E1 		mov	r1, r9	@, tmp152
 1979 0948 0700A0E1 		mov	r0, r7	@, fp
 1980              	@ armwave.c:450:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 450:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1981              		.loc 1 450 18 discriminator 3 view .LVU533
 1982 094c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1983              	.LVL111:
 1984              		.loc 1 453 13 is_stmt 1 discriminator 3 view .LVU534
 1985              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1986              		.loc 1 449 58 is_stmt 0 discriminator 3 view .LVU535
 1987 0950 014084E2 		add	r4, r4, #1	@ xx, xx,
 1988              	.LVL112:
 1989              	@ armwave.c:453:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1990              		.loc 1 453 81 discriminator 3 view .LVU536
 1991 0954 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1992              	@ armwave.c:453:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1993              		.loc 1 453 61 discriminator 3 view .LVU537
 1994 0958 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1995              	@ armwave.c:453:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1996              		.loc 1 453 13 discriminator 3 view .LVU538
 1997 095c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1998 0960 7330EFE6 		uxtb	r3, r3	@, tmp142
 1999 0964 00C08DE5 		str	ip, [sp]	@ tmp147,
 2000 0968 7220EFE6 		uxtb	r2, r2	@, data
 2001              	.LVL113:
 2002              		.loc 1 453 13 discriminator 3 view .LVU539
 2003 096c FEFFFFEB 		bl	fprintf		@
 2004              	.LVL114:
 2005              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2006              		.loc 1 449 41 discriminator 3 view .LVU540
 2007 0970 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2008              	@ armwave.c:449:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 449:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2009              		.loc 1 449 9 discriminator 3 view .LVU541
 2010 0974 040053E1 		cmp	r3, r4	@ _13, xx
 2011 0978 F0FFFFCA 		bgt	.L110		@,
 2012 097c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2013              	.LVL115:
 2014              	.L111:
 2015              	@ armwave.c:448:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2016              		.loc 1 448 55 discriminator 2 view .LVU542
 2017 0980 015085E2 		add	r5, r5, #1	@ yy, yy,
 2018              	.LVL116:
 2019              	@ armwave.c:448:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 448:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2020              		.loc 1 448 5 discriminator 2 view .LVU543
 2021 0984 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2022 0988 E9FFFFBA 		blt	.L109		@,
 2023              	.LVL117:
 2024              	.L108:
 454:armwave.c     ****         }
 455:armwave.c     ****     }
 456:armwave.c     **** 
 457:armwave.c     ****     fclose(fp);
 2025              		.loc 1 457 5 is_stmt 1 view .LVU544
 2026 098c 0700A0E1 		mov	r0, r7	@, fp
 2027              	@ armwave.c:458: }
 458:armwave.c     **** }
 2028              		.loc 1 458 1 is_stmt 0 view .LVU545
 2029 0990 0CD08DE2 		add	sp, sp, #12	@,,
 2030              		.cfi_def_cfa_offset 28
 2031              		@ sp needed	@
 2032 0994 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2033              		.cfi_restore 14
 2034              		.cfi_restore 9
 2035              		.cfi_restore 8
 2036              		.cfi_restore 7
 2037              		.cfi_restore 6
 2038              		.cfi_restore 5
 2039              		.cfi_restore 4
 2040              		.cfi_def_cfa_offset 0
 2041              	.LVL118:
 2042              	@ armwave.c:457:     fclose(fp);
 457:armwave.c     **** }
 2043              		.loc 1 457 5 view .LVU546
 2044 0998 FEFFFFEA 		b	fclose		@
 2045              	.LVL119:
 2046              	.L116:
 457:armwave.c     **** }
 2047              		.loc 1 457 5 view .LVU547
 2048              		.align	2
 2049              	.L115:
 2050 099c C0010000 		.word	.LC13
 2051 09a0 00000000 		.word	g_armwave_state
 2052 09a4 C4010000 		.word	.LC14
 2053 09a8 C8010000 		.word	.LC15
 2054 09ac D0010000 		.word	.LC16
 2055 09b0 D8010000 		.word	.LC17
 2056              		.cfi_endproc
 2057              	.LFE68:
 2059              		.align	2
 2060              		.global	armwave_test_init
 2061              		.syntax unified
 2062              		.arm
 2063              		.fpu vfp
 2065              	armwave_test_init:
 2066              	.LVL120:
 2067              	.LFB69:
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Initialise some test functionry.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 464:armwave.c     **** {
 2068              		.loc 1 464 1 is_stmt 1 view -0
 2069              		.cfi_startproc
 2070              		@ args = 0, pretend = 0, frame = 0
 2071              		@ frame_needed = 0, uses_anonymous_args = 0
 465:armwave.c     ****     test_create_gamma();
 2072              		.loc 1 465 5 view .LVU549
 2073              	.LBB18:
 2074              	.LBI18:
  34:armwave.c     **** {
 2075              		.loc 1 34 6 view .LVU550
  34:armwave.c     **** {
 2076              		.loc 1 34 6 is_stmt 0 view .LVU551
 2077              	.LBE18:
 2078              	@ armwave.c:464: {
 464:armwave.c     ****     test_create_gamma();
 2079              		.loc 1 464 1 view .LVU552
 2080 09b4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2081              		.cfi_def_cfa_offset 32
 2082              		.cfi_offset 4, -32
 2083              		.cfi_offset 5, -28
 2084              		.cfi_offset 6, -24
 2085              		.cfi_offset 7, -20
 2086              		.cfi_offset 8, -16
 2087              		.cfi_offset 9, -12
 2088              		.cfi_offset 10, -8
 2089              		.cfi_offset 14, -4
 2090 09b8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2091              		.cfi_def_cfa_offset 56
 2092              		.cfi_offset 80, -56
 2093              		.cfi_offset 81, -52
 2094              		.cfi_offset 82, -48
 2095              		.cfi_offset 83, -44
 2096              		.cfi_offset 84, -40
 2097              		.cfi_offset 85, -36
 2098 09bc C0409FE5 		ldr	r4, .L121+20	@ ivtmp.82,
 2099              	.LBB21:
 2100              	.LBB19:
 2101              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2102              		.loc 1 40 32 view .LVU553
 2103 09c0 2EAA9FED 		vldr.32	s20, .L121+16	@ tmp136,
 2104              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2105              		.loc 1 40 26 view .LVU554
 2106 09c4 299B9FED 		vldr.64	d9, .L121	@ tmp151,
 2107              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2108              		.loc 1 40 49 view .LVU555
 2109 09c8 2A8B9FED 		vldr.64	d8, .L121+8	@ tmp139,
 2110 09cc 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.82,
 2111              	.LBE19:
 2112              	.LBE21:
 2113              	@ armwave.c:464: {
 464:armwave.c     ****     test_create_gamma();
 2114              		.loc 1 464 1 view .LVU556
 2115 09d0 10D04DE2 		sub	sp, sp, #16	@,,
 2116              		.cfi_def_cfa_offset 72
 2117              	@ armwave.c:464: {
 464:armwave.c     ****     test_create_gamma();
 2118              		.loc 1 464 1 view .LVU557
 2119 09d4 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2120 09d8 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2121 09dc 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2122 09e0 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2123 09e4 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.82,
 2124 09e8 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2125              	.LVL121:
 2126              	.L118:
 2127              	.LBB22:
 2128              	.LBB20:
  40:armwave.c     ****     }
 2129              		.loc 1 40 9 is_stmt 1 view .LVU558
 2130              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2131              		.loc 1 40 32 is_stmt 0 view .LVU559
 2132 09ec 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.82
 2133              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2134              		.loc 1 40 26 view .LVU560
 2135 09f0 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2137              		.loc 1 40 32 view .LVU561
 2138 09f4 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2139 09f8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2140 09fc 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2142              		.loc 1 40 26 view .LVU562
 2143 0a00 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2144 0a04 FEFFFFEB 		bl	pow		@
 2145              	.LVL122:
 2146              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2147              		.loc 1 40 49 view .LVU563
 2148 0a08 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2149              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2150              		.loc 1 40 24 view .LVU564
 2151 0a0c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2152 0a10 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2153 0a14 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2154              	.LVL123:
 2155              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2156              		.loc 1 39 5 view .LVU565
 2157 0a18 0A0054E1 		cmp	r4, r10	@ ivtmp.82, _39
 2158 0a1c F2FFFF1A 		bne	.L118		@,
 2159              	.LVL124:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2160              		.loc 1 39 5 view .LVU566
 2161              	.LBE20:
 2162              	.LBE22:
 466:armwave.c     **** 
 467:armwave.c     ****     // make ch1 yellowish by default
 468:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2163              		.loc 1 468 5 is_stmt 1 view .LVU567
 2164              	.LBB23:
 2165              	.LBI23:
 421:armwave.c     **** {
 2166              		.loc 1 421 6 view .LVU568
 2167              	.LBB24:
 424:armwave.c     ****         case 1:
 2168              		.loc 1 424 5 view .LVU569
 426:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2169              		.loc 1 426 13 view .LVU570
 427:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2170              		.loc 1 427 13 view .LVU571
 2171              	@ armwave.c:426:             g_armwave_state.ch1_color.r = r;
 426:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2172              		.loc 1 426 41 is_stmt 0 view .LVU572
 2173 0a20 60C09FE5 		ldr	ip, .L121+24	@ tmp142,
 2174 0a24 60409FE5 		ldr	r4, .L121+28	@ tmp143,
 2175              	.LBE24:
 2176              	.LBE23:
 2177              	@ armwave.c:470:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 469:armwave.c     **** 
 470:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2178              		.loc 1 470 5 view .LVU573
 2179 0a28 0000A0E3 		mov	r0, #0	@ tmp147,
 2180              	.LBB28:
 2181              	.LBB25:
 2182              	@ armwave.c:428:             g_armwave_state.ch1_color.b = b;
 428:armwave.c     ****             break;
 2183              		.loc 1 428 41 view .LVU574
 2184 0a2c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2185              	.LBE25:
 2186              	.LBE28:
 2187              	@ armwave.c:470:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2188              		.loc 1 470 5 view .LVU575
 2189 0a30 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2190 0a34 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2191 0a38 00808DE5 		str	r8, [sp]	@ render_width,
 2192 0a3c 0610A0E1 		mov	r1, r6	@, tmp3
 2193 0a40 0720A0E1 		mov	r2, r7	@, nwaves
 2194              	.LBB29:
 2195              	.LBB26:
 2196              	@ armwave.c:426:             g_armwave_state.ch1_color.r = r;
 426:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2197              		.loc 1 426 41 view .LVU576
 2198 0a44 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 428:armwave.c     ****             break;
 2199              		.loc 1 428 13 is_stmt 1 view .LVU577
 2200              	.LBE26:
 2201              	.LBE29:
 2202              	@ armwave.c:470:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2203              		.loc 1 470 5 is_stmt 0 view .LVU578
 2204 0a48 0630A0E1 		mov	r3, r6	@, wave_size
 2205              	.LBB30:
 2206              	.LBB27:
 2207              	@ armwave.c:428:             g_armwave_state.ch1_color.b = b;
 428:armwave.c     ****             break;
 2208              		.loc 1 428 41 view .LVU579
 2209 0a4c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 429:armwave.c     ****     }
 2210              		.loc 1 429 13 is_stmt 1 view .LVU580
 2211              	.LVL125:
 429:armwave.c     ****     }
 2212              		.loc 1 429 13 is_stmt 0 view .LVU581
 2213              	.LBE27:
 2214              	.LBE30:
 2215              		.loc 1 470 5 is_stmt 1 view .LVU582
 2216 0a50 FEFFFFEB 		bl	armwave_setup_render		@
 2217              	.LVL126:
 471:armwave.c     **** 
 472:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2218              		.loc 1 472 5 view .LVU583
 2219 0a54 34109FE5 		ldr	r1, .L121+32	@,
 2220 0a58 34009FE5 		ldr	r0, .L121+36	@,
 2221              	@ armwave.c:473: }
 473:armwave.c     **** }
 2222              		.loc 1 473 1 is_stmt 0 view .LVU584
 2223 0a5c 10D08DE2 		add	sp, sp, #16	@,,
 2224              		.cfi_def_cfa_offset 56
 2225              		@ sp needed	@
 2226 0a60 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2227              		.cfi_restore 84
 2228              		.cfi_restore 85
 2229              		.cfi_restore 82
 2230              		.cfi_restore 83
 2231              		.cfi_restore 80
 2232              		.cfi_restore 81
 2233              		.cfi_def_cfa_offset 32
 2234 0a64 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2235              		.cfi_restore 14
 2236              		.cfi_restore 10
 2237              		.cfi_restore 9
 2238              		.cfi_restore 8
 2239              		.cfi_restore 7
 2240              		.cfi_restore 6
 2241              		.cfi_restore 5
 2242              		.cfi_restore 4
 2243              		.cfi_def_cfa_offset 0
 2244              	.LVL127:
 2245              	@ armwave.c:472:     printf("armwave version: %s\n", ARMWAVE_VER);
 472:armwave.c     **** }
 2246              		.loc 1 472 5 view .LVU585
 2247 0a68 FEFFFFEA 		b	printf		@
 2248              	.LVL128:
 2249              	.L122:
 2250 0a6c 0000A0E1 		.align	3
 2251              	.L121:
 2252 0a70 000000C0 		.word	-1073741824
 2253 0a74 CCCCEC3F 		.word	1072483532
 2254 0a78 00000000 		.word	0
 2255 0a7c 00E06F40 		.word	1081073664
 2256 0a80 00007F43 		.word	1132396544
 2257 0a84 FFFFFFFF 		.word	gamma_table-1
 2258 0a88 00000000 		.word	g_armwave_state
 2259 0a8c F609F406 		.word	116656630
 2260 0a90 00000000 		.word	.LC0
 2261 0a94 08000000 		.word	.LC1
 2262              		.cfi_endproc
 2263              	.LFE69:
 2265              		.align	2
 2266              		.global	armwave_test_fill_outbuf
 2267              		.syntax unified
 2268              		.arm
 2269              		.fpu vfp
 2271              	armwave_test_fill_outbuf:
 2272              	.LFB70:
 474:armwave.c     **** 
 475:armwave.c     **** /*
 476:armwave.c     ****  * Render image to the local allocated buffer.
 477:armwave.c     ****  */
 478:armwave.c     **** void armwave_test_fill_outbuf()
 479:armwave.c     **** {
 2273              		.loc 1 479 1 is_stmt 1 view -0
 2274              		.cfi_startproc
 2275              		@ args = 0, pretend = 0, frame = 0
 2276              		@ frame_needed = 0, uses_anonymous_args = 0
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2277              		.loc 1 480 5 view .LVU587
 2278              	@ armwave.c:479: {
 479:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2279              		.loc 1 479 1 is_stmt 0 view .LVU588
 2280 0a98 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2281              		.cfi_def_cfa_offset 24
 2282              		.cfi_offset 4, -24
 2283              		.cfi_offset 5, -20
 2284              		.cfi_offset 6, -16
 2285              		.cfi_offset 7, -12
 2286              		.cfi_offset 8, -8
 2287              		.cfi_offset 14, -4
 2288              	@ armwave.c:480:     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2289              		.loc 1 480 5 view .LVU589
 2290 0a9c E4609FE5 		ldr	r6, .L134	@ tmp214,
 2291 0aa0 684096E5 		ldr	r4, [r6, #104]	@ _1, g_armwave_state.out_pixbuf
 2292              	.LVL129:
 2293              	.LBB33:
 2294              	.LBI33:
 172:armwave.c     **** {
 2295              		.loc 1 172 6 is_stmt 1 view .LVU590
 2296              	.LBB34:
 174:armwave.c     ****     // uint32_t ysub;
 2297              		.loc 1 174 5 view .LVU591
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2298              		.loc 1 176 5 view .LVU592
 177:armwave.c     ****     // uint8_t row;
 2299              		.loc 1 177 5 view .LVU593
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2300              		.loc 1 179 5 view .LVU594
 180:armwave.c     ****     uint32_t offset;
 2301              		.loc 1 180 5 view .LVU595
 181:armwave.c     **** 
 2302              		.loc 1 181 5 view .LVU596
 183:armwave.c     **** 
 2303              		.loc 1 183 5 view .LVU597
 2304 0aa4 000054E3 		cmp	r4, #0	@ _1,
 2305 0aa8 3100000A 		beq	.L133		@,
 186:armwave.c     **** 
 2306              		.loc 1 186 5 view .LVU598
 2307              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2308              		.loc 1 186 59 is_stmt 0 view .LVU599
 2309 0aac 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2310 0ab0 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2311              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2312              		.loc 1 186 5 view .LVU600
 2313 0ab4 0010A0E3 		mov	r1, #0	@,
 2314 0ab8 0400A0E1 		mov	r0, r4	@, _1
 2315              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2316              		.loc 1 186 59 view .LVU601
 2317 0abc 920302E0 		mul	r2, r2, r3	@ tmp171, g_armwave_state.target_height, g_armwave_state.target_width
 2318              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2319              		.loc 1 186 5 view .LVU602
 2320 0ac0 0221A0E1 		lsl	r2, r2, #2	@, tmp171,
 2321 0ac4 FEFFFFEB 		bl	memset		@
 2322              	.LVL130:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2323              		.loc 1 188 5 is_stmt 1 view .LVU603
 2324              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2325              		.loc 1 188 10 is_stmt 0 view .LVU604
 2326 0ac8 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2327 0acc 402096E5 		ldr	r2, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2328 0ad0 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2329              	.LVL131:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2330              		.loc 1 231 5 is_stmt 1 view .LVU605
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2331              		.loc 1 231 5 is_stmt 0 view .LVU606
 2332 0ad4 010052E3 		cmp	r2, #1	@ npix,
 2333              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2334              		.loc 1 231 26 view .LVU607
 2335 0ad8 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp184, npix, npix,
 2336              	.LVL132:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2337              		.loc 1 231 26 view .LVU608
 2338 0adc C220A0E1 		asr	r2, r2, #1	@ _3, tmp184,
 2339              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2340              		.loc 1 231 5 view .LVU609
 2341 0ae0 F081BDD8 		pople	{r4, r5, r6, r7, r8, pc}	@
 2342 0ae4 040096E5 		ldr	r0, [r6, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2343              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2344              		.loc 1 236 44 view .LVU610
 2345 0ae8 FC56D6E1 		ldrsh	r5, [r6, #108]	@ _19, g_armwave_state.ch1_color.r
 2346              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2347              		.loc 1 237 44 view .LVU611
 2348 0aec FEE6D6E1 		ldrsh	lr, [r6, #110]	@ _24, g_armwave_state.ch1_color.g
 2349              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2350              		.loc 1 238 44 view .LVU612
 2351 0af0 F0C7D6E1 		ldrsh	ip, [r6, #112]	@ _28, g_armwave_state.ch1_color.b
 2352 0af4 020040E2 		sub	r0, r0, #2	@ ivtmp.87, g_armwave_state.ch1_buffer,
 2353              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2354              		.loc 1 231 11 view .LVU613
 2355 0af8 0010A0E3 		mov	r1, #0	@ n,
 2356              	.LVL133:
 2357              	.L127:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2358              		.loc 1 232 9 is_stmt 1 view .LVU614
 233:armwave.c     **** 
 2359              		.loc 1 233 9 view .LVU615
 2360              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2361              		.loc 1 233 15 is_stmt 0 view .LVU616
 2362 0afc B260F0E1 		ldrh	r6, [r0, #2]!	@ MEM[base: _91, offset: 0B], MEM[base: _91, offset: 0B]
 2363              	.LVL134:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2364              		.loc 1 235 9 is_stmt 1 view .LVU617
 2365              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2366              		.loc 1 235 11 is_stmt 0 view .LVU618
 2367 0b00 FF6016E2 		ands	r6, r6, #255	@ value, MEM[base: _91, offset: 0B],
 2368              	.LVL135:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2369              		.loc 1 235 11 view .LVU619
 2370 0b04 1600000A 		beq	.L126		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2371              		.loc 1 236 13 is_stmt 1 view .LVU620
 2372              	.LVL136:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2373              		.loc 1 237 13 view .LVU621
 238:armwave.c     **** 
 2374              		.loc 1 238 13 view .LVU622
 240:armwave.c     ****             g = MIN(gg, 255);
 2375              		.loc 1 240 13 view .LVU623
 241:armwave.c     ****             b = MIN(bb, 255);
 2376              		.loc 1 241 13 view .LVU624
 242:armwave.c     **** 
 2377              		.loc 1 242 13 view .LVU625
 245:armwave.c     **** 
 2378              		.loc 1 245 13 view .LVU626
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2379              		.loc 1 248 13 view .LVU627
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2380              		.loc 1 249 13 view .LVU628
 250:armwave.c     ****             xx = (nsub >> 8);
 2381              		.loc 1 250 13 view .LVU629
 251:armwave.c     **** 
 2382              		.loc 1 251 13 view .LVU630
 255:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2383              		.loc 1 255 17 view .LVU631
 256:armwave.c     ****             }
 2384              		.loc 1 256 17 view .LVU632
 2385              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2386              		.loc 1 238 47 is_stmt 0 view .LVU633
 2387 0b08 860C63E1 		smulbb	r3, r6, ip	@ tmp200, value, _28
 2388              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2389              		.loc 1 237 47 view .LVU634
 2390 0b0c 860E67E1 		smulbb	r7, r6, lr	@ tmp204, value, _24
 2391              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2392              		.loc 1 236 47 view .LVU635
 2393 0b10 860566E1 		smulbb	r6, r6, r5	@ tmp210, value, _19
 2394              	.LVL137:
 2395              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2396              		.loc 1 238 16 view .LVU636
 2397 0b14 4334A0E1 		asr	r3, r3, #8	@ bb, tmp200,
 2398              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2399              		.loc 1 242 17 view .LVU637
 2400 0b18 FF0053E3 		cmp	r3, #255	@ bb,
 2401              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2402              		.loc 1 237 16 view .LVU638
 2403 0b1c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp204,
 2404              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2405              		.loc 1 242 17 view .LVU639
 2406 0b20 FF30A0A3 		movge	r3, #255	@ bb,
 2407              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2408              		.loc 1 241 17 view .LVU640
 2409 0b24 FF0057E3 		cmp	r7, #255	@ gg,
 2410 0b28 FF70A0A3 		movge	r7, #255	@ gg,
 2411              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2412              		.loc 1 236 16 view .LVU641
 2413 0b2c 4664A0E1 		asr	r6, r6, #8	@ rr, tmp210,
 2414              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2415              		.loc 1 240 17 view .LVU642
 2416 0b30 FF0056E3 		cmp	r6, #255	@ rr,
 2417              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2418              		.loc 1 245 48 view .LVU643
 2419 0b34 0774A0E1 		lsl	r7, r7, #8	@ tmp205, gg,
 2420              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2421              		.loc 1 245 36 view .LVU644
 2422 0b38 0338A0E1 		lsl	r3, r3, #16	@ tmp201, bb,
 2423              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2424              		.loc 1 240 17 view .LVU645
 2425 0b3c FF60A0A3 		movge	r6, #255	@ rr,
 2426              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2427              		.loc 1 245 36 view .LVU646
 2428 0b40 FF3803E2 		and	r3, r3, #16711680	@ tmp202, tmp201,
 2429              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2430              		.loc 1 245 48 view .LVU647
 2431 0b44 7770FFE6 		uxth	r7, r7	@ tmp206, tmp205
 2432              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2433              		.loc 1 248 18 view .LVU648
 2434 0b48 8180A0E1 		lsl	r8, r1, #1	@ nsub, n,
 2435              	.LVL138:
 2436              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2437              		.loc 1 245 54 view .LVU649
 2438 0b4c 7660EFE6 		uxtb	r6, r6	@ rr, rr
 2439              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2440              		.loc 1 245 43 view .LVU650
 2441 0b50 073083E1 		orr	r3, r3, r7	@ tmp208, tmp202, tmp206
 2442              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2443              		.loc 1 245 54 view .LVU651
 2444 0b54 063083E1 		orr	r3, r3, r6	@ tmp212, tmp208, rr
 2445              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 256:armwave.c     ****             }
 2446              		.loc 1 256 35 view .LVU652
 2447 0b58 4864A0E1 		asr	r6, r8, #8	@ tmp198, nsub,
 2448              	.LVL139:
 2449              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2450              		.loc 1 245 18 view .LVU653
 2451 0b5c FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp212,
 2452              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 256:armwave.c     ****             }
 2453              		.loc 1 256 45 view .LVU654
 2454 0b60 063184E7 		str	r3, [r4, r6, lsl #2]	@ word, *_55
 2455              	.LVL140:
 2456              	.L126:
 2457              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2458              		.loc 1 231 34 view .LVU655
 2459 0b64 011081E2 		add	r1, r1, #1	@ n, n,
 2460              	.LVL141:
 2461              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2462              		.loc 1 231 5 view .LVU656
 2463 0b68 010052E1 		cmp	r2, r1	@ _3, n
 2464 0b6c E2FFFFCA 		bgt	.L127		@,
 2465 0b70 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 2466              	.LVL142:
 2467              	.L133:
 183:armwave.c     **** 
 2468              		.loc 1 183 5 is_stmt 1 view .LVU657
 2469 0b74 10309FE5 		ldr	r3, .L134+4	@,
 2470 0b78 B720A0E3 		mov	r2, #183	@,
 2471 0b7c 0C109FE5 		ldr	r1, .L134+8	@,
 2472 0b80 0C009FE5 		ldr	r0, .L134+12	@,
 2473 0b84 FEFFFFEB 		bl	__assert_fail		@
 2474              	.LVL143:
 2475              	.L135:
 183:armwave.c     **** 
 2476              		.loc 1 183 5 is_stmt 0 view .LVU658
 2477              		.align	2
 2478              	.L134:
 2479 0b88 00000000 		.word	g_armwave_state
 2480 0b8c 00000000 		.word	.LANCHOR0
 2481 0b90 20000000 		.word	.LC2
 2482 0b94 2C000000 		.word	.LC3
 2483              	.LBE34:
 2484              	.LBE33:
 2485              		.cfi_endproc
 2486              	.LFE70:
 2488              		.align	2
 2489              		.global	armwave_test_dump_buffer_to_ppm
 2490              		.syntax unified
 2491              		.arm
 2492              		.fpu vfp
 2494              	armwave_test_dump_buffer_to_ppm:
 2495              	.LVL144:
 2496              	.LFB71:
 481:armwave.c     **** }
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 485:armwave.c     ****  */
 486:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 487:armwave.c     **** {
 2497              		.loc 1 487 1 is_stmt 1 view -0
 2498              		.cfi_startproc
 2499              		@ args = 0, pretend = 0, frame = 0
 2500              		@ frame_needed = 0, uses_anonymous_args = 0
 2501              		@ link register save eliminated.
 488:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2502              		.loc 1 488 5 view .LVU660
 2503 0b98 08309FE5 		ldr	r3, .L137	@ tmp112,
 2504 0b9c 0010A0E1 		mov	r1, r0	@, fn
 2505 0ba0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2506              	.LVL145:
 2507              		.loc 1 488 5 is_stmt 0 view .LVU661
 2508 0ba4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2509              	.LVL146:
 2510              	.L138:
 2511              		.loc 1 488 5 view .LVU662
 2512              		.align	2
 2513              	.L137:
 2514 0ba8 00000000 		.word	g_armwave_state
 2515              		.cfi_endproc
 2516              	.LFE71:
 2518              		.align	2
 2519              		.global	armwave_test_fill_gdkbuf
 2520              		.syntax unified
 2521              		.arm
 2522              		.fpu vfp
 2524              	armwave_test_fill_gdkbuf:
 2525              	.LVL147:
 2526              	.LFB72:
 489:armwave.c     **** }
 490:armwave.c     **** 
 491:armwave.c     **** /*
 492:armwave.c     ****  * Render GDK buffer with test funtionry.
 493:armwave.c     ****  */
 494:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 495:armwave.c     **** {
 2527              		.loc 1 495 1 is_stmt 1 view -0
 2528              		.cfi_startproc
 2529              		@ args = 0, pretend = 0, frame = 0
 2530              		@ frame_needed = 0, uses_anonymous_args = 0
 496:armwave.c     ****     //PyObject *mv;
 497:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 498:armwave.c     **** 
 499:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 500:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2531              		.loc 1 500 5 view .LVU664
 2532              	@ armwave.c:500:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2533              		.loc 1 500 11 is_stmt 0 view .LVU665
 2534 0bac 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2535              	@ armwave.c:495: {
 495:armwave.c     ****     //PyObject *mv;
 2536              		.loc 1 495 1 view .LVU666
 2537 0bb0 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2538              		.cfi_def_cfa_offset 24
 2539              		.cfi_offset 4, -24
 2540              		.cfi_offset 5, -20
 2541              		.cfi_offset 6, -16
 2542              		.cfi_offset 7, -12
 2543              		.cfi_offset 8, -8
 2544              		.cfi_offset 14, -4
 2545              	@ armwave.c:500:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2546              		.loc 1 500 11 view .LVU667
 2547 0bb4 284093E5 		ldr	r4, [r3, #40]	@ out_pixbuf, MEM[(uint32_t * *)_1 + 40B]
 2548              	.LVL148:
 501:armwave.c     ****     
 502:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 503:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2549              		.loc 1 503 5 is_stmt 1 view .LVU668
 2550              	.LBB37:
 2551              	.LBI37:
 172:armwave.c     **** {
 2552              		.loc 1 172 6 view .LVU669
 2553              	.LBB38:
 174:armwave.c     ****     // uint32_t ysub;
 2554              		.loc 1 174 5 view .LVU670
 176:armwave.c     ****     uint8_t r, g, b, value; 
 2555              		.loc 1 176 5 view .LVU671
 177:armwave.c     ****     // uint8_t row;
 2556              		.loc 1 177 5 view .LVU672
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2557              		.loc 1 179 5 view .LVU673
 180:armwave.c     ****     uint32_t offset;
 2558              		.loc 1 180 5 view .LVU674
 181:armwave.c     **** 
 2559              		.loc 1 181 5 view .LVU675
 183:armwave.c     **** 
 2560              		.loc 1 183 5 view .LVU676
 2561 0bb8 000054E3 		cmp	r4, #0	@ out_pixbuf,
 2562 0bbc 3200000A 		beq	.L149		@,
 186:armwave.c     **** 
 2563              		.loc 1 186 5 view .LVU677
 2564              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2565              		.loc 1 186 45 is_stmt 0 view .LVU678
 2566 0bc0 D8609FE5 		ldr	r6, .L150	@ tmp216,
 2567              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2568              		.loc 1 186 5 view .LVU679
 2569 0bc4 0010A0E3 		mov	r1, #0	@,
 2570 0bc8 0400A0E1 		mov	r0, r4	@, out_pixbuf
 2571              	.LVL149:
 2572              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2573              		.loc 1 186 59 view .LVU680
 2574 0bcc 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2575 0bd0 5C2096E5 		ldr	r2, [r6, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2576 0bd4 920302E0 		mul	r2, r2, r3	@ tmp173, g_armwave_state.target_height, g_armwave_state.target_width
 2577              	@ armwave.c:186:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 186:armwave.c     **** 
 2578              		.loc 1 186 5 view .LVU681
 2579 0bd8 0221A0E1 		lsl	r2, r2, #2	@, tmp173,
 2580 0bdc FEFFFFEB 		bl	memset		@
 2581              	.LVL150:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2582              		.loc 1 188 5 is_stmt 1 view .LVU682
 2583              	@ armwave.c:188:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 2584              		.loc 1 188 10 is_stmt 0 view .LVU683
 2585 0be0 583096E5 		ldr	r3, [r6, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2586 0be4 402096E5 		ldr	r2, [r6, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 2587 0be8 920302E0 		mul	r2, r2, r3	@ npix, g_armwave_state.bitdepth_height, g_armwave_state.target_width
 2588              	.LVL151:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2589              		.loc 1 231 5 is_stmt 1 view .LVU684
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2590              		.loc 1 231 5 is_stmt 0 view .LVU685
 2591 0bec 010052E3 		cmp	r2, #1	@ npix,
 2592              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2593              		.loc 1 231 26 view .LVU686
 2594 0bf0 A22F82E0 		add	r2, r2, r2, lsr #31	@ tmp186, npix, npix,
 2595              	.LVL152:
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2596              		.loc 1 231 26 view .LVU687
 2597 0bf4 C220A0E1 		asr	r2, r2, #1	@ _5, tmp186,
 2598              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2599              		.loc 1 231 5 view .LVU688
 2600 0bf8 F081BDD8 		pople	{r4, r5, r6, r7, r8, pc}	@
 2601 0bfc 040096E5 		ldr	r0, [r6, #4]	@ g_armwave_state.ch1_buffer, g_armwave_state.ch1_buffer
 2602              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2603              		.loc 1 236 44 view .LVU689
 2604 0c00 FC56D6E1 		ldrsh	r5, [r6, #108]	@ _21, g_armwave_state.ch1_color.r
 2605              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2606              		.loc 1 237 44 view .LVU690
 2607 0c04 FEE6D6E1 		ldrsh	lr, [r6, #110]	@ _26, g_armwave_state.ch1_color.g
 2608              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2609              		.loc 1 238 44 view .LVU691
 2610 0c08 F0C7D6E1 		ldrsh	ip, [r6, #112]	@ _30, g_armwave_state.ch1_color.b
 2611 0c0c 020040E2 		sub	r0, r0, #2	@ ivtmp.93, g_armwave_state.ch1_buffer,
 2612              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2613              		.loc 1 231 11 view .LVU692
 2614 0c10 0010A0E3 		mov	r1, #0	@ n,
 2615              	.LVL153:
 2616              	.L143:
 232:armwave.c     ****         value = wave_word & 0xffff;
 2617              		.loc 1 232 9 is_stmt 1 view .LVU693
 233:armwave.c     **** 
 2618              		.loc 1 233 9 view .LVU694
 2619              	@ armwave.c:233:         value = wave_word & 0xffff;
 233:armwave.c     **** 
 2620              		.loc 1 233 15 is_stmt 0 view .LVU695
 2621 0c14 B260F0E1 		ldrh	r6, [r0, #2]!	@ MEM[base: _93, offset: 0B], MEM[base: _93, offset: 0B]
 2622              	.LVL154:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2623              		.loc 1 235 9 is_stmt 1 view .LVU696
 2624              	@ armwave.c:235:         if(value != 0) {
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2625              		.loc 1 235 11 is_stmt 0 view .LVU697
 2626 0c18 FF6016E2 		ands	r6, r6, #255	@ value, MEM[base: _93, offset: 0B],
 2627              	.LVL155:
 235:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2628              		.loc 1 235 11 view .LVU698
 2629 0c1c 1600000A 		beq	.L142		@,
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2630              		.loc 1 236 13 is_stmt 1 view .LVU699
 2631              	.LVL156:
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2632              		.loc 1 237 13 view .LVU700
 238:armwave.c     **** 
 2633              		.loc 1 238 13 view .LVU701
 240:armwave.c     ****             g = MIN(gg, 255);
 2634              		.loc 1 240 13 view .LVU702
 241:armwave.c     ****             b = MIN(bb, 255);
 2635              		.loc 1 241 13 view .LVU703
 242:armwave.c     **** 
 2636              		.loc 1 242 13 view .LVU704
 245:armwave.c     **** 
 2637              		.loc 1 245 13 view .LVU705
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2638              		.loc 1 248 13 view .LVU706
 249:armwave.c     ****             ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 2639              		.loc 1 249 13 view .LVU707
 250:armwave.c     ****             xx = (nsub >> 8);
 2640              		.loc 1 250 13 view .LVU708
 251:armwave.c     **** 
 2641              		.loc 1 251 13 view .LVU709
 255:armwave.c     ****                 *(out_buffer_base + offset) = word;
 2642              		.loc 1 255 17 view .LVU710
 256:armwave.c     ****             }
 2643              		.loc 1 256 17 view .LVU711
 2644              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2645              		.loc 1 238 47 is_stmt 0 view .LVU712
 2646 0c20 860C63E1 		smulbb	r3, r6, ip	@ tmp202, value, _30
 2647              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2648              		.loc 1 237 47 view .LVU713
 2649 0c24 860E67E1 		smulbb	r7, r6, lr	@ tmp206, value, _26
 2650              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2651              		.loc 1 236 47 view .LVU714
 2652 0c28 860566E1 		smulbb	r6, r6, r5	@ tmp212, value, _21
 2653              	.LVL157:
 2654              	@ armwave.c:238:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 238:armwave.c     **** 
 2655              		.loc 1 238 16 view .LVU715
 2656 0c2c 4334A0E1 		asr	r3, r3, #8	@ bb, tmp202,
 2657              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2658              		.loc 1 242 17 view .LVU716
 2659 0c30 FF0053E3 		cmp	r3, #255	@ bb,
 2660              	@ armwave.c:237:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 237:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2661              		.loc 1 237 16 view .LVU717
 2662 0c34 4774A0E1 		asr	r7, r7, #8	@ gg, tmp206,
 2663              	@ armwave.c:242:             b = MIN(bb, 255);
 242:armwave.c     **** 
 2664              		.loc 1 242 17 view .LVU718
 2665 0c38 FF30A0A3 		movge	r3, #255	@ bb,
 2666              	@ armwave.c:241:             g = MIN(gg, 255);
 241:armwave.c     ****             b = MIN(bb, 255);
 2667              		.loc 1 241 17 view .LVU719
 2668 0c3c FF0057E3 		cmp	r7, #255	@ gg,
 2669 0c40 FF70A0A3 		movge	r7, #255	@ gg,
 2670              	@ armwave.c:236:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 236:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2671              		.loc 1 236 16 view .LVU720
 2672 0c44 4664A0E1 		asr	r6, r6, #8	@ rr, tmp212,
 2673              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2674              		.loc 1 240 17 view .LVU721
 2675 0c48 FF0056E3 		cmp	r6, #255	@ rr,
 2676              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2677              		.loc 1 245 48 view .LVU722
 2678 0c4c 0774A0E1 		lsl	r7, r7, #8	@ tmp207, gg,
 2679              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2680              		.loc 1 245 36 view .LVU723
 2681 0c50 0338A0E1 		lsl	r3, r3, #16	@ tmp203, bb,
 2682              	@ armwave.c:240:             r = MIN(rr, 255);
 240:armwave.c     ****             g = MIN(gg, 255);
 2683              		.loc 1 240 17 view .LVU724
 2684 0c54 FF60A0A3 		movge	r6, #255	@ rr,
 2685              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2686              		.loc 1 245 36 view .LVU725
 2687 0c58 FF3803E2 		and	r3, r3, #16711680	@ tmp204, tmp203,
 2688              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2689              		.loc 1 245 48 view .LVU726
 2690 0c5c 7770FFE6 		uxth	r7, r7	@ tmp208, tmp207
 2691              	@ armwave.c:248:             nsub = n * 2;
 248:armwave.c     ****             yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 2692              		.loc 1 248 18 view .LVU727
 2693 0c60 8180A0E1 		lsl	r8, r1, #1	@ nsub, n,
 2694              	.LVL158:
 2695              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2696              		.loc 1 245 54 view .LVU728
 2697 0c64 7660EFE6 		uxtb	r6, r6	@ rr, rr
 2698              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2699              		.loc 1 245 43 view .LVU729
 2700 0c68 073083E1 		orr	r3, r3, r7	@ tmp210, tmp204, tmp208
 2701              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2702              		.loc 1 245 54 view .LVU730
 2703 0c6c 063083E1 		orr	r3, r3, r6	@ tmp214, tmp210, rr
 2704              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 256:armwave.c     ****             }
 2705              		.loc 1 256 35 view .LVU731
 2706 0c70 4864A0E1 		asr	r6, r8, #8	@ tmp200, nsub,
 2707              	.LVL159:
 2708              	@ armwave.c:245:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 245:armwave.c     **** 
 2709              		.loc 1 245 18 view .LVU732
 2710 0c74 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp214,
 2711              	@ armwave.c:256:                 *(out_buffer_base + offset) = word;
 256:armwave.c     ****             }
 2712              		.loc 1 256 45 view .LVU733
 2713 0c78 063184E7 		str	r3, [r4, r6, lsl #2]	@ word, *_57
 2714              	.LVL160:
 2715              	.L142:
 2716              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2717              		.loc 1 231 34 view .LVU734
 2718 0c7c 011081E2 		add	r1, r1, #1	@ n, n,
 2719              	.LVL161:
 2720              	@ armwave.c:231:     for(n = 0; n < (npix / 2); n += 1) {
 231:armwave.c     ****         wave_word = g_armwave_state.ch1_buffer[n];
 2721              		.loc 1 231 5 view .LVU735
 2722 0c80 010052E1 		cmp	r2, r1	@ _5, n
 2723 0c84 E2FFFFCA 		bgt	.L143		@,
 2724 0c88 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 2725              	.LVL162:
 2726              	.L149:
 183:armwave.c     **** 
 2727              		.loc 1 183 5 is_stmt 1 view .LVU736
 2728 0c8c 10309FE5 		ldr	r3, .L150+4	@,
 2729 0c90 B720A0E3 		mov	r2, #183	@,
 2730 0c94 0C109FE5 		ldr	r1, .L150+8	@,
 2731 0c98 0C009FE5 		ldr	r0, .L150+12	@,
 2732              	.LVL163:
 183:armwave.c     **** 
 2733              		.loc 1 183 5 is_stmt 0 view .LVU737
 2734 0c9c FEFFFFEB 		bl	__assert_fail		@
 2735              	.LVL164:
 2736              	.L151:
 183:armwave.c     **** 
 2737              		.loc 1 183 5 view .LVU738
 2738              		.align	2
 2739              	.L150:
 2740 0ca0 00000000 		.word	g_armwave_state
 2741 0ca4 00000000 		.word	.LANCHOR0
 2742 0ca8 20000000 		.word	.LC2
 2743 0cac 2C000000 		.word	.LC3
 2744              	.LBE38:
 2745              	.LBE37:
 2746              		.cfi_endproc
 2747              	.LFE72:
 2749              		.align	2
 2750              		.global	armwave_test_buffer_alloc
 2751              		.syntax unified
 2752              		.arm
 2753              		.fpu vfp
 2755              	armwave_test_buffer_alloc:
 2756              	.LVL165:
 2757              	.LFB73:
 504:armwave.c     **** }
 505:armwave.c     **** 
 506:armwave.c     **** /*
 507:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 508:armwave.c     ****  */
 509:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 510:armwave.c     **** {
 2758              		.loc 1 510 1 is_stmt 1 view -0
 2759              		.cfi_startproc
 2760              		@ args = 0, pretend = 0, frame = 0
 2761              		@ frame_needed = 0, uses_anonymous_args = 0
 511:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2762              		.loc 1 511 5 view .LVU740
 2763              	@ armwave.c:510: {
 510:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2764              		.loc 1 510 1 is_stmt 0 view .LVU741
 2765 0cb0 70402DE9 		push	{r4, r5, r6, lr}	@
 2766              		.cfi_def_cfa_offset 16
 2767              		.cfi_offset 4, -16
 2768              		.cfi_offset 5, -12
 2769              		.cfi_offset 6, -8
 2770              		.cfi_offset 14, -4
 2771              	@ armwave.c:510: {
 510:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2772              		.loc 1 510 1 view .LVU742
 2773 0cb4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2774              	@ armwave.c:511:     if(g_armwave_state.test_wave_buffer != NULL) {
 2775              		.loc 1 511 23 view .LVU743
 2776 0cb8 44409FE5 		ldr	r4, .L159	@ tmp128,
 2777 0cbc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2778              	.LVL166:
 2779              	@ armwave.c:511:     if(g_armwave_state.test_wave_buffer != NULL) {
 2780              		.loc 1 511 7 view .LVU744
 2781 0cc0 000050E3 		cmp	r0, #0	@ _1,
 2782 0cc4 0000000A 		beq	.L153		@,
 512:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2783              		.loc 1 512 9 is_stmt 1 view .LVU745
 2784 0cc8 FEFFFFEB 		bl	free		@
 2785              	.LVL167:
 2786              	.L153:
 513:armwave.c     ****     }
 514:armwave.c     **** 
 515:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 516:armwave.c     **** 
 517:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2787              		.loc 1 517 5 view .LVU746
 2788              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2789              		.loc 1 517 75 is_stmt 0 view .LVU747
 2790 0ccc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2791 0cd0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2792              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2793              		.loc 1 517 40 view .LVU748
 2794 0cd4 0610A0E1 		mov	r1, r6	@, nsets
 2795              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2796              		.loc 1 517 75 view .LVU749
 2797 0cd8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2798              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2799              		.loc 1 517 40 view .LVU750
 2800 0cdc 0500A0E1 		mov	r0, r5	@, _4
 2801 0ce0 FEFFFFEB 		bl	calloc		@
 2802              	.LVL168:
 2803              	@ armwave.c:519:     if(g_armwave_state.test_wave_buffer == NULL) {
 518:armwave.c     **** 
 519:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2804              		.loc 1 519 7 view .LVU751
 2805 0ce4 000050E3 		cmp	r0, #0	@ tmp124,
 2806              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 2807              		.loc 1 517 38 view .LVU752
 2808 0ce8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2809              		.loc 1 519 5 is_stmt 1 view .LVU753
 2810              	@ armwave.c:519:     if(g_armwave_state.test_wave_buffer == NULL) {
 2811              		.loc 1 519 7 is_stmt 0 view .LVU754
 2812 0cec 7080BD18 		popne	{r4, r5, r6, pc}	@
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2813              		.loc 1 520 9 is_stmt 1 view .LVU755
 2814 0cf0 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2815 0cf4 0620A0E1 		mov	r2, r6	@, nsets
 2816 0cf8 08009FE5 		ldr	r0, .L159+4	@,
 2817              	@ armwave.c:524: }
 521:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 522:armwave.c     ****         return;
 523:armwave.c     ****     }
 524:armwave.c     **** }
 2818              		.loc 1 524 1 is_stmt 0 view .LVU756
 2819 0cfc 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2820              		.cfi_restore 14
 2821              		.cfi_restore 6
 2822              		.cfi_restore 5
 2823              		.cfi_restore 4
 2824              		.cfi_def_cfa_offset 0
 2825              	.LVL169:
 2826              	@ armwave.c:520:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2827              		.loc 1 520 9 view .LVU757
 2828 0d00 FEFFFFEA 		b	printf		@
 2829              	.LVL170:
 2830              	.L160:
 520:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2831              		.loc 1 520 9 view .LVU758
 2832              		.align	2
 2833              	.L159:
 2834 0d04 00000000 		.word	g_armwave_state
 2835 0d08 E8010000 		.word	.LC18
 2836              		.cfi_endproc
 2837              	.LFE73:
 2839              		.align	2
 2840              		.global	armwave_fill_pixbuf_into_pybuffer
 2841              		.syntax unified
 2842              		.arm
 2843              		.fpu vfp
 2845              	armwave_fill_pixbuf_into_pybuffer:
 2846              	.LVL171:
 2847              	.LFB74:
 525:armwave.c     **** 
 526:armwave.c     **** /*
 527:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 528:armwave.c     ****  */
 529:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 530:armwave.c     **** {
 2848              		.loc 1 530 1 is_stmt 1 view -0
 2849              		.cfi_startproc
 2850              		@ args = 0, pretend = 0, frame = 48
 2851              		@ frame_needed = 0, uses_anonymous_args = 0
 531:armwave.c     ****     Py_buffer buffer;
 2852              		.loc 1 531 5 view .LVU760
 532:armwave.c     ****     int ret;
 2853              		.loc 1 532 5 view .LVU761
 533:armwave.c     **** 
 534:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 535:armwave.c     **** 
 536:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2854              		.loc 1 536 5 view .LVU762
 2855              	@ armwave.c:530: {
 530:armwave.c     ****     Py_buffer buffer;
 2856              		.loc 1 530 1 is_stmt 0 view .LVU763
 2857 0d0c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2858              		.cfi_def_cfa_offset 4
 2859              		.cfi_offset 14, -4
 2860 0d10 34D04DE2 		sub	sp, sp, #52	@,,
 2861              		.cfi_def_cfa_offset 56
 2862              	@ armwave.c:536:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2863              		.loc 1 536 11 view .LVU764
 2864 0d14 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2865 0d18 0120A0E3 		mov	r2, #1	@,
 2866 0d1c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2867              	.LVL172:
 537:armwave.c     **** 
 538:armwave.c     ****     if(ret != 0) {
 2868              		.loc 1 538 5 is_stmt 1 view .LVU765
 2869              	@ armwave.c:538:     if(ret != 0) {
 2870              		.loc 1 538 7 is_stmt 0 view .LVU766
 2871 0d20 000050E3 		cmp	r0, #0	@,
 2872 0d24 0A00001A 		bne	.L165		@,
 539:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 540:armwave.c     ****         Py_RETURN_FALSE;
 541:armwave.c     ****     }
 542:armwave.c     **** 
 543:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 544:armwave.c     **** 
 545:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2873              		.loc 1 545 5 is_stmt 1 view .LVU767
 2874 0d28 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2875              	.LVL173:
 2876              		.loc 1 545 5 is_stmt 0 view .LVU768
 2877 0d2c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2878              	.LVL174:
 546:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 547:armwave.c     **** 
 548:armwave.c     ****     PyBuffer_Release(&buffer);
 2879              		.loc 1 548 5 is_stmt 1 view .LVU769
 2880 0d30 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2881 0d34 FEFFFFEB 		bl	PyBuffer_Release		@
 2882              	.LVL175:
 549:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 550:armwave.c     **** 
 551:armwave.c     ****     Py_RETURN_TRUE;
 2883              		.loc 1 551 5 view .LVU770
 2884              	.LBB39:
 2885              	.LBI39:
 2886              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2887              		.loc 2 456 20 view .LVU771
 2888              	.LBB40:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2889              		.loc 2 458 21 view .LVU772
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2890              		.loc 2 459 5 view .LVU773
 2891              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2892              		.loc 2 459 18 is_stmt 0 view .LVU774
 2893 0d38 38309FE5 		ldr	r3, .L166	@ tmp126,
 2894              	.LBE40:
 2895              	.LBE39:
 2896              	@ armwave.c:551:     Py_RETURN_TRUE;
 2897              		.loc 1 551 5 view .LVU775
 2898 0d3c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2899              	.LBB42:
 2900              	.LBB41:
 2901              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2902              		.loc 2 459 18 view .LVU776
 2903 0d40 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2904 0d44 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2905 0d48 002083E5 		str	r2, [r3]	@ tmp128,
 2906              	.LBE41:
 2907              	.LBE42:
 2908              	@ armwave.c:552: }
 552:armwave.c     **** }
 2909              		.loc 1 552 1 view .LVU777
 2910 0d4c 34D08DE2 		add	sp, sp, #52	@,,
 2911              		.cfi_remember_state
 2912              		.cfi_def_cfa_offset 4
 2913              		@ sp needed	@
 2914 0d50 04F09DE4 		ldr	pc, [sp], #4	@
 2915              	.LVL176:
 2916              	.L165:
 2917              		.cfi_restore_state
 539:armwave.c     ****         Py_RETURN_FALSE;
 2918              		.loc 1 539 9 is_stmt 1 view .LVU778
 2919 0d54 20009FE5 		ldr	r0, .L166+4	@,
 2920              	.LVL177:
 539:armwave.c     ****         Py_RETURN_FALSE;
 2921              		.loc 1 539 9 is_stmt 0 view .LVU779
 2922 0d58 FEFFFFEB 		bl	puts		@
 2923              	.LVL178:
 540:armwave.c     ****     }
 2924              		.loc 1 540 9 is_stmt 1 view .LVU780
 2925              	.LBB43:
 2926              	.LBI43:
 456:/usr/local/include/python3.8/object.h **** {
 2927              		.loc 2 456 20 view .LVU781
 2928              	.LBB44:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2929              		.loc 2 458 21 view .LVU782
 2930              		.loc 2 459 5 view .LVU783
 2931              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2932              		.loc 2 459 18 is_stmt 0 view .LVU784
 2933 0d5c 1C309FE5 		ldr	r3, .L166+8	@ tmp120,
 2934              	.LBE44:
 2935              	.LBE43:
 2936              	@ armwave.c:540:         Py_RETURN_FALSE;
 540:armwave.c     ****     }
 2937              		.loc 1 540 9 view .LVU785
 2938 0d60 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2939              	.LBB46:
 2940              	.LBB45:
 2941              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2942              		.loc 2 459 18 view .LVU786
 2943 0d64 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2944 0d68 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2945 0d6c 002083E5 		str	r2, [r3]	@ tmp122,
 2946              	.LBE45:
 2947              	.LBE46:
 2948              	@ armwave.c:552: }
 2949              		.loc 1 552 1 view .LVU787
 2950 0d70 34D08DE2 		add	sp, sp, #52	@,,
 2951              		.cfi_def_cfa_offset 4
 2952              		@ sp needed	@
 2953 0d74 04F09DE4 		ldr	pc, [sp], #4	@
 2954              	.L167:
 2955              		.align	2
 2956              	.L166:
 2957 0d78 00000000 		.word	_Py_TrueStruct
 2958 0d7c 3C020000 		.word	.LC19
 2959 0d80 00000000 		.word	_Py_FalseStruct
 2960              		.cfi_endproc
 2961              	.LFE74:
 2963              		.align	2
 2964              		.global	armwave_test_create_am_sine
 2965              		.syntax unified
 2966              		.arm
 2967              		.fpu vfp
 2969              	armwave_test_create_am_sine:
 2970              	.LVL179:
 2971              	.LFB75:
 553:armwave.c     **** 
 554:armwave.c     **** /*
 555:armwave.c     ****  * Make a test AM waveform for render tests.
 556:armwave.c     ****  *
 557:armwave.c     ****  * @param   mod                     modulation depth
 558:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 559:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 560:armwave.c     ****  */
 561:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 562:armwave.c     **** {
 2972              		.loc 1 562 1 is_stmt 1 view -0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 8
 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 563:armwave.c     ****     float v, noise, xnoise, mod_val;
 2976              		.loc 1 563 5 view .LVU789
 564:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2977              		.loc 1 564 5 view .LVU790
 2978              	@ armwave.c:562: {
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 2979              		.loc 1 562 1 is_stmt 0 view .LVU791
 2980 0d84 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2981              		.cfi_def_cfa_offset 32
 2982              		.cfi_offset 4, -32
 2983              		.cfi_offset 5, -28
 2984              		.cfi_offset 6, -24
 2985              		.cfi_offset 7, -20
 2986              		.cfi_offset 8, -16
 2987              		.cfi_offset 9, -12
 2988              		.cfi_offset 10, -8
 2989              		.cfi_offset 14, -4
 2990              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2991              		.loc 1 564 38 view .LVU792
 2992 0d88 7A7A9FED 		vldr.32	s14, .L199	@ tmp180,
 2993              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2994              		.loc 1 564 55 view .LVU793
 2995 0d8c 00529FE5 		ldr	r5, .L199+28	@ tmp250,
 2996              	@ armwave.c:562: {
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 2997              		.loc 1 562 1 view .LVU794
 2998 0d90 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2999              		.cfi_def_cfa_offset 80
 3000              		.cfi_offset 80, -80
 3001              		.cfi_offset 81, -76
 3002              		.cfi_offset 82, -72
 3003              		.cfi_offset 83, -68
 3004              		.cfi_offset 84, -64
 3005              		.cfi_offset 85, -60
 3006              		.cfi_offset 86, -56
 3007              		.cfi_offset 87, -52
 3008              		.cfi_offset 88, -48
 3009              		.cfi_offset 89, -44
 3010              		.cfi_offset 90, -40
 3011              		.cfi_offset 91, -36
 3012 0d94 0090A0E1 		mov	r9, r0	@ sets, sets
 3013              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 3014              		.loc 1 564 38 view .LVU795
 3015 0d98 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 3016              	@ armwave.c:568:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 565:armwave.c     ****     int s, set_offset = 0;
 566:armwave.c     ****     int w, x;
 567:armwave.c     **** 
 568:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 3017              		.loc 1 568 70 view .LVU796
 3018 0d9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3019 0da0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 3020              	.LBB49:
 3021              	.LBB50:
 3022              	@ armwave.c:511:     if(g_armwave_state.test_wave_buffer != NULL) {
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3023              		.loc 1 511 23 view .LVU797
 3024 0da4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 3025              	.LVL180:
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3026              		.loc 1 511 23 view .LVU798
 3027              	.LBE50:
 3028              	.LBE49:
 3029              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 564:armwave.c     ****     int s, set_offset = 0;
 3030              		.loc 1 564 38 view .LVU799
 3031 0da8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 3032              	@ armwave.c:568:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 3033              		.loc 1 568 70 view .LVU800
 3034 0dac 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 3035              	@ armwave.c:562: {
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 3036              		.loc 1 562 1 view .LVU801
 3037 0db0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 3038              	.LBB54:
 3039              	.LBB51:
 3040              	@ armwave.c:511:     if(g_armwave_state.test_wave_buffer != NULL) {
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3041              		.loc 1 511 7 view .LVU802
 3042 0db4 000050E3 		cmp	r0, #0	@ _82,
 3043              	.LBE51:
 3044              	.LBE54:
 3045              	@ armwave.c:562: {
 562:armwave.c     ****     float v, noise, xnoise, mod_val;
 3046              		.loc 1 562 1 view .LVU803
 3047 0db8 08D04DE2 		sub	sp, sp, #8	@,,
 3048              		.cfi_def_cfa_offset 88
 3049              	@ armwave.c:569:     g_armwave_state.test_wave_buffer_nsets = sets;
 569:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3050              		.loc 1 569 44 view .LVU804
 3051 0dbc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 3052              	@ armwave.c:568:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 568:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3053              		.loc 1 568 45 view .LVU805
 3054 0dc0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 3055              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 564:armwave.c     ****     int s, set_offset = 0;
 3056              		.loc 1 564 38 view .LVU806
 3057 0dc4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 3058              	@ armwave.c:564:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 564:armwave.c     ****     int s, set_offset = 0;
 3059              		.loc 1 564 11 view .LVU807
 3060 0dc8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 3061              	.LVL181:
 565:armwave.c     ****     int w, x;
 3062              		.loc 1 565 5 is_stmt 1 view .LVU808
 566:armwave.c     **** 
 3063              		.loc 1 566 5 view .LVU809
 568:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 3064              		.loc 1 568 5 view .LVU810
 3065              		.loc 1 569 5 view .LVU811
 570:armwave.c     ****     armwave_test_buffer_alloc(sets);
 3066              		.loc 1 570 5 view .LVU812
 3067              	.LBB55:
 3068              	.LBI49:
 509:armwave.c     **** {
 3069              		.loc 1 509 6 view .LVU813
 3070              	.LBB52:
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3071              		.loc 1 511 5 view .LVU814
 3072              	@ armwave.c:511:     if(g_armwave_state.test_wave_buffer != NULL) {
 511:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 3073              		.loc 1 511 7 is_stmt 0 view .LVU815
 3074 0dcc 0000000A 		beq	.L169		@,
 512:armwave.c     ****     }
 3075              		.loc 1 512 9 is_stmt 1 view .LVU816
 3076 0dd0 FEFFFFEB 		bl	free		@
 3077              	.LVL182:
 3078              	.L169:
 517:armwave.c     **** 
 3079              		.loc 1 517 5 view .LVU817
 3080              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 3081              		.loc 1 517 75 is_stmt 0 view .LVU818
 3082 0dd4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 3083 0dd8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 3084              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 3085              		.loc 1 517 40 view .LVU819
 3086 0ddc 0910A0E1 		mov	r1, r9	@, sets
 3087              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 3088              		.loc 1 517 75 view .LVU820
 3089 0de0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 3090              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 3091              		.loc 1 517 40 view .LVU821
 3092 0de4 0400A0E1 		mov	r0, r4	@, _85
 3093 0de8 FEFFFFEB 		bl	calloc		@
 3094              	.LVL183:
 3095              	@ armwave.c:519:     if(g_armwave_state.test_wave_buffer == NULL) {
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3096              		.loc 1 519 7 view .LVU822
 3097 0dec 000050E3 		cmp	r0, #0	@ tmp191,
 3098              	@ armwave.c:517:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 517:armwave.c     **** 
 3099              		.loc 1 517 38 view .LVU823
 3100 0df0 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3101              		.loc 1 519 5 is_stmt 1 view .LVU824
 3102              	@ armwave.c:519:     if(g_armwave_state.test_wave_buffer == NULL) {
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3103              		.loc 1 519 7 is_stmt 0 view .LVU825
 3104 0df4 5A00000A 		beq	.L198		@,
 3105              	.L170:
 3106              	.LVL184:
 519:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 3107              		.loc 1 519 7 view .LVU826
 3108              	.LBE52:
 3109              	.LBE55:
 3110              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 571:armwave.c     **** 
 572:armwave.c     ****     for(s = 0; s < sets; s++) {
 3111              		.loc 1 572 5 discriminator 1 view .LVU827
 3112 0df8 000059E3 		cmp	r9, #0	@ sets,
 3113 0dfc 550000DA 		ble	.L168		@,
 3114              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 574:armwave.c     ****     
 575:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 576:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 577:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 578:armwave.c     **** 
 579:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 580:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 581:armwave.c     ****                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 583:armwave.c     ****                 noise *= noise;
 584:armwave.c     **** 
 585:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 586:armwave.c     ****                     noise = -noise;
 587:armwave.c     **** 
 588:armwave.c     ****                 noise += 1.0f;
 589:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 590:armwave.c     **** 
 591:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 3115              		.loc 1 591 45 view .LVU828
 3116 0e00 5C8A9FED 		vldr.32	s16, .L199	@ tmp258,
 3117              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 592:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 593:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 594:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 3118              		.loc 1 594 104 view .LVU829
 3119 0e04 5CCA9FED 		vldr.32	s24, .L199+4	@ tmp259,
 3120              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 3121              		.loc 1 572 5 view .LVU830
 3122 0e08 0070A0E3 		mov	r7, #0	@ set_offset,
 3123              	@ armwave.c:573:         printf("Calculating test set %d\n", s);
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3124              		.loc 1 573 9 view .LVU831
 3125 0e0c 84A19FE5 		ldr	r10, .L199+32	@ tmp257,
 3126              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 3127              		.loc 1 572 5 view .LVU832
 3128 0e10 0780A0E1 		mov	r8, r7	@ s, set_offset
 3129              	.LVL185:
 3130              	.L171:
 573:armwave.c     ****         printf("Calculating test set %d\n", s);
 3131              		.loc 1 573 9 is_stmt 1 view .LVU833
 3132 0e14 0810A0E1 		mov	r1, r8	@, s
 3133 0e18 0A00A0E1 		mov	r0, r10	@, tmp257
 3134 0e1c FEFFFFEB 		bl	printf		@
 3135              	.LVL186:
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3136              		.loc 1 575 9 view .LVU834
 3137              	@ armwave.c:575:         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3138              		.loc 1 575 39 is_stmt 0 view .LVU835
 3139 0e20 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3140              	@ armwave.c:575:         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3141              		.loc 1 575 9 view .LVU836
 3142 0e24 000052E3 		cmp	r2, #0	@ prephitmp_120,
 3143 0e28 450000DA 		ble	.L172		@,
 3144              	@ armwave.c:577:             mod_val = 0.5f + (_1_waves_mod * w);
 577:armwave.c     **** 
 3145              		.loc 1 577 21 view .LVU837
 3146 0e2c 53CADFED 		vldr.32	s25, .L199+8	@ tmp200,
 3147              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3148              		.loc 1 591 33 view .LVU838
 3149 0e30 53BA9FED 		vldr.32	s22, .L199+12	@ tmp253,
 3150              	@ armwave.c:589:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 3151              		.loc 1 589 24 view .LVU839
 3152 0e34 53AADFED 		vldr.32	s21, .L199+16	@ tmp254,
 3153 0e38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3154              	@ armwave.c:575:         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3155              		.loc 1 575 15 view .LVU840
 3156 0e3c 0060A0E3 		mov	r6, #0	@ w,
 3157              	.LVL187:
 3158              	.L179:
 577:armwave.c     **** 
 3159              		.loc 1 577 13 is_stmt 1 view .LVU841
 3160              	@ armwave.c:577:             mod_val = 0.5f + (_1_waves_mod * w);
 577:armwave.c     **** 
 3161              		.loc 1 577 21 is_stmt 0 view .LVU842
 3162 0e40 906A07EE 		vmov	s15, r6	@ int	@ w, w
 3163 0e44 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 3164              	@ armwave.c:579:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3165              		.loc 1 579 13 view .LVU843
 3166 0e48 000053E3 		cmp	r3, #0	@ prephitmp_124,
 3167              	@ armwave.c:577:             mod_val = 0.5f + (_1_waves_mod * w);
 577:armwave.c     **** 
 3168              		.loc 1 577 21 view .LVU844
 3169 0e4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 3170 0e50 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 3171              	.LVL188:
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3172              		.loc 1 579 13 is_stmt 1 view .LVU845
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3173              		.loc 1 579 13 is_stmt 0 view .LVU846
 3174 0e54 370000DA 		ble	.L173		@,
 3175 0e58 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 3176              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3177              		.loc 1 594 113 view .LVU847
 3178 0e5c 4AAA9FED 		vldr.32	s20, .L199+20	@ tmp229,
 3179 0e60 4A8ADFED 		vldr.32	s17, .L199+24	@ tmp230,
 3180              	@ armwave.c:579:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3181              		.loc 1 579 19 view .LVU848
 3182 0e64 0040A0E3 		mov	r4, #0	@ x,
 3183              	.LVL189:
 3184              	.L178:
 580:armwave.c     ****                 noise *= noise;
 3185              		.loc 1 580 17 is_stmt 1 view .LVU849
 3186              	@ armwave.c:580:                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 3187              		.loc 1 580 28 is_stmt 0 view .LVU850
 3188 0e68 FEFFFFEB 		bl	rand		@
 3189              	.LVL190:
 3190              	@ armwave.c:580:                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 3191              		.loc 1 580 35 view .LVU851
 3192 0e6c 7000FFE6 		uxth	r0, r0	@ tmp201,
 3193              	@ armwave.c:580:                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 3194              		.loc 1 580 45 view .LVU852
 3195 0e70 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 3196 0e74 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 3197              	@ armwave.c:580:                 noise  = ((rand() & 0xffff) * noise_fraction);
 580:armwave.c     ****                 noise *= noise;
 3198              		.loc 1 580 24 view .LVU853
 3199 0e78 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 3200              	.LVL191:
 581:armwave.c     ****                 noise *= noise;
 3201              		.loc 1 581 17 is_stmt 1 view .LVU854
 3202              	@ armwave.c:581:                 noise *= noise;
 581:armwave.c     ****                 noise *= noise;
 3203              		.loc 1 581 23 is_stmt 0 view .LVU855
 3204 0e7c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3205              	.LVL192:
 582:armwave.c     ****                 noise *= noise;
 3206              		.loc 1 582 17 is_stmt 1 view .LVU856
 3207              	@ armwave.c:582:                 noise *= noise;
 582:armwave.c     ****                 noise *= noise;
 3208              		.loc 1 582 23 is_stmt 0 view .LVU857
 3209 0e80 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 3210              	.LVL193:
 583:armwave.c     **** 
 3211              		.loc 1 583 17 is_stmt 1 view .LVU858
 3212              	@ armwave.c:583:                 noise *= noise;
 583:armwave.c     **** 
 3213              		.loc 1 583 23 is_stmt 0 view .LVU859
 3214 0e84 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 3215              	.LVL194:
 585:armwave.c     ****                     noise = -noise;
 3216              		.loc 1 585 17 is_stmt 1 view .LVU860
 3217              	@ armwave.c:585:                 if((rand() & 0xffff) > 0x7fff)
 585:armwave.c     ****                     noise = -noise;
 3218              		.loc 1 585 21 is_stmt 0 view .LVU861
 3219 0e88 FEFFFFEB 		bl	rand		@
 3220              	.LVL195:
 586:armwave.c     **** 
 3221              		.loc 1 586 21 is_stmt 1 view .LVU862
 3222              	@ armwave.c:585:                 if((rand() & 0xffff) > 0x7fff)
 585:armwave.c     ****                     noise = -noise;
 3223              		.loc 1 585 19 is_stmt 0 view .LVU863
 3224 0e8c 020910E3 		tst	r0, #32768	@,
 3225              	@ armwave.c:586:                     noise = -noise;
 586:armwave.c     **** 
 3226              		.loc 1 586 27 view .LVU864
 3227 0e90 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 3228              	.LVL196:
 588:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3229              		.loc 1 588 17 is_stmt 1 view .LVU865
 589:armwave.c     **** 
 3230              		.loc 1 589 17 view .LVU866
 3231              	@ armwave.c:589:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 3232              		.loc 1 589 27 is_stmt 0 view .LVU867
 3233 0e94 FEFFFFEB 		bl	rand		@
 3234              	.LVL197:
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3235              		.loc 1 591 17 is_stmt 1 view .LVU868
 3236              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3237              		.loc 1 591 45 is_stmt 0 view .LVU869
 3238 0e98 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 3239              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3240              		.loc 1 591 33 view .LVU870
 3241 0e9c 904A07EE 		vmov	s15, r4	@ int	@ x, x
 3242              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3243              		.loc 1 591 45 view .LVU871
 3244 0ea0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 3245              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3246              		.loc 1 591 33 view .LVU872
 3247 0ea4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 3248              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3249              		.loc 1 591 45 view .LVU873
 3250 0ea8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 3251              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3252              		.loc 1 591 33 view .LVU874
 3253 0eac 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 3254              	@ armwave.c:589:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 3255              		.loc 1 589 34 view .LVU875
 3256 0eb0 7000FFE6 		uxth	r0, r0	@ tmp214,
 3257              	.LVL198:
 3258              	@ armwave.c:589:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 3259              		.loc 1 589 44 view .LVU876
 3260 0eb4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 3261 0eb8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 3262              	@ armwave.c:589:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 589:armwave.c     **** 
 3263              		.loc 1 589 24 view .LVU877
 3264 0ebc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 3265              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3266              		.loc 1 591 77 view .LVU878
 3267 0ec0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 3268              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3269              		.loc 1 591 22 view .LVU879
 3270 0ec4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 3271 0ec8 FEFFFFEB 		bl	sin		@
 3272              	.LVL199:
 3273              		.loc 1 594 17 is_stmt 1 view .LVU880
 3274              	@ armwave.c:588:                 noise += 1.0f;
 588:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 3275              		.loc 1 588 23 is_stmt 0 view .LVU881
 3276 0ecc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 3277              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3278              		.loc 1 594 104 view .LVU882
 3279 0ed0 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 3280              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3281              		.loc 1 591 98 view .LVU883
 3282 0ed4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 3283              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3284              		.loc 1 591 87 view .LVU884
 3285 0ed8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 3286              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3287              		.loc 1 591 98 view .LVU885
 3288 0edc 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 3289              	@ armwave.c:591:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 591:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 3290              		.loc 1 591 19 view .LVU886
 3291 0ee0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 3292              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3293              		.loc 1 594 113 view .LVU887
 3294 0ee4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 3295 0ee8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 3296 0eec C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 3297 0ef0 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3298 0ef4 050000DA 		ble	.L175		@,
 3299              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3300              		.loc 1 594 104 discriminator 1 view .LVU888
 3301 0ef8 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 3302 0efc FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 3303 0f00 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 3304 0f04 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 3305 0f08 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 3306 0f0c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 3307              	.L175:
 3308              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3309              		.loc 1 594 57 discriminator 12 view .LVU889
 3310 0f10 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3311              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3312              		.loc 1 594 102 discriminator 12 view .LVU890
 3313 0f14 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 3314 0f18 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 3315 0f1c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 3316              	@ armwave.c:579:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3317              		.loc 1 579 58 discriminator 12 view .LVU891
 3318 0f20 014084E2 		add	r4, r4, #1	@ x, x,
 3319              	.LVL200:
 3320              	@ armwave.c:594:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 3321              		.loc 1 594 102 discriminator 12 view .LVU892
 3322 0f24 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 3323              	@ armwave.c:579:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3324              		.loc 1 579 43 discriminator 12 view .LVU893
 3325 0f28 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 3326              	@ armwave.c:579:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 579:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 3327              		.loc 1 579 13 discriminator 12 view .LVU894
 3328 0f2c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 3329 0f30 CCFFFFCA 		bgt	.L178		@,
 3330 0f34 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 3331              	.LVL201:
 3332              	.L173:
 3333              	@ armwave.c:575:         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3334              		.loc 1 575 48 discriminator 2 view .LVU895
 3335 0f38 016086E2 		add	r6, r6, #1	@ w, w,
 3336              	.LVL202:
 3337              	@ armwave.c:575:         for(w = 0; w < g_armwave_state.waves; w++) {
 575:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3338              		.loc 1 575 9 discriminator 2 view .LVU896
 3339 0f3c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3340 0f40 BEFFFFBA 		blt	.L179		@,
 3341              	.LVL203:
 3342              	.L172:
 595:armwave.c     ****             }
 596:armwave.c     ****         }
 597:armwave.c     **** 
 598:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3343              		.loc 1 598 9 is_stmt 1 discriminator 2 view .LVU897
 3344              	@ armwave.c:598:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3345              		.loc 1 598 46 is_stmt 0 discriminator 2 view .LVU898
 3346 0f44 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3347              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 3348              		.loc 1 572 27 discriminator 2 view .LVU899
 3349 0f48 018088E2 		add	r8, r8, #1	@ s, s,
 3350              	.LVL204:
 3351              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 3352              		.loc 1 572 5 discriminator 2 view .LVU900
 3353 0f4c 080059E1 		cmp	r9, r8	@ sets, s
 3354              	@ armwave.c:598:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3355              		.loc 1 598 20 discriminator 2 view .LVU901
 3356 0f50 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3357              	.LVL205:
 3358              	@ armwave.c:572:     for(s = 0; s < sets; s++) {
 572:armwave.c     ****         printf("Calculating test set %d\n", s);
 3359              		.loc 1 572 5 discriminator 2 view .LVU902
 3360 0f54 AEFFFF1A 		bne	.L171		@,
 3361              	.LVL206:
 3362              	.L168:
 3363              	@ armwave.c:600: }
 599:armwave.c     ****     }
 600:armwave.c     **** }
 3364              		.loc 1 600 1 view .LVU903
 3365 0f58 08D08DE2 		add	sp, sp, #8	@,,
 3366              		.cfi_remember_state
 3367              		.cfi_def_cfa_offset 80
 3368              		@ sp needed	@
 3369 0f5c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3370              		.cfi_restore 90
 3371              		.cfi_restore 91
 3372              		.cfi_restore 88
 3373              		.cfi_restore 89
 3374              		.cfi_restore 86
 3375              		.cfi_restore 87
 3376              		.cfi_restore 84
 3377              		.cfi_restore 85
 3378              		.cfi_restore 82
 3379              		.cfi_restore 83
 3380              		.cfi_restore 80
 3381              		.cfi_restore 81
 3382              		.cfi_def_cfa_offset 32
 3383              	.LVL207:
 3384              		.loc 1 600 1 view .LVU904
 3385 0f60 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3386              	.LVL208:
 3387              	.L198:
 3388              		.cfi_restore_state
 3389              	.LBB56:
 3390              	.LBB53:
 520:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3391              		.loc 1 520 9 is_stmt 1 view .LVU905
 3392 0f64 940901E0 		mul	r1, r4, r9	@, _85, sets
 3393 0f68 0920A0E1 		mov	r2, r9	@, sets
 3394 0f6c 28009FE5 		ldr	r0, .L199+36	@,
 3395 0f70 FEFFFFEB 		bl	printf		@
 3396              	.LVL209:
 522:armwave.c     ****     }
 3397              		.loc 1 522 9 view .LVU906
 3398 0f74 9FFFFFEA 		b	.L170		@
 3399              	.L200:
 3400              		.align	2
 3401              	.L199:
 3402 0f78 0000803F 		.word	1065353216
 3403 0f7c 00007F43 		.word	1132396544
 3404 0f80 0000003F 		.word	1056964608
 3405 0f84 C3F5C840 		.word	1086911939
 3406 0f88 38FFC74A 		.word	1254620984
 3407 0f8c 0000FE42 		.word	1123942400
 3408 0f90 00000043 		.word	1124073472
 3409 0f94 00000000 		.word	g_armwave_state
 3410 0f98 90020000 		.word	.LC20
 3411 0f9c E8010000 		.word	.LC18
 3412              	.LBE53:
 3413              	.LBE56:
 3414              		.cfi_endproc
 3415              	.LFE75:
 3417              		.align	2
 3418              		.global	armwave_cleanup
 3419              		.syntax unified
 3420              		.arm
 3421              		.fpu vfp
 3423              	armwave_cleanup:
 3424              	.LFB76:
 601:armwave.c     **** 
 602:armwave.c     **** /*
 603:armwave.c     ****  * Make a test square waveform.
 604:armwave.c     ****  *
 605:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 606:armwave.c     ****  */
 607:armwave.c     **** #if 0
 608:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 609:armwave.c     **** {
 610:armwave.c     ****     uint8_t v;
 611:armwave.c     ****     float noise, xnoise;
 612:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 613:armwave.c     ****     int w, x;
 614:armwave.c     **** 
 615:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 616:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 617:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 618:armwave.c     ****             noise *= noise;
 619:armwave.c     ****             noise *= noise;
 620:armwave.c     ****             noise *= noise;
 621:armwave.c     **** 
 622:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 623:armwave.c     ****                 noise = -noise;
 624:armwave.c     **** 
 625:armwave.c     ****             //noise += 1.0f;
 626:armwave.c     **** 
 627:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 628:armwave.c     ****                 new_level = 0.2f;
 629:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 630:armwave.c     ****                 new_level = 0.8f;
 631:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 632:armwave.c     ****                 new_level = 0.2f;
 633:armwave.c     ****             } else {
 634:armwave.c     ****                 new_level = 0.8f;
 635:armwave.c     ****             }
 636:armwave.c     **** 
 637:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 638:armwave.c     **** 
 639:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 640:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 641:armwave.c     ****         }
 642:armwave.c     ****     }
 643:armwave.c     **** }
 644:armwave.c     **** #endif
 645:armwave.c     **** 
 646:armwave.c     **** /*
 647:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 648:armwave.c     ****  */
 649:armwave.c     **** void armwave_cleanup()
 650:armwave.c     **** {
 3425              		.loc 1 650 1 view -0
 3426              		.cfi_startproc
 3427              		@ args = 0, pretend = 0, frame = 0
 3428              		@ frame_needed = 0, uses_anonymous_args = 0
 651:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3429              		.loc 1 651 5 view .LVU908
 3430              	@ armwave.c:650: {
 650:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3431              		.loc 1 650 1 is_stmt 0 view .LVU909
 3432 0fa0 10402DE9 		push	{r4, lr}	@
 3433              		.cfi_def_cfa_offset 8
 3434              		.cfi_offset 4, -8
 3435              		.cfi_offset 14, -4
 3436              	@ armwave.c:651:     free(g_armwave_state.out_pixbuf);
 3437              		.loc 1 651 25 view .LVU910
 3438 0fa4 34409FE5 		ldr	r4, .L203	@ tmp114,
 3439              	@ armwave.c:651:     free(g_armwave_state.out_pixbuf);
 3440              		.loc 1 651 5 view .LVU911
 3441 0fa8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3442 0fac FEFFFFEB 		bl	free		@
 3443              	.LVL210:
 652:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3444              		.loc 1 652 5 is_stmt 1 view .LVU912
 3445 0fb0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3446 0fb4 FEFFFFEB 		bl	free		@
 3447              	.LVL211:
 653:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3448              		.loc 1 653 5 view .LVU913
 3449 0fb8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3450 0fbc FEFFFFEB 		bl	free		@
 3451              	.LVL212:
 654:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3452              		.loc 1 654 5 view .LVU914
 3453 0fc0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3454 0fc4 FEFFFFEB 		bl	free		@
 3455              	.LVL213:
 655:armwave.c     **** 
 656:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3456              		.loc 1 656 5 view .LVU915
 3457              	@ armwave.c:656:     g_armwave_state.out_pixbuf = NULL;
 3458              		.loc 1 656 32 is_stmt 0 view .LVU916
 3459 0fc8 0030A0E3 		mov	r3, #0	@ tmp123,
 3460 0fcc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 657:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3461              		.loc 1 657 5 is_stmt 1 view .LVU917
 3462              	@ armwave.c:657:     g_armwave_state.ch1_buffer = NULL;
 3463              		.loc 1 657 32 is_stmt 0 view .LVU918
 3464 0fd0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 658:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3465              		.loc 1 658 5 is_stmt 1 view .LVU919
 3466              	@ armwave.c:658:     g_armwave_state.xcoord_to_xpixel = NULL;
 3467              		.loc 1 658 38 is_stmt 0 view .LVU920
 3468 0fd4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 659:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3469              		.loc 1 659 5 is_stmt 1 view .LVU921
 3470              	@ armwave.c:659:     g_armwave_state.test_wave_buffer = NULL;
 3471              		.loc 1 659 38 is_stmt 0 view .LVU922
 3472 0fd8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3473              	@ armwave.c:660: }
 660:armwave.c     **** }
 3474              		.loc 1 660 1 view .LVU923
 3475 0fdc 1080BDE8 		pop	{r4, pc}	@
 3476              	.L204:
 3477              		.align	2
 3478              	.L203:
 3479 0fe0 00000000 		.word	g_armwave_state
 3480              		.cfi_endproc
 3481              	.LFE76:
 3483              		.comm	gamma_table,256,4
 3484              		.comm	g_armwave_state,136,4
 3485              		.section	.rodata
 3486              		.align	2
 3487              		.set	.LANCHOR0,. + 0
 3490              	__PRETTY_FUNCTION__.17096:
 3491 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3491      6176655F 
 3491      66696C6C 
 3491      5F706978 
 3491      6275665F 
 3492 001b 00       		.space	1
 3495              	__PRETTY_FUNCTION__.17120:
 3496 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3496      6176655F 
 3496      73657475 
 3496      705F7265 
 3496      6E646572 
 3497 0031 000000   		.space	3
 3500              	__PRETTY_FUNCTION__.17127:
 3501 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3501      6176655F 
 3501      7365745F 
 3501      77617665 
 3501      5F706F69 
 3502 004d 000000   		.space	3
 3505              	__PRETTY_FUNCTION__.17134:
 3506 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3506      6176655F 
 3506      7365745F 
 3506      77617665 
 3506      5F706F69 
 3507              		.section	.rodata.str1.4,"aMS",%progbits,1
 3508              		.align	2
 3509              	.LC0:
 3510 0000 76302E30 		.ascii	"v0.0.1\000"
 3510      2E3100
 3511 0007 00       		.space	1
 3512              	.LC1:
 3513 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3513      61766520 
 3513      76657273 
 3513      696F6E3A 
 3513      2025730A 
 3514 001d 000000   		.space	3
 3515              	.LC2:
 3516 0020 61726D77 		.ascii	"armwave.c\000"
 3516      6176652E 
 3516      6300
 3517 002a 0000     		.space	2
 3518              	.LC3:
 3519 002c 6F75745F 		.ascii	"out_buffer != NULL\000"
 3519      62756666 
 3519      65722021 
 3519      3D204E55 
 3519      4C4C00
 3520 003f 00       		.space	1
 3521              	.LC4:
 3522 0040 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3522      20653D25 
 3522      6420773D 
 3522      25642077 
 3522      733D2564 
 3523              	.LC5:
 3524 006c 73746172 		.ascii	"start_point < end_point\000"
 3524      745F706F 
 3524      696E7420 
 3524      3C20656E 
 3524      645F706F 
 3525              	.LC6:
 3526 0084 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 3526      7566665F 
 3526      73697A65 
 3526      3D25642C 
 3526      20636D70 
 3527 00b7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 3527      5F776964 
 3527      74683D25 
 3527      642C2077 
 3527      6176655F 
 3528 00e1 000000   		.space	3
 3529              	.LC7:
 3530 00e4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3530      6D776176 
 3530      655F7374 
 3530      6174652E 
 3530      6368315F 
 3531 0107 00       		.space	1
 3532              	.LC8:
 3533 0108 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3533      6D776176 
 3533      655F7374 
 3533      6174652E 
 3533      78636F6F 
 3534 0131 000000   		.space	3
 3535              	.LC9:
 3536 0134 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3536      3A203078 
 3536      25303878 
 3536      20307825 
 3536      30387820 
 3537              	.LC10:
 3538 0158 77617665 		.ascii	"wave_buffer != NULL\000"
 3538      5F627566 
 3538      66657220 
 3538      213D204E 
 3538      554C4C00 
 3539              	.LC11:
 3540 016c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3540      6176655F 
 3540      7365745F 
 3540      77617665 
 3540      5F706F69 
 3541 019f 78636565 		.ascii	"xceeded\000"
 3541      64656400 
 3542 01a7 00       		.space	1
 3543              	.LC12:
 3544 01a8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3544      5F627566 
 3544      6665725F 
 3544      70747220 
 3544      213D2030 
 3545 01bd 000000   		.space	3
 3546              	.LC13:
 3547 01c0 776200   		.ascii	"wb\000"
 3548 01c3 00       		.space	1
 3549              	.LC14:
 3550 01c4 50330A00 		.ascii	"P3\012\000"
 3551              	.LC15:
 3552 01c8 25642025 		.ascii	"%d %d\012\000"
 3552      640A00
 3553 01cf 00       		.space	1
 3554              	.LC16:
 3555 01d0 3235350A 		.ascii	"255\012\000"
 3555      00
 3556 01d5 000000   		.space	3
 3557              	.LC17:
 3558 01d8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3558      25336420 
 3558      2533640A 
 3558      00
 3559 01e5 000000   		.space	3
 3560              	.LC18:
 3561 01e8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3561      6176655F 
 3561      74657374 
 3561      5F627566 
 3561      6665725F 
 3562 021b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3562      20627566 
 3562      66657220 
 3562      28256420 
 3562      62797465 
 3563              	.LC19:
 3564 023c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3564      6176655F 
 3564      66696C6C 
 3564      5F706978 
 3564      6275665F 
 3565 026f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3565      20666169 
 3565      6C65642C 
 3565      20726574 
 3565      75726E69 
 3566 028e 0000     		.space	2
 3567              	.LC20:
 3568 0290 43616C63 		.ascii	"Calculating test set %d\012\000"
 3568      756C6174 
 3568      696E6720 
 3568      74657374 
 3568      20736574 
 3569              		.text
 3570              	.Letext0:
 3571              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3572              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3573              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3574              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3575              		.file 7 "/usr/include/stdio.h"
 3576              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3577              		.file 9 "/usr/include/errno.h"
 3578              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3579              		.file 11 "/usr/include/unistd.h"
 3580              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3581              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3582              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3583              		.file 15 "/usr/include/math.h"
 3584              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3585              		.file 17 "/usr/include/time.h"
 3586              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3587              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3588              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3589              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3590              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3591              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3592              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3593              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3594              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3595              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3596              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3597              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3598              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3599              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3600              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3601              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3602              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3603              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3604              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3605              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3606              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3607              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3608              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3609              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3610              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3611              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3612              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3613              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3614              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3615              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3616              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3617              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3618              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3619              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3620              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3621              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3622              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3623              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3624              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3625              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3626              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3627              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3628              		.file 60 "/usr/local/include/python3.8/context.h"
 3629              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3630              		.file 62 "/usr/local/include/python3.8/code.h"
 3631              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3632              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3633              		.file 65 "/usr/local/include/python3.8/import.h"
 3634              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3635              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3636              		.file 68 "/usr/include/malloc.h"
 3637              		.file 69 "armwave.h"
 3638              		.file 70 "/usr/include/stdlib.h"
 3639              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3640              		.file 72 "<built-in>"
 3641              		.file 73 "/usr/include/assert.h"
 3642              		.file 74 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
