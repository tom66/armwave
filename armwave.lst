   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.0:
  82              	.LVL0:
  83              	.LFB72:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE              2048
  25:armwave.c     **** #define TEST_NWAVES                 64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER                 "v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)                    ((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)                    ((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)              MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** #define COND_UNLIKELY(expr)         __builtin_expect((expr), 0)
  35:armwave.c     **** #define COND_LIKELY(expr)           __builtin_expect((expr), 1)
  36:armwave.c     **** 
  37:armwave.c     **** struct armwave_state_t g_armwave_state;
  38:armwave.c     **** 
  39:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  40:armwave.c     **** uint8_t gamma_table[256];
  41:armwave.c     **** 
  42:armwave.c     **** // for now...
  43:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  44:armwave.c     **** 
  45:armwave.c     **** float mod_depth = 0.0f;
  46:armwave.c     **** 
  47:armwave.c     **** /*
  48:armwave.c     ****  * Make a test AM waveform for render tests.
  49:armwave.c     ****  */
  50:armwave.c     **** void test_create_waveform()
  51:armwave.c     **** {
  52:armwave.c     ****     float v, mod, noise, xnoise;
  53:armwave.c     ****     int w, x;
  54:armwave.c     **** 
  55:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  56:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  57:armwave.c     ****         //mod = 1.0f;
  58:armwave.c     **** 
  59:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  60:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  61:armwave.c     ****             noise *= noise;
  62:armwave.c     ****             noise *= noise;
  63:armwave.c     ****             noise *= noise;
  64:armwave.c     **** 
  65:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  66:armwave.c     ****                 noise = -noise;
  67:armwave.c     **** 
  68:armwave.c     ****             noise += 1.0f;
  69:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  70:armwave.c     **** 
  71:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  72:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  73:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  74:armwave.c     ****         }
  75:armwave.c     ****     }
  76:armwave.c     **** }
  77:armwave.c     **** 
  78:armwave.c     **** /*
  79:armwave.c     ****  * Create a gamma table.
  80:armwave.c     ****  */
  81:armwave.c     **** void test_create_gamma()
  82:armwave.c     **** {
  83:armwave.c     ****     int i;
  84:armwave.c     ****     float gamma = 0.90f;
  85:armwave.c     **** 
  86:armwave.c     ****     for(i = 0; i < 256; i++) {
  87:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  88:armwave.c     ****     }
  89:armwave.c     **** }
  90:armwave.c     **** 
  91:armwave.c     **** /*
  92:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  93:armwave.c     ****  * pre-computed.
  94:armwave.c     ****  *
  95:armwave.c     ****  * @param    slice_y        Slice to render at
  96:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  97:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  98:armwave.c     ****  */
  99:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
 100:armwave.c     **** {
 101:armwave.c     ****     int yy, ys, w, scale_value;
 102:armwave.c     ****     uint32_t value, word;
 103:armwave.c     ****     uint8_t *wave_base;
 104:armwave.c     ****     uint8_t *write_buffer_base;
 105:armwave.c     ****     uint8_t *write_buffer;
 106:armwave.c     ****     
 107:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
 108:armwave.c     **** 
 109:armwave.c     ****     // roll through each waveform
 110:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 111:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 112:armwave.c     **** 
 113:armwave.c     ****         // roll through y and render the slice into the out buffer
 114:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 115:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 116:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 117:armwave.c     **** 
 118:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 119:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 120:armwave.c     ****                 scale_value = (word & 0xff);
 121:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 122:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 123:armwave.c     ****                 word >>= 8;
 124:armwave.c     ****             }
 125:armwave.c     ****         }
 126:armwave.c     ****     }
 127:armwave.c     **** }
 128:armwave.c     **** 
 129:armwave.c     **** void armwave_init()
 130:armwave.c     **** {
 131:armwave.c     ****     g_armwave_state.flags = 0;
 132:armwave.c     **** }
 133:armwave.c     **** 
 134:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  85              		.loc 1 134 6 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
 135:armwave.c     **** {
 136:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 136 5 view .LVU1
 137:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 137 5 view .LVU2
 138:armwave.c     **** 
 139:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 139 5 view .LVU3
 140:armwave.c     **** 
 141:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 142:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 142 5 view .LVU4
  93              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
  94              		.loc 1 134 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 143:armwave.c     **** 
 144:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 145:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 102              		.loc 1 145 5 view .LVU6
 103 0004 012C41E2 		sub	r2, r1, #256	@ tmp143, target_height,
 104              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 105              		.loc 1 142 33 view .LVU7
 106 0008 B0419FE5 		ldr	r4, .L21+8	@ tmp218,
 107 000c B0319FE5 		ldr	r3, .L21+12	@ tmp142,
 108              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 109              		.loc 1 145 5 view .LVU8
 110 0010 012CD2E3 		bics	r2, r2, #256	@ tmp220, tmp143,
 111              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
 112              		.loc 1 134 6 view .LVU9
 113 0014 028B2DED 		vpush.64	{d8}	@
 114              		.cfi_def_cfa_offset 24
 115              		.cfi_offset 80, -24
 116              		.cfi_offset 81, -20
 117              	@ armwave.c:134: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 134:armwave.c     **** {
 118              		.loc 1 134 6 view .LVU10
 119 0018 0050A0E1 		mov	r5, r0	@ target_width, target_width
 120              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 121              		.loc 1 142 33 view .LVU11
 122 001c 143084E5 		str	r3, [r4, #20]	@ tmp142, g_armwave_state.wave_buffer
 123              		.loc 1 145 5 is_stmt 1 view .LVU12
 124 0020 4A00000A 		beq	.L2		@,
 125 0024 013B41E2 		sub	r3, r1, #1024	@ tmp145, target_height,
 126 0028 013BD3E3 		bics	r3, r3, #1024	@ tmp221, tmp145,
 127 002c 5200001A 		bne	.L17		@,
 146:armwave.c     **** 
 147:armwave.c     ****     if(target_height == 256) {
 148:armwave.c     ****         g_armwave_state.row_shift = 8;
 149:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 150:armwave.c     ****     } else if(target_height == 512) {
 128              		.loc 1 150 12 view .LVU13
 151:armwave.c     ****         g_armwave_state.row_shift = 9;
 152:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 153:armwave.c     ****     } else if(target_height == 1024) {
 129              		.loc 1 153 12 view .LVU14
 130              	@ armwave.c:153:     } else if(target_height == 1024) {
 131              		.loc 1 153 14 is_stmt 0 view .LVU15
 132 0030 010B51E3 		cmp	r1, #1024	@ target_height,
 133 0034 4C00000A 		beq	.L18		@,
 154:armwave.c     ****         g_armwave_state.row_shift = 10;
 155:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 156:armwave.c     ****     } else if(target_height == 2048) {
 134              		.loc 1 156 12 is_stmt 1 view .LVU16
 135              	@ armwave.c:156:     } else if(target_height == 2048) {
 136              		.loc 1 156 14 is_stmt 0 view .LVU17
 137 0038 020B51E3 		cmp	r1, #2048	@ target_height,
 157:armwave.c     ****         g_armwave_state.row_shift = 11;
 138              		.loc 1 157 9 is_stmt 1 view .LVU18
 139              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 140              		.loc 1 157 35 is_stmt 0 view .LVU19
 141 003c 0B20A003 		moveq	r2, #11	@ tmp165,
 142 0040 80319F05 		ldreq	r3, .L21+16	@ tmp163,
 143 0044 F424C401 		strdeq	r2, [r4, #68]	@, tmp218,
 158:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 144              		.loc 1 158 9 is_stmt 1 view .LVU20
 145              	.L5:
 159:armwave.c     ****     } 
 160:armwave.c     **** 
 161:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 162:armwave.c     ****     g_armwave_state.xstride = target_height;
 146              		.loc 1 162 5 view .LVU21
 147              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 164:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 165:armwave.c     ****     g_armwave_state.waves = waves;
 166:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 148              		.loc 1 166 42 is_stmt 0 view .LVU22
 149 0048 950102E0 		mul	r2, r5, r1	@ tmp174, target_width, target_height
 150              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 167:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 168:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 151              		.loc 1 168 68 view .LVU23
 152 004c 0534A0E1 		lsl	r3, r5, #8	@ _11, target_width,
 153              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 154              		.loc 1 163 44 view .LVU24
 155 0050 2104A0E1 		lsr	r0, r1, #8	@ tmp168, target_height,
 156              	.LVL1:
 157              	@ armwave.c:162:     g_armwave_state.xstride = target_height;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 158              		.loc 1 162 29 view .LVU25
 159 0054 181084E5 		str	r1, [r4, #24]	@ target_height, g_armwave_state.xstride
 163:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 160              		.loc 1 163 5 is_stmt 1 view .LVU26
 161              	@ armwave.c:170:     g_armwave_state.target_height = target_height;
 169:armwave.c     ****     g_armwave_state.target_width = target_width;
 170:armwave.c     ****     g_armwave_state.target_height = target_height;
 162              		.loc 1 170 35 is_stmt 0 view .LVU27
 163 0058 401084E5 		str	r1, [r4, #64]	@ target_height, g_armwave_state.target_height
 164              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 165              		.loc 1 166 26 view .LVU28
 166 005c 382084E5 		str	r2, [r4, #56]	@ tmp174, g_armwave_state.size
 167              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 171:armwave.c     **** 
 172:armwave.c     ****     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 168              		.loc 1 172 5 view .LVU29
 169 0060 0310A0E1 		mov	r1, r3	@, _11
 170              	.LVL2:
 171              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 172              		.loc 1 164 33 view .LVU30
 173 0064 022BA0E3 		mov	r2, #2048	@ tmp170,
 174              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 175              		.loc 1 163 28 view .LVU31
 176 0068 1C0084E5 		str	r0, [r4, #28]	@ tmp168, g_armwave_state.vscale
 164:armwave.c     ****     g_armwave_state.waves = waves;
 177              		.loc 1 164 5 is_stmt 1 view .LVU32
 178              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 179              		.loc 1 165 27 is_stmt 0 view .LVU33
 180 006c 4060A0E3 		mov	r6, #64	@ tmp172,
 181              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 182              		.loc 1 168 34 view .LVU34
 183 0070 343084E5 		str	r3, [r4, #52]	@ _11, g_armwave_state.ch_buff_size
 184              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 185              		.loc 1 172 5 view .LVU35
 186 0074 50019FE5 		ldr	r0, .L21+20	@,
 187              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 188              		.loc 1 167 37 view .LVU36
 189 0078 013CA0E3 		mov	r3, #256	@ tmp176,
 190              	@ armwave.c:169:     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 191              		.loc 1 169 34 view .LVU37
 192 007c 3C5084E5 		str	r5, [r4, #60]	@ target_width, g_armwave_state.target_width
 193              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 194              		.loc 1 164 33 view .LVU38
 195 0080 202084E5 		str	r2, [r4, #32]	@ tmp170, g_armwave_state.wave_stride
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 196              		.loc 1 165 5 is_stmt 1 view .LVU39
 197              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 198              		.loc 1 165 27 is_stmt 0 view .LVU40
 199 0084 246084E5 		str	r6, [r4, #36]	@ tmp172, g_armwave_state.waves
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 200              		.loc 1 166 5 is_stmt 1 view .LVU41
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 201              		.loc 1 167 5 view .LVU42
 202              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 203              		.loc 1 167 37 is_stmt 0 view .LVU43
 204 0088 283084E5 		str	r3, [r4, #40]	@ tmp176, g_armwave_state.bitdepth_height
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 205              		.loc 1 168 5 is_stmt 1 view .LVU44
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 206              		.loc 1 169 5 view .LVU45
 170:armwave.c     **** 
 207              		.loc 1 170 5 view .LVU46
 208              		.loc 1 172 5 view .LVU47
 209 008c FEFFFFEB 		bl	printf		@
 210              	.LVL3:
 173:armwave.c     **** 
 174:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 175:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 176:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     g_armwave_state.slice_height = 64;  
 211              		.loc 1 177 5 view .LVU48
 212              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 178:armwave.c     **** 
 179:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 213              		.loc 1 179 23 is_stmt 0 view .LVU49
 214 0090 040094E5 		ldr	r0, [r4, #4]	@ _12, g_armwave_state.ch1_buffer
 215              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 216              		.loc 1 177 34 view .LVU50
 217 0094 2C6084E5 		str	r6, [r4, #44]	@ tmp172, g_armwave_state.slice_height
 218              		.loc 1 179 5 is_stmt 1 view .LVU51
 219              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 220              		.loc 1 179 7 is_stmt 0 view .LVU52
 221 0098 000050E3 		cmp	r0, #0	@ _12,
 222 009c 0000000A 		beq	.L7		@,
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 223              		.loc 1 180 9 is_stmt 1 view .LVU53
 224 00a0 FEFFFFEB 		bl	free		@
 225              	.LVL4:
 226              	.L7:
 181:armwave.c     **** 
 182:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 227              		.loc 1 182 5 view .LVU54
 228              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 229              		.loc 1 182 34 is_stmt 0 view .LVU55
 230 00a4 0110A0E3 		mov	r1, #1	@,
 231 00a8 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 232 00ac FEFFFFEB 		bl	calloc		@
 233              	.LVL5:
 234              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 235              		.loc 1 183 33 view .LVU56
 236 00b0 18219FE5 		ldr	r2, .L21+24	@ tmp189,
 237              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 238              		.loc 1 185 33 view .LVU57
 239 00b4 FA30A0E3 		mov	r3, #250	@ tmp192,
 240              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 241              		.loc 1 183 33 view .LVU58
 242 00b8 502084E5 		str	r2, [r4, #80]	@ tmp189, MEM[(short int *)&g_armwave_state + 80B]
 243              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 244              		.loc 1 185 33 view .LVU59
 245 00bc B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp192, g_armwave_state.ch1_color.b
 246              	@ armwave.c:187:     assert(g_armwave_state.ch1_buffer != NULL);
 186:armwave.c     **** 
 187:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 247              		.loc 1 187 5 view .LVU60
 248 00c0 000050E3 		cmp	r0, #0	@ tmp186,
 249              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 250              		.loc 1 182 32 view .LVU61
 251 00c4 040084E5 		str	r0, [r4, #4]	@ tmp186, g_armwave_state.ch1_buffer
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 252              		.loc 1 183 5 is_stmt 1 view .LVU62
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 253              		.loc 1 184 5 view .LVU63
 185:armwave.c     **** 
 254              		.loc 1 185 5 view .LVU64
 255              		.loc 1 187 5 view .LVU65
 256 00c8 3000000A 		beq	.L19		@,
 188:armwave.c     **** 
 189:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 190:armwave.c     ****     length = end_point - start_point;
 257              		.loc 1 190 5 view .LVU66
 258              	.LVL6:
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 259              		.loc 1 191 5 view .LVU67
 260              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 261              		.loc 1 191 34 is_stmt 0 view .LVU68
 262 00cc 905A07EE 		vmov	s15, r5	@ int	@ target_width, target_width
 263              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 264              		.loc 1 191 22 view .LVU69
 265 00d0 386ADFED 		vldr.32	s13, .L21	@ tmp197,
 266              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 267              		.loc 1 193 40 view .LVU70
 268 00d4 010AA0E3 		mov	r0, #4096	@,
 269              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 270              		.loc 1 191 34 view .LVU71
 271 00d8 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp196, target_width
 272              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 273              		.loc 1 192 60 view .LVU72
 274 00dc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp223, g_armwave_state.slice_height
 275 00e0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp200, tmp223
 276              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 277              		.loc 1 191 22 view .LVU73
 278 00e4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp197, tmp196
 279              	.LVL7:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 280              		.loc 1 192 5 is_stmt 1 view .LVU74
 281              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 282              		.loc 1 192 60 is_stmt 0 view .LVU75
 283 00e8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp202, tmp200, points_per_pixel
 284              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 285              		.loc 1 192 41 view .LVU76
 286 00ec E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp203, tmp202
 287 00f0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp203, g_armwave_state.slice_record_height
 288              		.loc 1 193 5 is_stmt 1 view .LVU77
 289              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 290              		.loc 1 193 40 is_stmt 0 view .LVU78
 291 00f4 FEFFFFEB 		bl	malloc		@
 292              	.LVL8:
 293              	@ armwave.c:195:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 194:armwave.c     **** 
 195:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 294              		.loc 1 195 5 view .LVU79
 295 00f8 000050E3 		cmp	r0, #0	@ tmp204,
 296              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 297              		.loc 1 193 38 view .LVU80
 298 00fc 680084E5 		str	r0, [r4, #104]	@ tmp204, g_armwave_state.xcoord_to_xpixel
 299              		.loc 1 195 5 is_stmt 1 view .LVU81
 300 0100 2700000A 		beq	.L20		@,
 301              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 196:armwave.c     **** 
 197:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 302              		.loc 1 198 54 is_stmt 0 view .LVU82
 303 0104 2C7ADFED 		vldr.32	s15, .L21+4	@ tmp209,
 304 0108 020040E2 		sub	r0, r0, #2	@ ivtmp.29, tmp204,
 305              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 306              		.loc 1 197 12 view .LVU83
 307 010c 0030A0E3 		mov	r3, #0	@ xx,
 308              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 309              		.loc 1 198 54 view .LVU84
 310 0110 887A87EE 		vdiv.f32	s14, s15, s16	@ _25, tmp209, points_per_pixel
 311              	.L10:
 312              	.LVL9:
 313              		.loc 1 198 9 is_stmt 1 view .LVU85
 314              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 315              		.loc 1 198 74 is_stmt 0 view .LVU86
 316 0114 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 317              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 318              		.loc 1 197 32 view .LVU87
 319 0118 013083E2 		add	r3, r3, #1	@ xx, xx,
 320              	.LVL10:
 321              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 322              		.loc 1 197 5 view .LVU88
 323 011c 020B53E3 		cmp	r3, #2048	@ xx,
 324              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 325              		.loc 1 198 74 view .LVU89
 326 0120 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, xx
 327 0124 877A67EE 		vmul.f32	s15, s15, s14	@ tmp211, tmp210, _25
 328              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 329              		.loc 1 198 46 view .LVU90
 330 0128 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 331 012c 902A17EE 		vmov	r2, s15	@ int	@ tmp212, tmp212
 332 0130 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp212, MEM[base: _6, offset: 0B]
 333              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334              		.loc 1 197 5 view .LVU91
 335 0134 F6FFFF1A 		bne	.L10		@,
 199:armwave.c     **** 
 200:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 201:armwave.c     ****     }
 202:armwave.c     **** 
 203:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 336              		.loc 1 203 5 is_stmt 1 view .LVU92
 337              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 338              		.loc 1 203 34 is_stmt 0 view .LVU93
 339 0138 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 340 013c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 341 0140 FEFFFFEB 		bl	malloc		@
 342              	.LVL11:
 343              	@ armwave.c:204: }
 204:armwave.c     **** }
 344              		.loc 1 204 1 view .LVU94
 345 0144 028BBDEC 		vldm	sp!, {d8}	@
 346              		.cfi_remember_state
 347              		.cfi_restore 80
 348              		.cfi_restore 81
 349              		.cfi_def_cfa_offset 16
 350              	.LVL12:
 351              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 352              		.loc 1 203 32 view .LVU95
 353 0148 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 354              	@ armwave.c:204: }
 355              		.loc 1 204 1 view .LVU96
 356 014c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 357              	.LVL13:
 358              	.L2:
 359              		.cfi_restore_state
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 360              		.loc 1 147 5 is_stmt 1 view .LVU97
 361              	@ armwave.c:147:     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 362              		.loc 1 147 7 is_stmt 0 view .LVU98
 363 0150 010C51E3 		cmp	r1, #256	@ target_height,
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 364              		.loc 1 148 9 is_stmt 1 view .LVU99
 365              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 366              		.loc 1 149 34 is_stmt 0 view .LVU100
 367 0154 0820A003 		moveq	r2, #8	@ tmp151,
 368              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 369              		.loc 1 151 35 view .LVU101
 370 0158 74309F15 		ldrne	r3, .L21+28	@ tmp155,
 371              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 372              		.loc 1 149 34 view .LVU102
 373 015c FF30A003 		moveq	r3, #255	@ tmp153,
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 374              		.loc 1 150 12 is_stmt 1 view .LVU103
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 375              		.loc 1 151 9 view .LVU104
 376              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 377              		.loc 1 151 35 is_stmt 0 view .LVU105
 378 0160 0920A013 		movne	r2, #9	@ tmp157,
 379 0164 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 152:armwave.c     ****     } else if(target_height == 1024) {
 380              		.loc 1 152 9 is_stmt 1 view .LVU106
 381 0168 B6FFFFEA 		b	.L5		@
 382              	.L18:
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 383              		.loc 1 154 9 view .LVU107
 384              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 385              		.loc 1 154 35 is_stmt 0 view .LVU108
 386 016c 64309FE5 		ldr	r3, .L21+32	@ tmp159,
 387 0170 0A20A0E3 		mov	r2, #10	@ tmp161,
 388 0174 F424C4E1 		strd	r2, [r4, #68]	@, tmp218,
 155:armwave.c     ****     } else if(target_height == 2048) {
 389              		.loc 1 155 9 is_stmt 1 view .LVU109
 390 0178 B2FFFFEA 		b	.L5		@
 391              	.L17:
 145:armwave.c     **** 
 392              		.loc 1 145 5 view .LVU110
 393 017c 58309FE5 		ldr	r3, .L21+36	@,
 394 0180 9120A0E3 		mov	r2, #145	@,
 395 0184 54109FE5 		ldr	r1, .L21+40	@,
 396              	.LVL14:
 145:armwave.c     **** 
 397              		.loc 1 145 5 is_stmt 0 view .LVU111
 398 0188 54009FE5 		ldr	r0, .L21+44	@,
 399              	.LVL15:
 145:armwave.c     **** 
 400              		.loc 1 145 5 view .LVU112
 401 018c FEFFFFEB 		bl	__assert_fail		@
 402              	.LVL16:
 403              	.L19:
 187:armwave.c     **** 
 404              		.loc 1 187 5 is_stmt 1 view .LVU113
 405 0190 44309FE5 		ldr	r3, .L21+36	@,
 406 0194 BB20A0E3 		mov	r2, #187	@,
 407 0198 40109FE5 		ldr	r1, .L21+40	@,
 408 019c 44009FE5 		ldr	r0, .L21+48	@,
 409 01a0 FEFFFFEB 		bl	__assert_fail		@
 410              	.LVL17:
 411              	.L20:
 195:armwave.c     **** 
 412              		.loc 1 195 5 view .LVU114
 413 01a4 30309FE5 		ldr	r3, .L21+36	@,
 414 01a8 C320A0E3 		mov	r2, #195	@,
 415 01ac 2C109FE5 		ldr	r1, .L21+40	@,
 416 01b0 34009FE5 		ldr	r0, .L21+52	@,
 417 01b4 FEFFFFEB 		bl	__assert_fail		@
 418              	.LVL18:
 419              	.L22:
 420              		.align	2
 421              	.L21:
 422 01b8 00000045 		.word	1157627904
 423 01bc 0000803F 		.word	1065353216
 424 01c0 00000000 		.word	g_armwave_state
 425 01c4 00000000 		.word	test_wave_buffer
 426 01c8 FF070000 		.word	2047
 427 01cc 6C000000 		.word	.LC2
 428 01d0 F609F406 		.word	116656630
 429 01d4 FF010000 		.word	511
 430 01d8 FF030000 		.word	1023
 431 01dc 00000000 		.word	.LANCHOR0
 432 01e0 00000000 		.word	.LC0
 433 01e4 0C000000 		.word	.LC1
 434 01e8 80000000 		.word	.LC3
 435 01ec A4000000 		.word	.LC4
 436              		.cfi_endproc
 437              	.LFE72:
 439              		.align	2
 440              		.global	test_create_waveform
 441              		.syntax unified
 442              		.arm
 443              		.fpu vfp
 445              	test_create_waveform:
 446              	.LFB57:
  51:armwave.c     ****     float v, mod, noise, xnoise;
 447              		.loc 1 51 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 8
 450              		@ frame_needed = 0, uses_anonymous_args = 0
  52:armwave.c     ****     int w, x;
 451              		.loc 1 52 5 view .LVU116
  53:armwave.c     **** 
 452              		.loc 1 53 5 view .LVU117
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 453              		.loc 1 55 5 view .LVU118
 454              	.LVL19:
 455              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 456              		.loc 1 51 1 is_stmt 0 view .LVU119
 457 01f0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 458              		.cfi_def_cfa_offset 36
 459              		.cfi_offset 4, -36
 460              		.cfi_offset 5, -32
 461              		.cfi_offset 6, -28
 462              		.cfi_offset 7, -24
 463              		.cfi_offset 8, -20
 464              		.cfi_offset 9, -16
 465              		.cfi_offset 10, -12
 466              		.cfi_offset 11, -8
 467              		.cfi_offset 14, -4
 468 01f4 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 469              		.cfi_def_cfa_offset 84
 470              		.cfi_offset 80, -84
 471              		.cfi_offset 81, -80
 472              		.cfi_offset 82, -76
 473              		.cfi_offset 83, -72
 474              		.cfi_offset 84, -68
 475              		.cfi_offset 85, -64
 476              		.cfi_offset 86, -60
 477              		.cfi_offset 87, -56
 478              		.cfi_offset 88, -52
 479              		.cfi_offset 89, -48
 480              		.cfi_offset 90, -44
 481              		.cfi_offset 91, -40
 482 01f8 5C819FE5 		ldr	r8, .L42+40	@ _75,
 483              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 484              		.loc 1 56 33 view .LVU120
 485 01fc 4CDA9FED 		vldr.32	s26, .L42	@ tmp157,
 486 0200 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.45, _75,
 487              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 488              		.loc 1 56 13 view .LVU121
 489 0204 4BCADFED 		vldr.32	s25, .L42+4	@ tmp161,
 490              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 491              		.loc 1 60 20 view .LVU122
 492 0208 4BCA9FED 		vldr.32	s24, .L42+8	@ tmp166,
 493              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 494              		.loc 1 71 29 view .LVU123
 495 020c 4BBADFED 		vldr.32	s23, .L42+12	@ tmp170,
 496              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 497              		.loc 1 71 33 view .LVU124
 498 0210 4BBA9FED 		vldr.32	s22, .L42+16	@ tmp172,
 499              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 500              		.loc 1 69 20 view .LVU125
 501 0214 4BAADFED 		vldr.32	s21, .L42+20	@ tmp177,
 502 0218 02B886E2 		add	fp, r6, #131072	@ _81,,
 503 021c 3CA19FE5 		ldr	r10, .L42+44	@ tmp197,
 504              	@ armwave.c:51: {
  51:armwave.c     ****     float v, mod, noise, xnoise;
 505              		.loc 1 51 1 view .LVU126
 506 0220 0CD04DE2 		sub	sp, sp, #12	@,,
 507              		.cfi_def_cfa_offset 96
 508 0224 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 509 0228 0F6086E2 		add	r6, r6, #15	@ ivtmp.45, ivtmp.45,
 510 022c 008068E2 		rsb	r8, r8, #0	@ ivtmp.48, _75
 511              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 512              		.loc 1 55 11 view .LVU127
 513 0230 0090A0E3 		mov	r9, #0	@ w,
 514              	.LVL20:
 515              	.L29:
  56:armwave.c     ****         //mod = 1.0f;
 516              		.loc 1 56 9 is_stmt 1 view .LVU128
 517              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 518              		.loc 1 56 24 is_stmt 0 view .LVU129
 519 0234 909A07EE 		vmov	s15, r9	@ int	@ w, w
 520              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 521              		.loc 1 56 48 view .LVU130
 522 0238 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 523              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 524              		.loc 1 56 13 view .LVU131
 525 023c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 526              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 527              		.loc 1 68 19 view .LVU132
 528 0240 41AA9FED 		vldr.32	s20, .L42+24	@ tmp183,
 529              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 530              		.loc 1 56 24 view .LVU133
 531 0244 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 532              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 533              		.loc 1 73 58 view .LVU134
 534 0248 408ADFED 		vldr.32	s17, .L42+28	@ tmp188,
 535 024c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.38, ivtmp.45,
 536 0250 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.48,
 537              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 538              		.loc 1 56 33 view .LVU135
 539 0254 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 540              	@ armwave.c:56:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  56:armwave.c     ****         //mod = 1.0f;
 541              		.loc 1 56 13 view .LVU136
 542 0258 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 543              	.LVL21:
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 544              		.loc 1 59 9 is_stmt 1 view .LVU137
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 545              		.loc 1 59 9 is_stmt 0 view .LVU138
 546 025c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 547              	.LVL22:
 548              	.L28:
 549              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 550              		.loc 1 60 24 view .LVU139
 551 0260 FEFFFFEB 		bl	rand		@
 552              	.LVL23:
 553 0264 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.38
 554              	.LVL24:
  60:armwave.c     ****             noise *= noise;
 555              		.loc 1 60 13 is_stmt 1 view .LVU140
 556              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 557              		.loc 1 60 31 is_stmt 0 view .LVU141
 558 0268 7000FFE6 		uxth	r0, r0	@ tmp163,
 559              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 560              		.loc 1 60 41 view .LVU142
 561 026c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 562 0270 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 563              	@ armwave.c:60:             noise  = ((rand() & 0xffff) / 100000.0f);
  60:armwave.c     ****             noise *= noise;
 564              		.loc 1 60 20 view .LVU143
 565 0274 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 566              	.LVL25:
  61:armwave.c     ****             noise *= noise;
 567              		.loc 1 61 13 is_stmt 1 view .LVU144
 568              	@ armwave.c:61:             noise *= noise;
  61:armwave.c     ****             noise *= noise;
 569              		.loc 1 61 19 is_stmt 0 view .LVU145
 570 0278 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 571              	.LVL26:
  62:armwave.c     ****             noise *= noise;
 572              		.loc 1 62 13 is_stmt 1 view .LVU146
 573              	@ armwave.c:62:             noise *= noise;
  62:armwave.c     ****             noise *= noise;
 574              		.loc 1 62 19 is_stmt 0 view .LVU147
 575 027c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 576              	.LVL27:
  63:armwave.c     **** 
 577              		.loc 1 63 13 is_stmt 1 view .LVU148
 578              	@ armwave.c:63:             noise *= noise;
  63:armwave.c     **** 
 579              		.loc 1 63 19 is_stmt 0 view .LVU149
 580 0280 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 581              	.LVL28:
  65:armwave.c     ****                 noise = -noise;
 582              		.loc 1 65 13 is_stmt 1 view .LVU150
 583              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 584              		.loc 1 65 17 is_stmt 0 view .LVU151
 585 0284 FEFFFFEB 		bl	rand		@
 586              	.LVL29:
  66:armwave.c     **** 
 587              		.loc 1 66 17 is_stmt 1 view .LVU152
 588              	@ armwave.c:65:             if((rand() & 0xffff) > 0x7fff)
  65:armwave.c     ****                 noise = -noise;
 589              		.loc 1 65 15 is_stmt 0 view .LVU153
 590 0288 020910E3 		tst	r0, #32768	@,
 591              	@ armwave.c:66:                 noise = -noise;
  66:armwave.c     **** 
 592              		.loc 1 66 23 view .LVU154
 593 028c 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 594              	.LVL30:
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 595              		.loc 1 68 13 is_stmt 1 view .LVU155
  69:armwave.c     **** 
 596              		.loc 1 69 13 view .LVU156
 597              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 598              		.loc 1 69 23 is_stmt 0 view .LVU157
 599 0290 FEFFFFEB 		bl	rand		@
 600              	.LVL31:
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 601              		.loc 1 71 13 is_stmt 1 view .LVU158
 602              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 603              		.loc 1 71 29 is_stmt 0 view .LVU159
 604 0294 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 605 0298 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 606 029c AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 607              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 608              		.loc 1 69 30 view .LVU160
 609 02a0 7000FFE6 		uxth	r0, r0	@ tmp173,
 610              	.LVL32:
 611              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 612              		.loc 1 69 40 view .LVU161
 613 02a4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 614 02a8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 615              	@ armwave.c:69:             xnoise = (rand() & 0xffff) / 6553500.0f;
  69:armwave.c     **** 
 616              		.loc 1 69 20 view .LVU162
 617 02ac 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 618              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 619              		.loc 1 71 60 view .LVU163
 620 02b0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 621              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 622              		.loc 1 71 18 view .LVU164
 623 02b4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 624 02b8 FEFFFFEB 		bl	sin		@
 625              	.LVL33:
  73:armwave.c     ****         }
 626              		.loc 1 73 13 is_stmt 1 view .LVU165
 627              	@ armwave.c:68:             noise += 1.0f;
  68:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 628              		.loc 1 68 19 is_stmt 0 view .LVU166
 629 02bc 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 630              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 631              		.loc 1 73 58 view .LVU167
 632 02c0 236ADFED 		vldr.32	s13, .L42+32	@ tmp189,
 633              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 634              		.loc 1 73 56 view .LVU168
 635 02c4 236A9FED 		vldr.32	s12, .L42+36	@ tmp191,
 636 02c8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 637              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 638              		.loc 1 71 77 view .LVU169
 639 02cc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 640              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 641              		.loc 1 71 70 view .LVU170
 642 02d0 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 643              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 644              		.loc 1 71 77 view .LVU171
 645 02d4 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 646              	@ armwave.c:71:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  71:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 647              		.loc 1 71 15 view .LVU172
 648 02d8 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 649              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 650              		.loc 1 73 58 view .LVU173
 651 02dc 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 652 02e0 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 653 02e4 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 654 02e8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 655 02ec 050000DA 		ble	.L25		@,
 656              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 657              		.loc 1 73 56 discriminator 1 view .LVU174
 658 02f0 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 659 02f4 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 660 02f8 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 661 02fc E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 662 0300 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 663 0304 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 664              	.L25:
 665              	@ armwave.c:73:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  73:armwave.c     ****         }
 666              		.loc 1 73 56 discriminator 12 view .LVU175
 667 0308 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 668              	.LVL34:
 669              	@ armwave.c:59:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  59:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 670              		.loc 1 59 9 discriminator 12 view .LVU176
 671 030c 060055E1 		cmp	r5, r6	@ ivtmp.38, ivtmp.45
 672 0310 D2FFFF1A 		bne	.L28		@,
 673 0314 026B85E2 		add	r6, r5, #2048	@ ivtmp.45, ivtmp.38,
 674              	.LVL35:
 675              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 676              		.loc 1 55 5 discriminator 2 view .LVU177
 677 0318 0B0056E1 		cmp	r6, fp	@ ivtmp.45, _81
 678              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 679              		.loc 1 55 34 discriminator 2 view .LVU178
 680 031c 019089E2 		add	r9, r9, #1	@ w, w,
 681              	.LVL36:
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 682              		.loc 1 55 34 discriminator 2 view .LVU179
 683 0320 028B48E2 		sub	r8, r8, #2048	@ ivtmp.48, ivtmp.48,
 684              	@ armwave.c:55:     for(w = 0; w < TEST_NWAVES; w++) {
  55:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 685              		.loc 1 55 5 discriminator 2 view .LVU180
 686 0324 C2FFFF1A 		bne	.L29		@,
 687              	@ armwave.c:76: }
  76:armwave.c     **** 
 688              		.loc 1 76 1 view .LVU181
 689 0328 0CD08DE2 		add	sp, sp, #12	@,,
 690              		.cfi_def_cfa_offset 84
 691              		@ sp needed	@
 692 032c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 693              		.cfi_restore 90
 694              		.cfi_restore 91
 695              		.cfi_restore 88
 696              		.cfi_restore 89
 697              		.cfi_restore 86
 698              		.cfi_restore 87
 699              		.cfi_restore 84
 700              		.cfi_restore 85
 701              		.cfi_restore 82
 702              		.cfi_restore 83
 703              		.cfi_restore 80
 704              		.cfi_restore 81
 705              		.cfi_def_cfa_offset 36
 706              	.LVL37:
  76:armwave.c     **** 
 707              		.loc 1 76 1 view .LVU182
 708 0330 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 709              	.LVL38:
 710              	.L43:
  76:armwave.c     **** 
 711              		.loc 1 76 1 view .LVU183
 712              		.align	2
 713              	.L42:
 714 0334 0000803C 		.word	1015021568
 715 0338 0000003F 		.word	1056964608
 716 033c 0050C347 		.word	1203982336
 717 0340 C3F5C840 		.word	1086911939
 718 0344 0000003A 		.word	973078528
 719 0348 38FFC74A 		.word	1254620984
 720 034c 0000803F 		.word	1065353216
 721 0350 0000FE42 		.word	1123942400
 722 0354 00000043 		.word	1124073472
 723 0358 00007F43 		.word	1132396544
 724 035c 00000000 		.word	test_wave_buffer
 725 0360 00000000 		.word	.LANCHOR1
 726              		.cfi_endproc
 727              	.LFE57:
 729              		.align	2
 730              		.global	test_create_gamma
 731              		.syntax unified
 732              		.arm
 733              		.fpu vfp
 735              	test_create_gamma:
 736              	.LFB58:
  82:armwave.c     ****     int i;
 737              		.loc 1 82 1 is_stmt 1 view -0
 738              		.cfi_startproc
 739              		@ args = 0, pretend = 0, frame = 0
 740              		@ frame_needed = 0, uses_anonymous_args = 0
  83:armwave.c     ****     float gamma = 0.90f;
 741              		.loc 1 83 5 view .LVU185
  84:armwave.c     **** 
 742              		.loc 1 84 5 view .LVU186
 743              	.LVL39:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 744              		.loc 1 86 5 view .LVU187
 745              	@ armwave.c:82: {
  82:armwave.c     ****     int i;
 746              		.loc 1 82 1 is_stmt 0 view .LVU188
 747 0364 70402DE9 		push	{r4, r5, r6, lr}	@
 748              		.cfi_def_cfa_offset 16
 749              		.cfi_offset 4, -16
 750              		.cfi_offset 5, -12
 751              		.cfi_offset 6, -8
 752              		.cfi_offset 14, -4
 753 0368 068B2DED 		vpush.64	{d8, d9, d10}	@
 754              		.cfi_def_cfa_offset 40
 755              		.cfi_offset 80, -40
 756              		.cfi_offset 81, -36
 757              		.cfi_offset 82, -32
 758              		.cfi_offset 83, -28
 759              		.cfi_offset 84, -24
 760              		.cfi_offset 85, -20
 761 036c 68409FE5 		ldr	r4, .L48+20	@ ivtmp.56,
 762              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 763              		.loc 1 87 32 view .LVU189
 764 0370 18AA9FED 		vldr.32	s20, .L48+16	@ tmp128,
 765              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 766              		.loc 1 87 26 view .LVU190
 767 0374 139B9FED 		vldr.64	d9, .L48	@ tmp135,
 768              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 769              		.loc 1 87 49 view .LVU191
 770 0378 148B9FED 		vldr.64	d8, .L48+8	@ tmp131,
 771 037c 015084E2 		add	r5, r4, #1	@ _25, ivtmp.56,
 772 0380 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.56,
 773 0384 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 774              	.LVL40:
 775              	.L45:
  87:armwave.c     ****     }
 776              		.loc 1 87 9 is_stmt 1 discriminator 3 view .LVU192
 777              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 778              		.loc 1 87 32 is_stmt 0 discriminator 3 view .LVU193
 779 0388 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.56
 780              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 781              		.loc 1 87 26 discriminator 3 view .LVU194
 782 038c 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 783              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 784              		.loc 1 87 32 discriminator 3 view .LVU195
 785 0390 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 786 0394 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 787 0398 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 788              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 789              		.loc 1 87 26 discriminator 3 view .LVU196
 790 039c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 791 03a0 FEFFFFEB 		bl	pow		@
 792              	.LVL41:
 793              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 794              		.loc 1 87 49 discriminator 3 view .LVU197
 795 03a4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 796              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 797              		.loc 1 87 24 discriminator 3 view .LVU198
 798 03a8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 799 03ac 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 800 03b0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 801              	.LVL42:
 802              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 803              		.loc 1 86 5 discriminator 3 view .LVU199
 804 03b4 060054E1 		cmp	r4, r6	@ ivtmp.56, _26
 805 03b8 F2FFFF1A 		bne	.L45		@,
 806              	@ armwave.c:89: }
  89:armwave.c     **** 
 807              		.loc 1 89 1 view .LVU200
 808 03bc 068BBDEC 		vldm	sp!, {d8-d10}	@,
 809              		.cfi_restore 84
 810              		.cfi_restore 85
 811              		.cfi_restore 82
 812              		.cfi_restore 83
 813              		.cfi_restore 80
 814              		.cfi_restore 81
 815              		.cfi_def_cfa_offset 16
 816 03c0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 817              	.LVL43:
 818              	.L49:
  89:armwave.c     **** 
 819              		.loc 1 89 1 view .LVU201
 820 03c4 0000A0E1 		.align	3
 821              	.L48:
 822 03c8 000000C0 		.word	-1073741824
 823 03cc CCCCEC3F 		.word	1072483532
 824 03d0 00000000 		.word	0
 825 03d4 00E06F40 		.word	1081073664
 826 03d8 00007F43 		.word	1132396544
 827 03dc FFFFFFFF 		.word	gamma_table-1
 828              		.cfi_endproc
 829              	.LFE58:
 831              		.align	2
 832              		.global	render_nonaa_to_buffer_1ch_slice
 833              		.syntax unified
 834              		.arm
 835              		.fpu vfp
 837              	render_nonaa_to_buffer_1ch_slice:
 838              	.LVL44:
 839              	.LFB59:
 100:armwave.c     ****     int yy, ys, w, scale_value;
 840              		.loc 1 100 1 is_stmt 1 view -0
 841              		.cfi_startproc
 842              		@ args = 0, pretend = 0, frame = 16
 843              		@ frame_needed = 0, uses_anonymous_args = 0
 101:armwave.c     ****     uint32_t value, word;
 844              		.loc 1 101 5 view .LVU203
 102:armwave.c     ****     uint8_t *wave_base;
 845              		.loc 1 102 5 view .LVU204
 103:armwave.c     ****     uint8_t *write_buffer_base;
 846              		.loc 1 103 5 view .LVU205
 104:armwave.c     ****     uint8_t *write_buffer;
 847              		.loc 1 104 5 view .LVU206
 105:armwave.c     ****     
 848              		.loc 1 105 5 view .LVU207
 107:armwave.c     **** 
 849              		.loc 1 107 5 view .LVU208
 850              	@ armwave.c:100: {
 100:armwave.c     ****     int yy, ys, w, scale_value;
 851              		.loc 1 100 1 is_stmt 0 view .LVU209
 852 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 853              		.cfi_def_cfa_offset 36
 854              		.cfi_offset 4, -36
 855              		.cfi_offset 5, -32
 856              		.cfi_offset 6, -28
 857              		.cfi_offset 7, -24
 858              		.cfi_offset 8, -20
 859              		.cfi_offset 9, -16
 860              		.cfi_offset 10, -12
 861              		.cfi_offset 11, -8
 862              		.cfi_offset 14, -4
 863 03e4 14D04DE2 		sub	sp, sp, #20	@,,
 864              		.cfi_def_cfa_offset 56
 865              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 866              		.loc 1 107 40 view .LVU210
 867 03e8 C8709FE5 		ldr	r7, .L64	@ tmp176,
 868              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 869              		.loc 1 107 63 view .LVU211
 870 03ec 289097E5 		ldr	r9, [r7, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 871              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 872              		.loc 1 110 5 view .LVU212
 873 03f0 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 874              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 875              		.loc 1 107 40 view .LVU213
 876 03f4 048097E5 		ldr	r8, [r7, #4]	@ _1, g_armwave_state.ch1_buffer
 877              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 878              		.loc 1 110 5 view .LVU214
 879 03f8 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 880              	@ armwave.c:107:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bi
 107:armwave.c     **** 
 881              		.loc 1 107 63 view .LVU215
 882 03fc 990009E0 		mul	r9, r9, r0	@ _3, g_armwave_state.bitdepth_height, slice_y
 883              	.LVL45:
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 884              		.loc 1 110 5 is_stmt 1 view .LVU216
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 885              		.loc 1 110 5 is_stmt 0 view .LVU217
 886 0400 2A00000A 		beq	.L50		@,
 887 0404 000051E3 		cmp	r1, #0	@ height,
 888 0408 2800000A 		beq	.L50		@,
 889              	@ armwave.c:119:                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_hei
 119:armwave.c     ****                 scale_value = (word & 0xff);
 890              		.loc 1 119 17 view .LVU218
 891 040c A8A09FE5 		ldr	r10, .L64+4	@ tmp178,
 892 0410 043040E2 		sub	r3, r0, #4	@ tmp177, slice_y,
 893 0414 0C308DE5 		str	r3, [sp, #12]	@ tmp177, %sfp
 894              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 895              		.loc 1 110 11 view .LVU219
 896 0418 0030A0E3 		mov	r3, #0	@ w,
 897 041c 04108DE5 		str	r1, [sp, #4]	@ height, %sfp
 898 0420 08308DE5 		str	r3, [sp, #8]	@ w, %sfp
 899              	.LVL46:
 900              	.L55:
 111:armwave.c     **** 
 901              		.loc 1 111 9 is_stmt 1 view .LVU220
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 902              		.loc 1 115 9 view .LVU221
 903              	@ armwave.c:111:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 111:armwave.c     **** 
 904              		.loc 1 111 64 is_stmt 0 view .LVU222
 905 0424 203097E5 		ldr	r3, [r7, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 906 0428 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 907 042c 0C109DE5 		ldr	r1, [sp, #12]	@ tmp177, %sfp
 908 0430 14B097E5 		ldr	fp, [r7, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 909 0434 931223E0 		mla	r3, r3, r2, r1	@ tmp158, g_armwave_state.wave_stride, w, tmp177
 910              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 911              		.loc 1 115 16 view .LVU223
 912 0438 0060A0E3 		mov	r6, #0	@ yy,
 913 043c 03B08BE0 		add	fp, fp, r3	@ ivtmp.68, g_armwave_state.wave_buffer, tmp158
 914              	.LVL47:
 915              	.L54:
 116:armwave.c     **** 
 916              		.loc 1 116 13 is_stmt 1 view .LVU224
 917              	@ armwave.c:116:             word = *(uint32_t*)(wave_base + yy);
 116:armwave.c     **** 
 918              		.loc 1 116 18 is_stmt 0 view .LVU225
 919 0440 0450BBE5 		ldr	r5, [fp, #4]!	@ word, MEM[base: _75, offset: 0B]
 920              	.LVL48:
 118:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 921              		.loc 1 118 13 is_stmt 1 view .LVU226
 922              	@ armwave.c:118:             for(ys = 0; ys < 4; ys++) {
 118:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 923              		.loc 1 118 20 is_stmt 0 view .LVU227
 924 0444 0040A0E3 		mov	r4, #0	@ ys,
 925              	.LVL49:
 926              	.L53:
 119:armwave.c     ****                 scale_value = (word & 0xff);
 927              		.loc 1 119 17 is_stmt 1 discriminator 3 view .LVU228
 928 0448 0420A0E1 		mov	r2, r4	@, ys
 929 044c 283097E5 		ldr	r3, [r7, #40]	@, g_armwave_state.bitdepth_height
 930 0450 0610A0E1 		mov	r1, r6	@, yy
 931 0454 0A00A0E1 		mov	r0, r10	@, tmp178
 932 0458 FEFFFFEB 		bl	printf		@
 933              	.LVL50:
 120:armwave.c     ****                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bitdepth_height);
 934              		.loc 1 120 17 discriminator 3 view .LVU229
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 935              		.loc 1 121 17 discriminator 3 view .LVU230
 122:armwave.c     ****                 word >>= 8;
 936              		.loc 1 122 17 discriminator 3 view .LVU231
 937              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 938              		.loc 1 121 63 is_stmt 0 discriminator 3 view .LVU232
 939 045c 281097E5 		ldr	r1, [r7, #40]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 940              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 941              		.loc 1 122 47 discriminator 3 view .LVU233
 942 0460 7520E9E6 		uxtab	r2, r9, r5	@ tmp168, _3, word
 943              	@ armwave.c:121:                 write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.bi
 121:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 944              		.loc 1 121 63 discriminator 3 view .LVU234
 945 0464 043086E0 		add	r3, r6, r4	@ tmp164, yy, ys
 946              	@ armwave.c:118:             for(ys = 0; ys < 4; ys++) {
 118:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 947              		.loc 1 118 35 discriminator 3 view .LVU235
 948 0468 014084E2 		add	r4, r4, #1	@ ys, ys,
 949              	.LVL51:
 950              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 951              		.loc 1 122 47 discriminator 3 view .LVU236
 952 046c 912323E0 		mla	r3, r1, r3, r2	@ tmp169, g_armwave_state.bitdepth_height, tmp164, tmp168
 953              	@ armwave.c:118:             for(ys = 0; ys < 4; ys++) {
 118:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 954              		.loc 1 118 13 discriminator 3 view .LVU237
 955 0470 040054E3 		cmp	r4, #4	@ ys,
 956              	@ armwave.c:123:                 word >>= 8;
 123:armwave.c     ****             }
 957              		.loc 1 123 22 discriminator 3 view .LVU238
 958 0474 2554A0E1 		lsr	r5, r5, #8	@ word, word,
 959              	.LVL52:
 960              	@ armwave.c:122:                 *(write_buffer + scale_value) += 1;
 122:armwave.c     ****                 word >>= 8;
 961              		.loc 1 122 47 discriminator 3 view .LVU239
 962 0478 0320D8E7 		ldrb	r2, [r8, r3]	@ zero_extendqisi2	@ *_17, *_17
 963 047c 012082E2 		add	r2, r2, #1	@ tmp172, *_17,
 964 0480 0320C8E7 		strb	r2, [r8, r3]	@ tmp172, *_17
 965              	.LVL53:
 123:armwave.c     ****             }
 966              		.loc 1 123 17 is_stmt 1 discriminator 3 view .LVU240
 967              	@ armwave.c:118:             for(ys = 0; ys < 4; ys++) {
 118:armwave.c     ****                 printf("write %d,%d ht %d\n", yy, ys, g_armwave_state.bitdepth_height);
 968              		.loc 1 118 13 is_stmt 0 discriminator 3 view .LVU241
 969 0484 EFFFFF1A 		bne	.L53		@,
 970              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 971              		.loc 1 115 9 discriminator 2 view .LVU242
 972 0488 04309DE5 		ldr	r3, [sp, #4]	@ height, %sfp
 973              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 974              		.loc 1 115 37 discriminator 2 view .LVU243
 975 048c 046086E2 		add	r6, r6, #4	@ yy, yy,
 976              	.LVL54:
 977              	@ armwave.c:115:         for(yy = 0; yy < height; yy += 4) {
 115:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 978              		.loc 1 115 9 discriminator 2 view .LVU244
 979 0490 060053E1 		cmp	r3, r6	@ height, yy
 980 0494 E9FFFF8A 		bhi	.L54		@,
 981              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 982              		.loc 1 110 44 view .LVU245
 983 0498 08209DE5 		ldr	r2, [sp, #8]	@ w, %sfp
 984              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 985              		.loc 1 110 5 view .LVU246
 986 049c 243097E5 		ldr	r3, [r7, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 987              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 988              		.loc 1 110 44 view .LVU247
 989 04a0 012082E2 		add	r2, r2, #1	@ w, w,
 990              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 991              		.loc 1 110 5 view .LVU248
 992 04a4 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 993              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 994              		.loc 1 110 44 view .LVU249
 995 04a8 08208DE5 		str	r2, [sp, #8]	@ w, %sfp
 996              	.LVL55:
 997              	@ armwave.c:110:     for(w = 0; w < g_armwave_state.waves; w++) {
 110:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 998              		.loc 1 110 5 view .LVU250
 999 04ac DCFFFF3A 		bcc	.L55		@,
 1000              	.LVL56:
 1001              	.L50:
 1002              	@ armwave.c:127: }
 127:armwave.c     **** 
 1003              		.loc 1 127 1 view .LVU251
 1004 04b0 14D08DE2 		add	sp, sp, #20	@,,
 1005              		.cfi_def_cfa_offset 36
 1006              		@ sp needed	@
 1007 04b4 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1008              	.LVL57:
 1009              	.L65:
 127:armwave.c     **** 
 1010              		.loc 1 127 1 view .LVU252
 1011              		.align	2
 1012              	.L64:
 1013 04b8 00000000 		.word	g_armwave_state
 1014 04bc D0000000 		.word	.LC5
 1015              		.cfi_endproc
 1016              	.LFE59:
 1018              		.align	2
 1019              		.global	armwave_init
 1020              		.syntax unified
 1021              		.arm
 1022              		.fpu vfp
 1024              	armwave_init:
 1025              	.LFB60:
 130:armwave.c     ****     g_armwave_state.flags = 0;
 1026              		.loc 1 130 1 is_stmt 1 view -0
 1027              		.cfi_startproc
 1028              		@ args = 0, pretend = 0, frame = 0
 1029              		@ frame_needed = 0, uses_anonymous_args = 0
 1030              		@ link register save eliminated.
 131:armwave.c     **** }
 1031              		.loc 1 131 5 view .LVU254
 1032              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 1033              		.loc 1 131 27 is_stmt 0 view .LVU255
 1034 04c0 08309FE5 		ldr	r3, .L67	@ tmp110,
 1035 04c4 0020A0E3 		mov	r2, #0	@ tmp111,
 1036 04c8 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 1037              	@ armwave.c:132: }
 132:armwave.c     **** 
 1038              		.loc 1 132 1 view .LVU256
 1039 04cc 1EFF2FE1 		bx	lr	@
 1040              	.L68:
 1041              		.align	2
 1042              	.L67:
 1043 04d0 00000000 		.word	g_armwave_state
 1044              		.cfi_endproc
 1045              	.LFE60:
 1047              		.align	2
 1048              		.global	armwave_setup_render
 1049              		.syntax unified
 1050              		.arm
 1051              		.fpu vfp
 1053              	armwave_setup_render:
 1054              	.LVL58:
 1055              	.LFB61:
 135:armwave.c     ****     uint32_t length, xx;
 1056              		.loc 1 135 1 is_stmt 1 view -0
 1057              		.cfi_startproc
 1058              		@ args = 16, pretend = 0, frame = 0
 1059              		@ frame_needed = 0, uses_anonymous_args = 0
 136:armwave.c     ****     float points_per_pixel;
 1060              		.loc 1 136 5 view .LVU258
 137:armwave.c     **** 
 1061              		.loc 1 137 5 view .LVU259
 139:armwave.c     **** 
 1062              		.loc 1 139 5 view .LVU260
 1063              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1064              		.loc 1 135 1 is_stmt 0 view .LVU261
 1065 04d4 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1066              		.cfi_def_cfa_offset 24
 1067              		.cfi_offset 4, -24
 1068              		.cfi_offset 5, -20
 1069              		.cfi_offset 6, -16
 1070              		.cfi_offset 7, -12
 1071              		.cfi_offset 8, -8
 1072              		.cfi_offset 14, -4
 1073              	@ armwave.c:139:     assert(start_point < end_point);
 139:armwave.c     **** 
 1074              		.loc 1 139 5 view .LVU262
 1075 04d8 020051E1 		cmp	r1, r2	@ start_point, end_point
 1076              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1077              		.loc 1 135 1 view .LVU263
 1078 04dc 028B2DED 		vpush.64	{d8}	@
 1079              		.cfi_def_cfa_offset 32
 1080              		.cfi_offset 80, -32
 1081              		.cfi_offset 81, -28
 1082              	@ armwave.c:135: {
 135:armwave.c     ****     uint32_t length, xx;
 1083              		.loc 1 135 1 view .LVU264
 1084 04e0 0170A0E1 		mov	r7, r1	@ start_point, start_point
 1085 04e4 0250A0E1 		mov	r5, r2	@ end_point, end_point
 1086 04e8 20109DE5 		ldr	r1, [sp, #32]	@ wave_stride, wave_stride
 1087              	.LVL59:
 135:armwave.c     ****     uint32_t length, xx;
 1088              		.loc 1 135 1 view .LVU265
 1089 04ec 24609DE5 		ldr	r6, [sp, #36]	@ target_width, target_width
 1090 04f0 28209DE5 		ldr	r2, [sp, #40]	@ target_height, target_height
 1091              	.LVL60:
 1092              	@ armwave.c:139:     assert(start_point < end_point);
 139:armwave.c     **** 
 1093              		.loc 1 139 5 view .LVU266
 1094 04f4 6F00002A 		bcs	.L85		@,
 142:armwave.c     **** 
 1095              		.loc 1 142 5 is_stmt 1 view .LVU267
 1096              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 1097              		.loc 1 142 33 is_stmt 0 view .LVU268
 1098 04f8 D0419FE5 		ldr	r4, .L90+4	@ tmp228,
 1099              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 145:armwave.c     **** 
 1100              		.loc 1 145 5 view .LVU269
 1101 04fc 01CC42E2 		sub	ip, r2, #256	@ tmp154, target_height,
 1102 0500 01CCDCE3 		bics	ip, ip, #256	@ tmp230, tmp154,
 1103              	@ armwave.c:142:     g_armwave_state.wave_buffer = wave_buffer;
 142:armwave.c     **** 
 1104              		.loc 1 142 33 view .LVU270
 1105 0504 140084E5 		str	r0, [r4, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 145:armwave.c     **** 
 1106              		.loc 1 145 5 is_stmt 1 view .LVU271
 1107 0508 4C00000A 		beq	.L71		@,
 1108              	@ armwave.c:145:     assert(target_height == 256 || target_height == 512 || target_height == 1024 |
 145:armwave.c     **** 
 1109              		.loc 1 145 5 is_stmt 0 discriminator 1 view .LVU272
 1110 050c 010B42E2 		sub	r0, r2, #1024	@ tmp156, target_height,
 1111              	.LVL61:
 145:armwave.c     **** 
 1112              		.loc 1 145 5 discriminator 1 view .LVU273
 1113 0510 010BD0E3 		bics	r0, r0, #1024	@ tmp231, tmp156,
 1114 0514 5800001A 		bne	.L86		@,
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1115              		.loc 1 147 5 is_stmt 1 view .LVU274
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 1116              		.loc 1 153 12 view .LVU275
 1117              	@ armwave.c:153:     } else if(target_height == 1024) {
 153:armwave.c     ****         g_armwave_state.row_shift = 10;
 1118              		.loc 1 153 14 is_stmt 0 view .LVU276
 1119 0518 010B52E3 		cmp	r2, #1024	@ target_height,
 1120 051c 5100000A 		beq	.L87		@,
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 1121              		.loc 1 156 12 is_stmt 1 view .LVU277
 1122              	@ armwave.c:156:     } else if(target_height == 2048) {
 156:armwave.c     ****         g_armwave_state.row_shift = 11;
 1123              		.loc 1 156 14 is_stmt 0 view .LVU278
 1124 0520 020B52E3 		cmp	r2, #2048	@ target_height,
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1125              		.loc 1 157 9 is_stmt 1 view .LVU279
 1126              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1127              		.loc 1 157 35 is_stmt 0 view .LVU280
 1128 0524 0B00A003 		moveq	r0, #11	@ tmp174,
 1129              	@ armwave.c:158:         g_armwave_state.row_mask = 0x7ff;
 158:armwave.c     ****     } 
 1130              		.loc 1 158 34 view .LVU281
 1131 0528 A4C19F05 		ldreq	ip, .L90+8	@ tmp176,
 1132              	@ armwave.c:157:         g_armwave_state.row_shift = 11;
 157:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 1133              		.loc 1 157 35 view .LVU282
 1134 052c 44008405 		streq	r0, [r4, #68]	@ tmp174, g_armwave_state.row_shift
 158:armwave.c     ****     } 
 1135              		.loc 1 158 9 is_stmt 1 view .LVU283
 1136              	@ armwave.c:158:         g_armwave_state.row_mask = 0x7ff;
 158:armwave.c     ****     } 
 1137              		.loc 1 158 34 is_stmt 0 view .LVU284
 1138 0530 48C08405 		streq	ip, [r4, #72]	@ tmp176, g_armwave_state.row_mask
 1139              	.L74:
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1140              		.loc 1 162 5 is_stmt 1 view .LVU285
 1141              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1142              		.loc 1 166 42 is_stmt 0 view .LVU286
 1143 0534 96020EE0 		mul	lr, r6, r2	@ tmp183, target_width, target_height
 1144              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1145              		.loc 1 168 68 view .LVU287
 1146 0538 06C4A0E1 		lsl	ip, r6, #8	@ _9, target_width,
 1147              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1148              		.loc 1 163 44 view .LVU288
 1149 053c 2204A0E1 		lsr	r0, r2, #8	@ tmp179, target_height,
 1150              	@ armwave.c:164:     g_armwave_state.wave_stride = wave_stride;
 164:armwave.c     ****     g_armwave_state.waves = waves;
 1151              		.loc 1 164 33 view .LVU289
 1152 0540 201084E5 		str	r1, [r4, #32]	@ wave_stride, g_armwave_state.wave_stride
 1153              	@ armwave.c:165:     g_armwave_state.waves = waves;
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1154              		.loc 1 165 27 view .LVU290
 1155 0544 243084E5 		str	r3, [r4, #36]	@ waves, g_armwave_state.waves
 1156              	@ armwave.c:163:     g_armwave_state.vscale = target_height / 256;
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1157              		.loc 1 163 28 view .LVU291
 1158 0548 1C0084E5 		str	r0, [r4, #28]	@ tmp179, g_armwave_state.vscale
 1159              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1160              		.loc 1 167 37 view .LVU292
 1161 054c 013CA0E3 		mov	r3, #256	@ tmp185,
 1162              	.LVL62:
 1163              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 172:armwave.c     **** 
 1164              		.loc 1 172 5 view .LVU293
 1165 0550 0C10A0E1 		mov	r1, ip	@, _9
 1166 0554 7C019FE5 		ldr	r0, .L90+12	@,
 1167              	@ armwave.c:167:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1168              		.loc 1 167 37 view .LVU294
 1169 0558 283084E5 		str	r3, [r4, #40]	@ tmp185, g_armwave_state.bitdepth_height
 1170              	@ armwave.c:162:     g_armwave_state.xstride = target_height;
 162:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1171              		.loc 1 162 29 view .LVU295
 1172 055c 182084E5 		str	r2, [r4, #24]	@ target_height, g_armwave_state.xstride
 163:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1173              		.loc 1 163 5 is_stmt 1 view .LVU296
 164:armwave.c     ****     g_armwave_state.waves = waves;
 1174              		.loc 1 164 5 view .LVU297
 165:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1175              		.loc 1 165 5 view .LVU298
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1176              		.loc 1 166 5 view .LVU299
 167:armwave.c     ****     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 1177              		.loc 1 167 5 view .LVU300
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1178              		.loc 1 168 5 view .LVU301
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 1179              		.loc 1 169 5 view .LVU302
 170:armwave.c     **** 
 1180              		.loc 1 170 5 view .LVU303
 172:armwave.c     **** 
 1181              		.loc 1 172 5 view .LVU304
 1182              	@ armwave.c:169:     g_armwave_state.target_width = target_width;
 169:armwave.c     ****     g_armwave_state.target_height = target_height;
 1183              		.loc 1 169 34 is_stmt 0 view .LVU305
 1184 0560 3C6084E5 		str	r6, [r4, #60]	@ target_width, g_armwave_state.target_width
 1185              	@ armwave.c:170:     g_armwave_state.target_height = target_height;
 170:armwave.c     **** 
 1186              		.loc 1 170 35 view .LVU306
 1187 0564 402084E5 		str	r2, [r4, #64]	@ target_height, g_armwave_state.target_height
 1188              	@ armwave.c:166:     g_armwave_state.size = target_height * target_width;
 166:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1189              		.loc 1 166 26 view .LVU307
 1190 0568 38E084E5 		str	lr, [r4, #56]	@ tmp183, g_armwave_state.size
 1191              	@ armwave.c:168:     g_armwave_state.ch_buff_size = g_armwave_state.bitdepth_height * target_width;
 168:armwave.c     ****     g_armwave_state.target_width = target_width;
 1192              		.loc 1 168 34 view .LVU308
 1193 056c 34C084E5 		str	ip, [r4, #52]	@ _9, g_armwave_state.ch_buff_size
 1194              	@ armwave.c:172:     printf("ch_buff_size=%d\n", g_armwave_state.ch_buff_size);
 172:armwave.c     **** 
 1195              		.loc 1 172 5 view .LVU309
 1196 0570 FEFFFFEB 		bl	printf		@
 1197              	.LVL63:
 177:armwave.c     **** 
 1198              		.loc 1 177 5 is_stmt 1 view .LVU310
 1199              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1200              		.loc 1 179 23 is_stmt 0 view .LVU311
 1201 0574 040094E5 		ldr	r0, [r4, #4]	@ _10, g_armwave_state.ch1_buffer
 1202              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 1203              		.loc 1 177 34 view .LVU312
 1204 0578 4030A0E3 		mov	r3, #64	@ tmp191,
 1205              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1206              		.loc 1 179 7 view .LVU313
 1207 057c 000050E3 		cmp	r0, #0	@ _10,
 1208              	@ armwave.c:177:     g_armwave_state.slice_height = 64;  
 177:armwave.c     **** 
 1209              		.loc 1 177 34 view .LVU314
 1210 0580 2C3084E5 		str	r3, [r4, #44]	@ tmp191, g_armwave_state.slice_height
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1211              		.loc 1 179 5 is_stmt 1 view .LVU315
 1212              	@ armwave.c:179:     if(g_armwave_state.ch1_buffer != NULL)
 179:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1213              		.loc 1 179 7 is_stmt 0 view .LVU316
 1214 0584 0000000A 		beq	.L76		@,
 180:armwave.c     **** 
 1215              		.loc 1 180 9 is_stmt 1 view .LVU317
 1216 0588 FEFFFFEB 		bl	free		@
 1217              	.LVL64:
 1218              	.L76:
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1219              		.loc 1 182 5 view .LVU318
 1220              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1221              		.loc 1 182 34 is_stmt 0 view .LVU319
 1222 058c 0110A0E3 		mov	r1, #1	@,
 1223 0590 340094E5 		ldr	r0, [r4, #52]	@, g_armwave_state.ch_buff_size
 1224 0594 FEFFFFEB 		bl	calloc		@
 1225              	.LVL65:
 1226              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1227              		.loc 1 183 33 view .LVU320
 1228 0598 3C219FE5 		ldr	r2, .L90+16	@ tmp198,
 1229              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     **** 
 1230              		.loc 1 185 33 view .LVU321
 1231 059c FA30A0E3 		mov	r3, #250	@ tmp201,
 1232              	@ armwave.c:183:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1233              		.loc 1 183 33 view .LVU322
 1234 05a0 502084E5 		str	r2, [r4, #80]	@ tmp198, MEM[(short int *)&g_armwave_state + 80B]
 1235              	@ armwave.c:185:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     **** 
 1236              		.loc 1 185 33 view .LVU323
 1237 05a4 B435C4E1 		strh	r3, [r4, #84]	@ movhi	@ tmp201, g_armwave_state.ch1_color.b
 1238              	@ armwave.c:187:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 1239              		.loc 1 187 5 view .LVU324
 1240 05a8 000050E3 		cmp	r0, #0	@ tmp195,
 1241              	@ armwave.c:182:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 182:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1242              		.loc 1 182 32 view .LVU325
 1243 05ac 040084E5 		str	r0, [r4, #4]	@ tmp195, g_armwave_state.ch1_buffer
 183:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1244              		.loc 1 183 5 is_stmt 1 view .LVU326
 184:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1245              		.loc 1 184 5 view .LVU327
 185:armwave.c     **** 
 1246              		.loc 1 185 5 view .LVU328
 187:armwave.c     **** 
 1247              		.loc 1 187 5 view .LVU329
 1248 05b0 3600000A 		beq	.L88		@,
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1249              		.loc 1 190 5 view .LVU330
 1250              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1251              		.loc 1 191 34 is_stmt 0 view .LVU331
 1252 05b4 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1253              	@ armwave.c:190:     length = end_point - start_point;
 190:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1254              		.loc 1 190 12 view .LVU332
 1255 05b8 075045E0 		sub	r5, r5, r7	@ length, end_point, start_point
 1256              	.LVL66:
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1257              		.loc 1 191 5 is_stmt 1 view .LVU333
 1258              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1259              		.loc 1 193 40 is_stmt 0 view .LVU334
 1260 05bc 8500A0E1 		lsl	r0, r5, #1	@, length,
 1261              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1262              		.loc 1 191 34 view .LVU335
 1263 05c0 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp206, target_width
 1264              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1265              		.loc 1 191 31 view .LVU336
 1266 05c4 905A07EE 		vmov	s15, r5	@ int	@ length, length
 1267 05c8 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp205, length
 1268              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1269              		.loc 1 192 60 view .LVU337
 1270 05cc 0B7AD4ED 		vldr.32	s15, [r4, #44]	@ int	@ tmp234, g_armwave_state.slice_height
 1271 05d0 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp209, tmp234
 1272              	@ armwave.c:191:     points_per_pixel = length / ((float)(target_width));
 191:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1273              		.loc 1 191 22 view .LVU338
 1274 05d4 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp205, tmp206
 1275              	.LVL67:
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1276              		.loc 1 192 5 is_stmt 1 view .LVU339
 1277              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1278              		.loc 1 192 60 is_stmt 0 view .LVU340
 1279 05d8 887A67EE 		vmul.f32	s15, s15, s16	@ tmp211, tmp209, points_per_pixel
 1280              	@ armwave.c:192:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 192:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1281              		.loc 1 192 41 view .LVU341
 1282 05dc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp212, tmp211
 1283 05e0 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp212, g_armwave_state.slice_record_height
 193:armwave.c     **** 
 1284              		.loc 1 193 5 is_stmt 1 view .LVU342
 1285              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1286              		.loc 1 193 40 is_stmt 0 view .LVU343
 1287 05e4 FEFFFFEB 		bl	malloc		@
 1288              	.LVL68:
 1289              	@ armwave.c:195:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 1290              		.loc 1 195 5 view .LVU344
 1291 05e8 000050E3 		cmp	r0, #0	@ tmp214,
 1292              	@ armwave.c:193:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 193:armwave.c     **** 
 1293              		.loc 1 193 38 view .LVU345
 1294 05ec 680084E5 		str	r0, [r4, #104]	@ tmp214, g_armwave_state.xcoord_to_xpixel
 195:armwave.c     **** 
 1295              		.loc 1 195 5 is_stmt 1 view .LVU346
 1296 05f0 2B00000A 		beq	.L89		@,
 1297              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1298              		.loc 1 198 54 is_stmt 0 view .LVU347
 1299 05f4 347ADFED 		vldr.32	s15, .L90	@ tmp219,
 1300 05f8 020040E2 		sub	r0, r0, #2	@ ivtmp.77, tmp214,
 1301              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1302              		.loc 1 197 12 view .LVU348
 1303 05fc 0030A0E3 		mov	r3, #0	@ xx,
 1304              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1305              		.loc 1 198 54 view .LVU349
 1306 0600 887A87EE 		vdiv.f32	s14, s15, s16	@ _21, tmp219, points_per_pixel
 1307              	.L79:
 1308              	.LVL69:
 198:armwave.c     **** 
 1309              		.loc 1 198 9 is_stmt 1 discriminator 3 view .LVU350
 1310              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1311              		.loc 1 198 74 is_stmt 0 discriminator 3 view .LVU351
 1312 0604 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1313              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1314              		.loc 1 197 32 discriminator 3 view .LVU352
 1315 0608 013083E2 		add	r3, r3, #1	@ xx, xx,
 1316              	.LVL70:
 1317              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1318              		.loc 1 197 5 discriminator 3 view .LVU353
 1319 060c 030055E1 		cmp	r5, r3	@ length, xx
 1320              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1321              		.loc 1 198 74 discriminator 3 view .LVU354
 1322 0610 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp220, xx
 1323 0614 877A67EE 		vmul.f32	s15, s15, s14	@ tmp221, tmp220, _21
 1324              	@ armwave.c:198:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 198:armwave.c     **** 
 1325              		.loc 1 198 46 discriminator 3 view .LVU355
 1326 0618 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp222, tmp221
 1327 061c 902A17EE 		vmov	r2, s15	@ int	@ tmp222, tmp222
 1328 0620 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp222, MEM[base: _81, offset: 0B]
 1329              	@ armwave.c:197:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1330              		.loc 1 197 5 discriminator 3 view .LVU356
 1331 0624 F6FFFF1A 		bne	.L79		@,
 203:armwave.c     **** }
 1332              		.loc 1 203 5 is_stmt 1 view .LVU357
 1333              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 1334              		.loc 1 203 34 is_stmt 0 view .LVU358
 1335 0628 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 1336 062c 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1337 0630 FEFFFFEB 		bl	malloc		@
 1338              	.LVL71:
 1339              	@ armwave.c:204: }
 1340              		.loc 1 204 1 view .LVU359
 1341 0634 028BBDEC 		vldm	sp!, {d8}	@
 1342              		.cfi_remember_state
 1343              		.cfi_restore 80
 1344              		.cfi_restore 81
 1345              		.cfi_def_cfa_offset 24
 1346              	.LVL72:
 1347              	@ armwave.c:203:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 203:armwave.c     **** }
 1348              		.loc 1 203 32 view .LVU360
 1349 0638 4C0084E5 		str	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 1350              	@ armwave.c:204: }
 1351              		.loc 1 204 1 view .LVU361
 1352 063c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1353              	.LVL73:
 1354              	.L71:
 1355              		.cfi_restore_state
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1356              		.loc 1 147 5 is_stmt 1 view .LVU362
 1357              	@ armwave.c:147:     if(target_height == 256) {
 147:armwave.c     ****         g_armwave_state.row_shift = 8;
 1358              		.loc 1 147 7 is_stmt 0 view .LVU363
 1359 0640 010C52E3 		cmp	r2, #256	@ target_height,
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1360              		.loc 1 148 9 is_stmt 1 view .LVU364
 1361              	@ armwave.c:148:         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1362              		.loc 1 148 35 is_stmt 0 view .LVU365
 1363 0644 08C0A003 		moveq	ip, #8	@ tmp162,
 1364              	@ armwave.c:152:         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 1365              		.loc 1 152 34 view .LVU366
 1366 0648 90C09F15 		ldrne	ip, .L90+20	@ tmp168,
 1367              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 1368              		.loc 1 149 34 view .LVU367
 1369 064c FF00A003 		moveq	r0, #255	@ tmp164,
 1370              	.LVL74:
 1371              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1372              		.loc 1 151 35 view .LVU368
 1373 0650 0900A013 		movne	r0, #9	@ tmp166,
 1374              	@ armwave.c:148:         g_armwave_state.row_shift = 8;
 148:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 1375              		.loc 1 148 35 view .LVU369
 1376 0654 44C08405 		streq	ip, [r4, #68]	@ tmp162, g_armwave_state.row_shift
 149:armwave.c     ****     } else if(target_height == 512) {
 1377              		.loc 1 149 9 is_stmt 1 view .LVU370
 1378              	@ armwave.c:149:         g_armwave_state.row_mask = 0x0ff;
 149:armwave.c     ****     } else if(target_height == 512) {
 1379              		.loc 1 149 34 is_stmt 0 view .LVU371
 1380 0658 48008405 		streq	r0, [r4, #72]	@ tmp164, g_armwave_state.row_mask
 150:armwave.c     ****         g_armwave_state.row_shift = 9;
 1381              		.loc 1 150 12 is_stmt 1 view .LVU372
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1382              		.loc 1 151 9 view .LVU373
 1383              	@ armwave.c:152:         g_armwave_state.row_mask = 0x1ff;
 152:armwave.c     ****     } else if(target_height == 1024) {
 1384              		.loc 1 152 34 is_stmt 0 view .LVU374
 1385 065c 48C08415 		strne	ip, [r4, #72]	@ tmp168, g_armwave_state.row_mask
 1386              	@ armwave.c:151:         g_armwave_state.row_shift = 9;
 151:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 1387              		.loc 1 151 35 view .LVU375
 1388 0660 44008415 		strne	r0, [r4, #68]	@ tmp166, g_armwave_state.row_shift
 152:armwave.c     ****     } else if(target_height == 1024) {
 1389              		.loc 1 152 9 is_stmt 1 view .LVU376
 1390 0664 B2FFFFEA 		b	.L74		@
 1391              	.L87:
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1392              		.loc 1 154 9 view .LVU377
 1393              	@ armwave.c:155:         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 1394              		.loc 1 155 34 is_stmt 0 view .LVU378
 1395 0668 74C09FE5 		ldr	ip, .L90+24	@ tmp172,
 1396              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1397              		.loc 1 154 35 view .LVU379
 1398 066c 0A00A0E3 		mov	r0, #10	@ tmp170,
 1399              	@ armwave.c:155:         g_armwave_state.row_mask = 0x3ff;
 155:armwave.c     ****     } else if(target_height == 2048) {
 1400              		.loc 1 155 34 view .LVU380
 1401 0670 48C084E5 		str	ip, [r4, #72]	@ tmp172, g_armwave_state.row_mask
 1402              	@ armwave.c:154:         g_armwave_state.row_shift = 10;
 154:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 1403              		.loc 1 154 35 view .LVU381
 1404 0674 440084E5 		str	r0, [r4, #68]	@ tmp170, g_armwave_state.row_shift
 155:armwave.c     ****     } else if(target_height == 2048) {
 1405              		.loc 1 155 9 is_stmt 1 view .LVU382
 1406 0678 ADFFFFEA 		b	.L74		@
 1407              	.L86:
 145:armwave.c     **** 
 1408              		.loc 1 145 5 discriminator 2 view .LVU383
 1409 067c 64309FE5 		ldr	r3, .L90+28	@,
 1410              	.LVL75:
 145:armwave.c     **** 
 1411              		.loc 1 145 5 is_stmt 0 discriminator 2 view .LVU384
 1412 0680 9120A0E3 		mov	r2, #145	@,
 1413 0684 60109FE5 		ldr	r1, .L90+32	@,
 1414 0688 60009FE5 		ldr	r0, .L90+36	@,
 1415 068c FEFFFFEB 		bl	__assert_fail		@
 1416              	.LVL76:
 1417              	.L88:
 187:armwave.c     **** 
 1418              		.loc 1 187 5 is_stmt 1 discriminator 1 view .LVU385
 1419 0690 50309FE5 		ldr	r3, .L90+28	@,
 1420 0694 BB20A0E3 		mov	r2, #187	@,
 1421 0698 4C109FE5 		ldr	r1, .L90+32	@,
 1422 069c 50009FE5 		ldr	r0, .L90+40	@,
 1423 06a0 FEFFFFEB 		bl	__assert_fail		@
 1424              	.LVL77:
 1425              	.L89:
 195:armwave.c     **** 
 1426              		.loc 1 195 5 discriminator 1 view .LVU386
 1427 06a4 3C309FE5 		ldr	r3, .L90+28	@,
 1428 06a8 C320A0E3 		mov	r2, #195	@,
 1429 06ac 38109FE5 		ldr	r1, .L90+32	@,
 1430 06b0 40009FE5 		ldr	r0, .L90+44	@,
 1431 06b4 FEFFFFEB 		bl	__assert_fail		@
 1432              	.LVL78:
 1433              	.L85:
 139:armwave.c     **** 
 1434              		.loc 1 139 5 discriminator 1 view .LVU387
 1435 06b8 28309FE5 		ldr	r3, .L90+28	@,
 1436              	.LVL79:
 139:armwave.c     **** 
 1437              		.loc 1 139 5 is_stmt 0 discriminator 1 view .LVU388
 1438 06bc 8B20A0E3 		mov	r2, #139	@,
 1439 06c0 24109FE5 		ldr	r1, .L90+32	@,
 1440 06c4 30009FE5 		ldr	r0, .L90+48	@,
 1441              	.LVL80:
 139:armwave.c     **** 
 1442              		.loc 1 139 5 discriminator 1 view .LVU389
 1443 06c8 FEFFFFEB 		bl	__assert_fail		@
 1444              	.LVL81:
 1445              	.L91:
 1446              		.align	2
 1447              	.L90:
 1448 06cc 0000803F 		.word	1065353216
 1449 06d0 00000000 		.word	g_armwave_state
 1450 06d4 FF070000 		.word	2047
 1451 06d8 6C000000 		.word	.LC2
 1452 06dc F609F406 		.word	116656630
 1453 06e0 FF010000 		.word	511
 1454 06e4 FF030000 		.word	1023
 1455 06e8 00000000 		.word	.LANCHOR0
 1456 06ec 00000000 		.word	.LC0
 1457 06f0 0C000000 		.word	.LC1
 1458 06f4 80000000 		.word	.LC3
 1459 06f8 A4000000 		.word	.LC4
 1460 06fc E4000000 		.word	.LC6
 1461              		.cfi_endproc
 1462              	.LFE61:
 1464              		.align	2
 1465              		.global	armwave_clear_buffer
 1466              		.syntax unified
 1467              		.arm
 1468              		.fpu vfp
 1470              	armwave_clear_buffer:
 1471              	.LVL82:
 1472              	.LFB62:
 205:armwave.c     **** 
 206:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 207:armwave.c     **** {
 1473              		.loc 1 207 1 is_stmt 1 view -0
 1474              		.cfi_startproc
 1475              		@ args = 0, pretend = 0, frame = 0
 1476              		@ frame_needed = 0, uses_anonymous_args = 0
 1477              		@ link register save eliminated.
 208:armwave.c     ****     // Flags ignored, only one buffer cleared
 209:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1478              		.loc 1 209 5 view .LVU391
 1479 0700 0C309FE5 		ldr	r3, .L93	@ tmp113,
 1480 0704 0010A0E3 		mov	r1, #0	@,
 1481 0708 382093E5 		ldr	r2, [r3, #56]	@, g_armwave_state.size
 1482 070c 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1483              	.LVL83:
 1484              		.loc 1 209 5 is_stmt 0 view .LVU392
 1485 0710 FEFFFFEA 		b	memset		@
 1486              	.LVL84:
 1487              	.L94:
 1488              		.align	2
 1489              	.L93:
 1490 0714 00000000 		.word	g_armwave_state
 1491              		.cfi_endproc
 1492              	.LFE62:
 1494              		.align	2
 1495              		.global	armwave_fill_pixbuf_256
 1496              		.syntax unified
 1497              		.arm
 1498              		.fpu vfp
 1500              	armwave_fill_pixbuf_256:
 1501              	.LVL85:
 1502              	.LFB63:
 210:armwave.c     **** }
 211:armwave.c     **** 
 212:armwave.c     **** /*
 213:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 214:armwave.c     ****  */
 215:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 216:armwave.c     **** {
 1503              		.loc 1 216 1 is_stmt 1 view -0
 1504              		.cfi_startproc
 1505              		@ args = 0, pretend = 0, frame = 8
 1506              		@ frame_needed = 0, uses_anonymous_args = 0
 217:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1507              		.loc 1 217 5 view .LVU394
 218:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 1508              		.loc 1 218 5 view .LVU395
 219:armwave.c     ****     uint8_t r, g, b, value;
 1509              		.loc 1 219 5 view .LVU396
 220:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 1510              		.loc 1 220 5 view .LVU397
 1511              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1512              		.loc 1 216 1 is_stmt 0 view .LVU398
 1513 0718 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1514              		.cfi_def_cfa_offset 36
 1515              		.cfi_offset 4, -36
 1516              		.cfi_offset 5, -32
 1517              		.cfi_offset 6, -28
 1518              		.cfi_offset 7, -24
 1519              		.cfi_offset 8, -20
 1520              		.cfi_offset 9, -16
 1521              		.cfi_offset 10, -12
 1522              		.cfi_offset 11, -8
 1523              		.cfi_offset 14, -4
 1524              	@ armwave.c:224:     assert(out_buffer != NULL);
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 222:armwave.c     ****     uint32_t offset;
 223:armwave.c     **** 
 224:armwave.c     ****     assert(out_buffer != NULL);
 1525              		.loc 1 224 5 view .LVU399
 1526 071c 000050E3 		cmp	r0, #0	@ out_buffer
 1527              	@ armwave.c:220:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1528              		.loc 1 220 15 view .LVU400
 1529 0720 44529FE5 		ldr	r5, .L122	@ tmp361,
 1530              	@ armwave.c:216: {
 216:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 1531              		.loc 1 216 1 view .LVU401
 1532 0724 0CD04DE2 		sub	sp, sp, #12	@,,
 1533              		.cfi_def_cfa_offset 48
 1534              	@ armwave.c:220:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1535              		.loc 1 220 15 view .LVU402
 1536 0728 041095E5 		ldr	r1, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 1537              	.LVL86:
 221:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1538              		.loc 1 221 5 is_stmt 1 view .LVU403
 222:armwave.c     **** 
 1539              		.loc 1 222 5 view .LVU404
 1540              		.loc 1 224 5 view .LVU405
 1541 072c 8900000A 		beq	.L120		@,
 225:armwave.c     **** 
 226:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 227:armwave.c     **** 
 228:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 1542              		.loc 1 228 5 view .LVU406
 1543              	@ armwave.c:228:     npix = g_armwave_state.target_width * 256;
 1544              		.loc 1 228 41 is_stmt 0 view .LVU407
 1545 0730 3CC095E5 		ldr	ip, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1546 0734 0CC4A0E1 		lsl	ip, ip, #8	@ npix, g_armwave_state.target_width,
 1547              	.LVL87:
 229:armwave.c     **** 
 230:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 1548              		.loc 1 230 5 is_stmt 1 view .LVU408
 1549              		.loc 1 230 5 is_stmt 0 view .LVU409
 1550 0738 00005CE3 		cmp	ip, #0	@ npix,
 1551 073c 0A0000DA 		ble	.L95		@,
 1552              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 231:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 232:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 233:armwave.c     ****         // most normal waveforms.
 234:armwave.c     ****         wave_word = *base_32ptr++;
 235:armwave.c     **** 
 236:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 237:armwave.c     ****             for(i = 0; i < 4; i++) {
 238:armwave.c     ****                 value = wave_word & 0xff;
 239:armwave.c     ****                 wave_word >>= 8;
 240:armwave.c     **** 
 241:armwave.c     ****                 if(value != 0) {
 242:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1553              		.loc 1 242 52 view .LVU410
 1554 0740 F0A5D5E1 		ldrsh	r10, [r5, #80]	@ _70, g_armwave_state.ch1_color.r
 1555              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1556              		.loc 1 243 52 view .LVU411
 1557 0744 F295D5E1 		ldrsh	r9, [r5, #82]	@ _76, g_armwave_state.ch1_color.g
 1558              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1559              		.loc 1 244 52 view .LVU412
 1560 0748 F4B5D5E1 		ldrsh	fp, [r5, #84]	@ _80, g_armwave_state.ch1_color.b
 1561              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1562              		.loc 1 230 11 view .LVU413
 1563 074c 0030A0E3 		mov	r3, #0	@ n,
 1564 0750 00008DE5 		str	r0, [sp]	@ out_buffer, %sfp
 1565              	.LVL88:
 1566              	.L104:
 234:armwave.c     **** 
 1567              		.loc 1 234 9 is_stmt 1 view .LVU414
 1568              	@ armwave.c:234:         wave_word = *base_32ptr++;
 234:armwave.c     **** 
 1569              		.loc 1 234 19 is_stmt 0 view .LVU415
 1570 0754 042091E4 		ldr	r2, [r1], #4	@ wave_word, MEM[base: base_32ptr_46, offset: 4294967292B]
 1571              	.LVL89:
 236:armwave.c     ****             for(i = 0; i < 4; i++) {
 1572              		.loc 1 236 9 is_stmt 1 view .LVU416
 1573              	@ armwave.c:236:         if(COND_UNLIKELY(wave_word != 0)) {
 236:armwave.c     ****             for(i = 0; i < 4; i++) {
 1574              		.loc 1 236 11 is_stmt 0 view .LVU417
 1575 0758 000052E3 		cmp	r2, #0	@ wave_word,
 1576 075c 0400001A 		bne	.L121		@,
 1577              	.LVL90:
 1578              	.L99:
 1579              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1580              		.loc 1 230 28 discriminator 2 view .LVU418
 1581 0760 043083E2 		add	r3, r3, #4	@ n, n,
 1582              	.LVL91:
 1583              	@ armwave.c:230:     for(n = 0; n < npix; n += 4) {
 230:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 1584              		.loc 1 230 5 discriminator 2 view .LVU419
 1585 0764 03005CE1 		cmp	ip, r3	@ npix, n
 1586 0768 F9FFFFCA 		bgt	.L104		@,
 1587              	.LVL92:
 1588              	.L95:
 1589              	@ armwave.c:263: }
 245:armwave.c     **** 
 246:armwave.c     ****                     r = MIN(rr, 255);
 247:armwave.c     ****                     g = MIN(gg, 255);
 248:armwave.c     ****                     b = MIN(bb, 255);
 249:armwave.c     **** 
 250:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 251:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 252:armwave.c     **** 
 253:armwave.c     ****                     // Is there a better way?
 254:armwave.c     ****                     nsub = n + i;
 255:armwave.c     ****                     xx = nsub & 0xff;
 256:armwave.c     ****                     yy = nsub >> 8;
 257:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 258:armwave.c     ****                     *(out_buffer_base + offset) = word;
 259:armwave.c     ****                 }
 260:armwave.c     ****             }
 261:armwave.c     ****         } 
 262:armwave.c     ****     }
 263:armwave.c     **** }
 1590              		.loc 1 263 1 view .LVU420
 1591 076c 0CD08DE2 		add	sp, sp, #12	@,,
 1592              		.cfi_remember_state
 1593              		.cfi_def_cfa_offset 36
 1594              		@ sp needed	@
 1595 0770 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1596              	.LVL93:
 1597              	.L121:
 1598              		.cfi_restore_state
 238:armwave.c     ****                 wave_word >>= 8;
 1599              		.loc 1 238 17 is_stmt 1 view .LVU421
 239:armwave.c     **** 
 1600              		.loc 1 239 17 view .LVU422
 1601              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1602              		.loc 1 241 19 is_stmt 0 view .LVU423
 1603 0774 FF6012E2 		ands	r6, r2, #255	@ _72, wave_word,
 1604              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1605              		.loc 1 239 27 view .LVU424
 1606 0778 22E4A0E1 		lsr	lr, r2, #8	@ wave_word, wave_word,
 1607              	.LVL94:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1608              		.loc 1 241 17 is_stmt 1 view .LVU425
 1609              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1610              		.loc 1 241 19 is_stmt 0 view .LVU426
 1611 077c 1900000A 		beq	.L100		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1612              		.loc 1 242 21 is_stmt 1 view .LVU427
 1613              	.LVL95:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1614              		.loc 1 243 21 view .LVU428
 244:armwave.c     **** 
 1615              		.loc 1 244 21 view .LVU429
 246:armwave.c     ****                     g = MIN(gg, 255);
 1616              		.loc 1 246 21 view .LVU430
 247:armwave.c     ****                     b = MIN(bb, 255);
 1617              		.loc 1 247 21 view .LVU431
 248:armwave.c     **** 
 1618              		.loc 1 248 21 view .LVU432
 251:armwave.c     **** 
 1619              		.loc 1 251 21 view .LVU433
 254:armwave.c     ****                     xx = nsub & 0xff;
 1620              		.loc 1 254 21 view .LVU434
 255:armwave.c     ****                     yy = nsub >> 8;
 1621              		.loc 1 255 21 view .LVU435
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1622              		.loc 1 256 21 view .LVU436
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1623              		.loc 1 257 21 view .LVU437
 258:armwave.c     ****                 }
 1624              		.loc 1 258 21 view .LVU438
 1625              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1626              		.loc 1 244 55 is_stmt 0 view .LVU439
 1627 0780 9B0604E0 		mul	r4, fp, r6	@ tmp277, _80, _72
 1628              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1629              		.loc 1 243 55 view .LVU440
 1630 0784 990608E0 		mul	r8, r9, r6	@ tmp281, _76, _72
 1631              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1632              		.loc 1 244 24 view .LVU441
 1633 0788 4444A0E1 		asr	r4, r4, #8	@ bb, tmp277,
 1634              	.LVL96:
 1635              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1636              		.loc 1 248 25 view .LVU442
 1637 078c FF0054E3 		cmp	r4, #255	@ bb,
 1638              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1639              		.loc 1 243 24 view .LVU443
 1640 0790 4884A0E1 		asr	r8, r8, #8	@ gg, tmp281,
 1641              	.LVL97:
 1642              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1643              		.loc 1 248 25 view .LVU444
 1644 0794 FF40A0A3 		movge	r4, #255	@ bb,
 1645              	.LVL98:
 1646              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1647              		.loc 1 242 55 view .LVU445
 1648 0798 960A06E0 		mul	r6, r6, r10	@ tmp287, _72, _70
 1649              	.LVL99:
 1650              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1651              		.loc 1 247 25 view .LVU446
 1652 079c FF0058E3 		cmp	r8, #255	@ gg,
 1653 07a0 FF80A0A3 		movge	r8, #255	@ gg,
 1654              	.LVL100:
 1655              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1656              		.loc 1 242 24 view .LVU447
 1657 07a4 4664A0E1 		asr	r6, r6, #8	@ rr, tmp287,
 1658              	.LVL101:
 1659              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1660              		.loc 1 251 56 view .LVU448
 1661 07a8 0884A0E1 		lsl	r8, r8, #8	@ tmp282, gg,
 1662              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1663              		.loc 1 258 39 view .LVU449
 1664 07ac 3C0095E5 		ldr	r0, [r5, #60]	@ tmp373, g_armwave_state.target_width
 1665              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1666              		.loc 1 251 44 view .LVU450
 1667 07b0 0448A0E1 		lsl	r4, r4, #16	@ tmp278, bb,
 1668              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1669              		.loc 1 246 25 view .LVU451
 1670 07b4 FF0056E3 		cmp	r6, #255	@ rr,
 1671              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1672              		.loc 1 251 56 view .LVU452
 1673 07b8 7880FFE6 		uxth	r8, r8	@ tmp283, tmp282
 1674              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1675              		.loc 1 255 24 view .LVU453
 1676 07bc 7370EFE6 		uxtb	r7, r3	@ xx, n
 1677              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1678              		.loc 1 251 44 view .LVU454
 1679 07c0 FF4804E2 		and	r4, r4, #16711680	@ tmp279, tmp278,
 1680              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1681              		.loc 1 251 51 view .LVU455
 1682 07c4 084084E1 		orr	r4, r4, r8	@ tmp285, tmp279, tmp283
 1683              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1684              		.loc 1 246 25 view .LVU456
 1685 07c8 FF60A0A3 		movge	r6, #255	@ rr,
 1686              	.LVL102:
 1687              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1688              		.loc 1 256 31 view .LVU457
 1689 07cc 4384A0E1 		asr	r8, r3, #8	@ yy, n,
 1690              	.LVL103:
 1691              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1692              		.loc 1 258 39 view .LVU458
 1693 07d0 908727E0 		mla	r7, r0, r7, r8	@ tmp275, tmp373, xx, yy
 1694              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1695              		.loc 1 251 62 view .LVU459
 1696 07d4 7660EFE6 		uxtb	r6, r6	@ rr, rr
 1697              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1698              		.loc 1 258 49 view .LVU460
 1699 07d8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1700              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1701              		.loc 1 251 62 view .LVU461
 1702 07dc 066084E1 		orr	r6, r4, r6	@ tmp289, tmp285, rr
 1703              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1704              		.loc 1 251 26 view .LVU462
 1705 07e0 FF6486E3 		orr	r6, r6, #-16777216	@ word, tmp289,
 1706              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1707              		.loc 1 258 49 view .LVU463
 1708 07e4 076180E7 		str	r6, [r0, r7, lsl #2]	@ word, *_106
 1709              	.LVL104:
 1710              	.L100:
 238:armwave.c     ****                 wave_word >>= 8;
 1711              		.loc 1 238 17 is_stmt 1 view .LVU464
 239:armwave.c     **** 
 1712              		.loc 1 239 17 view .LVU465
 1713              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1714              		.loc 1 241 19 is_stmt 0 view .LVU466
 1715 07e8 FFE01EE2 		ands	lr, lr, #255	@ _118, wave_word,
 1716              	.LVL105:
 1717              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1718              		.loc 1 239 27 view .LVU467
 1719 07ec 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 1720              	.LVL106:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1721              		.loc 1 241 17 is_stmt 1 view .LVU468
 1722              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1723              		.loc 1 241 19 is_stmt 0 view .LVU469
 1724 07f0 1C00000A 		beq	.L101		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1725              		.loc 1 242 21 is_stmt 1 view .LVU470
 1726              	.LVL107:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1727              		.loc 1 243 21 view .LVU471
 244:armwave.c     **** 
 1728              		.loc 1 244 21 view .LVU472
 246:armwave.c     ****                     g = MIN(gg, 255);
 1729              		.loc 1 246 21 view .LVU473
 247:armwave.c     ****                     b = MIN(bb, 255);
 1730              		.loc 1 247 21 view .LVU474
 248:armwave.c     **** 
 1731              		.loc 1 248 21 view .LVU475
 251:armwave.c     **** 
 1732              		.loc 1 251 21 view .LVU476
 254:armwave.c     ****                     xx = nsub & 0xff;
 1733              		.loc 1 254 21 view .LVU477
 1734              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1735              		.loc 1 244 55 is_stmt 0 view .LVU478
 1736 07f4 9E0B04E0 		mul	r4, lr, fp	@ tmp300, _118, _80
 1737              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1738              		.loc 1 243 55 view .LVU479
 1739 07f8 9E0907E0 		mul	r7, lr, r9	@ tmp304, _118, _76
 1740              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1741              		.loc 1 244 24 view .LVU480
 1742 07fc 4444A0E1 		asr	r4, r4, #8	@ bb, tmp300,
 1743              	.LVL108:
 1744              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1745              		.loc 1 248 25 view .LVU481
 1746 0800 FF0054E3 		cmp	r4, #255	@ bb,
 1747 0804 FF40A0A3 		movge	r4, #255	@ bb,
 1748              	.LVL109:
 1749              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1750              		.loc 1 242 55 view .LVU482
 1751 0808 9E0A0EE0 		mul	lr, lr, r10	@ tmp310, _118, _70
 1752              	.LVL110:
 1753              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1754              		.loc 1 243 24 view .LVU483
 1755 080c 4774A0E1 		asr	r7, r7, #8	@ gg, tmp304,
 1756              	.LVL111:
 1757              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1758              		.loc 1 251 44 view .LVU484
 1759 0810 0448A0E1 		lsl	r4, r4, #16	@ tmp301, bb,
 1760              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1761              		.loc 1 247 25 view .LVU485
 1762 0814 FF0057E3 		cmp	r7, #255	@ gg,
 1763 0818 016083E2 		add	r6, r3, #1	@ _158, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1764              		.loc 1 255 21 is_stmt 1 view .LVU486
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1765              		.loc 1 256 21 view .LVU487
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1766              		.loc 1 257 21 view .LVU488
 258:armwave.c     ****                 }
 1767              		.loc 1 258 21 view .LVU489
 1768              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1769              		.loc 1 251 44 is_stmt 0 view .LVU490
 1770 081c FF4804E2 		and	r4, r4, #16711680	@ tmp302, tmp301,
 1771              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1772              		.loc 1 247 25 view .LVU491
 1773 0820 FF70A0A3 		movge	r7, #255	@ gg,
 1774              	.LVL112:
 1775              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1776              		.loc 1 251 44 view .LVU492
 1777 0824 04408DE5 		str	r4, [sp, #4]	@ tmp302, %sfp
 1778              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1779              		.loc 1 258 39 view .LVU493
 1780 0828 3C4095E5 		ldr	r4, [r5, #60]	@ tmp376, g_armwave_state.target_width
 1781              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1782              		.loc 1 242 24 view .LVU494
 1783 082c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp310,
 1784              	.LVL113:
 1785              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1786              		.loc 1 255 24 view .LVU495
 1787 0830 7600EFE6 		uxtb	r0, r6	@ xx, _158
 1788              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1789              		.loc 1 246 25 view .LVU496
 1790 0834 FF005EE3 		cmp	lr, #255	@ rr,
 1791              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1792              		.loc 1 251 56 view .LVU497
 1793 0838 0774A0E1 		lsl	r7, r7, #8	@ tmp305, gg,
 1794              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1795              		.loc 1 256 31 view .LVU498
 1796 083c 4664A0E1 		asr	r6, r6, #8	@ yy, _158,
 1797              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1798              		.loc 1 258 39 view .LVU499
 1799 0840 946026E0 		mla	r6, r4, r0, r6	@ tmp298, tmp376, xx, yy
 1800              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1801              		.loc 1 246 25 view .LVU500
 1802 0844 FFE0A0A3 		movge	lr, #255	@ rr,
 1803              	.LVL114:
 1804              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1805              		.loc 1 251 51 view .LVU501
 1806 0848 04009DE5 		ldr	r0, [sp, #4]	@ tmp302, %sfp
 1807              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1808              		.loc 1 251 56 view .LVU502
 1809 084c 7770FFE6 		uxth	r7, r7	@ tmp306, tmp305
 1810              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1811              		.loc 1 251 51 view .LVU503
 1812 0850 074080E1 		orr	r4, r0, r7	@ tmp308, tmp302, tmp306
 1813              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1814              		.loc 1 251 62 view .LVU504
 1815 0854 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1816              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1817              		.loc 1 258 49 view .LVU505
 1818 0858 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1819              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1820              		.loc 1 251 62 view .LVU506
 1821 085c 0EE084E1 		orr	lr, r4, lr	@ tmp312, tmp308, rr
 1822              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1823              		.loc 1 251 26 view .LVU507
 1824 0860 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp312,
 1825              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1826              		.loc 1 258 49 view .LVU508
 1827 0864 06E180E7 		str	lr, [r0, r6, lsl #2]	@ word, *_152
 1828              	.LVL115:
 1829              	.L101:
 238:armwave.c     ****                 wave_word >>= 8;
 1830              		.loc 1 238 17 is_stmt 1 view .LVU509
 239:armwave.c     **** 
 1831              		.loc 1 239 17 view .LVU510
 1832              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1833              		.loc 1 241 19 is_stmt 0 view .LVU511
 1834 0868 FFE018E2 		ands	lr, r8, #255	@ _164, wave_word,
 1835              	@ armwave.c:239:                 wave_word >>= 8;
 239:armwave.c     **** 
 1836              		.loc 1 239 27 view .LVU512
 1837 086c 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 1838              	.LVL116:
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1839              		.loc 1 241 17 is_stmt 1 view .LVU513
 1840              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1841              		.loc 1 241 19 is_stmt 0 view .LVU514
 1842 0870 1A00000A 		beq	.L102		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1843              		.loc 1 242 21 is_stmt 1 view .LVU515
 1844              	.LVL117:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1845              		.loc 1 243 21 view .LVU516
 244:armwave.c     **** 
 1846              		.loc 1 244 21 view .LVU517
 246:armwave.c     ****                     g = MIN(gg, 255);
 1847              		.loc 1 246 21 view .LVU518
 247:armwave.c     ****                     b = MIN(bb, 255);
 1848              		.loc 1 247 21 view .LVU519
 248:armwave.c     **** 
 1849              		.loc 1 248 21 view .LVU520
 251:armwave.c     **** 
 1850              		.loc 1 251 21 view .LVU521
 254:armwave.c     ****                     xx = nsub & 0xff;
 1851              		.loc 1 254 21 view .LVU522
 1852              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1853              		.loc 1 244 55 is_stmt 0 view .LVU523
 1854 0874 9E0B04E0 		mul	r4, lr, fp	@ tmp323, _164, _80
 1855              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1856              		.loc 1 243 55 view .LVU524
 1857 0878 9E0906E0 		mul	r6, lr, r9	@ tmp327, _164, _76
 1858              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1859              		.loc 1 244 24 view .LVU525
 1860 087c 4444A0E1 		asr	r4, r4, #8	@ bb, tmp323,
 1861              	.LVL118:
 1862              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1863              		.loc 1 242 55 view .LVU526
 1864 0880 9E0A0EE0 		mul	lr, lr, r10	@ tmp333, _164, _70
 1865              	.LVL119:
 1866              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1867              		.loc 1 248 25 view .LVU527
 1868 0884 FF0054E3 		cmp	r4, #255	@ bb,
 1869              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1870              		.loc 1 243 24 view .LVU528
 1871 0888 4664A0E1 		asr	r6, r6, #8	@ gg, tmp327,
 1872              	.LVL120:
 1873              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1874              		.loc 1 248 25 view .LVU529
 1875 088c FF40A0A3 		movge	r4, #255	@ bb,
 1876              	.LVL121:
 1877              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1878              		.loc 1 247 25 view .LVU530
 1879 0890 FF0056E3 		cmp	r6, #255	@ gg,
 1880 0894 FF60A0A3 		movge	r6, #255	@ gg,
 1881              	.LVL122:
 247:armwave.c     ****                     b = MIN(bb, 255);
 1882              		.loc 1 247 25 view .LVU531
 1883 0898 027083E2 		add	r7, r3, #2	@ _66, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1884              		.loc 1 255 21 is_stmt 1 view .LVU532
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1885              		.loc 1 256 21 view .LVU533
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1886              		.loc 1 257 21 view .LVU534
 258:armwave.c     ****                 }
 1887              		.loc 1 258 21 view .LVU535
 1888              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1889              		.loc 1 242 24 is_stmt 0 view .LVU536
 1890 089c 4EE4A0E1 		asr	lr, lr, #8	@ rr, tmp333,
 1891              	.LVL123:
 1892              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1893              		.loc 1 258 39 view .LVU537
 1894 08a0 3C0095E5 		ldr	r0, [r5, #60]	@ tmp377, g_armwave_state.target_width
 1895              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1896              		.loc 1 246 25 view .LVU538
 1897 08a4 FF005EE3 		cmp	lr, #255	@ rr,
 1898              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 1899              		.loc 1 255 24 view .LVU539
 1900 08a8 7780EFE6 		uxtb	r8, r7	@ xx, _66
 1901              	.LVL124:
 1902              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1903              		.loc 1 251 56 view .LVU540
 1904 08ac 0664A0E1 		lsl	r6, r6, #8	@ tmp328, gg,
 1905              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1906              		.loc 1 251 44 view .LVU541
 1907 08b0 0448A0E1 		lsl	r4, r4, #16	@ tmp324, bb,
 1908              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 1909              		.loc 1 246 25 view .LVU542
 1910 08b4 FFE0A0A3 		movge	lr, #255	@ rr,
 1911              	.LVL125:
 1912              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1913              		.loc 1 256 31 view .LVU543
 1914 08b8 4774A0E1 		asr	r7, r7, #8	@ yy, _66,
 1915              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1916              		.loc 1 258 39 view .LVU544
 1917 08bc 907827E0 		mla	r7, r0, r8, r7	@ tmp321, tmp377, xx, yy
 1918              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1919              		.loc 1 251 44 view .LVU545
 1920 08c0 FF4804E2 		and	r4, r4, #16711680	@ tmp325, tmp324,
 1921              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1922              		.loc 1 251 56 view .LVU546
 1923 08c4 7660FFE6 		uxth	r6, r6	@ tmp329, tmp328
 1924              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1925              		.loc 1 251 51 view .LVU547
 1926 08c8 066084E1 		orr	r6, r4, r6	@ tmp331, tmp325, tmp329
 1927              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1928              		.loc 1 251 62 view .LVU548
 1929 08cc 7EE0EFE6 		uxtb	lr, lr	@ rr, rr
 1930              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1931              		.loc 1 258 49 view .LVU549
 1932 08d0 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 1933              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1934              		.loc 1 251 62 view .LVU550
 1935 08d4 0EE086E1 		orr	lr, r6, lr	@ tmp335, tmp331, rr
 1936              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 1937              		.loc 1 251 26 view .LVU551
 1938 08d8 FFE48EE3 		orr	lr, lr, #-16777216	@ word, tmp335,
 1939              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 1940              		.loc 1 258 49 view .LVU552
 1941 08dc 07E180E7 		str	lr, [r0, r7, lsl #2]	@ word, *_198
 1942              	.L102:
 1943              	.LVL126:
 238:armwave.c     ****                 wave_word >>= 8;
 1944              		.loc 1 238 17 is_stmt 1 view .LVU553
 239:armwave.c     **** 
 1945              		.loc 1 239 17 view .LVU554
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1946              		.loc 1 241 17 view .LVU555
 1947              	@ armwave.c:241:                 if(value != 0) {
 241:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1948              		.loc 1 241 19 is_stmt 0 view .LVU556
 1949 08e0 000052E3 		cmp	r2, #0	@ wave_word,
 1950 08e4 9DFFFF0A 		beq	.L99		@,
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1951              		.loc 1 242 21 is_stmt 1 view .LVU557
 1952              	.LVL127:
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1953              		.loc 1 243 21 view .LVU558
 244:armwave.c     **** 
 1954              		.loc 1 244 21 view .LVU559
 246:armwave.c     ****                     g = MIN(gg, 255);
 1955              		.loc 1 246 21 view .LVU560
 247:armwave.c     ****                     b = MIN(bb, 255);
 1956              		.loc 1 247 21 view .LVU561
 248:armwave.c     **** 
 1957              		.loc 1 248 21 view .LVU562
 251:armwave.c     **** 
 1958              		.loc 1 251 21 view .LVU563
 254:armwave.c     ****                     xx = nsub & 0xff;
 1959              		.loc 1 254 21 view .LVU564
 1960              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1961              		.loc 1 244 55 is_stmt 0 view .LVU565
 1962 08e8 920B0EE0 		mul	lr, r2, fp	@ tmp344, wave_word, _80
 1963              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1964              		.loc 1 243 55 view .LVU566
 1965 08ec 920904E0 		mul	r4, r2, r9	@ tmp348, wave_word, _76
 1966              	@ armwave.c:244:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 244:armwave.c     **** 
 1967              		.loc 1 244 24 view .LVU567
 1968 08f0 4EE4A0E1 		asr	lr, lr, #8	@ bb, tmp344,
 1969              	.LVL128:
 1970              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1971              		.loc 1 242 55 view .LVU568
 1972 08f4 920A02E0 		mul	r2, r2, r10	@ tmp354, wave_word, _70
 1973              	.LVL129:
 1974              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1975              		.loc 1 248 25 view .LVU569
 1976 08f8 FF005EE3 		cmp	lr, #255	@ bb,
 1977              	@ armwave.c:243:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 243:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1978              		.loc 1 243 24 view .LVU570
 1979 08fc 4444A0E1 		asr	r4, r4, #8	@ gg, tmp348,
 1980              	.LVL130:
 1981              	@ armwave.c:248:                     b = MIN(bb, 255);
 248:armwave.c     **** 
 1982              		.loc 1 248 25 view .LVU571
 1983 0900 FFE0A0A3 		movge	lr, #255	@ bb,
 1984              	.LVL131:
 1985              	@ armwave.c:247:                     g = MIN(gg, 255);
 247:armwave.c     ****                     b = MIN(bb, 255);
 1986              		.loc 1 247 25 view .LVU572
 1987 0904 FF0054E3 		cmp	r4, #255	@ gg,
 1988 0908 FF40A0A3 		movge	r4, #255	@ gg,
 1989              	.LVL132:
 247:armwave.c     ****                     b = MIN(bb, 255);
 1990              		.loc 1 247 25 view .LVU573
 1991 090c 036083E2 		add	r6, r3, #3	@ _59, n,
 255:armwave.c     ****                     yy = nsub >> 8;
 1992              		.loc 1 255 21 is_stmt 1 view .LVU574
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 1993              		.loc 1 256 21 view .LVU575
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 1994              		.loc 1 257 21 view .LVU576
 258:armwave.c     ****                 }
 1995              		.loc 1 258 21 view .LVU577
 1996              	@ armwave.c:242:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 242:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1997              		.loc 1 242 24 is_stmt 0 view .LVU578
 1998 0910 4224A0E1 		asr	r2, r2, #8	@ rr, tmp354,
 1999              	.LVL133:
 2000              	@ armwave.c:257:                     offset = yy + (xx * g_armwave_state.target_width);
 257:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2001              		.loc 1 257 39 view .LVU579
 2002 0914 3C7095E5 		ldr	r7, [r5, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2003              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 2004              		.loc 1 246 25 view .LVU580
 2005 0918 FF0052E3 		cmp	r2, #255	@ rr,
 2006              	@ armwave.c:255:                     xx = nsub & 0xff;
 255:armwave.c     ****                     yy = nsub >> 8;
 2007              		.loc 1 255 24 view .LVU581
 2008 091c 7680EFE6 		uxtb	r8, r6	@ xx, _59
 2009              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2010              		.loc 1 251 56 view .LVU582
 2011 0920 0444A0E1 		lsl	r4, r4, #8	@ tmp349, gg,
 2012              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2013              		.loc 1 251 44 view .LVU583
 2014 0924 0EE8A0E1 		lsl	lr, lr, #16	@ tmp345, bb,
 2015              	@ armwave.c:246:                     r = MIN(rr, 255);
 246:armwave.c     ****                     g = MIN(gg, 255);
 2016              		.loc 1 246 25 view .LVU584
 2017 0928 FF20A0A3 		movge	r2, #255	@ rr,
 2018              	.LVL134:
 2019              	@ armwave.c:256:                     yy = nsub >> 8;
 256:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 2020              		.loc 1 256 31 view .LVU585
 2021 092c 4664A0E1 		asr	r6, r6, #8	@ yy, _59,
 2022              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2023              		.loc 1 251 44 view .LVU586
 2024 0930 FFE80EE2 		and	lr, lr, #16711680	@ tmp346, tmp345,
 2025              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2026              		.loc 1 251 56 view .LVU587
 2027 0934 7440FFE6 		uxth	r4, r4	@ tmp350, tmp349
 2028              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2029              		.loc 1 258 39 view .LVU588
 2030 0938 976826E0 		mla	r6, r7, r8, r6	@ tmp342, g_armwave_state.target_width, xx, yy
 2031              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2032              		.loc 1 251 51 view .LVU589
 2033 093c 04E08EE1 		orr	lr, lr, r4	@ tmp352, tmp346, tmp350
 2034              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2035              		.loc 1 251 62 view .LVU590
 2036 0940 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2037              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2038              		.loc 1 258 49 view .LVU591
 2039 0944 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2040              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2041              		.loc 1 251 62 view .LVU592
 2042 0948 02208EE1 		orr	r2, lr, r2	@ tmp356, tmp352, rr
 2043              	@ armwave.c:251:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 251:armwave.c     **** 
 2044              		.loc 1 251 26 view .LVU593
 2045 094c FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp356,
 2046              	@ armwave.c:258:                     *(out_buffer_base + offset) = word;
 258:armwave.c     ****                 }
 2047              		.loc 1 258 49 view .LVU594
 2048 0950 062180E7 		str	r2, [r0, r6, lsl #2]	@ word, *_244
 2049 0954 81FFFFEA 		b	.L99		@
 2050              	.LVL135:
 2051              	.L120:
 224:armwave.c     **** 
 2052              		.loc 1 224 5 is_stmt 1 discriminator 1 view .LVU595
 2053 0958 10309FE5 		ldr	r3, .L122+4	@,
 2054 095c E020A0E3 		mov	r2, #224	@,
 2055 0960 0C109FE5 		ldr	r1, .L122+8	@,
 2056              	.LVL136:
 224:armwave.c     **** 
 2057              		.loc 1 224 5 is_stmt 0 discriminator 1 view .LVU596
 2058 0964 0C009FE5 		ldr	r0, .L122+12	@,
 2059              	.LVL137:
 224:armwave.c     **** 
 2060              		.loc 1 224 5 discriminator 1 view .LVU597
 2061 0968 FEFFFFEB 		bl	__assert_fail		@
 2062              	.LVL138:
 2063              	.L123:
 224:armwave.c     **** 
 2064              		.loc 1 224 5 discriminator 1 view .LVU598
 2065              		.align	2
 2066              	.L122:
 2067 096c 00000000 		.word	g_armwave_state
 2068 0970 18000000 		.word	.LANCHOR0+24
 2069 0974 00000000 		.word	.LC0
 2070 0978 FC000000 		.word	.LC7
 2071              		.cfi_endproc
 2072              	.LFE63:
 2074              		.align	2
 2075              		.global	armwave_fill_pixbuf_scaled
 2076              		.syntax unified
 2077              		.arm
 2078              		.fpu vfp
 2080              	armwave_fill_pixbuf_scaled:
 2081              	.LVL139:
 2082              	.LFB64:
 264:armwave.c     **** 
 265:armwave.c     **** /*
 266:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 267:armwave.c     ****  * Rows are repeated as necessary.
 268:armwave.c     ****  */
 269:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 270:armwave.c     **** {
 2083              		.loc 1 270 1 is_stmt 1 view -0
 2084              		.cfi_startproc
 2085              		@ args = 0, pretend = 0, frame = 8
 2086              		@ frame_needed = 0, uses_anonymous_args = 0
 271:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2087              		.loc 1 271 5 view .LVU600
 272:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w, vscale;
 2088              		.loc 1 272 5 view .LVU601
 273:armwave.c     ****     uint8_t r, g, b, value;
 2089              		.loc 1 273 5 view .LVU602
 274:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 2090              		.loc 1 274 5 view .LVU603
 2091              	@ armwave.c:270: {
 270:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2092              		.loc 1 270 1 is_stmt 0 view .LVU604
 2093 097c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2094              		.cfi_def_cfa_offset 36
 2095              		.cfi_offset 4, -36
 2096              		.cfi_offset 5, -32
 2097              		.cfi_offset 6, -28
 2098              		.cfi_offset 7, -24
 2099              		.cfi_offset 8, -20
 2100              		.cfi_offset 9, -16
 2101              		.cfi_offset 10, -12
 2102              		.cfi_offset 11, -8
 2103              		.cfi_offset 14, -4
 2104              	@ armwave.c:278:     assert(out_buffer != NULL);
 275:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 276:armwave.c     ****     uint32_t offset;
 277:armwave.c     **** 
 278:armwave.c     ****     assert(out_buffer != NULL);
 2105              		.loc 1 278 5 view .LVU605
 2106 0980 007050E2 		subs	r7, r0, #0	@ out_buffer, out_buffer
 2107              	@ armwave.c:274:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2108              		.loc 1 274 15 view .LVU606
 2109 0984 5C629FE5 		ldr	r6, .L151	@ tmp366,
 2110              	@ armwave.c:270: {
 270:armwave.c     ****     uint32_t xx, yy, ysub, word, wave_word;
 2111              		.loc 1 270 1 view .LVU607
 2112 0988 0CD04DE2 		sub	sp, sp, #12	@,,
 2113              		.cfi_def_cfa_offset 48
 2114              	@ armwave.c:274:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 274:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2115              		.loc 1 274 15 view .LVU608
 2116 098c 044096E5 		ldr	r4, [r6, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 2117              	.LVL140:
 275:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 2118              		.loc 1 275 5 is_stmt 1 view .LVU609
 276:armwave.c     **** 
 2119              		.loc 1 276 5 view .LVU610
 2120              		.loc 1 278 5 view .LVU611
 2121 0990 8F00000A 		beq	.L149		@,
 279:armwave.c     **** 
 280:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 281:armwave.c     **** 
 282:armwave.c     ****     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2122              		.loc 1 282 5 view .LVU612
 2123              	@ armwave.c:282:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 2124              		.loc 1 282 27 is_stmt 0 view .LVU613
 2125 0994 3C5096E5 		ldr	r5, [r6, #60]	@ _1, g_armwave_state.target_width
 2126              	@ armwave.c:283:     vscale = g_armwave_state.target_height / 256;
 283:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2127              		.loc 1 283 44 view .LVU614
 2128 0998 403096E5 		ldr	r3, [r6, #64]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2129              	@ armwave.c:285:     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 284:armwave.c     **** 
 285:armwave.c     ****     printf("np=%d w=%d v=%d\n", npix, g_armwave_state.target_width, vscale);
 2130              		.loc 1 285 5 view .LVU615
 2131 099c 0520A0E1 		mov	r2, r5	@, _1
 2132              	@ armwave.c:282:     npix = g_armwave_state.target_width * 256; //g_armwave_state.target_height;
 282:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2133              		.loc 1 282 41 view .LVU616
 2134 09a0 0554A0E1 		lsl	r5, r5, #8	@ npix, _1,
 2135              	.LVL141:
 283:armwave.c     ****     vscale = g_armwave_state.target_height / 256;
 2136              		.loc 1 283 5 is_stmt 1 view .LVU617
 2137              		.loc 1 285 5 view .LVU618
 2138 09a4 0510A0E1 		mov	r1, r5	@, npix
 2139 09a8 2334A0E1 		lsr	r3, r3, #8	@, g_armwave_state.target_height,
 2140              	.LVL142:
 2141              		.loc 1 285 5 is_stmt 0 view .LVU619
 2142 09ac 38029FE5 		ldr	r0, .L151+4	@,
 2143              	.LVL143:
 2144              		.loc 1 285 5 view .LVU620
 2145 09b0 FEFFFFEB 		bl	printf		@
 2146              	.LVL144:
 286:armwave.c     **** 
 287:armwave.c     ****     /*
 288:armwave.c     ****     for(n = 0; n < npix; n += 1) {
 289:armwave.c     ****         for(i = 0; i < 4; i++) {
 290:armwave.c     ****             yy = ((n & 0xff) * 4) + i;
 291:armwave.c     ****             xx = n >> 8;
 292:armwave.c     **** 
 293:armwave.c     ****             //offset = (yy + (xx * g_armwave_state.target_width));
 294:armwave.c     ****             //*(out_buffer_base + offset) = 0xff000000 | (yy << 8) | xx;
 295:armwave.c     **** 
 296:armwave.c     ****             offset = (xx + (yy * g_armwave_state.target_width));
 297:armwave.c     ****             *(out_buffer_base + offset) = 0xff000000 | ((i * 64) << 16); // | (yy << 8) | xx;
 298:armwave.c     ****         }
 299:armwave.c     ****     }
 300:armwave.c     ****     */
 301:armwave.c     **** 
 302:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 2147              		.loc 1 302 5 is_stmt 1 view .LVU621
 2148              		.loc 1 302 5 is_stmt 0 view .LVU622
 2149 09b4 000055E3 		cmp	r5, #0	@ npix,
 2150 09b8 0A0000DA 		ble	.L124		@,
 2151              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 303:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 304:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 305:armwave.c     ****         // most normal waveforms.
 306:armwave.c     ****         wave_word = *base_32ptr++;
 307:armwave.c     **** 
 308:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 309:armwave.c     ****             for(w = 0; w < 4; w++) {
 310:armwave.c     ****                 value = wave_word & 0xff;
 311:armwave.c     ****                 wave_word >>= 8;
 312:armwave.c     **** 
 313:armwave.c     ****                 if(value != 0) {
 314:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2152              		.loc 1 314 52 view .LVU623
 2153 09bc F0A5D6E1 		ldrsh	r10, [r6, #80]	@ _74, g_armwave_state.ch1_color.r
 2154              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2155              		.loc 1 315 52 view .LVU624
 2156 09c0 F295D6E1 		ldrsh	r9, [r6, #82]	@ _80, g_armwave_state.ch1_color.g
 2157              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2158              		.loc 1 316 52 view .LVU625
 2159 09c4 F4B5D6E1 		ldrsh	fp, [r6, #84]	@ _84, g_armwave_state.ch1_color.b
 2160              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2161              		.loc 1 302 11 view .LVU626
 2162 09c8 0030A0E3 		mov	r3, #0	@ n,
 2163 09cc 00708DE5 		str	r7, [sp]	@ out_buffer, %sfp
 2164              	.LVL145:
 2165              	.L133:
 306:armwave.c     **** 
 2166              		.loc 1 306 9 is_stmt 1 view .LVU627
 2167              	@ armwave.c:306:         wave_word = *base_32ptr++;
 306:armwave.c     **** 
 2168              		.loc 1 306 19 is_stmt 0 view .LVU628
 2169 09d0 042094E4 		ldr	r2, [r4], #4	@ wave_word, MEM[base: base_32ptr_50, offset: 4294967292B]
 2170              	.LVL146:
 308:armwave.c     ****             for(w = 0; w < 4; w++) {
 2171              		.loc 1 308 9 is_stmt 1 view .LVU629
 2172              	@ armwave.c:308:         if(COND_UNLIKELY(wave_word != 0)) {
 308:armwave.c     ****             for(w = 0; w < 4; w++) {
 2173              		.loc 1 308 11 is_stmt 0 view .LVU630
 2174 09d4 000052E3 		cmp	r2, #0	@ wave_word,
 2175 09d8 0400001A 		bne	.L150		@,
 2176              	.LVL147:
 2177              	.L128:
 2178              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2179              		.loc 1 302 28 discriminator 2 view .LVU631
 2180 09dc 043083E2 		add	r3, r3, #4	@ n, n,
 2181              	.LVL148:
 2182              	@ armwave.c:302:     for(n = 0; n < npix; n += 4) {
 302:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 2183              		.loc 1 302 5 discriminator 2 view .LVU632
 2184 09e0 030055E1 		cmp	r5, r3	@ npix, n
 2185 09e4 F9FFFFCA 		bgt	.L133		@,
 2186              	.LVL149:
 2187              	.L124:
 2188              	@ armwave.c:339: }
 317:armwave.c     **** 
 318:armwave.c     ****                     r = MIN(rr, 255);
 319:armwave.c     ****                     g = MIN(gg, 255);
 320:armwave.c     ****                     b = MIN(bb, 255);
 321:armwave.c     **** 
 322:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 323:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 324:armwave.c     **** 
 325:armwave.c     ****                     // Do line scaling as necessary.
 326:armwave.c     ****                     nsub = n + w;
 327:armwave.c     ****                     yy = (nsub & 0xff);
 328:armwave.c     ****                     xx = (nsub >> 8);
 329:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 330:armwave.c     ****                     *(out_buffer_base + offset) = word;
 331:armwave.c     ****                 }
 332:armwave.c     ****             }
 333:armwave.c     ****         }
 334:armwave.c     **** 
 335:armwave.c     ****         //printf("0x%08x, %d\n", out_buffer_base, n);
 336:armwave.c     **** 
 337:armwave.c     ****         //*out_buffer_base++ = 0xff000000 | n;
 338:armwave.c     ****     }
 339:armwave.c     **** }
 2189              		.loc 1 339 1 view .LVU633
 2190 09e8 0CD08DE2 		add	sp, sp, #12	@,,
 2191              		.cfi_remember_state
 2192              		.cfi_def_cfa_offset 36
 2193              		@ sp needed	@
 2194 09ec F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2195              	.LVL150:
 2196              	.L150:
 2197              		.cfi_restore_state
 310:armwave.c     ****                 wave_word >>= 8;
 2198              		.loc 1 310 17 is_stmt 1 view .LVU634
 311:armwave.c     **** 
 2199              		.loc 1 311 17 view .LVU635
 2200              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2201              		.loc 1 313 19 is_stmt 0 view .LVU636
 2202 09f0 FFC012E2 		ands	ip, r2, #255	@ _76, wave_word,
 2203              	@ armwave.c:311:                 wave_word >>= 8;
 311:armwave.c     **** 
 2204              		.loc 1 311 27 view .LVU637
 2205 09f4 2214A0E1 		lsr	r1, r2, #8	@ wave_word, wave_word,
 2206              	.LVL151:
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2207              		.loc 1 313 17 is_stmt 1 view .LVU638
 2208              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2209              		.loc 1 313 19 is_stmt 0 view .LVU639
 2210 09f8 1900000A 		beq	.L129		@,
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2211              		.loc 1 314 21 is_stmt 1 view .LVU640
 2212              	.LVL152:
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2213              		.loc 1 315 21 view .LVU641
 316:armwave.c     **** 
 2214              		.loc 1 316 21 view .LVU642
 318:armwave.c     ****                     g = MIN(gg, 255);
 2215              		.loc 1 318 21 view .LVU643
 319:armwave.c     ****                     b = MIN(bb, 255);
 2216              		.loc 1 319 21 view .LVU644
 320:armwave.c     **** 
 2217              		.loc 1 320 21 view .LVU645
 323:armwave.c     **** 
 2218              		.loc 1 323 21 view .LVU646
 326:armwave.c     ****                     yy = (nsub & 0xff);
 2219              		.loc 1 326 21 view .LVU647
 327:armwave.c     ****                     xx = (nsub >> 8);
 2220              		.loc 1 327 21 view .LVU648
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2221              		.loc 1 328 21 view .LVU649
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2222              		.loc 1 329 21 view .LVU650
 330:armwave.c     ****                 }
 2223              		.loc 1 330 21 view .LVU651
 2224              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2225              		.loc 1 316 55 is_stmt 0 view .LVU652
 2226 09fc 9B0C00E0 		mul	r0, fp, ip	@ tmp284, _84, _76
 2227              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2228              		.loc 1 315 55 view .LVU653
 2229 0a00 990C08E0 		mul	r8, r9, ip	@ tmp288, _80, _76
 2230              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2231              		.loc 1 316 24 view .LVU654
 2232 0a04 4004A0E1 		asr	r0, r0, #8	@ bb, tmp284,
 2233              	.LVL153:
 2234              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2235              		.loc 1 320 25 view .LVU655
 2236 0a08 FF0050E3 		cmp	r0, #255	@ bb,
 2237              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2238              		.loc 1 315 24 view .LVU656
 2239 0a0c 4884A0E1 		asr	r8, r8, #8	@ gg, tmp288,
 2240              	.LVL154:
 2241              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2242              		.loc 1 314 55 view .LVU657
 2243 0a10 9C0A0CE0 		mul	ip, ip, r10	@ tmp294, _76, _74
 2244              	.LVL155:
 2245              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2246              		.loc 1 320 25 view .LVU658
 2247 0a14 FF00A0A3 		movge	r0, #255	@ bb,
 2248              	.LVL156:
 2249              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2250              		.loc 1 319 25 view .LVU659
 2251 0a18 FF0058E3 		cmp	r8, #255	@ gg,
 2252 0a1c FF80A0A3 		movge	r8, #255	@ gg,
 2253              	.LVL157:
 2254              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2255              		.loc 1 314 24 view .LVU660
 2256 0a20 4CC4A0E1 		asr	ip, ip, #8	@ rr, tmp294,
 2257              	.LVL158:
 2258              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2259              		.loc 1 323 56 view .LVU661
 2260 0a24 0884A0E1 		lsl	r8, r8, #8	@ tmp289, gg,
 2261              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2262              		.loc 1 318 25 view .LVU662
 2263 0a28 FF005CE3 		cmp	ip, #255	@ rr,
 2264              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2265              		.loc 1 330 39 view .LVU663
 2266 0a2c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp380, g_armwave_state.target_width
 2267              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2268              		.loc 1 323 44 view .LVU664
 2269 0a30 0008A0E1 		lsl	r0, r0, #16	@ tmp285, bb,
 2270              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2271              		.loc 1 323 56 view .LVU665
 2272 0a34 7880FFE6 		uxth	r8, r8	@ tmp290, tmp289
 2273              	@ armwave.c:327:                     yy = (nsub & 0xff);
 327:armwave.c     ****                     xx = (nsub >> 8);
 2274              		.loc 1 327 24 view .LVU666
 2275 0a38 73E0EFE6 		uxtb	lr, r3	@ yy, n
 2276              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2277              		.loc 1 318 25 view .LVU667
 2278 0a3c FFC0A0A3 		movge	ip, #255	@ rr,
 2279              	.LVL159:
 2280              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2281              		.loc 1 323 44 view .LVU668
 2282 0a40 FF0800E2 		and	r0, r0, #16711680	@ tmp286, tmp285,
 2283              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2284              		.loc 1 323 51 view .LVU669
 2285 0a44 080080E1 		orr	r0, r0, r8	@ tmp292, tmp286, tmp290
 2286              	@ armwave.c:328:                     xx = (nsub >> 8);
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2287              		.loc 1 328 32 view .LVU670
 2288 0a48 4384A0E1 		asr	r8, r3, #8	@ xx, n,
 2289              	.LVL160:
 2290              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2291              		.loc 1 330 39 view .LVU671
 2292 0a4c 978E2EE0 		mla	lr, r7, lr, r8	@ tmp282, tmp380, yy, xx
 2293              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2294              		.loc 1 323 62 view .LVU672
 2295 0a50 7CC0EFE6 		uxtb	ip, ip	@ rr, rr
 2296 0a54 0CC080E1 		orr	ip, r0, ip	@ tmp296, tmp292, rr
 2297              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2298              		.loc 1 330 49 view .LVU673
 2299 0a58 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2300              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2301              		.loc 1 323 26 view .LVU674
 2302 0a5c FFC48CE3 		orr	ip, ip, #-16777216	@ word, tmp296,
 2303              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2304              		.loc 1 330 49 view .LVU675
 2305 0a60 0EC180E7 		str	ip, [r0, lr, lsl #2]	@ word, *_110
 2306              	.LVL161:
 2307              	.L129:
 310:armwave.c     ****                 wave_word >>= 8;
 2308              		.loc 1 310 17 is_stmt 1 view .LVU676
 311:armwave.c     **** 
 2309              		.loc 1 311 17 view .LVU677
 2310              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2311              		.loc 1 313 19 is_stmt 0 view .LVU678
 2312 0a64 FF1011E2 		ands	r1, r1, #255	@ _122, wave_word,
 2313              	.LVL162:
 2314              	@ armwave.c:311:                 wave_word >>= 8;
 311:armwave.c     **** 
 2315              		.loc 1 311 27 view .LVU679
 2316 0a68 2288A0E1 		lsr	r8, r2, #16	@ wave_word, wave_word,
 2317              	.LVL163:
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2318              		.loc 1 313 17 is_stmt 1 view .LVU680
 2319              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2320              		.loc 1 313 19 is_stmt 0 view .LVU681
 2321 0a6c 1C00000A 		beq	.L130		@,
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2322              		.loc 1 314 21 is_stmt 1 view .LVU682
 2323              	.LVL164:
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2324              		.loc 1 315 21 view .LVU683
 316:armwave.c     **** 
 2325              		.loc 1 316 21 view .LVU684
 318:armwave.c     ****                     g = MIN(gg, 255);
 2326              		.loc 1 318 21 view .LVU685
 319:armwave.c     ****                     b = MIN(bb, 255);
 2327              		.loc 1 319 21 view .LVU686
 320:armwave.c     **** 
 2328              		.loc 1 320 21 view .LVU687
 323:armwave.c     **** 
 2329              		.loc 1 323 21 view .LVU688
 326:armwave.c     ****                     yy = (nsub & 0xff);
 2330              		.loc 1 326 21 view .LVU689
 2331              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2332              		.loc 1 316 55 is_stmt 0 view .LVU690
 2333 0a70 910B00E0 		mul	r0, r1, fp	@ tmp307, _122, _84
 2334              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2335              		.loc 1 315 55 view .LVU691
 2336 0a74 91090EE0 		mul	lr, r1, r9	@ tmp311, _122, _80
 2337              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2338              		.loc 1 316 24 view .LVU692
 2339 0a78 4004A0E1 		asr	r0, r0, #8	@ bb, tmp307,
 2340              	.LVL165:
 2341              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2342              		.loc 1 320 25 view .LVU693
 2343 0a7c FF0050E3 		cmp	r0, #255	@ bb,
 2344 0a80 FF00A0A3 		movge	r0, #255	@ bb,
 2345              	.LVL166:
 2346              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2347              		.loc 1 314 55 view .LVU694
 2348 0a84 910A01E0 		mul	r1, r1, r10	@ tmp317, _122, _74
 2349              	.LVL167:
 2350              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2351              		.loc 1 315 24 view .LVU695
 2352 0a88 4EE4A0E1 		asr	lr, lr, #8	@ gg, tmp311,
 2353              	.LVL168:
 2354              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2355              		.loc 1 323 44 view .LVU696
 2356 0a8c 0008A0E1 		lsl	r0, r0, #16	@ tmp308, bb,
 2357              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2358              		.loc 1 319 25 view .LVU697
 2359 0a90 FF005EE3 		cmp	lr, #255	@ gg,
 2360 0a94 01C083E2 		add	ip, r3, #1	@ _162, n,
 327:armwave.c     ****                     xx = (nsub >> 8);
 2361              		.loc 1 327 21 is_stmt 1 view .LVU698
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2362              		.loc 1 328 21 view .LVU699
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2363              		.loc 1 329 21 view .LVU700
 330:armwave.c     ****                 }
 2364              		.loc 1 330 21 view .LVU701
 2365              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2366              		.loc 1 323 44 is_stmt 0 view .LVU702
 2367 0a98 FF0800E2 		and	r0, r0, #16711680	@ tmp309, tmp308,
 2368              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2369              		.loc 1 319 25 view .LVU703
 2370 0a9c FFE0A0A3 		movge	lr, #255	@ gg,
 2371              	.LVL169:
 2372              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2373              		.loc 1 323 44 view .LVU704
 2374 0aa0 04008DE5 		str	r0, [sp, #4]	@ tmp309, %sfp
 2375              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2376              		.loc 1 330 39 view .LVU705
 2377 0aa4 3C0096E5 		ldr	r0, [r6, #60]	@ tmp383, g_armwave_state.target_width
 2378              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2379              		.loc 1 314 24 view .LVU706
 2380 0aa8 4114A0E1 		asr	r1, r1, #8	@ rr, tmp317,
 2381              	.LVL170:
 2382              	@ armwave.c:327:                     yy = (nsub & 0xff);
 327:armwave.c     ****                     xx = (nsub >> 8);
 2383              		.loc 1 327 24 view .LVU707
 2384 0aac 7C70EFE6 		uxtb	r7, ip	@ yy, _162
 2385              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2386              		.loc 1 318 25 view .LVU708
 2387 0ab0 FF0051E3 		cmp	r1, #255	@ rr,
 2388              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2389              		.loc 1 323 56 view .LVU709
 2390 0ab4 0EE4A0E1 		lsl	lr, lr, #8	@ tmp312, gg,
 2391              	@ armwave.c:328:                     xx = (nsub >> 8);
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2392              		.loc 1 328 32 view .LVU710
 2393 0ab8 4CC4A0E1 		asr	ip, ip, #8	@ xx, _162,
 2394              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2395              		.loc 1 330 39 view .LVU711
 2396 0abc 90C72CE0 		mla	ip, r0, r7, ip	@ tmp305, tmp383, yy, xx
 2397              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2398              		.loc 1 318 25 view .LVU712
 2399 0ac0 FF10A0A3 		movge	r1, #255	@ rr,
 2400              	.LVL171:
 2401              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2402              		.loc 1 323 51 view .LVU713
 2403 0ac4 04009DE5 		ldr	r0, [sp, #4]	@ tmp309, %sfp
 2404              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2405              		.loc 1 323 56 view .LVU714
 2406 0ac8 7EE0FFE6 		uxth	lr, lr	@ tmp313, tmp312
 2407              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2408              		.loc 1 323 51 view .LVU715
 2409 0acc 0E0080E1 		orr	r0, r0, lr	@ tmp315, tmp309, tmp313
 2410              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2411              		.loc 1 323 62 view .LVU716
 2412 0ad0 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2413 0ad4 011080E1 		orr	r1, r0, r1	@ tmp319, tmp315, rr
 2414              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2415              		.loc 1 330 49 view .LVU717
 2416 0ad8 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2417              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2418              		.loc 1 323 26 view .LVU718
 2419 0adc FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp319,
 2420              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2421              		.loc 1 330 49 view .LVU719
 2422 0ae0 0C1180E7 		str	r1, [r0, ip, lsl #2]	@ word, *_156
 2423              	.LVL172:
 2424              	.L130:
 310:armwave.c     ****                 wave_word >>= 8;
 2425              		.loc 1 310 17 is_stmt 1 view .LVU720
 311:armwave.c     **** 
 2426              		.loc 1 311 17 view .LVU721
 2427              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2428              		.loc 1 313 19 is_stmt 0 view .LVU722
 2429 0ae4 FF1018E2 		ands	r1, r8, #255	@ _168, wave_word,
 2430              	@ armwave.c:311:                 wave_word >>= 8;
 311:armwave.c     **** 
 2431              		.loc 1 311 27 view .LVU723
 2432 0ae8 222CA0E1 		lsr	r2, r2, #24	@ wave_word, wave_word,
 2433              	.LVL173:
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2434              		.loc 1 313 17 is_stmt 1 view .LVU724
 2435              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2436              		.loc 1 313 19 is_stmt 0 view .LVU725
 2437 0aec 1A00000A 		beq	.L131		@,
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2438              		.loc 1 314 21 is_stmt 1 view .LVU726
 2439              	.LVL174:
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2440              		.loc 1 315 21 view .LVU727
 316:armwave.c     **** 
 2441              		.loc 1 316 21 view .LVU728
 318:armwave.c     ****                     g = MIN(gg, 255);
 2442              		.loc 1 318 21 view .LVU729
 319:armwave.c     ****                     b = MIN(bb, 255);
 2443              		.loc 1 319 21 view .LVU730
 320:armwave.c     **** 
 2444              		.loc 1 320 21 view .LVU731
 323:armwave.c     **** 
 2445              		.loc 1 323 21 view .LVU732
 326:armwave.c     ****                     yy = (nsub & 0xff);
 2446              		.loc 1 326 21 view .LVU733
 2447              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2448              		.loc 1 316 55 is_stmt 0 view .LVU734
 2449 0af0 910B00E0 		mul	r0, r1, fp	@ tmp330, _168, _84
 2450              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2451              		.loc 1 315 55 view .LVU735
 2452 0af4 91090CE0 		mul	ip, r1, r9	@ tmp334, _168, _80
 2453              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2454              		.loc 1 316 24 view .LVU736
 2455 0af8 4004A0E1 		asr	r0, r0, #8	@ bb, tmp330,
 2456              	.LVL175:
 2457              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2458              		.loc 1 314 55 view .LVU737
 2459 0afc 910A01E0 		mul	r1, r1, r10	@ tmp340, _168, _74
 2460              	.LVL176:
 2461              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2462              		.loc 1 320 25 view .LVU738
 2463 0b00 FF0050E3 		cmp	r0, #255	@ bb,
 2464              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2465              		.loc 1 315 24 view .LVU739
 2466 0b04 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp334,
 2467              	.LVL177:
 2468              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2469              		.loc 1 320 25 view .LVU740
 2470 0b08 FF00A0A3 		movge	r0, #255	@ bb,
 2471              	.LVL178:
 2472              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2473              		.loc 1 319 25 view .LVU741
 2474 0b0c FF005CE3 		cmp	ip, #255	@ gg,
 2475 0b10 FFC0A0A3 		movge	ip, #255	@ gg,
 2476              	.LVL179:
 319:armwave.c     ****                     b = MIN(bb, 255);
 2477              		.loc 1 319 25 view .LVU742
 2478 0b14 02E083E2 		add	lr, r3, #2	@ _70, n,
 327:armwave.c     ****                     xx = (nsub >> 8);
 2479              		.loc 1 327 21 is_stmt 1 view .LVU743
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2480              		.loc 1 328 21 view .LVU744
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2481              		.loc 1 329 21 view .LVU745
 330:armwave.c     ****                 }
 2482              		.loc 1 330 21 view .LVU746
 2483              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2484              		.loc 1 314 24 is_stmt 0 view .LVU747
 2485 0b18 4114A0E1 		asr	r1, r1, #8	@ rr, tmp340,
 2486              	.LVL180:
 2487              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2488              		.loc 1 330 39 view .LVU748
 2489 0b1c 3C7096E5 		ldr	r7, [r6, #60]	@ tmp384, g_armwave_state.target_width
 2490              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2491              		.loc 1 318 25 view .LVU749
 2492 0b20 FF0051E3 		cmp	r1, #255	@ rr,
 2493              	@ armwave.c:327:                     yy = (nsub & 0xff);
 327:armwave.c     ****                     xx = (nsub >> 8);
 2494              		.loc 1 327 24 view .LVU750
 2495 0b24 7E80EFE6 		uxtb	r8, lr	@ yy, _70
 2496              	.LVL181:
 2497              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2498              		.loc 1 323 56 view .LVU751
 2499 0b28 0CC4A0E1 		lsl	ip, ip, #8	@ tmp335, gg,
 2500              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2501              		.loc 1 323 44 view .LVU752
 2502 0b2c 0008A0E1 		lsl	r0, r0, #16	@ tmp331, bb,
 2503              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2504              		.loc 1 318 25 view .LVU753
 2505 0b30 FF10A0A3 		movge	r1, #255	@ rr,
 2506              	.LVL182:
 2507              	@ armwave.c:328:                     xx = (nsub >> 8);
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2508              		.loc 1 328 32 view .LVU754
 2509 0b34 4EE4A0E1 		asr	lr, lr, #8	@ xx, _70,
 2510              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2511              		.loc 1 323 44 view .LVU755
 2512 0b38 FF0800E2 		and	r0, r0, #16711680	@ tmp332, tmp331,
 2513              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2514              		.loc 1 323 56 view .LVU756
 2515 0b3c 7CC0FFE6 		uxth	ip, ip	@ tmp336, tmp335
 2516              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2517              		.loc 1 330 39 view .LVU757
 2518 0b40 97E82EE0 		mla	lr, r7, r8, lr	@ tmp328, tmp384, yy, xx
 2519              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2520              		.loc 1 323 51 view .LVU758
 2521 0b44 0CC080E1 		orr	ip, r0, ip	@ tmp338, tmp332, tmp336
 2522              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2523              		.loc 1 323 62 view .LVU759
 2524 0b48 7110EFE6 		uxtb	r1, r1	@ rr, rr
 2525              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2526              		.loc 1 330 49 view .LVU760
 2527 0b4c 00009DE5 		ldr	r0, [sp]	@ out_buffer, %sfp
 2528              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2529              		.loc 1 323 62 view .LVU761
 2530 0b50 01108CE1 		orr	r1, ip, r1	@ tmp342, tmp338, rr
 2531              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2532              		.loc 1 323 26 view .LVU762
 2533 0b54 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp342,
 2534              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2535              		.loc 1 330 49 view .LVU763
 2536 0b58 0E1180E7 		str	r1, [r0, lr, lsl #2]	@ word, *_202
 2537              	.L131:
 2538              	.LVL183:
 310:armwave.c     ****                 wave_word >>= 8;
 2539              		.loc 1 310 17 is_stmt 1 view .LVU764
 311:armwave.c     **** 
 2540              		.loc 1 311 17 view .LVU765
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2541              		.loc 1 313 17 view .LVU766
 2542              	@ armwave.c:313:                 if(value != 0) {
 313:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 2543              		.loc 1 313 19 is_stmt 0 view .LVU767
 2544 0b5c 000052E3 		cmp	r2, #0	@ wave_word,
 2545 0b60 9DFFFF0A 		beq	.L128		@,
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2546              		.loc 1 314 21 is_stmt 1 view .LVU768
 2547              	.LVL184:
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2548              		.loc 1 315 21 view .LVU769
 316:armwave.c     **** 
 2549              		.loc 1 316 21 view .LVU770
 318:armwave.c     ****                     g = MIN(gg, 255);
 2550              		.loc 1 318 21 view .LVU771
 319:armwave.c     ****                     b = MIN(bb, 255);
 2551              		.loc 1 319 21 view .LVU772
 320:armwave.c     **** 
 2552              		.loc 1 320 21 view .LVU773
 323:armwave.c     **** 
 2553              		.loc 1 323 21 view .LVU774
 326:armwave.c     ****                     yy = (nsub & 0xff);
 2554              		.loc 1 326 21 view .LVU775
 2555              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2556              		.loc 1 316 55 is_stmt 0 view .LVU776
 2557 0b64 920B01E0 		mul	r1, r2, fp	@ tmp351, wave_word, _84
 2558              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2559              		.loc 1 315 55 view .LVU777
 2560 0b68 920900E0 		mul	r0, r2, r9	@ tmp355, wave_word, _80
 2561              	@ armwave.c:316:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 316:armwave.c     **** 
 2562              		.loc 1 316 24 view .LVU778
 2563 0b6c 4114A0E1 		asr	r1, r1, #8	@ bb, tmp351,
 2564              	.LVL185:
 2565              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2566              		.loc 1 314 55 view .LVU779
 2567 0b70 920A02E0 		mul	r2, r2, r10	@ tmp361, wave_word, _74
 2568              	.LVL186:
 2569              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2570              		.loc 1 320 25 view .LVU780
 2571 0b74 FF0051E3 		cmp	r1, #255	@ bb,
 2572              	@ armwave.c:315:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 315:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 2573              		.loc 1 315 24 view .LVU781
 2574 0b78 4004A0E1 		asr	r0, r0, #8	@ gg, tmp355,
 2575              	.LVL187:
 2576              	@ armwave.c:320:                     b = MIN(bb, 255);
 320:armwave.c     **** 
 2577              		.loc 1 320 25 view .LVU782
 2578 0b7c FF10A0A3 		movge	r1, #255	@ bb,
 2579              	.LVL188:
 2580              	@ armwave.c:319:                     g = MIN(gg, 255);
 319:armwave.c     ****                     b = MIN(bb, 255);
 2581              		.loc 1 319 25 view .LVU783
 2582 0b80 FF0050E3 		cmp	r0, #255	@ gg,
 2583 0b84 FF00A0A3 		movge	r0, #255	@ gg,
 2584              	.LVL189:
 2585              	@ armwave.c:314:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2586              		.loc 1 314 24 view .LVU784
 2587 0b88 4224A0E1 		asr	r2, r2, #8	@ rr, tmp361,
 2588              	.LVL190:
 314:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 2589              		.loc 1 314 24 view .LVU785
 2590 0b8c 03C083E2 		add	ip, r3, #3	@ _63, n,
 327:armwave.c     ****                     xx = (nsub >> 8);
 2591              		.loc 1 327 21 is_stmt 1 view .LVU786
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2592              		.loc 1 328 21 view .LVU787
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2593              		.loc 1 329 21 view .LVU788
 330:armwave.c     ****                 }
 2594              		.loc 1 330 21 view .LVU789
 2595              	@ armwave.c:329:                     offset = (xx + (yy * g_armwave_state.target_width)); 
 329:armwave.c     ****                     *(out_buffer_base + offset) = word;
 2596              		.loc 1 329 40 is_stmt 0 view .LVU790
 2597 0b90 3CE096E5 		ldr	lr, [r6, #60]	@ g_armwave_state.target_width, g_armwave_state.target_width
 2598              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2599              		.loc 1 318 25 view .LVU791
 2600 0b94 FF0052E3 		cmp	r2, #255	@ rr,
 2601              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2602              		.loc 1 323 56 view .LVU792
 2603 0b98 0004A0E1 		lsl	r0, r0, #8	@ tmp356, gg,
 2604              	@ armwave.c:327:                     yy = (nsub & 0xff);
 327:armwave.c     ****                     xx = (nsub >> 8);
 2605              		.loc 1 327 24 view .LVU793
 2606 0b9c 7C80EFE6 		uxtb	r8, ip	@ yy, _63
 2607              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2608              		.loc 1 323 44 view .LVU794
 2609 0ba0 0118A0E1 		lsl	r1, r1, #16	@ tmp352, bb,
 2610              	@ armwave.c:318:                     r = MIN(rr, 255);
 318:armwave.c     ****                     g = MIN(gg, 255);
 2611              		.loc 1 318 25 view .LVU795
 2612 0ba4 FF20A0A3 		movge	r2, #255	@ rr,
 2613              	.LVL191:
 2614              	@ armwave.c:328:                     xx = (nsub >> 8);
 328:armwave.c     ****                     offset = (xx + (yy * g_armwave_state.target_width)); 
 2615              		.loc 1 328 32 view .LVU796
 2616 0ba8 4CC4A0E1 		asr	ip, ip, #8	@ xx, _63,
 2617              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2618              		.loc 1 323 44 view .LVU797
 2619 0bac FF1801E2 		and	r1, r1, #16711680	@ tmp353, tmp352,
 2620              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2621              		.loc 1 323 56 view .LVU798
 2622 0bb0 7000FFE6 		uxth	r0, r0	@ tmp357, tmp356
 2623              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2624              		.loc 1 323 51 view .LVU799
 2625 0bb4 001081E1 		orr	r1, r1, r0	@ tmp359, tmp353, tmp357
 2626              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2627              		.loc 1 330 39 view .LVU800
 2628 0bb8 9EC82CE0 		mla	ip, lr, r8, ip	@ tmp349, g_armwave_state.target_width, yy, xx
 2629              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2630              		.loc 1 323 62 view .LVU801
 2631 0bbc 7220EFE6 		uxtb	r2, r2	@ rr, rr
 2632 0bc0 022081E1 		orr	r2, r1, r2	@ tmp363, tmp359, rr
 2633              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2634              		.loc 1 330 49 view .LVU802
 2635 0bc4 00109DE5 		ldr	r1, [sp]	@ out_buffer, %sfp
 2636              	@ armwave.c:323:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 323:armwave.c     **** 
 2637              		.loc 1 323 26 view .LVU803
 2638 0bc8 FF2482E3 		orr	r2, r2, #-16777216	@ word, tmp363,
 2639              	@ armwave.c:330:                     *(out_buffer_base + offset) = word;
 330:armwave.c     ****                 }
 2640              		.loc 1 330 49 view .LVU804
 2641 0bcc 0C2181E7 		str	r2, [r1, ip, lsl #2]	@ word, *_248
 2642 0bd0 81FFFFEA 		b	.L128		@
 2643              	.LVL192:
 2644              	.L149:
 278:armwave.c     **** 
 2645              		.loc 1 278 5 is_stmt 1 discriminator 1 view .LVU805
 2646 0bd4 14309FE5 		ldr	r3, .L151+8	@,
 2647 0bd8 14209FE5 		ldr	r2, .L151+12	@,
 2648 0bdc 14109FE5 		ldr	r1, .L151+16	@,
 2649 0be0 14009FE5 		ldr	r0, .L151+20	@,
 2650              	.LVL193:
 278:armwave.c     **** 
 2651              		.loc 1 278 5 is_stmt 0 discriminator 1 view .LVU806
 2652 0be4 FEFFFFEB 		bl	__assert_fail		@
 2653              	.LVL194:
 2654              	.L152:
 2655              		.align	2
 2656              	.L151:
 2657 0be8 00000000 		.word	g_armwave_state
 2658 0bec 10010000 		.word	.LC8
 2659 0bf0 30000000 		.word	.LANCHOR0+48
 2660 0bf4 16010000 		.word	278
 2661 0bf8 00000000 		.word	.LC0
 2662 0bfc FC000000 		.word	.LC7
 2663              		.cfi_endproc
 2664              	.LFE64:
 2666              		.align	2
 2667              		.global	armwave_dump_ppm_debug
 2668              		.syntax unified
 2669              		.arm
 2670              		.fpu vfp
 2672              	armwave_dump_ppm_debug:
 2673              	.LVL195:
 2674              	.LFB65:
 340:armwave.c     **** 
 341:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 342:armwave.c     **** {
 2675              		.loc 1 342 1 is_stmt 1 view -0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 0
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 343:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2679              		.loc 1 343 5 view .LVU808
 2680              	@ armwave.c:342: {
 342:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 2681              		.loc 1 342 1 is_stmt 0 view .LVU809
 2682 0c00 0130A0E1 		mov	r3, r1	@ fn, fn
 2683 0c04 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 2684              		.cfi_def_cfa_offset 28
 2685              		.cfi_offset 4, -28
 2686              		.cfi_offset 5, -24
 2687              		.cfi_offset 6, -20
 2688              		.cfi_offset 7, -16
 2689              		.cfi_offset 8, -12
 2690              		.cfi_offset 9, -8
 2691              		.cfi_offset 14, -4
 2692 0c08 0080A0E1 		mov	r8, r0	@ buffer, buffer
 2693 0c0c 0CD04DE2 		sub	sp, sp, #12	@,,
 2694              		.cfi_def_cfa_offset 40
 2695              	@ armwave.c:343:     FILE *fp = fopen(fn, "wb");
 2696              		.loc 1 343 16 view .LVU810
 2697 0c10 D8109FE5 		ldr	r1, .L165	@,
 2698              	.LVL196:
 2699              		.loc 1 343 16 view .LVU811
 2700 0c14 0300A0E1 		mov	r0, r3	@, fn
 2701              	.LVL197:
 2702              		.loc 1 343 16 view .LVU812
 2703 0c18 FEFFFFEB 		bl	fopen64		@
 2704              	.LVL198:
 2705              	@ armwave.c:350:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 344:armwave.c     ****     uint32_t data;
 345:armwave.c     ****     int xx, yy;
 346:armwave.c     **** 
 347:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 348:armwave.c     **** 
 349:armwave.c     ****     fputs("P3\n", fp);
 350:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2706              		.loc 1 350 5 view .LVU813
 2707 0c1c D0609FE5 		ldr	r6, .L165+4	@ tmp154,
 2708              	@ armwave.c:349:     fputs("P3\n", fp);
 349:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2709              		.loc 1 349 5 view .LVU814
 2710 0c20 0320A0E3 		mov	r2, #3	@,
 2711 0c24 0110A0E3 		mov	r1, #1	@,
 2712              	@ armwave.c:343:     FILE *fp = fopen(fn, "wb");
 343:armwave.c     ****     uint32_t data;
 2713              		.loc 1 343 16 view .LVU815
 2714 0c28 0070A0E1 		mov	r7, r0	@ fp,
 2715              	.LVL199:
 344:armwave.c     ****     uint32_t data;
 2716              		.loc 1 344 5 is_stmt 1 view .LVU816
 345:armwave.c     **** 
 2717              		.loc 1 345 5 view .LVU817
 349:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2718              		.loc 1 349 5 view .LVU818
 2719 0c2c 0030A0E1 		mov	r3, r0	@, fp
 2720 0c30 C0009FE5 		ldr	r0, .L165+8	@,
 2721              	.LVL200:
 349:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 2722              		.loc 1 349 5 is_stmt 0 view .LVU819
 2723 0c34 FEFFFFEB 		bl	fwrite		@
 2724              	.LVL201:
 2725              		.loc 1 350 5 is_stmt 1 view .LVU820
 2726 0c38 3C3096E5 		ldr	r3, [r6, #60]	@, g_armwave_state.target_width
 2727 0c3c 402096E5 		ldr	r2, [r6, #64]	@, g_armwave_state.target_height
 2728 0c40 B4109FE5 		ldr	r1, .L165+12	@,
 2729 0c44 0700A0E1 		mov	r0, r7	@, fp
 2730 0c48 FEFFFFEB 		bl	fprintf		@
 2731              	.LVL202:
 351:armwave.c     ****     fputs("255\n", fp);
 2732              		.loc 1 351 5 view .LVU821
 2733 0c4c 0420A0E3 		mov	r2, #4	@,
 2734 0c50 0730A0E1 		mov	r3, r7	@, fp
 2735 0c54 0110A0E3 		mov	r1, #1	@,
 2736 0c58 A0009FE5 		ldr	r0, .L165+16	@,
 2737 0c5c FEFFFFEB 		bl	fwrite		@
 2738              	.LVL203:
 352:armwave.c     **** 
 353:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2739              		.loc 1 353 5 view .LVU822
 2740              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2741              		.loc 1 353 37 is_stmt 0 view .LVU823
 2742 0c60 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2743              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2744              		.loc 1 353 5 view .LVU824
 2745 0c64 000052E3 		cmp	r2, #0	@ prephitmp_57,
 2746 0c68 1800000A 		beq	.L154		@,
 2747 0c6c 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2748              	@ armwave.c:358:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 355:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 356:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 357:armwave.c     **** 
 358:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2749              		.loc 1 358 13 view .LVU825
 2750 0c70 8C909FE5 		ldr	r9, .L165+20	@ tmp156,
 2751              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2752              		.loc 1 353 12 view .LVU826
 2753 0c74 0050A0E3 		mov	r5, #0	@ yy,
 2754              	.LVL204:
 2755              	.L155:
 2756              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2757              		.loc 1 354 9 view .LVU827
 2758 0c78 000053E3 		cmp	r3, #0	@ _12,
 2759              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2760              		.loc 1 354 16 view .LVU828
 2761 0c7c 0040A013 		movne	r4, #0	@ xx,
 2762              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2763              		.loc 1 354 9 view .LVU829
 2764 0c80 1600000A 		beq	.L164		@,
 2765              	.LVL205:
 2766              	.L156:
 355:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2767              		.loc 1 355 13 is_stmt 1 discriminator 3 view .LVU830
 2768              	@ armwave.c:355:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 355:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2769              		.loc 1 355 29 is_stmt 0 discriminator 3 view .LVU831
 2770 0c84 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 2771              	@ armwave.c:358:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2772              		.loc 1 358 13 discriminator 3 view .LVU832
 2773 0c88 0910A0E1 		mov	r1, r9	@, tmp156
 2774 0c8c 0700A0E1 		mov	r0, r7	@, fp
 2775              	@ armwave.c:355:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 355:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2776              		.loc 1 355 18 discriminator 3 view .LVU833
 2777 0c90 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 2778              	.LVL206:
 2779              		.loc 1 358 13 is_stmt 1 discriminator 3 view .LVU834
 2780              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2781              		.loc 1 354 58 is_stmt 0 discriminator 3 view .LVU835
 2782 0c94 014084E2 		add	r4, r4, #1	@ xx, xx,
 2783              	.LVL207:
 2784              	@ armwave.c:358:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2785              		.loc 1 358 81 discriminator 3 view .LVU836
 2786 0c98 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 2787              	@ armwave.c:358:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2788              		.loc 1 358 61 discriminator 3 view .LVU837
 2789 0c9c 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 2790              	@ armwave.c:358:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2791              		.loc 1 358 13 discriminator 3 view .LVU838
 2792 0ca0 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 2793 0ca4 7330EFE6 		uxtb	r3, r3	@, tmp146
 2794 0ca8 00C08DE5 		str	ip, [sp]	@ tmp151,
 2795 0cac 7220EFE6 		uxtb	r2, r2	@, data
 2796              	.LVL208:
 2797              		.loc 1 358 13 discriminator 3 view .LVU839
 2798 0cb0 FEFFFFEB 		bl	fprintf		@
 2799              	.LVL209:
 2800              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2801              		.loc 1 354 41 discriminator 3 view .LVU840
 2802 0cb4 3C3096E5 		ldr	r3, [r6, #60]	@ _12, g_armwave_state.target_width
 2803              	@ armwave.c:354:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 354:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2804              		.loc 1 354 9 discriminator 3 view .LVU841
 2805 0cb8 040053E1 		cmp	r3, r4	@ _12, xx
 2806 0cbc F0FFFF8A 		bhi	.L156		@,
 2807 0cc0 402096E5 		ldr	r2, [r6, #64]	@ prephitmp_57, g_armwave_state.target_height
 2808              	.LVL210:
 2809              	.L157:
 2810              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2811              		.loc 1 353 55 discriminator 2 view .LVU842
 2812 0cc4 015085E2 		add	r5, r5, #1	@ yy, yy,
 2813              	.LVL211:
 2814              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2815              		.loc 1 353 5 discriminator 2 view .LVU843
 2816 0cc8 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 2817 0ccc E9FFFF3A 		bcc	.L155		@,
 2818              	.LVL212:
 2819              	.L154:
 359:armwave.c     ****         }
 360:armwave.c     ****     }
 361:armwave.c     **** 
 362:armwave.c     ****     fclose(fp);
 2820              		.loc 1 362 5 is_stmt 1 view .LVU844
 2821 0cd0 0700A0E1 		mov	r0, r7	@, fp
 2822              	@ armwave.c:363: }
 363:armwave.c     **** }
 2823              		.loc 1 363 1 is_stmt 0 view .LVU845
 2824 0cd4 0CD08DE2 		add	sp, sp, #12	@,,
 2825              		.cfi_remember_state
 2826              		.cfi_def_cfa_offset 28
 2827              		@ sp needed	@
 2828 0cd8 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2829              		.cfi_restore 14
 2830              		.cfi_restore 9
 2831              		.cfi_restore 8
 2832              		.cfi_restore 7
 2833              		.cfi_restore 6
 2834              		.cfi_restore 5
 2835              		.cfi_restore 4
 2836              		.cfi_def_cfa_offset 0
 2837              	.LVL213:
 2838              	@ armwave.c:362:     fclose(fp);
 362:armwave.c     **** }
 2839              		.loc 1 362 5 view .LVU846
 2840 0cdc FEFFFFEA 		b	fclose		@
 2841              	.LVL214:
 2842              	.L164:
 2843              		.cfi_restore_state
 2844              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2845              		.loc 1 353 55 view .LVU847
 2846 0ce0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2847              	.LVL215:
 2848              	@ armwave.c:353:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 353:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2849              		.loc 1 353 5 view .LVU848
 2850 0ce4 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 2851 0ce8 F5FFFF8A 		bhi	.L157		@,
 2852 0cec F7FFFFEA 		b	.L154		@
 2853              	.L166:
 2854              		.align	2
 2855              	.L165:
 2856 0cf0 24010000 		.word	.LC9
 2857 0cf4 00000000 		.word	g_armwave_state
 2858 0cf8 28010000 		.word	.LC10
 2859 0cfc 2C010000 		.word	.LC11
 2860 0d00 34010000 		.word	.LC12
 2861 0d04 3C010000 		.word	.LC13
 2862              		.cfi_endproc
 2863              	.LFE65:
 2865              		.align	2
 2866              		.global	armwave_test_init
 2867              		.syntax unified
 2868              		.arm
 2869              		.fpu vfp
 2871              	armwave_test_init:
 2872              	.LVL216:
 2873              	.LFB66:
 364:armwave.c     **** 
 365:armwave.c     **** void armwave_test_init(float mod, int render_width, int render_height)
 366:armwave.c     **** {
 2874              		.loc 1 366 1 is_stmt 1 view -0
 2875              		.cfi_startproc
 2876              		@ args = 0, pretend = 0, frame = 0
 2877              		@ frame_needed = 0, uses_anonymous_args = 0
 367:armwave.c     ****     mod_depth = mod;
 2878              		.loc 1 367 5 view .LVU850
 2879              	@ armwave.c:367:     mod_depth = mod;
 2880              		.loc 1 367 15 is_stmt 0 view .LVU851
 2881 0d08 9C309FE5 		ldr	r3, .L171+20	@ tmp128,
 2882              	@ armwave.c:366: {
 366:armwave.c     ****     mod_depth = mod;
 2883              		.loc 1 366 1 view .LVU852
 2884 0d0c F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 2885              		.cfi_def_cfa_offset 24
 2886              		.cfi_offset 4, -24
 2887              		.cfi_offset 5, -20
 2888              		.cfi_offset 6, -16
 2889              		.cfi_offset 7, -12
 2890              		.cfi_offset 8, -8
 2891              		.cfi_offset 14, -4
 2892 0d10 068B2DED 		vpush.64	{d8, d9, d10}	@
 2893              		.cfi_def_cfa_offset 48
 2894              		.cfi_offset 80, -48
 2895              		.cfi_offset 81, -44
 2896              		.cfi_offset 82, -40
 2897              		.cfi_offset 83, -36
 2898              		.cfi_offset 84, -32
 2899              		.cfi_offset 85, -28
 2900 0d14 94409FE5 		ldr	r4, .L171+24	@ ivtmp.109,
 2901              	.LBB6:
 2902              	.LBB7:
 2903              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2904              		.loc 1 87 32 view .LVU853
 2905 0d18 22AA9FED 		vldr.32	s20, .L171+16	@ tmp134,
 2906              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2907              		.loc 1 87 26 view .LVU854
 2908 0d1c 1D9B9FED 		vldr.64	d9, .L171	@ tmp143,
 2909              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2910              		.loc 1 87 49 view .LVU855
 2911 0d20 1E8B9FED 		vldr.64	d8, .L171+8	@ tmp137,
 2912              	.LBE7:
 2913              	.LBE6:
 2914              	@ armwave.c:367:     mod_depth = mod;
 2915              		.loc 1 367 15 view .LVU856
 2916 0d24 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 368:armwave.c     **** 
 369:armwave.c     ****     test_create_waveform();
 2917              		.loc 1 369 5 is_stmt 1 view .LVU857
 2918              	@ armwave.c:366: {
 366:armwave.c     ****     mod_depth = mod;
 2919              		.loc 1 366 1 is_stmt 0 view .LVU858
 2920 0d28 0060A0E1 		mov	r6, r0	@ render_width, render_width
 2921 0d2c 0170A0E1 		mov	r7, r1	@ render_height, render_height
 2922              	@ armwave.c:369:     test_create_waveform();
 2923              		.loc 1 369 5 view .LVU859
 2924 0d30 FEFFFFEB 		bl	test_create_waveform		@
 2925              	.LVL217:
 370:armwave.c     ****     test_create_gamma();
 2926              		.loc 1 370 5 is_stmt 1 view .LVU860
 2927              	.LBB9:
 2928              	.LBI6:
  81:armwave.c     **** {
 2929              		.loc 1 81 6 view .LVU861
  81:armwave.c     **** {
 2930              		.loc 1 81 6 is_stmt 0 view .LVU862
 2931 0d34 013084E2 		add	r3, r4, #1	@ _34, ivtmp.109,
 2932 0d38 018C84E2 		add	r8, r4, #256	@ _35, ivtmp.109,
 2933 0d3c 015063E2 		rsb	r5, r3, #1	@ tmp142, _34,
 2934              	.LVL218:
 2935              	.L168:
 2936              	.LBB8:
  87:armwave.c     ****     }
 2937              		.loc 1 87 9 is_stmt 1 view .LVU863
 2938              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2939              		.loc 1 87 32 is_stmt 0 view .LVU864
 2940 0d40 043085E0 		add	r3, r5, r4	@ tmp131, tmp142, ivtmp.109
 2941              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2942              		.loc 1 87 26 view .LVU865
 2943 0d44 491BB0EE 		vmov.f64	d1, d9	@, tmp143
 2944              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2945              		.loc 1 87 32 view .LVU866
 2946 0d48 903A07EE 		vmov	s15, r3	@ int	@ tmp131, tmp131
 2947 0d4c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp132, tmp131
 2948 0d50 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp133, tmp132, tmp134
 2949              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2950              		.loc 1 87 26 view .LVU867
 2951 0d54 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp133
 2952 0d58 FEFFFFEB 		bl	pow		@
 2953              	.LVL219:
 2954              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2955              		.loc 1 87 49 view .LVU868
 2956 0d5c 080B20EE 		vmul.f64	d0, d0, d8	@ tmp136,, tmp137
 2957              	@ armwave.c:87:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  87:armwave.c     ****     }
 2958              		.loc 1 87 24 view .LVU869
 2959 0d60 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp138, tmp136
 2960 0d64 903A17EE 		vmov	r3, s15	@ int	@ tmp138, tmp138
 2961 0d68 0130E4E5 		strb	r3, [r4, #1]!	@ tmp138, MEM[base: _33, offset: 0B]
 2962              	.LVL220:
 2963              	@ armwave.c:86:     for(i = 0; i < 256; i++) {
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2964              		.loc 1 86 5 view .LVU870
 2965 0d6c 080054E1 		cmp	r4, r8	@ ivtmp.109, _35
 2966 0d70 F2FFFF1A 		bne	.L168		@,
 2967              	.LVL221:
  86:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2968              		.loc 1 86 5 view .LVU871
 2969              	.LBE8:
 2970              	.LBE9:
 371:armwave.c     **** 
 372:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, render_
 2971              		.loc 1 372 5 is_stmt 1 view .LVU872
 2972 0d74 0710A0E1 		mov	r1, r7	@, render_height
 2973 0d78 0600A0E1 		mov	r0, r6	@, render_width
 2974 0d7c 9FFCFFEB 		bl	armwave_setup_render.constprop.0		@
 2975              	.LVL222:
 373:armwave.c     **** 
 374:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2976              		.loc 1 374 5 view .LVU873
 2977              	@ armwave.c:375: }
 375:armwave.c     **** }
 2978              		.loc 1 375 1 is_stmt 0 view .LVU874
 2979 0d80 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2980              		.cfi_restore 84
 2981              		.cfi_restore 85
 2982              		.cfi_restore 82
 2983              		.cfi_restore 83
 2984              		.cfi_restore 80
 2985              		.cfi_restore 81
 2986              		.cfi_def_cfa_offset 24
 2987              	@ armwave.c:374:     printf("armwave version: %s\n", ARMWAVE_VER);
 374:armwave.c     **** }
 2988              		.loc 1 374 5 view .LVU875
 2989 0d84 28109FE5 		ldr	r1, .L171+28	@,
 2990 0d88 28009FE5 		ldr	r0, .L171+32	@,
 2991              	@ armwave.c:375: }
 2992              		.loc 1 375 1 view .LVU876
 2993 0d8c F041BDE8 		pop	{r4, r5, r6, r7, r8, lr}	@
 2994              		.cfi_restore 14
 2995              		.cfi_restore 8
 2996              		.cfi_restore 7
 2997              		.cfi_restore 6
 2998              		.cfi_restore 5
 2999              		.cfi_restore 4
 3000              		.cfi_def_cfa_offset 0
 3001              	.LVL223:
 3002              	@ armwave.c:374:     printf("armwave version: %s\n", ARMWAVE_VER);
 374:armwave.c     **** }
 3003              		.loc 1 374 5 view .LVU877
 3004 0d90 FEFFFFEA 		b	printf		@
 3005              	.LVL224:
 3006              	.L172:
 3007 0d94 0000A0E1 		.align	3
 3008              	.L171:
 3009 0d98 000000C0 		.word	-1073741824
 3010 0d9c CCCCEC3F 		.word	1072483532
 3011 0da0 00000000 		.word	0
 3012 0da4 00E06F40 		.word	1081073664
 3013 0da8 00007F43 		.word	1132396544
 3014 0dac 00000000 		.word	.LANCHOR1
 3015 0db0 FFFFFFFF 		.word	gamma_table-1
 3016 0db4 4C010000 		.word	.LC14
 3017 0db8 54010000 		.word	.LC15
 3018              		.cfi_endproc
 3019              	.LFE66:
 3021              		.global	__aeabi_uidiv
 3022              		.align	2
 3023              		.global	armwave_test_generate
 3024              		.syntax unified
 3025              		.arm
 3026              		.fpu vfp
 3028              	armwave_test_generate:
 3029              	.LFB67:
 376:armwave.c     **** 
 377:armwave.c     **** void armwave_test_generate()
 378:armwave.c     **** {
 3030              		.loc 1 378 1 is_stmt 1 view -0
 3031              		.cfi_startproc
 3032              		@ args = 0, pretend = 0, frame = 0
 3033              		@ frame_needed = 0, uses_anonymous_args = 0
 379:armwave.c     ****     uint32_t yy;
 3034              		.loc 1 379 5 view .LVU879
 380:armwave.c     **** 
 381:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3035              		.loc 1 381 5 view .LVU880
 3036              	@ armwave.c:378: {
 378:armwave.c     ****     uint32_t yy;
 3037              		.loc 1 378 1 is_stmt 0 view .LVU881
 3038 0dbc 70402DE9 		push	{r4, r5, r6, lr}	@
 3039              		.cfi_def_cfa_offset 16
 3040              		.cfi_offset 4, -16
 3041              		.cfi_offset 5, -12
 3042              		.cfi_offset 6, -8
 3043              		.cfi_offset 14, -4
 3044              	@ armwave.c:381:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 3045              		.loc 1 381 5 view .LVU882
 3046 0dc0 0010A0E3 		mov	r1, #0	@,
 3047 0dc4 44609FE5 		ldr	r6, .L178	@ tmp133,
 3048 0dc8 342096E5 		ldr	r2, [r6, #52]	@, g_armwave_state.ch_buff_size
 3049 0dcc 040096E5 		ldr	r0, [r6, #4]	@, g_armwave_state.ch1_buffer
 3050 0dd0 FEFFFFEB 		bl	memset		@
 3051              	.LVL225:
 382:armwave.c     **** 
 383:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3052              		.loc 1 383 5 is_stmt 1 view .LVU883
 3053              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3054              		.loc 1 383 45 is_stmt 0 view .LVU884
 3055 0dd4 2C5096E5 		ldr	r5, [r6, #44]	@ _5, g_armwave_state.slice_height
 3056              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3057              		.loc 1 383 5 view .LVU885
 3058 0dd8 020B55E3 		cmp	r5, #2048	@ _5,
 3059 0ddc 7080BD88 		pophi	{r4, r5, r6, pc}	@
 3060              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3061              		.loc 1 383 12 view .LVU886
 3062 0de0 0040A0E3 		mov	r4, #0	@ yy,
 3063              	.LVL226:
 3064              	.L175:
 384:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3065              		.loc 1 384 9 is_stmt 1 discriminator 3 view .LVU887
 3066 0de4 940500E0 		mul	r0, r4, r5	@, yy, _5
 3067 0de8 301096E5 		ldr	r1, [r6, #48]	@, g_armwave_state.slice_record_height
 3068 0dec FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 3069              	.LVL227:
 3070              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 383:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3071              		.loc 1 383 45 is_stmt 0 discriminator 3 view .LVU888
 3072 0df0 2C5096E5 		ldr	r5, [r6, #44]	@ _5, g_armwave_state.slice_height
 3073              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 383:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3074              		.loc 1 383 28 discriminator 3 view .LVU889
 3075 0df4 020BA0E3 		mov	r0, #2048	@,
 3076 0df8 0510A0E1 		mov	r1, r5	@, _5
 3077 0dfc FEFFFFEB 		bl	__aeabi_uidiv		@
 3078              	.LVL228:
 3079              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 383:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3080              		.loc 1 383 63 discriminator 3 view .LVU890
 3081 0e00 014084E2 		add	r4, r4, #1	@ yy, yy,
 3082              	.LVL229:
 3083              	@ armwave.c:383:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 383:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 3084              		.loc 1 383 5 discriminator 3 view .LVU891
 3085 0e04 040050E1 		cmp	r0, r4	@, yy
 3086 0e08 F5FFFF8A 		bhi	.L175		@,
 3087 0e0c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 3088              	.L179:
 3089              		.align	2
 3090              	.L178:
 3091 0e10 00000000 		.word	g_armwave_state
 3092              		.cfi_endproc
 3093              	.LFE67:
 3095              		.align	2
 3096              		.global	armwave_test_get_buffer
 3097              		.syntax unified
 3098              		.arm
 3099              		.fpu vfp
 3101              	armwave_test_get_buffer:
 3102              	.LFB68:
 385:armwave.c     ****     }
 386:armwave.c     **** }
 387:armwave.c     **** 
 388:armwave.c     **** PyObject *armwave_test_get_buffer()
 389:armwave.c     **** {
 3103              		.loc 1 389 1 is_stmt 1 view -0
 3104              		.cfi_startproc
 3105              		@ args = 0, pretend = 0, frame = 0
 3106              		@ frame_needed = 0, uses_anonymous_args = 0
 390:armwave.c     ****     PyObject *mv;
 3107              		.loc 1 390 5 view .LVU893
 391:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3108              		.loc 1 391 5 view .LVU894
 3109              	@ armwave.c:389: {
 389:armwave.c     ****     PyObject *mv;
 3110              		.loc 1 389 1 is_stmt 0 view .LVU895
 3111 0e14 30402DE9 		push	{r4, r5, lr}	@
 3112              		.cfi_def_cfa_offset 12
 3113              		.cfi_offset 4, -12
 3114              		.cfi_offset 5, -8
 3115              		.cfi_offset 14, -4
 3116              	@ armwave.c:391:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3117              		.loc 1 391 22 view .LVU896
 3118 0e18 2C00A0E3 		mov	r0, #44	@,
 3119              	@ armwave.c:389: {
 389:armwave.c     ****     PyObject *mv;
 3120              		.loc 1 389 1 view .LVU897
 3121 0e1c 0CD04DE2 		sub	sp, sp, #12	@,,
 3122              		.cfi_def_cfa_offset 24
 3123              	@ armwave.c:391:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 3124              		.loc 1 391 22 view .LVU898
 3125 0e20 FEFFFFEB 		bl	malloc		@
 3126              	.LVL230:
 3127              	@ armwave.c:393:  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 392:armwave.c     ****     
 393:armwave.c     ****  	armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 3128              		.loc 1 393 3 view .LVU899
 3129 0e24 3C409FE5 		ldr	r4, .L182	@ tmp118,
 3130              	@ armwave.c:391:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 391:armwave.c     ****     
 3131              		.loc 1 391 22 view .LVU900
 3132 0e28 0050A0E1 		mov	r5, r0	@ tmp117,
 3133              	.LVL231:
 3134              		.loc 1 393 3 is_stmt 1 view .LVU901
 3135 0e2c 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3136              	.LVL232:
 3137              		.loc 1 393 3 is_stmt 0 view .LVU902
 3138 0e30 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 3139              	.LVL233:
 394:armwave.c     **** 
 395:armwave.c     ****     /*
 396:armwave.c     ****     if(g_armwave_state.target_height == 256) {
 397:armwave.c     ****         armwave_fill_pixbuf_256(g_armwave_state.out_pixbuf);
 398:armwave.c     ****     } else {
 399:armwave.c     ****         armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 400:armwave.c     ****     }
 401:armwave.c     ****     */
 402:armwave.c     **** 
 403:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 3140              		.loc 1 403 5 is_stmt 1 view .LVU903
 3141              	@ armwave.c:403:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3142              		.loc 1 403 79 is_stmt 0 view .LVU904
 3143 0e34 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.size, g_armwave_state.size
 3144              	@ armwave.c:403:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 3145              		.loc 1 403 5 view .LVU905
 3146 0e38 08C0A0E3 		mov	ip, #8	@ tmp125,
 3147 0e3c 0110A0E3 		mov	r1, #1	@ tmp126,
 3148 0e40 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 3149 0e44 02108DE8 		stm	sp, {r1, ip}	@,,
 3150 0e48 4C2094E5 		ldr	r2, [r4, #76]	@, g_armwave_state.out_pixbuf
 3151 0e4c 0500A0E1 		mov	r0, r5	@, tmp117
 3152 0e50 0010A0E3 		mov	r1, #0	@,
 3153 0e54 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 3154              	.LVL234:
 404:armwave.c     **** 
 405:armwave.c     ****     mv = PyMemoryView_FromBuffer(buf);
 3155              		.loc 1 405 5 is_stmt 1 view .LVU906
 3156              	@ armwave.c:405:     mv = PyMemoryView_FromBuffer(buf);
 3157              		.loc 1 405 10 is_stmt 0 view .LVU907
 3158 0e58 0500A0E1 		mov	r0, r5	@, tmp117
 3159              	@ armwave.c:406: }
 406:armwave.c     **** }
 3160              		.loc 1 406 1 view .LVU908
 3161 0e5c 0CD08DE2 		add	sp, sp, #12	@,,
 3162              		.cfi_def_cfa_offset 12
 3163              		@ sp needed	@
 3164 0e60 3040BDE8 		pop	{r4, r5, lr}	@
 3165              		.cfi_restore 14
 3166              		.cfi_restore 5
 3167              		.cfi_restore 4
 3168              		.cfi_def_cfa_offset 0
 3169              	.LVL235:
 3170              	@ armwave.c:405:     mv = PyMemoryView_FromBuffer(buf);
 405:armwave.c     **** }
 3171              		.loc 1 405 10 view .LVU909
 3172 0e64 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 3173              	.LVL236:
 3174              	.L183:
 405:armwave.c     **** }
 3175              		.loc 1 405 10 view .LVU910
 3176              		.align	2
 3177              	.L182:
 3178 0e68 00000000 		.word	g_armwave_state
 3179              		.cfi_endproc
 3180              	.LFE68:
 3182              		.align	2
 3183              		.global	armwave_test_dump_buffer_to_ppm
 3184              		.syntax unified
 3185              		.arm
 3186              		.fpu vfp
 3188              	armwave_test_dump_buffer_to_ppm:
 3189              	.LVL237:
 3190              	.LFB69:
 407:armwave.c     **** 
 408:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 409:armwave.c     **** {
 3191              		.loc 1 409 1 is_stmt 1 view -0
 3192              		.cfi_startproc
 3193              		@ args = 0, pretend = 0, frame = 0
 3194              		@ frame_needed = 0, uses_anonymous_args = 0
 3195              		@ link register save eliminated.
 410:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 3196              		.loc 1 410 5 view .LVU912
 3197 0e6c 08309FE5 		ldr	r3, .L185	@ tmp112,
 3198 0e70 0010A0E1 		mov	r1, r0	@, fn
 3199 0e74 4C0093E5 		ldr	r0, [r3, #76]	@, g_armwave_state.out_pixbuf
 3200              	.LVL238:
 3201              		.loc 1 410 5 is_stmt 0 view .LVU913
 3202 0e78 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 3203              	.LVL239:
 3204              	.L186:
 3205              		.loc 1 410 5 view .LVU914
 3206              		.align	2
 3207              	.L185:
 3208 0e7c 00000000 		.word	g_armwave_state
 3209              		.cfi_endproc
 3210              	.LFE69:
 3212              		.align	2
 3213              		.global	armwave_cleanup
 3214              		.syntax unified
 3215              		.arm
 3216              		.fpu vfp
 3218              	armwave_cleanup:
 3219              	.LFB70:
 411:armwave.c     **** }
 412:armwave.c     **** 
 413:armwave.c     **** void armwave_cleanup()
 414:armwave.c     **** {
 3220              		.loc 1 414 1 is_stmt 1 view -0
 3221              		.cfi_startproc
 3222              		@ args = 0, pretend = 0, frame = 0
 3223              		@ frame_needed = 0, uses_anonymous_args = 0
 415:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3224              		.loc 1 415 5 view .LVU916
 3225              	@ armwave.c:414: {
 414:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3226              		.loc 1 414 1 is_stmt 0 view .LVU917
 3227 0e80 10402DE9 		push	{r4, lr}	@
 3228              		.cfi_def_cfa_offset 8
 3229              		.cfi_offset 4, -8
 3230              		.cfi_offset 14, -4
 3231              	@ armwave.c:415:     free(g_armwave_state.out_pixbuf);
 3232              		.loc 1 415 25 view .LVU918
 3233 0e84 28409FE5 		ldr	r4, .L189	@ tmp113,
 3234              	@ armwave.c:415:     free(g_armwave_state.out_pixbuf);
 3235              		.loc 1 415 5 view .LVU919
 3236 0e88 4C0094E5 		ldr	r0, [r4, #76]	@, g_armwave_state.out_pixbuf
 3237 0e8c FEFFFFEB 		bl	free		@
 3238              	.LVL240:
 416:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3239              		.loc 1 416 5 is_stmt 1 view .LVU920
 3240 0e90 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3241 0e94 FEFFFFEB 		bl	free		@
 3242              	.LVL241:
 417:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3243              		.loc 1 417 5 view .LVU921
 3244 0e98 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.xcoord_to_xpixel
 3245 0e9c FEFFFFEB 		bl	free		@
 3246              	.LVL242:
 418:armwave.c     **** 
 419:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3247              		.loc 1 419 5 view .LVU922
 3248              	@ armwave.c:419:     g_armwave_state.out_pixbuf = NULL;
 3249              		.loc 1 419 32 is_stmt 0 view .LVU923
 3250 0ea0 0030A0E3 		mov	r3, #0	@ tmp120,
 3251 0ea4 4C3084E5 		str	r3, [r4, #76]	@ tmp120, g_armwave_state.out_pixbuf
 420:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3252              		.loc 1 420 5 is_stmt 1 view .LVU924
 3253              	@ armwave.c:420:     g_armwave_state.ch1_buffer = NULL;
 3254              		.loc 1 420 32 is_stmt 0 view .LVU925
 3255 0ea8 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 421:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3256              		.loc 1 421 5 is_stmt 1 view .LVU926
 3257              	@ armwave.c:421:     g_armwave_state.xcoord_to_xpixel = NULL;
 3258              		.loc 1 421 38 is_stmt 0 view .LVU927
 3259 0eac 683084E5 		str	r3, [r4, #104]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 3260              	@ armwave.c:422: }
 422:armwave.c     **** }
 3261              		.loc 1 422 1 view .LVU928
 3262 0eb0 1080BDE8 		pop	{r4, pc}	@
 3263              	.L190:
 3264              		.align	2
 3265              	.L189:
 3266 0eb4 00000000 		.word	g_armwave_state
 3267              		.cfi_endproc
 3268              	.LFE70:
 3270              		.section	.text.startup,"ax",%progbits
 3271              		.align	2
 3272              		.global	main
 3273              		.syntax unified
 3274              		.arm
 3275              		.fpu vfp
 3277              	main:
 3278              	.LVL243:
 3279              	.LFB71:
 423:armwave.c     **** 
 424:armwave.c     **** int main(int argc, char *argv[])
 425:armwave.c     **** {
 3280              		.loc 1 425 1 is_stmt 1 view -0
 3281              		.cfi_startproc
 3282              		@ args = 0, pretend = 0, frame = 0
 3283              		@ frame_needed = 0, uses_anonymous_args = 0
 426:armwave.c     ****     uint32_t *out_buffer;
 3284              		.loc 1 426 5 view .LVU930
 427:armwave.c     ****     uint32_t xx, yy, n;
 3285              		.loc 1 427 5 view .LVU931
 428:armwave.c     **** 
 429:armwave.c     ****     //printf("Starting armwave...\n");
 430:armwave.c     ****     armwave_init();
 3286              		.loc 1 430 5 view .LVU932
 3287              	.LBB10:
 3288              	.LBI10:
 129:armwave.c     **** {
 3289              		.loc 1 129 6 view .LVU933
 3290              	.LBB11:
 131:armwave.c     **** }
 3291              		.loc 1 131 5 view .LVU934
 3292              	.LBE11:
 3293              	.LBE10:
 3294              	@ armwave.c:425: {
 425:armwave.c     ****     uint32_t *out_buffer;
 3295              		.loc 1 425 1 is_stmt 0 view .LVU935
 3296 0000 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 3297              		.cfi_def_cfa_offset 24
 3298              		.cfi_offset 4, -24
 3299              		.cfi_offset 5, -20
 3300              		.cfi_offset 6, -16
 3301              		.cfi_offset 7, -12
 3302              		.cfi_offset 8, -8
 3303              		.cfi_offset 14, -4
 3304              	.LBB14:
 3305              	.LBB12:
 3306              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 3307              		.loc 1 131 27 view .LVU936
 3308 0004 0030A0E3 		mov	r3, #0	@ tmp120,
 3309 0008 60609FE5 		ldr	r6, .L199	@ tmp131,
 3310              	.LBE12:
 3311              	.LBE14:
 3312              	@ armwave.c:439:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 431:armwave.c     **** 
 432:armwave.c     ****     //printf("Creating test waveform...\n");
 433:armwave.c     ****     test_create_waveform();
 434:armwave.c     **** 
 435:armwave.c     ****     //printf("Creating gamma LUT...\n");
 436:armwave.c     ****     test_create_gamma();
 437:armwave.c     **** 
 438:armwave.c     ****     //printf("Setting up render...\n");
 439:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 3313              		.loc 1 439 5 view .LVU937
 3314 000c 60709FE5 		ldr	r7, .L199+4	@ ivtmp_6,
 3315              	.LBB15:
 3316              	.LBB13:
 3317              	@ armwave.c:131:     g_armwave_state.flags = 0;
 131:armwave.c     **** }
 3318              		.loc 1 131 27 view .LVU938
 3319 0010 003086E5 		str	r3, [r6]	@ tmp120, g_armwave_state.flags
 3320              	.LBE13:
 3321              	.LBE15:
 433:armwave.c     **** 
 3322              		.loc 1 433 5 is_stmt 1 view .LVU939
 3323 0014 FEFFFFEB 		bl	test_create_waveform		@
 3324              	.LVL244:
 436:armwave.c     **** 
 3325              		.loc 1 436 5 view .LVU940
 3326 0018 FEFFFFEB 		bl	test_create_gamma		@
 3327              	.LVL245:
 3328              		.loc 1 439 5 view .LVU941
 3329 001c 011CA0E3 		mov	r1, #256	@,
 3330 0020 020BA0E3 		mov	r0, #2048	@,
 3331 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.0		@
 3332              	.LVL246:
 440:armwave.c     **** 
 441:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 442:armwave.c     **** 
 443:armwave.c     ****     for(n = 0; n < 5000; n++) {
 3333              		.loc 1 443 5 view .LVU942
 3334              		.loc 1 443 5 is_stmt 0 view .LVU943
 3335 0028 2C5096E5 		ldr	r5, [r6, #44]	@ _3, g_armwave_state.slice_height
 3336              	.LVL247:
 3337              	.L192:
 3338              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 444:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3339              		.loc 1 444 9 view .LVU944
 3340 002c 020B55E3 		cmp	r5, #2048	@ _3,
 3341              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3342              		.loc 1 444 16 view .LVU945
 3343 0030 0040A093 		movls	r4, #0	@ yy,
 3344              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3345              		.loc 1 444 9 view .LVU946
 3346 0034 0900008A 		bhi	.L195		@,
 3347              	.LVL248:
 3348              	.L193:
 445:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 446:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 3349              		.loc 1 446 13 is_stmt 1 discriminator 3 view .LVU947
 3350 0038 950400E0 		mul	r0, r5, r4	@, _3, yy
 3351 003c 301096E5 		ldr	r1, [r6, #48]	@, g_armwave_state.slice_record_height
 3352 0040 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 3353              	.LVL249:
 3354              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 444:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3355              		.loc 1 444 49 is_stmt 0 discriminator 3 view .LVU948
 3356 0044 2C5096E5 		ldr	r5, [r6, #44]	@ _3, g_armwave_state.slice_height
 3357              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 444:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3358              		.loc 1 444 32 discriminator 3 view .LVU949
 3359 0048 020BA0E3 		mov	r0, #2048	@,
 3360 004c 0510A0E1 		mov	r1, r5	@, _3
 3361 0050 FEFFFFEB 		bl	__aeabi_uidiv		@
 3362              	.LVL250:
 3363              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 444:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3364              		.loc 1 444 67 discriminator 3 view .LVU950
 3365 0054 014084E2 		add	r4, r4, #1	@ yy, yy,
 3366              	.LVL251:
 3367              	@ armwave.c:444:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 444:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3368              		.loc 1 444 9 discriminator 3 view .LVU951
 3369 0058 040050E1 		cmp	r0, r4	@, yy
 3370 005c F5FFFF8A 		bhi	.L193		@,
 3371              	.LVL252:
 3372              	.L195:
 3373              	@ armwave.c:443:     for(n = 0; n < 5000; n++) {
 443:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 3374              		.loc 1 443 5 discriminator 2 view .LVU952
 3375 0060 017057E2 		subs	r7, r7, #1	@ ivtmp_6, ivtmp_6,
 3376 0064 F0FFFF1A 		bne	.L192		@,
 447:armwave.c     ****         }
 448:armwave.c     ****     }
 449:armwave.c     **** 
 450:armwave.c     ****     /*
 451:armwave.c     ****     printf("Creating pixbuf\n");
 452:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 453:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 454:armwave.c     **** 
 455:armwave.c     ****     printf("Dumping pixbuf\n");
 456:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 457:armwave.c     ****     */
 458:armwave.c     **** 
 459:armwave.c     ****     return 0;
 3377              		.loc 1 459 5 is_stmt 1 view .LVU953
 3378              	@ armwave.c:460: }
 460:armwave.c     **** }...
 3379              		.loc 1 460 1 is_stmt 0 view .LVU954
 3380 0068 0700A0E1 		mov	r0, r7	@, ivtmp_6
 3381 006c F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 3382              	.L200:
 3383              		.align	2
 3384              	.L199:
 3385 0070 00000000 		.word	g_armwave_state
 3386 0074 88130000 		.word	5000
 3387              		.cfi_endproc
 3388              	.LFE71:
 3390              		.global	mod_depth
 3391              		.global	overall_scale
 3392              		.comm	gamma_table,256,4
 3393              		.comm	test_wave_buffer,131072,4
 3394              		.comm	g_armwave_state,108,4
 3395              		.section	.rodata
 3396              		.align	2
 3397              		.set	.LANCHOR0,. + 0
 3400              	__PRETTY_FUNCTION__.17003:
 3401 0000 61726D77 		.ascii	"armwave_setup_render\000"
 3401      6176655F 
 3401      73657475 
 3401      705F7265 
 3401      6E646572 
 3402 0015 000000   		.space	3
 3405              	__PRETTY_FUNCTION__.17031:
 3406 0018 61726D77 		.ascii	"armwave_fill_pixbuf_256\000"
 3406      6176655F 
 3406      66696C6C 
 3406      5F706978 
 3406      6275665F 
 3409              	__PRETTY_FUNCTION__.17061:
 3410 0030 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3410      6176655F 
 3410      66696C6C 
 3410      5F706978 
 3410      6275665F 
 3411 004b 00       		.space	1
 3414              	overall_scale:
 3415 004c 00002041 		.word	1092616192
 3416              		.bss
 3417              		.align	2
 3418              		.set	.LANCHOR1,. + 0
 3421              	mod_depth:
 3422 0000 00000000 		.space	4
 3423              		.section	.rodata.str1.4,"aMS",%progbits,1
 3424              		.align	2
 3425              	.LC0:
 3426 0000 61726D77 		.ascii	"armwave.c\000"
 3426      6176652E 
 3426      6300
 3427 000a 0000     		.space	2
 3428              	.LC1:
 3429 000c 74617267 		.ascii	"target_height == 256 || target_height == 512 || tar"
 3429      65745F68 
 3429      65696768 
 3429      74203D3D 
 3429      20323536 
 3430 003f 6765745F 		.ascii	"get_height == 1024 || target_height == 2048\000"
 3430      68656967 
 3430      6874203D 
 3430      3D203130 
 3430      3234207C 
 3431 006b 00       		.space	1
 3432              	.LC2:
 3433 006c 63685F62 		.ascii	"ch_buff_size=%d\012\000"
 3433      7566665F 
 3433      73697A65 
 3433      3D25640A 
 3433      00
 3434 007d 000000   		.space	3
 3435              	.LC3:
 3436 0080 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3436      6D776176 
 3436      655F7374 
 3436      6174652E 
 3436      6368315F 
 3437 00a3 00       		.space	1
 3438              	.LC4:
 3439 00a4 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3439      6D776176 
 3439      655F7374 
 3439      6174652E 
 3439      78636F6F 
 3440 00cd 000000   		.space	3
 3441              	.LC5:
 3442 00d0 77726974 		.ascii	"write %d,%d ht %d\012\000"
 3442      65202564 
 3442      2C256420 
 3442      68742025 
 3442      640A00
 3443 00e3 00       		.space	1
 3444              	.LC6:
 3445 00e4 73746172 		.ascii	"start_point < end_point\000"
 3445      745F706F 
 3445      696E7420 
 3445      3C20656E 
 3445      645F706F 
 3446              	.LC7:
 3447 00fc 6F75745F 		.ascii	"out_buffer != NULL\000"
 3447      62756666 
 3447      65722021 
 3447      3D204E55 
 3447      4C4C00
 3448 010f 00       		.space	1
 3449              	.LC8:
 3450 0110 6E703D25 		.ascii	"np=%d w=%d v=%d\012\000"
 3450      6420773D 
 3450      25642076 
 3450      3D25640A 
 3450      00
 3451 0121 000000   		.space	3
 3452              	.LC9:
 3453 0124 776200   		.ascii	"wb\000"
 3454 0127 00       		.space	1
 3455              	.LC10:
 3456 0128 50330A00 		.ascii	"P3\012\000"
 3457              	.LC11:
 3458 012c 25642025 		.ascii	"%d %d\012\000"
 3458      640A00
 3459 0133 00       		.space	1
 3460              	.LC12:
 3461 0134 3235350A 		.ascii	"255\012\000"
 3461      00
 3462 0139 000000   		.space	3
 3463              	.LC13:
 3464 013c 25336420 		.ascii	"%3d %3d %3d\012\000"
 3464      25336420 
 3464      2533640A 
 3464      00
 3465 0149 000000   		.space	3
 3466              	.LC14:
 3467 014c 76302E30 		.ascii	"v0.0.1\000"
 3467      2E3100
 3468 0153 00       		.space	1
 3469              	.LC15:
 3470 0154 61726D77 		.ascii	"armwave version: %s\012\000"
 3470      61766520 
 3470      76657273 
 3470      696F6E3A 
 3470      2025730A 
 3471              		.text
 3472              	.Letext0:
 3473              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3474              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3475              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3476              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3477              		.file 6 "/usr/include/stdio.h"
 3478              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3479              		.file 8 "/usr/include/errno.h"
 3480              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3481              		.file 10 "/usr/include/unistd.h"
 3482              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3483              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3484              		.file 13 "/usr/local/include/python3.8/pyport.h"
 3485              		.file 14 "/usr/include/math.h"
 3486              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3487              		.file 16 "/usr/include/time.h"
 3488              		.file 17 "/usr/local/include/python3.8/pymem.h"
 3489              		.file 18 "/usr/local/include/python3.8/object.h"
 3490              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3491              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3492              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3493              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3494              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3495              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3496              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3497              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3498              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3499              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3500              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3501              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3502              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3503              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3504              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3505              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3506              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3507              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3508              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3509              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3510              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3511              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3512              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3513              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3514              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3515              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3516              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3517              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3518              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3519              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3520              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3521              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3522              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3523              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3524              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3525              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3526              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3527              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3528              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3529              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3530              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3531              		.file 60 "/usr/local/include/python3.8/context.h"
 3532              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3533              		.file 62 "/usr/local/include/python3.8/code.h"
 3534              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3535              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3536              		.file 65 "/usr/local/include/python3.8/import.h"
 3537              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3538              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3539              		.file 68 "armwave.h"
 3540              		.file 69 "/usr/include/stdlib.h"
 3541              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 3542              		.file 71 "<built-in>"
 3543              		.file 72 "/usr/include/assert.h"
 3544              		.file 73 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
