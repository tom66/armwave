   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.36,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.36,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.36,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.36
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.36, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 16
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     bufftyp_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     bufftyp_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 70819FE5 		ldr	r8, .L22	@ tmp194,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 2CD04DE2 		sub	sp, sp, #44	@,,
 255              		.cfi_def_cfa_offset 80
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0090A0E1 		mov	r9, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 82 view .LVU35
 261 00b0 241098E5 		ldr	r1, [r8, #36]	@ _2, g_armwave_state.cmp_x_bitdepth_scale
 262              	.LVL7:
 263              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 264              		.loc 1 71 147 view .LVU36
 265 00b4 403098E5 		ldr	r3, [r8, #64]	@ _5, g_armwave_state.bitdepth_height
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 044098E5 		ldr	r4, [r8, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 900102E0 		mul	r2, r0, r1	@ tmp197, slice_y, _2
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitdepth_height=%d\n
 273              		.loc 1 73 5 view .LVU39
 274 00c0 10308DE5 		str	r3, [sp, #16]	@ _5,
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2228A0E1 		lsr	r2, r2, #16	@ tmp198, tmp197,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 280              		.loc 1 73 5 view .LVU41
 281 00cc 0C108DE5 		str	r1, [sp, #12]	@ _2,
 282              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 283              		.loc 1 71 52 view .LVU42
 284 00d0 930202E0 		mul	r2, r3, r2	@ tmp199, _5, tmp198
 285              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d scale=%d bitd
 286              		.loc 1 73 5 view .LVU43
 287 00d4 0430A0E1 		mov	r3, r4	@, _1
 288 00d8 40019FE5 		ldr	r0, .L22+4	@,
 289              	.LVL8:
 290              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 291              		.loc 1 71 52 view .LVU44
 292 00dc 8220A0E1 		lsl	r2, r2, #1	@ _8, tmp199,
 293              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 294              		.loc 1 71 23 view .LVU45
 295 00e0 024084E0 		add	r4, r4, r2	@ write_buffer_base, _1, _8
 296              	.LVL9:
 297              		.loc 1 73 5 is_stmt 1 view .LVU46
 298 00e4 C220A0E1 		asr	r2, r2, #1	@ tmp204, _8,
 299 00e8 00208DE5 		str	r2, [sp]	@ tmp204,
 300 00ec 0420A0E1 		mov	r2, r4	@, write_buffer_base
 301 00f0 141098E5 		ldr	r1, [r8, #20]	@, g_armwave_state.wave_buffer
 302 00f4 FEFFFFEB 		bl	printf		@
 303              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height, g_armwave_state.cmp_x_bitd
  76:armwave.c     ****         g_armwave_state.bitdepth_height);
  77:armwave.c     **** 
  78:armwave.c     ****     // roll through each waveform
  79:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 304              		.loc 1 79 5 view .LVU47
 305              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 306              		.loc 1 79 35 is_stmt 0 view .LVU48
 307 00f8 383098E5 		ldr	r3, [r8, #56]	@ _82, g_armwave_state.waves
 308              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 309              		.loc 1 79 5 view .LVU49
 310 00fc 000053E3 		cmp	r3, #0	@ _82,
 311              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 312              		.loc 1 79 35 view .LVU50
 313 0100 20308DE5 		str	r3, [sp, #32]	@ _82, %sfp
 314              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
 315              		.loc 1 79 5 view .LVU51
 316 0104 3E0000DA 		ble	.L12		@,
 317 0108 14A098E5 		ldr	r10, [r8, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 318 010c 343098E5 		ldr	r3, [r8, #52]	@ _266, g_armwave_state.wave_stride
 319 0110 09A08AE0 		add	r10, r10, r9	@ ivtmp.51, g_armwave_state.wave_buffer, slice_y
 320              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
  81:armwave.c     **** 
  82:armwave.c     ****         // roll through y and render the slice into the out buffer
  83:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  84:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
  85:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  86:armwave.c     **** 
  87:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
  88:armwave.c     **** 
  89:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 /*
  93:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  94:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  95:armwave.c     ****                     continue;
  96:armwave.c     ****                 */
  97:armwave.c     **** 
  98:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  99:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
 100:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
 101:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 102:armwave.c     ****                 write_buffer = write_buffer_base + \
 103:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 321              		.loc 1 103 51 view .LVU52
 322 0114 247098E5 		ldr	r7, [r8, #36]	@ _75, g_armwave_state.cmp_x_bitdepth_scale
 323              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 324              		.loc 1 103 116 view .LVU53
 325 0118 40E098E5 		ldr	lr, [r8, #64]	@ _79, g_armwave_state.bitdepth_height
 326 011c 00906AE2 		rsb	r9, r10, #0	@ ivtmp.52, ivtmp.51
 327              	.LVL11:
 328              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 329              		.loc 1 79 11 view .LVU54
 330 0120 05C0A0E1 		mov	ip, r5	@ write_buffer, write_buffer
 331 0124 24308DE5 		str	r3, [sp, #36]	@ _266, %sfp
 332 0128 0030A0E3 		mov	r3, #0	@ w,
 333 012c 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 334              	.LVL12:
 335              	.L15:
  80:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 336              		.loc 1 80 9 is_stmt 1 view .LVU55
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 337              		.loc 1 84 9 view .LVU56
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 338              		.loc 1 84 9 is_stmt 0 view .LVU57
 339 0130 000056E3 		cmp	r6, #0	@ height,
 340 0134 2800000A 		beq	.L13		@,
 341 0138 0A80A0E1 		mov	r8, r10	@ ivtmp.44, ivtmp.51
 342 013c 0030A0E3 		mov	r3, #0	@ ivtmp.45,
 343              	.LVL13:
 344              	.L14:
  87:armwave.c     **** 
 345              		.loc 1 87 13 is_stmt 1 view .LVU58
 346              	@ armwave.c:87:             word = *(uint32_t*)(wave_base + yy);
  87:armwave.c     **** 
 347              		.loc 1 87 18 is_stmt 0 view .LVU59
 348 0140 042098E4 		ldr	r2, [r8], #4	@ word, MEM[base: _275, offset: 0B]
 349              	.LVL14:
  89:armwave.c     ****                 scale_value = word & 0xff;
 350              		.loc 1 89 13 is_stmt 1 view .LVU60
  90:armwave.c     ****                 
 351              		.loc 1 90 17 view .LVU61
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 352              		.loc 1 102 17 view .LVU62
 104:armwave.c     **** 
 105:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 106:armwave.c     **** 
 107:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 353              		.loc 1 107 17 view .LVU63
 354              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 355              		.loc 1 103 74 is_stmt 0 view .LVU64
 356 0144 23C8A0E1 		lsr	ip, r3, #16	@ tmp211, ivtmp.45,
 357              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 358              		.loc 1 103 34 view .LVU65
 359 0148 033087E0 		add	r3, r7, r3	@ _102, _75, ivtmp.45
 360              	.LVL15:
 361              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 362              		.loc 1 90 29 view .LVU66
 363 014c 7210EFE6 		uxtb	r1, r2	@ scale_value, word
 364              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 365              		.loc 1 107 47 view .LVU67
 366 0150 9E1C2CE0 		mla	ip, lr, ip, r1	@ tmp214, _79, tmp211, scale_value
 367              	@ armwave.c:108:                 word >>= 8;
 108:armwave.c     ****                 word >>= 8;
 368              		.loc 1 108 22 view .LVU68
 369 0154 2214A0E1 		lsr	r1, r2, #8	@ word, word,
 370              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 371              		.loc 1 103 74 view .LVU69
 372 0158 2308A0E1 		lsr	r0, r3, #16	@ tmp219, _102,
 373              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 374              		.loc 1 90 29 view .LVU70
 375 015c 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 376              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 377              		.loc 1 107 47 view .LVU71
 378 0160 8CC0A0E1 		lsl	ip, ip, #1	@ tmp215, tmp214,
 379 0164 9E1020E0 		mla	r0, lr, r0, r1	@ tmp223, _79, tmp219, scale_value
 380              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 381              		.loc 1 103 34 view .LVU72
 382 0168 033087E0 		add	r3, r7, r3	@ _128, _75, _102
 383              	@ armwave.c:108:                 word >>= 8;
 384              		.loc 1 108 22 view .LVU73
 385 016c 2218A0E1 		lsr	r1, r2, #16	@ word, word,
 386              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 387              		.loc 1 107 47 view .LVU74
 388 0170 BC5094E1 		ldrh	r5, [r4, ip]	@ *_85, *_85
 389              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 390              		.loc 1 103 74 view .LVU75
 391 0174 23B8A0E1 		lsr	fp, r3, #16	@ tmp228, _128,
 392              	@ armwave.c:90:                 scale_value = word & 0xff;
  90:armwave.c     ****                 
 393              		.loc 1 90 29 view .LVU76
 394 0178 7110EFE6 		uxtb	r1, r1	@ scale_value, word
 395              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 396              		.loc 1 107 47 view .LVU77
 397 017c 8000A0E1 		lsl	r0, r0, #1	@ tmp224, tmp223,
 398              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 399              		.loc 1 103 34 view .LVU78
 400 0180 033087E0 		add	r3, r7, r3	@ _154, _75, _128
 401              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 402              		.loc 1 107 47 view .LVU79
 403 0184 9E1B21E0 		mla	r1, lr, fp, r1	@ tmp232, _79, tmp228, scale_value
 404 0188 015085E2 		add	r5, r5, #1	@ tmp218, *_85,
 405 018c BC5084E1 		strh	r5, [r4, ip]	@ movhi	@ tmp218, *_85
 406              		.loc 1 108 17 is_stmt 1 view .LVU80
 407              	.LVL16:
  90:armwave.c     ****                 
 408              		.loc 1 90 17 view .LVU81
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 409              		.loc 1 102 17 view .LVU82
 107:armwave.c     ****                 word >>= 8;
 410              		.loc 1 107 17 view .LVU83
 411              	@ armwave.c:103:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 103:armwave.c     **** 
 412              		.loc 1 103 74 is_stmt 0 view .LVU84
 413 0190 23C8A0E1 		lsr	ip, r3, #16	@ tmp237, _154,
 414              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 415              		.loc 1 107 47 view .LVU85
 416 0194 B05094E1 		ldrh	r5, [r4, r0]	@ *_111, *_111
 417 0198 8110A0E1 		lsl	r1, r1, #1	@ tmp233, tmp232,
 418              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 419              		.loc 1 102 50 view .LVU86
 420 019c 9E0C0CE0 		mul	ip, lr, ip	@ tmp238, _79, tmp237
 421              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 422              		.loc 1 107 47 view .LVU87
 423 01a0 015085E2 		add	r5, r5, #1	@ tmp227, *_111,
 424 01a4 B05084E1 		strh	r5, [r4, r0]	@ movhi	@ tmp227, *_111
 425              		.loc 1 108 17 is_stmt 1 view .LVU88
 426              	.LVL17:
  90:armwave.c     ****                 
 427              		.loc 1 90 17 view .LVU89
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 428              		.loc 1 102 17 view .LVU90
 107:armwave.c     ****                 word >>= 8;
 429              		.loc 1 107 17 view .LVU91
 430              	@ armwave.c:108:                 word >>= 8;
 431              		.loc 1 108 22 is_stmt 0 view .LVU92
 432 01a8 222CA0E1 		lsr	r2, r2, #24	@ word, word,
 433              	.LVL18:
 434              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 435              		.loc 1 107 47 view .LVU93
 436 01ac B10094E1 		ldrh	r0, [r4, r1]	@ *_137, *_137
 437 01b0 8220A0E1 		lsl	r2, r2, #1	@ tmp241, word,
 438              	@ armwave.c:102:                 write_buffer = write_buffer_base + \
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 439              		.loc 1 102 30 view .LVU94
 440 01b4 8CC084E0 		add	ip, r4, ip, lsl #1	@ write_buffer, write_buffer_base, tmp238,
 441              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 442              		.loc 1 107 47 view .LVU95
 443 01b8 010080E2 		add	r0, r0, #1	@ tmp236, *_137,
 444 01bc B10084E1 		strh	r0, [r4, r1]	@ movhi	@ tmp236, *_137
 445              		.loc 1 108 17 is_stmt 1 view .LVU96
 446              	.LVL19:
  90:armwave.c     ****                 
 447              		.loc 1 90 17 view .LVU97
 102:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 448              		.loc 1 102 17 view .LVU98
 107:armwave.c     ****                 word >>= 8;
 449              		.loc 1 107 17 view .LVU99
 450              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 451              		.loc 1 107 47 is_stmt 0 view .LVU100
 452 01c0 B2109CE1 		ldrh	r1, [ip, r2]	@ *_163, *_163
 453              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 454              		.loc 1 84 9 view .LVU101
 455 01c4 080089E0 		add	r0, r9, r8	@ tmp245, ivtmp.52, ivtmp.44
 456 01c8 000056E1 		cmp	r6, r0	@ height, tmp245
 457              	@ armwave.c:107:                 *(write_buffer + scale_value) += 1;
 107:armwave.c     ****                 word >>= 8;
 458              		.loc 1 107 47 view .LVU102
 459 01cc 011081E2 		add	r1, r1, #1	@ tmp244, *_163,
 460 01d0 033087E0 		add	r3, r7, r3	@ ivtmp.45, _75, _154
 461              	.LVL20:
 107:armwave.c     ****                 word >>= 8;
 462              		.loc 1 107 47 view .LVU103
 463 01d4 B2108CE1 		strh	r1, [ip, r2]	@ movhi	@ tmp244, *_163
 464              		.loc 1 108 17 is_stmt 1 view .LVU104
 465              	.LVL21:
 466              	@ armwave.c:84:         for(yy = 0; yy < height; yy += 4) {
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 467              		.loc 1 84 9 is_stmt 0 view .LVU105
 468 01d8 D8FFFF8A 		bhi	.L14		@,
 469              	.LVL22:
 470              	.L13:
 471              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 472              		.loc 1 79 44 discriminator 2 view .LVU106
 473 01dc 1C309DE5 		ldr	r3, [sp, #28]	@ w, %sfp
 474              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 475              		.loc 1 79 5 discriminator 2 view .LVU107
 476 01e0 20209DE5 		ldr	r2, [sp, #32]	@ _82, %sfp
 477              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 478              		.loc 1 79 44 discriminator 2 view .LVU108
 479 01e4 013083E2 		add	r3, r3, #1	@ w, w,
 480 01e8 1C308DE5 		str	r3, [sp, #28]	@ w, %sfp
 481              	.LVL23:
 482              	@ armwave.c:79:     for(w = 0; w < g_armwave_state.waves; w++) {
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 483              		.loc 1 79 5 discriminator 2 view .LVU109
 484 01ec 020053E1 		cmp	r3, r2	@ w, _82
 485 01f0 24309DE5 		ldr	r3, [sp, #36]	@ _266, %sfp
 486              	.LVL24:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 487              		.loc 1 79 5 discriminator 2 view .LVU110
 488 01f4 03A08AE0 		add	r10, r10, r3	@ ivtmp.51, ivtmp.51, _266
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 489              		.loc 1 79 5 discriminator 2 view .LVU111
 490 01f8 039049E0 		sub	r9, r9, r3	@ ivtmp.52, ivtmp.52, _266
 491 01fc CBFFFF1A 		bne	.L15		@,
 492 0200 0C50A0E1 		mov	r5, ip	@ write_buffer, write_buffer
 493              	.LVL25:
 494              	.L12:
 109:armwave.c     ****             }
 110:armwave.c     ****         }
 111:armwave.c     ****     }
 112:armwave.c     **** 
 113:armwave.c     ****     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 495              		.loc 1 113 5 is_stmt 1 view .LVU112
 496              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 497              		.loc 1 113 40 is_stmt 0 view .LVU113
 498 0204 041045E0 		sub	r1, r5, r4	@ tmp246, write_buffer, write_buffer_base
 499              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 500              		.loc 1 113 5 view .LVU114
 501 0208 14009FE5 		ldr	r0, .L22+8	@,
 502 020c C110A0E1 		asr	r1, r1, #1	@, tmp246,
 503              	@ armwave.c:114: }
 114:armwave.c     **** }
 504              		.loc 1 114 1 view .LVU115
 505 0210 2CD08DE2 		add	sp, sp, #44	@,,
 506              		.cfi_def_cfa_offset 36
 507              		@ sp needed	@
 508 0214 F04FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 509              		.cfi_restore 14
 510              		.cfi_restore 11
 511              		.cfi_restore 10
 512              		.cfi_restore 9
 513              		.cfi_restore 8
 514              		.cfi_restore 7
 515              		.cfi_restore 6
 516              		.cfi_restore 5
 517              		.cfi_restore 4
 518              		.cfi_def_cfa_offset 0
 519              	.LVL26:
 520              	@ armwave.c:113:     printf("wb_end=%d\n", write_buffer - write_buffer_base);
 113:armwave.c     **** }
 521              		.loc 1 113 5 view .LVU116
 522 0218 FEFFFFEA 		b	printf		@
 523              	.LVL27:
 524              	.L23:
 525              		.align	2
 526              	.L22:
 527 021c 00000000 		.word	g_armwave_state
 528 0220 20000000 		.word	.LC2
 529 0224 78000000 		.word	.LC3
 530              		.cfi_endproc
 531              	.LFE59:
 533              		.align	2
 534              		.global	armwave_fill_pixbuf_scaled
 535              		.syntax unified
 536              		.arm
 537              		.fpu vfp
 539              	armwave_fill_pixbuf_scaled:
 540              	.LVL28:
 541              	.LFB60:
 115:armwave.c     **** 
 116:armwave.c     **** /*
 117:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 118:armwave.c     ****  * Rows are repeated as necessary.
 119:armwave.c     ****  */
 120:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 121:armwave.c     **** {
 542              		.loc 1 121 1 is_stmt 1 view -0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 16
 545              		@ frame_needed = 0, uses_anonymous_args = 0
 122:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 546              		.loc 1 122 5 view .LVU118
 123:armwave.c     ****     // uint32_t ysub;
 124:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 547              		.loc 1 124 5 view .LVU119
 125:armwave.c     ****     uint8_t r, g, b;
 548              		.loc 1 125 5 view .LVU120
 126:armwave.c     ****     int value; 
 549              		.loc 1 126 5 view .LVU121
 127:armwave.c     ****     // uint8_t row;
 128:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 550              		.loc 1 128 5 view .LVU122
 551              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 552              		.loc 1 121 1 is_stmt 0 view .LVU123
 553 0228 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 554              		.cfi_def_cfa_offset 36
 555              		.cfi_offset 4, -36
 556              		.cfi_offset 5, -32
 557              		.cfi_offset 6, -28
 558              		.cfi_offset 7, -24
 559              		.cfi_offset 8, -20
 560              		.cfi_offset 9, -16
 561              		.cfi_offset 10, -12
 562              		.cfi_offset 11, -8
 563              		.cfi_offset 14, -4
 564              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 130:armwave.c     ****     uint32_t offset;
 131:armwave.c     **** 
 132:armwave.c     ****     printf("output buffer: 0x%08x\n", out_buffer);
 565              		.loc 1 132 5 view .LVU124
 566 022c 0010A0E1 		mov	r1, r0	@, out_buffer
 567              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 568              		.loc 1 128 15 view .LVU125
 569 0230 F0419FE5 		ldr	r4, .L43	@ tmp255,
 570              	@ armwave.c:121: {
 121:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 571              		.loc 1 121 1 view .LVU126
 572 0234 0050A0E1 		mov	r5, r0	@ out_buffer, out_buffer
 573 0238 1CD04DE2 		sub	sp, sp, #28	@,,
 574              		.cfi_def_cfa_offset 64
 575              	@ armwave.c:132:     printf("output buffer: 0x%08x\n", out_buffer);
 576              		.loc 1 132 5 view .LVU127
 577 023c E8019FE5 		ldr	r0, .L43+4	@,
 578              	.LVL29:
 579              	@ armwave.c:128:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 128:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 580              		.loc 1 128 15 view .LVU128
 581 0240 046094E5 		ldr	r6, [r4, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 582              	.LVL30:
 129:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 583              		.loc 1 129 5 is_stmt 1 view .LVU129
 130:armwave.c     **** 
 584              		.loc 1 130 5 view .LVU130
 585              		.loc 1 132 5 view .LVU131
 586 0244 FEFFFFEB 		bl	printf		@
 587              	.LVL31:
 133:armwave.c     **** 
 134:armwave.c     ****     if(out_buffer == NULL)
 588              		.loc 1 134 5 view .LVU132
 589              	@ armwave.c:134:     if(out_buffer == NULL)
 590              		.loc 1 134 7 is_stmt 0 view .LVU133
 591 0248 000055E3 		cmp	r5, #0	@ out_buffer,
 592 024c 6D00000A 		beq	.L24		@,
 135:armwave.c     ****         return;
 136:armwave.c     **** 
 137:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 593              		.loc 1 137 5 is_stmt 1 view .LVU134
 594              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 595              		.loc 1 137 27 is_stmt 0 view .LVU135
 596 0250 583094E5 		ldr	r3, [r4, #88]	@ _1, g_armwave_state.target_width
 597              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 138:armwave.c     ****     
 139:armwave.c     ****     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%08x\n", \
 140:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 598              		.loc 1 140 38 view .LVU136
 599 0254 5C1094E5 		ldr	r1, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 600              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 601              		.loc 1 137 10 view .LVU137
 602 0258 402094E5 		ldr	r2, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 603              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 604              		.loc 1 139 5 view .LVU138
 605 025c 14008DE2 		add	r0, sp, #20	@ tmp194,,
 606              	@ armwave.c:140:         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 607              		.loc 1 140 38 view .LVU139
 608 0260 910301E0 		mul	r1, r1, r3	@ tmp190, g_armwave_state.target_height, _1
 609              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 610              		.loc 1 137 10 view .LVU140
 611 0264 920303E0 		mul	r3, r2, r3	@ npix, g_armwave_state.bitdepth_height, _1
 612              	@ armwave.c:139:     printf("memset %d bytes, npix %d, chbuff sz %d, base32_ptr 0x%08x, stack ~0x%0
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 613              		.loc 1 139 5 view .LVU141
 614 0268 00608DE5 		str	r6, [sp]	@ base_32ptr,
 615 026c 0320A0E1 		mov	r2, r3	@, npix
 616              	@ armwave.c:137:     npix = g_armwave_state.target_width * g_armwave_state.bitdepth_height; 
 137:armwave.c     ****     
 617              		.loc 1 137 10 view .LVU142
 618 0270 0C308DE5 		str	r3, [sp, #12]	@ npix, %sfp
 619              	.LVL32:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 620              		.loc 1 139 5 is_stmt 1 view .LVU143
 621 0274 0111A0E1 		lsl	r1, r1, #2	@, tmp190,
 622 0278 0360A0E1 		mov	r6, r3	@ npix, npix
 623              	.LVL33:
 139:armwave.c     ****         g_armwave_state.target_width * g_armwave_state.target_height * 4, npix, \
 624              		.loc 1 139 5 is_stmt 0 view .LVU144
 625 027c 04008DE5 		str	r0, [sp, #4]	@ tmp194,
 626 0280 503094E5 		ldr	r3, [r4, #80]	@, g_armwave_state.ch_buff_size
 627 0284 A4019FE5 		ldr	r0, .L43+8	@,
 628 0288 FEFFFFEB 		bl	printf		@
 629              	.LVL34:
 141:armwave.c     ****         g_armwave_state.ch_buff_size, base_32ptr, &w);
 142:armwave.c     **** 
 143:armwave.c     ****     // we don't really want to be doing this if possible;  os.madvise may be a better option
 144:armwave.c     ****     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 630              		.loc 1 144 5 is_stmt 1 view .LVU145
 631              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 632              		.loc 1 144 59 is_stmt 0 view .LVU146
 633 028c 583094E5 		ldr	r3, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 634 0290 5C2094E5 		ldr	r2, [r4, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 635              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 636              		.loc 1 144 5 view .LVU147
 637 0294 0010A0E3 		mov	r1, #0	@,
 638 0298 0500A0E1 		mov	r0, r5	@, out_buffer
 639              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 640              		.loc 1 144 59 view .LVU148
 641 029c 920302E0 		mul	r2, r2, r3	@ tmp197, g_armwave_state.target_height, g_armwave_state.target_width
 642              	@ armwave.c:144:     memset(out_buffer, 0x00, g_armwave_state.target_width * g_armwave_state.target
 643              		.loc 1 144 5 view .LVU149
 644 02a0 0221A0E1 		lsl	r2, r2, #2	@, tmp197,
 645 02a4 FEFFFFEB 		bl	memset		@
 646              	.LVL35:
 145:armwave.c     **** 
 146:armwave.c     ****     printf("iter...\n");
 647              		.loc 1 146 5 is_stmt 1 view .LVU150
 648 02a8 84019FE5 		ldr	r0, .L43+12	@,
 649 02ac FEFFFFEB 		bl	puts		@
 650              	.LVL36:
 147:armwave.c     **** 
 148:armwave.c     ****     for(n = 0; n < npix; n += 2) {
 651              		.loc 1 148 5 view .LVU151
 652              		.loc 1 148 5 is_stmt 0 view .LVU152
 653 02b0 000056E3 		cmp	r6, #0	@ npix,
 654 02b4 590000DA 		ble	.L33		@,
 655              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 656              		.loc 1 148 11 view .LVU153
 657 02b8 0070A0E3 		mov	r7, #0	@ n,
 658              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 659              		.loc 1 122 46 view .LVU154
 660 02bc 0790A0E1 		mov	r9, r7	@ painted, n
 661              	.LVL37:
 662              	.L32:
 149:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 150:armwave.c     ****         wave_word = 0x12345678;
 663              		.loc 1 150 9 is_stmt 1 view .LVU155
 151:armwave.c     ****         //wave_word = *base_32ptr++;
 152:armwave.c     **** 
 153:armwave.c     ****         if(n % 200 == 0) {
 664              		.loc 1 153 9 view .LVU156
 665              	@ armwave.c:153:         if(n % 200 == 0) {
 666              		.loc 1 153 14 is_stmt 0 view .LVU157
 667 02c0 70319FE5 		ldr	r3, .L43+16	@ tmp287,
 668 02c4 9327C3E0 		smull	r2, r3, r3, r7	@ tmp284, tmp207, tmp287, n
 669 02c8 C72FA0E1 		asr	r2, r7, #31	@ tmp210, n,
 670 02cc 433362E0 		rsb	r3, r2, r3, asr #6	@ tmp206, tmp210, tmp207,
 671 02d0 033183E0 		add	r3, r3, r3, lsl #2	@ tmp213, tmp206, tmp206,
 672 02d4 033183E0 		add	r3, r3, r3, lsl #2	@ tmp215, tmp213, tmp213,
 673              	@ armwave.c:153:         if(n % 200 == 0) {
 674              		.loc 1 153 11 view .LVU158
 675 02d8 830157E1 		cmp	r7, r3, lsl #3	@ n, tmp215,
 676 02dc 4B00000A 		beq	.L41		@,
 677              	.L28:
 154:armwave.c     ****            printf("%d\n", n);
 155:armwave.c     ****         }
 156:armwave.c     **** 
 157:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 678              		.loc 1 157 9 is_stmt 1 view .LVU159
 158:armwave.c     ****             for(w = 0; w < 2; w++) {
 679              		.loc 1 158 13 view .LVU160
 680              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 159:armwave.c     ****                 value = wave_word & 0xffff;
 160:armwave.c     ****                 wave_word >>= 16;
 161:armwave.c     **** 
 162:armwave.c     ****                 if(value != 0) {
 163:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 164:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 165:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 681              		.loc 1 165 52 is_stmt 0 view .LVU161
 682 02e0 F037D4E1 		ldrsh	r3, [r4, #112]	@ _23, g_armwave_state.ch1_color.b
 683              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 684              		.loc 1 163 52 view .LVU162
 685 02e4 FCB6D4E1 		ldrsh	fp, [r4, #108]	@ _17, g_armwave_state.ch1_color.r
 686              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 687              		.loc 1 164 52 view .LVU163
 688 02e8 FEA6D4E1 		ldrsh	r10, [r4, #110]	@ _20, g_armwave_state.ch1_color.g
 689              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 690              		.loc 1 165 52 view .LVU164
 691 02ec 08308DE5 		str	r3, [sp, #8]	@ _23, %sfp
 692              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 166:armwave.c     **** 
 167:armwave.c     ****                     r = MIN(rr, 255);
 168:armwave.c     ****                     g = MIN(gg, 255);
 169:armwave.c     ****                     b = MIN(bb, 255);
 170:armwave.c     **** 
 171:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 172:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 173:armwave.c     **** 
 174:armwave.c     ****                     // Plot the pixels
 175:armwave.c     ****                     nsub = n + w;
 176:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 693              		.loc 1 176 57 view .LVU165
 694 02f0 0A6AD4ED 		vldr.32	s13, [r4, #40]	@ _37, g_armwave_state.vscale_frac
 695              	@ armwave.c:150:         wave_word = 0x12345678;
 150:armwave.c     ****         //wave_word = *base_32ptr++;
 696              		.loc 1 150 19 view .LVU166
 697 02f4 40E19FE5 		ldr	lr, .L43+20	@ wave_word,
 698              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 699              		.loc 1 158 26 view .LVU167
 700 02f8 0060A0E3 		mov	r6, #0	@ w.8_104,
 701 02fc 020000EA 		b	.L31		@
 702              	.LVL38:
 703              	.L29:
 704              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 705              		.loc 1 158 13 discriminator 2 view .LVU168
 706 0300 010056E3 		cmp	r6, #1	@ w.8_104,
 707 0304 3600000A 		beq	.L42		@,
 708              	.L34:
 158:armwave.c     ****                 value = wave_word & 0xffff;
 709              		.loc 1 158 13 discriminator 2 view .LVU169
 710 0308 0160A0E3 		mov	r6, #1	@ w.8_104,
 711              	.LVL39:
 712              	.L31:
 159:armwave.c     ****                 wave_word >>= 16;
 713              		.loc 1 159 17 is_stmt 1 view .LVU170
 714              	@ armwave.c:159:                 value = wave_word & 0xffff;
 159:armwave.c     ****                 wave_word >>= 16;
 715              		.loc 1 159 23 is_stmt 0 view .LVU171
 716 030c 7E30FFE6 		uxth	r3, lr	@ value, wave_word
 717              	.LVL40:
 160:armwave.c     **** 
 718              		.loc 1 160 17 is_stmt 1 view .LVU172
 719              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 162 19 is_stmt 0 view .LVU173
 721 0310 000053E3 		cmp	r3, #0	@ value,
 722              	@ armwave.c:160:                 wave_word >>= 16;
 160:armwave.c     **** 
 723              		.loc 1 160 27 view .LVU174
 724 0314 2EE8A0E1 		lsr	lr, lr, #16	@ wave_word, wave_word,
 725              	.LVL41:
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 726              		.loc 1 162 17 is_stmt 1 view .LVU175
 727              	@ armwave.c:162:                 if(value != 0) {
 162:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 728              		.loc 1 162 19 is_stmt 0 view .LVU176
 729 0318 F8FFFF0A 		beq	.L29		@,
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 730              		.loc 1 163 21 is_stmt 1 view .LVU177
 731              	.LVL42:
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 732              		.loc 1 164 21 view .LVU178
 165:armwave.c     **** 
 733              		.loc 1 165 21 view .LVU179
 167:armwave.c     ****                     g = MIN(gg, 255);
 734              		.loc 1 167 21 view .LVU180
 168:armwave.c     ****                     b = MIN(bb, 255);
 735              		.loc 1 168 21 view .LVU181
 169:armwave.c     **** 
 736              		.loc 1 169 21 view .LVU182
 172:armwave.c     **** 
 737              		.loc 1 172 21 view .LVU183
 738 031c 060087E0 		add	r0, r7, r6	@ _160, n, w.8_104
 739              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 740              		.loc 1 165 55 is_stmt 0 view .LVU184
 741 0320 08209DE5 		ldr	r2, [sp, #8]	@ _23, %sfp
 742              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 743              		.loc 1 176 32 view .LVU185
 744 0324 7010EFE6 		uxtb	r1, r0	@ _35, _160
 745              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 746              		.loc 1 177 41 view .LVU186
 747 0328 01C081E2 		add	ip, r1, #1	@ tmp241, _35,
 748              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 749              		.loc 1 176 40 view .LVU187
 750 032c 901A07EE 		vmov	s15, r1	@ int	@ _35, _35
 751              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 752              		.loc 1 177 41 view .LVU188
 753 0330 10CA07EE 		vmov	s14, ip	@ int	@ tmp241, tmp241
 754              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 755              		.loc 1 165 55 view .LVU189
 756 0334 930202E0 		mul	r2, r3, r2	@ tmp226, value, _23
 757              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 176 40 view .LVU190
 759 0338 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp239, _35
 760              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 761              		.loc 1 177 46 view .LVU191
 762 033c C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp242, tmp241
 763              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 164 55 view .LVU192
 765 0340 930A01E0 		mul	r1, r3, r10	@ tmp230, value, _20
 766              	@ armwave.c:165:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 165:armwave.c     **** 
 767              		.loc 1 165 24 view .LVU193
 768 0344 4224A0E1 		asr	r2, r2, #8	@ bb, tmp226,
 769              	.LVL43:
 770              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 771              		.loc 1 163 55 view .LVU194
 772 0348 930B03E0 		mul	r3, r3, fp	@ tmp236, value, _17
 773              	.LVL44:
 774              	@ armwave.c:169:                     b = MIN(bb, 255);
 169:armwave.c     **** 
 775              		.loc 1 169 25 view .LVU195
 776 034c FF0052E3 		cmp	r2, #255	@ bb,
 777              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 176 40 view .LVU196
 779 0350 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp240, tmp239, _37
 780              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 781              		.loc 1 177 46 view .LVU197
 782 0354 267A27EE 		vmul.f32	s14, s14, s13	@ tmp243, tmp242, _37
 783              	@ armwave.c:164:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 164:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 784              		.loc 1 164 24 view .LVU198
 785 0358 4114A0E1 		asr	r1, r1, #8	@ gg, tmp230,
 786              	.LVL45:
 787              	@ armwave.c:169:                     b = MIN(bb, 255);
 169:armwave.c     **** 
 788              		.loc 1 169 25 view .LVU199
 789 035c FF20A0A3 		movge	r2, #255	@ bb,
 790              	.LVL46:
 791              	@ armwave.c:168:                     g = MIN(gg, 255);
 168:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 168 25 view .LVU200
 793 0360 FF0051E3 		cmp	r1, #255	@ gg,
 794 0364 FF10A0A3 		movge	r1, #255	@ gg,
 795              	.LVL47:
 796              	@ armwave.c:163:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 163:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 797              		.loc 1 163 24 view .LVU201
 798 0368 4334A0E1 		asr	r3, r3, #8	@ rr, tmp236,
 799              	.LVL48:
 800              	@ armwave.c:167:                     r = MIN(rr, 255);
 167:armwave.c     ****                     g = MIN(gg, 255);
 801              		.loc 1 167 25 view .LVU202
 802 036c FF0053E3 		cmp	r3, #255	@ rr,
 803              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 804              		.loc 1 176 24 view .LVU203
 805 0370 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp240
 806              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 807              		.loc 1 172 56 view .LVU204
 808 0374 0114A0E1 		lsl	r1, r1, #8	@ tmp231, gg,
 809              	@ armwave.c:167:                     r = MIN(rr, 255);
 167:armwave.c     ****                     g = MIN(gg, 255);
 810              		.loc 1 167 25 view .LVU205
 811 0378 FF30A0A3 		movge	r3, #255	@ rr,
 812              	.LVL49:
 813              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 814              		.loc 1 172 44 view .LVU206
 815 037c 0228A0E1 		lsl	r2, r2, #16	@ tmp227, bb,
 816              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 178:armwave.c     ****                     xx = (nsub >> 8) / 2;
 817              		.loc 1 178 32 view .LVU207
 818 0380 4004A0E1 		asr	r0, r0, #8	@ tmp244, _160,
 819              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 820              		.loc 1 172 44 view .LVU208
 821 0384 FF2802E2 		and	r2, r2, #16711680	@ tmp228, tmp227,
 822              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 823              		.loc 1 172 56 view .LVU209
 824 0388 7110FFE6 		uxth	r1, r1	@ tmp232, tmp231
 825              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 826              		.loc 1 172 51 view .LVU210
 827 038c 011082E1 		orr	r1, r2, r1	@ tmp234, tmp228, tmp232
 828              	@ armwave.c:176:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 829              		.loc 1 176 24 view .LVU211
 830 0390 908A17EE 		vmov	r8, s15	@ int	@ yy, yy
 831              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 832              		.loc 1 177 24 view .LVU212
 833 0394 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp243
 834              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 835              		.loc 1 172 62 view .LVU213
 836 0398 7330EFE6 		uxtb	r3, r3	@ rr, rr
 837              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 838              		.loc 1 178 38 view .LVU214
 839 039c A00F80E0 		add	r0, r0, r0, lsr #31	@ tmp246, tmp244, tmp244,
 840              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 841              		.loc 1 172 62 view .LVU215
 842 03a0 031081E1 		orr	r1, r1, r3	@ tmp238, tmp234, rr
 843              	@ armwave.c:172:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 172:armwave.c     **** 
 844              		.loc 1 172 26 view .LVU216
 845 03a4 FF1481E3 		orr	r1, r1, #-16777216	@ word, tmp238,
 846              	.LVL50:
 175:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 847              		.loc 1 175 21 is_stmt 1 view .LVU217
 176:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 848              		.loc 1 176 21 view .LVU218
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 849              		.loc 1 177 21 view .LVU219
 850              	@ armwave.c:178:                     xx = (nsub >> 8) / 2;
 851              		.loc 1 178 38 is_stmt 0 view .LVU220
 852 03a8 C000A0E1 		asr	r0, r0, #1	@ xx, tmp246,
 853              	@ armwave.c:177:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 177:armwave.c     ****                     xx = (nsub >> 8) / 2;
 854              		.loc 1 177 24 view .LVU221
 855 03ac 90CA17EE 		vmov	ip, s15	@ int	@ ye, ye
 856              	.LVL51:
 857              		.loc 1 178 21 is_stmt 1 view .LVU222
 179:armwave.c     **** 
 180:armwave.c     ****                     for(y = yy; y < ye; y++) {
 858              		.loc 1 180 21 view .LVU223
 859              		.loc 1 180 21 is_stmt 0 view .LVU224
 860 03b0 0C0058E1 		cmp	r8, ip	@ yy, ye
 861 03b4 D1FFFF2A 		bcs	.L29		@,
 862 03b8 0830A0E1 		mov	r3, r8	@ y, yy
 863              	.LVL52:
 864              	.L30:
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 181 25 is_stmt 1 discriminator 3 view .LVU225
 182:armwave.c     ****                         *(out_buffer_base + offset) = word;
 866              		.loc 1 182 25 discriminator 3 view .LVU226
 867              	@ armwave.c:181:                         offset = (xx + (y * g_armwave_state.target_width)); 
 181:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 868              		.loc 1 181 43 is_stmt 0 discriminator 3 view .LVU227
 869 03bc 582094E5 		ldr	r2, [r4, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 870              	@ armwave.c:182:                         *(out_buffer_base + offset) = word;
 871              		.loc 1 182 43 discriminator 3 view .LVU228
 872 03c0 920322E0 		mla	r2, r2, r3, r0	@ tmp251, g_armwave_state.target_width, y, xx
 873              	.LVL53:
 874              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 875              		.loc 1 180 42 discriminator 3 view .LVU229
 876 03c4 013083E2 		add	r3, r3, #1	@ y, y,
 877              	.LVL54:
 878              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 879              		.loc 1 180 21 discriminator 3 view .LVU230
 880 03c8 03005CE1 		cmp	ip, r3	@ ye, y
 881              	@ armwave.c:182:                         *(out_buffer_base + offset) = word;
 882              		.loc 1 182 53 discriminator 3 view .LVU231
 883 03cc 021185E7 		str	r1, [r5, r2, lsl #2]	@ word, *_48
 183:armwave.c     ****                         painted++;
 884              		.loc 1 183 25 is_stmt 1 discriminator 3 view .LVU232
 885              	.LVL55:
 886              	@ armwave.c:180:                     for(y = yy; y < ye; y++) {
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 887              		.loc 1 180 21 is_stmt 0 discriminator 3 view .LVU233
 888 03d0 F9FFFF1A 		bne	.L30		@,
 180:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 889              		.loc 1 180 21 discriminator 3 view .LVU234
 890 03d4 08C04CE0 		sub	ip, ip, r8	@ tmp252, ye, yy
 891              	.LVL56:
 892              	@ armwave.c:158:             for(w = 0; w < 2; w++) {
 158:armwave.c     ****                 value = wave_word & 0xffff;
 893              		.loc 1 158 13 view .LVU235
 894 03d8 010056E3 		cmp	r6, #1	@ w.8_104,
 895 03dc 0C9089E0 		add	r9, r9, ip	@ painted, painted, tmp252
 896              	.LVL57:
 158:armwave.c     ****                 value = wave_word & 0xffff;
 897              		.loc 1 158 13 view .LVU236
 898 03e0 C8FFFF1A 		bne	.L34		@,
 899              	.LVL58:
 900              	.L42:
 901              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 902              		.loc 1 148 5 view .LVU237
 903 03e4 0C309DE5 		ldr	r3, [sp, #12]	@ npix, %sfp
 904              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 905              		.loc 1 148 28 view .LVU238
 906 03e8 027087E2 		add	r7, r7, #2	@ n, n,
 907              	.LVL59:
 908              	@ armwave.c:148:     for(n = 0; n < npix; n += 2) {
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 909              		.loc 1 148 5 view .LVU239
 910 03ec 070053E1 		cmp	r3, r7	@ npix, n
 911 03f0 0230A0E3 		mov	r3, #2	@ tmp253,
 912 03f4 14308DE5 		str	r3, [sp, #20]	@ tmp253, w
 913              	.LVL60:
 148:armwave.c     ****         //wave_word = g_armwave_state.ch1_buffer[n]
 914              		.loc 1 148 5 view .LVU240
 915 03f8 B0FFFFCA 		bgt	.L32		@,
 916              	.LVL61:
 917              	.L27:
 184:armwave.c     ****                     }
 185:armwave.c     ****                 }
 186:armwave.c     ****             }
 187:armwave.c     ****         }
 188:armwave.c     ****     }
 189:armwave.c     **** 
 190:armwave.c     ****     printf("...done paint %d pixels...\n", painted);
 918              		.loc 1 190 5 is_stmt 1 view .LVU241
 919 03fc 0910A0E1 		mov	r1, r9	@, painted
 920 0400 38009FE5 		ldr	r0, .L43+24	@,
 921 0404 FEFFFFEB 		bl	printf		@
 922              	.LVL62:
 923              	.L24:
 924              	@ armwave.c:191: }
 191:armwave.c     **** }
 925              		.loc 1 191 1 is_stmt 0 view .LVU242
 926 0408 1CD08DE2 		add	sp, sp, #28	@,,
 927              		.cfi_remember_state
 928              		.cfi_def_cfa_offset 36
 929              		@ sp needed	@
 930 040c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 931              	.LVL63:
 932              	.L41:
 933              		.cfi_restore_state
 154:armwave.c     ****         }
 934              		.loc 1 154 12 is_stmt 1 view .LVU243
 935 0410 0710A0E1 		mov	r1, r7	@, n
 936 0414 28009FE5 		ldr	r0, .L43+28	@,
 937 0418 FEFFFFEB 		bl	printf		@
 938              	.LVL64:
 939 041c AFFFFFEA 		b	.L28		@
 940              	.LVL65:
 941              	.L33:
 942              	@ armwave.c:122:     uint32_t xx, yy, ye, y, word, wave_word, painted = 0;
 122:armwave.c     ****     // uint32_t ysub;
 943              		.loc 1 122 46 is_stmt 0 view .LVU244
 944 0420 0090A0E3 		mov	r9, #0	@ painted,
 945 0424 F4FFFFEA 		b	.L27		@
 946              	.L44:
 947              		.align	2
 948              	.L43:
 949 0428 00000000 		.word	g_armwave_state
 950 042c 84000000 		.word	.LC4
 951 0430 9C000000 		.word	.LC5
 952 0434 E8000000 		.word	.LC6
 953 0438 1F85EB51 		.word	1374389535
 954 043c 78563412 		.word	305419896
 955 0440 F4000000 		.word	.LC8
 956 0444 F0000000 		.word	.LC7
 957              		.cfi_endproc
 958              	.LFE60:
 960              		.global	__aeabi_idiv
 961              		.align	2
 962              		.global	armwave_generate
 963              		.syntax unified
 964              		.arm
 965              		.fpu vfp
 967              	armwave_generate:
 968              	.LFB61:
 192:armwave.c     **** 
 193:armwave.c     **** /*
 194:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 195:armwave.c     ****  */
 196:armwave.c     **** void armwave_generate()
 197:armwave.c     **** {
 969              		.loc 1 197 1 is_stmt 1 view -0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 0
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 198:armwave.c     ****     uint32_t yy;
 973              		.loc 1 198 5 view .LVU246
 199:armwave.c     ****     uint32_t xx_rem = g_armwave_state.wave_length, ypos = 0;
 974              		.loc 1 199 5 view .LVU247
 975              	.LVL66:
 200:armwave.c     **** 
 201:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 976              		.loc 1 201 5 view .LVU248
 977              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 978              		.loc 1 197 1 is_stmt 0 view .LVU249
 979 0448 F0402DE9 		push	{r4, r5, r6, r7, lr}	@
 980              		.cfi_def_cfa_offset 20
 981              		.cfi_offset 4, -20
 982              		.cfi_offset 5, -16
 983              		.cfi_offset 6, -12
 984              		.cfi_offset 7, -8
 985              		.cfi_offset 14, -4
 986              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 987              		.loc 1 201 5 view .LVU250
 988 044c 0010A0E3 		mov	r1, #0	@,
 989              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 990              		.loc 1 201 58 view .LVU251
 991 0450 84509FE5 		ldr	r5, .L53	@ tmp154,
 992              	@ armwave.c:197: {
 197:armwave.c     ****     uint32_t yy;
 993              		.loc 1 197 1 view .LVU252
 994 0454 0CD04DE2 		sub	sp, sp, #12	@,,
 995              		.cfi_def_cfa_offset 32
 996              	@ armwave.c:201:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 997              		.loc 1 201 5 view .LVU253
 998 0458 502095E5 		ldr	r2, [r5, #80]	@, g_armwave_state.ch_buff_size
 999 045c 040095E5 		ldr	r0, [r5, #4]	@, g_armwave_state.ch1_buffer
 1000 0460 FEFFFFEB 		bl	memset		@
 1001              	.LVL67:
 202:armwave.c     **** 
 203:armwave.c     ****     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 1002              		.loc 1 203 5 is_stmt 1 view .LVU254
 1003              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1004              		.loc 1 203 68 is_stmt 0 view .LVU255
 1005 0464 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1006              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1007              		.loc 1 203 51 view .LVU256
 1008 0468 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1009 046c 0610A0E1 		mov	r1, r6	@, _13
 1010 0470 FEFFFFEB 		bl	__aeabi_idiv		@
 1011              	.LVL68:
 1012              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 1013              		.loc 1 203 5 view .LVU257
 1014 0474 000050E3 		cmp	r0, #0	@,
 1015 0478 1500000A 		beq	.L45		@,
 1016              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 204:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 205:armwave.c     ****         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 1017              		.loc 1 205 9 view .LVU258
 1018 047c 5C709FE5 		ldr	r7, .L53+4	@ tmp155,
 1019              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1020              		.loc 1 203 12 view .LVU259
 1021 0480 0040A0E3 		mov	r4, #0	@ yy,
 1022              	.LVL69:
 1023              	.L47:
 1024              		.loc 1 205 9 is_stmt 1 discriminator 3 view .LVU260
 1025 0484 940601E0 		mul	r1, r4, r6	@ _5, yy, _13
 1026              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 206:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 207:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 1027              		.loc 1 207 48 is_stmt 0 discriminator 3 view .LVU261
 1028 0488 24C095E5 		ldr	ip, [r5, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1029              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1030              		.loc 1 205 9 discriminator 3 view .LVU262
 1031 048c 0630A0E1 		mov	r3, r6	@, _13
 1032 0490 0120A0E1 		mov	r2, r1	@, _5
 1033              	@ armwave.c:207:             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_sc
 1034              		.loc 1 207 48 discriminator 3 view .LVU263
 1035 0494 9C010CE0 		mul	ip, ip, r1	@ tmp143, g_armwave_state.cmp_x_bitdepth_scale, _5
 1036              	@ armwave.c:205:         printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\n", \
 205:armwave.c     ****             yy, yy * g_armwave_state.slice_height, g_armwave_state.slice_height, 
 1037              		.loc 1 205 9 discriminator 3 view .LVU264
 1038 0498 0700A0E1 		mov	r0, r7	@, tmp155
 1039 049c 0410A0E1 		mov	r1, r4	@, yy
 1040 04a0 2CC8A0E1 		lsr	ip, ip, #16	@ tmp145, tmp143,
 1041 04a4 00C08DE5 		str	ip, [sp]	@ tmp145,
 1042 04a8 FEFFFFEB 		bl	printf		@
 1043              	.LVL70:
 208:armwave.c     **** 
 209:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_h
 1044              		.loc 1 209 9 is_stmt 1 discriminator 3 view .LVU265
 1045              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1046              		.loc 1 209 62 is_stmt 0 discriminator 3 view .LVU266
 1047 04ac 441095E5 		ldr	r1, [r5, #68]	@ _10, g_armwave_state.slice_height
 1048              	@ armwave.c:209:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1049              		.loc 1 209 9 discriminator 3 view .LVU267
 1050 04b0 940100E0 		mul	r0, r4, r1	@, yy,
 1051 04b4 FEFFFFEB 		bl	render_nonaa_to_buffer_1ch_slice		@
 1052              	.LVL71:
 210:armwave.c     ****         xx_rem -= g_armwave_state.slice_height;
 1053              		.loc 1 210 9 is_stmt 1 discriminator 3 view .LVU268
 211:armwave.c     ****         ypos += g_armwave_state.slice_height;   
 1054              		.loc 1 211 9 discriminator 3 view .LVU269
 1055              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1056              		.loc 1 203 68 is_stmt 0 discriminator 3 view .LVU270
 1057 04b8 446095E5 		ldr	r6, [r5, #68]	@ _13, g_armwave_state.slice_height
 1058              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1059              		.loc 1 203 51 discriminator 3 view .LVU271
 1060 04bc 4C0095E5 		ldr	r0, [r5, #76]	@, g_armwave_state.wave_length
 1061 04c0 0610A0E1 		mov	r1, r6	@, _13
 1062 04c4 FEFFFFEB 		bl	__aeabi_idiv		@
 1063              	.LVL72:
 1064              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1065              		.loc 1 203 86 discriminator 3 view .LVU272
 1066 04c8 014084E2 		add	r4, r4, #1	@ yy, yy,
 1067              	.LVL73:
 1068              	@ armwave.c:203:     for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height);
 203:armwave.c     ****     //for(yy = 0; yy < 10; yy++) {
 1069              		.loc 1 203 5 discriminator 3 view .LVU273
 1070 04cc 040050E1 		cmp	r0, r4	@, yy
 1071 04d0 EBFFFF8A 		bhi	.L47		@,
 1072              	.LVL74:
 1073              	.L45:
 1074              	@ armwave.c:220: }
 212:armwave.c     ****     }
 213:armwave.c     **** 
 214:armwave.c     ****     /*
 215:armwave.c     ****     printf("armwave_generate: slice %d (y=%d, h=%d, xpos=%d) last\n", \
 216:armwave.c     ****             yy, ypos, g_armwave_state.slice_height, 
 217:armwave.c     ****             (yy * g_armwave_state.slice_height * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD
 218:armwave.c     ****     render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 219:armwave.c     ****     */
 220:armwave.c     **** }
 1075              		.loc 1 220 1 view .LVU274
 1076 04d4 0CD08DE2 		add	sp, sp, #12	@,,
 1077              		.cfi_def_cfa_offset 20
 1078              		@ sp needed	@
 1079 04d8 F080BDE8 		pop	{r4, r5, r6, r7, pc}	@
 1080              	.L54:
 1081              		.align	2
 1082              	.L53:
 1083 04dc 00000000 		.word	g_armwave_state
 1084 04e0 10010000 		.word	.LC9
 1085              		.cfi_endproc
 1086              	.LFE61:
 1088              		.align	2
 1089              		.global	armwave_setup_render
 1090              		.syntax unified
 1091              		.arm
 1092              		.fpu vfp
 1094              	armwave_setup_render:
 1095              	.LVL75:
 1096              	.LFB62:
 221:armwave.c     **** 
 222:armwave.c     **** /*
 223:armwave.c     ****  * Setup the renderer with passed parameters.
 224:armwave.c     ****  */
 225:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 226:armwave.c     **** {
 1097              		.loc 1 226 1 is_stmt 1 view -0
 1098              		.cfi_startproc
 1099              		@ args = 12, pretend = 0, frame = 0
 1100              		@ frame_needed = 0, uses_anonymous_args = 0
 227:armwave.c     ****     uint32_t length, xx;
 1101              		.loc 1 227 5 view .LVU276
 228:armwave.c     ****     float points_per_pixel;
 1102              		.loc 1 228 5 view .LVU277
 229:armwave.c     **** 
 230:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1103              		.loc 1 230 5 view .LVU278
 1104              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1105              		.loc 1 226 1 is_stmt 0 view .LVU279
 1106 04e4 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1107              		.cfi_def_cfa_offset 28
 1108              		.cfi_offset 4, -28
 1109              		.cfi_offset 5, -24
 1110              		.cfi_offset 6, -20
 1111              		.cfi_offset 7, -16
 1112              		.cfi_offset 8, -12
 1113              		.cfi_offset 9, -8
 1114              		.cfi_offset 14, -4
 1115 04e8 14D04DE2 		sub	sp, sp, #20	@,,
 1116              		.cfi_def_cfa_offset 48
 1117              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1118              		.loc 1 226 1 view .LVU280
 1119 04ec 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1120 04f0 D063CDE1 		ldrd	r6, [sp, #48]	@,,
 1121 04f4 38C09DE5 		ldr	ip, [sp, #56]	@ render_flags, render_flags
 1122 04f8 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1123              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1124              		.loc 1 230 5 view .LVU281
 1125 04fc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1126              	@ armwave.c:226: {
 226:armwave.c     ****     uint32_t length, xx;
 1127              		.loc 1 226 1 view .LVU282
 1128 0500 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1129 0504 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1130              	@ armwave.c:230:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1131              		.loc 1 230 5 view .LVU283
 1132 0508 F460CDE1 		strd	r6, [sp, #4]	@,,
 1133 050c 0230A0E1 		mov	r3, r2	@, waves_max
 1134              	.LVL76:
 1135              		.loc 1 230 5 view .LVU284
 1136 0510 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1137 0514 0120A0E1 		mov	r2, r1	@, end_point
 1138              	.LVL77:
 1139              		.loc 1 230 5 view .LVU285
 1140 0518 0010A0E1 		mov	r1, r0	@, start_point
 1141              	.LVL78:
 1142              		.loc 1 230 5 view .LVU286
 1143 051c 8C019FE5 		ldr	r0, .L65+12	@,
 1144              	.LVL79:
 1145              		.loc 1 230 5 view .LVU287
 1146 0520 FEFFFFEB 		bl	printf		@
 1147              	.LVL80:
 231:armwave.c     **** 
 232:armwave.c     ****     // TODO these asserts should instead raise PyExc
 233:armwave.c     ****     assert(start_point < end_point);
 1148              		.loc 1 233 5 is_stmt 1 view .LVU288
 1149 0524 050054E1 		cmp	r4, r5	@ start_point, end_point
 1150 0528 5100002A 		bcs	.L63		@,
 234:armwave.c     **** 
 235:armwave.c     ****     /*
 236:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 237:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 238:armwave.c     ****     if(target_height == 256) {
 239:armwave.c     ****         g_armwave_state.row_shift = 8;
 240:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 241:armwave.c     ****     } else if(target_height == 512) {
 242:armwave.c     ****         g_armwave_state.row_shift = 9;
 243:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 244:armwave.c     ****     } else if(target_height == 1024) {
 245:armwave.c     ****         g_armwave_state.row_shift = 10;
 246:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 247:armwave.c     ****     } else if(target_height == 2048) {
 248:armwave.c     ****         g_armwave_state.row_shift = 11;
 249:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 250:armwave.c     ****     }
 251:armwave.c     ****     */
 252:armwave.c     **** 
 253:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 254:armwave.c     ****     g_armwave_state.xstride = target_height;
 1151              		.loc 1 254 5 view .LVU289
 1152              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 256:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 257:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 258:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 259:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 260:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 261:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 262:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 263:armwave.c     ****     g_armwave_state.target_width = target_width;
 264:armwave.c     ****     g_armwave_state.target_height = target_height;
 265:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1153              		.loc 1 265 45 is_stmt 0 view .LVU290
 1154 052c 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1155              	.LVL81:
 1156              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 266:armwave.c     **** 
 267:armwave.c     ****     // Calculate compound scaler
 268:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 269:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1157              		.loc 1 269 48 view .LVU291
 1158 0530 5B5A9FED 		vldr.32	s10, .L65	@ tmp187,
 1159 0534 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1160              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1161              		.loc 1 255 49 view .LVU292
 1162 0538 5A7A9FED 		vldr.32	s14, .L65+4	@ tmp165,
 1163              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1164              		.loc 1 269 81 view .LVU293
 1165 053c 5A6A9FED 		vldr.32	s12, .L65+8	@ tmp191,
 1166              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1167              		.loc 1 262 90 view .LVU294
 1168 0540 043086E2 		add	r3, r6, #4	@ tmp176, target_width,
 1169              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 1170              		.loc 1 269 48 view .LVU295
 1171 0544 E76AF8EE 		vcvt.f32.s32	s13, s15	@ tmp185, _13
 1172              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1173              		.loc 1 255 49 view .LVU296
 1174 0548 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1175              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1176              		.loc 1 254 29 view .LVU297
 1177 054c 60419FE5 		ldr	r4, .L65+16	@ tmp222,
 1178              	.LVL82:
 1179              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1180              		.loc 1 260 42 view .LVU298
 1181 0550 970601E0 		mul	r1, r7, r6	@ tmp173, target_height, target_width
 1182              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1183              		.loc 1 255 49 view .LVU299
 1184 0554 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp164, target_height
 1185              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1186              		.loc 1 262 95 view .LVU300
 1187 0558 833383E0 		add	r3, r3, r3, lsl #7	@ tmp179, tmp176, tmp176,
 1188              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 270:armwave.c     **** 
 271:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave_length=%d, scale
 1189              		.loc 1 271 5 view .LVU301
 1190 055c 0128A0E3 		mov	r2, #65536	@ tmp194,
 1191              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1192              		.loc 1 269 48 view .LVU302
 1193 0560 267AC5EE 		vdiv.f32	s15, s10, s13	@ tmp186, tmp187, tmp185
 1194              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1195              		.loc 1 271 5 view .LVU303
 1196 0564 04508DE5 		str	r5, [sp, #4]	@ _13,
 1197 0568 00608DE5 		str	r6, [sp]	@ target_width,
 1198              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1199              		.loc 1 262 95 view .LVU304
 1200 056c 8331A0E1 		lsl	r3, r3, #3	@ tmp180, tmp179,
 1201              	@ armwave.c:254:     g_armwave_state.xstride = target_height;
 254:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1202              		.loc 1 254 29 view .LVU305
 1203 0570 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1204              		.loc 1 255 5 is_stmt 1 view .LVU306
 1205              	@ armwave.c:257:     g_armwave_state.wave_stride = wave_stride;
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1206              		.loc 1 257 33 is_stmt 0 view .LVU307
 1207 0574 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1208              	@ armwave.c:258:     g_armwave_state.waves_max = waves_max;
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1209              		.loc 1 258 31 view .LVU308
 1210 0578 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1211              	@ armwave.c:259:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1212              		.loc 1 259 27 view .LVU309
 1213 057c 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1214              	@ armwave.c:264:     g_armwave_state.target_height = target_height;
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1215              		.loc 1 264 35 view .LVU310
 1216 0580 F865C4E1 		strd	r6, [r4, #88]	@, tmp222,
 1217              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1218              		.loc 1 271 5 view .LVU311
 1219 0584 08208DE5 		str	r2, [sp, #8]	@ tmp194,
 1220              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1221              		.loc 1 261 37 view .LVU312
 1222 0588 022CA0E3 		mov	r2, #512	@ tmp175,
 1223              	@ armwave.c:260:     g_armwave_state.size = target_height * target_width;
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1224              		.loc 1 260 26 view .LVU313
 1225 058c 541084E5 		str	r1, [r4, #84]	@ tmp173, g_armwave_state.size
 1226              	@ armwave.c:261:     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 poss
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1227              		.loc 1 261 37 view .LVU314
 1228 0590 402084E5 		str	r2, [r4, #64]	@ tmp175, g_armwave_state.bitdepth_height
 1229              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1230              		.loc 1 271 5 view .LVU315
 1231 0594 0310A0E1 		mov	r1, r3	@, tmp180
 1232              	@ armwave.c:262:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1233              		.loc 1 262 34 view .LVU316
 1234 0598 503084E5 		str	r3, [r4, #80]	@ tmp180, g_armwave_state.ch_buff_size
 1235              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1236              		.loc 1 255 49 view .LVU317
 1237 059c 876AC5EE 		vdiv.f32	s13, s11, s14	@ _3, tmp164, tmp165
 1238              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1239              		.loc 1 269 40 view .LVU318
 1240 05a0 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1241              	@ armwave.c:265:     g_armwave_state.wave_length = end_point - start_point;
 265:armwave.c     **** 
 1242              		.loc 1 265 33 view .LVU319
 1243 05a4 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1244              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1245              		.loc 1 271 5 view .LVU320
 1246 05a8 08019FE5 		ldr	r0, .L65+20	@,
 1247              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1248              		.loc 1 269 40 view .LVU321
 1249 05ac C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp188, target_width
 1250 05b0 877A67EE 		vmul.f32	s15, s15, s14	@ tmp189, tmp186, tmp188
 1251              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1252              		.loc 1 256 30 view .LVU322
 1253 05b4 E67ABDEE 		vcvt.s32.f32	s14, s13	@ tmp168, _3
 1254              	@ armwave.c:255:     g_armwave_state.vscale_frac = target_height / 255.0f;
 255:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1255              		.loc 1 255 33 view .LVU323
 1256 05b8 0A6AC4ED 		vstr.32	s13, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1257              		.loc 1 256 5 is_stmt 1 view .LVU324
 1258              	@ armwave.c:269:         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * 
 269:armwave.c     **** 
 1259              		.loc 1 269 81 is_stmt 0 view .LVU325
 1260 05bc 867A67EE 		vmul.f32	s15, s15, s12	@ tmp190, tmp189, tmp191
 1261              	@ armwave.c:256:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 256:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1262              		.loc 1 256 30 view .LVU326
 1263 05c0 0C7A84ED 		vstr.32	s14, [r4, #48]	@ int	@ tmp168, g_armwave_state.vscale
 257:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1264              		.loc 1 257 5 is_stmt 1 view .LVU327
 258:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1265              		.loc 1 258 5 view .LVU328
 259:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1266              		.loc 1 259 5 view .LVU329
 260:armwave.c     ****     g_armwave_state.bitdepth_height = 256 * sizeof(bufftyp_t);  // Always 256 possible levels in 8-
 1267              		.loc 1 260 5 view .LVU330
 261:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4) * siz
 1268              		.loc 1 261 5 view .LVU331
 262:armwave.c     ****     g_armwave_state.target_width = target_width;
 1269              		.loc 1 262 5 view .LVU332
 263:armwave.c     ****     g_armwave_state.target_height = target_height;
 1270              		.loc 1 263 5 view .LVU333
 264:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1271              		.loc 1 264 5 view .LVU334
 265:armwave.c     **** 
 1272              		.loc 1 265 5 view .LVU335
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1273              		.loc 1 268 5 view .LVU336
 1274              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1275              		.loc 1 268 42 is_stmt 0 view .LVU337
 1276 05c4 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _20, tmp190
 1277 05c8 90CA17EE 		vmov	ip, s15	@ int	@ _20, _20
 1278              	@ armwave.c:271:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), targ_width=%d, wave
 1279              		.loc 1 271 5 view .LVU338
 1280 05cc 903A17EE 		vmov	r3, s15	@ int	@, _20
 1281              	@ armwave.c:268:     g_armwave_state.cmp_x_bitdepth_scale = \
 268:armwave.c     ****         ((g_armwave_state.target_width * (1.0f / g_armwave_state.wave_length))) * (1 << AM_XCOORD_M
 1282              		.loc 1 268 42 view .LVU339
 1283 05d0 097AC4ED 		vstr.32	s15, [r4, #36]	@ int	@ _20, g_armwave_state.cmp_x_bitdepth_scale
 1284              		.loc 1 271 5 is_stmt 1 view .LVU340
 1285 05d4 0C20A0E1 		mov	r2, ip	@, tmp3
 1286 05d8 FEFFFFEB 		bl	printf		@
 1287              	.LVL83:
 272:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, \
 273:armwave.c     ****         g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.target_width, g_armwave_state.wave_le
 274:armwave.c     ****         (1 << AM_XCOORD_MULT_SHIFT));
 275:armwave.c     **** 
 276:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 277:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 278:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 279:armwave.c     ****     g_armwave_state.slice_height = 64; // 64;  
 1288              		.loc 1 279 5 view .LVU341
 1289              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 280:armwave.c     **** 
 281:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1290              		.loc 1 281 23 is_stmt 0 view .LVU342
 1291 05dc 040094E5 		ldr	r0, [r4, #4]	@ _21, g_armwave_state.ch1_buffer
 1292              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1293              		.loc 1 279 34 view .LVU343
 1294 05e0 4030A0E3 		mov	r3, #64	@ tmp196,
 1295              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1296              		.loc 1 281 7 view .LVU344
 1297 05e4 000050E3 		cmp	r0, #0	@ _21,
 1298              	@ armwave.c:279:     g_armwave_state.slice_height = 64; // 64;  
 279:armwave.c     **** 
 1299              		.loc 1 279 34 view .LVU345
 1300 05e8 443084E5 		str	r3, [r4, #68]	@ tmp196, g_armwave_state.slice_height
 1301              		.loc 1 281 5 is_stmt 1 view .LVU346
 1302              	@ armwave.c:281:     if(g_armwave_state.ch1_buffer != NULL)
 1303              		.loc 1 281 7 is_stmt 0 view .LVU347
 1304 05ec 0000000A 		beq	.L57		@,
 282:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1305              		.loc 1 282 9 is_stmt 1 view .LVU348
 1306 05f0 FEFFFFEB 		bl	free		@
 1307              	.LVL84:
 1308              	.L57:
 283:armwave.c     **** 
 284:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1309              		.loc 1 284 5 view .LVU349
 1310              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1311              		.loc 1 284 56 is_stmt 0 view .LVU350
 1312 05f4 508094E5 		ldr	r8, [r4, #80]	@ _22, g_armwave_state.ch_buff_size
 1313              	.LVL85:
 1314              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1315              		.loc 1 284 34 view .LVU351
 1316 05f8 0110A0E3 		mov	r1, #1	@,
 1317 05fc 0800A0E1 		mov	r0, r8	@, _22
 1318 0600 FEFFFFEB 		bl	calloc		@
 1319              	.LVL86:
 1320              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 285:armwave.c     **** 
 286:armwave.c     ****     if(g_armwave_state.ch1_buffer == NULL) {
 1321              		.loc 1 286 7 view .LVU352
 1322 0604 000050E3 		cmp	r0, #0	@ tmp199,
 1323              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1324              		.loc 1 284 34 view .LVU353
 1325 0608 0070A0E1 		mov	r7, r0	@ tmp199,
 1326              	@ armwave.c:284:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 284:armwave.c     **** 
 1327              		.loc 1 284 32 view .LVU354
 1328 060c 040084E5 		str	r0, [r4, #4]	@ tmp199, g_armwave_state.ch1_buffer
 1329              		.loc 1 286 5 is_stmt 1 view .LVU355
 1330              	@ armwave.c:286:     if(g_armwave_state.ch1_buffer == NULL) {
 1331              		.loc 1 286 7 is_stmt 0 view .LVU356
 1332 0610 1C00000A 		beq	.L64		@,
 287:armwave.c     ****         fprintf(stderr, "malloc failure allocating %d bytes (g_armwave_state.ch1_buffer)\n", g_armw
 288:armwave.c     ****         exit(-1);
 289:armwave.c     ****     }
 290:armwave.c     **** 
 291:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 292:armwave.c     ****     length = end_point - start_point;
 1333              		.loc 1 292 5 is_stmt 1 view .LVU357
 1334              	.LVL87:
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1335              		.loc 1 293 5 view .LVU358
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1336              		.loc 1 294 5 view .LVU359
 1337              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1338              		.loc 1 293 31 is_stmt 0 view .LVU360
 1339 0614 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1340              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1341              		.loc 1 293 34 view .LVU361
 1342 0618 106A07EE 		vmov	s14, r6	@ int	@ target_width, target_width
 1343              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 1344              		.loc 1 294 60 view .LVU362
 1345 061c 116AD4ED 		vldr.32	s13, [r4, #68]	@ int	@ tmp232, g_armwave_state.slice_height
 1346              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 295:armwave.c     **** 
 296:armwave.c     ****     /*
 297:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 298:armwave.c     **** 
 299:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 300:armwave.c     **** 
 301:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 302:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 303:armwave.c     **** 
 304:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 305:armwave.c     ****     }
 306:armwave.c     ****     */
 307:armwave.c     **** 
 308:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1347              		.loc 1 308 34 view .LVU363
 1348 0620 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1349              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1350              		.loc 1 293 31 view .LVU364
 1351 0624 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp204, _13
 1352              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1353              		.loc 1 293 34 view .LVU365
 1354 0628 477AB8EE 		vcvt.f32.u32	s14, s14	@ tmp205, target_width
 1355              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1356              		.loc 1 294 60 view .LVU366
 1357 062c E66AB8EE 		vcvt.f32.s32	s12, s13	@ tmp208, tmp232
 1358              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1359              		.loc 1 308 34 view .LVU367
 1360 0630 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1361              	@ armwave.c:293:     points_per_pixel = length / ((float)(target_width));
 293:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1362              		.loc 1 293 22 view .LVU368
 1363 0634 876AC7EE 		vdiv.f32	s13, s15, s14	@ points_per_pixel, tmp204, tmp205
 1364              	.LVL88:
 1365              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1366              		.loc 1 294 60 view .LVU369
 1367 0638 867A66EE 		vmul.f32	s15, s13, s12	@ tmp210, points_per_pixel, tmp208
 1368              	@ armwave.c:294:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 294:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1369              		.loc 1 294 41 view .LVU370
 1370 063c E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp211, tmp210
 1371 0640 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp211, g_armwave_state.slice_record_height
 1372              		.loc 1 308 5 is_stmt 1 view .LVU371
 1373              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1374              		.loc 1 308 34 is_stmt 0 view .LVU372
 1375 0644 FEFFFFEB 		bl	malloc		@
 1376              	.LVL89:
 1377              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 309:armwave.c     **** 
 310:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1378              		.loc 1 310 5 view .LVU373
 1379 0648 182094E5 		ldr	r2, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1380 064c 0710A0E1 		mov	r1, r7	@, tmp199
 1381 0650 30208DE5 		str	r2, [sp, #48]	@ g_armwave_state.test_wave_buffer,
 1382 0654 842094E5 		ldr	r2, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 1383              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1384              		.loc 1 308 34 view .LVU374
 1385 0658 00C0A0E1 		mov	ip, r0	@ tmp215,
 1386              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1387              		.loc 1 310 5 view .LVU375
 1388 065c 0030A0E1 		mov	r3, r0	@, tmp215
 1389              	@ armwave.c:308:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 308:armwave.c     **** 
 1390              		.loc 1 308 32 view .LVU376
 1391 0660 68C084E5 		str	ip, [r4, #104]	@ tmp215, g_armwave_state.out_pixbuf
 1392              		.loc 1 310 5 is_stmt 1 view .LVU377
 1393 0664 50009FE5 		ldr	r0, .L65+24	@,
 1394              	@ armwave.c:317: }
 311:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 312:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 313:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 314:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 315:armwave.c     **** 
 316:armwave.c     ****      //malloc_stats();
 317:armwave.c     **** }
 1395              		.loc 1 317 1 is_stmt 0 view .LVU378
 1396 0668 14D08DE2 		add	sp, sp, #20	@,,
 1397              		.cfi_remember_state
 1398              		.cfi_def_cfa_offset 28
 1399              		@ sp needed	@
 1400 066c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1401              		.cfi_restore 14
 1402              		.cfi_restore 9
 1403              		.cfi_restore 8
 1404              		.cfi_restore 7
 1405              		.cfi_restore 6
 1406              		.cfi_restore 5
 1407              		.cfi_restore 4
 1408              		.cfi_def_cfa_offset 0
 1409              	.LVL90:
 1410              	@ armwave.c:310:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 310:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 1411              		.loc 1 310 5 view .LVU379
 1412 0670 FEFFFFEA 		b	printf		@
 1413              	.LVL91:
 1414              	.L63:
 1415              		.cfi_restore_state
 233:armwave.c     **** 
 1416              		.loc 1 233 5 is_stmt 1 discriminator 1 view .LVU380
 1417 0674 44309FE5 		ldr	r3, .L65+28	@,
 1418 0678 E920A0E3 		mov	r2, #233	@,
 1419 067c 40109FE5 		ldr	r1, .L65+32	@,
 1420 0680 40009FE5 		ldr	r0, .L65+36	@,
 1421 0684 FEFFFFEB 		bl	__assert_fail		@
 1422              	.LVL92:
 1423              	.L64:
 287:armwave.c     ****         exit(-1);
 1424              		.loc 1 287 9 view .LVU381
 1425 0688 3C309FE5 		ldr	r3, .L65+40	@ tmp202,
 1426 068c 0820A0E1 		mov	r2, r8	@, _22
 1427 0690 38109FE5 		ldr	r1, .L65+44	@,
 1428 0694 000093E5 		ldr	r0, [r3]	@, stderr
 1429 0698 FEFFFFEB 		bl	fprintf		@
 1430              	.LVL93:
 288:armwave.c     ****     }
 1431              		.loc 1 288 9 view .LVU382
 1432 069c 0000E0E3 		mvn	r0, #0	@,
 1433 06a0 FEFFFFEB 		bl	exit		@
 1434              	.LVL94:
 1435              	.L66:
 1436              		.align	2
 1437              	.L65:
 1438 06a4 0000803F 		.word	1065353216
 1439 06a8 00007F43 		.word	1132396544
 1440 06ac 00008047 		.word	1199570944
 1441 06b0 44010000 		.word	.LC10
 1442 06b4 00000000 		.word	g_armwave_state
 1443 06b8 94010000 		.word	.LC13
 1444 06bc 38020000 		.word	.LC15
 1445 06c0 00000000 		.word	.LANCHOR0
 1446 06c4 70010000 		.word	.LC11
 1447 06c8 7C010000 		.word	.LC12
 1448 06cc 00000000 		.word	stderr
 1449 06d0 F4010000 		.word	.LC14
 1450              		.cfi_endproc
 1451              	.LFE62:
 1453              		.align	2
 1454              		.global	armwave_set_wave_pointer
 1455              		.syntax unified
 1456              		.arm
 1457              		.fpu vfp
 1459              	armwave_set_wave_pointer:
 1460              	.LVL95:
 1461              	.LFB63:
 318:armwave.c     **** 
 319:armwave.c     **** /*
 320:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 321:armwave.c     ****  * in the future.
 322:armwave.c     ****  */
 323:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 324:armwave.c     **** {
 1462              		.loc 1 324 1 view -0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 0
 1465              		@ frame_needed = 0, uses_anonymous_args = 0
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1466              		.loc 1 325 5 view .LVU384
 1467 06d4 000050E3 		cmp	r0, #0	@ wave_buffer
 1468              		.loc 1 325 5 is_stmt 0 view .LVU385
 1469 06d8 0200000A 		beq	.L72		@,
 326:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1470              		.loc 1 326 5 is_stmt 1 view .LVU386
 1471              	@ armwave.c:326:     g_armwave_state.wave_buffer = wave_buffer;
 1472              		.loc 1 326 33 is_stmt 0 view .LVU387
 1473 06dc 1C309FE5 		ldr	r3, .L73	@ tmp116,
 1474 06e0 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1475 06e4 1EFF2FE1 		bx	lr	@
 1476              	.L72:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1477              		.loc 1 325 5 is_stmt 1 discriminator 1 view .LVU388
 1478              	@ armwave.c:324: {
 324:armwave.c     ****     assert(wave_buffer != NULL);
 1479              		.loc 1 324 1 is_stmt 0 discriminator 1 view .LVU389
 1480 06e8 10402DE9 		push	{r4, lr}	@
 1481              		.cfi_def_cfa_offset 8
 1482              		.cfi_offset 4, -8
 1483              		.cfi_offset 14, -4
 1484              	@ armwave.c:325:     assert(wave_buffer != NULL);
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1485              		.loc 1 325 5 discriminator 1 view .LVU390
 1486 06ec 10309FE5 		ldr	r3, .L73+4	@,
 1487 06f0 10209FE5 		ldr	r2, .L73+8	@,
 1488 06f4 10109FE5 		ldr	r1, .L73+12	@,
 1489 06f8 10009FE5 		ldr	r0, .L73+16	@,
 1490              	.LVL96:
 325:armwave.c     ****     assert(wave_buffer != NULL);
 1491              		.loc 1 325 5 discriminator 1 view .LVU391
 1492 06fc FEFFFFEB 		bl	__assert_fail		@
 1493              	.LVL97:
 1494              	.L74:
 1495              		.align	2
 1496              	.L73:
 1497 0700 00000000 		.word	g_armwave_state
 1498 0704 18000000 		.word	.LANCHOR0+24
 1499 0708 45010000 		.word	325
 1500 070c 70010000 		.word	.LC11
 1501 0710 5C020000 		.word	.LC16
 1502              		.cfi_endproc
 1503              	.LFE63:
 1505              		.align	2
 1506              		.global	armwave_set_wave_pointer_as_testbuf
 1507              		.syntax unified
 1508              		.arm
 1509              		.fpu vfp
 1511              	armwave_set_wave_pointer_as_testbuf:
 1512              	.LVL98:
 1513              	.LFB64:
 327:armwave.c     **** }
 328:armwave.c     **** 
 329:armwave.c     **** /*
 330:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 331:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 332:armwave.c     ****  */
 333:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 334:armwave.c     **** {
 1514              		.loc 1 334 1 is_stmt 1 view -0
 1515              		.cfi_startproc
 1516              		@ args = 0, pretend = 0, frame = 0
 1517              		@ frame_needed = 0, uses_anonymous_args = 0
 1518              		@ link register save eliminated.
 335:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1519              		.loc 1 335 5 view .LVU393
 1520              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1521              		.loc 1 335 29 is_stmt 0 view .LVU394
 1522 0714 24309FE5 		ldr	r3, .L78	@ tmp117,
 1523              	@ armwave.c:335:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1524              		.loc 1 335 7 view .LVU395
 1525 0718 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1526 071c 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1527 0720 0400003A 		bcc	.L77		@,
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 337:armwave.c     ****         return;
 338:armwave.c     ****     }
 339:armwave.c     **** 
 340:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1528              		.loc 1 340 5 is_stmt 1 view .LVU396
 1529              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1530              		.loc 1 340 111 is_stmt 0 view .LVU397
 1531 0724 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1532              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1533              		.loc 1 340 68 view .LVU398
 1534 0728 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1535 072c 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1536              	.LVL99:
 1537              	@ armwave.c:340:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1538              		.loc 1 340 33 view .LVU399
 1539 0730 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1540              	@ armwave.c:341: }
 341:armwave.c     **** }
 1541              		.loc 1 341 1 view .LVU400
 1542 0734 1EFF2FE1 		bx	lr	@
 1543              	.LVL100:
 1544              	.L77:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1545              		.loc 1 336 9 is_stmt 1 view .LVU401
 1546 0738 04009FE5 		ldr	r0, .L78+4	@,
 1547              	.LVL101:
 336:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1548              		.loc 1 336 9 is_stmt 0 view .LVU402
 1549 073c FEFFFFEA 		b	puts		@
 1550              	.LVL102:
 1551              	.L79:
 1552              		.align	2
 1553              	.L78:
 1554 0740 00000000 		.word	g_armwave_state
 1555 0744 70020000 		.word	.LC17
 1556              		.cfi_endproc
 1557              	.LFE64:
 1559              		.align	2
 1560              		.global	armwave_set_wave_pointer_u32
 1561              		.syntax unified
 1562              		.arm
 1563              		.fpu vfp
 1565              	armwave_set_wave_pointer_u32:
 1566              	.LVL103:
 1567              	.LFB65:
 342:armwave.c     **** 
 343:armwave.c     **** /*
 344:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 345:armwave.c     ****  * disjointed buffers in the future.
 346:armwave.c     ****  */
 347:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 348:armwave.c     **** {
 1568              		.loc 1 348 1 is_stmt 1 view -0
 1569              		.cfi_startproc
 1570              		@ args = 0, pretend = 0, frame = 0
 1571              		@ frame_needed = 0, uses_anonymous_args = 0
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1572              		.loc 1 349 5 view .LVU404
 1573 0748 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1574              		.loc 1 349 5 is_stmt 0 view .LVU405
 1575 074c 0200000A 		beq	.L85		@,
 350:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1576              		.loc 1 350 5 is_stmt 1 view .LVU406
 1577              	@ armwave.c:350:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1578              		.loc 1 350 33 is_stmt 0 view .LVU407
 1579 0750 1C309FE5 		ldr	r3, .L86	@ tmp117,
 1580 0754 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1581 0758 1EFF2FE1 		bx	lr	@
 1582              	.L85:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1583              		.loc 1 349 5 is_stmt 1 discriminator 1 view .LVU408
 1584              	@ armwave.c:348: {
 348:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1585              		.loc 1 348 1 is_stmt 0 discriminator 1 view .LVU409
 1586 075c 10402DE9 		push	{r4, lr}	@
 1587              		.cfi_def_cfa_offset 8
 1588              		.cfi_offset 4, -8
 1589              		.cfi_offset 14, -4
 1590              	@ armwave.c:349:     assert(wave_buffer_ptr != 0);
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1591              		.loc 1 349 5 discriminator 1 view .LVU410
 1592 0760 10309FE5 		ldr	r3, .L86+4	@,
 1593 0764 10209FE5 		ldr	r2, .L86+8	@,
 1594 0768 10109FE5 		ldr	r1, .L86+12	@,
 1595 076c 10009FE5 		ldr	r0, .L86+16	@,
 1596              	.LVL104:
 349:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1597              		.loc 1 349 5 discriminator 1 view .LVU411
 1598 0770 FEFFFFEB 		bl	__assert_fail		@
 1599              	.LVL105:
 1600              	.L87:
 1601              		.align	2
 1602              	.L86:
 1603 0774 00000000 		.word	g_armwave_state
 1604 0778 34000000 		.word	.LANCHOR0+52
 1605 077c 5D010000 		.word	349
 1606 0780 70010000 		.word	.LC11
 1607 0784 AC020000 		.word	.LC18
 1608              		.cfi_endproc
 1609              	.LFE65:
 1611              		.align	2
 1612              		.global	armwave_clear_buffer
 1613              		.syntax unified
 1614              		.arm
 1615              		.fpu vfp
 1617              	armwave_clear_buffer:
 1618              	.LVL106:
 1619              	.LFB66:
 351:armwave.c     **** }
 352:armwave.c     **** 
 353:armwave.c     **** /*
 354:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 357:armwave.c     **** {
 1620              		.loc 1 357 1 is_stmt 1 view -0
 1621              		.cfi_startproc
 1622              		@ args = 0, pretend = 0, frame = 0
 1623              		@ frame_needed = 0, uses_anonymous_args = 0
 1624              		@ link register save eliminated.
 358:armwave.c     ****     // Flags ignored, only one buffer cleared
 359:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1625              		.loc 1 359 5 view .LVU413
 1626              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1627              		.loc 1 359 58 is_stmt 0 view .LVU414
 1628 0788 0C309FE5 		ldr	r3, .L89	@ tmp114,
 1629              	@ armwave.c:359:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1630              		.loc 1 359 5 view .LVU415
 1631 078c 0010A0E3 		mov	r1, #0	@,
 1632 0790 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1633 0794 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1634              	.LVL107:
 1635              		.loc 1 359 5 view .LVU416
 1636 0798 FEFFFFEA 		b	memset		@
 1637              	.LVL108:
 1638              	.L90:
 1639              		.align	2
 1640              	.L89:
 1641 079c 00000000 		.word	g_armwave_state
 1642              		.cfi_endproc
 1643              	.LFE66:
 1645              		.align	2
 1646              		.global	armwave_set_channel_colour
 1647              		.syntax unified
 1648              		.arm
 1649              		.fpu vfp
 1651              	armwave_set_channel_colour:
 1652              	.LVL109:
 1653              	.LFB67:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 364:armwave.c     ****  */
 365:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 366:armwave.c     **** {
 1654              		.loc 1 366 1 is_stmt 1 view -0
 1655              		.cfi_startproc
 1656              		@ args = 0, pretend = 0, frame = 0
 1657              		@ frame_needed = 0, uses_anonymous_args = 0
 1658              		@ link register save eliminated.
 367:armwave.c     ****     // Only 1ch supported for now
 368:armwave.c     ****     switch(ch) {
 1659              		.loc 1 368 5 view .LVU418
 1660 07a0 010050E3 		cmp	r0, #1	@ ch,
 369:armwave.c     ****         case 1:
 370:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1661              		.loc 1 370 13 view .LVU419
 1662              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 1663              		.loc 1 370 41 is_stmt 0 view .LVU420
 1664 07a4 0C009F05 		ldreq	r0, .L93	@ tmp117,
 1665              	.LVL110:
 1666              		.loc 1 370 41 view .LVU421
 1667 07a8 BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 371:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1668              		.loc 1 371 13 is_stmt 1 view .LVU422
 1669              	@ armwave.c:371:             g_armwave_state.ch1_color.g = g;
 1670              		.loc 1 371 41 is_stmt 0 view .LVU423
 1671 07ac BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 372:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1672              		.loc 1 372 13 is_stmt 1 view .LVU424
 1673              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 1674              		.loc 1 372 41 is_stmt 0 view .LVU425
 1675 07b0 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 373:armwave.c     ****             break;
 1676              		.loc 1 373 13 is_stmt 1 view .LVU426
 1677              	@ armwave.c:375: }
 374:armwave.c     ****     }
 375:armwave.c     **** }
 1678              		.loc 1 375 1 is_stmt 0 view .LVU427
 1679 07b4 1EFF2FE1 		bx	lr	@
 1680              	.L94:
 1681              		.align	2
 1682              	.L93:
 1683 07b8 00000000 		.word	g_armwave_state
 1684              		.cfi_endproc
 1685              	.LFE67:
 1687              		.align	2
 1688              		.global	armwave_dump_ppm_debug
 1689              		.syntax unified
 1690              		.arm
 1691              		.fpu vfp
 1693              	armwave_dump_ppm_debug:
 1694              	.LVL111:
 1695              	.LFB68:
 376:armwave.c     **** 
 377:armwave.c     **** /*
 378:armwave.c     ****  * Dump a ppm of a buffer to a file.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 381:armwave.c     **** {
 1696              		.loc 1 381 1 is_stmt 1 view -0
 1697              		.cfi_startproc
 1698              		@ args = 0, pretend = 0, frame = 0
 1699              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1700              		.loc 1 382 5 view .LVU429
 1701              	@ armwave.c:381: {
 381:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1702              		.loc 1 381 1 is_stmt 0 view .LVU430
 1703 07bc 0130A0E1 		mov	r3, r1	@ fn, fn
 1704 07c0 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1705              		.cfi_def_cfa_offset 28
 1706              		.cfi_offset 4, -28
 1707              		.cfi_offset 5, -24
 1708              		.cfi_offset 6, -20
 1709              		.cfi_offset 7, -16
 1710              		.cfi_offset 8, -12
 1711              		.cfi_offset 9, -8
 1712              		.cfi_offset 14, -4
 1713 07c4 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1714 07c8 0CD04DE2 		sub	sp, sp, #12	@,,
 1715              		.cfi_def_cfa_offset 40
 1716              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 1717              		.loc 1 382 16 view .LVU431
 1718 07cc C4109FE5 		ldr	r1, .L103	@,
 1719              	.LVL112:
 1720              		.loc 1 382 16 view .LVU432
 1721 07d0 0300A0E1 		mov	r0, r3	@, fn
 1722              	.LVL113:
 1723              		.loc 1 382 16 view .LVU433
 1724 07d4 FEFFFFEB 		bl	fopen64		@
 1725              	.LVL114:
 1726              	@ armwave.c:389:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 383:armwave.c     ****     uint32_t data;
 384:armwave.c     ****     int xx, yy;
 385:armwave.c     **** 
 386:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 387:armwave.c     **** 
 388:armwave.c     ****     fputs("P3\n", fp);
 389:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1727              		.loc 1 389 5 view .LVU434
 1728 07d8 BC609FE5 		ldr	r6, .L103+4	@ tmp150,
 1729              	@ armwave.c:388:     fputs("P3\n", fp);
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1730              		.loc 1 388 5 view .LVU435
 1731 07dc 0320A0E3 		mov	r2, #3	@,
 1732 07e0 0110A0E3 		mov	r1, #1	@,
 1733              	@ armwave.c:382:     FILE *fp = fopen(fn, "wb");
 382:armwave.c     ****     uint32_t data;
 1734              		.loc 1 382 16 view .LVU436
 1735 07e4 0070A0E1 		mov	r7, r0	@ fp,
 1736              	.LVL115:
 383:armwave.c     ****     uint32_t data;
 1737              		.loc 1 383 5 is_stmt 1 view .LVU437
 384:armwave.c     **** 
 1738              		.loc 1 384 5 view .LVU438
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1739              		.loc 1 388 5 view .LVU439
 1740 07e8 0030A0E1 		mov	r3, r0	@, fp
 1741 07ec AC009FE5 		ldr	r0, .L103+8	@,
 1742              	.LVL116:
 388:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1743              		.loc 1 388 5 is_stmt 0 view .LVU440
 1744 07f0 FEFFFFEB 		bl	fwrite		@
 1745              	.LVL117:
 1746              		.loc 1 389 5 is_stmt 1 view .LVU441
 1747 07f4 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1748 07f8 A4109FE5 		ldr	r1, .L103+12	@,
 1749 07fc 0700A0E1 		mov	r0, r7	@, fp
 1750 0800 FEFFFFEB 		bl	fprintf		@
 1751              	.LVL118:
 390:armwave.c     ****     fputs("255\n", fp);
 1752              		.loc 1 390 5 view .LVU442
 1753 0804 0420A0E3 		mov	r2, #4	@,
 1754 0808 0730A0E1 		mov	r3, r7	@, fp
 1755 080c 0110A0E3 		mov	r1, #1	@,
 1756 0810 90009FE5 		ldr	r0, .L103+16	@,
 1757 0814 FEFFFFEB 		bl	fwrite		@
 1758              	.LVL119:
 391:armwave.c     **** 
 392:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1759              		.loc 1 392 5 view .LVU443
 1760              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1761              		.loc 1 392 37 is_stmt 0 view .LVU444
 1762 0818 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1763              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1764              		.loc 1 392 5 view .LVU445
 1765 081c 000052E3 		cmp	r2, #0	@ prephitmp_53,
 1766 0820 180000DA 		ble	.L96		@,
 1767 0824 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1768              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 394:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 395:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 396:armwave.c     **** 
 397:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1769              		.loc 1 397 13 view .LVU446
 1770 0828 7C909FE5 		ldr	r9, .L103+20	@ tmp152,
 1771              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1772              		.loc 1 392 12 view .LVU447
 1773 082c 0050A0E3 		mov	r5, #0	@ yy,
 1774              	.LVL120:
 1775              	.L97:
 1776              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1777              		.loc 1 393 9 view .LVU448
 1778 0830 000053E3 		cmp	r3, #0	@ _13,
 1779              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1780              		.loc 1 393 16 view .LVU449
 1781 0834 0040A0C3 		movgt	r4, #0	@ xx,
 1782              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1783              		.loc 1 393 9 view .LVU450
 1784 0838 0F0000DA 		ble	.L99		@,
 1785              	.LVL121:
 1786              	.L98:
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1787              		.loc 1 394 13 is_stmt 1 discriminator 3 view .LVU451
 1788              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1789              		.loc 1 394 29 is_stmt 0 discriminator 3 view .LVU452
 1790 083c 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 1791              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1792              		.loc 1 397 13 discriminator 3 view .LVU453
 1793 0840 0910A0E1 		mov	r1, r9	@, tmp152
 1794 0844 0700A0E1 		mov	r0, r7	@, fp
 1795              	@ armwave.c:394:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 394:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1796              		.loc 1 394 18 discriminator 3 view .LVU454
 1797 0848 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 1798              	.LVL122:
 1799              		.loc 1 397 13 is_stmt 1 discriminator 3 view .LVU455
 1800              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1801              		.loc 1 393 58 is_stmt 0 discriminator 3 view .LVU456
 1802 084c 014084E2 		add	r4, r4, #1	@ xx, xx,
 1803              	.LVL123:
 1804              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1805              		.loc 1 397 81 discriminator 3 view .LVU457
 1806 0850 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 1807              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1808              		.loc 1 397 61 discriminator 3 view .LVU458
 1809 0854 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 1810              	@ armwave.c:397:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1811              		.loc 1 397 13 discriminator 3 view .LVU459
 1812 0858 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 1813 085c 7330EFE6 		uxtb	r3, r3	@, tmp142
 1814 0860 00C08DE5 		str	ip, [sp]	@ tmp147,
 1815 0864 7220EFE6 		uxtb	r2, r2	@, data
 1816              	.LVL124:
 1817              		.loc 1 397 13 discriminator 3 view .LVU460
 1818 0868 FEFFFFEB 		bl	fprintf		@
 1819              	.LVL125:
 1820              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1821              		.loc 1 393 41 discriminator 3 view .LVU461
 1822 086c 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 1823              	@ armwave.c:393:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 393:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1824              		.loc 1 393 9 discriminator 3 view .LVU462
 1825 0870 040053E1 		cmp	r3, r4	@ _13, xx
 1826 0874 F0FFFFCA 		bgt	.L98		@,
 1827 0878 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 1828              	.LVL126:
 1829              	.L99:
 1830              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1831              		.loc 1 392 55 discriminator 2 view .LVU463
 1832 087c 015085E2 		add	r5, r5, #1	@ yy, yy,
 1833              	.LVL127:
 1834              	@ armwave.c:392:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 392:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1835              		.loc 1 392 5 discriminator 2 view .LVU464
 1836 0880 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 1837 0884 E9FFFFBA 		blt	.L97		@,
 1838              	.LVL128:
 1839              	.L96:
 398:armwave.c     ****         }
 399:armwave.c     ****     }
 400:armwave.c     **** 
 401:armwave.c     ****     fclose(fp);
 1840              		.loc 1 401 5 is_stmt 1 view .LVU465
 1841 0888 0700A0E1 		mov	r0, r7	@, fp
 1842              	@ armwave.c:402: }
 402:armwave.c     **** }
 1843              		.loc 1 402 1 is_stmt 0 view .LVU466
 1844 088c 0CD08DE2 		add	sp, sp, #12	@,,
 1845              		.cfi_def_cfa_offset 28
 1846              		@ sp needed	@
 1847 0890 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1848              		.cfi_restore 14
 1849              		.cfi_restore 9
 1850              		.cfi_restore 8
 1851              		.cfi_restore 7
 1852              		.cfi_restore 6
 1853              		.cfi_restore 5
 1854              		.cfi_restore 4
 1855              		.cfi_def_cfa_offset 0
 1856              	.LVL129:
 1857              	@ armwave.c:401:     fclose(fp);
 401:armwave.c     **** }
 1858              		.loc 1 401 5 view .LVU467
 1859 0894 FEFFFFEA 		b	fclose		@
 1860              	.LVL130:
 1861              	.L104:
 401:armwave.c     **** }
 1862              		.loc 1 401 5 view .LVU468
 1863              		.align	2
 1864              	.L103:
 1865 0898 C4020000 		.word	.LC19
 1866 089c 00000000 		.word	g_armwave_state
 1867 08a0 C8020000 		.word	.LC20
 1868 08a4 CC020000 		.word	.LC21
 1869 08a8 D4020000 		.word	.LC22
 1870 08ac DC020000 		.word	.LC23
 1871              		.cfi_endproc
 1872              	.LFE68:
 1874              		.align	2
 1875              		.global	armwave_test_init
 1876              		.syntax unified
 1877              		.arm
 1878              		.fpu vfp
 1880              	armwave_test_init:
 1881              	.LVL131:
 1882              	.LFB69:
 403:armwave.c     **** 
 404:armwave.c     **** /*
 405:armwave.c     ****  * Initialise some test functionry.
 406:armwave.c     ****  */
 407:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 408:armwave.c     **** {
 1883              		.loc 1 408 1 is_stmt 1 view -0
 1884              		.cfi_startproc
 1885              		@ args = 0, pretend = 0, frame = 0
 1886              		@ frame_needed = 0, uses_anonymous_args = 0
 409:armwave.c     ****     test_create_gamma();
 1887              		.loc 1 409 5 view .LVU470
 1888              	.LBB12:
 1889              	.LBI12:
  34:armwave.c     **** {
 1890              		.loc 1 34 6 view .LVU471
  34:armwave.c     **** {
 1891              		.loc 1 34 6 is_stmt 0 view .LVU472
 1892              	.LBE12:
 1893              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1894              		.loc 1 408 1 view .LVU473
 1895 08b0 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 1896              		.cfi_def_cfa_offset 32
 1897              		.cfi_offset 4, -32
 1898              		.cfi_offset 5, -28
 1899              		.cfi_offset 6, -24
 1900              		.cfi_offset 7, -20
 1901              		.cfi_offset 8, -16
 1902              		.cfi_offset 9, -12
 1903              		.cfi_offset 10, -8
 1904              		.cfi_offset 14, -4
 1905 08b4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1906              		.cfi_def_cfa_offset 56
 1907              		.cfi_offset 80, -56
 1908              		.cfi_offset 81, -52
 1909              		.cfi_offset 82, -48
 1910              		.cfi_offset 83, -44
 1911              		.cfi_offset 84, -40
 1912              		.cfi_offset 85, -36
 1913 08b8 BC409FE5 		ldr	r4, .L109+20	@ ivtmp.81,
 1914              	.LBB15:
 1915              	.LBB13:
 1916              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1917              		.loc 1 40 32 view .LVU474
 1918 08bc 2DAA9FED 		vldr.32	s20, .L109+16	@ tmp136,
 1919              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1920              		.loc 1 40 26 view .LVU475
 1921 08c0 289B9FED 		vldr.64	d9, .L109	@ tmp151,
 1922              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1923              		.loc 1 40 49 view .LVU476
 1924 08c4 298B9FED 		vldr.64	d8, .L109+8	@ tmp139,
 1925 08c8 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.81,
 1926              	.LBE13:
 1927              	.LBE15:
 1928              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1929              		.loc 1 408 1 view .LVU477
 1930 08cc 10D04DE2 		sub	sp, sp, #16	@,,
 1931              		.cfi_def_cfa_offset 72
 1932              	@ armwave.c:408: {
 408:armwave.c     ****     test_create_gamma();
 1933              		.loc 1 408 1 view .LVU478
 1934 08d0 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 1935 08d4 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 1936 08d8 0280A0E1 		mov	r8, r2	@ render_width, render_width
 1937 08dc 0390A0E1 		mov	r9, r3	@ render_height, render_height
 1938 08e0 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.81,
 1939 08e4 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 1940              	.LVL132:
 1941              	.L106:
 1942              	.LBB16:
 1943              	.LBB14:
  40:armwave.c     ****     }
 1944              		.loc 1 40 9 is_stmt 1 view .LVU479
 1945              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1946              		.loc 1 40 32 is_stmt 0 view .LVU480
 1947 08e8 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.81
 1948              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1949              		.loc 1 40 26 view .LVU481
 1950 08ec 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 1951              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1952              		.loc 1 40 32 view .LVU482
 1953 08f0 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 1954 08f4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 1955 08f8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 1956              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1957              		.loc 1 40 26 view .LVU483
 1958 08fc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 1959 0900 FEFFFFEB 		bl	pow		@
 1960              	.LVL133:
 1961              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1962              		.loc 1 40 49 view .LVU484
 1963 0904 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 1964              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 1965              		.loc 1 40 24 view .LVU485
 1966 0908 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 1967 090c 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 1968 0910 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 1969              	.LVL134:
 1970              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1971              		.loc 1 39 5 view .LVU486
 1972 0914 0A0054E1 		cmp	r4, r10	@ ivtmp.81, _39
 1973 0918 F2FFFF1A 		bne	.L106		@,
 1974              	.LVL135:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1975              		.loc 1 39 5 view .LVU487
 1976              	.LBE14:
 1977              	.LBE16:
 410:armwave.c     **** 
 411:armwave.c     ****     // make ch1 yellowish by default
 412:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 1978              		.loc 1 412 5 is_stmt 1 view .LVU488
 1979              	.LBB17:
 1980              	.LBI17:
 365:armwave.c     **** {
 1981              		.loc 1 365 6 view .LVU489
 1982              	.LBB18:
 368:armwave.c     ****         case 1:
 1983              		.loc 1 368 5 view .LVU490
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1984              		.loc 1 370 13 view .LVU491
 371:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1985              		.loc 1 371 13 view .LVU492
 1986              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1987              		.loc 1 370 41 is_stmt 0 view .LVU493
 1988 091c 5CC09FE5 		ldr	ip, .L109+24	@ tmp142,
 1989 0920 5C409FE5 		ldr	r4, .L109+28	@ tmp143,
 1990              	.LBE18:
 1991              	.LBE17:
 1992              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 413:armwave.c     **** 
 414:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 1993              		.loc 1 414 5 view .LVU494
 1994 0924 0000A0E3 		mov	r0, #0	@ tmp147,
 1995              	.LBB22:
 1996              	.LBB19:
 1997              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 1998              		.loc 1 372 41 view .LVU495
 1999 0928 FAE0A0E3 		mov	lr, #250	@ tmp146,
 2000              	.LBE19:
 2001              	.LBE22:
 2002              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2003              		.loc 1 414 5 view .LVU496
 2004 092c 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2005 0930 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2006 0934 00808DE5 		str	r8, [sp]	@ render_width,
 2007 0938 0610A0E1 		mov	r1, r6	@, tmp3
 2008 093c 0720A0E1 		mov	r2, r7	@, nwaves
 2009              	.LBB23:
 2010              	.LBB20:
 2011              	@ armwave.c:370:             g_armwave_state.ch1_color.r = r;
 370:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2012              		.loc 1 370 41 view .LVU497
 2013 0940 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 372:armwave.c     ****             break;
 2014              		.loc 1 372 13 is_stmt 1 view .LVU498
 2015              	.LBE20:
 2016              	.LBE23:
 2017              	@ armwave.c:414:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2018              		.loc 1 414 5 is_stmt 0 view .LVU499
 2019 0944 0630A0E1 		mov	r3, r6	@, wave_size
 2020              	.LBB24:
 2021              	.LBB21:
 2022              	@ armwave.c:372:             g_armwave_state.ch1_color.b = b;
 372:armwave.c     ****             break;
 2023              		.loc 1 372 41 view .LVU500
 2024 0948 B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 373:armwave.c     ****     }
 2025              		.loc 1 373 13 is_stmt 1 view .LVU501
 2026              	.LVL136:
 373:armwave.c     ****     }
 2027              		.loc 1 373 13 is_stmt 0 view .LVU502
 2028              	.LBE21:
 2029              	.LBE24:
 2030              		.loc 1 414 5 is_stmt 1 view .LVU503
 2031 094c FEFFFFEB 		bl	armwave_setup_render		@
 2032              	.LVL137:
 415:armwave.c     **** 
 416:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2033              		.loc 1 416 5 view .LVU504
 2034 0950 30109FE5 		ldr	r1, .L109+32	@,
 2035 0954 30009FE5 		ldr	r0, .L109+36	@,
 2036              	@ armwave.c:417: }
 417:armwave.c     **** }
 2037              		.loc 1 417 1 is_stmt 0 view .LVU505
 2038 0958 10D08DE2 		add	sp, sp, #16	@,,
 2039              		.cfi_def_cfa_offset 56
 2040              		@ sp needed	@
 2041 095c 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2042              		.cfi_restore 84
 2043              		.cfi_restore 85
 2044              		.cfi_restore 82
 2045              		.cfi_restore 83
 2046              		.cfi_restore 80
 2047              		.cfi_restore 81
 2048              		.cfi_def_cfa_offset 32
 2049 0960 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2050              		.cfi_restore 14
 2051              		.cfi_restore 10
 2052              		.cfi_restore 9
 2053              		.cfi_restore 8
 2054              		.cfi_restore 7
 2055              		.cfi_restore 6
 2056              		.cfi_restore 5
 2057              		.cfi_restore 4
 2058              		.cfi_def_cfa_offset 0
 2059              	.LVL138:
 2060              	@ armwave.c:416:     printf("armwave version: %s\n", ARMWAVE_VER);
 416:armwave.c     **** }
 2061              		.loc 1 416 5 view .LVU506
 2062 0964 FEFFFFEA 		b	printf		@
 2063              	.LVL139:
 2064              	.L110:
 2065              		.align	3
 2066              	.L109:
 2067 0968 000000C0 		.word	-1073741824
 2068 096c CCCCEC3F 		.word	1072483532
 2069 0970 00000000 		.word	0
 2070 0974 00E06F40 		.word	1081073664
 2071 0978 00007F43 		.word	1132396544
 2072 097c FFFFFFFF 		.word	gamma_table-1
 2073 0980 00000000 		.word	g_armwave_state
 2074 0984 F609F406 		.word	116656630
 2075 0988 00000000 		.word	.LC0
 2076 098c 08000000 		.word	.LC1
 2077              		.cfi_endproc
 2078              	.LFE69:
 2080              		.align	2
 2081              		.global	armwave_test_fill_outbuf
 2082              		.syntax unified
 2083              		.arm
 2084              		.fpu vfp
 2086              	armwave_test_fill_outbuf:
 2087              	.LFB70:
 418:armwave.c     **** 
 419:armwave.c     **** /*
 420:armwave.c     ****  * Render image to the local allocated buffer.
 421:armwave.c     ****  */
 422:armwave.c     **** void armwave_test_fill_outbuf()
 423:armwave.c     **** {
 2088              		.loc 1 423 1 is_stmt 1 view -0
 2089              		.cfi_startproc
 2090              		@ args = 0, pretend = 0, frame = 0
 2091              		@ frame_needed = 0, uses_anonymous_args = 0
 2092              		@ link register save eliminated.
 424:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2093              		.loc 1 424 5 view .LVU508
 2094 0990 04309FE5 		ldr	r3, .L112	@ tmp111,
 2095 0994 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2096 0998 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2097              	.LVL140:
 2098              	.L113:
 2099              		.align	2
 2100              	.L112:
 2101 099c 00000000 		.word	g_armwave_state
 2102              		.cfi_endproc
 2103              	.LFE70:
 2105              		.align	2
 2106              		.global	armwave_test_dump_buffer_to_ppm
 2107              		.syntax unified
 2108              		.arm
 2109              		.fpu vfp
 2111              	armwave_test_dump_buffer_to_ppm:
 2112              	.LVL141:
 2113              	.LFB71:
 425:armwave.c     **** }
 426:armwave.c     **** 
 427:armwave.c     **** /*
 428:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 429:armwave.c     ****  */
 430:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 431:armwave.c     **** {
 2114              		.loc 1 431 1 view -0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 432:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2119              		.loc 1 432 5 view .LVU510
 2120 09a0 08309FE5 		ldr	r3, .L115	@ tmp112,
 2121 09a4 0010A0E1 		mov	r1, r0	@, fn
 2122 09a8 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2123              	.LVL142:
 2124              		.loc 1 432 5 is_stmt 0 view .LVU511
 2125 09ac FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2126              	.LVL143:
 2127              	.L116:
 2128              		.loc 1 432 5 view .LVU512
 2129              		.align	2
 2130              	.L115:
 2131 09b0 00000000 		.word	g_armwave_state
 2132              		.cfi_endproc
 2133              	.LFE71:
 2135              		.align	2
 2136              		.global	armwave_test_fill_gdkbuf
 2137              		.syntax unified
 2138              		.arm
 2139              		.fpu vfp
 2141              	armwave_test_fill_gdkbuf:
 2142              	.LVL144:
 2143              	.LFB72:
 433:armwave.c     **** }
 434:armwave.c     **** 
 435:armwave.c     **** /*
 436:armwave.c     ****  * Render GDK buffer with test funtionry.
 437:armwave.c     ****  */
 438:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 439:armwave.c     **** {
 2144              		.loc 1 439 1 is_stmt 1 view -0
 2145              		.cfi_startproc
 2146              		@ args = 0, pretend = 0, frame = 0
 2147              		@ frame_needed = 0, uses_anonymous_args = 0
 2148              		@ link register save eliminated.
 440:armwave.c     ****     //PyObject *mv;
 441:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 442:armwave.c     **** 
 443:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 444:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2149              		.loc 1 444 5 view .LVU514
 445:armwave.c     ****     
 446:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 447:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2150              		.loc 1 447 5 view .LVU515
 2151              	@ armwave.c:444:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 444:armwave.c     ****     
 2152              		.loc 1 444 11 is_stmt 0 view .LVU516
 2153 09b4 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2154              	@ armwave.c:447:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2155              		.loc 1 447 5 view .LVU517
 2156 09b8 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2157              	.LVL145:
 2158              		.loc 1 447 5 view .LVU518
 2159 09bc FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2160              	.LVL146:
 2161              		.loc 1 447 5 view .LVU519
 2162              		.cfi_endproc
 2163              	.LFE72:
 2165              		.align	2
 2166              		.global	armwave_test_buffer_alloc
 2167              		.syntax unified
 2168              		.arm
 2169              		.fpu vfp
 2171              	armwave_test_buffer_alloc:
 2172              	.LVL147:
 2173              	.LFB73:
 448:armwave.c     **** }
 449:armwave.c     **** 
 450:armwave.c     **** /*
 451:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 452:armwave.c     ****  */
 453:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 454:armwave.c     **** {
 2174              		.loc 1 454 1 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 455:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2178              		.loc 1 455 5 view .LVU521
 2179              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2180              		.loc 1 454 1 is_stmt 0 view .LVU522
 2181 09c0 70402DE9 		push	{r4, r5, r6, lr}	@
 2182              		.cfi_def_cfa_offset 16
 2183              		.cfi_offset 4, -16
 2184              		.cfi_offset 5, -12
 2185              		.cfi_offset 6, -8
 2186              		.cfi_offset 14, -4
 2187              	@ armwave.c:454: {
 454:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2188              		.loc 1 454 1 view .LVU523
 2189 09c4 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2190              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2191              		.loc 1 455 23 view .LVU524
 2192 09c8 44409FE5 		ldr	r4, .L125	@ tmp128,
 2193 09cc 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2194              	.LVL148:
 2195              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 2196              		.loc 1 455 7 view .LVU525
 2197 09d0 000050E3 		cmp	r0, #0	@ _1,
 2198 09d4 0000000A 		beq	.L119		@,
 456:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2199              		.loc 1 456 9 is_stmt 1 view .LVU526
 2200 09d8 FEFFFFEB 		bl	free		@
 2201              	.LVL149:
 2202              	.L119:
 457:armwave.c     ****     }
 458:armwave.c     **** 
 459:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 460:armwave.c     **** 
 461:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2203              		.loc 1 461 5 view .LVU527
 2204              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2205              		.loc 1 461 75 is_stmt 0 view .LVU528
 2206 09dc 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2207 09e0 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2208              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2209              		.loc 1 461 40 view .LVU529
 2210 09e4 0610A0E1 		mov	r1, r6	@, nsets
 2211              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2212              		.loc 1 461 75 view .LVU530
 2213 09e8 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2214              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2215              		.loc 1 461 40 view .LVU531
 2216 09ec 0500A0E1 		mov	r0, r5	@, _4
 2217 09f0 FEFFFFEB 		bl	calloc		@
 2218              	.LVL150:
 2219              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 462:armwave.c     **** 
 463:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2220              		.loc 1 463 7 view .LVU532
 2221 09f4 000050E3 		cmp	r0, #0	@ tmp124,
 2222              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2223              		.loc 1 461 38 view .LVU533
 2224 09f8 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2225              		.loc 1 463 5 is_stmt 1 view .LVU534
 2226              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 2227              		.loc 1 463 7 is_stmt 0 view .LVU535
 2228 09fc 7080BD18 		popne	{r4, r5, r6, pc}	@
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2229              		.loc 1 464 9 is_stmt 1 view .LVU536
 2230 0a00 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2231 0a04 0620A0E1 		mov	r2, r6	@, nsets
 2232 0a08 08009FE5 		ldr	r0, .L125+4	@,
 2233              	@ armwave.c:468: }
 465:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 466:armwave.c     ****         return;
 467:armwave.c     ****     }
 468:armwave.c     **** }
 2234              		.loc 1 468 1 is_stmt 0 view .LVU537
 2235 0a0c 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2236              		.cfi_restore 14
 2237              		.cfi_restore 6
 2238              		.cfi_restore 5
 2239              		.cfi_restore 4
 2240              		.cfi_def_cfa_offset 0
 2241              	.LVL151:
 2242              	@ armwave.c:464:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2243              		.loc 1 464 9 view .LVU538
 2244 0a10 FEFFFFEA 		b	printf		@
 2245              	.LVL152:
 2246              	.L126:
 464:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2247              		.loc 1 464 9 view .LVU539
 2248              		.align	2
 2249              	.L125:
 2250 0a14 00000000 		.word	g_armwave_state
 2251 0a18 EC020000 		.word	.LC24
 2252              		.cfi_endproc
 2253              	.LFE73:
 2255              		.align	2
 2256              		.global	armwave_fill_pixbuf_into_pybuffer
 2257              		.syntax unified
 2258              		.arm
 2259              		.fpu vfp
 2261              	armwave_fill_pixbuf_into_pybuffer:
 2262              	.LVL153:
 2263              	.LFB74:
 469:armwave.c     **** 
 470:armwave.c     **** /*
 471:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 472:armwave.c     ****  */
 473:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 474:armwave.c     **** {
 2264              		.loc 1 474 1 is_stmt 1 view -0
 2265              		.cfi_startproc
 2266              		@ args = 0, pretend = 0, frame = 48
 2267              		@ frame_needed = 0, uses_anonymous_args = 0
 475:armwave.c     ****     Py_buffer buffer;
 2268              		.loc 1 475 5 view .LVU541
 476:armwave.c     ****     int ret;
 2269              		.loc 1 476 5 view .LVU542
 477:armwave.c     **** 
 478:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 479:armwave.c     **** 
 480:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2270              		.loc 1 480 5 view .LVU543
 2271              	@ armwave.c:474: {
 474:armwave.c     ****     Py_buffer buffer;
 2272              		.loc 1 474 1 is_stmt 0 view .LVU544
 2273 0a1c 04E02DE5 		str	lr, [sp, #-4]!	@,
 2274              		.cfi_def_cfa_offset 4
 2275              		.cfi_offset 14, -4
 2276 0a20 34D04DE2 		sub	sp, sp, #52	@,,
 2277              		.cfi_def_cfa_offset 56
 2278              	@ armwave.c:480:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2279              		.loc 1 480 11 view .LVU545
 2280 0a24 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2281 0a28 0120A0E3 		mov	r2, #1	@,
 2282 0a2c FEFFFFEB 		bl	PyObject_GetBuffer		@
 2283              	.LVL154:
 481:armwave.c     **** 
 482:armwave.c     ****     if(ret != 0) {
 2284              		.loc 1 482 5 is_stmt 1 view .LVU546
 2285              	@ armwave.c:482:     if(ret != 0) {
 2286              		.loc 1 482 7 is_stmt 0 view .LVU547
 2287 0a30 000050E3 		cmp	r0, #0	@,
 2288 0a34 0A00001A 		bne	.L131		@,
 483:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 484:armwave.c     ****         Py_RETURN_FALSE;
 485:armwave.c     ****     }
 486:armwave.c     **** 
 487:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 488:armwave.c     **** 
 489:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2289              		.loc 1 489 5 is_stmt 1 view .LVU548
 2290 0a38 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2291              	.LVL155:
 2292              		.loc 1 489 5 is_stmt 0 view .LVU549
 2293 0a3c FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2294              	.LVL156:
 490:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 491:armwave.c     **** 
 492:armwave.c     ****     PyBuffer_Release(&buffer);
 2295              		.loc 1 492 5 is_stmt 1 view .LVU550
 2296 0a40 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2297 0a44 FEFFFFEB 		bl	PyBuffer_Release		@
 2298              	.LVL157:
 493:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 494:armwave.c     **** 
 495:armwave.c     ****     Py_RETURN_TRUE;
 2299              		.loc 1 495 5 view .LVU551
 2300              	.LBB25:
 2301              	.LBI25:
 2302              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2303              		.loc 2 456 20 view .LVU552
 2304              	.LBB26:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2305              		.loc 2 458 21 view .LVU553
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2306              		.loc 2 459 5 view .LVU554
 2307              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2308              		.loc 2 459 18 is_stmt 0 view .LVU555
 2309 0a48 38309FE5 		ldr	r3, .L132	@ tmp126,
 2310              	.LBE26:
 2311              	.LBE25:
 2312              	@ armwave.c:495:     Py_RETURN_TRUE;
 2313              		.loc 1 495 5 view .LVU556
 2314 0a4c 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2315              	.LBB28:
 2316              	.LBB27:
 2317              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2318              		.loc 2 459 18 view .LVU557
 2319 0a50 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2320 0a54 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2321 0a58 002083E5 		str	r2, [r3]	@ tmp128,
 2322              	.LBE27:
 2323              	.LBE28:
 2324              	@ armwave.c:496: }
 496:armwave.c     **** }
 2325              		.loc 1 496 1 view .LVU558
 2326 0a5c 34D08DE2 		add	sp, sp, #52	@,,
 2327              		.cfi_remember_state
 2328              		.cfi_def_cfa_offset 4
 2329              		@ sp needed	@
 2330 0a60 04F09DE4 		ldr	pc, [sp], #4	@
 2331              	.LVL158:
 2332              	.L131:
 2333              		.cfi_restore_state
 483:armwave.c     ****         Py_RETURN_FALSE;
 2334              		.loc 1 483 9 is_stmt 1 view .LVU559
 2335 0a64 20009FE5 		ldr	r0, .L132+4	@,
 2336              	.LVL159:
 483:armwave.c     ****         Py_RETURN_FALSE;
 2337              		.loc 1 483 9 is_stmt 0 view .LVU560
 2338 0a68 FEFFFFEB 		bl	puts		@
 2339              	.LVL160:
 484:armwave.c     ****     }
 2340              		.loc 1 484 9 is_stmt 1 view .LVU561
 2341              	.LBB29:
 2342              	.LBI29:
 456:/usr/local/include/python3.8/object.h **** {
 2343              		.loc 2 456 20 view .LVU562
 2344              	.LBB30:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2345              		.loc 2 458 21 view .LVU563
 2346              		.loc 2 459 5 view .LVU564
 2347              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2348              		.loc 2 459 18 is_stmt 0 view .LVU565
 2349 0a6c 1C309FE5 		ldr	r3, .L132+8	@ tmp120,
 2350              	.LBE30:
 2351              	.LBE29:
 2352              	@ armwave.c:484:         Py_RETURN_FALSE;
 484:armwave.c     ****     }
 2353              		.loc 1 484 9 view .LVU566
 2354 0a70 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2355              	.LBB32:
 2356              	.LBB31:
 2357              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2358              		.loc 2 459 18 view .LVU567
 2359 0a74 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2360 0a78 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2361 0a7c 002083E5 		str	r2, [r3]	@ tmp122,
 2362              	.LBE31:
 2363              	.LBE32:
 2364              	@ armwave.c:496: }
 2365              		.loc 1 496 1 view .LVU568
 2366 0a80 34D08DE2 		add	sp, sp, #52	@,,
 2367              		.cfi_def_cfa_offset 4
 2368              		@ sp needed	@
 2369 0a84 04F09DE4 		ldr	pc, [sp], #4	@
 2370              	.L133:
 2371              		.align	2
 2372              	.L132:
 2373 0a88 00000000 		.word	_Py_TrueStruct
 2374 0a8c 40030000 		.word	.LC25
 2375 0a90 00000000 		.word	_Py_FalseStruct
 2376              		.cfi_endproc
 2377              	.LFE74:
 2379              		.align	2
 2380              		.global	armwave_test_create_am_sine
 2381              		.syntax unified
 2382              		.arm
 2383              		.fpu vfp
 2385              	armwave_test_create_am_sine:
 2386              	.LVL161:
 2387              	.LFB75:
 497:armwave.c     **** 
 498:armwave.c     **** /*
 499:armwave.c     ****  * Make a test AM waveform for render tests.
 500:armwave.c     ****  *
 501:armwave.c     ****  * @param   mod                     modulation depth
 502:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 503:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 504:armwave.c     ****  */
 505:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 506:armwave.c     **** {
 2388              		.loc 1 506 1 is_stmt 1 view -0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 8
 2391              		@ frame_needed = 0, uses_anonymous_args = 0
 507:armwave.c     ****     float v, noise, xnoise, mod_val;
 2392              		.loc 1 507 5 view .LVU570
 508:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2393              		.loc 1 508 5 view .LVU571
 2394              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2395              		.loc 1 506 1 is_stmt 0 view .LVU572
 2396 0a94 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2397              		.cfi_def_cfa_offset 32
 2398              		.cfi_offset 4, -32
 2399              		.cfi_offset 5, -28
 2400              		.cfi_offset 6, -24
 2401              		.cfi_offset 7, -20
 2402              		.cfi_offset 8, -16
 2403              		.cfi_offset 9, -12
 2404              		.cfi_offset 10, -8
 2405              		.cfi_offset 14, -4
 2406              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2407              		.loc 1 508 38 view .LVU573
 2408 0a98 7A7A9FED 		vldr.32	s14, .L165	@ tmp180,
 2409              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2410              		.loc 1 508 55 view .LVU574
 2411 0a9c 00529FE5 		ldr	r5, .L165+28	@ tmp250,
 2412              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2413              		.loc 1 506 1 view .LVU575
 2414 0aa0 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2415              		.cfi_def_cfa_offset 80
 2416              		.cfi_offset 80, -80
 2417              		.cfi_offset 81, -76
 2418              		.cfi_offset 82, -72
 2419              		.cfi_offset 83, -68
 2420              		.cfi_offset 84, -64
 2421              		.cfi_offset 85, -60
 2422              		.cfi_offset 86, -56
 2423              		.cfi_offset 87, -52
 2424              		.cfi_offset 88, -48
 2425              		.cfi_offset 89, -44
 2426              		.cfi_offset 90, -40
 2427              		.cfi_offset 91, -36
 2428 0aa4 0090A0E1 		mov	r9, r0	@ sets, sets
 2429              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2430              		.loc 1 508 38 view .LVU576
 2431 0aa8 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2432              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 509:armwave.c     ****     int s, set_offset = 0;
 510:armwave.c     ****     int w, x;
 511:armwave.c     **** 
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2433              		.loc 1 512 70 view .LVU577
 2434 0aac 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2435 0ab0 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2436              	.LBB35:
 2437              	.LBB36:
 2438              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2439              		.loc 1 455 23 view .LVU578
 2440 0ab4 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2441              	.LVL162:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2442              		.loc 1 455 23 view .LVU579
 2443              	.LBE36:
 2444              	.LBE35:
 2445              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2446              		.loc 1 508 38 view .LVU580
 2447 0ab8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2448              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2449              		.loc 1 512 70 view .LVU581
 2450 0abc 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2451              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2452              		.loc 1 506 1 view .LVU582
 2453 0ac0 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2454              	.LBB40:
 2455              	.LBB37:
 2456              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2457              		.loc 1 455 7 view .LVU583
 2458 0ac4 000050E3 		cmp	r0, #0	@ _82,
 2459              	.LBE37:
 2460              	.LBE40:
 2461              	@ armwave.c:506: {
 506:armwave.c     ****     float v, noise, xnoise, mod_val;
 2462              		.loc 1 506 1 view .LVU584
 2463 0ac8 08D04DE2 		sub	sp, sp, #8	@,,
 2464              		.cfi_def_cfa_offset 88
 2465              	@ armwave.c:513:     g_armwave_state.test_wave_buffer_nsets = sets;
 513:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2466              		.loc 1 513 44 view .LVU585
 2467 0acc 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2468              	@ armwave.c:512:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2469              		.loc 1 512 45 view .LVU586
 2470 0ad0 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2471              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2472              		.loc 1 508 38 view .LVU587
 2473 0ad4 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2474              	@ armwave.c:508:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 508:armwave.c     ****     int s, set_offset = 0;
 2475              		.loc 1 508 11 view .LVU588
 2476 0ad8 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2477              	.LVL163:
 509:armwave.c     ****     int w, x;
 2478              		.loc 1 509 5 is_stmt 1 view .LVU589
 510:armwave.c     **** 
 2479              		.loc 1 510 5 view .LVU590
 512:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2480              		.loc 1 512 5 view .LVU591
 2481              		.loc 1 513 5 view .LVU592
 514:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2482              		.loc 1 514 5 view .LVU593
 2483              	.LBB41:
 2484              	.LBI35:
 453:armwave.c     **** {
 2485              		.loc 1 453 6 view .LVU594
 2486              	.LBB38:
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2487              		.loc 1 455 5 view .LVU595
 2488              	@ armwave.c:455:     if(g_armwave_state.test_wave_buffer != NULL) {
 455:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2489              		.loc 1 455 7 is_stmt 0 view .LVU596
 2490 0adc 0000000A 		beq	.L135		@,
 456:armwave.c     ****     }
 2491              		.loc 1 456 9 is_stmt 1 view .LVU597
 2492 0ae0 FEFFFFEB 		bl	free		@
 2493              	.LVL164:
 2494              	.L135:
 461:armwave.c     **** 
 2495              		.loc 1 461 5 view .LVU598
 2496              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2497              		.loc 1 461 75 is_stmt 0 view .LVU599
 2498 0ae4 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2499 0ae8 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2500              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2501              		.loc 1 461 40 view .LVU600
 2502 0aec 0910A0E1 		mov	r1, r9	@, sets
 2503              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2504              		.loc 1 461 75 view .LVU601
 2505 0af0 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2506              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2507              		.loc 1 461 40 view .LVU602
 2508 0af4 0400A0E1 		mov	r0, r4	@, _85
 2509 0af8 FEFFFFEB 		bl	calloc		@
 2510              	.LVL165:
 2511              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2512              		.loc 1 463 7 view .LVU603
 2513 0afc 000050E3 		cmp	r0, #0	@ tmp191,
 2514              	@ armwave.c:461:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 461:armwave.c     **** 
 2515              		.loc 1 461 38 view .LVU604
 2516 0b00 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2517              		.loc 1 463 5 is_stmt 1 view .LVU605
 2518              	@ armwave.c:463:     if(g_armwave_state.test_wave_buffer == NULL) {
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2519              		.loc 1 463 7 is_stmt 0 view .LVU606
 2520 0b04 5A00000A 		beq	.L164		@,
 2521              	.L136:
 2522              	.LVL166:
 463:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2523              		.loc 1 463 7 view .LVU607
 2524              	.LBE38:
 2525              	.LBE41:
 2526              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 515:armwave.c     **** 
 516:armwave.c     ****     for(s = 0; s < sets; s++) {
 2527              		.loc 1 516 5 discriminator 1 view .LVU608
 2528 0b08 000059E3 		cmp	r9, #0	@ sets,
 2529 0b0c 550000DA 		ble	.L134		@,
 2530              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 518:armwave.c     ****     
 519:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 520:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 521:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 522:armwave.c     **** 
 523:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 524:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 525:armwave.c     ****                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 527:armwave.c     ****                 noise *= noise;
 528:armwave.c     **** 
 529:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 530:armwave.c     ****                     noise = -noise;
 531:armwave.c     **** 
 532:armwave.c     ****                 noise += 1.0f;
 533:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 534:armwave.c     **** 
 535:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2531              		.loc 1 535 45 view .LVU609
 2532 0b10 5C8A9FED 		vldr.32	s16, .L165	@ tmp258,
 2533              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 536:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 537:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 538:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2534              		.loc 1 538 104 view .LVU610
 2535 0b14 5CCA9FED 		vldr.32	s24, .L165+4	@ tmp259,
 2536              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2537              		.loc 1 516 5 view .LVU611
 2538 0b18 0070A0E3 		mov	r7, #0	@ set_offset,
 2539              	@ armwave.c:517:         printf("Calculating test set %d\n", s);
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2540              		.loc 1 517 9 view .LVU612
 2541 0b1c 84A19FE5 		ldr	r10, .L165+32	@ tmp257,
 2542              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2543              		.loc 1 516 5 view .LVU613
 2544 0b20 0780A0E1 		mov	r8, r7	@ s, set_offset
 2545              	.LVL167:
 2546              	.L137:
 517:armwave.c     ****         printf("Calculating test set %d\n", s);
 2547              		.loc 1 517 9 is_stmt 1 view .LVU614
 2548 0b24 0810A0E1 		mov	r1, r8	@, s
 2549 0b28 0A00A0E1 		mov	r0, r10	@, tmp257
 2550 0b2c FEFFFFEB 		bl	printf		@
 2551              	.LVL168:
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2552              		.loc 1 519 9 view .LVU615
 2553              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2554              		.loc 1 519 39 is_stmt 0 view .LVU616
 2555 0b30 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2556              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2557              		.loc 1 519 9 view .LVU617
 2558 0b34 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2559 0b38 450000DA 		ble	.L138		@,
 2560              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2561              		.loc 1 521 21 view .LVU618
 2562 0b3c 53CADFED 		vldr.32	s25, .L165+8	@ tmp200,
 2563              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2564              		.loc 1 535 33 view .LVU619
 2565 0b40 53BA9FED 		vldr.32	s22, .L165+12	@ tmp253,
 2566              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2567              		.loc 1 533 24 view .LVU620
 2568 0b44 53AADFED 		vldr.32	s21, .L165+16	@ tmp254,
 2569 0b48 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2570              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2571              		.loc 1 519 15 view .LVU621
 2572 0b4c 0060A0E3 		mov	r6, #0	@ w,
 2573              	.LVL169:
 2574              	.L145:
 521:armwave.c     **** 
 2575              		.loc 1 521 13 is_stmt 1 view .LVU622
 2576              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2577              		.loc 1 521 21 is_stmt 0 view .LVU623
 2578 0b50 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2579 0b54 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2580              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2581              		.loc 1 523 13 view .LVU624
 2582 0b58 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2583              	@ armwave.c:521:             mod_val = 0.5f + (_1_waves_mod * w);
 521:armwave.c     **** 
 2584              		.loc 1 521 21 view .LVU625
 2585 0b5c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2586 0b60 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2587              	.LVL170:
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2588              		.loc 1 523 13 is_stmt 1 view .LVU626
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2589              		.loc 1 523 13 is_stmt 0 view .LVU627
 2590 0b64 370000DA 		ble	.L139		@,
 2591 0b68 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2592              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2593              		.loc 1 538 113 view .LVU628
 2594 0b6c 4AAA9FED 		vldr.32	s20, .L165+20	@ tmp229,
 2595 0b70 4A8ADFED 		vldr.32	s17, .L165+24	@ tmp230,
 2596              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2597              		.loc 1 523 19 view .LVU629
 2598 0b74 0040A0E3 		mov	r4, #0	@ x,
 2599              	.LVL171:
 2600              	.L144:
 524:armwave.c     ****                 noise *= noise;
 2601              		.loc 1 524 17 is_stmt 1 view .LVU630
 2602              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2603              		.loc 1 524 28 is_stmt 0 view .LVU631
 2604 0b78 FEFFFFEB 		bl	rand		@
 2605              	.LVL172:
 2606              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2607              		.loc 1 524 35 view .LVU632
 2608 0b7c 7000FFE6 		uxth	r0, r0	@ tmp201,
 2609              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2610              		.loc 1 524 45 view .LVU633
 2611 0b80 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2612 0b84 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2613              	@ armwave.c:524:                 noise  = ((rand() & 0xffff) * noise_fraction);
 524:armwave.c     ****                 noise *= noise;
 2614              		.loc 1 524 24 view .LVU634
 2615 0b88 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2616              	.LVL173:
 525:armwave.c     ****                 noise *= noise;
 2617              		.loc 1 525 17 is_stmt 1 view .LVU635
 2618              	@ armwave.c:525:                 noise *= noise;
 525:armwave.c     ****                 noise *= noise;
 2619              		.loc 1 525 23 is_stmt 0 view .LVU636
 2620 0b8c A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2621              	.LVL174:
 526:armwave.c     ****                 noise *= noise;
 2622              		.loc 1 526 17 is_stmt 1 view .LVU637
 2623              	@ armwave.c:526:                 noise *= noise;
 526:armwave.c     ****                 noise *= noise;
 2624              		.loc 1 526 23 is_stmt 0 view .LVU638
 2625 0b90 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2626              	.LVL175:
 527:armwave.c     **** 
 2627              		.loc 1 527 17 is_stmt 1 view .LVU639
 2628              	@ armwave.c:527:                 noise *= noise;
 527:armwave.c     **** 
 2629              		.loc 1 527 23 is_stmt 0 view .LVU640
 2630 0b94 A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2631              	.LVL176:
 529:armwave.c     ****                     noise = -noise;
 2632              		.loc 1 529 17 is_stmt 1 view .LVU641
 2633              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2634              		.loc 1 529 21 is_stmt 0 view .LVU642
 2635 0b98 FEFFFFEB 		bl	rand		@
 2636              	.LVL177:
 530:armwave.c     **** 
 2637              		.loc 1 530 21 is_stmt 1 view .LVU643
 2638              	@ armwave.c:529:                 if((rand() & 0xffff) > 0x7fff)
 529:armwave.c     ****                     noise = -noise;
 2639              		.loc 1 529 19 is_stmt 0 view .LVU644
 2640 0b9c 020910E3 		tst	r0, #32768	@,
 2641              	@ armwave.c:530:                     noise = -noise;
 530:armwave.c     **** 
 2642              		.loc 1 530 27 view .LVU645
 2643 0ba0 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2644              	.LVL178:
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2645              		.loc 1 532 17 is_stmt 1 view .LVU646
 533:armwave.c     **** 
 2646              		.loc 1 533 17 view .LVU647
 2647              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2648              		.loc 1 533 27 is_stmt 0 view .LVU648
 2649 0ba4 FEFFFFEB 		bl	rand		@
 2650              	.LVL179:
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2651              		.loc 1 535 17 is_stmt 1 view .LVU649
 2652              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2653              		.loc 1 535 45 is_stmt 0 view .LVU650
 2654 0ba8 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2655              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2656              		.loc 1 535 33 view .LVU651
 2657 0bac 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2658              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2659              		.loc 1 535 45 view .LVU652
 2660 0bb0 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2661              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2662              		.loc 1 535 33 view .LVU653
 2663 0bb4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2664              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2665              		.loc 1 535 45 view .LVU654
 2666 0bb8 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2667              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2668              		.loc 1 535 33 view .LVU655
 2669 0bbc 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2670              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2671              		.loc 1 533 34 view .LVU656
 2672 0bc0 7000FFE6 		uxth	r0, r0	@ tmp214,
 2673              	.LVL180:
 2674              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2675              		.loc 1 533 44 view .LVU657
 2676 0bc4 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2677 0bc8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2678              	@ armwave.c:533:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 533:armwave.c     **** 
 2679              		.loc 1 533 24 view .LVU658
 2680 0bcc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2681              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2682              		.loc 1 535 77 view .LVU659
 2683 0bd0 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2684              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2685              		.loc 1 535 22 view .LVU660
 2686 0bd4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2687 0bd8 FEFFFFEB 		bl	sin		@
 2688              	.LVL181:
 2689              		.loc 1 538 17 is_stmt 1 view .LVU661
 2690              	@ armwave.c:532:                 noise += 1.0f;
 532:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2691              		.loc 1 532 23 is_stmt 0 view .LVU662
 2692 0bdc 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2693              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2694              		.loc 1 538 104 view .LVU663
 2695 0be0 0010A0E3 		mov	r1, #0	@ iftmp.26_50,
 2696              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2697              		.loc 1 535 98 view .LVU664
 2698 0be4 E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2699              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2700              		.loc 1 535 87 view .LVU665
 2701 0be8 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2702              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2703              		.loc 1 535 98 view .LVU666
 2704 0bec 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2705              	@ armwave.c:535:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 535:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2706              		.loc 1 535 19 view .LVU667
 2707 0bf0 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2708              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2709              		.loc 1 538 113 view .LVU668
 2710 0bf4 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2711 0bf8 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2712 0bfc C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2713 0c00 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2714 0c04 050000DA 		ble	.L141		@,
 2715              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2716              		.loc 1 538 104 discriminator 1 view .LVU669
 2717 0c08 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2718 0c0c FF10A0E3 		mov	r1, #255	@ iftmp.26_50,
 2719 0c10 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2720 0c14 E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2721 0c18 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2722 0c1c 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.26_50, %sfp
 2723              	.L141:
 2724              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2725              		.loc 1 538 57 discriminator 12 view .LVU670
 2726 0c20 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2727              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2728              		.loc 1 538 102 discriminator 12 view .LVU671
 2729 0c24 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2730 0c28 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2731 0c2c 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2732              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2733              		.loc 1 523 58 discriminator 12 view .LVU672
 2734 0c30 014084E2 		add	r4, r4, #1	@ x, x,
 2735              	.LVL182:
 2736              	@ armwave.c:538:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2737              		.loc 1 538 102 discriminator 12 view .LVU673
 2738 0c34 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.26_50, *_40
 2739              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2740              		.loc 1 523 43 discriminator 12 view .LVU674
 2741 0c38 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2742              	@ armwave.c:523:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 523:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2743              		.loc 1 523 13 discriminator 12 view .LVU675
 2744 0c3c 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2745 0c40 CCFFFFCA 		bgt	.L144		@,
 2746 0c44 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2747              	.LVL183:
 2748              	.L139:
 2749              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2750              		.loc 1 519 48 discriminator 2 view .LVU676
 2751 0c48 016086E2 		add	r6, r6, #1	@ w, w,
 2752              	.LVL184:
 2753              	@ armwave.c:519:         for(w = 0; w < g_armwave_state.waves; w++) {
 519:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2754              		.loc 1 519 9 discriminator 2 view .LVU677
 2755 0c4c 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2756 0c50 BEFFFFBA 		blt	.L145		@,
 2757              	.LVL185:
 2758              	.L138:
 539:armwave.c     ****             }
 540:armwave.c     ****         }
 541:armwave.c     **** 
 542:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2759              		.loc 1 542 9 is_stmt 1 discriminator 2 view .LVU678
 2760              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2761              		.loc 1 542 46 is_stmt 0 discriminator 2 view .LVU679
 2762 0c54 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2763              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2764              		.loc 1 516 27 discriminator 2 view .LVU680
 2765 0c58 018088E2 		add	r8, r8, #1	@ s, s,
 2766              	.LVL186:
 2767              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2768              		.loc 1 516 5 discriminator 2 view .LVU681
 2769 0c5c 080059E1 		cmp	r9, r8	@ sets, s
 2770              	@ armwave.c:542:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 2771              		.loc 1 542 20 discriminator 2 view .LVU682
 2772 0c60 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 2773              	.LVL187:
 2774              	@ armwave.c:516:     for(s = 0; s < sets; s++) {
 516:armwave.c     ****         printf("Calculating test set %d\n", s);
 2775              		.loc 1 516 5 discriminator 2 view .LVU683
 2776 0c64 AEFFFF1A 		bne	.L137		@,
 2777              	.LVL188:
 2778              	.L134:
 2779              	@ armwave.c:544: }
 543:armwave.c     ****     }
 544:armwave.c     **** }
 2780              		.loc 1 544 1 view .LVU684
 2781 0c68 08D08DE2 		add	sp, sp, #8	@,,
 2782              		.cfi_remember_state
 2783              		.cfi_def_cfa_offset 80
 2784              		@ sp needed	@
 2785 0c6c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 2786              		.cfi_restore 90
 2787              		.cfi_restore 91
 2788              		.cfi_restore 88
 2789              		.cfi_restore 89
 2790              		.cfi_restore 86
 2791              		.cfi_restore 87
 2792              		.cfi_restore 84
 2793              		.cfi_restore 85
 2794              		.cfi_restore 82
 2795              		.cfi_restore 83
 2796              		.cfi_restore 80
 2797              		.cfi_restore 81
 2798              		.cfi_def_cfa_offset 32
 2799              	.LVL189:
 2800              		.loc 1 544 1 view .LVU685
 2801 0c70 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 2802              	.LVL190:
 2803              	.L164:
 2804              		.cfi_restore_state
 2805              	.LBB42:
 2806              	.LBB39:
 464:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 2807              		.loc 1 464 9 is_stmt 1 view .LVU686
 2808 0c74 940901E0 		mul	r1, r4, r9	@, _85, sets
 2809 0c78 0920A0E1 		mov	r2, r9	@, sets
 2810 0c7c 28009FE5 		ldr	r0, .L165+36	@,
 2811 0c80 FEFFFFEB 		bl	printf		@
 2812              	.LVL191:
 466:armwave.c     ****     }
 2813              		.loc 1 466 9 view .LVU687
 2814 0c84 9FFFFFEA 		b	.L136		@
 2815              	.L166:
 2816              		.align	2
 2817              	.L165:
 2818 0c88 0000803F 		.word	1065353216
 2819 0c8c 00007F43 		.word	1132396544
 2820 0c90 0000003F 		.word	1056964608
 2821 0c94 C3F5C840 		.word	1086911939
 2822 0c98 38FFC74A 		.word	1254620984
 2823 0c9c 0000FE42 		.word	1123942400
 2824 0ca0 00000043 		.word	1124073472
 2825 0ca4 00000000 		.word	g_armwave_state
 2826 0ca8 94030000 		.word	.LC26
 2827 0cac EC020000 		.word	.LC24
 2828              	.LBE39:
 2829              	.LBE42:
 2830              		.cfi_endproc
 2831              	.LFE75:
 2833              		.align	2
 2834              		.global	armwave_cleanup
 2835              		.syntax unified
 2836              		.arm
 2837              		.fpu vfp
 2839              	armwave_cleanup:
 2840              	.LFB76:
 545:armwave.c     **** 
 546:armwave.c     **** /*
 547:armwave.c     ****  * Make a test square waveform.
 548:armwave.c     ****  *
 549:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 550:armwave.c     ****  */
 551:armwave.c     **** #if 0
 552:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 553:armwave.c     **** {
 554:armwave.c     ****     uint8_t v;
 555:armwave.c     ****     float noise, xnoise;
 556:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 557:armwave.c     ****     int w, x;
 558:armwave.c     **** 
 559:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 560:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 561:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 562:armwave.c     ****             noise *= noise;
 563:armwave.c     ****             noise *= noise;
 564:armwave.c     ****             noise *= noise;
 565:armwave.c     **** 
 566:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 567:armwave.c     ****                 noise = -noise;
 568:armwave.c     **** 
 569:armwave.c     ****             //noise += 1.0f;
 570:armwave.c     **** 
 571:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 572:armwave.c     ****                 new_level = 0.2f;
 573:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 574:armwave.c     ****                 new_level = 0.8f;
 575:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 576:armwave.c     ****                 new_level = 0.2f;
 577:armwave.c     ****             } else {
 578:armwave.c     ****                 new_level = 0.8f;
 579:armwave.c     ****             }
 580:armwave.c     **** 
 581:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 582:armwave.c     **** 
 583:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 584:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 585:armwave.c     ****         }
 586:armwave.c     ****     }
 587:armwave.c     **** }
 588:armwave.c     **** #endif
 589:armwave.c     **** 
 590:armwave.c     **** /*
 591:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 592:armwave.c     ****  */
 593:armwave.c     **** void armwave_cleanup()
 594:armwave.c     **** {
 2841              		.loc 1 594 1 view -0
 2842              		.cfi_startproc
 2843              		@ args = 0, pretend = 0, frame = 0
 2844              		@ frame_needed = 0, uses_anonymous_args = 0
 595:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2845              		.loc 1 595 5 view .LVU689
 2846              	@ armwave.c:594: {
 594:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 2847              		.loc 1 594 1 is_stmt 0 view .LVU690
 2848 0cb0 10402DE9 		push	{r4, lr}	@
 2849              		.cfi_def_cfa_offset 8
 2850              		.cfi_offset 4, -8
 2851              		.cfi_offset 14, -4
 2852              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2853              		.loc 1 595 25 view .LVU691
 2854 0cb4 34409FE5 		ldr	r4, .L169	@ tmp114,
 2855              	@ armwave.c:595:     free(g_armwave_state.out_pixbuf);
 2856              		.loc 1 595 5 view .LVU692
 2857 0cb8 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 2858 0cbc FEFFFFEB 		bl	free		@
 2859              	.LVL192:
 596:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 2860              		.loc 1 596 5 is_stmt 1 view .LVU693
 2861 0cc0 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2862 0cc4 FEFFFFEB 		bl	free		@
 2863              	.LVL193:
 597:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 2864              		.loc 1 597 5 view .LVU694
 2865 0cc8 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 2866 0ccc FEFFFFEB 		bl	free		@
 2867              	.LVL194:
 598:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 2868              		.loc 1 598 5 view .LVU695
 2869 0cd0 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 2870 0cd4 FEFFFFEB 		bl	free		@
 2871              	.LVL195:
 599:armwave.c     **** 
 600:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 2872              		.loc 1 600 5 view .LVU696
 2873              	@ armwave.c:600:     g_armwave_state.out_pixbuf = NULL;
 2874              		.loc 1 600 32 is_stmt 0 view .LVU697
 2875 0cd8 0030A0E3 		mov	r3, #0	@ tmp123,
 2876 0cdc 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 601:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 2877              		.loc 1 601 5 is_stmt 1 view .LVU698
 2878              	@ armwave.c:601:     g_armwave_state.ch1_buffer = NULL;
 2879              		.loc 1 601 32 is_stmt 0 view .LVU699
 2880 0ce0 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 602:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 2881              		.loc 1 602 5 is_stmt 1 view .LVU700
 2882              	@ armwave.c:602:     g_armwave_state.xcoord_to_xpixel = NULL;
 2883              		.loc 1 602 38 is_stmt 0 view .LVU701
 2884 0ce4 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 603:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 2885              		.loc 1 603 5 is_stmt 1 view .LVU702
 2886              	@ armwave.c:603:     g_armwave_state.test_wave_buffer = NULL;
 2887              		.loc 1 603 38 is_stmt 0 view .LVU703
 2888 0ce8 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 2889              	@ armwave.c:604: }
 604:armwave.c     **** }
 2890              		.loc 1 604 1 view .LVU704
 2891 0cec 1080BDE8 		pop	{r4, pc}	@
 2892              	.L170:
 2893              		.align	2
 2894              	.L169:
 2895 0cf0 00000000 		.word	g_armwave_state
 2896              		.cfi_endproc
 2897              	.LFE76:
 2899              		.comm	gamma_table,256,4
 2900              		.comm	g_armwave_state,136,4
 2901              		.section	.rodata
 2902              		.align	2
 2903              		.set	.LANCHOR0,. + 0
 2906              	__PRETTY_FUNCTION__.17125:
 2907 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2907      6176655F 
 2907      73657475 
 2907      705F7265 
 2907      6E646572 
 2908 0015 000000   		.space	3
 2911              	__PRETTY_FUNCTION__.17129:
 2912 0018 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 2912      6176655F 
 2912      7365745F 
 2912      77617665 
 2912      5F706F69 
 2913 0031 000000   		.space	3
 2916              	__PRETTY_FUNCTION__.17136:
 2917 0034 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 2917      6176655F 
 2917      7365745F 
 2917      77617665 
 2917      5F706F69 
 2918              		.section	.rodata.str1.4,"aMS",%progbits,1
 2919              		.align	2
 2920              	.LC0:
 2921 0000 76302E30 		.ascii	"v0.0.1\000"
 2921      2E3100
 2922 0007 00       		.space	1
 2923              	.LC1:
 2924 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 2924      61766520 
 2924      76657273 
 2924      696F6E3A 
 2924      2025730A 
 2925 001d 000000   		.space	3
 2926              	.LC2:
 2927 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 2927      78253038 
 2927      7820623D 
 2927      30782530 
 2927      38782063 
 2928 0053 6768743D 		.ascii	"ght=%d scale=%d bitdepth_height=%d\012\000"
 2928      25642073 
 2928      63616C65 
 2928      3D256420 
 2928      62697464 
 2929 0077 00       		.space	1
 2930              	.LC3:
 2931 0078 77625F65 		.ascii	"wb_end=%d\012\000"
 2931      6E643D25 
 2931      640A00
 2932 0083 00       		.space	1
 2933              	.LC4:
 2934 0084 6F757470 		.ascii	"output buffer: 0x%08x\012\000"
 2934      75742062 
 2934      75666665 
 2934      723A2030 
 2934      78253038 
 2935 009b 00       		.space	1
 2936              	.LC5:
 2937 009c 6D656D73 		.ascii	"memset %d bytes, npix %d, chbuff sz %d, base32_ptr "
 2937      65742025 
 2937      64206279 
 2937      7465732C 
 2937      206E7069 
 2938 00cf 30782530 		.ascii	"0x%08x, stack ~0x%08x\012\000"
 2938      38782C20 
 2938      73746163 
 2938      6B207E30 
 2938      78253038 
 2939 00e6 0000     		.space	2
 2940              	.LC6:
 2941 00e8 69746572 		.ascii	"iter...\000"
 2941      2E2E2E00 
 2942              	.LC7:
 2943 00f0 25640A00 		.ascii	"%d\012\000"
 2944              	.LC8:
 2945 00f4 2E2E2E64 		.ascii	"...done paint %d pixels...\012\000"
 2945      6F6E6520 
 2945      7061696E 
 2945      74202564 
 2945      20706978 
 2946              	.LC9:
 2947 0110 61726D77 		.ascii	"armwave_generate: slice %d (y=%d, h=%d, xpos=%d)\012"
 2947      6176655F 
 2947      67656E65 
 2947      72617465 
 2947      3A20736C 
 2948 0141 00       		.ascii	"\000"
 2949 0142 0000     		.space	2
 2950              	.LC10:
 2951 0144 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 2951      20653D25 
 2951      6420773D 
 2951      25642077 
 2951      733D2564 
 2952              	.LC11:
 2953 0170 61726D77 		.ascii	"armwave.c\000"
 2953      6176652E 
 2953      6300
 2954 017a 0000     		.space	2
 2955              	.LC12:
 2956 017c 73746172 		.ascii	"start_point < end_point\000"
 2956      745F706F 
 2956      696E7420 
 2956      3C20656E 
 2956      645F706F 
 2957              	.LC13:
 2958 0194 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x), "
 2958      7566665F 
 2958      73697A65 
 2958      3D25642C 
 2958      20636D70 
 2959 01c7 74617267 		.ascii	"targ_width=%d, wave_length=%d, scaler=%d\012\000"
 2959      5F776964 
 2959      74683D25 
 2959      642C2077 
 2959      6176655F 
 2960 01f1 000000   		.space	3
 2961              	.LC14:
 2962 01f4 6D616C6C 		.ascii	"malloc failure allocating %d bytes (g_armwave_state"
 2962      6F632066 
 2962      61696C75 
 2962      72652061 
 2962      6C6C6F63 
 2963 0227 2E636831 		.ascii	".ch1_buffer)\012\000"
 2963      5F627566 
 2963      66657229 
 2963      0A00
 2964 0235 000000   		.space	3
 2965              	.LC15:
 2966 0238 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 2966      3A203078 
 2966      25303878 
 2966      20307825 
 2966      30387820 
 2967              	.LC16:
 2968 025c 77617665 		.ascii	"wave_buffer != NULL\000"
 2968      5F627566 
 2968      66657220 
 2968      213D204E 
 2968      554C4C00 
 2969              	.LC17:
 2970 0270 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 2970      6176655F 
 2970      7365745F 
 2970      77617665 
 2970      5F706F69 
 2971 02a3 78636565 		.ascii	"xceeded\000"
 2971      64656400 
 2972 02ab 00       		.space	1
 2973              	.LC18:
 2974 02ac 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 2974      5F627566 
 2974      6665725F 
 2974      70747220 
 2974      213D2030 
 2975 02c1 000000   		.space	3
 2976              	.LC19:
 2977 02c4 776200   		.ascii	"wb\000"
 2978 02c7 00       		.space	1
 2979              	.LC20:
 2980 02c8 50330A00 		.ascii	"P3\012\000"
 2981              	.LC21:
 2982 02cc 25642025 		.ascii	"%d %d\012\000"
 2982      640A00
 2983 02d3 00       		.space	1
 2984              	.LC22:
 2985 02d4 3235350A 		.ascii	"255\012\000"
 2985      00
 2986 02d9 000000   		.space	3
 2987              	.LC23:
 2988 02dc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2988      25336420 
 2988      2533640A 
 2988      00
 2989 02e9 000000   		.space	3
 2990              	.LC24:
 2991 02ec 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 2991      6176655F 
 2991      74657374 
 2991      5F627566 
 2991      6665725F 
 2992 031f 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 2992      20627566 
 2992      66657220 
 2992      28256420 
 2992      62797465 
 2993              	.LC25:
 2994 0340 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 2994      6176655F 
 2994      66696C6C 
 2994      5F706978 
 2994      6275665F 
 2995 0373 65722829 		.ascii	"er() failed, returning PyFalse\000"
 2995      20666169 
 2995      6C65642C 
 2995      20726574 
 2995      75726E69 
 2996 0392 0000     		.space	2
 2997              	.LC26:
 2998 0394 43616C63 		.ascii	"Calculating test set %d\012\000"
 2998      756C6174 
 2998      696E6720 
 2998      74657374 
 2998      20736574 
 2999              		.text
 3000              	.Letext0:
 3001              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3002              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3003              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3004              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3005              		.file 7 "/usr/include/stdio.h"
 3006              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3007              		.file 9 "/usr/include/errno.h"
 3008              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3009              		.file 11 "/usr/include/unistd.h"
 3010              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3011              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3012              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3013              		.file 15 "/usr/include/math.h"
 3014              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3015              		.file 17 "/usr/include/time.h"
 3016              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3017              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3018              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3019              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3020              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3021              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3022              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3023              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3024              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3025              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3026              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3027              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3028              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3029              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3030              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3031              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3032              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3033              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3034              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3035              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3036              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3037              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3038              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3039              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3040              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3041              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3042              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3043              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3044              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3045              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3046              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3047              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3048              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3049              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3050              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3051              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3052              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3053              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3054              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3055              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3056              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3057              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3058              		.file 60 "/usr/local/include/python3.8/context.h"
 3059              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3060              		.file 62 "/usr/local/include/python3.8/code.h"
 3061              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3062              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3063              		.file 65 "/usr/local/include/python3.8/import.h"
 3064              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3065              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3066              		.file 68 "/usr/include/malloc.h"
 3067              		.file 69 "armwave.h"
 3068              		.file 70 "/usr/include/stdlib.h"
 3069              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3070              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3071              		.file 73 "<built-in>"
 3072              		.file 74 "/usr/include/assert.h"
