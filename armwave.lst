   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 B0419FE5 		ldr	r4, .L27	@ tmp316,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0530A0E1 		mov	r3, r5	@, _1
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 8C019FE5 		ldr	r0, .L27+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 286              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 287              		.loc 1 73 5 view .LVU43
 288 00d4 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00d8 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 292              	.LVL9:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00dc 00208DE5 		str	r2, [sp]	@ _7,
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 570000DA 		ble	.L11		@,
 303 00f4 000056E3 		cmp	r6, #0	@ height,
 304 00f8 5500000A 		beq	.L11		@,
 305 00fc 043047E2 		sub	r3, r7, #4	@ tmp315, slice_y,
 306 0100 14308DE5 		str	r3, [sp, #20]	@ tmp315, %sfp
 307              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 78 11 view .LVU48
 309 0104 0030A0E3 		mov	r3, #0	@ w,
 310 0108 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 311              	.LVL11:
 312              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 313              		.loc 1 79 9 is_stmt 1 view .LVU49
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 83 9 view .LVU50
 315              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 316              		.loc 1 79 64 is_stmt 0 view .LVU51
 317 010c 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 318 0110 10109DE5 		ldr	r1, [sp, #16]	@ w, %sfp
 319 0114 14009DE5 		ldr	r0, [sp, #20]	@ tmp315, %sfp
 320 0118 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 321 011c 930123E0 		mla	r3, r3, r1, r0	@ tmp230, g_armwave_state.wave_stride, w, tmp315
 322              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 323              		.loc 1 83 16 view .LVU52
 324 0120 0020A0E3 		mov	r2, #0	@ yy,
 325 0124 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 326              	.LVL12:
 327              	.L17:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  85:armwave.c     **** 
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 86 13 is_stmt 1 view .LVU53
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 100 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     **** 
 103:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 104:armwave.c     **** 
 105:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 105 17 view .LVU55
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 100 17 view .LVU56
 332              		.loc 1 105 17 view .LVU57
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 100 17 view .LVU58
 334              		.loc 1 105 17 view .LVU59
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 100 17 view .LVU60
 336              		.loc 1 105 17 view .LVU61
 337              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 338              		.loc 1 86 18 is_stmt 0 view .LVU62
 339 0128 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _184, offset: 0B]
 340              	.LVL13:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 88 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 342              		.loc 1 90 17 view .LVU64
  93:armwave.c     ****                     continue;
 343              		.loc 1 93 17 view .LVU65
 344              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 345              		.loc 1 101 34 is_stmt 0 view .LVU66
 346 012c 01B082E2 		add	fp, r2, #1	@ tmp260, yy,
 347              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 348              		.loc 1 93 20 view .LVU67
 349 0130 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 0134 0110A003 		moveq	r1, #1	@ tmp233,
 351 0138 0010A013 		movne	r1, #0	@ tmp233,
 352              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 353              		.loc 1 93 19 view .LVU68
 354 013c FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0140 01108103 		orreq	r1, r1, #1	@,, tmp238, tmp233
 356 0144 000051E3 		cmp	r1, #0	@ tmp238,
 357              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 358              		.loc 1 101 34 view .LVU69
 359 0148 02A082E2 		add	r10, r2, #2	@ tmp281, yy,
 360 014c 039082E2 		add	r9, r2, #3	@ tmp300, yy,
 361              	.LVL14:
 362              	@ armwave.c:106:                 word >>= 8;
 106:armwave.c     ****                 word >>= 8;
 363              		.loc 1 106 22 view .LVU70
 364 0150 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 0154 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 367              		.loc 1 93 19 view .LVU71
 368 0158 3400001A 		bne	.L20		@,
 369              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 370              		.loc 1 101 34 view .LVU72
 371 015c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 373              		.loc 1 93 20 view .LVU73
 374 0160 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 0164 01E0A003 		moveq	lr, #1	@ tmp253,
 376              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 377              		.loc 1 101 34 view .LVU74
 378 0168 910201E0 		mul	r1, r1, r2	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 380              		.loc 1 93 20 view .LVU75
 381 016c 00E0A013 		movne	lr, #0	@ tmp253,
 382              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 383              		.loc 1 93 19 view .LVU76
 384 0170 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 0174 01E08E03 		orreq	lr, lr, #1	@,, tmp258, tmp253
 386 0178 00005EE3 		cmp	lr, #0	@ tmp258,
 387              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 388              		.loc 1 105 47 view .LVU77
 389 017c 40E094E5 		ldr	lr, [r4, #64]	@ tmp327, g_armwave_state.bitdepth_height
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 391              		.loc 1 101 74 view .LVU78
 392 0180 2114A0E1 		lsr	r1, r1, #8	@ tmp242, tmp240,
 393              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 394              		.loc 1 105 47 view .LVU79
 395 0184 9E7121E0 		mla	r1, lr, r1, r7	@ tmp246, tmp327, tmp242, scale_value
 396 0188 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_81, *_81
 397 018c 01E08EE2 		add	lr, lr, #1	@ tmp249, *_81,
 398 0190 01E0C5E7 		strb	lr, [r5, r1]	@ tmp249, *_81
 399              	.LVL15:
 400              		.loc 1 106 17 is_stmt 1 view .LVU80
  90:armwave.c     ****                 
 401              		.loc 1 90 17 view .LVU81
  93:armwave.c     ****                     continue;
 402              		.loc 1 93 17 view .LVU82
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 is_stmt 0 view .LVU83
 405 0194 2500001A 		bne	.L20		@,
 406              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 407              		.loc 1 101 34 view .LVU84
 408 0198 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 410              		.loc 1 101 99 view .LVU85
 411 019c 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 413              		.loc 1 93 20 view .LVU86
 414 01a0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 416              		.loc 1 101 34 view .LVU87
 417 01a4 9E0B0BE0 		mul	fp, lr, fp	@ tmp261, g_armwave_state.cmp_x_bitdepth_scale, tmp260
 418              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 419              		.loc 1 93 20 view .LVU88
 420 01a8 01E0A003 		moveq	lr, #1	@ tmp274,
 421 01ac 00E0A013 		movne	lr, #0	@ tmp274,
 422              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 423              		.loc 1 101 74 view .LVU89
 424 01b0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp263, tmp261,
 425              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 426              		.loc 1 93 19 view .LVU90
 427 01b4 FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01b8 01E08E03 		orreq	lr, lr, #1	@,, tmp279, tmp274
 429              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 430              		.loc 1 105 47 view .LVU91
 431 01bc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp267, g_armwave_state.bitdepth_height, tmp263, scale_value
 432              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 433              		.loc 1 93 19 view .LVU92
 434 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 435              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 436              		.loc 1 105 47 view .LVU93
 437 01c4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_111, *_111
 438 01c8 011081E2 		add	r1, r1, #1	@ tmp270, *_111,
 439 01cc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp270, *_111
 440              		.loc 1 106 17 is_stmt 1 view .LVU94
 441              	.LVL16:
  90:armwave.c     ****                 
 442              		.loc 1 90 17 view .LVU95
  93:armwave.c     ****                     continue;
 443              		.loc 1 93 17 view .LVU96
 444              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 445              		.loc 1 93 19 is_stmt 0 view .LVU97
 446 01d0 1600001A 		bne	.L20		@,
 447              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 448              		.loc 1 101 34 view .LVU98
 449 01d4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 451              		.loc 1 101 99 view .LVU99
 452 01d8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 20 view .LVU100
 455 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL17:
 457              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 458              		.loc 1 101 34 view .LVU101
 459 01e0 910A0AE0 		mul	r10, r1, r10	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 460              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 461              		.loc 1 93 20 view .LVU102
 462 01e4 0110A003 		moveq	r1, #1	@ tmp294,
 463 01e8 0010A013 		movne	r1, #0	@ tmp294,
 464              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 465              		.loc 1 101 74 view .LVU103
 466 01ec 2AA4A0E1 		lsr	r10, r10, #8	@ tmp284, tmp282,
 467              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 468              		.loc 1 93 19 view .LVU104
 469 01f0 FF0053E3 		cmp	r3, #255	@ word,
 470 01f4 01108103 		orreq	r1, r1, #1	@,, tmp299, tmp294
 471              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 472              		.loc 1 105 47 view .LVU105
 473 01f8 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp288, g_armwave_state.bitdepth_height, tmp284, scale_value
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 19 view .LVU106
 476 01fc 000051E3 		cmp	r1, #0	@ tmp299,
 477              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 478              		.loc 1 105 47 view .LVU107
 479 0200 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_141, *_141
 480 0204 011081E2 		add	r1, r1, #1	@ tmp291, *_141,
 481 0208 0010C5E7 		strb	r1, [r5, r0]	@ tmp291, *_141
 482              		.loc 1 106 17 is_stmt 1 view .LVU108
 483              	.LVL18:
  90:armwave.c     ****                 
 484              		.loc 1 90 17 view .LVU109
  93:armwave.c     ****                     continue;
 485              		.loc 1 93 17 view .LVU110
 486              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 487              		.loc 1 93 19 is_stmt 0 view .LVU111
 488 020c 0700001A 		bne	.L20		@,
 489              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 490              		.loc 1 101 34 view .LVU112
 491 0210 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 493              		.loc 1 101 99 view .LVU113
 494 0214 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 496              		.loc 1 101 34 view .LVU114
 497 0218 910909E0 		mul	r9, r1, r9	@ tmp302, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 498              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 499              		.loc 1 101 74 view .LVU115
 500 021c 2994A0E1 		lsr	r9, r9, #8	@ tmp304, tmp302,
 501              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 502              		.loc 1 105 47 view .LVU116
 503 0220 903923E0 		mla	r3, r0, r9, r3	@ tmp308, g_armwave_state.bitdepth_height, tmp304, word
 504 0224 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_171, *_171
 505 0228 011081E2 		add	r1, r1, #1	@ tmp311, *_171,
 506 022c 0310C5E7 		strb	r1, [r5, r3]	@ tmp311, *_171
 507              		.loc 1 106 17 is_stmt 1 view .LVU117
 508              	.LVL19:
 509              	.L20:
 510              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 511              		.loc 1 83 37 is_stmt 0 view .LVU118
 512 0230 042082E2 		add	r2, r2, #4	@ yy, yy,
 513              	.LVL20:
 514              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 515              		.loc 1 83 9 view .LVU119
 516 0234 020056E1 		cmp	r6, r2	@ height, yy
 517 0238 BAFFFF8A 		bhi	.L17		@,
 518              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 78 44 view .LVU120
 520 023c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 521              	.LVL21:
 522              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 78 5 view .LVU121
 524 0240 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 525              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 78 44 view .LVU122
 527 0244 012082E2 		add	r2, r2, #1	@ w, w,
 528              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 78 5 view .LVU123
 530 0248 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 531              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 78 44 view .LVU124
 533 024c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 534              	.LVL22:
 535              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 78 5 view .LVU125
 537 0250 ADFFFFBA 		blt	.L18		@,
 538              	.LVL23:
 539              	.L11:
 540              	@ armwave.c:110: }
 107:armwave.c     ****             }
 108:armwave.c     ****         }
 109:armwave.c     ****     }
 110:armwave.c     **** }
 541              		.loc 1 110 1 view .LVU126
 542 0254 1CD08DE2 		add	sp, sp, #28	@,,
 543              		.cfi_def_cfa_offset 36
 544              		@ sp needed	@
 545 0258 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 546              	.LVL24:
 547              	.L28:
 548              		.loc 1 110 1 view .LVU127
 549              		.align	2
 550              	.L27:
 551 025c 00000000 		.word	g_armwave_state
 552 0260 20000000 		.word	.LC2
 553              		.cfi_endproc
 554              	.LFE59:
 556              		.align	2
 557              		.global	armwave_fill_pixbuf_scaled
 558              		.syntax unified
 559              		.arm
 560              		.fpu vfp
 562              	armwave_fill_pixbuf_scaled:
 563              	.LVL25:
 564              	.LFB60:
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 115:armwave.c     ****  */
 116:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 117:armwave.c     **** {
 118:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 119:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 120:armwave.c     ****     uint8_t r, g, b, value;
 121:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 122:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 123:armwave.c     ****     uint32_t offset;
 124:armwave.c     **** 
 125:armwave.c     ****     assert(out_buffer != NULL);
 126:armwave.c     **** 
 127:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 128:armwave.c     **** 
 129:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 130:armwave.c     **** 
 131:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 132:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 133:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 134:armwave.c     ****         // most normal waveforms.
 135:armwave.c     ****         wave_word = *base_32ptr++;
 136:armwave.c     **** 
 137:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 138:armwave.c     ****             for(i = 0; i < 4; i++) {
 139:armwave.c     ****                 value = wave_word & 0xff;
 140:armwave.c     ****                 wave_word >>= 8;
 141:armwave.c     **** 
 142:armwave.c     ****                 if(value != 0) {
 143:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 144:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 145:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 146:armwave.c     **** 
 147:armwave.c     ****                     r = MIN(rr, 255);
 148:armwave.c     ****                     g = MIN(gg, 255);
 149:armwave.c     ****                     b = MIN(bb, 255);
 150:armwave.c     **** 
 151:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 152:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 153:armwave.c     **** 
 154:armwave.c     ****                     // Is there a better way?
 155:armwave.c     ****                     nsub = n + i;
 156:armwave.c     ****                     xx = nsub & 0xff;
 157:armwave.c     ****                     yy = nsub >> 8;
 158:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 159:armwave.c     ****                     *(out_buffer_base + offset) = word;
 160:armwave.c     ****                 }
 161:armwave.c     ****             }
 162:armwave.c     ****         } 
 163:armwave.c     ****     }
 164:armwave.c     **** }
 165:armwave.c     **** #endif
 166:armwave.c     **** 
 167:armwave.c     **** /*
 168:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 169:armwave.c     ****  * Rows are repeated as necessary.
 170:armwave.c     ****  */
 171:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 172:armwave.c     **** {
 565              		.loc 1 172 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 569              		.loc 1 173 5 view .LVU129
 174:armwave.c     ****     // uint32_t ysub;
 175:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 570              		.loc 1 175 5 view .LVU130
 176:armwave.c     ****     uint8_t r, g, b, value; 
 571              		.loc 1 176 5 view .LVU131
 177:armwave.c     ****     // uint8_t row;
 178:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 572              		.loc 1 178 5 view .LVU132
 573              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 172 1 is_stmt 0 view .LVU133
 575 0264 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 576              		.cfi_def_cfa_offset 36
 577              		.cfi_offset 4, -36
 578              		.cfi_offset 5, -32
 579              		.cfi_offset 6, -28
 580              		.cfi_offset 7, -24
 581              		.cfi_offset 8, -20
 582              		.cfi_offset 9, -16
 583              		.cfi_offset 10, -12
 584              		.cfi_offset 11, -8
 585              		.cfi_offset 14, -4
 586              	@ armwave.c:182:     assert(out_buffer != NULL);
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 180:armwave.c     ****     uint32_t offset;
 181:armwave.c     **** 
 182:armwave.c     ****     assert(out_buffer != NULL);
 587              		.loc 1 182 5 view .LVU134
 588 0268 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 589              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 590              		.loc 1 178 15 view .LVU135
 591 026c 5C519FE5 		ldr	r5, .L51	@ tmp221,
 592              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 593              		.loc 1 172 1 view .LVU136
 594 0270 0CD04DE2 		sub	sp, sp, #12	@,,
 595              		.cfi_def_cfa_offset 48
 596              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 597              		.loc 1 178 15 view .LVU137
 598 0274 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 599              	.LVL26:
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 600              		.loc 1 179 5 is_stmt 1 view .LVU138
 180:armwave.c     **** 
 601              		.loc 1 180 5 view .LVU139
 602              		.loc 1 182 5 view .LVU140
 603 0278 4F00000A 		beq	.L48		@,
 183:armwave.c     **** 
 184:armwave.c     ****     // we don't really want to be doing this
 185:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 604              		.loc 1 185 5 view .LVU141
 605              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 185 59 is_stmt 0 view .LVU142
 607 027c 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 608 0280 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 609              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 185 5 view .LVU143
 611 0284 0110A0E3 		mov	r1, #1	@,
 612              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 185 59 view .LVU144
 614 0288 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 185 5 view .LVU145
 617 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 618 0290 FEFFFFEB 		bl	memset		@
 619              	.LVL27:
 186:armwave.c     **** 
 187:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 620              		.loc 1 187 5 is_stmt 1 view .LVU146
 621              	@ armwave.c:187:     npix = g_armwave_state.target_width * 256; 
 622              		.loc 1 187 10 is_stmt 0 view .LVU147
 623 0294 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 0298 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 625              	.LVL28:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 189:armwave.c     **** 
 190:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 626              		.loc 1 190 5 is_stmt 1 view .LVU148
 627              		.loc 1 190 5 is_stmt 0 view .LVU149
 628 029c 000058E3 		cmp	r8, #0	@ npix,
 629 02a0 0C0000DA 		ble	.L29		@,
 630              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 192:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 193:armwave.c     ****         // most normal waveforms.
 194:armwave.c     ****         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 196:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 200:armwave.c     **** 
 201:armwave.c     ****                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 203 52 view .LVU150
 632 02a4 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 633              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 202 52 view .LVU151
 635 02a8 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 636              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 206:armwave.c     ****                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 209:armwave.c     **** 
 210:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 211:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 213:armwave.c     ****                     // Do line scaling as necessary.
 214:armwave.c     ****                     /*
 215:armwave.c     ****                     nsub = n + w;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 217:armwave.c     ****                     xx = (nsub >> 8);
 218:armwave.c     **** 
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 637              		.loc 1 226 57 view .LVU152
 638 02ac 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 639              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 640              		.loc 1 203 52 view .LVU153
 641 02b0 00308DE5 		str	r3, [sp]	@ _15, %sfp
 642              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 204 52 view .LVU154
 644 02b4 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 645              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 190 11 view .LVU155
 647 02b8 0010A0E3 		mov	r1, #0	@ n,
 648              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 204 52 view .LVU156
 650 02bc 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 651              	.LVL29:
 652              	.L36:
 194:armwave.c     **** 
 653              		.loc 1 194 9 is_stmt 1 view .LVU157
 654              	@ armwave.c:194:         wave_word = *base_32ptr++;
 194:armwave.c     **** 
 655              		.loc 1 194 19 is_stmt 0 view .LVU158
 656 02c0 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 657              	.LVL30:
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 658              		.loc 1 196 9 is_stmt 1 view .LVU159
 659              	@ armwave.c:196:         if(COND_UNLIKELY(wave_word != 0)) {
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 660              		.loc 1 196 11 is_stmt 0 view .LVU160
 661 02c4 000053E3 		cmp	r3, #0	@ wave_word,
 662 02c8 0400001A 		bne	.L49		@,
 663              	.L32:
 664              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 190 28 view .LVU161
 666 02cc 041081E2 		add	r1, r1, #4	@ n, n,
 667              	.LVL31:
 668              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 190 5 view .LVU162
 670 02d0 010058E1 		cmp	r8, r1	@ npix, n
 671 02d4 F9FFFFCA 		bgt	.L36		@,
 672              	.LVL32:
 673              	.L29:
 674              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 675              		.loc 1 238 1 view .LVU163
 676 02d8 0CD08DE2 		add	sp, sp, #12	@,,
 677              		.cfi_remember_state
 678              		.cfi_def_cfa_offset 36
 679              		@ sp needed	@
 680 02dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 681              	.LVL33:
 682              	.L49:
 683              		.cfi_restore_state
 684              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 685              		.loc 1 201 19 view .LVU164
 686 02e0 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 687              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 197 19 view .LVU165
 689 02e4 0070A0E3 		mov	r7, #0	@ w,
 690              	.LVL34:
 198:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 198 17 is_stmt 1 view .LVU166
 199:armwave.c     **** 
 692              		.loc 1 199 17 view .LVU167
 693              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 694              		.loc 1 199 27 is_stmt 0 view .LVU168
 695 02e8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 696              	.LVL35:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 201 17 is_stmt 1 view .LVU169
 698              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 699              		.loc 1 201 19 is_stmt 0 view .LVU170
 700 02ec 0500001A 		bne	.L50		@,
 701              	.L33:
 702              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 197 32 view .LVU171
 704 02f0 017087E2 		add	r7, r7, #1	@ w, w,
 705              	.LVL36:
 706              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 707              		.loc 1 197 13 view .LVU172
 708 02f4 040057E3 		cmp	r7, #4	@ w,
 709 02f8 F3FFFF0A 		beq	.L32		@,
 198:armwave.c     ****                 wave_word >>= 8;
 710              		.loc 1 198 17 is_stmt 1 view .LVU173
 711              	.LVL37:
 199:armwave.c     **** 
 712              		.loc 1 199 17 view .LVU174
 713              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 201 19 is_stmt 0 view .LVU175
 715 02fc FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 716              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 717              		.loc 1 199 27 view .LVU176
 718 0300 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 201 17 is_stmt 1 view .LVU177
 721              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 201 19 is_stmt 0 view .LVU178
 723 0304 F9FFFF0A 		beq	.L33		@,
 724              	.L50:
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 202 21 is_stmt 1 view .LVU179
 726              	.LVL39:
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 203 21 view .LVU180
 204:armwave.c     **** 
 728              		.loc 1 204 21 view .LVU181
 206:armwave.c     ****                     g = MIN(gg, 255);
 729              		.loc 1 206 21 view .LVU182
 207:armwave.c     ****                     b = MIN(bb, 255);
 730              		.loc 1 207 21 view .LVU183
 208:armwave.c     **** 
 731              		.loc 1 208 21 view .LVU184
 211:armwave.c     **** 
 732              		.loc 1 211 21 view .LVU185
 733              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 734              		.loc 1 204 55 is_stmt 0 view .LVU186
 735 0308 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 736 030c 07E081E0 		add	lr, r1, r7	@ _126, n, w
 737 0310 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 738              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 226 32 view .LVU187
 740 0314 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 741              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 227 41 view .LVU188
 743 0318 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 744              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 226 40 view .LVU189
 746 031c 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 747              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 748              		.loc 1 227 41 view .LVU190
 749 0320 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 750              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 203 55 view .LVU191
 752 0324 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 753              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 754              		.loc 1 204 24 view .LVU192
 755 0328 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 756              	.LVL40:
 757              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 226 40 view .LVU193
 759 032c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 760              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 227 46 view .LVU194
 762 0330 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 763              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 203 55 view .LVU195
 765 0334 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 766              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 202 55 view .LVU196
 768 0338 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 769              	.LVL41:
 770              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 771              		.loc 1 208 25 view .LVU197
 772 033c FF005AE3 		cmp	r10, #255	@ bb,
 773              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 203 24 view .LVU198
 775 0340 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 776              	.LVL42:
 777              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 226 40 view .LVU199
 779 0344 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 780              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 227 46 view .LVU200
 782 0348 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 783              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 784              		.loc 1 202 24 view .LVU201
 785 034c 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 786              	.LVL43:
 787              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 788              		.loc 1 208 25 view .LVU202
 789 0350 FFA0A0A3 		movge	r10, #255	@ bb,
 790              	.LVL44:
 791              	@ armwave.c:207:                     g = MIN(gg, 255);
 207:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 207 25 view .LVU203
 793 0354 FF005CE3 		cmp	ip, #255	@ gg,
 794 0358 FFC0A0A3 		movge	ip, #255	@ gg,
 795              	.LVL45:
 796              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 797              		.loc 1 206 25 view .LVU204
 798 035c FF0050E3 		cmp	r0, #255	@ rr,
 799              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 800              		.loc 1 211 56 view .LVU205
 801 0360 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 802              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 226 24 view .LVU206
 804 0364 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 805              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 806              		.loc 1 206 25 view .LVU207
 807 0368 FF00A0A3 		movge	r0, #255	@ rr,
 808              	.LVL46:
 809              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 810              		.loc 1 211 44 view .LVU208
 811 036c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 812 0370 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 813              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 814              		.loc 1 211 56 view .LVU209
 815 0374 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 816              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 817              		.loc 1 211 51 view .LVU210
 818 0378 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 819              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 820              		.loc 1 211 62 view .LVU211
 821 037c 7000EFE6 		uxtb	r0, r0	@ rr, rr
 822 0380 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 823              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 226 24 view .LVU212
 825 0384 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 826              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 827              		.loc 1 227 24 view .LVU213
 828 0388 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 829              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 830              		.loc 1 211 26 view .LVU214
 831 038c FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 832              	.LVL47:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 833              		.loc 1 225 21 is_stmt 1 view .LVU215
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 834              		.loc 1 226 21 view .LVU216
 227:armwave.c     ****                     xx = (nsub >> 8);
 835              		.loc 1 227 21 view .LVU217
 836              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 837              		.loc 1 228 32 is_stmt 0 view .LVU218
 838 0390 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 839              	.LVL48:
 840              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 841              		.loc 1 227 24 view .LVU219
 842 0394 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 843              	.LVL49:
 228:armwave.c     **** 
 844              		.loc 1 228 21 is_stmt 1 view .LVU220
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 230 21 view .LVU221
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 230 21 is_stmt 0 view .LVU222
 847 0398 090052E1 		cmp	r2, r9	@ yy, ye
 848 039c D3FFFF2A 		bcs	.L33		@,
 849              	.LVL50:
 850              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 851              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU223
 232:armwave.c     ****                     }
 852              		.loc 1 232 25 discriminator 3 view .LVU224
 853              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 854              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU225
 855 03a0 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 856              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 857              		.loc 1 232 43 discriminator 3 view .LVU226
 858 03a4 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 859              	.LVL51:
 860              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 230 42 discriminator 3 view .LVU227
 862 03a8 012082E2 		add	r2, r2, #1	@ yy, yy,
 863              	.LVL52:
 864              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 230 21 discriminator 3 view .LVU228
 866 03ac 020059E1 		cmp	r9, r2	@ ye, yy
 867              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 868              		.loc 1 232 53 discriminator 3 view .LVU229
 869 03b0 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 870              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 230 21 discriminator 3 view .LVU230
 872 03b4 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 230 21 discriminator 3 view .LVU231
 874 03b8 CCFFFFEA 		b	.L33		@
 875              	.LVL53:
 876              	.L48:
 182:armwave.c     **** 
 877              		.loc 1 182 5 is_stmt 1 discriminator 1 view .LVU232
 878 03bc 10309FE5 		ldr	r3, .L51+4	@,
 879 03c0 B620A0E3 		mov	r2, #182	@,
 880 03c4 0C109FE5 		ldr	r1, .L51+8	@,
 881 03c8 0C009FE5 		ldr	r0, .L51+12	@,
 882              	.LVL54:
 182:armwave.c     **** 
 883              		.loc 1 182 5 is_stmt 0 discriminator 1 view .LVU233
 884 03cc FEFFFFEB 		bl	__assert_fail		@
 885              	.LVL55:
 886              	.L52:
 887              		.align	2
 888              	.L51:
 889 03d0 00000000 		.word	g_armwave_state
 890 03d4 00000000 		.word	.LANCHOR0
 891 03d8 5C000000 		.word	.LC3
 892 03dc 68000000 		.word	.LC4
 893              		.cfi_endproc
 894              	.LFE60:
 896              		.align	2
 897              		.global	armwave_generate
 898              		.syntax unified
 899              		.arm
 900              		.fpu vfp
 902              	armwave_generate:
 903              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 904              		.loc 1 244 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 908              		.loc 1 245 5 view .LVU235
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 909              		.loc 1 246 5 view .LVU236
 910              	.LVL56:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 248 5 view .LVU237
 912              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 913              		.loc 1 244 1 is_stmt 0 view .LVU238
 914 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 915              		.cfi_def_cfa_offset 36
 916              		.cfi_offset 4, -36
 917              		.cfi_offset 5, -32
 918              		.cfi_offset 6, -28
 919              		.cfi_offset 7, -24
 920              		.cfi_offset 8, -20
 921              		.cfi_offset 9, -16
 922              		.cfi_offset 10, -12
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 926              		.loc 1 248 5 view .LVU239
 927 03e4 0010A0E3 		mov	r1, #0	@,
 928              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 929              		.loc 1 248 58 view .LVU240
 930 03e8 E0919FE5 		ldr	r9, .L73	@ tmp332,
 931              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 932              		.loc 1 244 1 view .LVU241
 933 03ec 24D04DE2 		sub	sp, sp, #36	@,,
 934              		.cfi_def_cfa_offset 72
 935              	@ armwave.c:251:     for(yy = 0; yy < 3; yy++) {
 249:armwave.c     **** 
 250:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 251:armwave.c     ****     for(yy = 0; yy < 3; yy++) {
 936              		.loc 1 251 12 view .LVU242
 937 03f0 00B0A0E3 		mov	fp, #0	@ yy,
 938              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 248:armwave.c     **** 
 939              		.loc 1 248 5 view .LVU243
 940 03f4 502099E5 		ldr	r2, [r9, #80]	@, g_armwave_state.ch_buff_size
 941 03f8 040099E5 		ldr	r0, [r9, #4]	@, g_armwave_state.ch1_buffer
 942 03fc FEFFFFEB 		bl	memset		@
 943              	.LVL57:
 944              		.loc 1 251 5 is_stmt 1 view .LVU244
 945              	@ armwave.c:251:     for(yy = 0; yy < 3; yy++) {
 946              		.loc 1 251 12 is_stmt 0 view .LVU245
 947 0400 0B80A0E1 		mov	r8, fp	@ yy, yy
 948              	.LVL58:
 949              	.L55:
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 950              		.loc 1 254 9 is_stmt 1 discriminator 3 view .LVU246
 951 0404 445099E5 		ldr	r5, [r9, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 952              	.LBB10:
 953              	.LBB11:
 954              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 955              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU247
 956 0408 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 957              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 958              		.loc 1 71 130 discriminator 3 view .LVU248
 959 040c 401099E5 		ldr	r1, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 960              	.LBE11:
 961              	.LBE10:
 962              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 963              		.loc 1 254 9 discriminator 3 view .LVU249
 964 0410 950805E0 		mul	r5, r5, r8	@ _6, g_armwave_state.slice_height, yy
 965              	.LBB15:
 966              	.LBB12:
 967              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 968              		.loc 1 71 40 discriminator 3 view .LVU250
 969 0414 044099E5 		ldr	r4, [r9, #4]	@ _15, g_armwave_state.ch1_buffer
 970              	.LBE12:
 971              	.LBE15:
 972              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 973              		.loc 1 254 9 discriminator 3 view .LVU251
 974 0418 480099E5 		ldr	r0, [r9, #72]	@ _8, g_armwave_state.slice_record_height
 975              	.LBB16:
 976              	.LBB13:
 977              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 978              		.loc 1 71 65 discriminator 3 view .LVU252
 979 041c 920502E0 		mul	r2, r2, r5	@ tmp232, g_armwave_state.cmp_x_bitdepth_scale, _6
 980              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 981              		.loc 1 73 5 discriminator 3 view .LVU253
 982 0420 0430A0E1 		mov	r3, r4	@, _15
 983              	.LBE13:
 984              	.LBE16:
 985              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 986              		.loc 1 254 9 discriminator 3 view .LVU254
 987 0424 14008DE5 		str	r0, [sp, #20]	@ _8, %sfp
 988              	.LVL59:
 989              	.LBB17:
 990              	.LBI10:
  62:armwave.c     **** {
 991              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU255
 992              	.LBB14:
  64:armwave.c     ****     uint32_t value, word;
 993              		.loc 1 64 5 discriminator 3 view .LVU256
  65:armwave.c     ****     uint8_t *wave_base;
 994              		.loc 1 65 5 discriminator 3 view .LVU257
  66:armwave.c     ****     uint8_t *write_buffer_base;
 995              		.loc 1 66 5 discriminator 3 view .LVU258
  67:armwave.c     ****     uint8_t *write_buffer;
 996              		.loc 1 67 5 discriminator 3 view .LVU259
  68:armwave.c     **** 
 997              		.loc 1 68 5 discriminator 3 view .LVU260
  71:armwave.c     **** 
 998              		.loc 1 71 5 discriminator 3 view .LVU261
 999              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1000              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU262
 1001 0428 2224A0E1 		lsr	r2, r2, #8	@ tmp234, tmp232,
 1002              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1003              		.loc 1 73 5 discriminator 3 view .LVU263
 1004 042c 08008DE5 		str	r0, [sp, #8]	@ _8,
 1005              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1006              		.loc 1 71 130 discriminator 3 view .LVU264
 1007 0430 910202E0 		mul	r2, r1, r2	@ _21, g_armwave_state.bitdepth_height, tmp234
 1008              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1009              		.loc 1 73 5 discriminator 3 view .LVU265
 1010 0434 04508DE5 		str	r5, [sp, #4]	@ _6,
 1011              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1012              		.loc 1 71 23 discriminator 3 view .LVU266
 1013 0438 024084E0 		add	r4, r4, r2	@ write_buffer_base, _15, _21
 1014              	.LVL60:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1015              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU267
 1016 043c 00208DE5 		str	r2, [sp]	@ _21,
 1017 0440 141099E5 		ldr	r1, [r9, #20]	@, g_armwave_state.wave_buffer
 1018 0444 0420A0E1 		mov	r2, r4	@, write_buffer_base
 1019 0448 84019FE5 		ldr	r0, .L73+4	@,
 1020              	.LVL61:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1021              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU268
 1022 044c FEFFFFEB 		bl	printf		@
 1023              	.LVL62:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1024              		.loc 1 78 5 is_stmt 1 discriminator 3 view .LVU269
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1025              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU270
 1026 0450 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1027 0454 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 1028 0458 570000DA 		ble	.L63		@,
 1029 045c 14309DE5 		ldr	r3, [sp, #20]	@ _8, %sfp
 1030 0460 000053E3 		cmp	r3, #0	@ _8,
 1031 0464 5400000A 		beq	.L63		@,
 1032              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1033              		.loc 1 78 11 view .LVU271
 1034 0468 0060A0E3 		mov	r6, #0	@ w,
 1035 046c 043045E2 		sub	r3, r5, #4	@ tmp333, _6,
 1036 0470 18308DE5 		str	r3, [sp, #24]	@ tmp333, %sfp
 1037 0474 1C808DE5 		str	r8, [sp, #28]	@ yy, %sfp
 1038              	.LVL63:
 1039              	.L62:
  79:armwave.c     **** 
 1040              		.loc 1 79 9 is_stmt 1 view .LVU272
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1041              		.loc 1 83 9 view .LVU273
 1042              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 1043              		.loc 1 79 64 is_stmt 0 view .LVU274
 1044 0478 343099E5 		ldr	r3, [r9, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1045 047c 18209DE5 		ldr	r2, [sp, #24]	@ tmp333, %sfp
 1046 0480 14E099E5 		ldr	lr, [r9, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1047 0484 932623E0 		mla	r3, r3, r6, r2	@ tmp247, g_armwave_state.wave_stride, w, tmp333
 1048              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1049              		.loc 1 83 16 view .LVU275
 1050 0488 0010A0E3 		mov	r1, #0	@ yy,
 1051 048c 03E08EE0 		add	lr, lr, r3	@ ivtmp.66, g_armwave_state.wave_buffer, tmp247
 1052              	.LVL64:
 1053              	.L61:
  86:armwave.c     **** 
 1054              		.loc 1 86 13 is_stmt 1 view .LVU276
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1055              		.loc 1 100 17 view .LVU277
 105:armwave.c     ****                 word >>= 8;
 1056              		.loc 1 105 17 view .LVU278
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1057              		.loc 1 100 17 view .LVU279
 105:armwave.c     ****                 word >>= 8;
 1058              		.loc 1 105 17 view .LVU280
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1059              		.loc 1 100 17 view .LVU281
 105:armwave.c     ****                 word >>= 8;
 1060              		.loc 1 105 17 view .LVU282
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1061              		.loc 1 100 17 view .LVU283
 105:armwave.c     ****                 word >>= 8;
 1062              		.loc 1 105 17 view .LVU284
 1063              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 1064              		.loc 1 86 18 is_stmt 0 view .LVU285
 1065 0490 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _251, offset: 0B]
 1066              	.LVL65:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 1067              		.loc 1 88 13 is_stmt 1 view .LVU286
  90:armwave.c     ****                 
 1068              		.loc 1 90 17 view .LVU287
  93:armwave.c     ****                     continue;
 1069              		.loc 1 93 17 view .LVU288
 1070              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1071              		.loc 1 101 34 is_stmt 0 view .LVU289
 1072 0494 01B081E2 		add	fp, r1, #1	@ tmp277, yy,
 1073              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1074              		.loc 1 93 20 view .LVU290
 1075 0498 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 1076 049c 0120A003 		moveq	r2, #1	@ tmp250,
 1077 04a0 0020A013 		movne	r2, #0	@ tmp250,
 1078              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1079              		.loc 1 93 19 view .LVU291
 1080 04a4 FF0057E3 		cmp	r7, #255	@ scale_value,
 1081 04a8 01208203 		orreq	r2, r2, #1	@,, tmp255, tmp250
 1082 04ac 000052E3 		cmp	r2, #0	@ tmp255,
 1083              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1084              		.loc 1 101 34 view .LVU292
 1085 04b0 02A081E2 		add	r10, r1, #2	@ tmp298, yy,
 1086 04b4 038081E2 		add	r8, r1, #3	@ tmp318, yy,
 1087              	.LVL66:
 1088              	@ armwave.c:106:                 word >>= 8;
 106:armwave.c     ****             }
 1089              		.loc 1 106 22 view .LVU293
 1090 04b8 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 1091 04bc 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 1092              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1093              		.loc 1 93 19 view .LVU294
 1094 04c0 3400001A 		bne	.L64		@,
 1095              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1096              		.loc 1 101 34 view .LVU295
 1097 04c4 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1098              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1099              		.loc 1 93 20 view .LVU296
 1100 04c8 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 1101 04cc 0150A003 		moveq	r5, #1	@ tmp270,
 1102              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1103              		.loc 1 101 34 view .LVU297
 1104 04d0 920102E0 		mul	r2, r2, r1	@ tmp257, g_armwave_state.cmp_x_bitdepth_scale, yy
 1105              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1106              		.loc 1 93 20 view .LVU298
 1107 04d4 0050A013 		movne	r5, #0	@ tmp270,
 1108              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1109              		.loc 1 93 19 view .LVU299
 1110 04d8 FF005CE3 		cmp	ip, #255	@ scale_value,
 1111 04dc 01508503 		orreq	r5, r5, #1	@,, tmp275, tmp270
 1112 04e0 000055E3 		cmp	r5, #0	@ tmp275,
 1113              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1114              		.loc 1 105 47 view .LVU300
 1115 04e4 405099E5 		ldr	r5, [r9, #64]	@ tmp348, g_armwave_state.bitdepth_height
 1116              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1117              		.loc 1 101 74 view .LVU301
 1118 04e8 2224A0E1 		lsr	r2, r2, #8	@ tmp259, tmp257,
 1119              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1120              		.loc 1 105 47 view .LVU302
 1121 04ec 957222E0 		mla	r2, r5, r2, r7	@ tmp263, tmp348, tmp259, scale_value
 1122 04f0 0250D4E7 		ldrb	r5, [r4, r2]	@ zero_extendqisi2	@ *_91, *_91
 1123 04f4 015085E2 		add	r5, r5, #1	@ tmp266, *_91,
 1124 04f8 0250C4E7 		strb	r5, [r4, r2]	@ tmp266, *_91
 1125              	.LVL67:
 106:armwave.c     ****             }
 1126              		.loc 1 106 17 is_stmt 1 view .LVU303
  90:armwave.c     ****                 
 1127              		.loc 1 90 17 view .LVU304
  93:armwave.c     ****                     continue;
 1128              		.loc 1 93 17 view .LVU305
 1129              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1130              		.loc 1 93 19 is_stmt 0 view .LVU306
 1131 04fc 2500001A 		bne	.L64		@,
 1132              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1133              		.loc 1 101 34 view .LVU307
 1134 0500 245099E5 		ldr	r5, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1135              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1136              		.loc 1 101 99 view .LVU308
 1137 0504 402099E5 		ldr	r2, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1138              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1139              		.loc 1 93 20 view .LVU309
 1140 0508 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 1141              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1142              		.loc 1 101 34 view .LVU310
 1143 050c 950B0BE0 		mul	fp, r5, fp	@ tmp278, g_armwave_state.cmp_x_bitdepth_scale, tmp277
 1144              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1145              		.loc 1 93 20 view .LVU311
 1146 0510 0150A003 		moveq	r5, #1	@ tmp291,
 1147 0514 0050A013 		movne	r5, #0	@ tmp291,
 1148              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1149              		.loc 1 101 74 view .LVU312
 1150 0518 2BB4A0E1 		lsr	fp, fp, #8	@ tmp280, tmp278,
 1151              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1152              		.loc 1 93 19 view .LVU313
 1153 051c FF0050E3 		cmp	r0, #255	@ scale_value,
 1154 0520 01508503 		orreq	r5, r5, #1	@,, tmp296, tmp291
 1155              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 105 47 view .LVU314
 1157 0524 92CB2CE0 		mla	ip, r2, fp, ip	@ tmp284, g_armwave_state.bitdepth_height, tmp280, scale_value
 1158              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1159              		.loc 1 93 19 view .LVU315
 1160 0528 000055E3 		cmp	r5, #0	@ tmp296,
 1161              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1162              		.loc 1 105 47 view .LVU316
 1163 052c 0C20D4E7 		ldrb	r2, [r4, ip]	@ zero_extendqisi2	@ *_121, *_121
 1164 0530 012082E2 		add	r2, r2, #1	@ tmp287, *_121,
 1165 0534 0C20C4E7 		strb	r2, [r4, ip]	@ tmp287, *_121
 106:armwave.c     ****             }
 1166              		.loc 1 106 17 is_stmt 1 view .LVU317
 1167              	.LVL68:
  90:armwave.c     ****                 
 1168              		.loc 1 90 17 view .LVU318
  93:armwave.c     ****                     continue;
 1169              		.loc 1 93 17 view .LVU319
 1170              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1171              		.loc 1 93 19 is_stmt 0 view .LVU320
 1172 0538 1600001A 		bne	.L64		@,
 1173              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1174              		.loc 1 101 34 view .LVU321
 1175 053c 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1176              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1177              		.loc 1 101 99 view .LVU322
 1178 0540 40C099E5 		ldr	ip, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1179              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1180              		.loc 1 93 20 view .LVU323
 1181 0544 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1182              	.LVL69:
 1183              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1184              		.loc 1 101 34 view .LVU324
 1185 0548 920A0AE0 		mul	r10, r2, r10	@ tmp299, g_armwave_state.cmp_x_bitdepth_scale, tmp298
 1186              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1187              		.loc 1 93 20 view .LVU325
 1188 054c 0120A003 		moveq	r2, #1	@ tmp311,
 1189 0550 0020A013 		movne	r2, #0	@ tmp311,
 1190              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1191              		.loc 1 101 74 view .LVU326
 1192 0554 2AA4A0E1 		lsr	r10, r10, #8	@ tmp301, tmp299,
 1193              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1194              		.loc 1 93 19 view .LVU327
 1195 0558 FF0053E3 		cmp	r3, #255	@ word,
 1196 055c 01208203 		orreq	r2, r2, #1	@,, tmp316, tmp311
 1197              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1198              		.loc 1 105 47 view .LVU328
 1199 0560 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp305, g_armwave_state.bitdepth_height, tmp301, scale_value
 1200              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1201              		.loc 1 93 19 view .LVU329
 1202 0564 000052E3 		cmp	r2, #0	@ tmp316,
 1203              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1204              		.loc 1 105 47 view .LVU330
 1205 0568 0020D4E7 		ldrb	r2, [r4, r0]	@ zero_extendqisi2	@ *_151, *_151
 1206 056c 012082E2 		add	r2, r2, #1	@ tmp308, *_151,
 1207 0570 0020C4E7 		strb	r2, [r4, r0]	@ tmp308, *_151
 106:armwave.c     ****             }
 1208              		.loc 1 106 17 is_stmt 1 view .LVU331
 1209              	.LVL70:
  90:armwave.c     ****                 
 1210              		.loc 1 90 17 view .LVU332
  93:armwave.c     ****                     continue;
 1211              		.loc 1 93 17 view .LVU333
 1212              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1213              		.loc 1 93 19 is_stmt 0 view .LVU334
 1214 0574 0700001A 		bne	.L64		@,
 1215              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1216              		.loc 1 101 34 view .LVU335
 1217 0578 242099E5 		ldr	r2, [r9, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1218              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1219              		.loc 1 101 99 view .LVU336
 1220 057c 400099E5 		ldr	r0, [r9, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1221              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1222              		.loc 1 101 34 view .LVU337
 1223 0580 920808E0 		mul	r8, r2, r8	@ tmp319, g_armwave_state.cmp_x_bitdepth_scale, tmp318
 1224              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1225              		.loc 1 101 74 view .LVU338
 1226 0584 2884A0E1 		lsr	r8, r8, #8	@ tmp321, tmp319,
 1227              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1228              		.loc 1 105 47 view .LVU339
 1229 0588 903823E0 		mla	r3, r0, r8, r3	@ tmp325, g_armwave_state.bitdepth_height, tmp321, word
 1230 058c 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_181, *_181
 1231 0590 012082E2 		add	r2, r2, #1	@ tmp328, *_181,
 1232 0594 0320C4E7 		strb	r2, [r4, r3]	@ tmp328, *_181
 106:armwave.c     ****             }
 1233              		.loc 1 106 17 is_stmt 1 view .LVU340
 1234              	.LVL71:
 1235              	.L64:
 1236              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1237              		.loc 1 83 9 is_stmt 0 view .LVU341
 1238 0598 14309DE5 		ldr	r3, [sp, #20]	@ _8, %sfp
 1239              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1240              		.loc 1 83 37 view .LVU342
 1241 059c 041081E2 		add	r1, r1, #4	@ yy, yy,
 1242              	.LVL72:
 1243              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1244              		.loc 1 83 9 view .LVU343
 1245 05a0 010053E1 		cmp	r3, r1	@ _8, yy
 1246 05a4 B9FFFF8A 		bhi	.L61		@,
 1247              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1248              		.loc 1 78 5 view .LVU344
 1249 05a8 383099E5 		ldr	r3, [r9, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1250              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1251              		.loc 1 78 44 view .LVU345
 1252 05ac 016086E2 		add	r6, r6, #1	@ w, w,
 1253              	.LVL73:
 1254              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1255              		.loc 1 78 5 view .LVU346
 1256 05b0 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 1257 05b4 AFFFFFBA 		blt	.L62		@,
 1258 05b8 1C809DE5 		ldr	r8, [sp, #28]	@ yy, %sfp
 1259              	.LVL74:
 1260              	.L63:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1261              		.loc 1 78 5 view .LVU347
 1262              	.LBE14:
 1263              	.LBE17:
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 1264              		.loc 1 255 9 is_stmt 1 view .LVU348
 256:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 1265              		.loc 1 256 9 view .LVU349
 1266              	@ armwave.c:251:     for(yy = 0; yy < 3; yy++) {
 251:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1267              		.loc 1 251 27 is_stmt 0 view .LVU350
 1268 05bc 018088E2 		add	r8, r8, #1	@ yy, yy,
 1269              	.LVL75:
 1270              	@ armwave.c:251:     for(yy = 0; yy < 3; yy++) {
 251:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1271              		.loc 1 251 5 view .LVU351
 1272 05c0 030058E3 		cmp	r8, #3	@ yy,
 1273 05c4 8EFFFF1A 		bne	.L55		@,
 1274              	@ armwave.c:260: }
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 1275              		.loc 1 260 1 view .LVU352
 1276 05c8 24D08DE2 		add	sp, sp, #36	@,,
 1277              		.cfi_def_cfa_offset 36
 1278              		@ sp needed	@
 1279 05cc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1280              	.LVL76:
 1281              	.L74:
 1282              		.loc 1 260 1 view .LVU353
 1283              		.align	2
 1284              	.L73:
 1285 05d0 00000000 		.word	g_armwave_state
 1286 05d4 20000000 		.word	.LC2
 1287              		.cfi_endproc
 1288              	.LFE61:
 1290              		.align	2
 1291              		.global	armwave_setup_render
 1292              		.syntax unified
 1293              		.arm
 1294              		.fpu vfp
 1296              	armwave_setup_render:
 1297              	.LVL77:
 1298              	.LFB62:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 1299              		.loc 1 266 1 is_stmt 1 view -0
 1300              		.cfi_startproc
 1301              		@ args = 12, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 1303              		.loc 1 267 5 view .LVU355
 268:armwave.c     ****     float points_per_pixel;
 1304              		.loc 1 268 5 view .LVU356
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1305              		.loc 1 270 5 view .LVU357
 1306              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1307              		.loc 1 266 1 is_stmt 0 view .LVU358
 1308 05d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1309              		.cfi_def_cfa_offset 28
 1310              		.cfi_offset 4, -28
 1311              		.cfi_offset 5, -24
 1312              		.cfi_offset 6, -20
 1313              		.cfi_offset 7, -16
 1314              		.cfi_offset 8, -12
 1315              		.cfi_offset 9, -8
 1316              		.cfi_offset 14, -4
 1317 05dc 028B2DED 		vpush.64	{d8}	@
 1318              		.cfi_def_cfa_offset 36
 1319              		.cfi_offset 80, -36
 1320              		.cfi_offset 81, -32
 1321 05e0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1322 05e4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1323 05e8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1324 05ec 14D04DE2 		sub	sp, sp, #20	@,,
 1325              		.cfi_def_cfa_offset 56
 1326              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1327              		.loc 1 266 1 view .LVU359
 1328 05f0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1329 05f4 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1330 05f8 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1331              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1332              		.loc 1 270 5 view .LVU360
 1333 05fc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1334 0600 F460CDE1 		strd	r6, [sp, #4]	@,,
 1335 0604 0230A0E1 		mov	r3, r2	@, waves_max
 1336              	.LVL78:
 1337              		.loc 1 270 5 view .LVU361
 1338 0608 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1339 060c 0120A0E1 		mov	r2, r1	@, end_point
 1340              	.LVL79:
 1341              		.loc 1 270 5 view .LVU362
 1342 0610 0010A0E1 		mov	r1, r0	@, start_point
 1343              	.LVL80:
 1344              		.loc 1 270 5 view .LVU363
 1345 0614 CC019FE5 		ldr	r0, .L89+12	@,
 1346              	.LVL81:
 1347              		.loc 1 270 5 view .LVU364
 1348 0618 FEFFFFEB 		bl	printf		@
 1349              	.LVL82:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 1350              		.loc 1 273 5 is_stmt 1 view .LVU365
 1351 061c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1352 0620 5E00002A 		bcs	.L86		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     **** 
 279:armwave.c     ****     if(target_height == 256) {
 280:armwave.c     ****         g_armwave_state.row_shift = 8;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 282:armwave.c     ****     } else if(target_height == 512) {
 283:armwave.c     ****         g_armwave_state.row_shift = 9;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 285:armwave.c     ****     } else if(target_height == 1024) {
 286:armwave.c     ****         g_armwave_state.row_shift = 10;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 288:armwave.c     ****     } else if(target_height == 2048) {
 289:armwave.c     ****         g_armwave_state.row_shift = 11;
 290:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 291:armwave.c     ****     }
 292:armwave.c     ****     */
 293:armwave.c     **** 
 294:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 295:armwave.c     ****     g_armwave_state.xstride = target_height;
 1353              		.loc 1 295 5 view .LVU366
 1354              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1355              		.loc 1 306 45 is_stmt 0 view .LVU367
 1356 0624 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1357              	.LVL83:
 1358              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1359              		.loc 1 296 49 view .LVU368
 1360 0628 6B6A9FED 		vldr.32	s12, .L89	@ tmp175,
 1361              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 308:armwave.c     ****     // Calculate compound scaler
 309:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1362              		.loc 1 310 48 view .LVU369
 1363 062c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1364              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1365              		.loc 1 310 79 view .LVU370
 1366 0630 6A6ADFED 		vldr.32	s13, .L89+4	@ tmp199,
 1367              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1368              		.loc 1 303 90 view .LVU371
 1369 0634 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1370              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1371              		.loc 1 295 29 view .LVU372
 1372 0638 AC419FE5 		ldr	r4, .L89+16	@ tmp242,
 1373              	.LVL84:
 1374              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1375              		.loc 1 310 48 view .LVU373
 1376 063c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1377              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1378              		.loc 1 296 49 view .LVU374
 1379 0640 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1380              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1381              		.loc 1 301 42 view .LVU375
 1382 0644 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1383              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1384              		.loc 1 303 74 view .LVU376
 1385 0648 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1386              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1387              		.loc 1 296 49 view .LVU377
 1388 064c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1389              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1390              		.loc 1 310 48 view .LVU378
 1391 0650 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1392              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1393              		.loc 1 303 74 view .LVU379
 1394 0654 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1395              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1396              		.loc 1 295 29 view .LVU380
 1397 0658 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1398              		.loc 1 296 5 is_stmt 1 view .LVU381
 1399              	@ armwave.c:305:     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1400              		.loc 1 305 35 is_stmt 0 view .LVU382
 1401 065c F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1402              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1403              		.loc 1 310 48 view .LVU383
 1404 0660 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1405              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1406              		.loc 1 312 5 view .LVU384
 1407 0664 0310A0E1 		mov	r1, r3	@, tmp190
 1408              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1409              		.loc 1 301 26 view .LVU385
 1410 0668 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1411              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1412              		.loc 1 302 37 view .LVU386
 1413 066c 017CA0E3 		mov	r7, #256	@ tmp185,
 1414              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1415              		.loc 1 303 34 view .LVU387
 1416 0670 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1417              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1418              		.loc 1 312 5 view .LVU388
 1419 0674 74019FE5 		ldr	r0, .L89+20	@,
 1420              	@ armwave.c:298:     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1421              		.loc 1 298 33 view .LVU389
 1422 0678 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1423              	@ armwave.c:299:     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1424              		.loc 1 299 31 view .LVU390
 1425 067c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1426              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1427              		.loc 1 310 48 view .LVU391
 1428 0680 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1429              	@ armwave.c:300:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1430              		.loc 1 300 27 view .LVU392
 1431 0684 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1432              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 306:armwave.c     **** 
 1433              		.loc 1 306 33 view .LVU393
 1434 0688 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1435              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1436              		.loc 1 302 37 view .LVU394
 1437 068c 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1438              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1439              		.loc 1 296 49 view .LVU395
 1440 0690 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1441              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1442              		.loc 1 310 79 view .LVU396
 1443 0694 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1444              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1445              		.loc 1 309 42 view .LVU397
 1446 0698 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1447              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1448              		.loc 1 296 33 view .LVU398
 1449 069c 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1450              		.loc 1 297 5 is_stmt 1 view .LVU399
 1451              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1452              		.loc 1 309 42 is_stmt 0 view .LVU400
 1453 06a0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1454              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1455              		.loc 1 297 30 view .LVU401
 1456 06a4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1457              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1458              		.loc 1 312 5 view .LVU402
 1459 06a8 0C30A0E1 		mov	r3, ip	@, _19
 1460 06ac 0C20A0E1 		mov	r2, ip	@, tmp3
 1461              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1462              		.loc 1 309 42 view .LVU403
 1463 06b0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1464              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1465              		.loc 1 297 30 view .LVU404
 1466 06b4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1467              		.loc 1 298 5 is_stmt 1 view .LVU405
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1468              		.loc 1 299 5 view .LVU406
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1469              		.loc 1 300 5 view .LVU407
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1470              		.loc 1 301 5 view .LVU408
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1471              		.loc 1 302 5 view .LVU409
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1472              		.loc 1 303 5 view .LVU410
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 1473              		.loc 1 304 5 view .LVU411
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1474              		.loc 1 305 5 view .LVU412
 306:armwave.c     **** 
 1475              		.loc 1 306 5 view .LVU413
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1476              		.loc 1 309 5 view .LVU414
 1477              		.loc 1 312 5 view .LVU415
 1478 06b8 FEFFFFEB 		bl	printf		@
 1479              	.LVL85:
 313:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 314:armwave.c     **** 
 315:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 316:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 317:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1480              		.loc 1 318 5 view .LVU416
 1481              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 319:armwave.c     **** 
 320:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1482              		.loc 1 320 23 is_stmt 0 view .LVU417
 1483 06bc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1484              	@ armwave.c:318:     g_armwave_state.slice_height = 256; // 64;  
 318:armwave.c     **** 
 1485              		.loc 1 318 34 view .LVU418
 1486 06c0 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1487              		.loc 1 320 5 is_stmt 1 view .LVU419
 1488              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 1489              		.loc 1 320 7 is_stmt 0 view .LVU420
 1490 06c4 000050E3 		cmp	r0, #0	@ _20,
 1491 06c8 0000000A 		beq	.L77		@,
 321:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1492              		.loc 1 321 9 is_stmt 1 view .LVU421
 1493 06cc FEFFFFEB 		bl	free		@
 1494              	.LVL86:
 1495              	.L77:
 322:armwave.c     **** 
 323:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1496              		.loc 1 323 5 view .LVU422
 1497              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1498              		.loc 1 323 34 is_stmt 0 view .LVU423
 1499 06d0 0110A0E3 		mov	r1, #1	@,
 1500 06d4 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1501 06d8 FEFFFFEB 		bl	calloc		@
 1502              	.LVL87:
 1503              	@ armwave.c:325:     assert(g_armwave_state.ch1_buffer != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1504              		.loc 1 325 5 view .LVU424
 1505 06dc 000050E3 		cmp	r0, #0	@ _23,
 1506              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1507              		.loc 1 323 34 view .LVU425
 1508 06e0 0070A0E1 		mov	r7, r0	@ _23,
 1509              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1510              		.loc 1 323 32 view .LVU426
 1511 06e4 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1512              		.loc 1 325 5 is_stmt 1 view .LVU427
 1513 06e8 3600000A 		beq	.L87		@,
 326:armwave.c     **** 
 327:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 328:armwave.c     ****     length = end_point - start_point;
 1514              		.loc 1 328 5 view .LVU428
 1515              	.LVL88:
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1516              		.loc 1 329 5 view .LVU429
 1517              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1518              		.loc 1 329 34 is_stmt 0 view .LVU430
 1519 06ec 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1520              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1521              		.loc 1 329 22 view .LVU431
 1522 06f0 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1523              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1524              		.loc 1 330 60 view .LVU432
 1525 06f4 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1526              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1527              		.loc 1 331 40 view .LVU433
 1528 06f8 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1529              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1530              		.loc 1 329 34 view .LVU434
 1531 06fc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1532              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1533              		.loc 1 329 22 view .LVU435
 1534 0700 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1535              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1536              		.loc 1 330 60 view .LVU436
 1537 0704 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1538              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1539              		.loc 1 329 22 view .LVU437
 1540 0708 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1541              	.LVL89:
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1542              		.loc 1 330 5 is_stmt 1 view .LVU438
 1543              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1544              		.loc 1 330 60 is_stmt 0 view .LVU439
 1545 070c 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1546              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1547              		.loc 1 330 41 view .LVU440
 1548 0710 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1549 0714 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1550              		.loc 1 331 5 is_stmt 1 view .LVU441
 1551              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1552              		.loc 1 331 40 is_stmt 0 view .LVU442
 1553 0718 FEFFFFEB 		bl	malloc		@
 1554              	.LVL90:
 1555              	@ armwave.c:333:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 332:armwave.c     **** 
 333:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1556              		.loc 1 333 5 view .LVU443
 1557 071c 000050E3 		cmp	r0, #0	@ _31,
 1558              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1559              		.loc 1 331 40 view .LVU444
 1560 0720 0060A0E1 		mov	r6, r0	@ _31,
 1561              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1562              		.loc 1 331 38 view .LVU445
 1563 0724 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1564              		.loc 1 333 5 is_stmt 1 view .LVU446
 1565 0728 2100000A 		beq	.L88		@,
 1566              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334:armwave.c     **** 
 335:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1567              		.loc 1 336 54 is_stmt 0 view .LVU447
 1568 072c 2C7ADFED 		vldr.32	s15, .L89+8	@ tmp230,
 1569 0730 02C040E2 		sub	ip, r0, #2	@ ivtmp.81, _31,
 1570              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1571              		.loc 1 335 12 view .LVU448
 1572 0734 0030A0E3 		mov	r3, #0	@ xx,
 1573              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 336 54 view .LVU449
 1575 0738 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1576              	.L80:
 1577              	.LVL91:
 1578              		.loc 1 336 9 is_stmt 1 discriminator 3 view .LVU450
 1579              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1580              		.loc 1 336 74 is_stmt 0 discriminator 3 view .LVU451
 1581 073c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1582              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1583              		.loc 1 335 32 discriminator 3 view .LVU452
 1584 0740 013083E2 		add	r3, r3, #1	@ xx, xx,
 1585              	.LVL92:
 1586              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1587              		.loc 1 335 5 discriminator 3 view .LVU453
 1588 0744 030055E1 		cmp	r5, r3	@ _13, xx
 1589              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1590              		.loc 1 336 74 discriminator 3 view .LVU454
 1591 0748 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1592 074c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1593              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1594              		.loc 1 336 46 discriminator 3 view .LVU455
 1595 0750 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1596 0754 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1597 0758 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1598              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1599              		.loc 1 335 5 discriminator 3 view .LVU456
 1600 075c F6FFFF1A 		bne	.L80		@,
 337:armwave.c     **** 
 338:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 339:armwave.c     ****     }
 340:armwave.c     **** 
 341:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1601              		.loc 1 341 5 is_stmt 1 view .LVU457
 1602              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1603              		.loc 1 341 34 is_stmt 0 view .LVU458
 1604 0760 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1605 0764 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1606 0768 FEFFFFEB 		bl	malloc		@
 1607              	.LVL93:
 1608              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 342:armwave.c     **** 
 343:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1609              		.loc 1 343 5 view .LVU459
 1610 076c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1611 0770 0620A0E1 		mov	r2, r6	@, _31
 1612 0774 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1613 0778 0710A0E1 		mov	r1, r7	@, _23
 1614              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1615              		.loc 1 341 34 view .LVU460
 1616 077c 00C0A0E1 		mov	ip, r0	@ tmp237,
 1617              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1618              		.loc 1 343 5 view .LVU461
 1619 0780 0030A0E1 		mov	r3, r0	@, tmp237
 1620              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1621              		.loc 1 341 32 view .LVU462
 1622 0784 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1623              		.loc 1 343 5 is_stmt 1 view .LVU463
 1624 0788 64009FE5 		ldr	r0, .L89+24	@,
 1625 078c FEFFFFEB 		bl	printf		@
 1626              	.LVL94:
 344:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 345:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 348:armwave.c     **** 
 349:armwave.c     ****     malloc_stats();
 1627              		.loc 1 349 5 view .LVU464
 1628              	@ armwave.c:350: }
 350:armwave.c     **** }
 1629              		.loc 1 350 1 is_stmt 0 view .LVU465
 1630 0790 14D08DE2 		add	sp, sp, #20	@,,
 1631              		.cfi_remember_state
 1632              		.cfi_def_cfa_offset 36
 1633              		@ sp needed	@
 1634 0794 028BBDEC 		vldm	sp!, {d8}	@
 1635              		.cfi_restore 80
 1636              		.cfi_restore 81
 1637              		.cfi_def_cfa_offset 28
 1638              	.LVL95:
 1639              		.loc 1 350 1 view .LVU466
 1640 0798 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1641              		.cfi_restore 14
 1642              		.cfi_restore 9
 1643              		.cfi_restore 8
 1644              		.cfi_restore 7
 1645              		.cfi_restore 6
 1646              		.cfi_restore 5
 1647              		.cfi_restore 4
 1648              		.cfi_def_cfa_offset 0
 1649              	.LVL96:
 1650              	@ armwave.c:349:     malloc_stats();
 349:armwave.c     **** }
 1651              		.loc 1 349 5 view .LVU467
 1652 079c FEFFFFEA 		b	malloc_stats		@
 1653              	.LVL97:
 1654              	.L86:
 1655              		.cfi_restore_state
 273:armwave.c     **** 
 1656              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU468
 1657 07a0 50309FE5 		ldr	r3, .L89+28	@,
 1658 07a4 50209FE5 		ldr	r2, .L89+32	@,
 1659 07a8 50109FE5 		ldr	r1, .L89+36	@,
 1660 07ac 50009FE5 		ldr	r0, .L89+40	@,
 1661 07b0 FEFFFFEB 		bl	__assert_fail		@
 1662              	.LVL98:
 1663              	.L88:
 333:armwave.c     **** 
 1664              		.loc 1 333 5 discriminator 1 view .LVU469
 1665 07b4 3C309FE5 		ldr	r3, .L89+28	@,
 1666 07b8 48209FE5 		ldr	r2, .L89+44	@,
 1667 07bc 3C109FE5 		ldr	r1, .L89+36	@,
 1668 07c0 44009FE5 		ldr	r0, .L89+48	@,
 1669 07c4 FEFFFFEB 		bl	__assert_fail		@
 1670              	.LVL99:
 1671              	.L87:
 325:armwave.c     **** 
 1672              		.loc 1 325 5 discriminator 1 view .LVU470
 1673 07c8 28309FE5 		ldr	r3, .L89+28	@,
 1674 07cc 3C209FE5 		ldr	r2, .L89+52	@,
 1675 07d0 28109FE5 		ldr	r1, .L89+36	@,
 1676 07d4 38009FE5 		ldr	r0, .L89+56	@,
 1677 07d8 FEFFFFEB 		bl	__assert_fail		@
 1678              	.LVL100:
 1679              	.L90:
 1680              		.align	2
 1681              	.L89:
 1682 07dc 00007F43 		.word	1132396544
 1683 07e0 00008043 		.word	1132462080
 1684 07e4 0000803F 		.word	1065353216
 1685 07e8 7C000000 		.word	.LC5
 1686 07ec 00000000 		.word	g_armwave_state
 1687 07f0 C0000000 		.word	.LC7
 1688 07f4 44010000 		.word	.LC10
 1689 07f8 1C000000 		.word	.LANCHOR0+28
 1690 07fc 11010000 		.word	273
 1691 0800 5C000000 		.word	.LC3
 1692 0804 A8000000 		.word	.LC6
 1693 0808 4D010000 		.word	333
 1694 080c 18010000 		.word	.LC9
 1695 0810 45010000 		.word	325
 1696 0814 F4000000 		.word	.LC8
 1697              		.cfi_endproc
 1698              	.LFE62:
 1700              		.align	2
 1701              		.global	armwave_set_wave_pointer
 1702              		.syntax unified
 1703              		.arm
 1704              		.fpu vfp
 1706              	armwave_set_wave_pointer:
 1707              	.LVL101:
 1708              	.LFB63:
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 354:armwave.c     ****  * in the future.
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 357:armwave.c     **** {
 1709              		.loc 1 357 1 view -0
 1710              		.cfi_startproc
 1711              		@ args = 0, pretend = 0, frame = 0
 1712              		@ frame_needed = 0, uses_anonymous_args = 0
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1713              		.loc 1 358 5 view .LVU472
 1714 0818 000050E3 		cmp	r0, #0	@ wave_buffer
 1715              		.loc 1 358 5 is_stmt 0 view .LVU473
 1716 081c 0200000A 		beq	.L96		@,
 359:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1717              		.loc 1 359 5 is_stmt 1 view .LVU474
 1718              	@ armwave.c:359:     g_armwave_state.wave_buffer = wave_buffer;
 1719              		.loc 1 359 33 is_stmt 0 view .LVU475
 1720 0820 1C309FE5 		ldr	r3, .L97	@ tmp116,
 1721 0824 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1722 0828 1EFF2FE1 		bx	lr	@
 1723              	.L96:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1724              		.loc 1 358 5 is_stmt 1 discriminator 1 view .LVU476
 1725              	@ armwave.c:357: {
 357:armwave.c     ****     assert(wave_buffer != NULL);
 1726              		.loc 1 357 1 is_stmt 0 discriminator 1 view .LVU477
 1727 082c 10402DE9 		push	{r4, lr}	@
 1728              		.cfi_def_cfa_offset 8
 1729              		.cfi_offset 4, -8
 1730              		.cfi_offset 14, -4
 1731              	@ armwave.c:358:     assert(wave_buffer != NULL);
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1732              		.loc 1 358 5 discriminator 1 view .LVU478
 1733 0830 10309FE5 		ldr	r3, .L97+4	@,
 1734 0834 10209FE5 		ldr	r2, .L97+8	@,
 1735 0838 10109FE5 		ldr	r1, .L97+12	@,
 1736 083c 10009FE5 		ldr	r0, .L97+16	@,
 1737              	.LVL102:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1738              		.loc 1 358 5 discriminator 1 view .LVU479
 1739 0840 FEFFFFEB 		bl	__assert_fail		@
 1740              	.LVL103:
 1741              	.L98:
 1742              		.align	2
 1743              	.L97:
 1744 0844 00000000 		.word	g_armwave_state
 1745 0848 34000000 		.word	.LANCHOR0+52
 1746 084c 66010000 		.word	358
 1747 0850 5C000000 		.word	.LC3
 1748 0854 68010000 		.word	.LC11
 1749              		.cfi_endproc
 1750              	.LFE63:
 1752              		.align	2
 1753              		.global	armwave_set_wave_pointer_as_testbuf
 1754              		.syntax unified
 1755              		.arm
 1756              		.fpu vfp
 1758              	armwave_set_wave_pointer_as_testbuf:
 1759              	.LVL104:
 1760              	.LFB64:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 364:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 365:armwave.c     ****  */
 366:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 367:armwave.c     **** {
 1761              		.loc 1 367 1 is_stmt 1 view -0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 0
 1764              		@ frame_needed = 0, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 368:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1766              		.loc 1 368 5 view .LVU481
 1767              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1768              		.loc 1 368 29 is_stmt 0 view .LVU482
 1769 0858 24309FE5 		ldr	r3, .L102	@ tmp117,
 1770              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1771              		.loc 1 368 7 view .LVU483
 1772 085c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1773 0860 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1774 0864 0400003A 		bcc	.L101		@,
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 370:armwave.c     ****         return;
 371:armwave.c     ****     }
 372:armwave.c     **** 
 373:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1775              		.loc 1 373 5 is_stmt 1 view .LVU484
 1776              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1777              		.loc 1 373 111 is_stmt 0 view .LVU485
 1778 0868 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1779              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1780              		.loc 1 373 68 view .LVU486
 1781 086c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1782 0870 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1783              	.LVL105:
 1784              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1785              		.loc 1 373 33 view .LVU487
 1786 0874 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1787              	@ armwave.c:374: }
 374:armwave.c     **** }
 1788              		.loc 1 374 1 view .LVU488
 1789 0878 1EFF2FE1 		bx	lr	@
 1790              	.LVL106:
 1791              	.L101:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1792              		.loc 1 369 9 is_stmt 1 view .LVU489
 1793 087c 04009FE5 		ldr	r0, .L102+4	@,
 1794              	.LVL107:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1795              		.loc 1 369 9 is_stmt 0 view .LVU490
 1796 0880 FEFFFFEA 		b	puts		@
 1797              	.LVL108:
 1798              	.L103:
 1799              		.align	2
 1800              	.L102:
 1801 0884 00000000 		.word	g_armwave_state
 1802 0888 7C010000 		.word	.LC12
 1803              		.cfi_endproc
 1804              	.LFE64:
 1806              		.align	2
 1807              		.global	armwave_set_wave_pointer_u32
 1808              		.syntax unified
 1809              		.arm
 1810              		.fpu vfp
 1812              	armwave_set_wave_pointer_u32:
 1813              	.LVL109:
 1814              	.LFB65:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 378:armwave.c     ****  * disjointed buffers in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 381:armwave.c     **** {
 1815              		.loc 1 381 1 is_stmt 1 view -0
 1816              		.cfi_startproc
 1817              		@ args = 0, pretend = 0, frame = 0
 1818              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1819              		.loc 1 382 5 view .LVU492
 1820 088c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1821              		.loc 1 382 5 is_stmt 0 view .LVU493
 1822 0890 0200000A 		beq	.L109		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1823              		.loc 1 383 5 is_stmt 1 view .LVU494
 1824              	@ armwave.c:383:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1825              		.loc 1 383 33 is_stmt 0 view .LVU495
 1826 0894 1C309FE5 		ldr	r3, .L110	@ tmp117,
 1827 0898 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1828 089c 1EFF2FE1 		bx	lr	@
 1829              	.L109:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1830              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU496
 1831              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1832              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU497
 1833 08a0 10402DE9 		push	{r4, lr}	@
 1834              		.cfi_def_cfa_offset 8
 1835              		.cfi_offset 4, -8
 1836              		.cfi_offset 14, -4
 1837              	@ armwave.c:382:     assert(wave_buffer_ptr != 0);
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1838              		.loc 1 382 5 discriminator 1 view .LVU498
 1839 08a4 10309FE5 		ldr	r3, .L110+4	@,
 1840 08a8 10209FE5 		ldr	r2, .L110+8	@,
 1841 08ac 10109FE5 		ldr	r1, .L110+12	@,
 1842 08b0 10009FE5 		ldr	r0, .L110+16	@,
 1843              	.LVL110:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1844              		.loc 1 382 5 discriminator 1 view .LVU499
 1845 08b4 FEFFFFEB 		bl	__assert_fail		@
 1846              	.LVL111:
 1847              	.L111:
 1848              		.align	2
 1849              	.L110:
 1850 08b8 00000000 		.word	g_armwave_state
 1851 08bc 50000000 		.word	.LANCHOR0+80
 1852 08c0 7E010000 		.word	382
 1853 08c4 5C000000 		.word	.LC3
 1854 08c8 B8010000 		.word	.LC13
 1855              		.cfi_endproc
 1856              	.LFE65:
 1858              		.align	2
 1859              		.global	armwave_clear_buffer
 1860              		.syntax unified
 1861              		.arm
 1862              		.fpu vfp
 1864              	armwave_clear_buffer:
 1865              	.LVL112:
 1866              	.LFB66:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 390:armwave.c     **** {
 1867              		.loc 1 390 1 is_stmt 1 view -0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 0
 1870              		@ frame_needed = 0, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 391:armwave.c     ****     // Flags ignored, only one buffer cleared
 392:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1872              		.loc 1 392 5 view .LVU501
 1873              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1874              		.loc 1 392 58 is_stmt 0 view .LVU502
 1875 08cc 0C309FE5 		ldr	r3, .L113	@ tmp114,
 1876              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1877              		.loc 1 392 5 view .LVU503
 1878 08d0 0010A0E3 		mov	r1, #0	@,
 1879 08d4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1880 08d8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1881              	.LVL113:
 1882              		.loc 1 392 5 view .LVU504
 1883 08dc FEFFFFEA 		b	memset		@
 1884              	.LVL114:
 1885              	.L114:
 1886              		.align	2
 1887              	.L113:
 1888 08e0 00000000 		.word	g_armwave_state
 1889              		.cfi_endproc
 1890              	.LFE66:
 1892              		.align	2
 1893              		.global	armwave_set_channel_colour
 1894              		.syntax unified
 1895              		.arm
 1896              		.fpu vfp
 1898              	armwave_set_channel_colour:
 1899              	.LVL115:
 1900              	.LFB67:
 393:armwave.c     **** }
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 397:armwave.c     ****  */
 398:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 399:armwave.c     **** {
 1901              		.loc 1 399 1 is_stmt 1 view -0
 1902              		.cfi_startproc
 1903              		@ args = 0, pretend = 0, frame = 0
 1904              		@ frame_needed = 0, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 400:armwave.c     ****     // Only 1ch supported for now
 401:armwave.c     ****     switch(ch) {
 1906              		.loc 1 401 5 view .LVU506
 1907 08e4 010050E3 		cmp	r0, #1	@ ch,
 402:armwave.c     ****         case 1:
 403:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1908              		.loc 1 403 13 view .LVU507
 1909              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 1910              		.loc 1 403 41 is_stmt 0 view .LVU508
 1911 08e8 0C009F05 		ldreq	r0, .L117	@ tmp117,
 1912              	.LVL116:
 1913              		.loc 1 403 41 view .LVU509
 1914 08ec BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1915              		.loc 1 404 13 is_stmt 1 view .LVU510
 1916              	@ armwave.c:404:             g_armwave_state.ch1_color.g = g;
 1917              		.loc 1 404 41 is_stmt 0 view .LVU511
 1918 08f0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1919              		.loc 1 405 13 is_stmt 1 view .LVU512
 1920              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 1921              		.loc 1 405 41 is_stmt 0 view .LVU513
 1922 08f4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 406:armwave.c     ****             break;
 1923              		.loc 1 406 13 is_stmt 1 view .LVU514
 1924              	@ armwave.c:408: }
 407:armwave.c     ****     }
 408:armwave.c     **** }
 1925              		.loc 1 408 1 is_stmt 0 view .LVU515
 1926 08f8 1EFF2FE1 		bx	lr	@
 1927              	.L118:
 1928              		.align	2
 1929              	.L117:
 1930 08fc 00000000 		.word	g_armwave_state
 1931              		.cfi_endproc
 1932              	.LFE67:
 1934              		.align	2
 1935              		.global	armwave_dump_ppm_debug
 1936              		.syntax unified
 1937              		.arm
 1938              		.fpu vfp
 1940              	armwave_dump_ppm_debug:
 1941              	.LVL117:
 1942              	.LFB68:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Dump a ppm of a buffer to a file.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 414:armwave.c     **** {
 1943              		.loc 1 414 1 is_stmt 1 view -0
 1944              		.cfi_startproc
 1945              		@ args = 0, pretend = 0, frame = 0
 1946              		@ frame_needed = 0, uses_anonymous_args = 0
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1947              		.loc 1 415 5 view .LVU517
 1948              	@ armwave.c:414: {
 414:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1949              		.loc 1 414 1 is_stmt 0 view .LVU518
 1950 0900 0130A0E1 		mov	r3, r1	@ fn, fn
 1951 0904 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1952              		.cfi_def_cfa_offset 28
 1953              		.cfi_offset 4, -28
 1954              		.cfi_offset 5, -24
 1955              		.cfi_offset 6, -20
 1956              		.cfi_offset 7, -16
 1957              		.cfi_offset 8, -12
 1958              		.cfi_offset 9, -8
 1959              		.cfi_offset 14, -4
 1960 0908 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1961 090c 0CD04DE2 		sub	sp, sp, #12	@,,
 1962              		.cfi_def_cfa_offset 40
 1963              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 1964              		.loc 1 415 16 view .LVU519
 1965 0910 C4109FE5 		ldr	r1, .L127	@,
 1966              	.LVL118:
 1967              		.loc 1 415 16 view .LVU520
 1968 0914 0300A0E1 		mov	r0, r3	@, fn
 1969              	.LVL119:
 1970              		.loc 1 415 16 view .LVU521
 1971 0918 FEFFFFEB 		bl	fopen64		@
 1972              	.LVL120:
 1973              	@ armwave.c:422:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 416:armwave.c     ****     uint32_t data;
 417:armwave.c     ****     int xx, yy;
 418:armwave.c     **** 
 419:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 420:armwave.c     **** 
 421:armwave.c     ****     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1974              		.loc 1 422 5 view .LVU522
 1975 091c BC609FE5 		ldr	r6, .L127+4	@ tmp150,
 1976              	@ armwave.c:421:     fputs("P3\n", fp);
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1977              		.loc 1 421 5 view .LVU523
 1978 0920 0320A0E3 		mov	r2, #3	@,
 1979 0924 0110A0E3 		mov	r1, #1	@,
 1980              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 415:armwave.c     ****     uint32_t data;
 1981              		.loc 1 415 16 view .LVU524
 1982 0928 0070A0E1 		mov	r7, r0	@ fp,
 1983              	.LVL121:
 416:armwave.c     ****     uint32_t data;
 1984              		.loc 1 416 5 is_stmt 1 view .LVU525
 417:armwave.c     **** 
 1985              		.loc 1 417 5 view .LVU526
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1986              		.loc 1 421 5 view .LVU527
 1987 092c 0030A0E1 		mov	r3, r0	@, fp
 1988 0930 AC009FE5 		ldr	r0, .L127+8	@,
 1989              	.LVL122:
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1990              		.loc 1 421 5 is_stmt 0 view .LVU528
 1991 0934 FEFFFFEB 		bl	fwrite		@
 1992              	.LVL123:
 1993              		.loc 1 422 5 is_stmt 1 view .LVU529
 1994 0938 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1995 093c A4109FE5 		ldr	r1, .L127+12	@,
 1996 0940 0700A0E1 		mov	r0, r7	@, fp
 1997 0944 FEFFFFEB 		bl	fprintf		@
 1998              	.LVL124:
 423:armwave.c     ****     fputs("255\n", fp);
 1999              		.loc 1 423 5 view .LVU530
 2000 0948 0420A0E3 		mov	r2, #4	@,
 2001 094c 0730A0E1 		mov	r3, r7	@, fp
 2002 0950 0110A0E3 		mov	r1, #1	@,
 2003 0954 90009FE5 		ldr	r0, .L127+16	@,
 2004 0958 FEFFFFEB 		bl	fwrite		@
 2005              	.LVL125:
 424:armwave.c     **** 
 425:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2006              		.loc 1 425 5 view .LVU531
 2007              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2008              		.loc 1 425 37 is_stmt 0 view .LVU532
 2009 095c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2010              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2011              		.loc 1 425 5 view .LVU533
 2012 0960 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2013 0964 180000DA 		ble	.L120		@,
 2014 0968 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2015              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 429:armwave.c     **** 
 430:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2016              		.loc 1 430 13 view .LVU534
 2017 096c 7C909FE5 		ldr	r9, .L127+20	@ tmp152,
 2018              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2019              		.loc 1 425 12 view .LVU535
 2020 0970 0050A0E3 		mov	r5, #0	@ yy,
 2021              	.LVL126:
 2022              	.L121:
 2023              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2024              		.loc 1 426 9 view .LVU536
 2025 0974 000053E3 		cmp	r3, #0	@ _13,
 2026              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2027              		.loc 1 426 16 view .LVU537
 2028 0978 0040A0C3 		movgt	r4, #0	@ xx,
 2029              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2030              		.loc 1 426 9 view .LVU538
 2031 097c 0F0000DA 		ble	.L123		@,
 2032              	.LVL127:
 2033              	.L122:
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2034              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU539
 2035              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2036              		.loc 1 427 29 is_stmt 0 discriminator 3 view .LVU540
 2037 0980 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2038              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2039              		.loc 1 430 13 discriminator 3 view .LVU541
 2040 0984 0910A0E1 		mov	r1, r9	@, tmp152
 2041 0988 0700A0E1 		mov	r0, r7	@, fp
 2042              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2043              		.loc 1 427 18 discriminator 3 view .LVU542
 2044 098c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2045              	.LVL128:
 2046              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU543
 2047              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2048              		.loc 1 426 58 is_stmt 0 discriminator 3 view .LVU544
 2049 0990 014084E2 		add	r4, r4, #1	@ xx, xx,
 2050              	.LVL129:
 2051              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2052              		.loc 1 430 81 discriminator 3 view .LVU545
 2053 0994 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2054              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2055              		.loc 1 430 61 discriminator 3 view .LVU546
 2056 0998 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2057              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2058              		.loc 1 430 13 discriminator 3 view .LVU547
 2059 099c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2060 09a0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2061 09a4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2062 09a8 7220EFE6 		uxtb	r2, r2	@, data
 2063              	.LVL130:
 2064              		.loc 1 430 13 discriminator 3 view .LVU548
 2065 09ac FEFFFFEB 		bl	fprintf		@
 2066              	.LVL131:
 2067              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2068              		.loc 1 426 41 discriminator 3 view .LVU549
 2069 09b0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2070              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2071              		.loc 1 426 9 discriminator 3 view .LVU550
 2072 09b4 040053E1 		cmp	r3, r4	@ _13, xx
 2073 09b8 F0FFFFCA 		bgt	.L122		@,
 2074 09bc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2075              	.LVL132:
 2076              	.L123:
 2077              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2078              		.loc 1 425 55 discriminator 2 view .LVU551
 2079 09c0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2080              	.LVL133:
 2081              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2082              		.loc 1 425 5 discriminator 2 view .LVU552
 2083 09c4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2084 09c8 E9FFFFBA 		blt	.L121		@,
 2085              	.LVL134:
 2086              	.L120:
 431:armwave.c     ****         }
 432:armwave.c     ****     }
 433:armwave.c     **** 
 434:armwave.c     ****     fclose(fp);
 2087              		.loc 1 434 5 is_stmt 1 view .LVU553
 2088 09cc 0700A0E1 		mov	r0, r7	@, fp
 2089              	@ armwave.c:435: }
 435:armwave.c     **** }
 2090              		.loc 1 435 1 is_stmt 0 view .LVU554
 2091 09d0 0CD08DE2 		add	sp, sp, #12	@,,
 2092              		.cfi_def_cfa_offset 28
 2093              		@ sp needed	@
 2094 09d4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2095              		.cfi_restore 14
 2096              		.cfi_restore 9
 2097              		.cfi_restore 8
 2098              		.cfi_restore 7
 2099              		.cfi_restore 6
 2100              		.cfi_restore 5
 2101              		.cfi_restore 4
 2102              		.cfi_def_cfa_offset 0
 2103              	.LVL135:
 2104              	@ armwave.c:434:     fclose(fp);
 434:armwave.c     **** }
 2105              		.loc 1 434 5 view .LVU555
 2106 09d8 FEFFFFEA 		b	fclose		@
 2107              	.LVL136:
 2108              	.L128:
 434:armwave.c     **** }
 2109              		.loc 1 434 5 view .LVU556
 2110              		.align	2
 2111              	.L127:
 2112 09dc D0010000 		.word	.LC14
 2113 09e0 00000000 		.word	g_armwave_state
 2114 09e4 D4010000 		.word	.LC15
 2115 09e8 D8010000 		.word	.LC16
 2116 09ec E0010000 		.word	.LC17
 2117 09f0 E8010000 		.word	.LC18
 2118              		.cfi_endproc
 2119              	.LFE68:
 2121              		.align	2
 2122              		.global	armwave_test_init
 2123              		.syntax unified
 2124              		.arm
 2125              		.fpu vfp
 2127              	armwave_test_init:
 2128              	.LVL137:
 2129              	.LFB69:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Initialise some test functionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 441:armwave.c     **** {
 2130              		.loc 1 441 1 is_stmt 1 view -0
 2131              		.cfi_startproc
 2132              		@ args = 0, pretend = 0, frame = 0
 2133              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     test_create_gamma();
 2134              		.loc 1 442 5 view .LVU558
 2135              	.LBB22:
 2136              	.LBI22:
  34:armwave.c     **** {
 2137              		.loc 1 34 6 view .LVU559
  34:armwave.c     **** {
 2138              		.loc 1 34 6 is_stmt 0 view .LVU560
 2139              	.LBE22:
 2140              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2141              		.loc 1 441 1 view .LVU561
 2142 09f4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2143              		.cfi_def_cfa_offset 32
 2144              		.cfi_offset 4, -32
 2145              		.cfi_offset 5, -28
 2146              		.cfi_offset 6, -24
 2147              		.cfi_offset 7, -20
 2148              		.cfi_offset 8, -16
 2149              		.cfi_offset 9, -12
 2150              		.cfi_offset 10, -8
 2151              		.cfi_offset 14, -4
 2152 09f8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2153              		.cfi_def_cfa_offset 56
 2154              		.cfi_offset 80, -56
 2155              		.cfi_offset 81, -52
 2156              		.cfi_offset 82, -48
 2157              		.cfi_offset 83, -44
 2158              		.cfi_offset 84, -40
 2159              		.cfi_offset 85, -36
 2160 09fc C0409FE5 		ldr	r4, .L133+20	@ ivtmp.95,
 2161              	.LBB25:
 2162              	.LBB23:
 2163              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2164              		.loc 1 40 32 view .LVU562
 2165 0a00 2EAA9FED 		vldr.32	s20, .L133+16	@ tmp136,
 2166              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2167              		.loc 1 40 26 view .LVU563
 2168 0a04 299B9FED 		vldr.64	d9, .L133	@ tmp151,
 2169              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2170              		.loc 1 40 49 view .LVU564
 2171 0a08 2A8B9FED 		vldr.64	d8, .L133+8	@ tmp139,
 2172 0a0c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.95,
 2173              	.LBE23:
 2174              	.LBE25:
 2175              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2176              		.loc 1 441 1 view .LVU565
 2177 0a10 10D04DE2 		sub	sp, sp, #16	@,,
 2178              		.cfi_def_cfa_offset 72
 2179              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2180              		.loc 1 441 1 view .LVU566
 2181 0a14 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2182 0a18 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2183 0a1c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2184 0a20 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2185 0a24 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.95,
 2186 0a28 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2187              	.LVL138:
 2188              	.L130:
 2189              	.LBB26:
 2190              	.LBB24:
  40:armwave.c     ****     }
 2191              		.loc 1 40 9 is_stmt 1 view .LVU567
 2192              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2193              		.loc 1 40 32 is_stmt 0 view .LVU568
 2194 0a2c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.95
 2195              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2196              		.loc 1 40 26 view .LVU569
 2197 0a30 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2198              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2199              		.loc 1 40 32 view .LVU570
 2200 0a34 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2201 0a38 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2202 0a3c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2203              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2204              		.loc 1 40 26 view .LVU571
 2205 0a40 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2206 0a44 FEFFFFEB 		bl	pow		@
 2207              	.LVL139:
 2208              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2209              		.loc 1 40 49 view .LVU572
 2210 0a48 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2211              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2212              		.loc 1 40 24 view .LVU573
 2213 0a4c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2214 0a50 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2215 0a54 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2216              	.LVL140:
 2217              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2218              		.loc 1 39 5 view .LVU574
 2219 0a58 0A0054E1 		cmp	r4, r10	@ ivtmp.95, _39
 2220 0a5c F2FFFF1A 		bne	.L130		@,
 2221              	.LVL141:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2222              		.loc 1 39 5 view .LVU575
 2223              	.LBE24:
 2224              	.LBE26:
 443:armwave.c     **** 
 444:armwave.c     ****     // make ch1 yellowish by default
 445:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2225              		.loc 1 445 5 is_stmt 1 view .LVU576
 2226              	.LBB27:
 2227              	.LBI27:
 398:armwave.c     **** {
 2228              		.loc 1 398 6 view .LVU577
 2229              	.LBB28:
 401:armwave.c     ****         case 1:
 2230              		.loc 1 401 5 view .LVU578
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2231              		.loc 1 403 13 view .LVU579
 404:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2232              		.loc 1 404 13 view .LVU580
 2233              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2234              		.loc 1 403 41 is_stmt 0 view .LVU581
 2235 0a60 60C09FE5 		ldr	ip, .L133+24	@ tmp142,
 2236 0a64 60409FE5 		ldr	r4, .L133+28	@ tmp143,
 2237              	.LBE28:
 2238              	.LBE27:
 2239              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 446:armwave.c     **** 
 447:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2240              		.loc 1 447 5 view .LVU582
 2241 0a68 0000A0E3 		mov	r0, #0	@ tmp147,
 2242              	.LBB32:
 2243              	.LBB29:
 2244              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 2245              		.loc 1 405 41 view .LVU583
 2246 0a6c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2247              	.LBE29:
 2248              	.LBE32:
 2249              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2250              		.loc 1 447 5 view .LVU584
 2251 0a70 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2252 0a74 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2253 0a78 00808DE5 		str	r8, [sp]	@ render_width,
 2254 0a7c 0610A0E1 		mov	r1, r6	@, tmp3
 2255 0a80 0720A0E1 		mov	r2, r7	@, nwaves
 2256              	.LBB33:
 2257              	.LBB30:
 2258              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2259              		.loc 1 403 41 view .LVU585
 2260 0a84 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 405:armwave.c     ****             break;
 2261              		.loc 1 405 13 is_stmt 1 view .LVU586
 2262              	.LBE30:
 2263              	.LBE33:
 2264              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2265              		.loc 1 447 5 is_stmt 0 view .LVU587
 2266 0a88 0630A0E1 		mov	r3, r6	@, wave_size
 2267              	.LBB34:
 2268              	.LBB31:
 2269              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 2270              		.loc 1 405 41 view .LVU588
 2271 0a8c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 406:armwave.c     ****     }
 2272              		.loc 1 406 13 is_stmt 1 view .LVU589
 2273              	.LVL142:
 406:armwave.c     ****     }
 2274              		.loc 1 406 13 is_stmt 0 view .LVU590
 2275              	.LBE31:
 2276              	.LBE34:
 2277              		.loc 1 447 5 is_stmt 1 view .LVU591
 2278 0a90 FEFFFFEB 		bl	armwave_setup_render		@
 2279              	.LVL143:
 448:armwave.c     **** 
 449:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2280              		.loc 1 449 5 view .LVU592
 2281 0a94 34109FE5 		ldr	r1, .L133+32	@,
 2282 0a98 34009FE5 		ldr	r0, .L133+36	@,
 2283              	@ armwave.c:450: }
 450:armwave.c     **** }
 2284              		.loc 1 450 1 is_stmt 0 view .LVU593
 2285 0a9c 10D08DE2 		add	sp, sp, #16	@,,
 2286              		.cfi_def_cfa_offset 56
 2287              		@ sp needed	@
 2288 0aa0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2289              		.cfi_restore 84
 2290              		.cfi_restore 85
 2291              		.cfi_restore 82
 2292              		.cfi_restore 83
 2293              		.cfi_restore 80
 2294              		.cfi_restore 81
 2295              		.cfi_def_cfa_offset 32
 2296 0aa4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2297              		.cfi_restore 14
 2298              		.cfi_restore 10
 2299              		.cfi_restore 9
 2300              		.cfi_restore 8
 2301              		.cfi_restore 7
 2302              		.cfi_restore 6
 2303              		.cfi_restore 5
 2304              		.cfi_restore 4
 2305              		.cfi_def_cfa_offset 0
 2306              	.LVL144:
 2307              	@ armwave.c:449:     printf("armwave version: %s\n", ARMWAVE_VER);
 449:armwave.c     **** }
 2308              		.loc 1 449 5 view .LVU594
 2309 0aa8 FEFFFFEA 		b	printf		@
 2310              	.LVL145:
 2311              	.L134:
 2312 0aac 0000A0E1 		.align	3
 2313              	.L133:
 2314 0ab0 000000C0 		.word	-1073741824
 2315 0ab4 CCCCEC3F 		.word	1072483532
 2316 0ab8 00000000 		.word	0
 2317 0abc 00E06F40 		.word	1081073664
 2318 0ac0 00007F43 		.word	1132396544
 2319 0ac4 FFFFFFFF 		.word	gamma_table-1
 2320 0ac8 00000000 		.word	g_armwave_state
 2321 0acc F609F406 		.word	116656630
 2322 0ad0 00000000 		.word	.LC0
 2323 0ad4 08000000 		.word	.LC1
 2324              		.cfi_endproc
 2325              	.LFE69:
 2327              		.align	2
 2328              		.global	armwave_test_fill_outbuf
 2329              		.syntax unified
 2330              		.arm
 2331              		.fpu vfp
 2333              	armwave_test_fill_outbuf:
 2334              	.LFB70:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Render image to the local allocated buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_fill_outbuf()
 456:armwave.c     **** {
 2335              		.loc 1 456 1 is_stmt 1 view -0
 2336              		.cfi_startproc
 2337              		@ args = 0, pretend = 0, frame = 0
 2338              		@ frame_needed = 0, uses_anonymous_args = 0
 2339              		@ link register save eliminated.
 457:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2340              		.loc 1 457 5 view .LVU596
 2341 0ad8 04309FE5 		ldr	r3, .L136	@ tmp111,
 2342 0adc 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2343 0ae0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2344              	.LVL146:
 2345              	.L137:
 2346              		.align	2
 2347              	.L136:
 2348 0ae4 00000000 		.word	g_armwave_state
 2349              		.cfi_endproc
 2350              	.LFE70:
 2352              		.align	2
 2353              		.global	armwave_test_dump_buffer_to_ppm
 2354              		.syntax unified
 2355              		.arm
 2356              		.fpu vfp
 2358              	armwave_test_dump_buffer_to_ppm:
 2359              	.LVL147:
 2360              	.LFB71:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 464:armwave.c     **** {
 2361              		.loc 1 464 1 view -0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
 2365              		@ link register save eliminated.
 465:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2366              		.loc 1 465 5 view .LVU598
 2367 0ae8 08309FE5 		ldr	r3, .L139	@ tmp112,
 2368 0aec 0010A0E1 		mov	r1, r0	@, fn
 2369 0af0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2370              	.LVL148:
 2371              		.loc 1 465 5 is_stmt 0 view .LVU599
 2372 0af4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2373              	.LVL149:
 2374              	.L140:
 2375              		.loc 1 465 5 view .LVU600
 2376              		.align	2
 2377              	.L139:
 2378 0af8 00000000 		.word	g_armwave_state
 2379              		.cfi_endproc
 2380              	.LFE71:
 2382              		.align	2
 2383              		.global	armwave_test_fill_gdkbuf
 2384              		.syntax unified
 2385              		.arm
 2386              		.fpu vfp
 2388              	armwave_test_fill_gdkbuf:
 2389              	.LVL150:
 2390              	.LFB72:
 466:armwave.c     **** }
 467:armwave.c     **** 
 468:armwave.c     **** /*
 469:armwave.c     ****  * Render GDK buffer with test funtionry.
 470:armwave.c     ****  */
 471:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 472:armwave.c     **** {
 2391              		.loc 1 472 1 is_stmt 1 view -0
 2392              		.cfi_startproc
 2393              		@ args = 0, pretend = 0, frame = 0
 2394              		@ frame_needed = 0, uses_anonymous_args = 0
 2395              		@ link register save eliminated.
 473:armwave.c     ****     //PyObject *mv;
 474:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 475:armwave.c     **** 
 476:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 477:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2396              		.loc 1 477 5 view .LVU602
 478:armwave.c     ****     
 479:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2397              		.loc 1 480 5 view .LVU603
 2398              	@ armwave.c:477:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 477:armwave.c     ****     
 2399              		.loc 1 477 11 is_stmt 0 view .LVU604
 2400 0afc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2401              	@ armwave.c:480:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2402              		.loc 1 480 5 view .LVU605
 2403 0b00 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2404              	.LVL151:
 2405              		.loc 1 480 5 view .LVU606
 2406 0b04 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2407              	.LVL152:
 2408              		.loc 1 480 5 view .LVU607
 2409              		.cfi_endproc
 2410              	.LFE72:
 2412              		.align	2
 2413              		.global	armwave_test_buffer_alloc
 2414              		.syntax unified
 2415              		.arm
 2416              		.fpu vfp
 2418              	armwave_test_buffer_alloc:
 2419              	.LVL153:
 2420              	.LFB73:
 481:armwave.c     **** }
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 485:armwave.c     ****  */
 486:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 487:armwave.c     **** {
 2421              		.loc 1 487 1 is_stmt 1 view -0
 2422              		.cfi_startproc
 2423              		@ args = 0, pretend = 0, frame = 0
 2424              		@ frame_needed = 0, uses_anonymous_args = 0
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2425              		.loc 1 488 5 view .LVU609
 2426              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2427              		.loc 1 487 1 is_stmt 0 view .LVU610
 2428 0b08 70402DE9 		push	{r4, r5, r6, lr}	@
 2429              		.cfi_def_cfa_offset 16
 2430              		.cfi_offset 4, -16
 2431              		.cfi_offset 5, -12
 2432              		.cfi_offset 6, -8
 2433              		.cfi_offset 14, -4
 2434              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2435              		.loc 1 487 1 view .LVU611
 2436 0b0c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2437              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2438              		.loc 1 488 23 view .LVU612
 2439 0b10 44409FE5 		ldr	r4, .L149	@ tmp128,
 2440 0b14 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2441              	.LVL154:
 2442              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2443              		.loc 1 488 7 view .LVU613
 2444 0b18 000050E3 		cmp	r0, #0	@ _1,
 2445 0b1c 0000000A 		beq	.L143		@,
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2446              		.loc 1 489 9 is_stmt 1 view .LVU614
 2447 0b20 FEFFFFEB 		bl	free		@
 2448              	.LVL155:
 2449              	.L143:
 490:armwave.c     ****     }
 491:armwave.c     **** 
 492:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 493:armwave.c     **** 
 494:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2450              		.loc 1 494 5 view .LVU615
 2451              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2452              		.loc 1 494 75 is_stmt 0 view .LVU616
 2453 0b24 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2454 0b28 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2455              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2456              		.loc 1 494 40 view .LVU617
 2457 0b2c 0610A0E1 		mov	r1, r6	@, nsets
 2458              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2459              		.loc 1 494 75 view .LVU618
 2460 0b30 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2461              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2462              		.loc 1 494 40 view .LVU619
 2463 0b34 0500A0E1 		mov	r0, r5	@, _4
 2464 0b38 FEFFFFEB 		bl	calloc		@
 2465              	.LVL156:
 2466              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 495:armwave.c     **** 
 496:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2467              		.loc 1 496 7 view .LVU620
 2468 0b3c 000050E3 		cmp	r0, #0	@ tmp124,
 2469              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2470              		.loc 1 494 38 view .LVU621
 2471 0b40 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2472              		.loc 1 496 5 is_stmt 1 view .LVU622
 2473              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 2474              		.loc 1 496 7 is_stmt 0 view .LVU623
 2475 0b44 7080BD18 		popne	{r4, r5, r6, pc}	@
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2476              		.loc 1 497 9 is_stmt 1 view .LVU624
 2477 0b48 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2478 0b4c 0620A0E1 		mov	r2, r6	@, nsets
 2479 0b50 08009FE5 		ldr	r0, .L149+4	@,
 2480              	@ armwave.c:501: }
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 499:armwave.c     ****         return;
 500:armwave.c     ****     }
 501:armwave.c     **** }
 2481              		.loc 1 501 1 is_stmt 0 view .LVU625
 2482 0b54 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2483              		.cfi_restore 14
 2484              		.cfi_restore 6
 2485              		.cfi_restore 5
 2486              		.cfi_restore 4
 2487              		.cfi_def_cfa_offset 0
 2488              	.LVL157:
 2489              	@ armwave.c:497:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2490              		.loc 1 497 9 view .LVU626
 2491 0b58 FEFFFFEA 		b	printf		@
 2492              	.LVL158:
 2493              	.L150:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2494              		.loc 1 497 9 view .LVU627
 2495              		.align	2
 2496              	.L149:
 2497 0b5c 00000000 		.word	g_armwave_state
 2498 0b60 F8010000 		.word	.LC19
 2499              		.cfi_endproc
 2500              	.LFE73:
 2502              		.align	2
 2503              		.global	armwave_fill_pixbuf_into_pybuffer
 2504              		.syntax unified
 2505              		.arm
 2506              		.fpu vfp
 2508              	armwave_fill_pixbuf_into_pybuffer:
 2509              	.LVL159:
 2510              	.LFB74:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 505:armwave.c     ****  */
 506:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 507:armwave.c     **** {
 2511              		.loc 1 507 1 is_stmt 1 view -0
 2512              		.cfi_startproc
 2513              		@ args = 0, pretend = 0, frame = 48
 2514              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     Py_buffer buffer;
 2515              		.loc 1 508 5 view .LVU629
 509:armwave.c     ****     int ret;
 2516              		.loc 1 509 5 view .LVU630
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 512:armwave.c     **** 
 513:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2517              		.loc 1 513 5 view .LVU631
 2518              	@ armwave.c:507: {
 507:armwave.c     ****     Py_buffer buffer;
 2519              		.loc 1 507 1 is_stmt 0 view .LVU632
 2520 0b64 04E02DE5 		str	lr, [sp, #-4]!	@,
 2521              		.cfi_def_cfa_offset 4
 2522              		.cfi_offset 14, -4
 2523 0b68 34D04DE2 		sub	sp, sp, #52	@,,
 2524              		.cfi_def_cfa_offset 56
 2525              	@ armwave.c:513:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2526              		.loc 1 513 11 view .LVU633
 2527 0b6c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2528 0b70 0120A0E3 		mov	r2, #1	@,
 2529 0b74 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2530              	.LVL160:
 514:armwave.c     **** 
 515:armwave.c     ****     if(ret != 0) {
 2531              		.loc 1 515 5 is_stmt 1 view .LVU634
 2532              	@ armwave.c:515:     if(ret != 0) {
 2533              		.loc 1 515 7 is_stmt 0 view .LVU635
 2534 0b78 000050E3 		cmp	r0, #0	@,
 2535 0b7c 0A00001A 		bne	.L155		@,
 516:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 517:armwave.c     ****         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 519:armwave.c     **** 
 520:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 521:armwave.c     **** 
 522:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2536              		.loc 1 522 5 is_stmt 1 view .LVU636
 2537 0b80 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2538              	.LVL161:
 2539              		.loc 1 522 5 is_stmt 0 view .LVU637
 2540 0b84 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2541              	.LVL162:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     PyBuffer_Release(&buffer);
 2542              		.loc 1 525 5 is_stmt 1 view .LVU638
 2543 0b88 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2544 0b8c FEFFFFEB 		bl	PyBuffer_Release		@
 2545              	.LVL163:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     Py_RETURN_TRUE;
 2546              		.loc 1 528 5 view .LVU639
 2547              	.LBB35:
 2548              	.LBI35:
 2549              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2550              		.loc 2 456 20 view .LVU640
 2551              	.LBB36:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2552              		.loc 2 458 21 view .LVU641
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2553              		.loc 2 459 5 view .LVU642
 2554              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2555              		.loc 2 459 18 is_stmt 0 view .LVU643
 2556 0b90 38309FE5 		ldr	r3, .L156	@ tmp126,
 2557              	.LBE36:
 2558              	.LBE35:
 2559              	@ armwave.c:528:     Py_RETURN_TRUE;
 2560              		.loc 1 528 5 view .LVU644
 2561 0b94 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2562              	.LBB38:
 2563              	.LBB37:
 2564              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2565              		.loc 2 459 18 view .LVU645
 2566 0b98 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2567 0b9c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2568 0ba0 002083E5 		str	r2, [r3]	@ tmp128,
 2569              	.LBE37:
 2570              	.LBE38:
 2571              	@ armwave.c:529: }
 529:armwave.c     **** }
 2572              		.loc 1 529 1 view .LVU646
 2573 0ba4 34D08DE2 		add	sp, sp, #52	@,,
 2574              		.cfi_remember_state
 2575              		.cfi_def_cfa_offset 4
 2576              		@ sp needed	@
 2577 0ba8 04F09DE4 		ldr	pc, [sp], #4	@
 2578              	.LVL164:
 2579              	.L155:
 2580              		.cfi_restore_state
 516:armwave.c     ****         Py_RETURN_FALSE;
 2581              		.loc 1 516 9 is_stmt 1 view .LVU647
 2582 0bac 20009FE5 		ldr	r0, .L156+4	@,
 2583              	.LVL165:
 516:armwave.c     ****         Py_RETURN_FALSE;
 2584              		.loc 1 516 9 is_stmt 0 view .LVU648
 2585 0bb0 FEFFFFEB 		bl	puts		@
 2586              	.LVL166:
 517:armwave.c     ****     }
 2587              		.loc 1 517 9 is_stmt 1 view .LVU649
 2588              	.LBB39:
 2589              	.LBI39:
 456:/usr/local/include/python3.8/object.h **** {
 2590              		.loc 2 456 20 view .LVU650
 2591              	.LBB40:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2592              		.loc 2 458 21 view .LVU651
 2593              		.loc 2 459 5 view .LVU652
 2594              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2595              		.loc 2 459 18 is_stmt 0 view .LVU653
 2596 0bb4 1C309FE5 		ldr	r3, .L156+8	@ tmp120,
 2597              	.LBE40:
 2598              	.LBE39:
 2599              	@ armwave.c:517:         Py_RETURN_FALSE;
 517:armwave.c     ****     }
 2600              		.loc 1 517 9 view .LVU654
 2601 0bb8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2602              	.LBB42:
 2603              	.LBB41:
 2604              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2605              		.loc 2 459 18 view .LVU655
 2606 0bbc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2607 0bc0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2608 0bc4 002083E5 		str	r2, [r3]	@ tmp122,
 2609              	.LBE41:
 2610              	.LBE42:
 2611              	@ armwave.c:529: }
 2612              		.loc 1 529 1 view .LVU656
 2613 0bc8 34D08DE2 		add	sp, sp, #52	@,,
 2614              		.cfi_def_cfa_offset 4
 2615              		@ sp needed	@
 2616 0bcc 04F09DE4 		ldr	pc, [sp], #4	@
 2617              	.L157:
 2618              		.align	2
 2619              	.L156:
 2620 0bd0 00000000 		.word	_Py_TrueStruct
 2621 0bd4 4C020000 		.word	.LC20
 2622 0bd8 00000000 		.word	_Py_FalseStruct
 2623              		.cfi_endproc
 2624              	.LFE74:
 2626              		.align	2
 2627              		.global	armwave_test_create_am_sine
 2628              		.syntax unified
 2629              		.arm
 2630              		.fpu vfp
 2632              	armwave_test_create_am_sine:
 2633              	.LVL167:
 2634              	.LFB75:
 530:armwave.c     **** 
 531:armwave.c     **** /*
 532:armwave.c     ****  * Make a test AM waveform for render tests.
 533:armwave.c     ****  *
 534:armwave.c     ****  * @param   mod                     modulation depth
 535:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 536:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 537:armwave.c     ****  */
 538:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 539:armwave.c     **** {
 2635              		.loc 1 539 1 is_stmt 1 view -0
 2636              		.cfi_startproc
 2637              		@ args = 0, pretend = 0, frame = 8
 2638              		@ frame_needed = 0, uses_anonymous_args = 0
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2639              		.loc 1 540 5 view .LVU658
 541:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2640              		.loc 1 541 5 view .LVU659
 2641              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2642              		.loc 1 539 1 is_stmt 0 view .LVU660
 2643 0bdc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2644              		.cfi_def_cfa_offset 32
 2645              		.cfi_offset 4, -32
 2646              		.cfi_offset 5, -28
 2647              		.cfi_offset 6, -24
 2648              		.cfi_offset 7, -20
 2649              		.cfi_offset 8, -16
 2650              		.cfi_offset 9, -12
 2651              		.cfi_offset 10, -8
 2652              		.cfi_offset 14, -4
 2653              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2654              		.loc 1 541 38 view .LVU661
 2655 0be0 7A7A9FED 		vldr.32	s14, .L189	@ tmp180,
 2656              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2657              		.loc 1 541 55 view .LVU662
 2658 0be4 00529FE5 		ldr	r5, .L189+28	@ tmp250,
 2659              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2660              		.loc 1 539 1 view .LVU663
 2661 0be8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2662              		.cfi_def_cfa_offset 80
 2663              		.cfi_offset 80, -80
 2664              		.cfi_offset 81, -76
 2665              		.cfi_offset 82, -72
 2666              		.cfi_offset 83, -68
 2667              		.cfi_offset 84, -64
 2668              		.cfi_offset 85, -60
 2669              		.cfi_offset 86, -56
 2670              		.cfi_offset 87, -52
 2671              		.cfi_offset 88, -48
 2672              		.cfi_offset 89, -44
 2673              		.cfi_offset 90, -40
 2674              		.cfi_offset 91, -36
 2675 0bec 0090A0E1 		mov	r9, r0	@ sets, sets
 2676              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2677              		.loc 1 541 38 view .LVU664
 2678 0bf0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2679              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     int s, set_offset = 0;
 543:armwave.c     ****     int w, x;
 544:armwave.c     **** 
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2680              		.loc 1 545 70 view .LVU665
 2681 0bf4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2682 0bf8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2683              	.LBB45:
 2684              	.LBB46:
 2685              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2686              		.loc 1 488 23 view .LVU666
 2687 0bfc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2688              	.LVL168:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2689              		.loc 1 488 23 view .LVU667
 2690              	.LBE46:
 2691              	.LBE45:
 2692              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2693              		.loc 1 541 38 view .LVU668
 2694 0c00 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2695              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2696              		.loc 1 545 70 view .LVU669
 2697 0c04 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2698              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2699              		.loc 1 539 1 view .LVU670
 2700 0c08 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2701              	.LBB50:
 2702              	.LBB47:
 2703              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2704              		.loc 1 488 7 view .LVU671
 2705 0c0c 000050E3 		cmp	r0, #0	@ _82,
 2706              	.LBE47:
 2707              	.LBE50:
 2708              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2709              		.loc 1 539 1 view .LVU672
 2710 0c10 08D04DE2 		sub	sp, sp, #8	@,,
 2711              		.cfi_def_cfa_offset 88
 2712              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_nsets = sets;
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2713              		.loc 1 546 44 view .LVU673
 2714 0c14 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2715              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2716              		.loc 1 545 45 view .LVU674
 2717 0c18 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2718              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2719              		.loc 1 541 38 view .LVU675
 2720 0c1c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2721              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2722              		.loc 1 541 11 view .LVU676
 2723 0c20 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2724              	.LVL169:
 542:armwave.c     ****     int w, x;
 2725              		.loc 1 542 5 is_stmt 1 view .LVU677
 543:armwave.c     **** 
 2726              		.loc 1 543 5 view .LVU678
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2727              		.loc 1 545 5 view .LVU679
 2728              		.loc 1 546 5 view .LVU680
 547:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2729              		.loc 1 547 5 view .LVU681
 2730              	.LBB51:
 2731              	.LBI45:
 486:armwave.c     **** {
 2732              		.loc 1 486 6 view .LVU682
 2733              	.LBB48:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2734              		.loc 1 488 5 view .LVU683
 2735              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2736              		.loc 1 488 7 is_stmt 0 view .LVU684
 2737 0c24 0000000A 		beq	.L159		@,
 489:armwave.c     ****     }
 2738              		.loc 1 489 9 is_stmt 1 view .LVU685
 2739 0c28 FEFFFFEB 		bl	free		@
 2740              	.LVL170:
 2741              	.L159:
 494:armwave.c     **** 
 2742              		.loc 1 494 5 view .LVU686
 2743              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2744              		.loc 1 494 75 is_stmt 0 view .LVU687
 2745 0c2c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2746 0c30 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2747              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2748              		.loc 1 494 40 view .LVU688
 2749 0c34 0910A0E1 		mov	r1, r9	@, sets
 2750              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2751              		.loc 1 494 75 view .LVU689
 2752 0c38 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2753              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2754              		.loc 1 494 40 view .LVU690
 2755 0c3c 0400A0E1 		mov	r0, r4	@, _85
 2756 0c40 FEFFFFEB 		bl	calloc		@
 2757              	.LVL171:
 2758              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2759              		.loc 1 496 7 view .LVU691
 2760 0c44 000050E3 		cmp	r0, #0	@ tmp191,
 2761              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2762              		.loc 1 494 38 view .LVU692
 2763 0c48 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2764              		.loc 1 496 5 is_stmt 1 view .LVU693
 2765              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2766              		.loc 1 496 7 is_stmt 0 view .LVU694
 2767 0c4c 5A00000A 		beq	.L188		@,
 2768              	.L160:
 2769              	.LVL172:
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2770              		.loc 1 496 7 view .LVU695
 2771              	.LBE48:
 2772              	.LBE51:
 2773              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 548:armwave.c     **** 
 549:armwave.c     ****     for(s = 0; s < sets; s++) {
 2774              		.loc 1 549 5 discriminator 1 view .LVU696
 2775 0c50 000059E3 		cmp	r9, #0	@ sets,
 2776 0c54 550000DA 		ble	.L158		@,
 2777              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 551:armwave.c     ****     
 552:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 554:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 556:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 568:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2778              		.loc 1 568 45 view .LVU697
 2779 0c58 5C8A9FED 		vldr.32	s16, .L189	@ tmp258,
 2780              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 570:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 571:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2781              		.loc 1 571 104 view .LVU698
 2782 0c5c 5CCA9FED 		vldr.32	s24, .L189+4	@ tmp259,
 2783              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2784              		.loc 1 549 5 view .LVU699
 2785 0c60 0070A0E3 		mov	r7, #0	@ set_offset,
 2786              	@ armwave.c:550:         printf("Calculating test set %d\n", s);
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2787              		.loc 1 550 9 view .LVU700
 2788 0c64 84A19FE5 		ldr	r10, .L189+32	@ tmp257,
 2789              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2790              		.loc 1 549 5 view .LVU701
 2791 0c68 0780A0E1 		mov	r8, r7	@ s, set_offset
 2792              	.LVL173:
 2793              	.L161:
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2794              		.loc 1 550 9 is_stmt 1 view .LVU702
 2795 0c6c 0810A0E1 		mov	r1, r8	@, s
 2796 0c70 0A00A0E1 		mov	r0, r10	@, tmp257
 2797 0c74 FEFFFFEB 		bl	printf		@
 2798              	.LVL174:
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2799              		.loc 1 552 9 view .LVU703
 2800              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2801              		.loc 1 552 39 is_stmt 0 view .LVU704
 2802 0c78 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2803              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2804              		.loc 1 552 9 view .LVU705
 2805 0c7c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2806 0c80 450000DA 		ble	.L162		@,
 2807              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2808              		.loc 1 554 21 view .LVU706
 2809 0c84 53CADFED 		vldr.32	s25, .L189+8	@ tmp200,
 2810              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2811              		.loc 1 568 33 view .LVU707
 2812 0c88 53BA9FED 		vldr.32	s22, .L189+12	@ tmp253,
 2813              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2814              		.loc 1 566 24 view .LVU708
 2815 0c8c 53AADFED 		vldr.32	s21, .L189+16	@ tmp254,
 2816 0c90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2817              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2818              		.loc 1 552 15 view .LVU709
 2819 0c94 0060A0E3 		mov	r6, #0	@ w,
 2820              	.LVL175:
 2821              	.L169:
 554:armwave.c     **** 
 2822              		.loc 1 554 13 is_stmt 1 view .LVU710
 2823              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2824              		.loc 1 554 21 is_stmt 0 view .LVU711
 2825 0c98 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2826 0c9c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2827              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2828              		.loc 1 556 13 view .LVU712
 2829 0ca0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2830              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2831              		.loc 1 554 21 view .LVU713
 2832 0ca4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2833 0ca8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2834              	.LVL176:
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2835              		.loc 1 556 13 is_stmt 1 view .LVU714
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2836              		.loc 1 556 13 is_stmt 0 view .LVU715
 2837 0cac 370000DA 		ble	.L163		@,
 2838 0cb0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2839              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2840              		.loc 1 571 113 view .LVU716
 2841 0cb4 4AAA9FED 		vldr.32	s20, .L189+20	@ tmp229,
 2842 0cb8 4A8ADFED 		vldr.32	s17, .L189+24	@ tmp230,
 2843              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2844              		.loc 1 556 19 view .LVU717
 2845 0cbc 0040A0E3 		mov	r4, #0	@ x,
 2846              	.LVL177:
 2847              	.L168:
 557:armwave.c     ****                 noise *= noise;
 2848              		.loc 1 557 17 is_stmt 1 view .LVU718
 2849              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2850              		.loc 1 557 28 is_stmt 0 view .LVU719
 2851 0cc0 FEFFFFEB 		bl	rand		@
 2852              	.LVL178:
 2853              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2854              		.loc 1 557 35 view .LVU720
 2855 0cc4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2856              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2857              		.loc 1 557 45 view .LVU721
 2858 0cc8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2859 0ccc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2860              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2861              		.loc 1 557 24 view .LVU722
 2862 0cd0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2863              	.LVL179:
 558:armwave.c     ****                 noise *= noise;
 2864              		.loc 1 558 17 is_stmt 1 view .LVU723
 2865              	@ armwave.c:558:                 noise *= noise;
 558:armwave.c     ****                 noise *= noise;
 2866              		.loc 1 558 23 is_stmt 0 view .LVU724
 2867 0cd4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2868              	.LVL180:
 559:armwave.c     ****                 noise *= noise;
 2869              		.loc 1 559 17 is_stmt 1 view .LVU725
 2870              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2871              		.loc 1 559 23 is_stmt 0 view .LVU726
 2872 0cd8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2873              	.LVL181:
 560:armwave.c     **** 
 2874              		.loc 1 560 17 is_stmt 1 view .LVU727
 2875              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     **** 
 2876              		.loc 1 560 23 is_stmt 0 view .LVU728
 2877 0cdc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2878              	.LVL182:
 562:armwave.c     ****                     noise = -noise;
 2879              		.loc 1 562 17 is_stmt 1 view .LVU729
 2880              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2881              		.loc 1 562 21 is_stmt 0 view .LVU730
 2882 0ce0 FEFFFFEB 		bl	rand		@
 2883              	.LVL183:
 563:armwave.c     **** 
 2884              		.loc 1 563 21 is_stmt 1 view .LVU731
 2885              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2886              		.loc 1 562 19 is_stmt 0 view .LVU732
 2887 0ce4 020910E3 		tst	r0, #32768	@,
 2888              	@ armwave.c:563:                     noise = -noise;
 563:armwave.c     **** 
 2889              		.loc 1 563 27 view .LVU733
 2890 0ce8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2891              	.LVL184:
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2892              		.loc 1 565 17 is_stmt 1 view .LVU734
 566:armwave.c     **** 
 2893              		.loc 1 566 17 view .LVU735
 2894              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2895              		.loc 1 566 27 is_stmt 0 view .LVU736
 2896 0cec FEFFFFEB 		bl	rand		@
 2897              	.LVL185:
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2898              		.loc 1 568 17 is_stmt 1 view .LVU737
 2899              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2900              		.loc 1 568 45 is_stmt 0 view .LVU738
 2901 0cf0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2902              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2903              		.loc 1 568 33 view .LVU739
 2904 0cf4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2905              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2906              		.loc 1 568 45 view .LVU740
 2907 0cf8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2908              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2909              		.loc 1 568 33 view .LVU741
 2910 0cfc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2911              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2912              		.loc 1 568 45 view .LVU742
 2913 0d00 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2914              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2915              		.loc 1 568 33 view .LVU743
 2916 0d04 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2917              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2918              		.loc 1 566 34 view .LVU744
 2919 0d08 7000FFE6 		uxth	r0, r0	@ tmp214,
 2920              	.LVL186:
 2921              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2922              		.loc 1 566 44 view .LVU745
 2923 0d0c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2924 0d10 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2925              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2926              		.loc 1 566 24 view .LVU746
 2927 0d14 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2928              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2929              		.loc 1 568 77 view .LVU747
 2930 0d18 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2931              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2932              		.loc 1 568 22 view .LVU748
 2933 0d1c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2934 0d20 FEFFFFEB 		bl	sin		@
 2935              	.LVL187:
 2936              		.loc 1 571 17 is_stmt 1 view .LVU749
 2937              	@ armwave.c:565:                 noise += 1.0f;
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2938              		.loc 1 565 23 is_stmt 0 view .LVU750
 2939 0d24 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2940              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2941              		.loc 1 571 104 view .LVU751
 2942 0d28 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2943              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2944              		.loc 1 568 98 view .LVU752
 2945 0d2c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2946              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2947              		.loc 1 568 87 view .LVU753
 2948 0d30 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2949              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2950              		.loc 1 568 98 view .LVU754
 2951 0d34 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2952              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2953              		.loc 1 568 19 view .LVU755
 2954 0d38 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2955              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2956              		.loc 1 571 113 view .LVU756
 2957 0d3c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2958 0d40 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2959 0d44 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2960 0d48 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2961 0d4c 050000DA 		ble	.L165		@,
 2962              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2963              		.loc 1 571 104 discriminator 1 view .LVU757
 2964 0d50 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2965 0d54 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2966 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2967 0d5c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2968 0d60 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2969 0d64 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2970              	.L165:
 2971              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2972              		.loc 1 571 57 discriminator 12 view .LVU758
 2973 0d68 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2974              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2975              		.loc 1 571 102 discriminator 12 view .LVU759
 2976 0d6c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2977 0d70 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2978 0d74 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2979              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2980              		.loc 1 556 58 discriminator 12 view .LVU760
 2981 0d78 014084E2 		add	r4, r4, #1	@ x, x,
 2982              	.LVL188:
 2983              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2984              		.loc 1 571 102 discriminator 12 view .LVU761
 2985 0d7c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2986              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2987              		.loc 1 556 43 discriminator 12 view .LVU762
 2988 0d80 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2989              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2990              		.loc 1 556 13 discriminator 12 view .LVU763
 2991 0d84 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2992 0d88 CCFFFFCA 		bgt	.L168		@,
 2993 0d8c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2994              	.LVL189:
 2995              	.L163:
 2996              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2997              		.loc 1 552 48 discriminator 2 view .LVU764
 2998 0d90 016086E2 		add	r6, r6, #1	@ w, w,
 2999              	.LVL190:
 3000              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 3001              		.loc 1 552 9 discriminator 2 view .LVU765
 3002 0d94 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 3003 0d98 BEFFFFBA 		blt	.L169		@,
 3004              	.LVL191:
 3005              	.L162:
 572:armwave.c     ****             }
 573:armwave.c     ****         }
 574:armwave.c     **** 
 575:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3006              		.loc 1 575 9 is_stmt 1 discriminator 2 view .LVU766
 3007              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3008              		.loc 1 575 46 is_stmt 0 discriminator 2 view .LVU767
 3009 0d9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3010              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3011              		.loc 1 549 27 discriminator 2 view .LVU768
 3012 0da0 018088E2 		add	r8, r8, #1	@ s, s,
 3013              	.LVL192:
 3014              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3015              		.loc 1 549 5 discriminator 2 view .LVU769
 3016 0da4 080059E1 		cmp	r9, r8	@ sets, s
 3017              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3018              		.loc 1 575 20 discriminator 2 view .LVU770
 3019 0da8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3020              	.LVL193:
 3021              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3022              		.loc 1 549 5 discriminator 2 view .LVU771
 3023 0dac AEFFFF1A 		bne	.L161		@,
 3024              	.LVL194:
 3025              	.L158:
 3026              	@ armwave.c:577: }
 576:armwave.c     ****     }
 577:armwave.c     **** }
 3027              		.loc 1 577 1 view .LVU772
 3028 0db0 08D08DE2 		add	sp, sp, #8	@,,
 3029              		.cfi_remember_state
 3030              		.cfi_def_cfa_offset 80
 3031              		@ sp needed	@
 3032 0db4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3033              		.cfi_restore 90
 3034              		.cfi_restore 91
 3035              		.cfi_restore 88
 3036              		.cfi_restore 89
 3037              		.cfi_restore 86
 3038              		.cfi_restore 87
 3039              		.cfi_restore 84
 3040              		.cfi_restore 85
 3041              		.cfi_restore 82
 3042              		.cfi_restore 83
 3043              		.cfi_restore 80
 3044              		.cfi_restore 81
 3045              		.cfi_def_cfa_offset 32
 3046              	.LVL195:
 3047              		.loc 1 577 1 view .LVU773
 3048 0db8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3049              	.LVL196:
 3050              	.L188:
 3051              		.cfi_restore_state
 3052              	.LBB52:
 3053              	.LBB49:
 497:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3054              		.loc 1 497 9 is_stmt 1 view .LVU774
 3055 0dbc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3056 0dc0 0920A0E1 		mov	r2, r9	@, sets
 3057 0dc4 28009FE5 		ldr	r0, .L189+36	@,
 3058 0dc8 FEFFFFEB 		bl	printf		@
 3059              	.LVL197:
 499:armwave.c     ****     }
 3060              		.loc 1 499 9 view .LVU775
 3061 0dcc 9FFFFFEA 		b	.L160		@
 3062              	.L190:
 3063              		.align	2
 3064              	.L189:
 3065 0dd0 0000803F 		.word	1065353216
 3066 0dd4 00007F43 		.word	1132396544
 3067 0dd8 0000003F 		.word	1056964608
 3068 0ddc C3F5C840 		.word	1086911939
 3069 0de0 38FFC74A 		.word	1254620984
 3070 0de4 0000FE42 		.word	1123942400
 3071 0de8 00000043 		.word	1124073472
 3072 0dec 00000000 		.word	g_armwave_state
 3073 0df0 A0020000 		.word	.LC21
 3074 0df4 F8010000 		.word	.LC19
 3075              	.LBE49:
 3076              	.LBE52:
 3077              		.cfi_endproc
 3078              	.LFE75:
 3080              		.align	2
 3081              		.global	armwave_cleanup
 3082              		.syntax unified
 3083              		.arm
 3084              		.fpu vfp
 3086              	armwave_cleanup:
 3087              	.LFB76:
 578:armwave.c     **** 
 579:armwave.c     **** /*
 580:armwave.c     ****  * Make a test square waveform.
 581:armwave.c     ****  *
 582:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 583:armwave.c     ****  */
 584:armwave.c     **** #if 0
 585:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 586:armwave.c     **** {
 587:armwave.c     ****     uint8_t v;
 588:armwave.c     ****     float noise, xnoise;
 589:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 590:armwave.c     ****     int w, x;
 591:armwave.c     **** 
 592:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 593:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 594:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 595:armwave.c     ****             noise *= noise;
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     **** 
 599:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 600:armwave.c     ****                 noise = -noise;
 601:armwave.c     **** 
 602:armwave.c     ****             //noise += 1.0f;
 603:armwave.c     **** 
 604:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 605:armwave.c     ****                 new_level = 0.2f;
 606:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 607:armwave.c     ****                 new_level = 0.8f;
 608:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 609:armwave.c     ****                 new_level = 0.2f;
 610:armwave.c     ****             } else {
 611:armwave.c     ****                 new_level = 0.8f;
 612:armwave.c     ****             }
 613:armwave.c     **** 
 614:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 615:armwave.c     **** 
 616:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 617:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 618:armwave.c     ****         }
 619:armwave.c     ****     }
 620:armwave.c     **** }
 621:armwave.c     **** #endif
 622:armwave.c     **** 
 623:armwave.c     **** /*
 624:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 625:armwave.c     ****  */
 626:armwave.c     **** void armwave_cleanup()
 627:armwave.c     **** {
 3088              		.loc 1 627 1 view -0
 3089              		.cfi_startproc
 3090              		@ args = 0, pretend = 0, frame = 0
 3091              		@ frame_needed = 0, uses_anonymous_args = 0
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3092              		.loc 1 628 5 view .LVU777
 3093              	@ armwave.c:627: {
 627:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3094              		.loc 1 627 1 is_stmt 0 view .LVU778
 3095 0df8 10402DE9 		push	{r4, lr}	@
 3096              		.cfi_def_cfa_offset 8
 3097              		.cfi_offset 4, -8
 3098              		.cfi_offset 14, -4
 3099              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 3100              		.loc 1 628 25 view .LVU779
 3101 0dfc 34409FE5 		ldr	r4, .L193	@ tmp114,
 3102              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 3103              		.loc 1 628 5 view .LVU780
 3104 0e00 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3105 0e04 FEFFFFEB 		bl	free		@
 3106              	.LVL198:
 629:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3107              		.loc 1 629 5 is_stmt 1 view .LVU781
 3108 0e08 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3109 0e0c FEFFFFEB 		bl	free		@
 3110              	.LVL199:
 630:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3111              		.loc 1 630 5 view .LVU782
 3112 0e10 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3113 0e14 FEFFFFEB 		bl	free		@
 3114              	.LVL200:
 631:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3115              		.loc 1 631 5 view .LVU783
 3116 0e18 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3117 0e1c FEFFFFEB 		bl	free		@
 3118              	.LVL201:
 632:armwave.c     **** 
 633:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3119              		.loc 1 633 5 view .LVU784
 3120              	@ armwave.c:633:     g_armwave_state.out_pixbuf = NULL;
 3121              		.loc 1 633 32 is_stmt 0 view .LVU785
 3122 0e20 0030A0E3 		mov	r3, #0	@ tmp123,
 3123 0e24 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 634:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3124              		.loc 1 634 5 is_stmt 1 view .LVU786
 3125              	@ armwave.c:634:     g_armwave_state.ch1_buffer = NULL;
 3126              		.loc 1 634 32 is_stmt 0 view .LVU787
 3127 0e28 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 635:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3128              		.loc 1 635 5 is_stmt 1 view .LVU788
 3129              	@ armwave.c:635:     g_armwave_state.xcoord_to_xpixel = NULL;
 3130              		.loc 1 635 38 is_stmt 0 view .LVU789
 3131 0e2c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 636:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3132              		.loc 1 636 5 is_stmt 1 view .LVU790
 3133              	@ armwave.c:636:     g_armwave_state.test_wave_buffer = NULL;
 3134              		.loc 1 636 38 is_stmt 0 view .LVU791
 3135 0e30 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3136              	@ armwave.c:637: }
 637:armwave.c     **** }
 3137              		.loc 1 637 1 view .LVU792
 3138 0e34 1080BDE8 		pop	{r4, pc}	@
 3139              	.L194:
 3140              		.align	2
 3141              	.L193:
 3142 0e38 00000000 		.word	g_armwave_state
 3143              		.cfi_endproc
 3144              	.LFE76:
 3146              		.comm	gamma_table,256,4
 3147              		.comm	g_armwave_state,136,4
 3148              		.section	.rodata
 3149              		.align	2
 3150              		.set	.LANCHOR0,. + 0
 3153              	__PRETTY_FUNCTION__.17095:
 3154 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3154      6176655F 
 3154      66696C6C 
 3154      5F706978 
 3154      6275665F 
 3155 001b 00       		.space	1
 3158              	__PRETTY_FUNCTION__.17125:
 3159 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3159      6176655F 
 3159      73657475 
 3159      705F7265 
 3159      6E646572 
 3160 0031 000000   		.space	3
 3163              	__PRETTY_FUNCTION__.17132:
 3164 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3164      6176655F 
 3164      7365745F 
 3164      77617665 
 3164      5F706F69 
 3165 004d 000000   		.space	3
 3168              	__PRETTY_FUNCTION__.17139:
 3169 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3169      6176655F 
 3169      7365745F 
 3169      77617665 
 3169      5F706F69 
 3170              		.section	.rodata.str1.4,"aMS",%progbits,1
 3171              		.align	2
 3172              	.LC0:
 3173 0000 76302E30 		.ascii	"v0.0.1\000"
 3173      2E3100
 3174 0007 00       		.space	1
 3175              	.LC1:
 3176 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3176      61766520 
 3176      76657273 
 3176      696F6E3A 
 3176      2025730A 
 3177 001d 000000   		.space	3
 3178              	.LC2:
 3179 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3179      78253038 
 3179      7820623D 
 3179      30782530 
 3179      38782063 
 3180 0053 6768743D 		.ascii	"ght=%d\012\000"
 3180      25640A00 
 3181 005b 00       		.space	1
 3182              	.LC3:
 3183 005c 61726D77 		.ascii	"armwave.c\000"
 3183      6176652E 
 3183      6300
 3184 0066 0000     		.space	2
 3185              	.LC4:
 3186 0068 6F75745F 		.ascii	"out_buffer != NULL\000"
 3186      62756666 
 3186      65722021 
 3186      3D204E55 
 3186      4C4C00
 3187 007b 00       		.space	1
 3188              	.LC5:
 3189 007c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3189      20653D25 
 3189      6420773D 
 3189      25642077 
 3189      733D2564 
 3190              	.LC6:
 3191 00a8 73746172 		.ascii	"start_point < end_point\000"
 3191      745F706F 
 3191      696E7420 
 3191      3C20656E 
 3191      645F706F 
 3192              	.LC7:
 3193 00c0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3193      7566665F 
 3193      73697A65 
 3193      3D25642C 
 3193      20636D70 
 3194 00f2 00       		.ascii	"\000"
 3195 00f3 00       		.space	1
 3196              	.LC8:
 3197 00f4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3197      6D776176 
 3197      655F7374 
 3197      6174652E 
 3197      6368315F 
 3198 0117 00       		.space	1
 3199              	.LC9:
 3200 0118 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3200      6D776176 
 3200      655F7374 
 3200      6174652E 
 3200      78636F6F 
 3201 0141 000000   		.space	3
 3202              	.LC10:
 3203 0144 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3203      3A203078 
 3203      25303878 
 3203      20307825 
 3203      30387820 
 3204              	.LC11:
 3205 0168 77617665 		.ascii	"wave_buffer != NULL\000"
 3205      5F627566 
 3205      66657220 
 3205      213D204E 
 3205      554C4C00 
 3206              	.LC12:
 3207 017c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3207      6176655F 
 3207      7365745F 
 3207      77617665 
 3207      5F706F69 
 3208 01af 78636565 		.ascii	"xceeded\000"
 3208      64656400 
 3209 01b7 00       		.space	1
 3210              	.LC13:
 3211 01b8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3211      5F627566 
 3211      6665725F 
 3211      70747220 
 3211      213D2030 
 3212 01cd 000000   		.space	3
 3213              	.LC14:
 3214 01d0 776200   		.ascii	"wb\000"
 3215 01d3 00       		.space	1
 3216              	.LC15:
 3217 01d4 50330A00 		.ascii	"P3\012\000"
 3218              	.LC16:
 3219 01d8 25642025 		.ascii	"%d %d\012\000"
 3219      640A00
 3220 01df 00       		.space	1
 3221              	.LC17:
 3222 01e0 3235350A 		.ascii	"255\012\000"
 3222      00
 3223 01e5 000000   		.space	3
 3224              	.LC18:
 3225 01e8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3225      25336420 
 3225      2533640A 
 3225      00
 3226 01f5 000000   		.space	3
 3227              	.LC19:
 3228 01f8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3228      6176655F 
 3228      74657374 
 3228      5F627566 
 3228      6665725F 
 3229 022b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3229      20627566 
 3229      66657220 
 3229      28256420 
 3229      62797465 
 3230              	.LC20:
 3231 024c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3231      6176655F 
 3231      66696C6C 
 3231      5F706978 
 3231      6275665F 
 3232 027f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3232      20666169 
 3232      6C65642C 
 3232      20726574 
 3232      75726E69 
 3233 029e 0000     		.space	2
 3234              	.LC21:
 3235 02a0 43616C63 		.ascii	"Calculating test set %d\012\000"
 3235      756C6174 
 3235      696E6720 
 3235      74657374 
 3235      20736574 
 3236              		.text
 3237              	.Letext0:
 3238              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3239              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3240              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3241              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3242              		.file 7 "/usr/include/stdio.h"
 3243              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3244              		.file 9 "/usr/include/errno.h"
 3245              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3246              		.file 11 "/usr/include/unistd.h"
 3247              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3248              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3249              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3250              		.file 15 "/usr/include/math.h"
 3251              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3252              		.file 17 "/usr/include/time.h"
 3253              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3254              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3255              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3256              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3257              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3258              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3259              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3260              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3261              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3262              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3263              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3264              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3265              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3266              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3267              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3268              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3269              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3270              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3271              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3272              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3273              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3274              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3275              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3276              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3277              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3278              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3279              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3280              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3281              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3282              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3283              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3284              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3285              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3286              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3287              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3288              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3289              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3290              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3291              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3292              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3293              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3294              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3295              		.file 60 "/usr/local/include/python3.8/context.h"
 3296              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3297              		.file 62 "/usr/local/include/python3.8/code.h"
 3298              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3299              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3300              		.file 65 "/usr/local/include/python3.8/import.h"
 3301              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3302              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3303              		.file 68 "/usr/include/malloc.h"
 3304              		.file 69 "armwave.h"
 3305              		.file 70 "/usr/include/stdlib.h"
 3306              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3307              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3308              		.file 73 "<built-in>"
 3309              		.file 74 "/usr/include/assert.h"
 3310              		.file 75 "/usr/include/string.h"
