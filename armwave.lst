   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.arch armv6
  77              		.syntax unified
  78              		.arm
  79              		.fpu vfp
  81              	armwave_setup_render.constprop.1:
  82              	.LFB72:
  83              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <string.h>
  20:armwave.c     **** #include <math.h>
  21:armwave.c     **** 
  22:armwave.c     **** #include "armwave.h"
  23:armwave.c     **** 
  24:armwave.c     **** #define TEST_WAVE_SIZE			2048
  25:armwave.c     **** #define TEST_NWAVES				64
  26:armwave.c     **** 
  27:armwave.c     **** #define ARMWAVE_VER				"v0.0.1"
  28:armwave.c     **** 
  29:armwave.c     **** #define MAX(a,b)  				((a) > (b) ? (a) : (b))
  30:armwave.c     **** #define MIN(a,b)         		((a) < (b) ? (a) : (b))
  31:armwave.c     **** 
  32:armwave.c     **** #define CLAMP(x,mi,mx)    		MIN(MAX((x),mi),mx)
  33:armwave.c     **** 
  34:armwave.c     **** struct armwave_state_t g_armwave_state;
  35:armwave.c     **** 
  36:armwave.c     **** uint8_t test_wave_buffer[TEST_WAVE_SIZE * TEST_NWAVES];
  37:armwave.c     **** uint8_t gamma_table[256];
  38:armwave.c     **** 
  39:armwave.c     **** // for now...
  40:armwave.c     **** const float overall_scale = 2550.0f / 255.0f;
  41:armwave.c     **** 
  42:armwave.c     **** float mod_depth = 0.0f;
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Make a test AM waveform for render tests.
  46:armwave.c     ****  */
  47:armwave.c     **** void test_create_waveform()
  48:armwave.c     **** {
  49:armwave.c     ****     float v, mod, noise, xnoise;
  50:armwave.c     ****     int w, x;
  51:armwave.c     **** 
  52:armwave.c     ****     for(w = 0; w < TEST_NWAVES; w++) {
  53:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  54:armwave.c     ****         //mod = 1.0f;
  55:armwave.c     **** 
  56:armwave.c     ****         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  57:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
  58:armwave.c     ****             noise *= noise;
  59:armwave.c     ****             noise *= noise;
  60:armwave.c     ****             noise *= noise;
  61:armwave.c     **** 
  62:armwave.c     ****             if((rand() & 0xffff) > 0x7fff)
  63:armwave.c     ****                 noise = -noise;
  64:armwave.c     **** 
  65:armwave.c     ****             noise += 1.0f;
  66:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
  67:armwave.c     **** 
  68:armwave.c     ****             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise;
  69:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
  70:armwave.c     ****             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0), 255);
  71:armwave.c     ****         }
  72:armwave.c     ****     }
  73:armwave.c     **** }
  74:armwave.c     **** 
  75:armwave.c     **** /*
  76:armwave.c     ****  * Create a gamma table.
  77:armwave.c     ****  */
  78:armwave.c     **** void test_create_gamma()
  79:armwave.c     **** {
  80:armwave.c     ****     int i;
  81:armwave.c     ****     float gamma = 0.90f;
  82:armwave.c     **** 
  83:armwave.c     ****     for(i = 0; i < 256; i++) {
  84:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  85:armwave.c     ****     }
  86:armwave.c     **** }
  87:armwave.c     **** 
  88:armwave.c     **** /*
  89:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  90:armwave.c     ****  * pre-computed.
  91:armwave.c     ****  *
  92:armwave.c     ****  * @param    slice_y        Slice to render at
  93:armwave.c     ****  * @param    height         Number of wave points to render
  94:armwave.c     ****  */
  95:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  96:armwave.c     **** {
  97:armwave.c     ****     int yy, ys, w, scale_value;
  98:armwave.c     ****     uint32_t value, word;
  99:armwave.c     ****     uint8_t *wave_base;
 100:armwave.c     ****     uint8_t *write_buffer_base;
 101:armwave.c     ****     uint8_t *write_buffer;
 102:armwave.c     ****     
 103:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.target_height);
 104:armwave.c     **** 
 105:armwave.c     ****     // roll through each waveform
 106:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 107:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 108:armwave.c     **** 
 109:armwave.c     **** #if 0
 110:armwave.c     ****         printf("Rendering wave %4d, wave_base=0x%08x (offs:%8d) (%3d), buffer_base=0x%08x (offs:%8d
 111:armwave.c     ****             w, wave_base, wave_base - g_armwave_state.wave_buffer, *g_armwave_state.wave_buffer, \
 112:armwave.c     ****             write_buffer_base, write_buffer_base - g_armwave_state.ch1_buffer);
 113:armwave.c     **** #endif
 114:armwave.c     **** 
 115:armwave.c     ****         // roll through y and render the slice into the out buffer
 116:armwave.c     ****         // buffer is rendered rotated by 90 degrees
 117:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 118:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 119:armwave.c     **** 
 120:armwave.c     **** #if 0
 121:armwave.c     ****             value = (*(wave_base + yy)) * g_armwave_state.vscale;
 122:armwave.c     **** 
 123:armwave.c     ****             printf("Rendering row %5d, sum-y %5d, address=0x%08x (offs:%8d), value_at_pixel=%3d, xc
 124:armwave.c     ****                    "scaled_xcoord_to_xpixel=%5d, wave_base=0x%08x\n", \
 125:armwave.c     ****                    yy, slice_y + yy, write_buffer, write_buffer - g_armwave_state.ch1_buffer, \
 126:armwave.c     ****                    value, g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 127:armwave.c     ****                    g_armwave_state.xcoord_to_xpixel[slice_y + yy], \
 128:armwave.c     ****                    wave_base + yy);
 129:armwave.c     **** #endif
 130:armwave.c     **** 
 131:armwave.c     ****             //value = (*(wave_base + yy)) * g_armwave_state.vscale;
 132:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 133:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 134:armwave.c     ****             //*(write_buffer + value) = 0xff;
 135:armwave.c     **** 
 136:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
 137:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 138:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 139:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 140:armwave.c     ****             	word >>= 8;
 141:armwave.c     ****     		}
 142:armwave.c     **** 
 143:armwave.c     ****             //write_buffer_base += g_armwave_state.target_width;
 144:armwave.c     ****         }
 145:armwave.c     ****     }
 146:armwave.c     **** }
 147:armwave.c     **** 
 148:armwave.c     **** void armwave_init()
 149:armwave.c     **** {
 150:armwave.c     ****     g_armwave_state.flags = 0;
 151:armwave.c     **** }
 152:armwave.c     **** 
 153:armwave.c     **** void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end_point, uint32_t 
  84              		.loc 1 153 6 view -0
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 0, uses_anonymous_args = 0
  88              	.LVL0:
 154:armwave.c     **** {
 155:armwave.c     ****     uint32_t length, xx;
  89              		.loc 1 155 5 view .LVU1
 156:armwave.c     ****     float points_per_pixel;
  90              		.loc 1 156 5 view .LVU2
 157:armwave.c     **** 
 158:armwave.c     ****     assert(start_point < end_point);
  91              		.loc 1 158 5 view .LVU3
 159:armwave.c     **** 
 160:armwave.c     ****     // Pretend we're in 1ch, 8-bit mode only for now
 161:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
  92              		.loc 1 161 5 view .LVU4
  93              	@ armwave.c:153: void armwave_setup_render(uint8_t *wave_buffer, uint32_t start_point, uint32_t end
 153:armwave.c     **** {
  94              		.loc 1 153 6 is_stmt 0 view .LVU5
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 162:armwave.c     **** 
 163:armwave.c     ****     // target_height must be multiple of 256 (8-bit samples);  other sizes should be scaled somehow
 164:armwave.c     ****     assert((target_height % 256) == 0);
 165:armwave.c     **** 
 166:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 167:armwave.c     ****     g_armwave_state.xstride = target_height;
 102              		.loc 1 167 29 view .LVU6
 103 0004 011CA0E3 		mov	r1, #256	@ tmp129,
 104              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 105              		.loc 1 161 33 view .LVU7
 106 0008 F4409FE5 		ldr	r4, .L12	@ tmp171,
 107 000c F4309FE5 		ldr	r3, .L12+4	@ tmp127,
 108              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 169:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 109              		.loc 1 169 33 view .LVU8
 110 0010 022BA0E3 		mov	r2, #2048	@ tmp133,
 111              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 170:armwave.c     ****     g_armwave_state.waves = waves;
 171:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 172:armwave.c     ****     g_armwave_state.target_width = target_width;
 173:armwave.c     ****     g_armwave_state.target_height = target_height;
 174:armwave.c     **** 
 175:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 176:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 177:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 178:armwave.c     ****     g_armwave_state.slice_height = 64;  
 179:armwave.c     **** 
 180:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 112              		.loc 1 180 23 view .LVU9
 113 0014 040094E5 		ldr	r0, [r4, #4]	@ _4, g_armwave_state.ch1_buffer
 114              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 115              		.loc 1 168 28 view .LVU10
 116 0018 01C0A0E3 		mov	ip, #1	@ tmp131,
 117              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 118              		.loc 1 161 33 view .LVU11
 119 001c 143084E5 		str	r3, [r4, #20]	@ tmp127, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 120              		.loc 1 164 5 is_stmt 1 view .LVU12
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 121              		.loc 1 167 5 view .LVU13
 122              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 123              		.loc 1 171 26 is_stmt 0 view .LVU14
 124 0020 0257A0E3 		mov	r5, #524288	@ tmp137,
 125              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 126              		.loc 1 170 27 view .LVU15
 127 0024 4030A0E3 		mov	r3, #64	@ tmp135,
 128              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 129              		.loc 1 180 7 view .LVU16
 130 0028 000050E3 		cmp	r0, #0	@ _4,
 131              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 132              		.loc 1 168 28 view .LVU17
 133 002c 1CC084E5 		str	ip, [r4, #28]	@ tmp131, g_armwave_state.vscale
 134              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 135              		.loc 1 167 29 view .LVU18
 136 0030 181084E5 		str	r1, [r4, #24]	@ tmp129, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 137              		.loc 1 168 5 is_stmt 1 view .LVU19
 169:armwave.c     ****     g_armwave_state.waves = waves;
 138              		.loc 1 169 5 view .LVU20
 139              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 140              		.loc 1 173 35 is_stmt 0 view .LVU21
 141 0034 381084E5 		str	r1, [r4, #56]	@ tmp129, g_armwave_state.target_height
 142              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 143              		.loc 1 169 33 view .LVU22
 144 0038 202084E5 		str	r2, [r4, #32]	@ tmp133, g_armwave_state.wave_stride
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 145              		.loc 1 170 5 is_stmt 1 view .LVU23
 146              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 147              		.loc 1 172 34 is_stmt 0 view .LVU24
 148 003c 342084E5 		str	r2, [r4, #52]	@ tmp133, g_armwave_state.target_width
 149              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 150              		.loc 1 170 27 view .LVU25
 151 0040 243084E5 		str	r3, [r4, #36]	@ tmp135, g_armwave_state.waves
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 152              		.loc 1 171 5 is_stmt 1 view .LVU26
 153              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 154              		.loc 1 178 34 is_stmt 0 view .LVU27
 155 0044 283084E5 		str	r3, [r4, #40]	@ tmp135, g_armwave_state.slice_height
 156              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 157              		.loc 1 171 26 view .LVU28
 158 0048 305084E5 		str	r5, [r4, #48]	@ tmp137, g_armwave_state.size
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 159              		.loc 1 172 5 is_stmt 1 view .LVU29
 173:armwave.c     **** 
 160              		.loc 1 173 5 view .LVU30
 178:armwave.c     **** 
 161              		.loc 1 178 5 view .LVU31
 162              		.loc 1 180 5 view .LVU32
 163              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 164              		.loc 1 180 7 is_stmt 0 view .LVU33
 165 004c 0100000A 		beq	.L2		@,
 181:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 166              		.loc 1 181 9 is_stmt 1 view .LVU34
 167 0050 FEFFFFEB 		bl	free		@
 168              	.LVL1:
 169 0054 305094E5 		ldr	r5, [r4, #48]	@ prephitmp_1, g_armwave_state.size
 170              	.L2:
 182:armwave.c     **** 
 183:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 171              		.loc 1 183 5 view .LVU35
 172              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 173              		.loc 1 183 34 is_stmt 0 view .LVU36
 174 0058 0110A0E3 		mov	r1, #1	@,
 175 005c 0500A0E1 		mov	r0, r5	@, prephitmp_1
 176 0060 FEFFFFEB 		bl	calloc		@
 177              	.LVL2:
 178              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 179              		.loc 1 184 33 view .LVU37
 180 0064 A0209FE5 		ldr	r2, .L12+8	@ tmp149,
 181              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 185:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 186:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 182              		.loc 1 186 33 view .LVU38
 183 0068 FA30A0E3 		mov	r3, #250	@ tmp152,
 184              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 185              		.loc 1 184 33 view .LVU39
 186 006c 402084E5 		str	r2, [r4, #64]	@ tmp149, MEM[(short int *)&g_armwave_state + 64B]
 187              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 188              		.loc 1 186 33 view .LVU40
 189 0070 B434C4E1 		strh	r3, [r4, #68]	@ movhi	@ tmp152, g_armwave_state.ch1_color.b
 190              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 187:armwave.c     **** 
 188:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 191              		.loc 1 188 5 view .LVU41
 192 0074 000050E3 		cmp	r0, #0	@ tmp146,
 193              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 194              		.loc 1 183 32 view .LVU42
 195 0078 040084E5 		str	r0, [r4, #4]	@ tmp146, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 196              		.loc 1 184 5 is_stmt 1 view .LVU43
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 197              		.loc 1 185 5 view .LVU44
 186:armwave.c     **** 
 198              		.loc 1 186 5 view .LVU45
 199              		.loc 1 188 5 view .LVU46
 200 007c 1600000A 		beq	.L10		@,
 189:armwave.c     **** 
 190:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 191:armwave.c     ****     length = end_point - start_point;
 201              		.loc 1 191 5 view .LVU47
 202              	.LVL3:
 192:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 203              		.loc 1 192 5 view .LVU48
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 204              		.loc 1 193 5 view .LVU49
 205              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 206              		.loc 1 193 60 is_stmt 0 view .LVU50
 207 0080 0A7AD4ED 		vldr.32	s15, [r4, #40]	@ int	@ tmp173, g_armwave_state.slice_height
 208              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 209              		.loc 1 194 40 view .LVU51
 210 0084 010AA0E3 		mov	r0, #4096	@,
 211              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 212              		.loc 1 193 60 view .LVU52
 213 0088 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp158, tmp173
 214              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 215              		.loc 1 193 41 view .LVU53
 216 008c E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp160, tmp158
 217 0090 0B7AC4ED 		vstr.32	s15, [r4, #44]	@ int	@ tmp160, g_armwave_state.slice_record_height
 218              		.loc 1 194 5 is_stmt 1 view .LVU54
 219              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 220              		.loc 1 194 40 is_stmt 0 view .LVU55
 221 0094 FEFFFFEB 		bl	malloc		@
 222              	.LVL4:
 223              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 195:armwave.c     **** 
 196:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 224              		.loc 1 196 5 view .LVU56
 225 0098 000050E3 		cmp	r0, #0	@ tmp161,
 226              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 227              		.loc 1 194 38 view .LVU57
 228 009c 580084E5 		str	r0, [r4, #88]	@ tmp161, g_armwave_state.xcoord_to_xpixel
 229              		.loc 1 196 5 is_stmt 1 view .LVU58
 230              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 197:armwave.c     **** 
 198:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 231              		.loc 1 198 12 is_stmt 0 view .LVU59
 232 00a0 0030A013 		movne	r3, #0	@ xx,
 233 00a4 02004012 		subne	r0, r0, #2	@ ivtmp.24, tmp161,
 234              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 235              		.loc 1 196 5 view .LVU60
 236 00a8 1000000A 		beq	.L11		@,
 237              	.L5:
 238              	.LVL5:
 199:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 239              		.loc 1 199 9 is_stmt 1 view .LVU61
 240              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 241              		.loc 1 199 74 is_stmt 0 view .LVU62
 242 00ac 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 243              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 244              		.loc 1 198 32 view .LVU63
 245 00b0 013083E2 		add	r3, r3, #1	@ xx, xx,
 246              	.LVL6:
 247              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 248              		.loc 1 198 5 view .LVU64
 249 00b4 020B53E3 		cmp	r3, #2048	@ xx,
 250              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 251              		.loc 1 199 74 view .LVU65
 252 00b8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp166, xx
 253              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 254              		.loc 1 199 46 view .LVU66
 255 00bc E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp167, tmp166
 256 00c0 902A17EE 		vmov	r2, s15	@ int	@ tmp167, tmp167
 257 00c4 B220E0E1 		strh	r2, [r0, #2]!	@ movhi	@ tmp167, MEM[base: _20, offset: 0B]
 258              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 259              		.loc 1 198 5 view .LVU67
 260 00c8 F7FFFF1A 		bne	.L5		@,
 200:armwave.c     **** 
 201:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 202:armwave.c     ****     }
 203:armwave.c     **** 
 204:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 261              		.loc 1 204 5 is_stmt 1 view .LVU68
 262              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 263              		.loc 1 204 34 is_stmt 0 view .LVU69
 264 00cc 0501A0E1 		lsl	r0, r5, #2	@, prephitmp_1,
 265 00d0 FEFFFFEB 		bl	malloc		@
 266              	.LVL7:
 267              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 268              		.loc 1 204 32 view .LVU70
 269 00d4 3C0084E5 		str	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 270              	@ armwave.c:205: }
 205:armwave.c     **** }
 271              		.loc 1 205 1 view .LVU71
 272 00d8 7080BDE8 		pop	{r4, r5, r6, pc}	@
 273              	.LVL8:
 274              	.L10:
 188:armwave.c     **** 
 275              		.loc 1 188 5 is_stmt 1 view .LVU72
 276 00dc 2C309FE5 		ldr	r3, .L12+12	@,
 277 00e0 BC20A0E3 		mov	r2, #188	@,
 278 00e4 28109FE5 		ldr	r1, .L12+16	@,
 279 00e8 28009FE5 		ldr	r0, .L12+20	@,
 280 00ec FEFFFFEB 		bl	__assert_fail		@
 281              	.LVL9:
 282              	.L11:
 196:armwave.c     **** 
 283              		.loc 1 196 5 view .LVU73
 284 00f0 18309FE5 		ldr	r3, .L12+12	@,
 285 00f4 C420A0E3 		mov	r2, #196	@,
 286 00f8 14109FE5 		ldr	r1, .L12+16	@,
 287 00fc 18009FE5 		ldr	r0, .L12+24	@,
 288 0100 FEFFFFEB 		bl	__assert_fail		@
 289              	.LVL10:
 290              	.L13:
 291              		.align	2
 292              	.L12:
 293 0104 00000000 		.word	g_armwave_state
 294 0108 00000000 		.word	test_wave_buffer
 295 010c F609F406 		.word	116656630
 296 0110 00000000 		.word	.LANCHOR0
 297 0114 00000000 		.word	.LC0
 298 0118 0C000000 		.word	.LC1
 299 011c 30000000 		.word	.LC2
 300              		.cfi_endproc
 301              	.LFE72:
 303              		.align	2
 304              		.global	test_create_waveform
 305              		.syntax unified
 306              		.arm
 307              		.fpu vfp
 309              	test_create_waveform:
 310              	.LFB57:
  48:armwave.c     ****     float v, mod, noise, xnoise;
 311              		.loc 1 48 1 view -0
 312              		.cfi_startproc
 313              		@ args = 0, pretend = 0, frame = 8
 314              		@ frame_needed = 0, uses_anonymous_args = 0
  49:armwave.c     ****     int w, x;
 315              		.loc 1 49 5 view .LVU75
  50:armwave.c     **** 
 316              		.loc 1 50 5 view .LVU76
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 317              		.loc 1 52 5 view .LVU77
 318              	.LVL11:
 319              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 320              		.loc 1 48 1 is_stmt 0 view .LVU78
 321 0120 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 322              		.cfi_def_cfa_offset 36
 323              		.cfi_offset 4, -36
 324              		.cfi_offset 5, -32
 325              		.cfi_offset 6, -28
 326              		.cfi_offset 7, -24
 327              		.cfi_offset 8, -20
 328              		.cfi_offset 9, -16
 329              		.cfi_offset 10, -12
 330              		.cfi_offset 11, -8
 331              		.cfi_offset 14, -4
 332 0124 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 333              		.cfi_def_cfa_offset 84
 334              		.cfi_offset 80, -84
 335              		.cfi_offset 81, -80
 336              		.cfi_offset 82, -76
 337              		.cfi_offset 83, -72
 338              		.cfi_offset 84, -68
 339              		.cfi_offset 85, -64
 340              		.cfi_offset 86, -60
 341              		.cfi_offset 87, -56
 342              		.cfi_offset 88, -52
 343              		.cfi_offset 89, -48
 344              		.cfi_offset 90, -44
 345              		.cfi_offset 91, -40
 346 0128 5C819FE5 		ldr	r8, .L33+40	@ _75,
 347              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 348              		.loc 1 53 33 view .LVU79
 349 012c 4CDA9FED 		vldr.32	s26, .L33	@ tmp157,
 350 0130 7F6E88E2 		add	r6, r8, #2032	@ ivtmp.40, _75,
 351              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 352              		.loc 1 53 13 view .LVU80
 353 0134 4BCADFED 		vldr.32	s25, .L33+4	@ tmp161,
 354              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 355              		.loc 1 57 20 view .LVU81
 356 0138 4BCA9FED 		vldr.32	s24, .L33+8	@ tmp166,
 357              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 358              		.loc 1 68 29 view .LVU82
 359 013c 4BBADFED 		vldr.32	s23, .L33+12	@ tmp170,
 360              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 361              		.loc 1 68 33 view .LVU83
 362 0140 4BBA9FED 		vldr.32	s22, .L33+16	@ tmp172,
 363              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 364              		.loc 1 66 20 view .LVU84
 365 0144 4BAADFED 		vldr.32	s21, .L33+20	@ tmp177,
 366 0148 02B886E2 		add	fp, r6, #131072	@ _81,,
 367 014c 3CA19FE5 		ldr	r10, .L33+44	@ tmp197,
 368              	@ armwave.c:48: {
  48:armwave.c     ****     float v, mod, noise, xnoise;
 369              		.loc 1 48 1 view .LVU85
 370 0150 0CD04DE2 		sub	sp, sp, #12	@,,
 371              		.cfi_def_cfa_offset 96
 372 0154 0FB08BE2 		add	fp, fp, #15	@ _81, _81,
 373 0158 0F6086E2 		add	r6, r6, #15	@ ivtmp.40, ivtmp.40,
 374 015c 008068E2 		rsb	r8, r8, #0	@ ivtmp.43, _75
 375              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 376              		.loc 1 52 11 view .LVU86
 377 0160 0090A0E3 		mov	r9, #0	@ w,
 378              	.LVL12:
 379              	.L20:
  53:armwave.c     ****         //mod = 1.0f;
 380              		.loc 1 53 9 is_stmt 1 view .LVU87
 381              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 382              		.loc 1 53 24 is_stmt 0 view .LVU88
 383 0164 909A07EE 		vmov	s15, r9	@ int	@ w, w
 384              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 385              		.loc 1 53 48 view .LVU89
 386 0168 007A9AED 		vldr.32	s14, [r10]	@ mod_depth, mod_depth
 387              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 388              		.loc 1 53 13 view .LVU90
 389 016c 6C9AB0EE 		vmov.f32	s18, s25	@ mod, tmp161
 390              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 391              		.loc 1 65 19 view .LVU91
 392 0170 41AA9FED 		vldr.32	s20, .L33+24	@ tmp183,
 393              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 394              		.loc 1 53 24 view .LVU92
 395 0174 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp155, w
 396              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 397              		.loc 1 70 58 view .LVU93
 398 0178 408ADFED 		vldr.32	s17, .L33+28	@ tmp188,
 399 017c 025B46E2 		sub	r5, r6, #2048	@ ivtmp.33, ivtmp.40,
 400 0180 017088E2 		add	r7, r8, #1	@ tmp196, ivtmp.43,
 401              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 402              		.loc 1 53 33 view .LVU94
 403 0184 8D7A67EE 		vmul.f32	s15, s15, s26	@ tmp156, tmp155, tmp157
 404              	@ armwave.c:53:         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
  53:armwave.c     ****         //mod = 1.0f;
 405              		.loc 1 53 13 view .LVU95
 406 0188 879A07EE 		vmla.f32	s18, s15, s14	@ mod, tmp156, mod_depth
 407              	.LVL13:
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 408              		.loc 1 56 9 is_stmt 1 view .LVU96
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 409              		.loc 1 56 9 is_stmt 0 view .LVU97
 410 018c C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp195, mod
 411              	.LVL14:
 412              	.L19:
 413              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 414              		.loc 1 57 24 view .LVU98
 415 0190 FEFFFFEB 		bl	rand		@
 416              	.LVL15:
 417 0194 054087E0 		add	r4, r7, r5	@ _71, tmp196, ivtmp.33
 418              	.LVL16:
  57:armwave.c     ****             noise *= noise;
 419              		.loc 1 57 13 is_stmt 1 view .LVU99
 420              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 421              		.loc 1 57 31 is_stmt 0 view .LVU100
 422 0198 7000FFE6 		uxth	r0, r0	@ tmp163,
 423              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 424              		.loc 1 57 41 view .LVU101
 425 019c 900A07EE 		vmov	s15, r0	@ int	@ tmp163, tmp163
 426 01a0 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp165, tmp163
 427              	@ armwave.c:57:             noise  = ((rand() & 0xffff) / 100000.0f);
  57:armwave.c     ****             noise *= noise;
 428              		.loc 1 57 20 view .LVU102
 429 01a4 0C7AC7EE 		vdiv.f32	s15, s14, s24	@ noise, tmp165, tmp166
 430              	.LVL17:
  58:armwave.c     ****             noise *= noise;
 431              		.loc 1 58 13 is_stmt 1 view .LVU103
 432              	@ armwave.c:58:             noise *= noise;
  58:armwave.c     ****             noise *= noise;
 433              		.loc 1 58 19 is_stmt 0 view .LVU104
 434 01a8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 435              	.LVL18:
  59:armwave.c     ****             noise *= noise;
 436              		.loc 1 59 13 is_stmt 1 view .LVU105
 437              	@ armwave.c:59:             noise *= noise;
  59:armwave.c     ****             noise *= noise;
 438              		.loc 1 59 19 is_stmt 0 view .LVU106
 439 01ac A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 440              	.LVL19:
  60:armwave.c     **** 
 441              		.loc 1 60 13 is_stmt 1 view .LVU107
 442              	@ armwave.c:60:             noise *= noise;
  60:armwave.c     **** 
 443              		.loc 1 60 19 is_stmt 0 view .LVU108
 444 01b0 A78A27EE 		vmul.f32	s16, s15, s15	@ noise, noise, noise
 445              	.LVL20:
  62:armwave.c     ****                 noise = -noise;
 446              		.loc 1 62 13 is_stmt 1 view .LVU109
 447              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 448              		.loc 1 62 17 is_stmt 0 view .LVU110
 449 01b4 FEFFFFEB 		bl	rand		@
 450              	.LVL21:
  63:armwave.c     **** 
 451              		.loc 1 63 17 is_stmt 1 view .LVU111
 452              	@ armwave.c:62:             if((rand() & 0xffff) > 0x7fff)
  62:armwave.c     ****                 noise = -noise;
 453              		.loc 1 62 15 is_stmt 0 view .LVU112
 454 01b8 020910E3 		tst	r0, #32768	@,
 455              	@ armwave.c:63:                 noise = -noise;
  63:armwave.c     **** 
 456              		.loc 1 63 23 view .LVU113
 457 01bc 488AB11E 		vnegne.f32	s16, s16	@ noise, noise
 458              	.LVL22:
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 459              		.loc 1 65 13 is_stmt 1 view .LVU114
  66:armwave.c     **** 
 460              		.loc 1 66 13 view .LVU115
 461              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 462              		.loc 1 66 23 is_stmt 0 view .LVU116
 463 01c0 FEFFFFEB 		bl	rand		@
 464              	.LVL23:
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 465              		.loc 1 68 13 is_stmt 1 view .LVU117
 466              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 467              		.loc 1 68 29 is_stmt 0 view .LVU118
 468 01c4 904A07EE 		vmov	s15, r4	@ int	@ _71, _71
 469 01c8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp168, _71
 470 01cc AB7A67EE 		vmul.f32	s15, s15, s23	@ tmp169, tmp168, tmp170
 471              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 472              		.loc 1 66 30 view .LVU119
 473 01d0 7000FFE6 		uxth	r0, r0	@ tmp173,
 474              	.LVL24:
 475              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 476              		.loc 1 66 40 view .LVU120
 477 01d4 100A07EE 		vmov	s14, r0	@ int	@ tmp173, tmp173
 478 01d8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp175, tmp173
 479              	@ armwave.c:66:             xnoise = (rand() & 0xffff) / 6553500.0f;
  66:armwave.c     **** 
 480              		.loc 1 66 20 view .LVU121
 481 01dc 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp175, tmp177
 482              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 483              		.loc 1 68 60 view .LVU122
 484 01e0 8B0A07EE 		vmla.f32	s0, s15, s22	@ tmp178, tmp169, tmp172
 485              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 486              		.loc 1 68 18 view .LVU123
 487 01e4 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp178
 488 01e8 FEFFFFEB 		bl	sin		@
 489              	.LVL25:
  70:armwave.c     ****         }
 490              		.loc 1 70 13 is_stmt 1 view .LVU124
 491              	@ armwave.c:65:             noise += 1.0f;
  65:armwave.c     ****             xnoise = (rand() & 0xffff) / 6553500.0f;
 492              		.loc 1 65 19 is_stmt 0 view .LVU125
 493 01ec 0A7A78EE 		vadd.f32	s15, s16, s20	@ noise, noise, tmp183
 494              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 495              		.loc 1 70 58 view .LVU126
 496 01f0 236ADFED 		vldr.32	s13, .L33+32	@ tmp189,
 497              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 498              		.loc 1 70 56 view .LVU127
 499 01f4 236A9FED 		vldr.32	s12, .L33+36	@ tmp191,
 500 01f8 0030A0E3 		mov	r3, #0	@ iftmp.1_30,
 501              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 502              		.loc 1 68 77 view .LVU128
 503 01fc E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp184, noise
 504              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 505              		.loc 1 68 70 view .LVU129
 506 0200 000B29EE 		vmul.f64	d0, d9, d0	@ tmp181, tmp195,
 507              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 508              		.loc 1 68 77 view .LVU130
 509 0204 077B20EE 		vmul.f64	d7, d0, d7	@ tmp185, tmp181, tmp184
 510              	@ armwave.c:68:             v = (sin((6.28f * x * (1.0f / TEST_WAVE_SIZE)) + xnoise) * mod) * noise
  68:armwave.c     ****             //v = ((x & 0xff) / 128.0f) - 1.0f;
 511              		.loc 1 68 15 view .LVU131
 512 0208 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp185
 513              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 514              		.loc 1 70 58 view .LVU132
 515 020c 667AF0EE 		vmov.f32	s15, s13	@ tmp189, tmp189
 516 0210 287A47EE 		vmla.f32	s15, s14, s17	@ tmp189, v, tmp188
 517 0214 C07AF5EE 		vcmpe.f32	s15, #0	@ _24
 518 0218 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 519 021c 050000DA 		ble	.L16		@,
 520              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 521              		.loc 1 70 56 discriminator 1 view .LVU133
 522 0220 C67AF4EE 		vcmpe.f32	s15, s12	@ _24, tmp191
 523 0224 FF30A0E3 		mov	r3, #255	@ iftmp.1_30,
 524 0228 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 525 022c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp193, _24
 526 0230 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp193, %sfp
 527 0234 0430DD45 		ldrbmi	r3, [sp, #4]	@ zero_extendqisi2	@ iftmp.1_30, %sfp
 528              	.L16:
 529              	@ armwave.c:70:             test_wave_buffer[x + (w * TEST_WAVE_SIZE)] = MIN(MAX(128 + (v * 127), 0
  70:armwave.c     ****         }
 530              		.loc 1 70 56 discriminator 12 view .LVU134
 531 0238 0130E5E5 		strb	r3, [r5, #1]!	@ iftmp.1_30, MEM[base: _51, offset: 0B]
 532              	.LVL26:
 533              	@ armwave.c:56:         for(x = 0; x < TEST_WAVE_SIZE; x++) {
  56:armwave.c     ****             noise  = ((rand() & 0xffff) / 100000.0f);
 534              		.loc 1 56 9 discriminator 12 view .LVU135
 535 023c 060055E1 		cmp	r5, r6	@ ivtmp.33, ivtmp.40
 536 0240 D2FFFF1A 		bne	.L19		@,
 537 0244 026B85E2 		add	r6, r5, #2048	@ ivtmp.40, ivtmp.33,
 538              	.LVL27:
 539              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 540              		.loc 1 52 5 discriminator 2 view .LVU136
 541 0248 0B0056E1 		cmp	r6, fp	@ ivtmp.40, _81
 542              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 543              		.loc 1 52 34 discriminator 2 view .LVU137
 544 024c 019089E2 		add	r9, r9, #1	@ w, w,
 545              	.LVL28:
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 546              		.loc 1 52 34 discriminator 2 view .LVU138
 547 0250 028B48E2 		sub	r8, r8, #2048	@ ivtmp.43, ivtmp.43,
 548              	@ armwave.c:52:     for(w = 0; w < TEST_NWAVES; w++) {
  52:armwave.c     ****         mod = 0.5f + (((float)w / TEST_NWAVES) * mod_depth);
 549              		.loc 1 52 5 discriminator 2 view .LVU139
 550 0254 C2FFFF1A 		bne	.L20		@,
 551              	@ armwave.c:73: }
  73:armwave.c     **** 
 552              		.loc 1 73 1 view .LVU140
 553 0258 0CD08DE2 		add	sp, sp, #12	@,,
 554              		.cfi_def_cfa_offset 84
 555              		@ sp needed	@
 556 025c 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 557              		.cfi_restore 90
 558              		.cfi_restore 91
 559              		.cfi_restore 88
 560              		.cfi_restore 89
 561              		.cfi_restore 86
 562              		.cfi_restore 87
 563              		.cfi_restore 84
 564              		.cfi_restore 85
 565              		.cfi_restore 82
 566              		.cfi_restore 83
 567              		.cfi_restore 80
 568              		.cfi_restore 81
 569              		.cfi_def_cfa_offset 36
 570              	.LVL29:
  73:armwave.c     **** 
 571              		.loc 1 73 1 view .LVU141
 572 0260 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 573              	.LVL30:
 574              	.L34:
  73:armwave.c     **** 
 575              		.loc 1 73 1 view .LVU142
 576              		.align	2
 577              	.L33:
 578 0264 0000803C 		.word	1015021568
 579 0268 0000003F 		.word	1056964608
 580 026c 0050C347 		.word	1203982336
 581 0270 C3F5C840 		.word	1086911939
 582 0274 0000003A 		.word	973078528
 583 0278 38FFC74A 		.word	1254620984
 584 027c 0000803F 		.word	1065353216
 585 0280 0000FE42 		.word	1123942400
 586 0284 00000043 		.word	1124073472
 587 0288 00007F43 		.word	1132396544
 588 028c 00000000 		.word	test_wave_buffer
 589 0290 00000000 		.word	.LANCHOR1
 590              		.cfi_endproc
 591              	.LFE57:
 593              		.align	2
 594              		.global	test_create_gamma
 595              		.syntax unified
 596              		.arm
 597              		.fpu vfp
 599              	test_create_gamma:
 600              	.LFB58:
  79:armwave.c     ****     int i;
 601              		.loc 1 79 1 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
  80:armwave.c     ****     float gamma = 0.90f;
 605              		.loc 1 80 5 view .LVU144
  81:armwave.c     **** 
 606              		.loc 1 81 5 view .LVU145
 607              	.LVL31:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 608              		.loc 1 83 5 view .LVU146
 609              	@ armwave.c:79: {
  79:armwave.c     ****     int i;
 610              		.loc 1 79 1 is_stmt 0 view .LVU147
 611 0294 70402DE9 		push	{r4, r5, r6, lr}	@
 612              		.cfi_def_cfa_offset 16
 613              		.cfi_offset 4, -16
 614              		.cfi_offset 5, -12
 615              		.cfi_offset 6, -8
 616              		.cfi_offset 14, -4
 617 0298 068B2DED 		vpush.64	{d8, d9, d10}	@
 618              		.cfi_def_cfa_offset 40
 619              		.cfi_offset 80, -40
 620              		.cfi_offset 81, -36
 621              		.cfi_offset 82, -32
 622              		.cfi_offset 83, -28
 623              		.cfi_offset 84, -24
 624              		.cfi_offset 85, -20
 625 029c 68409FE5 		ldr	r4, .L39+20	@ ivtmp.51,
 626              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 627              		.loc 1 84 32 view .LVU148
 628 02a0 18AA9FED 		vldr.32	s20, .L39+16	@ tmp128,
 629              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 630              		.loc 1 84 26 view .LVU149
 631 02a4 139B9FED 		vldr.64	d9, .L39	@ tmp135,
 632              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 633              		.loc 1 84 49 view .LVU150
 634 02a8 148B9FED 		vldr.64	d8, .L39+8	@ tmp131,
 635 02ac 015084E2 		add	r5, r4, #1	@ _25, ivtmp.51,
 636 02b0 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.51,
 637 02b4 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 638              	.LVL32:
 639              	.L36:
  84:armwave.c     ****     }
 640              		.loc 1 84 9 is_stmt 1 discriminator 3 view .LVU151
 641              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 642              		.loc 1 84 32 is_stmt 0 discriminator 3 view .LVU152
 643 02b8 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.51
 644              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 645              		.loc 1 84 26 discriminator 3 view .LVU153
 646 02bc 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 647              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 648              		.loc 1 84 32 discriminator 3 view .LVU154
 649 02c0 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 650 02c4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 651 02c8 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 652              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 653              		.loc 1 84 26 discriminator 3 view .LVU155
 654 02cc C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 655 02d0 FEFFFFEB 		bl	pow		@
 656              	.LVL33:
 657              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 658              		.loc 1 84 49 discriminator 3 view .LVU156
 659 02d4 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 660              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 661              		.loc 1 84 24 discriminator 3 view .LVU157
 662 02d8 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 663 02dc 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 664 02e0 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 665              	.LVL34:
 666              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 667              		.loc 1 83 5 discriminator 3 view .LVU158
 668 02e4 060054E1 		cmp	r4, r6	@ ivtmp.51, _26
 669 02e8 F2FFFF1A 		bne	.L36		@,
 670              	@ armwave.c:86: }
  86:armwave.c     **** 
 671              		.loc 1 86 1 view .LVU159
 672 02ec 068BBDEC 		vldm	sp!, {d8-d10}	@,
 673              		.cfi_restore 84
 674              		.cfi_restore 85
 675              		.cfi_restore 82
 676              		.cfi_restore 83
 677              		.cfi_restore 80
 678              		.cfi_restore 81
 679              		.cfi_def_cfa_offset 16
 680 02f0 7080BDE8 		pop	{r4, r5, r6, pc}	@
 681              	.LVL35:
 682              	.L40:
  86:armwave.c     **** 
 683              		.loc 1 86 1 view .LVU160
 684 02f4 0000A0E1 		.align	3
 685              	.L39:
 686 02f8 000000C0 		.word	-1073741824
 687 02fc CCCCEC3F 		.word	1072483532
 688 0300 00000000 		.word	0
 689 0304 00E06F40 		.word	1081073664
 690 0308 00007F43 		.word	1132396544
 691 030c FFFFFFFF 		.word	gamma_table-1
 692              		.cfi_endproc
 693              	.LFE58:
 695              		.align	2
 696              		.global	render_nonaa_to_buffer_1ch_slice
 697              		.syntax unified
 698              		.arm
 699              		.fpu vfp
 701              	render_nonaa_to_buffer_1ch_slice:
 702              	.LVL36:
 703              	.LFB59:
  96:armwave.c     ****     int yy, ys, w, scale_value;
 704              		.loc 1 96 1 is_stmt 1 view -0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 0
 707              		@ frame_needed = 0, uses_anonymous_args = 0
  97:armwave.c     ****     uint32_t value, word;
 708              		.loc 1 97 5 view .LVU162
  98:armwave.c     ****     uint8_t *wave_base;
 709              		.loc 1 98 5 view .LVU163
  99:armwave.c     ****     uint8_t *write_buffer_base;
 710              		.loc 1 99 5 view .LVU164
 100:armwave.c     ****     uint8_t *write_buffer;
 711              		.loc 1 100 5 view .LVU165
 101:armwave.c     ****     
 712              		.loc 1 101 5 view .LVU166
 103:armwave.c     **** 
 713              		.loc 1 103 5 view .LVU167
 714              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 715              		.loc 1 103 40 is_stmt 0 view .LVU168
 716 0310 F4209FE5 		ldr	r2, .L53	@ tmp257,
 717              	@ armwave.c:96: {
  96:armwave.c     ****     int yy, ys, w, scale_value;
 718              		.loc 1 96 1 view .LVU169
 719 0314 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 720              		.cfi_def_cfa_offset 36
 721              		.cfi_offset 4, -36
 722              		.cfi_offset 5, -32
 723              		.cfi_offset 6, -28
 724              		.cfi_offset 7, -24
 725              		.cfi_offset 8, -20
 726              		.cfi_offset 9, -16
 727              		.cfi_offset 10, -12
 728              		.cfi_offset 11, -8
 729              		.cfi_offset 14, -4
 730              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 731              		.loc 1 106 5 view .LVU170
 732 0318 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 733              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 734              		.loc 1 103 63 view .LVU171
 735 031c 386092E5 		ldr	r6, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 736              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 737              		.loc 1 106 5 view .LVU172
 738 0320 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 739              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 740              		.loc 1 103 40 view .LVU173
 741 0324 04C092E5 		ldr	ip, [r2, #4]	@ _1, g_armwave_state.ch1_buffer
 742              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 743              		.loc 1 103 63 view .LVU174
 744 0328 960006E0 		mul	r6, r6, r0	@ _3, g_armwave_state.target_height, slice_y
 745              	.LVL37:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 746              		.loc 1 106 5 is_stmt 1 view .LVU175
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 747              		.loc 1 106 5 is_stmt 0 view .LVU176
 748 032c F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 749 0330 000051E3 		cmp	r1, #0	@ height,
 750 0334 F08FBD08 		popeq	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 751 0338 049040E2 		sub	r9, r0, #4	@ tmp256, slice_y,
 752              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 753              		.loc 1 106 11 view .LVU177
 754 033c 0080A0E3 		mov	r8, #0	@ w,
 755              	.LVL38:
 756              	.L45:
 107:armwave.c     **** 
 757              		.loc 1 107 9 is_stmt 1 view .LVU178
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 758              		.loc 1 117 9 view .LVU179
 759              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 760              		.loc 1 107 64 is_stmt 0 view .LVU180
 761 0340 203092E5 		ldr	r3, [r2, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 762 0344 147092E5 		ldr	r7, [r2, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 763              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 764              		.loc 1 117 16 view .LVU181
 765 0348 0000A0E3 		mov	r0, #0	@ yy,
 766 034c 939823E0 		mla	r3, r3, r8, r9	@ tmp195, g_armwave_state.wave_stride, w, tmp256
 767 0350 037087E0 		add	r7, r7, r3	@ ivtmp.57, g_armwave_state.wave_buffer, tmp195
 768              	.LVL39:
 769              	.L44:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 770              		.loc 1 132 13 is_stmt 1 view .LVU182
 771              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 772              		.loc 1 132 18 is_stmt 0 view .LVU183
 773 0354 0430B7E5 		ldr	r3, [r7, #4]!	@ word, MEM[base: _162, offset: 0B]
 774              	.LVL40:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 775              		.loc 1 136 13 is_stmt 1 view .LVU184
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 776              		.loc 1 137 14 view .LVU185
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 777              		.loc 1 138 14 view .LVU186
 139:armwave.c     ****             	word >>= 8;
 778              		.loc 1 139 14 view .LVU187
 779              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 780              		.loc 1 137 42 is_stmt 0 view .LVU188
 781 0358 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 782              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 783              		.loc 1 138 60 view .LVU189
 784 035c 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 785              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 786              		.loc 1 137 34 view .LVU190
 787 0360 73E0EFE6 		uxtb	lr, r3	@ word, word
 788              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 789              		.loc 1 140 19 view .LVU191
 790 0364 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 791              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 792              		.loc 1 139 44 view .LVU192
 793 0368 9A6E2EE0 		mla	lr, r10, lr, r6	@ tmp201, g_armwave_state.vscale, word, _3
 794              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 795              		.loc 1 137 34 view .LVU193
 796 036c 7440EFE6 		uxtb	r4, r4	@ word, word
 797              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 798              		.loc 1 139 44 view .LVU194
 799 0370 95E025E0 		mla	r5, r5, r0, lr	@ tmp205, g_armwave_state.target_height, yy, tmp201
 800              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 801              		.loc 1 138 60 view .LVU195
 802 0374 01B080E2 		add	fp, r0, #1	@ tmp217, yy,
 803              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 804              		.loc 1 140 19 view .LVU196
 805 0378 23E8A0E1 		lsr	lr, r3, #16	@ word, word,
 806              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 807              		.loc 1 139 44 view .LVU197
 808 037c 05A0DCE7 		ldrb	r10, [ip, r5]	@ zero_extendqisi2	@ *_55, *_55
 809              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 810              		.loc 1 137 34 view .LVU198
 811 0380 7EE0EFE6 		uxtb	lr, lr	@ word, word
 812              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 813              		.loc 1 140 19 view .LVU199
 814 0384 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 815              	.LVL41:
 816              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 817              		.loc 1 139 44 view .LVU200
 818 0388 01A08AE2 		add	r10, r10, #1	@ tmp208, *_55,
 819 038c 05A0CCE7 		strb	r10, [ip, r5]	@ tmp208, *_55
 820              	.LVL42:
 140:armwave.c     ****     		}
 821              		.loc 1 140 14 is_stmt 1 view .LVU201
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 822              		.loc 1 137 14 view .LVU202
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 823              		.loc 1 138 14 view .LVU203
 139:armwave.c     ****             	word >>= 8;
 824              		.loc 1 139 14 view .LVU204
 825              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 826              		.loc 1 137 42 is_stmt 0 view .LVU205
 827 0390 1CA092E5 		ldr	r10, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 828              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 829              		.loc 1 138 60 view .LVU206
 830 0394 385092E5 		ldr	r5, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 831              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 832              		.loc 1 139 44 view .LVU207
 833 0398 9A6424E0 		mla	r4, r10, r4, r6	@ tmp215, g_armwave_state.vscale, word, _3
 834              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 835              		.loc 1 138 60 view .LVU208
 836 039c 02A080E2 		add	r10, r0, #2	@ tmp232, yy,
 837              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 838              		.loc 1 139 44 view .LVU209
 839 03a0 954B24E0 		mla	r4, r5, fp, r4	@ tmp220, g_armwave_state.target_height, tmp217, tmp215
 840              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 841              		.loc 1 138 60 view .LVU210
 842 03a4 035080E2 		add	r5, r0, #3	@ tmp246, yy,
 843              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 844              		.loc 1 117 37 view .LVU211
 845 03a8 040080E2 		add	r0, r0, #4	@ yy, yy,
 846              	.LVL43:
 847              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 848              		.loc 1 139 44 view .LVU212
 849 03ac 04B0DCE7 		ldrb	fp, [ip, r4]	@ zero_extendqisi2	@ *_75, *_75
 850              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 851              		.loc 1 117 9 view .LVU213
 852 03b0 000051E1 		cmp	r1, r0	@ height, yy
 853              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 854              		.loc 1 139 44 view .LVU214
 855 03b4 01B08BE2 		add	fp, fp, #1	@ tmp223, *_75,
 856 03b8 04B0CCE7 		strb	fp, [ip, r4]	@ tmp223, *_75
 857              	.LVL44:
 140:armwave.c     ****     		}
 858              		.loc 1 140 14 is_stmt 1 view .LVU215
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 859              		.loc 1 137 14 view .LVU216
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 860              		.loc 1 138 14 view .LVU217
 139:armwave.c     ****             	word >>= 8;
 861              		.loc 1 139 14 view .LVU218
 862              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 863              		.loc 1 137 42 is_stmt 0 view .LVU219
 864 03bc 1CB092E5 		ldr	fp, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 865              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 866              		.loc 1 138 60 view .LVU220
 867 03c0 384092E5 		ldr	r4, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 868              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 869              		.loc 1 139 44 view .LVU221
 870 03c4 9B6E2EE0 		mla	lr, fp, lr, r6	@ tmp230, g_armwave_state.vscale, word, _3
 871 03c8 94EA2EE0 		mla	lr, r4, r10, lr	@ tmp235, g_armwave_state.target_height, tmp232, tmp230
 872 03cc 0E40DCE7 		ldrb	r4, [ip, lr]	@ zero_extendqisi2	@ *_95, *_95
 873 03d0 014084E2 		add	r4, r4, #1	@ tmp238, *_95,
 874 03d4 0E40CCE7 		strb	r4, [ip, lr]	@ tmp238, *_95
 140:armwave.c     ****     		}
 875              		.loc 1 140 14 is_stmt 1 view .LVU222
 876              	.LVL45:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 877              		.loc 1 137 14 view .LVU223
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 878              		.loc 1 138 14 view .LVU224
 139:armwave.c     ****             	word >>= 8;
 879              		.loc 1 139 14 view .LVU225
 880              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 881              		.loc 1 137 42 is_stmt 0 view .LVU226
 882 03d8 1C4092E5 		ldr	r4, [r2, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 883              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 884              		.loc 1 138 60 view .LVU227
 885 03dc 38E092E5 		ldr	lr, [r2, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 886              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 887              		.loc 1 139 44 view .LVU228
 888 03e0 946323E0 		mla	r3, r4, r3, r6	@ tmp244, g_armwave_state.vscale, word, _3
 889 03e4 9E3523E0 		mla	r3, lr, r5, r3	@ tmp249, g_armwave_state.target_height, tmp246, tmp244
 890 03e8 03E0DCE7 		ldrb	lr, [ip, r3]	@ zero_extendqisi2	@ *_115, *_115
 891 03ec 01E08EE2 		add	lr, lr, #1	@ tmp252, *_115,
 892 03f0 03E0CCE7 		strb	lr, [ip, r3]	@ tmp252, *_115
 140:armwave.c     ****     		}
 893              		.loc 1 140 14 is_stmt 1 view .LVU229
 894              	.LVL46:
 895              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 896              		.loc 1 117 9 is_stmt 0 view .LVU230
 897 03f4 D6FFFF8A 		bhi	.L44		@,
 898              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 899              		.loc 1 106 5 view .LVU231
 900 03f8 243092E5 		ldr	r3, [r2, #36]	@ g_armwave_state.waves, g_armwave_state.waves
 901              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 902              		.loc 1 106 44 view .LVU232
 903 03fc 018088E2 		add	r8, r8, #1	@ w, w,
 904              	.LVL47:
 905              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 906              		.loc 1 106 5 view .LVU233
 907 0400 030058E1 		cmp	r8, r3	@ w, g_armwave_state.waves
 908 0404 CDFFFF3A 		bcc	.L45		@,
 909 0408 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 910              	.L54:
 911              		.align	2
 912              	.L53:
 913 040c 00000000 		.word	g_armwave_state
 914              		.cfi_endproc
 915              	.LFE59:
 917              		.align	2
 918              		.global	armwave_init
 919              		.syntax unified
 920              		.arm
 921              		.fpu vfp
 923              	armwave_init:
 924              	.LFB60:
 149:armwave.c     ****     g_armwave_state.flags = 0;
 925              		.loc 1 149 1 is_stmt 1 view -0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 0
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 150:armwave.c     **** }
 930              		.loc 1 150 5 view .LVU235
 931              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 932              		.loc 1 150 27 is_stmt 0 view .LVU236
 933 0410 08309FE5 		ldr	r3, .L56	@ tmp110,
 934 0414 0020A0E3 		mov	r2, #0	@ tmp111,
 935 0418 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 936              	@ armwave.c:151: }
 151:armwave.c     **** 
 937              		.loc 1 151 1 view .LVU237
 938 041c 1EFF2FE1 		bx	lr	@
 939              	.L57:
 940              		.align	2
 941              	.L56:
 942 0420 00000000 		.word	g_armwave_state
 943              		.cfi_endproc
 944              	.LFE60:
 946              		.align	2
 947              		.global	armwave_setup_render
 948              		.syntax unified
 949              		.arm
 950              		.fpu vfp
 952              	armwave_setup_render:
 953              	.LVL48:
 954              	.LFB61:
 154:armwave.c     ****     uint32_t length, xx;
 955              		.loc 1 154 1 is_stmt 1 view -0
 956              		.cfi_startproc
 957              		@ args = 16, pretend = 0, frame = 0
 958              		@ frame_needed = 0, uses_anonymous_args = 0
 155:armwave.c     ****     float points_per_pixel;
 959              		.loc 1 155 5 view .LVU239
 156:armwave.c     **** 
 960              		.loc 1 156 5 view .LVU240
 158:armwave.c     **** 
 961              		.loc 1 158 5 view .LVU241
 962              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 963              		.loc 1 154 1 is_stmt 0 view .LVU242
 964 0424 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 965              		.cfi_def_cfa_offset 32
 966              		.cfi_offset 4, -32
 967              		.cfi_offset 5, -28
 968              		.cfi_offset 6, -24
 969              		.cfi_offset 7, -20
 970              		.cfi_offset 8, -16
 971              		.cfi_offset 9, -12
 972              		.cfi_offset 10, -8
 973              		.cfi_offset 14, -4
 974              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 975              		.loc 1 158 5 view .LVU243
 976 0428 020051E1 		cmp	r1, r2	@ start_point, end_point
 977              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 978              		.loc 1 154 1 view .LVU244
 979 042c 028B2DED 		vpush.64	{d8}	@
 980              		.cfi_def_cfa_offset 40
 981              		.cfi_offset 80, -40
 982              		.cfi_offset 81, -36
 983              	@ armwave.c:154: {
 154:armwave.c     ****     uint32_t length, xx;
 984              		.loc 1 154 1 view .LVU245
 985 0430 0190A0E1 		mov	r9, r1	@ start_point, start_point
 986 0434 0260A0E1 		mov	r6, r2	@ end_point, end_point
 987 0438 28109DE5 		ldr	r1, [sp, #40]	@ wave_stride, wave_stride
 988              	.LVL49:
 154:armwave.c     ****     uint32_t length, xx;
 989              		.loc 1 154 1 view .LVU246
 990 043c 2C809DE5 		ldr	r8, [sp, #44]	@ target_width, target_width
 991 0440 30209DE5 		ldr	r2, [sp, #48]	@ target_height, target_height
 992              	.LVL50:
 993              	@ armwave.c:158:     assert(start_point < end_point);
 158:armwave.c     **** 
 994              		.loc 1 158 5 view .LVU247
 995 0444 3E00002A 		bcs	.L70		@,
 161:armwave.c     **** 
 996              		.loc 1 161 5 is_stmt 1 view .LVU248
 997              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 998              		.loc 1 161 33 is_stmt 0 view .LVU249
 999 0448 48519FE5 		ldr	r5, .L74+4	@ tmp193,
 1000              	@ armwave.c:164:     assert((target_height % 256) == 0);
 164:armwave.c     **** 
 1001              		.loc 1 164 5 view .LVU250
 1002 044c FF4012E2 		ands	r4, r2, #255	@ xx, target_height,
 1003              	@ armwave.c:161:     g_armwave_state.wave_buffer = wave_buffer;
 161:armwave.c     **** 
 1004              		.loc 1 161 33 view .LVU251
 1005 0450 140085E5 		str	r0, [r5, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 164:armwave.c     **** 
 1006              		.loc 1 164 5 is_stmt 1 view .LVU252
 1007 0454 4900001A 		bne	.L71		@,
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1008              		.loc 1 167 5 view .LVU253
 1009              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1010              		.loc 1 171 42 is_stmt 0 view .LVU254
 1011 0458 980207E0 		mul	r7, r8, r2	@ _3, target_width, target_height
 1012              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1013              		.loc 1 180 23 view .LVU255
 1014 045c 040095E5 		ldr	r0, [r5, #4]	@ _4, g_armwave_state.ch1_buffer
 1015              	.LVL51:
 1016              	@ armwave.c:169:     g_armwave_state.wave_stride = wave_stride;
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1017              		.loc 1 169 33 view .LVU256
 1018 0460 201085E5 		str	r1, [r5, #32]	@ wave_stride, g_armwave_state.wave_stride
 1019              	@ armwave.c:170:     g_armwave_state.waves = waves;
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1020              		.loc 1 170 27 view .LVU257
 1021 0464 243085E5 		str	r3, [r5, #36]	@ waves, g_armwave_state.waves
 1022              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1023              		.loc 1 168 44 view .LVU258
 1024 0468 2214A0E1 		lsr	r1, r2, #8	@ tmp152, target_height,
 1025              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1026              		.loc 1 178 34 view .LVU259
 1027 046c 4030A0E3 		mov	r3, #64	@ tmp159,
 1028              	.LVL52:
 1029              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1030              		.loc 1 180 7 view .LVU260
 1031 0470 000050E3 		cmp	r0, #0	@ _4,
 1032              	@ armwave.c:167:     g_armwave_state.xstride = target_height;
 167:armwave.c     ****     g_armwave_state.vscale = target_height / 256;
 1033              		.loc 1 167 29 view .LVU261
 1034 0474 182085E5 		str	r2, [r5, #24]	@ target_height, g_armwave_state.xstride
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1035              		.loc 1 168 5 is_stmt 1 view .LVU262
 1036              	@ armwave.c:172:     g_armwave_state.target_width = target_width;
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1037              		.loc 1 172 34 is_stmt 0 view .LVU263
 1038 0478 348085E5 		str	r8, [r5, #52]	@ target_width, g_armwave_state.target_width
 1039              	@ armwave.c:173:     g_armwave_state.target_height = target_height;
 173:armwave.c     **** 
 1040              		.loc 1 173 35 view .LVU264
 1041 047c 382085E5 		str	r2, [r5, #56]	@ target_height, g_armwave_state.target_height
 1042              	@ armwave.c:171:     g_armwave_state.size = target_height * target_width;
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1043              		.loc 1 171 26 view .LVU265
 1044 0480 307085E5 		str	r7, [r5, #48]	@ _3, g_armwave_state.size
 1045              	@ armwave.c:168:     g_armwave_state.vscale = target_height / 256;
 168:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1046              		.loc 1 168 28 view .LVU266
 1047 0484 1C1085E5 		str	r1, [r5, #28]	@ tmp152, g_armwave_state.vscale
 169:armwave.c     ****     g_armwave_state.waves = waves;
 1048              		.loc 1 169 5 is_stmt 1 view .LVU267
 170:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1049              		.loc 1 170 5 view .LVU268
 171:armwave.c     ****     g_armwave_state.target_width = target_width;
 1050              		.loc 1 171 5 view .LVU269
 172:armwave.c     ****     g_armwave_state.target_height = target_height;
 1051              		.loc 1 172 5 view .LVU270
 173:armwave.c     **** 
 1052              		.loc 1 173 5 view .LVU271
 178:armwave.c     **** 
 1053              		.loc 1 178 5 view .LVU272
 1054              	@ armwave.c:178:     g_armwave_state.slice_height = 64;  
 178:armwave.c     **** 
 1055              		.loc 1 178 34 is_stmt 0 view .LVU273
 1056 0488 283085E5 		str	r3, [r5, #40]	@ tmp159, g_armwave_state.slice_height
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1057              		.loc 1 180 5 is_stmt 1 view .LVU274
 1058              	@ armwave.c:180:     if(g_armwave_state.ch1_buffer != NULL)
 180:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1059              		.loc 1 180 7 is_stmt 0 view .LVU275
 1060 048c 0100000A 		beq	.L61		@,
 181:armwave.c     **** 
 1061              		.loc 1 181 9 is_stmt 1 view .LVU276
 1062 0490 FEFFFFEB 		bl	free		@
 1063              	.LVL53:
 181:armwave.c     **** 
 1064              		.loc 1 181 9 is_stmt 0 view .LVU277
 1065 0494 307095E5 		ldr	r7, [r5, #48]	@ _3, g_armwave_state.size
 1066              	.L61:
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1067              		.loc 1 183 5 is_stmt 1 view .LVU278
 1068              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1069              		.loc 1 183 34 is_stmt 0 view .LVU279
 1070 0498 0110A0E3 		mov	r1, #1	@,
 1071 049c 0700A0E1 		mov	r0, r7	@, _3
 1072 04a0 FEFFFFEB 		bl	calloc		@
 1073              	.LVL54:
 1074              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1075              		.loc 1 184 33 view .LVU280
 1076 04a4 F0209FE5 		ldr	r2, .L74+8	@ tmp165,
 1077              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1078              		.loc 1 186 33 view .LVU281
 1079 04a8 FA30A0E3 		mov	r3, #250	@ tmp168,
 1080              	@ armwave.c:184:     g_armwave_state.ch1_color.r = 255 * overall_scale;
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1081              		.loc 1 184 33 view .LVU282
 1082 04ac 402085E5 		str	r2, [r5, #64]	@ tmp165, MEM[(short int *)&g_armwave_state + 64B]
 1083              	@ armwave.c:186:     g_armwave_state.ch1_color.b = 25 * overall_scale;
 186:armwave.c     **** 
 1084              		.loc 1 186 33 view .LVU283
 1085 04b0 B434C5E1 		strh	r3, [r5, #68]	@ movhi	@ tmp168, g_armwave_state.ch1_color.b
 1086              	@ armwave.c:188:     assert(g_armwave_state.ch1_buffer != NULL);
 188:armwave.c     **** 
 1087              		.loc 1 188 5 view .LVU284
 1088 04b4 000050E3 		cmp	r0, #0	@ tmp162,
 1089              	@ armwave.c:183:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.size, 1);
 183:armwave.c     ****     g_armwave_state.ch1_color.r = 255 * overall_scale;
 1090              		.loc 1 183 32 view .LVU285
 1091 04b8 040085E5 		str	r0, [r5, #4]	@ tmp162, g_armwave_state.ch1_buffer
 184:armwave.c     ****     g_armwave_state.ch1_color.g = 178 * overall_scale;
 1092              		.loc 1 184 5 is_stmt 1 view .LVU286
 185:armwave.c     ****     g_armwave_state.ch1_color.b = 25 * overall_scale;
 1093              		.loc 1 185 5 view .LVU287
 186:armwave.c     **** 
 1094              		.loc 1 186 5 view .LVU288
 188:armwave.c     **** 
 1095              		.loc 1 188 5 view .LVU289
 1096 04bc 2A00000A 		beq	.L72		@,
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1097              		.loc 1 191 5 view .LVU290
 1098              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1099              		.loc 1 192 34 is_stmt 0 view .LVU291
 1100 04c0 908A07EE 		vmov	s15, r8	@ int	@ target_width, target_width
 1101              	@ armwave.c:191:     length = end_point - start_point;
 191:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1102              		.loc 1 191 12 view .LVU292
 1103 04c4 096046E0 		sub	r6, r6, r9	@ length, end_point, start_point
 1104              	.LVL55:
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1105              		.loc 1 192 5 is_stmt 1 view .LVU293
 1106              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1107              		.loc 1 194 40 is_stmt 0 view .LVU294
 1108 04c8 8600A0E1 		lsl	r0, r6, #1	@, length,
 1109              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1110              		.loc 1 192 34 view .LVU295
 1111 04cc 677AB8EE 		vcvt.f32.u32	s14, s15	@ tmp173, target_width
 1112              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1113              		.loc 1 192 31 view .LVU296
 1114 04d0 906A07EE 		vmov	s15, r6	@ int	@ length, length
 1115 04d4 676AF8EE 		vcvt.f32.u32	s13, s15	@ tmp172, length
 1116              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1117              		.loc 1 193 60 view .LVU297
 1118 04d8 0A7AD5ED 		vldr.32	s15, [r5, #40]	@ int	@ tmp197, g_armwave_state.slice_height
 1119 04dc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp176, tmp197
 1120              	@ armwave.c:192:     points_per_pixel = length / ((float)(target_width));
 192:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1121              		.loc 1 192 22 view .LVU298
 1122 04e0 878A86EE 		vdiv.f32	s16, s13, s14	@ points_per_pixel, tmp172, tmp173
 1123              	.LVL56:
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1124              		.loc 1 193 5 is_stmt 1 view .LVU299
 1125              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1126              		.loc 1 193 60 is_stmt 0 view .LVU300
 1127 04e4 887A67EE 		vmul.f32	s15, s15, s16	@ tmp178, tmp176, points_per_pixel
 1128              	@ armwave.c:193:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 193:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1129              		.loc 1 193 41 view .LVU301
 1130 04e8 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp179, tmp178
 1131 04ec 0B7AC5ED 		vstr.32	s15, [r5, #44]	@ int	@ tmp179, g_armwave_state.slice_record_height
 194:armwave.c     **** 
 1132              		.loc 1 194 5 is_stmt 1 view .LVU302
 1133              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1134              		.loc 1 194 40 is_stmt 0 view .LVU303
 1135 04f0 FEFFFFEB 		bl	malloc		@
 1136              	.LVL57:
 1137              	@ armwave.c:196:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 196:armwave.c     **** 
 1138              		.loc 1 196 5 view .LVU304
 1139 04f4 000050E3 		cmp	r0, #0	@ tmp181,
 1140              	@ armwave.c:194:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 194:armwave.c     **** 
 1141              		.loc 1 194 38 view .LVU305
 1142 04f8 580085E5 		str	r0, [r5, #88]	@ tmp181, g_armwave_state.xcoord_to_xpixel
 196:armwave.c     **** 
 1143              		.loc 1 196 5 is_stmt 1 view .LVU306
 1144 04fc 1500000A 		beq	.L73		@,
 1145              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1146              		.loc 1 199 54 is_stmt 0 view .LVU307
 1147 0500 237ADFED 		vldr.32	s15, .L74	@ tmp186,
 1148 0504 020040E2 		sub	r0, r0, #2	@ ivtmp.69, tmp181,
 1149 0508 887A87EE 		vdiv.f32	s14, s15, s16	@ _15, tmp186, points_per_pixel
 1150              	.L64:
 1151              	.LVL58:
 199:armwave.c     **** 
 1152              		.loc 1 199 9 is_stmt 1 discriminator 3 view .LVU308
 1153              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1154              		.loc 1 199 74 is_stmt 0 discriminator 3 view .LVU309
 1155 050c 904A07EE 		vmov	s15, r4	@ int	@ xx, xx
 1156              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1157              		.loc 1 198 32 discriminator 3 view .LVU310
 1158 0510 014084E2 		add	r4, r4, #1	@ xx, xx,
 1159              	.LVL59:
 1160              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1161              		.loc 1 198 5 discriminator 3 view .LVU311
 1162 0514 040056E1 		cmp	r6, r4	@ length, xx
 1163              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1164              		.loc 1 199 74 discriminator 3 view .LVU312
 1165 0518 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp187, xx
 1166 051c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp188, tmp187, _15
 1167              	@ armwave.c:199:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 199:armwave.c     **** 
 1168              		.loc 1 199 46 discriminator 3 view .LVU313
 1169 0520 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp189, tmp188
 1170 0524 903A17EE 		vmov	r3, s15	@ int	@ tmp189, tmp189
 1171 0528 B230E0E1 		strh	r3, [r0, #2]!	@ movhi	@ tmp189, MEM[base: _64, offset: 0B]
 1172              	@ armwave.c:198:     for(xx = 0; xx < length; xx++) {
 198:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1173              		.loc 1 198 5 discriminator 3 view .LVU314
 1174 052c F6FFFF1A 		bne	.L64		@,
 204:armwave.c     **** }
 1175              		.loc 1 204 5 is_stmt 1 view .LVU315
 1176              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1177              		.loc 1 204 34 is_stmt 0 view .LVU316
 1178 0530 0701A0E1 		lsl	r0, r7, #2	@, _3,
 1179 0534 FEFFFFEB 		bl	malloc		@
 1180              	.LVL60:
 1181              	@ armwave.c:205: }
 1182              		.loc 1 205 1 view .LVU317
 1183 0538 028BBDEC 		vldm	sp!, {d8}	@
 1184              		.cfi_remember_state
 1185              		.cfi_restore 80
 1186              		.cfi_restore 81
 1187              		.cfi_def_cfa_offset 32
 1188              	.LVL61:
 1189              	@ armwave.c:204:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 204:armwave.c     **** }
 1190              		.loc 1 204 32 view .LVU318
 1191 053c 3C0085E5 		str	r0, [r5, #60]	@, g_armwave_state.out_pixbuf
 1192              	@ armwave.c:205: }
 1193              		.loc 1 205 1 view .LVU319
 1194 0540 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 1195              	.LVL62:
 1196              	.L70:
 1197              		.cfi_restore_state
 158:armwave.c     **** 
 1198              		.loc 1 158 5 is_stmt 1 discriminator 1 view .LVU320
 1199 0544 54309FE5 		ldr	r3, .L74+12	@,
 1200              	.LVL63:
 158:armwave.c     **** 
 1201              		.loc 1 158 5 is_stmt 0 discriminator 1 view .LVU321
 1202 0548 9E20A0E3 		mov	r2, #158	@,
 1203 054c 50109FE5 		ldr	r1, .L74+16	@,
 1204 0550 50009FE5 		ldr	r0, .L74+20	@,
 1205              	.LVL64:
 158:armwave.c     **** 
 1206              		.loc 1 158 5 discriminator 1 view .LVU322
 1207 0554 FEFFFFEB 		bl	__assert_fail		@
 1208              	.LVL65:
 1209              	.L73:
 196:armwave.c     **** 
 1210              		.loc 1 196 5 is_stmt 1 discriminator 1 view .LVU323
 1211 0558 40309FE5 		ldr	r3, .L74+12	@,
 1212 055c C420A0E3 		mov	r2, #196	@,
 1213 0560 3C109FE5 		ldr	r1, .L74+16	@,
 1214 0564 40009FE5 		ldr	r0, .L74+24	@,
 1215 0568 FEFFFFEB 		bl	__assert_fail		@
 1216              	.LVL66:
 1217              	.L72:
 188:armwave.c     **** 
 1218              		.loc 1 188 5 discriminator 1 view .LVU324
 1219 056c 2C309FE5 		ldr	r3, .L74+12	@,
 1220 0570 BC20A0E3 		mov	r2, #188	@,
 1221 0574 28109FE5 		ldr	r1, .L74+16	@,
 1222 0578 30009FE5 		ldr	r0, .L74+28	@,
 1223 057c FEFFFFEB 		bl	__assert_fail		@
 1224              	.LVL67:
 1225              	.L71:
 164:armwave.c     **** 
 1226              		.loc 1 164 5 discriminator 1 view .LVU325
 1227 0580 18309FE5 		ldr	r3, .L74+12	@,
 1228              	.LVL68:
 164:armwave.c     **** 
 1229              		.loc 1 164 5 is_stmt 0 discriminator 1 view .LVU326
 1230 0584 A420A0E3 		mov	r2, #164	@,
 1231 0588 14109FE5 		ldr	r1, .L74+16	@,
 1232 058c 20009FE5 		ldr	r0, .L74+32	@,
 1233              	.LVL69:
 164:armwave.c     **** 
 1234              		.loc 1 164 5 discriminator 1 view .LVU327
 1235 0590 FEFFFFEB 		bl	__assert_fail		@
 1236              	.LVL70:
 1237              	.L75:
 164:armwave.c     **** 
 1238              		.loc 1 164 5 discriminator 1 view .LVU328
 1239              		.align	2
 1240              	.L74:
 1241 0594 0000803F 		.word	1065353216
 1242 0598 00000000 		.word	g_armwave_state
 1243 059c F609F406 		.word	116656630
 1244 05a0 00000000 		.word	.LANCHOR0
 1245 05a4 00000000 		.word	.LC0
 1246 05a8 5C000000 		.word	.LC3
 1247 05ac 30000000 		.word	.LC2
 1248 05b0 0C000000 		.word	.LC1
 1249 05b4 74000000 		.word	.LC4
 1250              		.cfi_endproc
 1251              	.LFE61:
 1253              		.align	2
 1254              		.global	armwave_clear_buffer
 1255              		.syntax unified
 1256              		.arm
 1257              		.fpu vfp
 1259              	armwave_clear_buffer:
 1260              	.LVL71:
 1261              	.LFB62:
 206:armwave.c     **** 
 207:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 208:armwave.c     **** {
 1262              		.loc 1 208 1 is_stmt 1 view -0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 0
 1265              		@ frame_needed = 0, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 209:armwave.c     ****     // Flags ignored, only one buffer cleared
 210:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1267              		.loc 1 210 5 view .LVU330
 1268 05b8 0C309FE5 		ldr	r3, .L77	@ tmp113,
 1269 05bc 0010A0E3 		mov	r1, #0	@,
 1270 05c0 302093E5 		ldr	r2, [r3, #48]	@, g_armwave_state.size
 1271 05c4 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1272              	.LVL72:
 1273              		.loc 1 210 5 is_stmt 0 view .LVU331
 1274 05c8 FEFFFFEA 		b	memset		@
 1275              	.LVL73:
 1276              	.L78:
 1277              		.align	2
 1278              	.L77:
 1279 05cc 00000000 		.word	g_armwave_state
 1280              		.cfi_endproc
 1281              	.LFE62:
 1283              		.align	2
 1284              		.global	armwave_fill_pixbuf2
 1285              		.syntax unified
 1286              		.arm
 1287              		.fpu vfp
 1289              	armwave_fill_pixbuf2:
 1290              	.LVL74:
 1291              	.LFB63:
 211:armwave.c     **** }
 212:armwave.c     **** 
 213:armwave.c     **** /*
 214:armwave.c     **** void armwave_fill_pixbuf(uint32_t *out_buffer)
 215:armwave.c     **** {
 216:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 217:armwave.c     ****     int rr, gg, bb;
 218:armwave.c     ****     uint8_t r, g, b;
 219:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 220:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 221:armwave.c     **** 
 222:armwave.c     ****     assert(out_buffer != NULL);
 223:armwave.c     ****     //printf("out_buffer=0x%08x\n", out_buffer);
 224:armwave.c     ****     //printf("out_buffer_size=%d\n", sizeof(uint32_t) * g_armwave_state.size);
 225:armwave.c     **** 
 226:armwave.c     **** #if 0
 227:armwave.c     ****     // Pixbuf tests
 228:armwave.c     ****     for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 229:armwave.c     ****         for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 230:armwave.c     ****             //printf("xx=%d, yy=%d\n", xx, yy);
 231:armwave.c     ****             *(out_buffer + ((xx + (yy * g_armwave_state.target_width)) / 4)) = (yy / 4) | (((yy / 4
 232:armwave.c     ****         }
 233:armwave.c     ****     }
 234:armwave.c     **** #endif
 235:armwave.c     **** 
 236:armwave.c     **** #if 1
 237:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 238:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 239:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 240:armwave.c     ****             //printf("xx,yy=%d,%d, row_ptr=0x%08x\n", xx, yy, row_ptr);
 241:armwave.c     ****             value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 242:armwave.c     ****             //value = xx / 8; // *(row_ptr + xx);
 243:armwave.c     ****             //printf("xx,yy=%d,%d, value=%d\n", xx, yy, value);
 244:armwave.c     **** 
 245:armwave.c     **** #if 0
 246:armwave.c     ****             //rr = gamma_table[(uint8_t)(g_armwave_state.ch1_color.r * value)];  // We could also d
 247:armwave.c     ****             //gg = gamma_table[(uint8_t)(g_armwave_state.ch1_color.g * value)];
 248:armwave.c     ****             //bb = gamma_table[(uint8_t)(g_armwave_state.ch1_color.b * value)];
 249:armwave.c     **** 
 250:armwave.c     ****             //rr = CLAMP(rr * overall_scale, 0, 255);
 251:armwave.c     ****             //gg = CLAMP(gg * overall_scale, 0, 255);
 252:armwave.c     ****             //bb = CLAMP(bb * overall_scale, 0, 255);
 253:armwave.c     **** #endif
 254:armwave.c     **** 
 255:armwave.c     ****             if(value != 0) {
 256:armwave.c     **** 	            rr = (g_armwave_state.ch1_color.r * value) >> 8;
 257:armwave.c     **** 	            gg = (g_armwave_state.ch1_color.g * value) >> 8;
 258:armwave.c     **** 	            bb = (g_armwave_state.ch1_color.b * value) >> 8;
 259:armwave.c     **** 
 260:armwave.c     **** 	            r = MIN(rr, 255);
 261:armwave.c     **** 	            g = MIN(gg, 255);
 262:armwave.c     **** 	            b = MIN(bb, 255);
 263:armwave.c     **** 
 264:armwave.c     **** 	            // ensure 100% alpha channel, if it is used
 265:armwave.c     **** 	            word = 0xff000000 | (b << 16) | (g << 8) | r;
 266:armwave.c     **** 
 267:armwave.c     **** 	            //printf("xx,yy=%4d,%4d, value=%3d, word=0x%08x, rr=%3d, gg=%3d, bb=%3d\n", xx, yy, va
 268:armwave.c     **** 
 269:armwave.c     **** 	            *out_buffer++ = word;
 270:armwave.c     **** 	        }
 271:armwave.c     ****         }
 272:armwave.c     ****     }
 273:armwave.c     **** #endif
 274:armwave.c     **** }
 275:armwave.c     **** */
 276:armwave.c     **** 
 277:armwave.c     **** void armwave_fill_pixbuf2(uint32_t *out_buffer)
 278:armwave.c     **** {
 1292              		.loc 1 278 1 is_stmt 1 view -0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 0
 1295              		@ frame_needed = 0, uses_anonymous_args = 0
 279:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1296              		.loc 1 279 5 view .LVU333
 280:armwave.c     ****     int rr, gg, bb;
 1297              		.loc 1 280 5 view .LVU334
 281:armwave.c     ****     uint8_t r, g, b;
 1298              		.loc 1 281 5 view .LVU335
 282:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1299              		.loc 1 282 5 view .LVU336
 1300              	@ armwave.c:282:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1301              		.loc 1 282 14 is_stmt 0 view .LVU337
 1302 05d0 B8309FE5 		ldr	r3, .L92	@ tmp153,
 1303              	@ armwave.c:286:     assert(out_buffer != NULL);
 283:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 284:armwave.c     ****     uint32_t npix, n;
 285:armwave.c     **** 
 286:armwave.c     ****     assert(out_buffer != NULL);
 1304              		.loc 1 286 5 view .LVU338
 1305 05d4 000050E3 		cmp	r0, #0	@ out_buffer
 1306              	@ armwave.c:278: {
 278:armwave.c     ****     uint32_t xx, yy, addr, value, word;
 1307              		.loc 1 278 1 view .LVU339
 1308 05d8 F0412DE9 		push	{r4, r5, r6, r7, r8, lr}	@
 1309              		.cfi_def_cfa_offset 24
 1310              		.cfi_offset 4, -24
 1311              		.cfi_offset 5, -20
 1312              		.cfi_offset 6, -16
 1313              		.cfi_offset 7, -12
 1314              		.cfi_offset 8, -8
 1315              		.cfi_offset 14, -4
 1316              	@ armwave.c:282:     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 282:armwave.c     ****     uint8_t *base_ptr = g_armwave_state.ch1_buffer;
 1317              		.loc 1 282 14 view .LVU340
 1318 05dc 04C093E5 		ldr	ip, [r3, #4]	@ base_ptr, g_armwave_state.ch1_buffer
 1319              	.LVL75:
 283:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 1320              		.loc 1 283 5 is_stmt 1 view .LVU341
 284:armwave.c     **** 
 1321              		.loc 1 284 5 view .LVU342
 1322              		.loc 1 286 5 view .LVU343
 1323 05e0 2500000A 		beq	.L90		@,
 287:armwave.c     **** 
 288:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 289:armwave.c     **** 
 290:armwave.c     ****     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1324              		.loc 1 290 5 view .LVU344
 1325              	@ armwave.c:290:     npix = g_armwave_state.target_width * g_armwave_state.target_height;
 1326              		.loc 1 290 10 is_stmt 0 view .LVU345
 1327 05e4 342093E5 		ldr	r2, [r3, #52]	@ g_armwave_state.target_width, g_armwave_state.target_width
 1328 05e8 38E093E5 		ldr	lr, [r3, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1329 05ec 9E020EE0 		mul	lr, lr, r2	@ npix, g_armwave_state.target_height, g_armwave_state.target_width
 1330              	.LVL76:
 291:armwave.c     **** 
 292:armwave.c     ****     for(n = 0; n < npix; n++) {
 1331              		.loc 1 292 5 is_stmt 1 view .LVU346
 1332              		.loc 1 292 5 is_stmt 0 view .LVU347
 1333 05f0 00005EE3 		cmp	lr, #0	@ npix,
 1334 05f4 F081BD08 		popeq	{r4, r5, r6, r7, r8, pc}	@
 1335              	@ armwave.c:297:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 293:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 294:armwave.c     ****         value = *base_ptr++;
 295:armwave.c     **** 
 296:armwave.c     ****         if(value != 0) {
 297:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1336              		.loc 1 297 44 view .LVU348
 1337 05f8 F064D3E1 		ldrsh	r6, [r3, #64]	@ _4, g_armwave_state.ch1_color.r
 1338              	@ armwave.c:298:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 298:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1339              		.loc 1 298 44 view .LVU349
 1340 05fc F254D3E1 		ldrsh	r5, [r3, #66]	@ _8, g_armwave_state.ch1_color.g
 1341              	@ armwave.c:299:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 299:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1342              		.loc 1 299 44 view .LVU350
 1343 0600 F444D3E1 		ldrsh	r4, [r3, #68]	@ _12, g_armwave_state.ch1_color.b
 1344 0604 0EE08CE0 		add	lr, ip, lr	@ _53, base_ptr, npix
 1345              	.LVL77:
 1346              	.L84:
 294:armwave.c     **** 
 1347              		.loc 1 294 9 is_stmt 1 view .LVU351
 1348              	@ armwave.c:294:         value = *base_ptr++;
 294:armwave.c     **** 
 1349              		.loc 1 294 17 is_stmt 0 view .LVU352
 1350 0608 0110DCE4 		ldrb	r1, [ip], #1	@ zero_extendqisi2	@ _64, MEM[base: base_ptr_65, offset: 4294967295B]
 1351              	.LVL78:
 296:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1352              		.loc 1 296 9 is_stmt 1 view .LVU353
 1353              	@ armwave.c:296:         if(value != 0) {
 296:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1354              		.loc 1 296 11 is_stmt 0 view .LVU354
 1355 060c 000051E3 		cmp	r1, #0	@ _64,
 1356 0610 1500000A 		beq	.L82		@,
 1357              	.LVL79:
 1358              	.L91:
 297:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1359              		.loc 1 297 13 is_stmt 1 view .LVU355
 298:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1360              		.loc 1 298 13 view .LVU356
 1361              		.loc 1 299 13 view .LVU357
 300:armwave.c     **** 
 301:armwave.c     ****             r = MIN(rr, 255);
 1362              		.loc 1 301 13 view .LVU358
 302:armwave.c     ****             g = MIN(gg, 255);
 1363              		.loc 1 302 13 view .LVU359
 303:armwave.c     ****             b = MIN(bb, 255);
 1364              		.loc 1 303 13 view .LVU360
 304:armwave.c     **** 
 305:armwave.c     ****             // ensure 100% alpha channel, if it is used
 306:armwave.c     ****             word = 0xff000000 | (b << 16) | (g << 8) | r;
 1365              		.loc 1 306 13 view .LVU361
 307:armwave.c     ****         } else {
 308:armwave.c     ****         	word = 0x00000000;
 309:armwave.c     ****         }
 310:armwave.c     **** 
 311:armwave.c     ****         *out_buffer++ = word;
 1366              		.loc 1 311 9 view .LVU362
 1367              	@ armwave.c:298:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 298:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1368              		.loc 1 298 47 is_stmt 0 view .LVU363
 1369 0614 810563E1 		smulbb	r3, r1, r5	@ tmp167, _64, _8
 1370              	@ armwave.c:299:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 299:armwave.c     **** 
 1371              		.loc 1 299 47 view .LVU364
 1372 0618 810462E1 		smulbb	r2, r1, r4	@ tmp170, _64, _12
 1373              	@ armwave.c:297:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 297:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1374              		.loc 1 297 47 view .LVU365
 1375 061c 810661E1 		smulbb	r1, r1, r6	@ tmp174, _64, _4
 1376              	.LVL80:
 1377              	@ armwave.c:298:             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 298:armwave.c     ****             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 1378              		.loc 1 298 56 view .LVU366
 1379 0620 2374A0E1 		lsr	r7, r3, #8	@ gg, tmp167,
 1380              	@ armwave.c:302:             g = MIN(gg, 255);
 302:armwave.c     ****             b = MIN(bb, 255);
 1381              		.loc 1 302 17 view .LVU367
 1382 0624 FF0057E3 		cmp	r7, #255	@ gg,
 1383              	@ armwave.c:299:             bb = (g_armwave_state.ch1_color.b * value) >> 8;
 299:armwave.c     **** 
 1384              		.loc 1 299 56 view .LVU368
 1385 0628 2234A0E1 		lsr	r3, r2, #8	@ bb, tmp170,
 1386              	@ armwave.c:302:             g = MIN(gg, 255);
 302:armwave.c     ****             b = MIN(bb, 255);
 1387              		.loc 1 302 17 view .LVU369
 1388 062c FF70A0A3 		movge	r7, #255	@ gg,
 1389              	@ armwave.c:303:             b = MIN(bb, 255);
 303:armwave.c     **** 
 1390              		.loc 1 303 17 view .LVU370
 1391 0630 FF0053E3 		cmp	r3, #255	@ bb,
 1392 0634 FF30A0A3 		movge	r3, #255	@ bb,
 1393              	@ armwave.c:297:             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 297:armwave.c     ****             gg = (g_armwave_state.ch1_color.g * value) >> 8;
 1394              		.loc 1 297 56 view .LVU371
 1395 0638 2114A0E1 		lsr	r1, r1, #8	@ rr, tmp174,
 1396              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     ****         } else {
 1397              		.loc 1 306 36 view .LVU372
 1398 063c 0338A0E1 		lsl	r3, r3, #16	@ tmp171, bb,
 1399              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     ****         } else {
 1400              		.loc 1 306 43 view .LVU373
 1401 0640 073483E1 		orr	r3, r3, r7, lsl #8	@ tmp172, tmp171, gg,
 1402              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     ****         } else {
 1403              		.loc 1 306 54 view .LVU374
 1404 0644 FF0051E3 		cmp	r1, #255	@ rr,
 1405 0648 013083D1 		orrle	r3, r3, r1	@,, tmp175, tmp172, rr
 1406 064c FF3083C3 		orrgt	r3, r3, #255	@,, tmp175, tmp172,
 1407              	@ armwave.c:292:     for(n = 0; n < npix; n++) {
 292:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1408              		.loc 1 292 5 view .LVU375
 1409 0650 0C005EE1 		cmp	lr, ip	@ _53, base_ptr
 1410              	@ armwave.c:306:             word = 0xff000000 | (b << 16) | (g << 8) | r;
 306:armwave.c     ****         } else {
 1411              		.loc 1 306 18 view .LVU376
 1412 0654 FF3483E3 		orr	r3, r3, #-16777216	@ word, tmp175,
 1413              	@ armwave.c:311:         *out_buffer++ = word;
 1414              		.loc 1 311 23 view .LVU377
 1415 0658 043080E4 		str	r3, [r0], #4	@ word, MEM[base: out_buffer_77, offset: 4294967292B]
 1416              	.LVL81:
 1417              	@ armwave.c:292:     for(n = 0; n < npix; n++) {
 292:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1418              		.loc 1 292 5 view .LVU378
 1419 065c F081BD08 		popeq	{r4, r5, r6, r7, r8, pc}	@
 294:armwave.c     **** 
 1420              		.loc 1 294 9 is_stmt 1 view .LVU379
 1421              	@ armwave.c:294:         value = *base_ptr++;
 294:armwave.c     **** 
 1422              		.loc 1 294 17 is_stmt 0 view .LVU380
 1423 0660 0110DCE4 		ldrb	r1, [ip], #1	@ zero_extendqisi2	@ _64, MEM[base: base_ptr_65, offset: 4294967295B]
 1424              	.LVL82:
 296:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1425              		.loc 1 296 9 is_stmt 1 view .LVU381
 1426              	@ armwave.c:296:         if(value != 0) {
 296:armwave.c     ****             rr = (g_armwave_state.ch1_color.r * value) >> 8;
 1427              		.loc 1 296 11 is_stmt 0 view .LVU382
 1428 0664 000051E3 		cmp	r1, #0	@ _64,
 1429 0668 E9FFFF1A 		bne	.L91		@,
 1430              	.LVL83:
 1431              	.L82:
 1432              		.loc 1 311 9 is_stmt 1 view .LVU383
 1433              	@ armwave.c:292:     for(n = 0; n < npix; n++) {
 292:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1434              		.loc 1 292 5 is_stmt 0 view .LVU384
 1435 066c 0C005EE1 		cmp	lr, ip	@ _53, base_ptr
 1436              	@ armwave.c:311:         *out_buffer++ = word;
 1437              		.loc 1 311 23 view .LVU385
 1438 0670 041080E4 		str	r1, [r0], #4	@ _64, MEM[base: out_buffer_75, offset: 4294967292B]
 1439              	.LVL84:
 1440              	@ armwave.c:292:     for(n = 0; n < npix; n++) {
 292:armwave.c     ****         //value = *(base_ptr + xx + (yy * g_armwave_state.target_width));
 1441              		.loc 1 292 5 view .LVU386
 1442 0674 E3FFFF1A 		bne	.L84		@,
 1443 0678 F081BDE8 		pop	{r4, r5, r6, r7, r8, pc}	@
 1444              	.LVL85:
 1445              	.L90:
 1446              	.LBB6:
 1447              	.LBI6:
 277:armwave.c     **** {
 1448              		.loc 1 277 6 is_stmt 1 view .LVU387
 1449              	.LBB7:
 286:armwave.c     **** 
 1450              		.loc 1 286 5 view .LVU388
 1451 067c 10309FE5 		ldr	r3, .L92+4	@,
 1452 0680 10209FE5 		ldr	r2, .L92+8	@,
 1453 0684 10109FE5 		ldr	r1, .L92+12	@,
 1454 0688 10009FE5 		ldr	r0, .L92+16	@,
 1455              	.LVL86:
 286:armwave.c     **** 
 1456              		.loc 1 286 5 is_stmt 0 view .LVU389
 1457 068c FEFFFFEB 		bl	__assert_fail		@
 1458              	.LVL87:
 1459              	.L93:
 286:armwave.c     **** 
 1460              		.loc 1 286 5 view .LVU390
 1461              		.align	2
 1462              	.L92:
 1463 0690 00000000 		.word	g_armwave_state
 1464 0694 18000000 		.word	.LANCHOR0+24
 1465 0698 1E010000 		.word	286
 1466 069c 00000000 		.word	.LC0
 1467 06a0 90000000 		.word	.LC5
 1468              	.LBE7:
 1469              	.LBE6:
 1470              		.cfi_endproc
 1471              	.LFE63:
 1473              		.align	2
 1474              		.global	armwave_dump_ppm_debug
 1475              		.syntax unified
 1476              		.arm
 1477              		.fpu vfp
 1479              	armwave_dump_ppm_debug:
 1480              	.LVL88:
 1481              	.LFB64:
 312:armwave.c     ****     }
 313:armwave.c     **** }
 314:armwave.c     **** 
 315:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 316:armwave.c     **** {
 1482              		.loc 1 316 1 is_stmt 1 view -0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 0
 1485              		@ frame_needed = 0, uses_anonymous_args = 0
 317:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1486              		.loc 1 317 5 view .LVU392
 1487              	@ armwave.c:316: {
 316:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1488              		.loc 1 316 1 is_stmt 0 view .LVU393
 1489 06a4 0130A0E1 		mov	r3, r1	@ fn, fn
 1490 06a8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1491              		.cfi_def_cfa_offset 28
 1492              		.cfi_offset 4, -28
 1493              		.cfi_offset 5, -24
 1494              		.cfi_offset 6, -20
 1495              		.cfi_offset 7, -16
 1496              		.cfi_offset 8, -12
 1497              		.cfi_offset 9, -8
 1498              		.cfi_offset 14, -4
 1499 06ac 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1500 06b0 0CD04DE2 		sub	sp, sp, #12	@,,
 1501              		.cfi_def_cfa_offset 40
 1502              	@ armwave.c:317:     FILE *fp = fopen(fn, "wb");
 1503              		.loc 1 317 16 view .LVU394
 1504 06b4 D8109FE5 		ldr	r1, .L106	@,
 1505              	.LVL89:
 1506              		.loc 1 317 16 view .LVU395
 1507 06b8 0300A0E1 		mov	r0, r3	@, fn
 1508              	.LVL90:
 1509              		.loc 1 317 16 view .LVU396
 1510 06bc FEFFFFEB 		bl	fopen64		@
 1511              	.LVL91:
 1512              	@ armwave.c:324:     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_w
 318:armwave.c     ****     uint32_t data;
 319:armwave.c     ****     int xx, yy;
 320:armwave.c     **** 
 321:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 322:armwave.c     **** 
 323:armwave.c     ****     fputs("P3\n", fp);
 324:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1513              		.loc 1 324 5 view .LVU397
 1514 06c0 D0609FE5 		ldr	r6, .L106+4	@ tmp154,
 1515              	@ armwave.c:323:     fputs("P3\n", fp);
 323:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1516              		.loc 1 323 5 view .LVU398
 1517 06c4 0320A0E3 		mov	r2, #3	@,
 1518 06c8 0110A0E3 		mov	r1, #1	@,
 1519              	@ armwave.c:317:     FILE *fp = fopen(fn, "wb");
 317:armwave.c     ****     uint32_t data;
 1520              		.loc 1 317 16 view .LVU399
 1521 06cc 0070A0E1 		mov	r7, r0	@ fp,
 1522              	.LVL92:
 318:armwave.c     ****     uint32_t data;
 1523              		.loc 1 318 5 is_stmt 1 view .LVU400
 319:armwave.c     **** 
 1524              		.loc 1 319 5 view .LVU401
 323:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1525              		.loc 1 323 5 view .LVU402
 1526 06d0 0030A0E1 		mov	r3, r0	@, fp
 1527 06d4 C0009FE5 		ldr	r0, .L106+8	@,
 1528              	.LVL93:
 323:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_height, g_armwave_state.target_width);
 1529              		.loc 1 323 5 is_stmt 0 view .LVU403
 1530 06d8 FEFFFFEB 		bl	fwrite		@
 1531              	.LVL94:
 1532              		.loc 1 324 5 is_stmt 1 view .LVU404
 1533 06dc 343096E5 		ldr	r3, [r6, #52]	@, g_armwave_state.target_width
 1534 06e0 382096E5 		ldr	r2, [r6, #56]	@, g_armwave_state.target_height
 1535 06e4 B4109FE5 		ldr	r1, .L106+12	@,
 1536 06e8 0700A0E1 		mov	r0, r7	@, fp
 1537 06ec FEFFFFEB 		bl	fprintf		@
 1538              	.LVL95:
 325:armwave.c     ****     fputs("255\n", fp);
 1539              		.loc 1 325 5 view .LVU405
 1540 06f0 0420A0E3 		mov	r2, #4	@,
 1541 06f4 0730A0E1 		mov	r3, r7	@, fp
 1542 06f8 0110A0E3 		mov	r1, #1	@,
 1543 06fc A0009FE5 		ldr	r0, .L106+16	@,
 1544 0700 FEFFFFEB 		bl	fwrite		@
 1545              	.LVL96:
 326:armwave.c     **** 
 327:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1546              		.loc 1 327 5 view .LVU406
 1547              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1548              		.loc 1 327 37 is_stmt 0 view .LVU407
 1549 0704 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1550              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 1551              		.loc 1 327 5 view .LVU408
 1552 0708 000052E3 		cmp	r2, #0	@ prephitmp_57,
 1553 070c 1800000A 		beq	.L95		@,
 1554 0710 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1555              	@ armwave.c:332:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 329:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 330:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 331:armwave.c     **** 
 332:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 1556              		.loc 1 332 13 view .LVU409
 1557 0714 8C909FE5 		ldr	r9, .L106+20	@ tmp156,
 1558              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 327:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1559              		.loc 1 327 12 view .LVU410
 1560 0718 0050A0E3 		mov	r5, #0	@ yy,
 1561              	.LVL97:
 1562              	.L96:
 1563              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1564              		.loc 1 328 9 view .LVU411
 1565 071c 000053E3 		cmp	r3, #0	@ _12,
 1566              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1567              		.loc 1 328 16 view .LVU412
 1568 0720 0040A013 		movne	r4, #0	@ xx,
 1569              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1570              		.loc 1 328 9 view .LVU413
 1571 0724 1600000A 		beq	.L105		@,
 1572              	.LVL98:
 1573              	.L97:
 329:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1574              		.loc 1 329 13 is_stmt 1 discriminator 3 view .LVU414
 1575              	@ armwave.c:329:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 329:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1576              		.loc 1 329 29 is_stmt 0 discriminator 3 view .LVU415
 1577 0728 954323E0 		mla	r3, r5, r3, r4	@ tmp145, yy, _12, xx
 1578              	@ armwave.c:332:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1579              		.loc 1 332 13 discriminator 3 view .LVU416
 1580 072c 0910A0E1 		mov	r1, r9	@, tmp156
 1581 0730 0700A0E1 		mov	r0, r7	@, fp
 1582              	@ armwave.c:329:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 329:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 1583              		.loc 1 329 18 discriminator 3 view .LVU417
 1584 0734 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_6
 1585              	.LVL99:
 1586              		.loc 1 332 13 is_stmt 1 discriminator 3 view .LVU418
 1587              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1588              		.loc 1 328 58 is_stmt 0 discriminator 3 view .LVU419
 1589 0738 014084E2 		add	r4, r4, #1	@ xx, xx,
 1590              	.LVL100:
 1591              	@ armwave.c:332:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1592              		.loc 1 332 81 discriminator 3 view .LVU420
 1593 073c 22C8A0E1 		lsr	ip, r2, #16	@ tmp150, data,
 1594              	@ armwave.c:332:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1595              		.loc 1 332 61 discriminator 3 view .LVU421
 1596 0740 2234A0E1 		lsr	r3, r2, #8	@ tmp146, data,
 1597              	@ armwave.c:332:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 1598              		.loc 1 332 13 discriminator 3 view .LVU422
 1599 0744 7CC0EFE6 		uxtb	ip, ip	@ tmp151, tmp150
 1600 0748 7330EFE6 		uxtb	r3, r3	@, tmp146
 1601 074c 00C08DE5 		str	ip, [sp]	@ tmp151,
 1602 0750 7220EFE6 		uxtb	r2, r2	@, data
 1603              	.LVL101:
 1604              		.loc 1 332 13 discriminator 3 view .LVU423
 1605 0754 FEFFFFEB 		bl	fprintf		@
 1606              	.LVL102:
 1607              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1608              		.loc 1 328 41 discriminator 3 view .LVU424
 1609 0758 343096E5 		ldr	r3, [r6, #52]	@ _12, g_armwave_state.target_width
 1610              	@ armwave.c:328:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 328:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1611              		.loc 1 328 9 discriminator 3 view .LVU425
 1612 075c 040053E1 		cmp	r3, r4	@ _12, xx
 1613 0760 F0FFFF8A 		bhi	.L97		@,
 1614 0764 382096E5 		ldr	r2, [r6, #56]	@ prephitmp_57, g_armwave_state.target_height
 1615              	.LVL103:
 1616              	.L98:
 1617              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 327:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1618              		.loc 1 327 55 discriminator 2 view .LVU426
 1619 0768 015085E2 		add	r5, r5, #1	@ yy, yy,
 1620              	.LVL104:
 1621              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 327:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1622              		.loc 1 327 5 discriminator 2 view .LVU427
 1623 076c 020055E1 		cmp	r5, r2	@ yy, prephitmp_57
 1624 0770 E9FFFF3A 		bcc	.L96		@,
 1625              	.LVL105:
 1626              	.L95:
 333:armwave.c     ****         }
 334:armwave.c     ****     }
 335:armwave.c     **** 
 336:armwave.c     ****     fclose(fp);
 1627              		.loc 1 336 5 is_stmt 1 view .LVU428
 1628 0774 0700A0E1 		mov	r0, r7	@, fp
 1629              	@ armwave.c:337: }
 337:armwave.c     **** }
 1630              		.loc 1 337 1 is_stmt 0 view .LVU429
 1631 0778 0CD08DE2 		add	sp, sp, #12	@,,
 1632              		.cfi_remember_state
 1633              		.cfi_def_cfa_offset 28
 1634              		@ sp needed	@
 1635 077c F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1636              		.cfi_restore 14
 1637              		.cfi_restore 9
 1638              		.cfi_restore 8
 1639              		.cfi_restore 7
 1640              		.cfi_restore 6
 1641              		.cfi_restore 5
 1642              		.cfi_restore 4
 1643              		.cfi_def_cfa_offset 0
 1644              	.LVL106:
 1645              	@ armwave.c:336:     fclose(fp);
 336:armwave.c     **** }
 1646              		.loc 1 336 5 view .LVU430
 1647 0780 FEFFFFEA 		b	fclose		@
 1648              	.LVL107:
 1649              	.L105:
 1650              		.cfi_restore_state
 1651              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 327:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1652              		.loc 1 327 55 view .LVU431
 1653 0784 015085E2 		add	r5, r5, #1	@ yy, yy,
 1654              	.LVL108:
 1655              	@ armwave.c:327:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 327:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 1656              		.loc 1 327 5 view .LVU432
 1657 0788 050052E1 		cmp	r2, r5	@ prephitmp_57, yy
 1658 078c F5FFFF8A 		bhi	.L98		@,
 1659 0790 F7FFFFEA 		b	.L95		@
 1660              	.L107:
 1661              		.align	2
 1662              	.L106:
 1663 0794 A4000000 		.word	.LC6
 1664 0798 00000000 		.word	g_armwave_state
 1665 079c A8000000 		.word	.LC7
 1666 07a0 AC000000 		.word	.LC8
 1667 07a4 B4000000 		.word	.LC9
 1668 07a8 BC000000 		.word	.LC10
 1669              		.cfi_endproc
 1670              	.LFE64:
 1672              		.align	2
 1673              		.global	armwave_test_init
 1674              		.syntax unified
 1675              		.arm
 1676              		.fpu vfp
 1678              	armwave_test_init:
 1679              	.LVL109:
 1680              	.LFB65:
 338:armwave.c     **** 
 339:armwave.c     **** void armwave_test_init(float mod)
 340:armwave.c     **** {
 1681              		.loc 1 340 1 is_stmt 1 view -0
 1682              		.cfi_startproc
 1683              		@ args = 0, pretend = 0, frame = 0
 1684              		@ frame_needed = 0, uses_anonymous_args = 0
 341:armwave.c     **** 	mod_depth = mod;
 1685              		.loc 1 341 2 view .LVU434
 1686              	@ armwave.c:341: 	mod_depth = mod;
 1687              		.loc 1 341 12 is_stmt 0 view .LVU435
 1688 07ac 88309FE5 		ldr	r3, .L112+20	@ tmp124,
 1689              	@ armwave.c:340: {
 340:armwave.c     **** 	mod_depth = mod;
 1690              		.loc 1 340 1 view .LVU436
 1691 07b0 70402DE9 		push	{r4, r5, r6, lr}	@
 1692              		.cfi_def_cfa_offset 16
 1693              		.cfi_offset 4, -16
 1694              		.cfi_offset 5, -12
 1695              		.cfi_offset 6, -8
 1696              		.cfi_offset 14, -4
 1697 07b4 068B2DED 		vpush.64	{d8, d9, d10}	@
 1698              		.cfi_def_cfa_offset 40
 1699              		.cfi_offset 80, -40
 1700              		.cfi_offset 81, -36
 1701              		.cfi_offset 82, -32
 1702              		.cfi_offset 83, -28
 1703              		.cfi_offset 84, -24
 1704              		.cfi_offset 85, -20
 1705 07b8 80409FE5 		ldr	r4, .L112+24	@ ivtmp.92,
 1706              	.LBB10:
 1707              	.LBB11:
 1708              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1709              		.loc 1 84 32 view .LVU437
 1710 07bc 1DAA9FED 		vldr.32	s20, .L112+16	@ tmp130,
 1711              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1712              		.loc 1 84 26 view .LVU438
 1713 07c0 189B9FED 		vldr.64	d9, .L112	@ tmp139,
 1714              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1715              		.loc 1 84 49 view .LVU439
 1716 07c4 198B9FED 		vldr.64	d8, .L112+8	@ tmp133,
 1717              	.LBE11:
 1718              	.LBE10:
 1719              	@ armwave.c:341: 	mod_depth = mod;
 1720              		.loc 1 341 12 view .LVU440
 1721 07c8 000A83ED 		vstr.32	s0, [r3]	@ mod, mod_depth
 342:armwave.c     **** 
 343:armwave.c     ****     test_create_waveform();
 1722              		.loc 1 343 5 is_stmt 1 view .LVU441
 1723 07cc FEFFFFEB 		bl	test_create_waveform		@
 1724              	.LVL110:
 344:armwave.c     ****     test_create_gamma();
 1725              		.loc 1 344 5 view .LVU442
 1726              	.LBB13:
 1727              	.LBI10:
  78:armwave.c     **** {
 1728              		.loc 1 78 6 view .LVU443
  78:armwave.c     **** {
 1729              		.loc 1 78 6 is_stmt 0 view .LVU444
 1730 07d0 013084E2 		add	r3, r4, #1	@ _30, ivtmp.92,
 1731 07d4 016C84E2 		add	r6, r4, #256	@ _31, ivtmp.92,
 1732 07d8 015063E2 		rsb	r5, r3, #1	@ tmp138, _30,
 1733              	.LVL111:
 1734              	.L109:
 1735              	.LBB12:
  84:armwave.c     ****     }
 1736              		.loc 1 84 9 is_stmt 1 view .LVU445
 1737              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1738              		.loc 1 84 32 is_stmt 0 view .LVU446
 1739 07dc 043085E0 		add	r3, r5, r4	@ tmp127, tmp138, ivtmp.92
 1740              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1741              		.loc 1 84 26 view .LVU447
 1742 07e0 491BB0EE 		vmov.f64	d1, d9	@, tmp139
 1743              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1744              		.loc 1 84 32 view .LVU448
 1745 07e4 903A07EE 		vmov	s15, r3	@ int	@ tmp127, tmp127
 1746 07e8 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp128, tmp127
 1747 07ec 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp129, tmp128, tmp130
 1748              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1749              		.loc 1 84 26 view .LVU449
 1750 07f0 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp129
 1751 07f4 FEFFFFEB 		bl	pow		@
 1752              	.LVL112:
 1753              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1754              		.loc 1 84 49 view .LVU450
 1755 07f8 080B20EE 		vmul.f64	d0, d0, d8	@ tmp132,, tmp133
 1756              	@ armwave.c:84:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  84:armwave.c     ****     }
 1757              		.loc 1 84 24 view .LVU451
 1758 07fc C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp134, tmp132
 1759 0800 903A17EE 		vmov	r3, s15	@ int	@ tmp134, tmp134
 1760 0804 0130E4E5 		strb	r3, [r4, #1]!	@ tmp134, MEM[base: _29, offset: 0B]
 1761              	.LVL113:
 1762              	@ armwave.c:83:     for(i = 0; i < 256; i++) {
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1763              		.loc 1 83 5 view .LVU452
 1764 0808 060054E1 		cmp	r4, r6	@ ivtmp.92, _31
 1765 080c F2FFFF1A 		bne	.L109		@,
 1766              	.LVL114:
  83:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 1767              		.loc 1 83 5 view .LVU453
 1768              	.LBE12:
 1769              	.LBE13:
 345:armwave.c     **** 
 346:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 1770              		.loc 1 346 5 is_stmt 1 view .LVU454
 1771 0810 FAFDFFEB 		bl	armwave_setup_render.constprop.1		@
 1772              	.LVL115:
 347:armwave.c     **** 
 348:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 1773              		.loc 1 348 5 view .LVU455
 1774              	@ armwave.c:349: }
 349:armwave.c     **** }
 1775              		.loc 1 349 1 is_stmt 0 view .LVU456
 1776 0814 068BBDEC 		vldm	sp!, {d8-d10}	@,
 1777              		.cfi_restore 84
 1778              		.cfi_restore 85
 1779              		.cfi_restore 82
 1780              		.cfi_restore 83
 1781              		.cfi_restore 80
 1782              		.cfi_restore 81
 1783              		.cfi_def_cfa_offset 16
 1784              	@ armwave.c:348:     printf("armwave version: %s\n", ARMWAVE_VER);
 348:armwave.c     **** }
 1785              		.loc 1 348 5 view .LVU457
 1786 0818 24109FE5 		ldr	r1, .L112+28	@,
 1787 081c 24009FE5 		ldr	r0, .L112+32	@,
 1788              	@ armwave.c:349: }
 1789              		.loc 1 349 1 view .LVU458
 1790 0820 7040BDE8 		pop	{r4, r5, r6, lr}	@
 1791              		.cfi_restore 14
 1792              		.cfi_restore 6
 1793              		.cfi_restore 5
 1794              		.cfi_restore 4
 1795              		.cfi_def_cfa_offset 0
 1796              	@ armwave.c:348:     printf("armwave version: %s\n", ARMWAVE_VER);
 348:armwave.c     **** }
 1797              		.loc 1 348 5 view .LVU459
 1798 0824 FEFFFFEA 		b	printf		@
 1799              	.LVL116:
 1800              	.L113:
 1801              		.align	3
 1802              	.L112:
 1803 0828 000000C0 		.word	-1073741824
 1804 082c CCCCEC3F 		.word	1072483532
 1805 0830 00000000 		.word	0
 1806 0834 00E06F40 		.word	1081073664
 1807 0838 00007F43 		.word	1132396544
 1808 083c 00000000 		.word	.LANCHOR1
 1809 0840 FFFFFFFF 		.word	gamma_table-1
 1810 0844 CC000000 		.word	.LC11
 1811 0848 D4000000 		.word	.LC12
 1812              		.cfi_endproc
 1813              	.LFE65:
 1815              		.global	__aeabi_uidiv
 1816              		.align	2
 1817              		.global	armwave_test_generate
 1818              		.syntax unified
 1819              		.arm
 1820              		.fpu vfp
 1822              	armwave_test_generate:
 1823              	.LFB66:
 350:armwave.c     **** 
 351:armwave.c     **** void armwave_test_generate()
 352:armwave.c     **** {
 1824              		.loc 1 352 1 is_stmt 1 view -0
 1825              		.cfi_startproc
 1826              		@ args = 0, pretend = 0, frame = 8
 1827              		@ frame_needed = 0, uses_anonymous_args = 0
 353:armwave.c     **** 	uint32_t yy;
 1828              		.loc 1 353 2 view .LVU461
 354:armwave.c     **** 
 355:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1829              		.loc 1 355 5 view .LVU462
 1830              	@ armwave.c:352: {
 352:armwave.c     **** 	uint32_t yy;
 1831              		.loc 1 352 1 is_stmt 0 view .LVU463
 1832 084c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 1833              		.cfi_def_cfa_offset 36
 1834              		.cfi_offset 4, -36
 1835              		.cfi_offset 5, -32
 1836              		.cfi_offset 6, -28
 1837              		.cfi_offset 7, -24
 1838              		.cfi_offset 8, -20
 1839              		.cfi_offset 9, -16
 1840              		.cfi_offset 10, -12
 1841              		.cfi_offset 11, -8
 1842              		.cfi_offset 14, -4
 1843              	@ armwave.c:355:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1844              		.loc 1 355 5 view .LVU464
 1845 0850 0010A0E3 		mov	r1, #0	@,
 1846 0854 44419FE5 		ldr	r4, .L132	@ tmp269,
 1847              	@ armwave.c:352: {
 352:armwave.c     **** 	uint32_t yy;
 1848              		.loc 1 352 1 view .LVU465
 1849 0858 0CD04DE2 		sub	sp, sp, #12	@,,
 1850              		.cfi_def_cfa_offset 48
 1851              	@ armwave.c:355:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.size);
 1852              		.loc 1 355 5 view .LVU466
 1853 085c 302094E5 		ldr	r2, [r4, #48]	@, g_armwave_state.size
 1854 0860 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 1855 0864 FEFFFFEB 		bl	memset		@
 1856              	.LVL117:
 356:armwave.c     **** 
 357:armwave.c     ****     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1857              		.loc 1 357 5 is_stmt 1 view .LVU467
 1858              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1859              		.loc 1 357 45 is_stmt 0 view .LVU468
 1860 0868 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 1861              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1862              		.loc 1 357 5 view .LVU469
 1863 086c 020B55E3 		cmp	r5, #2048	@ _72,
 1864 0870 4800008A 		bhi	.L114		@,
 1865 0874 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 1866              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 1867              		.loc 1 357 12 view .LVU470
 1868 0878 00A0A0E3 		mov	r10, #0	@ yy,
 1869              	.LVL118:
 1870              	.L120:
 358:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 1871              		.loc 1 358 9 is_stmt 1 discriminator 3 view .LVU471
 1872 087c 950A03E0 		mul	r3, r5, r10	@ _3, _72, yy
 1873              	.LBB16:
 1874              	.LBB17:
 1875              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1876              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU472
 1877 0880 380094E5 		ldr	r0, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1878              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1879              		.loc 1 106 5 discriminator 3 view .LVU473
 1880 0884 000056E3 		cmp	r6, #0	@ prephitmp_171,
 1881              	.LBE17:
 1882              	.LBE16:
 1883              	@ armwave.c:358:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 1884              		.loc 1 358 9 discriminator 3 view .LVU474
 1885 0888 2C9094E5 		ldr	r9, [r4, #44]	@ _4, g_armwave_state.slice_record_height
 1886              	.LVL119:
 1887              	.LBB19:
 1888              	.LBI16:
  95:armwave.c     **** {
 1889              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU475
 1890              	.LBB18:
  97:armwave.c     ****     uint32_t value, word;
 1891              		.loc 1 97 5 discriminator 3 view .LVU476
  98:armwave.c     ****     uint8_t *wave_base;
 1892              		.loc 1 98 5 discriminator 3 view .LVU477
  99:armwave.c     ****     uint8_t *write_buffer_base;
 1893              		.loc 1 99 5 discriminator 3 view .LVU478
 100:armwave.c     ****     uint8_t *write_buffer;
 1894              		.loc 1 100 5 discriminator 3 view .LVU479
 101:armwave.c     ****     
 1895              		.loc 1 101 5 discriminator 3 view .LVU480
 103:armwave.c     **** 
 1896              		.loc 1 103 5 discriminator 3 view .LVU481
 1897              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1898              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU482
 1899 088c 900300E0 		mul	r0, r0, r3	@ _15, g_armwave_state.target_height, _3
 1900              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 1901              		.loc 1 103 40 discriminator 3 view .LVU483
 1902 0890 042094E5 		ldr	r2, [r4, #4]	@ _13, g_armwave_state.ch1_buffer
 1903              	.LVL120:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1904              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU484
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1905              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU485
 1906 0894 3900000A 		beq	.L116		@,
 1907              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1908              		.loc 1 106 11 view .LVU486
 1909 0898 0080A0E3 		mov	r8, #0	@ w,
 1910 089c 043043E2 		sub	r3, r3, #4	@ _77, _3,
 1911              	.LVL121:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1912              		.loc 1 106 11 view .LVU487
 1913 08a0 04308DE5 		str	r3, [sp, #4]	@ _77, %sfp
 1914              	.LVL122:
 1915              	.L119:
 107:armwave.c     **** 
 1916              		.loc 1 107 9 is_stmt 1 view .LVU488
 1917              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1918              		.loc 1 107 64 is_stmt 0 view .LVU489
 1919 08a4 203094E5 		ldr	r3, [r4, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1920              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1921              		.loc 1 117 9 view .LVU490
 1922 08a8 000059E3 		cmp	r9, #0	@ _4,
 1923              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1924              		.loc 1 107 36 view .LVU491
 1925 08ac 14E094E5 		ldr	lr, [r4, #20]	@ _16, g_armwave_state.wave_buffer
 1926              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 1927              		.loc 1 107 64 view .LVU492
 1928 08b0 930803E0 		mul	r3, r3, r8	@ _19, g_armwave_state.wave_stride, w
 1929              	.LVL123:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1930              		.loc 1 117 9 is_stmt 1 view .LVU493
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1931              		.loc 1 117 9 is_stmt 0 view .LVU494
 1932 08b4 2D00000A 		beq	.L117		@,
 1933 08b8 04109DE5 		ldr	r1, [sp, #4]	@ _77, %sfp
 1934 08bc 013083E0 		add	r3, r3, r1	@ tmp205, _19, _77
 1935              	.LVL124:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1936              		.loc 1 117 9 view .LVU495
 1937 08c0 03E08EE0 		add	lr, lr, r3	@ ivtmp.98, _16, tmp205
 1938              	.LVL125:
 1939              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 1940              		.loc 1 117 16 view .LVU496
 1941 08c4 0010A0E3 		mov	r1, #0	@ yy,
 1942              	.LVL126:
 1943              	.L118:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1944              		.loc 1 132 13 is_stmt 1 view .LVU497
 1945              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 1946              		.loc 1 132 18 is_stmt 0 view .LVU498
 1947 08c8 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _183, offset: 0B]
 1948              	.LVL127:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 1949              		.loc 1 136 13 is_stmt 1 view .LVU499
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1950              		.loc 1 137 14 view .LVU500
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1951              		.loc 1 138 14 view .LVU501
 139:armwave.c     ****             	word >>= 8;
 1952              		.loc 1 139 14 view .LVU502
 1953              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1954              		.loc 1 137 42 is_stmt 0 view .LVU503
 1955 08cc 1C7094E5 		ldr	r7, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 1956              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1957              		.loc 1 138 60 view .LVU504
 1958 08d0 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 1959              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1960              		.loc 1 137 34 view .LVU505
 1961 08d4 73C0EFE6 		uxtb	ip, r3	@ word, word
 1962              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1963              		.loc 1 140 19 view .LVU506
 1964 08d8 2354A0E1 		lsr	r5, r3, #8	@ word, word,
 1965              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1966              		.loc 1 139 44 view .LVU507
 1967 08dc 970C2CE0 		mla	ip, r7, ip, r0	@ tmp210, g_armwave_state.vscale, word, _15
 1968              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1969              		.loc 1 137 34 view .LVU508
 1970 08e0 7550EFE6 		uxtb	r5, r5	@ word, word
 1971              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1972              		.loc 1 139 44 view .LVU509
 1973 08e4 96C126E0 		mla	r6, r6, r1, ip	@ tmp214, g_armwave_state.target_height, yy, tmp210
 1974              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1975              		.loc 1 138 60 view .LVU510
 1976 08e8 01B081E2 		add	fp, r1, #1	@ tmp226, yy,
 1977              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1978              		.loc 1 140 19 view .LVU511
 1979 08ec 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 1980              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1981              		.loc 1 139 44 view .LVU512
 1982 08f0 0670D2E7 		ldrb	r7, [r2, r6]	@ zero_extendqisi2	@ *_63, *_63
 1983              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1984              		.loc 1 137 34 view .LVU513
 1985 08f4 7CC0EFE6 		uxtb	ip, ip	@ word, word
 1986              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 1987              		.loc 1 140 19 view .LVU514
 1988 08f8 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 1989              	.LVL128:
 1990              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 1991              		.loc 1 139 44 view .LVU515
 1992 08fc 017087E2 		add	r7, r7, #1	@ tmp217, *_63,
 1993 0900 0670C2E7 		strb	r7, [r2, r6]	@ tmp217, *_63
 1994              	.LVL129:
 140:armwave.c     ****     		}
 1995              		.loc 1 140 14 is_stmt 1 view .LVU516
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 1996              		.loc 1 137 14 view .LVU517
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 1997              		.loc 1 138 14 view .LVU518
 139:armwave.c     ****             	word >>= 8;
 1998              		.loc 1 139 14 view .LVU519
 1999              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2000              		.loc 1 137 42 is_stmt 0 view .LVU520
 2001 0904 1C6094E5 		ldr	r6, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2002              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2003              		.loc 1 138 60 view .LVU521
 2004 0908 027081E2 		add	r7, r1, #2	@ tmp241, yy,
 2005              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2006              		.loc 1 139 44 view .LVU522
 2007 090c 960525E0 		mla	r5, r6, r5, r0	@ tmp224, g_armwave_state.vscale, word, _15
 2008              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2009              		.loc 1 138 60 view .LVU523
 2010 0910 386094E5 		ldr	r6, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2011              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2012              		.loc 1 139 44 view .LVU524
 2013 0914 965B25E0 		mla	r5, r6, fp, r5	@ tmp229, g_armwave_state.target_height, tmp226, tmp224
 2014              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2015              		.loc 1 138 60 view .LVU525
 2016 0918 036081E2 		add	r6, r1, #3	@ tmp255, yy,
 2017              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2018              		.loc 1 117 37 view .LVU526
 2019 091c 041081E2 		add	r1, r1, #4	@ yy, yy,
 2020              	.LVL130:
 2021              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2022              		.loc 1 139 44 view .LVU527
 2023 0920 05B0D2E7 		ldrb	fp, [r2, r5]	@ zero_extendqisi2	@ *_83, *_83
 2024              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2025              		.loc 1 117 9 view .LVU528
 2026 0924 010059E1 		cmp	r9, r1	@ _4, yy
 2027              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2028              		.loc 1 139 44 view .LVU529
 2029 0928 01B08BE2 		add	fp, fp, #1	@ tmp232, *_83,
 2030 092c 05B0C2E7 		strb	fp, [r2, r5]	@ tmp232, *_83
 2031              	.LVL131:
 140:armwave.c     ****     		}
 2032              		.loc 1 140 14 is_stmt 1 view .LVU530
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2033              		.loc 1 137 14 view .LVU531
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2034              		.loc 1 138 14 view .LVU532
 139:armwave.c     ****             	word >>= 8;
 2035              		.loc 1 139 14 view .LVU533
 2036              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2037              		.loc 1 137 42 is_stmt 0 view .LVU534
 2038 0930 1CB094E5 		ldr	fp, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2039              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2040              		.loc 1 138 60 view .LVU535
 2041 0934 385094E5 		ldr	r5, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2042              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2043              		.loc 1 139 44 view .LVU536
 2044 0938 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp239, g_armwave_state.vscale, word, _15
 2045 093c 95C72CE0 		mla	ip, r5, r7, ip	@ tmp244, g_armwave_state.target_height, tmp241, tmp239
 2046 0940 0C50D2E7 		ldrb	r5, [r2, ip]	@ zero_extendqisi2	@ *_103, *_103
 2047 0944 015085E2 		add	r5, r5, #1	@ tmp247, *_103,
 2048 0948 0C50C2E7 		strb	r5, [r2, ip]	@ tmp247, *_103
 140:armwave.c     ****     		}
 2049              		.loc 1 140 14 is_stmt 1 view .LVU537
 2050              	.LVL132:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2051              		.loc 1 137 14 view .LVU538
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2052              		.loc 1 138 14 view .LVU539
 139:armwave.c     ****             	word >>= 8;
 2053              		.loc 1 139 14 view .LVU540
 2054              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2055              		.loc 1 137 42 is_stmt 0 view .LVU541
 2056 094c 1C5094E5 		ldr	r5, [r4, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2057              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2058              		.loc 1 138 60 view .LVU542
 2059 0950 38C094E5 		ldr	ip, [r4, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2060              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2061              		.loc 1 139 44 view .LVU543
 2062 0954 950323E0 		mla	r3, r5, r3, r0	@ tmp253, g_armwave_state.vscale, word, _15
 2063 0958 9C3623E0 		mla	r3, ip, r6, r3	@ tmp258, g_armwave_state.target_height, tmp255, tmp253
 2064 095c 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_123, *_123
 2065 0960 01C08CE2 		add	ip, ip, #1	@ tmp261, *_123,
 2066 0964 03C0C2E7 		strb	ip, [r2, r3]	@ tmp261, *_123
 140:armwave.c     ****     		}
 2067              		.loc 1 140 14 is_stmt 1 view .LVU544
 2068              	.LVL133:
 2069              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2070              		.loc 1 117 9 is_stmt 0 view .LVU545
 2071 0968 D6FFFF8A 		bhi	.L118		@,
 2072 096c 246094E5 		ldr	r6, [r4, #36]	@ prephitmp_171, g_armwave_state.waves
 2073              	.LVL134:
 2074              	.L117:
 2075              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2076              		.loc 1 106 44 view .LVU546
 2077 0970 018088E2 		add	r8, r8, #1	@ w, w,
 2078              	.LVL135:
 2079              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2080              		.loc 1 106 5 view .LVU547
 2081 0974 060058E1 		cmp	r8, r6	@ w, prephitmp_171
 2082 0978 C9FFFF3A 		bcc	.L119		@,
 2083 097c 285094E5 		ldr	r5, [r4, #40]	@ _72, g_armwave_state.slice_height
 2084              	.LVL136:
 2085              	.L116:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2086              		.loc 1 106 5 view .LVU548
 2087              	.LBE18:
 2088              	.LBE19:
 2089              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 357:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2090              		.loc 1 357 28 discriminator 3 view .LVU549
 2091 0980 0510A0E1 		mov	r1, r5	@, _72
 2092 0984 020BA0E3 		mov	r0, #2048	@,
 2093              	.LVL137:
 357:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2094              		.loc 1 357 28 discriminator 3 view .LVU550
 2095 0988 FEFFFFEB 		bl	__aeabi_uidiv		@
 2096              	.LVL138:
 2097              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 357:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2098              		.loc 1 357 63 discriminator 3 view .LVU551
 2099 098c 01A08AE2 		add	r10, r10, #1	@ yy, yy,
 2100              	.LVL139:
 2101              	@ armwave.c:357:     for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 357:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 2102              		.loc 1 357 5 discriminator 3 view .LVU552
 2103 0990 0A0050E1 		cmp	r0, r10	@, yy
 2104 0994 B8FFFF8A 		bhi	.L120		@,
 2105              	.LVL140:
 2106              	.L114:
 2107              	@ armwave.c:360: }
 359:armwave.c     ****     }
 360:armwave.c     **** }
 2108              		.loc 1 360 1 view .LVU553
 2109 0998 0CD08DE2 		add	sp, sp, #12	@,,
 2110              		.cfi_def_cfa_offset 36
 2111              		@ sp needed	@
 2112 099c F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2113              	.L133:
 2114              		.align	2
 2115              	.L132:
 2116 09a0 00000000 		.word	g_armwave_state
 2117              		.cfi_endproc
 2118              	.LFE66:
 2120              		.align	2
 2121              		.global	armwave_test_get_buffer
 2122              		.syntax unified
 2123              		.arm
 2124              		.fpu vfp
 2126              	armwave_test_get_buffer:
 2127              	.LFB67:
 361:armwave.c     **** 
 362:armwave.c     **** PyObject *armwave_test_get_buffer()
 363:armwave.c     **** {
 2128              		.loc 1 363 1 is_stmt 1 view -0
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 0
 2131              		@ frame_needed = 0, uses_anonymous_args = 0
 364:armwave.c     ****     PyObject *mv;
 2132              		.loc 1 364 5 view .LVU555
 365:armwave.c     ****     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2133              		.loc 1 365 5 view .LVU556
 2134              	@ armwave.c:363: {
 363:armwave.c     ****     PyObject *mv;
 2135              		.loc 1 363 1 is_stmt 0 view .LVU557
 2136 09a4 30402DE9 		push	{r4, r5, lr}	@
 2137              		.cfi_def_cfa_offset 12
 2138              		.cfi_offset 4, -12
 2139              		.cfi_offset 5, -8
 2140              		.cfi_offset 14, -4
 2141              	@ armwave.c:365:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2142              		.loc 1 365 22 view .LVU558
 2143 09a8 2C00A0E3 		mov	r0, #44	@,
 2144              	@ armwave.c:363: {
 363:armwave.c     ****     PyObject *mv;
 2145              		.loc 1 363 1 view .LVU559
 2146 09ac 0CD04DE2 		sub	sp, sp, #12	@,,
 2147              		.cfi_def_cfa_offset 24
 2148              	@ armwave.c:365:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 2149              		.loc 1 365 22 view .LVU560
 2150 09b0 FEFFFFEB 		bl	malloc		@
 2151              	.LVL141:
 2152              	@ armwave.c:367:     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 366:armwave.c     ****     
 367:armwave.c     ****     armwave_fill_pixbuf2(g_armwave_state.out_pixbuf);
 2153              		.loc 1 367 5 view .LVU561
 2154 09b4 3C409FE5 		ldr	r4, .L136	@ tmp118,
 2155              	@ armwave.c:365:     Py_buffer *buf = malloc(sizeof(Py_buffer));
 365:armwave.c     ****     
 2156              		.loc 1 365 22 view .LVU562
 2157 09b8 0050A0E1 		mov	r5, r0	@ tmp117,
 2158              	.LVL142:
 2159              		.loc 1 367 5 is_stmt 1 view .LVU563
 2160 09bc 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2161              	.LVL143:
 2162              		.loc 1 367 5 is_stmt 0 view .LVU564
 2163 09c0 FEFFFFEB 		bl	armwave_fill_pixbuf2		@
 2164              	.LVL144:
 368:armwave.c     ****     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_armwave_state.siz
 2165              		.loc 1 368 5 is_stmt 1 view .LVU565
 2166              	@ armwave.c:368:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2167              		.loc 1 368 79 is_stmt 0 view .LVU566
 2168 09c4 303094E5 		ldr	r3, [r4, #48]	@ g_armwave_state.size, g_armwave_state.size
 2169              	@ armwave.c:368:     PyBuffer_FillInfo(buf, NULL, g_armwave_state.out_pixbuf, sizeof(uint32_t) * g_
 2170              		.loc 1 368 5 view .LVU567
 2171 09c8 08C0A0E3 		mov	ip, #8	@ tmp125,
 2172 09cc 0110A0E3 		mov	r1, #1	@ tmp126,
 2173 09d0 0331A0E1 		lsl	r3, r3, #2	@, g_armwave_state.size,
 2174 09d4 02108DE8 		stm	sp, {r1, ip}	@,,
 2175 09d8 3C2094E5 		ldr	r2, [r4, #60]	@, g_armwave_state.out_pixbuf
 2176 09dc 0500A0E1 		mov	r0, r5	@, tmp117
 2177 09e0 0010A0E3 		mov	r1, #0	@,
 2178 09e4 FEFFFFEB 		bl	PyBuffer_FillInfo		@
 2179              	.LVL145:
 369:armwave.c     **** 
 370:armwave.c     **** 	mv = PyMemoryView_FromBuffer(buf);
 2180              		.loc 1 370 2 is_stmt 1 view .LVU568
 2181              	@ armwave.c:370: 	mv = PyMemoryView_FromBuffer(buf);
 2182              		.loc 1 370 7 is_stmt 0 view .LVU569
 2183 09e8 0500A0E1 		mov	r0, r5	@, tmp117
 2184              	@ armwave.c:371: }
 371:armwave.c     **** }
 2185              		.loc 1 371 1 view .LVU570
 2186 09ec 0CD08DE2 		add	sp, sp, #12	@,,
 2187              		.cfi_def_cfa_offset 12
 2188              		@ sp needed	@
 2189 09f0 3040BDE8 		pop	{r4, r5, lr}	@
 2190              		.cfi_restore 14
 2191              		.cfi_restore 5
 2192              		.cfi_restore 4
 2193              		.cfi_def_cfa_offset 0
 2194              	.LVL146:
 2195              	@ armwave.c:370: 	mv = PyMemoryView_FromBuffer(buf);
 370:armwave.c     **** }
 2196              		.loc 1 370 7 view .LVU571
 2197 09f4 FEFFFFEA 		b	PyMemoryView_FromBuffer		@
 2198              	.LVL147:
 2199              	.L137:
 370:armwave.c     **** }
 2200              		.loc 1 370 7 view .LVU572
 2201              		.align	2
 2202              	.L136:
 2203 09f8 00000000 		.word	g_armwave_state
 2204              		.cfi_endproc
 2205              	.LFE67:
 2207              		.align	2
 2208              		.global	armwave_test_dump_buffer_to_ppm
 2209              		.syntax unified
 2210              		.arm
 2211              		.fpu vfp
 2213              	armwave_test_dump_buffer_to_ppm:
 2214              	.LVL148:
 2215              	.LFB68:
 372:armwave.c     **** 
 373:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 374:armwave.c     **** {
 2216              		.loc 1 374 1 is_stmt 1 view -0
 2217              		.cfi_startproc
 2218              		@ args = 0, pretend = 0, frame = 0
 2219              		@ frame_needed = 0, uses_anonymous_args = 0
 2220              		@ link register save eliminated.
 375:armwave.c     **** 	armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2221              		.loc 1 375 2 view .LVU574
 2222 09fc 08309FE5 		ldr	r3, .L139	@ tmp112,
 2223 0a00 0010A0E1 		mov	r1, r0	@, fn
 2224 0a04 3C0093E5 		ldr	r0, [r3, #60]	@, g_armwave_state.out_pixbuf
 2225              	.LVL149:
 2226              		.loc 1 375 2 is_stmt 0 view .LVU575
 2227 0a08 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2228              	.LVL150:
 2229              	.L140:
 2230              		.loc 1 375 2 view .LVU576
 2231              		.align	2
 2232              	.L139:
 2233 0a0c 00000000 		.word	g_armwave_state
 2234              		.cfi_endproc
 2235              	.LFE68:
 2237              		.align	2
 2238              		.global	armwave_cleanup
 2239              		.syntax unified
 2240              		.arm
 2241              		.fpu vfp
 2243              	armwave_cleanup:
 2244              	.LFB69:
 376:armwave.c     **** }
 377:armwave.c     **** 
 378:armwave.c     **** void armwave_cleanup()
 379:armwave.c     **** {
 2245              		.loc 1 379 1 is_stmt 1 view -0
 2246              		.cfi_startproc
 2247              		@ args = 0, pretend = 0, frame = 0
 2248              		@ frame_needed = 0, uses_anonymous_args = 0
 380:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2249              		.loc 1 380 2 view .LVU578
 2250              	@ armwave.c:379: {
 379:armwave.c     **** 	free(g_armwave_state.out_pixbuf);
 2251              		.loc 1 379 1 is_stmt 0 view .LVU579
 2252 0a10 10402DE9 		push	{r4, lr}	@
 2253              		.cfi_def_cfa_offset 8
 2254              		.cfi_offset 4, -8
 2255              		.cfi_offset 14, -4
 2256              	@ armwave.c:380: 	free(g_armwave_state.out_pixbuf);
 2257              		.loc 1 380 22 view .LVU580
 2258 0a14 28409FE5 		ldr	r4, .L143	@ tmp113,
 2259              	@ armwave.c:380: 	free(g_armwave_state.out_pixbuf);
 2260              		.loc 1 380 2 view .LVU581
 2261 0a18 3C0094E5 		ldr	r0, [r4, #60]	@, g_armwave_state.out_pixbuf
 2262 0a1c FEFFFFEB 		bl	free		@
 2263              	.LVL151:
 381:armwave.c     **** 	free(g_armwave_state.ch1_buffer);
 2264              		.loc 1 381 2 is_stmt 1 view .LVU582
 2265 0a20 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 2266 0a24 FEFFFFEB 		bl	free		@
 2267              	.LVL152:
 382:armwave.c     **** 	free(g_armwave_state.xcoord_to_xpixel);
 2268              		.loc 1 382 2 view .LVU583
 2269 0a28 580094E5 		ldr	r0, [r4, #88]	@, g_armwave_state.xcoord_to_xpixel
 2270 0a2c FEFFFFEB 		bl	free		@
 2271              	.LVL153:
 383:armwave.c     **** 
 384:armwave.c     **** 	g_armwave_state.out_pixbuf = NULL;
 2272              		.loc 1 384 2 view .LVU584
 2273              	@ armwave.c:384: 	g_armwave_state.out_pixbuf = NULL;
 2274              		.loc 1 384 29 is_stmt 0 view .LVU585
 2275 0a30 0030A0E3 		mov	r3, #0	@ tmp120,
 2276 0a34 3C3084E5 		str	r3, [r4, #60]	@ tmp120, g_armwave_state.out_pixbuf
 385:armwave.c     **** 	g_armwave_state.ch1_buffer = NULL;
 2277              		.loc 1 385 2 is_stmt 1 view .LVU586
 2278              	@ armwave.c:385: 	g_armwave_state.ch1_buffer = NULL;
 2279              		.loc 1 385 29 is_stmt 0 view .LVU587
 2280 0a38 043084E5 		str	r3, [r4, #4]	@ tmp120, g_armwave_state.ch1_buffer
 386:armwave.c     **** 	g_armwave_state.xcoord_to_xpixel = NULL;
 2281              		.loc 1 386 2 is_stmt 1 view .LVU588
 2282              	@ armwave.c:386: 	g_armwave_state.xcoord_to_xpixel = NULL;
 2283              		.loc 1 386 35 is_stmt 0 view .LVU589
 2284 0a3c 583084E5 		str	r3, [r4, #88]	@ tmp120, g_armwave_state.xcoord_to_xpixel
 2285              	@ armwave.c:387: }
 387:armwave.c     **** }
 2286              		.loc 1 387 1 view .LVU590
 2287 0a40 1080BDE8 		pop	{r4, pc}	@
 2288              	.L144:
 2289              		.align	2
 2290              	.L143:
 2291 0a44 00000000 		.word	g_armwave_state
 2292              		.cfi_endproc
 2293              	.LFE69:
 2295              		.section	.text.startup,"ax",%progbits
 2296              		.align	2
 2297              		.global	main
 2298              		.syntax unified
 2299              		.arm
 2300              		.fpu vfp
 2302              	main:
 2303              	.LVL154:
 2304              	.LFB70:
 388:armwave.c     **** 
 389:armwave.c     **** int main(int argc, char *argv[])
 390:armwave.c     **** {
 2305              		.loc 1 390 1 is_stmt 1 view -0
 2306              		.cfi_startproc
 2307              		@ args = 0, pretend = 0, frame = 8
 2308              		@ frame_needed = 0, uses_anonymous_args = 0
 391:armwave.c     ****     uint32_t *out_buffer;
 2309              		.loc 1 391 5 view .LVU592
 392:armwave.c     ****     uint32_t xx, yy, n;
 2310              		.loc 1 392 5 view .LVU593
 393:armwave.c     **** 
 394:armwave.c     ****     //printf("Starting armwave...\n");
 395:armwave.c     ****     armwave_init();
 2311              		.loc 1 395 5 view .LVU594
 2312              	.LBB24:
 2313              	.LBI24:
 148:armwave.c     **** {
 2314              		.loc 1 148 6 view .LVU595
 2315              	.LBB25:
 150:armwave.c     **** }
 2316              		.loc 1 150 5 view .LVU596
 2317              	.LBE25:
 2318              	.LBE24:
 2319              	@ armwave.c:390: {
 390:armwave.c     ****     uint32_t *out_buffer;
 2320              		.loc 1 390 1 is_stmt 0 view .LVU597
 2321 0000 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 2322              		.cfi_def_cfa_offset 36
 2323              		.cfi_offset 4, -36
 2324              		.cfi_offset 5, -32
 2325              		.cfi_offset 6, -28
 2326              		.cfi_offset 7, -24
 2327              		.cfi_offset 8, -20
 2328              		.cfi_offset 9, -16
 2329              		.cfi_offset 10, -12
 2330              		.cfi_offset 11, -8
 2331              		.cfi_offset 14, -4
 2332 0004 0CD04DE2 		sub	sp, sp, #12	@,,
 2333              		.cfi_def_cfa_offset 48
 2334              	.LBB29:
 2335              	.LBB26:
 2336              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2337              		.loc 1 150 27 view .LVU598
 2338 0008 68919FE5 		ldr	r9, .L165	@ tmp267,
 2339              	.LBE26:
 2340              	.LBE29:
 2341              	@ armwave.c:404:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 396:armwave.c     **** 
 397:armwave.c     ****     //printf("Creating test waveform...\n");
 398:armwave.c     ****     test_create_waveform();
 399:armwave.c     **** 
 400:armwave.c     ****     //printf("Creating gamma LUT...\n");
 401:armwave.c     ****     test_create_gamma();
 402:armwave.c     **** 
 403:armwave.c     ****     //printf("Setting up render...\n");
 404:armwave.c     ****     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_WAVE_SIZE, 2048, 2
 2342              		.loc 1 404 5 view .LVU599
 2343 000c 68219FE5 		ldr	r2, .L165+4	@ ivtmp_191,
 2344              	.LBB30:
 2345              	.LBB27:
 2346              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2347              		.loc 1 150 27 view .LVU600
 2348 0010 0030A0E3 		mov	r3, #0	@ tmp192,
 2349              	.LBE27:
 2350              	.LBE30:
 2351              	@ armwave.c:404:     armwave_setup_render(&test_wave_buffer, 0, TEST_WAVE_SIZE, TEST_NWAVES, TEST_W
 2352              		.loc 1 404 5 view .LVU601
 2353 0014 04208DE5 		str	r2, [sp, #4]	@ ivtmp_191, %sfp
 2354              	.LBB31:
 2355              	.LBB28:
 2356              	@ armwave.c:150:     g_armwave_state.flags = 0;
 150:armwave.c     **** }
 2357              		.loc 1 150 27 view .LVU602
 2358 0018 003089E5 		str	r3, [r9]	@ tmp192, g_armwave_state.flags
 2359              	.LBE28:
 2360              	.LBE31:
 398:armwave.c     **** 
 2361              		.loc 1 398 5 is_stmt 1 view .LVU603
 2362 001c FEFFFFEB 		bl	test_create_waveform		@
 2363              	.LVL155:
 401:armwave.c     **** 
 2364              		.loc 1 401 5 view .LVU604
 2365 0020 FEFFFFEB 		bl	test_create_gamma		@
 2366              	.LVL156:
 2367              		.loc 1 404 5 view .LVU605
 2368 0024 FEFFFFEB 		bl	armwave_setup_render.constprop.1		@
 2369              	.LVL157:
 405:armwave.c     **** 
 406:armwave.c     ****     //printf("Wave buffer = 0x%08x (const ptr:0x%08x)\n", g_armwave_state.wave_buffer, &test_wave_b
 407:armwave.c     **** 
 408:armwave.c     ****     for(n = 0; n < 5000; n++) {
 2370              		.loc 1 408 5 view .LVU606
 2371              		.loc 1 408 5 is_stmt 0 view .LVU607
 2372 0028 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2373              	.LVL158:
 2374              	.L146:
 2375              	@ armwave.c:409:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 409:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2376              		.loc 1 409 9 view .LVU608
 2377 002c 020B55E3 		cmp	r5, #2048	@ _61,
 2378 0030 4900008A 		bhi	.L154		@,
 2379 0034 244099E5 		ldr	r4, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2380              	@ armwave.c:409:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2381              		.loc 1 409 16 view .LVU609
 2382 0038 0080A0E3 		mov	r8, #0	@ yy,
 2383 003c 0460A0E1 		mov	r6, r4	@ prephitmp_178, prephitmp_178
 2384              	.LVL159:
 2385              	.L151:
 410:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 411:armwave.c     ****             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.sli
 2386              		.loc 1 411 13 is_stmt 1 discriminator 3 view .LVU610
 2387 0040 950803E0 		mul	r3, r5, r8	@ _1, _61, yy
 2388              	.LBB32:
 2389              	.LBB33:
 2390              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2391              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU611
 2392 0044 380099E5 		ldr	r0, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2393              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2394              		.loc 1 106 5 discriminator 3 view .LVU612
 2395 0048 000056E3 		cmp	r6, #0	@ prephitmp_178,
 2396              	.LBE33:
 2397              	.LBE32:
 2398              	@ armwave.c:411:             render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_
 2399              		.loc 1 411 13 discriminator 3 view .LVU613
 2400 004c 2CA099E5 		ldr	r10, [r9, #44]	@ _2, g_armwave_state.slice_record_height
 2401              	.LVL160:
 2402              	.LBB35:
 2403              	.LBI32:
  95:armwave.c     **** {
 2404              		.loc 1 95 6 is_stmt 1 discriminator 3 view .LVU614
 2405              	.LBB34:
  97:armwave.c     ****     uint32_t value, word;
 2406              		.loc 1 97 5 discriminator 3 view .LVU615
  98:armwave.c     ****     uint8_t *wave_base;
 2407              		.loc 1 98 5 discriminator 3 view .LVU616
  99:armwave.c     ****     uint8_t *write_buffer_base;
 2408              		.loc 1 99 5 discriminator 3 view .LVU617
 100:armwave.c     ****     uint8_t *write_buffer;
 2409              		.loc 1 100 5 discriminator 3 view .LVU618
 101:armwave.c     ****     
 2410              		.loc 1 101 5 discriminator 3 view .LVU619
 103:armwave.c     **** 
 2411              		.loc 1 103 5 discriminator 3 view .LVU620
 2412              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2413              		.loc 1 103 63 is_stmt 0 discriminator 3 view .LVU621
 2414 0050 900300E0 		mul	r0, r0, r3	@ _19, g_armwave_state.target_height, _1
 2415              	@ armwave.c:103:     write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.ta
 103:armwave.c     **** 
 2416              		.loc 1 103 40 discriminator 3 view .LVU622
 2417 0054 042099E5 		ldr	r2, [r9, #4]	@ _17, g_armwave_state.ch1_buffer
 2418              	.LVL161:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2419              		.loc 1 106 5 is_stmt 1 discriminator 3 view .LVU623
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2420              		.loc 1 106 5 is_stmt 0 discriminator 3 view .LVU624
 2421 0058 3900000A 		beq	.L147		@,
 2422              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2423              		.loc 1 106 11 view .LVU625
 2424 005c 0070A0E3 		mov	r7, #0	@ w,
 2425 0060 043043E2 		sub	r3, r3, #4	@ _81, _1,
 2426              	.LVL162:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2427              		.loc 1 106 11 view .LVU626
 2428 0064 00308DE5 		str	r3, [sp]	@ _81, %sfp
 2429              	.LVL163:
 2430              	.L150:
 107:armwave.c     **** 
 2431              		.loc 1 107 9 is_stmt 1 view .LVU627
 2432              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2433              		.loc 1 107 64 is_stmt 0 view .LVU628
 2434 0068 203099E5 		ldr	r3, [r9, #32]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2435              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2436              		.loc 1 117 9 view .LVU629
 2437 006c 00005AE3 		cmp	r10, #0	@ _2,
 2438              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2439              		.loc 1 107 36 view .LVU630
 2440 0070 14E099E5 		ldr	lr, [r9, #20]	@ _20, g_armwave_state.wave_buffer
 2441              	@ armwave.c:107:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.w
 107:armwave.c     **** 
 2442              		.loc 1 107 64 view .LVU631
 2443 0074 930703E0 		mul	r3, r3, r7	@ _23, g_armwave_state.wave_stride, w
 2444              	.LVL164:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2445              		.loc 1 117 9 is_stmt 1 view .LVU632
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2446              		.loc 1 117 9 is_stmt 0 view .LVU633
 2447 0078 2D00000A 		beq	.L148		@,
 2448 007c 00109DE5 		ldr	r1, [sp]	@ _81, %sfp
 2449 0080 013083E0 		add	r3, r3, r1	@ tmp202, _23, _81
 2450              	.LVL165:
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2451              		.loc 1 117 9 view .LVU634
 2452 0084 03E08EE0 		add	lr, lr, r3	@ ivtmp.111, _20, tmp202
 2453              	.LVL166:
 2454              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2455              		.loc 1 117 16 view .LVU635
 2456 0088 0010A0E3 		mov	r1, #0	@ yy,
 2457              	.LVL167:
 2458              	.L149:
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2459              		.loc 1 132 13 is_stmt 1 view .LVU636
 2460              	@ armwave.c:132:             word = *(uint32_t*)(wave_base + yy);
 132:armwave.c     ****             //value = 4; // 5 * g_armwave_state.vscale;
 2461              		.loc 1 132 18 is_stmt 0 view .LVU637
 2462 008c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _177, offset: 0B]
 2463              	.LVL168:
 136:armwave.c     ****             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 2464              		.loc 1 136 13 is_stmt 1 view .LVU638
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2465              		.loc 1 137 14 view .LVU639
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2466              		.loc 1 138 14 view .LVU640
 139:armwave.c     ****             	word >>= 8;
 2467              		.loc 1 139 14 view .LVU641
 2468              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2469              		.loc 1 137 42 is_stmt 0 view .LVU642
 2470 0090 1C6099E5 		ldr	r6, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2471              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2472              		.loc 1 138 60 view .LVU643
 2473 0094 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2474              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2475              		.loc 1 137 34 view .LVU644
 2476 0098 73C0EFE6 		uxtb	ip, r3	@ word, word
 2477              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2478              		.loc 1 140 19 view .LVU645
 2479 009c 2344A0E1 		lsr	r4, r3, #8	@ word, word,
 2480              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2481              		.loc 1 139 44 view .LVU646
 2482 00a0 960C2CE0 		mla	ip, r6, ip, r0	@ tmp207, g_armwave_state.vscale, word, _19
 2483              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2484              		.loc 1 137 34 view .LVU647
 2485 00a4 7440EFE6 		uxtb	r4, r4	@ word, word
 2486              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2487              		.loc 1 139 44 view .LVU648
 2488 00a8 95C125E0 		mla	r5, r5, r1, ip	@ tmp211, g_armwave_state.target_height, yy, tmp207
 2489              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2490              		.loc 1 138 60 view .LVU649
 2491 00ac 01B081E2 		add	fp, r1, #1	@ tmp223, yy,
 2492              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2493              		.loc 1 140 19 view .LVU650
 2494 00b0 23C8A0E1 		lsr	ip, r3, #16	@ word, word,
 2495              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2496              		.loc 1 139 44 view .LVU651
 2497 00b4 0560D2E7 		ldrb	r6, [r2, r5]	@ zero_extendqisi2	@ *_67, *_67
 2498              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2499              		.loc 1 137 34 view .LVU652
 2500 00b8 7CC0EFE6 		uxtb	ip, ip	@ word, word
 2501              	@ armwave.c:140:             	word >>= 8;
 140:armwave.c     ****     		}
 2502              		.loc 1 140 19 view .LVU653
 2503 00bc 233CA0E1 		lsr	r3, r3, #24	@ word, word,
 2504              	.LVL169:
 2505              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2506              		.loc 1 139 44 view .LVU654
 2507 00c0 016086E2 		add	r6, r6, #1	@ tmp214, *_67,
 2508 00c4 0560C2E7 		strb	r6, [r2, r5]	@ tmp214, *_67
 2509              	.LVL170:
 140:armwave.c     ****     		}
 2510              		.loc 1 140 14 is_stmt 1 view .LVU655
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2511              		.loc 1 137 14 view .LVU656
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2512              		.loc 1 138 14 view .LVU657
 139:armwave.c     ****             	word >>= 8;
 2513              		.loc 1 139 14 view .LVU658
 2514              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2515              		.loc 1 137 42 is_stmt 0 view .LVU659
 2516 00c8 1C5099E5 		ldr	r5, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2517              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2518              		.loc 1 138 60 view .LVU660
 2519 00cc 026081E2 		add	r6, r1, #2	@ tmp238, yy,
 2520              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2521              		.loc 1 139 44 view .LVU661
 2522 00d0 950424E0 		mla	r4, r5, r4, r0	@ tmp221, g_armwave_state.vscale, word, _19
 2523              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2524              		.loc 1 138 60 view .LVU662
 2525 00d4 385099E5 		ldr	r5, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2526              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2527              		.loc 1 139 44 view .LVU663
 2528 00d8 954B24E0 		mla	r4, r5, fp, r4	@ tmp226, g_armwave_state.target_height, tmp223, tmp221
 2529              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2530              		.loc 1 138 60 view .LVU664
 2531 00dc 035081E2 		add	r5, r1, #3	@ tmp252, yy,
 2532              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2533              		.loc 1 117 37 view .LVU665
 2534 00e0 041081E2 		add	r1, r1, #4	@ yy, yy,
 2535              	.LVL171:
 2536              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2537              		.loc 1 139 44 view .LVU666
 2538 00e4 04B0D2E7 		ldrb	fp, [r2, r4]	@ zero_extendqisi2	@ *_87, *_87
 2539              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2540              		.loc 1 117 9 view .LVU667
 2541 00e8 01005AE1 		cmp	r10, r1	@ _2, yy
 2542              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2543              		.loc 1 139 44 view .LVU668
 2544 00ec 01B08BE2 		add	fp, fp, #1	@ tmp229, *_87,
 2545 00f0 04B0C2E7 		strb	fp, [r2, r4]	@ tmp229, *_87
 2546              	.LVL172:
 140:armwave.c     ****     		}
 2547              		.loc 1 140 14 is_stmt 1 view .LVU669
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2548              		.loc 1 137 14 view .LVU670
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2549              		.loc 1 138 14 view .LVU671
 139:armwave.c     ****             	word >>= 8;
 2550              		.loc 1 139 14 view .LVU672
 2551              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2552              		.loc 1 137 42 is_stmt 0 view .LVU673
 2553 00f4 1CB099E5 		ldr	fp, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2554              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2555              		.loc 1 138 60 view .LVU674
 2556 00f8 384099E5 		ldr	r4, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2557              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2558              		.loc 1 139 44 view .LVU675
 2559 00fc 9B0C2CE0 		mla	ip, fp, ip, r0	@ tmp236, g_armwave_state.vscale, word, _19
 2560 0100 94C62CE0 		mla	ip, r4, r6, ip	@ tmp241, g_armwave_state.target_height, tmp238, tmp236
 2561 0104 0C40D2E7 		ldrb	r4, [r2, ip]	@ zero_extendqisi2	@ *_107, *_107
 2562 0108 014084E2 		add	r4, r4, #1	@ tmp244, *_107,
 2563 010c 0C40C2E7 		strb	r4, [r2, ip]	@ tmp244, *_107
 140:armwave.c     ****     		}
 2564              		.loc 1 140 14 is_stmt 1 view .LVU676
 2565              	.LVL173:
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2566              		.loc 1 137 14 view .LVU677
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2567              		.loc 1 138 14 view .LVU678
 139:armwave.c     ****             	word >>= 8;
 2568              		.loc 1 139 14 view .LVU679
 2569              	@ armwave.c:137:             	scale_value = (word & 0xff) * g_armwave_state.vscale;
 137:armwave.c     ****             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.target_height);
 2570              		.loc 1 137 42 is_stmt 0 view .LVU680
 2571 0110 1C4099E5 		ldr	r4, [r9, #28]	@ g_armwave_state.vscale, g_armwave_state.vscale
 2572              	@ armwave.c:138:             	write_buffer = write_buffer_base + ((yy + ys) * g_armwave_state.targe
 138:armwave.c     ****             	*(write_buffer + scale_value) += 1;
 2573              		.loc 1 138 60 view .LVU681
 2574 0114 38C099E5 		ldr	ip, [r9, #56]	@ g_armwave_state.target_height, g_armwave_state.target_height
 2575              	@ armwave.c:139:             	*(write_buffer + scale_value) += 1;
 139:armwave.c     ****             	word >>= 8;
 2576              		.loc 1 139 44 view .LVU682
 2577 0118 940323E0 		mla	r3, r4, r3, r0	@ tmp250, g_armwave_state.vscale, word, _19
 2578 011c 9C3523E0 		mla	r3, ip, r5, r3	@ tmp255, g_armwave_state.target_height, tmp252, tmp250
 2579 0120 03C0D2E7 		ldrb	ip, [r2, r3]	@ zero_extendqisi2	@ *_127, *_127
 2580 0124 01C08CE2 		add	ip, ip, #1	@ tmp258, *_127,
 2581 0128 03C0C2E7 		strb	ip, [r2, r3]	@ tmp258, *_127
 140:armwave.c     ****     		}
 2582              		.loc 1 140 14 is_stmt 1 view .LVU683
 2583              	.LVL174:
 2584              	@ armwave.c:117:         for(yy = 0; yy < height; yy += 4) {
 117:armwave.c     ****             //write_buffer = write_buffer_base + (g_armwave_state.xcoord_to_xpixel[slice_y + yy] * 
 2585              		.loc 1 117 9 is_stmt 0 view .LVU684
 2586 012c D6FFFF8A 		bhi	.L149		@,
 2587 0130 246099E5 		ldr	r6, [r9, #36]	@ prephitmp_178, g_armwave_state.waves
 2588              	.LVL175:
 2589              	.L148:
 2590              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2591              		.loc 1 106 44 view .LVU685
 2592 0134 017087E2 		add	r7, r7, #1	@ w, w,
 2593              	.LVL176:
 2594              	@ armwave.c:106:     for(w = 0; w < g_armwave_state.waves; w++) {
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2595              		.loc 1 106 5 view .LVU686
 2596 0138 060057E1 		cmp	r7, r6	@ w, prephitmp_178
 2597 013c C9FFFF3A 		bcc	.L150		@,
 2598 0140 285099E5 		ldr	r5, [r9, #40]	@ _61, g_armwave_state.slice_height
 2599              	.LVL177:
 2600              	.L147:
 106:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 2601              		.loc 1 106 5 view .LVU687
 2602              	.LBE34:
 2603              	.LBE35:
 2604              	@ armwave.c:409:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 409:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2605              		.loc 1 409 32 discriminator 3 view .LVU688
 2606 0144 0510A0E1 		mov	r1, r5	@, _61
 2607 0148 020BA0E3 		mov	r0, #2048	@,
 2608              	.LVL178:
 409:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2609              		.loc 1 409 32 discriminator 3 view .LVU689
 2610 014c FEFFFFEB 		bl	__aeabi_uidiv		@
 2611              	.LVL179:
 2612              	@ armwave.c:409:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 409:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2613              		.loc 1 409 67 discriminator 3 view .LVU690
 2614 0150 018088E2 		add	r8, r8, #1	@ yy, yy,
 2615              	.LVL180:
 2616              	@ armwave.c:409:         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 409:armwave.c     ****             //printf("Rendering slice y=%d at y_pos=%d\n", yy, yy * g_armwave_state.slice_height);
 2617              		.loc 1 409 9 discriminator 3 view .LVU691
 2618 0154 080050E1 		cmp	r0, r8	@, yy
 2619 0158 B8FFFF8A 		bhi	.L151		@,
 2620              	.LVL181:
 2621              	.L154:
 2622              	@ armwave.c:408:     for(n = 0; n < 5000; n++) {
 408:armwave.c     ****         for(yy = 0; yy < (2048 / g_armwave_state.slice_height); yy++) {
 2623              		.loc 1 408 5 discriminator 2 view .LVU692
 2624 015c 04309DE5 		ldr	r3, [sp, #4]	@ ivtmp_191, %sfp
 2625 0160 013053E2 		subs	r3, r3, #1	@ ivtmp_191, ivtmp_191,
 2626 0164 04308DE5 		str	r3, [sp, #4]	@ ivtmp_191, %sfp
 2627 0168 AFFFFF1A 		bne	.L146		@,
 2628 016c 0300A0E1 		mov	r0, r3	@, ivtmp_191
 412:armwave.c     ****         }
 413:armwave.c     ****     }
 414:armwave.c     **** 
 415:armwave.c     ****     /*
 416:armwave.c     ****     printf("Creating pixbuf\n");
 417:armwave.c     ****     out_buffer = malloc(sizeof(uint32_t) * g_armwave_state.size);
 418:armwave.c     ****     armwave_fill_pixbuf(out_buffer);
 419:armwave.c     **** 
 420:armwave.c     ****     printf("Dumping pixbuf\n");
 421:armwave.c     ****     armwave_dump_ppm_debug(out_buffer, "test.ppm");
 422:armwave.c     ****     */
 423:armwave.c     **** 
 424:armwave.c     ****     return 0;
 2629              		.loc 1 424 5 is_stmt 1 view .LVU693
 2630              	@ armwave.c:425: }
 425:armwave.c     **** }...
 2631              		.loc 1 425 1 is_stmt 0 view .LVU694
 2632 0170 0CD08DE2 		add	sp, sp, #12	@,,
 2633              		.cfi_def_cfa_offset 36
 2634              		@ sp needed	@
 2635 0174 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 2636              	.L166:
 2637              		.align	2
 2638              	.L165:
 2639 0178 00000000 		.word	g_armwave_state
 2640 017c 88130000 		.word	5000
 2641              		.cfi_endproc
 2642              	.LFE70:
 2644              		.global	mod_depth
 2645              		.global	overall_scale
 2646              		.comm	gamma_table,256,4
 2647              		.comm	test_wave_buffer,131072,4
 2648              		.comm	g_armwave_state,92,4
 2649              		.section	.rodata
 2650              		.align	2
 2651              		.set	.LANCHOR0,. + 0
 2654              	__PRETTY_FUNCTION__.16995:
 2655 0000 61726D77 		.ascii	"armwave_setup_render\000"
 2655      6176655F 
 2655      73657475 
 2655      705F7265 
 2655      6E646572 
 2656 0015 000000   		.space	3
 2659              	__PRETTY_FUNCTION__.17020:
 2660 0018 61726D77 		.ascii	"armwave_fill_pixbuf2\000"
 2660      6176655F 
 2660      66696C6C 
 2660      5F706978 
 2660      62756632 
 2661 002d 000000   		.space	3
 2664              	overall_scale:
 2665 0030 00002041 		.word	1092616192
 2666              		.bss
 2667              		.align	2
 2668              		.set	.LANCHOR1,. + 0
 2671              	mod_depth:
 2672 0000 00000000 		.space	4
 2673              		.section	.rodata.str1.4,"aMS",%progbits,1
 2674              		.align	2
 2675              	.LC0:
 2676 0000 61726D77 		.ascii	"armwave.c\000"
 2676      6176652E 
 2676      6300
 2677 000a 0000     		.space	2
 2678              	.LC1:
 2679 000c 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 2679      6D776176 
 2679      655F7374 
 2679      6174652E 
 2679      6368315F 
 2680 002f 00       		.space	1
 2681              	.LC2:
 2682 0030 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 2682      6D776176 
 2682      655F7374 
 2682      6174652E 
 2682      78636F6F 
 2683 0059 000000   		.space	3
 2684              	.LC3:
 2685 005c 73746172 		.ascii	"start_point < end_point\000"
 2685      745F706F 
 2685      696E7420 
 2685      3C20656E 
 2685      645F706F 
 2686              	.LC4:
 2687 0074 28746172 		.ascii	"(target_height % 256) == 0\000"
 2687      6765745F 
 2687      68656967 
 2687      68742025 
 2687      20323536 
 2688 008f 00       		.space	1
 2689              	.LC5:
 2690 0090 6F75745F 		.ascii	"out_buffer != NULL\000"
 2690      62756666 
 2690      65722021 
 2690      3D204E55 
 2690      4C4C00
 2691 00a3 00       		.space	1
 2692              	.LC6:
 2693 00a4 776200   		.ascii	"wb\000"
 2694 00a7 00       		.space	1
 2695              	.LC7:
 2696 00a8 50330A00 		.ascii	"P3\012\000"
 2697              	.LC8:
 2698 00ac 25642025 		.ascii	"%d %d\012\000"
 2698      640A00
 2699 00b3 00       		.space	1
 2700              	.LC9:
 2701 00b4 3235350A 		.ascii	"255\012\000"
 2701      00
 2702 00b9 000000   		.space	3
 2703              	.LC10:
 2704 00bc 25336420 		.ascii	"%3d %3d %3d\012\000"
 2704      25336420 
 2704      2533640A 
 2704      00
 2705 00c9 000000   		.space	3
 2706              	.LC11:
 2707 00cc 76302E30 		.ascii	"v0.0.1\000"
 2707      2E3100
 2708 00d3 00       		.space	1
 2709              	.LC12:
 2710 00d4 61726D77 		.ascii	"armwave version: %s\012\000"
 2710      61766520 
 2710      76657273 
 2710      696F6E3A 
 2710      2025730A 
 2711              		.text
 2712              	.Letext0:
 2713              		.file 2 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 2714              		.file 3 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 2715              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 2716              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 2717              		.file 6 "/usr/include/stdio.h"
 2718              		.file 7 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 2719              		.file 8 "/usr/include/errno.h"
 2720              		.file 9 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 2721              		.file 10 "/usr/include/unistd.h"
 2722              		.file 11 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 2723              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 2724              		.file 13 "/usr/local/include/python3.8/pyport.h"
 2725              		.file 14 "/usr/include/math.h"
 2726              		.file 15 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 2727              		.file 16 "/usr/include/time.h"
 2728              		.file 17 "/usr/local/include/python3.8/pymem.h"
 2729              		.file 18 "/usr/local/include/python3.8/object.h"
 2730              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 2731              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 2732              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 2733              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 2734              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 2735              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 2736              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 2737              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 2738              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 2739              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 2740              		.file 29 "/usr/local/include/python3.8/longobject.h"
 2741              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 2742              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 2743              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 2744              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 2745              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 2746              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 2747              		.file 36 "/usr/local/include/python3.8/listobject.h"
 2748              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 2749              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 2750              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 2751              		.file 40 "/usr/local/include/python3.8/setobject.h"
 2752              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 2753              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 2754              		.file 43 "/usr/local/include/python3.8/classobject.h"
 2755              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 2756              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 2757              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 2758              		.file 47 "/usr/local/include/python3.8/traceback.h"
 2759              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 2760              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 2761              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 2762              		.file 51 "/usr/local/include/python3.8/pystate.h"
 2763              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 2764              		.file 53 "/usr/local/include/python3.8/genobject.h"
 2765              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 2766              		.file 55 "/usr/local/include/python3.8/structseq.h"
 2767              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 2768              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 2769              		.file 58 "/usr/local/include/python3.8/codecs.h"
 2770              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 2771              		.file 60 "/usr/local/include/python3.8/context.h"
 2772              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 2773              		.file 62 "/usr/local/include/python3.8/code.h"
 2774              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 2775              		.file 64 "/usr/local/include/python3.8/ceval.h"
 2776              		.file 65 "/usr/local/include/python3.8/import.h"
 2777              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 2778              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 2779              		.file 68 "armwave.h"
 2780              		.file 69 "/usr/include/stdlib.h"
 2781              		.file 70 "/usr/local/include/python3.8/cpython/abstract.h"
 2782              		.file 71 "<built-in>"
 2783              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 2784              		.file 73 "/usr/include/assert.h"
