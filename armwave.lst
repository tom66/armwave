   1              		.arch armv6
   2              		.eabi_attribute 28, 1	@ Tag_ABI_VFP_args
   3              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   4              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   5              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   6              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   7              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   8              		.eabi_attribute 26, 2	@ Tag_ABI_enum_size
   9              		.eabi_attribute 30, 2	@ Tag_ABI_optimization_goals
  10              		.eabi_attribute 34, 1	@ Tag_CPU_unaligned_access
  11              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  12              		.file	"armwave.c"
  13              	@ GNU C17 (Raspbian 8.3.0-6+rpi1) version 8.3.0 (arm-linux-gnueabihf)
  14              	@	compiled by GNU C version 8.3.0, GMP version 6.1.2, MPFR version 4.0.2, MPC version 1.1.0, isl ve
  15              	
  16              	@ GGC heuristics: --param ggc-min-expand=81 --param ggc-min-heapsize=95638
  17              	@ options passed:  -I /usr/local/include/python3.8 -imultilib .
  18              	@ -imultiarch arm-linux-gnueabihf armwave.c -mfloat-abi=hard -mfpu=vfp
  19              	@ -mtls-dialect=gnu -marm -march=armv6+fp -auxbase-strip armwave.s -g -O3
  20              	@ -fverbose-asm -fwrapv
  21              	@ options enabled:  -faggressive-loop-optimizations -falign-jumps
  22              	@ -falign-labels -falign-loops -fauto-inc-dec -fbranch-count-reg
  23              	@ -fcaller-saves -fchkp-check-incomplete-type -fchkp-check-read
  24              	@ -fchkp-check-write -fchkp-instrument-calls -fchkp-narrow-bounds
  25              	@ -fchkp-optimize -fchkp-store-bounds -fchkp-use-static-bounds
  26              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcode-hoisting
  27              	@ -fcombine-stack-adjustments -fcommon -fcompare-elim -fcprop-registers
  28              	@ -fcrossjumping -fcse-follow-jumps -fdefer-pop
  29              	@ -fdelete-null-pointer-checks -fdevirtualize -fdevirtualize-speculatively
  30              	@ -fdwarf2-cfi-asm -fearly-inlining -feliminate-unused-debug-types
  31              	@ -fexpensive-optimizations -fforward-propagate -ffp-int-builtin-inexact
  32              	@ -ffunction-cse -fgcse -fgcse-after-reload -fgcse-lm -fgnu-runtime
  33              	@ -fgnu-unique -fguess-branch-probability -fhoist-adjacent-loads -fident
  34              	@ -fif-conversion -fif-conversion2 -findirect-inlining -finline
  35              	@ -finline-atomics -finline-functions -finline-functions-called-once
  36              	@ -finline-small-functions -fipa-bit-cp -fipa-cp -fipa-cp-clone -fipa-icf
  37              	@ -fipa-icf-functions -fipa-icf-variables -fipa-profile -fipa-pure-const
  38              	@ -fipa-ra -fipa-reference -fipa-sra -fipa-vrp -fira-hoist-pressure
  39              	@ -fira-share-save-slots -fira-share-spill-slots
  40              	@ -fisolate-erroneous-paths-dereference -fivopts -fkeep-static-consts
  41              	@ -fleading-underscore -flifetime-dse -floop-interchange
  42              	@ -floop-unroll-and-jam -flra-remat -flto-odr-type-merging -fmath-errno
  43              	@ -fmerge-constants -fmerge-debug-strings -fmove-loop-invariants
  44              	@ -fomit-frame-pointer -foptimize-sibling-calls -foptimize-strlen
  45              	@ -fpartial-inlining -fpeel-loops -fpeephole -fpeephole2 -fplt
  46              	@ -fpredictive-commoning -fprefetch-loop-arrays -freg-struct-return
  47              	@ -freorder-blocks -freorder-functions -frerun-cse-after-loop
  48              	@ -fsched-critical-path-heuristic -fsched-dep-count-heuristic
  49              	@ -fsched-group-heuristic -fsched-interblock -fsched-last-insn-heuristic
  50              	@ -fsched-pressure -fsched-rank-heuristic -fsched-spec
  51              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep -fschedule-insns
  52              	@ -fschedule-insns2 -fsection-anchors -fsemantic-interposition
  53              	@ -fshow-column -fshrink-wrap -fshrink-wrap-separate -fsigned-zeros
  54              	@ -fsplit-ivs-in-unroller -fsplit-loops -fsplit-paths -fsplit-wide-types
  55              	@ -fssa-backprop -fssa-phiopt -fstdarg-opt -fstore-merging
  56              	@ -fstrict-aliasing -fstrict-volatile-bitfields -fsync-libcalls
  57              	@ -fthread-jumps -ftoplevel-reorder -ftrapping-math -ftree-bit-ccp
  58              	@ -ftree-builtin-call-dce -ftree-ccp -ftree-ch -ftree-coalesce-vars
  59              	@ -ftree-copy-prop -ftree-cselim -ftree-dce -ftree-dominator-opts
  60              	@ -ftree-dse -ftree-forwprop -ftree-fre -ftree-loop-distribute-patterns
  61              	@ -ftree-loop-distribution -ftree-loop-if-convert -ftree-loop-im
  62              	@ -ftree-loop-ivcanon -ftree-loop-optimize -ftree-loop-vectorize
  63              	@ -ftree-parallelize-loops= -ftree-partial-pre -ftree-phiprop -ftree-pre
  64              	@ -ftree-pta -ftree-reassoc -ftree-scev-cprop -ftree-sink
  65              	@ -ftree-slp-vectorize -ftree-slsr -ftree-sra -ftree-switch-conversion
  66              	@ -ftree-tail-merge -ftree-ter -ftree-vrp -funit-at-a-time -funswitch-loops
  67              	@ -fvar-tracking -fvar-tracking-assignments -fverbose-asm -fwrapv
  68              	@ -fzero-initialized-in-bss -marm -mbe32 -mglibc -mlittle-endian
  69              	@ -mpic-data-is-text-relative -msched-prolog -munaligned-access
  70              	@ -mvectorize-with-neon-quad
  71              	
  72              		.text
  73              	.Ltext0:
  74              		.cfi_sections	.debug_frame
  75              		.align	2
  76              		.global	test_create_gamma
  77              		.arch armv6
  78              		.syntax unified
  79              		.arm
  80              		.fpu vfp
  82              	test_create_gamma:
  83              	.LFB57:
  84              		.file 1 "armwave.c"
   1:armwave.c     **** /*
   2:armwave.c     ****  * This file is part of YAOS and is licenced under the MIT Licence.
   3:armwave.c     ****  *
   4:armwave.c     ****  * armwave: an ARM-optimised waveform rendering engine for the Raspberry Pi 3.  
   5:armwave.c     ****  * This library attempts to use NEON tricks and architectural features of the Pi's
   6:armwave.c     ****  * processor to render waveforms damn quickly.
   7:armwave.c     ****  */
   8:armwave.c     **** 
   9:armwave.c     **** #define _GNU_SOURCE
  10:armwave.c     **** 
  11:armwave.c     **** #include <Python.h>
  12:armwave.c     **** 
  13:armwave.c     **** #include <assert.h>
  14:armwave.c     **** #include <ctype.h>
  15:armwave.c     **** #include <stdio.h>
  16:armwave.c     **** #include <stdint.h>
  17:armwave.c     **** #include <stdlib.h>
  18:armwave.c     **** #include <stdbool.h>
  19:armwave.c     **** #include <malloc.h>
  20:armwave.c     **** #include <string.h>
  21:armwave.c     **** #include <math.h>
  22:armwave.c     **** 
  23:armwave.c     **** #include "armwave.h"
  24:armwave.c     **** 
  25:armwave.c     **** #define ARMWAVE_VER  "v0.0.1"
  26:armwave.c     **** 
  27:armwave.c     **** struct armwave_state_t g_armwave_state;
  28:armwave.c     **** 
  29:armwave.c     **** uint8_t gamma_table[256];
  30:armwave.c     **** 
  31:armwave.c     **** /*
  32:armwave.c     ****  * Create a gamma table.
  33:armwave.c     ****  */
  34:armwave.c     **** void test_create_gamma()
  35:armwave.c     **** {
  85              		.loc 1 35 1 view -0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 0
  88              		@ frame_needed = 0, uses_anonymous_args = 0
  36:armwave.c     ****     int i;
  89              		.loc 1 36 5 view .LVU1
  37:armwave.c     ****     float gamma = 0.90f;
  90              		.loc 1 37 5 view .LVU2
  91              	.LVL0:
  38:armwave.c     **** 
  39:armwave.c     ****     for(i = 0; i < 256; i++) {
  92              		.loc 1 39 5 view .LVU3
  93              	@ armwave.c:35: {
  35:armwave.c     ****     int i;
  94              		.loc 1 35 1 is_stmt 0 view .LVU4
  95 0000 70402DE9 		push	{r4, r5, r6, lr}	@
  96              		.cfi_def_cfa_offset 16
  97              		.cfi_offset 4, -16
  98              		.cfi_offset 5, -12
  99              		.cfi_offset 6, -8
 100              		.cfi_offset 14, -4
 101 0004 068B2DED 		vpush.64	{d8, d9, d10}	@
 102              		.cfi_def_cfa_offset 40
 103              		.cfi_offset 80, -40
 104              		.cfi_offset 81, -36
 105              		.cfi_offset 82, -32
 106              		.cfi_offset 83, -28
 107              		.cfi_offset 84, -24
 108              		.cfi_offset 85, -20
 109 0008 64409FE5 		ldr	r4, .L6+20	@ ivtmp.32,
 110              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 111              		.loc 1 40 32 view .LVU5
 112 000c 17AA9FED 		vldr.32	s20, .L6+16	@ tmp128,
 113              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 114              		.loc 1 40 26 view .LVU6
 115 0010 129B9FED 		vldr.64	d9, .L6	@ tmp135,
 116              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 117              		.loc 1 40 49 view .LVU7
 118 0014 138B9FED 		vldr.64	d8, .L6+8	@ tmp131,
 119 0018 015084E2 		add	r5, r4, #1	@ _25, ivtmp.32,
 120 001c 016C84E2 		add	r6, r4, #256	@ _26, ivtmp.32,
 121 0020 015065E2 		rsb	r5, r5, #1	@ tmp134, _25,
 122              	.LVL1:
 123              	.L2:
 124              		.loc 1 40 9 is_stmt 1 discriminator 3 view .LVU8
 125              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 126              		.loc 1 40 32 is_stmt 0 discriminator 3 view .LVU9
 127 0024 043085E0 		add	r3, r5, r4	@ tmp125, tmp134, ivtmp.32
 128              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 129              		.loc 1 40 26 discriminator 3 view .LVU10
 130 0028 491BB0EE 		vmov.f64	d1, d9	@, tmp135
 131              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 132              		.loc 1 40 32 discriminator 3 view .LVU11
 133 002c 903A07EE 		vmov	s15, r3	@ int	@ tmp125, tmp125
 134 0030 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp126, tmp125
 135 0034 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp127, tmp126, tmp128
 136              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 137              		.loc 1 40 26 discriminator 3 view .LVU12
 138 0038 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp127
 139 003c FEFFFFEB 		bl	pow		@
 140              	.LVL2:
 141              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 142              		.loc 1 40 49 discriminator 3 view .LVU13
 143 0040 080B20EE 		vmul.f64	d0, d0, d8	@ tmp130,, tmp131
 144              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 145              		.loc 1 40 24 discriminator 3 view .LVU14
 146 0044 C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp132, tmp130
 147 0048 903A17EE 		vmov	r3, s15	@ int	@ tmp132, tmp132
 148 004c 0130E4E5 		strb	r3, [r4, #1]!	@ tmp132, MEM[base: _24, offset: 0B]
 149              	.LVL3:
 150              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 151              		.loc 1 39 5 discriminator 3 view .LVU15
 152 0050 060054E1 		cmp	r4, r6	@ ivtmp.32, _26
 153 0054 F2FFFF1A 		bne	.L2		@,
 154              	@ armwave.c:42: }
  41:armwave.c     ****     }
  42:armwave.c     **** }
 155              		.loc 1 42 1 view .LVU16
 156 0058 068BBDEC 		vldm	sp!, {d8-d10}	@,
 157              		.cfi_restore 84
 158              		.cfi_restore 85
 159              		.cfi_restore 82
 160              		.cfi_restore 83
 161              		.cfi_restore 80
 162              		.cfi_restore 81
 163              		.cfi_def_cfa_offset 16
 164 005c 7080BDE8 		pop	{r4, r5, r6, pc}	@
 165              	.LVL4:
 166              	.L7:
 167              		.loc 1 42 1 view .LVU17
 168              		.align	3
 169              	.L6:
 170 0060 000000C0 		.word	-1073741824
 171 0064 CCCCEC3F 		.word	1072483532
 172 0068 00000000 		.word	0
 173 006c 00E06F40 		.word	1081073664
 174 0070 00007F43 		.word	1132396544
 175 0074 FFFFFFFF 		.word	gamma_table-1
 176              		.cfi_endproc
 177              	.LFE57:
 179              		.align	2
 180              		.global	armwave_init
 181              		.syntax unified
 182              		.arm
 183              		.fpu vfp
 185              	armwave_init:
 186              	.LFB58:
  43:armwave.c     **** 
  44:armwave.c     **** /*
  45:armwave.c     ****  * Initialise things.  STUB, mostly.
  46:armwave.c     ****  */
  47:armwave.c     **** void armwave_init()
  48:armwave.c     **** {
 187              		.loc 1 48 1 is_stmt 1 view -0
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 0
 190              		@ frame_needed = 0, uses_anonymous_args = 0
 191              		@ link register save eliminated.
  49:armwave.c     ****     g_armwave_state.flags = 0;
 192              		.loc 1 49 5 view .LVU19
 193              	@ armwave.c:49:     g_armwave_state.flags = 0;
 194              		.loc 1 49 27 is_stmt 0 view .LVU20
 195 0078 10309FE5 		ldr	r3, .L9	@ tmp110,
 196 007c 0020A0E3 		mov	r2, #0	@ tmp111,
 197              	@ armwave.c:51:     printf("armwave version: %s\n", ARMWAVE_VER);
  50:armwave.c     **** 
  51:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 198              		.loc 1 51 5 view .LVU21
 199 0080 0C109FE5 		ldr	r1, .L9+4	@,
 200 0084 0C009FE5 		ldr	r0, .L9+8	@,
 201              	@ armwave.c:49:     g_armwave_state.flags = 0;
  49:armwave.c     ****     g_armwave_state.flags = 0;
 202              		.loc 1 49 27 view .LVU22
 203 0088 002083E5 		str	r2, [r3]	@ tmp111, g_armwave_state.flags
 204              		.loc 1 51 5 is_stmt 1 view .LVU23
 205 008c FEFFFFEA 		b	printf		@
 206              	.LVL5:
 207              	.L10:
 208              		.align	2
 209              	.L9:
 210 0090 00000000 		.word	g_armwave_state
 211 0094 00000000 		.word	.LC0
 212 0098 08000000 		.word	.LC1
 213              		.cfi_endproc
 214              	.LFE58:
 216              		.align	2
 217              		.global	render_nonaa_to_buffer_1ch_slice
 218              		.syntax unified
 219              		.arm
 220              		.fpu vfp
 222              	render_nonaa_to_buffer_1ch_slice:
 223              	.LVL6:
 224              	.LFB59:
  52:armwave.c     **** }
  53:armwave.c     **** 
  54:armwave.c     **** /*
  55:armwave.c     ****  * 1ch renderer, renders up to slice-height buffer with X-coord of each waveaccess
  56:armwave.c     ****  * pre-computed.
  57:armwave.c     ****  *
  58:armwave.c     ****  * @param    slice_y        Slice to render at
  59:armwave.c     ****  * @param    height         Number of wave points to render (adjust for performance, 
  60:armwave.c     ****  *                          accounting for cache behaviour, etc.)
  61:armwave.c     ****  */
  62:armwave.c     **** void render_nonaa_to_buffer_1ch_slice(uint32_t slice_y, uint32_t height)
  63:armwave.c     **** {
 225              		.loc 1 63 1 view -0
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 8
 228              		@ frame_needed = 0, uses_anonymous_args = 0
  64:armwave.c     ****     int yy, ys, w, scale_value;
 229              		.loc 1 64 5 view .LVU25
  65:armwave.c     ****     uint32_t value, word;
 230              		.loc 1 65 5 view .LVU26
  66:armwave.c     ****     uint8_t *wave_base;
 231              		.loc 1 66 5 view .LVU27
  67:armwave.c     ****     uint8_t *write_buffer_base;
 232              		.loc 1 67 5 view .LVU28
  68:armwave.c     ****     uint8_t *write_buffer;
 233              		.loc 1 68 5 view .LVU29
  69:armwave.c     **** 
  70:armwave.c     ****     //write_buffer_base = g_armwave_state.ch1_buffer + (slice_y * g_armwave_state.bitdepth_height);
  71:armwave.c     ****     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.cmp_x_bitdepth_sc
 234              		.loc 1 71 5 view .LVU30
 235              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 236              		.loc 1 63 1 is_stmt 0 view .LVU31
 237 009c F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 238              		.cfi_def_cfa_offset 36
 239              		.cfi_offset 4, -36
 240              		.cfi_offset 5, -32
 241              		.cfi_offset 6, -28
 242              		.cfi_offset 7, -24
 243              		.cfi_offset 8, -20
 244              		.cfi_offset 9, -16
 245              		.cfi_offset 10, -12
 246              		.cfi_offset 11, -8
 247              		.cfi_offset 14, -4
 248 00a0 0160A0E1 		mov	r6, r1	@ height, height
 249              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 250              		.loc 1 71 40 view .LVU32
 251 00a4 B0419FE5 		ldr	r4, .L27	@ tmp316,
 252              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 253              		.loc 1 63 1 view .LVU33
 254 00a8 1CD04DE2 		sub	sp, sp, #28	@,,
 255              		.cfi_def_cfa_offset 64
 256              	@ armwave.c:63: {
  63:armwave.c     ****     int yy, ys, w, scale_value;
 257              		.loc 1 63 1 view .LVU34
 258 00ac 0070A0E1 		mov	r7, r0	@ slice_y, slice_y
 259              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 260              		.loc 1 71 65 view .LVU35
 261 00b0 242094E5 		ldr	r2, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 262              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 263              		.loc 1 71 130 view .LVU36
 264 00b4 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 265              	.LVL7:
 266              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 267              		.loc 1 71 40 view .LVU37
 268 00b8 045094E5 		ldr	r5, [r4, #4]	@ _1, g_armwave_state.ch1_buffer
 269              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
 270              		.loc 1 71 65 view .LVU38
 271 00bc 920002E0 		mul	r2, r2, r0	@ tmp215, g_armwave_state.cmp_x_bitdepth_scale, slice_y
 272              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  72:armwave.c     **** 
  73:armwave.c     ****     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 273              		.loc 1 73 5 view .LVU39
 274 00c0 0530A0E1 		mov	r3, r5	@, _1
 275 00c4 41008DE9 		stmib	sp, {r0, r6}	@,,
 276              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 277              		.loc 1 71 105 view .LVU40
 278 00c8 2224A0E1 		lsr	r2, r2, #8	@ tmp217, tmp215,
 279              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 280              		.loc 1 73 5 view .LVU41
 281 00cc 8C019FE5 		ldr	r0, .L27+4	@,
 282              	.LVL8:
 283              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 284              		.loc 1 71 130 view .LVU42
 285 00d0 910202E0 		mul	r2, r1, r2	@ _7, g_armwave_state.bitdepth_height, tmp217
 286              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
 287              		.loc 1 73 5 view .LVU43
 288 00d4 141094E5 		ldr	r1, [r4, #20]	@, g_armwave_state.wave_buffer
 289              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 290              		.loc 1 71 23 view .LVU44
 291 00d8 025085E0 		add	r5, r5, r2	@ write_buffer_base, _1, _7
 292              	.LVL9:
 293              		.loc 1 73 5 is_stmt 1 view .LVU45
 294 00dc 00208DE5 		str	r2, [sp]	@ _7,
 295 00e0 0520A0E1 		mov	r2, r5	@, write_buffer_base
 296 00e4 FEFFFFEB 		bl	printf		@
 297              	.LVL10:
  74:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
  75:armwave.c     ****         write_buffer_base - g_armwave_state.ch1_buffer, slice_y, height);
  76:armwave.c     **** 
  77:armwave.c     ****     // roll through each waveform
  78:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 298              		.loc 1 78 5 view .LVU46
 299              		.loc 1 78 5 is_stmt 0 view .LVU47
 300 00e8 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 301 00ec 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 302 00f0 570000DA 		ble	.L11		@,
 303 00f4 000056E3 		cmp	r6, #0	@ height,
 304 00f8 5500000A 		beq	.L11		@,
 305 00fc 043047E2 		sub	r3, r7, #4	@ tmp315, slice_y,
 306 0100 14308DE5 		str	r3, [sp, #20]	@ tmp315, %sfp
 307              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
 308              		.loc 1 78 11 view .LVU48
 309 0104 0030A0E3 		mov	r3, #0	@ w,
 310 0108 10308DE5 		str	r3, [sp, #16]	@ w, %sfp
 311              	.LVL11:
 312              	.L18:
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 313              		.loc 1 79 9 is_stmt 1 view .LVU49
  80:armwave.c     **** 
  81:armwave.c     ****         // roll through y and render the slice into the out buffer
  82:armwave.c     ****         // buffer is rendered rotated by 90 degrees
  83:armwave.c     ****         for(yy = 0; yy < height; yy += 4) {
 314              		.loc 1 83 9 view .LVU50
 315              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 316              		.loc 1 79 64 is_stmt 0 view .LVU51
 317 010c 343094E5 		ldr	r3, [r4, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 318 0110 10109DE5 		ldr	r1, [sp, #16]	@ w, %sfp
 319 0114 14009DE5 		ldr	r0, [sp, #20]	@ tmp315, %sfp
 320 0118 148094E5 		ldr	r8, [r4, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 321 011c 930123E0 		mla	r3, r3, r1, r0	@ tmp230, g_armwave_state.wave_stride, w, tmp315
 322              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
 323              		.loc 1 83 16 view .LVU52
 324 0120 0020A0E3 		mov	r2, #0	@ yy,
 325 0124 038088E0 		add	r8, r8, r3	@ ivtmp.39, g_armwave_state.wave_buffer, tmp230
 326              	.LVL12:
 327              	.L17:
  84:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
  85:armwave.c     **** 
  86:armwave.c     ****             word = *(uint32_t*)(wave_base + yy);
 328              		.loc 1 86 13 is_stmt 1 view .LVU53
  87:armwave.c     **** 
  88:armwave.c     ****             for(ys = 0; ys < 4; ys++) {
  89:armwave.c     ****                 // maybe worth preloading the base address here...
  90:armwave.c     ****                 scale_value = word & 0xff;
  91:armwave.c     ****                 
  92:armwave.c     ****                 // prevents saturating behaviour; we lose two ADC counts.
  93:armwave.c     ****                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  94:armwave.c     ****                     continue;
  95:armwave.c     **** 
  96:armwave.c     ****                 // Keep math in integer where possible.  We compute the X scale and then multiply t
  97:armwave.c     ****                 // base coordinate.  The value of the point then informs us where to write in typic
  98:armwave.c     ****                 // The bonus of this method is that we tend to hit accesses along a 256 byte line. 
  99:armwave.c     ****                 // we set our accumulation buffer to 16 bits.)
 100:armwave.c     ****                 write_buffer = write_buffer_base + \
 329              		.loc 1 100 17 view .LVU54
 101:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 102:armwave.c     **** 
 103:armwave.c     ****                 //printf("write_buff=0x%08x value=%d\n", write_buffer, value);
 104:armwave.c     **** 
 105:armwave.c     ****                 *(write_buffer + scale_value) += 1;
 330              		.loc 1 105 17 view .LVU55
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 331              		.loc 1 100 17 view .LVU56
 332              		.loc 1 105 17 view .LVU57
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 333              		.loc 1 100 17 view .LVU58
 334              		.loc 1 105 17 view .LVU59
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 335              		.loc 1 100 17 view .LVU60
 336              		.loc 1 105 17 view .LVU61
 337              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 338              		.loc 1 86 18 is_stmt 0 view .LVU62
 339 0128 0430B8E5 		ldr	r3, [r8, #4]!	@ word, MEM[base: _184, offset: 0B]
 340              	.LVL13:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 341              		.loc 1 88 13 is_stmt 1 view .LVU63
  90:armwave.c     ****                 
 342              		.loc 1 90 17 view .LVU64
  93:armwave.c     ****                     continue;
 343              		.loc 1 93 17 view .LVU65
 344              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 345              		.loc 1 101 34 is_stmt 0 view .LVU66
 346 012c 01B082E2 		add	fp, r2, #1	@ tmp260, yy,
 347              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 348              		.loc 1 93 20 view .LVU67
 349 0130 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 350 0134 0110A003 		moveq	r1, #1	@ tmp233,
 351 0138 0010A013 		movne	r1, #0	@ tmp233,
 352              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 353              		.loc 1 93 19 view .LVU68
 354 013c FF0057E3 		cmp	r7, #255	@ scale_value,
 355 0140 01108103 		orreq	r1, r1, #1	@,, tmp238, tmp233
 356 0144 000051E3 		cmp	r1, #0	@ tmp238,
 357              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 358              		.loc 1 101 34 view .LVU69
 359 0148 02A082E2 		add	r10, r2, #2	@ tmp281, yy,
 360 014c 039082E2 		add	r9, r2, #3	@ tmp300, yy,
 361              	.LVL14:
 362              	@ armwave.c:106:                 word >>= 8;
 106:armwave.c     ****                 word >>= 8;
 363              		.loc 1 106 22 view .LVU70
 364 0150 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 365 0154 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 366              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 367              		.loc 1 93 19 view .LVU71
 368 0158 3400001A 		bne	.L20		@,
 369              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 370              		.loc 1 101 34 view .LVU72
 371 015c 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 372              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 373              		.loc 1 93 20 view .LVU73
 374 0160 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 375 0164 01E0A003 		moveq	lr, #1	@ tmp253,
 376              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 377              		.loc 1 101 34 view .LVU74
 378 0168 910201E0 		mul	r1, r1, r2	@ tmp240, g_armwave_state.cmp_x_bitdepth_scale, yy
 379              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 380              		.loc 1 93 20 view .LVU75
 381 016c 00E0A013 		movne	lr, #0	@ tmp253,
 382              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 383              		.loc 1 93 19 view .LVU76
 384 0170 FF005CE3 		cmp	ip, #255	@ scale_value,
 385 0174 01E08E03 		orreq	lr, lr, #1	@,, tmp258, tmp253
 386 0178 00005EE3 		cmp	lr, #0	@ tmp258,
 387              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 388              		.loc 1 105 47 view .LVU77
 389 017c 40E094E5 		ldr	lr, [r4, #64]	@ tmp327, g_armwave_state.bitdepth_height
 390              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 391              		.loc 1 101 74 view .LVU78
 392 0180 2114A0E1 		lsr	r1, r1, #8	@ tmp242, tmp240,
 393              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 394              		.loc 1 105 47 view .LVU79
 395 0184 9E7121E0 		mla	r1, lr, r1, r7	@ tmp246, tmp327, tmp242, scale_value
 396 0188 01E0D5E7 		ldrb	lr, [r5, r1]	@ zero_extendqisi2	@ *_81, *_81
 397 018c 01E08EE2 		add	lr, lr, #1	@ tmp249, *_81,
 398 0190 01E0C5E7 		strb	lr, [r5, r1]	@ tmp249, *_81
 399              	.LVL15:
 400              		.loc 1 106 17 is_stmt 1 view .LVU80
  90:armwave.c     ****                 
 401              		.loc 1 90 17 view .LVU81
  93:armwave.c     ****                     continue;
 402              		.loc 1 93 17 view .LVU82
 403              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 404              		.loc 1 93 19 is_stmt 0 view .LVU83
 405 0194 2500001A 		bne	.L20		@,
 406              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 407              		.loc 1 101 34 view .LVU84
 408 0198 24E094E5 		ldr	lr, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 409              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 410              		.loc 1 101 99 view .LVU85
 411 019c 401094E5 		ldr	r1, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 412              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 413              		.loc 1 93 20 view .LVU86
 414 01a0 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 415              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 416              		.loc 1 101 34 view .LVU87
 417 01a4 9E0B0BE0 		mul	fp, lr, fp	@ tmp261, g_armwave_state.cmp_x_bitdepth_scale, tmp260
 418              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 419              		.loc 1 93 20 view .LVU88
 420 01a8 01E0A003 		moveq	lr, #1	@ tmp274,
 421 01ac 00E0A013 		movne	lr, #0	@ tmp274,
 422              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 423              		.loc 1 101 74 view .LVU89
 424 01b0 2BB4A0E1 		lsr	fp, fp, #8	@ tmp263, tmp261,
 425              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 426              		.loc 1 93 19 view .LVU90
 427 01b4 FF0050E3 		cmp	r0, #255	@ scale_value,
 428 01b8 01E08E03 		orreq	lr, lr, #1	@,, tmp279, tmp274
 429              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 430              		.loc 1 105 47 view .LVU91
 431 01bc 91CB2CE0 		mla	ip, r1, fp, ip	@ tmp267, g_armwave_state.bitdepth_height, tmp263, scale_value
 432              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 433              		.loc 1 93 19 view .LVU92
 434 01c0 00005EE3 		cmp	lr, #0	@ tmp279,
 435              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 436              		.loc 1 105 47 view .LVU93
 437 01c4 0C10D5E7 		ldrb	r1, [r5, ip]	@ zero_extendqisi2	@ *_111, *_111
 438 01c8 011081E2 		add	r1, r1, #1	@ tmp270, *_111,
 439 01cc 0C10C5E7 		strb	r1, [r5, ip]	@ tmp270, *_111
 440              		.loc 1 106 17 is_stmt 1 view .LVU94
 441              	.LVL16:
  90:armwave.c     ****                 
 442              		.loc 1 90 17 view .LVU95
  93:armwave.c     ****                     continue;
 443              		.loc 1 93 17 view .LVU96
 444              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 445              		.loc 1 93 19 is_stmt 0 view .LVU97
 446 01d0 1600001A 		bne	.L20		@,
 447              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 448              		.loc 1 101 34 view .LVU98
 449 01d4 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 450              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 451              		.loc 1 101 99 view .LVU99
 452 01d8 40C094E5 		ldr	ip, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 453              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 454              		.loc 1 93 20 view .LVU100
 455 01dc 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 456              	.LVL17:
 457              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 458              		.loc 1 101 34 view .LVU101
 459 01e0 910A0AE0 		mul	r10, r1, r10	@ tmp282, g_armwave_state.cmp_x_bitdepth_scale, tmp281
 460              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 461              		.loc 1 93 20 view .LVU102
 462 01e4 0110A003 		moveq	r1, #1	@ tmp294,
 463 01e8 0010A013 		movne	r1, #0	@ tmp294,
 464              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 465              		.loc 1 101 74 view .LVU103
 466 01ec 2AA4A0E1 		lsr	r10, r10, #8	@ tmp284, tmp282,
 467              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 468              		.loc 1 93 19 view .LVU104
 469 01f0 FF0053E3 		cmp	r3, #255	@ word,
 470 01f4 01108103 		orreq	r1, r1, #1	@,, tmp299, tmp294
 471              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 472              		.loc 1 105 47 view .LVU105
 473 01f8 9C0A20E0 		mla	r0, ip, r10, r0	@ tmp288, g_armwave_state.bitdepth_height, tmp284, scale_value
 474              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 475              		.loc 1 93 19 view .LVU106
 476 01fc 000051E3 		cmp	r1, #0	@ tmp299,
 477              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 478              		.loc 1 105 47 view .LVU107
 479 0200 0010D5E7 		ldrb	r1, [r5, r0]	@ zero_extendqisi2	@ *_141, *_141
 480 0204 011081E2 		add	r1, r1, #1	@ tmp291, *_141,
 481 0208 0010C5E7 		strb	r1, [r5, r0]	@ tmp291, *_141
 482              		.loc 1 106 17 is_stmt 1 view .LVU108
 483              	.LVL18:
  90:armwave.c     ****                 
 484              		.loc 1 90 17 view .LVU109
  93:armwave.c     ****                     continue;
 485              		.loc 1 93 17 view .LVU110
 486              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 487              		.loc 1 93 19 is_stmt 0 view .LVU111
 488 020c 0700001A 		bne	.L20		@,
 489              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 490              		.loc 1 101 34 view .LVU112
 491 0210 241094E5 		ldr	r1, [r4, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 492              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 493              		.loc 1 101 99 view .LVU113
 494 0214 400094E5 		ldr	r0, [r4, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 495              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 496              		.loc 1 101 34 view .LVU114
 497 0218 910909E0 		mul	r9, r1, r9	@ tmp302, g_armwave_state.cmp_x_bitdepth_scale, tmp300
 498              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 499              		.loc 1 101 74 view .LVU115
 500 021c 2994A0E1 		lsr	r9, r9, #8	@ tmp304, tmp302,
 501              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 502              		.loc 1 105 47 view .LVU116
 503 0220 903923E0 		mla	r3, r0, r9, r3	@ tmp308, g_armwave_state.bitdepth_height, tmp304, word
 504 0224 0310D5E7 		ldrb	r1, [r5, r3]	@ zero_extendqisi2	@ *_171, *_171
 505 0228 011081E2 		add	r1, r1, #1	@ tmp311, *_171,
 506 022c 0310C5E7 		strb	r1, [r5, r3]	@ tmp311, *_171
 507              		.loc 1 106 17 is_stmt 1 view .LVU117
 508              	.LVL19:
 509              	.L20:
 510              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 511              		.loc 1 83 37 is_stmt 0 view .LVU118
 512 0230 042082E2 		add	r2, r2, #4	@ yy, yy,
 513              	.LVL20:
 514              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 515              		.loc 1 83 9 view .LVU119
 516 0234 020056E1 		cmp	r6, r2	@ height, yy
 517 0238 BAFFFF8A 		bhi	.L17		@,
 518              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 519              		.loc 1 78 44 view .LVU120
 520 023c 10209DE5 		ldr	r2, [sp, #16]	@ w, %sfp
 521              	.LVL21:
 522              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 523              		.loc 1 78 5 view .LVU121
 524 0240 383094E5 		ldr	r3, [r4, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 525              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 526              		.loc 1 78 44 view .LVU122
 527 0244 012082E2 		add	r2, r2, #1	@ w, w,
 528              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 529              		.loc 1 78 5 view .LVU123
 530 0248 030052E1 		cmp	r2, r3	@ w, g_armwave_state.waves
 531              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 532              		.loc 1 78 44 view .LVU124
 533 024c 10208DE5 		str	r2, [sp, #16]	@ w, %sfp
 534              	.LVL22:
 535              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 536              		.loc 1 78 5 view .LVU125
 537 0250 ADFFFFBA 		blt	.L18		@,
 538              	.LVL23:
 539              	.L11:
 540              	@ armwave.c:110: }
 107:armwave.c     ****             }
 108:armwave.c     ****         }
 109:armwave.c     ****     }
 110:armwave.c     **** }
 541              		.loc 1 110 1 view .LVU126
 542 0254 1CD08DE2 		add	sp, sp, #28	@,,
 543              		.cfi_def_cfa_offset 36
 544              		@ sp needed	@
 545 0258 F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 546              	.LVL24:
 547              	.L28:
 548              		.loc 1 110 1 view .LVU127
 549              		.align	2
 550              	.L27:
 551 025c 00000000 		.word	g_armwave_state
 552 0260 20000000 		.word	.LC2
 553              		.cfi_endproc
 554              	.LFE59:
 556              		.align	2
 557              		.global	armwave_fill_pixbuf_scaled
 558              		.syntax unified
 559              		.arm
 560              		.fpu vfp
 562              	armwave_fill_pixbuf_scaled:
 563              	.LVL25:
 564              	.LFB60:
 111:armwave.c     **** 
 112:armwave.c     **** #if 0
 113:armwave.c     **** /*
 114:armwave.c     ****  * Fill a pixbuf with a 256-height waveform.
 115:armwave.c     ****  */
 116:armwave.c     **** void armwave_fill_pixbuf_256(uint32_t *out_buffer)
 117:armwave.c     **** {
 118:armwave.c     ****     uint32_t xx, yy, word, wave_word;
 119:armwave.c     ****     int rr, gg, bb, n, nsub, npix, i;
 120:armwave.c     ****     uint8_t r, g, b, value;
 121:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 122:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 123:armwave.c     ****     uint32_t offset;
 124:armwave.c     **** 
 125:armwave.c     ****     assert(out_buffer != NULL);
 126:armwave.c     **** 
 127:armwave.c     ****     // Buffer is sent non-rotated: we use GDK/GL to assemble and rotate it
 128:armwave.c     **** 
 129:armwave.c     ****     npix = g_armwave_state.target_width * 256;
 130:armwave.c     **** 
 131:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 132:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 133:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 134:armwave.c     ****         // most normal waveforms.
 135:armwave.c     ****         wave_word = *base_32ptr++;
 136:armwave.c     **** 
 137:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 138:armwave.c     ****             for(i = 0; i < 4; i++) {
 139:armwave.c     ****                 value = wave_word & 0xff;
 140:armwave.c     ****                 wave_word >>= 8;
 141:armwave.c     **** 
 142:armwave.c     ****                 if(value != 0) {
 143:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 144:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 145:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 146:armwave.c     **** 
 147:armwave.c     ****                     r = MIN(rr, 255);
 148:armwave.c     ****                     g = MIN(gg, 255);
 149:armwave.c     ****                     b = MIN(bb, 255);
 150:armwave.c     **** 
 151:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 152:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 153:armwave.c     **** 
 154:armwave.c     ****                     // Is there a better way?
 155:armwave.c     ****                     nsub = n + i;
 156:armwave.c     ****                     xx = nsub & 0xff;
 157:armwave.c     ****                     yy = nsub >> 8;
 158:armwave.c     ****                     offset = yy + (xx * g_armwave_state.target_width);
 159:armwave.c     ****                     *(out_buffer_base + offset) = word;
 160:armwave.c     ****                 }
 161:armwave.c     ****             }
 162:armwave.c     ****         } 
 163:armwave.c     ****     }
 164:armwave.c     **** }
 165:armwave.c     **** #endif
 166:armwave.c     **** 
 167:armwave.c     **** /*
 168:armwave.c     ****  * Fill a pixbuf with a multiple of a 256-height waveform.
 169:armwave.c     ****  * Rows are repeated as necessary.
 170:armwave.c     ****  */
 171:armwave.c     **** void armwave_fill_pixbuf_scaled(uint32_t *out_buffer)
 172:armwave.c     **** {
 565              		.loc 1 172 1 is_stmt 1 view -0
 566              		.cfi_startproc
 567              		@ args = 0, pretend = 0, frame = 8
 568              		@ frame_needed = 0, uses_anonymous_args = 0
 173:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 569              		.loc 1 173 5 view .LVU129
 174:armwave.c     ****     // uint32_t ysub;
 175:armwave.c     ****     int rr, gg, bb, n, nsub, npix, w;
 570              		.loc 1 175 5 view .LVU130
 176:armwave.c     ****     uint8_t r, g, b, value; 
 571              		.loc 1 176 5 view .LVU131
 177:armwave.c     ****     // uint8_t row;
 178:armwave.c     ****     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 572              		.loc 1 178 5 view .LVU132
 573              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 574              		.loc 1 172 1 is_stmt 0 view .LVU133
 575 0264 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 576              		.cfi_def_cfa_offset 36
 577              		.cfi_offset 4, -36
 578              		.cfi_offset 5, -32
 579              		.cfi_offset 6, -28
 580              		.cfi_offset 7, -24
 581              		.cfi_offset 8, -20
 582              		.cfi_offset 9, -16
 583              		.cfi_offset 10, -12
 584              		.cfi_offset 11, -8
 585              		.cfi_offset 14, -4
 586              	@ armwave.c:182:     assert(out_buffer != NULL);
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 180:armwave.c     ****     uint32_t offset;
 181:armwave.c     **** 
 182:armwave.c     ****     assert(out_buffer != NULL);
 587              		.loc 1 182 5 view .LVU134
 588 0268 006050E2 		subs	r6, r0, #0	@ out_buffer, out_buffer
 589              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 590              		.loc 1 178 15 view .LVU135
 591 026c 5C519FE5 		ldr	r5, .L51	@ tmp221,
 592              	@ armwave.c:172: {
 172:armwave.c     ****     uint32_t xx, yy, ye, y, word, wave_word;
 593              		.loc 1 172 1 view .LVU136
 594 0270 0CD04DE2 		sub	sp, sp, #12	@,,
 595              		.cfi_def_cfa_offset 48
 596              	@ armwave.c:178:     uint32_t *base_32ptr = (uint32_t*)g_armwave_state.ch1_buffer;
 178:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 597              		.loc 1 178 15 view .LVU137
 598 0274 044095E5 		ldr	r4, [r5, #4]	@ base_32ptr, g_armwave_state.ch1_buffer
 599              	.LVL26:
 179:armwave.c     ****     uint32_t *out_buffer_base = out_buffer;
 600              		.loc 1 179 5 is_stmt 1 view .LVU138
 180:armwave.c     **** 
 601              		.loc 1 180 5 view .LVU139
 602              		.loc 1 182 5 view .LVU140
 603 0278 4F00000A 		beq	.L48		@,
 183:armwave.c     **** 
 184:armwave.c     ****     // we don't really want to be doing this
 185:armwave.c     ****     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target_height * 4);
 604              		.loc 1 185 5 view .LVU141
 605              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 606              		.loc 1 185 59 is_stmt 0 view .LVU142
 607 027c 583095E5 		ldr	r3, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 608 0280 5C2095E5 		ldr	r2, [r5, #92]	@ g_armwave_state.target_height, g_armwave_state.target_height
 609              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 610              		.loc 1 185 5 view .LVU143
 611 0284 0110A0E3 		mov	r1, #1	@,
 612              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 613              		.loc 1 185 59 view .LVU144
 614 0288 920302E0 		mul	r2, r2, r3	@ tmp186, g_armwave_state.target_height, g_armwave_state.target_width
 615              	@ armwave.c:185:     memset(out_buffer, 0x01, g_armwave_state.target_width * g_armwave_state.target
 616              		.loc 1 185 5 view .LVU145
 617 028c 0221A0E1 		lsl	r2, r2, #2	@, tmp186,
 618 0290 FEFFFFEB 		bl	memset		@
 619              	.LVL27:
 186:armwave.c     **** 
 187:armwave.c     ****     npix = g_armwave_state.target_width * 256; 
 620              		.loc 1 187 5 is_stmt 1 view .LVU146
 621              	@ armwave.c:187:     npix = g_armwave_state.target_width * 256; 
 622              		.loc 1 187 10 is_stmt 0 view .LVU147
 623 0294 588095E5 		ldr	r8, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 624 0298 0884A0E1 		lsl	r8, r8, #8	@ npix, g_armwave_state.target_width,
 625              	.LVL28:
 188:armwave.c     ****     //vscale = g_armwave_state.target_height >> 8;
 189:armwave.c     **** 
 190:armwave.c     ****     for(n = 0; n < npix; n += 4) {
 626              		.loc 1 190 5 is_stmt 1 view .LVU148
 627              		.loc 1 190 5 is_stmt 0 view .LVU149
 628 029c 000058E3 		cmp	r8, #0	@ npix,
 629 02a0 0C0000DA 		ble	.L29		@,
 630              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 191:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 192:armwave.c     ****         // each byte.  We can afford to do this because most pixels will be blank for
 193:armwave.c     ****         // most normal waveforms.
 194:armwave.c     ****         wave_word = *base_32ptr++;
 195:armwave.c     **** 
 196:armwave.c     ****         if(COND_UNLIKELY(wave_word != 0)) {
 197:armwave.c     ****             for(w = 0; w < 4; w++) {
 198:armwave.c     ****                 value = wave_word & 0xff;
 199:armwave.c     ****                 wave_word >>= 8;
 200:armwave.c     **** 
 201:armwave.c     ****                 if(value != 0) {
 202:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 203:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 631              		.loc 1 203 52 view .LVU150
 632 02a4 FE36D5E1 		ldrsh	r3, [r5, #110]	@ _15, g_armwave_state.ch1_color.g
 633              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 634              		.loc 1 202 52 view .LVU151
 635 02a8 FCB6D5E1 		ldrsh	fp, [r5, #108]	@ _11, g_armwave_state.ch1_color.r
 636              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 205:armwave.c     **** 
 206:armwave.c     ****                     r = MIN(rr, 255);
 207:armwave.c     ****                     g = MIN(gg, 255);
 208:armwave.c     ****                     b = MIN(bb, 255);
 209:armwave.c     **** 
 210:armwave.c     ****                     // Ensure 100% alpha channel, if it is used
 211:armwave.c     ****                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 212:armwave.c     **** 
 213:armwave.c     ****                     // Do line scaling as necessary.
 214:armwave.c     ****                     /*
 215:armwave.c     ****                     nsub = n + w;
 216:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale;
 217:armwave.c     ****                     xx = (nsub >> 8);
 218:armwave.c     **** 
 219:armwave.c     ****                     for(row = 0; row < g_armwave_state.vscale; row++) {
 220:armwave.c     ****                         offset = (xx + ((yy + row) * g_armwave_state.target_width)); 
 221:armwave.c     ****                         *(out_buffer_base + offset) = word;
 222:armwave.c     ****                     }
 223:armwave.c     ****                     */
 224:armwave.c     **** 
 225:armwave.c     ****                     nsub = n + w;
 226:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 637              		.loc 1 226 57 view .LVU152
 638 02ac 0A6AD5ED 		vldr.32	s13, [r5, #40]	@ _32, g_armwave_state.vscale_frac
 639              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 640              		.loc 1 203 52 view .LVU153
 641 02b0 00308DE5 		str	r3, [sp]	@ _15, %sfp
 642              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 643              		.loc 1 204 52 view .LVU154
 644 02b4 F037D5E1 		ldrsh	r3, [r5, #112]	@ _18, g_armwave_state.ch1_color.b
 645              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 646              		.loc 1 190 11 view .LVU155
 647 02b8 0010A0E3 		mov	r1, #0	@ n,
 648              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 649              		.loc 1 204 52 view .LVU156
 650 02bc 04308DE5 		str	r3, [sp, #4]	@ _18, %sfp
 651              	.LVL29:
 652              	.L36:
 194:armwave.c     **** 
 653              		.loc 1 194 9 is_stmt 1 view .LVU157
 654              	@ armwave.c:194:         wave_word = *base_32ptr++;
 194:armwave.c     **** 
 655              		.loc 1 194 19 is_stmt 0 view .LVU158
 656 02c0 043094E4 		ldr	r3, [r4], #4	@ wave_word, MEM[base: base_32ptr_60, offset: 4294967292B]
 657              	.LVL30:
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 658              		.loc 1 196 9 is_stmt 1 view .LVU159
 659              	@ armwave.c:196:         if(COND_UNLIKELY(wave_word != 0)) {
 196:armwave.c     ****             for(w = 0; w < 4; w++) {
 660              		.loc 1 196 11 is_stmt 0 view .LVU160
 661 02c4 000053E3 		cmp	r3, #0	@ wave_word,
 662 02c8 0400001A 		bne	.L49		@,
 663              	.L32:
 664              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 665              		.loc 1 190 28 view .LVU161
 666 02cc 041081E2 		add	r1, r1, #4	@ n, n,
 667              	.LVL31:
 668              	@ armwave.c:190:     for(n = 0; n < npix; n += 4) {
 190:armwave.c     ****         // Read a 32-bit word at a time.  If any bits are nonzero, we need to process
 669              		.loc 1 190 5 view .LVU162
 670 02d0 010058E1 		cmp	r8, r1	@ npix, n
 671 02d4 F9FFFFCA 		bgt	.L36		@,
 672              	.LVL32:
 673              	.L29:
 674              	@ armwave.c:238: }
 227:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 228:armwave.c     ****                     xx = (nsub >> 8);
 229:armwave.c     **** 
 230:armwave.c     ****                     for(y = yy; y < ye; y++) {
 231:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 232:armwave.c     ****                         *(out_buffer_base + offset) = word;
 233:armwave.c     ****                     }
 234:armwave.c     ****                 }
 235:armwave.c     ****             }
 236:armwave.c     ****         }
 237:armwave.c     ****     }
 238:armwave.c     **** }
 675              		.loc 1 238 1 view .LVU163
 676 02d8 0CD08DE2 		add	sp, sp, #12	@,,
 677              		.cfi_remember_state
 678              		.cfi_def_cfa_offset 36
 679              		@ sp needed	@
 680 02dc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 681              	.LVL33:
 682              	.L49:
 683              		.cfi_restore_state
 684              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 685              		.loc 1 201 19 view .LVU164
 686 02e0 FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 687              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 688              		.loc 1 197 19 view .LVU165
 689 02e4 0070A0E3 		mov	r7, #0	@ w,
 690              	.LVL34:
 198:armwave.c     ****                 wave_word >>= 8;
 691              		.loc 1 198 17 is_stmt 1 view .LVU166
 199:armwave.c     **** 
 692              		.loc 1 199 17 view .LVU167
 693              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 694              		.loc 1 199 27 is_stmt 0 view .LVU168
 695 02e8 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 696              	.LVL35:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 697              		.loc 1 201 17 is_stmt 1 view .LVU169
 698              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 699              		.loc 1 201 19 is_stmt 0 view .LVU170
 700 02ec 0500001A 		bne	.L50		@,
 701              	.L33:
 702              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 703              		.loc 1 197 32 view .LVU171
 704 02f0 017087E2 		add	r7, r7, #1	@ w, w,
 705              	.LVL36:
 706              	@ armwave.c:197:             for(w = 0; w < 4; w++) {
 197:armwave.c     ****                 value = wave_word & 0xff;
 707              		.loc 1 197 13 view .LVU172
 708 02f4 040057E3 		cmp	r7, #4	@ w,
 709 02f8 F3FFFF0A 		beq	.L32		@,
 198:armwave.c     ****                 wave_word >>= 8;
 710              		.loc 1 198 17 is_stmt 1 view .LVU173
 711              	.LVL37:
 199:armwave.c     **** 
 712              		.loc 1 199 17 view .LVU174
 713              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 714              		.loc 1 201 19 is_stmt 0 view .LVU175
 715 02fc FF2013E2 		ands	r2, r3, #255	@ _12, wave_word,
 716              	@ armwave.c:199:                 wave_word >>= 8;
 199:armwave.c     **** 
 717              		.loc 1 199 27 view .LVU176
 718 0300 2334A0E1 		lsr	r3, r3, #8	@ wave_word, wave_word,
 719              	.LVL38:
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 720              		.loc 1 201 17 is_stmt 1 view .LVU177
 721              	@ armwave.c:201:                 if(value != 0) {
 201:armwave.c     ****                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 722              		.loc 1 201 19 is_stmt 0 view .LVU178
 723 0304 F9FFFF0A 		beq	.L33		@,
 724              	.L50:
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 725              		.loc 1 202 21 is_stmt 1 view .LVU179
 726              	.LVL39:
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 727              		.loc 1 203 21 view .LVU180
 204:armwave.c     **** 
 728              		.loc 1 204 21 view .LVU181
 206:armwave.c     ****                     g = MIN(gg, 255);
 729              		.loc 1 206 21 view .LVU182
 207:armwave.c     ****                     b = MIN(bb, 255);
 730              		.loc 1 207 21 view .LVU183
 208:armwave.c     **** 
 731              		.loc 1 208 21 view .LVU184
 211:armwave.c     **** 
 732              		.loc 1 211 21 view .LVU185
 733              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 734              		.loc 1 204 55 is_stmt 0 view .LVU186
 735 0308 04009DE5 		ldr	r0, [sp, #4]	@ _18, %sfp
 736 030c 07E081E0 		add	lr, r1, r7	@ _126, n, w
 737 0310 90020AE0 		mul	r10, r0, r2	@ tmp199, _18, _12
 738              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 739              		.loc 1 226 32 view .LVU187
 740 0314 7E00EFE6 		uxtb	r0, lr	@ _30, _126
 741              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 742              		.loc 1 227 41 view .LVU188
 743 0318 01C080E2 		add	ip, r0, #1	@ tmp214, _30,
 744              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 745              		.loc 1 226 40 view .LVU189
 746 031c 900A07EE 		vmov	s15, r0	@ int	@ _30, _30
 747              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 748              		.loc 1 227 41 view .LVU190
 749 0320 10CA07EE 		vmov	s14, ip	@ int	@ tmp214, tmp214
 750              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 751              		.loc 1 203 55 view .LVU191
 752 0324 00009DE5 		ldr	r0, [sp]	@ _15, %sfp
 753              	@ armwave.c:204:                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 204:armwave.c     **** 
 754              		.loc 1 204 24 view .LVU192
 755 0328 4AA4A0E1 		asr	r10, r10, #8	@ bb, tmp199,
 756              	.LVL40:
 757              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 758              		.loc 1 226 40 view .LVU193
 759 032c E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp212, _30
 760              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 761              		.loc 1 227 46 view .LVU194
 762 0330 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp215, tmp214
 763              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 764              		.loc 1 203 55 view .LVU195
 765 0334 90020CE0 		mul	ip, r0, r2	@ tmp203, _15, _12
 766              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 767              		.loc 1 202 55 view .LVU196
 768 0338 920B02E0 		mul	r2, r2, fp	@ tmp209, _12, _11
 769              	.LVL41:
 770              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 771              		.loc 1 208 25 view .LVU197
 772 033c FF005AE3 		cmp	r10, #255	@ bb,
 773              	@ armwave.c:203:                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 203:armwave.c     ****                     bb = (g_armwave_state.ch1_color.b * value) >> 8;
 774              		.loc 1 203 24 view .LVU198
 775 0340 4CC4A0E1 		asr	ip, ip, #8	@ gg, tmp203,
 776              	.LVL42:
 777              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 778              		.loc 1 226 40 view .LVU199
 779 0344 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp213, tmp212, _32
 780              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 781              		.loc 1 227 46 view .LVU200
 782 0348 267A27EE 		vmul.f32	s14, s14, s13	@ tmp216, tmp215, _32
 783              	@ armwave.c:202:                     rr = (g_armwave_state.ch1_color.r * value) >> 8;
 202:armwave.c     ****                     gg = (g_armwave_state.ch1_color.g * value) >> 8;
 784              		.loc 1 202 24 view .LVU201
 785 034c 4204A0E1 		asr	r0, r2, #8	@ rr, tmp209,
 786              	.LVL43:
 787              	@ armwave.c:208:                     b = MIN(bb, 255);
 208:armwave.c     **** 
 788              		.loc 1 208 25 view .LVU202
 789 0350 FFA0A0A3 		movge	r10, #255	@ bb,
 790              	.LVL44:
 791              	@ armwave.c:207:                     g = MIN(gg, 255);
 207:armwave.c     ****                     b = MIN(bb, 255);
 792              		.loc 1 207 25 view .LVU203
 793 0354 FF005CE3 		cmp	ip, #255	@ gg,
 794 0358 FFC0A0A3 		movge	ip, #255	@ gg,
 795              	.LVL45:
 796              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 797              		.loc 1 206 25 view .LVU204
 798 035c FF0050E3 		cmp	r0, #255	@ rr,
 799              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 800              		.loc 1 211 56 view .LVU205
 801 0360 0CC4A0E1 		lsl	ip, ip, #8	@ tmp204, gg,
 802              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 803              		.loc 1 226 24 view .LVU206
 804 0364 E77AFCEE 		vcvt.u32.f32	s15, s15	@ yy, tmp213
 805              	@ armwave.c:206:                     r = MIN(rr, 255);
 206:armwave.c     ****                     g = MIN(gg, 255);
 806              		.loc 1 206 25 view .LVU207
 807 0368 FF00A0A3 		movge	r0, #255	@ rr,
 808              	.LVL46:
 809              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 810              		.loc 1 211 44 view .LVU208
 811 036c 0AA8A0E1 		lsl	r10, r10, #16	@ tmp200, bb,
 812 0370 FFA80AE2 		and	r10, r10, #16711680	@ tmp201, tmp200,
 813              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 814              		.loc 1 211 56 view .LVU209
 815 0374 7CC0FFE6 		uxth	ip, ip	@ tmp205, tmp204
 816              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 817              		.loc 1 211 51 view .LVU210
 818 0378 0CC08AE1 		orr	ip, r10, ip	@ tmp207, tmp201, tmp205
 819              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 820              		.loc 1 211 62 view .LVU211
 821 037c 7000EFE6 		uxtb	r0, r0	@ rr, rr
 822 0380 00008CE1 		orr	r0, ip, r0	@ tmp211, tmp207, rr
 823              	@ armwave.c:226:                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 824              		.loc 1 226 24 view .LVU212
 825 0384 902A17EE 		vmov	r2, s15	@ int	@ yy, yy
 826              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 827              		.loc 1 227 24 view .LVU213
 828 0388 C77AFCEE 		vcvt.u32.f32	s15, s14	@ ye, tmp216
 829              	@ armwave.c:211:                     word = 0xff000000 | (b << 16) | (g << 8) | r;
 211:armwave.c     **** 
 830              		.loc 1 211 26 view .LVU214
 831 038c FFC480E3 		orr	ip, r0, #-16777216	@ word, tmp211,
 832              	.LVL47:
 225:armwave.c     ****                     yy = (nsub & 0xff) * g_armwave_state.vscale_frac;
 833              		.loc 1 225 21 is_stmt 1 view .LVU215
 226:armwave.c     ****                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 834              		.loc 1 226 21 view .LVU216
 227:armwave.c     ****                     xx = (nsub >> 8);
 835              		.loc 1 227 21 view .LVU217
 836              	@ armwave.c:228:                     xx = (nsub >> 8);
 228:armwave.c     **** 
 837              		.loc 1 228 32 is_stmt 0 view .LVU218
 838 0390 4EE4A0E1 		asr	lr, lr, #8	@ xx, _126,
 839              	.LVL48:
 840              	@ armwave.c:227:                     ye = ((nsub & 0xff) + 1) * g_armwave_state.vscale_frac;
 227:armwave.c     ****                     xx = (nsub >> 8);
 841              		.loc 1 227 24 view .LVU219
 842 0394 909A17EE 		vmov	r9, s15	@ int	@ ye, ye
 843              	.LVL49:
 228:armwave.c     **** 
 844              		.loc 1 228 21 is_stmt 1 view .LVU220
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 845              		.loc 1 230 21 view .LVU221
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 846              		.loc 1 230 21 is_stmt 0 view .LVU222
 847 0398 090052E1 		cmp	r2, r9	@ yy, ye
 848 039c D3FFFF2A 		bcs	.L33		@,
 849              	.LVL50:
 850              	.L34:
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 851              		.loc 1 231 25 is_stmt 1 discriminator 3 view .LVU223
 232:armwave.c     ****                     }
 852              		.loc 1 232 25 discriminator 3 view .LVU224
 853              	@ armwave.c:231:                         offset = (xx + (y * g_armwave_state.target_width)); 
 231:armwave.c     ****                         *(out_buffer_base + offset) = word;
 854              		.loc 1 231 43 is_stmt 0 discriminator 3 view .LVU225
 855 03a0 580095E5 		ldr	r0, [r5, #88]	@ g_armwave_state.target_width, g_armwave_state.target_width
 856              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 857              		.loc 1 232 43 discriminator 3 view .LVU226
 858 03a4 90E220E0 		mla	r0, r0, r2, lr	@ tmp220, g_armwave_state.target_width, yy, xx
 859              	.LVL51:
 860              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 861              		.loc 1 230 42 discriminator 3 view .LVU227
 862 03a8 012082E2 		add	r2, r2, #1	@ yy, yy,
 863              	.LVL52:
 864              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 865              		.loc 1 230 21 discriminator 3 view .LVU228
 866 03ac 020059E1 		cmp	r9, r2	@ ye, yy
 867              	@ armwave.c:232:                         *(out_buffer_base + offset) = word;
 232:armwave.c     ****                     }
 868              		.loc 1 232 53 discriminator 3 view .LVU229
 869 03b0 00C186E7 		str	ip, [r6, r0, lsl #2]	@ word, *_42
 870              	@ armwave.c:230:                     for(y = yy; y < ye; y++) {
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 871              		.loc 1 230 21 discriminator 3 view .LVU230
 872 03b4 F9FFFF1A 		bne	.L34		@,
 230:armwave.c     ****                         offset = (xx + (y * g_armwave_state.target_width)); 
 873              		.loc 1 230 21 discriminator 3 view .LVU231
 874 03b8 CCFFFFEA 		b	.L33		@
 875              	.LVL53:
 876              	.L48:
 182:armwave.c     **** 
 877              		.loc 1 182 5 is_stmt 1 discriminator 1 view .LVU232
 878 03bc 10309FE5 		ldr	r3, .L51+4	@,
 879 03c0 B620A0E3 		mov	r2, #182	@,
 880 03c4 0C109FE5 		ldr	r1, .L51+8	@,
 881 03c8 0C009FE5 		ldr	r0, .L51+12	@,
 882              	.LVL54:
 182:armwave.c     **** 
 883              		.loc 1 182 5 is_stmt 0 discriminator 1 view .LVU233
 884 03cc FEFFFFEB 		bl	__assert_fail		@
 885              	.LVL55:
 886              	.L52:
 887              		.align	2
 888              	.L51:
 889 03d0 00000000 		.word	g_armwave_state
 890 03d4 00000000 		.word	.LANCHOR0
 891 03d8 5C000000 		.word	.LC3
 892 03dc 68000000 		.word	.LC4
 893              		.cfi_endproc
 894              	.LFE60:
 896              		.align	2
 897              		.global	armwave_generate
 898              		.syntax unified
 899              		.arm
 900              		.fpu vfp
 902              	armwave_generate:
 903              	.LFB61:
 239:armwave.c     **** 
 240:armwave.c     **** /*
 241:armwave.c     ****  * Fill buffers with rendered waveform (only supports Ch1 so far.)
 242:armwave.c     ****  */
 243:armwave.c     **** void armwave_generate()
 244:armwave.c     **** {
 904              		.loc 1 244 1 is_stmt 1 view -0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 0, uses_anonymous_args = 0
 245:armwave.c     ****     uint32_t yy;
 908              		.loc 1 245 5 view .LVU235
 246:armwave.c     ****     uint32_t xx_rem = g_armwave_state.target_width, ypos = 0;
 909              		.loc 1 246 5 view .LVU236
 910              	.LVL56:
 247:armwave.c     **** 
 248:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 911              		.loc 1 248 5 view .LVU237
 912              	@ armwave.c:244: {
 244:armwave.c     ****     uint32_t yy;
 913              		.loc 1 244 1 is_stmt 0 view .LVU238
 914 03e0 F04F2DE9 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}	@
 915              		.cfi_def_cfa_offset 36
 916              		.cfi_offset 4, -36
 917              		.cfi_offset 5, -32
 918              		.cfi_offset 6, -28
 919              		.cfi_offset 7, -24
 920              		.cfi_offset 8, -20
 921              		.cfi_offset 9, -16
 922              		.cfi_offset 10, -12
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925 03e4 24D04DE2 		sub	sp, sp, #36	@,,
 926              		.cfi_def_cfa_offset 72
 927              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 928              		.loc 1 248 58 view .LVU239
 929 03e8 E0B19FE5 		ldr	fp, .L74	@ tmp333,
 930              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 931              		.loc 1 248 5 view .LVU240
 932 03ec 0010A0E3 		mov	r1, #0	@,
 933              	@ armwave.c:251:     for(yy = 0; yy < 2; yy++) {
 249:armwave.c     **** 
 250:armwave.c     ****     //for(yy = 0; yy < (g_armwave_state.wave_length / g_armwave_state.slice_height); yy++) {
 251:armwave.c     ****     for(yy = 0; yy < 2; yy++) {
 934              		.loc 1 251 12 view .LVU241
 935 03f0 18108DE5 		str	r1, [sp, #24]	@ yy, %sfp
 936              	@ armwave.c:248:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 248:armwave.c     **** 
 937              		.loc 1 248 5 view .LVU242
 938 03f4 50209BE5 		ldr	r2, [fp, #80]	@, g_armwave_state.ch_buff_size
 939 03f8 04009BE5 		ldr	r0, [fp, #4]	@, g_armwave_state.ch1_buffer
 940 03fc FEFFFFEB 		bl	memset		@
 941              	.LVL57:
 942              		.loc 1 251 5 is_stmt 1 view .LVU243
 943              	.L55:
 252:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 253:armwave.c     **** 
 254:armwave.c     ****         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armwave_state.slice_r
 944              		.loc 1 254 9 discriminator 3 view .LVU244
 945 0400 18309DE5 		ldr	r3, [sp, #24]	@ yy, %sfp
 946 0404 44509BE5 		ldr	r5, [fp, #68]	@ g_armwave_state.slice_height, g_armwave_state.slice_height
 947              	.LBB10:
 948              	.LBB11:
 949              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 950              		.loc 1 71 65 is_stmt 0 discriminator 3 view .LVU245
 951 0408 24209BE5 		ldr	r2, [fp, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 952              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 953              		.loc 1 71 130 discriminator 3 view .LVU246
 954 040c 40109BE5 		ldr	r1, [fp, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 955              	.LBE11:
 956              	.LBE10:
 957              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 958              		.loc 1 254 9 discriminator 3 view .LVU247
 959 0410 950305E0 		mul	r5, r5, r3	@ _6, g_armwave_state.slice_height, yy
 960              	.LBB15:
 961              	.LBB12:
 962              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 963              		.loc 1 71 40 discriminator 3 view .LVU248
 964 0414 04409BE5 		ldr	r4, [fp, #4]	@ _15, g_armwave_state.ch1_buffer
 965              	.LBE12:
 966              	.LBE15:
 967              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 968              		.loc 1 254 9 discriminator 3 view .LVU249
 969 0418 48009BE5 		ldr	r0, [fp, #72]	@ _8, g_armwave_state.slice_record_height
 970              	.LBB16:
 971              	.LBB13:
 972              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 973              		.loc 1 71 65 discriminator 3 view .LVU250
 974 041c 920502E0 		mul	r2, r2, r5	@ tmp233, g_armwave_state.cmp_x_bitdepth_scale, _6
 975              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 976              		.loc 1 73 5 discriminator 3 view .LVU251
 977 0420 0430A0E1 		mov	r3, r4	@, _15
 978              	.LBE13:
 979              	.LBE16:
 980              	@ armwave.c:254:         render_nonaa_to_buffer_1ch_slice(yy * g_armwave_state.slice_height, g_armw
 981              		.loc 1 254 9 discriminator 3 view .LVU252
 982 0424 14008DE5 		str	r0, [sp, #20]	@ _8, %sfp
 983              	.LVL58:
 984              	.LBB17:
 985              	.LBI10:
  62:armwave.c     **** {
 986              		.loc 1 62 6 is_stmt 1 discriminator 3 view .LVU253
 987              	.LBB14:
  64:armwave.c     ****     uint32_t value, word;
 988              		.loc 1 64 5 discriminator 3 view .LVU254
  65:armwave.c     ****     uint8_t *wave_base;
 989              		.loc 1 65 5 discriminator 3 view .LVU255
  66:armwave.c     ****     uint8_t *write_buffer_base;
 990              		.loc 1 66 5 discriminator 3 view .LVU256
  67:armwave.c     ****     uint8_t *write_buffer;
 991              		.loc 1 67 5 discriminator 3 view .LVU257
  68:armwave.c     **** 
 992              		.loc 1 68 5 discriminator 3 view .LVU258
  71:armwave.c     **** 
 993              		.loc 1 71 5 discriminator 3 view .LVU259
 994              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 995              		.loc 1 71 105 is_stmt 0 discriminator 3 view .LVU260
 996 0428 2224A0E1 		lsr	r2, r2, #8	@ tmp235, tmp233,
 997              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 998              		.loc 1 73 5 discriminator 3 view .LVU261
 999 042c 08008DE5 		str	r0, [sp, #8]	@ _8,
 1000              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1001              		.loc 1 71 130 discriminator 3 view .LVU262
 1002 0430 910202E0 		mul	r2, r1, r2	@ _21, g_armwave_state.bitdepth_height, tmp235
 1003              	@ armwave.c:73:     printf("wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d height=%d\n", \
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1004              		.loc 1 73 5 discriminator 3 view .LVU263
 1005 0434 04508DE5 		str	r5, [sp, #4]	@ _6,
 1006              	@ armwave.c:71:     write_buffer_base = g_armwave_state.ch1_buffer + (((slice_y * g_armwave_state.c
  71:armwave.c     **** 
 1007              		.loc 1 71 23 discriminator 3 view .LVU264
 1008 0438 024084E0 		add	r4, r4, r2	@ write_buffer_base, _15, _21
 1009              	.LVL59:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1010              		.loc 1 73 5 is_stmt 1 discriminator 3 view .LVU265
 1011 043c 00208DE5 		str	r2, [sp]	@ _21,
 1012 0440 14109BE5 		ldr	r1, [fp, #20]	@, g_armwave_state.wave_buffer
 1013 0444 0420A0E1 		mov	r2, r4	@, write_buffer_base
 1014 0448 84019FE5 		ldr	r0, .L74+4	@,
 1015              	.LVL60:
  73:armwave.c     ****         g_armwave_state.wave_buffer, write_buffer_base, g_armwave_state.ch1_buffer, \
 1016              		.loc 1 73 5 is_stmt 0 discriminator 3 view .LVU266
 1017 044c FEFFFFEB 		bl	printf		@
 1018              	.LVL61:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1019              		.loc 1 78 5 is_stmt 1 discriminator 3 view .LVU267
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1020              		.loc 1 78 5 is_stmt 0 discriminator 3 view .LVU268
 1021 0450 38309BE5 		ldr	r3, [fp, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1022 0454 000053E3 		cmp	r3, #0	@ g_armwave_state.waves,
 1023 0458 550000DA 		ble	.L63		@,
 1024 045c 14309DE5 		ldr	r3, [sp, #20]	@ _8, %sfp
 1025 0460 000053E3 		cmp	r3, #0	@ _8,
 1026 0464 5200000A 		beq	.L63		@,
 1027              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1028              		.loc 1 78 11 view .LVU269
 1029 0468 0060A0E3 		mov	r6, #0	@ w,
 1030 046c 043045E2 		sub	r3, r5, #4	@ tmp334, _6,
 1031 0470 1C308DE5 		str	r3, [sp, #28]	@ tmp334, %sfp
 1032              	.LVL62:
 1033              	.L62:
  79:armwave.c     **** 
 1034              		.loc 1 79 9 is_stmt 1 view .LVU270
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1035              		.loc 1 83 9 view .LVU271
 1036              	@ armwave.c:79:         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wa
  79:armwave.c     **** 
 1037              		.loc 1 79 64 is_stmt 0 view .LVU272
 1038 0474 34309BE5 		ldr	r3, [fp, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 1039 0478 1C209DE5 		ldr	r2, [sp, #28]	@ tmp334, %sfp
 1040 047c 14E09BE5 		ldr	lr, [fp, #20]	@ g_armwave_state.wave_buffer, g_armwave_state.wave_buffer
 1041 0480 932623E0 		mla	r3, r3, r6, r2	@ tmp248, g_armwave_state.wave_stride, w, tmp334
 1042              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1043              		.loc 1 83 16 view .LVU273
 1044 0484 0010A0E3 		mov	r1, #0	@ yy,
 1045 0488 03E08EE0 		add	lr, lr, r3	@ ivtmp.66, g_armwave_state.wave_buffer, tmp248
 1046              	.LVL63:
 1047              	.L61:
  86:armwave.c     **** 
 1048              		.loc 1 86 13 is_stmt 1 view .LVU274
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1049              		.loc 1 100 17 view .LVU275
 105:armwave.c     ****                 word >>= 8;
 1050              		.loc 1 105 17 view .LVU276
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1051              		.loc 1 100 17 view .LVU277
 105:armwave.c     ****                 word >>= 8;
 1052              		.loc 1 105 17 view .LVU278
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1053              		.loc 1 100 17 view .LVU279
 105:armwave.c     ****                 word >>= 8;
 1054              		.loc 1 105 17 view .LVU280
 100:armwave.c     ****                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCOORD_MULT_SHIFT) *
 1055              		.loc 1 100 17 view .LVU281
 105:armwave.c     ****                 word >>= 8;
 1056              		.loc 1 105 17 view .LVU282
 1057              	@ armwave.c:86:             word = *(uint32_t*)(wave_base + yy);
  86:armwave.c     **** 
 1058              		.loc 1 86 18 is_stmt 0 view .LVU283
 1059 048c 0430BEE5 		ldr	r3, [lr, #4]!	@ word, MEM[base: _251, offset: 0B]
 1060              	.LVL64:
  88:armwave.c     ****                 // maybe worth preloading the base address here...
 1061              		.loc 1 88 13 is_stmt 1 view .LVU284
  90:armwave.c     ****                 
 1062              		.loc 1 90 17 view .LVU285
  93:armwave.c     ****                     continue;
 1063              		.loc 1 93 17 view .LVU286
 1064              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1065              		.loc 1 101 34 is_stmt 0 view .LVU287
 1066 0490 01A081E2 		add	r10, r1, #1	@ tmp278, yy,
 1067              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1068              		.loc 1 93 20 view .LVU288
 1069 0494 FF7013E2 		ands	r7, r3, #255	@ scale_value, word,
 1070 0498 0120A003 		moveq	r2, #1	@ tmp251,
 1071 049c 0020A013 		movne	r2, #0	@ tmp251,
 1072              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1073              		.loc 1 93 19 view .LVU289
 1074 04a0 FF0057E3 		cmp	r7, #255	@ scale_value,
 1075 04a4 01208203 		orreq	r2, r2, #1	@,, tmp256, tmp251
 1076 04a8 000052E3 		cmp	r2, #0	@ tmp256,
 1077              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1078              		.loc 1 101 34 view .LVU290
 1079 04ac 029081E2 		add	r9, r1, #2	@ tmp299, yy,
 1080 04b0 038081E2 		add	r8, r1, #3	@ tmp319, yy,
 1081              	.LVL65:
 1082              	@ armwave.c:106:                 word >>= 8;
 106:armwave.c     ****             }
 1083              		.loc 1 106 22 view .LVU291
 1084 04b4 23C4A0E1 		lsr	ip, r3, #8	@ word, word,
 1085 04b8 2308A0E1 		lsr	r0, r3, #16	@ word, word,
 1086              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1087              		.loc 1 93 19 view .LVU292
 1088 04bc 3400001A 		bne	.L64		@,
 1089              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1090              		.loc 1 101 34 view .LVU293
 1091 04c0 24209BE5 		ldr	r2, [fp, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1092              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1093              		.loc 1 93 20 view .LVU294
 1094 04c4 FFC01CE2 		ands	ip, ip, #255	@ scale_value, word,
 1095 04c8 0150A003 		moveq	r5, #1	@ tmp271,
 1096              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1097              		.loc 1 101 34 view .LVU295
 1098 04cc 920102E0 		mul	r2, r2, r1	@ tmp258, g_armwave_state.cmp_x_bitdepth_scale, yy
 1099              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1100              		.loc 1 93 20 view .LVU296
 1101 04d0 0050A013 		movne	r5, #0	@ tmp271,
 1102              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1103              		.loc 1 93 19 view .LVU297
 1104 04d4 FF005CE3 		cmp	ip, #255	@ scale_value,
 1105 04d8 01508503 		orreq	r5, r5, #1	@,, tmp276, tmp271
 1106 04dc 000055E3 		cmp	r5, #0	@ tmp276,
 1107              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1108              		.loc 1 105 47 view .LVU298
 1109 04e0 40509BE5 		ldr	r5, [fp, #64]	@ tmp352, g_armwave_state.bitdepth_height
 1110              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1111              		.loc 1 101 74 view .LVU299
 1112 04e4 2224A0E1 		lsr	r2, r2, #8	@ tmp260, tmp258,
 1113              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1114              		.loc 1 105 47 view .LVU300
 1115 04e8 957222E0 		mla	r2, r5, r2, r7	@ tmp264, tmp352, tmp260, scale_value
 1116 04ec 0250D4E7 		ldrb	r5, [r4, r2]	@ zero_extendqisi2	@ *_91, *_91
 1117 04f0 015085E2 		add	r5, r5, #1	@ tmp267, *_91,
 1118 04f4 0250C4E7 		strb	r5, [r4, r2]	@ tmp267, *_91
 1119              	.LVL66:
 106:armwave.c     ****             }
 1120              		.loc 1 106 17 is_stmt 1 view .LVU301
  90:armwave.c     ****                 
 1121              		.loc 1 90 17 view .LVU302
  93:armwave.c     ****                     continue;
 1122              		.loc 1 93 17 view .LVU303
 1123              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1124              		.loc 1 93 19 is_stmt 0 view .LVU304
 1125 04f8 2500001A 		bne	.L64		@,
 1126              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1127              		.loc 1 101 34 view .LVU305
 1128 04fc 24509BE5 		ldr	r5, [fp, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1129              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1130              		.loc 1 101 99 view .LVU306
 1131 0500 40209BE5 		ldr	r2, [fp, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1132              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1133              		.loc 1 93 20 view .LVU307
 1134 0504 FF0010E2 		ands	r0, r0, #255	@ scale_value, word,
 1135              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1136              		.loc 1 101 34 view .LVU308
 1137 0508 950A0AE0 		mul	r10, r5, r10	@ tmp279, g_armwave_state.cmp_x_bitdepth_scale, tmp278
 1138              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1139              		.loc 1 93 20 view .LVU309
 1140 050c 0150A003 		moveq	r5, #1	@ tmp292,
 1141 0510 0050A013 		movne	r5, #0	@ tmp292,
 1142              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1143              		.loc 1 101 74 view .LVU310
 1144 0514 2AA4A0E1 		lsr	r10, r10, #8	@ tmp281, tmp279,
 1145              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1146              		.loc 1 93 19 view .LVU311
 1147 0518 FF0050E3 		cmp	r0, #255	@ scale_value,
 1148 051c 01508503 		orreq	r5, r5, #1	@,, tmp297, tmp292
 1149              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1150              		.loc 1 105 47 view .LVU312
 1151 0520 92CA2CE0 		mla	ip, r2, r10, ip	@ tmp285, g_armwave_state.bitdepth_height, tmp281, scale_value
 1152              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1153              		.loc 1 93 19 view .LVU313
 1154 0524 000055E3 		cmp	r5, #0	@ tmp297,
 1155              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1156              		.loc 1 105 47 view .LVU314
 1157 0528 0C20D4E7 		ldrb	r2, [r4, ip]	@ zero_extendqisi2	@ *_121, *_121
 1158 052c 012082E2 		add	r2, r2, #1	@ tmp288, *_121,
 1159 0530 0C20C4E7 		strb	r2, [r4, ip]	@ tmp288, *_121
 106:armwave.c     ****             }
 1160              		.loc 1 106 17 is_stmt 1 view .LVU315
 1161              	.LVL67:
  90:armwave.c     ****                 
 1162              		.loc 1 90 17 view .LVU316
  93:armwave.c     ****                     continue;
 1163              		.loc 1 93 17 view .LVU317
 1164              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1165              		.loc 1 93 19 is_stmt 0 view .LVU318
 1166 0534 1600001A 		bne	.L64		@,
 1167              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1168              		.loc 1 101 34 view .LVU319
 1169 0538 24209BE5 		ldr	r2, [fp, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1170              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1171              		.loc 1 101 99 view .LVU320
 1172 053c 40C09BE5 		ldr	ip, [fp, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1173              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1174              		.loc 1 93 20 view .LVU321
 1175 0540 233CB0E1 		lsrs	r3, r3, #24	@ word, word,
 1176              	.LVL68:
 1177              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1178              		.loc 1 101 34 view .LVU322
 1179 0544 920909E0 		mul	r9, r2, r9	@ tmp300, g_armwave_state.cmp_x_bitdepth_scale, tmp299
 1180              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1181              		.loc 1 93 20 view .LVU323
 1182 0548 0120A003 		moveq	r2, #1	@ tmp312,
 1183 054c 0020A013 		movne	r2, #0	@ tmp312,
 1184              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1185              		.loc 1 101 74 view .LVU324
 1186 0550 2994A0E1 		lsr	r9, r9, #8	@ tmp302, tmp300,
 1187              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1188              		.loc 1 93 19 view .LVU325
 1189 0554 FF0053E3 		cmp	r3, #255	@ word,
 1190 0558 01208203 		orreq	r2, r2, #1	@,, tmp317, tmp312
 1191              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1192              		.loc 1 105 47 view .LVU326
 1193 055c 9C0920E0 		mla	r0, ip, r9, r0	@ tmp306, g_armwave_state.bitdepth_height, tmp302, scale_value
 1194              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1195              		.loc 1 93 19 view .LVU327
 1196 0560 000052E3 		cmp	r2, #0	@ tmp317,
 1197              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1198              		.loc 1 105 47 view .LVU328
 1199 0564 0020D4E7 		ldrb	r2, [r4, r0]	@ zero_extendqisi2	@ *_151, *_151
 1200 0568 012082E2 		add	r2, r2, #1	@ tmp309, *_151,
 1201 056c 0020C4E7 		strb	r2, [r4, r0]	@ tmp309, *_151
 106:armwave.c     ****             }
 1202              		.loc 1 106 17 is_stmt 1 view .LVU329
 1203              	.LVL69:
  90:armwave.c     ****                 
 1204              		.loc 1 90 17 view .LVU330
  93:armwave.c     ****                     continue;
 1205              		.loc 1 93 17 view .LVU331
 1206              	@ armwave.c:93:                 if(COND_UNLIKELY(scale_value == 0x00 || scale_value == 0xff))
  93:armwave.c     ****                     continue;
 1207              		.loc 1 93 19 is_stmt 0 view .LVU332
 1208 0570 0700001A 		bne	.L64		@,
 1209              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1210              		.loc 1 101 34 view .LVU333
 1211 0574 24209BE5 		ldr	r2, [fp, #36]	@ g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_bitdepth_scale
 1212              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1213              		.loc 1 101 99 view .LVU334
 1214 0578 40009BE5 		ldr	r0, [fp, #64]	@ g_armwave_state.bitdepth_height, g_armwave_state.bitdepth_height
 1215              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1216              		.loc 1 101 34 view .LVU335
 1217 057c 920808E0 		mul	r8, r2, r8	@ tmp320, g_armwave_state.cmp_x_bitdepth_scale, tmp319
 1218              	@ armwave.c:101:                     ((((yy + ys) * g_armwave_state.cmp_x_bitdepth_scale) >> AM_XCO
 101:armwave.c     **** 
 1219              		.loc 1 101 74 view .LVU336
 1220 0580 2884A0E1 		lsr	r8, r8, #8	@ tmp322, tmp320,
 1221              	@ armwave.c:105:                 *(write_buffer + scale_value) += 1;
 105:armwave.c     ****                 word >>= 8;
 1222              		.loc 1 105 47 view .LVU337
 1223 0584 903823E0 		mla	r3, r0, r8, r3	@ tmp326, g_armwave_state.bitdepth_height, tmp322, word
 1224 0588 0320D4E7 		ldrb	r2, [r4, r3]	@ zero_extendqisi2	@ *_181, *_181
 1225 058c 012082E2 		add	r2, r2, #1	@ tmp329, *_181,
 1226 0590 0320C4E7 		strb	r2, [r4, r3]	@ tmp329, *_181
 106:armwave.c     ****             }
 1227              		.loc 1 106 17 is_stmt 1 view .LVU338
 1228              	.LVL70:
 1229              	.L64:
 1230              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1231              		.loc 1 83 9 is_stmt 0 view .LVU339
 1232 0594 14309DE5 		ldr	r3, [sp, #20]	@ _8, %sfp
 1233              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1234              		.loc 1 83 37 view .LVU340
 1235 0598 041081E2 		add	r1, r1, #4	@ yy, yy,
 1236              	.LVL71:
 1237              	@ armwave.c:83:         for(yy = 0; yy < height; yy += 4) {
  83:armwave.c     ****             //printf("w=%d stride=%d sly=%d wave_base=0x%08x yy=%d\n", w, g_armwave_state.wave_stri
 1238              		.loc 1 83 9 view .LVU341
 1239 059c 010053E1 		cmp	r3, r1	@ _8, yy
 1240 05a0 B9FFFF8A 		bhi	.L61		@,
 1241              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1242              		.loc 1 78 5 view .LVU342
 1243 05a4 38309BE5 		ldr	r3, [fp, #56]	@ g_armwave_state.waves, g_armwave_state.waves
 1244              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1245              		.loc 1 78 44 view .LVU343
 1246 05a8 016086E2 		add	r6, r6, #1	@ w, w,
 1247              	.LVL72:
 1248              	@ armwave.c:78:     for(w = 0; w < g_armwave_state.waves; w++) {
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1249              		.loc 1 78 5 view .LVU344
 1250 05ac 030056E1 		cmp	r6, r3	@ w, g_armwave_state.waves
 1251 05b0 AFFFFFBA 		blt	.L62		@,
 1252              	.LVL73:
 1253              	.L63:
  78:armwave.c     ****         wave_base = g_armwave_state.wave_buffer + slice_y + (w * g_armwave_state.wave_stride);
 1254              		.loc 1 78 5 view .LVU345
 1255              	.LBE14:
 1256              	.LBE17:
 255:armwave.c     ****         xx_rem -= g_armwave_state.slice_record_height;
 1257              		.loc 1 255 9 is_stmt 1 view .LVU346
 256:armwave.c     ****         ypos += g_armwave_state.slice_record_height;
 1258              		.loc 1 256 9 view .LVU347
 1259              	@ armwave.c:251:     for(yy = 0; yy < 2; yy++) {
 251:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1260              		.loc 1 251 5 is_stmt 0 view .LVU348
 1261 05b4 18309DE5 		ldr	r3, [sp, #24]	@ yy, %sfp
 1262 05b8 010053E3 		cmp	r3, #1	@ yy,
 1263 05bc 0130A013 		movne	r3, #1	@ yy,
 1264 05c0 18308D15 		strne	r3, [sp, #24]	@ yy, %sfp
 1265              	.LVL74:
 251:armwave.c     ****         //printf("armwave_generate: slice %d (y=%d, h=%d)\n", yy, yy * g_armwave_state.slice_height
 1266              		.loc 1 251 5 view .LVU349
 1267 05c4 8DFFFF1A 		bne	.L55		@
 1268              	.LVL75:
 1269              	.L73:
 1270              	@ armwave.c:260: }
 257:armwave.c     ****     }
 258:armwave.c     **** 
 259:armwave.c     ****     //render_nonaa_to_buffer_1ch_slice(ypos, xx_rem);
 260:armwave.c     **** }
 1271              		.loc 1 260 1 view .LVU350
 1272 05c8 24D08DE2 		add	sp, sp, #36	@,,
 1273              		.cfi_def_cfa_offset 36
 1274              		@ sp needed	@
 1275 05cc F08FBDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}	@
 1276              	.L75:
 1277              		.align	2
 1278              	.L74:
 1279 05d0 00000000 		.word	g_armwave_state
 1280 05d4 20000000 		.word	.LC2
 1281              		.cfi_endproc
 1282              	.LFE61:
 1284              		.align	2
 1285              		.global	armwave_setup_render
 1286              		.syntax unified
 1287              		.arm
 1288              		.fpu vfp
 1290              	armwave_setup_render:
 1291              	.LVL76:
 1292              	.LFB62:
 261:armwave.c     **** 
 262:armwave.c     **** /*
 263:armwave.c     ****  * Setup the renderer with passed parameters.
 264:armwave.c     ****  */
 265:armwave.c     **** void armwave_setup_render(uint32_t start_point, uint32_t end_point, uint32_t waves_max, uint32_t wa
 266:armwave.c     **** {
 1293              		.loc 1 266 1 is_stmt 1 view -0
 1294              		.cfi_startproc
 1295              		@ args = 12, pretend = 0, frame = 0
 1296              		@ frame_needed = 0, uses_anonymous_args = 0
 267:armwave.c     ****     uint32_t length, xx;
 1297              		.loc 1 267 5 view .LVU352
 268:armwave.c     ****     float points_per_pixel;
 1298              		.loc 1 268 5 view .LVU353
 269:armwave.c     **** 
 270:armwave.c     ****     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point, waves_max, wave_
 1299              		.loc 1 270 5 view .LVU354
 1300              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1301              		.loc 1 266 1 is_stmt 0 view .LVU355
 1302 05d8 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1303              		.cfi_def_cfa_offset 28
 1304              		.cfi_offset 4, -28
 1305              		.cfi_offset 5, -24
 1306              		.cfi_offset 6, -20
 1307              		.cfi_offset 7, -16
 1308              		.cfi_offset 8, -12
 1309              		.cfi_offset 9, -8
 1310              		.cfi_offset 14, -4
 1311 05dc 028B2DED 		vpush.64	{d8}	@
 1312              		.cfi_def_cfa_offset 36
 1313              		.cfi_offset 80, -36
 1314              		.cfi_offset 81, -32
 1315 05e0 0040A0E1 		mov	r4, r0	@ start_point, start_point
 1316 05e4 0150A0E1 		mov	r5, r1	@ end_point, end_point
 1317 05e8 0280A0E1 		mov	r8, r2	@ waves_max, waves_max
 1318 05ec 14D04DE2 		sub	sp, sp, #20	@,,
 1319              		.cfi_def_cfa_offset 56
 1320              	@ armwave.c:266: {
 266:armwave.c     ****     uint32_t length, xx;
 1321              		.loc 1 266 1 view .LVU356
 1322 05f0 0390A0E1 		mov	r9, r3	@ wave_stride, wave_stride
 1323 05f4 D863CDE1 		ldrd	r6, [sp, #56]	@,,
 1324 05f8 40C09DE5 		ldr	ip, [sp, #64]	@ render_flags, render_flags
 1325              	@ armwave.c:270:     printf("s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\n", start_point, end_point,
 1326              		.loc 1 270 5 view .LVU357
 1327 05fc 00308DE5 		str	r3, [sp]	@ wave_stride,
 1328 0600 F460CDE1 		strd	r6, [sp, #4]	@,,
 1329 0604 0230A0E1 		mov	r3, r2	@, waves_max
 1330              	.LVL77:
 1331              		.loc 1 270 5 view .LVU358
 1332 0608 0CC08DE5 		str	ip, [sp, #12]	@ render_flags,
 1333 060c 0120A0E1 		mov	r2, r1	@, end_point
 1334              	.LVL78:
 1335              		.loc 1 270 5 view .LVU359
 1336 0610 0010A0E1 		mov	r1, r0	@, start_point
 1337              	.LVL79:
 1338              		.loc 1 270 5 view .LVU360
 1339 0614 CC019FE5 		ldr	r0, .L90+12	@,
 1340              	.LVL80:
 1341              		.loc 1 270 5 view .LVU361
 1342 0618 FEFFFFEB 		bl	printf		@
 1343              	.LVL81:
 271:armwave.c     **** 
 272:armwave.c     ****     // TODO these asserts should instead raise PyExc
 273:armwave.c     ****     assert(start_point < end_point);
 1344              		.loc 1 273 5 is_stmt 1 view .LVU362
 1345 061c 050054E1 		cmp	r4, r5	@ start_point, end_point
 1346 0620 5E00002A 		bcs	.L87		@,
 274:armwave.c     **** 
 275:armwave.c     ****     /*
 276:armwave.c     ****     // target_height must be a power of two.  Only 256, 512, 1024 and 2048 height buffers are suppo
 277:armwave.c     ****     assert(target_height == 256 || target_height == 512 || target_height == 1024 || target_height =
 278:armwave.c     **** 
 279:armwave.c     ****     if(target_height == 256) {
 280:armwave.c     ****         g_armwave_state.row_shift = 8;
 281:armwave.c     ****         g_armwave_state.row_mask = 0x0ff;
 282:armwave.c     ****     } else if(target_height == 512) {
 283:armwave.c     ****         g_armwave_state.row_shift = 9;
 284:armwave.c     ****         g_armwave_state.row_mask = 0x1ff;
 285:armwave.c     ****     } else if(target_height == 1024) {
 286:armwave.c     ****         g_armwave_state.row_shift = 10;
 287:armwave.c     ****         g_armwave_state.row_mask = 0x3ff;
 288:armwave.c     ****     } else if(target_height == 2048) {
 289:armwave.c     ****         g_armwave_state.row_shift = 11;
 290:armwave.c     ****         g_armwave_state.row_mask = 0x7ff;
 291:armwave.c     ****     }
 292:armwave.c     ****     */
 293:armwave.c     **** 
 294:armwave.c     ****     // Calculate the size of each buffer.  Buffers are rotated by 90 degrees to improve cache coher
 295:armwave.c     ****     g_armwave_state.xstride = target_height;
 1347              		.loc 1 295 5 view .LVU363
 1348              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 297:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 298:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 299:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 300:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 301:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 302:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 303:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 304:armwave.c     ****     g_armwave_state.target_width = target_width;
 305:armwave.c     ****     g_armwave_state.target_height = target_height;
 306:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1349              		.loc 1 306 45 is_stmt 0 view .LVU364
 1350 0624 045045E0 		sub	r5, r5, r4	@ _13, end_point, start_point
 1351              	.LVL82:
 1352              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1353              		.loc 1 296 49 view .LVU365
 1354 0628 6B6A9FED 		vldr.32	s12, .L90	@ tmp175,
 1355              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 307:armwave.c     **** 
 308:armwave.c     ****     // Calculate compound scaler
 309:armwave.c     ****     g_armwave_state.cmp_x_bitdepth_scale = \
 310:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1356              		.loc 1 310 48 view .LVU366
 1357 062c 905A07EE 		vmov	s15, r5	@ int	@ _13, _13
 1358              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1359              		.loc 1 310 79 view .LVU367
 1360 0630 6A6ADFED 		vldr.32	s13, .L90+4	@ tmp199,
 1361              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1362              		.loc 1 303 90 view .LVU368
 1363 0634 043086E2 		add	r3, r6, #4	@ tmp186, target_width,
 1364              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1365              		.loc 1 295 29 view .LVU369
 1366 0638 AC419FE5 		ldr	r4, .L90+16	@ tmp242,
 1367              	.LVL83:
 1368              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1369              		.loc 1 310 48 view .LVU370
 1370 063c E75AB8EE 		vcvt.f32.s32	s10, s15	@ tmp196, _13
 1371              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1372              		.loc 1 296 49 view .LVU371
 1373 0640 907A07EE 		vmov	s15, r7	@ int	@ target_height, target_height
 1374              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1375              		.loc 1 301 42 view .LVU372
 1376 0644 970602E0 		mul	r2, r7, r6	@ tmp183, target_height, target_width
 1377              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1378              		.loc 1 303 74 view .LVU373
 1379 0648 033383E0 		add	r3, r3, r3, lsl #6	@ tmp189, tmp186, tmp186,
 1380              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1381              		.loc 1 296 49 view .LVU374
 1382 064c 675AF8EE 		vcvt.f32.u32	s11, s15	@ tmp174, target_height
 1383              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1384              		.loc 1 310 48 view .LVU375
 1385 0650 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1386              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1387              		.loc 1 303 74 view .LVU376
 1388 0654 0331A0E1 		lsl	r3, r3, #2	@ tmp190, tmp189,
 1389              	@ armwave.c:295:     g_armwave_state.xstride = target_height;
 295:armwave.c     ****     g_armwave_state.vscale_frac = target_height / 255.0f;
 1390              		.loc 1 295 29 view .LVU377
 1391 0658 2C7084E5 		str	r7, [r4, #44]	@ target_height, g_armwave_state.xstride
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1392              		.loc 1 296 5 is_stmt 1 view .LVU378
 1393              	@ armwave.c:305:     g_armwave_state.target_height = target_height;
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1394              		.loc 1 305 35 is_stmt 0 view .LVU379
 1395 065c F865C4E1 		strd	r6, [r4, #88]	@, tmp242,
 1396              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 1397              		.loc 1 310 48 view .LVU380
 1398 0660 E77AB8EE 		vcvt.f32.s32	s14, s15	@ tmp195, target_width
 1399              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 311:armwave.c     **** 
 312:armwave.c     ****     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1400              		.loc 1 312 5 view .LVU381
 1401 0664 0310A0E1 		mov	r1, r3	@, tmp190
 1402              	@ armwave.c:301:     g_armwave_state.size = target_height * target_width;
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1403              		.loc 1 301 26 view .LVU382
 1404 0668 542084E5 		str	r2, [r4, #84]	@ tmp183, g_armwave_state.size
 1405              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1406              		.loc 1 302 37 view .LVU383
 1407 066c 017CA0E3 		mov	r7, #256	@ tmp185,
 1408              	@ armwave.c:303:     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1409              		.loc 1 303 34 view .LVU384
 1410 0670 503084E5 		str	r3, [r4, #80]	@ tmp190, g_armwave_state.ch_buff_size
 1411              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1412              		.loc 1 312 5 view .LVU385
 1413 0674 74019FE5 		ldr	r0, .L90+20	@,
 1414              	@ armwave.c:298:     g_armwave_state.wave_stride = wave_stride;
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1415              		.loc 1 298 33 view .LVU386
 1416 0678 349084E5 		str	r9, [r4, #52]	@ wave_stride, g_armwave_state.wave_stride
 1417              	@ armwave.c:299:     g_armwave_state.waves_max = waves_max;
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1418              		.loc 1 299 31 view .LVU387
 1419 067c 3C8084E5 		str	r8, [r4, #60]	@ waves_max, g_armwave_state.waves_max
 1420              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1421              		.loc 1 310 48 view .LVU388
 1422 0680 057AC7EE 		vdiv.f32	s15, s14, s10	@ tmp197, tmp195, tmp196
 1423              	@ armwave.c:300:     g_armwave_state.waves = waves_max;  // Need a function to be able to change th
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1424              		.loc 1 300 27 view .LVU389
 1425 0684 388084E5 		str	r8, [r4, #56]	@ waves_max, g_armwave_state.waves
 1426              	@ armwave.c:306:     g_armwave_state.wave_length = end_point - start_point;
 306:armwave.c     **** 
 1427              		.loc 1 306 33 view .LVU390
 1428 0688 4C5084E5 		str	r5, [r4, #76]	@ _13, g_armwave_state.wave_length
 1429              	@ armwave.c:302:     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1430              		.loc 1 302 37 view .LVU391
 1431 068c 407084E5 		str	r7, [r4, #64]	@ tmp185, g_armwave_state.bitdepth_height
 1432              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1433              		.loc 1 296 49 view .LVU392
 1434 0690 867A85EE 		vdiv.f32	s14, s11, s12	@ _3, tmp174, tmp175
 1435              	@ armwave.c:310:         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1
 310:armwave.c     **** 
 1436              		.loc 1 310 79 view .LVU393
 1437 0694 A67A67EE 		vmul.f32	s15, s15, s13	@ tmp198, tmp197, tmp199
 1438              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1439              		.loc 1 309 42 view .LVU394
 1440 0698 E77AFCEE 		vcvt.u32.f32	s15, s15	@ _19, tmp198
 1441              	@ armwave.c:296:     g_armwave_state.vscale_frac = target_height / 255.0f;
 296:armwave.c     ****     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 1442              		.loc 1 296 33 view .LVU395
 1443 069c 0A7A84ED 		vstr.32	s14, [r4, #40]	@ _3, g_armwave_state.vscale_frac
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1444              		.loc 1 297 5 is_stmt 1 view .LVU396
 1445              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1446              		.loc 1 309 42 is_stmt 0 view .LVU397
 1447 06a0 90CA17EE 		vmov	ip, s15	@ int	@ _19, _19
 1448              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1449              		.loc 1 297 30 view .LVU398
 1450 06a4 C77AFDEE 		vcvt.s32.f32	s15, s14	@ tmp178, _3
 1451              	@ armwave.c:312:     printf("ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\n", \
 1452              		.loc 1 312 5 view .LVU399
 1453 06a8 0C30A0E1 		mov	r3, ip	@, _19
 1454 06ac 0C20A0E1 		mov	r2, ip	@, tmp3
 1455              	@ armwave.c:309:     g_armwave_state.cmp_x_bitdepth_scale = \
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1456              		.loc 1 309 42 view .LVU400
 1457 06b0 24C084E5 		str	ip, [r4, #36]	@ _19, g_armwave_state.cmp_x_bitdepth_scale
 1458              	@ armwave.c:297:     g_armwave_state.vscale = (int)g_armwave_state.vscale_frac;
 297:armwave.c     ****     g_armwave_state.wave_stride = wave_stride;
 1459              		.loc 1 297 30 view .LVU401
 1460 06b4 0C7AC4ED 		vstr.32	s15, [r4, #48]	@ int	@ tmp178, g_armwave_state.vscale
 298:armwave.c     ****     g_armwave_state.waves_max = waves_max;
 1461              		.loc 1 298 5 is_stmt 1 view .LVU402
 299:armwave.c     ****     g_armwave_state.waves = waves_max;  // Need a function to be able to change this on the fly
 1462              		.loc 1 299 5 view .LVU403
 300:armwave.c     ****     g_armwave_state.size = target_height * target_width;
 1463              		.loc 1 300 5 view .LVU404
 301:armwave.c     ****     g_armwave_state.bitdepth_height = 256;  // Always 256 possible levels in 8-bit mode
 1464              		.loc 1 301 5 view .LVU405
 302:armwave.c     ****     g_armwave_state.ch_buff_size = (g_armwave_state.bitdepth_height + 4) * (target_width + 4);  // 
 1465              		.loc 1 302 5 view .LVU406
 303:armwave.c     ****     g_armwave_state.target_width = target_width;
 1466              		.loc 1 303 5 view .LVU407
 304:armwave.c     ****     g_armwave_state.target_height = target_height;
 1467              		.loc 1 304 5 view .LVU408
 305:armwave.c     ****     g_armwave_state.wave_length = end_point - start_point;
 1468              		.loc 1 305 5 view .LVU409
 306:armwave.c     **** 
 1469              		.loc 1 306 5 view .LVU410
 309:armwave.c     ****         ((float)(g_armwave_state.target_width) / g_armwave_state.wave_length) * (1 << AM_XCOORD_MUL
 1470              		.loc 1 309 5 view .LVU411
 1471              		.loc 1 312 5 view .LVU412
 1472 06b8 FEFFFFEB 		bl	printf		@
 1473              	.LVL84:
 313:armwave.c     ****         g_armwave_state.ch_buff_size, g_armwave_state.cmp_x_bitdepth_scale, g_armwave_state.cmp_x_b
 314:armwave.c     **** 
 315:armwave.c     ****     // In 1ch mode, target 1024 x 16 render buffer, reading 16 bytes at a time from each wave, reta
 316:armwave.c     ****     // In 2ch mode, target two 1024 x 8 render buffers, reading 16 bytes at a time from each wave
 317:armwave.c     ****     // In 4ch mode, target four 1024 x 4 render buffers, reading 16 bytes at a time from each wave
 318:armwave.c     ****     g_armwave_state.slice_height = 256; // 64;  
 1474              		.loc 1 318 5 view .LVU413
 1475              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 319:armwave.c     **** 
 320:armwave.c     ****     if(g_armwave_state.ch1_buffer != NULL)
 1476              		.loc 1 320 23 is_stmt 0 view .LVU414
 1477 06bc 040094E5 		ldr	r0, [r4, #4]	@ _20, g_armwave_state.ch1_buffer
 1478              	@ armwave.c:318:     g_armwave_state.slice_height = 256; // 64;  
 318:armwave.c     **** 
 1479              		.loc 1 318 34 view .LVU415
 1480 06c0 447084E5 		str	r7, [r4, #68]	@ tmp185, g_armwave_state.slice_height
 1481              		.loc 1 320 5 is_stmt 1 view .LVU416
 1482              	@ armwave.c:320:     if(g_armwave_state.ch1_buffer != NULL)
 1483              		.loc 1 320 7 is_stmt 0 view .LVU417
 1484 06c4 000050E3 		cmp	r0, #0	@ _20,
 1485 06c8 0000000A 		beq	.L78		@,
 321:armwave.c     ****         free(g_armwave_state.ch1_buffer);
 1486              		.loc 1 321 9 is_stmt 1 view .LVU418
 1487 06cc FEFFFFEB 		bl	free		@
 1488              	.LVL85:
 1489              	.L78:
 322:armwave.c     **** 
 323:armwave.c     ****     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1490              		.loc 1 323 5 view .LVU419
 1491              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 1492              		.loc 1 323 34 is_stmt 0 view .LVU420
 1493 06d0 0110A0E3 		mov	r1, #1	@,
 1494 06d4 500094E5 		ldr	r0, [r4, #80]	@, g_armwave_state.ch_buff_size
 1495 06d8 FEFFFFEB 		bl	calloc		@
 1496              	.LVL86:
 1497              	@ armwave.c:325:     assert(g_armwave_state.ch1_buffer != NULL);
 324:armwave.c     **** 
 325:armwave.c     ****     assert(g_armwave_state.ch1_buffer != NULL);
 1498              		.loc 1 325 5 view .LVU421
 1499 06dc 000050E3 		cmp	r0, #0	@ _23,
 1500              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1501              		.loc 1 323 34 view .LVU422
 1502 06e0 0070A0E1 		mov	r7, r0	@ _23,
 1503              	@ armwave.c:323:     g_armwave_state.ch1_buffer = calloc(g_armwave_state.ch_buff_size, 1);
 323:armwave.c     **** 
 1504              		.loc 1 323 32 view .LVU423
 1505 06e4 040084E5 		str	r0, [r4, #4]	@ _23, g_armwave_state.ch1_buffer
 1506              		.loc 1 325 5 is_stmt 1 view .LVU424
 1507 06e8 3600000A 		beq	.L88		@,
 326:armwave.c     **** 
 327:armwave.c     ****     // Precompute the x-coord to pixel lookup to reduce ALU load
 328:armwave.c     ****     length = end_point - start_point;
 1508              		.loc 1 328 5 view .LVU425
 1509              	.LVL87:
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1510              		.loc 1 329 5 view .LVU426
 1511              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1512              		.loc 1 329 34 is_stmt 0 view .LVU427
 1513 06ec 906A07EE 		vmov	s15, r6	@ int	@ target_width, target_width
 1514              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 1515              		.loc 1 329 22 view .LVU428
 1516 06f0 905A06EE 		vmov	s13, r5	@ int	@ _13, _13
 1517              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1518              		.loc 1 330 60 view .LVU429
 1519 06f4 117A94ED 		vldr.32	s14, [r4, #68]	@ int	@ tmp252, g_armwave_state.slice_height
 1520              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1521              		.loc 1 331 40 view .LVU430
 1522 06f8 8500A0E1 		lsl	r0, r5, #1	@, _13,
 1523              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1524              		.loc 1 329 34 view .LVU431
 1525 06fc 677AF8EE 		vcvt.f32.u32	s15, s15	@ tmp215, target_width
 1526              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1527              		.loc 1 329 22 view .LVU432
 1528 0700 666AF8EE 		vcvt.f32.u32	s13, s13	@ tmp214, _13
 1529              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1530              		.loc 1 330 60 view .LVU433
 1531 0704 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp218, tmp252
 1532              	@ armwave.c:329:     points_per_pixel = length / ((float)(target_width));
 329:armwave.c     ****     points_per_pixel = length / ((float)(target_width));
 1533              		.loc 1 329 22 view .LVU434
 1534 0708 A78A86EE 		vdiv.f32	s16, s13, s15	@ points_per_pixel, tmp214, tmp215
 1535              	.LVL88:
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1536              		.loc 1 330 5 is_stmt 1 view .LVU435
 1537              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1538              		.loc 1 330 60 is_stmt 0 view .LVU436
 1539 070c 087A67EE 		vmul.f32	s15, s14, s16	@ tmp220, tmp218, points_per_pixel
 1540              	@ armwave.c:330:     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice
 330:armwave.c     ****     g_armwave_state.slice_record_height = points_per_pixel * g_armwave_state.slice_height;
 1541              		.loc 1 330 41 view .LVU437
 1542 0710 E77AFDEE 		vcvt.s32.f32	s15, s15	@ tmp221, tmp220
 1543 0714 127AC4ED 		vstr.32	s15, [r4, #72]	@ int	@ tmp221, g_armwave_state.slice_record_height
 1544              		.loc 1 331 5 is_stmt 1 view .LVU438
 1545              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1546              		.loc 1 331 40 is_stmt 0 view .LVU439
 1547 0718 FEFFFFEB 		bl	malloc		@
 1548              	.LVL89:
 1549              	@ armwave.c:333:     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 332:armwave.c     **** 
 333:armwave.c     ****     assert(g_armwave_state.xcoord_to_xpixel != NULL);
 1550              		.loc 1 333 5 view .LVU440
 1551 071c 000050E3 		cmp	r0, #0	@ _31,
 1552              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1553              		.loc 1 331 40 view .LVU441
 1554 0720 0060A0E1 		mov	r6, r0	@ _31,
 1555              	@ armwave.c:331:     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 331:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = malloc(length * sizeof(uint16_t));
 1556              		.loc 1 331 38 view .LVU442
 1557 0724 840084E5 		str	r0, [r4, #132]	@ _31, g_armwave_state.xcoord_to_xpixel
 1558              		.loc 1 333 5 is_stmt 1 view .LVU443
 1559 0728 2100000A 		beq	.L89		@,
 1560              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 334:armwave.c     **** 
 335:armwave.c     ****     for(xx = 0; xx < length; xx++) {
 336:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1561              		.loc 1 336 54 is_stmt 0 view .LVU444
 1562 072c 2C7ADFED 		vldr.32	s15, .L90+8	@ tmp230,
 1563 0730 02C040E2 		sub	ip, r0, #2	@ ivtmp.81, _31,
 1564              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1565              		.loc 1 335 12 view .LVU445
 1566 0734 0030A0E3 		mov	r3, #0	@ xx,
 1567              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1568              		.loc 1 336 54 view .LVU446
 1569 0738 887A87EE 		vdiv.f32	s14, s15, s16	@ _32, tmp230, points_per_pixel
 1570              	.L81:
 1571              	.LVL90:
 1572              		.loc 1 336 9 is_stmt 1 discriminator 3 view .LVU447
 1573              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1574              		.loc 1 336 74 is_stmt 0 discriminator 3 view .LVU448
 1575 073c 903A07EE 		vmov	s15, r3	@ int	@ xx, xx
 1576              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1577              		.loc 1 335 32 discriminator 3 view .LVU449
 1578 0740 013083E2 		add	r3, r3, #1	@ xx, xx,
 1579              	.LVL91:
 1580              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1581              		.loc 1 335 5 discriminator 3 view .LVU450
 1582 0744 030055E1 		cmp	r5, r3	@ _13, xx
 1583              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1584              		.loc 1 336 74 discriminator 3 view .LVU451
 1585 0748 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp231, xx
 1586 074c 877A67EE 		vmul.f32	s15, s15, s14	@ tmp232, tmp231, _32
 1587              	@ armwave.c:336:         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1588              		.loc 1 336 46 discriminator 3 view .LVU452
 1589 0750 E77AFCEE 		vcvt.u32.f32	s15, s15	@ tmp233, tmp232
 1590 0754 902A17EE 		vmov	r2, s15	@ int	@ tmp233, tmp233
 1591 0758 B220ECE1 		strh	r2, [ip, #2]!	@ movhi	@ tmp233, MEM[base: _101, offset: 0B]
 1592              	@ armwave.c:335:     for(xx = 0; xx < length; xx++) {
 335:armwave.c     ****         g_armwave_state.xcoord_to_xpixel[xx] = (1.0f / points_per_pixel) * xx;
 1593              		.loc 1 335 5 discriminator 3 view .LVU453
 1594 075c F6FFFF1A 		bne	.L81		@,
 337:armwave.c     **** 
 338:armwave.c     ****         // printf("xcoord_to_xpixel[%5d] = %5d (scale:%8.3f)\n", xx, g_armwave_state.xcoord_to_xpix
 339:armwave.c     ****     }
 340:armwave.c     **** 
 341:armwave.c     ****     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1595              		.loc 1 341 5 is_stmt 1 view .LVU454
 1596              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 1597              		.loc 1 341 34 is_stmt 0 view .LVU455
 1598 0760 540094E5 		ldr	r0, [r4, #84]	@ g_armwave_state.size, g_armwave_state.size
 1599 0764 0001A0E1 		lsl	r0, r0, #2	@, g_armwave_state.size,
 1600 0768 FEFFFFEB 		bl	malloc		@
 1601              	.LVL92:
 1602              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 342:armwave.c     **** 
 343:armwave.c     ****     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1603              		.loc 1 343 5 view .LVU456
 1604 076c 183094E5 		ldr	r3, [r4, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1605 0770 0620A0E1 		mov	r2, r6	@, _31
 1606 0774 00308DE5 		str	r3, [sp]	@ g_armwave_state.test_wave_buffer,
 1607 0778 0710A0E1 		mov	r1, r7	@, _23
 1608              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1609              		.loc 1 341 34 view .LVU457
 1610 077c 00C0A0E1 		mov	ip, r0	@ tmp237,
 1611              	@ armwave.c:343:     printf("Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \n", \
 1612              		.loc 1 343 5 view .LVU458
 1613 0780 0030A0E1 		mov	r3, r0	@, tmp237
 1614              	@ armwave.c:341:     g_armwave_state.out_pixbuf = malloc(sizeof(uint32_t) * g_armwave_state.size);
 341:armwave.c     **** 
 1615              		.loc 1 341 32 view .LVU459
 1616 0784 68C084E5 		str	ip, [r4, #104]	@ tmp237, g_armwave_state.out_pixbuf
 1617              		.loc 1 343 5 is_stmt 1 view .LVU460
 1618 0788 64009FE5 		ldr	r0, .L90+24	@,
 1619 078c FEFFFFEB 		bl	printf		@
 1620              	.LVL93:
 344:armwave.c     ****         (uint32_t)g_armwave_state.ch1_buffer, \
 345:armwave.c     ****         (uint32_t)g_armwave_state.xcoord_to_xpixel, \
 346:armwave.c     ****         (uint32_t)g_armwave_state.out_pixbuf, \
 347:armwave.c     ****         (uint32_t)g_armwave_state.test_wave_buffer);
 348:armwave.c     **** 
 349:armwave.c     ****     malloc_stats();
 1621              		.loc 1 349 5 view .LVU461
 1622              	@ armwave.c:350: }
 350:armwave.c     **** }
 1623              		.loc 1 350 1 is_stmt 0 view .LVU462
 1624 0790 14D08DE2 		add	sp, sp, #20	@,,
 1625              		.cfi_remember_state
 1626              		.cfi_def_cfa_offset 36
 1627              		@ sp needed	@
 1628 0794 028BBDEC 		vldm	sp!, {d8}	@
 1629              		.cfi_restore 80
 1630              		.cfi_restore 81
 1631              		.cfi_def_cfa_offset 28
 1632              	.LVL94:
 1633              		.loc 1 350 1 view .LVU463
 1634 0798 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 1635              		.cfi_restore 14
 1636              		.cfi_restore 9
 1637              		.cfi_restore 8
 1638              		.cfi_restore 7
 1639              		.cfi_restore 6
 1640              		.cfi_restore 5
 1641              		.cfi_restore 4
 1642              		.cfi_def_cfa_offset 0
 1643              	.LVL95:
 1644              	@ armwave.c:349:     malloc_stats();
 349:armwave.c     **** }
 1645              		.loc 1 349 5 view .LVU464
 1646 079c FEFFFFEA 		b	malloc_stats		@
 1647              	.LVL96:
 1648              	.L87:
 1649              		.cfi_restore_state
 273:armwave.c     **** 
 1650              		.loc 1 273 5 is_stmt 1 discriminator 1 view .LVU465
 1651 07a0 50309FE5 		ldr	r3, .L90+28	@,
 1652 07a4 50209FE5 		ldr	r2, .L90+32	@,
 1653 07a8 50109FE5 		ldr	r1, .L90+36	@,
 1654 07ac 50009FE5 		ldr	r0, .L90+40	@,
 1655 07b0 FEFFFFEB 		bl	__assert_fail		@
 1656              	.LVL97:
 1657              	.L89:
 333:armwave.c     **** 
 1658              		.loc 1 333 5 discriminator 1 view .LVU466
 1659 07b4 3C309FE5 		ldr	r3, .L90+28	@,
 1660 07b8 48209FE5 		ldr	r2, .L90+44	@,
 1661 07bc 3C109FE5 		ldr	r1, .L90+36	@,
 1662 07c0 44009FE5 		ldr	r0, .L90+48	@,
 1663 07c4 FEFFFFEB 		bl	__assert_fail		@
 1664              	.LVL98:
 1665              	.L88:
 325:armwave.c     **** 
 1666              		.loc 1 325 5 discriminator 1 view .LVU467
 1667 07c8 28309FE5 		ldr	r3, .L90+28	@,
 1668 07cc 3C209FE5 		ldr	r2, .L90+52	@,
 1669 07d0 28109FE5 		ldr	r1, .L90+36	@,
 1670 07d4 38009FE5 		ldr	r0, .L90+56	@,
 1671 07d8 FEFFFFEB 		bl	__assert_fail		@
 1672              	.LVL99:
 1673              	.L91:
 1674              		.align	2
 1675              	.L90:
 1676 07dc 00007F43 		.word	1132396544
 1677 07e0 00008043 		.word	1132462080
 1678 07e4 0000803F 		.word	1065353216
 1679 07e8 7C000000 		.word	.LC5
 1680 07ec 00000000 		.word	g_armwave_state
 1681 07f0 C0000000 		.word	.LC7
 1682 07f4 44010000 		.word	.LC10
 1683 07f8 1C000000 		.word	.LANCHOR0+28
 1684 07fc 11010000 		.word	273
 1685 0800 5C000000 		.word	.LC3
 1686 0804 A8000000 		.word	.LC6
 1687 0808 4D010000 		.word	333
 1688 080c 18010000 		.word	.LC9
 1689 0810 45010000 		.word	325
 1690 0814 F4000000 		.word	.LC8
 1691              		.cfi_endproc
 1692              	.LFE62:
 1694              		.align	2
 1695              		.global	armwave_set_wave_pointer
 1696              		.syntax unified
 1697              		.arm
 1698              		.fpu vfp
 1700              	armwave_set_wave_pointer:
 1701              	.LVL100:
 1702              	.LFB63:
 351:armwave.c     **** 
 352:armwave.c     **** /*
 353:armwave.c     ****  * Set wave buffer pointer.  This needs to be changed to support disjointed buffers
 354:armwave.c     ****  * in the future.
 355:armwave.c     ****  */
 356:armwave.c     **** void armwave_set_wave_pointer(uint8_t *wave_buffer)
 357:armwave.c     **** {
 1703              		.loc 1 357 1 view -0
 1704              		.cfi_startproc
 1705              		@ args = 0, pretend = 0, frame = 0
 1706              		@ frame_needed = 0, uses_anonymous_args = 0
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1707              		.loc 1 358 5 view .LVU469
 1708 0818 000050E3 		cmp	r0, #0	@ wave_buffer
 1709              		.loc 1 358 5 is_stmt 0 view .LVU470
 1710 081c 0200000A 		beq	.L97		@,
 359:armwave.c     ****     g_armwave_state.wave_buffer = wave_buffer;
 1711              		.loc 1 359 5 is_stmt 1 view .LVU471
 1712              	@ armwave.c:359:     g_armwave_state.wave_buffer = wave_buffer;
 1713              		.loc 1 359 33 is_stmt 0 view .LVU472
 1714 0820 1C309FE5 		ldr	r3, .L98	@ tmp116,
 1715 0824 140083E5 		str	r0, [r3, #20]	@ wave_buffer, g_armwave_state.wave_buffer
 1716 0828 1EFF2FE1 		bx	lr	@
 1717              	.L97:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1718              		.loc 1 358 5 is_stmt 1 discriminator 1 view .LVU473
 1719              	@ armwave.c:357: {
 357:armwave.c     ****     assert(wave_buffer != NULL);
 1720              		.loc 1 357 1 is_stmt 0 discriminator 1 view .LVU474
 1721 082c 10402DE9 		push	{r4, lr}	@
 1722              		.cfi_def_cfa_offset 8
 1723              		.cfi_offset 4, -8
 1724              		.cfi_offset 14, -4
 1725              	@ armwave.c:358:     assert(wave_buffer != NULL);
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1726              		.loc 1 358 5 discriminator 1 view .LVU475
 1727 0830 10309FE5 		ldr	r3, .L98+4	@,
 1728 0834 10209FE5 		ldr	r2, .L98+8	@,
 1729 0838 10109FE5 		ldr	r1, .L98+12	@,
 1730 083c 10009FE5 		ldr	r0, .L98+16	@,
 1731              	.LVL101:
 358:armwave.c     ****     assert(wave_buffer != NULL);
 1732              		.loc 1 358 5 discriminator 1 view .LVU476
 1733 0840 FEFFFFEB 		bl	__assert_fail		@
 1734              	.LVL102:
 1735              	.L99:
 1736              		.align	2
 1737              	.L98:
 1738 0844 00000000 		.word	g_armwave_state
 1739 0848 34000000 		.word	.LANCHOR0+52
 1740 084c 66010000 		.word	358
 1741 0850 5C000000 		.word	.LC3
 1742 0854 68010000 		.word	.LC11
 1743              		.cfi_endproc
 1744              	.LFE63:
 1746              		.align	2
 1747              		.global	armwave_set_wave_pointer_as_testbuf
 1748              		.syntax unified
 1749              		.arm
 1750              		.fpu vfp
 1752              	armwave_set_wave_pointer_as_testbuf:
 1753              	.LVL103:
 1754              	.LFB64:
 360:armwave.c     **** }
 361:armwave.c     **** 
 362:armwave.c     **** /*
 363:armwave.c     ****  * Set the wave buffer pointer as the test waveform buffer filled by such functions
 364:armwave.c     ****  * as `armwave_test_create_square` and `armwave_test_create_am_sine`.
 365:armwave.c     ****  */
 366:armwave.c     **** void armwave_set_wave_pointer_as_testbuf(int set)
 367:armwave.c     **** {
 1755              		.loc 1 367 1 is_stmt 1 view -0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              		@ link register save eliminated.
 368:armwave.c     ****     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1760              		.loc 1 368 5 view .LVU478
 1761              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1762              		.loc 1 368 29 is_stmt 0 view .LVU479
 1763 0858 24309FE5 		ldr	r3, .L103	@ tmp117,
 1764              	@ armwave.c:368:     if(set > g_armwave_state.test_wave_buffer_nsets) {
 1765              		.loc 1 368 7 view .LVU480
 1766 085c 202093E5 		ldr	r2, [r3, #32]	@ g_armwave_state.test_wave_buffer_nsets, g_armwave_state.test_wave_buffer_nsets
 1767 0860 000052E1 		cmp	r2, r0	@ g_armwave_state.test_wave_buffer_nsets, set
 1768 0864 0400003A 		bcc	.L102		@,
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 370:armwave.c     ****         return;
 371:armwave.c     ****     }
 372:armwave.c     **** 
 373:armwave.c     ****     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_state.test_wave_buf
 1769              		.loc 1 373 5 is_stmt 1 view .LVU481
 1770              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1771              		.loc 1 373 111 is_stmt 0 view .LVU482
 1772 0868 1C1093E5 		ldr	r1, [r3, #28]	@ g_armwave_state.test_wave_buffer_stride, g_armwave_state.test_wave_buffer_stri
 1773              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1774              		.loc 1 373 68 view .LVU483
 1775 086c 182093E5 		ldr	r2, [r3, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 1776 0870 912020E0 		mla	r0, r1, r0, r2	@ tmp125, g_armwave_state.test_wave_buffer_stride, set, g_armwave_state.test_wa
 1777              	.LVL104:
 1778              	@ armwave.c:373:     g_armwave_state.wave_buffer = g_armwave_state.test_wave_buffer + (g_armwave_st
 1779              		.loc 1 373 33 view .LVU484
 1780 0874 140083E5 		str	r0, [r3, #20]	@ tmp125, g_armwave_state.wave_buffer
 1781              	@ armwave.c:374: }
 374:armwave.c     **** }
 1782              		.loc 1 374 1 view .LVU485
 1783 0878 1EFF2FE1 		bx	lr	@
 1784              	.LVL105:
 1785              	.L102:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1786              		.loc 1 369 9 is_stmt 1 view .LVU486
 1787 087c 04009FE5 		ldr	r0, .L103+4	@,
 1788              	.LVL106:
 369:armwave.c     ****         printf("armwave_set_wave_pointer_as_testbuf: error, nsets exceeded\n");
 1789              		.loc 1 369 9 is_stmt 0 view .LVU487
 1790 0880 FEFFFFEA 		b	puts		@
 1791              	.LVL107:
 1792              	.L104:
 1793              		.align	2
 1794              	.L103:
 1795 0884 00000000 		.word	g_armwave_state
 1796 0888 7C010000 		.word	.LC12
 1797              		.cfi_endproc
 1798              	.LFE64:
 1800              		.align	2
 1801              		.global	armwave_set_wave_pointer_u32
 1802              		.syntax unified
 1803              		.arm
 1804              		.fpu vfp
 1806              	armwave_set_wave_pointer_u32:
 1807              	.LVL108:
 1808              	.LFB65:
 375:armwave.c     **** 
 376:armwave.c     **** /*
 377:armwave.c     ****  * Set wave buffer pointer from a 32-bit uint.  This needs to be changed to support 
 378:armwave.c     ****  * disjointed buffers in the future.
 379:armwave.c     ****  */
 380:armwave.c     **** void armwave_set_wave_pointer_u32(uint32_t wave_buffer_ptr)
 381:armwave.c     **** {
 1809              		.loc 1 381 1 is_stmt 1 view -0
 1810              		.cfi_startproc
 1811              		@ args = 0, pretend = 0, frame = 0
 1812              		@ frame_needed = 0, uses_anonymous_args = 0
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1813              		.loc 1 382 5 view .LVU489
 1814 088c 000050E3 		cmp	r0, #0	@ wave_buffer_ptr
 1815              		.loc 1 382 5 is_stmt 0 view .LVU490
 1816 0890 0200000A 		beq	.L110		@,
 383:armwave.c     ****     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1817              		.loc 1 383 5 is_stmt 1 view .LVU491
 1818              	@ armwave.c:383:     g_armwave_state.wave_buffer = (uint8_t*)wave_buffer_ptr;
 1819              		.loc 1 383 33 is_stmt 0 view .LVU492
 1820 0894 1C309FE5 		ldr	r3, .L111	@ tmp117,
 1821 0898 140083E5 		str	r0, [r3, #20]	@ wave_buffer_ptr, g_armwave_state.wave_buffer
 1822 089c 1EFF2FE1 		bx	lr	@
 1823              	.L110:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1824              		.loc 1 382 5 is_stmt 1 discriminator 1 view .LVU493
 1825              	@ armwave.c:381: {
 381:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1826              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU494
 1827 08a0 10402DE9 		push	{r4, lr}	@
 1828              		.cfi_def_cfa_offset 8
 1829              		.cfi_offset 4, -8
 1830              		.cfi_offset 14, -4
 1831              	@ armwave.c:382:     assert(wave_buffer_ptr != 0);
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1832              		.loc 1 382 5 discriminator 1 view .LVU495
 1833 08a4 10309FE5 		ldr	r3, .L111+4	@,
 1834 08a8 10209FE5 		ldr	r2, .L111+8	@,
 1835 08ac 10109FE5 		ldr	r1, .L111+12	@,
 1836 08b0 10009FE5 		ldr	r0, .L111+16	@,
 1837              	.LVL109:
 382:armwave.c     ****     assert(wave_buffer_ptr != 0);
 1838              		.loc 1 382 5 discriminator 1 view .LVU496
 1839 08b4 FEFFFFEB 		bl	__assert_fail		@
 1840              	.LVL110:
 1841              	.L112:
 1842              		.align	2
 1843              	.L111:
 1844 08b8 00000000 		.word	g_armwave_state
 1845 08bc 50000000 		.word	.LANCHOR0+80
 1846 08c0 7E010000 		.word	382
 1847 08c4 5C000000 		.word	.LC3
 1848 08c8 B8010000 		.word	.LC13
 1849              		.cfi_endproc
 1850              	.LFE65:
 1852              		.align	2
 1853              		.global	armwave_clear_buffer
 1854              		.syntax unified
 1855              		.arm
 1856              		.fpu vfp
 1858              	armwave_clear_buffer:
 1859              	.LVL111:
 1860              	.LFB66:
 384:armwave.c     **** }
 385:armwave.c     **** 
 386:armwave.c     **** /*
 387:armwave.c     ****  * Clear the working buffer (fill it with all zeros.)
 388:armwave.c     ****  */
 389:armwave.c     **** void armwave_clear_buffer(uint32_t flags)
 390:armwave.c     **** {
 1861              		.loc 1 390 1 is_stmt 1 view -0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 391:armwave.c     ****     // Flags ignored, only one buffer cleared
 392:armwave.c     ****     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1866              		.loc 1 392 5 view .LVU498
 1867              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1868              		.loc 1 392 58 is_stmt 0 view .LVU499
 1869 08cc 0C309FE5 		ldr	r3, .L114	@ tmp114,
 1870              	@ armwave.c:392:     memset(g_armwave_state.ch1_buffer, 0, g_armwave_state.ch_buff_size);
 1871              		.loc 1 392 5 view .LVU500
 1872 08d0 0010A0E3 		mov	r1, #0	@,
 1873 08d4 502093E5 		ldr	r2, [r3, #80]	@, g_armwave_state.ch_buff_size
 1874 08d8 040093E5 		ldr	r0, [r3, #4]	@, g_armwave_state.ch1_buffer
 1875              	.LVL112:
 1876              		.loc 1 392 5 view .LVU501
 1877 08dc FEFFFFEA 		b	memset		@
 1878              	.LVL113:
 1879              	.L115:
 1880              		.align	2
 1881              	.L114:
 1882 08e0 00000000 		.word	g_armwave_state
 1883              		.cfi_endproc
 1884              	.LFE66:
 1886              		.align	2
 1887              		.global	armwave_set_channel_colour
 1888              		.syntax unified
 1889              		.arm
 1890              		.fpu vfp
 1892              	armwave_set_channel_colour:
 1893              	.LVL114:
 1894              	.LFB67:
 393:armwave.c     **** }
 394:armwave.c     **** 
 395:armwave.c     **** /*
 396:armwave.c     ****  * Set the render colour for a channel.  R/G/B may exceed 255 for saturation effects.
 397:armwave.c     ****  */
 398:armwave.c     **** void armwave_set_channel_colour(int ch, int r, int g, int b)
 399:armwave.c     **** {
 1895              		.loc 1 399 1 is_stmt 1 view -0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 0
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 1899              		@ link register save eliminated.
 400:armwave.c     ****     // Only 1ch supported for now
 401:armwave.c     ****     switch(ch) {
 1900              		.loc 1 401 5 view .LVU503
 1901 08e4 010050E3 		cmp	r0, #1	@ ch,
 402:armwave.c     ****         case 1:
 403:armwave.c     ****             g_armwave_state.ch1_color.r = r;
 1902              		.loc 1 403 13 view .LVU504
 1903              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 1904              		.loc 1 403 41 is_stmt 0 view .LVU505
 1905 08e8 0C009F05 		ldreq	r0, .L118	@ tmp117,
 1906              	.LVL115:
 1907              		.loc 1 403 41 view .LVU506
 1908 08ec BC16C001 		strheq	r1, [r0, #108]	@ movhi	@ r, g_armwave_state.ch1_color.r
 404:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 1909              		.loc 1 404 13 is_stmt 1 view .LVU507
 1910              	@ armwave.c:404:             g_armwave_state.ch1_color.g = g;
 1911              		.loc 1 404 41 is_stmt 0 view .LVU508
 1912 08f0 BE26C001 		strheq	r2, [r0, #110]	@ movhi	@ g, g_armwave_state.ch1_color.g
 405:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 1913              		.loc 1 405 13 is_stmt 1 view .LVU509
 1914              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 1915              		.loc 1 405 41 is_stmt 0 view .LVU510
 1916 08f4 B037C001 		strheq	r3, [r0, #112]	@ movhi	@ b, g_armwave_state.ch1_color.b
 406:armwave.c     ****             break;
 1917              		.loc 1 406 13 is_stmt 1 view .LVU511
 1918              	@ armwave.c:408: }
 407:armwave.c     ****     }
 408:armwave.c     **** }
 1919              		.loc 1 408 1 is_stmt 0 view .LVU512
 1920 08f8 1EFF2FE1 		bx	lr	@
 1921              	.L119:
 1922              		.align	2
 1923              	.L118:
 1924 08fc 00000000 		.word	g_armwave_state
 1925              		.cfi_endproc
 1926              	.LFE67:
 1928              		.align	2
 1929              		.global	armwave_dump_ppm_debug
 1930              		.syntax unified
 1931              		.arm
 1932              		.fpu vfp
 1934              	armwave_dump_ppm_debug:
 1935              	.LVL116:
 1936              	.LFB68:
 409:armwave.c     **** 
 410:armwave.c     **** /*
 411:armwave.c     ****  * Dump a ppm of a buffer to a file.
 412:armwave.c     ****  */
 413:armwave.c     **** void armwave_dump_ppm_debug(uint32_t *buffer, char *fn)
 414:armwave.c     **** {
 1937              		.loc 1 414 1 is_stmt 1 view -0
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 0
 1940              		@ frame_needed = 0, uses_anonymous_args = 0
 415:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1941              		.loc 1 415 5 view .LVU514
 1942              	@ armwave.c:414: {
 414:armwave.c     ****     FILE *fp = fopen(fn, "wb");
 1943              		.loc 1 414 1 is_stmt 0 view .LVU515
 1944 0900 0130A0E1 		mov	r3, r1	@ fn, fn
 1945 0904 F0432DE9 		push	{r4, r5, r6, r7, r8, r9, lr}	@
 1946              		.cfi_def_cfa_offset 28
 1947              		.cfi_offset 4, -28
 1948              		.cfi_offset 5, -24
 1949              		.cfi_offset 6, -20
 1950              		.cfi_offset 7, -16
 1951              		.cfi_offset 8, -12
 1952              		.cfi_offset 9, -8
 1953              		.cfi_offset 14, -4
 1954 0908 0080A0E1 		mov	r8, r0	@ buffer, buffer
 1955 090c 0CD04DE2 		sub	sp, sp, #12	@,,
 1956              		.cfi_def_cfa_offset 40
 1957              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 1958              		.loc 1 415 16 view .LVU516
 1959 0910 C4109FE5 		ldr	r1, .L128	@,
 1960              	.LVL117:
 1961              		.loc 1 415 16 view .LVU517
 1962 0914 0300A0E1 		mov	r0, r3	@, fn
 1963              	.LVL118:
 1964              		.loc 1 415 16 view .LVU518
 1965 0918 FEFFFFEB 		bl	fopen64		@
 1966              	.LVL119:
 1967              	@ armwave.c:422:     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_he
 416:armwave.c     ****     uint32_t data;
 417:armwave.c     ****     int xx, yy;
 418:armwave.c     **** 
 419:armwave.c     ****     //printf("in_buffer=0x%08x\n", buffer);
 420:armwave.c     **** 
 421:armwave.c     ****     fputs("P3\n", fp);
 422:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1968              		.loc 1 422 5 view .LVU519
 1969 091c BC609FE5 		ldr	r6, .L128+4	@ tmp150,
 1970              	@ armwave.c:421:     fputs("P3\n", fp);
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1971              		.loc 1 421 5 view .LVU520
 1972 0920 0320A0E3 		mov	r2, #3	@,
 1973 0924 0110A0E3 		mov	r1, #1	@,
 1974              	@ armwave.c:415:     FILE *fp = fopen(fn, "wb");
 415:armwave.c     ****     uint32_t data;
 1975              		.loc 1 415 16 view .LVU521
 1976 0928 0070A0E1 		mov	r7, r0	@ fp,
 1977              	.LVL120:
 416:armwave.c     ****     uint32_t data;
 1978              		.loc 1 416 5 is_stmt 1 view .LVU522
 417:armwave.c     **** 
 1979              		.loc 1 417 5 view .LVU523
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1980              		.loc 1 421 5 view .LVU524
 1981 092c 0030A0E1 		mov	r3, r0	@, fp
 1982 0930 AC009FE5 		ldr	r0, .L128+8	@,
 1983              	.LVL121:
 421:armwave.c     ****     fprintf(fp, "%d %d\n", g_armwave_state.target_width, g_armwave_state.target_height);
 1984              		.loc 1 421 5 is_stmt 0 view .LVU525
 1985 0934 FEFFFFEB 		bl	fwrite		@
 1986              	.LVL122:
 1987              		.loc 1 422 5 is_stmt 1 view .LVU526
 1988 0938 D825C6E1 		ldrd	r2, [r6, #88]	@, tmp150,
 1989 093c A4109FE5 		ldr	r1, .L128+12	@,
 1990 0940 0700A0E1 		mov	r0, r7	@, fp
 1991 0944 FEFFFFEB 		bl	fprintf		@
 1992              	.LVL123:
 423:armwave.c     ****     fputs("255\n", fp);
 1993              		.loc 1 423 5 view .LVU527
 1994 0948 0420A0E3 		mov	r2, #4	@,
 1995 094c 0730A0E1 		mov	r3, r7	@, fp
 1996 0950 0110A0E3 		mov	r1, #1	@,
 1997 0954 90009FE5 		ldr	r0, .L128+16	@,
 1998 0958 FEFFFFEB 		bl	fwrite		@
 1999              	.LVL124:
 424:armwave.c     **** 
 425:armwave.c     ****     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2000              		.loc 1 425 5 view .LVU528
 2001              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2002              		.loc 1 425 37 is_stmt 0 view .LVU529
 2003 095c 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2004              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 2005              		.loc 1 425 5 view .LVU530
 2006 0960 000052E3 		cmp	r2, #0	@ prephitmp_53,
 2007 0964 180000DA 		ble	.L121		@,
 2008 0968 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2009              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 427:armwave.c     ****             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 428:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 429:armwave.c     **** 
 430:armwave.c     ****             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >> 16) & 0xff);
 2010              		.loc 1 430 13 view .LVU531
 2011 096c 7C909FE5 		ldr	r9, .L128+20	@ tmp152,
 2012              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2013              		.loc 1 425 12 view .LVU532
 2014 0970 0050A0E3 		mov	r5, #0	@ yy,
 2015              	.LVL125:
 2016              	.L122:
 2017              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2018              		.loc 1 426 9 view .LVU533
 2019 0974 000053E3 		cmp	r3, #0	@ _13,
 2020              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2021              		.loc 1 426 16 view .LVU534
 2022 0978 0040A0C3 		movgt	r4, #0	@ xx,
 2023              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2024              		.loc 1 426 9 view .LVU535
 2025 097c 0F0000DA 		ble	.L124		@,
 2026              	.LVL126:
 2027              	.L123:
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2028              		.loc 1 427 13 is_stmt 1 discriminator 3 view .LVU536
 2029              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2030              		.loc 1 427 29 is_stmt 0 discriminator 3 view .LVU537
 2031 0980 954323E0 		mla	r3, r5, r3, r4	@ tmp141, yy, _13, xx
 2032              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2033              		.loc 1 430 13 discriminator 3 view .LVU538
 2034 0984 0910A0E1 		mov	r1, r9	@, tmp152
 2035 0988 0700A0E1 		mov	r0, r7	@, fp
 2036              	@ armwave.c:427:             data = *(buffer + (xx + (yy * g_armwave_state.target_width)));
 427:armwave.c     ****             //printf("xx,yy=%4d,%4d, word=0x%08x\n", xx, yy, data);
 2037              		.loc 1 427 18 discriminator 3 view .LVU539
 2038 098c 032198E7 		ldr	r2, [r8, r3, lsl #2]	@ data, *_7
 2039              	.LVL127:
 2040              		.loc 1 430 13 is_stmt 1 discriminator 3 view .LVU540
 2041              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2042              		.loc 1 426 58 is_stmt 0 discriminator 3 view .LVU541
 2043 0990 014084E2 		add	r4, r4, #1	@ xx, xx,
 2044              	.LVL128:
 2045              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2046              		.loc 1 430 81 discriminator 3 view .LVU542
 2047 0994 22C8A0E1 		lsr	ip, r2, #16	@ tmp146, data,
 2048              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2049              		.loc 1 430 61 discriminator 3 view .LVU543
 2050 0998 2234A0E1 		lsr	r3, r2, #8	@ tmp142, data,
 2051              	@ armwave.c:430:             fprintf(fp, "%3d %3d %3d\n", data & 0xff, (data >> 8) & 0xff, (data >>
 2052              		.loc 1 430 13 discriminator 3 view .LVU544
 2053 099c 7CC0EFE6 		uxtb	ip, ip	@ tmp147, tmp146
 2054 09a0 7330EFE6 		uxtb	r3, r3	@, tmp142
 2055 09a4 00C08DE5 		str	ip, [sp]	@ tmp147,
 2056 09a8 7220EFE6 		uxtb	r2, r2	@, data
 2057              	.LVL129:
 2058              		.loc 1 430 13 discriminator 3 view .LVU545
 2059 09ac FEFFFFEB 		bl	fprintf		@
 2060              	.LVL130:
 2061              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2062              		.loc 1 426 41 discriminator 3 view .LVU546
 2063 09b0 583096E5 		ldr	r3, [r6, #88]	@ _13, g_armwave_state.target_width
 2064              	@ armwave.c:426:         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 426:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2065              		.loc 1 426 9 discriminator 3 view .LVU547
 2066 09b4 040053E1 		cmp	r3, r4	@ _13, xx
 2067 09b8 F0FFFFCA 		bgt	.L123		@,
 2068 09bc 5C2096E5 		ldr	r2, [r6, #92]	@ prephitmp_53, g_armwave_state.target_height
 2069              	.LVL131:
 2070              	.L124:
 2071              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2072              		.loc 1 425 55 discriminator 2 view .LVU548
 2073 09c0 015085E2 		add	r5, r5, #1	@ yy, yy,
 2074              	.LVL132:
 2075              	@ armwave.c:425:     for(yy = 0; yy < g_armwave_state.target_height; yy++) {
 425:armwave.c     ****         for(xx = 0; xx < g_armwave_state.target_width; xx++) {
 2076              		.loc 1 425 5 discriminator 2 view .LVU549
 2077 09c4 020055E1 		cmp	r5, r2	@ yy, prephitmp_53
 2078 09c8 E9FFFFBA 		blt	.L122		@,
 2079              	.LVL133:
 2080              	.L121:
 431:armwave.c     ****         }
 432:armwave.c     ****     }
 433:armwave.c     **** 
 434:armwave.c     ****     fclose(fp);
 2081              		.loc 1 434 5 is_stmt 1 view .LVU550
 2082 09cc 0700A0E1 		mov	r0, r7	@, fp
 2083              	@ armwave.c:435: }
 435:armwave.c     **** }
 2084              		.loc 1 435 1 is_stmt 0 view .LVU551
 2085 09d0 0CD08DE2 		add	sp, sp, #12	@,,
 2086              		.cfi_def_cfa_offset 28
 2087              		@ sp needed	@
 2088 09d4 F043BDE8 		pop	{r4, r5, r6, r7, r8, r9, lr}	@
 2089              		.cfi_restore 14
 2090              		.cfi_restore 9
 2091              		.cfi_restore 8
 2092              		.cfi_restore 7
 2093              		.cfi_restore 6
 2094              		.cfi_restore 5
 2095              		.cfi_restore 4
 2096              		.cfi_def_cfa_offset 0
 2097              	.LVL134:
 2098              	@ armwave.c:434:     fclose(fp);
 434:armwave.c     **** }
 2099              		.loc 1 434 5 view .LVU552
 2100 09d8 FEFFFFEA 		b	fclose		@
 2101              	.LVL135:
 2102              	.L129:
 434:armwave.c     **** }
 2103              		.loc 1 434 5 view .LVU553
 2104              		.align	2
 2105              	.L128:
 2106 09dc D0010000 		.word	.LC14
 2107 09e0 00000000 		.word	g_armwave_state
 2108 09e4 D4010000 		.word	.LC15
 2109 09e8 D8010000 		.word	.LC16
 2110 09ec E0010000 		.word	.LC17
 2111 09f0 E8010000 		.word	.LC18
 2112              		.cfi_endproc
 2113              	.LFE68:
 2115              		.align	2
 2116              		.global	armwave_test_init
 2117              		.syntax unified
 2118              		.arm
 2119              		.fpu vfp
 2121              	armwave_test_init:
 2122              	.LVL136:
 2123              	.LFB69:
 436:armwave.c     **** 
 437:armwave.c     **** /*
 438:armwave.c     ****  * Initialise some test functionry.
 439:armwave.c     ****  */
 440:armwave.c     **** void armwave_test_init(int wave_size, int nwaves, int render_width, int render_height)
 441:armwave.c     **** {
 2124              		.loc 1 441 1 is_stmt 1 view -0
 2125              		.cfi_startproc
 2126              		@ args = 0, pretend = 0, frame = 0
 2127              		@ frame_needed = 0, uses_anonymous_args = 0
 442:armwave.c     ****     test_create_gamma();
 2128              		.loc 1 442 5 view .LVU555
 2129              	.LBB22:
 2130              	.LBI22:
  34:armwave.c     **** {
 2131              		.loc 1 34 6 view .LVU556
  34:armwave.c     **** {
 2132              		.loc 1 34 6 is_stmt 0 view .LVU557
 2133              	.LBE22:
 2134              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2135              		.loc 1 441 1 view .LVU558
 2136 09f4 F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2137              		.cfi_def_cfa_offset 32
 2138              		.cfi_offset 4, -32
 2139              		.cfi_offset 5, -28
 2140              		.cfi_offset 6, -24
 2141              		.cfi_offset 7, -20
 2142              		.cfi_offset 8, -16
 2143              		.cfi_offset 9, -12
 2144              		.cfi_offset 10, -8
 2145              		.cfi_offset 14, -4
 2146 09f8 068B2DED 		vpush.64	{d8, d9, d10}	@
 2147              		.cfi_def_cfa_offset 56
 2148              		.cfi_offset 80, -56
 2149              		.cfi_offset 81, -52
 2150              		.cfi_offset 82, -48
 2151              		.cfi_offset 83, -44
 2152              		.cfi_offset 84, -40
 2153              		.cfi_offset 85, -36
 2154 09fc C0409FE5 		ldr	r4, .L134+20	@ ivtmp.95,
 2155              	.LBB25:
 2156              	.LBB23:
 2157              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2158              		.loc 1 40 32 view .LVU559
 2159 0a00 2EAA9FED 		vldr.32	s20, .L134+16	@ tmp136,
 2160              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2161              		.loc 1 40 26 view .LVU560
 2162 0a04 299B9FED 		vldr.64	d9, .L134	@ tmp151,
 2163              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2164              		.loc 1 40 49 view .LVU561
 2165 0a08 2A8B9FED 		vldr.64	d8, .L134+8	@ tmp139,
 2166 0a0c 01C084E2 		add	ip, r4, #1	@ _38, ivtmp.95,
 2167              	.LBE23:
 2168              	.LBE25:
 2169              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2170              		.loc 1 441 1 view .LVU562
 2171 0a10 10D04DE2 		sub	sp, sp, #16	@,,
 2172              		.cfi_def_cfa_offset 72
 2173              	@ armwave.c:441: {
 441:armwave.c     ****     test_create_gamma();
 2174              		.loc 1 441 1 view .LVU563
 2175 0a14 0060A0E1 		mov	r6, r0	@ wave_size, wave_size
 2176 0a18 0170A0E1 		mov	r7, r1	@ nwaves, nwaves
 2177 0a1c 0280A0E1 		mov	r8, r2	@ render_width, render_width
 2178 0a20 0390A0E1 		mov	r9, r3	@ render_height, render_height
 2179 0a24 01AC84E2 		add	r10, r4, #256	@ _39, ivtmp.95,
 2180 0a28 01506CE2 		rsb	r5, ip, #1	@ tmp150, _38,
 2181              	.LVL137:
 2182              	.L131:
 2183              	.LBB26:
 2184              	.LBB24:
  40:armwave.c     ****     }
 2185              		.loc 1 40 9 is_stmt 1 view .LVU564
 2186              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2187              		.loc 1 40 32 is_stmt 0 view .LVU565
 2188 0a2c 043085E0 		add	r3, r5, r4	@ tmp133, tmp150, ivtmp.95
 2189              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2190              		.loc 1 40 26 view .LVU566
 2191 0a30 491BB0EE 		vmov.f64	d1, d9	@, tmp151
 2192              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2193              		.loc 1 40 32 view .LVU567
 2194 0a34 903A07EE 		vmov	s15, r3	@ int	@ tmp133, tmp133
 2195 0a38 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp134, tmp133
 2196 0a3c 8A0A87EE 		vdiv.f32	s0, s15, s20	@ tmp135, tmp134, tmp136
 2197              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2198              		.loc 1 40 26 view .LVU568
 2199 0a40 C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp135
 2200 0a44 FEFFFFEB 		bl	pow		@
 2201              	.LVL138:
 2202              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2203              		.loc 1 40 49 view .LVU569
 2204 0a48 080B20EE 		vmul.f64	d0, d0, d8	@ tmp138,, tmp139
 2205              	@ armwave.c:40:         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
  40:armwave.c     ****     }
 2206              		.loc 1 40 24 view .LVU570
 2207 0a4c C07BFCEE 		vcvt.u32.f64	s15, d0	@ tmp140, tmp138
 2208 0a50 900A17EE 		vmov	r0, s15	@ int	@ tmp140, tmp140
 2209 0a54 0100E4E5 		strb	r0, [r4, #1]!	@ tmp140, MEM[base: _37, offset: 0B]
 2210              	.LVL139:
 2211              	@ armwave.c:39:     for(i = 0; i < 256; i++) {
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2212              		.loc 1 39 5 view .LVU571
 2213 0a58 0A0054E1 		cmp	r4, r10	@ ivtmp.95, _39
 2214 0a5c F2FFFF1A 		bne	.L131		@,
 2215              	.LVL140:
  39:armwave.c     ****         gamma_table[i] = pow(i / 255.0f, gamma) * 255.0f;
 2216              		.loc 1 39 5 view .LVU572
 2217              	.LBE24:
 2218              	.LBE26:
 443:armwave.c     **** 
 444:armwave.c     ****     // make ch1 yellowish by default
 445:armwave.c     ****     armwave_set_channel_colour(1, 2550, 1780, 250);
 2219              		.loc 1 445 5 is_stmt 1 view .LVU573
 2220              	.LBB27:
 2221              	.LBI27:
 398:armwave.c     **** {
 2222              		.loc 1 398 6 view .LVU574
 2223              	.LBB28:
 401:armwave.c     ****         case 1:
 2224              		.loc 1 401 5 view .LVU575
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2225              		.loc 1 403 13 view .LVU576
 404:armwave.c     ****             g_armwave_state.ch1_color.b = b;
 2226              		.loc 1 404 13 view .LVU577
 2227              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2228              		.loc 1 403 41 is_stmt 0 view .LVU578
 2229 0a60 60C09FE5 		ldr	ip, .L134+24	@ tmp142,
 2230 0a64 60409FE5 		ldr	r4, .L134+28	@ tmp143,
 2231              	.LBE28:
 2232              	.LBE27:
 2233              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 446:armwave.c     **** 
 447:armwave.c     ****     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_height, 0x00000000);
 2234              		.loc 1 447 5 view .LVU579
 2235 0a68 0000A0E3 		mov	r0, #0	@ tmp147,
 2236              	.LBB32:
 2237              	.LBB29:
 2238              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 2239              		.loc 1 405 41 view .LVU580
 2240 0a6c FAE0A0E3 		mov	lr, #250	@ tmp146,
 2241              	.LBE29:
 2242              	.LBE32:
 2243              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2244              		.loc 1 447 5 view .LVU581
 2245 0a70 08008DE5 		str	r0, [sp, #8]	@ tmp147,
 2246 0a74 04908DE5 		str	r9, [sp, #4]	@ render_height,
 2247 0a78 00808DE5 		str	r8, [sp]	@ render_width,
 2248 0a7c 0610A0E1 		mov	r1, r6	@, tmp3
 2249 0a80 0720A0E1 		mov	r2, r7	@, nwaves
 2250              	.LBB33:
 2251              	.LBB30:
 2252              	@ armwave.c:403:             g_armwave_state.ch1_color.r = r;
 403:armwave.c     ****             g_armwave_state.ch1_color.g = g;
 2253              		.loc 1 403 41 view .LVU582
 2254 0a84 6C408CE5 		str	r4, [ip, #108]	@ tmp143, MEM[(short int *)&g_armwave_state + 108B]
 405:armwave.c     ****             break;
 2255              		.loc 1 405 13 is_stmt 1 view .LVU583
 2256              	.LBE30:
 2257              	.LBE33:
 2258              	@ armwave.c:447:     armwave_setup_render(0, wave_size, nwaves, wave_size, render_width, render_hei
 2259              		.loc 1 447 5 is_stmt 0 view .LVU584
 2260 0a88 0630A0E1 		mov	r3, r6	@, wave_size
 2261              	.LBB34:
 2262              	.LBB31:
 2263              	@ armwave.c:405:             g_armwave_state.ch1_color.b = b;
 405:armwave.c     ****             break;
 2264              		.loc 1 405 41 view .LVU585
 2265 0a8c B0E7CCE1 		strh	lr, [ip, #112]	@ movhi	@ tmp146, g_armwave_state.ch1_color.b
 406:armwave.c     ****     }
 2266              		.loc 1 406 13 is_stmt 1 view .LVU586
 2267              	.LVL141:
 406:armwave.c     ****     }
 2268              		.loc 1 406 13 is_stmt 0 view .LVU587
 2269              	.LBE31:
 2270              	.LBE34:
 2271              		.loc 1 447 5 is_stmt 1 view .LVU588
 2272 0a90 FEFFFFEB 		bl	armwave_setup_render		@
 2273              	.LVL142:
 448:armwave.c     **** 
 449:armwave.c     ****     printf("armwave version: %s\n", ARMWAVE_VER);
 2274              		.loc 1 449 5 view .LVU589
 2275 0a94 34109FE5 		ldr	r1, .L134+32	@,
 2276 0a98 34009FE5 		ldr	r0, .L134+36	@,
 2277              	@ armwave.c:450: }
 450:armwave.c     **** }
 2278              		.loc 1 450 1 is_stmt 0 view .LVU590
 2279 0a9c 10D08DE2 		add	sp, sp, #16	@,,
 2280              		.cfi_def_cfa_offset 56
 2281              		@ sp needed	@
 2282 0aa0 068BBDEC 		vldm	sp!, {d8-d10}	@,
 2283              		.cfi_restore 84
 2284              		.cfi_restore 85
 2285              		.cfi_restore 82
 2286              		.cfi_restore 83
 2287              		.cfi_restore 80
 2288              		.cfi_restore 81
 2289              		.cfi_def_cfa_offset 32
 2290 0aa4 F047BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2291              		.cfi_restore 14
 2292              		.cfi_restore 10
 2293              		.cfi_restore 9
 2294              		.cfi_restore 8
 2295              		.cfi_restore 7
 2296              		.cfi_restore 6
 2297              		.cfi_restore 5
 2298              		.cfi_restore 4
 2299              		.cfi_def_cfa_offset 0
 2300              	.LVL143:
 2301              	@ armwave.c:449:     printf("armwave version: %s\n", ARMWAVE_VER);
 449:armwave.c     **** }
 2302              		.loc 1 449 5 view .LVU591
 2303 0aa8 FEFFFFEA 		b	printf		@
 2304              	.LVL144:
 2305              	.L135:
 2306 0aac 0000A0E1 		.align	3
 2307              	.L134:
 2308 0ab0 000000C0 		.word	-1073741824
 2309 0ab4 CCCCEC3F 		.word	1072483532
 2310 0ab8 00000000 		.word	0
 2311 0abc 00E06F40 		.word	1081073664
 2312 0ac0 00007F43 		.word	1132396544
 2313 0ac4 FFFFFFFF 		.word	gamma_table-1
 2314 0ac8 00000000 		.word	g_armwave_state
 2315 0acc F609F406 		.word	116656630
 2316 0ad0 00000000 		.word	.LC0
 2317 0ad4 08000000 		.word	.LC1
 2318              		.cfi_endproc
 2319              	.LFE69:
 2321              		.align	2
 2322              		.global	armwave_test_fill_outbuf
 2323              		.syntax unified
 2324              		.arm
 2325              		.fpu vfp
 2327              	armwave_test_fill_outbuf:
 2328              	.LFB70:
 451:armwave.c     **** 
 452:armwave.c     **** /*
 453:armwave.c     ****  * Render image to the local allocated buffer.
 454:armwave.c     ****  */
 455:armwave.c     **** void armwave_test_fill_outbuf()
 456:armwave.c     **** {
 2329              		.loc 1 456 1 is_stmt 1 view -0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 0
 2332              		@ frame_needed = 0, uses_anonymous_args = 0
 2333              		@ link register save eliminated.
 457:armwave.c     ****     armwave_fill_pixbuf_scaled(g_armwave_state.out_pixbuf);
 2334              		.loc 1 457 5 view .LVU593
 2335 0ad8 04309FE5 		ldr	r3, .L137	@ tmp111,
 2336 0adc 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2337 0ae0 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2338              	.LVL145:
 2339              	.L138:
 2340              		.align	2
 2341              	.L137:
 2342 0ae4 00000000 		.word	g_armwave_state
 2343              		.cfi_endproc
 2344              	.LFE70:
 2346              		.align	2
 2347              		.global	armwave_test_dump_buffer_to_ppm
 2348              		.syntax unified
 2349              		.arm
 2350              		.fpu vfp
 2352              	armwave_test_dump_buffer_to_ppm:
 2353              	.LVL146:
 2354              	.LFB71:
 458:armwave.c     **** }
 459:armwave.c     **** 
 460:armwave.c     **** /*
 461:armwave.c     ****  * Dump the working local allocated buffer to a ppm file for debug.
 462:armwave.c     ****  */
 463:armwave.c     **** void armwave_test_dump_buffer_to_ppm(char *fn)
 464:armwave.c     **** {
 2355              		.loc 1 464 1 view -0
 2356              		.cfi_startproc
 2357              		@ args = 0, pretend = 0, frame = 0
 2358              		@ frame_needed = 0, uses_anonymous_args = 0
 2359              		@ link register save eliminated.
 465:armwave.c     ****     armwave_dump_ppm_debug(g_armwave_state.out_pixbuf, fn);
 2360              		.loc 1 465 5 view .LVU595
 2361 0ae8 08309FE5 		ldr	r3, .L140	@ tmp112,
 2362 0aec 0010A0E1 		mov	r1, r0	@, fn
 2363 0af0 680093E5 		ldr	r0, [r3, #104]	@, g_armwave_state.out_pixbuf
 2364              	.LVL147:
 2365              		.loc 1 465 5 is_stmt 0 view .LVU596
 2366 0af4 FEFFFFEA 		b	armwave_dump_ppm_debug		@
 2367              	.LVL148:
 2368              	.L141:
 2369              		.loc 1 465 5 view .LVU597
 2370              		.align	2
 2371              	.L140:
 2372 0af8 00000000 		.word	g_armwave_state
 2373              		.cfi_endproc
 2374              	.LFE71:
 2376              		.align	2
 2377              		.global	armwave_test_fill_gdkbuf
 2378              		.syntax unified
 2379              		.arm
 2380              		.fpu vfp
 2382              	armwave_test_fill_gdkbuf:
 2383              	.LVL149:
 2384              	.LFB72:
 466:armwave.c     **** }
 467:armwave.c     **** 
 468:armwave.c     **** /*
 469:armwave.c     ****  * Render GDK buffer with test funtionry.
 470:armwave.c     ****  */
 471:armwave.c     **** void armwave_test_fill_gdkbuf(PyObject *buf)
 472:armwave.c     **** {
 2385              		.loc 1 472 1 is_stmt 1 view -0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 0
 2388              		@ frame_needed = 0, uses_anonymous_args = 0
 2389              		@ link register save eliminated.
 473:armwave.c     ****     //PyObject *mv;
 474:armwave.c     ****     //Py_buffer *buf = malloc(sizeof(Py_buffer));
 475:armwave.c     **** 
 476:armwave.c     ****     // Holy jesus dear mother of God, what have we done?
 477:armwave.c     ****     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 2390              		.loc 1 477 5 view .LVU599
 478:armwave.c     ****     
 479:armwave.c     ****     // TODO: use armwave_fill_pixbuf_256 for 256-height buffers for performance?
 480:armwave.c     ****     armwave_fill_pixbuf_scaled(out_pixbuf);
 2391              		.loc 1 480 5 view .LVU600
 2392              	@ armwave.c:477:     void *out_pixbuf = ((uint32_t ***)buf)[2][10];
 477:armwave.c     ****     
 2393              		.loc 1 477 11 is_stmt 0 view .LVU601
 2394 0afc 083090E5 		ldr	r3, [r0, #8]	@ MEM[(uint32_t * * *)buf_2(D) + 8B], MEM[(uint32_t * * *)buf_2(D) + 8B]
 2395              	@ armwave.c:480:     armwave_fill_pixbuf_scaled(out_pixbuf);
 2396              		.loc 1 480 5 view .LVU602
 2397 0b00 280093E5 		ldr	r0, [r3, #40]	@, MEM[(uint32_t * *)_1 + 40B]
 2398              	.LVL150:
 2399              		.loc 1 480 5 view .LVU603
 2400 0b04 FEFFFFEA 		b	armwave_fill_pixbuf_scaled		@
 2401              	.LVL151:
 2402              		.loc 1 480 5 view .LVU604
 2403              		.cfi_endproc
 2404              	.LFE72:
 2406              		.align	2
 2407              		.global	armwave_test_buffer_alloc
 2408              		.syntax unified
 2409              		.arm
 2410              		.fpu vfp
 2412              	armwave_test_buffer_alloc:
 2413              	.LVL152:
 2414              	.LFB73:
 481:armwave.c     **** }
 482:armwave.c     **** 
 483:armwave.c     **** /*
 484:armwave.c     ****  * Allocate a test buffer, freeing any existing buffer.
 485:armwave.c     ****  */
 486:armwave.c     **** void armwave_test_buffer_alloc(int nsets)
 487:armwave.c     **** {
 2415              		.loc 1 487 1 is_stmt 1 view -0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 488:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2419              		.loc 1 488 5 view .LVU606
 2420              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2421              		.loc 1 487 1 is_stmt 0 view .LVU607
 2422 0b08 70402DE9 		push	{r4, r5, r6, lr}	@
 2423              		.cfi_def_cfa_offset 16
 2424              		.cfi_offset 4, -16
 2425              		.cfi_offset 5, -12
 2426              		.cfi_offset 6, -8
 2427              		.cfi_offset 14, -4
 2428              	@ armwave.c:487: {
 487:armwave.c     ****     if(g_armwave_state.test_wave_buffer != NULL) {
 2429              		.loc 1 487 1 view .LVU608
 2430 0b0c 0060A0E1 		mov	r6, r0	@ nsets, nsets
 2431              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2432              		.loc 1 488 23 view .LVU609
 2433 0b10 44409FE5 		ldr	r4, .L150	@ tmp128,
 2434 0b14 180094E5 		ldr	r0, [r4, #24]	@ _1, g_armwave_state.test_wave_buffer
 2435              	.LVL153:
 2436              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 2437              		.loc 1 488 7 view .LVU610
 2438 0b18 000050E3 		cmp	r0, #0	@ _1,
 2439 0b1c 0000000A 		beq	.L144		@,
 489:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2440              		.loc 1 489 9 is_stmt 1 view .LVU611
 2441 0b20 FEFFFFEB 		bl	free		@
 2442              	.LVL154:
 2443              	.L144:
 490:armwave.c     ****     }
 491:armwave.c     **** 
 492:armwave.c     ****     //printf("armwave_test_buffer_alloc: length=%d max=%d\n", g_armwave_state.wave_length, g_armwav
 493:armwave.c     **** 
 494:armwave.c     ****     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armwave_state.waves_m
 2444              		.loc 1 494 5 view .LVU612
 2445              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2446              		.loc 1 494 75 is_stmt 0 view .LVU613
 2447 0b24 4C3094E5 		ldr	r3, [r4, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2448 0b28 3C5094E5 		ldr	r5, [r4, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2449              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2450              		.loc 1 494 40 view .LVU614
 2451 0b2c 0610A0E1 		mov	r1, r6	@, nsets
 2452              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2453              		.loc 1 494 75 view .LVU615
 2454 0b30 950305E0 		mul	r5, r5, r3	@ _4, g_armwave_state.waves_max, g_armwave_state.wave_length
 2455              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 2456              		.loc 1 494 40 view .LVU616
 2457 0b34 0500A0E1 		mov	r0, r5	@, _4
 2458 0b38 FEFFFFEB 		bl	calloc		@
 2459              	.LVL155:
 2460              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 495:armwave.c     **** 
 496:armwave.c     ****     if(g_armwave_state.test_wave_buffer == NULL) {
 2461              		.loc 1 496 7 view .LVU617
 2462 0b3c 000050E3 		cmp	r0, #0	@ tmp124,
 2463              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2464              		.loc 1 494 38 view .LVU618
 2465 0b40 180084E5 		str	r0, [r4, #24]	@ tmp124, g_armwave_state.test_wave_buffer
 2466              		.loc 1 496 5 is_stmt 1 view .LVU619
 2467              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 2468              		.loc 1 496 7 is_stmt 0 view .LVU620
 2469 0b44 7080BD18 		popne	{r4, r5, r6, pc}	@
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2470              		.loc 1 497 9 is_stmt 1 view .LVU621
 2471 0b48 960501E0 		mul	r1, r6, r5	@, nsets, _4
 2472 0b4c 0620A0E1 		mov	r2, r6	@, nsets
 2473 0b50 08009FE5 		ldr	r0, .L150+4	@,
 2474              	@ armwave.c:501: }
 498:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 499:armwave.c     ****         return;
 500:armwave.c     ****     }
 501:armwave.c     **** }
 2475              		.loc 1 501 1 is_stmt 0 view .LVU622
 2476 0b54 7040BDE8 		pop	{r4, r5, r6, lr}	@
 2477              		.cfi_restore 14
 2478              		.cfi_restore 6
 2479              		.cfi_restore 5
 2480              		.cfi_restore 4
 2481              		.cfi_def_cfa_offset 0
 2482              	.LVL156:
 2483              	@ armwave.c:497:         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2484              		.loc 1 497 9 view .LVU623
 2485 0b58 FEFFFFEA 		b	printf		@
 2486              	.LVL157:
 2487              	.L151:
 497:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2488              		.loc 1 497 9 view .LVU624
 2489              		.align	2
 2490              	.L150:
 2491 0b5c 00000000 		.word	g_armwave_state
 2492 0b60 F8010000 		.word	.LC19
 2493              		.cfi_endproc
 2494              	.LFE73:
 2496              		.align	2
 2497              		.global	armwave_fill_pixbuf_into_pybuffer
 2498              		.syntax unified
 2499              		.arm
 2500              		.fpu vfp
 2502              	armwave_fill_pixbuf_into_pybuffer:
 2503              	.LVL158:
 2504              	.LFB74:
 502:armwave.c     **** 
 503:armwave.c     **** /*
 504:armwave.c     ****  * Fill a pixbuf PyBuffer with a rendered waveform.
 505:armwave.c     ****  */
 506:armwave.c     **** PyObject *armwave_fill_pixbuf_into_pybuffer(PyObject *buf_obj)
 507:armwave.c     **** {
 2505              		.loc 1 507 1 is_stmt 1 view -0
 2506              		.cfi_startproc
 2507              		@ args = 0, pretend = 0, frame = 48
 2508              		@ frame_needed = 0, uses_anonymous_args = 0
 508:armwave.c     ****     Py_buffer buffer;
 2509              		.loc 1 508 5 view .LVU626
 509:armwave.c     ****     int ret;
 2510              		.loc 1 509 5 view .LVU627
 510:armwave.c     **** 
 511:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: start\n");
 512:armwave.c     **** 
 513:armwave.c     ****     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2511              		.loc 1 513 5 view .LVU628
 2512              	@ armwave.c:507: {
 507:armwave.c     ****     Py_buffer buffer;
 2513              		.loc 1 507 1 is_stmt 0 view .LVU629
 2514 0b64 04E02DE5 		str	lr, [sp, #-4]!	@,
 2515              		.cfi_def_cfa_offset 4
 2516              		.cfi_offset 14, -4
 2517 0b68 34D04DE2 		sub	sp, sp, #52	@,,
 2518              		.cfi_def_cfa_offset 56
 2519              	@ armwave.c:513:     ret = PyObject_GetBuffer(buf_obj, &buffer, PyBUF_SIMPLE | PyBUF_WRITABLE);
 2520              		.loc 1 513 11 view .LVU630
 2521 0b6c 04108DE2 		add	r1, sp, #4	@ tmp131,,
 2522 0b70 0120A0E3 		mov	r2, #1	@,
 2523 0b74 FEFFFFEB 		bl	PyObject_GetBuffer		@
 2524              	.LVL159:
 514:armwave.c     **** 
 515:armwave.c     ****     if(ret != 0) {
 2525              		.loc 1 515 5 is_stmt 1 view .LVU631
 2526              	@ armwave.c:515:     if(ret != 0) {
 2527              		.loc 1 515 7 is_stmt 0 view .LVU632
 2528 0b78 000050E3 		cmp	r0, #0	@,
 2529 0b7c 0A00001A 		bne	.L156		@,
 516:armwave.c     ****         printf("armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuffer() failed, returning PyFalse\n
 517:armwave.c     ****         Py_RETURN_FALSE;
 518:armwave.c     ****     }
 519:armwave.c     **** 
 520:armwave.c     ****     //printf("PyObject_GetBuffer did not trigger assert: buffer->buf=0x%08x, buffer->obj=0x%08x, bu
 521:armwave.c     **** 
 522:armwave.c     ****     armwave_fill_pixbuf_scaled(buffer.buf);
 2530              		.loc 1 522 5 is_stmt 1 view .LVU633
 2531 0b80 04009DE5 		ldr	r0, [sp, #4]	@, buffer.buf
 2532              	.LVL160:
 2533              		.loc 1 522 5 is_stmt 0 view .LVU634
 2534 0b84 FEFFFFEB 		bl	armwave_fill_pixbuf_scaled		@
 2535              	.LVL161:
 523:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: buffer fill done\n");
 524:armwave.c     **** 
 525:armwave.c     ****     PyBuffer_Release(&buffer);
 2536              		.loc 1 525 5 is_stmt 1 view .LVU635
 2537 0b88 04008DE2 		add	r0, sp, #4	@ tmp132,,
 2538 0b8c FEFFFFEB 		bl	PyBuffer_Release		@
 2539              	.LVL162:
 526:armwave.c     ****     //printf("armwave_fill_pixbuf_into_pybuffer: done\n");
 527:armwave.c     **** 
 528:armwave.c     ****     Py_RETURN_TRUE;
 2540              		.loc 1 528 5 view .LVU636
 2541              	.LBB35:
 2542              	.LBI35:
 2543              		.file 2 "/usr/local/include/python3.8/object.h"
   1:/usr/local/include/python3.8/object.h **** #ifndef Py_OBJECT_H
   2:/usr/local/include/python3.8/object.h **** #define Py_OBJECT_H
   3:/usr/local/include/python3.8/object.h **** 
   4:/usr/local/include/python3.8/object.h **** #include "pymem.h"   /* _Py_tracemalloc_config */
   5:/usr/local/include/python3.8/object.h **** 
   6:/usr/local/include/python3.8/object.h **** #ifdef __cplusplus
   7:/usr/local/include/python3.8/object.h **** extern "C" {
   8:/usr/local/include/python3.8/object.h **** #endif
   9:/usr/local/include/python3.8/object.h **** 
  10:/usr/local/include/python3.8/object.h **** 
  11:/usr/local/include/python3.8/object.h **** /* Object and type object interface */
  12:/usr/local/include/python3.8/object.h **** 
  13:/usr/local/include/python3.8/object.h **** /*
  14:/usr/local/include/python3.8/object.h **** Objects are structures allocated on the heap.  Special rules apply to
  15:/usr/local/include/python3.8/object.h **** the use of objects to ensure they are properly garbage-collected.
  16:/usr/local/include/python3.8/object.h **** Objects are never allocated statically or on the stack; they must be
  17:/usr/local/include/python3.8/object.h **** accessed through special macros and functions only.  (Type objects are
  18:/usr/local/include/python3.8/object.h **** exceptions to the first rule; the standard types are represented by
  19:/usr/local/include/python3.8/object.h **** statically initialized type objects, although work on type/class unification
  20:/usr/local/include/python3.8/object.h **** for Python 2.2 made it possible to have heap-allocated type objects too).
  21:/usr/local/include/python3.8/object.h **** 
  22:/usr/local/include/python3.8/object.h **** An object has a 'reference count' that is increased or decreased when a
  23:/usr/local/include/python3.8/object.h **** pointer to the object is copied or deleted; when the reference count
  24:/usr/local/include/python3.8/object.h **** reaches zero there are no references to the object left and it can be
  25:/usr/local/include/python3.8/object.h **** removed from the heap.
  26:/usr/local/include/python3.8/object.h **** 
  27:/usr/local/include/python3.8/object.h **** An object has a 'type' that determines what it represents and what kind
  28:/usr/local/include/python3.8/object.h **** of data it contains.  An object's type is fixed when it is created.
  29:/usr/local/include/python3.8/object.h **** Types themselves are represented as objects; an object contains a
  30:/usr/local/include/python3.8/object.h **** pointer to the corresponding type object.  The type itself has a type
  31:/usr/local/include/python3.8/object.h **** pointer pointing to the object representing the type 'type', which
  32:/usr/local/include/python3.8/object.h **** contains a pointer to itself!.
  33:/usr/local/include/python3.8/object.h **** 
  34:/usr/local/include/python3.8/object.h **** Objects do not float around in memory; once allocated an object keeps
  35:/usr/local/include/python3.8/object.h **** the same size and address.  Objects that must hold variable-size data
  36:/usr/local/include/python3.8/object.h **** can contain pointers to variable-size parts of the object.  Not all
  37:/usr/local/include/python3.8/object.h **** objects of the same type have the same size; but the size cannot change
  38:/usr/local/include/python3.8/object.h **** after allocation.  (These restrictions are made so a reference to an
  39:/usr/local/include/python3.8/object.h **** object can be simply a pointer -- moving an object would require
  40:/usr/local/include/python3.8/object.h **** updating all the pointers, and changing an object's size would require
  41:/usr/local/include/python3.8/object.h **** moving it if there was another object right next to it.)
  42:/usr/local/include/python3.8/object.h **** 
  43:/usr/local/include/python3.8/object.h **** Objects are always accessed through pointers of the type 'PyObject *'.
  44:/usr/local/include/python3.8/object.h **** The type 'PyObject' is a structure that only contains the reference count
  45:/usr/local/include/python3.8/object.h **** and the type pointer.  The actual memory allocated for an object
  46:/usr/local/include/python3.8/object.h **** contains other data that can only be accessed after casting the pointer
  47:/usr/local/include/python3.8/object.h **** to a pointer to a longer structure type.  This longer type must start
  48:/usr/local/include/python3.8/object.h **** with the reference count and type fields; the macro PyObject_HEAD should be
  49:/usr/local/include/python3.8/object.h **** used for this (to accommodate for future changes).  The implementation
  50:/usr/local/include/python3.8/object.h **** of a particular object type can cast the object pointer to the proper
  51:/usr/local/include/python3.8/object.h **** type and back.
  52:/usr/local/include/python3.8/object.h **** 
  53:/usr/local/include/python3.8/object.h **** A standard interface exists for objects that contain an array of items
  54:/usr/local/include/python3.8/object.h **** whose size is determined when the object is allocated.
  55:/usr/local/include/python3.8/object.h **** */
  56:/usr/local/include/python3.8/object.h **** 
  57:/usr/local/include/python3.8/object.h **** /* Py_DEBUG implies Py_REF_DEBUG. */
  58:/usr/local/include/python3.8/object.h **** #if defined(Py_DEBUG) && !defined(Py_REF_DEBUG)
  59:/usr/local/include/python3.8/object.h **** #define Py_REF_DEBUG
  60:/usr/local/include/python3.8/object.h **** #endif
  61:/usr/local/include/python3.8/object.h **** 
  62:/usr/local/include/python3.8/object.h **** #if defined(Py_LIMITED_API) && defined(Py_REF_DEBUG)
  63:/usr/local/include/python3.8/object.h **** #error Py_LIMITED_API is incompatible with Py_DEBUG, Py_TRACE_REFS, and Py_REF_DEBUG
  64:/usr/local/include/python3.8/object.h **** #endif
  65:/usr/local/include/python3.8/object.h **** 
  66:/usr/local/include/python3.8/object.h **** 
  67:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
  68:/usr/local/include/python3.8/object.h **** /* Define pointers to support a doubly-linked list of all live heap objects. */
  69:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA            \
  70:/usr/local/include/python3.8/object.h ****     struct _object *_ob_next;           \
  71:/usr/local/include/python3.8/object.h ****     struct _object *_ob_prev;
  72:/usr/local/include/python3.8/object.h **** 
  73:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT 0, 0,
  74:/usr/local/include/python3.8/object.h **** 
  75:/usr/local/include/python3.8/object.h **** #else
  76:/usr/local/include/python3.8/object.h **** #define _PyObject_HEAD_EXTRA
  77:/usr/local/include/python3.8/object.h **** #define _PyObject_EXTRA_INIT
  78:/usr/local/include/python3.8/object.h **** #endif
  79:/usr/local/include/python3.8/object.h **** 
  80:/usr/local/include/python3.8/object.h **** /* PyObject_HEAD defines the initial segment of every PyObject. */
  81:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD                   PyObject ob_base;
  82:/usr/local/include/python3.8/object.h **** 
  83:/usr/local/include/python3.8/object.h **** #define PyObject_HEAD_INIT(type)        \
  84:/usr/local/include/python3.8/object.h ****     { _PyObject_EXTRA_INIT              \
  85:/usr/local/include/python3.8/object.h ****     1, type },
  86:/usr/local/include/python3.8/object.h **** 
  87:/usr/local/include/python3.8/object.h **** #define PyVarObject_HEAD_INIT(type, size)       \
  88:/usr/local/include/python3.8/object.h ****     { PyObject_HEAD_INIT(type) size },
  89:/usr/local/include/python3.8/object.h **** 
  90:/usr/local/include/python3.8/object.h **** /* PyObject_VAR_HEAD defines the initial segment of all variable-size
  91:/usr/local/include/python3.8/object.h ****  * container objects.  These end with a declaration of an array with 1
  92:/usr/local/include/python3.8/object.h ****  * element, but enough space is malloc'ed so that the array actually
  93:/usr/local/include/python3.8/object.h ****  * has room for ob_size elements.  Note that ob_size is an element count,
  94:/usr/local/include/python3.8/object.h ****  * not necessarily a byte count.
  95:/usr/local/include/python3.8/object.h ****  */
  96:/usr/local/include/python3.8/object.h **** #define PyObject_VAR_HEAD      PyVarObject ob_base;
  97:/usr/local/include/python3.8/object.h **** #define Py_INVALID_SIZE (Py_ssize_t)-1
  98:/usr/local/include/python3.8/object.h **** 
  99:/usr/local/include/python3.8/object.h **** /* Nothing is actually declared to be a PyObject, but every pointer to
 100:/usr/local/include/python3.8/object.h ****  * a Python object can be cast to a PyObject*.  This is inheritance built
 101:/usr/local/include/python3.8/object.h ****  * by hand.  Similarly every pointer to a variable-size Python object can,
 102:/usr/local/include/python3.8/object.h ****  * in addition, be cast to PyVarObject*.
 103:/usr/local/include/python3.8/object.h ****  */
 104:/usr/local/include/python3.8/object.h **** typedef struct _object {
 105:/usr/local/include/python3.8/object.h ****     _PyObject_HEAD_EXTRA
 106:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_refcnt;
 107:/usr/local/include/python3.8/object.h ****     struct _typeobject *ob_type;
 108:/usr/local/include/python3.8/object.h **** } PyObject;
 109:/usr/local/include/python3.8/object.h **** 
 110:/usr/local/include/python3.8/object.h **** /* Cast argument to PyObject* type. */
 111:/usr/local/include/python3.8/object.h **** #define _PyObject_CAST(op) ((PyObject*)(op))
 112:/usr/local/include/python3.8/object.h **** 
 113:/usr/local/include/python3.8/object.h **** typedef struct {
 114:/usr/local/include/python3.8/object.h ****     PyObject ob_base;
 115:/usr/local/include/python3.8/object.h ****     Py_ssize_t ob_size; /* Number of items in variable part */
 116:/usr/local/include/python3.8/object.h **** } PyVarObject;
 117:/usr/local/include/python3.8/object.h **** 
 118:/usr/local/include/python3.8/object.h **** /* Cast argument to PyVarObject* type. */
 119:/usr/local/include/python3.8/object.h **** #define _PyVarObject_CAST(op) ((PyVarObject*)(op))
 120:/usr/local/include/python3.8/object.h **** 
 121:/usr/local/include/python3.8/object.h **** #define Py_REFCNT(ob)           (_PyObject_CAST(ob)->ob_refcnt)
 122:/usr/local/include/python3.8/object.h **** #define Py_TYPE(ob)             (_PyObject_CAST(ob)->ob_type)
 123:/usr/local/include/python3.8/object.h **** #define Py_SIZE(ob)             (_PyVarObject_CAST(ob)->ob_size)
 124:/usr/local/include/python3.8/object.h **** 
 125:/usr/local/include/python3.8/object.h **** /*
 126:/usr/local/include/python3.8/object.h **** Type objects contain a string containing the type name (to help somewhat
 127:/usr/local/include/python3.8/object.h **** in debugging), the allocation parameters (see PyObject_New() and
 128:/usr/local/include/python3.8/object.h **** PyObject_NewVar()),
 129:/usr/local/include/python3.8/object.h **** and methods for accessing objects of the type.  Methods are optional, a
 130:/usr/local/include/python3.8/object.h **** nil pointer meaning that particular kind of access is not available for
 131:/usr/local/include/python3.8/object.h **** this type.  The Py_DECREF() macro uses the tp_dealloc method without
 132:/usr/local/include/python3.8/object.h **** checking for a nil pointer; it should always be implemented except if
 133:/usr/local/include/python3.8/object.h **** the implementation can guarantee that the reference count will never
 134:/usr/local/include/python3.8/object.h **** reach zero (e.g., for statically allocated type objects).
 135:/usr/local/include/python3.8/object.h **** 
 136:/usr/local/include/python3.8/object.h **** NB: the methods for certain type groups are now contained in separate
 137:/usr/local/include/python3.8/object.h **** method blocks.
 138:/usr/local/include/python3.8/object.h **** */
 139:/usr/local/include/python3.8/object.h **** 
 140:/usr/local/include/python3.8/object.h **** typedef PyObject * (*unaryfunc)(PyObject *);
 141:/usr/local/include/python3.8/object.h **** typedef PyObject * (*binaryfunc)(PyObject *, PyObject *);
 142:/usr/local/include/python3.8/object.h **** typedef PyObject * (*ternaryfunc)(PyObject *, PyObject *, PyObject *);
 143:/usr/local/include/python3.8/object.h **** typedef int (*inquiry)(PyObject *);
 144:/usr/local/include/python3.8/object.h **** typedef Py_ssize_t (*lenfunc)(PyObject *);
 145:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizeargfunc)(PyObject *, Py_ssize_t);
 146:/usr/local/include/python3.8/object.h **** typedef PyObject *(*ssizessizeargfunc)(PyObject *, Py_ssize_t, Py_ssize_t);
 147:/usr/local/include/python3.8/object.h **** typedef int(*ssizeobjargproc)(PyObject *, Py_ssize_t, PyObject *);
 148:/usr/local/include/python3.8/object.h **** typedef int(*ssizessizeobjargproc)(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);
 149:/usr/local/include/python3.8/object.h **** typedef int(*objobjargproc)(PyObject *, PyObject *, PyObject *);
 150:/usr/local/include/python3.8/object.h **** 
 151:/usr/local/include/python3.8/object.h **** typedef int (*objobjproc)(PyObject *, PyObject *);
 152:/usr/local/include/python3.8/object.h **** typedef int (*visitproc)(PyObject *, void *);
 153:/usr/local/include/python3.8/object.h **** typedef int (*traverseproc)(PyObject *, visitproc, void *);
 154:/usr/local/include/python3.8/object.h **** 
 155:/usr/local/include/python3.8/object.h **** 
 156:/usr/local/include/python3.8/object.h **** typedef void (*freefunc)(void *);
 157:/usr/local/include/python3.8/object.h **** typedef void (*destructor)(PyObject *);
 158:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrfunc)(PyObject *, char *);
 159:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getattrofunc)(PyObject *, PyObject *);
 160:/usr/local/include/python3.8/object.h **** typedef int (*setattrfunc)(PyObject *, char *, PyObject *);
 161:/usr/local/include/python3.8/object.h **** typedef int (*setattrofunc)(PyObject *, PyObject *, PyObject *);
 162:/usr/local/include/python3.8/object.h **** typedef PyObject *(*reprfunc)(PyObject *);
 163:/usr/local/include/python3.8/object.h **** typedef Py_hash_t (*hashfunc)(PyObject *);
 164:/usr/local/include/python3.8/object.h **** typedef PyObject *(*richcmpfunc) (PyObject *, PyObject *, int);
 165:/usr/local/include/python3.8/object.h **** typedef PyObject *(*getiterfunc) (PyObject *);
 166:/usr/local/include/python3.8/object.h **** typedef PyObject *(*iternextfunc) (PyObject *);
 167:/usr/local/include/python3.8/object.h **** typedef PyObject *(*descrgetfunc) (PyObject *, PyObject *, PyObject *);
 168:/usr/local/include/python3.8/object.h **** typedef int (*descrsetfunc) (PyObject *, PyObject *, PyObject *);
 169:/usr/local/include/python3.8/object.h **** typedef int (*initproc)(PyObject *, PyObject *, PyObject *);
 170:/usr/local/include/python3.8/object.h **** typedef PyObject *(*newfunc)(struct _typeobject *, PyObject *, PyObject *);
 171:/usr/local/include/python3.8/object.h **** typedef PyObject *(*allocfunc)(struct _typeobject *, Py_ssize_t);
 172:/usr/local/include/python3.8/object.h **** 
 173:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 174:/usr/local/include/python3.8/object.h **** /* In Py_LIMITED_API, PyTypeObject is an opaque structure. */
 175:/usr/local/include/python3.8/object.h **** typedef struct _typeobject PyTypeObject;
 176:/usr/local/include/python3.8/object.h **** #else
 177:/usr/local/include/python3.8/object.h **** /* PyTypeObject is defined in cpython/object.h */
 178:/usr/local/include/python3.8/object.h **** #endif
 179:/usr/local/include/python3.8/object.h **** 
 180:/usr/local/include/python3.8/object.h **** typedef struct{
 181:/usr/local/include/python3.8/object.h ****     int slot;    /* slot id, see below */
 182:/usr/local/include/python3.8/object.h ****     void *pfunc; /* function pointer */
 183:/usr/local/include/python3.8/object.h **** } PyType_Slot;
 184:/usr/local/include/python3.8/object.h **** 
 185:/usr/local/include/python3.8/object.h **** typedef struct{
 186:/usr/local/include/python3.8/object.h ****     const char* name;
 187:/usr/local/include/python3.8/object.h ****     int basicsize;
 188:/usr/local/include/python3.8/object.h ****     int itemsize;
 189:/usr/local/include/python3.8/object.h ****     unsigned int flags;
 190:/usr/local/include/python3.8/object.h ****     PyType_Slot *slots; /* terminated by slot==0. */
 191:/usr/local/include/python3.8/object.h **** } PyType_Spec;
 192:/usr/local/include/python3.8/object.h **** 
 193:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpec(PyType_Spec*);
 194:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 195:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject*) PyType_FromSpecWithBases(PyType_Spec*, PyObject*);
 196:/usr/local/include/python3.8/object.h **** #endif
 197:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03040000
 198:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void*) PyType_GetSlot(struct _typeobject*, int);
 199:/usr/local/include/python3.8/object.h **** #endif
 200:/usr/local/include/python3.8/object.h **** 
 201:/usr/local/include/python3.8/object.h **** /* Generic type check */
 202:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_IsSubtype(struct _typeobject *, struct _typeobject *);
 203:/usr/local/include/python3.8/object.h **** #define PyObject_TypeCheck(ob, tp) \
 204:/usr/local/include/python3.8/object.h ****     (Py_TYPE(ob) == (tp) || PyType_IsSubtype(Py_TYPE(ob), (tp)))
 205:/usr/local/include/python3.8/object.h **** 
 206:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyType_Type; /* built-in 'type' */
 207:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PyBaseObject_Type; /* built-in 'object' */
 208:/usr/local/include/python3.8/object.h **** PyAPI_DATA(struct _typeobject) PySuper_Type; /* built-in 'super' */
 209:/usr/local/include/python3.8/object.h **** 
 210:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned long) PyType_GetFlags(struct _typeobject*);
 211:/usr/local/include/python3.8/object.h **** 
 212:/usr/local/include/python3.8/object.h **** #define PyType_Check(op) \
 213:/usr/local/include/python3.8/object.h ****     PyType_FastSubclass(Py_TYPE(op), Py_TPFLAGS_TYPE_SUBCLASS)
 214:/usr/local/include/python3.8/object.h **** #define PyType_CheckExact(op) (Py_TYPE(op) == &PyType_Type)
 215:/usr/local/include/python3.8/object.h **** 
 216:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyType_Ready(struct _typeobject *);
 217:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericAlloc(struct _typeobject *, Py_ssize_t);
 218:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyType_GenericNew(struct _typeobject *,
 219:/usr/local/include/python3.8/object.h ****                                                PyObject *, PyObject *);
 220:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(unsigned int) PyType_ClearCache(void);
 221:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyType_Modified(struct _typeobject *);
 222:/usr/local/include/python3.8/object.h **** 
 223:/usr/local/include/python3.8/object.h **** /* Generic operations on objects */
 224:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Repr(PyObject *);
 225:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Str(PyObject *);
 226:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_ASCII(PyObject *);
 227:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Bytes(PyObject *);
 228:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_RichCompare(PyObject *, PyObject *, int);
 229:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_RichCompareBool(PyObject *, PyObject *, int);
 230:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttrString(PyObject *, const char *);
 231:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttrString(PyObject *, const char *, PyObject *);
 232:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttrString(PyObject *, const char *);
 233:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GetAttr(PyObject *, PyObject *);
 234:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_SetAttr(PyObject *, PyObject *, PyObject *);
 235:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_HasAttr(PyObject *, PyObject *);
 236:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_SelfIter(PyObject *);
 237:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_GenericGetAttr(PyObject *, PyObject *);
 238:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetAttr(PyObject *,
 239:/usr/local/include/python3.8/object.h ****                                               PyObject *, PyObject *);
 240:/usr/local/include/python3.8/object.h **** #if !defined(Py_LIMITED_API) || Py_LIMITED_API+0 >= 0x03030000
 241:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_GenericSetDict(PyObject *, PyObject *, void *);
 242:/usr/local/include/python3.8/object.h **** #endif
 243:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_Hash(PyObject *);
 244:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_hash_t) PyObject_HashNotImplemented(PyObject *);
 245:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
 246:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyObject_Not(PyObject *);
 247:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) PyCallable_Check(PyObject *);
 248:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) PyObject_ClearWeakRefs(PyObject *);
 249:/usr/local/include/python3.8/object.h **** 
 250:/usr/local/include/python3.8/object.h **** /* PyObject_Dir(obj) acts like Python builtins.dir(obj), returning a
 251:/usr/local/include/python3.8/object.h ****    list of strings.  PyObject_Dir(NULL) is like builtins.dir(),
 252:/usr/local/include/python3.8/object.h ****    returning the names of the current locals.  In this case, if there are
 253:/usr/local/include/python3.8/object.h ****    no current locals, NULL is returned, and PyErr_Occurred() is false.
 254:/usr/local/include/python3.8/object.h **** */
 255:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(PyObject *) PyObject_Dir(PyObject *);
 256:/usr/local/include/python3.8/object.h **** 
 257:/usr/local/include/python3.8/object.h **** 
 258:/usr/local/include/python3.8/object.h **** /* Helpers for printing recursive container types */
 259:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) Py_ReprEnter(PyObject *);
 260:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) Py_ReprLeave(PyObject *);
 261:/usr/local/include/python3.8/object.h **** 
 262:/usr/local/include/python3.8/object.h **** /* Flag bits for printing: */
 263:/usr/local/include/python3.8/object.h **** #define Py_PRINT_RAW    1       /* No string quotes etc. */
 264:/usr/local/include/python3.8/object.h **** 
 265:/usr/local/include/python3.8/object.h **** /*
 266:/usr/local/include/python3.8/object.h **** Type flags (tp_flags)
 267:/usr/local/include/python3.8/object.h **** 
 268:/usr/local/include/python3.8/object.h **** These flags are used to change expected features and behavior for a
 269:/usr/local/include/python3.8/object.h **** particular type.
 270:/usr/local/include/python3.8/object.h **** 
 271:/usr/local/include/python3.8/object.h **** Arbitration of the flag bit positions will need to be coordinated among
 272:/usr/local/include/python3.8/object.h **** all extension writers who publicly release their extensions (this will
 273:/usr/local/include/python3.8/object.h **** be fewer than you might expect!).
 274:/usr/local/include/python3.8/object.h **** 
 275:/usr/local/include/python3.8/object.h **** Most flags were removed as of Python 3.0 to make room for new flags.  (Some
 276:/usr/local/include/python3.8/object.h **** flags are not for backwards compatibility but to indicate the presence of an
 277:/usr/local/include/python3.8/object.h **** optional feature; these flags remain of course.)
 278:/usr/local/include/python3.8/object.h **** 
 279:/usr/local/include/python3.8/object.h **** Type definitions should use Py_TPFLAGS_DEFAULT for their tp_flags value.
 280:/usr/local/include/python3.8/object.h **** 
 281:/usr/local/include/python3.8/object.h **** Code can use PyType_HasFeature(type_ob, flag_value) to test whether the
 282:/usr/local/include/python3.8/object.h **** given type object has a specified feature.
 283:/usr/local/include/python3.8/object.h **** */
 284:/usr/local/include/python3.8/object.h **** 
 285:/usr/local/include/python3.8/object.h **** /* Set if the type object is dynamically allocated */
 286:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HEAPTYPE (1UL << 9)
 287:/usr/local/include/python3.8/object.h **** 
 288:/usr/local/include/python3.8/object.h **** /* Set if the type allows subclassing */
 289:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASETYPE (1UL << 10)
 290:/usr/local/include/python3.8/object.h **** 
 291:/usr/local/include/python3.8/object.h **** /* Set if the type implements the vectorcall protocol (PEP 590) */
 292:/usr/local/include/python3.8/object.h **** #ifndef Py_LIMITED_API
 293:/usr/local/include/python3.8/object.h **** #define _Py_TPFLAGS_HAVE_VECTORCALL (1UL << 11)
 294:/usr/local/include/python3.8/object.h **** #endif
 295:/usr/local/include/python3.8/object.h **** 
 296:/usr/local/include/python3.8/object.h **** /* Set if the type is 'ready' -- fully initialized */
 297:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READY (1UL << 12)
 298:/usr/local/include/python3.8/object.h **** 
 299:/usr/local/include/python3.8/object.h **** /* Set while the type is being 'readied', to prevent recursive ready calls */
 300:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_READYING (1UL << 13)
 301:/usr/local/include/python3.8/object.h **** 
 302:/usr/local/include/python3.8/object.h **** /* Objects support garbage collection (see objimpl.h) */
 303:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_GC (1UL << 14)
 304:/usr/local/include/python3.8/object.h **** 
 305:/usr/local/include/python3.8/object.h **** /* These two bits are preserved for Stackless Python, next after this is 17 */
 306:/usr/local/include/python3.8/object.h **** #ifdef STACKLESS
 307:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION (3UL << 15)
 308:/usr/local/include/python3.8/object.h **** #else
 309:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_STACKLESS_EXTENSION 0
 310:/usr/local/include/python3.8/object.h **** #endif
 311:/usr/local/include/python3.8/object.h **** 
 312:/usr/local/include/python3.8/object.h **** /* Objects behave like an unbound method */
 313:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_METHOD_DESCRIPTOR (1UL << 17)
 314:/usr/local/include/python3.8/object.h **** 
 315:/usr/local/include/python3.8/object.h **** /* Objects support type attribute cache */
 316:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_VERSION_TAG   (1UL << 18)
 317:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_VALID_VERSION_TAG  (1UL << 19)
 318:/usr/local/include/python3.8/object.h **** 
 319:/usr/local/include/python3.8/object.h **** /* Type is abstract and cannot be instantiated */
 320:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_IS_ABSTRACT (1UL << 20)
 321:/usr/local/include/python3.8/object.h **** 
 322:/usr/local/include/python3.8/object.h **** /* These flags are used to determine if a type is a subclass. */
 323:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LONG_SUBCLASS        (1UL << 24)
 324:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_LIST_SUBCLASS        (1UL << 25)
 325:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TUPLE_SUBCLASS       (1UL << 26)
 326:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BYTES_SUBCLASS       (1UL << 27)
 327:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_UNICODE_SUBCLASS     (1UL << 28)
 328:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DICT_SUBCLASS        (1UL << 29)
 329:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_BASE_EXC_SUBCLASS    (1UL << 30)
 330:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_TYPE_SUBCLASS        (1UL << 31)
 331:/usr/local/include/python3.8/object.h **** 
 332:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_DEFAULT  ( \
 333:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_STACKLESS_EXTENSION | \
 334:/usr/local/include/python3.8/object.h ****                  Py_TPFLAGS_HAVE_VERSION_TAG | \
 335:/usr/local/include/python3.8/object.h ****                 0)
 336:/usr/local/include/python3.8/object.h **** 
 337:/usr/local/include/python3.8/object.h **** /* NOTE: The following flags reuse lower bits (removed as part of the
 338:/usr/local/include/python3.8/object.h ****  * Python 3.0 transition). */
 339:/usr/local/include/python3.8/object.h **** 
 340:/usr/local/include/python3.8/object.h **** /* The following flag is kept for compatibility.  Starting with 3.8,
 341:/usr/local/include/python3.8/object.h ****  * binary compatibility of C extensions accross feature releases of
 342:/usr/local/include/python3.8/object.h ****  * Python is not supported anymore, except when using the stable ABI.
 343:/usr/local/include/python3.8/object.h ****  */
 344:/usr/local/include/python3.8/object.h **** 
 345:/usr/local/include/python3.8/object.h **** /* Type structure has tp_finalize member (3.4) */
 346:/usr/local/include/python3.8/object.h **** #define Py_TPFLAGS_HAVE_FINALIZE (1UL << 0)
 347:/usr/local/include/python3.8/object.h **** 
 348:/usr/local/include/python3.8/object.h **** #ifdef Py_LIMITED_API
 349:/usr/local/include/python3.8/object.h **** #  define PyType_HasFeature(t,f)  ((PyType_GetFlags(t) & (f)) != 0)
 350:/usr/local/include/python3.8/object.h **** #endif
 351:/usr/local/include/python3.8/object.h **** #define PyType_FastSubclass(t,f)  PyType_HasFeature(t,f)
 352:/usr/local/include/python3.8/object.h **** 
 353:/usr/local/include/python3.8/object.h **** 
 354:/usr/local/include/python3.8/object.h **** /*
 355:/usr/local/include/python3.8/object.h **** The macros Py_INCREF(op) and Py_DECREF(op) are used to increment or decrement
 356:/usr/local/include/python3.8/object.h **** reference counts.  Py_DECREF calls the object's deallocator function when
 357:/usr/local/include/python3.8/object.h **** the refcount falls to 0; for
 358:/usr/local/include/python3.8/object.h **** objects that don't contain references to other objects or heap memory
 359:/usr/local/include/python3.8/object.h **** this can be the standard function free().  Both macros can be used
 360:/usr/local/include/python3.8/object.h **** wherever a void expression is allowed.  The argument must not be a
 361:/usr/local/include/python3.8/object.h **** NULL pointer.  If it may be NULL, use Py_XINCREF/Py_XDECREF instead.
 362:/usr/local/include/python3.8/object.h **** The macro _Py_NewReference(op) initialize reference counts to 1, and
 363:/usr/local/include/python3.8/object.h **** in special builds (Py_REF_DEBUG, Py_TRACE_REFS) performs additional
 364:/usr/local/include/python3.8/object.h **** bookkeeping appropriate to the special build.
 365:/usr/local/include/python3.8/object.h **** 
 366:/usr/local/include/python3.8/object.h **** We assume that the reference count field can never overflow; this can
 367:/usr/local/include/python3.8/object.h **** be proven when the size of the field is the same as the pointer size, so
 368:/usr/local/include/python3.8/object.h **** we ignore the possibility.  Provided a C int is at least 32 bits (which
 369:/usr/local/include/python3.8/object.h **** is implicitly assumed in many parts of this code), that's enough for
 370:/usr/local/include/python3.8/object.h **** about 2**31 references to an object.
 371:/usr/local/include/python3.8/object.h **** 
 372:/usr/local/include/python3.8/object.h **** XXX The following became out of date in Python 2.2, but I'm not sure
 373:/usr/local/include/python3.8/object.h **** XXX what the full truth is now.  Certainly, heap-allocated type objects
 374:/usr/local/include/python3.8/object.h **** XXX can and should be deallocated.
 375:/usr/local/include/python3.8/object.h **** Type objects should never be deallocated; the type pointer in an object
 376:/usr/local/include/python3.8/object.h **** is not considered to be a reference to the type object, to save
 377:/usr/local/include/python3.8/object.h **** complications in the deallocation function.  (This is actually a
 378:/usr/local/include/python3.8/object.h **** decision that's up to the implementer of each new type so if you want,
 379:/usr/local/include/python3.8/object.h **** you can count such references to the type object.)
 380:/usr/local/include/python3.8/object.h **** */
 381:/usr/local/include/python3.8/object.h **** 
 382:/usr/local/include/python3.8/object.h **** /* First define a pile of simple helper macros, one set per special
 383:/usr/local/include/python3.8/object.h ****  * build symbol.  These either expand to the obvious things, or to
 384:/usr/local/include/python3.8/object.h ****  * nothing at all when the special mode isn't in effect.  The main
 385:/usr/local/include/python3.8/object.h ****  * macros can later be defined just once then, yet expand to different
 386:/usr/local/include/python3.8/object.h ****  * things depending on which special build options are and aren't in effect.
 387:/usr/local/include/python3.8/object.h ****  * Trust me <wink>:  while painful, this is 20x easier to understand than,
 388:/usr/local/include/python3.8/object.h ****  * e.g, defining _Py_NewReference five different times in a maze of nested
 389:/usr/local/include/python3.8/object.h ****  * #ifdefs (we used to do that -- it was impenetrable).
 390:/usr/local/include/python3.8/object.h ****  */
 391:/usr/local/include/python3.8/object.h **** #ifdef Py_REF_DEBUG
 392:/usr/local/include/python3.8/object.h **** PyAPI_DATA(Py_ssize_t) _Py_RefTotal;
 393:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NegativeRefcount(const char *filename, int lineno,
 394:/usr/local/include/python3.8/object.h ****                                       PyObject *op);
 395:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(Py_ssize_t) _Py_GetRefTotal(void);
 396:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL        _Py_RefTotal++
 397:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL        _Py_RefTotal--
 398:/usr/local/include/python3.8/object.h **** 
 399:/usr/local/include/python3.8/object.h **** /* Py_REF_DEBUG also controls the display of refcounts and memory block
 400:/usr/local/include/python3.8/object.h ****  * allocations at the interactive prompt and at interpreter shutdown
 401:/usr/local/include/python3.8/object.h ****  */
 402:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _PyDebug_PrintTotalRefs(void);
 403:/usr/local/include/python3.8/object.h **** #else
 404:/usr/local/include/python3.8/object.h **** #define _Py_INC_REFTOTAL
 405:/usr/local/include/python3.8/object.h **** #define _Py_DEC_REFTOTAL
 406:/usr/local/include/python3.8/object.h **** #endif /* Py_REF_DEBUG */
 407:/usr/local/include/python3.8/object.h **** 
 408:/usr/local/include/python3.8/object.h **** #ifdef COUNT_ALLOCS
 409:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_inc_count(struct _typeobject *);
 410:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_dec_count(struct _typeobject *);
 411:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)    _Py_inc_count(Py_TYPE(OP))
 412:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)     _Py_dec_count(Py_TYPE(OP))
 413:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)     Py_TYPE(OP)->tp_frees--
 414:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA  ,
 415:/usr/local/include/python3.8/object.h **** #else
 416:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPALLOCS(OP)
 417:/usr/local/include/python3.8/object.h **** #define _Py_INC_TPFREES(OP)
 418:/usr/local/include/python3.8/object.h **** #define _Py_DEC_TPFREES(OP)
 419:/usr/local/include/python3.8/object.h **** #define _Py_COUNT_ALLOCS_COMMA
 420:/usr/local/include/python3.8/object.h **** #endif /* COUNT_ALLOCS */
 421:/usr/local/include/python3.8/object.h **** 
 422:/usr/local/include/python3.8/object.h **** /* Update the Python traceback of an object. This function must be called
 423:/usr/local/include/python3.8/object.h ****    when a memory block is reused from a free list. */
 424:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(int) _PyTraceMalloc_NewReference(PyObject *op);
 425:/usr/local/include/python3.8/object.h **** 
 426:/usr/local/include/python3.8/object.h **** #ifdef Py_TRACE_REFS
 427:/usr/local/include/python3.8/object.h **** /* Py_TRACE_REFS is such major surgery that we call external routines. */
 428:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_NewReference(PyObject *);
 429:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_ForgetReference(PyObject *);
 430:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferences(FILE *);
 431:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_PrintReferenceAddresses(FILE *);
 432:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_AddToAllObjects(PyObject *, int force);
 433:/usr/local/include/python3.8/object.h **** #else
 434:/usr/local/include/python3.8/object.h **** /* Without Py_TRACE_REFS, there's little enough to do that we expand code
 435:/usr/local/include/python3.8/object.h ****    inline. */
 436:/usr/local/include/python3.8/object.h **** static inline void _Py_NewReference(PyObject *op)
 437:/usr/local/include/python3.8/object.h **** {
 438:/usr/local/include/python3.8/object.h ****     if (_Py_tracemalloc_config.tracing) {
 439:/usr/local/include/python3.8/object.h ****         _PyTraceMalloc_NewReference(op);
 440:/usr/local/include/python3.8/object.h ****     }
 441:/usr/local/include/python3.8/object.h ****     _Py_INC_TPALLOCS(op);
 442:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 443:/usr/local/include/python3.8/object.h ****     Py_REFCNT(op) = 1;
 444:/usr/local/include/python3.8/object.h **** }
 445:/usr/local/include/python3.8/object.h **** 
 446:/usr/local/include/python3.8/object.h **** static inline void _Py_ForgetReference(PyObject *op)
 447:/usr/local/include/python3.8/object.h **** {
 448:/usr/local/include/python3.8/object.h ****     (void)op; /* may be unused, shut up -Wunused-parameter */
 449:/usr/local/include/python3.8/object.h ****     _Py_INC_TPFREES(op);
 450:/usr/local/include/python3.8/object.h **** }
 451:/usr/local/include/python3.8/object.h **** #endif /* !Py_TRACE_REFS */
 452:/usr/local/include/python3.8/object.h **** 
 453:/usr/local/include/python3.8/object.h **** 
 454:/usr/local/include/python3.8/object.h **** PyAPI_FUNC(void) _Py_Dealloc(PyObject *);
 455:/usr/local/include/python3.8/object.h **** 
 456:/usr/local/include/python3.8/object.h **** static inline void _Py_INCREF(PyObject *op)
 2544              		.loc 2 456 20 view .LVU637
 2545              	.LBB36:
 457:/usr/local/include/python3.8/object.h **** {
 458:/usr/local/include/python3.8/object.h ****     _Py_INC_REFTOTAL;
 2546              		.loc 2 458 21 view .LVU638
 459:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2547              		.loc 2 459 5 view .LVU639
 2548              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2549              		.loc 2 459 18 is_stmt 0 view .LVU640
 2550 0b90 38309FE5 		ldr	r3, .L157	@ tmp126,
 2551              	.LBE36:
 2552              	.LBE35:
 2553              	@ armwave.c:528:     Py_RETURN_TRUE;
 2554              		.loc 1 528 5 view .LVU641
 2555 0b94 0300A0E1 		mov	r0, r3	@ <retval>, tmp126
 2556              	.LBB38:
 2557              	.LBB37:
 2558              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2559              		.loc 2 459 18 view .LVU642
 2560 0b98 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2561 0b9c 012082E2 		add	r2, r2, #1	@ tmp128, MEM[(Py_ssize_t *)&_Py_TrueStruct],
 2562 0ba0 002083E5 		str	r2, [r3]	@ tmp128,
 2563              	.LBE37:
 2564              	.LBE38:
 2565              	@ armwave.c:529: }
 529:armwave.c     **** }
 2566              		.loc 1 529 1 view .LVU643
 2567 0ba4 34D08DE2 		add	sp, sp, #52	@,,
 2568              		.cfi_remember_state
 2569              		.cfi_def_cfa_offset 4
 2570              		@ sp needed	@
 2571 0ba8 04F09DE4 		ldr	pc, [sp], #4	@
 2572              	.LVL163:
 2573              	.L156:
 2574              		.cfi_restore_state
 516:armwave.c     ****         Py_RETURN_FALSE;
 2575              		.loc 1 516 9 is_stmt 1 view .LVU644
 2576 0bac 20009FE5 		ldr	r0, .L157+4	@,
 2577              	.LVL164:
 516:armwave.c     ****         Py_RETURN_FALSE;
 2578              		.loc 1 516 9 is_stmt 0 view .LVU645
 2579 0bb0 FEFFFFEB 		bl	puts		@
 2580              	.LVL165:
 517:armwave.c     ****     }
 2581              		.loc 1 517 9 is_stmt 1 view .LVU646
 2582              	.LBB39:
 2583              	.LBI39:
 456:/usr/local/include/python3.8/object.h **** {
 2584              		.loc 2 456 20 view .LVU647
 2585              	.LBB40:
 458:/usr/local/include/python3.8/object.h ****     op->ob_refcnt++;
 2586              		.loc 2 458 21 view .LVU648
 2587              		.loc 2 459 5 view .LVU649
 2588              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2589              		.loc 2 459 18 is_stmt 0 view .LVU650
 2590 0bb4 1C309FE5 		ldr	r3, .L157+8	@ tmp120,
 2591              	.LBE40:
 2592              	.LBE39:
 2593              	@ armwave.c:517:         Py_RETURN_FALSE;
 517:armwave.c     ****     }
 2594              		.loc 1 517 9 view .LVU651
 2595 0bb8 0300A0E1 		mov	r0, r3	@ <retval>, tmp120
 2596              	.LBB42:
 2597              	.LBB41:
 2598              	@ /usr/local/include/python3.8/object.h:459:     op->ob_refcnt++;
 2599              		.loc 2 459 18 view .LVU652
 2600 0bbc 002093E5 		ldr	r2, [r3]	@ MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2601 0bc0 012082E2 		add	r2, r2, #1	@ tmp122, MEM[(Py_ssize_t *)&_Py_FalseStruct],
 2602 0bc4 002083E5 		str	r2, [r3]	@ tmp122,
 2603              	.LBE41:
 2604              	.LBE42:
 2605              	@ armwave.c:529: }
 2606              		.loc 1 529 1 view .LVU653
 2607 0bc8 34D08DE2 		add	sp, sp, #52	@,,
 2608              		.cfi_def_cfa_offset 4
 2609              		@ sp needed	@
 2610 0bcc 04F09DE4 		ldr	pc, [sp], #4	@
 2611              	.L158:
 2612              		.align	2
 2613              	.L157:
 2614 0bd0 00000000 		.word	_Py_TrueStruct
 2615 0bd4 4C020000 		.word	.LC20
 2616 0bd8 00000000 		.word	_Py_FalseStruct
 2617              		.cfi_endproc
 2618              	.LFE74:
 2620              		.align	2
 2621              		.global	armwave_test_create_am_sine
 2622              		.syntax unified
 2623              		.arm
 2624              		.fpu vfp
 2626              	armwave_test_create_am_sine:
 2627              	.LVL166:
 2628              	.LFB75:
 530:armwave.c     **** 
 531:armwave.c     **** /*
 532:armwave.c     ****  * Make a test AM waveform for render tests.
 533:armwave.c     ****  *
 534:armwave.c     ****  * @param   mod                     modulation depth
 535:armwave.c     ****  * @param   noise_fraction          typically 1e-6
 536:armwave.c     ****  * @param   number of wave sets     1-N, must have memory for these
 537:armwave.c     ****  */
 538:armwave.c     **** void armwave_test_create_am_sine(float mod, float noise_fraction, int sets)
 539:armwave.c     **** {
 2629              		.loc 1 539 1 is_stmt 1 view -0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 8
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 540:armwave.c     ****     float v, noise, xnoise, mod_val;
 2633              		.loc 1 540 5 view .LVU655
 541:armwave.c     ****     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2634              		.loc 1 541 5 view .LVU656
 2635              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2636              		.loc 1 539 1 is_stmt 0 view .LVU657
 2637 0bdc F0472DE9 		push	{r4, r5, r6, r7, r8, r9, r10, lr}	@
 2638              		.cfi_def_cfa_offset 32
 2639              		.cfi_offset 4, -32
 2640              		.cfi_offset 5, -28
 2641              		.cfi_offset 6, -24
 2642              		.cfi_offset 7, -20
 2643              		.cfi_offset 8, -16
 2644              		.cfi_offset 9, -12
 2645              		.cfi_offset 10, -8
 2646              		.cfi_offset 14, -4
 2647              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2648              		.loc 1 541 38 view .LVU658
 2649 0be0 7A7A9FED 		vldr.32	s14, .L190	@ tmp180,
 2650              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2651              		.loc 1 541 55 view .LVU659
 2652 0be4 00529FE5 		ldr	r5, .L190+28	@ tmp250,
 2653              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2654              		.loc 1 539 1 view .LVU660
 2655 0be8 0C8B2DED 		vpush.64	{d8, d9, d10, d11, d12, d13}	@
 2656              		.cfi_def_cfa_offset 80
 2657              		.cfi_offset 80, -80
 2658              		.cfi_offset 81, -76
 2659              		.cfi_offset 82, -72
 2660              		.cfi_offset 83, -68
 2661              		.cfi_offset 84, -64
 2662              		.cfi_offset 85, -60
 2663              		.cfi_offset 86, -56
 2664              		.cfi_offset 87, -52
 2665              		.cfi_offset 88, -48
 2666              		.cfi_offset 89, -44
 2667              		.cfi_offset 90, -40
 2668              		.cfi_offset 91, -36
 2669 0bec 0090A0E1 		mov	r9, r0	@ sets, sets
 2670              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 2671              		.loc 1 541 38 view .LVU661
 2672 0bf0 0E7AD5ED 		vldr.32	s15, [r5, #56]	@ int	@ tmp264, g_armwave_state.waves
 2673              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 542:armwave.c     ****     int s, set_offset = 0;
 543:armwave.c     ****     int w, x;
 544:armwave.c     **** 
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_state.wave_stride)
 2674              		.loc 1 545 70 view .LVU662
 2675 0bf4 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2676 0bf8 382095E5 		ldr	r2, [r5, #56]	@ tmp265, g_armwave_state.waves
 2677              	.LBB45:
 2678              	.LBB46:
 2679              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2680              		.loc 1 488 23 view .LVU663
 2681 0bfc 180095E5 		ldr	r0, [r5, #24]	@ _82, g_armwave_state.test_wave_buffer
 2682              	.LVL167:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2683              		.loc 1 488 23 view .LVU664
 2684              	.LBE46:
 2685              	.LBE45:
 2686              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2687              		.loc 1 541 38 view .LVU665
 2688 0c00 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp178, tmp264
 2689              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 2690              		.loc 1 545 70 view .LVU666
 2691 0c04 920303E0 		mul	r3, r2, r3	@ tmp183, tmp265, g_armwave_state.wave_stride
 2692              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2693              		.loc 1 539 1 view .LVU667
 2694 0c08 60BAF0EE 		vmov.f32	s23, s1	@ noise_fraction, noise_fraction
 2695              	.LBB50:
 2696              	.LBB47:
 2697              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2698              		.loc 1 488 7 view .LVU668
 2699 0c0c 000050E3 		cmp	r0, #0	@ _82,
 2700              	.LBE47:
 2701              	.LBE50:
 2702              	@ armwave.c:539: {
 539:armwave.c     ****     float v, noise, xnoise, mod_val;
 2703              		.loc 1 539 1 view .LVU669
 2704 0c10 08D04DE2 		sub	sp, sp, #8	@,,
 2705              		.cfi_def_cfa_offset 88
 2706              	@ armwave.c:546:     g_armwave_state.test_wave_buffer_nsets = sets;
 546:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2707              		.loc 1 546 44 view .LVU670
 2708 0c14 209085E5 		str	r9, [r5, #32]	@ sets, g_armwave_state.test_wave_buffer_nsets
 2709              	@ armwave.c:545:     g_armwave_state.test_wave_buffer_stride = (g_armwave_state.waves * g_armwave_s
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2710              		.loc 1 545 45 view .LVU671
 2711 0c18 1C3085E5 		str	r3, [r5, #28]	@ tmp183, g_armwave_state.test_wave_buffer_stride
 2712              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2713              		.loc 1 541 38 view .LVU672
 2714 0c1c 27DA87EE 		vdiv.f32	s26, s14, s15	@ tmp179, tmp180, tmp178
 2715              	@ armwave.c:541:     float _1_waves_mod = mod * (1.0f / g_armwave_state.waves);
 541:armwave.c     ****     int s, set_offset = 0;
 2716              		.loc 1 541 11 view .LVU673
 2717 0c20 00DA2DEE 		vmul.f32	s26, s26, s0	@ _1_waves_mod, tmp179, mod
 2718              	.LVL168:
 542:armwave.c     ****     int w, x;
 2719              		.loc 1 542 5 is_stmt 1 view .LVU674
 543:armwave.c     **** 
 2720              		.loc 1 543 5 view .LVU675
 545:armwave.c     ****     g_armwave_state.test_wave_buffer_nsets = sets;
 2721              		.loc 1 545 5 view .LVU676
 2722              		.loc 1 546 5 view .LVU677
 547:armwave.c     ****     armwave_test_buffer_alloc(sets);
 2723              		.loc 1 547 5 view .LVU678
 2724              	.LBB51:
 2725              	.LBI45:
 486:armwave.c     **** {
 2726              		.loc 1 486 6 view .LVU679
 2727              	.LBB48:
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2728              		.loc 1 488 5 view .LVU680
 2729              	@ armwave.c:488:     if(g_armwave_state.test_wave_buffer != NULL) {
 488:armwave.c     ****         free(g_armwave_state.test_wave_buffer);
 2730              		.loc 1 488 7 is_stmt 0 view .LVU681
 2731 0c24 0000000A 		beq	.L160		@,
 489:armwave.c     ****     }
 2732              		.loc 1 489 9 is_stmt 1 view .LVU682
 2733 0c28 FEFFFFEB 		bl	free		@
 2734              	.LVL169:
 2735              	.L160:
 494:armwave.c     **** 
 2736              		.loc 1 494 5 view .LVU683
 2737              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2738              		.loc 1 494 75 is_stmt 0 view .LVU684
 2739 0c2c 4C3095E5 		ldr	r3, [r5, #76]	@ g_armwave_state.wave_length, g_armwave_state.wave_length
 2740 0c30 3C4095E5 		ldr	r4, [r5, #60]	@ g_armwave_state.waves_max, g_armwave_state.waves_max
 2741              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2742              		.loc 1 494 40 view .LVU685
 2743 0c34 0910A0E1 		mov	r1, r9	@, sets
 2744              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2745              		.loc 1 494 75 view .LVU686
 2746 0c38 940304E0 		mul	r4, r4, r3	@ _85, g_armwave_state.waves_max, g_armwave_state.wave_length
 2747              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2748              		.loc 1 494 40 view .LVU687
 2749 0c3c 0400A0E1 		mov	r0, r4	@, _85
 2750 0c40 FEFFFFEB 		bl	calloc		@
 2751              	.LVL170:
 2752              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2753              		.loc 1 496 7 view .LVU688
 2754 0c44 000050E3 		cmp	r0, #0	@ tmp191,
 2755              	@ armwave.c:494:     g_armwave_state.test_wave_buffer = calloc(g_armwave_state.wave_length * g_armw
 494:armwave.c     **** 
 2756              		.loc 1 494 38 view .LVU689
 2757 0c48 180085E5 		str	r0, [r5, #24]	@ tmp191, g_armwave_state.test_wave_buffer
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2758              		.loc 1 496 5 is_stmt 1 view .LVU690
 2759              	@ armwave.c:496:     if(g_armwave_state.test_wave_buffer == NULL) {
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2760              		.loc 1 496 7 is_stmt 0 view .LVU691
 2761 0c4c 5A00000A 		beq	.L189		@,
 2762              	.L161:
 2763              	.LVL171:
 496:armwave.c     ****         printf("armwave_test_buffer_alloc: failed to allocate test wave buffer (%d bytes, %d sets)\
 2764              		.loc 1 496 7 view .LVU692
 2765              	.LBE48:
 2766              	.LBE51:
 2767              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 548:armwave.c     **** 
 549:armwave.c     ****     for(s = 0; s < sets; s++) {
 2768              		.loc 1 549 5 discriminator 1 view .LVU693
 2769 0c50 000059E3 		cmp	r9, #0	@ sets,
 2770 0c54 550000DA 		ble	.L159		@,
 2771              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 551:armwave.c     ****     
 552:armwave.c     ****         for(w = 0; w < g_armwave_state.waves; w++) {
 553:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 554:armwave.c     ****             mod_val = 0.5f + (_1_waves_mod * w);
 555:armwave.c     **** 
 556:armwave.c     ****             for(x = 0; x < g_armwave_state.wave_length; x++) {
 557:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 558:armwave.c     ****                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 560:armwave.c     ****                 noise *= noise;
 561:armwave.c     **** 
 562:armwave.c     ****                 if((rand() & 0xffff) > 0x7fff)
 563:armwave.c     ****                     noise = -noise;
 564:armwave.c     **** 
 565:armwave.c     ****                 noise += 1.0f;
 566:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 567:armwave.c     **** 
 568:armwave.c     ****                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoise) * mod_val) * 
 2772              		.loc 1 568 45 view .LVU694
 2773 0c58 5C8A9FED 		vldr.32	s16, .L190	@ tmp258,
 2774              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 569:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 570:armwave.c     ****                 //printf("%d = %d\n", x + (w * g_armwave_state.wave_stride), MIN(MAX(128 + (v * 127
 571:armwave.c     ****                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride) + set_offset
 2775              		.loc 1 571 104 view .LVU695
 2776 0c5c 5CCA9FED 		vldr.32	s24, .L190+4	@ tmp259,
 2777              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2778              		.loc 1 549 5 view .LVU696
 2779 0c60 0070A0E3 		mov	r7, #0	@ set_offset,
 2780              	@ armwave.c:550:         printf("Calculating test set %d\n", s);
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2781              		.loc 1 550 9 view .LVU697
 2782 0c64 84A19FE5 		ldr	r10, .L190+32	@ tmp257,
 2783              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 2784              		.loc 1 549 5 view .LVU698
 2785 0c68 0780A0E1 		mov	r8, r7	@ s, set_offset
 2786              	.LVL172:
 2787              	.L162:
 550:armwave.c     ****         printf("Calculating test set %d\n", s);
 2788              		.loc 1 550 9 is_stmt 1 view .LVU699
 2789 0c6c 0810A0E1 		mov	r1, r8	@, s
 2790 0c70 0A00A0E1 		mov	r0, r10	@, tmp257
 2791 0c74 FEFFFFEB 		bl	printf		@
 2792              	.LVL173:
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2793              		.loc 1 552 9 view .LVU700
 2794              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2795              		.loc 1 552 39 is_stmt 0 view .LVU701
 2796 0c78 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2797              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2798              		.loc 1 552 9 view .LVU702
 2799 0c7c 000052E3 		cmp	r2, #0	@ prephitmp_120,
 2800 0c80 450000DA 		ble	.L163		@,
 2801              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2802              		.loc 1 554 21 view .LVU703
 2803 0c84 53CADFED 		vldr.32	s25, .L190+8	@ tmp200,
 2804              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2805              		.loc 1 568 33 view .LVU704
 2806 0c88 53BA9FED 		vldr.32	s22, .L190+12	@ tmp253,
 2807              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2808              		.loc 1 566 24 view .LVU705
 2809 0c8c 53AADFED 		vldr.32	s21, .L190+16	@ tmp254,
 2810 0c90 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2811              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2812              		.loc 1 552 15 view .LVU706
 2813 0c94 0060A0E3 		mov	r6, #0	@ w,
 2814              	.LVL174:
 2815              	.L170:
 554:armwave.c     **** 
 2816              		.loc 1 554 13 is_stmt 1 view .LVU707
 2817              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2818              		.loc 1 554 21 is_stmt 0 view .LVU708
 2819 0c98 906A07EE 		vmov	s15, r6	@ int	@ w, w
 2820 0c9c 6C9AB0EE 		vmov.f32	s18, s25	@ mod_val, tmp200
 2821              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2822              		.loc 1 556 13 view .LVU709
 2823 0ca0 000053E3 		cmp	r3, #0	@ prephitmp_124,
 2824              	@ armwave.c:554:             mod_val = 0.5f + (_1_waves_mod * w);
 554:armwave.c     **** 
 2825              		.loc 1 554 21 view .LVU710
 2826 0ca4 E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp198, w
 2827 0ca8 8D9A07EE 		vmla.f32	s18, s15, s26	@ mod_val, tmp198, _1_waves_mod
 2828              	.LVL175:
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2829              		.loc 1 556 13 is_stmt 1 view .LVU711
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2830              		.loc 1 556 13 is_stmt 0 view .LVU712
 2831 0cac 370000DA 		ble	.L164		@,
 2832 0cb0 C99AB7EE 		vcvt.f64.f32	d9, s18	@ tmp249, mod_val
 2833              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2834              		.loc 1 571 113 view .LVU713
 2835 0cb4 4AAA9FED 		vldr.32	s20, .L190+20	@ tmp229,
 2836 0cb8 4A8ADFED 		vldr.32	s17, .L190+24	@ tmp230,
 2837              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2838              		.loc 1 556 19 view .LVU714
 2839 0cbc 0040A0E3 		mov	r4, #0	@ x,
 2840              	.LVL176:
 2841              	.L169:
 557:armwave.c     ****                 noise *= noise;
 2842              		.loc 1 557 17 is_stmt 1 view .LVU715
 2843              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2844              		.loc 1 557 28 is_stmt 0 view .LVU716
 2845 0cc0 FEFFFFEB 		bl	rand		@
 2846              	.LVL177:
 2847              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2848              		.loc 1 557 35 view .LVU717
 2849 0cc4 7000FFE6 		uxth	r0, r0	@ tmp201,
 2850              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2851              		.loc 1 557 45 view .LVU718
 2852 0cc8 900A07EE 		vmov	s15, r0	@ int	@ tmp201, tmp201
 2853 0ccc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp203, tmp201
 2854              	@ armwave.c:557:                 noise  = ((rand() & 0xffff) * noise_fraction);
 557:armwave.c     ****                 noise *= noise;
 2855              		.loc 1 557 24 view .LVU719
 2856 0cd0 AB7A67EE 		vmul.f32	s15, s15, s23	@ noise, tmp203, noise_fraction
 2857              	.LVL178:
 558:armwave.c     ****                 noise *= noise;
 2858              		.loc 1 558 17 is_stmt 1 view .LVU720
 2859              	@ armwave.c:558:                 noise *= noise;
 558:armwave.c     ****                 noise *= noise;
 2860              		.loc 1 558 23 is_stmt 0 view .LVU721
 2861 0cd4 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2862              	.LVL179:
 559:armwave.c     ****                 noise *= noise;
 2863              		.loc 1 559 17 is_stmt 1 view .LVU722
 2864              	@ armwave.c:559:                 noise *= noise;
 559:armwave.c     ****                 noise *= noise;
 2865              		.loc 1 559 23 is_stmt 0 view .LVU723
 2866 0cd8 A77A67EE 		vmul.f32	s15, s15, s15	@ noise, noise, noise
 2867              	.LVL180:
 560:armwave.c     **** 
 2868              		.loc 1 560 17 is_stmt 1 view .LVU724
 2869              	@ armwave.c:560:                 noise *= noise;
 560:armwave.c     **** 
 2870              		.loc 1 560 23 is_stmt 0 view .LVU725
 2871 0cdc A7DA67EE 		vmul.f32	s27, s15, s15	@ noise, noise, noise
 2872              	.LVL181:
 562:armwave.c     ****                     noise = -noise;
 2873              		.loc 1 562 17 is_stmt 1 view .LVU726
 2874              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2875              		.loc 1 562 21 is_stmt 0 view .LVU727
 2876 0ce0 FEFFFFEB 		bl	rand		@
 2877              	.LVL182:
 563:armwave.c     **** 
 2878              		.loc 1 563 21 is_stmt 1 view .LVU728
 2879              	@ armwave.c:562:                 if((rand() & 0xffff) > 0x7fff)
 562:armwave.c     ****                     noise = -noise;
 2880              		.loc 1 562 19 is_stmt 0 view .LVU729
 2881 0ce4 020910E3 		tst	r0, #32768	@,
 2882              	@ armwave.c:563:                     noise = -noise;
 563:armwave.c     **** 
 2883              		.loc 1 563 27 view .LVU730
 2884 0ce8 6DDAF11E 		vnegne.f32	s27, s27	@ noise, noise
 2885              	.LVL183:
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2886              		.loc 1 565 17 is_stmt 1 view .LVU731
 566:armwave.c     **** 
 2887              		.loc 1 566 17 view .LVU732
 2888              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2889              		.loc 1 566 27 is_stmt 0 view .LVU733
 2890 0cec FEFFFFEB 		bl	rand		@
 2891              	.LVL184:
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2892              		.loc 1 568 17 is_stmt 1 view .LVU734
 2893              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2894              		.loc 1 568 45 is_stmt 0 view .LVU735
 2895 0cf0 137A95ED 		vldr.32	s14, [r5, #76]	@ int	@ tmp270, g_armwave_state.wave_length
 2896              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2897              		.loc 1 568 33 view .LVU736
 2898 0cf4 904A07EE 		vmov	s15, r4	@ int	@ x, x
 2899              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2900              		.loc 1 568 45 view .LVU737
 2901 0cf8 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp206, tmp270
 2902              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2903              		.loc 1 568 33 view .LVU738
 2904 0cfc E77AF8EE 		vcvt.f32.s32	s15, s15	@ tmp210, x
 2905              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2906              		.loc 1 568 45 view .LVU739
 2907 0d00 076AC8EE 		vdiv.f32	s13, s16, s14	@ tmp208, tmp258, tmp206
 2908              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2909              		.loc 1 568 33 view .LVU740
 2910 0d04 8B7A67EE 		vmul.f32	s15, s15, s22	@ tmp211, tmp210, tmp253
 2911              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2912              		.loc 1 566 34 view .LVU741
 2913 0d08 7000FFE6 		uxth	r0, r0	@ tmp214,
 2914              	.LVL185:
 2915              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2916              		.loc 1 566 44 view .LVU742
 2917 0d0c 100A07EE 		vmov	s14, r0	@ int	@ tmp214, tmp214
 2918 0d10 C77AB8EE 		vcvt.f32.s32	s14, s14	@ tmp216, tmp214
 2919              	@ armwave.c:566:                 xnoise = (rand() & 0xffff) / 6553500.0f;
 566:armwave.c     **** 
 2920              		.loc 1 566 24 view .LVU743
 2921 0d14 2A0A87EE 		vdiv.f32	s0, s14, s21	@ xnoise, tmp216, tmp254
 2922              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2923              		.loc 1 568 77 view .LVU744
 2924 0d18 A70A06EE 		vmla.f32	s0, s13, s15	@ tmp219, tmp208, tmp211
 2925              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2926              		.loc 1 568 22 view .LVU745
 2927 0d1c C00AB7EE 		vcvt.f64.f32	d0, s0	@, tmp219
 2928 0d20 FEFFFFEB 		bl	sin		@
 2929              	.LVL186:
 2930              		.loc 1 571 17 is_stmt 1 view .LVU746
 2931              	@ armwave.c:565:                 noise += 1.0f;
 565:armwave.c     ****                 xnoise = (rand() & 0xffff) / 6553500.0f;
 2932              		.loc 1 565 23 is_stmt 0 view .LVU747
 2933 0d24 887A7DEE 		vadd.f32	s15, s27, s16	@ noise, noise, tmp258
 2934              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2935              		.loc 1 571 104 view .LVU748
 2936 0d28 0010A0E3 		mov	r1, #0	@ iftmp.22_50,
 2937              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2938              		.loc 1 568 98 view .LVU749
 2939 0d2c E77AB7EE 		vcvt.f64.f32	d7, s15	@ tmp225, noise
 2940              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2941              		.loc 1 568 87 view .LVU750
 2942 0d30 000B29EE 		vmul.f64	d0, d9, d0	@ tmp222, tmp249,
 2943              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2944              		.loc 1 568 98 view .LVU751
 2945 0d34 077B20EE 		vmul.f64	d7, d0, d7	@ tmp226, tmp222, tmp225
 2946              	@ armwave.c:568:                 v = (sin((6.28f * x * (1.0f / g_armwave_state.wave_length)) + xnoi
 568:armwave.c     ****                 //v = ((x & 0xff) / 128.0f) - 1.0f;
 2947              		.loc 1 568 19 view .LVU752
 2948 0d38 C77BB7EE 		vcvt.f32.f64	s14, d7	@ v, tmp226
 2949              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2950              		.loc 1 571 113 view .LVU753
 2951 0d3c 687AF0EE 		vmov.f32	s15, s17	@ _33, tmp230
 2952 0d40 0A7A47EE 		vmla.f32	s15, s14, s20	@ _33, v, tmp229
 2953 0d44 C07AF5EE 		vcmpe.f32	s15, #0	@ _33
 2954 0d48 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2955 0d4c 050000DA 		ble	.L166		@,
 2956              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2957              		.loc 1 571 104 discriminator 1 view .LVU754
 2958 0d50 CC7AF4EE 		vcmpe.f32	s15, s24	@ _33, tmp259
 2959 0d54 FF10A0E3 		mov	r1, #255	@ iftmp.22_50,
 2960 0d58 10FAF1EE 		vmrs	APSR_nzcv, FPSCR
 2961 0d5c E77AFC4E 		vcvtmi.u32.f32	s15, s15	@ tmp234, _33
 2962 0d60 017ACD4D 		vstrmi.32	s15, [sp, #4]	@ int	@ tmp234, %sfp
 2963 0d64 0410DD45 		ldrbmi	r1, [sp, #4]	@ zero_extendqisi2	@ iftmp.22_50, %sfp
 2964              	.L166:
 2965              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2966              		.loc 1 571 57 discriminator 12 view .LVU755
 2967 0d68 342095E5 		ldr	r2, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 2968              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2969              		.loc 1 571 102 discriminator 12 view .LVU756
 2970 0d6c 183095E5 		ldr	r3, [r5, #24]	@ g_armwave_state.test_wave_buffer, g_armwave_state.test_wave_buffer
 2971 0d70 927622E0 		mla	r2, r2, r6, r7	@ tmp241, g_armwave_state.wave_stride, w, set_offset
 2972 0d74 043083E0 		add	r3, r3, r4	@ tmp240, g_armwave_state.test_wave_buffer, x
 2973              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2974              		.loc 1 556 58 discriminator 12 view .LVU757
 2975 0d78 014084E2 		add	r4, r4, #1	@ x, x,
 2976              	.LVL187:
 2977              	@ armwave.c:571:                 g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_str
 2978              		.loc 1 571 102 discriminator 12 view .LVU758
 2979 0d7c 0310C2E7 		strb	r1, [r2, r3]	@ iftmp.22_50, *_40
 2980              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2981              		.loc 1 556 43 discriminator 12 view .LVU759
 2982 0d80 4C3095E5 		ldr	r3, [r5, #76]	@ prephitmp_124, g_armwave_state.wave_length
 2983              	@ armwave.c:556:             for(x = 0; x < g_armwave_state.wave_length; x++) {
 556:armwave.c     ****                 noise  = ((rand() & 0xffff) * noise_fraction);
 2984              		.loc 1 556 13 discriminator 12 view .LVU760
 2985 0d84 040053E1 		cmp	r3, r4	@ prephitmp_124, x
 2986 0d88 CCFFFFCA 		bgt	.L169		@,
 2987 0d8c 382095E5 		ldr	r2, [r5, #56]	@ prephitmp_120, g_armwave_state.waves
 2988              	.LVL188:
 2989              	.L164:
 2990              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2991              		.loc 1 552 48 discriminator 2 view .LVU761
 2992 0d90 016086E2 		add	r6, r6, #1	@ w, w,
 2993              	.LVL189:
 2994              	@ armwave.c:552:         for(w = 0; w < g_armwave_state.waves; w++) {
 552:armwave.c     ****             //mod_val = 0.5f + (((float)w / g_armwave_state.waves) * mod);
 2995              		.loc 1 552 9 discriminator 2 view .LVU762
 2996 0d94 020056E1 		cmp	r6, r2	@ w, prephitmp_120
 2997 0d98 BEFFFFBA 		blt	.L170		@,
 2998              	.LVL190:
 2999              	.L163:
 572:armwave.c     ****             }
 573:armwave.c     ****         }
 574:armwave.c     **** 
 575:armwave.c     ****         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3000              		.loc 1 575 9 is_stmt 1 discriminator 2 view .LVU763
 3001              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3002              		.loc 1 575 46 is_stmt 0 discriminator 2 view .LVU764
 3003 0d9c 343095E5 		ldr	r3, [r5, #52]	@ g_armwave_state.wave_stride, g_armwave_state.wave_stride
 3004              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3005              		.loc 1 549 27 discriminator 2 view .LVU765
 3006 0da0 018088E2 		add	r8, r8, #1	@ s, s,
 3007              	.LVL191:
 3008              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3009              		.loc 1 549 5 discriminator 2 view .LVU766
 3010 0da4 080059E1 		cmp	r9, r8	@ sets, s
 3011              	@ armwave.c:575:         set_offset += (g_armwave_state.waves * g_armwave_state.wave_stride);
 3012              		.loc 1 575 20 discriminator 2 view .LVU767
 3013 0da8 937227E0 		mla	r7, r3, r2, r7	@ set_offset, g_armwave_state.wave_stride, prephitmp_120, set_offset
 3014              	.LVL192:
 3015              	@ armwave.c:549:     for(s = 0; s < sets; s++) {
 549:armwave.c     ****         printf("Calculating test set %d\n", s);
 3016              		.loc 1 549 5 discriminator 2 view .LVU768
 3017 0dac AEFFFF1A 		bne	.L162		@,
 3018              	.LVL193:
 3019              	.L159:
 3020              	@ armwave.c:577: }
 576:armwave.c     ****     }
 577:armwave.c     **** }
 3021              		.loc 1 577 1 view .LVU769
 3022 0db0 08D08DE2 		add	sp, sp, #8	@,,
 3023              		.cfi_remember_state
 3024              		.cfi_def_cfa_offset 80
 3025              		@ sp needed	@
 3026 0db4 0C8BBDEC 		vldm	sp!, {d8-d13}	@,
 3027              		.cfi_restore 90
 3028              		.cfi_restore 91
 3029              		.cfi_restore 88
 3030              		.cfi_restore 89
 3031              		.cfi_restore 86
 3032              		.cfi_restore 87
 3033              		.cfi_restore 84
 3034              		.cfi_restore 85
 3035              		.cfi_restore 82
 3036              		.cfi_restore 83
 3037              		.cfi_restore 80
 3038              		.cfi_restore 81
 3039              		.cfi_def_cfa_offset 32
 3040              	.LVL194:
 3041              		.loc 1 577 1 view .LVU770
 3042 0db8 F087BDE8 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}	@
 3043              	.LVL195:
 3044              	.L189:
 3045              		.cfi_restore_state
 3046              	.LBB52:
 3047              	.LBB49:
 497:armwave.c     ****             g_armwave_state.wave_length * g_armwave_state.waves_max * nsets, nsets);
 3048              		.loc 1 497 9 is_stmt 1 view .LVU771
 3049 0dbc 940901E0 		mul	r1, r4, r9	@, _85, sets
 3050 0dc0 0920A0E1 		mov	r2, r9	@, sets
 3051 0dc4 28009FE5 		ldr	r0, .L190+36	@,
 3052 0dc8 FEFFFFEB 		bl	printf		@
 3053              	.LVL196:
 499:armwave.c     ****     }
 3054              		.loc 1 499 9 view .LVU772
 3055 0dcc 9FFFFFEA 		b	.L161		@
 3056              	.L191:
 3057              		.align	2
 3058              	.L190:
 3059 0dd0 0000803F 		.word	1065353216
 3060 0dd4 00007F43 		.word	1132396544
 3061 0dd8 0000003F 		.word	1056964608
 3062 0ddc C3F5C840 		.word	1086911939
 3063 0de0 38FFC74A 		.word	1254620984
 3064 0de4 0000FE42 		.word	1123942400
 3065 0de8 00000043 		.word	1124073472
 3066 0dec 00000000 		.word	g_armwave_state
 3067 0df0 A0020000 		.word	.LC21
 3068 0df4 F8010000 		.word	.LC19
 3069              	.LBE49:
 3070              	.LBE52:
 3071              		.cfi_endproc
 3072              	.LFE75:
 3074              		.align	2
 3075              		.global	armwave_cleanup
 3076              		.syntax unified
 3077              		.arm
 3078              		.fpu vfp
 3080              	armwave_cleanup:
 3081              	.LFB76:
 578:armwave.c     **** 
 579:armwave.c     **** /*
 580:armwave.c     ****  * Make a test square waveform.
 581:armwave.c     ****  *
 582:armwave.c     ****  * @param   noise_fraction      typically 1e-6
 583:armwave.c     ****  */
 584:armwave.c     **** #if 0
 585:armwave.c     **** void armwave_test_create_square(float noise_fraction)
 586:armwave.c     **** {
 587:armwave.c     ****     uint8_t v;
 588:armwave.c     ****     float noise, xnoise;
 589:armwave.c     ****     float level = 0.8f, new_level = 0.8f;
 590:armwave.c     ****     int w, x;
 591:armwave.c     **** 
 592:armwave.c     ****     for(w = 0; w < g_armwave_state.waves; w++) {
 593:armwave.c     ****         for(x = 0; x < g_armwave_state.wave_length; x++) {
 594:armwave.c     ****             noise  = ((rand() & 0xffff) * noise_fraction);
 595:armwave.c     ****             noise *= noise;
 596:armwave.c     ****             noise *= noise;
 597:armwave.c     ****             noise *= noise;
 598:armwave.c     **** 
 599:armwave.c     ****             if((rand() & 0xff) > 0x7f)
 600:armwave.c     ****                 noise = -noise;
 601:armwave.c     **** 
 602:armwave.c     ****             //noise += 1.0f;
 603:armwave.c     **** 
 604:armwave.c     ****             if(x > (g_armwave_state.wave_length * 0.75f)) {
 605:armwave.c     ****                 new_level = 0.2f;
 606:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.5f)) {
 607:armwave.c     ****                 new_level = 0.8f;
 608:armwave.c     ****             } else if(x > (g_armwave_state.wave_length * 0.25f)) {
 609:armwave.c     ****                 new_level = 0.2f;
 610:armwave.c     ****             } else {
 611:armwave.c     ****                 new_level = 0.8f;
 612:armwave.c     ****             }
 613:armwave.c     **** 
 614:armwave.c     ****             level = ((level * 3) + new_level) * 0.25f;
 615:armwave.c     **** 
 616:armwave.c     ****             v = (uint8_t)(CLAMP(level + noise, 0.0f, 1.0f) * 255);
 617:armwave.c     ****             g_armwave_state.test_wave_buffer[x + (w * g_armwave_state.wave_stride)] = v;
 618:armwave.c     ****         }
 619:armwave.c     ****     }
 620:armwave.c     **** }
 621:armwave.c     **** #endif
 622:armwave.c     **** 
 623:armwave.c     **** /*
 624:armwave.c     ****  * Free all buffers and set to NULL, ready to be reinitialised or stopped.
 625:armwave.c     ****  */
 626:armwave.c     **** void armwave_cleanup()
 627:armwave.c     **** {
 3082              		.loc 1 627 1 view -0
 3083              		.cfi_startproc
 3084              		@ args = 0, pretend = 0, frame = 0
 3085              		@ frame_needed = 0, uses_anonymous_args = 0
 628:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3086              		.loc 1 628 5 view .LVU774
 3087              	@ armwave.c:627: {
 627:armwave.c     ****     free(g_armwave_state.out_pixbuf);
 3088              		.loc 1 627 1 is_stmt 0 view .LVU775
 3089 0df8 10402DE9 		push	{r4, lr}	@
 3090              		.cfi_def_cfa_offset 8
 3091              		.cfi_offset 4, -8
 3092              		.cfi_offset 14, -4
 3093              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 3094              		.loc 1 628 25 view .LVU776
 3095 0dfc 34409FE5 		ldr	r4, .L194	@ tmp114,
 3096              	@ armwave.c:628:     free(g_armwave_state.out_pixbuf);
 3097              		.loc 1 628 5 view .LVU777
 3098 0e00 680094E5 		ldr	r0, [r4, #104]	@, g_armwave_state.out_pixbuf
 3099 0e04 FEFFFFEB 		bl	free		@
 3100              	.LVL197:
 629:armwave.c     ****     free(g_armwave_state.ch1_buffer);
 3101              		.loc 1 629 5 is_stmt 1 view .LVU778
 3102 0e08 040094E5 		ldr	r0, [r4, #4]	@, g_armwave_state.ch1_buffer
 3103 0e0c FEFFFFEB 		bl	free		@
 3104              	.LVL198:
 630:armwave.c     ****     free(g_armwave_state.xcoord_to_xpixel);
 3105              		.loc 1 630 5 view .LVU779
 3106 0e10 840094E5 		ldr	r0, [r4, #132]	@, g_armwave_state.xcoord_to_xpixel
 3107 0e14 FEFFFFEB 		bl	free		@
 3108              	.LVL199:
 631:armwave.c     ****     free(g_armwave_state.test_wave_buffer);
 3109              		.loc 1 631 5 view .LVU780
 3110 0e18 180094E5 		ldr	r0, [r4, #24]	@, g_armwave_state.test_wave_buffer
 3111 0e1c FEFFFFEB 		bl	free		@
 3112              	.LVL200:
 632:armwave.c     **** 
 633:armwave.c     ****     g_armwave_state.out_pixbuf = NULL;
 3113              		.loc 1 633 5 view .LVU781
 3114              	@ armwave.c:633:     g_armwave_state.out_pixbuf = NULL;
 3115              		.loc 1 633 32 is_stmt 0 view .LVU782
 3116 0e20 0030A0E3 		mov	r3, #0	@ tmp123,
 3117 0e24 683084E5 		str	r3, [r4, #104]	@ tmp123, g_armwave_state.out_pixbuf
 634:armwave.c     ****     g_armwave_state.ch1_buffer = NULL;
 3118              		.loc 1 634 5 is_stmt 1 view .LVU783
 3119              	@ armwave.c:634:     g_armwave_state.ch1_buffer = NULL;
 3120              		.loc 1 634 32 is_stmt 0 view .LVU784
 3121 0e28 043084E5 		str	r3, [r4, #4]	@ tmp123, g_armwave_state.ch1_buffer
 635:armwave.c     ****     g_armwave_state.xcoord_to_xpixel = NULL;
 3122              		.loc 1 635 5 is_stmt 1 view .LVU785
 3123              	@ armwave.c:635:     g_armwave_state.xcoord_to_xpixel = NULL;
 3124              		.loc 1 635 38 is_stmt 0 view .LVU786
 3125 0e2c 843084E5 		str	r3, [r4, #132]	@ tmp123, g_armwave_state.xcoord_to_xpixel
 636:armwave.c     ****     g_armwave_state.test_wave_buffer = NULL;
 3126              		.loc 1 636 5 is_stmt 1 view .LVU787
 3127              	@ armwave.c:636:     g_armwave_state.test_wave_buffer = NULL;
 3128              		.loc 1 636 38 is_stmt 0 view .LVU788
 3129 0e30 183084E5 		str	r3, [r4, #24]	@ tmp123, g_armwave_state.test_wave_buffer
 3130              	@ armwave.c:637: }
 637:armwave.c     **** }
 3131              		.loc 1 637 1 view .LVU789
 3132 0e34 1080BDE8 		pop	{r4, pc}	@
 3133              	.L195:
 3134              		.align	2
 3135              	.L194:
 3136 0e38 00000000 		.word	g_armwave_state
 3137              		.cfi_endproc
 3138              	.LFE76:
 3140              		.comm	gamma_table,256,4
 3141              		.comm	g_armwave_state,136,4
 3142              		.section	.rodata
 3143              		.align	2
 3144              		.set	.LANCHOR0,. + 0
 3147              	__PRETTY_FUNCTION__.17095:
 3148 0000 61726D77 		.ascii	"armwave_fill_pixbuf_scaled\000"
 3148      6176655F 
 3148      66696C6C 
 3148      5F706978 
 3148      6275665F 
 3149 001b 00       		.space	1
 3152              	__PRETTY_FUNCTION__.17125:
 3153 001c 61726D77 		.ascii	"armwave_setup_render\000"
 3153      6176655F 
 3153      73657475 
 3153      705F7265 
 3153      6E646572 
 3154 0031 000000   		.space	3
 3157              	__PRETTY_FUNCTION__.17132:
 3158 0034 61726D77 		.ascii	"armwave_set_wave_pointer\000"
 3158      6176655F 
 3158      7365745F 
 3158      77617665 
 3158      5F706F69 
 3159 004d 000000   		.space	3
 3162              	__PRETTY_FUNCTION__.17139:
 3163 0050 61726D77 		.ascii	"armwave_set_wave_pointer_u32\000"
 3163      6176655F 
 3163      7365745F 
 3163      77617665 
 3163      5F706F69 
 3164              		.section	.rodata.str1.4,"aMS",%progbits,1
 3165              		.align	2
 3166              	.LC0:
 3167 0000 76302E30 		.ascii	"v0.0.1\000"
 3167      2E3100
 3168 0007 00       		.space	1
 3169              	.LC1:
 3170 0008 61726D77 		.ascii	"armwave version: %s\012\000"
 3170      61766520 
 3170      76657273 
 3170      696F6E3A 
 3170      2025730A 
 3171 001d 000000   		.space	3
 3172              	.LC2:
 3173 0020 77623D30 		.ascii	"wb=0x%08x b=0x%08x ch1=0x%08x off=%d slice_y=%d hei"
 3173      78253038 
 3173      7820623D 
 3173      30782530 
 3173      38782063 
 3174 0053 6768743D 		.ascii	"ght=%d\012\000"
 3174      25640A00 
 3175 005b 00       		.space	1
 3176              	.LC3:
 3177 005c 61726D77 		.ascii	"armwave.c\000"
 3177      6176652E 
 3177      6300
 3178 0066 0000     		.space	2
 3179              	.LC4:
 3180 0068 6F75745F 		.ascii	"out_buffer != NULL\000"
 3180      62756666 
 3180      65722021 
 3180      3D204E55 
 3180      4C4C00
 3181 007b 00       		.space	1
 3182              	.LC5:
 3183 007c 733D2564 		.ascii	"s=%d e=%d w=%d ws=%d tw=%d th=%d rf=0x%08x\012\000"
 3183      20653D25 
 3183      6420773D 
 3183      25642077 
 3183      733D2564 
 3184              	.LC6:
 3185 00a8 73746172 		.ascii	"start_point < end_point\000"
 3185      745F706F 
 3185      696E7420 
 3185      3C20656E 
 3185      645F706F 
 3186              	.LC7:
 3187 00c0 63685F62 		.ascii	"ch_buff_size=%d, cmp_x_bitdepth_scale=%d (0x%08x)\012"
 3187      7566665F 
 3187      73697A65 
 3187      3D25642C 
 3187      20636D70 
 3188 00f2 00       		.ascii	"\000"
 3189 00f3 00       		.space	1
 3190              	.LC8:
 3191 00f4 675F6172 		.ascii	"g_armwave_state.ch1_buffer != NULL\000"
 3191      6D776176 
 3191      655F7374 
 3191      6174652E 
 3191      6368315F 
 3192 0117 00       		.space	1
 3193              	.LC9:
 3194 0118 675F6172 		.ascii	"g_armwave_state.xcoord_to_xpixel != NULL\000"
 3194      6D776176 
 3194      655F7374 
 3194      6174652E 
 3194      78636F6F 
 3195 0141 000000   		.space	3
 3196              	.LC10:
 3197 0144 50747273 		.ascii	"Ptrs: 0x%08x 0x%08x 0x%08x 0x%08x \012\000"
 3197      3A203078 
 3197      25303878 
 3197      20307825 
 3197      30387820 
 3198              	.LC11:
 3199 0168 77617665 		.ascii	"wave_buffer != NULL\000"
 3199      5F627566 
 3199      66657220 
 3199      213D204E 
 3199      554C4C00 
 3200              	.LC12:
 3201 017c 61726D77 		.ascii	"armwave_set_wave_pointer_as_testbuf: error, nsets e"
 3201      6176655F 
 3201      7365745F 
 3201      77617665 
 3201      5F706F69 
 3202 01af 78636565 		.ascii	"xceeded\000"
 3202      64656400 
 3203 01b7 00       		.space	1
 3204              	.LC13:
 3205 01b8 77617665 		.ascii	"wave_buffer_ptr != 0\000"
 3205      5F627566 
 3205      6665725F 
 3205      70747220 
 3205      213D2030 
 3206 01cd 000000   		.space	3
 3207              	.LC14:
 3208 01d0 776200   		.ascii	"wb\000"
 3209 01d3 00       		.space	1
 3210              	.LC15:
 3211 01d4 50330A00 		.ascii	"P3\012\000"
 3212              	.LC16:
 3213 01d8 25642025 		.ascii	"%d %d\012\000"
 3213      640A00
 3214 01df 00       		.space	1
 3215              	.LC17:
 3216 01e0 3235350A 		.ascii	"255\012\000"
 3216      00
 3217 01e5 000000   		.space	3
 3218              	.LC18:
 3219 01e8 25336420 		.ascii	"%3d %3d %3d\012\000"
 3219      25336420 
 3219      2533640A 
 3219      00
 3220 01f5 000000   		.space	3
 3221              	.LC19:
 3222 01f8 61726D77 		.ascii	"armwave_test_buffer_alloc: failed to allocate test "
 3222      6176655F 
 3222      74657374 
 3222      5F627566 
 3222      6665725F 
 3223 022b 77617665 		.ascii	"wave buffer (%d bytes, %d sets)\012\000"
 3223      20627566 
 3223      66657220 
 3223      28256420 
 3223      62797465 
 3224              	.LC20:
 3225 024c 61726D77 		.ascii	"armwave_fill_pixbuf_into_pybuffer: PyObject_GetBuff"
 3225      6176655F 
 3225      66696C6C 
 3225      5F706978 
 3225      6275665F 
 3226 027f 65722829 		.ascii	"er() failed, returning PyFalse\000"
 3226      20666169 
 3226      6C65642C 
 3226      20726574 
 3226      75726E69 
 3227 029e 0000     		.space	2
 3228              	.LC21:
 3229 02a0 43616C63 		.ascii	"Calculating test set %d\012\000"
 3229      756C6174 
 3229      696E6720 
 3229      74657374 
 3229      20736574 
 3230              		.text
 3231              	.Letext0:
 3232              		.file 3 "/usr/lib/gcc/arm-linux-gnueabihf/8/include/stddef.h"
 3233              		.file 4 "/usr/include/arm-linux-gnueabihf/bits/types.h"
 3234              		.file 5 "/usr/include/arm-linux-gnueabihf/bits/types/struct_FILE.h"
 3235              		.file 6 "/usr/include/arm-linux-gnueabihf/bits/types/FILE.h"
 3236              		.file 7 "/usr/include/stdio.h"
 3237              		.file 8 "/usr/include/arm-linux-gnueabihf/bits/sys_errlist.h"
 3238              		.file 9 "/usr/include/errno.h"
 3239              		.file 10 "/usr/include/arm-linux-gnueabihf/bits/stdint-intn.h"
 3240              		.file 11 "/usr/include/unistd.h"
 3241              		.file 12 "/usr/include/arm-linux-gnueabihf/bits/getopt_core.h"
 3242              		.file 13 "/usr/include/arm-linux-gnueabihf/bits/stdint-uintn.h"
 3243              		.file 14 "/usr/local/include/python3.8/pyport.h"
 3244              		.file 15 "/usr/include/math.h"
 3245              		.file 16 "/usr/include/arm-linux-gnueabihf/sys/time.h"
 3246              		.file 17 "/usr/include/time.h"
 3247              		.file 18 "/usr/local/include/python3.8/pymem.h"
 3248              		.file 19 "/usr/local/include/python3.8/cpython/object.h"
 3249              		.file 20 "/usr/local/include/python3.8/methodobject.h"
 3250              		.file 21 "/usr/local/include/python3.8/descrobject.h"
 3251              		.file 22 "/usr/local/include/python3.8/pyhash.h"
 3252              		.file 23 "/usr/local/include/python3.8/pydebug.h"
 3253              		.file 24 "/usr/local/include/python3.8/bytearrayobject.h"
 3254              		.file 25 "/usr/local/include/python3.8/bytesobject.h"
 3255              		.file 26 "/usr/local/include/python3.8/unicodeobject.h"
 3256              		.file 27 "/usr/local/include/python3.8/cpython/unicodeobject.h"
 3257              		.file 28 "/usr/local/include/python3.8/longintrepr.h"
 3258              		.file 29 "/usr/local/include/python3.8/longobject.h"
 3259              		.file 30 "/usr/local/include/python3.8/boolobject.h"
 3260              		.file 31 "/usr/local/include/python3.8/floatobject.h"
 3261              		.file 32 "/usr/local/include/python3.8/complexobject.h"
 3262              		.file 33 "/usr/local/include/python3.8/rangeobject.h"
 3263              		.file 34 "/usr/local/include/python3.8/memoryobject.h"
 3264              		.file 35 "/usr/local/include/python3.8/tupleobject.h"
 3265              		.file 36 "/usr/local/include/python3.8/listobject.h"
 3266              		.file 37 "/usr/local/include/python3.8/dictobject.h"
 3267              		.file 38 "/usr/local/include/python3.8/odictobject.h"
 3268              		.file 39 "/usr/local/include/python3.8/enumobject.h"
 3269              		.file 40 "/usr/local/include/python3.8/setobject.h"
 3270              		.file 41 "/usr/local/include/python3.8/moduleobject.h"
 3271              		.file 42 "/usr/local/include/python3.8/funcobject.h"
 3272              		.file 43 "/usr/local/include/python3.8/classobject.h"
 3273              		.file 44 "/usr/local/include/python3.8/fileobject.h"
 3274              		.file 45 "/usr/local/include/python3.8/cpython/fileobject.h"
 3275              		.file 46 "/usr/local/include/python3.8/pycapsule.h"
 3276              		.file 47 "/usr/local/include/python3.8/traceback.h"
 3277              		.file 48 "/usr/local/include/python3.8/sliceobject.h"
 3278              		.file 49 "/usr/local/include/python3.8/cellobject.h"
 3279              		.file 50 "/usr/local/include/python3.8/iterobject.h"
 3280              		.file 51 "/usr/local/include/python3.8/pystate.h"
 3281              		.file 52 "/usr/local/include/python3.8/cpython/pystate.h"
 3282              		.file 53 "/usr/local/include/python3.8/genobject.h"
 3283              		.file 54 "/usr/local/include/python3.8/weakrefobject.h"
 3284              		.file 55 "/usr/local/include/python3.8/structseq.h"
 3285              		.file 56 "/usr/local/include/python3.8/namespaceobject.h"
 3286              		.file 57 "/usr/local/include/python3.8/picklebufobject.h"
 3287              		.file 58 "/usr/local/include/python3.8/codecs.h"
 3288              		.file 59 "/usr/local/include/python3.8/pyerrors.h"
 3289              		.file 60 "/usr/local/include/python3.8/context.h"
 3290              		.file 61 "/usr/local/include/python3.8/modsupport.h"
 3291              		.file 62 "/usr/local/include/python3.8/code.h"
 3292              		.file 63 "/usr/local/include/python3.8/pythonrun.h"
 3293              		.file 64 "/usr/local/include/python3.8/ceval.h"
 3294              		.file 65 "/usr/local/include/python3.8/import.h"
 3295              		.file 66 "/usr/local/include/python3.8/bltinmodule.h"
 3296              		.file 67 "/usr/local/include/python3.8/pyctype.h"
 3297              		.file 68 "/usr/include/malloc.h"
 3298              		.file 69 "armwave.h"
 3299              		.file 70 "/usr/include/stdlib.h"
 3300              		.file 71 "/usr/local/include/python3.8/cpython/abstract.h"
 3301              		.file 72 "/usr/include/arm-linux-gnueabihf/bits/mathcalls.h"
 3302              		.file 73 "<built-in>"
 3303              		.file 74 "/usr/include/assert.h"
 3304              		.file 75 "/usr/include/string.h"
